pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
458310970,deps: Upgrade Fresco to recommended version for animated GIFs.,"Upgrades the fresco:animated-gif dependency in 'build.gradle' to
2.0.0 recommended by the official docs [1] to fix animated GIF
support in Android, which was broken after the recent React Native
upgrade.

[1] https://reactnative.dev/docs/0.61/image#gif-and-webp-support-on-android

Fixes: #4212",True,4213,https://api.github.com/repos/zulip/zulip-mobile/pulls/4213,https://github.com/zulip/zulip-mobile/pull/4213,closed,1,1,1,1,1,0,1,0,[{'name': 'P1 high-priority'}],2020-07-29 09:26:28+00:00,2020-07-29 18:17:35+00:00,31867.0,8:51:07,[],"[{'commit_sha': '72b58d50e0d30274546d29611654e51488921f7e', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
457849193,compose box: Show error on sending message when not caught up.,"Check if we are caught up in the current narrow, and if so, show an
error when trying to send a message asking the user to try again
after some time.

This prevents the user from possibly responding to a very old
message when the messages after it have not been loaded yet - this
can lead to the reply being out of context without the sender
realizing it.

Fixes: #3800
",True,4208,https://api.github.com/repos/zulip/zulip-mobile/pulls/4208,https://github.com/zulip/zulip-mobile/pull/4208,closed,21,7,3,4,3,0,1,0,[{'name': 'P1 high-priority'}],2020-07-28 14:29:56+00:00,2020-07-31 06:11:08+00:00,229272.0,"2 days, 15:41:12",[],"[{'commit_sha': '3dcfd81e381f813c3257e2931a773eab828f0053', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90320588638452789be4d96a234ebde71f7af96d', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5ac02d4bd0ec260c63f85c65bbeb2b2eefc193b', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20da7e78356fd393540c14d7cab33444c70d5798', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
443479451,realm screen: Give early error when server URL is an email address.,"Show an error message when the user tries to enter an email in the
server URL input field, even before trying to connect to the
server.

Fixes: #4058
",True,4181,https://api.github.com/repos/zulip/zulip-mobile/pulls/4181,https://github.com/zulip/zulip-mobile/pull/4181,closed,14,7,3,3,3,8,0,0,[],2020-07-02 12:18:11+00:00,2020-07-11 02:16:59+00:00,741528.0,"8 days, 13:58:48","[{'comment_id': 449317737, 'comment_body': '`new WhatwgURL(realm)` will throw an error if `realm` is an invalid URL: https://developer.mozilla.org/en-US/docs/Web/API/URL/URL', 'comment_created': datetime.datetime(2020, 7, 3, 0, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 449317888, 'comment_body': 'Nit: ""credentials"" (also in `messages_en.json`)', 'comment_created': datetime.datetime(2020, 7, 3, 0, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 449321661, 'comment_body': ""I just tested this by hardcoding something wrong for 'realm'. I got this:\r\n\r\n```\r\nPossible Unhandled Promise Rejection (id: 0):\r\nTypeError: Invalid URL: asdf\r\n```\r\n\r\nI don't get a white-screen crash (the error was thrown from a React event handler), but the spinner does go on indefinitely.\r\n\r\nI think the solution is to isolate `new WhatwgUrl(realm)` into its own try/catch block, and, on this error, do a `setState` similar to this one, with an appropriate error message saying it's an invalid URL.\r\n\r\nThen the email can be checked below that."", 'comment_created': datetime.datetime(2020, 7, 3, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 449385395, 'comment_body': 'Ah! Initially, I did add a try-catch for the URL constructor. But then I saw that we already validate the URL in the login button using a regular expression - but I never considered that the form could be submitted by simply tapping the enter key from the keyboard, without needing to touch the button.', 'comment_created': datetime.datetime(2020, 7, 3, 5, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 450508512, 'comment_body': 'This bit can be simplified with `tryParseUrl` (which I added last week for a very similar pattern in #4034 :slightly_smiling_face: )\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 6, 22, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 450512102, 'comment_body': ""This function gets somewhat difficult to follow with all the stuff going on in it now. I think one reason is that the `setState` at the top is setting up the start of a story you basically have to read the whole function to see the different endings of.\r\n\r\nOne thing that would simplify it is to not set `progress: true` until after the realm-parsing is done and those errors haven't happened. That way those don't need to say `progress: false`, and the whole question of the `progress` state is limited to just where we're actually contacting the server, which is what it's for.\r\n\r\nRelatedly, we can cut the line already that sets `realm` in that first `setState`. It's a no-op because we just read `realm` *from* the state. Looks like it's a legacy of an unfinished refactor in 252fed22fa1432e4cf6469423099521ecc3ed7ab -- before then, this line actually set `realm` to a different value than it already had, and so was doing something useful.\r\n\r\nSimilarly to moving the `setState` but smaller: the `const { dispatch } = …` line can wait until just above the `try`.\r\n"", 'comment_created': datetime.datetime(2020, 7, 6, 22, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 450513829, 'comment_body': 'I think most people don\'t know what ""credentials"" means in this context. Someone who enters an email address at the ""Zulip server URL"" prompt is especially unlikely to know what it means :wink:\r\n\r\nSo let\'s just drop that sentence.\r\n\r\n(It\'s also not quite true -- often the next screen will be a menu of options for how to log in. Then the *next* screen after that might involve entering credentials, depending on the auth method chosen.)\r\n', 'comment_created': datetime.datetime(2020, 7, 6, 22, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 450679635, 'comment_body': 'Okay, also, I moved the `error:null` to just above the `try` block too.', 'comment_created': datetime.datetime(2020, 7, 7, 7, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}]","[{'commit_sha': 'a39b93e146c989ac85c7abcab64eba3be0f13fc3', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48f56b6210891d58843301315dba13ce3d4245a1', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f350584e9e6afd9231c137716d2120cc9df9a2a', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
442488100,webview: Add support for 'time' elements. ,"Add support for rendering 'time' mentions in message text. The
mentioned time is formatted to be human-readable, and tapping on it
shows an alert dialog with the original text.

**Screenshots**

![image](https://user-images.githubusercontent.com/7714968/86213101-cc949700-bb96-11ea-9e0d-e56554740938.png)

![image](https://user-images.githubusercontent.com/7714968/86214403-c6071f00-bb98-11ea-8ad6-05772f44bbb3.png)

![image](https://user-images.githubusercontent.com/7714968/86213067-be467b00-bb96-11ea-8529-e23a4bc5c880.png)



Fixes: #4162",True,4175,https://api.github.com/repos/zulip/zulip-mobile/pulls/4175,https://github.com/zulip/zulip-mobile/pull/4175,closed,152,47,7,2,6,37,1,0,[{'name': 'P1 high-priority'}],2020-07-01 07:02:01+00:00,2020-08-04 00:33:41+00:00,2914300.0,"33 days, 17:31:40","[{'comment_id': 449298993, 'comment_body': 'Nit: newline at end of file', 'comment_created': datetime.datetime(2020, 7, 2, 22, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 449300904, 'comment_body': ""Like `rewriteImageUrls` does, let's also have `rewriteTime` take `element`. Right now, it's convenient to rewrite all matches under `document`, but in the future (with some version of https://github.com/zulip/zulip-mobile/pull/3913 in particular) we'll want to rewrite all matches under a given element.\r\n\r\nCurrently, when *anything* changes in the message list (a new message, edit, star, reaction, etc.), we replace everything inside `<body></body>`. https://github.com/zulip/zulip-mobile/pull/3913 is an optimization to do a diff, so we know more precisely what changes actually happened, and we can replace individual elements.\r\n\r\nWhen we replace an individual element, we'll likely call `rewriteHTML` with just that element."", 'comment_created': datetime.datetime(2020, 7, 2, 22, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 449302435, 'comment_body': ""Let's have this start with `MessageListEvent`, like the others. Then maybe have something a bit more descriptive; `MessageListEventTimeDetails` (looking at `MessageListEventReactionDetails`, above) or `MessageListEventPressTime`, maybe.\r\n\r\nThe names for the events going into and out of the WebView are very confusing; one part of #3913 is to fix that (see https://github.com/zulip/zulip-mobile/pull/3913/commits/6c9ff80864780c2e51164a642202d9de408d5ca5). But that PR has gone rather stale, and I'm hoping to get back to it before too long—likely after your PR lands, though."", 'comment_created': datetime.datetime(2020, 7, 2, 23, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 449310434, 'comment_body': 'This comment, and the code below it, look a little funny to me, like, ""This will definitely be here. If it\'s not..."".\r\n\r\nI think the check is probably being done to satisfy Flow that these things will, in fact, be present. A brief explanation of that fact would help this make more sense, so it doesn\'t seem self-contradictory. 🙂 ', 'comment_created': datetime.datetime(2020, 7, 2, 23, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 449311129, 'comment_body': ""If you pass `undefined`, I wonder if it's smart enough to detect the correct locale, e.g., for putting the month before the day or vice versa: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#Parameters\r\n\r\nI think maybe it is; this is running in a WebView, which the device has some control over—hopefully enough to tell it the appropriate device-level setting."", 'comment_created': datetime.datetime(2020, 7, 2, 23, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 455204199, 'comment_body': 'nit: \'entire""', 'comment_created': datetime.datetime(2020, 7, 15, 17, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 455207249, 'comment_body': 'fa7f7539a webview [nfc]: Refactor rewriteImageUrls to rewriteHtml.\r\n\r\nCommit message nits: ""Rename"", ""create"".', 'comment_created': datetime.datetime(2020, 7, 15, 17, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 455727624, 'comment_body': 'I thought this form (""Renames"") of commit message body is the one recommended by Zulip [Docs](https://zulip.readthedocs.io/en/latest/contributing/version-control.html)?\r\n\r\n>The body is written in prose, with full paragraphs; each paragraph should be separated from the next by a single blank line.\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 16, 11, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 455941628, 'comment_body': 'Ah: The mobile project diverges from the server project in this respect. We acknowledge that the ""what"" of a commit message may not all fit in the summary line, so we explicitly allow also describing it in the body, and we prefer keeping the same syntactic form when we do. (It\'s often called the imperative; I\'m on the fence about whether it\'s instead a bare infinitive, it would be good to figure that out. 😆) @gnprice has posted some thoughts at https://github.com/zulip/zulip-mobile/pull/4079#issuecomment-622188734.', 'comment_created': datetime.datetime(2020, 7, 16, 17, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 459134534, 'comment_body': 'Note that as described in that comment, there\'s variation on this within the server project :slightly_smiling_face: -- some of us consistently use the same syntactic form as in the summary line, others consistently use the indicative (like ""Renames""), and Tim varies between the two. But in the mobile repo we\'ve generally been consistent in using the same form as in the summary line.\r\n', 'comment_created': datetime.datetime(2020, 7, 22, 23, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 459135006, 'comment_body': 'nit: blank line', 'comment_created': datetime.datetime(2020, 7, 22, 23, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 459135883, 'comment_body': ""This feels redundant, as it's just the same string as `id`. We don't use it in the definition of `_` -- we just pass `id` there. (I searched for `formatMessage` to look for examples.)\r\n\r\nCan you take this `defaultMessage` line out, and does it all still work as expected?\r\n\r\nBased on a quick look at the API docs:\r\nhttps://formatjs.io/docs/react-intl/api/#formatmessage\r\nhttps://formatjs.io/docs/react-intl/api/#message-formatting-fallbacks\r\nthey agree with our practice at `_`, that it should work.\r\n"", 'comment_created': datetime.datetime(2020, 7, 22, 23, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 459136096, 'comment_body': 'nit: space before `{`', 'comment_created': datetime.datetime(2020, 7, 22, 23, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 459136280, 'comment_body': ""```suggestion\r\n/**\r\n * Rewrite the 'time' elements under the given root, inclusive, to make them more readable.\r\n```\r\n\r\nThis way it's marked as jsdoc.\r\n"", 'comment_created': datetime.datetime(2020, 7, 22, 23, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 459137365, 'comment_body': 'The copy-paste is showing :wink: ', 'comment_created': datetime.datetime(2020, 7, 22, 23, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 459138718, 'comment_body': ""This kind of comment makes me ask: how do you know / why are they guaranteed? Or put another way: what do you know that Flow doesn't? That's the question I most want answered from a comment here.\r\n\r\nThere's a similar conditional above in this file which provides a nice example of answering that question:\r\n```\r\n    // Not `img.src`, because that getter absolutizes relative URLs itself.\r\n    const actualSrc = img.getAttribute('src');\r\n\r\n    // A missing `src` is invalid per the HTML spec.\r\n    if (actualSrc == null) {\r\n      return;\r\n    }\r\n```\r\n\r\nOK, Flow doesn't know that fact. It *does* actually know that an `HTMLImageElement` must have a `src: string` -- but we avoided `img.src` for the reason mentioned in the other comment, and instead wrote `img.getAttribute('src')`, and Flow can't make the connection between the string passed to `getAttribute` and the type.\r\n\r\nBut it's not obvious to me that there's a good excuse like that here.\r\n"", 'comment_created': datetime.datetime(2020, 7, 22, 23, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 459139003, 'comment_body': ""Is there a reason not to use the more direct `elem.datetime` here?\r\n\r\nIf you're copying from the example of `rewriteImageUrls`, note that there's a comment there explaining the reason we sadly can't use `img.src` at the corresponding spot there.\r\n"", 'comment_created': datetime.datetime(2020, 7, 22, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 459139733, 'comment_body': ""When I hover over `elem` below, Flow reports the type:\r\n> HTMLElement | HTMLTimeElement | any\r\n\r\nI think that's the root of at least some of the need you're finding to add a conditional that should be impossible. In reality these elements should all be of type `HTMLTimeElement`.\r\n\r\nNote how that's arranged in the other function:\r\n```js\r\n  const imageTags: $ReadOnlyArray<HTMLImageElement> = [].concat(\r\n    element instanceof HTMLImageElement ? [element] : [],\r\n    Array.from(element.getElementsByTagName('img')),\r\n  );\r\n```\r\nwith the type annotation. Try that here?\r\n"", 'comment_created': datetime.datetime(2020, 7, 22, 23, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 459141150, 'comment_body': 'This feature had been marked as ""DEPRECATED"". Is there a reason to drop that?\r\n', 'comment_created': datetime.datetime(2020, 7, 22, 23, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 459141564, 'comment_body': ""Instead of exporting this, let's just have the tests refer to the renamed `rewriteHTML`.\r\n\r\nThat way it's entirely an implementation detail of this module that its functionality is broken up into a couple of different functions. That seems like the most appropriate way to think of where its interface is.\r\n"", 'comment_created': datetime.datetime(2020, 7, 22, 23, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 459244244, 'comment_body': 'I did not know the correct meaning of deprecated. I thought it meant \'no longer used\' when I removed it - because it was being used and so I thought that the ""DEPRECATED"" tag was wrong.\r\n\r\nJust now I searched for the meaning, and it means ""usable but regarded as obsolete and best avoided, typically because it has been superseded"", so the comment is not incorrect. I\'ll revert it.', 'comment_created': datetime.datetime(2020, 7, 23, 6, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 459246727, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 7, 23, 6, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 459247218, 'comment_body': ':smile:', 'comment_created': datetime.datetime(2020, 7, 23, 6, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 459249186, 'comment_body': ""I did use the one you suggested earlier, However, it seems Flow has a bug with `time` elements: \r\n\r\n```js\r\n  // Find the time elements to act on.\r\n  const timeElements: $ReadOnlyArray<HTMLTimeElement> = [].concat(\r\n    element instanceof HTMLTimeElement ? [element] : [],\r\n    Array.from(element.getElementsByTagName('time')),\r\n  );\r\n```\r\n\r\nFlow does not have a specific libdef for `time` like `img` does:\r\n```getElementsByTagName(name: 'img'): HTMLCollection<HTMLImageElement>;```\r\n\r\nso it resolves to\r\n\r\n```  getElementsByTagName(name: string): HTMLCollection<HTMLElement>;``` for time elements as seen in the error below:\r\n\r\n\r\n```js\r\nError ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ src/webview/js/rewriteHtml.js:64:57\r\n\r\nCannot assign [].concat(...) to timeElements because HTMLTimeElement [1] is incompatible with HTMLElement [2] in array\r\nelement.\r\n\r\n     src/webview/js/rewriteHtml.js\r\n       61│  */\r\n       62│ const rewriteTime = (element: Element | Document) => {\r\n       63│   // Find the time elements to act on.\r\n [1]   64│   const timeElements: $ReadOnlyArray<HTMLTimeElement> = [].concat(\r\n       65│     element instanceof HTMLTimeElement ? [element] : [],\r\n       66│     Array.from(element.getElementsByTagName('time')),\r\n       67│   );\r\n       68│\r\n       69│   timeElements.forEach(elem => {\r\n       70│     const timeStamp = elem.getAttribute('datetime');\r\n\r\n     /tmp/flow/flowlib_20c516c0/dom.js\r\n [2] 1408│   getElementsByTagName(name: string): HTMLCollection<HTMLElement>;\r\n```"", 'comment_created': datetime.datetime(2020, 7, 23, 6, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 459249904, 'comment_body': ""I was not aware that it's possible to refer to element-specific attributes directly."", 'comment_created': datetime.datetime(2020, 7, 23, 7, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 459261420, 'comment_body': ""Removing `defaultMessage` causes the `id` to appear literally in the alert dialog when there is no translation available for the user's selected language, without any replacement for `originalText`.\r\n\r\nWith `defaultMessage`, the `defaultMessage` appears with proper substitution for `originalText`.\r\n\r\nSo I think we should keep `defaultMessage`."", 'comment_created': datetime.datetime(2020, 7, 23, 7, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 459770168, 'comment_body': 'Hmm, I see. I agree, then. Seems like rather a wart in that API.\r\n', 'comment_created': datetime.datetime(2020, 7, 23, 22, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463424159, 'comment_body': ""Something's not quite right about this line :wink: \r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 6, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463425805, 'comment_body': ""Hmm, really? I see this in `dom.js` in my latest /tmp/flow/flowlib_* directory:\r\n```js\r\n  getElementsByTagName(name: 'time'): HTMLCollection<HTMLTimeElement>;\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463427555, 'comment_body': '... Oho. It has that on `Document`... but not on `Element`.\r\n\r\nThis would be great to report on the Flow issue tracker :slightly_smiling_face: : https://github.com/facebook/flow/issues\r\nThen the comment can just link to the issue.', 'comment_created': datetime.datetime(2020, 7, 31, 6, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463428634, 'comment_body': ""Is this conditional actually needed? The code gets a lot shorter if it's taken out -- and simpler to think about, as there's one fewer path through the control flow.\r\n\r\nAt a quick experiment, I get no Flow errors if I just remove this.\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 6, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463429663, 'comment_body': ""Let's not break up `debug` from `warn` and `error` -- as is, they form a nice sequence of closely related cases.\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 6, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463546212, 'comment_body': ""I can't figure out what's wrong! :P\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 11, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 463548461, 'comment_body': 'Done. https://github.com/facebook/flow/issues/8450', 'comment_created': datetime.datetime(2020, 7, 31, 11, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 463549059, 'comment_body': 'Oh yes! Sorry about this :(', 'comment_created': datetime.datetime(2020, 7, 31, 11, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 463746843, 'comment_body': 'Ah, well spotted, Greg! I see it too—check the variable against the path, letter-by-letter. 🙂 ', 'comment_created': datetime.datetime(2020, 7, 31, 17, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 464211681, 'comment_body': 'Oh, got it now! Capitalization! Thanks, @chrisbobbe.', 'comment_created': datetime.datetime(2020, 8, 3, 6, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}]","[{'commit_sha': 'cc1bf2d0aacccf9e85661ed7994bb078e527b153', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bd7439154f4c0e92a78e06e28ae2eb2db90e849', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
432287196,Update build-run instructions in docs,Required after the RN 0.60 upgrade.,True,4148,https://api.github.com/repos/zulip/zulip-mobile/pulls/4148,https://github.com/zulip/zulip-mobile/pull/4148,closed,17,0,1,3,1,5,0,0,[],2020-06-10 08:21:25+00:00,2020-06-12 01:00:39+00:00,146354.0,"1 day, 16:39:14","[{'comment_id': 438480707, 'comment_body': ""This is one of the steps of the upstream instructions:\r\nhttps://reactnative.dev/docs/environment-setup\r\njust before `react-native run-android` (or actually `npx react-native run-android`, in their version.) There are a lot of steps there, and I don't want to try to duplicate them.\r\n\r\nIt looks like that instruction is new in v0.62 -- it's not in the v0.61 docs:\r\nhttps://reactnative.dev/docs/0.61/getting-started.html\r\nSo in short I think the audience that needs to be specifically told about this step is people who've *already* gone through these instructions before the v0.62 release. Like you :slightly_smiling_face: and potentially other existing contributors, but not new readers of these instructions.\r\n"", 'comment_created': datetime.datetime(2020, 6, 11, 0, 38, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 438480846, 'comment_body': ""A troubleshooting entry would definitely be helpful!\r\n\r\nOne key element in troubleshooting entries is generally a copy of the error message. That's helpful because it means people can Ctrl+F search for the message they're seeing, and quickly find the entry relevant to them. So let's include a copy of that here.\r\n"", 'comment_created': datetime.datetime(2020, 6, 11, 0, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 438565652, 'comment_body': 'Makes sense.', 'comment_created': datetime.datetime(2020, 6, 11, 6, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 438567707, 'comment_body': 'Updated with the error message.', 'comment_created': datetime.datetime(2020, 6, 11, 6, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 438568379, 'comment_body': 'Deleted the commit.', 'comment_created': datetime.datetime(2020, 6, 11, 6, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}]","[{'commit_sha': '7e938178f8d055b966f1c6b522e33bddf5e10115', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4c838bbd978ce5cd7680308e44bebbc77b31b5c', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1db664c88a7ace93b8de04d0ba81d678b2018f0', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
431557801,"chat screen: Move ""edit message"" state to be local UI state.","Currently, the message edit state lives in the global redux state.
This is not the react way of handling that and leads to a lot of
complications.

This commit moves the edit message state to `ChatScreen`, and it's
passed down as props to the required child components.

Fixes: #4141
",True,4143,https://api.github.com/repos/zulip/zulip-mobile/pulls/4143,https://github.com/zulip/zulip-mobile/pull/4143,closed,83,123,12,3,5,38,0,0,[],2020-06-09 06:05:06+00:00,2020-06-12 00:40:06+00:00,239700.0,"2 days, 18:35:00","[{'comment_id': 437158862, 'comment_body': 'As @chrisbobbe suggested [here](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/SOLVED.3A.20Prettier.20auto-formatting/near/893193), I downgraded Prettier VS Code extension to v4.7, but this formatting change still happens. :confused: ', 'comment_created': datetime.datetime(2020, 6, 9, 6, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 437684414, 'comment_body': 'That would be because of this line :slightly_smiling_face: :\r\n```diff\r\n--- a/src/webview/MessageList.js\r\n+++ b/src/webview/MessageList.js\r\n@@ -1,3 +1,4 @@\r\n+/* eslint-disable operator-linebreak */\r\n /* @flow strict-local */\r\n```\r\n\r\nEffectively that line requests this formatting change, by disabling the way we control that aspect of formatting.\r\n', 'comment_created': datetime.datetime(2020, 6, 9, 20, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 437685829, 'comment_body': 'nit: this is `editMessage` elsewhere in the same method body\r\n', 'comment_created': datetime.datetime(2020, 6, 9, 20, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 437686538, 'comment_body': 'nit: keep this blank line to separate the props provided by the caller from the ones provided by `connect`\r\n\r\n(same thing on `ChatNavBar`)', 'comment_created': datetime.datetime(2020, 6, 9, 20, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 437687461, 'comment_body': ""This `connect` can disappear entirely -- we don't use the `dispatch`."", 'comment_created': datetime.datetime(2020, 6, 9, 20, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 437689344, 'comment_body': ""nit: the `EditMessage | null` is nicely explicit -- let's pass that type through consistently"", 'comment_created': datetime.datetime(2020, 6, 9, 20, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 437691173, 'comment_body': ""Interesting. What's the reasoning for this change? Certainly seems like a plausible UI improvement.\r\n\r\nIs it logically part of this refactoring commit -- i.e., does it replace some effect that we were getting as a side effect of the old way of handling the state? Or is it an unrelated UI tweak? If the latter, then it'll be clearest to put it in the other commit or in its own commit.\r\n"", 'comment_created': datetime.datetime(2020, 6, 9, 20, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 437692643, 'comment_body': 'typo (also below)', 'comment_created': datetime.datetime(2020, 6, 9, 20, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 437697991, 'comment_body': ""Hmm -- I'd sure like to avoid this proliferation of separate fields.\r\n\r\nAh, in fact: this one isn't used at all! You can just delete it from this function and these two helpers it calls, and from the `ConstructSheetParams` type that describes all three of them.\r\n\r\nThen in the `showActionSheet` signature, instead of adding it to the `params` parameter, let's add it for now as yet one more parameter of its own -- say after `showActionSheetWithOptions`, as it's really quite parallel to that as well as `dispatch`.\r\n\r\nThen perhaps as a separate followup commit we can group all three of those (and `_: GetText`?) as a single options object with a name like `callbacks`. (Hmm, in fact maybe `dispatch`, `_`, and `onEdit` -- that way those three all get passed to `pressedButton` together.)\r\n"", 'comment_created': datetime.datetime(2020, 6, 9, 20, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 437703410, 'comment_body': 'In the old code, this logic lives in the `startEditMessage` action creator. That goes away in this refactor, so this logic can land either here in the `ChatScreen` callback, or at its call site in the message action sheet. Or, I suppose, at some new helper function.\r\n\r\nI think I\'d like to keep it out of `ChatScreen`. Apart from this logic and particularly this line with the API call, `ChatScreen` stays pretty nicely focused on (a) putting together some UI and (b) being a switchboard to wire through some data from one component to another. We can maintain that by having this component\'s understanding of ""edit message"" stay very simple: it\'s just some data, and it offers callbacks that just update the data, and it\'s up to the more-specific code that wants to make changes to the data to decide what the value of the data should be. So then in particular `onEdit` would take type `EditMessage`.\r\n\r\nLet\'s just put this logic at the call site in the message action sheet. I don\'t 100% love having it there -- it\'d be nice to have the message action sheet, too, have some more separation between the UI presentation and the API calls and other app logic that implements the actions. But that\'s already a place where such logic does live, and in fact the one other call site we have for `api.getRawMessageContent` is there, indeed just a few lines above where the ""Edit message"" action-sheet action is implemented. And conversely I don\'t have a great idea for a nice clean place to put a helper function that just does this.\r\n', 'comment_created': datetime.datetime(2020, 6, 9, 20, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 437717430, 'comment_body': 'nit: spell the API call as `api.getRawMessageContent`. See 4dc90ec3976d5214d985043bb19a76c7b0347249, and before that c4fdd6584 and b8010deca.\r\n\r\n(I should probably go add that to our style guide.)\r\n', 'comment_created': datetime.datetime(2020, 6, 9, 20, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 437720109, 'comment_body': ""These come in the opposite order from above in `handleEdit`.\r\n\r\nProbably both are fine :slightly_smiling_face: but I'd rather not have to think about both -- better to pick one.\r\n"", 'comment_created': datetime.datetime(2020, 6, 9, 21, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 437722995, 'comment_body': ""I like this direction! Much better than changing the app bar at the top.\r\n\r\nI think there are some tweaks I'd like to make to the UI. How about we do this as a separate followup PR? We'll want screenshots, and it'll just be easier to have that thread if it's not mixed into the same thread with code comments on the architectural changes.\r\n\r\nThis would also be great to start a thread on in #mobile with screenshots, to get feedback there.\r\n"", 'comment_created': datetime.datetime(2020, 6, 9, 21, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 437780248, 'comment_body': 'Done: 33ebcb22d and https://github.com/zulip/zulip-mobile/blob/master/docs/style.md#zulip-api-bindings .\r\n', 'comment_created': datetime.datetime(2020, 6, 9, 23, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 437862195, 'comment_body': 'UX improvement was the reason. Agreed, it should be in a separate commit.', 'comment_created': datetime.datetime(2020, 6, 10, 5, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 437884025, 'comment_body': 'I was excited about this change, so I included it in this PR. But yeah, a followup PR will work.', 'comment_created': datetime.datetime(2020, 6, 10, 6, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 437892382, 'comment_body': 'Moved the logic to action sheet.', 'comment_created': datetime.datetime(2020, 6, 10, 6, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 437892523, 'comment_body': 'Added the `api` namespace.', 'comment_created': datetime.datetime(2020, 6, 10, 6, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 437893113, 'comment_body': 'Removed `this.state`.', 'comment_created': datetime.datetime(2020, 6, 10, 6, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 437894092, 'comment_body': 'Makes sense. Changed in both places.', 'comment_created': datetime.datetime(2020, 6, 10, 6, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 437894157, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2020, 6, 10, 6, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 437895163, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2020, 6, 10, 6, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 437897343, 'comment_body': 'Made the change.\r\nWill group them in a new commit.', 'comment_created': datetime.datetime(2020, 6, 10, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 437897583, 'comment_body': ""It's gone now :)"", 'comment_created': datetime.datetime(2020, 6, 10, 6, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 437897914, 'comment_body': 'I added it when ESLint was making breaking changes and forgot to remove it later. \r\nDeleted the comment.', 'comment_created': datetime.datetime(2020, 6, 10, 6, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 437911172, 'comment_body': 'Added a commit.', 'comment_created': datetime.datetime(2020, 6, 10, 7, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 438461964, 'comment_body': ""I think this isn't used, now that the API call is made at a different layer."", 'comment_created': datetime.datetime(2020, 6, 10, 23, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 438462143, 'comment_body': 'no longer needs async', 'comment_created': datetime.datetime(2020, 6, 10, 23, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 438462229, 'comment_body': 'nit: so short, best on one line (much like the `editMessage: null` below)', 'comment_created': datetime.datetime(2020, 6, 10, 23, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 438462554, 'comment_body': 'nit: the line getting stuff from out of `navigation` is directly connected to the line that got `navigation` from out of `this.props`, so natural to keep them right next to each other', 'comment_created': datetime.datetime(2020, 6, 10, 23, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 438465703, 'comment_body': 'The case where `message.isOutbox` is true should be impossible -- it would represent a bug. (We only show this option for real, sent messages.) So the case where it\'s false should be treated as the main line of the logic, rather than put inside a condition.\r\n\r\nA way to do that with the same semantics as this version would be an early return:\r\n```js\r\n  if (message.isOutbox) {\r\n    return;\r\n  }\r\n\r\n  // …\r\n```\r\n\r\nBut also as long as we have logic to detect this case -- which is here basically because we haven\'t expressed its impossibility in a way that the type-checker is able to prove for us -- we should have something to let us know if it starts impossibly happening:\r\n```js\r\n  if (message.isOutbox) {\r\n    logging.warn(\'Attempted ""Edit message"" for outbox message\');\r\n    return;\r\n  }\r\n\r\n  // …\r\n```\r\n\r\nAnother alternative would be to throw an exception. In this case just a warning is fine, because there\'s a pretty clear thing we can do to carry on -- just ignore the attempted action.\r\n', 'comment_created': datetime.datetime(2020, 6, 10, 23, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 438467226, 'comment_body': 'Let\'s pick a single name for this callback :slightly_smiling_face: Makes it easier to trace things through the various layers.\r\n\r\nI\'m happy leaving out the `on`. I think the name can be improved further by adding the word ""message"", so it\'s clear this is about editing a message -- vs. e.g. editing a draft. Perhaps `startEditMessage`, then.\r\n', 'comment_created': datetime.datetime(2020, 6, 10, 23, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 438571971, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 6, 11, 6, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 438572102, 'comment_body': 'Removed `async`', 'comment_created': datetime.datetime(2020, 6, 11, 6, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 438572465, 'comment_body': 'Moved to a single line', 'comment_created': datetime.datetime(2020, 6, 11, 6, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 438572978, 'comment_body': 'Moved {narrow} up.', 'comment_created': datetime.datetime(2020, 6, 11, 6, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 438573665, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 6, 11, 6, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 438587102, 'comment_body': 'Used `startEditMessage` everywhere.\r\nAlso changed `onEditComplete` to `completeEditMessage` for consistency.', 'comment_created': datetime.datetime(2020, 6, 11, 7, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}]","[{'commit_sha': 'e9527e35948d3e5df9cb7872f0bca18312dc0f26', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4798f7f474ca9ac48f78095fef3821c9e818189b', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dfc1ca36465c7d7bdfa854f2ca9499e2ea265f5', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
428224847,lightbox: Download images with correct names and MIME types.,"Currently, the `downloadImage` function saves images with the
wrong names, extensions and MIME types. This commit fixes that
by introducing a new argument for the function - `fileName`,
and by determining the MIME type from the file extension.

Simply having the proper extension does not fix the issue, as the file is still interpreted as a text file by Android. The proper MIME type is still required.


Fixes: #4138
Fixes: #4137 ",True,4140,https://api.github.com/repos/zulip/zulip-mobile/pulls/4140,https://github.com/zulip/zulip-mobile/pull/4140,closed,13,7,3,1,3,0,0,0,[],2020-06-05 05:08:54+00:00,2020-06-09 19:33:01+00:00,397447.0,"4 days, 14:24:07",[],"[{'commit_sha': '243999712e2be1f8320f26fec8883fa438dec682', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
422618464,[android] Handle receiving shares from other apps,"Closes #117.

Two bugs exist as of now:
 -   uploading non-image files causes a network error
 -   User picker screen component shows the back button, event when canGoBack={false} is passed

[Discussion on CZO](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/.23M117.20Handle.20sharing.20from.20other.20apps)

Screenshots:
![image](https://user-images.githubusercontent.com/7714968/82794850-c07b3280-9e90-11ea-8e50-f6ed5aa7dd4c.png)

![image](https://user-images.githubusercontent.com/7714968/82794467-274c1c00-9e90-11ea-8bd1-c761ddc8ccc4.png)
",True,4124,https://api.github.com/repos/zulip/zulip-mobile/pulls/4124,https://github.com/zulip/zulip-mobile/pull/4124,closed,684,10,11,3,9,115,4,1,"[{'name': 'a-Android'}, {'name': 'a-compose/send'}, {'name': 'P1 high-priority'}, {'name': 'a-share-to'}]",2020-05-25 08:31:24+00:00,2020-07-18 06:14:43+00:00,4657399.0,"53 days, 21:43:19","[{'comment_id': 430808033, 'comment_body': ""This line doesn't do much :wink: "", 'comment_created': datetime.datetime(2020, 5, 27, 1, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430809222, 'comment_body': 'This is probably simplest as an `if`.\r\n\r\nAlternatively, you could embrace the `when` fully, like:\r\n```kotlin\r\nwhen (intent?.action) {\r\n  Intent.ACTION_SEND -> {\r\n    // ...\r\n```\r\nSee docs: https://kotlinlang.org/docs/reference/control-flow.html#when-expression\r\n(which I found by looking back at [our notes on Kotlin](https://github.com/zulip/zulip-mobile/blob/master/docs/architecture/android.md#learning-more-about-kotlin))\r\n', 'comment_created': datetime.datetime(2020, 5, 27, 1, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430810311, 'comment_body': ""This line gets pretty hard to read, way over on the right.\r\n\r\nThe arrangement of this condition and the ones just before and after it also obscures the very nice parallelism between the three cases, because the three very similar `handleFoo` calls start at different columns. It might be clearer to add braces around each one so they're each on their own line, and then all indented the same way.\r\n"", 'comment_created': datetime.datetime(2020, 5, 27, 1, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430810967, 'comment_body': ""This whole section can probably be usefully moved into its own private function. It's doing something with a nice clean well-defined boundary, which is to handle the intent.\r\n\r\nHmm, or perhaps better yet: leave the `if (intent?.action == Intent.ACTION_SEND)` part in this function, but have it call a helper like `handleSend`. Then that function can handle the `val host` and `val reactContext` as well as the dispatch on `intent.type`.\r\n"", 'comment_created': datetime.datetime(2020, 5, 27, 1, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430811614, 'comment_body': 'This part is duplicated between the three `handleFoo` methods.\r\n\r\nCan you perhaps have these methods just return `params`? Then their caller -- with the suggestion above, the new helper method `handleSend` -- can take care of this part in just one place.\r\n\r\n(The names of these three methods probably change to match the reduction in their responsibilities.)\r\n', 'comment_created': datetime.datetime(2020, 5, 27, 1, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430813215, 'comment_body': 'When the body of a lambda is more than a line or two, it should have an explicit name for its parameter, one more descriptive than ""it"". Here, for example, a good choice might be ""url"".\r\n\r\nBut! In this case, what I think you\'re really looking for is the idiom `?: return`:\r\nhttps://kotlinlang.org/docs/reference/null-safety.html#elvis-operator\r\n\r\nSo you could say something like\r\n```kotlin\r\nval url = intent.getParcelableExtra<Parcelable>(Intent.EXTRA_STREAM) as? Uri ?: return\r\n```\r\nin much the same way as the `val sharedText` above. Or if this method is going to return `params`, you can make it `?: return null`.\r\n', 'comment_created': datetime.datetime(2020, 5, 27, 1, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430815080, 'comment_body': 'Instead of saying `<Parcelable>` and later `as? Uri`, I think you should be able to just say `<Uri>`.\r\n\r\nYup -- this isn\'t clearly documented (at [this method\'s docs](https://developer.android.com/reference/android/content/Intent.html#getParcelableExtra-java.lang.String-)), but I took a quick look at the implementation, and it\'s just invoking `Bundle#getParcelable` -- which [is clearly documented](https://developer.android.com/reference/android/os/Bundle#getParcelable(java.lang.String)) on this point, and also here\'s what its implementation does:\r\n```java\r\n        try {\r\n            return (T) o;\r\n        } catch (ClassCastException e) {\r\n            typeWarning(key, o, ""Parcelable"", e);\r\n            return null;\r\n        }\r\n```\r\n', 'comment_created': datetime.datetime(2020, 5, 27, 1, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430815937, 'comment_body': ""Is this doing something different from the one in `NotifyReact.kt`?\r\n\r\nIf not, let's use that one :slightly_smiling_face: \r\n\r\n(If it is, I'm missing it, so it would be great to make clearer!)\r\n"", 'comment_created': datetime.datetime(2020, 5, 27, 1, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430816626, 'comment_body': ""Comparing this logic with `NotifyReact.kt`, one difference I notice is that this one unconditionally calls `launchMainActivity`, while that one only calls it if the app isn't already in the foreground.\r\n\r\nIs that difference intentional? What's the effect of it?\r\n"", 'comment_created': datetime.datetime(2020, 5, 27, 2, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430817534, 'comment_body': 'blank lines between all these definitions, please -- it makes it a lot easier to read :slightly_smiling_face: \r\n', 'comment_created': datetime.datetime(2020, 5, 27, 2, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430818616, 'comment_body': ""Hmm interesting. I think this call needs to happen at the top level, outside of the `render()` method. It's basically returning a component *type*, i.e. something at the same level as `SharingScreen` itself rather than a particular instance of it. If `render` gets called twice and we get two of these as a result, I expect that will cause the old instance of the old `Tabs` to be discarded and completely replaced by an instance of the new `Tabs`, rather than just have its props updated. Which would mean any UI state is lost, like which tab is selected and what text the user has entered.\r\n\r\nI think the `share` value can maybe be passed through like so?\r\n```\r\n          screen: (share) => (\r\n// ...\r\n        <Tabs share={share} />\r\n```\r\nNot sure what the API is that `react-navigation` provides here, but there ought to be *some* way to do it.\r\n\r\nFor `dispatch`, `subscriptions`, and `auth`, probably simplest to have `StreamScreen` and `PmScreen` each do their own `connect` calls."", 'comment_created': datetime.datetime(2020, 5, 27, 2, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430820109, 'comment_body': 'This name is confusing because we already have a `StreamScreen`. The computer doesn\'t get confused, because this isn\'t exported, but us human readers (and readers of things like stack traces in the future!) might be :slightly_smiling_face: \r\n\r\nThis one is really somewhat more specific. Perhaps `StreamShareScreen`?\r\n\r\nAlso, though, it\'s kind of odd calling this a ""screen"" when it\'s inside something else that is a ""screen"". I think we already have a number of examples of that oddity in the codebase already, but perhaps we can avoid adding more. :wink: How about just `StreamShare`? Or still more explicitly: `ShareToStream`?\r\n', 'comment_created': datetime.datetime(2020, 5, 27, 2, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430821730, 'comment_body': ""there's a reason for that blank line :wink: -- keep it there, and add a similar blank line before this new bit too\r\n\r\nIn general the basic principle here is: when making a small change to some existing code, notice the style it's written in and match the existing style.\r\n\r\nThe specific rationale for these blank lines is they help organize the code visually to match its logic.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 5, 27, 2, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430822174, 'comment_body': ""Hmm interesting. Can you say more about why this is needed? What's the scenario in which it takes effect?\r\n\r\nOne thing that makes me curious here is that we don't have a similar condition in this spot for notifications, even though opening a notification can mean a very similar navigation at startup.\r\n"", 'comment_created': datetime.datetime(2020, 5, 27, 2, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430823517, 'comment_body': 'Gosh this reformatting sure makes a lot of changes.\r\n\r\nI like the newly consistent indentation. I\'m not as much a fan of the wrapped lines, or some of the reorderings -- like this one, where logically ""scheme"" definitely belongs before ""host"".\r\n\r\nWhat led to this commit? Did you find that Android Studio really wanted to reformat the file, and it was annoying to try to edit it without an auto-reformatting?\r\n', 'comment_created': datetime.datetime(2020, 5, 27, 2, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430831660, 'comment_body': ""I felt so too! That is how I had originally implemented it. But Android Studio suggested to convert it to `when`, so I thought that's the proper way to do it in Kotlin."", 'comment_created': datetime.datetime(2020, 5, 27, 3, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 430870654, 'comment_body': 'Was this with one of the ""intentions"" that you get behind a lightbulb icon in the left margin, and that you can see by hitting Alt+Enter?\r\n\r\nI think Android Studio provides some of those that go in both directions :smile: . I think this may be one of them. Sometimes they\'re more in the vein of refactoring tools, like ""ways you might refactor the code, depending on what you want and the context"" -- rather than lint rules with fixers, like ""ways the code is unidiomatic or bad and you can fix it"".\r\n', 'comment_created': datetime.datetime(2020, 5, 27, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 430875089, 'comment_body': 'Speaking of (at https://github.com/zulip/zulip-mobile/pull/4124#discussion_r430870654 ) those Android Studio ""intentions"" i.e. little refactoring tools: if you hit Alt+Enter on each of these lines, or anyway on the ""handleSendText"" and similar calls, I think you\'ll see an option like ""Add braces around `when` body"". That will make an edit like the one I suggest at the end here.\r\n\r\nThen if you hit Alt+Enter again, you\'ll see an option to take the braces out again :stuck_out_tongue: I think in fact starting from the current revision, if you hit Alt+Enter you can actually see both options suggested in the very same menu -- one for adding braces on these inner `when` bodies, and one for removing the braces on the enclosing `when` body, i.e. the brace in `… == Intent.ACTION_SEND -> {` and the one that matches it. At least, when I was looking at this in Android Studio earlier today I saw both of those at once.', 'comment_created': datetime.datetime(2020, 5, 27, 6, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 431000368, 'comment_body': 'I have no idea how that happened :smile: ', 'comment_created': datetime.datetime(2020, 5, 27, 9, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431005513, 'comment_body': 'I got a green squiggle underline with this popup:\r\n![image](https://user-images.githubusercontent.com/7714968/83006520-f7d41580-a02f-11ea-80b5-a7201cea2900.png)\r\n', 'comment_created': datetime.datetime(2020, 5, 27, 10, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431009269, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 27, 10, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431009327, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 27, 10, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431009530, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 27, 10, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431018360, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 27, 10, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431022423, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 27, 10, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431024988, 'comment_body': ""The only reason I used it here was the `TAG` in `Log.d.` - I wanted the TAG to be the one declared in `ReceiveSharingActivity.ky`.\r\n\r\nI've removed the declaration of `launchMainActivity` from this file for now."", 'comment_created': datetime.datetime(2020, 5, 27, 10, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431026639, 'comment_body': 'I had mentioned earlier in the group PM that the sharing screen kept on getting closed soon after appearing. I investigated that a bit and found that It was caused due to this `rehydrate` function. This condition prevents that from happening,', 'comment_created': datetime.datetime(2020, 5, 27, 10, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431028738, 'comment_body': 'Sounds good. Changed.', 'comment_created': datetime.datetime(2020, 5, 27, 10, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431034749, 'comment_body': 'Done. I know you prefer `url` as opposed to `uri`, and had mentioned that in a CZO message too, that `uri` is an old 90s convention. But `uri` seems to be used a lot in both Android Native and the React JS codebase. Do you think it might be better to use `uri` for the sake of uniformity?', 'comment_created': datetime.datetime(2020, 5, 27, 11, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431039747, 'comment_body': '>Did you find that Android Studio really wanted to reformat the file, and it was annoying to try to edit it without an auto-reformatting?\r\n\r\nSort of - cutting and pasting led to weird formatting. And yeah, it was annoying to try to edit it without auto-reformatting.', 'comment_created': datetime.datetime(2020, 5, 27, 11, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431052432, 'comment_body': ""Ouch - I didn't notice this. I remember putting it inside a conditional, it must have moved while doing a refactor."", 'comment_created': datetime.datetime(2020, 5, 27, 11, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431052482, 'comment_body': 'Fixed now.', 'comment_created': datetime.datetime(2020, 5, 27, 11, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431053417, 'comment_body': 'Okay, thanks. I must have done this by mistake.', 'comment_created': datetime.datetime(2020, 5, 27, 11, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431054792, 'comment_body': ""I agree! I don't know how I forgot :'("", 'comment_created': datetime.datetime(2020, 5, 27, 11, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431160596, 'comment_body': ""I've extracted `createMaterialTopTabNavigator` out of `render`.\r\n\r\nThe snippet you commented does not seem to work though,"", 'comment_created': datetime.datetime(2020, 5, 27, 14, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431345884, 'comment_body': 'Ah, that looks like the other `when`, though :slightly_smiling_face: . In particular ""Cascade if"" describes the inner `when`, the one with several different options, but not the outer one which has just one option.\r\n', 'comment_created': datetime.datetime(2020, 5, 27, 18, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 431346782, 'comment_body': '(And yeah, that one isn\'t the ""intentions"" thing I was thinking of -- it\'s definitely saying something in the spirit of ""this code is unidiomatic or bad and you should do it this other way"".)\r\n', 'comment_created': datetime.datetime(2020, 5, 27, 18, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 431348481, 'comment_body': '> The only reason I used it here was the `TAG` in `Log.d.` - I wanted the TAG to be the one declared in `ReceiveSharingActivity.ky`.\r\n\r\nHmm. For a bit when I was looking at this originally, I\'d thought maybe that was the difference (though a small one). But what the code actually says is:\r\n```kt\r\n    Log.d(com.zulipmobile.notifications.TAG, ""Launching main activity"")\r\n```\r\nSo it uses the same ""TAG"" value as in the other code. :slightly_smiling_face: \r\n\r\n(Which in itself I would have commented on if this function were otherwise good to merge, but that\'s a finer-grained matter.)\r\n\r\nDid you perhaps copy-paste this code from the other file? A handy thing that Android Studio will do when you copy-paste code is it\'ll adjust references like this so that the code continues to work (and do the same thing) in its new home. Handy in the typical case, but potentially surprising when you don\'t expect it!\r\n', 'comment_created': datetime.datetime(2020, 5, 27, 18, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 431534553, 'comment_body': 'Yeah, *this* one would definitely benefit from `when` :slightly_smiling_face: ', 'comment_created': datetime.datetime(2020, 5, 28, 1, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 431535804, 'comment_body': ""If for some reason we get one of these in an unexpected shape, we don't want to crash -- instead we should just ignore it, after logging a warning.\r\n\r\nSee how the `onReceived` in `FCMPushNotifications.kt` catches `FcmMessageParseException`, and then the code in `FcmMessage.kt` which parses FCM messages makes sure to throw exceptions of that type if there's a parse error.\r\n"", 'comment_created': datetime.datetime(2020, 5, 28, 1, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 431536826, 'comment_body': 'I think we can deduplicate some more of this by having a method like `getParamsFromIntent` -- which contains the `""text/plain"" == intent.type` etc. logic, and also contains the contents of these three methods.\r\n\r\nThat way the `params = Arguments.createMap()`, and the couple of lines of overhead for making a separate method, get shared across the three cases. Also the new method has a bit more clear and self-contained of an interface than each of these three.\r\n\r\nThen `handleSend` would just call that method, like `val params = getParamsFromIntent(intent)`.\r\n', 'comment_created': datetime.datetime(2020, 5, 28, 1, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 431536905, 'comment_body': 'Quite helpful, thanks!', 'comment_created': datetime.datetime(2020, 5, 28, 1, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 431542224, 'comment_body': 'No -- that wouldn\'t get uniformity, because more things use ""URL"" anyway.\r\n\r\nQuick empirical demo:\r\n```\r\n$ grep -Rhi url node_modules/react-native | wc -l\r\n2142\r\n\r\n$ grep -Rhi uri node_modules/react-native | wc -l\r\n829\r\n```\r\n\r\nA lot of people chose ""URI"" as the name for various things because it was officially the standard for a number of years. But it was never the name most people would normally use in a sentence -- most people said ""URL"", and would say ""URI"" only if they were really trying hard to be pedantically standards-correct. On top of that, the official line for all those years was that ""URL"" totally *was* the name of a subset of URIs that just happened to encompass virtually all of the URIs that anyone ever encountered in practice.\r\n\r\nSo now that even the relevant current standard recommends dropping ""URI"", it really has nothing going for it at all outside of contexts with specific legacy constraints.\r\n\r\nIn some places we do have those legacy constraints: so for example in the Zulip server API, which is hard to make changes to because there are lots of existing servers and clients, there\'s a field called `realm_uri`. Internally we have things we call `realmUri` because they correspond very directly to a value of that field.\r\n\r\nBut we shouldn\'t make *new* API choices that propagate the old confusing name. ""URL"" is the winner. Fighting it just prolongs the confusion.\r\n\r\nConcretely, this key `sharedImageUri` in a data blob we\'re sending here over to JS is a new API choice, in the internal API between the Kotlin and JS sides of our app. So we should use the standard name for that new choice.\r\n\r\nFor a local variable, it doesn\'t matter as much. But the only way to get toward uniformity is to make a habit of picking the standard name, when there isn\'t a strong reason to go the other way.\r\n', 'comment_created': datetime.datetime(2020, 5, 28, 2, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 431543784, 'comment_body': 'Looks like the version in this revision is instead:\r\n```kt\r\n        val uri = intent.getParcelableExtra(Intent.EXTRA_STREAM) as? Uri ?: return null\r\n```\r\nwith only the cast `as? Uri`, and no type parameter `<Uri>`.\r\n\r\nI wasn\'t sure what that would do, so I hit Ctrl+Shift+P to get the type of the expression `intent.getParcelableExtra(Intent.EXTRA_STREAM)`. That informed me the type was `Uri!` (which means ""`Uri` or `Uri?`, sorry it comes from a Java API and the Java type system doesn\'t express that distinction"".) So I *think* that means the type parameter gets inferred as `Uri`, and that gets passed through, so that the cast inside the implementation is to `Uri`, and our own cast doesn\'t actually do anything at runtime.\r\n\r\nGiven that that\'s the case, probably best to be explicit and have the code match what\'s really going on:\r\n```kt\r\n        val uri = intent.getParcelableExtra<Uri>(Intent.EXTRA_STREAM) ?: return null\r\n```\r\n', 'comment_created': datetime.datetime(2020, 5, 28, 2, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 431546183, 'comment_body': 'The logic is still different from what\'s in `NotifyReact.kt`, but in a different way:\r\n```kt\r\n        if (null == reactContext) {\r\n            launchMainActivity(application as Context)\r\n            SharingModule.initialSharedData = params\r\n        } else {\r\n            sendEvent(reactContext, ""shareReceived"", params)\r\n        }\r\n```\r\n\r\nIf you compare to the logic in `notifyReact`, you\'ll find that that existing logic will call `launchMainActivity` if the status is NOT_RUNNING or BACKGROUND, and this won\'t. It doesn\'t sound like that\'s intentional.\r\n\r\nThis logic is pretty tricky and interacts with subtle details of Android and of RN. For that kind of logic, it\'s best to make a point of not writing it twice.\r\n\r\nUltimately the way to do that is to refactor the existing code so it can be used in both situations. Or, for development to first get the thing working, a fine shortcut can be to copy the code and make only the needed changes (like the event name ""notificationOpened""), with the intent to go back and factor it out after we understand exactly what we need.', 'comment_created': datetime.datetime(2020, 5, 28, 2, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 431548978, 'comment_body': ""It looks like in the new revision it's in the constructor. That means we end up getting data (for `share`) from props, in the constructor:\r\n```js\r\n  constructor(props) {\r\n    super(props);\r\n    const { navigation } = this.props;\r\n    const share: SharedData = navigation.state.params.sharedData;\r\n\r\n    this.Tabs = createMaterialTopTabNavigator(\r\n      {\r\n        Stream: {\r\n          screen: () => <ShareToStream share={share} />,\r\n```\r\n\r\nThat isn't good either -- React components don't ordinarily. We should try to write this in a way that fits smoothly with the basic React model of how things work. It's always possible to do something that deviates if it's really necessary, but we should first try to make it work properly, and if we can't then understand why not.\r\n\r\nThe react-navigation library is meant to be used with React, so I'll be kind of surprised if it really doesn't have a reasonable way to pass through React props in a normal React-compatible way.\r\n\r\nPlease take a look at the react-navigation docs (https://reactnavigation.org/docs/2.x/ for the version we're currently on), and/or the web, and/or its implementation in your `node_modules/react-navigation`, and try to find the appropriate feature of its API for this. If you're having trouble, ask on #mobile-team and say what you've looked at and tried so far.\r\n"", 'comment_created': datetime.datetime(2020, 5, 28, 2, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 431560795, 'comment_body': '@gnprice [said](https://github.com/zulip/zulip-mobile/pull/4124#discussion_r431548978):\r\n> Please take a look at the react-navigation docs (https://reactnavigation.org/docs/2.x/ for the version we\'re currently on), and/or the web, and/or its implementation in your `node_modules/react-navigation`, and try to find the appropriate feature of its API for this. If you\'re having trouble, ask on #mobile-team and say what you\'ve looked at and tried so far.\r\n\r\nThere\'s been some discussion of this, starting from Divyanshu\'s post [here](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/.23M117.20Handle.20sharing.20from.20other.20apps/near/882122).\r\n\r\nTaking a second look at my [reply](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/.23M117.20Handle.20sharing.20from.20other.20apps/near/882251) there, I actually think `screenProps` is the one and only way React Navigation would like us to handle it. But there\'s that inconvenient conclusion that, if you do things [""the right way""](https://reactnavigation.org/docs/2.x/common-mistakes/#explicitly-rendering-more-than-one-navigator), only explicitly rendering the root navigator in your own JSX (and no descendent navigators), whatever you pass as `screenProps` is sort of forced to exist in a global context. Unless there\'s something less well documented, about `screenProps`, that I\'m missing [1].\r\n\r\nIt would be helpful if we could work out the advantages of following this ""render-only-one-navigator"" guideline strictly (and bringing our existing code in line with it).\r\n\r\nOne compromise (and just because it\'s a compromise doesn\'t mean it\'s what we should do) might be to follow their instructions under\r\n\r\n> Alternatively, the following would also work because it exposes the `router` static on `AuthenticationScreen` and threads through the `navigation` prop:\r\n\r\nat that same ""Common Mistakes"" doc ([link](https://reactnavigation.org/docs/2.x/common-mistakes/#explicitly-rendering-more-than-one-navigator)). That makes it seam like we could indeed explicitly render a non-global navigator, but being sure to add some boilerplate that handles some important plumbing. Then we\'d have the means to pass `screenProps` at a more local level. But they seem to give this example as an afterthought, so I\'d wonder if we\'re missing out on some important design principle that means something like this should never be necessary.\r\n\r\n-----\r\n\r\n[1]: It\'s not impossible: the docs on `screenProps` seem spotty. When I wrote that reply, I apparently felt that the most relevant bit of docs on `screenProps` was on a page about the stack navigator ([this page](https://reactnavigation.org/docs/2.x/stack-navigator/#navigator-props)), which is not the navigator we\'re using here. I\'ve used `screenProps` in react-navigation v2 and I\'m pretty sure it\'s quite relevant for all types of navigators.', 'comment_created': datetime.datetime(2020, 5, 28, 3, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 431562738, 'comment_body': ""I've just started a #mobile-team topic about this, [here](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/.60screenProps.60.20in.20react-navigation.20v2)."", 'comment_created': datetime.datetime(2020, 5, 28, 3, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 431578366, 'comment_body': 'Okay, I have changed the `if` to `when` using the editor refactor tools, and added braces `{}` around the statements. Is this what you wanted?', 'comment_created': datetime.datetime(2020, 5, 28, 4, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431579595, 'comment_body': 'Okay, I looked at both the files, and added a similar error-handling mechanism here.', 'comment_created': datetime.datetime(2020, 5, 28, 4, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431594520, 'comment_body': 'Okay, moved them to a single function, that also throws an exception when URL parsing fails.', 'comment_created': datetime.datetime(2020, 5, 28, 5, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431721435, 'comment_body': 'For the time being, this code is a close duplicate of the one in `NotifyReact.kt`, until we decide to either make a common function for both or keep the duplicate here.', 'comment_created': datetime.datetime(2020, 5, 28, 10, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431728048, 'comment_body': 'Changed relevant names to `uri`.', 'comment_created': datetime.datetime(2020, 5, 28, 10, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 431728558, 'comment_body': 'Done. But instead of returning `null`, it throws an exception now.', 'comment_created': datetime.datetime(2020, 5, 28, 10, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 432184643, 'comment_body': 'Looks good!\r\n', 'comment_created': datetime.datetime(2020, 5, 28, 23, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 432185334, 'comment_body': ""Great. The one essential thing it's missing is a comment (on each copy) mentioning it's duplicated, and pointing to the other copy.\r\n\r\nI definitely won't want to keep this code duplicated. But it will be straightforward to factor out after things are settled and working.\r\n"", 'comment_created': datetime.datetime(2020, 5, 28, 23, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 432193269, 'comment_body': 'Thanks for that suggestion and the demo! And good thought to move to chat for the detailed discussion.\r\n\r\nThat approach with the `router` static, and passing through the `navigation` prop, sounds good to me.\r\n', 'comment_created': datetime.datetime(2020, 5, 29, 0, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 432204988, 'comment_body': 'I think the first two of these are redundant with the last.\r\n', 'comment_created': datetime.datetime(2020, 5, 29, 1, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 432205896, 'comment_body': ""Are these extra attributes helpful and do they do things we want? We treat this activity pretty differently from our main one -- for example as soon as it opens, we go and close it again.\r\n\r\nHmm, in fact. I wonder if it might simplify things to simply add these intent filters to the main activity. After all, the behavior we're actually implementing here amounts to that in the end -- the user goes to send something, i.e. causes an intent with action `android.intent.action.SEND`, and what we end up doing is passing that all to the main activity.\r\n"", 'comment_created': datetime.datetime(2020, 5, 29, 1, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 432206505, 'comment_body': 'Note that [the docs](https://developer.android.com/training/sharing/receive) explicitly contemplate that the activity that handles these intents might be the same one that gets launched from the launcher:\r\n\r\n> Keep in mind that if this activity can be started from other parts of the system, such as the launcher, then you will need to take this into consideration when examining the intent.\r\n', 'comment_created': datetime.datetime(2020, 5, 29, 1, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 432222540, 'comment_body': '(I went ahead and removed them in the version I merged.)', 'comment_created': datetime.datetime(2020, 5, 29, 2, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 432403411, 'comment_body': "">Are these extra attributes helpful and do they do things we want?\r\n\r\n`windowSoftInputMode` and `configChanges` are not relevant here, because we don't care how the activity responds to the keyboard etc. But we do need `launchMode` to be `singleTask` - we want only one instance of the activity to exist at any given time.\r\n\r\nI'll remove the useless attribs.\r\n\r\nReference: https://developer.android.com/guide/topics/manifest/activity-element"", 'comment_created': datetime.datetime(2020, 5, 29, 10, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 432407513, 'comment_body': "">Hmm, in fact. I wonder if it might simplify things to simply add these intent filters to the main activity. After all, the behaviour we're actually implementing here amounts to that in the end -- the user goes to send something, i.e. causes an intent with action android.intent.action.SEND, and what we end up doing is passing that all to the main activity.\r\n\r\nOne possible problem with that might be:\r\nWe always have to launch an activity. So, in case the app is already running, we will definitely launch MainActivity for every share action. We can close it soon, but I would expect the `ZulipMobile` component to be pretty heavy in terms of resources."", 'comment_created': datetime.datetime(2020, 5, 29, 10, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 443705630, 'comment_body': 'I\'m seeing this error:\r\n\r\n```\r\nWarning: \'keyboardShouldPersistTaps={true}\' is deprecated. Use \'keyboardShouldPersistTaps=""always""\' instead\r\n```\r\n\r\nHere\'s the relevant doc: https://reactnative.dev/docs/0.60/scrollview', 'comment_created': datetime.datetime(2020, 6, 22, 17, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 443707387, 'comment_body': 'Hmm, I\'m seeing one of these:\r\n\r\n```\r\nWarning: Each child in a list should have a unique ""key"" prop.\r\n\r\nCheck the render method of `ShareToPmComponent`. See https://fb.me/react-warning-keys for more information.\r\n    in UserItem (at SharingScreen.js:325)\r\n    in ShareToPmComponent (created by Connect(ShareToPmComponent))\r\n    in Connect(ShareToPmComponent) (at SceneView.js:9)\r\n    [...]\r\n```\r\n\r\nLooks like the `UserItem` here should get a `key` attribute; probably `user.user_id`:\r\n\r\n```javascript\r\n  getUsersPreview = () => {\r\n    const { users } = this.state;\r\n\r\n    if (users.length === 0) {\r\n      return <Label text=""Please choose recipients to share with"" />;\r\n    }\r\n    const preview = [];\r\n    users.forEach((user: User) => {\r\n      preview.push(\r\n        <UserItem\r\n          avatarUrl={user.avatar_url}\r\n          email={user.email}\r\n          fullName={user.full_name}\r\n          onPress={() => {}}\r\n        />,\r\n      );\r\n    });\r\n    return preview;\r\n  };\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 17, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 443713122, 'comment_body': ""I think this `users` bit of state could get a more specific name, maybe `selectedUsers`—or even `selectedRecipients`, to match other names we're using, like `toggleChoosingRecipients`, etc. That seems like an easy way to avoid potential confusion about whether it's all users, or some other subset of users."", 'comment_created': datetime.datetime(2020, 6, 22, 17, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 443726067, 'comment_body': 'How much are we relying on a proper toggle function for the `choosingRecipients` flag? `toggleChoosingRecipients` is implemented correctly as a toggle, i.e., it sets `choosingRecipients` to the opposite of its current value. But I\'m not sure it\'s better than just calling `this.setState({ choosingRecipients: true })` and `this.setState({ choosingRecipients: false })`.\r\n\r\nIn particular, at this call site in `handleChooseRecipients`, what we *mean* to do here is set the flag to `false`: we\'re finished choosing the recipients, and it\'s time for the modal to close.\r\n\r\nThat adds something important to the contract for `handleChooseRecipients`: it must be called only where the current value of `this.state.choosingRecipients` is `true`. In reading the code, there\'s an extra bit of work required to ensure that that contract is followed—I think it is, currently. But it feels fragile, and it leaves us open to the possibility that someone will innocently make a change to fix or improve something, and accidentally break the contract.\r\n\r\nThere\'s also the fact that the ""Choose recipients"" button doesn\'t really work as a toggle switch between the two states, but rather to just open the modal (i.e., change the state from `false` to `true`); it gets hidden behind the modal, and therefore effectively disabled, when the modal opens. It might actually be good to reinforce this pattern by using ZulipButton\'s `disabled` prop.', 'comment_created': datetime.datetime(2020, 6, 22, 17, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 443728740, 'comment_body': ""This file (src/sharing/SharingScreen.js) is getting pretty large; let's maybe split `ShareToPm` into its own file, and do the same for `ShareToStream`. Not only does this make it easier to find things we're looking for, but it lets us avoid a tricky naming problem. Between, e.g., `ShareToPm` and `ShareToPmComponent`, the difference isn't really that one is a component and the other is not...but it's hard to think of other names that would be much better.\r\n\r\nWhat we've often done is to give the inner, wrapped component the same name as the file, and not give the `connect`ing component a name at all, but just do something like\r\n\r\n```javascript\r\nexport default connect(/* ... /*)(/* ... */);\r\n```\r\n\r\nBut this pattern depends on that separation between files."", 'comment_created': datetime.datetime(2020, 6, 22, 17, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 443730545, 'comment_body': 'I think we\'ve more often used `return null`. I don\'t think returning an empty Fragment will give any wrong behavior, but `null` is more instantly recognizable as ""nothing"", to me.', 'comment_created': datetime.datetime(2020, 6, 22, 17, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 443736892, 'comment_body': '`fetchTopicsForActiveStream` wasn\'t added in this PR, but it seems slightly misnamed—it leaves me thinking (a) what does ""active"" mean (this is not answered in a jsdoc), and (b) that it must have some internal way of determining which stream is ""active"".\r\n\r\nBut it doesn\'t choose an ""active"" stream for you; a stream must be supplied. And there\'s no reason (that I can tell) for the stream you pass to be ""active"" in any way; I think this ""active"" idea is just a distraction. With that in mind, I think `fetchTopicsForStream` better describes its interface.\r\n\r\nWould you mind making a small commit before these commits, with that renaming?', 'comment_created': datetime.datetime(2020, 6, 22, 18, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 443746143, 'comment_body': ""I think 'Sending Message...' isn't being translated. Unfortunately, `showToast` doesn't automatically translate the text you pass to it, like, `ZulipButton` and `Label` do. This would likely mean adding this to the top of the component:\r\n\r\n```\r\n  static contextType = TranslationContext;\r\n  context: GetText;\r\n```\r\n\r\nand then, in this method, saying `const _ = this.context;`. Then `showToast(_('Sending Message...'));`.\r\n\r\nAn example of this pattern is in `src/user-status/UserStatusScreen.js` and it's documented at the `GetText` type in `src/types.js`.\r\n\r\nI think there are a few more strings that are also not being translated; what's passed as the `placeholder` prop to `Input` components, for example. Let's get all the user-facing strings translated that we can."", 'comment_created': datetime.datetime(2020, 6, 22, 18, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 443790413, 'comment_body': ""Some of these params that we use in the request don't really correspond with the doc linked to in the code comment (https://zulip.com/api/send-message): `subject`, `local_id`, and `queue_id`. There must be a story behind this; maybe something changed on the server?"", 'comment_created': datetime.datetime(2020, 6, 22, 19, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 444003136, 'comment_body': 'Yeah, even I found this strange.', 'comment_created': datetime.datetime(2020, 6, 23, 7, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 444632855, 'comment_body': '(Moved [to chat](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/Android.20activity.20to.20handle.20intent/near/912421).)', 'comment_created': datetime.datetime(2020, 6, 24, 4, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 444633990, 'comment_body': ""I think I may have at some point suggested having some of these components in a single file. But I agree, this file is pretty long and it'd be good to apply our usual convention where each of the component classes, plus its `connect` wrapper, gets its own file.\r\n"", 'comment_created': datetime.datetime(2020, 6, 24, 4, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 444636010, 'comment_body': ""This type should have jsdoc to explain what it's about. In particular that it represents a user action of sharing something from another app.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 24, 4, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 444636963, 'comment_body': ""This can be inlined, as an arrow function. Unlike in the case where we're passing a callback as a React prop, nothing's going to be looking to see if one value is `===` to a previous one and optimizing if it is -- which is the reason we have to have these separate named handler functions so often elsewhere.\r\n"", 'comment_created': datetime.datetime(2020, 6, 24, 4, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 444637916, 'comment_body': ""What's the reason for these fixmes?\r\n\r\nIn general where there's a `$FlowFixMe`, we always want at least a line or so of comment identifying why it was necessary.\r\n"", 'comment_created': datetime.datetime(2020, 6, 24, 4, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 444638346, 'comment_body': 'This is basically a render method, a helper for the component\'s main render method. So let\'s put ""render"" in the name, like `renderUsersPreview`.\r\n', 'comment_created': datetime.datetime(2020, 6, 24, 4, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 444639012, 'comment_body': ""Let's put the action handlers above all the render logic -- so above `isSendButtonEnabled` as well as `getUsersPreview` / `renderUsersPreview`."", 'comment_created': datetime.datetime(2020, 6, 24, 4, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 444640370, 'comment_body': ""`subject` is the old name for `topic`.\r\n\r\nDunno what the story is with `local_id` and `queue_id` -- it looks like those aren't documented, but I'd sure expect that they're still supported, as they're how we match up the eventual `message` / EVENT_NEW_MESSAGE event with the right outbox message to forget about. They may just never have been documented, though I thought our API-docs infrastructure was at the point now where it'd flag that. Would be good to ask in chat.\r\n"", 'comment_created': datetime.datetime(2020, 6, 24, 4, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 444757265, 'comment_body': ""Changed to 'always'."", 'comment_created': datetime.datetime(2020, 6, 24, 9, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 444757639, 'comment_body': 'Added the `key` attribute.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 444758564, 'comment_body': 'Changed to `selectedRecipients`.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 444761288, 'comment_body': 'I agree, it can be confusing. Removed the toggle function.\r\n\r\n>There\'s also the fact that the ""Choose recipients"" button doesn\'t really work as a toggle switch between the two states, but rather to just open the modal (i.e., change the state from false to true); it gets hidden behind the modal, and therefore effectively disabled, when the modal opens. It might actually be good to reinforce this pattern by using ZulipButton\'s disabled prop.\r\n\r\nThe button does not get hidden behind, it\'s not rendered at all when `choosingRecipients` is true.\r\n\r\n```js\r\n    if (choosingRecipients) {\r\n      return (\r\n        <Modal>\r\n          <ChooseRecipientsScreen onComplete={this.handleChooseRecipients} />\r\n        </Modal>\r\n      );\r\n    }\r\n```\r\n\r\nSo I think it\'s okay to not use the `disabled` prop.\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 24, 9, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 444761661, 'comment_body': ""Okay, I've split the two sharing components into their own files."", 'comment_created': datetime.datetime(2020, 6, 24, 9, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 444762016, 'comment_body': 'Changed to `null`.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 444762220, 'comment_body': 'Sure, added the commit.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 444767418, 'comment_body': ""Added `_` to `showToast` calls.\r\n\r\n>I think there are a few more strings that are also not being translated; what's passed as the placeholder prop to Input components, for example. Let's get all the user-facing strings translated that we can.\r\n\r\n\r\nI think the Zulip `Input` translates placeholders automatically?\r\n\r\n```js\r\n/**\r\n * A light abstraction over the standard TextInput component\r\n * that allows us to seamlessly provide internationalization\r\n * capabilities and also style the component depending on\r\n * the platform the app is running on.\r\n *\r\n * @prop placeholder - Translated before passing to TextInput as\r\n *   a prop of the same name.\r\n */\r\nexport default class Input extends PureComponent<Props, State> {\r\n```"", 'comment_created': datetime.datetime(2020, 6, 24, 9, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 444770328, 'comment_body': 'Added a short jsdoc.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 444773127, 'comment_body': 'Okay, removed `handleReceivedData` and made the calls inline.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 444775994, 'comment_body': ""Removing the `$FlowFixMe` causes the following error:\r\n```\r\nError ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ src/sharing/SharingScreen.js:23:15\r\n\r\nCannot call createMaterialTopTabNavigator with object literal bound to routeConfigs because in property Stream.screen:\r\n • Either property navigationOptions is missing in React.ComponentType [1] but exists in\r\n   withOptionalNavigationOptions [2].\r\n • Or React.ComponentType [1] is incompatible with React.StatelessFunctionalComponent [3].\r\n\r\n     src/sharing/SharingScreen.js\r\n      18│ |}>;\r\n      19│\r\n      20│ const SharingTopTabNavigator = createMaterialTopTabNavigator(\r\n      21│   {\r\n      22│     Stream: {\r\n      23│       screen: ShareToStream,\r\n      24│     },\r\n      25│     'Private Message': {\r\n      26│       // $FlowFixMe\r\n      27│       screen: ShareToPm,\r\n      28│     },\r\n      29│   },\r\n      30│   {\r\n      31│     tabBarPosition: 'top',\r\n      32│     animationEnabled: true,\r\n\r\n     flow-typed/npm/react-navigation_v2.x.x.js\r\n [2] 313│     withOptionalNavigationOptions<Options>;\r\n        :\r\n [3] 628│   > = React$StatelessFunctionalComponent<{\r\n     629│     ...Props,\r\n     630│     ...NavigationContainerProps<State, Options>,\r\n     631│   }> &\r\n\r\n     src/react-redux.js\r\n [1]  98│ ): C => ComponentType<$ReadOnly<OwnProps<C, SP>>> {\r\n```\r\n\r\n@chrisbobbe do you know what might be causing this? I can't figure out. I've added a generic comment:\r\n```\r\n      // Requires additional props that we dont need. $FlowFixMe.\r\n```"", 'comment_created': datetime.datetime(2020, 6, 24, 9, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 444776588, 'comment_body': 'Changed to `renderUsersPreview`.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 444786740, 'comment_body': 'Okay, moved `renderUsersPreview` above. Looks more uniform now :)', 'comment_created': datetime.datetime(2020, 6, 24, 10, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 445246901, 'comment_body': 'I think https://github.com/zulip/zulip-mobile/pull/4114#issuecomment-634255590 is our latest knowledge on this error. Thanks, Greg, for writing that up! 🙂 ', 'comment_created': datetime.datetime(2020, 6, 25, 0, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 445256863, 'comment_body': '> `subject` is the old name for `topic`.\r\n\r\nTrue, I know, but it would be good to know more; maybe we can start using the new name (maybe deeper changes are needed to allow this?), when was the switch made, etc.', 'comment_created': datetime.datetime(2020, 6, 25, 1, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 445258596, 'comment_body': 'Ah, and that in turn leads me to this existing fixme:\r\n```\r\n$ rg -C2 FixMe.*nav \r\nsrc/nav/AppNavigator.js\r\n34-\r\n35-export default createStackNavigator(\r\n36:  // $FlowFixMe react-navigation types :-/ -- see a36814e80\r\n37-  {\r\n38-    account: { screen: AccountPickScreen },\r\n```\r\n\r\nWhich, when I try removing it, produces exactly the same kind of error as @agrawal-d quoted above.\r\n\r\nThat more recent writeup has more information than the commit mentioned in that fixme. But that certainly serves as an example of how these explanations don\'t need to be long :wink: .\r\n\r\nA couple of smaller points on what goes in the fixme:\r\n* The keyword `$FlowFixMe` goes at the start of the line, right after the `// `. That helps it stand out when scanning the code by eye. (Same thing goes for TODO, or anything else of that ilk.)\r\n* Thinking about it a bit more, I think the key information I want in the explanation comes down to: why haven\'t we just already fixed it? So with ""Requires additional props that we don\'t need"", the natural next thing is: OK, let\'s make whatever\'s requiring those stop requiring them, then. But then the answer to that is: ah but it\'s over in the react-navigation library (or anyway its types, specified in its libdef). That doesn\'t mean we *can\'t* fix it -- it\'s just code, we can change it -- but it\'s more work. So identifying a specific third-party place as the location of the problem is a common kind of explanation for these.\r\n', 'comment_created': datetime.datetime(2020, 6, 25, 1, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 445261894, 'comment_body': ""> Ah, and that in turn leads me to this existing fixme: [...]\r\n\r\nOne minor point about that example is that the `$FlowFixMe` is less precise than it could be; in this PR and https://github.com/zulip/zulip-mobile/pull/4114 (in the latter, at Greg's suggestion) we get some nice precision by putting it directly above the `screen` property in all those places. (I just tried that with one case in AppNavigator.js and commented out the other cases, and it was fine, as we'd expect.)\r\n\r\nBut adding 29 `$FlowFixMe`s might be cumbersome, and we don't use anything other than the `screen` property. In fact, I'm pretty sure (untested though) the API would allow us to do this for all of them there:\r\n\r\n```diff\r\n- account: { screen: AccountPickScreen },\r\n+ account: AccountPickScreen,\r\n```\r\n\r\nBut no need to bother with that now."", 'comment_created': datetime.datetime(2020, 6, 25, 1, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 445809892, 'comment_body': 'Tim responded [here](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/https.3A.2F.2Fzulip.2Ecom.2Fapi.2Fsend-message/near/915346).', 'comment_created': datetime.datetime(2020, 6, 25, 20, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 456740031, 'comment_body': 'nit: missing final newline', 'comment_created': datetime.datetime(2020, 7, 18, 2, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 456740130, 'comment_body': 'nit: missing final newline', 'comment_created': datetime.datetime(2020, 7, 18, 2, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 456740317, 'comment_body': ""need to delete closing `-->` too -- as is, the XML doesn't parse, and so e.g. for me Gradle sync doesn't work (though the actual build seems to work fine! or at least `tools/test android` does)\r\n"", 'comment_created': datetime.datetime(2020, 7, 18, 2, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 456740847, 'comment_body': ""Let's make it `String` -- that seems more true to the intent of the method.\r\n\r\n(I'm guessing that the Android Studio auto-conversion went for `String?`, which is natural because Java doesn't make the distinction. The cleanup to `String` can be in a followup commit -- it's fine and good for that sort of cleanup to make the Kotlin more idiomatic to be in a separate commit from the conversion.)\r\n"", 'comment_created': datetime.datetime(2020, 7, 18, 3, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 456741584, 'comment_body': 'Should just be ""MainActivity"", because it\'s global to this file so it\'s the natural thing that other logging calls in this file will use. Or leave it specific to sharing but name it something specific like `SHARE_TAG`.', 'comment_created': datetime.datetime(2020, 7, 18, 3, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 456742301, 'comment_body': 'nit: open-brace at end of previous line, after `->` (like in other examples)', 'comment_created': datetime.datetime(2020, 7, 18, 3, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 456742796, 'comment_body': 'Ah, thanks for this cleanup! You may find 5542b01da informative for what that was about.\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 18, 3, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 456742959, 'comment_body': 'In commit message: summary line is too long. Main solution is to drop the old or the new name (or both, and say something like ""Fix misleading ""...ActiveStream"" name."")', 'comment_created': datetime.datetime(2020, 7, 18, 3, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 456747801, 'comment_body': ""nit: add items somewhere other than the end of the list, to avoid noise in the diff (because JSON doesn't permit a comma after the last item)\r\n"", 'comment_created': datetime.datetime(2020, 7, 18, 4, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 456748461, 'comment_body': '```suggestion\r\n/**\r\n * The data we get when the user ""shares"" to Zulip from another app.\r\n */\r\nexport type SharedData = SharedText | SharedImage | SharedFile;\r\n```\r\n\r\nOne thing I want to communicate in this jsdoc is that this is the data we *got* from some act of sharing. The ""can be shared"" sounds like it\'s something that might in the future be shared, or might not.\r\n\r\nOne thing that helps tighten up the jsdoc -- makes it shorter, and perhaps also a bit easier to write -- is that the jsdoc on a type focuses on *a value of the type*. Like how `PmConversationData` just above is a ""Summary of a PM conversation"", and `Identity` is ""An identity belonging to this user in some Zulip org"", etc. So no need for ""The type of …""; and that perhaps helps with the motivation for ""can be"", too.\r\n\r\nThe ""either plain text or …"" is an implementation detail and so can just be left out. That also avoids a risk of another alternative being added later and the jsdoc not getting updated :wink: ', 'comment_created': datetime.datetime(2020, 7, 18, 4, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 456748752, 'comment_body': 'Sorry, this was ambiguous -- I meant that this function `handleShareReceived` could be inlined :slightly_smiling_face: \r\n\r\nThis is fine too, though; IIRC I actually waffled on whether I wanted to inline `handleShareReceived`, or inline `handleReceivedData` at its two call sites including this one.\r\n', 'comment_created': datetime.datetime(2020, 7, 18, 4, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 456748921, 'comment_body': ""Mentioned this in a previous comment (https://github.com/zulip/zulip-mobile/pull/4124#discussion_r445258596), and it's small but important: $FlowFixMe goes at the start of the comment line, to help it stand out when scanning the code by eye.\r\n"", 'comment_created': datetime.datetime(2020, 7, 18, 4, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 456749110, 'comment_body': 'Also from that comment:\r\n\r\n> I think the key information I want in the explanation comes down to: why haven\'t we just already fixed it? So with ""Requires additional props that we don\'t need"", the natural next thing is: OK, let\'s make whatever\'s requiring those stop requiring them, then. But then the answer to that is: ah but it\'s over in the react-navigation library (or anyway its types, specified in its libdef). That doesn\'t mean we can\'t fix it -- it\'s just code, we can change it -- but it\'s more work. So identifying a specific third-party place as the location of the problem is a common kind of explanation for these.\r\n\r\nSo seeing this, I still have that question ""OK, let\'s make whatever\'s requiring those stop requiring them, then -- why didn\'t we just do that?""\r\n\r\nAnd here\'s what I wrote for similar errors elsewhere, which answers that question:\r\n```js\r\n  // $FlowFixMe react-navigation types :-/ -- see a36814e80\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 18, 4, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 456749329, 'comment_body': ""In general, better to leave a blank line than to just fill it in with new code -- they're often there for a reason, as separators.\r\n\r\nThis one separates `handleInitialNotification`, which looks for something that's already happened and acts on it, from the rest of this method which sets up various handlers to listen for things that happen in the future. So `handleInitialShare` should go above it, because it also looks for something that's already happened and acts on that.\r\n"", 'comment_created': datetime.datetime(2020, 7, 18, 4, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 456750118, 'comment_body': ""Huh! That is peculiar. It leaves me still curious what's different between this and notifications that would make it needed here and not there.\r\n\r\nI don't see this mentioned in the group PM thread with you and me and Chris. Probably #mobile-team would be the best place for any further debugging, in any case.\r\n\r\nOne possibility I wonder about is that perhaps it's related to how in a previous version of this PR there was a separate activity. Now that that's gone, the way the rest of the system works is more like it does for notifications.\r\n"", 'comment_created': datetime.datetime(2020, 7, 18, 5, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 456752356, 'comment_body': ""There's quite a bit of nontrivial logic appearing twice, between here and ShareToStream. Rather than duplicate it, let's pull that out into a common function -- perhaps in a file like `src/sharing/send.js`.\r\n\r\nThen this `handleSend` function will just\r\n* deal with the component's state and props -- like collecting `sharedData` from the nav prop\r\n* do the bits of logic that actually do differ between these two versions, like computing the message's `type`, `to`, and `content`\r\n"", 'comment_created': datetime.datetime(2020, 7, 18, 5, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': '17f73d88d79ca2e13944e0b0ce55d06229074c4d', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '811a7e00e4b8aaa3450d746827df779dea32898e', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59658c49e07b04e9cbed0ebc2b6e459db379a8c8', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
417332245,spinner [nfc]: Fix misaligned images.,"
![spinner](https://user-images.githubusercontent.com/7714968/81813443-140e8780-9545-11ea-91b9-047420f8ea09.gif)

The spinner is still  *slightly* wobbly, but it's only visible if you zoom in a lot. If this is not acceptable, feel free to close this PR. :) 

The image was misaligned, and had more empty space on top than in
the bottom, causing it to appear wobbly when rotated. The
image has been edited to fix this.

Closes #4080.",True,4110,https://api.github.com/repos/zulip/zulip-mobile/pulls/4110,https://github.com/zulip/zulip-mobile/pull/4110,closed,0,0,2,1,5,0,0,0,[],2020-05-13 12:34:45+00:00,2020-05-14 17:56:33+00:00,105708.0,"1 day, 5:21:48",[],"[{'commit_sha': '255643307cb3847d6b1ce996643bcdef7568723d', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
417311755,ligthbox: Toggle header & footer on tapping the entire view.,"As opposed to only when the visible image is tapped, as we
currently do.
This is done by simply adding another prop `onViewTap` ( for the
black part) in the react-native-photo-view component[1].
Note that `onTap` and `onViewTap` respond mutually exclusive
areas, the union of which makes up the entire component.

Closes #4098.

[1] https://github.com/alwx/react-native-photo-view#properties",True,4109,https://api.github.com/repos/zulip/zulip-mobile/pulls/4109,https://github.com/zulip/zulip-mobile/pull/4109,closed,1,0,1,1,1,0,0,0,[],2020-05-13 11:54:20+00:00,2020-05-18 22:19:42+00:00,469522.0,"5 days, 10:25:22",[],"[{'commit_sha': 'ccf7a0817725b20fff14c0edd7ea20e77f1b4220', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
417293399,message list: Fix copying links to clipboard.,"Previously, in-realm links copied to the clipboard didn't include
the realm domain, and were essentially invalid.

Now, the complete URL is copied to the clipboard.

Closes #4107.",True,4108,https://api.github.com/repos/zulip/zulip-mobile/pulls/4108,https://github.com/zulip/zulip-mobile/pull/4108,closed,3,2,1,1,1,0,0,0,[],2020-05-13 11:17:14+00:00,2020-05-19 00:24:51+00:00,479257.0,"5 days, 13:07:37",[],"[{'commit_sha': '7b454fc40108987865a59799c0de8671b8f26d2b', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
416604503,docs: Add more troubleshooting info for build and run.,"Adds command to clean gradle build, and link to upstream
troubleshooting docs.",True,4103,https://api.github.com/repos/zulip/zulip-mobile/pulls/4103,https://github.com/zulip/zulip-mobile/pull/4103,closed,12,0,1,1,2,0,0,0,[],2020-05-12 09:33:06+00:00,2020-05-29 17:17:41+00:00,1496675.0,"17 days, 7:44:35",[],"[{'commit_sha': '6ba50cc9a2cb1b5cb53ef8c7a484dbf3eddca90e', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
416564027,Warn on @-mentioning someone who won't see it because not subscribed,"Fixes #3373.

**Summary of Changes**
* We use the endpoint `/users/{user_id}/subscriptions/{stream_id}` to get the subscription status.
* On non-PM screens, we show a warning when someone unsubscribed is mentioned.
* This warning shows up with a nice animation.
* Pressing the subscribe button subscribes the user and dismisses the warning.
* Tapping on the warning dismisses it.
* Multiple warnings can be shown at a time.

![Screenshot_20200512-133929](https://user-images.githubusercontent.com/7714968/81659129-0e3a7880-9457-11ea-943a-35d0bea35256.png)

Web app equivalent, for comparison:
![image](https://user-images.githubusercontent.com/7714968/81660516-7b9ad900-9458-11ea-810b-035fa7ac63de.png)


",True,4101,https://api.github.com/repos/zulip/zulip-mobile/pulls/4101,https://github.com/zulip/zulip-mobile/pull/4101,closed,342,6,8,9,15,49,2,0,"[{'name': 'a-compose/send'}, {'name': 'P1 high-priority'}]",2020-05-12 08:18:13+00:00,2020-08-06 09:15:45+00:00,7433852.0,"86 days, 0:57:32","[{'comment_id': 439640066, 'comment_body': 'Should have a short jsdoc with a link to API documentation.\r\n\r\nIt looks like there might not be proper API documentation for this new endpoint. In that case (a) please file a zulip/zulip bug asking for some :slightly_smiling_face: , and (b) link to the best reference you can find -- might be the PR or issue from when it was added, or maybe just the implementation.\r\n', 'comment_created': datetime.datetime(2020, 6, 12, 20, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 439641291, 'comment_body': ""These should go in the same file as they're used -- much easier to read and understand that way.\r\n"", 'comment_created': datetime.datetime(2020, 6, 12, 21, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 439641716, 'comment_body': 'nit: blank line to separate the props the caller cares about from the ones supplied by wrappers', 'comment_created': datetime.datetime(2020, 6, 12, 21, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 439643235, 'comment_body': 'Prefer exact object types wherever possible; see discussion at #3452.\r\n', 'comment_created': datetime.datetime(2020, 6, 12, 21, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 439645948, 'comment_body': ""Hmm, I see. Let's use `Label` instead -- that's how we normally handle translation, so that will be more explicit about how we're translating this string.\r\n\r\nNote that its argument is a `LocalizableText` -- you can pass an object there like `{ text: '{username} will not …', values: { username: user.full_name } }`.\r\n\r\n(That probably is not an awesome way to write that interface, and we should make it take a `values` prop instead. But that's an independent improvement -- the API should work just fine already.)\r\n\r\nI think that will also be a bit simpler in this code than calling `_.intl.formatMessage` directly is.\r\n"", 'comment_created': datetime.datetime(2020, 6, 12, 21, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 439648045, 'comment_body': ""Having two different callbacks here for the same event doesn't feel like the right interface. Better to adjust the one callback's interface to do what we need it to."", 'comment_created': datetime.datetime(2020, 6, 12, 21, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 439654507, 'comment_body': 'The `ComposeBox` component already handles a ton of different things, and that\'s already made it a lot more challenging to understand than it ought to be. So I\'d like to avoid adding more, and instead put new functionality in appropriate new components and  have `ComposeBox` just do the minimum to wire them in.\r\n\r\nHere, I think a good way to do that would be to have a component that\r\n* has zero or more individual `MentionedUserNotSubscribed` components as children\r\n* has the `unsubscribedMentions` state\r\n* has the implementations of these three methods\r\n\r\nThen from `ComposeBox` we just need to be able to invoke `handleMentionSubscribedCheck` and `clearMentionWarnings`. I think the React way to do this is to have `ComposeBox` hold a ""ref"":\r\nhttps://reactjs.org/docs/refs-and-the-dom.html\r\nusing `createRef`, that points to that child component.\r\n\r\n(Alternatively the state could live up at `ComposeBox`, and it could just pass the child some callbacks to get at it. But that would expose somewhat more of the details to `ComposeBox`, and because of the situation where `ComposeBox` has too many details of too many things already, I\'d rather avoid that.)\r\n', 'comment_created': datetime.datetime(2020, 6, 12, 21, 44, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 439975242, 'comment_body': 'Added a JSDoc, and also a link to the relevant commit.', 'comment_created': datetime.datetime(2020, 6, 15, 7, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 439977004, 'comment_body': 'Changed to `Subscription | {| ...Stream, in_home_view: boolean |}`, directly copied from the selector.', 'comment_created': datetime.datetime(2020, 6, 15, 7, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 439977388, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 6, 15, 7, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 439983385, 'comment_body': 'Moved to the component', 'comment_created': datetime.datetime(2020, 6, 15, 7, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 439983475, 'comment_body': 'Changed to `Label`.', 'comment_created': datetime.datetime(2020, 6, 15, 7, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 440000670, 'comment_body': ""OK, I've modified the current callback."", 'comment_created': datetime.datetime(2020, 6, 15, 8, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 440161402, 'comment_body': 'Done. The new component is `MentionWarnings`.', 'comment_created': datetime.datetime(2020, 6, 15, 13, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 440162369, 'comment_body': 'See TODO comment above the `connect` call.', 'comment_created': datetime.datetime(2020, 6, 15, 13, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 449259543, 'comment_body': ""Nit: Would it be possible to use the new `ref` API, `React.createRef()`? Here's a [doc](https://reactjs.org/docs/refs-and-the-dom.html#creating-refs); looks like it's been available since React 16.3.\r\n\r\nNot a big deal if not, but it's nice to experiment with new APIs and update when possible, and we haven't done so with this API yet. 🙂 (**edit**: Mm, looks like maybe we have tried before, but quite a while ago; there was some [discussion](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/MessageListWeb/near/599846) in 2018.)\r\n\r\nIt might be tricky to get it to work with Flow, but from some experimentation, I believe this follows the new API and gives no Flow errors:\r\n\r\n```diff\r\ndiff --git src/compose/ComposeBox.js src/compose/ComposeBox.js\r\nindex 33a7443fb..df0417f18 100644\r\n--- src/compose/ComposeBox.js\r\n+++ src/compose/ComposeBox.js\r\n@@ -111,7 +111,7 @@ class ComposeBox extends PureComponent<Props, State> {\r\n \r\n   messageInput: ?TextInput = null;\r\n   topicInput: ?TextInput = null;\r\n-  mentionWarnings: ?MentionWarnings = null;\r\n+  mentionWarnings: React$ElementRef<MentionWarnings> = React.createRef();\r\n \r\n   inputBlurTimeoutId: ?TimeoutID = null;\r\n \r\n@@ -194,8 +194,8 @@ class ComposeBox extends PureComponent<Props, State> {\r\n     this.setMessageInputValue(message);\r\n \r\n     if (completionType === '@') {\r\n-      if (this.mentionWarnings) {\r\n-        this.mentionWarnings.getWrappedInstance().handleMentionSubscribedCheck(completion);\r\n+      if (this.mentionWarnings.current) {\r\n+        this.mentionWarnings.current.getWrappedInstance().handleMentionSubscribedCheck(completion);\r\n       }\r\n     }\r\n   };\r\n@@ -263,8 +263,8 @@ class ComposeBox extends PureComponent<Props, State> {\r\n \r\n     this.setMessageInputValue('');\r\n \r\n-    if (this.mentionWarnings) {\r\n-      this.mentionWarnings.getWrappedInstance().clearMentionWarnings();\r\n+    if (this.mentionWarnings.current) {\r\n+      this.mentionWarnings.current.getWrappedInstance().clearMentionWarnings();\r\n     }\r\n \r\n     dispatch(sendTypingStop(narrow));\r\n@@ -379,13 +379,7 @@ class ComposeBox extends PureComponent<Props, State> {\r\n \r\n     return (\r\n       <View style={this.styles.wrapper}>\r\n-        <MentionWarnings\r\n-          narrow={narrow}\r\n-          stream={stream}\r\n-          ref={component => {\r\n-            this.mentionWarnings = component;\r\n-          }}\r\n-        />\r\n+        <MentionWarnings narrow={narrow} stream={stream} ref={this.mentionWarnings} />\r\n         <View style={[this.styles.autocompleteWrapper, { marginBottom: height }]}>\r\n           <TopicAutocomplete\r\n             isFocused={isTopicFocused}\r\n\r\n```"", 'comment_created': datetime.datetime(2020, 7, 2, 20, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 449263023, 'comment_body': ""I think it would be helpful to have some JSDoc about the interface of the AutocompleteView component, in particular, describing what information is represented by `completion` and `lastWordPrefix` here. I don't really understand it just from the variable names, and it shouldn't be necessary (if we can avoid it) to have to inspect the implementation."", 'comment_created': datetime.datetime(2020, 7, 2, 20, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 449266185, 'comment_body': ""Here, we've called the third argument `completionType`; in `AutocompleteView`, it looks like we call the same argument `lastWordPrefix`. I don't see the connection right away, so it's hard to tell if this is a mistake or if these actually correspond to each other.\r\n\r\nI think...it's not a mistake, and in both cases we expect them to be the keys of the `prefixToComponent` lookup object in AutocompleteView.js, i.e., ':' or '#' or '@'. \r\n\r\nIf that's the case, let's see if we can say that explicitly with the types, so instead of `string`, it would be `':' | '#' | '@'`. A JSDoc would certainly help with this as well, as I've mentioned in another comment. 🙂 "", 'comment_created': datetime.datetime(2020, 7, 2, 21, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 449269344, 'comment_body': ""I'm also looking at the `message` argument in of `handleMentionSubscribedCheck` and the fact that we're passing `completion` as that argument. I don't currently have a very clear picture of what either one means.\r\n\r\nOne thing that comes to mind with a name like `message` is that we do have a `Message` type. Maybe `message` could be named more specifically, so that we don't think of the `Message` type (which I think is irrelevant here as we're talking about a message that hasn't been sent yet)?\r\n\r\nSince we've designed `MentionWarnings` so that `handleMentionSubscribedCheck` gets called from a ref, from the outside, the interface of `handleMentionSubscribedCheck` effectively becomes an important part of the interface of `MentionWarnings`. (Most of the time, these methods would only be called from within the component's implementation, so they aren't part of the component's outward-facing interface.) That would be good information to have in a JSDoc for `MentionWarnings`. 🙂 "", 'comment_created': datetime.datetime(2020, 7, 2, 21, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 449751878, 'comment_body': '**Update**: The endpoint is now documented at https://zulipchat.com/api/get-subscription-status', 'comment_created': datetime.datetime(2020, 7, 4, 8, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 449757190, 'comment_body': 'Thanks for the diff. I did try this earlier during debugging, but it did not make it to the final version. \r\nUsed it now.', 'comment_created': datetime.datetime(2020, 7, 4, 9, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 449761604, 'comment_body': "">If that's the case, let's see if we can say that explicitly with the types, so instead of string, it would be ':' | '#' | '@'. A JSDoc would certainly help with this as well, as I've mentioned in another comment. slightly_smiling_face\r\n\r\nI had tried `':' | '#' | '@'` earlier as the type, but it causes the Flow error, because the value is derived from some plumbing in `getAutocompleteFilter`, and Flow is not intelligent enough to figure out that only these three are possible values, instead of a complete string."", 'comment_created': datetime.datetime(2020, 7, 4, 10, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 463309175, 'comment_body': 'Is there a reason to make this a `Component` instead of a `PureComponent`?', 'comment_created': datetime.datetime(2020, 7, 30, 22, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 463321466, 'comment_body': 'I think we should assume that the Promise returned by `api.getSubscriptionToStream` might reject, likely because of some kind of failure with the request.\r\n\r\nLooks like there\'s a handy function `showErrorAlert` we could use. I don\'t know how precise we should be about the error message; it seems a little silly to give a full paragraph like (jokingly, but still, I don\'t think it would boil down much): ""Oh, well, we were about to go run and check to see if this user was subscribed or not, but something went wrong (details details) and, well, in the end we\'re not really sure if there\'ll be a problem if you @-mention the user, so I guess do so at your own risk? 🤷 ""\r\n\r\nMaybe just something like ""Failed to retrieve some details about the @-mentioned user."" What do you think?', 'comment_created': datetime.datetime(2020, 7, 30, 23, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 463378578, 'comment_body': '```suggestion\r\n * See https://zulip.com/api/get-subscription-status for\r\n```\r\n\r\n(after #4142 )\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 2, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463379830, 'comment_body': 'I think this is unused and can be taken out (along with `withGetText`), now that it uses `Label` to handle the translation.\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 2, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463396159, 'comment_body': ""Hmm -- at the other spot this is `this.mentionWarnings.current.getWrappedInstance()`.\r\n\r\nIs there a reason for the difference? I'm guessing it's unintentional.\r\n\r\nDo they both work?\r\n\r\nThe examples in the docs at https://reactjs.org/docs/refs-and-the-dom.html seem to use `current`. Probably we should too, then, even if the other way also seems to work."", 'comment_created': datetime.datetime(2020, 7, 31, 4, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463396478, 'comment_body': 'This pattern can be shortened with `?.`:\r\n`this.mentionWarnings.current?.getWrappedInstance()?.handleMentionSubscribedCheck(completion)`.\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 4, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463397545, 'comment_body': ""Better to leave out the `props` parameter here when it's not going to be used. React Redux inspects this callback to see if it takes a second parameter, and if it doesn't then it applies an optimization where it knows it doesn't need to re-evaluate anything if the props change (and instead only if the state changes.)\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 4, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463398079, 'comment_body': 'Can more simply say `for (const user of usersById.values())`.\r\n\r\nSee MDN:\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 4, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463400268, 'comment_body': ""Also all this could be a *lot* simpler: `usersById.get(userId)` :smile: That's the great thing about a map data structure!\r\n\r\nWe'll still need the loop in the case where we're looking for a full name.\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 4, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463400422, 'comment_body': ""This logic looks quite suspicious to me.\r\n\r\nIt seems like we're trying to parse the message's markup to look for an @-mention. That's a tricky thing to do accurately.\r\n\r\nIf we were to write logic to do that, it should be in a function of its own with a nice clean interface, and with thorough unit tests. For example: what about a message that has some `**bold**` text and then has an @-mention? Or, what about a message that has several @-mentions in it?\r\n\r\nLooking at the place this is called, though, it looks like the argument it's passed may not actually be the message text? That's contrary to this function's jsdoc if so. But `handleMessageAutocomplete` passes it the `completion` it received, which in turn is described at the `onAutocomplete` prop's jsdoc as:\r\n```\r\n   * @param completion The suggestion selected by the user.\r\n```\r\nWhich, I'm still not 100% sure what that means -- does it look like `@**Divyanshu Agrawal**` or `Divyanshu Agrawal` or something else? (Based on the code here in this function, I'm guessing the former.) Either way, that makes this problem a lot more tractable than it would be if it were really an entire message."", 'comment_created': datetime.datetime(2020, 7, 31, 4, 36, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463402184, 'comment_body': ""One thing that would I think help significantly with reading this code and understanding what's going on is to take all the logic that parses the text of an @-mention and pull it out as its own function.\r\n\r\nThe function signature could be: `(mentionText: string, usersById: Map<number, UserOrBot>) => UserOrBot | void`. Where `mentionText` would be the argument passed to this function, which is called `message` but as I discovered above seems like it's (fortunately) not really a whole message's text at all.\r\n\r\nThat way it doesn't get entangled with this component's state, or with API calls or anything else.\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 4, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463403112, 'comment_body': ""This has a bug because it's going to compare the user objects for identity. If `unsubscribedMentions` contains an object describing user 1234, and `mentionedUser` is user 1234, but they're different objects, then it will not see the match. One way this could happen is if the user object gets updated in Redux as a result of that user changing something (like their avatar URL) after they've already been added to `unsubscribedMentions` -- then `unsubscribedMentions` will still have the old object.\r\n\r\nInstead, the comparison should just look at user IDs.\r\n\r\nProbably the simplest solution is that `unsubscribedMentions` should just *be* an array of user IDs. When we need full user objects, we can get them by looking them up in `usersById` (with `usersById.get`, as mentioned in another comment.)\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 4, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463417495, 'comment_body': 'No - I just read about `PureComponent` in performance.md; will use it now.', 'comment_created': datetime.datetime(2020, 7, 31, 5, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 463531891, 'comment_body': ""Oh yeah - the jsdoc is incorrect. Here, i'm only removing the `**` from the @-mention, not the complete message."", 'comment_created': datetime.datetime(2020, 7, 31, 10, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 463532476, 'comment_body': ""I've added relevant JSDocs to make it more clear what the `completion` looks like. ( It's of the form `**Divyanshu Agrawal**` )."", 'comment_created': datetime.datetime(2020, 7, 31, 10, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 463536560, 'comment_body': 'I am inclined towards silently ignoring the error in this case, because the error will only confuse the user - did the @-mention get sent, or did it not?', 'comment_created': datetime.datetime(2020, 7, 31, 10, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 463538913, 'comment_body': ""I'm getting this flow error:\r\n```\r\nError ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ src/compose/ComposeBox.js:196:7\r\n\r\nFlow does not yet support method or property calls in optional chains.\r\n\r\n     193│     this.setMessageInputValue(message);\r\n     194│\r\n     195│     if (lastWordPrefix === '@') {\r\n     196│       this.mentionWarnings.current?.getWrappedInstance()?.handleMentionSubscribedCheck(completion);\r\n     197│     }\r\n     198│   };\r\n     199│\r\n\r\n\r\nError ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ src/compose/ComposeBox.js:196:7\r\n\r\nFlow does not yet support method or property calls in optional chains.\r\n\r\n     193│     this.setMessageInputValue(message);\r\n     194│\r\n     195│     if (lastWordPrefix === '@') {\r\n     196│       this.mentionWarnings.current?.getWrappedInstance()?.handleMentionSubscribedCheck(completion);\r\n     197│     }\r\n     198│   };\r\n     199│\r\n\r\n\r\n\r\nFound 2 errors\r\n```"", 'comment_created': datetime.datetime(2020, 7, 31, 10, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 464734335, 'comment_body': ""This condition still says just `this.mentionWarnings` while the other says `this.mentionWarnings.current`, and after the method call inside this one was edited (following https://github.com/zulip/zulip-mobile/pull/4101#discussion_r463396159 ) to use `.current`.\r\n\r\nAgain they should probably all match -- they should if there isn't a reason for them to vary.\r\n\r\nBut also, if the code works in this version, then that means the condition isn't actually needed at all, because the condition in this version isn't doing anything. Perhaps just take these conditions out? They don't appear in the examples in the docs:\r\nhttps://reactjs.org/docs/refs-and-the-dom.html\r\n"", 'comment_created': datetime.datetime(2020, 8, 4, 0, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 464736464, 'comment_body': ""Dang, so be it then.\r\n\r\nIt looks like this is https://github.com/facebook/flow/issues/4303 ... which, good news, is closed as fixed! In v0.112.0, looks like. Which means we'll get that when we upgrade to RN v0.62: #3782.\r\n"", 'comment_created': datetime.datetime(2020, 8, 4, 0, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 464737279, 'comment_body': ""> It's of the form `**Divyanshu Agrawal**`\r\n\r\nNeither of the things I guessed! Glad the answer is written down :wink: "", 'comment_created': datetime.datetime(2020, 8, 4, 0, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 464739745, 'comment_body': ""Let's leave out the `if (user !== undefined)` and just unconditionally return `user` at this point.\r\n\r\nConsider what that condition means:\r\n* There was an explicit user ID in the @-mention.\r\n* For whatever reason, we don't find the user that the @-mention specifically identified by user ID.\r\n* We don't return yet, fall through, and end up looking to see if there's some *other* user who happens to have the same name, and return that one.\r\n\r\nIf that fall-through has any effect at all, then it means returning a user that is definitely not the same user object that the person who wrote the @-mention had selected. Very likely they have nothing at all to do with the person who was actually @-mentioned, and are just another person with the same name. That's no good -- much better to be honest about the fact that we simply didn't find the intended user.\r\n\r\nIn the context of the warning this code is part of providing, I guess the exact right thing to do is whatever the server is going to do to identify who's been @-mentioned. But I certainly hope that what the server is going to do when there's an explicit user ID is to stick to that, and not ignore it in favor of some potentially completely unrelated user who happens to have the same name. If not, then that's a bug that I expect would get fixed. So let's assume the server is doing the sensible thing, and do the same.\r\n"", 'comment_created': datetime.datetime(2020, 8, 4, 1, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 464744314, 'comment_body': '> the error will only confuse the user - did the @-mention get sent, or did it not?\r\n\r\nWell, that uncertainty is pretty appropriate! After all, the point of these warnings is that the @-mention won\'t reach the mentioned user if they\'re not subscribed.\r\n\r\nWe\'d like people to have confidence in general about whether someone else is going to get notified about their message or not. In cases where really don\'t know, the way to maintain that confidence is to say we don\'t know. Otherwise, when we *do* know and don\'t show a warning, people won\'t know whether to believe it, or whether instead this is another of those times that we failed to show them a warning before the surprising thing happened.\r\n\r\nI think a toast would be the appropriate form to report the issue. `showErrorAlert` pops up a modal dialog box, which is more interruptive than seems appropriate for this condition. Compare:\r\nhttps://material.io/components/dialogs#usage\r\nhttps://material.io/components/snackbars#usage\r\n(where ""snackbar"" is the current Material term for something very similar to a toast.)\r\n\r\nHere\'s another iteration on the text: ""Couldn\'t load information about ${user.full_name}"".\r\n', 'comment_created': datetime.datetime(2020, 8, 4, 1, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 464940391, 'comment_body': 'Makes sense! ', 'comment_created': datetime.datetime(2020, 8, 4, 10, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 464946566, 'comment_body': 'Yeah, makes sense.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 464949008, 'comment_body': 'The Flow typedef seems to prefer the use of `current`:\r\n```js\r\n  declare export function createRef<T>(\r\n  ): {|current: null | T|};\r\n```', 'comment_created': datetime.datetime(2020, 8, 4, 10, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 464949666, 'comment_body': ""And the Docs say we should access a ref using `current`:\r\nhttps://reactjs.org/docs/refs-and-the-dom.html#accessing-refs\r\n\r\nI'll use current in all places for now. If you still think we should leave it out, let me know. I'll remove it then."", 'comment_created': datetime.datetime(2020, 8, 4, 10, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 466166989, 'comment_body': '```suggestion\r\n        id: ""Couldn\'t load information about {fullName}"",\r\n        defaultMessage: ""Couldn\'t load information about {fullName}"",\r\n```\r\n\r\nThis also serves as a reminder that we should really make our own little wrapper for `formatMessage` that saves us from having to repeat the string twice :slightly_smiling_face: \r\n', 'comment_created': datetime.datetime(2020, 8, 6, 6, 9, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': '5844339165d57d1b7899d2272a37fe23c15f8e3f', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de6c66cebcc01f516b52ad9a5c70b246a668d450', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b02392284b16b8544e7b479a54900203f4fb32ac', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a428d55aff4f12f78c3efb7f036961cc48308284', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20bd98a52b48bf846187f1a840388319a5e71a8b', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f15268b09da31955a6fde9d1cdff90989e7f1fe', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ea9e9e1ed90c3f297c2e328c3c928f2891219d5', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '387ae00f50d05323bf4c27216390a9d242e5cf61', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29168ac74de23ffeb235f90297a3cb00bde8b3dd', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
414635329,people auto complete: Send user ID for users having same full name.,"Previously, our @-mention autocomplete had a bug, wherein it
failed to correctly mention the correct user if more than one user
had the same full name.

Now, if more than one users have the same full name, we now send
the user ID as well to ensure that the correct user is
@-mentioned.",True,4094,https://api.github.com/repos/zulip/zulip-mobile/pulls/4094,https://github.com/zulip/zulip-mobile/pull/4094,closed,8,0,1,1,10,6,1,0,[{'name': 'a-compose/send'}],2020-05-07 11:49:35+00:00,2020-07-02 19:32:51+00:00,4866196.0,"56 days, 7:43:16","[{'comment_id': 421843264, 'comment_body': 'I expect this will look different when https://github.com/zulip/zulip-mobile/issues/3339 is resolved, but it looks good to me as a fix before then.', 'comment_created': datetime.datetime(2020, 5, 7, 23, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 426931024, 'comment_body': 'Contextually this is equivalent to `element - toFind`.', 'comment_created': datetime.datetime(2020, 5, 18, 22, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rk-for-zulip', 'type': 'User'}, {'comment_id': 426933828, 'comment_body': 'I\'d prefer this to be identical to what you\'d pass to `sort`, accepting the value to be found as another parameter.\r\n\r\nThis is technically less flexible (for example, as written, you could pass a comparator that would find and accept any value starting with ""M""), so I could understand supplying an auxiliary function to build the search-comparator from a sort-comparator and a value instead.\r\n\r\n(EDIT: This was written before I saw the next commit.)', 'comment_created': datetime.datetime(2020, 5, 18, 22, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rk-for-zulip', 'type': 'User'}, {'comment_id': 426939003, 'comment_body': 'This won\'t work: the given comparator doesn\'t describe a consistent ordering.\r\n\r\nConsider `user = { full_name: ""John Doe"", user_id: 4, ... }`, and a `users` array matching the following:\r\n```javascript\r\nusers =~ [\r\n  { full_name: ""A"", user_id: 0 }, // -1\r\n  { full_name: ""B"", user_id: 1 }, // -1\r\n  { full_name: ""C"", user_id: 2 }, // -1\r\n  { full_name: ""D"", user_id: 3 }, // -1\r\n  { full_name: ""John Doe"", user_id: 4 }, // 1\r\n  { full_name: ""John Doe"", user_id: 5 }, // 0\r\n  { full_name: ""X"", user_id: 6 }, // 1\r\n  { full_name: ""Y"", user_id: 7 }, // 1\r\n  { full_name: ""Z"", user_id: 8 }, // 1\r\n];\r\n```\r\n(Trailing comments show the expected return value of the comparator for each element.)\r\n\r\n`binary_search` will check `users[4]` first, which is the user in question; but the comparator will return `1`, so it will limit further searches to the range `[0, 3]`, and therefore never find `{ full_name: ""John Doe"", user_id: 5 }`.', 'comment_created': datetime.datetime(2020, 5, 18, 23, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rk-for-zulip', 'type': 'User'}, {'comment_id': 430178071, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2020, 5, 26, 6, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 430178129, 'comment_body': 'Fixed now.', 'comment_created': datetime.datetime(2020, 5, 26, 6, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}]","[{'commit_sha': 'ebcaae257cb5931eb1eb6714f2941e4257fef3ea', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
414254951,View uploaded files without needing to be logged in to the realm in the browser.,Closes #3303.,True,4089,https://api.github.com/repos/zulip/zulip-mobile/pulls/4089,https://github.com/zulip/zulip-mobile/pull/4089,closed,108,24,9,5,19,60,1,0,[{'name': 'P1 high-priority'}],2020-05-06 18:16:22+00:00,2020-06-05 00:55:09+00:00,2529527.0,"29 days, 6:38:47","[{'comment_id': 421033082, 'comment_body': 'Ah! I forgot to give this type a proper name. Changed it now.', 'comment_created': datetime.datetime(2020, 5, 6, 19, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 421157139, 'comment_body': ""6afd3961a file uploads [nfc]: Convert downloadImage.js functions to common utils.\r\n\r\nIt looks like three things are happening in this commit, and I think it would help to make a separate commit for each of them:\r\n\r\n1. A function is moved from its current location as a default export of a file, to a named export in a new file in `utils`, and the original file is removed. The name of the export is based on the original file's name, but it's different. That small rename (from `downloadImage` to `downloadRealmImage`) is probably OK to stay in the same commit as the file move, but it should be explained in the commit message, and a jsdoc would be nice, especially since people will be viewing this out of the context it used to have because it was located in `src/lightbox`. It seems like you're making the distinction between images that were uploaded to the realm, vs. external images; I think the rename makes sense from that perspective.\r\n\r\n2. The signature of `androidEnsureStoragePermission` is changed, so callers pass a boolean argument to control which permissions prompt is displayed to the user; passing no arguments defaults to the newly added text. Here are few thoughts I have on this:\r\n     - I don't think I would call this an `[nfc]` change, or pure refactor ([doc](https://github.com/zulip/zulip-mobile/blob/master/docs/glossary.md#nfc-or-nfc)). @gnprice, I'm a little uncertain here; what do you think? True, it looks like the app's behavior is basically the same before and after this change, since the only existing call site is updated to retain the original behavior. But proving that there's no change in behavior is less valuable here, in an existing function, where a new code path with new behavior is introduced, and is clearly intended to be used in a definitely-not-NFC change later on. Or maybe it's just because calling this function with no arguments (the way we were told to call it before this change) *does* give different behavior.\r\n     - I'm glad to have that bit in the jsdoc to explain that the difference in behavior for images is quite small; otherwise, during debugging, I might assume `isImage` was doing more work than it actually was, and worry about dramatically different results when I test with images vs. other files.\r\n     - This is outside the scope of this PR, and obviously not your fault (there are various [plumbing issues](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/redux.20%28and.20themes%29/near/864826) involved), but it looks like this text isn't getting translated.\r\n\r\n3. An entirely new function is introduced, `downloadFile`.\r\n     - See my comments about iOS on the next commit; saving to the camera roll doesn't seem to work for all file types, and there's an iOS-specific download flow that the browser triggers, that isn't being triggered from here. If this means (at least for now) handling all uploaded files in the browser, still, then this function might not be necessary.\r\n     - In person, I think, @gnprice once told me that a commit that adds completely new code shouldn't usually be marked `[nfc]`, even when it's not used. That's why, e.g., 6d6dec1e9 and b41554bdf aren't marked that way."", 'comment_created': datetime.datetime(2020, 5, 6, 23, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 421178576, 'comment_body': ""On iOS, I think the camera roll is meant for images and videos only? Dowloading the `.docx` file from your [message in `#test here`](https://chat.zulip.org/#narrow/stream/7-test-here/topic/testtest/near/869537) didn't work when I tested it, at least on the iOS simulator. There was no visible change to the screen when I pressed the link."", 'comment_created': datetime.datetime(2020, 5, 7, 1, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 421182367, 'comment_body': ""It's nice to avoid the detour into the browser, but one thing the browser does for us, I think, is make it more likely that files of varying types (not just PDFs) eventually get displayed in a nice way. Might there be other types of files, besides PDFs, that we'd want to display in the browser?\r\n\r\nAlso, if the browser decides it can't display it, it triggers what seems like the platform's preferred way to download a file. On iOS, at least, it takes me through an elaborate flow where I decide whether I want to save it to iCloud, or onto my device, and where, etc. There may be a simple way to hook into this native functionality on iOS, but currently, `downloadFile` doesn't do that — it tries to save all non-PDF files to the camera roll, and (at least on the simulator) does nothing with a `.docx` file.\r\n\r\n@gnprice, do you think we should aim for a middle ground, and do some direct downloads (perhaps we can find out how to trigger iOS's native file-download flow?), or would it be best to just let the browser handle everything?"", 'comment_created': datetime.datetime(2020, 5, 7, 1, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 421184059, 'comment_body': ""A link to the documentation would be helpful here. I actually haven't found it yet; is it live? I've seen it in a file in zulip/zulip.git somewhere.\r\n\r\nIt would be natural for readers to have the same question you had, over here:\r\n\r\n@_**Divyanshu Agrawal|13327** [said](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/view.20uploaded.20files/near/869441):\r\n> The endpoint `/user_uploads/{realm_id_str}/{filename}` requires a parameter `realm_id_str` (integer). What is this, and where can I access this in the mobile codebase?\r\n\r\nThe detail from Tim's message, [here](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/view.20uploaded.20files/near/869498), seems key:\r\n\r\n> I believe you should be able to just modify the URL of the file to append `/api/v1` at the start of the path in order to access this endpoint.\r\n\r\nMaybe summarize this finding in a jsdoc, with a link to the documentation (if it's live)."", 'comment_created': datetime.datetime(2020, 5, 7, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 421184408, 'comment_body': 'nit in commit message: `GET /user_uploads/{realm_id_str}/{filename}` (as opposed to POST, etc.)', 'comment_created': datetime.datetime(2020, 5, 7, 1, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 421215261, 'comment_body': ""Agreed re: splitting the file rename from the rest.\r\n\r\nI'd actually be happy to have the other two squashed together, because the new codepath is so small and is introduced for the sake of the new function. I agree I wouldn't label them `[nfc]`, for the reason you mention at the end."", 'comment_created': datetime.datetime(2020, 5, 7, 3, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 421339421, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 7, 8, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 421339672, 'comment_body': 'Okay, expanded the JSDoc with available information.', 'comment_created': datetime.datetime(2020, 5, 7, 8, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 421860113, 'comment_body': ""The browser is a good fallback because it's sure to know how to do something sensible (to the extent there is something sensible to be done.)\r\n\r\nLooking at the implementation of `downloadImage`, it has basically totally separate codepaths for iOS and Android. On their face the iOS codepath specifically saves to the camera roll, but the Android codepath looks like a generic file download. So it's possible that for Android we could use the logic we already have and do a direct download with that, without the browser. For iOS we'd need to figure out some other API to use.\r\n\r\nI think that doesn't need to block fixing this issue, though, so leaving that out for now (as in the new revision of this PR) sounds like a good idea.\r\n"", 'comment_created': datetime.datetime(2020, 5, 7, 23, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 421862832, 'comment_body': ""This logic is kind of tricky, especially around the try/catch.\r\n\r\nA couple of things that I think would help:\r\n* Every control-flow path out of this code ends up calling `openLink` at the end. Make that explicit by having just one `openLink` call. Have a helper function that returns the URL we'll pass to `openLink`. That function will contain some control flow.\r\n\r\n  This also makes an opportunity to give that helper function a meaningful name, which I think will also add clarity.\r\n\r\n* Have the `try` block be as small as possible. As is, we'd end up in the `catch` if there's somehow an exception thrown from `getFullUrl`. That shouldn't happen, but ruling that out requires going and reading more code. Instead that call can be after the whole try/catch.\r\n"", 'comment_created': datetime.datetime(2020, 5, 8, 0, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 421864446, 'comment_body': ""(ah, and @agrawal-d I see you'd replied in the main thread! That is actually probably the better place to continue this discussion :slightly_smiling_face: -- when a conversation goes more than a round or two, it's easy for it to get lost if in the inline comments)"", 'comment_created': datetime.datetime(2020, 5, 8, 0, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 421881139, 'comment_body': ""Good to have these details in a jsdoc!\r\n\r\nI'm struggling to find an example in our API bindings, but Greg guided me toward some conventions we use, when I was writing `src/utils/zuilpVersion.js` (you could take a look at that file):\r\n\r\n1. Start with a terse single-line summary of what the thing is/does.\r\n2. Then some summary, which gives relevant background, or places you might want to use the thing, or reasons to use it instead of something else, etc.\r\n\r\nGood to include the details in `* @param filePath`, I think. Not sure what to do about `auth`; it's boring, since all the other bindings have it too. Maybe just an empty `@param auth`, with no explanation? Order matters, so I think there's an argument for putting something minimal before `@param filePath`."", 'comment_created': datetime.datetime(2020, 5, 8, 1, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 421883461, 'comment_body': ""I'm not sure (and it doesn't seem to be documented in the zulip.yaml file you link to) whether the backend implementation ended up giving us a short-lived URL that was\r\n\r\n1. just completely random, or\r\n2. based on a combination of the user (even their private API key?) and the requested document, with, I guess, \r\n     2a. some randomness on top of that, or\r\n     2b. completely determined by this info combined with a timestamp?\r\n\r\nPossibly, the answer to this won't ever be important for the mobile app to be aware of, from a security perspective or otherwise, or these are considered implementation details by the server, so could change at any time. Assuming one of these is true, it seems appropriate for us to be intentionally vague about those details. The important piece is that the URL won't be valid after, I think, 60 seconds or so (edit: and a few other things, noted in my next comment)."", 'comment_created': datetime.datetime(2020, 5, 8, 1, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 421883935, 'comment_body': 'I think there\'s even more detail about why we\'re using this endpoint, which would be good to include. See Greg\'s points [here](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/view.20uploaded.20files/near/819779):\r\n> The goal basically is to get\r\n> * (a) a plain old URL that can be passed to a browser (not a URL plus some cookies or other headers that need to be set)\r\n> * (b) that gets the user the file immediately, without requiring a fresh login\r\n> * (c) but doesn\'t include a secret with much wider powers (i.e. their API key), which would risk a nasty surprise if they innocently show someone else the file by sending them the link.\r\n\r\nI think (a) is explained by ""without sending auth headers"", but let\'s get (b) and (c) in there too.', 'comment_created': datetime.datetime(2020, 5, 8, 1, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 421885680, 'comment_body': ""> introduced in zulip/zulip@9e72fbe3f\r\n\r\nEventually, we'll move to including a value of `zulip_feature_level` ([doc](https://zulipchat.com/api/server-settings)) here, and we'll even be able to use that for feature detection in using this feature, as Greg notes at https://github.com/zulip/zulip-mobile/issues/3303#issuecomment-615517986, following #4049, but I think this is fine for now; a commit ID is good because it's as specific as it's possible to be."", 'comment_created': datetime.datetime(2020, 5, 8, 1, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 424652743, 'comment_body': 'For non-realm URLs, `href` will be run through `getFullUrl` twice, like this:\r\n\r\n`return getFullUrl(getFullUrl(href, auth.realm), auth.realm);`\r\n\r\nTo avoid nasty surprises where something is duplicated (maybe the scheme, as in ""https://https://"" or something), `getFullUrl` needs to be idempotent on non-realm URLs: you get the same result if you apply its changes one time or many times.\r\n\r\nAs long as the URL starts with \'http\', it looks like this is true: the URL is just returned with no changes.\r\n\r\n...in fact, if the URL does not start with \'http\', we have a problem even after calling `getFullUrl` just once!\r\n\r\n```\r\ngetFullUrl(\'www.google.com\', \'https://chat.zulip.org\');\r\n// ""https://chat.zulip.org/www.google.com""\r\n```\r\n\r\nFrom some experimentation, it looks like you can write a message with ""www.google.com"", with no URL scheme, and the server adds one for you, as ""http://www.google.com"", which is nice.\r\n\r\nStill, that seems like a problem with `getFullUrl`, definitely outside the scope of this PR. We\'d like to move toward a standard and more transparent way of constructing URLs; that\'s #4081, which you\'re welcome to dig into if it interests you. A system like this is probably why the server seems to give a complete, correct URL when you include the incomplete ""www.google.com"" in a message.\r\n\r\nBefore #4081 lands, one thing that might help readers is to add a jsdoc to `getFullUrl`, in its own NFC commit, something like\r\n\r\n```\r\n/**\r\n * Turn a relative or absolute URL into an absolute URL.\r\n *\r\n * If it starts with ""http"", it\'s assumed to be an absolute URL\r\n * already and is returned without changes.\r\n *\r\n * Otherwise, it\'s a relative URL and is appended to the realm,\r\n * deduplicating a leading slash if necessary.\r\n *\r\n * TODO: Revisit this after or during #4081.\r\n *\r\n * @param {*} url - an absolute URL, or a relative URL on the realm.\r\n * @param {*} realm\r\n */\r\n```\r\n\r\nA marker like this faces both inward toward the implementation, and outward toward the call sites. It\'s helpful, when making changes on either side, to be working from a single set of assumptions about what is normal and what\'s considered a bug.', 'comment_created': datetime.datetime(2020, 5, 13, 18, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 424658488, 'comment_body': 'Nits:\r\n\r\n1. Hmm, can we squeeze this first bit into a single line?\r\n2. Looking back at, e.g., `_getElements` in src/utils/zulipVersion.js, where Greg walked me through some jsdocs, it looks like we\'re favoring the imperative [1] for this first line, when we want it to describe some action being done. Maybe something like ""Get a temporary, authless partial URL to a realm-uploaded file.""?\r\n3. Blank line after this first line.\r\n\r\n[1] Or some kind of bare infinitive? I\'m not sure — it\'s the same syntax we use in commit messages to describe work being done; some recent discussion on that has happened at https://github.com/zulip/zulip-mobile/pull/4079#issuecomment-622188734 and above.', 'comment_created': datetime.datetime(2020, 5, 13, 18, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 424659665, 'comment_body': 'Nit: Same comments about the jsdoc format, starting with a single line in that special imperative-like syntax, followed by an empty line.', 'comment_created': datetime.datetime(2020, 5, 13, 18, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 424660117, 'comment_body': 'nit: ""Partial""', 'comment_created': datetime.datetime(2020, 5, 13, 18, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 424663312, 'comment_body': 'Also, somewhere in this jsdoc, it might be good to have a brief, neutral message that this function is private to this file. Before #4081 lands, I think a reasonable person might see all the hacks like `getFullUrl` in `url.js`, and elsewhere — and assume this function is in that category, export it, and use it to get whatever their current idea of an ""actual"" URL is, which is almost certainly different from what\'s being provided here.', 'comment_created': datetime.datetime(2020, 5, 13, 18, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 424669759, 'comment_body': ""6b70e6eca api [nfc]: Create endpoint to get temporary URL to access uploaded file.\r\n\r\nIn the commit message:\r\n\r\nLet's remove `[nfc]`; quoting @gnprice from https://github.com/zulip/zulip-mobile/pull/4089#discussion_r421215261,\r\n\r\n> I agree I wouldn't label them `[nfc]`, for the reason you mention at the end.\r\n\r\nin response to me,\r\n\r\n> In person, I think, @gnprice once told me that a commit that adds completely new code shouldn't usually be marked `[nfc]`, even when it's not used. That's why, e.g., 6d6dec1 and b41554b aren't marked that way."", 'comment_created': datetime.datetime(2020, 5, 13, 19, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 424672383, 'comment_body': ""Also in the commit message, let's add the same details you added in the jsdoc, in response to https://github.com/zulip/zulip-mobile/pull/4089#discussion_r421883935, where I quoted Greg from [here](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/view.20uploaded.20files/near/819779):\r\n\r\n> The goal basically is to get\r\n> * (a) a plain old URL that can be passed to a browser (not a URL plus some cookies or other headers that need to be set)\r\n> * (b) that gets the user the file immediately, without requiring a fresh login\r\n> * (c) but doesn't include a secret with much wider powers (i.e. their API key), which would risk a nasty surprise if they innocently show someone else the file by sending them the link.\r\n\r\nI think a bulleted or numbered list like this is a good, readable format; I think you could even use this quote directly, if you want, with proper attribution to Greg."", 'comment_created': datetime.datetime(2020, 5, 13, 19, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 424726183, 'comment_body': '> I\'m not sure (and it doesn\'t seem to be documented in the zulip.yaml file you link to) whether the backend implementation ended up giving us a short-lived URL that was\r\n> \r\n> 1. just completely random, or\r\n> 2. based on a combination of the user (even their private API key?) and the requested document, with, I guess,\r\n>    2a. some randomness on top of that, or\r\n>    2b. completely determined by this info combined with a timestamp?\r\n\r\nI believe the implementation ended up using Django\'s `django.core.signing`, either its `dumps` function or the underlying `TimestampSigner`. There\'s docs here:\r\nhttps://docs.djangoproject.com/en/3.0/topics/signing/\r\nand the cryptographic concept it implements is an ""HMAC"":\r\nhttps://en.wikipedia.org/wiki/HMAC\r\n\r\nBasically we take the IDs of the user and the requested document, make a sentence saying ""As of TIME, user USER can access file FILE"", and then compute a signature. The URL contains that sentence and signature.\r\n\r\nThe signature is done with a secret key belonging to the server, and can be verified with the same secret key by just re-computing what the signature should be.\r\n\r\nThe HMAC is a common technique for webapps to hand the client some piece of data, especially this kind of access token, in what amounts to a transparent but tamper-proof envelope so the client can hand it back to the server later and the server can trust the contents. Just as it did for us here, this technique saves the server from having to store the tokens itself.\r\n\r\n\r\n> Assuming one of these is true, it seems appropriate for us to be intentionally vague about those details.\r\n\r\nYeah, I think those are implementation details the client needn\'t care about, and the other points you mentioned are more relevant.\r\n', 'comment_created': datetime.datetime(2020, 5, 13, 20, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 424884608, 'comment_body': "">Hmm, can we squeeze this first bit into a single line? \r\n\r\nSure. I changed it to the imperative form now. I don't see any mention of line width in our style guide (docs/style.md), so I assumed it was 80 characters, and so I had moved it to a new line.\r\n(But our Prettier config (.prettierrc) says 100 characters.)"", 'comment_created': datetime.datetime(2020, 5, 14, 5, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 424890682, 'comment_body': 'Done and Done.', 'comment_created': datetime.datetime(2020, 5, 14, 6, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 424890748, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 14, 6, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 424890987, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 14, 6, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 424893194, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 14, 6, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 424895505, 'comment_body': 'Done and Done.', 'comment_created': datetime.datetime(2020, 5, 14, 6, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 425338466, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 5, 14, 18, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 430787998, 'comment_body': ""> Sure. I changed it to the imperative form now. I don't see any mention of line width in our style guide (docs/style.md), so I assumed it was 80 characters, and so I had moved it to a new line.\r\n> (But our Prettier config (.prettierrc) says 100 characters.)\r\n\r\nIn general we want to keep prose to a width like 70 characters, for the same reason as in commit messages. Code can go wider, because you don't generally read it in the same way.\r\n"", 'comment_created': datetime.datetime(2020, 5, 27, 1, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 432738597, 'comment_body': ""In order for this to work as expected, we'll need to be sure that the `Promise` returned by `CameraRoll.saveToCameraRoll` rejects when we want it to reject, i.e., when we want to open the image in the browser.\r\n\r\nI haven't actually found anything in the [doc](https://reactnative.dev/docs/0.59/cameraroll) that says the promise will *ever* reject. If I remember correctly, the failure over [here](https://github.com/zulip/zulip-mobile/pull/4089#discussion_r421178576) (dealing with a `.docx` file instead of an image) was in fact that the promise never resolved *or* rejected, it just sat there. Hmm, that wasn't a helpful behavior in that case, and it wouldn't be helpful here either.\r\n\r\nLooking back at the commit message, partly to remind myself what failure we're aiming to handle (emphasis mine):\r\n\r\n> If we fail to download the file, **which happens if we failed to**\r\n> **generate the temporary URL because the server does not support it**,\r\n> we open it in the browser instead,\r\n\r\nIt looks like the really crucial bit is whether we failed to generate the temporary authless URL (corresponding to whether the server supports it) or not. With that question answered, we wouldn't need try/catch logic around the actual file download (either on iOS or Android)\xa0— we could just use an `if` statement to download it natively if the nice temporary URL was received, and open it in the browser otherwise.\r\n\r\nHmm, but `getFileDownloadUrl` kind of swallows the direct answer to that question. The answer is perfectly clear in the *body* of `getFileDownloadUrl`, but a string is returned in either case.\r\n\r\n- I guess we could examine that string, by checking `fileDownloadUrl` against `getFullUrl(src, auth)`, but this seems indirect and error-prone if we have to do it at many call sites.\r\n- It's also a bit weird, but maybe `getFileDownloadUrl` should return an object holding the same URL it's been computing, plus a boolean value that tells us if the endpoint was used successfully to generate the URL?\r\n\r\nI'm not sure; I think I'd lean toward the latter. @gnprice, maybe you have a preference? Whichever way we go, it'll be good to mention in a code comment why it's necessary to act differently when using the regular URL or the temporary one from the endpoint.\r\n\r\nAnd I think avoiding the potentially confusing (and even buggy, if that promise never resolves or rejects!) try/catch logic around `CameraRoll.saveToCameraRoll` (and the counterpart for Android) will be really helpful."", 'comment_created': datetime.datetime(2020, 5, 29, 21, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 432741421, 'comment_body': 'Let\'s tighten up the return type of this function, now that the returned `Promise` might resolve to the string ""browser"".', 'comment_created': datetime.datetime(2020, 5, 29, 21, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 433559291, 'comment_body': ""> * I guess we could examine that string, by checking `fileDownloadUrl` against `getFullUrl(src, auth)`, but this seems indirect and error-prone if we have to do it at many call sites.\r\n\r\nI agree.\r\n\r\n\r\n> * maybe `getFileDownloadUrl` should return an object holding the same URL it's been computing, plus a boolean value that tells us if the endpoint was used successfully to generate the URL?\r\n\r\nHmm let's see. As I'm reading this, the idea is that\r\n* we want to use the generated download URL when we can;\r\n* sometimes we can't and then we want to just use the plain absolute URL (from `getFullUrl`);\r\n* and at the other call site, whichever URL we use we're going to do the same thing with it,\r\n* but at this call site, we're going to do one thing with the generated URL (i.e. directly download it) and another thing with the fallback URL (i.e. open in a browser).\r\n\r\nIs that right?\r\n\r\nI think the cleanest way to handle that is probably: we want part of the control flow to be different between the call sites, so push that part out into the call sites. Like:\r\n* have `tryGetTemporaryFileUrl: (string, Auth) => Promise<null | string>`, which just returns the API result if applicable and `null` if not;\r\n* then at the call sites say something like\r\n```js\r\nconst tempUrl = tryGetTemporaryFileUrl(src, auth);\r\nif (tempUrl !== null) {\r\n  // ... use tempUrl ...\r\n  return;\r\n}\r\nconst fullUrl = getFullUrl(src, auth.realm);\r\n// ... use fullUrl ...\r\n```\r\n* oh and in the case where both kinds of URLs will be treated the same, that can be simplified to\r\n```js\r\nconst url = tryGetTemporaryFileUrl(src, auth) ?? getFullUrl(src, auth.realm);\r\n// ... use url ...\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 6, 2, 0, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 433564805, 'comment_body': 'In thinking about refactoring this, I noticed that it uses the result of `getFullUrl`, then goes back to the original parameter `href`, then (below) returns to `getFullUrl`. That\'s complicated (though on this small scale) in a way that feels to me like either it can just be simpler, or there\'s something going on underneath that explains why it can\'t, and things can be clearer and probably simplified in a different direction if that something is made explicit.\r\n\r\nI think the something underneath in this case is that `getTemporaryFileUrl` wants specifically a URL path (a [""path-absolute-URL string""](https://url.spec.whatwg.org/#path-absolute-url-string)), and not an absolute URL like we get from `getFullUrl`. Is that right?\r\n\r\nIn light of that, for this `if` we can use the condition that the `href` parameter matches the regex `^/[^/]`. (I.e. starts with `/` but not with `//`; and the regex also says it\'s not just `/`, which it doesn\'t matter how we treat because it\'s not going to be accepted either way.)\r\n\r\nI think that will help with the refactoring I mentioned above. That also fixes that fact that `.includes` is much too broad -- it would include things like `https://evil.example/files/blah/blah/https://chat.zulip.org/`.\r\n', 'comment_created': datetime.datetime(2020, 6, 2, 0, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 433565380, 'comment_body': 'Nit about commit message: I\'d reserve saying we added ""an endpoint"" to mean adding the backend implementation, and the URLs that reach it. IOW, once the server side is implemented, the ""endpoint"" is complete.\r\n\r\nFor this bit of wiring-up I\'d say ""a binding"", or ""an API binding"".\r\n', 'comment_created': datetime.datetime(2020, 6, 2, 0, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 433566019, 'comment_body': 'nit in commit message (and the one before it): use a consistent form for ""this fixes issue #NNN"", [namely](https://github.com/zulip/zulip-mobile/blob/master/docs/style.md#github-prs-issues)\r\n> When a commit fixes an issue, use a line like `Fixes: #1234` at the end of the commit message.\r\n\r\n(The most important bit there is that we\'ve standardized on one magic word, ""fixes"" rather than ""closes"" or their other friends. But the same form beyond that is helpful too.)\r\n', 'comment_created': datetime.datetime(2020, 6, 2, 1, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 433567102, 'comment_body': ""This doesn't feel like the right type, given that this function can also return real data.\r\n\r\nI see we don't use that data in the call site in `LightboxActionSheet`. Is there somewhere else we're using it? If we're not using it, we could just reduce the return value to true/false.\r\n\r\nNope, we do use it -- in `shareImage.js`.  I bet that will need logic to handle this change in this function's API too, then.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 2, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 433569794, 'comment_body': 'Some doc-writing style: these two sentences are really describing the current implementation, not the intended interface. The interface is what it\'s meant to do, from the perspective of writing code that uses it. Docs should describe the interface.\r\n\r\nOne way to see the difference is to notice that the behavior these sentences describe (which indeed is what the implementation does) is buggy, mishandling cases like `http?foo#bar` which are perfectly good relative URLs. The fact we can say it\'s ""buggy"" means the intended behavior is something else; it\'s buggy because it doesn\'t match that intended behavior.\r\n\r\n(More often, the two don\'t disagree like they do here, but just describe different aspects: the interface is about expectations, and how the code relates to other code and to things outside the code.)\r\n\r\nThe fact that this implementation doesn\'t really match is good to write down too! Could be a line in the jsdoc, or just a `TODO` comment (outside the jsdoc, as `//` after it.) Probably enough to say ""uses some crude heuristics"" rather than go into detail, which rapidly winds up just repeating what the code says.', 'comment_created': datetime.datetime(2020, 6, 2, 1, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 433575601, 'comment_body': 'Mm, thanks for catching and explaining this, @gnprice! This was my bad. When I recommended this JSDoc at https://github.com/zulip/zulip-mobile/pull/4089#discussion_r424652743, I was reminded of what you said at https://github.com/zulip/zulip-mobile/pull/4046#issuecomment-618044109; that change was merged as 452edbc5e. I think this part stuck in my mind:\r\n\r\n> facing both inward to the implementation and outward to the call sites, of what they should rely on and what would be a bug\r\n\r\nbecause it said why it was important to write something down instead of nothing (i.e., it\'s useful both inside and outside the function), in cases like these where things are buggy / messy. The ""Docs should describe the interface"" (as opposed to the implementation) direction was clear, in that case, and I seem to have followed it there — but I forgot that part when I recommended this JSDoc on this PR; sorry about that. 🙂 ', 'comment_created': datetime.datetime(2020, 6, 2, 1, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 433775529, 'comment_body': ""Okay. I've removed the implementation details and moved the TODO to a comment below the JSDoc."", 'comment_created': datetime.datetime(2020, 6, 2, 10, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 433776874, 'comment_body': ""Yeah, that sounds better. I didn't know a better way to write that down. Thanks!"", 'comment_created': datetime.datetime(2020, 6, 2, 10, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 433789282, 'comment_body': '>getTemporaryFileUrl wants specifically a URL path (a ""path-absolute-URL string""), and not an absolute URL like we get from getFullUrl. Is that right?\r\n\r\nYour question helped me uncover a bug. In it\'s current implementation, it\'s handling 2 cases - paths to uploaded files, and complete URLs to external sites. But this function should only handle the first case, hence the complexity you noticed. I\'ll fix this.\r\n  ', 'comment_created': datetime.datetime(2020, 6, 2, 10, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 433889452, 'comment_body': 'Used this approach.', 'comment_created': datetime.datetime(2020, 6, 2, 13, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 433890983, 'comment_body': 'The return type is \r\n```js\r\nPromise<{|\r\n  url: string,\r\n  openedInBrowser: boolean,\r\n|}>\r\n```\r\n now.', 'comment_created': datetime.datetime(2020, 6, 2, 13, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 433891683, 'comment_body': 'Changed to Fixes.', 'comment_created': datetime.datetime(2020, 6, 2, 13, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 433892196, 'comment_body': ""Agreed, the type is \r\n```js\r\nPromise<{|\r\n  url: string,\r\n  openedInBrowser: boolean,\r\n|}>\r\n``` \r\nnow, and I've made changes so that this is handled properly."", 'comment_created': datetime.datetime(2020, 6, 2, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 434305655, 'comment_body': ""OK but please use the particular form we've standardized on, as described in the bit of our style guide which I quoted :slightly_smiling_face:\r\n"", 'comment_created': datetime.datetime(2020, 6, 3, 4, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 434308806, 'comment_body': ""\r\nHmm, all this logic is kind of twisty to follow.\r\n\r\nOne thing that I notice is that both of this function's callers want to inspect the `openedInBrowser` value... and that in turn corresponds precisely to a fork in the function's control flow, where it does one thing in one case and a disjoint set of things in the other case.\r\n\r\nAs a result I suspect both this function, and its callers, could be made easier to understand by pushing that condition out into the callers. Let's try that.\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 3, 5, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 434310505, 'comment_body': 'Thanks for the revision but it says `Fixes: #3033.` -- our standard form is `Fixes: #3033` :slightly_smiling_face: \r\n', 'comment_created': datetime.datetime(2020, 6, 3, 5, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 434311780, 'comment_body': 'I understand that you want the `downloadImage` export to only download the file, and throw if it fails ( due to failure to generate the temp URL ). The callers should handle the exception themselves, and open the file in the browser if required. Is this correct?', 'comment_created': datetime.datetime(2020, 6, 3, 5, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 434313305, 'comment_body': 'Or, we can also pass a valid temporary URL to this function in the first place, and it should never throw. The caller will handle the generation of the temp URL and the failure to do that. This sounds better.', 'comment_created': datetime.datetime(2020, 6, 3, 5, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 434326480, 'comment_body': 'I went ahead with the 2nd approach.', 'comment_created': datetime.datetime(2020, 6, 3, 6, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 434902204, 'comment_body': 'Yep, that second approach is what I had in mind :slightly_smiling_face: -- looks good!', 'comment_created': datetime.datetime(2020, 6, 3, 22, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 434902687, 'comment_body': 'nit: this is a bit easier to visually parse and to read if when the `@param` text overflows, the overflow gets indented:\r\n\r\n```\r\n * @param url A URL to the image.  Should be a valid temporary URL generated\r\n *     using `getTemporaryFileUrl`.\r\n * @param auth Authentication info for the current user.\r\n */\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 3, 22, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 434903373, 'comment_body': ""nit: indent overflow of `@param`\r\n\r\nOh actually and more than a nit! Looking closer I see that what looks like one paragraph describing `filePath` is really two, and the second one isn't related to the specific parameter at all.\r\n\r\nThat should have a paragraph break. :-) And the stuff that isn't about a particular parameter should go before the `@param` items -- otherwise it gets parsed, both by the machine (when you hover on a call site) and potentially by the human reader, as part of the parameter description.\r\n"", 'comment_created': datetime.datetime(2020, 6, 3, 23, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 434985760, 'comment_body': ""I wasn't aware of this. Changed now."", 'comment_created': datetime.datetime(2020, 6, 4, 4, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 434985807, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 6, 4, 4, 29, 2, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 435530042, 'comment_body': 'np -- thanks!', 'comment_created': datetime.datetime(2020, 6, 4, 20, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': '9025ac1bc90b9dd37ee2143c1a7f5a05dbbfe425', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7e106c22dd1678539b66b925708bf250ed87378', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cdb8a248831ef7c70fefa72e0f3c2aa03acf715', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de3bd5fc5c36cdc531f37683225dcc90586dba9c', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed645fe9147ee51fa4b7868e0cd7bf1e0b2e0c73', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
373654306,readme: Make it more clear that contributions are welcome.,I believe this change makes the project more welcoming to newcomers.,True,3890,https://api.github.com/repos/zulip/zulip-mobile/pulls/3890,https://github.com/zulip/zulip-mobile/pull/3890,closed,5,0,1,1,3,0,1,0,[{'name': 'a-documentation'}],2020-02-11 13:19:51+00:00,2020-05-08 00:02:20+00:00,7468949.0,"86 days, 10:42:29",[],"[{'commit_sha': 'b3f34653526fa1cdfed0c9970733add328443e30', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
371396411,SearchMessagesScreen: Store fetched messages in Redux store.,"Fixes #3856.
The app no longer crashes on viewing the reactions from search results now.",True,3868,https://api.github.com/repos/zulip/zulip-mobile/pulls/3868,https://github.com/zulip/zulip-mobile/pull/3868,closed,18,6,1,1,17,47,1,0,[{'name': 'severe: crash'}],2020-02-05 14:15:30+00:00,2020-05-08 20:33:41+00:00,8057891.0,"93 days, 6:18:11","[{'comment_id': 376232153, 'comment_body': 'The type `ServerApiResponseMessages` is not exported and can not be used outside of `api/getMessages.js` so I have removed the flow type here.', 'comment_created': datetime.datetime(2020, 2, 7, 6, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 377410242, 'comment_body': ""Sure, that's fine. Flow will infer the return type because `api.getMessages` is typed."", 'comment_created': datetime.datetime(2020, 2, 11, 1, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 377423411, 'comment_body': ""One thing we've noticed about messageFetchComplete is that it takes a lot of arguments, so it can be tricky to remember what each one is for — it's not obvious from looking at this call site what, for example, the 20 passed as the fourth argument means.\r\n\r\nSo, it would be helpful, in a separate commit before this one, to change messageFetchComplete so that it has just one parameter, which is an object, where the properties are the names of the current parameters. The main advantage of doing it this way is that when you pass that argument, you're forced to label its properties at or near the call site, and people reading the code there can more easily understand what's happening. 🙂 \r\n\r\nConcretely, messageFetchComplete should look something like this:\r\n\r\n```\r\nexport const messageFetchComplete = (args: {\r\n  messages: Message[],\r\n  narrow: Narrow,\r\n  anchor: number,\r\n  numBefore: number,\r\n  numAfter: number,\r\n  foundNewest?: boolean,\r\n  foundOldest?: boolean,\r\n}): Action => {\r\n  const { messages, narrow, anchor, numBefore, numAfter, foundNewest, foundOldest } = args;\r\n  return {\r\n    type: MESSAGE_FETCH_COMPLETE,\r\n    messages,\r\n    narrow,\r\n    anchor,\r\n    numBefore,\r\n    numAfter,\r\n    foundNewest,\r\n    foundOldest,\r\n  };\r\n};\r\n```\r\n\r\nYou'll also want to update all call sites of the messageFetchComplete action creator accordingly, in the same commit. (Just the action creator, not the handlers in fetchingReducer.js and narrowsReducer.js with the same name.)"", 'comment_created': datetime.datetime(2020, 2, 11, 2, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 377424330, 'comment_body': ""Following from my comment at messageFetchComplete, please also do a similar refactor for `api.getMessages` (the default export of src/api/messages/getMessages.js), in its own commit. 🙂 In that case, though, `auth` can be left as the first param because it's kind of an ambient piece of data that's not specific to any API request, and the rest can be brought together into a single object parameter."", 'comment_created': datetime.datetime(2020, 2, 11, 2, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 377425577, 'comment_body': ""Then, after those two refactors I mentioned (and before your original commit), you can share code for passing arguments to api.getMessages and messageFetchComplete, since it takes exactly the same four pieces of data, with the same names! This can go near the top of handleQueryChangeInner. You can call it, for example, fetchArgs:\r\n\r\n```\r\nconst fetchArgs = {\r\n  narrow: SEARCH_NARROW(query),\r\n  anchor: LAST_MESSAGE_ANCHOR,\r\n  numBefore: 20,\r\n  numAfter: 0,\r\n}\r\n```\r\n\r\nTo make that sharing easy, let's remove the `performQueryRaw` method. It's not very large, and it only has one call site, so it's OK to run inline. Replace its call site with `const networkPromise = api.getMessages(auth, fetchArgs);`, using the fetchArgs you've just defined.\r\n\r\nThen, in your original commit, when you call messageFetchComplete, you can spread fetchArgs.\r\n\r\n```\r\ndispatch(\r\n  messageFetchComplete({\r\n    ...args,\r\n    messages: networkResponse.messages,\r\n    foundNewest: networkResponse.found_newest,\r\n    foundOldest: networkResponse.found_oldest,\r\n  }),\r\n);\r\n```\r\n\r\nI think it's much easier to read than before. It's easy to see that the same four pieces of data are used in api.getMessages and messageFetchComplete, without having to read each one of them and compare them. 🙂 "", 'comment_created': datetime.datetime(2020, 2, 11, 2, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 381610751, 'comment_body': ""You can actually still set a default value for useFirstUnread, in the destructuring assignment, like so, so you don't have to modify code wherever useFirstUnread is consumed (e.g., `use_first_unread_anchor: useFirstUnread || false`). In this case, that's just one place, but this would be useful if the variable were used in many places. 🙂 \r\n\r\n```\r\nconst { narrow, anchor, numBefore, numAfter, useFirstUnread = false } = args;\r\n```\r\n\r\nHere's a doc describing this syntax: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Default_values_2 (EDIT: I had the incorrect link here earlier.)"", 'comment_created': datetime.datetime(2020, 2, 19, 23, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 381612823, 'comment_body': ""This list of names doesn't quite match the list above :wink: . I think the result is that `found_newest` and `found_oldest` will get dropped on the floor.\r\n\r\nThe next question to ask is: why didn't Flow catch this? ... I'll make that a separate comment, as it relates to a different spot in the code."", 'comment_created': datetime.datetime(2020, 2, 19, 23, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 381614002, 'comment_body': 'This type should be written `{| foo: bar |}`, rather than plain `{ foo: bar }`. The reason is that the unadorned syntax means an [""inexact object type""](https://flow.org/en/docs/types/objects/#toc-exact-object-types). For almost all our object types, what we really want to say is the ""exact object type""; the syntax for that is `{| foo: bar |}`.\r\n\r\nDo take a look at the linked bit of Flow docs. You\'ll see that this is the reason why the `found_newest` vs. `foundNewest` mismatch below wasn\'t caught -- for an inexact object type, it\'s perfectly valid to pass something with random additional properties. (And the two properties in question are optional here, so it was also valid that they were missing.)\r\n', 'comment_created': datetime.datetime(2020, 2, 19, 23, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 381615870, 'comment_body': ""I think this is moot here because of the point Chris made, but useful to know for elsewhere: better to use `??` than `||` in this situation, as in `useFirstUnread ?? false`.\r\n\r\nThe difference is that `||` will go to its right-hand operand when the left one is merely falsy, including `false`, `''`, and `0`, as well as when it's `undefined` as it would be for an omitted property or argument. So for example if the desired default here had been `true` instead of `false`, then `useFirstUnread || true` would have completely the wrong behavior -- it'd be `true` even when the caller explicitly said `useFirstUnread: false`!\r\n"", 'comment_created': datetime.datetime(2020, 2, 19, 23, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 381618083, 'comment_body': ""This comment is explaining something that's no longer true after this change. It's about how the `performQueryRaw` call is made outside the `try`, and only the `await` is inside.\r\n\r\nI think in fact it's fine, and clearer, to put them together as you do in this commit :-) See https://github.com/gnprice/zulip-mobile/commit/db8fbd16e2c0c96b3a128b861e61369ffe9f60fa (part of #3911) which makes the same change. The comment should be deleted to match, though.\r\n"", 'comment_created': datetime.datetime(2020, 2, 20, 0, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 381621078, 'comment_body': ""* I think this should go before the `setState`, not after.\r\n\r\n  I *think* the difference doesn't currently matter... but the `setState` may trigger a `render` call, and so in principle if that means a `render` call (and a series of further `render` calls on descendant components) before we have the new data stowed away in our Redux state then something could get confused by not finding data about a message.\r\n\r\n* This will cause a `MESSAGE_FETCH_COMPLETE` action to be dispatched for this search narrow. Do all our reducers handle that appropriately?\r\n\r\n  Tip: searching for `case MESSAGE_FETCH_COMPLETE` is great for finding all the places we act on a given action type in our reducers.\r\n\r\n  I think in the `narrows` reducer we probably want to skip search narrows. We're not going to keep them up to date there (as new messages come in as events), and we'd accumulate a bunch of old searches.\r\n\r\n  The `caughtUp` and `fetching` reducers should do the same as `narrows`.\r\n\r\n  The `messages` reducer is the reason we're doing this PR, and `flags` goes along with it. I think those don't need any adjustment."", 'comment_created': datetime.datetime(2020, 2, 20, 0, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 382184373, 'comment_body': 'Done! Thanks for the doc link!', 'comment_created': datetime.datetime(2020, 2, 20, 18, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 382186440, 'comment_body': 'Fixed!', 'comment_created': datetime.datetime(2020, 2, 20, 18, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 382186720, 'comment_body': 'Will keep this in mind!', 'comment_created': datetime.datetime(2020, 2, 20, 18, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 382187749, 'comment_body': 'Deleted the comment.', 'comment_created': datetime.datetime(2020, 2, 20, 18, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 382218363, 'comment_body': 'Changed the reducers.', 'comment_created': datetime.datetime(2020, 2, 20, 19, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 387218643, 'comment_body': 'The test name makes it sound, to me, a little like we\'re removing things that have been stored in the Redux store, when what we\'re actually doing is just not adding them in the first place. 🙂 I wonder about something like ""if fetched messages are from a search narrow, don\'t update state"" (and similarly for caughtUp and narrows). I think the same thing may apply to the commit messages.', 'comment_created': datetime.datetime(2020, 3, 3, 18, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 387222583, 'comment_body': ""I think it would be helpful to have a code comment saying why we don't update this part of the state for search narrows (i.e., that we don't want to fill it up with lots of data from old searches that we'll never need again, from Greg's [comment](https://github.com/zulip/zulip-mobile/pull/3868#discussion_r381621078)). Same for caughtUp and narrows."", 'comment_created': datetime.datetime(2020, 3, 3, 18, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 387229008, 'comment_body': ""I don't have strong feelings either way, but the `else` here is unnecessary, and removing it could help avoid a level of indentation in the code. 🙂 "", 'comment_created': datetime.datetime(2020, 3, 3, 19, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 387259900, 'comment_body': 'I\'m getting some Flow errors with `tools/test` on this commit. It looks like the change to the declaration of `api.getMessages` is in a different commit (""getMessages [nfc]: Restructure getMessages arguments.""). If you squash that one with this one, then I think we\'ll keep up the pattern of not having failures on any commits. 🙂\r\n\r\nUnfortunately, when you push to GitHub, CI tests are only run for the commit at the tip of the branch. An easy way to run them locally, for all commits, is with `git rebase --exec \'tools/test\'`, or `git rebase --exec \'tools/test flow\'` when you want to focus on just Flow errors (@ray-kraesig taught me that).', 'comment_created': datetime.datetime(2020, 3, 3, 19, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 387263498, 'comment_body': 'There\'s also a call to api.getMessages in `src/search/SearchMessagesScreen` that should be updated in the same commit. It does get fixed and moved in the following commit (""SearchMessagesScreen: Store fetched messages in Redux store.""), but the fix and the move are separate changes.', 'comment_created': datetime.datetime(2020, 3, 3, 20, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 387914924, 'comment_body': 'I like having the changes to the two different functions (`messageFetchComplete` and `api.getMessages`) happen in separate commits. Definitely want the call sites of each function to get updated at the same time as the function, though. :-) Then the net is that the changes to one function plus its call sites are in one commit, and to the other in another commit, which makes it easy as the reader to see how they correspond to each other.\r\n\r\nI recommend `git checkout -p`, along with `git rebase -i`, for rearranging which changes happen in which commit. It should be possible to do it without really having to edit the code further in your editor -- just `git rebase -i`, mark ""edit"" for the two commits in question, and use a combination of commands like `git checkout -p @^` and `git checkout -p search` (or whatever name you use for the branch) to remove or add specific changes in each commit.\r\n', 'comment_created': datetime.datetime(2020, 3, 4, 20, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 387926641, 'comment_body': 'Yeah. I think ""ignore"" in place of ""discard"" would work pretty well.', 'comment_created': datetime.datetime(2020, 3, 4, 20, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 387931258, 'comment_body': 'Reading a test, a key question to ask is: does this really test what it\'s meant to test? This is especially important for tests, like this one, that test that nothing happens -- it\'d be easy to accidentally write it so that some other aspect of the test case prevents the thing from happening, and so the test would pass even if the logic it\'s meant to test was completely missing.\r\n\r\nIt\'s hard to tell from reading just this test whether that\'s the case, because it\'s not obvious whether the example value for this action type would be one that makes `caughtUp` become true or not.\r\n\r\nIn general, one good way to make that clear is: make the test case\'s input data look exactly like another test case that tests something *does* happen, except for just one difference, namely whatever it is that you want to test prevents the thing from happening.\r\n\r\nHere, that\'d mean taking one of the test cases with ""true"" in the expected new state, copying it, and just changing the narrow to a search narrow.\r\n', 'comment_created': datetime.datetime(2020, 3, 4, 21, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 387932359, 'comment_body': ""This should be nested in the `describe('MESSAGE_FETCH_COMPLETE'` to make clearer the context of what it's testing.\r\n"", 'comment_created': datetime.datetime(2020, 3, 4, 21, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 387932844, 'comment_body': 'These should be parallel to each other.', 'comment_created': datetime.datetime(2020, 3, 4, 21, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 389392397, 'comment_body': ""@gnprice I'm not sure what you mean.\r\nDo you mean to bring `? state : mes ...` to it's own line? If so, prettier is automatically bringing them back. \r\nIf not, can you please explain?"", 'comment_created': datetime.datetime(2020, 3, 8, 18, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 389395883, 'comment_body': 'Fixed!', 'comment_created': datetime.datetime(2020, 3, 8, 19, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 389395931, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 3, 8, 19, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 389396792, 'comment_body': 'Sure!', 'comment_created': datetime.datetime(2020, 3, 8, 19, 12, 45, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 389396853, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 3, 8, 19, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 389397007, 'comment_body': ""> In general, one good way to make that clear is: make the test case's input data look exactly like another test case that tests something _does_ happen, except for just one difference, namely whatever it is that you want to test prevents the thing from happening.\r\n\r\nThanks - this is helpful!"", 'comment_created': datetime.datetime(2020, 3, 8, 19, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 389675625, 'comment_body': ""I've changed the tests for `caughtUpReducer`, would you like me to also change the tests for other reducers I've modified? That would also make the commit `example data: Add sample action 'message_fetch_complete'` un-necessary."", 'comment_created': datetime.datetime(2020, 3, 9, 13, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 407641065, 'comment_body': '@gnprice [said](https://github.com/zulip/zulip-mobile/pull/3868#discussion_r387931258):\r\n> Here, that\'d mean taking one of the test cases with ""true"" in the expected new state, copying it, and just changing the narrow to a search narrow.\r\n\r\nIn the status quo, this does sort of undo the progress toward getting more tests using exampleData. I wonder about, in a separate commit, getting all the existing tests in the file to use the action from `exampleData`, and then applying the change I\'ve just quoted. @gnprice, thoughts?', 'comment_created': datetime.datetime(2020, 4, 13, 18, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 407641501, 'comment_body': 'FYI, there will be merge conflicts with anything that uses `exampleData` because of https://github.com/zulip/zulip-mobile/commit/50a07b8b9c9105f18958568a49b709e1cdce3328.', 'comment_created': datetime.datetime(2020, 4, 13, 18, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 411812221, 'comment_body': ""> In the status quo, this does sort of undo the progress toward getting more tests using exampleData. I wonder about, in a separate commit, getting all the existing tests in the file to use the action from `exampleData`, and then applying the change I've just quoted. @gnprice, thoughts?\r\n\r\nYeah, I agree -- that combination would be ideal.\r\n\r\nDoesn't need to mean getting the whole test files to be type-checked -- just using the new `eg.action.message_fetch_complete` in the places where it fits.\r\n"", 'comment_created': datetime.datetime(2020, 4, 21, 1, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 411813809, 'comment_body': 'Sorry, I should have been clearer and used more words. It took me a minute myself just now to figure out what I meant. :wink: \r\n\r\nBy ""these"" I meant the two cases for `MESSAGE_FETCH_START` and `MESSAGE_FETCH_COMPLETE`. They\'re currently quite parallel -- meaning they behave very similarly, with differences that naturally correspond to the difference between ""start"" and ""complete"". So when making changes the changes should continue to treat them in parallel.\r\n', 'comment_created': datetime.datetime(2020, 4, 21, 2, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 411815301, 'comment_body': 'nit: Let\'s add the new logic around `isSearchNarrow` (and the comment that goes with it) inside the `messageFetchComplete` handler function, instead of here.\r\n\r\nSimilarly for `messageFetchStart` (when adding to that per my other comment about keeping them ""parallel""), and in `narrowsReducer`.\r\n\r\nIn general, the way we structure all these reducers is:\r\n* If the code for a given case is simple enough that it feels like it fits inline in the `switch` in the reducer function, we put it there.\r\n* Otherwise we have one of these handler functions named after the action type, and that case in the handler just calls the handler which does all the work.\r\n\r\nThat\'s helpful because either way it keeps all the logic in one place -- if you see a function with a name like `messageFetchComplete` in a reducer file, you know it completely describes what we do in that reducer for a `MESSAGE_FETCH_COMPLETE` action.\r\n', 'comment_created': datetime.datetime(2020, 4, 21, 2, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 420710286, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 6, 11, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 420710396, 'comment_body': 'Thanks for the explanation.', 'comment_created': datetime.datetime(2020, 5, 6, 11, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 420710446, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 6, 11, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 420710516, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 6, 11, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 420986201, 'comment_body': ""Looks like the MESSAGE_FETCH_COMPLETE import isn't used anymore.\r\n\r\nEDIT: Ah, looks like it was removed in the next commit. Let's remove it in the same commit that removes all uses, so `tools/test lint` passes at each commit. I caught this with `git rebase -i --exec 'tools/test --diff HEAD^`, which checks every commit on the branch after `upstream/master` (if the branch is set to track `upstream/master`). GitHub only runs CI tests for the single commit at the tip of the branch, I guess to save resources."", 'comment_created': datetime.datetime(2020, 5, 6, 18, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 420994422, 'comment_body': 'Cool, looks like the `isSearchNarrow` logic was moved so it happens inside `messageFetchComplete`, following https://github.com/zulip/zulip-mobile/pull/3868#discussion_r411815301. It seems to me that this comment should only appear once (not twice), inside `messageFetchComplete`, right above the code it explains the reason for.', 'comment_created': datetime.datetime(2020, 5, 6, 18, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 421015012, 'comment_body': 'Oops, I copied this line above, but forgot to delete it here.', 'comment_created': datetime.datetime(2020, 5, 6, 18, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 421016382, 'comment_body': ""Thanks, I'll keep this in mind. You had mentioned this before, but I forgot to use it."", 'comment_created': datetime.datetime(2020, 5, 6, 18, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 422180751, 'comment_body': '` useFirstUnread` defaults to `false`. This way, I can use `...fetchArgs` as @chrisbobbe suggested.', 'comment_created': datetime.datetime(2020, 5, 8, 14, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}]","[{'commit_sha': '91e38a825a49fba450f524f70ad9185fc7f26bb7', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
453323216,[android] Handle receiving shares from other apps ,"Fixes: #117

Continuation of work done in #4124

Resolves several issues pointed out by @gnprice in https://github.com/zulip/zulip-mobile/pull/4124.

### Unresolved issues:
- ~~back button appears in user picker screen for 'Share to PM'.~~ (Fixed!)
- autocomplete popups cause a lot of movement in the screen as they appear/disappear/resize.",False,4196,https://api.github.com/repos/zulip/zulip-mobile/pulls/4196,https://github.com/zulip/zulip-mobile/pull/4196,closed,14,3,4,4,11,15,1,0,[{'name': 'a-share-to'}],2020-07-20 10:54:25+00:00,2021-10-18 23:03:37+00:00,39355752.0,"455 days, 12:09:12","[{'comment_id': 457802934, 'comment_body': 'Hmm fascinating -- good catch and good to fix this.\r\n\r\nI think the diagnosis ""These tests use default parameters incorrectly"" isn\'t right, though. These aren\'t meant to invoke the initialization behavior. That isn\'t what we do in other reducers\' tests -- and it\'s not quite a realistic test, either, because it will never be the case that the reducer is invoked with an undefined state but a REHYDRATE action. \r\n\r\nRather, as [this docs page](https://redux.js.org/recipes/structuring-reducers/initializing-state) explains:\r\n> When Redux initializes it dispatches a ""dummy"" action to fill the state. ... This is exactly the case that ""activates"" the default argument. \r\n\r\nThat happens before any other actions, and before `createStore` returns (so before it\'s even possible to call `getState()`, for instance.) By the time a REHYDRATE action comes through, the state is already something else -- like `getStateForRoute(\'loading\')`.\r\n', 'comment_created': datetime.datetime(2020, 7, 21, 2, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 457803916, 'comment_body': ""Given that, a cleaner way to solve this might be: let `navReducer.js` export its `initialState`, and use that. That way we're passing the value we actually expect the reducer to be passed in normal operation.\r\n"", 'comment_created': datetime.datetime(2020, 7, 21, 2, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 457804303, 'comment_body': ""This looks out of place in this commit.\r\n\r\nIt's undoing a change that happened in a previous commit. Perhaps what you want is to leave this unchanged in that commit?\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 21, 2, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 457806148, 'comment_body': 'This will show the ""Message sent"" toast even when the message was not sent. Perhaps add a `return` inside the `catch` block.\r\n', 'comment_created': datetime.datetime(2020, 7, 21, 2, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 457806604, 'comment_body': ""The control flow can be simplified by squeezing the conditional out of the `try` block, so there's just one `await sendMessage(…)`. E.g.\r\n```js\r\n  const messageData =\r\n    data.type === 'pm' ?\r\n      { content: messageToSend, type: 'private', …\r\n  …\r\n  try {\r\n    await sendMessage(auth, messageData);\r\n  } catch (err) {\r\n    …\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 7, 21, 2, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 457806932, 'comment_body': 'Ah, well spotted! Thanks for the docs reference, too.\r\n', 'comment_created': datetime.datetime(2020, 7, 21, 2, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 457807859, 'comment_body': ""In the chat thread you started for this question, I think I figured out the mystery of what's happening here (and why notifications don't have the same trouble), and [found](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/need.20for.20conditional.20in.20navReducer's.20.60rehydrate.60.20for.20Sharing/near/945368) a cleaner solution. (And more complete! This one still leaves it the case that the sharing UI will briefly try to render in a situation where the state it has is bogus.)\r\n"", 'comment_created': datetime.datetime(2020, 7, 21, 3, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 457809551, 'comment_body': 'nit: spaces before `{` and after `}`', 'comment_created': datetime.datetime(2020, 7, 21, 3, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 457813238, 'comment_body': 'Hmmm.\r\n\r\nI\'m skeptical when I see a pattern like this -- it looks like trying to shut up an error without understanding it.\r\n\r\nIn particular this description in the commit message seems like a contradiction:\r\n\r\n> Catching this exception and returning null fixes this error. This\r\n> does not change the behaviour of this function because the error\r\n> only happens when the map is re-read - and we never actually re-read\r\n> the initialSharedData map, we only ever read it once.\r\n\r\nDoesn\'t the fact that we\'re seeing the error appear indicate that we do actually re-read the Map in question?\r\n\r\nOr another way of looking at basically the same point: if the behavior of the function isn\'t affected by this change, then why are we making the change? It\'s certainly not simplifying or clarifying the code. If this change causes those red-screen errors with ""Map already consumed"" to stop appearing, then that\'s very much a change in the behavior of the function.\r\n', 'comment_created': datetime.datetime(2020, 7, 21, 3, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 457814943, 'comment_body': 'Huh, that is *wacky* that it behaves that way! Good find.\r\n', 'comment_created': datetime.datetime(2020, 7, 21, 3, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 457815761, 'comment_body': 'nit: spaces -- see the style of the existing code\r\n\r\n(In Android Studio you should be able to hit Ctrl+Alt+L and have it reformat the code for you. In steady state that should have no effect.)\r\n', 'comment_created': datetime.datetime(2020, 7, 21, 3, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 457822483, 'comment_body': '    sharing: Handle hardware back button when selecting PM recipients.\r\n    \r\n    Use modal\'s \'onRequestClose\' to hide the user selection screen when\r\n    the back button is pressed while choosing recipients in the share to\r\n    PM tab.\r\n\r\nHmm, did this not work in the previous version? Certainly good to fix so that this works.\r\n\r\nI\'m less happy about relying completely on the back button here. It\'s acceptable as a temporary workaround because we only support this flow in the first place on Android -- but that won\'t work when in the future we offer sharing on iOS as well. And in the UX of this even on Android: everywhere else in the app (including other uses of this user-picker widget!), when it\'s possible and natural to go back, we have a ""back"" icon at the top left of the screen that offers that. It feels like a glitch for that to be missing here.\r\n', 'comment_created': datetime.datetime(2020, 7, 21, 4, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 457840546, 'comment_body': 'Took me several hours to figure this out, I tried a lot of different things 😰', 'comment_created': datetime.datetime(2020, 7, 21, 5, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 459113757, 'comment_body': 'now redundant', 'comment_created': datetime.datetime(2020, 7, 22, 22, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 459114171, 'comment_body': ""This is certainly plausible code now. I wonder if it's clearly the behavior we really want, though. Why are we ending up trying twice to get the initial shared data? What's the situation where that happens?\r\n"", 'comment_created': datetime.datetime(2020, 7, 22, 22, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': '670ac282753a2304ce1e8fc60ac5b082b865a9cb', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53f3362ec7cff9478d49bb97dbe8da23dc29b16', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72fc6b74b78b2c04d3eaea1a752aa361cd12a12c', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9d5db1520ec9fe8818e9328b5140ec23d3d80f3', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
451021064,"home screen: Add ability to mark messages in bulk, mute topics.","Fixes: #3175

![bulk-2](https://user-images.githubusercontent.com/7714968/88092651-7079cd00-cbae-11ea-9a24-17cecf37dbd0.gif)


",False,4194,https://api.github.com/repos/zulip/zulip-mobile/pulls/4194,https://github.com/zulip/zulip-mobile/pull/4194,open,288,20,8,3,2,10,0,0,[],2020-07-17 10:47:16+00:00,,0.0,,"[{'comment_id': 456374279, 'comment_body': ""This comment is present here because although `handleTopicSelect` is unused, I don't want it going into `restProps`."", 'comment_created': datetime.datetime(2020, 7, 17, 11, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 465949852, 'comment_body': 'This needs to have an entry in static/translations/messages_en.json.', 'comment_created': datetime.datetime(2020, 8, 5, 19, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 465960479, 'comment_body': 'I think it would be good to announce the success of the action in a toast, once it\'s succeeded, as something like ""Muted selected topics"".\r\n\r\nIt\'s good to tell the user that their request has been acknowledged, as this ""Muting..."" / ""Marking..."" toast does. Unfortunately, our toast library doesn\'t handle the case where we have multiple toasts in quick succession. One way it might handle that is to move any still-present toasts upwards, to make room for a new one. But it doesn\'t; ah, well.\r\n\r\nStill, even if it did, I think there\'s a better way to tell the user that their request has been acknowledged, and using fewer words. How about using the component\'s `state` to track whether the request is in progress, being sure to set it appropriately when the request starts, and when it fails or succeeds. Then, we can show the loading state graphically through the duration of the request, perhaps by disabling the button they pressed. (This would have the nice benefit of making sure they don\'t accidentally duplicate the request, which could lead to confusing behavior or bugs.)', 'comment_created': datetime.datetime(2020, 8, 5, 19, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 466009129, 'comment_body': 'It\'s a little confusing to use a ""nav"" button here, where the action isn\'t to navigate somewhere, but to execute an action on selected topics.\r\n\r\nStill, it is in the nav bar, and there\'s not an obvious other place it could go.', 'comment_created': datetime.datetime(2020, 8, 5, 21, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 466015755, 'comment_body': 'Hmm, I\'m not sure a checkmark really conveys the meaning ""mark as read"". A checkmark is also used to indicate selecting a topic on the same screen, for one thing.\r\n\r\nIt looks like Gmail uses an open envelope icon, in both the mobile app (iOS) and in the browser. The situation there is slightly different, though; email threads appear whether they\'ve been read or not, and the button changes to a closed envelope when you select only threads that have been read. That\'s a bit of extra context that helps solidify the meaning of the open envelope (that and the fact that their product is e*mail*).\r\n\r\nStill, I think an open envelope icon might be recognizable enough, in our app, or at least more so than a checkmark? What do you think?\r\n\r\n**edit**: Huh, though, looks like the web app uses [fa-book](https://fontawesome.com/v4.7.0/icon/book) for ""mark as read"" in at least one place:\r\n\r\n<img src=""https://user-images.githubusercontent.com/22248748/89466270-5ac8e380-d728-11ea-9a94-f54abc09a4fa.png"" width=200 />', 'comment_created': datetime.datetime(2020, 8, 5, 21, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 466024797, 'comment_body': ""The empty circle is just a bit bigger than the circular checkmark icon; they should be exactly the same size, I think.\r\n\r\nI wonder if there's a pair of icons that are meant to complement each other? Like [this](https://fontawesome.com/v3.2.1/icon/check) and [this](https://fontawesome.com/v3.2.1/icon/check-empty), although that particular pair uses a rounded square, and it seems unavailable in the latest version of Font Awesome, hmm.\r\n\r\nMaybe [this](https://fontawesome.com/icons/check-circle?style=solid) and [this](https://fontawesome.com/icons/circle?style=regular)?\r\n\r\nIf we can find two icons, from the same icon set, that are explicitly meant to complement each other, then we don't even have to think about inconsistencies between them."", 'comment_created': datetime.datetime(2020, 8, 5, 21, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 466026935, 'comment_body': ""What's the meaning of returning true or false from this function? That would be good to answer in a code comment."", 'comment_created': datetime.datetime(2020, 8, 5, 21, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 466029157, 'comment_body': ""Let's have `context` directly follow `static contextType`. From the JSDoc on `GetText` in src/types.js:\r\n\r\n```\r\n * To use, put these two lines at the top of a React component's body:\r\n *\r\n *     static contextType = TranslationContext;\r\n *     context: GetText;\r\n```\r\n\r\nThen a blank line after those, to set them apart.\r\n\r\nFor `backHandler`, it looks like it's just sitting there; is there a type annotation we can give it?"", 'comment_created': datetime.datetime(2020, 8, 5, 22, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 466060539, 'comment_body': ""Makes sense. Let's put that in the code comment, though. 😉 "", 'comment_created': datetime.datetime(2020, 8, 5, 23, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 467013567, 'comment_body': ""Not all the icons present online are actually present in the RN library. For example, the empty circle icon is missing from most icon sets while it's present in the online list."", 'comment_created': datetime.datetime(2020, 8, 7, 12, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}]","[{'commit_sha': 'c8273b8fa8a6d5d1b8bd15bae8a3939a2aa96777', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bafc33bad1da80e6cd06e578c7f4c75fa1f4429', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd09113f226eceb8e87e287298a77e3b2583b9e2', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
448248825,msg action sheet: Add 'Reply with mention' option.,"Adds the reply with mention featrue, that populates the compose box
message input with an @-mention, the topic input (if present) with
the topic of the message and shows the keyboard.

Fixes: #3436.",False,4190,https://api.github.com/repos/zulip/zulip-mobile/pulls/4190,https://github.com/zulip/zulip-mobile/pull/4190,open,80,15,6,1,1,1,0,0,[],2020-07-13 13:16:16+00:00,,0.0,,"[{'comment_id': 457767774, 'comment_body': 'nit: newline at end of file', 'comment_created': datetime.datetime(2020, 7, 21, 0, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}]","[{'commit_sha': '318e8d52281bb737ccdf983512e17c920588019f', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
442787208,outbox: Start sending messages on regaining connectivity.,"When the app regains internet connectivity, we should start sending
outbox messages. But this is not done currently, and the sending of
these pending outbox messages starts only when the user composes a
new message.

Modifies 'handleConnectivityChange' to call 'sendOutbox' when the
app regains connectivity.

Fixes: #4177",False,4178,https://api.github.com/repos/zulip/zulip-mobile/pulls/4178,https://github.com/zulip/zulip-mobile/pull/4178,open,6,1,1,1,0,0,0,0,[],2020-07-01 15:48:06+00:00,,0.0,,[],"[{'commit_sha': 'bfba20a66511f07de855b1925765e354d0d9db31', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
442534153,home screen: Use material tabs for bottom navigation.,"Use `createMaterialTopTabNavigator` for bottom navigation. The
previously used `createBottomTabNavigator` gave no feedback on
tapping the icons, which is bad UX. Infact, on low end devices,
navigating to different screens can take a noticable amount of
time, and sometimes it feels that the touch didn't register. Using
these fixes the issue.

![rec](https://user-images.githubusercontent.com/7714968/86227890-4e8ebb00-bbab-11ea-8343-b38408ebf178.gif)
",False,4176,https://api.github.com/repos/zulip/zulip-mobile/pulls/4176,https://github.com/zulip/zulip-mobile/pull/4176,open,5,3,1,1,2,8,1,0,[{'name': 'a-layout'}],2020-07-01 08:33:43+00:00,,0.0,,"[{'comment_id': 448230691, 'comment_body': 'This is required to prevent a layout bug that happens in the first few moments of initial render.', 'comment_created': datetime.datetime(2020, 7, 1, 9, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 448620890, 'comment_body': 'Hmm, interesting. I wonder why this still puts the tabs on the bottom, when it looks like we\'re asking for it to make a ""top"" tab navigator here.\r\n\r\nTo get the buttons to show feedback, I wonder about still using `createBottomTabNavigator`, but with something special for the `tabBarButton` setting: https://reactnavigation.org/docs/bottom-tab-navigator/#tabbarbutton', 'comment_created': datetime.datetime(2020, 7, 1, 21, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 448763781, 'comment_body': ""It's at the bottom because I passed this option in line 66:\r\n`tabBarPosition: 'bottom'`\r\n\r\nI tried `Touchable` from our 'commons', but it did not give any feedback at all - because it changes opacity on tap, and that does not change the appearance in this case, and also causes a weird layout bug for our 'PMs' icon - because it comes with an unread count indicator, and it becomes misplaced.\r\n\r\nI feel material tabs are a good option, because they provide good feedback without an additional setup, along with a nice indicator for the active tab."", 'comment_created': datetime.datetime(2020, 7, 2, 5, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 449316941, 'comment_body': '> I feel material tabs are a good option\r\n\r\nI agree. I think the problem I have is that createMaterial**Top**TabNavigator is...just that, a thing to get material tabs at the top. From the [doc](https://reactnavigation.org/docs/2.x/material-top-tab-navigator/):\r\n\r\n> A material-design themed tab bar on the top of the screen [...]\r\n\r\nAha, though! After taking a look at the documentation, it looks like there may be a compromise between `createBottomTabNavigator` and `createMaterialTopTabNavigator`:\r\n\r\n[`createMaterialBottomTabNavigator`](https://reactnavigation.org/docs/2.x/material-bottom-tab-navigator)\r\n\r\nHave you tried that? 🙂 ', 'comment_created': datetime.datetime(2020, 7, 3, 0, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 449405255, 'comment_body': ""Yep, I already tried that. But we don't have access to `createMaterialBottomTabNavigator` - the package we use - ['react-navigation-tabs'](https://www.npmjs.com/package/react-navigation-tabs) only provides two exports: \r\n\r\n>The package exports two different navigators:\r\n>\r\n>createBottomTabNavigator: iOS like bottom tabs.\r\n>createMaterialTopTabNavigator: Material design themed top tabs with swipe gesture, from react-native-tab-view.\r\n\r\nSo, I didn't want to add an extra dependency for material bottom tabs when I was able to use material top tabs. Do you want me to add the dependency `createMaterialBottomTabNavigator` (`yarn add @react-navigation/bottom-tabs`) or is this fine? I guess if I do add the dependency, I'll also have to create a flow libdef.\r\n\r\nI think we should not add an extra dependency when we are able to configure `createMaterialTopTabNavigator` to do the job, but I'll let you make the final decision.\r\n"", 'comment_created': datetime.datetime(2020, 7, 3, 6, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 449690878, 'comment_body': 'Mm, earlier, I didn\'t see that `createMaterialBottomTabNavigator` means adding another dependency (actually two; the [doc](https://reactnavigation.org/docs/2.x/material-bottom-tab-navigator/) says to install `react-navigation-material-bottom-tabs` and `react-native-paper`). This would still be true after https://github.com/zulip/zulip-mobile/pull/4114, as `createMaterialBottomTabNavigator` isn\'t exposed by the plain `react-navigation` library. Making a libdef can be a pain, but it can also be pretty straightforward; we have a growing [doc](https://github.com/zulip/zulip-mobile/blob/master/docs/howto/libdefs.md) about it, which it may be productive to add to.\r\n\r\nI\'m still a bit torn; @gnprice, do you have thoughts on this? Someday, without declaring it as a breaking change, `createMaterialTopTabNavigator` could reasonably drop the ability to be hacked into showing bottom tabs instead of top tabs.\r\n\r\nI\'ve just tested out `createMaterialBottomTabNavigator`; it worked with these versions:\r\n\r\n- `""react-navigation-material-bottom-tabs"": ""^0.4.0""` (any later, and there are issues with its dependencies or peerDependencies)\r\n- `""react-native-paper"": ""^2.0.1""` (`react-navigation-material-bottom-tabs` has this in its peerDependencies)\r\n\r\nJust replacing `createBottomTabNavigator` with `createMaterialBottomTabNavigator`, and not adding any additional config, this is what it looks like on Android and iOS. It\'s quite different from what we have now, but there\'s lots of config available:\r\n\r\n<img src=""https://user-images.githubusercontent.com/22248748/86494162-0d241a00-bd29-11ea-8358-a8a966f48b17.png"" height=""400""> <img src=""https://user-images.githubusercontent.com/22248748/86494266-5e340e00-bd29-11ea-9a3f-5d7bba1221b0.png"" height=""400"">\r\n\r\nOn Android, there is a ""ripple"" effect, like the animation at [this doc](https://callstack.github.io/react-native-paper/2.0/bottom-navigation.html) except the colors don\'t change (looks like you can optionally give a different color to each tab). It looks like there\'s no feedback, by default, on iOS. (The latest version explicitly [documents](https://callstack.github.io/react-native-paper/bottom-navigation.html#renderTouchable) a way to switch out the `TouchableWithoutFeedback` component) . \r\n\r\nI do slightly prefer the way it shows which tab is selected; in particular, I like seeing the smooth appearance and disappearance of the tab\'s name in addition to the icon. We likely wouldn\'t choose this indigo color, but I like how the icons are translucent when not focused.', 'comment_created': datetime.datetime(2020, 7, 3, 19, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 459161098, 'comment_body': ""> We likely wouldn't choose this indigo color\r\n\r\nHeh, though it does more closely match the new logo we now have! https://github.com/zulip/zulip-mobile/issues/4200"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 459215074, 'comment_body': 'Luckily, our app uses global constants for the theme colours everywhere, so it will be very easy to change the theme colours in other places too.', 'comment_created': datetime.datetime(2020, 7, 23, 5, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}]","[{'commit_sha': 'e96f8a1a27cf672a998af98aa503da955342ffaa', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
441281293,Allow viewing message edit history,"![image](https://user-images.githubusercontent.com/7714968/85990764-21f26c00-ba10-11ea-8e63-eca33cc62413.png)

Fixes: #4134",False,4173,https://api.github.com/repos/zulip/zulip-mobile/pulls/4173,https://github.com/zulip/zulip-mobile/pull/4173,open,407,122,12,5,10,27,1,0,[{'name': 'webapp parity'}],2020-06-29 08:26:07+00:00,,0.0,,"[{'comment_id': 447961427, 'comment_body': 'Nit: newline at end of file', 'comment_created': datetime.datetime(2020, 6, 30, 20, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 448005794, 'comment_body': ""> by experimenting it's possible to determine which fields are always present.\r\n\r\nIt sounds like you've tested at least the common cases (a topic was edited but not the content, or vice versa) and seen that these fields fields were there in those cases.\r\n\r\nI suppose, to make this *entirely* true, we have to also be sure that there won't be any surprising cases we haven't tested yet. It might be easier to post in #mobile-team with any questions about the docs, and that may have the side-effect of improving the docs for the next person who has the same questions. 🙂 "", 'comment_created': datetime.datetime(2020, 6, 30, 22, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 449699066, 'comment_body': ""Let's get this logged to Sentry, with `logging.error`, and include the value of `edit_flag` in the second argument, `extras`."", 'comment_created': datetime.datetime(2020, 7, 3, 20, 35, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 449699337, 'comment_body': ""When you're looking at the original message, is the Markdown rendered properly?\r\n\r\nI'm seeing the raw text; not sure why. But it seems like it's been possible to show everything properly formatted when viewing edits in the list, so it would be great to get the original message formatted properly too if we can (and it's that way in the web app). 🙂 "", 'comment_created': datetime.datetime(2020, 7, 3, 20, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 449749112, 'comment_body': 'Oops, I placed `content` instead of `rendered_content`!', 'comment_created': datetime.datetime(2020, 7, 4, 7, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 449749132, 'comment_body': ""Ok\r\n(It's actually impossible to reach here :p)\r\n"", 'comment_created': datetime.datetime(2020, 7, 4, 7, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 450411100, 'comment_body': ""> (It's actually impossible to reach here :p)\r\n\r\nQuick tip: you can add `ensureUnreachable(edit_flag);` here to assert this to the type-checker (and ask it to verify that it can prove it.) That helps prevent errors before they even reach users :slightly_smiling_face: if say a new case is added here in the future.\r\n"", 'comment_created': datetime.datetime(2020, 7, 6, 18, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 450683648, 'comment_body': ""I'm getting the following error on adding that:\r\n```js\r\nError ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ src/webview/html/editHistoryHtml.js:76:25\r\n\r\nCannot call ensureUnreachable with edit_flag bound to x because:\r\n • string [1] is incompatible with empty [2].\r\n • string [3] is incompatible with empty [2].\r\n • string [4] is incompatible with empty [2].\r\n • string [5] is incompatible with empty [2].\r\n\r\n     src/webview/html/editHistoryHtml.js\r\n [1] 10│ const TOPIC_EDITED = 'TOPIC_EDITED';\r\n [3] 11│ const CONTENT_EDITED = 'CONTENT_EDITED';\r\n [4] 12│ const BOTH_EDITED = 'BOTH_EDITED';\r\n [5] 13│ const NOT_EDITED = 'NOT_EDITED';\r\n       :\r\n     73│     }\r\n     74│\r\n     75│     default:\r\n     76│       ensureUnreachable(edit_flag);\r\n     77│       logging.error('Invalid edit_flag', { editFlag: edit_flag });\r\n     78│       break;\r\n     79│   }\r\n\r\n     src/types.js\r\n [2] 42│ export function ensureUnreachable(x: empty) {}\r\n\r\n\r\n\r\nFound 4 errors\r\n```\r\n\r\nI think Flow is not able to understand that this case is unreachable?"", 'comment_created': datetime.datetime(2020, 7, 7, 8, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 451061172, 'comment_body': ""No need to have three copies of this comment :slightly_smiling_face: \r\n\r\nI think the jsdoc on the newly-factored-out function is the right place to keep it -- it's describing the function's interface. (Potentially we could have some other WebView in the future that is actually meant to load subsequent pages, and then this paragraph would explain why this function would no longer be the right logic to use for that WebView.)\r\n"", 'comment_created': datetime.datetime(2020, 7, 7, 18, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 451066245, 'comment_body': ""Let's move the `assetsPath` logic out to this new file too. Both that logic and this are basically gritty details of how the webview works -- we're interested in one at the same times we're interested in the other -- and both are distractions, where they currently live in MessageList, from the main job of that component.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 7, 18, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 451080616, 'comment_body': ""That discussion here:\r\nhttps://chat.zulip.org/#narrow/stream/243-mobile-team/topic/get-message-history.20docs/near/921587\r\n\r\nWhenever we find a place where the API docs seem to be wrong, I always want to discuss it in chat and bring it to Tim's attention there. Reasons include:\r\n* I want the API docs to converge on being right too :slightly_smiling_face: -- if we have a steady state where our types say one thing and the API docs say another, that'll be confusing to a later reader\r\n* If for whatever reason the API docs don't get updated promptly, I'll want the comments in our code to be super explicit that the API docs say X but the truth is Y, and here's how we've determined the truth is Y. That gives the future reader a hope of not being confused by the contradiction, because at least they can see that the author of the types was aware of what the API docs said, and wasn't just misreading them, or working from what at that future time is an out-of-date version\r\n* The answer might be that the documented API is as intended, and the server's behavior that disagrees is a bug!\r\n\r\nAs of right now (since a few minutes ago), the status is that Tim confirms the current behavior is what you're seeing empirically -- but potentially wants to fix it by changing the behavior to match the docs instead of vice versa.\r\n"", 'comment_created': datetime.datetime(2020, 7, 7, 19, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 451082702, 'comment_body': ""This summary is concise in a similar way to the corresponding bit of the API docs -- but I think it would actually be clearer (and not even many more words, if more at all) to be less abstract, more concrete and explicit:\r\n```js\r\n  // These are present just if the content was edited.\r\n  prev_content?: string,\r\n￼  prev_rendered_content?: string,\r\n￼  content_html_diff?: string,\r\n\r\n  // Present just if the topic was edited.\r\n  prev_topic?: string,\r\n```\r\n\r\n(... OK, and I just counted: that's 16 words instead of 15. :grin: )\r\n"", 'comment_created': datetime.datetime(2020, 7, 7, 19, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 451093088, 'comment_body': ""Ah -- it's that the type of `edit_flag` is simply `string`, instead of being an enum `'TOPIC_EDITED' | 'CONTENT_EDITED' | 'BOTH_EDITED' | 'NOT_EDITED'`.\r\n\r\nYou could make it an enum by annotating it with that type (and then probably doing something to avoid initializing to `undefined` and mutating.)\r\n\r\nOr, looking a bit more at the code: this flag is so short-lived, just from an if/else-if chain to a `switch` right after it. I think it'd simplify things to just fuse those together: have an if/else-if chain with those conditions, and with the cases' bodies as their bodies. Or, a bit further: a two-level tree of if/else statements:\r\n```js\r\nif (snapshot.prev_content === undefined) {\r\n  if (snapshot.prev_topic === undefined) {\r\n  …\r\n  } else {\r\n  …\r\n  }\r\n} else {\r\n  …\r\n}\r\n"", 'comment_created': datetime.datetime(2020, 7, 7, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 451095535, 'comment_body': 'This is a lot of mutable `let` bindings. In general we prefer `const` -- it makes the code simpler to reason about both for us human readers, and for the type-checker.\r\n\r\nLooking at how they\'re used, each of these ends up always being mutated exactly once before it\'s used. So that suggests that what\'s ""really"" going on is we\'re initializing each of these bindings to a value and then never mutating it thereafter -- which is what `const` expresses. I think we can pretty naturally rearrange this logic so that it works that way explicitly.\r\n\r\nSpecifically, one natural way to refactor this that expresses the real structure more directly would be to pull out a helper function that returns `tag` and `displayedContent`. (And that in turn could use a helper returning `edit_flag`, or the logic that produces and consumes that flag could just be fused together as I mentioned at https://github.com/zulip/zulip-mobile/pull/4173#discussion_r451093088 .)\r\n', 'comment_created': datetime.datetime(2020, 7, 7, 19, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 451100560, 'comment_body': 'Hmm, I missed these fixmes the first couple of times I looked at this code!\r\n\r\nPlease always put fixme comments at the start of the comment line. (Ditto for TODO, and for any other special keywords that are meant to jump out at the reader to draw scrutiny.)\r\n', 'comment_created': datetime.datetime(2020, 7, 7, 19, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 451104783, 'comment_body': 'And now that I look at the fixmes, I definitely prefer the plan where these cases just get pushed into the `if` and `else` bodies. :smile: \r\n\r\nIf this were inside the `if` or `else`, Flow would immediately follow this logic around `prev_topic`. It doesn\'t know the correlation between `prev_content` and `content_html_diff`... but we could simply use the latter in the conditional, since that\'s what we\'re actually relying on.\r\n\r\n(Alternatively, in some other circumstances it can certainly make sense to have this flavor of ""if this condition, then that property is present / non-nullish"" logic that\'s twistier than the type-checker is able to follow. When we do, instead of a fixme what I\'d much rather have is an assert, throwing an exception if the impossible happens -- that way (a) it\'s explicit in the actual code exactly what assumption we\'re making, (b) Flow can check that we\'re relying *only* on those assumptions we say we\'re making, and (c) if we\'re wrong (perhaps after future changes to the code by someone else), we get an exception so we can learn about the problem.)\r\n', 'comment_created': datetime.datetime(2020, 7, 7, 19, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 451112832, 'comment_body': ""There are some subtle bits here :slightly_smiling_face:. Particularly that `meta` element -- I can only guess at what it does, and would have to look it up.\r\n\r\nAnd this sure has a lot in common with the code in `html.js`! In particular, the subtle bits are exactly the same. (Then the latter has one additional subtle bit, `webkitBugWorkaround`, which is likely unnecessary here but would be harmless.)\r\n\r\nAnything that's subtle, I am keen on not duplicating. When code is duplicated, future bugfixes and incidental changes tend to go on just one or the other -- and then it's self-reinforcing: as they diverge, it gets harder to make the same change on both of them or be sure the change would do the same thing on both, so more changes get applied to just the one where the bug happened to be spotted. So because we need this in two places, let's factor it out into one place we can call from both of them.\r\n"", 'comment_created': datetime.datetime(2020, 7, 7, 20, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 451127870, 'comment_body': ""I appreciate the careful use of ``template`…` ``, `${…}`, and `$!${…}`! You may already know that this is an important surface area for preventing HTML injections.\r\n\r\nWhich we actually had, until a couple of years ago -- the day I discovered that, I [fixed it](https://github.com/zulip/zulip-mobile/commit/994145383f9478e1e2ae1b40c9b77f222ebe72d7) and then built this little templating/escaping system to help us prevent it ever happening again.\r\n\r\nI've looked closely at these templates, and I believe everything gets escaped correctly.\r\n\r\nA couple of things I try to do to help keep it that way, as people make changes in the future:\r\n* Background ideas:\r\n  * Conceptually there are two types here: text string, and HTML string. Sadly we haven't taught the type-checker the difference -- they're both `string` -- so we have to keep track of the distinction ourselves.\r\n  * The ultimate return value is an HTML string. Most of the inputs are text strings, and in general any string that isn't explicitly meant to be used as raw HTML is a text string. The only way to get an HTML string from a text string is to hand it to `template`; and an interpolation in `template` should have `$!$` if it's an HTML string and plain `$` if it's a text string.\r\n  * So the goal is to be able to look at a use of `$` or `$!$` -- especially a use of `$!$` -- and immediately tell, without a lot of reading through other code, whether it looks right, or should be the other way instead.\r\n* One thing that helps: For each variable that represents a fragment that'll get used in templates, give it a name that's explicit about whether it's a text string or an HTML string. Especially if it's an HTML string, make that explicit. That way when there's an interpolation like `$!${someVar}`, and it's not a name like `$!${someHtml}`, it jumps out as suspicious.\r\n  * This is why `messageHeaderAsHtml.js` has variables `topicHtml`, for example.\r\n  * So here, `tagHtml` would be a good name for `tag`. Similarly `displayedContentHtml`.\r\n* Another thing that helps: make it so that every last backtick-interpolated string in the HTML-rendering code uses `template`. That way any that don't are suspicious.\r\n  * This commit adds one non-`template` backtick-literal: `editedTime`. The behavior is fine, because it truly is a text string, and it gets duly escaped when it's used. But it'd be good to maintain that invariant, to help make any future oversights stand out. One simple way would be to just inline that expression in the place where `editedTime` is used.\r\n\r\nFor history see 994145383f9478e1e2ae1b40c9b77f222ebe72d7, where I fixed the HTML injection (in 2018-05.) Some discussion of these hygiene practices in af5a56f41d6229faa8b60b42781951892a5a70f1, a few commits later; `template` itself was introduced in the latter's parent."", 'comment_created': datetime.datetime(2020, 7, 7, 20, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 451130457, 'comment_body': ""Are these based on something in the webapp, or did you develop them afresh?\r\n\r\nEither is fine :slightly_smiling_face: -- I'd just like to know (and have the commit message say so for future readers), and if it's from the webapp have a quick comment in the file saying where exactly it's from. (Including if it's based loosely or in part on something in the webapp.) That will save us some archaeological work in any future effort to unify the message CSS on web and mobile.\r\n"", 'comment_created': datetime.datetime(2020, 7, 7, 20, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 451133990, 'comment_body': ""This is another example of a subtle set of details I'm keen on not duplicating :slightly_smiling_face: .\r\n\r\nMost of this should get factored out to go along with `getOnShouldStartLoadWithRequest` -- the `originWhitelist`, the transparent-background `style`, the `onShouldStartLoadWithRequest`. The bits that the factored-out code (perhaps a new React component?) should take as parameters (or React props) are something like: `html`, the `onMessage` and `onError` callbacks, and maybe `baseUrl`.\r\n"", 'comment_created': datetime.datetime(2020, 7, 7, 20, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 451348778, 'comment_body': 'Thanks for the detailed explaination!', 'comment_created': datetime.datetime(2020, 7, 8, 7, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 451350793, 'comment_body': 'The `.highlight_text_*` CSS is borrowed form the web-app, the others are new.', 'comment_created': datetime.datetime(2020, 7, 8, 7, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 455228429, 'comment_body': ""Hmm, what was the reason to lose the type annotation here? Is it possible to bring it back? If it can't be brought back simply as-is, maybe we could try with the newer `React.createRef` API? (My example at https://github.com/zulip/zulip-mobile/pull/4101#discussion_r449259543 might be helpful.)"", 'comment_created': datetime.datetime(2020, 7, 15, 17, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 455236808, 'comment_body': '🤔 ', 'comment_created': datetime.datetime(2020, 7, 15, 17, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 455257777, 'comment_body': 'f1a7acaa1 webview: Refactor core logic into a common component.\r\n\r\nCool! It\'s great to see this core logic centralized so we don\'t have to duplicate it.\r\n\r\nWith the choice to do it in a new React component, one thing to be aware of (even if nothing actually changes, and it turns out to be fine) is that it adds a layer of complexity if we want to change the behavior (or debug something) around React components\' lifecycles, particularly updates, a.k.a. re-`render`s. I mentioned this briefly [here](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/Resource.20URLs/near/926743) but didn\'t go into very much detail.\r\n\r\nThe `WebView` component from `react-native-webview` has its own ideas about when it should update; it can choose to be a stateless ""function component"", a `PureComponent`, or a regular `Component`, and, if the latter, it can give hints about its desired behavior in `shouldComponentUpdate`. We should assume its updates may be triggered by updates in its parent component.\r\n\r\nThere\'s now another layer between that `WebView` and our `MessageList` (and between that `WebView` and the new `EditHistory`, but I think it\'s much more important to think about `MessageList`).\r\n\r\nOur `MessageList` component implements `shouldComponentUpdate` to say that we just never want the `MessageList` component to update. (React would probably say this is controversial; they recommend, ""Do not rely on it to “prevent” a rendering, as this can lead to bugs"", in [this doc](https://reactjs.org/docs/react-component.html#shouldcomponentupdate). But so far we haven\'t run into problems with this.)\r\n\r\nI haven\'t tested, but I think everything should actually turn out fine. I would be concerned if our new `WebView` component did some additional updates of its own, not prompted by an update in its parent. The only case I can think of where this would likely happen is if our new `WebView` component had some `state` that it decided, on its own, to change. (From the [`shouldComponentUpdate` doc](https://reactjs.org/docs/react-component.html#shouldcomponentupdate): ""Note that returning `false` does not prevent child components from re-rendering when *their* state changes."")\r\n\r\nOne (optional) simple thing that could be done about this case, for a bit of peace of mind, I think, is to make our new `WebView` a stateless ""function component"" ([doc](https://reactjs.org/docs/components-and-props.html#function-and-class-components)) and add a note that we shouldn\'t introduce `state` without considering the extra complexity it would add around re-`render`ing. I very rarely use ""function component""s but I think it would be appropriate in this case. If we\'re going this route, maybe let\'s not use an arrow function, because, for the sake of logging output, we don\'t want it to be anonymous. A regular function declaration would be okay, as in the example in the doc (`function Welcome(props) {`). But maybe better (so we don\'t have to think about hoisting) is to use `const` with a named function expression, like `const ZulipWebView = function ZulipWebView(props) {` ([here](https://github.com/zulip/zulip-mobile/compare/master...chrisbobbe:demo-function-component)\'s a quick example).', 'comment_created': datetime.datetime(2020, 7, 15, 18, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 455259875, 'comment_body': ""I also think, just in case we do eventually have to do some hairy debugging around components' lifecycles, or just to be clear about what's what, in general, it might be nice to name our new `WebView` something like `ZulipWebView`. I think of these as reasons for the naming of `ZulipButton` (but actually, looking closer, it doesn't actually wrap a component called `Button`, hmm)."", 'comment_created': datetime.datetime(2020, 7, 15, 18, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 455716621, 'comment_body': 'The innerRef is actually a ref to `react-native-webview`, so to annotate the type, I need to import both `ZulipWebView` and `WebView` in `MessageList.js`. Done this now.', 'comment_created': datetime.datetime(2020, 7, 16, 11, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}]","[{'commit_sha': 'a22382f6c88c73b19cc4a051be5578f2932c157b', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f10593c1b6bc46f4166997060256978a180031d', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd9c98a1c001291dd270cd74bbd1d429f5927254', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e53b460532c87d5daca2017d21332749f5d11df1', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e450138668ce6b1ba7a9af8055fc931f21b11f2', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
437913010,webview: Add support for displaying spoilers.,"Support for creating spoilers was recently added to Zulip[1].
Currently, spoilers render as visible by default on the app.

Add functionality to handle spoilers properly - spoilers are
collapsed by default, and can be toggled by tapping on the header.
Also, if a header is missing, the text 'Spoiler' is added as the
header.

The implementation is similar to [1], but the JavaScript was
rewritten to work without jQuery.

[1] https://github.com/zulip/zulip/commit/1cb040647b37f9f2269c2b39ae6495830f49ac4b

Fixes: #4155",True,4169,https://api.github.com/repos/zulip/zulip-mobile/pulls/4169,https://github.com/zulip/zulip-mobile/pull/4169,closed,304,5,5,3,16,45,1,0,[{'name': 'P1 high-priority'}],2020-06-22 12:35:45+00:00,2021-01-06 19:00:03+00:00,17130258.0,"198 days, 6:24:18","[{'comment_id': 463432423, 'comment_body': 'Why look for two different elements here? If the only one we actually need is the `.spoiler-block`, seems simplest to just use that.\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 6, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463433088, 'comment_body': ""I guess unless it's important somehow that when we have a `.spoiler-header` ancestor, but not a `.spoiler-block` so we don't actually act on that, we also return so that we don't act on anything else?\r\n\r\nI'm skeptical that that's actually good -- basically it'd create a dead zone where the spoiler UI doesn't actually do anything but does, er, spoil doing anything else with the message. If we *do* want it it should be explicit; as is, this behavior looks kind of like it might just be an accident of how the code was written.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 6, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463433434, 'comment_body': ""If we're not going to actually do anything with an undefined parameter, simpler to just forbid it in the type.\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 6, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463434762, 'comment_body': ""Hmm and from the CSS it sounds like that's not a situation that's even supposed to happen. (Rather everything else spoiler-related goes inside a `.spoiler-block`.) In which case I guess this behavior was indeed just an accident of how this code was written :wink: and we can drop the talk of `.spoiler-header` in this chunk of code entirely.\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 6, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463437395, 'comment_body': ""This makes me kind of nervous. It's clearly relying on some kind of assumption about the structure of this element. Where are those assumptions encoded? Are they based on something we do within the app, or an expectation we have about what the server will send us?\r\n\r\nIf nothing else, we should be very explicit about what the assumptions are, and what we're relying on to make them true.\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 6, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463441653, 'comment_body': ""Huh, this is complicated. Is this just based on what the webapp does?\r\n\r\nI see, yes, it is. That's an important thing to mention in a comment in the code, then, for a couple of reasons:\r\n* For any questions the reader has about why the code seems odd, it provides a pointer for where to look: go ask about the webapp. :slightly_smiling_face: \r\n* Most importantly, when someone's considering *changing* the code, it tells them to probably stop -- one of the important things to maintain about this code will be that it should be a lot like the webapp's corresponding code.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 7, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463444611, 'comment_body': 'Ah, and I see the corresponding webapp code looks like this:\r\n```js\r\n        const arrow = $(this).children(\'.spoiler-arrow\');\r\n        const spoiler_content = $(this).parent().siblings("".spoiler-content"");\r\n```\r\n\r\nWe don\'t use JQuery in the mobile app, but an important fact is that the reason we don\'t use JQuery is that the standard DOM now provides the nice things that in 2012 you had to use something like JQuery to get. :smile: Take a look in particular at [`querySelector`](https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector). You might also appreciate [`nextElementSibling`](https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling) and [`parentElement`](https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement).\r\n\r\nIf you use those to help translate the webapp code -- so keeping selectors like `.spoiler-arrow` as part of the code -- then the assumptions we\'re making become partly self-documenting. But we\'ll still want to be clear about what we\'re relying on to make the assumptions true.\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 7, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463445004, 'comment_body': ""These comments aren't needed -- the names in the code already make it pretty clear that this is about spoilers (and the filename makes it clear this is about styling :wink: )\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 7, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463445435, 'comment_body': ""We consistently use `hsl` or `hsla` in our CSS. Looks like this webapp code does the same thing, so there's no reason not to here.\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 7, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 464226211, 'comment_body': 'Because we only want to toggle the spoiler if the header is pressed.', 'comment_created': datetime.datetime(2020, 8, 3, 6, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 464231344, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 8, 3, 7, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 518970426, 'comment_body': ""Just to see what it was like, I just tried only using `.spoiler-block`, so that the entire area of the spoiler was tappable while expanded, not just the header. I moved this code toward the bottom so things like links would continue to be handled.\r\n\r\nIt's different from the web app, which only has the header clickable, but first I thought it might be slightly more convenient to have a larger tappable area on mobile.\r\n\r\nBut then when I tried a [longer spoiler](https://chat.zulip.org/#narrow/stream/7-test-here/topic/spoiler/near/1058916), it occurred to me that spoilers might take up multiple screenfuls, and that the header won't always be in view—meaning one might sometimes forget that they're looking at a spoiler, and might in that case be frustrated or confused to see it close when they tap on it.\r\n\r\nSo I guess I'm slightly in favor of keeping only the header tappable, and that means looking for these two different elements—the header, to handle taps, and the whole block, to do the actual expanding and collapsing."", 'comment_created': datetime.datetime(2020, 11, 6, 19, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 518973756, 'comment_body': ""> we can drop the talk of `.spoiler-header` in this chunk of code entirely.\r\n\r\nThis might have been in response to an earlier revision and I'm not following along so well, but I notice that there's still talk of `.spoiler-header` in the current revision, and I mention a reason for it at https://github.com/zulip/zulip-mobile/pull/4169#discussion_r518970426. Is there still something pending from your comment here?"", 'comment_created': datetime.datetime(2020, 11, 6, 19, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 520932968, 'comment_body': ""> So I guess I'm slightly in favor of keeping only the header tappable, and that means looking for these two different elements—the header, to handle taps, and the whole block, to do the actual expanding and collapsing.\r\n\r\nHmm, I see.\r\n\r\nThat's a fine behavior choice. The place I'd want that distinction to live is inside the spoiler-specific code, in the implementation of `toggleSpoiler`. That function already has to do some navigating of the DOM in any case.\r\n\r\nThat way this `click` handler can remain focused on identifying if something clickable was clicked. So it'd end up looking only for `.spoiler-header`.\r\n"", 'comment_created': datetime.datetime(2020, 11, 10, 23, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 520933434, 'comment_body': ""Yeah, the remaining discussion related to this is at that thread.\r\n\r\n(The thing this thread was specifically about is fixed in the current revision: the `return` is inside the inner `if`, so there's no possibility of a dead zone where the spoiler UI doesn't actually do anything but does prevent doing anything else with the message.)"", 'comment_created': datetime.datetime(2020, 11, 10, 23, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 520935683, 'comment_body': 'Great, this is exactly the kind of thing I was hoping for when I asked to make our assumptions explicit :smile: : https://github.com/zulip/zulip-mobile/pull/4169#discussion_r463444611\r\n', 'comment_created': datetime.datetime(2020, 11, 10, 23, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 520936864, 'comment_body': 'nit: blank line to separate from unrelated rule above\r\n\r\n(particularly because that rule above has its own comment attached, which otherwise looks like it wants to apply to all these rules)', 'comment_created': datetime.datetime(2020, 11, 10, 23, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 520937622, 'comment_body': 'spacing nits:\r\n```suggestion\r\n  border: hsla(0, 0%, 50%, 1) 1px solid;\r\n```\r\n\r\n(and some similar ones below)', 'comment_created': datetime.datetime(2020, 11, 10, 23, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 520937982, 'comment_body': 'should be HSLA, just like at https://github.com/zulip/zulip-mobile/pull/4169#discussion_r463445435', 'comment_created': datetime.datetime(2020, 11, 10, 23, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 520940143, 'comment_body': ""Let's call this file something a bit more general like `spoilers.js`, and use the name `toggleSpoiler` for just this specific export from it.\r\n\r\nThat way the filename (and the module name) isn't so closely tied to the exact interface we use for this code, and in particular to the name of the entry point. When we've used this naming style where the file/module has a long and specific name corresponding to a particular function, it's often caused otherwise-avoidable churn when that function gets refactored.\r\n"", 'comment_created': datetime.datetime(2020, 11, 10, 23, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 520942945, 'comment_body': ""Hmmm interesting. This is the kind of thing that makes me glad to see comments that make the comparison explicit!\r\n\r\nIt's actually quite common for the viewport's size to change on mobile -- possibly more common than on the web, even (or at least than desktop web.) Specifically, it changes every time the keyboard opens and closes; which happens when focusing and unfocusing the text inputs in the compose box.\r\n\r\nPerhaps that means we should do the same thing as the webapp here too?\r\n\r\n... Ah yes, and rereading the commit message I see:\r\n\r\n    The implementation is similar to [1], but the JavaScript was\r\n    rewritten to work without jQuery. Some slight modifications were\r\n    also made, such as removing checks for viewport changes, since the\r\n    mobile app window can not be resized.\r\n\r\nSo that omission was just based on that mistaken assumption. We should include this step in our version too, unless we find a particular reason to think it's causing problems.\r\n\r\n(Fun fact: even the whole app's window can be resized! On Android starting with Android 7 Nougat -- the 2016 release -- you can show two apps [in split screen](https://www.lifewire.com/how-to-do-split-screen-on-android-4707782). Then you can move around the divider between them, which resizes both of them.)\r\n"", 'comment_created': datetime.datetime(2020, 11, 10, 23, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 520943392, 'comment_body': 'Commit zulip/zulip@f3011d3b7 changes the corresponding server line here, apparently as a bugfix. So we should follow that.\r\n', 'comment_created': datetime.datetime(2020, 11, 10, 23, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 520944772, 'comment_body': 'The webapp does this (and its inverse below) on the button, not the whole block.\r\n', 'comment_created': datetime.datetime(2020, 11, 10, 23, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 520947901, 'comment_body': ""Actually, better: when the alpha is 1, just omit it and say `hsl`. That's the default value, and also the most natural thing for humans to think about, so it's simpler to just not bring up the concept of alpha when we're not using it.\r\n\r\n```suggestion\r\n  border: hsl(0, 0%, 50%) 1px solid;\r\n```\r\n(This is also what the corresponding webapp code does, so as a bonus that keeps us more closely aligned with that code.)"", 'comment_created': datetime.datetime(2020, 11, 10, 23, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 520951232, 'comment_body': ""This chunk of styles would benefit from a comment saying something much like what's in the commit message: it's taken from the `.spoiler-block` section of the webapp's styles, as of such-and-such a commit, just translated from SCSS to plain CSS.\r\n"", 'comment_created': datetime.datetime(2020, 11, 11, 0, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 520952558, 'comment_body': ""In the webapp's version, there's one more rule here, involving hover:\r\n```scss\r\n        .spoiler-button {\r\n            float: right;\r\n            width: 25px;\r\n            height: 25px;\r\n            &:hover .spoiler-arrow {\r\n                &::before,\r\n                &::after {\r\n                    background-color: hsl(0, 0%, 50%);\r\n                }\r\n            }\r\n        }\r\n```\r\nThe commit message says that was dropped because hover doesn't exist for us... but I'm not 100% sure that's true, given that people can use alternate inputs with mobile devices, and often do for accessibility reasons. So let's include that rule too -- it'll make these styles exactly match the webapp's version (modulo my small other comments), which helps simplify thinking about them and also maintaining them in the future."", 'comment_created': datetime.datetime(2020, 11, 11, 0, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 520957531, 'comment_body': ""```suggestion\r\n * 1. Adds 'Spoiler' header text if missing.\r\n```"", 'comment_created': datetime.datetime(2020, 11, 11, 0, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 520958348, 'comment_body': 'This should get a comment pointing at the corresponding code in the webapp -- which is in rendered_markdown.js, at the spot you find searching for ""spoiler-header"".\r\n\r\n(I was wondering why it\'s needed, and whether it corresponds to anything in the webapp. Turns out it does.)\r\n', 'comment_created': datetime.datetime(2020, 11, 11, 0, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 520958831, 'comment_body': ""Hmm, I think this calls for a tweak to the comment on `toggleSpoilers`. The `.spoiler-button` and its child the `.spoiler-arrow` don't actually come from the server -- they're added by our own code, here.\r\n\r\nIn particular that means that if for some reason we wanted that part to be different, we could change it right within the app.\r\n"", 'comment_created': datetime.datetime(2020, 11, 11, 0, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 522311038, 'comment_body': 'Hmm, maybe just HSL?\r\n\r\nhttps://github.com/zulip/zulip-mobile/pull/4169#discussion_r520947901:\r\n> Actually, better: when the alpha is 1, just omit it and say `hsl`.', 'comment_created': datetime.datetime(2020, 11, 12, 18, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 522326141, 'comment_body': ""Hmm, interesting! I didn't know about those viewport size changes on mobile."", 'comment_created': datetime.datetime(2020, 11, 12, 18, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 522336871, 'comment_body': ""Looks like this is the change we should follow here:\r\n\r\n```diff\r\n-   const spoiler_height = spoiler.prop('scrollHeight');\r\n+   const spoiler_height = spoiler.height();\r\n```\r\n\r\nI wonder what's the best non-jQuery thing to do here. There's [`Element#clientHeight`](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight), or maybe [`HTMLElement#offsetHeight`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight). But I'm skeptical of the first thing that occurred to me, `spoiler.style.height`; that's exactly the property we're about to write to, a few lines later."", 'comment_created': datetime.datetime(2020, 11, 12, 18, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 522357362, 'comment_body': 'Ah OK, I think I\'ve found out what ""jumpy animation glitch on spoiler collapse"" refers to. When you collapse a spoiler, it jumps to being slightly bigger than it was, before an animation to shrink it begins.\r\n\r\nIt appears that the amount of the jump is equal to the vertical padding in `.spoiler-content`. On mobile, at least, that\'s 5px on the top and 5px on the bottom. The following is sufficient to make the jump go away:\r\n\r\n```diff\r\n- const spoilerHeight = spoiler.scrollHeight;\r\n+ const spoilerHeight = spoiler.scrollHeight - 10;\r\n```\r\n\r\n`.scrollHeight` does include the padding ([doc](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight)), but my hunch is that jQuery\'s `.height()` does not. Sure enough; its [doc](https://api.jquery.com/height/) says:\r\n\r\n> Note that `.height()` will always return the content height\r\n\r\nSo we need something that will just grab the content height.', 'comment_created': datetime.datetime(2020, 11, 12, 19, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 522367330, 'comment_body': '> So we need something that will just grab the content height.\r\n\r\nAccording to http://youmightnotneedjquery.com/, \r\n\r\n```\r\n$(el).height();\r\n```\r\n\r\ncan be translated to\r\n\r\n```\r\nparseFloat(getComputedStyle(el, null).height.replace(""px"", """"))\r\n```\r\n\r\n🤷 ', 'comment_created': datetime.datetime(2020, 11, 12, 19, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 522389114, 'comment_body': 'Yep, agreed.', 'comment_created': datetime.datetime(2020, 11, 12, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 522391063, 'comment_body': 'Great. The next thing the code does with that value is actually to turn it back to a string and add back the suffix ""px"" -- so that simplifies down to `getComputedStyle(el, null)`.\r\n', 'comment_created': datetime.datetime(2020, 11, 12, 20, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 522392237, 'comment_body': 'And [according to MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle), that second argument is optional and `null` is equivalent to leaving it out -- so this can just be\r\n```js\r\nconst computedHeight = getComputedStyle(spoiler);\r\n// …\r\n  spoiler.style.height = computedHeight;\r\n```\r\n', 'comment_created': datetime.datetime(2020, 11, 12, 20, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 522408948, 'comment_body': 'Ah, right, thanks for pointing that out!', 'comment_created': datetime.datetime(2020, 11, 12, 20, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 522517816, 'comment_body': ""The commit message says\r\n\r\n    After browsing around for a simple way to get the computed content\r\n    height (which excludes padding), I landed on this awkward but\r\n    working expression, thanks to http://youmightnotneedjquery.com/.\r\n\r\nBut this doesn't seem particularly awkward at all! I'm guessing that reference was written with the original from youmightnotneedjquery.com in mind.\r\n\r\n(Where, as it turned out, most of the awkwardness was there to match some extra jQuery behavior that we don't need, which in fact the webapp code has to go and promptly undo.)\r\n"", 'comment_created': datetime.datetime(2020, 11, 13, 0, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 522526105, 'comment_body': ""This should go after the `a` handling, so that if there's a link inside the header the user can interact with the link as usual. That's something the webapp code explicitly takes care to do.\r\n\r\nProbably simplest to just put it by the end of the sequence of different cases in this click handler -- just before the `.message-brief` case. That minimizes having to think about whether one of these others (user mention? image?) could also describe something that can appear inside a spoiler header.\r\n\r\n(I remember looking into this in the previous round of review the other day, and I sure thought I'd made a comment on it! But I don't see it now, so it seems I didn't. Perhaps the comment never got entered somehow.)\r\n"", 'comment_created': datetime.datetime(2020, 11, 13, 0, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 522527906, 'comment_body': ""nit: no blank line; the `if` is the quick error-return case for that previous statement, so it's closely tied to it logically and it's helpful to do so visually"", 'comment_created': datetime.datetime(2020, 11, 13, 0, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 522531760, 'comment_body': ""This doesn't match after the refactor to have it take the .spoiler-header element.\r\n\r\nBut probably the right fix is to take this as an illustration of how it's easy for comments like this to get out of date :stuck_out_tongue_closed_eyes: and so are worth it only when there's something essential that can't readily be communicated in the code itself.\r\n\r\nIn the original revision, this conveyed some essential information about which spoiler-related element was expected... but given the new detailed comment about the expected structure, I think the parameter name alone is already unambiguous. So let's just drop this `@param` line.\r\n"", 'comment_created': datetime.datetime(2020, 11, 13, 0, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 522535035, 'comment_body': ""(nit, if that: similarly to above, I'd probably cut this blank line. But this one could go either way, because the code this `if` is logically attached to is several lines long.)\r\n"", 'comment_created': datetime.datetime(2020, 11, 13, 0, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 522538183, 'comment_body': ""It's slightly awkward that this has to be written in this inverted order, so I took a quick look at [MDN on addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener) to see if I could spot a clean alternative.\r\n\r\nSadly it doesn't return the callback (or a removal callback), which would have been one way to tighten this. OTOH there is a `once` option, which would cover exactly this use-case and make the code very simple indeed! But it's new in Chrome 55, which is still in the future for our webview code.\r\n\r\nI'd probably delete the blank line to keep this bit of logic more visually together, but I don't see any greater improvement."", 'comment_created': datetime.datetime(2020, 11, 13, 0, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 522546419, 'comment_body': ""One more nit which I'd spotted but forgot to mention: this line doesn't seem needed.\r\n\r\nIt's there in js.js because of the click handler's structure: db4631fa55124248adeaed4447c49501b450e84f.\r\nBut this file doesn't have any code that looks like that, and it seems to pass lint without this line.\r\n\r\n(I'm not sure this lint rule really does much good in general. But if we were to disable it generally, we still wouldn't need this line in this particular file.)\r\n"", 'comment_created': datetime.datetime(2020, 11, 13, 1, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': 'daf98750e5776e6c3c080051b00f46de8f8ff5cb', 'committer_username': 'chrisbobbe', 'committer_name': 'Chris Bobbe', 'committer_email': 'cbobbe@zulip.com', 'commit_date': datetime.datetime(2016, 9, 17, 0, 25, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eeabaf01a41b1e06b10fd8716b88037eb33a235', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b604602502b6fded5a267dd103fa665e23edd88', 'committer_username': 'chrisbobbe', 'committer_name': 'Chris Bobbe', 'committer_email': 'cbobbe@zulip.com', 'commit_date': datetime.datetime(2016, 9, 17, 0, 25, 39, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
433484374,compose box: Introduce new edit message UI.,"This new UI is displayed as a part of the compose box and allows
cancelling the edit in progress. The navbar no longer shows the
edit status as it's shown in the compose box itself.

![image](https://user-images.githubusercontent.com/7714968/84470364-d4040700-aca0-11ea-8191-1ee7be9186ae.png)

As discussed in chat, you mentioned it might be good to try rounded corners for the compose box in general, and I tried it - It didn't look good. I think it's because the regular compose box is the part of the base UI. However, the editing message state can be thought of as an action above the normal UI, and so the rounded corners look good.

Fixes: #2757",False,4153,https://api.github.com/repos/zulip/zulip-mobile/pulls/4153,https://github.com/zulip/zulip-mobile/pull/4153,open,45,14,5,1,3,0,0,0,[],2020-06-12 06:08:08+00:00,,0.0,,[],"[{'commit_sha': 'a72c880a079f7835abfaa917d7a80563728a19ca', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174
425111545,uploads: Show file upload progress.,"    When a user chooses a file for upload, show a local echo which
    indicates that the file is being uploaded. When the upload
    finishes, replace the echo with the actual uploaded file, and send
    that message to the server. If the upload fails, remove the local
    echo.

Todos:
- [x] Show upload progress.
- [ ] Translate the '[Uploading file...]' string.

![upload-status](https://user-images.githubusercontent.com/7714968/83267192-7c19ca80-a1e1-11ea-92d1-597c3a8bc8aa.gif)


    
Closes #2684.
",False,4129,https://api.github.com/repos/zulip/zulip-mobile/pulls/4129,https://github.com/zulip/zulip-mobile/pull/4129,closed,120,19,8,4,2,14,2,0,"[{'name': 'a-message list'}, {'name': 'P1 high-priority'}]",2020-05-29 13:43:29+00:00,2021-04-12 19:06:40+00:00,27494591.0,"318 days, 5:23:11","[{'comment_id': 432766227, 'comment_body': 'Hmm, I think this needs a more precise name. The whole architecture for the ""outbox"" is kind of an implementation of the ""local echo"" concept; we\'ve got a brief mention of ""local echo"" in a doc [here](https://github.com/zulip/zulip-mobile/blob/8bf48939771a4eacc8a170a4620ef2f01ff97d15/docs/glossary.md#local-echo).\r\n\r\nAt first, I thought, maybe, `isLocalEchoOnly`? But maybe that requires more effort than necessary to understand what it means.\r\n\r\nI wonder about something like `deferSending`?', 'comment_created': datetime.datetime(2020, 5, 29, 22, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 433040147, 'comment_body': '`deferSending` sounds good. Changed.', 'comment_created': datetime.datetime(2020, 6, 1, 4, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'agrawal-d', 'type': 'User'}, {'comment_id': 463292965, 'comment_body': 'This looks a little odd, on its own; I could easily read this as ""we *never* send the message to the server"", which doesn\'t make sense because outbox messages are things we want to send.\r\n\r\nMaybe add something like ""We\'ll normally let it sit with `true` until we learn about some changes we want to make, then make those and mark it as `false` and ready to send."" (You may find something more concise. 😛 )', 'comment_created': datetime.datetime(2020, 7, 30, 21, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 463293156, 'comment_body': 'I think the same applies to the commit message.', 'comment_created': datetime.datetime(2020, 7, 30, 21, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 463294481, 'comment_body': ""I think this is enough params to make it a good idea to use a params-object. Maybe especially because we're passing the literal values `true` and `false` for `deferSending`, and it can be hard to tell what's going on without a nice `deferSending` label."", 'comment_created': datetime.datetime(2020, 7, 30, 21, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 463298967, 'comment_body': 'Just `if (item.deferSending) {` should be fine here.', 'comment_created': datetime.datetime(2020, 7, 30, 22, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 463299646, 'comment_body': ""Looks like there's a test in `outboxReducer-test.js` that should be changed to test the new behavior. 🙂 "", 'comment_created': datetime.datetime(2020, 7, 30, 22, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 463302637, 'comment_body': ""Also, an extra-principled option would be to add an `outboxActions-test.js`, like we have `fetchActions-test.js`, on the action side of Redux.\r\n\r\nMainly, `fetchActions-test.js` tests the async `thunk` action creators to make sure they dispatch the appropriate plain object actions when they're supposed to. Note that `redux-mock-store` describes in its README that it doesn't do anything with the reducers; there's not currently a clear way to test the actions and the reducers together.\r\n\r\nCould just start with something small, so that there's at least something to add to, for the next person making changes to the outbox actions."", 'comment_created': datetime.datetime(2020, 7, 30, 22, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 463406993, 'comment_body': ""What's the difference in meaning between a missing value and `false`?\r\n\r\nIf there is no difference in meaning, then the property should just be always present. We'll want a migration to add it to existing outbox objects, as `false`.\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 5, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463409577, 'comment_body': ""This behavior is a bit peculiar, and it only really becomes possible to understand given the context of the next commit. (One way of thinking of that: it's presenting an API which that next commit is using, and the API is quite particular and starts really making sense only when the way the API is used becomes visible.) So for that reason it'd be best to just squash these commits together.\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 5, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463413900, 'comment_body': ""It makes me kind of nervous to be constructing this whole outbox object (and all its properties) a second time here. What if it gets some different answers the second time? Which should prevail? I'd rather not have to worry about that.\r\n\r\n(Also it means doing a variety of work twice, which is the sort of thing that can contribute to making things slow. In this case I think there's nothing expensive that gets done twice, but because it's spread over a decent bit of code that *looks* like it gets called once per message sent, that could change innocently in the future.)\r\n\r\nInstead let's have a new action type like UPDATE_OUTBOX_MESSAGE, which just contains a `timestamp` property (really `id` would be better, but the existing code uses `timestamp` as an ID and we can follow that for now), `deferSending`, and `content` and `markdownContent`.\r\n\r\nThen instead of this second call to `addToOutbox`, we can call a new thunk action creator, something like `dispatch(completeOutboxMessage(timestamp, messageToSend));`, and that one will dispatch one of the new action type to update Redux and then dispatch a `sendOutbox()`.\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 5, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 463414050, 'comment_body': ""This line can be skipped when `deferSending`, and that might make it a bit easier to think about what's intended to happen here.\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 5, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 537834608, 'comment_body': ""> Looks like there's a test in `outboxReducer-test.js` that should be changed to test the new behavior. 🙂\r\n\r\nThis is no longer true, with the implementation Greg suggests at https://github.com/zulip/zulip-mobile/pull/4129#discussion_r463413900."", 'comment_created': datetime.datetime(2020, 12, 7, 21, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 537835408, 'comment_body': ""> Also, an extra-principled option would be to add an `outboxActions-test.js`, like we have `fetchActions-test.js`, on the action side of Redux.\r\n\r\nI took a stab at doing this, but I think it would be best to do this along with #3881, so that we don't end up doing work that we'll just discard."", 'comment_created': datetime.datetime(2020, 12, 7, 21, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}]","[{'commit_sha': 'bc248c2edd660549a9d7f53b940e6c6afd873090', 'committer_username': 'chrisbobbe', 'committer_name': 'Chris Bobbe', 'committer_email': 'cbobbe@zulip.com', 'commit_date': datetime.datetime(2016, 9, 17, 0, 25, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93bf0676044cc2ec3b8bbc033d3a0d5e40cfdb92', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e8408c40cd7d5a2a7ec2df4ef1b0116b20c69f4', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65d9ae8c8f453e0b7f2e02add58f6357271e60bb', 'committer_username': 'chrisbobbe', 'committer_name': 'Chris Bobbe', 'committer_email': 'cbobbe@zulip.com', 'commit_date': datetime.datetime(2016, 9, 17, 0, 25, 39, tzinfo=datetime.timezone.utc)}]",Divyanshu Agrawal,7714968,,User,,101,,25,174

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
58298428,zulip-mobile,zulip/zulip-mobile,JavaScript,643,1274,36,96,10617,745,12,140,"[{'id': 458310970, 'number': 4213, 'closed': datetime.datetime(2020, 7, 29, 18, 17, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 9, 26, 28, tzinfo=datetime.timezone.utc), 'time_taken': 31867.0, 'time_delta': '8:51:07', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 457849193, 'number': 4208, 'closed': datetime.datetime(2020, 7, 31, 6, 11, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 14, 29, 56, tzinfo=datetime.timezone.utc), 'time_taken': 229272.0, 'time_delta': '2 days, 15:41:12', 'additions': 21, 'deletions': 7, 'state': 'closed'}, {'id': 453323216, 'number': 4196, 'closed': datetime.datetime(2021, 10, 18, 23, 3, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 10, 54, 25, tzinfo=datetime.timezone.utc), 'time_taken': 39355752.0, 'time_delta': '455 days, 12:09:12', 'additions': 14, 'deletions': 3, 'state': 'closed'}, {'id': 451021064, 'number': 4194, 'closed': None, 'created': datetime.datetime(2020, 7, 17, 10, 47, 16, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 288, 'deletions': 20, 'state': 'open'}, {'id': 448248825, 'number': 4190, 'closed': None, 'created': datetime.datetime(2020, 7, 13, 13, 16, 16, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 80, 'deletions': 15, 'state': 'open'}, {'id': 448109369, 'number': 4189, 'closed': datetime.datetime(2020, 7, 15, 17, 51, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 8, 55, 42, tzinfo=datetime.timezone.utc), 'time_taken': 204972.0, 'time_delta': '2 days, 8:56:12', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 443479451, 'number': 4181, 'closed': datetime.datetime(2020, 7, 11, 2, 16, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 12, 18, 11, tzinfo=datetime.timezone.utc), 'time_taken': 741528.0, 'time_delta': '8 days, 13:58:48', 'additions': 14, 'deletions': 7, 'state': 'closed'}, {'id': 442793267, 'number': 4179, 'closed': datetime.datetime(2020, 7, 24, 11, 47, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 15, 58, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1972178.0, 'time_delta': '22 days, 19:49:38', 'additions': 4, 'deletions': 5, 'state': 'closed'}, {'id': 442787208, 'number': 4178, 'closed': None, 'created': datetime.datetime(2020, 7, 1, 15, 48, 6, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 6, 'deletions': 1, 'state': 'open'}, {'id': 442534153, 'number': 4176, 'closed': None, 'created': datetime.datetime(2020, 7, 1, 8, 33, 43, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 5, 'deletions': 3, 'state': 'open'}, {'id': 442488100, 'number': 4175, 'closed': datetime.datetime(2020, 8, 4, 0, 33, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 7, 2, 1, tzinfo=datetime.timezone.utc), 'time_taken': 2914300.0, 'time_delta': '33 days, 17:31:40', 'additions': 152, 'deletions': 47, 'state': 'closed'}, {'id': 441281293, 'number': 4173, 'closed': None, 'created': datetime.datetime(2020, 6, 29, 8, 26, 7, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 407, 'deletions': 122, 'state': 'open'}, {'id': 437913010, 'number': 4169, 'closed': datetime.datetime(2021, 1, 6, 19, 0, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 12, 35, 45, tzinfo=datetime.timezone.utc), 'time_taken': 17130258.0, 'time_delta': '198 days, 6:24:18', 'additions': 304, 'deletions': 5, 'state': 'closed'}, {'id': 433484374, 'number': 4153, 'closed': None, 'created': datetime.datetime(2020, 6, 12, 6, 8, 8, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 45, 'deletions': 14, 'state': 'open'}, {'id': 432287196, 'number': 4148, 'closed': datetime.datetime(2020, 6, 12, 1, 0, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 8, 21, 25, tzinfo=datetime.timezone.utc), 'time_taken': 146354.0, 'time_delta': '1 day, 16:39:14', 'additions': 17, 'deletions': 0, 'state': 'closed'}, {'id': 431557801, 'number': 4143, 'closed': datetime.datetime(2020, 6, 12, 0, 40, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 6, 5, 6, tzinfo=datetime.timezone.utc), 'time_taken': 239700.0, 'time_delta': '2 days, 18:35:00', 'additions': 83, 'deletions': 123, 'state': 'closed'}, {'id': 428224847, 'number': 4140, 'closed': datetime.datetime(2020, 6, 9, 19, 33, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 5, 8, 54, tzinfo=datetime.timezone.utc), 'time_taken': 397447.0, 'time_delta': '4 days, 14:24:07', 'additions': 13, 'deletions': 7, 'state': 'closed'}, {'id': 425111545, 'number': 4129, 'closed': datetime.datetime(2021, 4, 12, 19, 6, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 29, 13, 43, 29, tzinfo=datetime.timezone.utc), 'time_taken': 27494591.0, 'time_delta': '318 days, 5:23:11', 'additions': 120, 'deletions': 19, 'state': 'closed'}, {'id': 422988642, 'number': 4125, 'closed': datetime.datetime(2020, 6, 5, 5, 20, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 26, 5, 10, 25, tzinfo=datetime.timezone.utc), 'time_taken': 864627.0, 'time_delta': '10 days, 0:10:27', 'additions': 47, 'deletions': 3, 'state': 'closed'}, {'id': 422618464, 'number': 4124, 'closed': datetime.datetime(2020, 7, 18, 6, 14, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 8, 31, 24, tzinfo=datetime.timezone.utc), 'time_taken': 4657399.0, 'time_delta': '53 days, 21:43:19', 'additions': 684, 'deletions': 10, 'state': 'closed'}, {'id': 417332245, 'number': 4110, 'closed': datetime.datetime(2020, 5, 14, 17, 56, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 12, 34, 45, tzinfo=datetime.timezone.utc), 'time_taken': 105708.0, 'time_delta': '1 day, 5:21:48', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 417311755, 'number': 4109, 'closed': datetime.datetime(2020, 5, 18, 22, 19, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 11, 54, 20, tzinfo=datetime.timezone.utc), 'time_taken': 469522.0, 'time_delta': '5 days, 10:25:22', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 417293399, 'number': 4108, 'closed': datetime.datetime(2020, 5, 19, 0, 24, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 11, 17, 14, tzinfo=datetime.timezone.utc), 'time_taken': 479257.0, 'time_delta': '5 days, 13:07:37', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 416604503, 'number': 4103, 'closed': datetime.datetime(2020, 5, 29, 17, 17, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 9, 33, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1496675.0, 'time_delta': '17 days, 7:44:35', 'additions': 12, 'deletions': 0, 'state': 'closed'}, {'id': 416564027, 'number': 4101, 'closed': datetime.datetime(2020, 8, 6, 9, 15, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 8, 18, 13, tzinfo=datetime.timezone.utc), 'time_taken': 7433852.0, 'time_delta': '86 days, 0:57:32', 'additions': 342, 'deletions': 6, 'state': 'closed'}, {'id': 414635329, 'number': 4094, 'closed': datetime.datetime(2020, 7, 2, 19, 32, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 7, 11, 49, 35, tzinfo=datetime.timezone.utc), 'time_taken': 4866196.0, 'time_delta': '56 days, 7:43:16', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 414254951, 'number': 4089, 'closed': datetime.datetime(2020, 6, 5, 0, 55, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 6, 18, 16, 22, tzinfo=datetime.timezone.utc), 'time_taken': 2529527.0, 'time_delta': '29 days, 6:38:47', 'additions': 108, 'deletions': 24, 'state': 'closed'}, {'id': 405541149, 'number': 4054, 'closed': datetime.datetime(2020, 4, 21, 21, 53, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 18, 18, 34, 57, tzinfo=datetime.timezone.utc), 'time_taken': 271134.0, 'time_delta': '3 days, 3:18:54', 'additions': 172, 'deletions': 83, 'state': 'closed'}, {'id': 400357588, 'number': 4022, 'closed': datetime.datetime(2020, 4, 14, 20, 4, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 7, 15, 58, 10, tzinfo=datetime.timezone.utc), 'time_taken': 619583.0, 'time_delta': '7 days, 4:06:23', 'additions': 62, 'deletions': 22, 'state': 'closed'}, {'id': 387627072, 'number': 3972, 'closed': datetime.datetime(2020, 6, 1, 8, 1, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 13, 7, 13, 57, tzinfo=datetime.timezone.utc), 'time_taken': 6914855.0, 'time_delta': '80 days, 0:47:35', 'additions': 41, 'deletions': 1, 'state': 'closed'}, {'id': 387257192, 'number': 3968, 'closed': datetime.datetime(2020, 3, 26, 0, 28, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 12, 13, 54, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1161275.0, 'time_delta': '13 days, 10:34:35', 'additions': 154, 'deletions': 87, 'state': 'closed'}, {'id': 378347908, 'number': 3925, 'closed': datetime.datetime(2020, 3, 26, 14, 20, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 21, 15, 48, 51, tzinfo=datetime.timezone.utc), 'time_taken': 2932299.0, 'time_delta': '33 days, 22:31:39', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 375829358, 'number': 3909, 'closed': datetime.datetime(2020, 2, 16, 15, 19, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 16, 14, 1, 1, tzinfo=datetime.timezone.utc), 'time_taken': 4695.0, 'time_delta': '1:18:15', 'additions': 2, 'deletions': 7, 'state': 'closed'}, {'id': 373801586, 'number': 3893, 'closed': None, 'created': datetime.datetime(2020, 2, 11, 18, 0, 31, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 93, 'deletions': 2, 'state': 'open'}, {'id': 373654306, 'number': 3890, 'closed': datetime.datetime(2020, 5, 8, 0, 2, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 11, 13, 19, 51, tzinfo=datetime.timezone.utc), 'time_taken': 7468949.0, 'time_delta': '86 days, 10:42:29', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 372103873, 'number': 3878, 'closed': datetime.datetime(2020, 3, 27, 3, 5, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 6, 20, 45, 29, tzinfo=datetime.timezone.utc), 'time_taken': 4256427.0, 'time_delta': '49 days, 6:20:27', 'additions': 58, 'deletions': 9, 'state': 'closed'}, {'id': 371987110, 'number': 3875, 'closed': datetime.datetime(2020, 2, 22, 2, 14, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 6, 16, 16, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1331904.0, 'time_delta': '15 days, 9:58:24', 'additions': 40, 'deletions': 7, 'state': 'closed'}, {'id': 371885874, 'number': 3872, 'closed': datetime.datetime(2020, 2, 11, 16, 18, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 6, 12, 58, 55, tzinfo=datetime.timezone.utc), 'time_taken': 443978.0, 'time_delta': '5 days, 3:19:38', 'additions': 41, 'deletions': 4, 'state': 'closed'}, {'id': 371396411, 'number': 3868, 'closed': datetime.datetime(2020, 5, 8, 20, 33, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 5, 14, 15, 30, tzinfo=datetime.timezone.utc), 'time_taken': 8057891.0, 'time_delta': '93 days, 6:18:11', 'additions': 18, 'deletions': 6, 'state': 'closed'}, {'id': 370012265, 'number': 3862, 'closed': datetime.datetime(2020, 3, 26, 14, 19, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 2, 13, 46, 55, tzinfo=datetime.timezone.utc), 'time_taken': 4581167.0, 'time_delta': '53 days, 0:32:47', 'additions': 16, 'deletions': 3, 'state': 'closed'}, {'id': 369917337, 'number': 3859, 'closed': datetime.datetime(2020, 2, 4, 0, 21, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 1, 16, 59, 47, tzinfo=datetime.timezone.utc), 'time_taken': 199317.0, 'time_delta': '2 days, 7:21:57', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 365158059, 'number': 3828, 'closed': datetime.datetime(2020, 2, 3, 19, 31, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 21, 8, 40, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1162226.0, 'time_delta': '13 days, 10:50:26', 'additions': 10, 'deletions': 4, 'state': 'closed'}, {'id': 364966513, 'number': 3826, 'closed': datetime.datetime(2020, 2, 11, 13, 37, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 20, 19, 0, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1881373.0, 'time_delta': '21 days, 18:36:13', 'additions': 10, 'deletions': 6, 'state': 'closed'}, {'id': 364948066, 'number': 3825, 'closed': datetime.datetime(2020, 1, 30, 21, 28, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 20, 17, 55, 35, tzinfo=datetime.timezone.utc), 'time_taken': 876799.0, 'time_delta': '10 days, 3:33:19', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 364438045, 'number': 3824, 'closed': datetime.datetime(2020, 2, 29, 2, 50, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 18, 15, 47, 16, tzinfo=datetime.timezone.utc), 'time_taken': 3582217.0, 'time_delta': '41 days, 11:03:37', 'additions': 199, 'deletions': 52, 'state': 'closed'}, {'id': 364423104, 'number': 3823, 'closed': datetime.datetime(2020, 1, 30, 23, 11, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 18, 12, 46, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1074330.0, 'time_delta': '12 days, 10:25:30', 'additions': 17, 'deletions': 2, 'state': 'closed'}, {'id': 363466101, 'number': 3811, 'closed': datetime.datetime(2020, 2, 4, 19, 49, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 16, 5, 42, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1692474.0, 'time_delta': '19 days, 14:07:54', 'additions': 33, 'deletions': 5, 'state': 'closed'}, {'id': 363219309, 'number': 3807, 'closed': datetime.datetime(2020, 1, 30, 1, 10, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 15, 16, 14, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1241766.0, 'time_delta': '14 days, 8:56:06', 'additions': 56, 'deletions': 3, 'state': 'closed'}, {'id': 362867337, 'number': 3801, 'closed': datetime.datetime(2020, 1, 27, 23, 14, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 14, 22, 23, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1126252.0, 'time_delta': '13 days, 0:50:52', 'additions': 18, 'deletions': 0, 'state': 'closed'}, {'id': 362245674, 'number': 3797, 'closed': datetime.datetime(2020, 1, 16, 0, 59, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 13, 17, 54, 32, tzinfo=datetime.timezone.utc), 'time_taken': 198321.0, 'time_delta': '2 days, 7:05:21', 'additions': 8, 'deletions': 2, 'state': 'closed'}, {'id': 362096892, 'number': 3795, 'closed': datetime.datetime(2020, 2, 1, 0, 42, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 13, 12, 40, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1598522.0, 'time_delta': '18 days, 12:02:02', 'additions': 64, 'deletions': 25, 'state': 'closed'}, {'id': 355881940, 'number': 3736, 'closed': datetime.datetime(2020, 1, 10, 2, 55, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 20, 20, 0, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1752905.0, 'time_delta': '20 days, 6:55:05', 'additions': 75, 'deletions': 16, 'state': 'closed'}]"
