pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
443346553,Add module Heap,"Add module Heap

Heap, a.k.a. priority_queue, is a very common data structure in most languages. It provides operations to quickly insert elements and query the top element.

The heap uses a comparator to determine it's a min-heap or a max-heap. The default argument `defaultComparator` will create a max-heap. Passing a `reverseComparator` will create a min-heap.

Related: https://github.com/chapel-lang/chapel/issues/15667

@krishnadey30 @e-kayrakli @cassella ",True,15997,https://api.github.com/repos/chapel-lang/chapel/pulls/15997,https://github.com/chapel-lang/chapel/pull/15997,closed,846,0,47,35,9,87,1,0,[{'name': 'stat: cla signed'}],2020-07-02 08:03:15+00:00,2020-08-10 22:24:02+00:00,3421247.0,"39 days, 14:20:47","[{'comment_id': 449831431, 'comment_body': 'How did this test produce output in its .good file?', 'comment_created': datetime.datetime(2020, 7, 5, 4, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 449831783, 'comment_body': ""Is this needed with the same definition in the `HeapTest` module?  The following `testNilableOwned.chpl` doesn't have this defined."", 'comment_created': datetime.datetime(2020, 7, 5, 4, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 449832213, 'comment_body': 'This IE part could be modified to be Heap-specific.', 'comment_created': datetime.datetime(2020, 7, 5, 4, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 449835396, 'comment_body': ""This reminds me of the code in #15409.  Though even without that, it doesn't seem like this would support a comparator that requires arguments to its initializer.  I don't know what to do about it if you can't specify an instance of the comparator type in the type of the heap on the lhs of `var h: heap(int, myComparator(x=7)) = l;`"", 'comment_created': datetime.datetime(2020, 7, 5, 5, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 449835429, 'comment_body': ""I didn't spot a test of this `init=` -- did I just miss it?"", 'comment_created': datetime.datetime(2020, 7, 5, 5, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 449837077, 'comment_body': ""it seems kind of hopeless to read a heap as ASCII from a file.  I thnk this should just be `proc writeThis()`.  (I think `List` should also have only a `writeThis()`.  It *might* work if the list elements don't contain any strings with spaces, and if the list already contains exactly as many elements as the input, but the comment there suggests only the writing case was contemplated.  OTOH, do you get into trouble having a type that can't be read, as in #15891/#14467  @dlongnecke-cray ? )"", 'comment_created': datetime.datetime(2020, 7, 5, 5, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 449841590, 'comment_body': 'Of these four symbols, I see only `defaultComparator` in the module.  Do you need to include the others?', 'comment_created': datetime.datetime(2020, 7, 5, 6, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 450699835, 'comment_body': ""Yes. This style initialization limits the usage. I can't come up with a better solution. `createHeap` can be used for this purpose."", 'comment_created': datetime.datetime(2020, 7, 7, 8, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 450702279, 'comment_body': 'I wrote it assuming that everything it takes is produced by `writeln(someHeap)`. I think it can be useful for restoring state when debugging. Can you describe the edge case more? Is it serious enough to remove the functionality of reading?', 'comment_created': datetime.datetime(2020, 7, 7, 8, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 450705177, 'comment_body': ""Yes. Only one is used. Just for convenience and I don't have strong opinions. But it's worth mention that it's the same with  Search module: They are all imported but only one is used."", 'comment_created': datetime.datetime(2020, 7, 7, 8, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 450710200, 'comment_body': ""You're right. I have deleted that."", 'comment_created': datetime.datetime(2020, 7, 7, 8, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 450714072, 'comment_body': 'Oh. I proposed removing procedures related to assigning a list/array to a heap. But I forgot to do that : ( https://github.com/Rapiz1/gsoc2020-chapel-data-structures/issues/9', 'comment_created': datetime.datetime(2020, 7, 7, 8, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 450714184, 'comment_body': 'Same as before', 'comment_created': datetime.datetime(2020, 7, 7, 8, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 450715553, 'comment_body': 'To keep the code clean, I will remove them. If someone advocates this, I can add them later.', 'comment_created': datetime.datetime(2020, 7, 7, 9, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 450716936, 'comment_body': ""Also, it's one reason to remove this procedure https://github.com/Rapiz1/gsoc2020-chapel-data-structures/issues/9"", 'comment_created': datetime.datetime(2020, 7, 7, 9, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452709461, 'comment_body': ""I'm still hoping @dlongnecke-cray will weigh in, as I think `Heap` and `List` should do the same thing, but I'm having a hard time seeing that what `List` is doing makes sense."", 'comment_created': datetime.datetime(2020, 7, 10, 8, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 452917469, 'comment_body': 'My fault...', 'comment_created': datetime.datetime(2020, 7, 10, 15, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452920123, 'comment_body': 'FWIW, that line was added in https://github.com/chapel-lang/chapel/pull/14475\r\n\r\nThat being relatively new addition to the Search module, I am comfortable with following its lead.', 'comment_created': datetime.datetime(2020, 7, 10, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 452920681, 'comment_body': 'list->heap ?', 'comment_created': datetime.datetime(2020, 7, 10, 15, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 452922149, 'comment_body': ""IIRC, we have this function in other data structures to check against types that we don't support, like generic types sometimes types with shared memory management etc. Are you saying that there is no such case for heap? Still reading the code, but I at least expect it to not support generic types."", 'comment_created': datetime.datetime(2020, 7, 10, 15, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 452923013, 'comment_body': ""As you are using `list` as the underlying structure, it would make sense to copy/paste what `list` has for `_checkType`. Otherwise, the users will get errors from the list module about incompatible types, and that'll be confusing."", 'comment_created': datetime.datetime(2020, 7, 10, 15, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 452928125, 'comment_body': 'Just because what this means depends on the comparator, I am a bit reluctant to use the term ""maximal"" here. Why not just ""top""?\r\n\r\nRegardless, I don\'t mean that you should remove the note below. But if you use ""top"" maybe it no longer needs to be a note, but it can be part of the description it self. i.e. ""Return the top element in the heap. The top element is determined by the ``comparator``...""', 'comment_created': datetime.datetime(2020, 7, 10, 15, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 452928279, 'comment_body': 'a -> an', 'comment_created': datetime.datetime(2020, 7, 10, 15, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 452929210, 'comment_body': 'You don\'t have to change, but we generally mix single and double quotes in these scenarios. In Chapel you can have double-quoted strings, in which single quotes are just regular characters and vice versa. So if it were me, I would do `""Called \'heap.top\' on ... ""`', 'comment_created': datetime.datetime(2020, 7, 10, 15, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 452930763, 'comment_body': ""There has been some debate as to whether we should support integers as truth values as you do here. I don't think there'll be a change there soon, however, I personally prefer to type more code and make this an explicitly boolean expression. `while (pos > 0)`. But it is a personal thing and we support this, so it's up to you.\r\n\r\n(It can also have symmetry with the heapify_down implementation where you have to have an explicit comparison)"", 'comment_created': datetime.datetime(2020, 7, 10, 15, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 452932522, 'comment_body': ""Just out of curiosity: can these overloads of `push` be optimized down the road so that we don't heapify repeatedly?"", 'comment_created': datetime.datetime(2020, 7, 10, 15, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 452934119, 'comment_body': 'I think we can be a bit more descriptive here. How about ""Elements are not yielded in order""?', 'comment_created': datetime.datetime(2020, 7, 10, 16, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 452935536, 'comment_body': 'is there any reason not to `var l = _data.toArray();`?', 'comment_created': datetime.datetime(2020, 7, 10, 16, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 452935991, 'comment_body': 'I may be misremembering this, but I think the discussion about `consume` was about an iterator and not a proc?', 'comment_created': datetime.datetime(2020, 7, 10, 16, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 453075071, 'comment_body': '(The second "" a "".)\r\n', 'comment_created': datetime.datetime(2020, 7, 10, 21, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 454323965, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/1654168387a108d8a2fd3482ad1e756d108b7862', 'comment_created': datetime.datetime(2020, 7, 14, 12, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 454324934, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/3c45ca2c405de2894572399436f9de1f41a9c543', 'comment_created': datetime.datetime(2020, 7, 14, 12, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 454329073, 'comment_body': ""Actually, I think *maximal* can describe the default behavior. Passing a default comparator and users can get a maximal element. If users want minimal, then just reverse the comparator. When saying `top`, I can't tell the heap will return a maximal one or a minimal one."", 'comment_created': datetime.datetime(2020, 7, 14, 12, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 454338760, 'comment_body': ""I think it can't be. Let M be the size of the array and N be the size of the heap. The operation is O(MlgN). Another way to do this is to reconstruct the whole heap, which takes O(N+M). Well, O(N+M) actually grows slower than O(MlgN) but I don't think that's good..."", 'comment_created': datetime.datetime(2020, 7, 14, 13, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 454339439, 'comment_body': ""I think that's better."", 'comment_created': datetime.datetime(2020, 7, 14, 13, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 454339839, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/f7085236498827fa7b8014f9763786692c9aec9a', 'comment_created': datetime.datetime(2020, 7, 14, 13, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 454341506, 'comment_body': ""Well, maybe it's me who misunderstood the discussion."", 'comment_created': datetime.datetime(2020, 7, 14, 13, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 454341679, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/c83624c8861669039ba3aa5a20e1d78c60ed1a12', 'comment_created': datetime.datetime(2020, 7, 14, 13, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 454348406, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/8afcbafce64058ac93c4150bbf8ba5511724b0d7', 'comment_created': datetime.datetime(2020, 7, 14, 13, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 454697893, 'comment_body': 'Of course, while doing that you should change ""list"" to ""heap"" :)', 'comment_created': datetime.datetime(2020, 7, 14, 23, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 454698848, 'comment_body': '>  When saying top, I can\'t tell the heap will return a maximal one or a minimal one.\r\n\r\nRight, and I want the document to be ambiguous there. For example, if I create a heap with reverse comparator, calling `top` will give me the minimum element in the heap. But the documentation says ""maximal"" and it may be confusing', 'comment_created': datetime.datetime(2020, 7, 14, 23, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 454700258, 'comment_body': 'I think there can be something we leverage still, but by no means it should happen now. But can you add a comment saying that we can do some optimizations there if needed?\r\n\r\nAt the very least, we can have a low-level implementation to avoid locking and unlocking for every element and lock and unlock only once. In any case, if we have an overloads such as these, we should always think about potential performance benefits.', 'comment_created': datetime.datetime(2020, 7, 14, 23, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 454701418, 'comment_body': 'Here, I suggested as an alternative to an iterator. https://github.com/chapel-lang/chapel/issues/15667#issuecomment-636998701. Though admittedly, it is only clear with the context.', 'comment_created': datetime.datetime(2020, 7, 14, 23, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 456738681, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/9caf522232a2270058d50462835c72d7f3f69cb0', 'comment_created': datetime.datetime(2020, 7, 18, 2, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 456741730, 'comment_body': ""Generally speaking, when M is very large and N is relatively small. It's faster to construct a new heap. In the other case, it's faster to insert element one by one. But I don't know how to give a precise bound to determine when to use which. After all, the time complexity is a kind of estimation."", 'comment_created': datetime.datetime(2020, 7, 18, 3, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 456741997, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/c6081bf72f7bec747d2519eb6642ad9e08a793a3', 'comment_created': datetime.datetime(2020, 7, 18, 3, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 456744315, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/4455d14c258724908932a1b4813401337ce88e75 Lock/unlock once when pushing', 'comment_created': datetime.datetime(2020, 7, 18, 3, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 456753391, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/acfb880ea0bcd8b2418361d1f7b38c2a450fb08d What do you think of this?', 'comment_created': datetime.datetime(2020, 7, 18, 5, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 457583016, 'comment_body': 'Looks good', 'comment_created': datetime.datetime(2020, 7, 20, 17, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 457636451, 'comment_body': 'did we make the wrong change here?', 'comment_created': datetime.datetime(2020, 7, 20, 19, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 457641446, 'comment_body': '(This is the List code, but this change should have happened in the Heap module)', 'comment_created': datetime.datetime(2020, 7, 20, 19, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 457681388, 'comment_body': ""Hi, sorry that I haven't responded sooner. I've been following most of the discussion in this PR, though!\r\n\r\nI think it would be fine to change this `readWriteThis` function to `writeThis`. Additionally we could go ahead and open an issue about reading containers of string elements (or of elements containing strings), specifically about how we should demarcate such elements (when they can contain a comma themselves).\r\n\r\nYou could tag `list` in that issue or open a separate issue about changing `list.readWriteThis` to `list.writeThis`. "", 'comment_created': datetime.datetime(2020, 7, 20, 20, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dlongnecke-cray', 'type': 'User'}, {'comment_id': 462044636, 'comment_body': 'That sentence got a little muddled, as did the corresponding one in the push(array) function.', 'comment_created': datetime.datetime(2020, 7, 29, 5, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462045448, 'comment_body': '*yielded', 'comment_created': datetime.datetime(2020, 7, 29, 5, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462046116, 'comment_body': ""It may be implicit in the name of the method 'consume', but I think the documentation should note that the elements yielded are removed from the heap."", 'comment_created': datetime.datetime(2020, 7, 29, 5, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462046778, 'comment_body': 'There should be a blank line here.', 'comment_created': datetime.datetime(2020, 7, 29, 5, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462046966, 'comment_body': 'This comment should also note the elements of the array are not in sorted order.', 'comment_created': datetime.datetime(2020, 7, 29, 5, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462047374, 'comment_body': ""This should also note that the output isn't sorted.  And refer to this as a heap."", 'comment_created': datetime.datetime(2020, 7, 29, 5, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462048223, 'comment_body': ""The description of the argument should state explicitly that the comparator passed in will provide the heap's definition of order.  The examples are good, but should refer to the comparator objects `defaultComparator` and `reverseComparator`, not the names of their types."", 'comment_created': datetime.datetime(2020, 7, 29, 5, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462048502, 'comment_body': ""It's an actual comparator here, not a type.  I'd use the same comment you end up with for the argument to `init()`.\r\n\r\nSame in the array-based `createHeap` below."", 'comment_created': datetime.datetime(2020, 7, 29, 5, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462048629, 'comment_body': '*an array', 'comment_created': datetime.datetime(2020, 7, 29, 5, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462049758, 'comment_body': ""Is this actually testing assignment?  I think line 3 is just initialization, and line 7 is copy-initialization.  I think to test assignment like the filename suggests you'd need to assign to a heap that's already initialized."", 'comment_created': datetime.datetime(2020, 7, 29, 5, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462050213, 'comment_body': ""It'd be nice to add a newline to the last line.  github indicates its absence by that red circle-dash icon."", 'comment_created': datetime.datetime(2020, 7, 29, 5, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462052840, 'comment_body': 'Heh, it doesn\'t indicate it here in the PR overview page excerpt for my comment, just in the actual ""Files changed"" view.', 'comment_created': datetime.datetime(2020, 7, 29, 5, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462053437, 'comment_body': 'Oh, and this list is in alphabetical order, so please add Heap where it belongs, not just at the end.', 'comment_created': datetime.datetime(2020, 7, 29, 5, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462104667, 'comment_body': ""Oh. It's a left over from the time when `comparator` is a type"", 'comment_created': datetime.datetime(2020, 7, 29, 7, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 462114562, 'comment_body': ""There is  description on `var comparator: record`. I just realized that maybe it's better to move these examples there and  keep something like `:arg comparator: the comparator used to compare elements` here"", 'comment_created': datetime.datetime(2020, 7, 29, 8, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 462741173, 'comment_body': 'Not to nitpick, but Heap comes before Help.', 'comment_created': datetime.datetime(2020, 7, 30, 5, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 463000511, 'comment_body': 'What about `The list to push`? or `The list in which elements are to push.`?', 'comment_created': datetime.datetime(2020, 7, 30, 13, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 463030394, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/da9b1697a92c96653feed9deedb5cdcac9f9a4c6 Not sure about this.', 'comment_created': datetime.datetime(2020, 7, 30, 14, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 463030675, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/b1cc51c5baaa5b4feed46431d5ae75c4368f95bd', 'comment_created': datetime.datetime(2020, 7, 30, 14, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 463031320, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/b1cc51c5baaa5b4feed46431d5ae75c4368f95bd I committed some change here', 'comment_created': datetime.datetime(2020, 7, 30, 14, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 463031830, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/b1cc51c5baaa5b4feed46431d5ae75c4368f95bd A note added here', 'comment_created': datetime.datetime(2020, 7, 30, 14, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 463032063, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/b1cc51c5baaa5b4feed46431d5ae75c4368f95bd The note updated here', 'comment_created': datetime.datetime(2020, 7, 30, 14, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 467156433, 'comment_body': 'Can we drop ""zero"" here?\r\n\r\n""Returns true if the heap is empty (has size == 0), false otherwise"" maybe?', 'comment_created': datetime.datetime(2020, 8, 7, 16, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467157764, 'comment_body': 'One idea about this note is to remove it from this proc\'s doc, as it is already stated in the heap\'s header description. However, that description there is rather weak compared to this one.\r\n\r\nI am wondering whether we can add a header in the heap\'s description that is ""max-heap vs min-heap"" or something, and under that explain the default behavior (max-heap, right?), how to change it, and maybe add small code snippets that creates both versions of heaps with `int` types and calls `top`?', 'comment_created': datetime.datetime(2020, 8, 7, 16, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467160507, 'comment_body': 'Can we make the argument `const ref` here?', 'comment_created': datetime.datetime(2020, 8, 7, 17, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467160624, 'comment_body': 'ditto. `const ref` argument', 'comment_created': datetime.datetime(2020, 8, 7, 17, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467161457, 'comment_body': 'Can you merge this note into the single-sentence description?\r\n\r\n""Iterate over the elements of this heap in any arbitrary order"" ?', 'comment_created': datetime.datetime(2020, 8, 7, 17, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467161806, 'comment_body': 'Same here: merge into the description of the iterator\r\n\r\n""...of this heap in order, while removing the yielded elements"" ?', 'comment_created': datetime.datetime(2020, 8, 7, 17, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467162140, 'comment_body': 'Same here.\r\n\r\n""... contained in this heap in arbitrary order"" ?', 'comment_created': datetime.datetime(2020, 8, 7, 17, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467163536, 'comment_body': 'Can we make the argument `x` a `const ref`?', 'comment_created': datetime.datetime(2020, 8, 7, 17, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467163568, 'comment_body': 'Can we make the argument `x` a `const ref`?', 'comment_created': datetime.datetime(2020, 8, 7, 17, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467370345, 'comment_body': 'I would say `The list of elements to push`.', 'comment_created': datetime.datetime(2020, 8, 8, 6, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 467840696, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/e3aba540cfd067634389eb70d08f2a7d8038a581', 'comment_created': datetime.datetime(2020, 8, 10, 11, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 467841275, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/67127ddebdd016ed5deec334610dde815f32cb45', 'comment_created': datetime.datetime(2020, 8, 10, 11, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 467841358, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/15997/commits/67127ddebdd016ed5deec334610dde815f32cb45 What do you think about this?', 'comment_created': datetime.datetime(2020, 8, 10, 11, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}]","[{'commit_sha': '99d0a9f2af934a19c6dbaabaf4cfd8753eaf7aee', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a20083d603086fba5f4c7c59e082de919d4e6897', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '905ae73e9633b3db027cb8f92a17af6b383eb54b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dee5c48a3c9758aed0886099e5ffb88e20b847e3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '246571cd35458d7898846cc8541e06309ab7b0f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a8bf727cfc62c59777327b1056921b2076da27e9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '194b55754c878841aaacb6e55ddd3e657428143b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bb16dcc81f5fb0fbe3a7548cc7c238f18fe81fd0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1e3d1d7a1b1bb459eb4617a52c94bc45eaf65011', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8337d7ca884c66f56b32e364f91f7abcafc4b367', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '00d80050c648003f33b3b30804535798a2686c68', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3604d3e40f0e3def66a6d60cd23cd9aeba643449', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1654168387a108d8a2fd3482ad1e756d108b7862', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3c45ca2c405de2894572399436f9de1f41a9c543', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8afcbafce64058ac93c4150bbf8ba5511724b0d7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f7085236498827fa7b8014f9763786692c9aec9a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c83624c8861669039ba3aa5a20e1d78c60ed1a12', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '83bd9df7ac168f43a27c99b5dc74838de5acc1eb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1afaf4ee2cca6fe463f73ae9acf0b6c09ee21c97', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '178c0a0420e70f8acc36ebcb0c7ae1cabee62c85', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '65a4c68d86ec3f9dd9e5620dded04320d0e4a7c2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '37817e2e79b6ece0d0b91a5875caf3220f3a60c7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a8513446c3d85e138a465ae01f6ac15703a2619f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'feb5d1087e57fc6559e32b465f4e1b3d97c9ee67', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cca945db5e94b5627d8ec5d4713cbccf1d203604', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0281ccfe74b680dd09cf49d24ee0b7190ac567ec', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '963e43829de295a8f1208311bf09edd769e6db95', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dca4c99f009b64524b0c29f5b7fbc90540a6d3ac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e47d4ca49d4cc3dda00e17d66cb813213df1900e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b1cc51c5baaa5b4feed46431d5ae75c4368f95bd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'da9b1697a92c96653feed9deedb5cdcac9f9a4c6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '67127ddebdd016ed5deec334610dde815f32cb45', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e3aba540cfd067634389eb70d08f2a7d8038a581', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '16abeb9289d19e85235f9051fdc8ad0227992111', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1926571802dc74424ac9f460231c4cef04b9d117', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yujia Qiao,20105061,code@rapiz.me,User,,87,,236,931
446624556,Add module Vector,"Add module Vector under test/library/draft

Vector is a kind of list storing elements in a contiguous area, which provides better cache performance and takes less time to locate one element than List. It has an identical interface with List. It's expected that it could be merged with List and enable users to choose variants in the future.

Note that this doesn't work with types that can't be default initialized.

FYI: @krishnadey30 @e-kayrakli @cassella ",True,16048,https://api.github.com/repos/chapel-lang/chapel/pulls/16048,https://github.com/chapel-lang/chapel/pull/16048,closed,2314,0,140,42,6,58,1,0,[{'name': 'stat: cla signed'}],2020-07-09 05:20:27+00:00,2020-07-23 17:41:14+00:00,1254047.0,"14 days, 12:20:47","[{'comment_id': 452029739, 'comment_body': 'I suppose we can create a helper method. ', 'comment_created': datetime.datetime(2020, 7, 9, 7, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 452031215, 'comment_body': 'I suppose this is a typo error.', 'comment_created': datetime.datetime(2020, 7, 9, 7, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 452031782, 'comment_body': 'Can you add a little more description of capacity, so that users can differentiate between size and capacity?', 'comment_created': datetime.datetime(2020, 7, 9, 7, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 452033350, 'comment_body': 'I would suggest adding the argument details as well. ', 'comment_created': datetime.datetime(2020, 7, 9, 7, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 452035661, 'comment_body': ""Shouldn't we free the allocated memory as well?"", 'comment_created': datetime.datetime(2020, 7, 9, 8, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 452037528, 'comment_body': 'I am not very sure of using extra space for sorting. Is there any other way to do this?', 'comment_created': datetime.datetime(2020, 7, 9, 8, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 452039065, 'comment_body': 'Or delete the reference to these.\r\n', 'comment_created': datetime.datetime(2020, 7, 9, 8, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 452039601, 'comment_body': 'We try to keep one line gap between each method. ', 'comment_created': datetime.datetime(2020, 7, 9, 8, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 452048341, 'comment_body': 'I would say ""element types"" or ""an eltType"" instead of ""class"" here, and maybe include `t:string` in the message.', 'comment_created': datetime.datetime(2020, 7, 9, 8, 23, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 452052572, 'comment_body': 'The elements in all these `init` and `init=` are better described as copied than copy initialized, even in cases where the `vector` object is itself copy initialized.', 'comment_created': datetime.datetime(2020, 7, 9, 8, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 452053635, 'comment_body': ""I'm again surprised you can refer to `this.type.eltType` in this initializer before setting it."", 'comment_created': datetime.datetime(2020, 7, 9, 8, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 452053987, 'comment_body': ""Technically it can't be a method because you can't call a method before `this.complete()`.  :)"", 'comment_created': datetime.datetime(2020, 7, 9, 8, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 452056561, 'comment_body': 'It\'s only ""a list"" here, not ""another list"", because this isn\'t itself a list.  (And in the `init(list(...))` above.)\r\n\r\nThough, should there be a `proc List.init=(other: vector(...))` and `proc List.init(other: vector(...))`?', 'comment_created': datetime.datetime(2020, 7, 9, 8, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 452067567, 'comment_body': ""Can't you pass the underlying `this._data` array to `Sort.sort`?"", 'comment_created': datetime.datetime(2020, 7, 9, 8, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 452070422, 'comment_body': 'Hmm, should these iterators have `on this {`?', 'comment_created': datetime.datetime(2020, 7, 9, 9, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 452073463, 'comment_body': 'Does this comment apply to vector?', 'comment_created': datetime.datetime(2020, 7, 9, 9, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 452074051, 'comment_body': 'Another newline between functions here, please.', 'comment_created': datetime.datetime(2020, 7, 9, 9, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 452159199, 'comment_body': 'There is a method `_checkType`. Can we have a method similar to that.\r\n', 'comment_created': datetime.datetime(2020, 7, 9, 11, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 452210272, 'comment_body': 'What do you think of this description? *The capacity of this vector, which represents how much space is allocated.*', 'comment_created': datetime.datetime(2020, 7, 9, 13, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452219448, 'comment_body': '> Though, should there be a proc List.init=(other: vector(...)) and proc List.init(other: vector(...))?\r\n\r\nI think it could be done when the new List interface is introduced. In the new List record, we can reduce repeated code.', 'comment_created': datetime.datetime(2020, 7, 9, 13, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452224217, 'comment_body': ""After some time since I wrote(well, actually copied from List.chpl) these lines, I'm surprised, too. "", 'comment_created': datetime.datetime(2020, 7, 9, 13, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452240737, 'comment_body': 'Looks good to me.\r\n', 'comment_created': datetime.datetime(2020, 7, 9, 14, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 452250161, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16048/commits/3315421c5416589be2d9351f69c31274a338c91b', 'comment_created': datetime.datetime(2020, 7, 9, 14, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452250546, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16048/commits/bb2d2c4ec031c67b558b7d1fdfffa3db4c459d3c', 'comment_created': datetime.datetime(2020, 7, 9, 14, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452251075, 'comment_body': ""You're right. I didn't give the code from List.chpl a second thought... https://github.com/chapel-lang/chapel/pull/16048/commits/48f88592512a2586f23e8a9deae434a9de782c70 https://github.com/chapel-lang/chapel/pull/16048/commits/8f8618b1dbc6559428f010504f97c352807e0a7a https://github.com/chapel-lang/chapel/pull/16048/commits/b7fd0f7492cc18362339cc004b38348adbbb92ce"", 'comment_created': datetime.datetime(2020, 7, 9, 14, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452252150, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16048/commits/f17be557993b5d9096beea3a63579fdadb7cda24', 'comment_created': datetime.datetime(2020, 7, 9, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452267662, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16048/commits/55d4eb4a703e0ae3243ac51bb1a6344ecfae3ce7', 'comment_created': datetime.datetime(2020, 7, 9, 14, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452267868, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16048/commits/204af763c34377ba7799ce3dfa9e6c0282d31d88', 'comment_created': datetime.datetime(2020, 7, 9, 14, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452269156, 'comment_body': ""Will this impact the performance? I'm not sure about the influence though I didn't see one in List."", 'comment_created': datetime.datetime(2020, 7, 9, 14, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452273164, 'comment_body': ""I like the idea but the error messages have slight differences, which means the helper procedure has to take one `msg` argument. So only the line `if !isCopyableType...` is hidden by the procedure and that's not very clean for a helper procedure."", 'comment_created': datetime.datetime(2020, 7, 9, 14, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452665414, 'comment_body': '`_checkType` is a standalone proc, not a method on `vector`, so it can be called before `this.complete()`.', 'comment_created': datetime.datetime(2020, 7, 10, 7, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 452688563, 'comment_body': 'Were you going to elaborate on ""capacity""?', 'comment_created': datetime.datetime(2020, 7, 10, 8, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 452699976, 'comment_body': ""I wonder if it would be better to do `Sort.sort(_data[0..#_size], comparator)`, rather than resizing the domain twice.  The slice isn't free, but neither is resizing the domain."", 'comment_created': datetime.datetime(2020, 7, 10, 8, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 452703007, 'comment_body': 'What was wrong with this check?', 'comment_created': datetime.datetime(2020, 7, 10, 8, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 452705711, 'comment_body': 'My fault', 'comment_created': datetime.datetime(2020, 7, 10, 8, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452819498, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16048/commits/a7c94bbbe715ff5271aebb8fad64b0bcabe83121', 'comment_created': datetime.datetime(2020, 7, 10, 12, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452819686, 'comment_body': 'Too many lines and changes made me confused...', 'comment_created': datetime.datetime(2020, 7, 10, 12, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452820202, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16048/commits/a7c94bbbe715ff5271aebb8fad64b0bcabe83121', 'comment_created': datetime.datetime(2020, 7, 10, 12, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452820291, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16048/commits/5ab0d2c284226e75d3eb772bf38590ea1865e2a6', 'comment_created': datetime.datetime(2020, 7, 10, 12, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452824658, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16048/commits/f17be557993b5d9096beea3a63579fdadb7cda24', 'comment_created': datetime.datetime(2020, 7, 10, 12, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452825187, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16048/commits/70eb58d56c42f99a7cce68bac906706605a9c41d', 'comment_created': datetime.datetime(2020, 7, 10, 12, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452831563, 'comment_body': ""Slice sounds better to me, though I don't know about the performance difference between two methods."", 'comment_created': datetime.datetime(2020, 7, 10, 13, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 452941135, 'comment_body': ""It'd be nice to add comments for these variables. Especially size vs capacity"", 'comment_created': datetime.datetime(2020, 7, 10, 16, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 452941448, 'comment_body': 'list->vector', 'comment_created': datetime.datetime(2020, 7, 10, 16, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 452942865, 'comment_body': 'add whitespace above', 'comment_created': datetime.datetime(2020, 7, 10, 16, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 454315130, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16048/commits/6f9b6097c788666b4da98d7d9b428738eaf31946', 'comment_created': datetime.datetime(2020, 7, 14, 12, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 454316259, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16048/commits/6d2dfefa3fb1978f9716bed43c2b6b7f7d4fcc77', 'comment_created': datetime.datetime(2020, 7, 14, 12, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 454317261, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16048/commits/61f46cc650cbf0285f58211c0e44e50f9c50dac4', 'comment_created': datetime.datetime(2020, 7, 14, 12, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 454317328, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16048/commits/61f46cc650cbf0285f58211c0e44e50f9c50dac4', 'comment_created': datetime.datetime(2020, 7, 14, 12, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 454319019, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16048/commits/5ecd8c9dc53875146bd5be8b2a4eb5867b32f7c2', 'comment_created': datetime.datetime(2020, 7, 14, 12, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 456744552, 'comment_body': 'Do you have any doubts about the description I added? Or I will mark the conversation as resolved.', 'comment_created': datetime.datetime(2020, 7, 18, 3, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 457581968, 'comment_body': 'Nope, looks good.', 'comment_created': datetime.datetime(2020, 7, 20, 17, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 457608387, 'comment_body': ""I have been thinking about this and I think we shouldn't have them:\r\n\r\n- DefaultRectangularArr's serial iterators don't have them either.\r\n- It feels a bit wrong to me that a `for` loop would yield items from a different locale than where it was being executed on.\r\n\r\nP.S. Yes, it would improve the performance if this iterator was invoked on a locale other than the one that owns this Vector.\r\n\r\nWhat do you think?"", 'comment_created': datetime.datetime(2020, 7, 20, 18, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 457615845, 'comment_body': 'Apparently type instantiation occurs before resolving param functions. Note that we are not doing `this.eltType` but `this.type.eltType`.', 'comment_created': datetime.datetime(2020, 7, 20, 18, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 457616211, 'comment_body': 'I think this is resolved?', 'comment_created': datetime.datetime(2020, 7, 20, 18, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 457616476, 'comment_body': '@cassella -- resolved?', 'comment_created': datetime.datetime(2020, 7, 20, 18, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 457621195, 'comment_body': 'semicolon at the end', 'comment_created': datetime.datetime(2020, 7, 20, 18, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 457629972, 'comment_body': '`/usr/bin/env python`\r\n\r\nWhat you have ties us to the system\'s default python, but we want to be able to use the one with setup for the testing.\r\n\r\nYou can run `find test -name ""PREDIFF"" | xargs -L1 grep python` in Chapel root to see for yourself.', 'comment_created': datetime.datetime(2020, 7, 20, 19, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}]","[{'commit_sha': '571039060d3a2f5d342988914b110dc4c45c650f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9ca3916c9d37f44b4c4898ce1cebc820aff430b2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2698f09e8bda5b73035c62517d51584c82aa4950', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5631a1b2b3fd1172c6e8fe56ca154f7ff7444777', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bc1dc6dea0dbd030364e77f69d95b8927e3eeb11', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ac09a4d806a02c344ede1c1262455df73858b435', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9eecf1eedb53fabf1a979c3f8ca89aa69fc5e9f3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '60f95f18af618180cf6ec453eeaebc00d6ddeeb8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b75fbd6f04d620b30729a3edf4afa0ec6a8d63c8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '23b5c09f220c7597c92e52c4b65ed45a79bd6958', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6efababf90fd248eb82869564ba1c2c14e81a2e6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd3d43ea4a3140e02e2b2a970b7c80a8abf52975f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'afd79464401825ff42bb69fc9cc746c827f5afcd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '28f4f04fea12f9ed082a743391f95ea6f913a342', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4140cb821441fa84922e88f90bc3747a83f694b3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1978e155c30b21644532787dae1c7cfa7fca0965', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bd4b98c350deb10e98d0bb916e0551fd76dda8f4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b5096e05b977f160ea8cf4b61560b7434edd2280', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ba348d787bd822052929cc5230f88043b3fd65fb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a4a74171145d543009af5abd7802f07e0b2f3596', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c756492c753e20b17918a9aa2e3558eb131debee', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2e4e6898d836db27fe49b24a39793f17fd2e8b93', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8de691c43dfb9412ecf64ca0146c1155f2b0ecd8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '52d643101142d0f51f70fa9e2b83afc22e753731', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bb2d2c4ec031c67b558b7d1fdfffa3db4c459d3c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3315421c5416589be2d9351f69c31274a338c91b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '48f88592512a2586f23e8a9deae434a9de782c70', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f17be557993b5d9096beea3a63579fdadb7cda24', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '70eb58d56c42f99a7cce68bac906706605a9c41d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b82cfb28b7c597bc8ae0c9439135b6b2cc89437a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd25d48a308e511dff57116bcbee94fbdbf42f6f4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8f8618b1dbc6559428f010504f97c352807e0a7a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b7fd0f7492cc18362339cc004b38348adbbb92ce', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '55d4eb4a703e0ae3243ac51bb1a6344ecfae3ce7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '204af763c34377ba7799ce3dfa9e6c0282d31d88', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5ab0d2c284226e75d3eb772bf38590ea1865e2a6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a7c94bbbe715ff5271aebb8fad64b0bcabe83121', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '16bec78552a7df1677645946a2763eb262c8d804', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '779106a420e5548e89ca430808c3b2dcf17ee7bc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a73ba0451430fc74dad8b9f3003a2b249ece74ce', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ed1ed5d8ccc8448d5405ed16567f245cba3d5393', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '87bee9e22657dba950c0fd9a9975bf4dab810662', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yujia Qiao,20105061,code@rapiz.me,User,,87,,236,931
456053276,Add module OrderedSet,"An orderedSet is a collection of unique ordered elements. Thus it supports more operations related to the order of elements than a set. e.g. `lowerBound` 

The underlying implementation uses treap which is a randomized binary tree that supports insertion, deletion, querying in expected O(lgN).

This PR contains
- OrderedSet
- Treap as a submodule of OrderedSet
- Tests for orderedSet

Related: https://github.com/chapel-lang/chapel/issues/15921",True,16124,https://api.github.com/repos/chapel-lang/chapel/pulls/16124,https://github.com/chapel-lang/chapel/pull/16124,closed,2836,0,111,59,5,131,1,0,[{'name': 'stat: cla signed'}],2020-07-24 03:20:15+00:00,2020-08-20 23:04:07+00:00,2403832.0,"27 days, 19:43:52","[{'comment_id': 462053591, 'comment_body': 'This list is also in alphabetical order.', 'comment_created': datetime.datetime(2020, 7, 29, 5, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462057923, 'comment_body': ""@e-kayrakli I've been meaning to ask -- should tests be added with an explicit `--memLeaks`?  It's my understanding that there's a nightly run of all tests with memleak checking, and so tests don't normally need to specify it themselves.  (Maybe unless it's a future showing that there is presently a memory leak.)\r\n"", 'comment_created': datetime.datetime(2020, 7, 29, 6, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462060681, 'comment_body': ""I don't see how this works.  `writeln(0 == 0 == 0 == 0)` and `writeln(0 == 0 == 1 == 1)` both print `true`, but `0 == 0 == 0 == 1` prints `false`.  I can only guess `a == b == c == d` gets the precedence `(a == b) == (c == d)`, which isn't what you want here."", 'comment_created': datetime.datetime(2020, 7, 29, 6, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462065097, 'comment_body': 'Do you also want to check the heap and binary search tree properties here?', 'comment_created': datetime.datetime(2020, 7, 29, 6, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462066113, 'comment_body': 'Hmm.  I\'d expect to run some tests with this true, but leave it false by default.\r\n\r\nOTOH, it seems to have an effect only in the ""write a Treap to a channel"" functionality.', 'comment_created': datetime.datetime(2020, 7, 29, 6, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462067531, 'comment_body': ""I think `rank` and `size` should have comments, even though they won't be documented."", 'comment_created': datetime.datetime(2020, 7, 29, 6, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462067808, 'comment_body': 'More newlines!', 'comment_created': datetime.datetime(2020, 7, 29, 6, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462079942, 'comment_body': ""Won't `this.contains()` take the same lock we've just taken in `_enter()`?"", 'comment_created': datetime.datetime(2020, 7, 29, 6, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462081936, 'comment_body': 'As currently implemented, the array will be in order, right? Are you anticipating that that might change?', 'comment_created': datetime.datetime(2020, 7, 29, 7, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462084638, 'comment_body': 'It seems that package modules are not sorted as standard modules.', 'comment_created': datetime.datetime(2020, 7, 29, 7, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 462088552, 'comment_body': ""Well, they're mostly alphabetical -- one alphabetical run from `A` to `Z`, and then another from `C` to `U`.  I'd guess they should be alphabetical, but someone added a few at the end at some point.  (and a few more got added alphabetically wrt those last few.)  I'd definitely add the new one in order in the main sequence..."", 'comment_created': datetime.datetime(2020, 7, 29, 7, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462089812, 'comment_body': ""Yes, it will be in order. My fault. It's definitely better to document that it's in order because it's an *ordered*Set."", 'comment_created': datetime.datetime(2020, 7, 29, 7, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 462090693, 'comment_body': ""The `this.contains(x)` doesn't involve `other`, but is the same `this` as the currently executing `this.isDisjoint()`, so its `_enter()` will be taking the same lock as was just taken here."", 'comment_created': datetime.datetime(2020, 7, 29, 7, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 462100550, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16124/commits/fd17bf137485f46afaaa8da50d4c13cca4a4bc3e', 'comment_created': datetime.datetime(2020, 7, 29, 7, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 462100706, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16124/commits/4183b7ca74ecebef63c805c3c111b4720f2e638c', 'comment_created': datetime.datetime(2020, 7, 29, 7, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 462102017, 'comment_body': ""https://github.com/chapel-lang/chapel/pull/16124/commits/10320f38ab9d493f46567e40843dd4bd65cda715 I'm not sure about these comments. Any suggestions?"", 'comment_created': datetime.datetime(2020, 7, 29, 7, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 462102410, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16124/commits/ae851f7e11c9671b782c0e2df52a5ec8b00f9d7a', 'comment_created': datetime.datetime(2020, 7, 29, 7, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 462102529, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16124/commits/02b3484d76c824643684fd6185f92a550b50f8fe', 'comment_created': datetime.datetime(2020, 7, 29, 7, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 462759604, 'comment_body': ""In these functions that return something if `val == setImpl.treap`, and don't return anything otherwise, I'd prefer there be a `compilerError()` in the returning-nothing case.  Or at least specify the formal argument as `param val: setImpl`."", 'comment_created': datetime.datetime(2020, 7, 30, 6, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 463040591, 'comment_body': ""This test is adapted from the original test for set and similar asserts exist in many tests. But I have to admit that you make a good point. My guess is that when all sizes are 0, the statement is true. But there are many true cases even though sizes are not all 0. I think it shouldn't be used here."", 'comment_created': datetime.datetime(2020, 7, 30, 14, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 463042430, 'comment_body': 'I only used this in the early development and I think most of the testing should be done by relevant tests.', 'comment_created': datetime.datetime(2020, 7, 30, 14, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 463057273, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16124/commits/4aa87b92c888358a4a20731a8ce2674668d34317 specified here', 'comment_created': datetime.datetime(2020, 7, 30, 14, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 463085624, 'comment_body': 'Fixed in https://github.com/chapel-lang/chapel/pull/16124/commits/79d7f3d97e7f740526cf087bbeee85bc4fea07e1', 'comment_created': datetime.datetime(2020, 7, 30, 15, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 463652908, 'comment_body': 'Any specific reason for both warning and error?', 'comment_created': datetime.datetime(2020, 7, 31, 14, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 463656279, 'comment_body': 'I would suggest `parSafe = false` for maintaining consistency.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 463657145, 'comment_body': 'We can simply mention that it is inorder traversal.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 463660636, 'comment_body': 'If there is already a child in that position then what happens to it? What if the pos > 1?', 'comment_created': datetime.datetime(2020, 7, 31, 14, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 463676014, 'comment_body': '`else` can be in the next line for consistency.', 'comment_created': datetime.datetime(2020, 7, 31, 15, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 463678739, 'comment_body': ""You are just deleting the root. Don't you think all the child nodes should be deleted?"", 'comment_created': datetime.datetime(2020, 7, 31, 15, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 463680721, 'comment_body': ""Shouldn't the upper and lower bound return the ref."", 'comment_created': datetime.datetime(2020, 7, 31, 15, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 463681400, 'comment_body': ""Shouldn't it return ref?"", 'comment_created': datetime.datetime(2020, 7, 31, 15, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 463681515, 'comment_body': 'Ref?', 'comment_created': datetime.datetime(2020, 7, 31, 15, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 463681821, 'comment_body': 'A line of comment will be helpful.', 'comment_created': datetime.datetime(2020, 7, 31, 15, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 463691509, 'comment_body': ""It's just a simple helper and those cases should be handled by the programmer. It's not user-facing in any way."", 'comment_created': datetime.datetime(2020, 7, 31, 15, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 463692157, 'comment_body': ""I think this should be handled by _root's deinit"", 'comment_created': datetime.datetime(2020, 7, 31, 15, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 463693613, 'comment_body': ""Strange. I remember I've updated it. Maybe I mistook something about git"", 'comment_created': datetime.datetime(2020, 7, 31, 15, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 463699045, 'comment_body': 'https://github.com/chapel-lang/chapel/issues/15921#issuecomment-663472904 Note that the way that it returns has changed here.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 463704207, 'comment_body': ""I suppose it's a convention in Chapel that each method has a lock-free version whose name starts with an underline."", 'comment_created': datetime.datetime(2020, 7, 31, 16, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 463707992, 'comment_body': ""Not really. We don't have such in-detail conventions as of today.\r\n\r\nSee: https://github.com/chapel-lang/chapel/issues/6698\r\n\r\np.s. not really reviewing the PR but +1 on Krishna's comment above"", 'comment_created': datetime.datetime(2020, 7, 31, 16, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467100786, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16124/commits/943f5a822b4569cb68a22c6589e200a1a788d79e', 'comment_created': datetime.datetime(2020, 8, 7, 15, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 467104215, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16124/commits/26f4adca1da7cbc8b63f3e8a56f958b34288226e', 'comment_created': datetime.datetime(2020, 8, 7, 15, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 467204618, 'comment_body': 'Should we add something about what ""order"" means?', 'comment_created': datetime.datetime(2020, 8, 7, 18, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467204777, 'comment_body': 'I am not sure if this paragraph is that important. But if we are keeping it we can merge it into the previous one.', 'comment_created': datetime.datetime(2020, 8, 7, 18, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467204852, 'comment_body': ""Let's drop this for now. "", 'comment_created': datetime.datetime(2020, 8, 7, 18, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467205585, 'comment_body': 'it may be prudent to add an `else` here that gives a compilerWarning for unsupported enum value', 'comment_created': datetime.datetime(2020, 8, 7, 18, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467206489, 'comment_body': 'I am so on the fence about the last sentence, I think it is obvious from the variable name, but maybe it is OK to keep it in.', 'comment_created': datetime.datetime(2020, 8, 7, 18, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467206837, 'comment_body': 'I am not too crazy about specifying argument types if they are obvious. Feels like extra code to maintain', 'comment_created': datetime.datetime(2020, 8, 7, 18, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467207211, 'comment_body': ""Did you need to implement this due to a bug? I'd expect it to be forwarded to the instance, but there maybe a caveat/bug about writeThis that prevented that"", 'comment_created': datetime.datetime(2020, 8, 7, 18, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467207666, 'comment_body': 'I am wondering whether we can do something better than this here that is O(1) rather than O(n)', 'comment_created': datetime.datetime(2020, 8, 7, 18, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467207800, 'comment_body': ""shouldn't the second argument be `orderedSet(t)`?"", 'comment_created': datetime.datetime(2020, 8, 7, 18, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467208897, 'comment_body': ""While I agree that or'ing parallel-safety is the right approach, it can be a design discussion that can come after merging this. Arguably, similar question can be asked for other data structures/types where such operations return a new instance."", 'comment_created': datetime.datetime(2020, 8, 7, 18, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467209750, 'comment_body': 'Not too important, but arguably the other way around can be faster, too depending on the implementation. So maybe some of these operations can be implemented in the underlying implementation in the future? Would that make sense?', 'comment_created': datetime.datetime(2020, 8, 7, 18, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467210289, 'comment_body': 'drop `result`, `return true` here', 'comment_created': datetime.datetime(2020, 8, 7, 18, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467210681, 'comment_body': 'and similar change in the following couple of functions', 'comment_created': datetime.datetime(2020, 8, 7, 18, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467210796, 'comment_body': 'supports', 'comment_created': datetime.datetime(2020, 8, 7, 18, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467211150, 'comment_body': ""Although `import` is private by default, I'd still add it here as you do for `use`s"", 'comment_created': datetime.datetime(2020, 8, 7, 18, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467211374, 'comment_body': '+1', 'comment_created': datetime.datetime(2020, 8, 7, 18, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467212186, 'comment_body': ""The comments there are not clear to me. So `rank` is a number we pick randomly to make sure the size doesn't explode? (I don't have much knowledge about treap)"", 'comment_created': datetime.datetime(2020, 8, 7, 18, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467212788, 'comment_body': 'Just out of curiosity: we need unmanaged nilable to... easily move stuff around without having to worry about ownership transfer issues?', 'comment_created': datetime.datetime(2020, 8, 7, 18, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467213780, 'comment_body': ""It wouldn't be too awkward to have an internal helper here that checks some/all of these properties even if it is not called by any of the methods. It can help debug when there's an issue.\r\n\r\nOr, we can imagine having `config param debugTreap = false` and having some methods call `sanityChecks` if `debugTreap == true`"", 'comment_created': datetime.datetime(2020, 8, 7, 18, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467215161, 'comment_body': ""Expanding on this a bit more, `rank` generally means number of dimensions in Chapel arrays/domains. I am mostly worried that this term will get conflated with that. I'd also suggest renaming the term. (Wikipedia doesn't use `rank` for example, so it is not a widely accepted term maybe?)"", 'comment_created': datetime.datetime(2020, 8, 7, 18, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467216139, 'comment_body': 'Maybe @krishnadey30 meant to change the name of the function rather than to document it? That\'s what I would like: no need for doc, rename this to `_inorderVisit`. Arguably, you don\'t need preceeding `_`s either as this is already an ""internal"" module, but that\'s not that important', 'comment_created': datetime.datetime(2020, 8, 7, 18, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467216476, 'comment_body': 'Can this be stated in the comment?', 'comment_created': datetime.datetime(2020, 8, 7, 18, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467216740, 'comment_body': 'And similarly for other functions that has similar assumptions', 'comment_created': datetime.datetime(2020, 8, 7, 18, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467217528, 'comment_body': 'American spelling ""neighbor"" might be a better choice, but no biggie', 'comment_created': datetime.datetime(2020, 8, 7, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467217716, 'comment_body': '""is not less than""?', 'comment_created': datetime.datetime(2020, 8, 7, 19, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467217771, 'comment_body': 'plural', 'comment_created': datetime.datetime(2020, 8, 7, 19, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467219493, 'comment_body': 'Few questions here:\r\n- Why starts from 1? Arguably this is internal and not part of the interface, but we are trying to be more 0-based.\r\n- Why `kth` and not just `this`?', 'comment_created': datetime.datetime(2020, 8, 7, 19, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467219654, 'comment_body': 'You dropped this argument', 'comment_created': datetime.datetime(2020, 8, 7, 19, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467220396, 'comment_body': 'Maybe the answer to the second question is ""because it returns a tuple"". If that\'s the case you can do either:\r\n\r\n- Rename it to `get` ?\r\n- Make it return the kth element and not a tuple, and make the users of this check whether k is in bounds/exists via another helper and rename kth to `this`', 'comment_created': datetime.datetime(2020, 8, 7, 19, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467220655, 'comment_body': 'Should we say something about the yield order?', 'comment_created': datetime.datetime(2020, 8, 7, 19, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467220909, 'comment_body': ""Also you are using `orderedSet` but don't you mean `treap`? This happens other times in the doc as well."", 'comment_created': datetime.datetime(2020, 8, 7, 19, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467221167, 'comment_body': '""if this treap is empty (size == 0)"" ?', 'comment_created': datetime.datetime(2020, 8, 7, 19, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467221648, 'comment_body': 'we can drop DefaultRectangular. It is not a user-facing term, and we use it to say ""local"" in many cases, ""regular"" in some other cases. If you want to specify you can say ""regular local array"" but even that is not needed IMHO.', 'comment_created': datetime.datetime(2020, 8, 7, 19, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467222574, 'comment_body': ""It is only partially true today: We do multilocale and release/examples testing with memleaks by default. But full testing is still as it has been since forever, and we don't throw in memleaks by default. So this would make this whole folder getting tested with memory leaks and I don't see anything wrong with it. If anything it'll make the testing for this folder stronger.\r\n\r\nIn the future, we hope that it'll change and we'll use `memLeaks` by default at least in some configurations of our nightly testing, and then, this file will be redundant."", 'comment_created': datetime.datetime(2020, 8, 7, 19, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 467375568, 'comment_body': 'and ""an implementation""', 'comment_created': datetime.datetime(2020, 8, 8, 7, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 467398042, 'comment_body': ""There's only one `private import` in all of `modules/`.\r\n(And `use` defaults to private everywhere, except `modules/internal` for now, right?)"", 'comment_created': datetime.datetime(2020, 8, 8, 8, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 467405282, 'comment_body': ""As long as you have to add `n` elements to the `lhs`, it's not going to be better than `O(n)`.\r\n\r\n\r\nHowever, each `add` is going to be `O(log n)`?  Then this is `O(n log n)`, and could be improved to `O(n)`.  :)"", 'comment_created': datetime.datetime(2020, 8, 8, 8, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 467409806, 'comment_body': ""I think this should be no-doc'ed."", 'comment_created': datetime.datetime(2020, 8, 8, 9, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 467538807, 'comment_body': ""I'm not sure that `Treap` is the right level to enforce uniqueness.  That's a property of the `Set` part of `OrderedSet`.  I think Treap could be useful for other data structures or users that don't require the elements be comparator-unique."", 'comment_created': datetime.datetime(2020, 8, 9, 5, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 467539803, 'comment_body': 'This is the same description that `lower_bound()` has.\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 9, 5, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 467539833, 'comment_body': '*elements', 'comment_created': datetime.datetime(2020, 8, 9, 5, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 467540403, 'comment_body': ""Something still doesn't sit right for me with the `lower_bound`/`upper_bound`.  You'd mentioned elsewhere this is based on C++'s versions, http://www.cplusplus.com/reference/algorithm/lower_bound/ .  Those functions return iterators that can be used to iterate all the elements between the lower and upper bounds.\r\n\r\nI'm imagining using the C++ interface you can do something like\r\n\r\n```\r\nlowiter = something.lower_bound(10);\r\nhiiter = something.upper_bound(100);\r\nwhile (lowiter != hiiter) {\r\n  ...\r\n  lowiter++;\r\n}\r\n```\r\n\r\nwould let you iterate over all the elements that are >= 10 and < 100.  And something like that is the reason you'd use the lowerBound / upperBound interface.\r\n\r\nBut the interface here doesn't allow for any kind of iteration.  You'd just get the first (or only) element >= 10, and the first (or only) element > 100, but no way to use those to iterate over the intervening elements.\r\n\r\n\r\nI could imagine having the two bounds functions instead of returning the elements, return the indices of the elements.  Then the caller can iterate over the range between them, using `kth()` to get the elements.  Or `Treap` could provide an iterator that takes the range or low/high index as arguments, and makes use of the neighbor routines to iterate without having to start the indexing from scratch for each element."", 'comment_created': datetime.datetime(2020, 8, 9, 5, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 467540909, 'comment_body': 'Here and in successor, it should be ""such an element"".\r\n\r\nI can see where these functions aren\'t well-defined when repeated elements are allowed, since the element whose predecessor/successor they are to find is given by value.  (And if they take and return indices instead of element values, they\'d be trivial.)', 'comment_created': datetime.datetime(2020, 8, 9, 5, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 467541164, 'comment_body': '*acquiring', 'comment_created': datetime.datetime(2020, 8, 9, 6, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 467541331, 'comment_body': 'This is another place that should probably be a tuple rather than an array.', 'comment_created': datetime.datetime(2020, 8, 9, 6, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 467547213, 'comment_body': 'Treap is a submodule of OrderedSet and designed to be like this. If there would be an OrderedMultiSet in the future and we want to reuse some part of OrderedSet, it will involve non-trivial hierarchy changes like moving Treap out of OrderedSet. I think the refactoring should be done at that time.', 'comment_created': datetime.datetime(2020, 8, 9, 7, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 467547543, 'comment_body': ""The iteration can be done with `successor`. Actually I propose `successor/predecessor` for iterating because Chapel don't have iterator operations like C++."", 'comment_created': datetime.datetime(2020, 8, 9, 7, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 467547760, 'comment_body': 'Note iterating from lowerBound to upperBound is not really meaningful for OrderedSet. There are unique elements so only one element will be iterated in your example. lowerBound/upperBound is more like a search operation.', 'comment_created': datetime.datetime(2020, 8, 9, 7, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 467547958, 'comment_body': 'I remember I added it because it was not forwarded. I will do another test.', 'comment_created': datetime.datetime(2020, 8, 9, 7, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 467548213, 'comment_body': 'Do we have to add that limitation?', 'comment_created': datetime.datetime(2020, 8, 9, 7, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 467548657, 'comment_body': ""These various operations can be improved when Chapel has iterators like C++. Or we have to move procedures down to the underlying implementation to optimize. In the second case, the operation can only be applied on OrderedSets with the same implementation because each implementation doesn't know about others. I don't like that so just use the naive method and wait for more powerful iterator support in Chapel."", 'comment_created': datetime.datetime(2020, 8, 9, 7, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 467548794, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2020, 8, 9, 7, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 467549646, 'comment_body': ""> The comments there are not clear to me. So `rank` is a number we pick randomly to make sure the size doesn't explode? (I don't have much knowledge about treap)\r\n\r\nIt's used to take advantage of randomness and avoid bad cases like a tree regressing to a linked list (all nodes have at most one child).\r\n\r\n> I'd also suggest renaming the term. (Wikipedia doesn't use rank for example, so it is not a widely accepted term maybe?)\r\n\r\nI read Wikipedia and it uses `priority`, which sounds good to me. Does this term worry you?"", 'comment_created': datetime.datetime(2020, 8, 9, 7, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 467550929, 'comment_body': ""k starts from 1 because here kth indicates the order, not the index. It's natural to say the first element and 0th element sounds awkward. Maybe it's just me. \r\nWhy not `this`: I don't know a language in which users can use`[]` to get kth element from a set."", 'comment_created': datetime.datetime(2020, 8, 9, 7, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 467634100, 'comment_body': ""It's still called in `lmrVisit`.\r\n\r\nIt seems reasonable to me to have it in a few places, as long as the param control makes it a no-op when the param is false."", 'comment_created': datetime.datetime(2020, 8, 9, 22, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 467634488, 'comment_body': ""I think it's more that it'll make that child take the place of `node`, or `become the new root of the subtree formerly rooted at node`, which is a bit of a mouthful.\r\n\r\nAlso, these sentences should have a `.` at the end.\r\n"", 'comment_created': datetime.datetime(2020, 8, 9, 22, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 467649409, 'comment_body': 'Note in the example, the intended iteration is from `lower_bound(10)` to `upper_bound(100)`.  Even with unique elements there are potentially 90 elements to iterate over (with `defaultComparator`.)', 'comment_created': datetime.datetime(2020, 8, 10, 0, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 467654057, 'comment_body': ""It's often a convention that `_foo()` will be a helper function for `foo()` in some way.  Having `foo()` acquire a lock and then call `_foo()` is common.  It can help with control flow in languages where you can't write `enter(); defer leave()`.  Or if the `foo()` operation is something you want to be able to call from other places that already hold the lock.\r\n\r\nIt can also be for things like if you wanted to have a public-facing `neighbor()` that takes the element value, and passes a module-private node reference to `_neighbor()`.  Or if the public `foo(n)` needs to pass an extra argument to a recursive `_foo(n, 0)`.\r\n\r\nIt eases the mental burden if you keep such a convention throughout a module or a project, that the underscore version always means the same thing, so you can certainly use it that way here."", 'comment_created': datetime.datetime(2020, 8, 10, 1, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 468045071, 'comment_body': ':) Right, I wasn\'t thinking too much beyond ""can we avoid doing n separate additions"". And to be clear, it is OK to not do that at first and leave it as a future work. Especially so if it is not clear how to achieve that implementation-wise.', 'comment_created': datetime.datetime(2020, 8, 10, 16, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 468046175, 'comment_body': ""How would this even work? Can you assign an `orderedSet(int)` to an `orderedSet(string)`? You shouldn't be able to, even if you can implement that."", 'comment_created': datetime.datetime(2020, 8, 10, 16, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 468047129, 'comment_body': ""I agree with this in general. But I am not sure what exactly is missing in Chapel's iterators today. Can you elaborate more on that? Maybe with a code example that you wish it worked in Chapel today but it doesn't?"", 'comment_created': datetime.datetime(2020, 8, 10, 16, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 468048181, 'comment_body': ""That's true. I just thought it would be clearer if we added it here. I am also OK with dropping other `private`s from `use`s. But I personally think we should be clear in import/uses in our modules."", 'comment_created': datetime.datetime(2020, 8, 10, 17, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 468049994, 'comment_body': ""`priority` still doesn't tell much about what it does, but I'd be fine as long as you add some verbose comments about what it does, and what it is used for. I am not picky about the name as this is not user-facing.\r\n\r\nWithout looking much into how it is used, I was thinking maybe `seed` could be a good name. What do you think about that? Either way, no need to argue much more about this, pick one and be more verbose in the comment. Your explanation in this thread does a much better job than the comment. "", 'comment_created': datetime.datetime(2020, 8, 10, 17, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 468055073, 'comment_body': ""Re 1-based 0-based: We had similar discussions in the recent past. This especially came up when talking about dimensions of a multidimensional array/domain. Today, we have 0th dimension, 1st dimension etc etc. And that is more awkward than your case here. So, as awkward as it may sound, I think we should remain consistent.\r\n\r\nRe naming: Chapel has many unique feature that other languages don't have :) That being said, I am not too crazy about `this` either. Is `kth` a common name? I also think that `get` maybe a bit too vague. `getElemAtIdx`? Is it too wordy?"", 'comment_created': datetime.datetime(2020, 8, 10, 17, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 468055306, 'comment_body': '@cassella @krishnadey30 -- do you have any opinion here?', 'comment_created': datetime.datetime(2020, 8, 10, 17, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 468283728, 'comment_body': '>  Is kth a common name?\r\n\r\nBy googling `kth problem`, there are lots of results about kth largest elements or so, which are exactly what `kth` is doing here. \r\n\r\n> `getElemAtIdx`?\r\n\r\nMy main concern is that using`Idx` could result in confusion between position and order. Terms like index remind me of some kind of arrays and their indexes. Actually, `[]` has the same impression on me. `kth` has no way to do with that.', 'comment_created': datetime.datetime(2020, 8, 11, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 468512822, 'comment_body': ""Oh. My fault. I thought that's the position of the implementation enum."", 'comment_created': datetime.datetime(2020, 8, 11, 11, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 468517811, 'comment_body': ""Something like this:\r\n```chpl\r\nvar a, b, c: orderedSet;\r\nvar ait = a.getIter();\r\nvar bit = b.getIter();\r\nwhile ait != nil {\r\n  while bit != nil && ait.value() > bit.value() then bit = bit.next();\r\n  if bit == nil then break;\r\n  else if bit.value() == ait.value() then c.insert(ait.value());\r\n  ait = ait.next();\r\n}\r\n```\r\nThere needs a way to have more control over how iterators move forward.\r\n\r\nSure it's possible to write such an iterator in OrderedSet. But I doubt it's the right place..."", 'comment_created': datetime.datetime(2020, 8, 11, 11, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 468533698, 'comment_body': ""I've added the comment"", 'comment_created': datetime.datetime(2020, 8, 11, 12, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 468537945, 'comment_body': 'I picked `priority` at last and added a more verbose comment.', 'comment_created': datetime.datetime(2020, 8, 11, 12, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 468541469, 'comment_body': 'If this is removed, the output will be something like this:\r\n```\r\n(instance = [ 1 ])\r\n(instance = [ 1 2 ])\r\n(instance = [ 1 2 3 ])\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 12, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 468623549, 'comment_body': '> and could be improved to O(n)\r\n\r\nIs that possible without adding new interface or touching the internal?', 'comment_created': datetime.datetime(2020, 8, 11, 14, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 468624543, 'comment_body': 'Yes. This is actually inherited from the code of Set.', 'comment_created': datetime.datetime(2020, 8, 11, 14, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 468634508, 'comment_body': ""Adding an `else` results in  `internal error: AST-PRI-IVE-0235`. I've got this before. This happens when a procedure that returns types doesn't return. I remember it has been reported by me or someone else."", 'comment_created': datetime.datetime(2020, 8, 11, 14, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 468640651, 'comment_body': 'I agree with @Rapiz1 regarding the `kth` being a more intuitive method name, but still, there is also a possibility of having better function names such as `getKthElement`.', 'comment_created': datetime.datetime(2020, 8, 11, 14, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 468647270, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16124/commits/bdbb76936d346728bcd77d43108ceecf9d7aba9a What do you think?', 'comment_created': datetime.datetime(2020, 8, 11, 14, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 468660437, 'comment_body': ""I've added a line of comment anyway."", 'comment_created': datetime.datetime(2020, 8, 11, 15, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 468673912, 'comment_body': 'I more feel like to follow other modules and use `import`.', 'comment_created': datetime.datetime(2020, 8, 11, 15, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 469191008, 'comment_body': 'The compiler will only give out the first error message. So the first line needs to be a warning. Or they have to be combined into one error. Maybe not as readable as this way.', 'comment_created': datetime.datetime(2020, 8, 12, 11, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 469390810, 'comment_body': ""> Also you are using `orderedSet` but don't you mean `treap`? This happens other times in the doc as well.\r\n\r\nActually, I'm considering moving documentation to the OrderedSet module page. And here can use the conclusion from the ongoing discussion about how List should arrange the docuementation. Maybe at a latter time when we come to a conclusion on that."", 'comment_created': datetime.datetime(2020, 8, 12, 16, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 469399807, 'comment_body': ""> Should we say something about the yield order?\r\n\r\nI added more detail in OrderedSet's module documentation. It's kind of like the previous situation of Heap. Let me know if you have any doubts about this."", 'comment_created': datetime.datetime(2020, 8, 12, 16, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 469429426, 'comment_body': 'If you mean code readability, single call to compilerError is much more readable. If you mean error readability, I understand the motivation to separate, but we have some pretty long error messages, and would like this to be a single compiler error message.', 'comment_created': datetime.datetime(2020, 8, 12, 17, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 469429827, 'comment_body': 'OK', 'comment_created': datetime.datetime(2020, 8, 12, 17, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 469430528, 'comment_body': 'Did you not like the idea of renaming this, or missed this?', 'comment_created': datetime.datetime(2020, 8, 12, 17, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 469434563, 'comment_body': ""Ugh.. that's right"", 'comment_created': datetime.datetime(2020, 8, 12, 17, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 469435209, 'comment_body': ""Huh.. that's weird\r\n"", 'comment_created': datetime.datetime(2020, 8, 12, 17, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 469435880, 'comment_body': 'Yeah maybe not. I think it can be a good future step for this module. We can add some support functions to the internal implementation and use it in the interface if the internal implementation supports it.', 'comment_created': datetime.datetime(2020, 8, 12, 17, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 469436673, 'comment_body': 'Oh, I see what you are saying.', 'comment_created': datetime.datetime(2020, 8, 12, 17, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 470382640, 'comment_body': 'I\'ve moved all docs to OrderedSet module and put a ""no doc"" on `Treap.chpl`.', 'comment_created': datetime.datetime(2020, 8, 14, 2, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 470382924, 'comment_body': 'I mean the error readability. Combined into a single error in https://github.com/chapel-lang/chapel/pull/16124/commits/45a6d99cf7ae1407cedf768bd3f6b2e051706c96', 'comment_created': datetime.datetime(2020, 8, 14, 2, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}]","[{'commit_sha': 'c239013452047ba29edcf05493e394a2321b03c5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '55c61e4023dbdff2298487f03090664cc88cf4e8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '50005cd3753b983b352198aa6a97a6d7cf04d4db', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '912c4c59bfe88faa5e5c403885a3d153d0cd13f4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd09be6472e9175fddfc9c748a0513269ee6393ed', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '00fab91cc47a7305caa01a368cf6814bd89a1a97', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd3cf32ff6003e78762f450cd5df1490495ae7b11', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1fd9a1b931b9c679e6345f193b184a0ae288e004', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ab05685f8f30b05826554497ee5a0da5010c941c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dd35fa0fbc49cc2221dbab1f8f7a7c7931fdc9ca', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '15cd8c0254b7b5ed4a37768177ce2a2a8dbebdb6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5b2e056c5746ba1419e49121bd35e7a5b90a24ce', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '789e75d285f080b6d56fe2bc24c8834a2d1bdf3d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ef97ca50bf3e20ffcd24daf7106639fd3765833f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bcee12450d1571cdc3c2178ed818cd480262cdcb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a99e7f81da4b713b6becd8581cf860bed9ed8329', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '964e57887d6e8d84d776d215fd7eb340aba55f5c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '41d79af27e0f40c8e07535419e775573e3cf4904', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e6267573f917425e38b7c25d59b60ba79de8ae10', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ccac13409151864698b38bd9edef0739b30c0ba1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0511118cfb04ca608c7d33631465a576ba0f5e12', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '32ad9c79afe184f8d647600253903cf6cda43aa6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7a8ede2583c28093dfed429f6b01e4c2f600d079', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '54d60c43a59f38f341a8df239e5f80fa3ea3488d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9d6c78a3aec98bbd2a9d60c56eb37b9f98204282', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '34c3372b889c0864dad30ee264902f52cfc5f219', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0c8f858af67370a533ebafe25591e7263c39cd06', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5d06bbc1b4f1bb217d3fa4b30af680fea6909a73', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5e18f949c9d5924aea87d9e51d85c9eb935daa0a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7d2f78955b033c419b552ea2067b6c97f8c04d91', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '25384024bba52a3eb40efcbaeb3a1d0afa4a756a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '92401651ce9214dc363802407fa74385051a1a58', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a31beca3bd484f69fc8c333fc8296c0161348901', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'baa57cfc38b382eaf035d8f9bcba2a7b76a09a24', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '79f7ee9f81fa62a11d532826b7017648d5d95c10', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ddb00aba63f25365120527e3dd4b46d1d46ac61f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fd17bf137485f46afaaa8da50d4c13cca4a4bc3e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4183b7ca74ecebef63c805c3c111b4720f2e638c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '10320f38ab9d493f46567e40843dd4bd65cda715', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '02b3484d76c824643684fd6185f92a550b50f8fe', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ae851f7e11c9671b782c0e2df52a5ec8b00f9d7a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6cb56114b771c27662308ba130a33c2be0a2c985', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4410db9047bae36f5b66ea72d01c2cecd1c02a36', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4aa87b92c888358a4a20731a8ce2674668d34317', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '79d7f3d97e7f740526cf087bbeee85bc4fea07e1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '26f4adca1da7cbc8b63f3e8a56f958b34288226e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '943f5a822b4569cb68a22c6589e200a1a788d79e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e27d6b4b39d33498d1c35769dcea56f90faccd73', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'eb9dd6da715428d8e1b4d31b092bd630d836e608', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd4c61b5b8973f07dcba9e1ec44bb6ad57eb8c9dc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f1d7f38d4dfd260e524e0b53ad7f5c047448509a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '343abdc0bcb89e8da5fa89104bed44be9e44ace8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bdbb76936d346728bcd77d43108ceecf9d7aba9a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bf199a7b38ec5616e9cbf6d469bca48949ca958d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2b03a8584ac1c99525d691ad9ece61c72f2ab9f9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd4f529fd1af4fba1c0c92dea5abc7c7b01937892', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '45a6d99cf7ae1407cedf768bd3f6b2e051706c96', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '80bee139c298df92c7bd2ebde4ceca277a97e1be', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '38d367bf92a8a75af752e9aff44a3d25c1d7a563', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yujia Qiao,20105061,code@rapiz.me,User,,87,,236,931
471592698,Add module OrderedMap,"This module contains the implementation of the orderedMap type which is a container that stores key-value associations. 
OrderedSet supports searching for a certain key, insertion, and deletion in O(logN).

---

- [x] Drop the parameter `implType`
- [x] Migrate tests
- [x] Pass tests for OrderedSet",True,16271,https://api.github.com/repos/chapel-lang/chapel/pulls/16271,https://github.com/chapel-lang/chapel/pull/16271,closed,1555,1,103,25,1,39,2,1,"[{'name': 'stat: cla signed'}, {'name': 'stat: developed under CLA'}]",2020-08-21 12:03:04+00:00,2021-03-23 22:35:57+00:00,18527573.0,"214 days, 10:32:53","[{'comment_id': 475694628, 'comment_body': 'OrderedMap should go before OrderedSet.  :)', 'comment_created': datetime.datetime(2020, 8, 24, 15, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475702855, 'comment_body': '`... used to compare keys`?\r\n', 'comment_created': datetime.datetime(2020, 8, 24, 15, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475718247, 'comment_body': ""You saw the travis failure from chpldoc for this line?  I don't know if it needs `parSafe` too, or if you can't reference the type fields like that.\r\n\r\nI see `Map.chpl` gets away with\r\n\r\n```\r\nmodules/standard/Map.chpl:    :type b: map (with same keyType and valType)\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 8, 24, 15, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475719318, 'comment_body': 'I would call the other map `other` here, as in `init=`', 'comment_created': datetime.datetime(2020, 8, 24, 15, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475723698, 'comment_body': 'Should this use the comparator to compare `result[0]` to `k`?', 'comment_created': datetime.datetime(2020, 8, 24, 16, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475726107, 'comment_body': '`:type v:`\r\n', 'comment_created': datetime.datetime(2020, 8, 24, 16, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475730180, 'comment_body': ""Won't it be in order since `keys()` will yield the keys in order?"", 'comment_created': datetime.datetime(2020, 8, 24, 16, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475734819, 'comment_body': ""Since you've written `|=` below, you can write this as (the equivalent but cleaner IMO)\r\n\r\n```chapel\r\nnewMap |= a;\r\nnewMap |= b;\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 8, 24, 16, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475737449, 'comment_body': 'This could use a note about how it invalidates references to every element in `a`', 'comment_created': datetime.datetime(2020, 8, 24, 16, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 478478197, 'comment_body': ""I tried many variants but none of them worked, including the way from Map you mentioned. I just deleted all types since their types are obvious. A wild guess is that it's a bug related to `var comparator: record = defaultComparator`. It's the only difference from Map I see. "", 'comment_created': datetime.datetime(2020, 8, 27, 14, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 478482933, 'comment_body': 'Sounds reasonable', 'comment_created': datetime.datetime(2020, 8, 27, 14, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 478713561, 'comment_body': ""Possibly you could use `orderedMap(keyType, valType, ?)`?\r\n\r\nI'm basing that on `doc/rst/technotes/partialInstantiations.rst`.\r\n\r\nIf that doesn't work, do you want to open an issue about it?"", 'comment_created': datetime.datetime(2020, 8, 27, 21, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 484674082, 'comment_body': 'This will have the same problem as #16349, as will the other `*ToArray()` functions below.', 'comment_created': datetime.datetime(2020, 9, 8, 6, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 484680838, 'comment_body': ""I'd put the `comparator` argument before the `parSafe` one.  I'd expect it to be more common to provide a non-default `comparator` than `parSafe` value.  (Though I don't have any evidence for that expectation.)"", 'comment_created': datetime.datetime(2020, 9, 8, 6, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 484684246, 'comment_body': ""The `getValue()` test shows the same effect as the `getReference()` test.  I think that's because what's copied (per the `getValue()` doc comment) is the class variable that refers to a class object which is itself not copied.\r\n\r\nI think `getValue()` and `getReference()` would show different semantics if the `valueType` were a `record`, or even an `int`.  If that's true, could you add such tests for the two functions?  (Or add those separate cases to the existing two tests?)"", 'comment_created': datetime.datetime(2020, 9, 8, 6, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 484686115, 'comment_body': ""This is the sort of case where you'll want a prediff to zap the line numbers within `OrderedMap.chpl`; otherwise any change to a line before 155 in that file would affect this test's output."", 'comment_created': datetime.datetime(2020, 9, 8, 6, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 484686487, 'comment_body': 'Whereas the line number in the test itself is ok, since only a change to the test will result in the test output changing, which is more manageable.', 'comment_created': datetime.datetime(2020, 9, 8, 6, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 484689659, 'comment_body': ""Do you need the `.sorted()` in all these tests?  My read is `toArray()` should be producing arrays sorted by the comparator.  So `.sorted()` should change anything only when it's using a different comparator, no?"", 'comment_created': datetime.datetime(2020, 9, 8, 6, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 484691000, 'comment_body': 'Could you make the keys and values in this test be not the same set, so that the `keysA` and `valsA` have different output?', 'comment_created': datetime.datetime(2020, 9, 8, 6, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 484691847, 'comment_body': ':question:', 'comment_created': datetime.datetime(2020, 9, 8, 6, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 484722637, 'comment_body': 'Removed all relevant lines since types are obvious and I failed to make it work', 'comment_created': datetime.datetime(2020, 9, 8, 7, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 484735750, 'comment_body': ""This is borrowed from Map. I don't know if it's necessary for orderedMap. But I supposed it's suitable for both map and orderedMap..."", 'comment_created': datetime.datetime(2020, 9, 8, 8, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 484760578, 'comment_body': ""Hmm...I think `parSafe` is usually the parameter after types. However, I don't have strong opinions about this. @krishnadey30 @e-kayrakli What do you think?"", 'comment_created': datetime.datetime(2020, 9, 8, 8, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 491702054, 'comment_body': 'added in https://github.com/chapel-lang/chapel/pull/16271/commits/a13c9ad5e32a96071ba2e66c5a0a4acd69cd898d', 'comment_created': datetime.datetime(2020, 9, 20, 15, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 491703959, 'comment_body': 'https://github.com/chapel-lang/chapel/pull/16271/commits/b2949c093e02fb307f098a57e05508fae647d9b7', 'comment_created': datetime.datetime(2020, 9, 20, 15, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 494040118, 'comment_body': ""I'd `no doc` this one."", 'comment_created': datetime.datetime(2020, 9, 24, 5, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 494043727, 'comment_body': 'Are you going to make that change?', 'comment_created': datetime.datetime(2020, 9, 24, 5, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 494254375, 'comment_body': ""Oh. Maybe I've clicked on this by accident. I will make the change"", 'comment_created': datetime.datetime(2020, 9, 24, 11, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 494257778, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2020, 9, 24, 12, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 540578767, 'comment_body': ""I just noticed though you're not adding a .future file for this test.\r\n\r\nMap has the .future because valgrind reports a problem with that code.  It had that .skipif because the problem sometimes doesn't show up in multilocale (which start_test sees as a future that's now passing, which is something that requires attention.  So the skipif keeps it from running in cases where it might pass so that it only runs where it will fail.)\r\n\r\nIf the test works without valgrind errors for `OrderedMap`, then there'd be no reason to have a skipif.\r\n\r\nI don't get any errors running the `OrderedMap` version of this test, with or without valgrind, with or without gasnet.  So I think you don't need the skipif.\r\n\r\n\r\n(BTW, the Map test's skipif has been through a few changes since you copied it, `test/library/standard/Map/mapOfArray.skipif`.)\r\n"", 'comment_created': datetime.datetime(2020, 12, 10, 23, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 555707659, 'comment_body': 'removed', 'comment_created': datetime.datetime(2021, 1, 12, 11, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 567615126, 'comment_body': '@krishnadey30, @e-kayrakli, any opinion?', 'comment_created': datetime.datetime(2021, 2, 1, 7, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 567632478, 'comment_body': 'Are these operators needed?  The `_keyComparator` below should be used anywhere that tuple needs to be compared (I think).  And all the tests pass with them removed.', 'comment_created': datetime.datetime(2021, 2, 1, 8, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 569922200, 'comment_body': ""If they are needed internally to the module, I think they should be declared private, and/or `no doc`.  And probably there should be a test that fails if they're not present."", 'comment_created': datetime.datetime(2021, 2, 4, 3, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 569923479, 'comment_body': ""So marking the initial comment as resolved isn't what makes the thread resolved, and now I can't undo it.  :joy: \r\n\r\nRemoving the skipif as you've done resolves this issue, but I still can't figure out how to get giithub to reflect that."", 'comment_created': datetime.datetime(2021, 2, 4, 3, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 579015936, 'comment_body': ""I dont' feel all that strongly about it, and I guess @krishnadey30 and @e-kayrakli don't either?"", 'comment_created': datetime.datetime(2021, 2, 19, 8, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 579016534, 'comment_body': ""This could be taken care of after it's merged."", 'comment_created': datetime.datetime(2021, 2, 19, 8, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 599795208, 'comment_body': 'I find this version more appealing as `type` and `param` arguments come first in the argument list.', 'comment_created': datetime.datetime(2021, 3, 23, 17, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 599826151, 'comment_body': ""Today on master, this line is problematic: `_set` is declared as `orderedSet(_eltType, parSafe)` in the `orderedMap` definition. But here, you are assigning a `orderedSet(_eltType, false)` to it. This doesn't compile because of type mismatch. It may have been compiling before, but I think the compiler's behavior today is more correct.\r\n\r\nThe solution is to leave the `_set` s declaration a generic `orderedSet` and let the compiler figure out the right type for it.\r\n\r\nI'm planning to do that change post-merge."", 'comment_created': datetime.datetime(2021, 3, 23, 18, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}]","[{'commit_sha': '85590d7637d8f3d57b626efcb9017f2f748e69aa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1e4a8d09011211526e00b865b5e63827f7de4767', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '010ec061ad80ae12974bc69ffae2a0c41f21b4dd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '26c2634aaba9970c55bdd0cd5153f812e8546d75', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b8c587aa0d4db3204ad9d576818e2a54b3a8e065', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '07527a34bf163553cd078c58b05e71583d713e18', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9b637b1ff1817c8ca9e173f7fc49a3cf67e55309', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bda9943c3f62b0363071064d3ae33701748013c3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0ac4e021bc3c255b87ce0b4084383c142de30c24', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '744e36f6c9631689851b24b0c2f13b395e24bff8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '46aa33c51237dd8dbe5607f723e21d7664eb1ca8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9948a320af717dfb8ebb62e67fa9898f1d0c130e', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bb0a9d49f0ece27fbbb81eefee5413c2ef2aad2', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dadaa7e08d1ac6edbe2be23e75be4679bbd2ea3', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e985611105c9295f9ecbdb0bcd4bb10068ab73f9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fd4b7b226664bd7f2e5666566f22d0741349c623', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dccfccb1bf7db6efabedcee9d9d9be9b1f213306', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ed62cbba3c36feae75ef800ad08f0b2441660d93', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1918ef49d628ffccdcbc88b8be519e95c9d907a8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a547dfcca74cf2b385d0eb2e85f7217577833caa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd48503538668aaf4a79653b256b320c25735444d', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c9349a97eee93c19dd8def58bc399da4f214f74', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80b830c7313506cf14114692805fa3826b4a8559', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ec33701426107694b48e8bacc1e0c323e7795bbd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bcc6078b8b6ce3b08378232ba985f6ae60cee675', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yujia Qiao,20105061,code@rapiz.me,User,,87,,236,931
467812438,Add module Unrolled linked list,"  This module contains the implementation of the unrolledLinkedList type.

  An unrolled linked list is a linked list of small arrays, all of the same size 
  where each is so small that the insertion or deletion is fast and quick, but 
  large enough to fill the cache line. 

- [x] Another round of testing
- [x] Edit `Makefile` to have this documented

- - -

For reference: https://brilliant.org/wiki/unrolled-linked-list/",True,16244,https://api.github.com/repos/chapel-lang/chapel/pulls/16244,https://github.com/chapel-lang/chapel/pull/16244,closed,2252,0,106,49,6,146,2,1,"[{'name': 'stat: cla signed'}, {'name': 'stat: developed under CLA'}]",2020-08-14 07:06:31+00:00,2021-01-29 01:16:51+00:00,14494220.0,"167 days, 18:10:20","[{'comment_id': 475195967, 'comment_body': 'This looks like initialised from an UnrolledLinkedList', 'comment_created': datetime.datetime(2020, 8, 23, 9, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475196019, 'comment_body': 'I suggest removing this code block if you are not using it.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475196172, 'comment_body': 'Give one line of comment for later use.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475196328, 'comment_body': 'Looks like a boolean return value. Please mention that.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475196359, 'comment_body': 'Helper comment here.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475196426, 'comment_body': 'Helper comment here.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475196658, 'comment_body': 'Helper comment here', 'comment_created': datetime.datetime(2020, 8, 23, 9, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475196852, 'comment_body': 'Helper comment here. Mention TODO outside. @e-kayrakli, @cassella Any opinions on TODO', 'comment_created': datetime.datetime(2020, 8, 23, 9, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197079, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197098, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197113, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197140, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197150, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197166, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197191, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197194, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197239, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197256, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197267, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197286, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197303, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197317, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197333, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197347, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197382, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197413, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197452, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197465, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197500, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197527, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475197542, 'comment_body': 'Mention complexity as well in docs.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'krishnadey30', 'type': 'User'}, {'comment_id': 475309012, 'comment_body': 'I think the node and list `capacity` can be `const`, right?', 'comment_created': datetime.datetime(2020, 8, 24, 2, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475309681, 'comment_body': 'Since this is repeated so often, I would pull it out into a separate `_checkCopyableType()` helper like `_checkType()`.  Possibly `_checkCopyableType()` could call `_checkType()` so no call site needs to call both.\r\n', 'comment_created': datetime.datetime(2020, 8, 24, 2, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475310596, 'comment_body': ""Structure-wise, it seems a little odd to update `pos` in the else bock and `cur` after the whole conditional, when their updates are related and they're both updated in the same cases."", 'comment_created': datetime.datetime(2020, 8, 24, 2, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475311378, 'comment_body': ""If the element type is a `shared` class type, this will leave references to the moved objects in `p`, and removing the copies from `node` won't cause the objects to be freed until the list is destroyed, the node is destroyed, or these entries in `p.data[]` are reused."", 'comment_created': datetime.datetime(2020, 8, 24, 2, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475311616, 'comment_body': 'What part of this block might throw an `Error`?', 'comment_created': datetime.datetime(2020, 8, 24, 2, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475313604, 'comment_body': 'Can you just pass `_tail!`?', 'comment_created': datetime.datetime(2020, 8, 24, 2, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475314561, 'comment_body': ""Can you pull out most of the body of the two `_append()` functions where you're just growing the list and splitting nodes into a common helper?"", 'comment_created': datetime.datetime(2020, 8, 24, 2, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475315066, 'comment_body': ""`_getRef` will walk the list, no?  Wouldn't it be better to follow `_tail` directly?"", 'comment_created': datetime.datetime(2020, 8, 24, 2, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475316033, 'comment_body': 'Should it halt if index is out of bounds, at least if `boundsChecking` is on?', 'comment_created': datetime.datetime(2020, 8, 24, 2, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475317642, 'comment_body': 'If `cur` is the last node, and it contained only the one element being removed, this will leave `tail` empty, no?', 'comment_created': datetime.datetime(2020, 8, 24, 3, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475318120, 'comment_body': ""The shifting only makes it O(nodeCapacity) (or O(1)); it's finding the element at `idx` that's O(n)."", 'comment_created': datetime.datetime(2020, 8, 24, 3, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475318428, 'comment_body': ""I don't remember if this came up before, but when I see `pop()`, I think of a stack, where `pop()` means only removing the top element, not an arbitrary one."", 'comment_created': datetime.datetime(2020, 8, 24, 3, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475320777, 'comment_body': 'This would be a good thing to check the performance of.  I think you could write\r\n\r\n```chapel\r\nfor (ael, bel) in zip(a, b) do\r\n  if ael != bel then\r\n    return false;\r\n```\r\n\r\nand it should step through the two O(n) iterators.', 'comment_created': datetime.datetime(2020, 8, 24, 3, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475364711, 'comment_body': ""Did you consider applying hysteresis here?  As it stands, I think given a ULL with a single node that's completely full, the sequence `append(), pop(), append(), pop(), ...` will result in splitting and merging with every pair of operations."", 'comment_created': datetime.datetime(2020, 8, 24, 6, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475368757, 'comment_body': ""I don't know what the implications are, but should this (and all the element-moving paths) use something like `List`'s `_move()` function?  I gather it's for `record`s, and is something like doing `memcpy()`s instead calling the assignment operator.  I don't know if it's appropriate to do that here."", 'comment_created': datetime.datetime(2020, 8, 24, 6, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475369273, 'comment_body': '(... assuming `_tail` will never be empty.)', 'comment_created': datetime.datetime(2020, 8, 24, 6, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475370618, 'comment_body': ""I think the existing algorithm is only O(n^2), since the loop is done n times, and each of `a[i]` and `b[i]` are O(n), but they're not multiplicative."", 'comment_created': datetime.datetime(2020, 8, 24, 6, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475371843, 'comment_body': 'I imagine the optimization idea is to allocate the `size` empty spaces up front and move anything that needs moving once; and then fill in the `size` new elements while we already have a pointer to where they go and without having to move anything else.\r\n\r\n(Or doing that one node at a time if not all at once.)', 'comment_created': datetime.datetime(2020, 8, 24, 6, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475372917, 'comment_body': '... even though those entries in `node` are the only ones that exist according to the public interface of `unrolledLinkedList`.', 'comment_created': datetime.datetime(2020, 8, 24, 6, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 475374469, 'comment_body': ""I'm a little nervous about this since it'll be as many levels of recursion as there are nodes in the list.  Chapel programs can have somewhat limited stack space.  I'd prefer to see the deletion of all the nodes happen in `unrolledLinkedList.deinit()`, where it could iteratively delete each node."", 'comment_created': datetime.datetime(2020, 8, 24, 6, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 476500946, 'comment_body': 'But they have different messages. Is it necessary?', 'comment_created': datetime.datetime(2020, 8, 25, 14, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 476506191, 'comment_body': 'I suppose this procedure is really trivial...', 'comment_created': datetime.datetime(2020, 8, 25, 14, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 476507271, 'comment_body': 'Sounds reasonable. How can I release these references then?', 'comment_created': datetime.datetime(2020, 8, 25, 14, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 476508553, 'comment_body': ""I actually mention it as 'return if merged'. Maybe it's not clear enough. I have updated the description."", 'comment_created': datetime.datetime(2020, 8, 25, 14, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 476512825, 'comment_body': ""Hmm...That's a very bad case. Maybe there's something wrong with the implementation. I will get back to it soon."", 'comment_created': datetime.datetime(2020, 8, 25, 14, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 476516568, 'comment_body': ""It implies moving elements. `_move()` is not documented and I'm not sure the case to use it."", 'comment_created': datetime.datetime(2020, 8, 25, 14, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 476543616, 'comment_body': 'This is the same as List', 'comment_created': datetime.datetime(2020, 8, 25, 15, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 476554944, 'comment_body': 'This is the same as List. I prefer consistency but maybe there should be changes on both?', 'comment_created': datetime.datetime(2020, 8, 25, 15, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 490216209, 'comment_body': ""In the case of ULL, a shared object must be `nilable shared` because it has to be default initializable. So the solution is to  set it to `nil`. Do you think using`_move` here can solve this? I don't know about what happens to the place of the element moved."", 'comment_created': datetime.datetime(2020, 9, 17, 12, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 491685815, 'comment_body': 'This snippet has been refactored to behave as [here](https://brilliant.org/wiki/unrolled-linked-list/) described. However, the case you mentioned still happens. But I think the point is that every operation takes O(nodeCapacity).', 'comment_created': datetime.datetime(2020, 9, 20, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 491685914, 'comment_body': 'This happens with `List`', 'comment_created': datetime.datetime(2020, 9, 20, 12, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 491686035, 'comment_body': ""This is a leftover from List and I've removed it."", 'comment_created': datetime.datetime(2020, 9, 20, 12, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 532977981, 'comment_body': 'Reading the comment below and in general, do we still need this to be `true` by default?\r\n\r\n', 'comment_created': datetime.datetime(2020, 11, 30, 23, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532978573, 'comment_body': 'We might consider adding `unrolledLinkedList` somewhere in this error message to make it more clear.', 'comment_created': datetime.datetime(2020, 11, 30, 23, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532978939, 'comment_body': 'Have we considered making this a tuple? (and `capacity` a `param`, maybe even a `config param`?)', 'comment_created': datetime.datetime(2020, 11, 30, 23, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532981761, 'comment_body': 'I have an issue with these sanity checks. Even though they turn into a noop whey you disable _sanityChecks, their argument is still evaluated. So, it feels like there is no benefit of turning them off, whereas one would expect to see better performance due to lack of checks.\r\n\r\nWe should replace all of these calls with:\r\n```chapel\r\nif _sanityChecks then\r\n  assert(size != capacity);\r\n```', 'comment_created': datetime.datetime(2020, 11, 30, 23, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532987722, 'comment_body': 'Basically number of items in the list, right? Can you add a comment saying that?', 'comment_created': datetime.datetime(2020, 12, 1, 0, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532988154, 'comment_body': ""In case you didn't know, you can do just `while cur`. But if it was me, I'd do exactly the same as you did. So, don't change anything :)"", 'comment_created': datetime.datetime(2020, 12, 1, 0, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532990458, 'comment_body': 'I don\'t like ""unrolledLinkedList"" in plain English sentences. I wouldn\'t be opposed if we just said ""... of this list"". This is a list, after all. Unrolled Linked List is the underlying implementation of it and we shouldn\'t bend over backwards to repeat that.', 'comment_created': datetime.datetime(2020, 12, 1, 0, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532990704, 'comment_body': '""an"", but see my comment about using ""unrolledLinkedList"" here.\r\n\r\ne.g. I want this sentence to read ""Initializes a list containing ...""', 'comment_created': datetime.datetime(2020, 12, 1, 0, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532992298, 'comment_body': 'Sounds like you need a `p.data[i].clear` after you append it to the new node.\r\n\r\nhttps://chapel-lang.org/docs/master/builtins/SharedObject.html', 'comment_created': datetime.datetime(2020, 12, 1, 0, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532992784, 'comment_body': 'my reflex is to create a `const halfCap = nodeCapacity/2` and use `halfCap` to avoid repeated divisions here. But that is probably a premature optimizaiton', 'comment_created': datetime.datetime(2020, 12, 1, 0, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532993005, 'comment_body': 'Note that these complexities can be added to the header comment, as well', 'comment_created': datetime.datetime(2020, 12, 1, 0, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532993726, 'comment_body': 'As another tip, you can use single-quotes as if it is just a regular character within a double-quoted string and vice-versa. And there is no difference between single and double quoted strings beyond that.', 'comment_created': datetime.datetime(2020, 12, 1, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532994113, 'comment_body': 'If you have any optimization ideas for this, you can add them here as `TODO` comments.', 'comment_created': datetime.datetime(2020, 12, 1, 0, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532994776, 'comment_body': 'what can throw in this block?', 'comment_created': datetime.datetime(2020, 12, 1, 0, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532994817, 'comment_body': 'what can throw in this block?', 'comment_created': datetime.datetime(2020, 12, 1, 0, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532995644, 'comment_body': 'And note that, it is perfectly fine to leave it as TODO.\r\n\r\nI prefer to keep TODO inside.', 'comment_created': datetime.datetime(2020, 12, 1, 0, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532996044, 'comment_body': 'I would like to reword this. A novice Chapel programmer might assume that we are actually inserting an array. Though what we are doing is inserting all the elements in it.', 'comment_created': datetime.datetime(2020, 12, 1, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532996141, 'comment_body': 'Same here. Make it clear that we are inserting all the elements in the list', 'comment_created': datetime.datetime(2020, 12, 1, 0, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532996384, 'comment_body': ""(and I am not checking the List docs, you may have inherited this language from there. Still, would like this to change, and would like the List doc to change, too, if that's the case :) )"", 'comment_created': datetime.datetime(2020, 12, 1, 0, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532996741, 'comment_body': 'If it was me, I would turn this sentence around. The purpose of this function is not to remove `count` elements. It is to remove an element. Optionally, you can pass a `count` argument to repeat this.', 'comment_created': datetime.datetime(2020, 12, 1, 0, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532997013, 'comment_body': ""I don't think this is a good practice.\r\n\r\n```chapel\r\n_enter();\r\ndefer {\r\n  _leave();\r\n}\r\n```"", 'comment_created': datetime.datetime(2020, 12, 1, 0, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532997347, 'comment_body': 'what can throw in this block?', 'comment_created': datetime.datetime(2020, 12, 1, 0, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532997712, 'comment_body': ""To repeat, I think we can have a bullet list of complexities of some common operations in the header doc. But I'd probably keep the function docs unchanged."", 'comment_created': datetime.datetime(2020, 12, 1, 0, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532998732, 'comment_body': ""I second Paul on this. Frankly, I am surprised to see a method with the similar signature in List. Checking if there's anything to it. In any case, we can keep it for now for consistency."", 'comment_created': datetime.datetime(2020, 12, 1, 0, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532999216, 'comment_body': 'You can even make the argument fully generic, if you want to. ', 'comment_created': datetime.datetime(2020, 12, 1, 0, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532999576, 'comment_body': ""I don't think this is needed."", 'comment_created': datetime.datetime(2020, 12, 1, 0, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532999710, 'comment_body': 'It would be good to explicitly say that this is constant time.', 'comment_created': datetime.datetime(2020, 12, 1, 0, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 532999887, 'comment_body': 'var? version?', 'comment_created': datetime.datetime(2020, 12, 1, 0, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 533000246, 'comment_body': 'you can\r\n\r\n```chapel\r\nfor (a,x) in zip(result, this) do\r\n  a = x;\r\n```\r\nThat would avoid the cost of repeated indexing.', 'comment_created': datetime.datetime(2020, 12, 1, 0, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 533000728, 'comment_body': 'Reflow to fit 80 characters. And maybe hyphenate ""now-empty"".\r\n\r\nI don\'t like that we are using the word ""extent"" for an insertion into an empty list. But technically it is not wrong.', 'comment_created': datetime.datetime(2020, 12, 1, 0, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 533000907, 'comment_body': 'Probably you can drop the args here.', 'comment_created': datetime.datetime(2020, 12, 1, 0, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 533000967, 'comment_body': 'can drop args here, too', 'comment_created': datetime.datetime(2020, 12, 1, 0, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 538982452, 'comment_body': ""How so?  Do you just mean it should have braces and be split across lines?  Or something else?\r\n\r\nThe List module has cases exactly as it's written here -- e.g. `getValue()` and `getBorrowed()`.  "", 'comment_created': datetime.datetime(2020, 12, 9, 3, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 538985523, 'comment_body': ""Why can't the capacity be odd?  Is that just to make the logic dealing with `size/2` easier?"", 'comment_created': datetime.datetime(2020, 12, 9, 3, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 538993181, 'comment_body': 'Either way makes sense to me.', 'comment_created': datetime.datetime(2020, 12, 9, 4, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539000941, 'comment_body': 'The different messages seem reconcilable if you can write `_checkCopyableType(this.type.eltType, ""list"")`, and still construct a call to `compilerError()`, which I think requires a param string.\r\n\r\nIt\'s not necessary.  As long as you\'ve considered it both ways.\r\n\r\nThough I would put all three checks in the same order in all the `init()`s, so that making the same sort of errors when calling the different initializers results in the same error messages in the same order.', 'comment_created': datetime.datetime(2020, 12, 9, 4, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539012312, 'comment_body': 'I think `count == 2` or `count == 0` are as much a part of the purpose of the function as `count == 1`.  I think the description is good as-is.', 'comment_created': datetime.datetime(2020, 12, 9, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539014311, 'comment_body': 'I think here also, nothing in the `try!` block can throw?', 'comment_created': datetime.datetime(2020, 12, 9, 5, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539016552, 'comment_body': ""If `cur == tail`, and it contained only the one element that we just popped, it'll be empty now, right?  (`_merge()` won't have had anything to do.)  IIRC, there was an invariant that there wouldn't be empty nodes on the list?  (Or am I misremembering that?)"", 'comment_created': datetime.datetime(2020, 12, 9, 5, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539018158, 'comment_body': ""This is another place where I think `pos` and `cur` should be advanced in the same code block, since their advancements are related, and since the `return` in the `if {}` block means they'll both be executed or neither will."", 'comment_created': datetime.datetime(2020, 12, 9, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539019967, 'comment_body': 'Is there a reason to have a separate `error`, vs. setting `var result = -1;`?', 'comment_created': datetime.datetime(2020, 12, 9, 5, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539028918, 'comment_body': 'Hmm.  It would be nice to have an iterator like `iter these()` but which accepted the `start` argument, and skipped over nodes to reach that index.\r\n\r\n(`iter these()` could then call it, passing `start=0`.)', 'comment_created': datetime.datetime(2020, 12, 9, 5, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539029792, 'comment_body': ""Why have the function, versus not having the function and letting the compiler emit the usual error message about an undefined method?\r\n\r\n(Sorry if it's here in response to earlier review comments...)"", 'comment_created': datetime.datetime(2020, 12, 9, 5, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539036445, 'comment_body': 'On the basis of it being obvious?  Is there any guideline as to how obvious it has to be to be better off not mentioned?', 'comment_created': datetime.datetime(2020, 12, 9, 6, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539038885, 'comment_body': ""This loop won't actually execute any iterations, since ranges' bounds are low..high, not start..end.\r\n\r\nI'd say `testIters` should be large enough that the list would have more than one node."", 'comment_created': datetime.datetime(2020, 12, 9, 6, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539040669, 'comment_body': ""All the cases where the lists compare as uneqal, they're doing so because they have different lengths.  Could you add a test where two lists of the same length differ?\r\n"", 'comment_created': datetime.datetime(2020, 12, 9, 6, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539041836, 'comment_body': 'The name of this test suggests there should be a bug involved?', 'comment_created': datetime.datetime(2020, 12, 9, 6, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539043452, 'comment_body': ""Here too I think there should be cases testing `indexOf()` when it has to look into a second or third node; both from the beginning and from a passed `start` that's more than a node in."", 'comment_created': datetime.datetime(2020, 12, 9, 6, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539053789, 'comment_body': ""I think this test should be a little more explicit about the expected results.  E.g., did `insert()` insert elements at the intended position?  Did inserting into the middle (full) node cause a correct split?\r\n\r\nSo I would add another case to this test.  In order that the test can assert specific things, I'd make the list pretty regular, something like (pseudocode)\r\n\r\n```\r\nvar lst = unrolledLinkedList(0..99);\r\nfor i in 1..197 by 2 {\r\n  lst.insert(i, -1);\r\n}\r\nassert(lst.size == 199);\r\nfor i in 0..198 {\r\n  if i is even then assert(lst[i] * 2 == i);\r\n  else assert (lst[i] == -1);\r\n}\r\n```"", 'comment_created': datetime.datetime(2020, 12, 9, 6, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539070200, 'comment_body': 'Was this meant to be testing `arr[i] == lst[testIters + i]`?', 'comment_created': datetime.datetime(2020, 12, 9, 7, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539074639, 'comment_body': 'extra `;`  :)', 'comment_created': datetime.datetime(2020, 12, 9, 7, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539076910, 'comment_body': ""There are no lines from Sort.chpl in any of these .good files (and there are no .bad files).  Was this referencing something in Sort.chpl that's not happening any more, or was this copied from somewhere that did have errors from Sort.chpl to worry about?"", 'comment_created': datetime.datetime(2020, 12, 9, 7, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539681545, 'comment_body': 'Right. And unfortunately (probably unsurprisingly, too) there is no guideline where I can point to.', 'comment_created': datetime.datetime(2020, 12, 9, 22, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 539687038, 'comment_body': ""Ah, and it's like that in List's corresponding `listContains` test."", 'comment_created': datetime.datetime(2020, 12, 9, 22, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 539862331, 'comment_body': '(Fixed for List in #16840)', 'comment_created': datetime.datetime(2020, 12, 10, 5, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 546228104, 'comment_body': ""Yes. You're right. I will change them. And I've seen this in other places. Maybe we should change those too."", 'comment_created': datetime.datetime(2020, 12, 19, 11, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 546228709, 'comment_body': ""Hmm...I suppose it's variable. This line must be copied from somewhere but I don't remember where. I remember @cassella once suggested changing the wording of this line. Any ideas?"", 'comment_created': datetime.datetime(2020, 12, 19, 11, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 546230571, 'comment_body': ""This is from List. I just thought it should also work for testing ULL if there's a similar bug. Do you think it's pointless and we should remove it?"", 'comment_created': datetime.datetime(2020, 12, 19, 12, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 546232861, 'comment_body': ""I agree with you and it does sound awkward in an English sentence. But I'm also afraid that replacing all `unrolledLinkedList` to `list` could be ambiguous because we have a real `List`. "", 'comment_created': datetime.datetime(2020, 12, 19, 12, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 546233609, 'comment_body': ""Can you explain a little bit why that's better?"", 'comment_created': datetime.datetime(2020, 12, 19, 12, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 546234027, 'comment_body': ""It's a time ago so I don't remember what exactly drives me to write this line. But I suppose it could be the idea to unify the unrolled linked list and list. And yes, I think I should remove this function and let the compiler do its job."", 'comment_created': datetime.datetime(2020, 12, 19, 12, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 546234946, 'comment_body': 'The reason is that List did the same thing. I would say using `error` avoids hardcoding -1.', 'comment_created': datetime.datetime(2020, 12, 19, 12, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 547702914, 'comment_body': ""I get a successful `make docs` by adding two more spaces before `those` in this comment and in the same place in the next `proc ref extend()`'s comment.\r\n\r\nI don't remember having to install anything manually; I just ran `make docs`.\r\n\r\nThough the rst file that produces for the function below says\r\n\r\n```\r\n   .. method:: proc ref extend(other: eltTypeunrolledLinkedList?p)\r\n```\r\ninstead of something like `other: urolledLinkedList(eltType, ?p))`\r\n\r\nedit: This looks like #13626."", 'comment_created': datetime.datetime(2020, 12, 23, 6, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 547748419, 'comment_body': 'I don\'t remember making any previous suggestions here, but it\'s been a while.  Could it just be ""... array containing a copy of each of the elements...""?', 'comment_created': datetime.datetime(2020, 12, 23, 7, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 547764520, 'comment_body': 'Ah, I see.  The name came from List, where it referred to ""the bug being fixed in the commit adding the test"".\r\n\r\nI don\'t know if there\'s any sense having it here.  I guess it\'s testing that calling `.first()` doesn\'t mutate the list (or crash).', 'comment_created': datetime.datetime(2020, 12, 23, 7, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 551956872, 'comment_body': 'It worked. Thanks', 'comment_created': datetime.datetime(2021, 1, 5, 14, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 552113046, 'comment_body': 'Revisiting this comment, I am more thinking of this as an academic curiosity. Can be ignored, or maybe we can just add a comment asking for some experiments (but leaving `data` an array)\r\n\r\nI am more concerned about potential compilation time issues for tuples that are very large and array seems a safer option for now.', 'comment_created': datetime.datetime(2021, 1, 5, 18, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 555722283, 'comment_body': 'Yeah', 'comment_created': datetime.datetime(2021, 1, 12, 12, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 555736773, 'comment_body': ""https://github.com/chapel-lang/chapel/pull/16244/commits/9aaf4bde6b3124dd748f09af6385ce83c851e302 So I suppose simply make `testIter` larger than a node's capacity would work?"", 'comment_created': datetime.datetime(2021, 1, 12, 12, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 555768325, 'comment_body': 'Hmm. It seems fine to have only one empty node in the list. I added some tests here https://github.com/chapel-lang/chapel/pull/16244/commits/0d7054f6a189316f0fec7a3d161eece080295d88', 'comment_created': datetime.datetime(2021, 1, 12, 13, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 559952255, 'comment_body': 'Yes. But I also wonder if it will affect the performance because of the unbalanced split.', 'comment_created': datetime.datetime(2021, 1, 19, 7, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 559954154, 'comment_body': ""I think the compiler should take care of that. So in the term of cleanness, which do you prefer? I'm on the fence."", 'comment_created': datetime.datetime(2021, 1, 19, 7, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 559956952, 'comment_body': ""Do you suggest adding a new interface? Or just a refactor? Also, I didn't see the benefit here. The iterating here is straightforward and I suppose adding a function here will add to the complexity."", 'comment_created': datetime.datetime(2021, 1, 19, 7, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 559960143, 'comment_body': ""I think it's confusing to have it here because ULL never has that bug. But I like the idea of this test. Added to testFirst."", 'comment_created': datetime.datetime(2021, 1, 19, 7, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 559971927, 'comment_body': ""I've made the test much stronger"", 'comment_created': datetime.datetime(2021, 1, 19, 7, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 560557182, 'comment_body': ""It probably doesn't today unless the backend is able factor it out, and I don't have strong opinions as this function probably have other parts that consume more time. We can leave it as-is."", 'comment_created': datetime.datetime(2021, 1, 19, 23, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 560557953, 'comment_body': 'OK I concede.\r\n\r\nThere was nothing more to it than splitting lines.', 'comment_created': datetime.datetime(2021, 1, 19, 23, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 560560721, 'comment_body': 'I think something like that can be added later on. It can help jump over ULL nodes until the start is hit, instead of iterating element-by-element until `start`', 'comment_created': datetime.datetime(2021, 1, 19, 23, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 560562520, 'comment_body': ""I think what Paul suggests below can be achieved by breaking this loop into two where the first one appends and the second checks the index of elements. Currently you are always searching for the element that's at the end of the list. Splitting the loop will make it look at elements all around the list, including what he suggests, I think."", 'comment_created': datetime.datetime(2021, 1, 19, 23, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 561594395, 'comment_body': 'At the time I made my comment below, `testIters` above was 8, so there was only ever one node.  Bumpiing that up was all I had in mind, but the change you suggest would be even better.', 'comment_created': datetime.datetime(2021, 1, 21, 4, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 563012842, 'comment_body': ""You're right. I've made the change."", 'comment_created': datetime.datetime(2021, 1, 23, 3, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 565806886, 'comment_body': ""That's what I was thinking, but even if there were agreement on it, it's beyond the scope of this PR."", 'comment_created': datetime.datetime(2021, 1, 28, 4, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}, {'comment_id': 565807316, 'comment_body': ""Huh.  I'd mark this thread resolved, but I can't find the UI for doing that.  I assume it's supposed to be where the `Show resolved` is on resolved threads?"", 'comment_created': datetime.datetime(2021, 1, 28, 4, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cassella', 'type': 'User'}]","[{'commit_sha': '370bcb17e2db90c41b6c06246c9514688f6ad254', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a9dba3e0f9f0f2ad1b89831baefc6676aabafc95', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '49e5efbd8393e1739e039ca2b0ea277e179aac9a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c650798f655066232901c55006abb6e87328417e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8603cf89e281fcd4a2dc2df76fcad8a96f2907f1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c1343efb10f00f54098297fbc1c5984ae1237b84', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd03556a671c201e513dbc729fa07ca75564bd2d8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4f6cdbfbf4bb5be0edb3f40d4642c6b63caa6f8f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '26ae7b6f2f6d96f3661232b8dfa24ef36c02b272', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cbdc3a342cdb4256c15ac8a8b2d2cf7b8ac4c274', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '29b1fe1de083fae4cdbd8c0ec28bc2fe71244301', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3ac26764166a69d375c65921e9a908651cecb07f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '71f18828960d47e052e56fc5d8974e8ae9d2c291', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2775c21561c7f5162493d0bbd42647e4f901d096', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7f337c6974265e53d9c0f73a8bc4c085d7e7c50', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6cc04a6dfa771eeaf48809e706789de8704aa13', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8150e1a38f441dee6a0488a90a60ada06a92e9fe', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4d99a64f691d56bda90bbe70e54f0f6942675fb', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7377dd5a4ecc4bed85033580c561200919377112', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ac41047605d39d3dfb19086d8066f86655ab2fe', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b75295d096a20ed0c073dfdd227003c86d80c928', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6376a46e46697650786ff29aee8768a084ae9c1', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '943e67c1797c73e6086d3148d3607b132a445165', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e11d9f0d0cf2318067ac25276d87ca3c551e5c9', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48f7768b5f9c3381b17ec987667619e20274b3c3', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67770b366945f5f38df5aa736eb3e9875edaba51', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc3d37956b24570e837dcb31395308f403754ea8', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d18c75c6ae41906fbdc587845cae8590d44b88e', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c652cb8d5b7a0d1c51c09d67589df4494d7f83a0', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ac159fceae15cb79ba8af5eb7bd40a6b6eedcf', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b77a4a8498cd96b67ed0197c4cec4b0ae253bf9a', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '219c9dd699a76e6a12c0b6b93ceee46fcb451c03', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '921fa11588b39eb6fda0e7b05b20f05457ad2b76', 'committer_username': 'rapiz1', 'committer_name': 'Yujia Qiao', 'committer_email': 'code@rapiz.me', 'commit_date': datetime.datetime(2016, 6, 23, 7, 15, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1a5d2599992474bba455b07dbb2d158b129cb4f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '556d99c4b269c3eb6d9b808c70363c701de6f539', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9aaf4bde6b3124dd748f09af6385ce83c851e302', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cb535ae6e2d54e87a709c97c1896e118ab01133c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '612f119b70165101a3790967aaafb7afd71752fa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c2a07bf07565127989d31dbc10dc8a2be5b0cf68', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0d7054f6a189316f0fec7a3d161eece080295d88', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '83c9c3b80dc296e36bd24a2943327cabf76f8bb2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '49d23383c6ba8fc27006690e34523fd04049481a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8be9be9e41c6378a69fd4fefdface91340432d99', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '25e6c46c4a6b38609436373df0cfcfd98ee4148c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'de5a468bb1856f3992822dca5cc36befb10926b5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b566dce2e38fbc7e1eaf84412130d95a51b48387', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '570a7a404d91d2e9d1f985d83bda2d4ef0fa7032', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'df3de89962244c8b2427e4ba103cec36dba0aaf1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7b28a8fde5ce69bb004ad9f67e8866c35d9c864d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Yujia Qiao,20105061,code@rapiz.me,User,,87,,236,931

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
21663285,chapel,chapel-lang/chapel,Chapel,415,1764,63,280,102400,2815,46,105,"[{'id': 721050769, 'number': 18305, 'closed': datetime.datetime(2021, 8, 28, 0, 8, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 27, 5, 57, 28, tzinfo=datetime.timezone.utc), 'time_taken': 65460.0, 'time_delta': '18:11:00', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 471592698, 'number': 16271, 'closed': datetime.datetime(2021, 3, 23, 22, 35, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 12, 3, 4, tzinfo=datetime.timezone.utc), 'time_taken': 18527573.0, 'time_delta': '214 days, 10:32:53', 'additions': 1555, 'deletions': 1, 'state': 'closed'}, {'id': 467812438, 'number': 16244, 'closed': datetime.datetime(2021, 1, 29, 1, 16, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 7, 6, 31, tzinfo=datetime.timezone.utc), 'time_taken': 14494220.0, 'time_delta': '167 days, 18:10:20', 'additions': 2252, 'deletions': 0, 'state': 'closed'}, {'id': 466790223, 'number': 16230, 'closed': datetime.datetime(2020, 8, 19, 11, 33, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 13, 58, 2, tzinfo=datetime.timezone.utc), 'time_taken': 596144.0, 'time_delta': '6 days, 21:35:44', 'additions': 1571, 'deletions': 1428, 'state': 'closed'}, {'id': 456053276, 'number': 16124, 'closed': datetime.datetime(2020, 8, 20, 23, 4, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 3, 20, 15, tzinfo=datetime.timezone.utc), 'time_taken': 2403832.0, 'time_delta': '27 days, 19:43:52', 'additions': 2836, 'deletions': 0, 'state': 'closed'}, {'id': 446624556, 'number': 16048, 'closed': datetime.datetime(2020, 7, 23, 17, 41, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 5, 20, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1254047.0, 'time_delta': '14 days, 12:20:47', 'additions': 2314, 'deletions': 0, 'state': 'closed'}, {'id': 443346553, 'number': 15997, 'closed': datetime.datetime(2020, 8, 10, 22, 24, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 8, 3, 15, tzinfo=datetime.timezone.utc), 'time_taken': 3421247.0, 'time_delta': '39 days, 14:20:47', 'additions': 846, 'deletions': 0, 'state': 'closed'}, {'id': 435625196, 'number': 15861, 'closed': datetime.datetime(2020, 6, 17, 13, 14, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 6, 9, 56, tzinfo=datetime.timezone.utc), 'time_taken': 25498.0, 'time_delta': '7:04:58', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 434099129, 'number': 15837, 'closed': datetime.datetime(2020, 6, 15, 18, 19, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 14, 5, 48, 56, tzinfo=datetime.timezone.utc), 'time_taken': 131441.0, 'time_delta': '1 day, 12:30:41', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 402161379, 'number': 15503, 'closed': datetime.datetime(2020, 4, 16, 1, 11, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 11, 8, 51, 30, tzinfo=datetime.timezone.utc), 'time_taken': 404382.0, 'time_delta': '4 days, 16:19:42', 'additions': 18, 'deletions': 0, 'state': 'closed'}, {'id': 400776934, 'number': 15476, 'closed': datetime.datetime(2020, 4, 15, 18, 47, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 8, 10, 57, 7, tzinfo=datetime.timezone.utc), 'time_taken': 633037.0, 'time_delta': '7 days, 7:50:37', 'additions': 42, 'deletions': 8, 'state': 'closed'}, {'id': 390381215, 'number': 15248, 'closed': datetime.datetime(2020, 3, 18, 17, 47, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 18, 11, 31, 58, tzinfo=datetime.timezone.utc), 'time_taken': 22542.0, 'time_delta': '6:15:42', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 389859546, 'number': 15238, 'closed': datetime.datetime(2020, 4, 24, 18, 35, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 17, 14, 9, 15, tzinfo=datetime.timezone.utc), 'time_taken': 3299180.0, 'time_delta': '38 days, 4:26:20', 'additions': 26, 'deletions': 13, 'state': 'closed'}, {'id': 386551766, 'number': 15170, 'closed': datetime.datetime(2020, 3, 11, 17, 7, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 11, 8, 37, 18, tzinfo=datetime.timezone.utc), 'time_taken': 30640.0, 'time_delta': '8:30:40', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 386158752, 'number': 15157, 'closed': datetime.datetime(2020, 6, 4, 21, 7, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 10, 14, 14, 47, tzinfo=datetime.timezone.utc), 'time_taken': 7455172.0, 'time_delta': '86 days, 6:52:52', 'additions': 9, 'deletions': 1, 'state': 'closed'}, {'id': 385952842, 'number': 15153, 'closed': datetime.datetime(2020, 3, 16, 15, 31, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 10, 6, 2, tzinfo=datetime.timezone.utc), 'time_taken': 552585.0, 'time_delta': '6 days, 9:29:45', 'additions': 24, 'deletions': 24, 'state': 'closed'}, {'id': 385910506, 'number': 15151, 'closed': datetime.datetime(2020, 3, 16, 15, 35, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 10, 2, 56, 27, tzinfo=datetime.timezone.utc), 'time_taken': 563960.0, 'time_delta': '6 days, 12:39:20', 'additions': 15, 'deletions': 1, 'state': 'closed'}, {'id': 385249548, 'number': 15137, 'closed': datetime.datetime(2020, 3, 19, 17, 31, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 8, 10, 15, 18, tzinfo=datetime.timezone.utc), 'time_taken': 976555.0, 'time_delta': '11 days, 7:15:55', 'additions': 30, 'deletions': 0, 'state': 'closed'}, {'id': 385099718, 'number': 15131, 'closed': datetime.datetime(2020, 3, 9, 14, 45, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 7, 3, 53, tzinfo=datetime.timezone.utc), 'time_taken': 211943.0, 'time_delta': '2 days, 10:52:23', 'additions': 23, 'deletions': 8, 'state': 'closed'}, {'id': 384900783, 'number': 15112, 'closed': datetime.datetime(2020, 4, 7, 16, 59, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 6, 16, 7, 54, tzinfo=datetime.timezone.utc), 'time_taken': 2767894.0, 'time_delta': '32 days, 0:51:34', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 381404161, 'number': 15022, 'closed': datetime.datetime(2020, 4, 15, 16, 1, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 28, 13, 58, 54, tzinfo=datetime.timezone.utc), 'time_taken': 4068153.0, 'time_delta': '47 days, 2:02:33', 'additions': 7, 'deletions': 4, 'state': 'closed'}]"
