pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1290353719,crit: fix proto imports for library,"When using CRIT as a library, all proto bindings are imported and statically linked. This PR aims to fix this by moving each proto binding into its own package and importing all of them only for the CLI to use. The library will be refactored to allow the user to pass the struct instead of deducing it using `handler.go`

Tasks:
- [x] Use Python script to generate bindings
- [x] Add the imports into `handler.go`
- [x] Refactor CRIT to receive the struct as an argument",True,109,https://api.github.com/repos/checkpoint-restore/go-criu/pulls/109,https://github.com/checkpoint-restore/go-criu/pull/109,closed,1396,1198,99,4,10,7,0,0,[],2023-03-26 13:53:27+00:00,2023-05-20 08:27:38+00:00,4732451.0,"54 days, 18:34:11","[{'comment_id': 1157312449, 'comment_body': '@snprajwal There are two versions of Go available in the CI virtual environment. `sudo -E` is used to make sure that we compile and run the tests with the same version of Go.', 'comment_created': datetime.datetime(2023, 4, 4, 14, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1167643096, 'comment_body': '@snprajwal Could we also run this test within the [`coverage`](https://github.com/checkpoint-restore/go-criu/blob/83fc1377679b412d169473ed1d58b47a3cf385d7/test/Makefile#L77) target?', 'comment_created': datetime.datetime(2023, 4, 15, 22, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1167893816, 'comment_body': ""Yes, I'll add that there in the next push "", 'comment_created': datetime.datetime(2023, 4, 16, 12, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1189461872, 'comment_body': 'Do you really need this pkill if you use trap?', 'comment_created': datetime.datetime(2023, 5, 10, 7, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1189489381, 'comment_body': 'The trap is triggered only if any of the commands fail. If they all succeed, then we need to kill it with a normal command instead of a trap', 'comment_created': datetime.datetime(2023, 5, 10, 7, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1189501338, 'comment_body': ""What about `trap 'pkill -9 piggie' EXIT TERM`? I think there is a way to use trap also for normal exits of that shell."", 'comment_created': datetime.datetime(2023, 5, 10, 7, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1189538330, 'comment_body': ""Ah yes, just checked, we can use `trap ... INT EXIT TERM`. I'll make the changes and move the commits to a different PR."", 'comment_created': datetime.datetime(2023, 5, 10, 8, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}]","[{'commit_sha': 'e65209ffc21fc82b4e9a43621182e1b0cbecb487', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61f826637cb480f3df7aaedbedbd4590e40e46a3', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '854004d4798e0c3d23afd0fdc6ec12564532361a', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e69417ee38a3a5516ef304baab03bcb083367ce5', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}]",Prajwal S N,71701859,prajwalnadig21@gmail.com,User,,30,,5,56
1367966586,feat: add flag to view process tree,"CRIT already allows us to explore the process tree, file descriptors, memory map, and RSS map for a checkpoint. These features can be integrated with checkpointctl to allow more info to be displayed with `checkpointctl show`. This PR introduces `checkpointctl show --ps-tree` for viewing the process tree.

Here's a sample output of the tree displayed for a single process:

```
Process tree

Container
└── [1]  piggie
```",True,56,https://api.github.com/repos/checkpoint-restore/checkpointctl/pulls/56,https://github.com/checkpoint-restore/checkpointctl/pull/56,closed,966,45,12,3,15,17,0,0,[],2023-05-28 12:48:38+00:00,2023-06-16 08:31:34+00:00,1626176.0,"18 days, 19:42:56","[{'comment_id': 1208552812, 'comment_body': '@snprajwal Could you move this patch in a separate pull request?', 'comment_created': datetime.datetime(2023, 5, 28, 13, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1225384879, 'comment_body': '""checkpoint statistics"" are two words', 'comment_created': datetime.datetime(2023, 6, 10, 14, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1225412924, 'comment_body': ""Ack I think I messed up while rebasing. I'll fix it when I rebase after #61 is merged."", 'comment_created': datetime.datetime(2023, 6, 10, 15, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1226913872, 'comment_body': ""```\r\npodman run -d --name looper busybox /bin/sh -c 'i=0; while true; do echo $i; i=$(expr $i + 1); sleep 1; done'\r\npodman container checkpoint -l --export=/tmp/chkpt.tar.gz\r\n./checkpointctl show --ps-tree /tmp/chkpt.tar.gz\r\n\r\nDisplaying container checkpoint data from /tmp/chkpt.tar.gz\r\n\r\n+-----------+----------------------------------+--------------+---------+---------------------------+--------+------------+\r\n| CONTAINER |              IMAGE               |      ID      | RUNTIME |          CREATED          | ENGINE | CHKPT SIZE |\r\n+-----------+----------------------------------+--------------+---------+---------------------------+--------+------------+\r\n| looper    | docker.io/library/busybox:latest | e2a52f7f5332 | crun    | 2023-06-12T17:14:48+01:00 | Podman | 154.3 KiB  |\r\n+-----------+----------------------------------+--------------+---------+---------------------------+--------+------------+\r\nError: failed to get process tree: Error opening binary file: open /tmp/checkpointctl1506966507/pstree.img: no such file or directory\r\n```"", 'comment_created': datetime.datetime(2023, 6, 12, 16, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1227111681, 'comment_body': 'Ack, figured this out. The temporary directory being created is one level above the checkpoint directory. I need to append that path here.', 'comment_created': datetime.datetime(2023, 6, 12, 18, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1227121139, 'comment_body': ""I tried listing the files present in the temporary directory, and got this:\r\n```\r\n/tmp/checkpointctl65800022/config.dump\r\n/tmp/checkpointctl65800022/spec.dump\r\n/tmp/checkpointctl65800022/stats-dump\r\n```\r\n\r\nIt looks like the checkpoint itself is not being unpacked from the archive at all. I think this could be related to the changes by @behouba in one of the previous PRs. I'll look into it."", 'comment_created': datetime.datetime(2023, 6, 12, 19, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1227127081, 'comment_body': ""Yes, I think this is due to the fact that don't unpack the hole archive any more. For now we are only unpacking `spec.dump` and `config.dump`. Maybe you should unpack the `checkpoint` directory when using `--ps-tree`.\r\n\r\nLook at:\r\n```go\r\nif err := untarFiles(input, dir, metadata.SpecDumpFile, metadata.ConfigDumpFile); err != nil {\r\n\treturn err\r\n}\r\n```"", 'comment_created': datetime.datetime(2023, 6, 12, 19, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1227701142, 'comment_body': 'This works, but this is against the goal I had in mind with the change to only unpack the needed files.\r\n\r\nIf the user requests the process tree, only then should the corresponding files be unpacked. According to the test case below only `pstree.img` and `core-*.img` files are needed. ', 'comment_created': datetime.datetime(2023, 6, 13, 8, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1227704742, 'comment_body': 'I understand what you are trying to do, but I am not sure it actually works as expected. Did you try it out?\r\n\r\nWhen I last used this library, `IncludeFiles` did not work as I expected it during unpacking.', 'comment_created': datetime.datetime(2023, 6, 13, 8, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 1228489516, 'comment_body': 'Last I checked, it worked as expected. Let me double check once more.', 'comment_created': datetime.datetime(2023, 6, 13, 17, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1228492062, 'comment_body': ""Got it, I'll change this. But do note that we will have to add more files as we go along, for the other explore types."", 'comment_created': datetime.datetime(2023, 6, 13, 17, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1229489264, 'comment_body': 'I also agree, depending on what options are used with `checkpointctl show` we can only unpack the needed files.\r\nThis can improve the performance of checkpointctl significantly, as we discussed in https://github.com/checkpoint-restore/checkpointctl/issues/51.', 'comment_created': datetime.datetime(2023, 6, 14, 11, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1229737346, 'comment_body': 'I just cross checked by listing all the files that are unarchived, I can confirm that `IncludeFiles` works as expected. We are unarchiving only the files that we pass, and nothing more.', 'comment_created': datetime.datetime(2023, 6, 14, 14, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1229741648, 'comment_body': 'I have changed it to include the individual files that each feature requires. For now, we are only unarchiving `pstree.img` and `core-*.img` for the process tree. A nifty feature of `IncludeFiles` with `tar` is that it allows us to specify wildcards!', 'comment_created': datetime.datetime(2023, 6, 14, 14, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1229774916, 'comment_body': ""@snprajwal, I have a concern regarding this implementation. It seems that we might be losing the ability to select specific files to extract from the archive. As a result, issue #51 will no longer be fixed.\r\n\r\nI have tested this branch and observed that it unpacks all files from the archive instead. \r\n`IncludeFiles` doesn't work as you may expect . You can look at the source code here https://github.com/containers/storage/blob/main/pkg/archive/archive.go and will see that `IncludeFiles` is  used when creating an archive not when unpacking. "", 'comment_created': datetime.datetime(2023, 6, 14, 15, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'behouba', 'type': 'User'}, {'comment_id': 1229794547, 'comment_body': 'Could we simplify this condition to something like the following?\r\n```Go\r\nif containerName == """" {\r\n\tcontainerName = ""Container""\r\n}\r\ntree = treeprint.NewWithRoot(containerName)\r\n```', 'comment_created': datetime.datetime(2023, 6, 14, 15, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1231127036, 'comment_body': ""Thanks for pointing this out. I realised now that during tests, we move only the required files into the checkpoint folder before creating the archive. Since I used that to test this functionality, it appeared as though only the necessary files are being unpacked. I'll fix this."", 'comment_created': datetime.datetime(2023, 6, 15, 14, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}]","[{'commit_sha': 'f84b5082a2d73a1adf81b3673222d664b262098f', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56dfc8e335bf171751fe30eeb4b2c402e833e48', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a28ac1811b578e0a8007ac5b8d4f42f39a51d63', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}]",Prajwal S N,71701859,prajwalnadig21@gmail.com,User,,30,,5,56
1397065464,feat: display file descriptors,"The file descriptors opened by the processes in the checkpoint can now be viewed with the `--fds` flag. This currently displays the file type, FD, and the path.

An example output for a checkpoint of httpd container (provided by @rst0git):

```
test
├── Image: docker.io/library/httpd:2.4
├── ID: 41ddbcab288ab3d2d119896aa96187b474bbe3084640b6559b0edc0a41f12277
├── Runtime: crun
├── Created: 2023-07-06T09:08:34+01:00
├── Engine: Podman
├── Checkpoint Size: 5.2 MiB
├── Root Fs Diff Size: 2.0 KiB
└── Process tree
    └── [1]  httpd
        ├── [3]  httpd
        │   ├── [REG 0]  /dev/null
        │   ├── [PIPE 1]  pipe[793149]
        │   ├── [PIPE 2]  pipe[793150]
        │   ├── [INETSK 3]  INETSK.36
        │   ├── [INETSK 4]  INETSK.37
        │   ├── [PIPE 5]  pipe[794937]
        │   ├── [PIPE 6]  pipe[794937]
        │   ├── [PIPE 7]  pipe[793149]
        │   ├── [EVENTPOLL 8]  EVENTPOLL.44
        │   ├── [PIPE 9]  pipe[796833]
        │   ├── [PIPE 10]  pipe[796833]
        │   ├── [cwd]  /usr/local/apache2
        │   └── [root]  /
        ├── [4]  httpd
        │   ├── [REG 0]  /dev/null
        │   ├── [PIPE 1]  pipe[793149]
        │   ├── [PIPE 2]  pipe[793150]
        │   ├── [INETSK 3]  INETSK.36
        │   ├── [INETSK 4]  INETSK.37
        │   ├── [PIPE 5]  pipe[794937]
        │   ├── [PIPE 6]  pipe[794937]
        │   ├── [PIPE 7]  pipe[793149]
        │   ├── [EVENTPOLL 8]  EVENTPOLL.49
        │   ├── [PIPE 9]  pipe[789308]
        │   ├── [PIPE 10]  pipe[789308]
        │   ├── [cwd]  /usr/local/apache2
        │   └── [root]  /
        ├── [5]  httpd
        │   ├── [REG 0]  /dev/null
        │   ├── [PIPE 1]  pipe[793149]
        │   ├── [PIPE 2]  pipe[793150]
        │   ├── [INETSK 3]  INETSK.36
        │   ├── [INETSK 4]  INETSK.37
        │   ├── [PIPE 5]  pipe[794937]
        │   ├── [PIPE 6]  pipe[794937]
        │   ├── [PIPE 7]  pipe[793149]
        │   ├── [EVENTPOLL 8]  EVENTPOLL.54
        │   ├── [PIPE 9]  pipe[792449]
        │   ├── [PIPE 10]  pipe[792449]
        │   ├── [cwd]  /usr/local/apache2
        │   └── [root]  /
        ├── [REG 0]  /dev/null
        ├── [PIPE 1]  pipe[793149]
        ├── [PIPE 2]  pipe[793150]
        ├── [INETSK 3]  INETSK.36
        ├── [INETSK 4]  INETSK.37
        ├── [PIPE 5]  pipe[794937]
        ├── [PIPE 6]  pipe[794937]
        ├── [PIPE 7]  pipe[793149]
        ├── [cwd]  /usr/local/apache2
        └── [root]  /
```",True,74,https://api.github.com/repos/checkpoint-restore/checkpointctl/pulls/74,https://github.com/checkpoint-restore/checkpointctl/pull/74,closed,2725,10078,187,1,5,15,0,0,[],2023-06-18 09:39:18+00:00,2023-07-11 12:40:33+00:00,1998075.0,"23 days, 3:01:15","[{'comment_id': 1233254606, 'comment_body': 'What about using `--files` (instead of `--fds`) for better readability?', 'comment_created': datetime.datetime(2023, 6, 18, 11, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1251222158, 'comment_body': 'We intentionally don\'t use ""the"" here because it would suggest that this option is designed to show information about a particular checkpoint. By omitting ""the"", we convey that `--all` is capable of providing information about any container checkpoint, which is aligned with the functionality supporting multiple checkpoints, e.g., `checkpointctl inspect --all *.tar.gz`.', 'comment_created': datetime.datetime(2023, 7, 3, 19, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1251814110, 'comment_body': 'Got it. In that case, ""checkpoints"" would make more sense.', 'comment_created': datetime.datetime(2023, 7, 4, 10, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1254073637, 'comment_body': 'This change is not directly related to the feature displaying file descriptors. Would it be possible to create a new pull request?', 'comment_created': datetime.datetime(2023, 7, 6, 7, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1254075720, 'comment_body': ""Righto, I'll move both the fix commits to a separate PR"", 'comment_created': datetime.datetime(2023, 7, 6, 7, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1254076265, 'comment_body': 'Could you create a new pull request for this patch (fix: capitalisation in tree output)?', 'comment_created': datetime.datetime(2023, 7, 6, 7, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1254097447, 'comment_body': 'Considering the output of this option, the following description might be more appropriate: ""Display a list of open file descriptors for each process""\r\n\r\n\r\nFor example, here is the output for a checkpoint of httpd container:\r\n```\r\ntest\r\n├── Image: docker.io/library/httpd:2.4\r\n├── ID: 41ddbcab288ab3d2d119896aa96187b474bbe3084640b6559b0edc0a41f12277\r\n├── Runtime: crun\r\n├── Created: 2023-07-06T09:08:34+01:00\r\n├── Engine: Podman\r\n├── Checkpoint Size: 5.2 MiB\r\n├── Root Fs Diff Size: 2.0 KiB\r\n└── Process tree\r\n    └── [1]  httpd\r\n        ├── [3]  httpd\r\n        │   ├── [REG 0]  /dev/null\r\n        │   ├── [PIPE 1]  pipe[793149]\r\n        │   ├── [PIPE 2]  pipe[793150]\r\n        │   ├── [INETSK 3]  INETSK.36\r\n        │   ├── [INETSK 4]  INETSK.37\r\n        │   ├── [PIPE 5]  pipe[794937]\r\n        │   ├── [PIPE 6]  pipe[794937]\r\n        │   ├── [PIPE 7]  pipe[793149]\r\n        │   ├── [EVENTPOLL 8]  EVENTPOLL.44\r\n        │   ├── [PIPE 9]  pipe[796833]\r\n        │   ├── [PIPE 10]  pipe[796833]\r\n        │   ├── [cwd]  /usr/local/apache2\r\n        │   └── [root]  /\r\n        ├── [4]  httpd\r\n        │   ├── [REG 0]  /dev/null\r\n        │   ├── [PIPE 1]  pipe[793149]\r\n        │   ├── [PIPE 2]  pipe[793150]\r\n        │   ├── [INETSK 3]  INETSK.36\r\n        │   ├── [INETSK 4]  INETSK.37\r\n        │   ├── [PIPE 5]  pipe[794937]\r\n        │   ├── [PIPE 6]  pipe[794937]\r\n        │   ├── [PIPE 7]  pipe[793149]\r\n        │   ├── [EVENTPOLL 8]  EVENTPOLL.49\r\n        │   ├── [PIPE 9]  pipe[789308]\r\n        │   ├── [PIPE 10]  pipe[789308]\r\n        │   ├── [cwd]  /usr/local/apache2\r\n        │   └── [root]  /\r\n        ├── [5]  httpd\r\n        │   ├── [REG 0]  /dev/null\r\n        │   ├── [PIPE 1]  pipe[793149]\r\n        │   ├── [PIPE 2]  pipe[793150]\r\n        │   ├── [INETSK 3]  INETSK.36\r\n        │   ├── [INETSK 4]  INETSK.37\r\n        │   ├── [PIPE 5]  pipe[794937]\r\n        │   ├── [PIPE 6]  pipe[794937]\r\n        │   ├── [PIPE 7]  pipe[793149]\r\n        │   ├── [EVENTPOLL 8]  EVENTPOLL.54\r\n        │   ├── [PIPE 9]  pipe[792449]\r\n        │   ├── [PIPE 10]  pipe[792449]\r\n        │   ├── [cwd]  /usr/local/apache2\r\n        │   └── [root]  /\r\n        ├── [REG 0]  /dev/null\r\n        ├── [PIPE 1]  pipe[793149]\r\n        ├── [PIPE 2]  pipe[793150]\r\n        ├── [INETSK 3]  INETSK.36\r\n        ├── [INETSK 4]  INETSK.37\r\n        ├── [PIPE 5]  pipe[794937]\r\n        ├── [PIPE 6]  pipe[794937]\r\n        ├── [PIPE 7]  pipe[793149]\r\n        ├── [cwd]  /usr/local/apache2\r\n        └── [root]  /\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 6, 8, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1258110151, 'comment_body': 'The convention for comments in Go is to use C++-style `//` line comments.\r\nhttps://go.dev/doc/effective_go#commentary', 'comment_created': datetime.datetime(2023, 7, 10, 11, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1258127650, 'comment_body': 'Hmm, in ExploreFds() we have the following code:\r\n\r\n```Go\r\npID := process.GetPid()\r\n// Get file with object IDs\r\nidsImg, err := getImg(filepath.Join(c.inputDirPath, fmt.Sprintf(""ids-%d.img"", pID)), &criu_core.TaskKobjIdsEntry{})\r\nif err != nil {\r\n\treturn nil, err\r\n}\r\nfilesID := idsImg.Entries[0].Message.(*criu_core.TaskKobjIdsEntry).GetFilesId()\r\n// Get open file descriptors\r\nfdInfoImg, err := getImg(filepath.Join(c.inputDirPath, fmt.Sprintf(""fdinfo-%d.img"", filesID)), &fdinfo.FdinfoEntry{})\r\nif err != nil {\r\n\treturn nil, err\r\n}\r\n\r\nfdEntry := Fd{PId: pID}\r\n```\r\n\r\nWhy `tree.FindByMeta(fd.PId)` would return `nil`?', 'comment_created': datetime.datetime(2023, 7, 10, 11, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1258136127, 'comment_body': 'Since it was a comment explaining an internal function, I thought it would make more sense to use a multi-line comment to differentiate it from doc comment. Will change this.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1258138758, 'comment_body': ""This is twofold. Firstly, in case we have an invalid checkpoint, and still successfully make it to this stage, if `tree.FindByMeta()` does not find the node and returns nil, it will cause a panic due to nil pointer dereference. This can be handled more gracefully by checking for the nil value.\r\nSecondly, this is related to the change in #87 - if we prune the process tree for a particular PID, the other PID nodes will not be present. Hence, for those PID's file descriptors, `tree.FindByMeta()` will return nil."", 'comment_created': datetime.datetime(2023, 7, 10, 11, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1258163894, 'comment_body': "">   in case we have an invalid checkpoint, and still successfully make it to this stage, if tree.FindByMeta() does not find the node and returns nil, it will cause a panic due to nil pointer dereference. This can be handled more gracefully by checking for the nil value.\r\n\r\nIf CRIU fails, the container engine (CRI-O/Podman) is not going to create a checkpoint archive. It might be better to show an appropriate error message instead of silently ignoring this.\r\n\r\n> Secondly, this is related to the change in https://github.com/checkpoint-restore/checkpointctl/pull/87 - if we prune the process tree for a particular PID, the other PID nodes will not be present. Hence, for those PID's file descriptors, tree.FindByMeta() will return nil.\r\n\r\nTo enable process tree output for specified PID we can introduce a similar change in #87. For example, it might be more efficient to pass the value specified with `--pid` as a parameter to `addFdsToTree()` and use something like the following:\r\n```Go\r\nif pid != fd.PId {\r\n\tcontinue\r\n}\r\n```"", 'comment_created': datetime.datetime(2023, 7, 10, 12, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1258172022, 'comment_body': '> It might be more efficient to pass the value specified with --pid as a parameter to addFdsToTree() and use something like the following\r\n\r\nWhen we filter by PID, we still retain the children of this PID in the tree output. So, if we use something like `if pID != fd.PId`, we will end up skipping the file descriptors for the child processes.', 'comment_created': datetime.datetime(2023, 7, 10, 12, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1258175039, 'comment_body': 'If you prefer, I can revert this change, and wait until this PR is merged. Since the change is directly related to #87, I can introduce this there after rebasing. What do you think?', 'comment_created': datetime.datetime(2023, 7, 10, 12, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1258185360, 'comment_body': 'It would make sense to introduce this change in #87 after rebase.', 'comment_created': datetime.datetime(2023, 7, 10, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}]","[{'commit_sha': '064f017bed517ee4aa1d6929b2642a961ffa8230', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}]",Prajwal S N,71701859,prajwalnadig21@gmail.com,User,,30,,5,56
1439198907,feat(crit): add `crit x sk` for sockets,"This is useful for implementing socket views in checkpointctl, going forward.",True,138,https://api.github.com/repos/checkpoint-restore/go-criu/pulls/138,https://github.com/checkpoint-restore/go-criu/pull/138,closed,319,23,7,4,1,18,0,0,[],2023-07-18 12:55:15+00:00,2023-08-07 19:24:54+00:00,1751379.0,"20 days, 6:29:39","[{'comment_id': 1269426766, 'comment_body': 'To preserve compatibility with the Python version of `crit`, should we accept both `mems` and `mem`?\r\nExample:\r\n```Go\r\ncase ""mem"":\r\n        fallthrough\r\ncase ""mems"":\r\n        xData, err = c.ExploreMems()\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 20, 13, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1280244959, 'comment_body': 'This commit is not directly related to the `crit x sk` feature. It might be good to move it in another PR.', 'comment_created': datetime.datetime(2023, 8, 1, 7, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1280245513, 'comment_body': '```Suggestion\r\nCRIT_CLI ?= cmd/main.go\r\n```', 'comment_created': datetime.datetime(2023, 8, 1, 7, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1280248654, 'comment_body': ""```Suggestion\r\nCRIT_SRC := $(shell find . -type f -name '*.go')\r\n```"", 'comment_created': datetime.datetime(2023, 8, 1, 8, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1280249834, 'comment_body': 'This change is not directly related to the renaming of `fds|mems` to `fd|mem`. It should be in a separate commit.', 'comment_created': datetime.datetime(2023, 8, 1, 8, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1280414836, 'comment_body': ""I used `=` instead of `?=` since I felt it's reasonable to assume that we won't override this variable, unlike others. The CLI entrypoint will always be consistent, so I didn't see the need for `?=`."", 'comment_created': datetime.datetime(2023, 8, 1, 10, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1280470180, 'comment_body': 'Sure, perhaps we should use [simple](https://www.gnu.org/software/make/manual/html_node/Simple-Assignment.html) (`:=`) instead of [recursive](https://www.gnu.org/software/make/manual/html_node/Recursive-Assignment.html) (`=`) assignment?', 'comment_created': datetime.datetime(2023, 8, 1, 11, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1280472723, 'comment_body': 'Changed and pushed in #141 ', 'comment_created': datetime.datetime(2023, 8, 1, 11, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1281889902, 'comment_body': 'It might be good to move this code just before the `switch` statement to avoid code duplication.\r\n```Go\r\nfile, err := getFile(c.inputDirPath, fdInfo.GetId())\r\nif err != nil {\r\n\treturn nil, err\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 8, 2, 13, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1281923746, 'comment_body': 'It might be better to use `FdType` here to avoid confusion between the fdInfo *type* and socket *type*.', 'comment_created': datetime.datetime(2023, 8, 2, 13, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1281926323, 'comment_body': 'It might be better to use `socket.Type` for the value of `GetType()` instead of `socket.Protocol` to avoid confusion.\r\n\r\nFor instance, socket types are `SOCK_STREAM = 1`,  `SOCK_DGRAM = 2`, `SOCK_RAW = 3`, etc. (see `man 2 socket`)', 'comment_created': datetime.datetime(2023, 8, 2, 13, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1281947728, 'comment_body': 'For example, something like the following:\r\n\r\n```Go\r\n...\r\nsocket.Type = getSkType(isk.GetType())\r\n...\r\n\r\nfunc getSkType(skType uint32) string {\r\n\tswitch skType {\r\n\tcase syscall.SOCK_STREAM:\r\n\t\treturn ""STREAM""\r\n\tcase syscall.SOCK_DGRAM:\r\n\t\treturn ""DGRAM""\r\n\tcase syscall.SOCK_RAW:\r\n\t\treturn ""RAW""\r\n\tcase syscall.SOCK_SEQPACKET:\r\n\t\treturn ""SEQPACKET""\r\n\t...\r\n\tdefault:\r\n\t\treturn ""unknown""\r\n\t}\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 8, 2, 13, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1283739381, 'comment_body': 'What about something like the following?\r\n```Go\r\n// TCPState represents the state of a TCP connection.\r\ntype TCPState uint8\r\n\r\n// https://github.com/torvalds/linux/blob/999f6631/include/net/tcp_states.h#L12\r\nconst (\r\n\tTCP_ESTABLISHED TCPState = iota + 1\r\n\tTCP_SYN_SENT\r\n\tTCP_SYN_RECEIVED\r\n\tTCP_FIN_WAIT_1\r\n\tTCP_FIN_WAIT_2\r\n\tTCP_TIME_WAIT\r\n\tTCP_CLOSE\r\n\tTCP_CLOSE_WAIT\r\n\tTCP_LAST_ACK\r\n\tTCP_LISTEN\r\n\tTCP_CLOSING\r\n        TCP_NEW_SYN_RECV\r\n)\r\n\r\nvar tcpStateNames = map[TCPState]string{\r\n\tTCP_ESTABLISHED: ""ESTABLISHED"",\r\n\tTCP_SYN_SENT:    ""SYN_SENT"",\r\n\tTCP_SYN_RECEIVED: ""SYN_RECEIVED"",\r\n\tTCP_FIN_WAIT_1:   ""FIN_WAIT_1"",\r\n\tTCP_FIN_WAIT_2:   ""FIN_WAIT_2"",\r\n\tTCP_TIME_WAIT:   ""TIME_WAIT"",\r\n\tTCP_CLOSE:       ""CLOSE"",\r\n\tTCP_CLOSE_WAIT:  ""CLOSE_WAIT"",\r\n\tTCP_LAST_ACK:    ""LAST_ACK"",\r\n\tTCP_LISTEN:      ""LISTEN"",\r\n\tTCP_CLOSING:     ""CLOSING"",\r\n        TCP_NEW_SYN_RECV: ""TCP_NEW_SYN_RECV"",\r\n}\r\n\r\nfunc getSkState(state TCPState) string {\r\n\tname, found := tcpStateNames[state]\r\n\tif found {\r\n\t\treturn name\r\n\t}\r\n\treturn ""UNKNOWN""\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 21, 30, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1283759217, 'comment_body': '`AF` is an abbreviation for ""Address Family""\r\n```Suggestion\r\nfunc getAddressFamily(family uint32) string {\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 21, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1283770727, 'comment_body': 'Would it make sense to also add `Protocol`? For example, something like the following: \r\n```Go\r\nProtocol string `json:""proto,omitempty""`\r\n```\r\n```Go\r\nsocket.Protocol = getProto(isk.GetProto())\r\n```\r\n```Go\r\nfunc getProto(proto uint32) string {\r\n\tswitch proto {\r\n\tcase syscall.IPPROTO_ICMP:\r\n\t\treturn ""ICMP""\r\n\tcase syscall.IPPROTO_ICMPV6:\r\n\t\treturn ""ICMPV6""\r\n\tcase syscall.IPPROTO_IGMP:\r\n\t\treturn ""IGMP""\r\n\tcase syscall.IPPROTO_RAW:\r\n\t\treturn ""RAW""\r\n\tcase syscall.IPPROTO_TCP:\r\n\t\treturn ""TCP""\r\n\tcase syscall.IPPROTO_UDP:\r\n\t\treturn ""UDP""\r\n\tcase syscall.IPPROTO_UDPLITE:\r\n\t\treturn ""UDPLITE""\r\n\tdefault:\r\n\t\treturn """"\r\n\t}\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 22, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1284591841, 'comment_body': 'Ah so protocol is shortened to `proto`. I mistook that to be the descriptor for the protobuf definition :sweat_smile: ', 'comment_created': datetime.datetime(2023, 8, 4, 15, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1284869187, 'comment_body': 'Would it be possible to add unit tests for this function with IPv4 and IPv6 addresses?', 'comment_created': datetime.datetime(2023, 8, 4, 21, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1285107141, 'comment_body': ""Yes that makes sense. I'll add it, and look into adding it for any other utility functions too if possible."", 'comment_created': datetime.datetime(2023, 8, 5, 18, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}]","[{'commit_sha': '4e55d6fbfa8c03d1b6ed8779f2710fbbbaa92bd3', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5963a5141c28a0c22bd4f2d95f4f7cb8bee15d60', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82838bceaf4b90d3146869b8edf8826d0452e7c3', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3591115b1df3bc3c6258035110c2b2854d8ac760', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}]",Prajwal S N,71701859,prajwalnadig21@gmail.com,User,,30,,5,56
1427211752,feat: filter by PID in process tree,"Currently, the entire process tree is rendered in the tree view. This allows for the tree to be pruned for a specific process using the `--pid` or `-p` flag.

Fixes #86",True,87,https://api.github.com/repos/checkpoint-restore/checkpointctl/pulls/87,https://github.com/checkpoint-restore/checkpointctl/pull/87,closed,74,3,3,1,3,14,0,0,[],2023-07-10 10:08:58+00:00,2023-07-20 07:06:26+00:00,853048.0,"9 days, 20:57:28","[{'comment_id': 1261392318, 'comment_body': 'For consistency, it might be better to use C++-style comment here (`//`).', 'comment_created': datetime.datetime(2023, 7, 12, 15, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1261396093, 'comment_body': ""My bad, I carried the change over from the previous PR. This wasn't supposed to be there."", 'comment_created': datetime.datetime(2023, 7, 12, 15, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1261396600, 'comment_body': 'Do we need to check if `dfs == nil`?', 'comment_created': datetime.datetime(2023, 7, 12, 15, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1261397944, 'comment_body': ""I don't think so, we don't care about the cases where the PID doesn't match"", 'comment_created': datetime.datetime(2023, 7, 12, 16, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1261399766, 'comment_body': ""If you're asking about the nil check for line 132, we're doing it in the next line and reporting an error if we don't find any process with the specified PID."", 'comment_created': datetime.datetime(2023, 7, 12, 16, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1261408965, 'comment_body': 'when using this functionality in combination with `--files` checkpointctl fails with\r\n```\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x20 pc=0x6daa04]\r\n\r\ngoroutine 1 [running]:\r\nmain.addFdsToTree({0x820218, 0xc000036040}, {0xc000115ee0, 0x4, 0x816c74?})\r\n\t/home/radostin/go/src/github.com/checkpoint-restore/checkpointctl/tree.go:160 +0x144\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 16, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1261506992, 'comment_body': 'Should be fixed now :eyes: ', 'comment_created': datetime.datetime(2023, 7, 12, 17, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1262163214, 'comment_body': 'Should we automatically set `psTree = true` when the `--pid` options is used?', 'comment_created': datetime.datetime(2023, 7, 13, 7, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1262166378, 'comment_body': "":thinking: I don't think we should, because the `--pid` option is not exclusive to `--ps-tree`. It works with the child flags too, like `--files`. If `--pid` is passed without any flag that generates a process tree, we should do nothing, IMO."", 'comment_created': datetime.datetime(2023, 7, 13, 7, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1262168604, 'comment_body': 'What about something like ""Display the process tree of a specific PID""?', 'comment_created': datetime.datetime(2023, 7, 13, 7, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1262171017, 'comment_body': 'Would it make sense to extend this message to also show the available PIDs?', 'comment_created': datetime.datetime(2023, 7, 13, 7, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1262173488, 'comment_body': ""It would work well for smaller checkpoints, but I'm unsure about how we can manage the output for bigger process trees. Either way, wouldn't it be trivial for the user to run `checkpointctl inspect --ps-tree` to see the available PIDs before using the PID flag?"", 'comment_created': datetime.datetime(2023, 7, 13, 8, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1262205103, 'comment_body': 'Sure with `--ps-tree` and `--files` we generate a process tree, while `--pid <PID>` can be used as a filter. It would be easier to use when the default behaviour is to show a process tree without the need to explicitly specify `--ps-tree`.\r\n```\r\ncheckpointctl inspect --pid 5 /tmp/checkpoint.tar.gz\r\ncheckpointctl inspect --files --pid 5 /tmp/checkpoint.tar.gz\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 8, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1262214131, 'comment_body': 'It makes sense. Should we add something like the following to the error message?\r\n> Use `checkpointctl inspect --ps-tree` to list available PIDs', 'comment_created': datetime.datetime(2023, 7, 13, 8, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}]","[{'commit_sha': '0e8d1b440f9b6a8b7512275c530416e342e575cc', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}]",Prajwal S N,71701859,prajwalnadig21@gmail.com,User,,30,,5,56
1454315602,feat: display sockets in process tree,This is now supported with the `--sockets` flag.,True,94,https://api.github.com/repos/checkpoint-restore/checkpointctl/pulls/94,https://github.com/checkpoint-restore/checkpointctl/pull/94,closed,108,4,3,1,6,6,0,0,[],2023-07-28 19:13:00+00:00,2023-08-14 16:43:48+00:00,1459848.0,"16 days, 21:30:48","[{'comment_id': 1288507064, 'comment_body': 'There might be different types of sockets and we need show the appropriate information for each socket type (similar to [explore sk](https://github.com/checkpoint-restore/go-criu/blob/2210c022f3aafaaddc22a0f7d3bd03a78b973ba1/crit/explore.go#L433L475) in CRIT).\r\n', 'comment_created': datetime.datetime(2023, 8, 9, 13, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1291232844, 'comment_body': '`socket.Protocol` is not set for Unix sockets.\r\n```\r\njira\r\n├── Image: docker.io/atlassian/jira-software:latest\r\n├── ID: 3f731c3a3951e25cc6509a3d49d7e8b799dc14dec4a96abb95e1ece55fb1692c\r\n├── Runtime: crun\r\n├── Created: 2023-08-11T10:24:48+01:00\r\n├── Engine: Podman\r\n├── Checkpoint size: 495.1 MiB\r\n├── Root FS diff size: 74.5 KiB\r\n└── Process tree\r\n    └── [1]  tini\r\n        └── [2]  java\r\n            ├── [STREAM ()]   [ESTABLISHED]\r\n            ├── [STREAM (TCP)]  :::8080 -> :::0 [LISTEN]\r\n            ├── [STREAM ()]   [ESTABLISHED]\r\n            └── [STREAM (TCP)]  7f00:1:::8005 -> :::0 [LISTEN]\r\n```', 'comment_created': datetime.datetime(2023, 8, 11, 11, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1291243710, 'comment_body': 'Should we display buffer size here?\r\n```Go\r\ndata = fmt.Sprintf(""%s:%d -> %s:%d [%s] (↑ %s ↓ %s)"", socket.SrcAddr, socket.SrcPort, socket.DestAddr,\r\n            socket.DestPort, socket.State, socket.SendBuf, socket.RecvBuf)\r\n```\r\n```\r\niperf-client\r\n├── Image: docker.io/networkstatic/iperf3:latest\r\n├── ID: 9a6e7537045cf536d00fc28072e092db92f7339d84fc1481172cbdda37e8aebb\r\n├── Runtime: crun\r\n├── Created: 2023-08-11T12:38:31+01:00\r\n├── Engine: Podman\r\n├── Checkpoint size: 393.3 KiB\r\n└── Process tree\r\n    └── [1]  iperf3\r\n        ├── [STREAM (TCP)]  10.88.0.48:37930 -> 10.88.0.46:5201 [ESTABLISHED] (↑ 85.0 KB ↓ 128.0 KB)\r\n        └── [DGRAM (UDP)]  10.88.0.48:57071 -> 10.88.0.46:5201 [ESTABLISHED] (↑ 256.0 MB ↓ 256.0 MB)\r\n```\r\n\r\nI think it would make sense to show `socket.State` only when `socket.Protocol` is `TCP` (i.e., `UDP` is considered to be stateless protocol).', 'comment_created': datetime.datetime(2023, 8, 11, 11, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1291701585, 'comment_body': 'Oops my bad, will get rid of that', 'comment_created': datetime.datetime(2023, 8, 11, 19, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'snprajwal', 'type': 'User'}, {'comment_id': 1292880170, 'comment_body': '```Suggestion\r\n                               data := socket.SrcAddr\r\n                               if len(data) == 0 {\r\n                                       // An abstract socket address\r\n                                       data = ""@""\r\n                               }\r\n                               node.AddMetaBranch(fmt.Sprintf(""UNIX (%s)"", socket.Type), data)\r\n```', 'comment_created': datetime.datetime(2023, 8, 13, 23, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 1292880765, 'comment_body': '```diff\r\n                for _, socket := range sk.Sockets {\r\n+                       var protocol = socket.Protocol\r\n                        switch socket.FdType {\r\n                        case ""UNIXSK"":\r\n                                // UNIX sockets do not have a protocol assigned.\r\n@@ -204,18 +205,16 @@ func addSkToTree(tree treeprint.Tree, sks []*crit.Sk) {\r\n                                node.AddMetaBranch(socket.Type, socket.SrcAddr)\r\n                                continue\r\n                        case ""INETSK"":\r\n-                               var state string\r\n-                               if socket.Protocol == ""TCP"" {\r\n+                               if protocol == ""TCP"" {\r\n                                        // Create state string like ""[ESTABLISHED] "".\r\n                                        // The trailing space is used to pad the state\r\n                                        // before the buffer size is printed.\r\n-                                       state = ""["" + socket.State + ""] ""\r\n+                                       protocol = fmt.Sprintf(""%s (%s)"", protocol, socket.State)\r\n                                }\r\n                                data = fmt.Sprintf(\r\n-                                       ""%s:%d -> %s:%d %s(↑ %s ↓ %s)"",\r\n+                                       ""%s:%d -> %s:%d (↑ %s ↓ %s)"",\r\n                                        socket.SrcAddr, socket.SrcPort,\r\n                                        socket.DestAddr, socket.DestPort,\r\n-                                       state,\r\n                                        socket.SendBuf, socket.RecvBuf,\r\n                                )\r\n                        case ""PACKETSK"":\r\n@@ -224,7 +223,7 @@ func addSkToTree(tree treeprint.Tree, sks []*crit.Sk) {\r\n                                data = fmt.Sprintf(""↑ %s ↓ %s"", socket.SendBuf, socket.RecvBuf)\r\n                        }\r\n \r\n-                       node.AddMetaBranch(fmt.Sprintf(""%s (%s)"", socket.Type, socket.Protocol), data)\r\n+                       node.AddMetaBranch(protocol, data)\r\n```\r\nExamples:\r\n```console\r\niperf-client\r\n├── Image: docker.io/networkstatic/iperf3:latest\r\n├── ID: 6312a4ee1c503de61e25cf5c27468894d99c0a97614919ab27f3ae4d765aa1b2\r\n├── Runtime: crun\r\n├── Created: 2023-08-14T00:52:42+01:00\r\n├── Engine: Podman\r\n├── Checkpoint size: 385.3 KiB\r\n└── Process tree\r\n    └── [1]  iperf3\r\n        ├── [TCP (ESTABLISHED)]  10.88.0.8:43720 -> 10.88.0.7:5201 (↑ 85.0 KB ↓ 128.0 KB)\r\n        └── [UDP]  10.88.0.8:43468 -> 10.88.0.7:5201 (↑ 256.0 MB ↓ 256.0 MB)\r\n```\r\n```console\r\njira\r\n├── Image: docker.io/atlassian/jira-software:latest\r\n├── ID: 6fdd46a060e75c7ab5b50e4d3d4bd1a974a5d94acf1ea86e09970fe73119a9b9\r\n├── Runtime: crun\r\n├── Created: 2023-08-14T00:21:34+01:00\r\n├── Engine: Podman\r\n├── Checkpoint size: 605.0 MiB\r\n├── Root FS diff size: 176.5 KiB\r\n└── Process tree\r\n    └── [1]  tini\r\n        └── [2]  java\r\n            ├── [TCP (ESTABLISHED)]  a58:5:::8080 -> a58:1:::42584 (↑ 85.0 KB ↓ 128.0 KB)\r\n            ├── [UNIX (STREAM)]  @\r\n            ├── [TCP (LISTEN)]  :::8080 -> :::0 (↑ 16.0 KB ↓ 128.0 KB)\r\n            ├── [UNIX (STREAM)]  @\r\n            ├── [TCP (LISTEN)]  7f00:1:::8005 -> :::0 (↑ 16.0 KB ↓ 128.0 KB)\r\n            ├── [TCP (ESTABLISHED)]  a58:5:::8080 -> a58:1:::42592 (↑ 85.0 KB ↓ 128.0 KB)\r\n            ├── [TCP (ESTABLISHED)]  a58:5:::8080 -> a58:1:::42608 (↑ 85.0 KB ↓ 128.0 KB)\r\n            ├── [TCP (ESTABLISHED)]  a58:5:::8080 -> a58:1:::42610 (↑ 85.0 KB ↓ 128.0 KB)\r\n            └── [TCP (ESTABLISHED)]  a58:5:::8080 -> a58:1:::42614 (↑ 85.0 KB ↓ 128.0 KB)\r\n```\r\n\r\n```console\r\npostgres\r\n├── Image: docker.io/library/postgres:latest\r\n├── ID: b5a13117175120f2dc8f5569ee8200521a65731784a67c94c329fdde3465adb5\r\n├── Runtime: crun\r\n├── Created: 2023-08-14T00:32:15+01:00\r\n├── Engine: Podman\r\n├── Checkpoint size: 25.0 MiB\r\n├── Root FS diff size: 2.0 KiB\r\n└── Process tree\r\n    └── [1]  postgres\r\n        ├── [60]  postgres\r\n        ├── [55]  postgres\r\n        ├── [56]  postgres\r\n        ├── [58]  postgres\r\n        ├── [59]  postgres\r\n        ├── [TCP (LISTEN)]  0.0.0.0:5432 -> 0.0.0.0:0 (↑ 16.0 KB ↓ 128.0 KB)\r\n        ├── [TCP (LISTEN)]  :::5432 -> :::0 (↑ 16.0 KB ↓ 128.0 KB)\r\n        └── [UNIX (STREAM)]  /var/run/postgresql/.s.PGSQL.5432\r\n```', 'comment_created': datetime.datetime(2023, 8, 13, 23, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}]","[{'commit_sha': '4ff6bb7d7daeceda24d962ccd3921c060ef50106', 'committer_username': 'snprajwal', 'committer_name': 'Prajwal S N', 'committer_email': 'prajwalnadig21@gmail.com', 'commit_date': datetime.datetime(2020, 9, 22, 10, 29, tzinfo=datetime.timezone.utc)}]",Prajwal S N,71701859,prajwalnadig21@gmail.com,User,,30,,5,56

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
152456668,go-criu,checkpoint-restore/go-criu,Go,43,161,10,15,361,2,1,0,"[{'id': 1943202020, 'number': 177, 'closed': datetime.datetime(2024, 7, 17, 10, 24, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 27, 21, 32, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1687930.0, 'time_delta': '19 days, 12:52:10', 'additions': 170, 'deletions': 234, 'state': 'closed'}, {'id': 1772892124, 'number': 168, 'closed': datetime.datetime(2024, 3, 15, 7, 44, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 14, 19, 37, 57, tzinfo=datetime.timezone.utc), 'time_taken': 43574.0, 'time_delta': '12:06:14', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1771867511, 'number': 166, 'closed': datetime.datetime(2024, 3, 14, 11, 44, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 14, 10, 34, 6, tzinfo=datetime.timezone.utc), 'time_taken': 4229.0, 'time_delta': '1:10:29', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 1657759004, 'number': 158, 'closed': datetime.datetime(2023, 12, 28, 21, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 27, 7, 20, 18, tzinfo=datetime.timezone.utc), 'time_taken': 136722.0, 'time_delta': '1 day, 13:58:42', 'additions': 19, 'deletions': 19, 'state': 'closed'}, {'id': 1651665613, 'number': 157, 'closed': datetime.datetime(2023, 12, 21, 8, 0, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 20, 8, 41, 12, tzinfo=datetime.timezone.utc), 'time_taken': 83934.0, 'time_delta': '23:18:54', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1582816194, 'number': 153, 'closed': datetime.datetime(2023, 11, 1, 15, 34, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 1, 14, 58, 46, tzinfo=datetime.timezone.utc), 'time_taken': 2166.0, 'time_delta': '0:36:06', 'additions': 21, 'deletions': 21, 'state': 'closed'}, {'id': 1507345916, 'number': 149, 'closed': datetime.datetime(2023, 9, 8, 13, 31, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 8, 6, 54, 27, tzinfo=datetime.timezone.utc), 'time_taken': 23795.0, 'time_delta': '6:36:35', 'additions': 195, 'deletions': 194, 'state': 'closed'}, {'id': 1457827939, 'number': 141, 'closed': datetime.datetime(2023, 8, 1, 15, 38, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 1, 10, 32, 8, tzinfo=datetime.timezone.utc), 'time_taken': 18405.0, 'time_delta': '5:06:45', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 1443305029, 'number': 139, 'closed': datetime.datetime(2023, 7, 22, 8, 38, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 20, 17, 19, 52, tzinfo=datetime.timezone.utc), 'time_taken': 141496.0, 'time_delta': '1 day, 15:18:16', 'additions': 382, 'deletions': 319, 'state': 'closed'}, {'id': 1439198907, 'number': 138, 'closed': datetime.datetime(2023, 8, 7, 19, 24, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 18, 12, 55, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1751379.0, 'time_delta': '20 days, 6:29:39', 'additions': 319, 'deletions': 23, 'state': 'closed'}, {'id': 1408465323, 'number': 134, 'closed': datetime.datetime(2023, 7, 5, 15, 52, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 26, 18, 33, 4, tzinfo=datetime.timezone.utc), 'time_taken': 767963.0, 'time_delta': '8 days, 21:19:23', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 1347435165, 'number': 131, 'closed': datetime.datetime(2023, 5, 13, 14, 47, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 11, 17, 0, 5, tzinfo=datetime.timezone.utc), 'time_taken': 164833.0, 'time_delta': '1 day, 21:47:13', 'additions': 18, 'deletions': 17, 'state': 'closed'}, {'id': 1318596214, 'number': 128, 'closed': datetime.datetime(2023, 4, 26, 18, 14, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 18, 15, 48, 5, tzinfo=datetime.timezone.utc), 'time_taken': 699958.0, 'time_delta': '8 days, 2:25:58', 'additions': 65, 'deletions': 64, 'state': 'closed'}, {'id': 1305764608, 'number': 114, 'closed': datetime.datetime(2023, 4, 15, 7, 35, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 7, 10, 16, 6, tzinfo=datetime.timezone.utc), 'time_taken': 681553.0, 'time_delta': '7 days, 21:19:13', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 1291615896, 'number': 111, 'closed': datetime.datetime(2023, 3, 27, 16, 29, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 27, 16, 0, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1733.0, 'time_delta': '0:28:53', 'additions': 32, 'deletions': 8, 'state': 'closed'}, {'id': 1290353719, 'number': 109, 'closed': datetime.datetime(2023, 5, 20, 8, 27, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 26, 13, 53, 27, tzinfo=datetime.timezone.utc), 'time_taken': 4732451.0, 'time_delta': '54 days, 18:34:11', 'additions': 1396, 'deletions': 1198, 'state': 'closed'}, {'id': 1290264611, 'number': 108, 'closed': datetime.datetime(2023, 3, 27, 15, 4, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 26, 7, 47, 59, tzinfo=datetime.timezone.utc), 'time_taken': 112565.0, 'time_delta': '1 day, 7:16:05', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 1084973463, 'number': 98, 'closed': datetime.datetime(2022, 10, 13, 11, 12, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 12, 16, 59, 26, tzinfo=datetime.timezone.utc), 'time_taken': 65562.0, 'time_delta': '18:12:42', 'additions': 6, 'deletions': 592, 'state': 'closed'}, {'id': 1047438069, 'number': 93, 'closed': datetime.datetime(2022, 9, 6, 16, 26, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 6, 11, 30, 26, tzinfo=datetime.timezone.utc), 'time_taken': 17751.0, 'time_delta': '4:55:51', 'additions': 7, 'deletions': 2, 'state': 'closed'}, {'id': 1045643428, 'number': 91, 'closed': datetime.datetime(2022, 9, 5, 20, 58, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 4, 7, 32, 1, tzinfo=datetime.timezone.utc), 'time_taken': 134774.0, 'time_delta': '1 day, 13:26:14', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1045435747, 'number': 90, 'closed': datetime.datetime(2022, 9, 5, 16, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 3, 9, 8, 36, tzinfo=datetime.timezone.utc), 'time_taken': 199764.0, 'time_delta': '2 days, 7:29:24', 'additions': 3020, 'deletions': 2872, 'state': 'closed'}, {'id': 1045430202, 'number': 89, 'closed': datetime.datetime(2022, 9, 4, 7, 58, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 3, 8, 27, 55, tzinfo=datetime.timezone.utc), 'time_taken': 84662.0, 'time_delta': '23:31:02', 'additions': 97, 'deletions': 17, 'state': 'closed'}, {'id': 1042717765, 'number': 88, 'closed': datetime.datetime(2022, 8, 31, 19, 9, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 31, 18, 30, 39, tzinfo=datetime.timezone.utc), 'time_taken': 2307.0, 'time_delta': '0:38:27', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1028426571, 'number': 87, 'closed': datetime.datetime(2022, 8, 31, 16, 48, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 17, 7, 20, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1243730.0, 'time_delta': '14 days, 9:28:50', 'additions': 75, 'deletions': 3131, 'state': 'closed'}, {'id': 1026143793, 'number': 85, 'closed': datetime.datetime(2022, 8, 15, 7, 54, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 15, 7, 32, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1304.0, 'time_delta': '0:21:44', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 1024857997, 'number': 84, 'closed': datetime.datetime(2022, 8, 15, 7, 43, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 12, 11, 43, 29, tzinfo=datetime.timezone.utc), 'time_taken': 244777.0, 'time_delta': '2 days, 19:59:37', 'additions': 15, 'deletions': 7, 'state': 'closed'}, {'id': 1024214466, 'number': 83, 'closed': datetime.datetime(2022, 8, 12, 8, 27, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 11, 18, 59, 25, tzinfo=datetime.timezone.utc), 'time_taken': 48473.0, 'time_delta': '13:27:53', 'additions': 236, 'deletions': 31, 'state': 'closed'}, {'id': 1012629278, 'number': 78, 'closed': datetime.datetime(2022, 7, 31, 4, 40, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 30, 11, 31, 39, tzinfo=datetime.timezone.utc), 'time_taken': 61725.0, 'time_delta': '17:08:45', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 1010630239, 'number': 77, 'closed': datetime.datetime(2022, 7, 28, 18, 24, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 28, 10, 16, 16, tzinfo=datetime.timezone.utc), 'time_taken': 29279.0, 'time_delta': '8:07:59', 'additions': 58, 'deletions': 8, 'state': 'closed'}, {'id': 1005690955, 'number': 76, 'closed': datetime.datetime(2022, 8, 11, 8, 38, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 11, 30, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1717640.0, 'time_delta': '19 days, 21:07:20', 'additions': 405, 'deletions': 29, 'state': 'closed'}, {'id': 992779141, 'number': 75, 'closed': datetime.datetime(2022, 7, 12, 12, 19, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 11, 7, 52, 56, tzinfo=datetime.timezone.utc), 'time_taken': 102422.0, 'time_delta': '1 day, 4:27:02', 'additions': 151, 'deletions': 33, 'state': 'closed'}, {'id': 974853967, 'number': 72, 'closed': datetime.datetime(2022, 6, 23, 6, 31, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 22, 9, 42, 20, tzinfo=datetime.timezone.utc), 'time_taken': 74965.0, 'time_delta': '20:49:25', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 955672527, 'number': 68, 'closed': datetime.datetime(2022, 6, 3, 10, 52, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 2, 9, 13, 47, tzinfo=datetime.timezone.utc), 'time_taken': 92336.0, 'time_delta': '1 day, 1:38:56', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 948381162, 'number': 66, 'closed': datetime.datetime(2022, 7, 22, 10, 42, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 26, 15, 11, 48, tzinfo=datetime.timezone.utc), 'time_taken': 4908617.0, 'time_delta': '56 days, 19:30:17', 'additions': 50925, 'deletions': 0, 'state': 'closed'}, {'id': 909708959, 'number': 65, 'closed': datetime.datetime(2022, 4, 25, 6, 50, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 14, 8, 29, 34, tzinfo=datetime.timezone.utc), 'time_taken': 944452.0, 'time_delta': '10 days, 22:20:52', 'additions': 161, 'deletions': 163, 'state': 'closed'}]"
333505439,checkpointctl,checkpoint-restore/checkpointctl,Go,15,93,12,11,279,7,2,3,"[{'id': 1507923599, 'number': 106, 'closed': datetime.datetime(2023, 9, 8, 14, 38, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 8, 13, 37, 11, tzinfo=datetime.timezone.utc), 'time_taken': 3660.0, 'time_delta': '1:01:00', 'additions': 171, 'deletions': 171, 'state': 'closed'}, {'id': 1454315602, 'number': 94, 'closed': datetime.datetime(2023, 8, 14, 16, 43, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 28, 19, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1459848.0, 'time_delta': '16 days, 21:30:48', 'additions': 108, 'deletions': 4, 'state': 'closed'}, {'id': 1427211752, 'number': 87, 'closed': datetime.datetime(2023, 7, 20, 7, 6, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 10, 10, 8, 58, tzinfo=datetime.timezone.utc), 'time_taken': 853048.0, 'time_delta': '9 days, 20:57:28', 'additions': 74, 'deletions': 3, 'state': 'closed'}, {'id': 1423106817, 'number': 84, 'closed': datetime.datetime(2023, 7, 6, 15, 57, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 6, 15, 37, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1162.0, 'time_delta': '0:19:22', 'additions': 10, 'deletions': 5, 'state': 'closed'}, {'id': 1422422883, 'number': 83, 'closed': datetime.datetime(2023, 7, 6, 8, 5, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 6, 8, 0, 11, tzinfo=datetime.timezone.utc), 'time_taken': 291.0, 'time_delta': '0:04:51', 'additions': 14, 'deletions': 14, 'state': 'closed'}, {'id': 1422422174, 'number': 82, 'closed': datetime.datetime(2023, 7, 6, 8, 3, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 6, 7, 59, 41, tzinfo=datetime.timezone.utc), 'time_taken': 222.0, 'time_delta': '0:03:42', 'additions': 0, 'deletions': 12, 'state': 'closed'}, {'id': 1397065464, 'number': 74, 'closed': datetime.datetime(2023, 7, 11, 12, 40, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 18, 9, 39, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1998075.0, 'time_delta': '23 days, 3:01:15', 'additions': 2725, 'deletions': 10078, 'state': 'closed'}, {'id': 1397057521, 'number': 73, 'closed': datetime.datetime(2023, 7, 6, 8, 24, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 18, 9, 15, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1552140.0, 'time_delta': '17 days, 23:09:00', 'additions': 317, 'deletions': 24, 'state': 'closed'}, {'id': 1396188074, 'number': 72, 'closed': datetime.datetime(2023, 6, 17, 10, 32, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 16, 19, 4, 8, tzinfo=datetime.timezone.utc), 'time_taken': 55718.0, 'time_delta': '15:28:38', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 1396164312, 'number': 71, 'closed': datetime.datetime(2023, 6, 18, 8, 29, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 16, 18, 40, 52, tzinfo=datetime.timezone.utc), 'time_taken': 136102.0, 'time_delta': '1 day, 13:48:22', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 1384931750, 'number': 64, 'closed': datetime.datetime(2023, 6, 9, 12, 58, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 8, 18, 21, 5, tzinfo=datetime.timezone.utc), 'time_taken': 67020.0, 'time_delta': '18:37:00', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 1384652674, 'number': 62, 'closed': datetime.datetime(2023, 6, 8, 16, 53, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 8, 15, 12, 31, tzinfo=datetime.timezone.utc), 'time_taken': 6078.0, 'time_delta': '1:41:18', 'additions': 13, 'deletions': 5, 'state': 'closed'}, {'id': 1377868621, 'number': 61, 'closed': datetime.datetime(2023, 6, 12, 6, 57, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 4, 18, 2, 6, tzinfo=datetime.timezone.utc), 'time_taken': 651319.0, 'time_delta': '7 days, 12:55:19', 'additions': 145, 'deletions': 49, 'state': 'closed'}, {'id': 1377720785, 'number': 60, 'closed': datetime.datetime(2023, 6, 8, 18, 7, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 4, 12, 8, 32, tzinfo=datetime.timezone.utc), 'time_taken': 367167.0, 'time_delta': '4 days, 5:59:27', 'additions': 88, 'deletions': 77, 'state': 'closed'}, {'id': 1377695118, 'number': 59, 'closed': datetime.datetime(2023, 6, 8, 11, 58, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 4, 11, 5, 12, tzinfo=datetime.timezone.utc), 'time_taken': 348792.0, 'time_delta': '4 days, 0:53:12', 'additions': 62, 'deletions': 0, 'state': 'closed'}, {'id': 1368128459, 'number': 58, 'closed': datetime.datetime(2023, 5, 31, 15, 4, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 28, 19, 37, 41, tzinfo=datetime.timezone.utc), 'time_taken': 242832.0, 'time_delta': '2 days, 19:27:12', 'additions': 43, 'deletions': 34, 'state': 'closed'}, {'id': 1368091612, 'number': 57, 'closed': datetime.datetime(2023, 5, 30, 14, 36, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 28, 18, 4, 28, tzinfo=datetime.timezone.utc), 'time_taken': 160320.0, 'time_delta': '1 day, 20:32:00', 'additions': 17435, 'deletions': 965, 'state': 'closed'}, {'id': 1367966586, 'number': 56, 'closed': datetime.datetime(2023, 6, 16, 8, 31, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 28, 12, 48, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1626176.0, 'time_delta': '18 days, 19:42:56', 'additions': 966, 'deletions': 45, 'state': 'closed'}, {'id': 1042732477, 'number': 17, 'closed': datetime.datetime(2022, 9, 1, 10, 32, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 31, 18, 47, 37, tzinfo=datetime.timezone.utc), 'time_taken': 56687.0, 'time_delta': '15:44:47', 'additions': 15, 'deletions': 8, 'state': 'closed'}, {'id': 1028438686, 'number': 16, 'closed': datetime.datetime(2022, 9, 20, 8, 52, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 17, 7, 33, 32, tzinfo=datetime.timezone.utc), 'time_taken': 2942342.0, 'time_delta': '34 days, 1:19:02', 'additions': 39493, 'deletions': 1706, 'state': 'closed'}]"
