pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1021037557,ENH: improved node consolidation functions,Function for consolidating intersections on street networks based on graph-distances along with edge reconstruction. Tests to come.,True,377,https://api.github.com/repos/pysal/momepy/pulls/377,https://github.com/pysal/momepy/pull/377,closed,2125,4,7,32,25,84,1,1,[{'name': 'GSoC 2022'}],2022-08-09 04:53:00+00:00,2024-01-23 21:21:17+00:00,46024097.0,"532 days, 16:28:17","[{'comment_id': 941378761, 'comment_body': ""Let's run `black` on this PR."", 'comment_created': datetime.datetime(2022, 8, 9, 13, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 941403860, 'comment_body': 'new commit with black format', 'comment_created': datetime.datetime(2022, 8, 9, 14, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 941772644, 'comment_body': 'In which case would you not infer it from the graph?', 'comment_created': datetime.datetime(2022, 8, 9, 20, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941775161, 'comment_body': 'I am not sure if these options are clear based on their names. `spider` is okay but as crow flies is linear line... What about using `extend` instead of `linear` and `euclidean` instead of `crow_flies`?', 'comment_created': datetime.datetime(2022, 8, 9, 20, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941776443, 'comment_body': 'remove empty lines between parameters', 'comment_created': datetime.datetime(2022, 8, 9, 20, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941777109, 'comment_body': 'what do you mean by this comment?', 'comment_created': datetime.datetime(2022, 8, 9, 20, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941778454, 'comment_body': ""try to make sure that all lines, including comments, are shorter than 88 characters. I think that `flake8` will complain here, though we don't have it on in CI. (@jGaboardi maybe we should? also `isort`?)"", 'comment_created': datetime.datetime(2022, 8, 9, 20, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941779750, 'comment_body': ""This assumes `osmnx`-like graph, doesn't it? At least in the name."", 'comment_created': datetime.datetime(2022, 8, 9, 20, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941781071, 'comment_body': 'Since you document this, can you follow the style above? For the sake of consistency.', 'comment_created': datetime.datetime(2022, 8, 9, 20, 38, 21, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941782471, 'comment_body': 'This is probably just a personal preference, but could you make this an f-string instead of this?', 'comment_created': datetime.datetime(2022, 8, 9, 20, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941783657, 'comment_body': 'Another preference - can you not use `inplace=True` but rather return a new object? It is easier to track what is happening. At least that is what we tend to do in pandas world. I realise that networkx model is a bit different with all methods working in place (hence needing `deepcopy`)', 'comment_created': datetime.datetime(2022, 8, 9, 20, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941784626, 'comment_body': 'Again, try not ti use `inplace`.', 'comment_created': datetime.datetime(2022, 8, 9, 20, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941784941, 'comment_body': 'Same below a couple of times.', 'comment_created': datetime.datetime(2022, 8, 9, 20, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941785634, 'comment_body': '```suggestion\r\n    edges_gdf[""length""] = edges_gdf.length\r\n```\r\nThis will use vectorised operation instead of a loop.', 'comment_created': datetime.datetime(2022, 8, 9, 20, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941786162, 'comment_body': 'Btw, why do you need this anyway?', 'comment_created': datetime.datetime(2022, 8, 9, 20, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941791617, 'comment_body': 'have you tried using `difference` instead? It may be more efficient that `split` + `linemerge` (but may not and may cause more trouble than good).', 'comment_created': datetime.datetime(2022, 8, 9, 20, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941796751, 'comment_body': 'Potentially user has a MultiDiGraph but wants to treat it as MultiGraph so inferring works against it. This is the case with OSMnx graphs if one doesn\'t run ""get_undirected"" first. If you think it\'s more straightforward to always infer, will remove the param.', 'comment_created': datetime.datetime(2022, 8, 9, 20, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 941799286, 'comment_body': 'Keep it there, just add something like you just wrote as an explanation.', 'comment_created': datetime.datetime(2022, 8, 9, 21, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941799413, 'comment_body': ""maybe add support to graphs which don't have crs attribute. currently, function fails in such case."", 'comment_created': datetime.datetime(2022, 8, 9, 21, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 941800393, 'comment_body': 'good catch. is ""original_nodes"" a better name?', 'comment_created': datetime.datetime(2022, 8, 9, 21, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 941800702, 'comment_body': 'Makes sense. Something like `crs=graph.graph.get(""crs"")`?', 'comment_created': datetime.datetime(2022, 8, 9, 21, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941801356, 'comment_body': 'Yeah', 'comment_created': datetime.datetime(2022, 8, 9, 21, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941802216, 'comment_body': 'Does that return None if key is not in dictionary? And do you know whether I can build a GeoDataFrame with crs None?', 'comment_created': datetime.datetime(2022, 8, 9, 21, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 941802956, 'comment_body': 'Updates length parameter of rebuilt edges to match their new geometries. For example extended lines are longer.', 'comment_created': datetime.datetime(2022, 8, 9, 21, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 941808357, 'comment_body': 'Yes and yes.', 'comment_created': datetime.datetime(2022, 8, 9, 21, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941960357, 'comment_body': 'Seems to be some good options for [`flake8`](https://github.com/py-actions/flake8) and [`isort`](https://github.com/isort/isort-action) with GHA. Would not hurt at all to give it a try. Also, [`isort`+`black` compatibility with `pre-commit`](https://pycqa.github.io/isort/docs/configuration/black_compatibility.html).', 'comment_created': datetime.datetime(2022, 8, 10, 2, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 967901374, 'comment_body': 'Not sure exactly what is going on, but it appears to be an issue with `ox.load_graphml()`. Can you confirm that the file path in `test_file_path3` is correct?', 'comment_created': datetime.datetime(2022, 9, 11, 23, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 967904855, 'comment_body': 'The file path is corrected according to the rewriting of the get_path function to deal with other extensions. Is it possible that osmnx is not included in the minimal test environment?', 'comment_created': datetime.datetime(2022, 9, 11, 23, 30, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 967909978, 'comment_body': 'hmmm. `osmnx` is in the [minimal](https://github.com/pysal/momepy/blob/afcb85b89195f3ba2c5c869fb2e5f5add357c927/ci/envs/38-minimal.yaml#L14) testing environment.', 'comment_created': datetime.datetime(2022, 9, 12, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 967912689, 'comment_body': 'But it does seems likely that some dependency is missing in that environment and is causing the error. Or a dependency that is needed is not supported by Python 3.8. If we look [here](https://github.com/gboeing/osmnx/blob/main/osmnx/io.py#L252) within `osmnx`, the `.read_graphml()` is being called from `networkx` with keyword `force_multigraph=True`, which we can see in the CI error log [here](https://github.com/pysal/momepy/runs/8294778205?check_suite_focus=true#step:6:1289).', 'comment_created': datetime.datetime(2022, 9, 12, 0, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 967916012, 'comment_body': ""So after some more digging we can see that the version of `networkx` being pulled in for the Python 3.8 test is [v2.3](https://github.com/pysal/momepy/runs/8294778205?check_suite_focus=true#step:5:157), which was [released in 2019](https://github.com/networkx/networkx/releases/tag/networkx-2.3). And that version of `networkx` did not support the `force_multigraph` keyword as in does now (see [v.2.3 `GraphMLReader`](https://github.com/networkx/networkx/blob/807d9fde187e18a58d542f87ab0d0cb98ef46459/networkx/readwrite/graphml.py#L237) vs. [current `main`'s `GraphMLReader`](https://github.com/networkx/networkx/blob/034274e08b3b78022e47d03cc5e69e28be23f713/networkx/readwrite/graphml.py#L293)).\r\n\r\nSo the trick now is to find the earliest version of `networkx` that supports `force_multigraph` in the `GraphMLReader` signature and [update the pin in the CI environment](https://github.com/pysal/momepy/blob/afcb85b89195f3ba2c5c869fb2e5f5add357c927/ci/envs/38-minimal.yaml#L8)."", 'comment_created': datetime.datetime(2022, 9, 12, 0, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 967917200, 'comment_body': 'And it looks like that will be [`networkx=2.5`](https://github.com/networkx/networkx/blob/12f852f6a686ed32f718125c5965586dd6bb82a9/networkx/readwrite/graphml.py#L199).', 'comment_created': datetime.datetime(2022, 9, 12, 0, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 967947006, 'comment_body': ""Thanks a lot, James! I wouldn't have been able to figure this out. Updated it and let's see if it goes through now "", 'comment_created': datetime.datetime(2022, 9, 12, 2, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 968387121, 'comment_body': 'Since the three reconstruction types are already explained in `consolidate_intersections()` we can simply add a note here pointing to those descriptions and get rid of them here.', 'comment_created': datetime.datetime(2022, 9, 12, 12, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 968388120, 'comment_body': ""What's the name of this variable?"", 'comment_created': datetime.datetime(2022, 9, 12, 13, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 968389042, 'comment_body': 'Add these keywords on separate lines.', 'comment_created': datetime.datetime(2022, 9, 12, 13, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 968389782, 'comment_body': ""What's the name of this variable?"", 'comment_created': datetime.datetime(2022, 9, 12, 13, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 968390439, 'comment_body': 'Keyword arguments should be described on individual lines for docstrings.', 'comment_created': datetime.datetime(2022, 9, 12, 13, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 968393402, 'comment_body': 'Should this throw a `warning` rather than a `print` statement?', 'comment_created': datetime.datetime(2022, 9, 12, 13, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 968396068, 'comment_body': ""Should be two entries. But Since this is a non-user facing function maybe it doesn't need detailed docstrings? Maybe type hints though? @martinfleis What are your thoughts on this?"", 'comment_created': datetime.datetime(2022, 9, 12, 13, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 968397168, 'comment_body': 'report the variable name and description if we decide for a detailed docstring here.', 'comment_created': datetime.datetime(2022, 9, 12, 13, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 968397705, 'comment_body': 'Same as above. ', 'comment_created': datetime.datetime(2022, 9, 12, 13, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 968397796, 'comment_body': 'Same as above. ', 'comment_created': datetime.datetime(2022, 9, 12, 13, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 968398262, 'comment_body': 'Same as above. ', 'comment_created': datetime.datetime(2022, 9, 12, 13, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 968398362, 'comment_body': 'Same as above. ', 'comment_created': datetime.datetime(2022, 9, 12, 13, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 968463691, 'comment_body': 'will replace that. also noticed such lines aren\'t covered by tests so will add a new test case\r\n```suggestion\r\n        import warnings\r\n        warnings.warn(""Simplification method not recognized. Using spider-web simplification."")\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 14, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 968476933, 'comment_body': ""That doesn't really matter, does it? It may be not even be assigned to any variable."", 'comment_created': datetime.datetime(2022, 9, 12, 14, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 968478231, 'comment_body': ""Should be ideally two entries but since it is an internal function, it doesn't really matter. I wouldn't bother with type hints."", 'comment_created': datetime.datetime(2022, 9, 12, 14, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 968499620, 'comment_body': 'for the sake of consistency I fixed in all cases', 'comment_created': datetime.datetime(2022, 9, 12, 14, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 968503594, 'comment_body': 'I would argue to leave them in the docstring anyways as the `_get_rebuilt_edges` functions is not user facing', 'comment_created': datetime.datetime(2022, 9, 12, 14, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 968505921, 'comment_body': 'I think I did not properly name output variables. I usually include in the function description a brief explanation of the output and then just give the type below the Returns block. Should I arbitrarily name it based on what it represents?', 'comment_created': datetime.datetime(2022, 9, 12, 14, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 968508109, 'comment_body': '1. We also might want to clean the `method` variable as `method = method.lower()` to correct for users accidentally capitalizing, etc.\r\n2. We can make this more user-friendly by reporting the method passed in. Something like: ``warnings.warn(""Simplification method (`\'{method}\'`) not recognized. Using spider-web simplification."")``', 'comment_created': datetime.datetime(2022, 9, 12, 14, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 968509766, 'comment_body': ""I don't think so, it is fine as it is imho. That applies to all cases of this."", 'comment_created': datetime.datetime(2022, 9, 12, 14, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 968510565, 'comment_body': ""My personal preference is explicit variable naming for descriptive docstrings, but I will defer the @martinfleis's decision on this."", 'comment_created': datetime.datetime(2022, 9, 12, 14, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 970065837, 'comment_body': '```suggestion\r\n        most faithfully the network geometry but can result in overlapping geometry.\r\n```\r\n\r\nWould this be correct?', 'comment_created': datetime.datetime(2022, 9, 13, 20, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 970066132, 'comment_body': '```suggestion\r\n        Edges are ignored and new edges are built as straight lines between new origin and new\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 20, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 970066371, 'comment_body': '```suggestion\r\n    If rebuild_graph is True, new edges are drawn according to ``rebuild_edges_method`` which is one of:\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 20, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 970066537, 'comment_body': '```suggestion\r\n    If ``rebuild_graph`` is False, graph is returned with consolidated nodes but without reconstructed\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 20, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 970066868, 'comment_body': 'Can it be non-multi?', 'comment_created': datetime.datetime(2022, 9, 13, 20, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 970067623, 'comment_body': '```suggestion\r\n    tolerance : float, default 30\r\n```\r\nCan you add defaults? It is enough to do that within this doctoring of the user-facing function.', 'comment_created': datetime.datetime(2022, 9, 13, 20, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 970069379, 'comment_body': 'Do we need this? Can we just always infer from the type? It seems to me that you either want directed and hence have DiGraph or not and have Graph.', 'comment_created': datetime.datetime(2022, 9, 13, 20, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 970070338, 'comment_body': '`_col` suggest ""column"", which is not the case for graph. Can we just use `x`, `y`? Or some other, more applicable suffix?', 'comment_created': datetime.datetime(2022, 9, 13, 20, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 970074371, 'comment_body': ""This is working on the original `graph` object passed to the function and chaining it in place, isn't it? Is that an intention?"", 'comment_created': datetime.datetime(2022, 9, 13, 20, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 970079252, 'comment_body': ""I don't think this is a good behaviour. We should raise an error if the method is not implemented."", 'comment_created': datetime.datetime(2022, 9, 13, 21, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 970080572, 'comment_body': ""I am not entirely sure how geopandas handles this specific renaming of geometry columns but I would rather throw in `set_geometry('geometry')` just to be sure the right column is set as active."", 'comment_created': datetime.datetime(2022, 9, 13, 21, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 970202541, 'comment_body': 'Fair enough.', 'comment_created': datetime.datetime(2022, 9, 14, 1, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 971455262, 'comment_body': 'right, I thought about it as from the gdf. This is the name of the attribute containing the x-coordinate (so that it would work even if it was named longitude for example). Maybe `x_att` is a good name?', 'comment_created': datetime.datetime(2022, 9, 15, 2, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 992551497, 'comment_body': ""Thanks! Wasn't my intention and I didn't catch that. Moved the `simplified_graph` assignment above this block so that I add the approach to that object instead"", 'comment_created': datetime.datetime(2022, 10, 11, 16, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 992776032, 'comment_body': 'the input can, the output cannot because sometimes we will be adding multiple edges between two cluster of nodes. I will adjust the documentation: user can pass any graph object from Networkx, function will return MultiGraph or MultiDiGraph', 'comment_created': datetime.datetime(2022, 10, 11, 21, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 992792691, 'comment_body': 'sounds good to me', 'comment_created': datetime.datetime(2022, 10, 11, 21, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 992926966, 'comment_body': 'threw a `ValueError` in that case', 'comment_created': datetime.datetime(2022, 10, 12, 2, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 992931110, 'comment_body': 'sounds good, also added in the documentation for the returned object that directionality is inferred from input', 'comment_created': datetime.datetime(2022, 10, 12, 2, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gsagostini', 'type': 'User'}, {'comment_id': 993996004, 'comment_body': 'Where is `line_coords` coming from?', 'comment_created': datetime.datetime(2022, 10, 13, 0, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 993996908, 'comment_body': 'From [`linting`](https://github.com/pysal/momepy/actions/runs/3237046086/jobs/5303895833#step:4:65) we can see that `nodes_gdf` is declared, but not actually used anywhere.', 'comment_created': datetime.datetime(2022, 10, 13, 0, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 1463511803, 'comment_body': '```suggestion\r\n    rebuild_graph : bool\r\n```', 'comment_created': datetime.datetime(2024, 1, 23, 15, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 1463512198, 'comment_body': '```suggestion\r\n    rebuild_edges_method : str\r\n```', 'comment_created': datetime.datetime(2024, 1, 23, 15, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 1463512630, 'comment_body': '```suggestion\r\n    x_att : str\r\n```', 'comment_created': datetime.datetime(2024, 1, 23, 15, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 1463512904, 'comment_body': '```suggestion\r\n    y_att : str\r\n```', 'comment_created': datetime.datetime(2024, 1, 23, 15, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 1463513263, 'comment_body': '```suggestion\r\n    edge_from_att : str\r\n```', 'comment_created': datetime.datetime(2024, 1, 23, 15, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 1463513503, 'comment_body': '```suggestion\r\n    edge_to_att : str\r\n```', 'comment_created': datetime.datetime(2024, 1, 23, 15, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 1463515616, 'comment_body': '```suggestion\r\n    edge_to_att : str\r\n```', 'comment_created': datetime.datetime(2024, 1, 23, 15, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 1463515757, 'comment_body': '```suggestion\r\n    edge_from_att : str\r\n```', 'comment_created': datetime.datetime(2024, 1, 23, 15, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 1463515982, 'comment_body': '```suggestion\r\n    nodes_dict : dict\r\n```', 'comment_created': datetime.datetime(2024, 1, 23, 15, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 1463517193, 'comment_body': '```suggestion\r\n    new_destination : shapely.Point or None\r\n```', 'comment_created': datetime.datetime(2024, 1, 23, 16, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}]","[{'commit_sha': '2f71606de60ff6e6bd0313a5ed26ed51bf9bc834', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53351c9a4b5d86cf8ca6f56d5e3efc87e4f5c556', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e00851f6affce67bc4f95120beb31827e790754', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30354ace63376612617461c67685bbe27a4b820e', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3a4931f9fadac0aaa0e40804765b6126329d146', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f75afd73d81a8db552835542ee914a97dae6d144', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd2b0d19a6cd60d34aed03f1c0988f5244d7fc14', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2accf908666d777ffe76c32e3b7ed817fdd20723', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e20a980ee3c13178082a2db8eecc1d169491348', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd84b78b9c8bd6ac13c7dcc2d74ab1d5a87838658', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '375bb86d6a610464ca0b9022b770ca53ac2008a3', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '558f1a26c8d2267890183b2f63613736bc350ff5', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15d928742ae1fa0c7500c15a92266f9a05ac20c0', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22818dc6617dcc510dfebdb907e394de20b44c97', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '324e219a07b8a2bc5d68b5ff632c341e0dafa624', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '777a7ab9e8ca30a461c98b3313e295fd01b4b706', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73413f11563e434f711872d3ba22b4806a4a6694', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b2b415f24e6b289611a007403ecf2ac12cb7632', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '930d9dfca58a684fe84027cf8ee2ea3d1026a3c5', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9aae1a7f5c1b4622878c53675266a82ab6c65ed', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '068536d765e1c6b18f824da1e0906ccf4fe4e17c', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22775fca6a8bbf0d0f43b973e607ebd4f023595f', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efe511985c853067404f2b3779a21c545347a6be', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e435d22f33ea376d97d9013f365ac614e936f31', 'committer_username': 'gsagostini', 'committer_name': 'Gabriel Agostini', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0c12e7a186705e98f5b56f3a86df58165218224', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49c186462736e8d2f2c62a8997fbf617fb55d049', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d0e2b2eeffb25dd06bf20d83b9c40d9ff421ead', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7316f76c18c19e1ca569b4a8dedd7db4baf2a50b', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1994079bac2ba1d193944e7f53740975403af56', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9edfd6f82841e18cc035a667259de1f4ac20a79a', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e4337837dc2e16df39856bc1f5056d7e793b015', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0949e46663526758673d0f8fd1a7670e09fc335', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}]",Gabriel Agostini,45509005,,User,,7,,4,7
1053316629,ENH: helper functions for geometry-based network simplification,"I wanted to leave this PR open to be able to refer to it in my [GSOC README](https://github.com/gregmaya/gsoc2022_network_simpl#readme).
I know there are quite a few things still to be done here so might be worth holding back a very thorough review",False,396,https://api.github.com/repos/pysal/momepy/pulls/396,https://github.com/pysal/momepy/pull/396,closed,165,1,1,1,11,0,3,1,"[{'name': 'enhancement'}, {'name': 'GSoC 2022'}, {'name': 'preprocessing'}]",2022-09-12 13:06:34+00:00,2024-06-15 13:54:10+00:00,55471656.0,"642 days, 0:47:36",[],"[{'commit_sha': '6789d1b842f372e9a7558c34ef271803790bb9c5', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}]",Greg Maya,24941438,gregoriomaya@gmail.com,User,,10,,17,6
1012970816,ENH: geometry-based simplification of roundabouts,I'm sure there might be corrections to be made (including one BUG FIX that I found whilst doing the test!) but I believe submitting is helpful to move forward. ,True,371,https://api.github.com/repos/pysal/momepy/pulls/371,https://github.com/pysal/momepy/pull/371,closed,408,0,4,37,18,107,1,0,[{'name': 'GSoC 2022'}],2022-07-31 08:02:57+00:00,2022-09-09 17:27:06+00:00,3489849.0,"40 days, 9:24:09","[{'comment_id': 934030911, 'comment_body': 'Can we call it `roundabout_simplification` instead? I usually prefer explicit names and within `momepy` I think we always used full words.', 'comment_created': datetime.datetime(2022, 7, 31, 19, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934030953, 'comment_body': 'Make this optional and do the polygonize yourself if `None` is passed.', 'comment_created': datetime.datetime(2022, 7, 31, 19, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934031114, 'comment_body': '```suggestion\r\n    roundabouts are deleted. Note that some attributes, like length, may no longer reflect the reality of newly constructed geometry.\r\n```\r\n\r\nI think we should add something like this.', 'comment_created': datetime.datetime(2022, 7, 31, 19, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934031126, 'comment_body': '```suggestion\r\n    If ``include_adjacent`` is True, adjacent polygons to the actual roundabout are\r\n```', 'comment_created': datetime.datetime(2022, 7, 31, 19, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934031193, 'comment_body': '```suggestion\r\n        Circular compactness threshold to select roundabouts from ``polys`` GeoDataFrame.\r\n```', 'comment_created': datetime.datetime(2022, 7, 31, 19, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934031228, 'comment_body': ""```suggestion\r\n    area_threshold : float (default 0.85)\r\n```\r\n\r\nI'd simplify the keyword."", 'comment_created': datetime.datetime(2022, 7, 31, 19, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934031249, 'comment_body': '```suggestion\r\n        for simplification.\r\n```', 'comment_created': datetime.datetime(2022, 7, 31, 19, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934031350, 'comment_body': 'Add a sentence explaining the difference between a centroid and a mean computation.', 'comment_created': datetime.datetime(2022, 7, 31, 19, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934031429, 'comment_body': 'It is unclear when this is used and how.', 'comment_created': datetime.datetime(2022, 7, 31, 19, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934031446, 'comment_body': '```suggestion\r\n        GeoDataFrame with an updated geometry\r\n```', 'comment_created': datetime.datetime(2022, 7, 31, 19, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934031575, 'comment_body': 'You need to create a copy, otherwise you are editing the original gdf.\r\n\r\n```\r\ngdf = gdf.copy()\r\n```', 'comment_created': datetime.datetime(2022, 7, 31, 19, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934031798, 'comment_body': 'Could you explain this step? Why `maxx - minx`, not `maxy - miny`?', 'comment_created': datetime.datetime(2022, 7, 31, 19, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934031969, 'comment_body': 'bounds can be created for each geom before the loop. will be faster.', 'comment_created': datetime.datetime(2022, 7, 31, 19, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934032203, 'comment_body': ""You don't need this loop for sure. You can do something like\r\n\r\n```py\r\nhdist = rab_group.hausdorff_distance(row.geometry)\r\n```\r\nand then switch the condition below. I think."", 'comment_created': datetime.datetime(2022, 7, 31, 19, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934032258, 'comment_body': 'I think that you should be able to find a way to get rid of this loop altogether. And have it as a vectorised operation instead. See below, go piece by piece and you should simplify it enough.', 'comment_created': datetime.datetime(2022, 7, 31, 19, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934032487, 'comment_body': 'You can\'t be certain you will always get ""geometry"" and ""index_right"" columns unless you sanitise the given gdf yourself. What a user may pass can have custom geometry columns name and a named index and this will no longer work.', 'comment_created': datetime.datetime(2022, 7, 31, 20, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934032621, 'comment_body': 'Can you make a note here that this is a temporary hack until shapely 2.0 is out?', 'comment_created': datetime.datetime(2022, 7, 31, 20, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934032839, 'comment_body': 'if you are using pygeos here anyway, use their vectorised versions of `make_valid` and `is_valid`. This will be extremely slow due to 1) a loop, 2) a conversion between underlying pygeos geometry and a shapely geometry within the loop.', 'comment_created': datetime.datetime(2022, 7, 31, 20, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934032970, 'comment_body': 'Again, you can get an array of coordinates with pygeos without a loop.', 'comment_created': datetime.datetime(2022, 7, 31, 20, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934033056, 'comment_body': 'I have no clue what this does :D. ', 'comment_created': datetime.datetime(2022, 7, 31, 20, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934033121, 'comment_body': 'get arrays and create points with `points_from_xy` or pygeos. always try to use a vectorised solution if there is one.', 'comment_created': datetime.datetime(2022, 7, 31, 20, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934033214, 'comment_body': 'Can you add that it will be available in 2.0?', 'comment_created': datetime.datetime(2022, 7, 31, 20, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934033284, 'comment_body': '```suggestion\r\n    If more than one LineString is incoming to ``rab_plus``, COINS algorithm\r\n```', 'comment_created': datetime.datetime(2022, 7, 31, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934033508, 'comment_body': 'I am not sure if disjoint is what you are looking for here.\r\n\r\n> Returns True if A and B do not share any point in space. Disjoint implies that overlaps, touches, within, and intersects are False.', 'comment_created': datetime.datetime(2022, 7, 31, 20, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934033787, 'comment_body': 'You could create your own query on `.sindex` here and make the filter before doing the actual join.', 'comment_created': datetime.datetime(2022, 7, 31, 20, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934034020, 'comment_body': ""```suggestion\r\n    incoming['line_wkt'] = incoming.line.to_wkt()\r\n```"", 'comment_created': datetime.datetime(2022, 7, 31, 20, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934034207, 'comment_body': 'you are already doing `groupby` over `line_wkt` before you call this function. Can you pass the groupby object directly instead of doing another groupby?', 'comment_created': datetime.datetime(2022, 7, 31, 20, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934034419, 'comment_body': 'Can we instead use `coins.stroke_attribute`? We could avoid the sjoin.', 'comment_created': datetime.datetime(2022, 7, 31, 20, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934034533, 'comment_body': 'That is fine, you can ignore it.', 'comment_created': datetime.datetime(2022, 7, 31, 20, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934034718, 'comment_body': ""You have them selected above, you know their ID's. Try to reuse that and drop them based on the index instead of doing another spatial join. Those are expensive."", 'comment_created': datetime.datetime(2022, 7, 31, 20, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 934034944, 'comment_body': 'Can you add it as another layer of `tests.gpkg` instead of adding a new one?', 'comment_created': datetime.datetime(2022, 7, 31, 20, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 935267571, 'comment_body': 'I used this as a proxy of the radius of the roundabout. It could also be `maxy - miny`, but assuming most roundabouts are close to a perfect circle those the differences on X and Y axis should be very similar. \r\nIdeally, one would take the radius from a minimum bounding circle, but I know this is a bit more challenging. \r\nI will incorporate a small upgrade to this, though.\r\n\r\n```suggestion\r\n            minx, maxy , maxx, miny = row.geometry.bounds \r\n            if (maxx - minx) >= (maxy - miny):\r\n                rab_diameter = maxx - minx\r\n            else:\r\n                rab_diameter = maxy - miny\r\n```\r\n', 'comment_created': datetime.datetime(2022, 8, 2, 8, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 935742044, 'comment_body': ""humm good point 👍 \r\nI'm not sure how to deal with the 'index_right' just yet (possibly by reseting the index at the very begining?!)..\r\nbut for now I'll implement `geom_col = rab_plus.geometry.name` for the geometry column"", 'comment_created': datetime.datetime(2022, 8, 2, 15, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 936295735, 'comment_body': 'You can reset index but you should reconstruct it afterwards, to return gdf in a same structure as it comes in.', 'comment_created': datetime.datetime(2022, 8, 3, 6, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 937529532, 'comment_body': 'I need to come back to this to see if I can implement @gregmaya ', 'comment_created': datetime.datetime(2022, 8, 4, 8, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 937532724, 'comment_body': 'Feel free to skip it now and add a # TODO comment there.', 'comment_created': datetime.datetime(2022, 8, 4, 9, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 937565616, 'comment_body': 'Not sure I quite follow what you mean by this. \r\nI will keep the comment open to review later', 'comment_created': datetime.datetime(2022, 8, 4, 9, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 938649087, 'comment_body': 'I tried this, but was somehow, unsuccessful because the earlier grouping was over a different gdf. \r\nNeed to come back to this. #TODO ', 'comment_created': datetime.datetime(2022, 8, 5, 9, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 941317394, 'comment_body': '```suggestion\r\n    ""roundabout_simplification"",\r\n```', 'comment_created': datetime.datetime(2022, 8, 9, 13, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941318521, 'comment_body': '```suggestion\r\n   roundabout_simplification\r\n```', 'comment_created': datetime.datetime(2022, 8, 9, 13, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941325548, 'comment_body': '```suggestion\r\n            test_file_path2, layer=""test_rabs""\r\n```', 'comment_created': datetime.datetime(2022, 8, 9, 13, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941336231, 'comment_body': '@martinfleis Would it be more efficient to be using `map` here vs. `apply`?', 'comment_created': datetime.datetime(2022, 8, 9, 13, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 941377176, 'comment_body': 'Possibly', 'comment_created': datetime.datetime(2022, 8, 9, 13, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941793593, 'comment_body': '```suggestion\r\n            orig_geom_join = gpd.sjoin(stroke_gdf,\r\n                gpd.GeoDataFrame(geometry=x.line), op=""covers""\r\n            )\r\n```\r\nYou need to use a function for older geopandas, the method is newer. Also note that this suggestion does not follow `black`.', 'comment_created': datetime.datetime(2022, 8, 9, 20, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941796215, 'comment_body': '```suggestion\r\n            result_idx = gpd.sjoin(gs1, gs2, op=""covered_by"").index\r\n```\r\n\r\nSame as before.\r\n\r\nYou could replace the sjoin here with an `sindex` query though, to avoid the overhead of sjoin but I\'d need to run this to actually write that snippet, so feel free to ignore this comment.', 'comment_created': datetime.datetime(2022, 8, 9, 20, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941796588, 'comment_body': '```suggestion\r\n        touching = gpd.sjoin(edges, rab_multipolygons, op=""touches"")\r\n```', 'comment_created': datetime.datetime(2022, 8, 9, 20, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 941796834, 'comment_body': '```suggestion\r\n        idx_drop = gpd.sjoin(edges, rab_multipolygons, op=""covered_by"").index\r\n```', 'comment_created': datetime.datetime(2022, 8, 9, 20, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 942142891, 'comment_body': 'not sure I fully understand what you mean... but would be curious to see what you suggest to still maintain the list of indexes as an output of the  function (which is later used to remove the original lines from the edges gdf)', 'comment_created': datetime.datetime(2022, 8, 10, 8, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 942235312, 'comment_body': 'Take this example:\r\n\r\n```py\r\nIn [1]: import geopandas\r\nworld = geopa                                                                  \r\nIn [2]: world = geopandas.read_file(geopandas.datasets.get_path(\'naturalearth_lowres\'))\r\n\r\nIn [3]: cities = geopandas.read_file(geopandas.datasets.get_path(\'naturalearth_cities\'))\r\n```\r\n\r\nThis is your way - do the whole sjoin and then extract only the index to know what should be dropped.\r\n\r\n```py\r\nIn [4]: sjoin_idx = cities.sjoin(world).index\r\n\r\nIn [5]: sjoin_idx\r\nOut[5]: \r\nInt64Index([  0,   1, 192,   2, 184,   3,   8,  11, 199,  12,\r\n            ...\r\n            188, 190, 191, 193, 194, 195, 196, 197, 198, 200],\r\n           dtype=\'int64\', length=172)\r\n\r\n```\r\nUnder the hood, geopandas calls `.sindex.query_bulk` to know which geometries intersect each other (or are covered by if `predicate=""covered_by""`) and does a lot of other things to construct the final GeoDataFrame. But we\'re not interested in those other things.\r\n\r\nSo you can call just the sindex yourself:\r\n\r\n```py\r\nIn [6]: world_idx, cities_idx = cities.sindex.query_bulk(world.geometry, predicate=""intersects"")\r\n```\r\nWe get two arrays out, representing pairs of geometries in each gdf that fulfil the predicate. Note, that these are integer (positional) indices. \r\n\r\nSee that the one for `cities` has the same length as yours and since `cities.index` is a default RangeIndex, hence its values are the same as a position, all values actually match, they are just sorted in a different order. \r\n```\r\n\r\nIn [7]: len(cities_idx)\r\nOut[7]: 172\r\n\r\nIn [8]: all([x in sjoin_idx for x in cities_idx])\r\nOut[8]: True\r\n```\r\n\r\nIf the original index wasn\'t the default one, you get the result you want like this:\r\n\r\n```py\r\nIn [9]: cities.index.take(cities_idx)\r\nOut[9]: \r\nInt64Index([ 91, 144, 101, 186,  96, 165,  59, 195, 182, 200,\r\n            ...\r\n            123,  48,  13, 120,  25, 102,  19,  21,  12,  15],\r\n           dtype=\'int64\', length=172)\r\n```\r\n\r\nThe reason to do this is to avoid the overhead of sjoin. This is not the best test case, but you can check the difference in performance yourself.\r\n\r\n```py\r\nIn [10]: %timeit cities.sjoin(world).index\r\n4.08 ms ± 11.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n\r\nIn [11]: %timeit cities.sindex.query_bulk(world.geometry, predicate=""intersects"")\r\n425 µs ± 482 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\r\n```', 'comment_created': datetime.datetime(2022, 8, 10, 9, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 943752029, 'comment_body': 'I just included this but `query_bulk` doesn\'t have the predicate `\'covered_by\'` so I ended up changing some things to still get the desired output...\r\n\r\n```\r\n`edges_idx,` rabs_idx = rab_multipolygons.buffer(1).sindex.query_bulk(\r\n            edges.geometry, predicate=""within"")\r\n```\r\n\r\n I couldn\'t find a way to use any of the predicates without using the buffer\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 11, 17, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 943832792, 'comment_body': ""It does have all the predicates. Without that we couldn't expose it in sjoin. See https://pygeos.readthedocs.io/en/stable/strtree.html#pygeos.strtree.STRtree.query_bulk"", 'comment_created': datetime.datetime(2022, 8, 11, 19, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 944343355, 'comment_body': 'of course, that makes sense since it\'s under the hood of spatial joins... \r\nI was looking here instead: https://geopandas.org/en/stable/docs/reference/api/geopandas.sindex.SpatialIndex.query_bulk.html\r\n\r\nThis is what I keep testing and still get different results than doing the original `sjoin`\r\n\r\n```\r\nrabs_idx, edges_idx = edges.sindex.query_bulk(rab_multipolygons.geometry, predicate= ""covered_by"")\r\nidx_drop = edges.index.take(edges_idx)\r\n```\r\n-> `idx_drop`  is empty in this case\r\n\r\n```\r\nidx_drop = edges.sjoin(rab_multipolygons, predicate=""covered_by"").index\r\n```\r\n-> `idx_drop` actually has the roundabout lines (excluding the incoming lines)\r\n\r\nAny idea what could be happening? (I feel it has to be an oversight from my side)', 'comment_created': datetime.datetime(2022, 8, 12, 10, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 944361869, 'comment_body': 'It is not the most intuitive but the sindex query is working in an opposite direction to sjoin\r\n\r\n- sindex: return _edges_ that are _""covered_by""_ by _rab_multipolygons.geometry_\r\n- sjoin: join _rab_multipolygons_ to _edges_ if _rab_multipolygons_ are _""covered by""_ by _edges_\r\n\r\nSo the query needs to be opposite.', 'comment_created': datetime.datetime(2022, 8, 12, 11, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 946710565, 'comment_body': 'The latest update now includes `coins.stroke_attribute` following the correction done last week by @amorfinv ! \r\nMuch cleaner, indeed! ', 'comment_created': datetime.datetime(2022, 8, 16, 12, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 952548003, 'comment_body': ""Strictly speaking, you don't need to assign these as columns because those boolean filters you are creating below will work as well with the series' directly. Then you can probably avoid the copy above."", 'comment_created': datetime.datetime(2022, 8, 23, 12, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 952550628, 'comment_body': 'Why?', 'comment_created': datetime.datetime(2022, 8, 23, 12, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 952551903, 'comment_body': 'Ahh, I see why. Can you expand this comment to explain the hack?', 'comment_created': datetime.datetime(2022, 8, 23, 12, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 952553120, 'comment_body': 'Add `# TODO` string here and let it be.', 'comment_created': datetime.datetime(2022, 8, 23, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 952555868, 'comment_body': 'Not really, leave it.', 'comment_created': datetime.datetime(2022, 8, 23, 12, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 952570753, 'comment_body': '```suggestion\r\n   roundabout_simplification\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 12, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 953979460, 'comment_body': '```suggestion\r\n    if len(edges[edges.geom_type != ""LineString""]) > 0:\r\n        raise TypeError(\r\n            ""Only LineString geometries are allowed. Try using the `explode()` method to explode MultiLineStrings.""\r\n        )\r\n```\r\n\r\nInstead of using `assert`, raise an error. (it probably needs to be blacken)', 'comment_created': datetime.datetime(2022, 8, 24, 15, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 954556579, 'comment_body': 'Line 770 assigns a new column to gdf, which may be unwanted if the user passed it themselves. Try this (untested):\r\n\r\n```suggestion\r\n    area = gdf.area\r\n    circom = CircularCompactness(gdf, area).series\r\n    \r\n    # selecting round about polygons based on compactness\r\n    mask = circom_serie > circom_threshold\r\n    rab  = gdf[mask]\r\n    # exclude those above the area threshold\r\n    area_threshold_val = area.quantile(area_threshold)\r\n    rab = rab[area[mask] < area_threshold_val]\r\n```', 'comment_created': datetime.datetime(2022, 8, 25, 6, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 954559105, 'comment_body': '```suggestion\r\n    # Hack until shapely 2.0 is out.\r\n    # TODO: replace pygeos with shapely 2.0\r\n```\r\n\r\nit is good to keep `# TODO` in there as I sometimes look for these and fix them. ', 'comment_created': datetime.datetime(2022, 8, 25, 6, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 954563286, 'comment_body': '```suggestion\r\n    incoming_label = ""rab_"" + incoming_all.index_right.astype(str)\r\n```\r\n\r\nthis is optimised in pandas, list comprehension will be slower', 'comment_created': datetime.datetime(2022, 8, 25, 6, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 954727784, 'comment_body': 'I knew there had to be something better! thanks', 'comment_created': datetime.datetime(2022, 8, 25, 9, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 954747775, 'comment_body': ""I did try that earlier. \r\nThe reason it's useful to have it as a column is that a bit further (line 792) I use the column to define adjacent_polys.\r\nBut I will create an `if` clause for the user to provide the column name in case it already exists."", 'comment_created': datetime.datetime(2022, 8, 25, 9, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 954789084, 'comment_body': ""The line 792 is not using this column. Since you are calling it as `gdf.area` and not `gdf['area']`, the geopandas attribute measuring the area has a precedence."", 'comment_created': datetime.datetime(2022, 8, 25, 10, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 954807062, 'comment_body': 'ups ! just saw your (quick) reply.\r\nI submitted a quick enhancement to accommodate for `area_col` as input. \r\n\r\nWhat was happening on line 792 (now 803) is that I was comparing the areas of the possible `rabs` against the areas of the possible `adjacent_polys` after the spatial join.\r\n\r\nlet me know it this too cumbersome and I can revert to something different', 'comment_created': datetime.datetime(2022, 8, 25, 10, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 963911911, 'comment_body': 'Is this comment needed?', 'comment_created': datetime.datetime(2022, 9, 6, 16, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 963917941, 'comment_body': 'Would it make more sense to break this one test of 5 checks into 5 tests? Something as simple as `test_roundabout_simplification_1()`,   `test_roundabout_simplification_2()`, etc.\r\n\r\nThe data reads an polygonize can still be preformed once in the `setup_method()`.', 'comment_created': datetime.datetime(2022, 9, 6, 16, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 963920958, 'comment_body': 'Remove one of the comments. See also lines 778, 830, and 980.', 'comment_created': datetime.datetime(2022, 9, 6, 16, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 963922150, 'comment_body': '*Compactness', 'comment_created': datetime.datetime(2022, 9, 6, 16, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 963924340, 'comment_body': '""roundabout"" is generally one word.', 'comment_created': datetime.datetime(2022, 9, 6, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 963930237, 'comment_body': 'We can probably remove this comment.', 'comment_created': datetime.datetime(2022, 9, 6, 16, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 963930845, 'comment_body': '""vectorize""', 'comment_created': datetime.datetime(2022, 9, 6, 16, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 963934261, 'comment_body': ""Sometime its better to use ``gdf = gdf.drop_duplicates()`` for readability, though I personally don't have a strong preference. @martinfleis What are your thoughts on this?"", 'comment_created': datetime.datetime(2022, 9, 6, 16, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 963935287, 'comment_body': '*need', 'comment_created': datetime.datetime(2022, 9, 6, 16, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 963936920, 'comment_body': 'Correct spelling and column names to `""dist_first_pt""`. See also line 932.', 'comment_created': datetime.datetime(2022, 9, 6, 16, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 963937710, 'comment_body': 'checking *if', 'comment_created': datetime.datetime(2022, 9, 6, 16, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 963938554, 'comment_body': ""Best to either stick with 'linestrings' or LineStrings."", 'comment_created': datetime.datetime(2022, 9, 6, 16, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 963938934, 'comment_body': '~~of~~', 'comment_created': datetime.datetime(2022, 9, 6, 16, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 963939494, 'comment_body': '*maintaining the same gdf shape as the original', 'comment_created': datetime.datetime(2022, 9, 6, 16, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 963944159, 'comment_body': 'Is line 992 needed or can we simply go directly with 993?', 'comment_created': datetime.datetime(2022, 9, 6, 16, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 963945844, 'comment_body': '*according', 'comment_created': datetime.datetime(2022, 9, 6, 16, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 964488967, 'comment_body': 'There might be a way to keep this on a single line but because `incoming_label` only has certain matching values to `new_edges`, I was having an error for different lengths... \r\n@martinfleis can you think of a workaround? ', 'comment_created': datetime.datetime(2022, 9, 7, 7, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 964490695, 'comment_body': ""oh true ! ... \r\nI believe I've seen this notation `gdf = gdf.drop_duplicates()` on the code so I'll stick to that, easy fix!"", 'comment_created': datetime.datetime(2022, 9, 7, 7, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 964498187, 'comment_body': ""That makes sense... I'll implement that, thanks !"", 'comment_created': datetime.datetime(2022, 9, 7, 7, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 964571499, 'comment_body': 'I belie that if you delete just `new_edges[""simpl_edge""] = np.nan` the result will be the same. Pandas matches the series based on the index and fills non-matching observations with NaN itself.', 'comment_created': datetime.datetime(2022, 9, 7, 8, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 965009244, 'comment_body': 'This method for determining version compatibility seems a bit cumbersome and would produce desired results for version over `v1.0.0` for example. Let try something simpler, like which is already in [here](https://github.com/pysal/momepy/blob/main/momepy/preprocessing.py#L28).', 'comment_created': datetime.datetime(2022, 9, 7, 15, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 965024036, 'comment_body': ""that's much cleaner, indeed... \r\n(slow learnings, here)"", 'comment_created': datetime.datetime(2022, 9, 7, 15, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 965026114, 'comment_body': ""Don't be hard on yourself! Everything takes some practice!"", 'comment_created': datetime.datetime(2022, 9, 7, 15, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 965034009, 'comment_body': ""We'll either need to skip tests for that function if version is lower than 0.9.0 ***or*** test that the error is caught if using those versions. The second choice is probably what we want to do, correct me if I'm wrong @martinfleis. [Here's an example](https://github.com/pysal/momepy/blob/main/tests/test_graph.py#L42) of how to do that."", 'comment_created': datetime.datetime(2022, 9, 7, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 965086437, 'comment_body': 'On line 34, there is\r\n\r\n```py\r\nGPD_10 = Version(gpd.__version__) >= Version(""0.10"")\r\n```\r\n\r\nAdd \r\n```py\r\nGPD_09 = Version(gpd.__version__) >= Version(""0.9"")\r\n```\r\nthere and then use this here:\r\n\r\n```suggestion\r\n    if not GPD_09:\r\n        raise ImportError(\r\n            f""`roundabout_simplification` requires geopandas 0.9.0 or newer. Your current version is {gpd.__version__}.""\r\n        )\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 17, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 965225860, 'comment_body': ""@jGaboardi thanks for that example... I admit I'm not familiar with the WITH statement and therefore will need to get my head around to be able to skip all tests if GDP version is less than 0.9.0 (which by the way is when 'predicate `touches` seems to have been surfaced according to the documentation of 0.8.1 and 0.8.2)"", 'comment_created': datetime.datetime(2022, 9, 7, 20, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 965231073, 'comment_body': ""So maybe we should add the conditional for less than `0.8.1`?\r\n\r\nAs for the `with` statement, it is used to isolate a specific block of code. For use in testing it is nice because we can run a test that we know will fail, for example [here](https://github.com/pysal/momepy/blob/main/tests/test_utils.py#L32-L34) we know that a `ValueError` should be raised and we can test for it. In our case, we know that an `ImportError` should be raised and we can test for that *only if* we don't have the proper version of GeoPandas (made `0.8.1`?)."", 'comment_created': datetime.datetime(2022, 9, 7, 20, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 965246364, 'comment_body': ""sorry what I meant to say is that the first time the predicate 'touches' appears is on 0.9.0 (`touches` is used in a couple of places during the process - so, actually, quite vital for overall success)\r\n[Here are the docs of 0.8.2 ](https://geopandas.org/en/v0.8.2/reference/geopandas.sjoin.html?highlight=sjoin#geopandas.sjoin) for reference.\r\n\r\nas for the `with` statement, I think I understand the idea behind but I just don't really know what should be tested (if anything at all) when geopandas is less than 0.9.0... \r\n\r\nmy current line 139 : \r\n`with pytest.raises(TypeError): # unsure how to develop this`"", 'comment_created': datetime.datetime(2022, 9, 7, 20, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 965301495, 'comment_body': 'Ah, OK. The purpose is to ensure errors are raised when we know they should be raised. And since we know that we need at least version 0.9.0 to use the roundabouts simplification, we should test that an `ImportError` is raised if using less than that (because we added that stipulation into `roundabout_simplification()`. So maybe something the following would be good ~~and then repeat for each of the 5 simplification tests that you wrote~~ (only testing on one is OK):\r\n\r\n```python\r\ndef test_roundabout_simplification_1(self):\r\n     if not GPD_09:\r\n         with pytest.raises(ImportError):\r\n             mm.roundabout_simplification(self.df_streets_rabs)\r\n     else:\r\n         check = mm.roundabout_simplification(self.df_streets_rabs)\r\n         assert len(check) == 65\r\n         assert len(self.df_streets_rabs) == 88  # checking that nothing has changed\r\n```\r\n\r\nAnd along the same lines, we can also check that the `TypeError` is raised properly by creating a test that passing in MultiLineStrings, Points, etc...', 'comment_created': datetime.datetime(2022, 9, 7, 21, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jGaboardi', 'type': 'User'}, {'comment_id': 965635149, 'comment_body': ""OK yeah, that makes more sense in my head now! \r\nI've used your code for test_1 but I only create an if clause that skips the tests when GPD_09 is false (i.e. less than 0.9.0) for the other 4 tests. \r\n\r\nAs for the TypeError, do you mean that it would be worth adding an extra layer to the file current _gpkg_ with Multi geometries and another one with Points to catch the errors ?! -> just confirming before I go ahead and change files and stuff. :) \r\nI appreciate the extra attention this is taking, btw! \r\n\r\n"", 'comment_created': datetime.datetime(2022, 9, 8, 8, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 965638113, 'comment_body': '> As for the TypeError, do you mean that it would be worth adding an extra layer to the file current gpkg with Multi geometries and another one with Points to catch the errors ?! -> just confirming before I go ahead and change files and stuff. :)\r\n\r\nNot worth it.', 'comment_created': datetime.datetime(2022, 9, 8, 8, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 965645409, 'comment_body': 'Can you rename these and instead of `_1` `_2` `_3` use something like `_default`, `_high_threshold`, `_low_threshold`, so we know what aspect is the test checking from the name?', 'comment_created': datetime.datetime(2022, 9, 8, 8, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 965649588, 'comment_body': '```suggestion\r\n    @pytest.mark.skipif(not GPD_09, reason=""requires geopandas 0.9+"")\r\n    def test_roundabout_simplification_2(self):\r\n        check = mm.roundabout_simplification(\r\n            self.df_streets_rabs, self.df_rab_polys, circom_threshold=0.97\r\n        )\r\n        assert len(check) == 77\r\n        assert len(self.df_streets_rabs) == 88\r\n```\r\n\r\nThis is another trick pytest can do. Instead of condition you use this decorator and the test is skipped for older geopandas. Use the same for all of them.', 'comment_created': datetime.datetime(2022, 9, 8, 8, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 965652534, 'comment_body': 'See the comment on decorators below. What I would do is to turn this into a test by itself.\r\n\r\n```py\r\n@pytest.mark.skipif(GPD_09, reason=""requires geopandas 0.9+"")\r\ndef test_roundabout_simplification_gpd_error(self):\r\n    with pytest.raises(ImportError, match=""`roundabout_simplification` requires geopandas 0.9.0""):\r\n        mm.roundabout_simplification(self.df_streets_rabs)\r\n```\r\n\r\nThis is to make sure each test focuses on one thing to check, in this case an error. I am also adding `match` to check that the exact error is raised, not just some ImportError.', 'comment_created': datetime.datetime(2022, 9, 8, 8, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 965747493, 'comment_body': '```suggestion\r\n    @pytest.mark.skipif(not GPD_09, reason=""requires geopandas 0.9+"")\r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 9, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 966989265, 'comment_body': '`""simpl_edge""` is not a very intuitive name. Same as the value that comes with it (i.e. `rab_12`). It should be clear what it is and what it refers to. What is `12` in `rab_12`? Why do I get 3 groups if I use your testing data that are `rab_6`, `rab_8` and `rab_12`? Where does this come from in relation to my original data? Why do I get it back?', 'comment_created': datetime.datetime(2022, 9, 9, 11, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 967028913, 'comment_body': ""Let me explain further to come up with better namings.\r\n`simple_edge` --> short for 'simplified_edge' : This is a column that's aimed at identifying the edges that have been altered during this process. In my head, the upcoming methods() will further populate this same column. \r\n\r\n`rab_` --> short for 'roundabout'. The number comes originally from the `id` of the roundabout polygon which is used to identify the overall group (including adjacent polygons when appropriate).\r\n"", 'comment_created': datetime.datetime(2022, 9, 9, 12, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}, {'comment_id': 967143911, 'comment_body': ""Okay. I think that if we're adding this as a column to the data that didn't have it previously, it needs to be useful for the user. I would call the column `simplification_group` and try to return numerical ids, not strings with rab_. Why are some values missing? I would expect I'd get 1, 2, 3, not 6, 8, 12. "", 'comment_created': datetime.datetime(2022, 9, 9, 14, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'martinfleis', 'type': 'User'}, {'comment_id': 967292609, 'comment_body': 'just made said changes ...', 'comment_created': datetime.datetime(2022, 9, 9, 17, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gregmaya', 'type': 'User'}]","[{'commit_sha': '35ba1320921d2fe265443f215d4b0ab696c5db13', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59f45f140370b53fdd6b8359fd976c3c780eaafd', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e01d5432ffd0f082943b176af22a8e7b379f885', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf86cac0532ed9d60fa273895bf2f059395af070', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cc0de0e1b322e86a5b16a6ff81b2cddbf59e242', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f58a0dff6f5a71ee9211268a75c8e544df37b2cf', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd2e1ea580c2a85a41b9336cff80920f06908416', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4194b638c12f6c5d746d4f855b6ce42d0ebd260', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be79d5548dc77c75db5aa3d80ef3864a1cc1a329', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f33a8292f1c9dc1db8ad1c77a18764af7a3c816c', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2fdb3ea299711d7aa1c960911914bdfb6585ee5', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8adbdcff6eae9df603282d765b7c68c6b504942f', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49d4cbcf86b0aa146ce89f6b0c625a3643b46257', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5605cf13288741ebdbd6a0e3b3b753fbb3d4537a', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a502bc097df15489939b40f1496d0fcaf3e51e4', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5be110456175a920542c53e007fd57c39a15c118', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50bc7996d96dfb76447305b2bd7c5b442c05e379', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f21f3a918786f671d23076ab5eaec7a43dfa28c7', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a558c940d54c4125a4d1e5ca0d2c4bfbc8bd130', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82b522bdc326c3e088d93041f28713c4fecd915b', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7972770d165605aeb2f3c3df2fb4be6995ace7e0', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6116e9714340aa71ffb685f1e9cebf90ab1d4b03', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91d364e505dad43652db0670b6a4a847e3e4bb24', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '588e9bf379ce08dfd253db738ae9820e6d4b94be', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd44071aa3c395dbfb8a49e14f9860062f9124608', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd22d4d1368e3ec7d504497323a53046cab5cad71', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2ee146113f1042f0aab37c9f2c8fefa9e82b85', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e74b6a212fc57d339e93218d2890a9a4c1dafeef', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77a3a20aa0fc6d388bbf8c5d8d9390ff8bc75fc5', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dac8322803b183eb2c877dd216b5b87c6b7a5fa9', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c991ac7810fdbe2122ce4a48992333c1026e451', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8f1846d3ad8a8febce9b737919a0543aa412208', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d474925203d13c5c935785f0e69f390d2f4450f', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd540068182fddcf3991eb08ef164defb408a19bc', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '615c3169347d53d309bc19ab3e3624ec48d75333', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '909665d3f0e6cf6550240353ac0874872ed02440', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18a852f9de3a189a3ce14709357f469ae34200c0', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}]",Greg Maya,24941438,gregoriomaya@gmail.com,User,,10,,17,6
1052489712,ENH: roundabout_simplification() notebook example,What it says on the tin!,True,392,https://api.github.com/repos/pysal/momepy/pulls/392,https://github.com/pysal/momepy/pull/392,closed,943,0,2,10,13,0,1,1,[{'name': 'GSoC 2022'}],2022-09-11 12:15:05+00:00,2022-09-14 08:40:48+00:00,246343.0,"2 days, 20:25:43",[],"[{'commit_sha': '2d33f60f0f42a02a9488c11479507909ff5ddb12', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42443e510a4756e130e2e59ca922bf8f3e7e3676', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '874f20a512050123b6dec9cc8ea875054af6ea38', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fb97e121e7ca126b85e276d6cc66798b6e2b543', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a8e5fa4142b8ba7ba55b8849c2ed0effb2393f', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20c66487665345db166ae661efda7475f153d681', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '887ddb12823353d00ff60ded86212592e14d0fbf', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f37c4f4792dbd5ded2887fac6286d40137188d29', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d7720d86842bd3bfbf835576d85223ba379df54', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab586c948629a1aed1bc6340ba18fc662cf1cd47', 'committer_username': 'martinfleis', 'committer_name': 'Martin Fleischmann', 'committer_email': 'martin@martinfleischmann.net', 'commit_date': datetime.datetime(2018, 2, 24, 16, 51, 51, tzinfo=datetime.timezone.utc)}]",Greg Maya,24941438,gregoriomaya@gmail.com,User,,10,,17,6
1053316629,ENH: helper functions for geometry-based network simplification,"I wanted to leave this PR open to be able to refer to it in my [GSOC README](https://github.com/gregmaya/gsoc2022_network_simpl#readme).
I know there are quite a few things still to be done here so might be worth holding back a very thorough review",False,396,https://api.github.com/repos/pysal/momepy/pulls/396,https://github.com/pysal/momepy/pull/396,closed,165,1,1,1,11,0,3,1,"[{'name': 'enhancement'}, {'name': 'GSoC 2022'}, {'name': 'preprocessing'}]",2022-09-12 13:06:34+00:00,2024-06-15 13:54:10+00:00,55471656.0,"642 days, 0:47:36",[],"[{'commit_sha': '6789d1b842f372e9a7558c34ef271803790bb9c5', 'committer_username': 'gregmaya', 'committer_name': 'Greg Maya', 'committer_email': 'gregoriomaya@gmail.com', 'commit_date': datetime.datetime(2017, 1, 5, 16, 46, 29, tzinfo=datetime.timezone.utc)}]",Greg Maya,24941438,gregoriomaya@gmail.com,User,,10,,17,6

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
127455065,momepy,pysal/momepy,Python,58,475,21,17,857,19,4,1,"[{'id': 1021037557, 'number': 377, 'closed': datetime.datetime(2024, 1, 23, 21, 21, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 4, 53, tzinfo=datetime.timezone.utc), 'time_taken': 46024097.0, 'time_delta': '532 days, 16:28:17', 'additions': 2125, 'deletions': 4, 'state': 'closed'}]"
