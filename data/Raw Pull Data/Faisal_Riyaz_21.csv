pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
425891205,Implementation of class to represent a parametric region in space,"Added an implementation of ParamRegion class.
<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
#19320 

#### Brief description of what is fixed or changed
An object of the ParametricRegion class should represent a parametric region in space. This object can then be used to perform scalar/vector integration over parametric regions.

#### Other comments

#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* vector
  * Added class to represent a parametric region in space.
<!-- END RELEASE NOTES -->",True,19472,https://api.github.com/repos/sympy/sympy/pulls/19472,https://github.com/sympy/sympy/pull/19472,closed,158,0,4,12,9,49,2,0,"[{'name': 'GSoC'}, {'name': 'vector'}]",2020-06-01 10:28:58+00:00,2020-06-10 20:15:31+00:00,812793.0,"9 days, 9:46:33","[{'comment_id': 433454338, 'comment_body': ""Is the parametric region defined within a `CoordSys3D` object? Can this be made optional? It's easier to use if you don't have to define too many objects."", 'comment_created': datetime.datetime(2020, 6, 1, 19, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 433454935, 'comment_body': '`self._system = system` would be the standard way... then\r\n ```\r\n@property \r\ndef system(self):\r\n    return self._system\r\n```\r\n\r\nThis make sure that `system` cannot be modified by the user.', 'comment_created': datetime.datetime(2020, 6, 1, 19, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 433455106, 'comment_body': 'Why this restriction?', 'comment_created': datetime.datetime(2020, 6, 1, 19, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 433458293, 'comment_body': 'Basic subclasses should use `__new__` rather than `__init__` and should access their data from `self.args`.', 'comment_created': datetime.datetime(2020, 6, 1, 20, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 433598484, 'comment_body': ""Yes, It will be easier if a user does not have to pass the `CoordSys3D` object. But we need to determine base scalars otherwise the definition of a parametric region is incomplete. A parametric representation is just defining base scalars in terms of some parameters. \r\n\r\nWe can avoid passing the `CoordSys3D` object if we use the base scalars of the vector/scalar field  which needs to be integrated. So, if a user does not pass a `CoordSys3D` object, then SymPy will use the base scalars of the vector/scalar field used for integration. \r\n\r\n```python\r\nC = CoordSys3D('C')\r\nR = C.locate_new('R', 3*C.i + 4*C.j + 5*C.k)\r\np = ParametricRegion(t, t**2, (t, 0, 1))\r\nParametricIntegral(C.x*C.y*C.z*C.i, p) # Define p in terms of C.x, C.y and C.z \r\nParametricIntegral(R.x*R.y, p) # Define p in terms of R.x, R.y and R.z  \r\n```"", 'comment_created': datetime.datetime(2020, 6, 2, 3, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 433598607, 'comment_body': 'Yes, I will correct it.', 'comment_created': datetime.datetime(2020, 6, 2, 3, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 433602439, 'comment_body': 'Thanks, I noticed this. All subclasses of `Basic` in sympy use `__new__`.\r\n\r\nWhat is the reasoning behind this? AFAIK, we should use `__new__` if we intend to return objects of different types based on some conditions.', 'comment_created': datetime.datetime(2020, 6, 2, 3, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 433652480, 'comment_body': '> return objects of different types based on some conditions.\r\n\r\nThis is what is often done in SymPy. For example, `Rational.__new__` may return an instance of `Integer` and `Integer.__new__` may return `S.One`.', 'comment_created': datetime.datetime(2020, 6, 2, 6, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 433652819, 'comment_body': ""Maybe we should return bounds in the form of dict().\r\n```\r\n{t: (0, 1)}\r\n```\r\nThis form will be more useful for 'ParametricIntegral` class."", 'comment_created': datetime.datetime(2020, 6, 2, 6, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 433758002, 'comment_body': 'I think the vector module supports only 3-D Coordinate frame. If we cannot define a vector field of more than 3 dimensions, then why allow defining a higher dimensional parametric surface. There will be no corresponding base scalars.  ', 'comment_created': datetime.datetime(2020, 6, 2, 9, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 433850304, 'comment_body': ""I don't see the point of having this restriction. ParametricRegion shouldn't only be defined in 3D."", 'comment_created': datetime.datetime(2020, 6, 2, 12, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 433850880, 'comment_body': 'What about using a convention similar to Lambda?', 'comment_created': datetime.datetime(2020, 6, 2, 12, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 433858256, 'comment_body': 'OK, I have removed these conditions in the new commit.', 'comment_created': datetime.datetime(2020, 6, 2, 13, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 433891888, 'comment_body': '@Upabjojr Can you please give an example.', 'comment_created': datetime.datetime(2020, 6, 2, 13, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 434689026, 'comment_body': 'What about defining some precise signature? `*args` is a bit ambiguous.', 'comment_created': datetime.datetime(2020, 6, 3, 16, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 434690235, 'comment_body': 'What about `ParametricRegion((), (3, 4))` to define a point? That is... first argument is the tuple of parameters (in this case an empty tuple), second one the mapping.\r\n\r\nI think this would be more intuitive. What do you think?', 'comment_created': datetime.datetime(2020, 6, 3, 16, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 434691539, 'comment_body': ""Maybe we could have either `ParametricRegion((y,), (y, -3, 3))` or `ParametricRegion(C, (C.y, -3, 3))`.\r\n\r\nThat is, if the first argument is a tuple, then it's assumed to be a list of variable-parameters. If it is a `CoordSys3D` object, then use its scalars as parameters.\r\n\r\nThis means that `ParametricRegion` would always take 2 arguments when called. What do you think of this API?"", 'comment_created': datetime.datetime(2020, 6, 3, 16, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 434718236, 'comment_body': '@Upabjojr How will we get the definition of base scalars in terms of parameters? Also,  if we fix the number of arguments to 2, we have to use nested tuples to define the bounds for more than 2 parameters\r\n```python\r\nParametricRegion((r, theta), ((r, 0, 2), (theta, 0, pi))\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 16, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 434722449, 'comment_body': 'What about:\r\n\r\n```python\r\nParametricRegion(((r, 0, 2), (theta, 0, pi)), (r*cos(theta), r*sin(theta)))\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 6, 3, 17, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 434723009, 'comment_body': 'I just want to have a simple API... my fear is that too many parameters will make this class difficult to use.', 'comment_created': datetime.datetime(2020, 6, 3, 17, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 434723263, 'comment_body': ""> That is, if the first argument is a tuple, then it's assumed to be a list of variable-parameters. If it is a CoordSys3D object, then use its scalars as parameters.\r\n\r\nYes, this API looks simple and easy but\r\n\r\nI am not able to understand what this region represents. \r\n```python\r\nParametricRegion(C, (C.y, -3, 3))\r\n```\r\n For me, `ParametricRegion(C.y, (C.y, -3, 3), system=C)` represents the line y=x where y varies from -3 to 3. Does this represent the same region?\r\n "", 'comment_created': datetime.datetime(2020, 6, 3, 17, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 434730622, 'comment_body': 'This one looks good to me. It is still not very simple but we have to keep some minimum parameters. They are essential for defining a parametric region. ', 'comment_created': datetime.datetime(2020, 6, 3, 17, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 434734890, 'comment_body': 'Yes, `*arg` is ambiguous. I used so we can define base scalars and bounds without nesting them in a tuple.', 'comment_created': datetime.datetime(2020, 6, 3, 17, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 434829889, 'comment_body': 'Pay attention that dictionaries are not ordered. Maybe we care about the order of parameters?', 'comment_created': datetime.datetime(2020, 6, 3, 20, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 434830397, 'comment_body': 'what about `def __new__(cls, parameters_or_coordsys, mapping_tuple, **kwargs):` ?', 'comment_created': datetime.datetime(2020, 6, 3, 20, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 434831104, 'comment_body': ""It's the same concept for integrals:\r\n```python\r\nIntegral(x, x)  # ==> indefinite\r\nIntegral(x, (x, 0, 10))  # ==> definite\r\n```\r\n\r\nIf you have a better API idea, you're welcome to suggest."", 'comment_created': datetime.datetime(2020, 6, 3, 20, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 434832698, 'comment_body': ""> For me, `ParametricRegion(C.y, (C.y, -3, 3), system=C)` represents the line y=x where y varies from -3 to 3. Does this represent the same region?\r\n\r\nOh, I see. With `ParametricRegion(C, (C.y, -3, 3))` I think of the line y = -3 and z = 3, with `C.y` being the parameter varying along the x-axis (x-axis because it's in the first position)."", 'comment_created': datetime.datetime(2020, 6, 3, 20, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 435245796, 'comment_body': 'OK. It is better to use a list or tuple.', 'comment_created': datetime.datetime(2020, 6, 4, 13, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 435426106, 'comment_body': '> line y = -3 and z = 3, with C.y being the parameter varying along the x-axis\r\n\r\nI think we can define this region without using the coordinate scalar. How is this different from \r\n```python\r\nParametricRegion((t), (t, -3, 3))\r\n```', 'comment_created': datetime.datetime(2020, 6, 4, 17, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 435434908, 'comment_body': ""```python\r\nParametricRegion((r, theta), (r*cos(theta), r*sin(theta)), r=(0,1), theta=(0, pi))\r\nParametricRegion(C, (C.y, 3, -3), C.y=(4,6))\r\n```\r\nI don't think the User should pass a tuple of parameters or CoordSys3d object. \r\nWe can easily determine the parameters using key values of the dictionary.\r\n\r\nBut we should also add an optional parameter for specifying the base scalars(see discussion above on `CoordSys3D` object) if a user does not want to user base scalars of the scalar/vector field. You mentioned using some lambda convention. Please explain that part.\r\n\r\nWhat about this API @Upabjojr ?\r\n```python\r\ndef __new__(cls, system=None, mapping_tuple, **kwargs): \r\n```\r\nExample\r\n```python\r\nParametricRegion(((r*cos(theta), r*sin(theta)), r=(0,1), theta=(0, pi))\r\nParametricRegion(system=C, (C.y, 3, -3), C.y=(4,6)) \r\n```\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 4, 17, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 435524807, 'comment_body': '`r=(0, 1), theta=(0, pi)` is not very intuitive, what about a dict of bounds?\r\n\r\nWhat about this:\r\n```python\r\nParametricRegion((r, theta), (r*cos(theta), r*sin(theta)), limits={r: (0,1), theta: (0, pi)})\r\nParametricRegion(C, (C.y, 3, -3), limits={C.y: (4,6)}) \r\n```\r\n\r\n> You mentioned using some lambda convention. Please explain that part.\r\n\r\nDefine variable tuple, then mapping tuple.', 'comment_created': datetime.datetime(2020, 6, 4, 20, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 435525411, 'comment_body': '`(t)` is not a tuple, `(t,)` is. Unfortunately Python has some strange syntax.', 'comment_created': datetime.datetime(2020, 6, 4, 20, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 435690373, 'comment_body': 'I am still not sure why a user needs to pass a tuple specifying parameters. SymPy can determine them using the dict of bounds. Will it be more intuitive for users?\r\n```python\r\nParametricRegion((r*cos(theta), r*sin(theta)), limits={r: (0,1), theta: (0, pi)})\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 4, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 435699919, 'comment_body': ""Okay, I somehow didn't noticed this. Then, to make it easier for users, we can put a condition like\r\n```python\r\n        if not isinstance(parameters, tuple):\r\n            parameters = (parameters,)\r\n        if not isinstance(definition, tuple):\r\n            definition = (definition,)\r\n```\r\nA similar situation if a user wants to define a definition tuple of length 1.\r\n\r\nOr maybe we can raise some value error when the user does pass a tuple.\r\n"", 'comment_created': datetime.datetime(2020, 6, 5, 5, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 436060215, 'comment_body': ""Well, a dict does not have an order, while a tuple does. Plus, it's the same definition of lambdas:\r\n```python\r\nlambda r, theta: (r*cos(theta), r*sin(theta))\r\n```"", 'comment_created': datetime.datetime(2020, 6, 5, 17, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 436109174, 'comment_body': '+1 for passing parameter_tuple then.\r\n', 'comment_created': datetime.datetime(2020, 6, 5, 18, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 436115127, 'comment_body': '@Upabjojr What are your thoughts on the system parameter?\r\nAs discussed above, We have two options:\r\n* Assume that the mapping of param region is to base vectors of the scalar/vector field.\r\n```python\r\np = ParametricRegion((r, theta), (r*cos(theta), r*sin(theta)), limits={r: (0,1), theta: (0, pi)})\r\nIntegral(C.x**2*C.y, p)\r\n# C.x = r*cos(theta),  C.y = r*sin(theta), C.z = C.z\r\nIntegral(R.x*R.y*R.z, p)\r\n# R.x = r*cos(theta),  R.y = r*sin(theta), R.z = R.z\r\n```\r\n* The other option is to allow users if they wish to specify the coordinate system.\r\n```python\r\np = ParametricRegion((r, theta), (r*cos(theta), r*sin(theta)), limits={r: (0,1), theta: (0, pi)}, system = C)\r\nIntegral(R.x*R.y*R.z, p)\r\n# C.x = r*cos(theta),  C.y = r*sin(theta), C.z = C.z\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 19, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 436361128, 'comment_body': 'What about setting `limits` to be optional? For example, with a default `limits=None` argument.', 'comment_created': datetime.datetime(2020, 6, 7, 13, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 436361975, 'comment_body': 'Yes, It will be better. I will do it.', 'comment_created': datetime.datetime(2020, 6, 7, 13, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 436861424, 'comment_body': 'We usually leave two empty lines on the base scope...', 'comment_created': datetime.datetime(2020, 6, 8, 17, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 437284459, 'comment_body': 'I see you have introduced `parameters_or_coordsys` only because you have to deal with coordinate systems `C`, but as you mix coordinate scalars and ordinary symbols in this way, you can always specify the region regardless of the ambient space of the coordinate systems and it loses no generality to use ordinary symbols like `x, y, z` everywhere in place of coordinate systems.\r\n\r\nAnd also what would be the necessary reason to pass `C` in place of `(C.x, C.y, C.z)` if they are implicitly converted any way?', 'comment_created': datetime.datetime(2020, 6, 9, 9, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 437582074, 'comment_body': '> And also what would be the necessary reason to pass `C` in place of `(C.x, C.y, C.z)` if they are implicitly converted any way?\r\n\r\nShortcut?', 'comment_created': datetime.datetime(2020, 6, 9, 16, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 437590376, 'comment_body': '> it loses no generality to use ordinary symbols like x, y, z everywhere in place of coordinate systems.\r\n\r\nYes, I agree. I think we can replace base scalars with any variable. Suppose we want to represent a rectangle:\r\n```python\r\nParametricRegion(C, (C.x, C.y), {C.x: (1, 2), C.y: (3, 5)})\r\n```\r\nWe can write equiavalently write this as\r\n```python\r\nParametricRegion((x, y), (x, y), {x: (1, 2), y: (3, 5)})\r\n# C.x = x,  C.y = y, C.z = C.z\r\n``` ', 'comment_created': datetime.datetime(2020, 6, 9, 17, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 437602256, 'comment_body': 'Just to make this explicit,\r\nWhen we define the definition tuple ..suppose `(r*cos(theta), r*(sin(theta), r*sin(phi))`, this implies\r\n```\r\nC.x = r*cos(theta), C.y = r*(sin(theta), C.y = r*sin(phi)\r\n```\r\nThese base scalars are assumed. They may be determined from the base scalars of the vector/scalar field for integration.\r\nThe only reason I think we may need a coordinate system variable other than for shortcut is when one needs to specify base scalars (instead of using base scalars of the vector/scalar field).  \r\n\r\n```\r\np = ParametricRegion((r, theta), (r*cos(theta), r*sin(theta)), limits={r: (0,1), theta: (0, pi)})\r\nIntegral(C.x**2*C.y, p)\r\n# C.x = r*cos(theta),  C.y = r*sin(theta), C.z = C.z\r\nIntegral(R.x*R.y*R.z, p)\r\n# R.x = r*cos(theta),  R.y = r*sin(theta), R.z = R.z\r\n```\r\n', 'comment_created': datetime.datetime(2020, 6, 9, 17, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 437615194, 'comment_body': 'What happens if it is `Integral(R.x*C.y, p)`?\r\nPerhaps, `p` can have its own base scalars rather than implicitly connecting to some coordinate system scalars that are passed on?', 'comment_created': datetime.datetime(2020, 6, 9, 17, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 437621330, 'comment_body': '>> p can have its own base scalars rather than implicitly connecting to some coordinate system scalars that are passed on?\r\n\r\nYes, I am in favor of this. But there should be some relationship between the coordinate system of vector/scalar field and the coordinate system of the parametric region. For calculating the integral, we need to replace base scalars in the field with parameters. This requires some connection between them.\r\n\r\n@Upabjojr What do you think?', 'comment_created': datetime.datetime(2020, 6, 9, 18, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 437689988, 'comment_body': ""My original thought was just to use parameters. Mixing parameters and base scalars in the tests is a bit strange, but it's OK with me."", 'comment_created': datetime.datetime(2020, 6, 9, 20, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 437692752, 'comment_body': 'I think for the tests, we can leave them as it is. But for users, it should be preferred to not mix them.', 'comment_created': datetime.datetime(2020, 6, 9, 20, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 438368659, 'comment_body': '> What happens if it is Integral(R.x*C.y, p)?\r\n\r\nWe have to raise some kind of error if the parametric region is not associated with base scalars and depend on base scalars of the field.', 'comment_created': datetime.datetime(2020, 6, 10, 19, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}]","[{'commit_sha': 'bbf46a6cb93df4d760b8e8670ca967370f6335dd', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f544cf4bc386d7cf0da379a105d41909d2c67caf', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff5968d44b45ed032719171eb6ecd9f0f768864a', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f57a740e73b83964c23b4a0bddf6de560c086cb', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a58f05bce84c950e4743483ce208489ad6dec37', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d09368420e1a90f7a6f220767a8dc18d3738caa', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be86ee966a71c76e402aed3e7e984641f6a52b42', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ff12a6776abf0f8ecfc5ac607014b833e672b4', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68b460dabec5f160efb66f1f7ddcd09834139ad6', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '383fdb6ca6626649a3e34bf4627a966e12294027', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '406265c1c2b2fa11968a3532ad091023e78fd607', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b3a1211522a498315b8358fcc1f28d0457b6f54', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}]",Faisal Riyaz,32358424,faisalriyaz011@gmail.com,User,,44,,11,11
433326985,[WIP] Adding ParametricIntegral class,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
#19320 

#### Brief description of what is fixed or changed
An object of ParametricIntegral represents integral of a scalar or vector field over a Parametric Region.

#### Other comments
`_bounds_case` function is taken from @prasoon2211  [PR](https://github.com/sympy/sympy/pull/2208/files) with some modification. I have added him as a coauthor for the corresponding commit. 
#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* vector
    * added class to represent integral of scalar/vector field over a parametric surface.
<!-- END RELEASE NOTES -->",True,19539,https://api.github.com/repos/sympy/sympy/pulls/19539,https://github.com/sympy/sympy/pull/19539,closed,229,1,4,8,6,32,2,0,"[{'name': 'GSoC'}, {'name': 'vector'}]",2020-06-11 20:54:41+00:00,2020-06-25 20:07:29+00:00,1206768.0,"13 days, 23:12:48","[{'comment_id': 439595571, 'comment_body': '`Integral` inherits associative operator, which itself overloads the `__new__` constructor.', 'comment_created': datetime.datetime(2020, 6, 12, 19, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 439595945, 'comment_body': 'This API looks ok to me.', 'comment_created': datetime.datetime(2020, 6, 12, 19, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 439768451, 'comment_body': 'I am not sure how should I make this a subclass of Integral.\r\nAlso, I will make the API as initially proposed. I have used eval just to test.', 'comment_created': datetime.datetime(2020, 6, 13, 20, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 439768972, 'comment_body': 'Since no coordinate system is associated with the parametric region, we use the base scalars of the field. But if the field does not have any basescalar or vector, we cannot derive coordinate system. This breaks the logic\r\n\r\nExample:\r\n```python\r\n>>> p = ParametricRegion(t, (3*t - 2, t + 1), {t: (1, 2)}).\r\n>>> I = ParametricIntegral(C.x + C.y, p)\r\n>>> I.eval()\r\n5*sqrt(10)\r\n>>>\r\n>>> I = ParametricIntegral(1, p) ##We cannot extract coordinate system from 1\r\nStopIteration\r\n```\r\n', 'comment_created': datetime.datetime(2020, 6, 13, 21, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 439812993, 'comment_body': ""My opinion is that we should equip base scalars and base vector (fields) to the `ParametricRegion` if we want to use its intrinsic scalars and vector field components.\r\nI don't think that it makes much sense to have vector integral like `ParametricIntegral(C.x*C.i, p)` where C.x is linked to the base scalars of the parametric region and `C.i` is linked to embedding cartesian coordinate system. "", 'comment_created': datetime.datetime(2020, 6, 14, 10, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 439818002, 'comment_body': 'Agreed. But if we allow the coordsys parameter to be optional and None by default in ParametricRegion class, a similar situation can arise.\r\n', 'comment_created': datetime.datetime(2020, 6, 14, 11, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 440137076, 'comment_body': '@Upabjojr, your thoughts on this?', 'comment_created': datetime.datetime(2020, 6, 15, 12, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 440176018, 'comment_body': 'Changing the order of parameters cuases Integral to fail or get slow.\r\n```python\r\n>>> field = sqrt(C.x**2 + C.y**2)\r\n>>> cone1 = ParametricRegion((u,v), ((2-2*u/3)*cos(v), (2-2*u/3)*sin(v), u), {u: (0, 3), v: (0, 2*pi)})\r\n>>> cone2 = ParametricRegion((u,v), ((2-2*u/3)*cos(v), (2-2*u/3)*sin(v), u), {u: (0, 3), v: (0, 2*pi)})\r\n>>> ParametricIntegral(field, cone1)\r\n# It gets stuck\r\n>>> ParametricIntegral(field, cone2)\r\n8*sqrt(13)*pi/3\r\n```\r\n\r\nI think this is because `normal_vector` and `normal_vector.magnitude` becomes a large expression and Integral is not able to work on it. Using `simplify` on `normal_vector.magnitude` solves the problem.', 'comment_created': datetime.datetime(2020, 6, 15, 13, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 440358632, 'comment_body': 'Determining order for integration is necessary when bounds of parameters are interdependent.\r\nSuppose we need to calculate area of a triangle:\r\n```python\r\n>>> integrate(1, (x, 0, 2), (y, 10 - 5*x))\r\n20 - 10*x\r\n>>> integrate(1, (y, 0, 10 - 5*x), (x, 0, 2))\r\n10 # correct answer\r\n```', 'comment_created': datetime.datetime(2020, 6, 15, 18, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 440437786, 'comment_body': 'No need to inherit any classes, unless you really want to reuse some code of the upper class.', 'comment_created': datetime.datetime(2020, 6, 15, 20, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 440439177, 'comment_body': ""Probably it's better to separate vector and parametric integrals. At least for now."", 'comment_created': datetime.datetime(2020, 6, 15, 20, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 440440045, 'comment_body': 'Topological sort?', 'comment_created': datetime.datetime(2020, 6, 15, 20, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 440697229, 'comment_body': 'Yes, we need to perform a topological sort.\r\nThis function generates the graph and performs topological sort. It works on any number of parameters.\r\n```python\r\n    @classmethod             \r\n    def _topological_sort_parameters(cls, parameters, limits):\r\n    \r\n        V = list(parameters)\r\n        E = list()\r\n        \r\n        for p in parameters:\r\n            lower_p = limits[p][0]\r\n            upper_p = limits[p][1]\r\n            \r\n            lower_p = lower_p.atoms()\r\n            upper_p = upper_p.atoms()\r\n            for q in parameters:\r\n                if p == q:\r\n                    continue\r\n                if lower_p.issuperset(set([q])) or upper_p.issuperset(set([q])):\r\n                    E.append((p, q))   \r\n        return topological_sort((V, E), key=default_sort_key)   \r\n```\r\nThe only problem with this approach is when bounds are independent of each other, we can perform integration in any order. So if one order fails to calculate the integral, we can reverse the order and perform again. With my previous approach using cases, we can determine whether bounds are independent of each other but it works only for two parameters. ', 'comment_created': datetime.datetime(2020, 6, 16, 9, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 441058853, 'comment_body': 'I am not sure what you mean here. Do you mean a separate class for handling vector fields? Please explain.\r\nI think it will be better if we associate some default coordinate system with base scalars with a ParamRegion Object.', 'comment_created': datetime.datetime(2020, 6, 16, 18, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 441323052, 'comment_body': 'What about temporarily ignoring coordinate systems? We can go back to them in the future.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 441324570, 'comment_body': '`ParametricIntegral(C.i, ... )` is a vector, while `ParametricIntegral(C.x, ... )` is a scalar. I would expect different classes for vectors and scalars. For example, vectors should be endowed with methods for vector operations.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 441325474, 'comment_body': 'Maybe this case should be moved to another class, e.g. `ParametricVectorField`?', 'comment_created': datetime.datetime(2020, 6, 17, 7, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 441326137, 'comment_body': 'What about calling the equation solver? The equation solver should be able to find a parametrization somehow.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 441527022, 'comment_body': ""> I would expect different classes for vectors and scalars. \r\n\r\nI think it will be easier for users if we have a common class for vector and scalar fields. Also, the calculation is very similar in both cases. It just differs whether we take dot product with field or multiply it with a modulus of the normal vector to the surface\r\n\r\nIf we decide to make separate classes,  we also should have a class that returns an object of ParametricScalarIntegral or ParametricVectorIntegral depending on the nature of the field.\r\n\r\n> vectors should be endowed with methods for vector operations\r\n\r\nDoes it mean applying curl and divergence operators as used in Green's theorem and the Divergence theorem? It would be nice to have them.  but we can easily apply them to the field without any method too.\r\n```python\r\nParametricIntegral(curl(C.x*C.y*C.i), surface))\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 17, 13, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 442415460, 'comment_body': 'What about using class inheritance?', 'comment_created': datetime.datetime(2020, 6, 18, 18, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 442420135, 'comment_body': 'Yes, we can make a `ParametricRegion` class and make two subclasses of it: `ScalarParametricIntegral` and `VectorParametricIntegral`.\r\nBut I think It would be easier if a user can use a single class for both scalar and vector fields. ', 'comment_created': datetime.datetime(2020, 6, 18, 18, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 442475735, 'comment_body': '> ParametricIntegral(C.i, ... ) is a vector, while ParametricIntegral(C.x, ... ) is a scalar\r\n\r\n@Upabjojr How can `ParametricIntegral(C.i, ...)` be a vector? I think it is assumed in most textbooks that the dot product of vector field and position vector of the Parametric region takes place and the result is integrated along the region. The result is always scalar.\r\n', 'comment_created': datetime.datetime(2020, 6, 18, 20, 10, 28, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 443037078, 'comment_body': '`simplify` is very expensive in computational terms. What about some more specific functions (e.g. `expand`)?', 'comment_created': datetime.datetime(2020, 6, 19, 20, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 443040351, 'comment_body': '@Upabjojr It gets slow if I use `expand`.\r\n', 'comment_created': datetime.datetime(2020, 6, 19, 20, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 443042848, 'comment_body': 'I think `Integrate` function should be able to handle or perform such simplification instead of simplifying them here. ', 'comment_created': datetime.datetime(2020, 6, 19, 21, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 444496863, 'comment_body': 'Maybe we can have a function `vectorintegrate` which returns the object of ParametricVectorIntegral or ParametricScalarIntegral depending on the nature of the field. \r\n\r\nThis can work for other types of integrals too. Suppose we implement a class ImplicitIntegral to calculate the integral over an implicit region. The `vectorintegrate` function can then return an object of ImplicitIntegral object by identifying the region is defined implicitly.\r\n\r\n@Upabjojr ', 'comment_created': datetime.datetime(2020, 6, 23, 20, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 444522797, 'comment_body': 'There are various ways to dispatch. Yes, in general the users should not have to choose between the subclass... there should be one function and then the code should decide which class to use.\r\n\r\nThe point of having subclasses is that the result of the vector integration may be a vector or a scalar, depending on what and how you are integrating.\r\n\r\nThe vector object should behave like a vector (e.g. have methods of vectors).', 'comment_created': datetime.datetime(2020, 6, 23, 21, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 444526303, 'comment_body': '> The point of having subclasses is that the result of the vector integration may be a vector \r\n\r\nI do not see how this is possible. Can you give an example?\r\n', 'comment_created': datetime.datetime(2020, 6, 23, 21, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 445134260, 'comment_body': 'I think this is possible if the user want to perform cross product of vector field with normal vector instead of the usual dot product.', 'comment_created': datetime.datetime(2020, 6, 24, 19, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 445147151, 'comment_body': ""Well, integrating velocity over time is a simple example. Though it's probably already handled by the current `Integral` class. But you see, this case could be a case where you may want to subclass `Integral` in order to supply it with the vector methods."", 'comment_created': datetime.datetime(2020, 6, 24, 20, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 445148461, 'comment_body': ""But indeed, probably we don't need this case, it's pretty rare that some users may need to use it."", 'comment_created': datetime.datetime(2020, 6, 24, 20, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 445467409, 'comment_body': 'Although it is a kind of vector integral, it is not integrating a vector over a region. As you said, the `integrate` function is able to handle such kind of integrals (integral over variables). But if we wish to handle such a case, we can allow passing a tuple of variables in place of the parametric region.', 'comment_created': datetime.datetime(2020, 6, 25, 10, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}]","[{'commit_sha': '59a69c9f3faabb5b34b178a758e15fa21e3e868a', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9270f67b9a6eac659d92d6bcd074b8605634b5b', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6d32e97c7e02c5e382eb4751699dcec657c19ca', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f20ff09329518584463fc758f16f41c3aaf619e1', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381ba4de46733ad91615bf8760adf798896a7db9', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1f25325e4adfdbedaf52a13f39432b330bbf9ac', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06c2442a6133d47bf0ef954d9584e803e0a73fd2', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c880082288172e38c283cc3cab9c386f2b5da2b', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}]",Faisal Riyaz,32358424,faisalriyaz011@gmail.com,User,,44,,11,11
436056112,Modified API of ParametricRegion class,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
#19320 

#### Brief description of what is fixed or changed
Old API:
```python
Parametricregion((u, v), (u**3, v**2), {u: (0, 1), v: (1, 2)})
```
New API:
```python
Parametricregion((u**3, v**2), (u, 0, 1), (v, 1, 2))
```
Also added dimension property to class. 

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* vector
    * Modified API of ParametricIntegral class

<!-- END RELEASE NOTES -->",True,19580,https://api.github.com/repos/sympy/sympy/pulls/19580,https://github.com/sympy/sympy/pull/19580,closed,74,59,3,2,3,0,2,0,"[{'name': 'GSoC'}, {'name': 'vector'}]",2020-06-17 19:39:22+00:00,2020-06-18 18:15:55+00:00,81393.0,22:36:33,[],"[{'commit_sha': '53c903131d14234bd583901d36a65bd9927e494e', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c28300c2decfe64e7b0a17dfbbae2c00f482a41b', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}]",Faisal Riyaz,32358424,faisalriyaz011@gmail.com,User,,44,,11,11
440668710,Added support to integrate scalar/vector fields over objects of geometry module,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
#19320 

#### Brief description of what is fixed or changed
```python
>>> from sympy.vector import CoordSys3D, vector_integrate
>>> from sympy.geometry import Point, Segment, Circle, Polygon
>>> C = CoordSys3D('C')
>>> s = Segment(Point(4, 3), Point(1, 1))
>>> vector_integrate(C.x*C.z, s)
11*sqrt(13)/2
>>> tri = Polygon((0, 0), (1, 0), (1, 1))
>>> vector_integrate(-5*C.y, tri)
-5*sqrt(2)/2 - 5/2
>>> c = Circle(Point(0, 0), 5)
>>> vector_integrate(1, c)
10*pi
```
#### Other comments
The integral takes place over the boundary of the geometric entity, not over the area or volume enclosed.
#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* vector
    * Added support to integrate scalar/vector fields over objects of geometry module.
<!-- END RELEASE NOTES -->",True,19650,https://api.github.com/repos/sympy/sympy/pulls/19650,https://github.com/sympy/sympy/pull/19650,closed,189,17,5,6,4,10,3,0,"[{'name': 'geometry'}, {'name': 'GSoC'}, {'name': 'vector'}]",2020-06-26 16:09:36+00:00,2020-07-03 18:09:37+00:00,612001.0,"7 days, 2:00:01","[{'comment_id': 446898601, 'comment_body': 'I would try to avoid making the geometry module dependent on the vector module. Have you thought about using `functools.singledispatch` in the vector module instead?', 'comment_created': datetime.datetime(2020, 6, 29, 11, 29, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 446900523, 'comment_body': 'Thanks. I was not familiar with it. I will try using it.', 'comment_created': datetime.datetime(2020, 6, 29, 11, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 448631866, 'comment_body': 'I see a problem here in the case the GeometryEntity is not convex, you need to break it into more parametric regions. Maybe `parametric_region( )` should instead return a list of parametric regions? So you can also avoid the `if` clause as defined above.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 449290243, 'comment_body': 'why `/bin`?', 'comment_created': datetime.datetime(2020, 7, 2, 22, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 449290746, 'comment_body': ""`result = S(0)` or `= S.Zero`... make sure it's a SymPy object and not a Python integer."", 'comment_created': datetime.datetime(2020, 7, 2, 22, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 449291125, 'comment_body': 'Now that it returns a list... maybe it can be renamed to something like `parametric_region_list` or `get_parametric_region_list` or `_get_parametric_region_list`.', 'comment_created': datetime.datetime(2020, 7, 2, 22, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 449378634, 'comment_body': 'I do not know how this crept in. I will remove it.', 'comment_created': datetime.datetime(2020, 7, 3, 5, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 449379474, 'comment_body': 'ok.', 'comment_created': datetime.datetime(2020, 7, 3, 5, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 449384111, 'comment_body': 'I have changed it to `parametruc_region_list` for now. I think this function can also be used outside the `vector_integrate` so its name should not start with `_`. \r\n\r\nWe can also rename it to `parametric_regions`?', 'comment_created': datetime.datetime(2020, 7, 3, 5, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 449674238, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2020, 7, 3, 18, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}]","[{'commit_sha': '96b3f39d1df31292447c4d6218f9494e33e1566c', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80a5cbd55928e25dc744155a9d2fce15e0a9abc2', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2dbfa491a41edaf3bf21d359cb256348718d0e6', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e861882e50857eab3e24e022735cbc77a63b607e', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12f76a4e95559f0ff241e40cba246b27fbed914b', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15e551c356b73caa9856f69b6e81508c67c04a51', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}]",Faisal Riyaz,32358424,faisalriyaz011@gmail.com,User,,44,,11,11
442687300,Adding classes to represent implicitly defined regions,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
#19320 

#### Brief description of what is fixed or changed
The vector module has support to define regions using parametric representation and integrate over them.
In some cases, It is easier to work to define regions using their implicit equation. This Pull Request aims to add classes to represent implicitly defined regions.

#### Other comments
This PR is a draft and the structure of the PR is not fixed. 
#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* vector
    * Added support to create implictly defined regions.
<!-- END RELEASE NOTES -->",True,19681,https://api.github.com/repos/sympy/sympy/pulls/19681,https://github.com/sympy/sympy/pull/19681,closed,409,1,4,7,16,22,2,0,"[{'name': 'GSoC'}, {'name': 'vector'}]",2020-07-01 13:06:49+00:00,2020-07-18 21:57:24+00:00,1500635.0,"17 days, 8:50:35","[{'comment_id': 448352794, 'comment_body': 'I need to find a better way to find a point on the conic.', 'comment_created': datetime.datetime(2020, 7, 1, 13, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 449808267, 'comment_body': 'We recommend using `solveset`.', 'comment_created': datetime.datetime(2020, 7, 4, 21, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 449808295, 'comment_body': 'have you thought about some deterministic-iterative algorithm?', 'comment_created': datetime.datetime(2020, 7, 4, 21, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 449808602, 'comment_body': 'If you cannot solve the equation... maybe you are at a singular point, right? Can you determine singular points from the gradient of the implicit equation? Maybe thinking of example equations where this case happens, may help think about a solution.', 'comment_created': datetime.datetime(2020, 7, 4, 21, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 450431097, 'comment_body': 'OK. I will change it.', 'comment_created': datetime.datetime(2020, 7, 6, 19, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 450431685, 'comment_body': 'I am working on it. I think I will implement a general algorithm for monoids which will work for all conics.', 'comment_created': datetime.datetime(2020, 7, 6, 19, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 451854400, 'comment_body': 'CamelCase is usually for classes, functions should be spelled in snake_case.', 'comment_created': datetime.datetime(2020, 7, 8, 22, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 451854751, 'comment_body': 'What about making this function into the `.doit()` method of a class? Instead of raising an error, you could just return the unevaluated expression.', 'comment_created': datetime.datetime(2020, 7, 8, 22, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 453938034, 'comment_body': 'Found on an algorithm for determining a point on the conic: \r\nhttps://www3.risc.jku.at/publications/download/risc_1355/Rational%20Points%20on%20Conics.pdf.\r\n\r\n@Upabjojr the algorithm is non-trivial. Is it worth it to implement? Even parametrizing conics seems to be a tough task,\r\n', 'comment_created': datetime.datetime(2020, 7, 13, 21, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 453941127, 'comment_body': 'The only approach which is working for me is to iterate through some points and determine whether it lies on the curve. Although an ugly approach, this should work for most cases.', 'comment_created': datetime.datetime(2020, 7, 13, 21, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 453947461, 'comment_body': 'Another option is to make the user input a point on the curve apart from implicit equation.', 'comment_created': datetime.datetime(2020, 7, 13, 21, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 454580468, 'comment_body': '>  Is it worth it to implement? Even parametrizing conics seems to be a tough task,\r\n\r\nHow much time do you think this would take? If you ask me for a criterion on how to proceed... I would suggest to maximize the amount of ""useful"" stuff to add to SymPy. By ""useful"" you have to consider how many people may also be interested in using it. If lots of people would find this algorithm useful, maybe it\'s worth investing time on it.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 454580982, 'comment_body': 'Maybe also worth considering: what would you implement as an alternative to that algorithm?', 'comment_created': datetime.datetime(2020, 7, 14, 19, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 454588333, 'comment_body': '> Another option is to make the user input a point on the curve apart from implicit equation.\r\n\r\nAn example:\r\n```python\r\nC = ImplicitCurve(Eq(x**2 + y**2 - 4))\r\nC.parametrization(Point(0, 2)) #Takes a point on a curve\r\n(2*cos(theta), 2*sin(theta))\r\n```\r\n\r\n@Upabjojr Any thoughts?', 'comment_created': datetime.datetime(2020, 7, 14, 19, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 454589408, 'comment_body': 'Suggesting the point is fine with me, especially if it makes the code simpler to implement.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 454590605, 'comment_body': 'We can work with this and maybe later implement the algorithm for finding a rational point on the curve.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 454592852, 'comment_body': 'Of course... always start with a simple algorithm. We can open as many pull requests as we like, so no need to do it now.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 454597209, 'comment_body': 'Thanks. I will complete this work then. This point will be optional. If not given, the algorithm will iterate over some point. If it is unable to find a point on the curve, it raises NotImplementedError.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 456098845, 'comment_body': ""Is this supposed to work for 2D only? What about `parameters = ('t', 's')` instead?"", 'comment_created': datetime.datetime(2020, 7, 16, 21, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 456100917, 'comment_body': 'It will work for curves and surfaces given that they are monoid. ', 'comment_created': datetime.datetime(2020, 7, 16, 21, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 456102320, 'comment_body': ""The report which I followed had algorithms only for curves and surfaces. No Volume regions or higher dimensional region.\r\n\r\n> What about parameters = ('t', 's') instead?\r\n\r\nThis looks better. I will fix it."", 'comment_created': datetime.datetime(2020, 7, 16, 21, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 456751984, 'comment_body': ""> Is this supposed to work for 2D only? What about parameters = ('t', 's') instead?\r\n\r\nIt does not work for 3-D curves. It works for 3-D surfaces but does not support higher-dimensional surfaces.."", 'comment_created': datetime.datetime(2020, 7, 18, 5, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}]","[{'commit_sha': '4e5ddc0c8ccbdd504096c2b27e59312ef60503ef', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1411f02ed8bfa82b1e7054eeb8e7a5ab65b368f5', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6631b047e2c3765a84a203b885c45d90937320c3', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '736b3aea053a57a3f7a95d4ed9022c696d2ecbad', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd0cd316ef4d354772ac243902582602bd79b2f5', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba0aca2102344e64df7fe7dcb617b8ddaf3ec3d', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cae0b360717ff633421c289f608f953b21f2db4b', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}]",Faisal Riyaz,32358424,faisalriyaz011@gmail.com,User,,44,,11,11
453751414,Implemented an algorithm to find a rational point on a conic,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
#19320 
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
Implemented an algorithm to find a rational point on the conic. To parametrize a monoid of degree d, we need to find a point of multiplicity d - 1. This implies for curves of degree 2, we need to determine a rational point on it. While determining a point of multiplicity >= 2 is easy using sympy's non-linsolve, a separate algorithm needs to be implemented for points of multiplicity 1 or regular points. 

The `regular_point` was based on iterating over a set of points and checking whether they lie on the conic. This PR fixes this for conics. I have not yet implemented the algorithm for [quadrics](https://en.wikipedia.org/wiki/Quadric). 

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* vector
    * Added a function to find a rational point on conic
<!-- END RELEASE NOTES -->",True,19807,https://api.github.com/repos/sympy/sympy/pulls/19807,https://github.com/sympy/sympy/pull/19807,closed,227,31,2,6,3,24,0,0,[],2020-07-20 19:14:30+00:00,2020-07-30 12:29:33+00:00,839703.0,"9 days, 17:15:03","[{'comment_id': 457673353, 'comment_body': 'is this example still working?', 'comment_created': datetime.datetime(2020, 7, 20, 20, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 457673960, 'comment_body': 'Publisher and year are usually mentioned when citing research.', 'comment_created': datetime.datetime(2020, 7, 20, 20, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 457674160, 'comment_body': '`solveset` returns a set... the previous expression looked better to me. Any reason for this change?', 'comment_created': datetime.datetime(2020, 7, 20, 20, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 457675027, 'comment_body': 'what about `syms = set(spoint)` ?', 'comment_created': datetime.datetime(2020, 7, 20, 20, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 457867510, 'comment_body': 'Refrences -> References', 'comment_created': datetime.datetime(2020, 7, 21, 6, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 458024065, 'comment_body': 'I will correct it', 'comment_created': datetime.datetime(2020, 7, 21, 11, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 458024613, 'comment_body': 'OK', 'comment_created': datetime.datetime(2020, 7, 21, 11, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 458028893, 'comment_body': 'Yes, I deleted it accidentally.', 'comment_created': datetime.datetime(2020, 7, 21, 11, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 458060806, 'comment_body': 'I have made changes to the test cases as the result of the `rational_parametrization` method depends upon the regular point returned by `reg_point`. ', 'comment_created': datetime.datetime(2020, 7, 21, 12, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 458062496, 'comment_body': 'There is a bug here. In cases like `x*y = 1`, the solution of diophantine equation is {(p**2 + q**2, -2*p*q, p**2 - q**2)}. If I substitute p = 3 and q = 3, z turns out to be zero. This leads to the result being nan. The algorithm requires the solution of diophantine equation to be non-trivial.\r\n', 'comment_created': datetime.datetime(2020, 7, 21, 12, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 458263026, 'comment_body': '```suggestion\r\n                if b**2 == 4*a*c:\r\n                    x_reg, y_reg = self._regular_point_parabola(*coeffs)\r\n                else:\r\n                    x_reg, y_reg = self._regular_point_ellipse(*coeffs)\r\n                return x_reg, y_reg\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 17, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 458563898, 'comment_body': ""maybe it's better to use SymPy `Rational` objects... `S.Half` instead of `1/2` and `S(1)/4` instead of `1/4`?"", 'comment_created': datetime.datetime(2020, 7, 22, 6, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 458564641, 'comment_body': ""Not a problem as long as it's deterministic."", 'comment_created': datetime.datetime(2020, 7, 22, 6, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 458565989, 'comment_body': 'What about pushing the solution of the diophantine equation into the equation solver? For example, in the case `{(p2 + q2, -2pq, p2 - q2)}`, can it help if you get `p` as a function of `q`?', 'comment_created': datetime.datetime(2020, 7, 22, 6, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 458567282, 'comment_body': 'Yes, I think this should work. Solving for z != 0, then using one of its solutions.', 'comment_created': datetime.datetime(2020, 7, 22, 6, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 458567649, 'comment_body': 'Is the first solution always the best one?', 'comment_created': datetime.datetime(2020, 7, 22, 6, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 458568426, 'comment_body': 'No, for the algorithm we need any non-trivial solution of the diophantine equation.\r\n', 'comment_created': datetime.datetime(2020, 7, 22, 6, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 458569516, 'comment_body': 'There is a method in diophantine solvers, `descent` to return non-trivial solutions. But it is for the case `x**2 = A*y**2 + B*z**2`.', 'comment_created': datetime.datetime(2020, 7, 22, 6, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 460571777, 'comment_body': 'This is how I am trying to get the solutions for z != 0\r\n```python\r\nfor sol in solutions:\r\n    syms = Tuple(*sol).free_symbols\r\n    \r\n    z = sol[2]\r\n    \r\n    z_syms = ztemp.free_symbols\r\n\r\n    if len(z_syms) == 2:\r\n        print(solveset(Unequality(z, 0), next(iter(z_syms)), S.Integers))\r\n```\r\n\r\nBut solveset is too slow for returning an Integer solution.', 'comment_created': datetime.datetime(2020, 7, 26, 20, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 460573427, 'comment_body': 'Have you thought about solving the equality and then taking the complement of the solutions? It should be equivalent to `solveset(Unequality( ... ))`.', 'comment_created': datetime.datetime(2020, 7, 26, 21, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 460576312, 'comment_body': 'This should work. In the case of two variables p and q, I will iterate p over S.Integers and then solve q for z != 0. ', 'comment_created': datetime.datetime(2020, 7, 26, 21, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 462572885, 'comment_body': 'ping @Upabjojr.', 'comment_created': datetime.datetime(2020, 7, 29, 20, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 462880268, 'comment_body': 'Publisher and authors are more important than the title itself. Christoph M. Hoffmann? Perdue e-Pubs?', 'comment_created': datetime.datetime(2020, 7, 30, 9, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 462882246, 'comment_body': 'OK, I will add it.', 'comment_created': datetime.datetime(2020, 7, 30, 9, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}]","[{'commit_sha': '62f7a28ab6b5cdb42189bf141d0fc2e48e0ffeb4', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96056dbd4ad928404896e256197964e75bb32fd9', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6542c0d7720d435c65b3e7863859cc6f71ff7343', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea478b416637e3fcb7ee2550c9fa90c5d62260c6', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '895675bc69a518c6b5fc8a560b756c89bb257288', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85da83be6a0c0873a567a5b31e4bc59562599a4a', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}]",Faisal Riyaz,32358424,faisalriyaz011@gmail.com,User,,44,,11,11
472990480,Add API to new classes in vector module to documenation,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->
Adding the API of classes and functions for vector integration to documentation.
#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->",True,20000,https://api.github.com/repos/sympy/sympy/pulls/20000,https://github.com/sympy/sympy/pull/20000,closed,43,14,5,2,5,0,3,0,"[{'name': 'Documentation'}, {'name': 'GSoC'}, {'name': 'vector'}]",2020-08-25 07:03:27+00:00,2020-08-26 07:06:30+00:00,86583.0,"1 day, 0:03:03",[],"[{'commit_sha': 'a1e3c438929ec05b318d896da4032c0aa669b8cd', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9f546b40c0b0a5bb66bf4591ccdd94f58cb6876', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}]",Faisal Riyaz,32358424,faisalriyaz011@gmail.com,User,,44,,11,11
461951945,Allow vector_integrate to handle ImplicitRegion objects,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
#19320

#### Brief description of what is fixed or changed
The purpose of this PR is to modify the `vector_integrate` method to directly integrate over `ImplicitRegion` objects.

Example:
```python
>>> circle = ImplicitRegion((x, y), x**2 + y**2 - 4)
>>> parametric_region_list(circle)
[ParametricRegion((2*sin(2*t), -2*cos(2*t)), (t, 0, 2*pi))]
>>> vector_integrate(1, circle)
8*pi
```
#### Other comments

#### Release Notes
<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* vector
    * `vector_integrate` can integrate over `ImplicitRegion` objects.
<!-- END RELEASE NOTES -->",True,19883,https://api.github.com/repos/sympy/sympy/pulls/19883,https://github.com/sympy/sympy/pull/19883,closed,40,6,5,3,17,0,2,0,"[{'name': 'GSoC'}, {'name': 'vector'}]",2020-08-03 05:32:32+00:00,2020-09-02 16:09:40+00:00,2630228.0,"30 days, 10:37:08",[],"[{'commit_sha': '87c19f3411c2a7bd83303bf440970e27c885ca89', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2ac2f71049f9a34ad3a933dba213234a71db39a', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9810b163818d324750c19435c034c5ab364980c6', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}]",Faisal Riyaz,32358424,faisalriyaz011@gmail.com,User,,44,,11,11
475965877,[WIP] Add examples of usage of vector integration,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
#19320 

#### Brief description of what is fixed or changed
Add examples highlighting the usage of SymPy's vector integration functionality.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->",True,20021,https://api.github.com/repos/sympy/sympy/pulls/20021,https://github.com/sympy/sympy/pull/20021,closed,146,0,2,8,6,21,3,0,"[{'name': 'Documentation'}, {'name': 'GSoC'}, {'name': 'vector'}]",2020-08-30 21:28:31+00:00,2020-09-05 19:42:39+00:00,512048.0,"5 days, 22:14:08","[{'comment_id': 479989629, 'comment_body': '```suggestion\r\nThe :func:`~sympy.vector.vector_integrate` function is used to integrate scalar or vector field over any type of region. It automatically determines the type of integration (line, surface or volume) depending on the nature of the object.\r\n```', 'comment_created': datetime.datetime(2020, 8, 31, 8, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479989702, 'comment_body': ""```suggestion\r\nTo calculate the perimeter of circle, we need to define a circle. Let's define it using its parametric equation.\r\n```"", 'comment_created': datetime.datetime(2020, 8, 31, 8, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479989963, 'comment_body': '```suggestion\r\nSuppose a user wants to calculate the perimeter of triangle. Determining the parametric representation of triangle can be difficult. Instead, the user can use an object of :class:`~sympy.geometry.Polygon` class in the geometry module.\r\n```', 'comment_created': datetime.datetime(2020, 8, 31, 8, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 480246359, 'comment_body': 'Thanks for the suggestions.', 'comment_created': datetime.datetime(2020, 8, 31, 16, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 480391037, 'comment_body': 'why is this result negative? I would indeed expect `18*pi`, the volume of the half-sphere, as you have defined `theta` to reach `pi` (instead of `2*pi`).', 'comment_created': datetime.datetime(2020, 8, 31, 20, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 480391599, 'comment_body': 'maybe `theta` should range from 0 to `2*pi`?', 'comment_created': datetime.datetime(2020, 8, 31, 20, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 480398048, 'comment_body': 'Yes, will fix it.', 'comment_created': datetime.datetime(2020, 8, 31, 21, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 480986698, 'comment_body': 'In ParametricIntegral class\r\n\r\n```python\r\nvariables = cls._bounds_case(parametricregion.limits)\r\ncoeff = Matrix(parametricregion.definition).jacobian(variables).det()\r\nintegrand = simplify(parametricfield*coeff)\r\nl = [(var, parametricregion.limits[var][0], parametricregion.limits[var][1]) for var in variables]\r\nresult = integrate(integrand, *l)\r\n```\r\n\r\nThe volume element requires calculating the jacobian. So the sign depends on the order of variables used in the calculation of jacobian. This order is determined by the bounds_case function which topologically sorts the parameters to remove the problem of interdependent bounds. \r\n\r\nSo in the current form, the order in which the bounds are defined at the initialization of ParametricRegion object does not matter in the calculation of integral. Because in the end, parameters ger sorted by bounds_case function.  Is this correct? Or should the result depend on the order of parameters and the sorting should only take place when required?', 'comment_created': datetime.datetime(2020, 9, 1, 9, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 481326383, 'comment_body': 'For example, \r\n```python\r\nsphere1 = ParametricRegion((r*sin(phi)*cos(theta),r*sin(phi)*sin(theta), r*cos(phi)),\\\r\n                                                (theta, 0, pi), (phi, 0, pi), (r, 0, 3))\r\nsphere2 = ParametricRegion((r*sin(phi)*cos(theta),r*sin(phi)*sin(theta), r*cos(phi)),\\\r\n                                                  (r, 0, 3), (theta, 0, pi), (phi, 0, pi))\r\n```\r\nIn the present implementation, vector_integrate(1, sphere1) and vector_integrate(1, sphere2) returns result with same sign. \r\nIs this desired or should the order matter?', 'comment_created': datetime.datetime(2020, 9, 1, 17, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 482786295, 'comment_body': 'is it a problem in the algorithm that you get negative results? Why is `vector_integrate` returning a negative result?', 'comment_created': datetime.datetime(2020, 9, 3, 8, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 482787029, 'comment_body': 'does this work with the `polygon` object as well?', 'comment_created': datetime.datetime(2020, 9, 3, 8, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 482824622, 'comment_body': 'This is due to the order of variables used in the calculation of Jacobian. The order is decided by function `bounds_case`. `bounds_case` is required for dealing with situations where bounds of variables are interdependent.\r\n\r\nPlease see my comment above on this. \r\n', 'comment_created': datetime.datetime(2020, 9, 3, 9, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 482832309, 'comment_body': 'No. `vector_integrate` will perform line integral over the sides of the polygon instead of calculating the area enclosed.', 'comment_created': datetime.datetime(2020, 9, 3, 9, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 483161876, 'comment_body': 'I have made a PR https://github.com/sympy/sympy/pull/20044 for this.', 'comment_created': datetime.datetime(2020, 9, 3, 18, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 483601209, 'comment_body': ""OK, maybe that's an issue for some future work."", 'comment_created': datetime.datetime(2020, 9, 4, 13, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 483602067, 'comment_body': 'Yes. We can add new classes in geometry module for representing such regions.', 'comment_created': datetime.datetime(2020, 9, 4, 13, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 483602442, 'comment_body': 'I will open an issue for this then.', 'comment_created': datetime.datetime(2020, 9, 4, 13, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 483603148, 'comment_body': 'It would require an algorithm to decompose the polygon into triangles (or pyramids in the 3D case). Well, maybe for GSoC 2021 :)', 'comment_created': datetime.datetime(2020, 9, 4, 13, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 483606710, 'comment_body': ""OK, it's merged. Can you remove `abs( )` now?"", 'comment_created': datetime.datetime(2020, 9, 4, 13, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 483608148, 'comment_body': 'Yes. ', 'comment_created': datetime.datetime(2020, 9, 4, 13, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}, {'comment_id': 483609166, 'comment_body': 'Yes, for polygons it will be difficult. But I think adding a class to represent a triangular area will be easier.', 'comment_created': datetime.datetime(2020, 9, 4, 13, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'friyaz', 'type': 'User'}]","[{'commit_sha': 'fb5695b8488d722ca2933f9697a5f04cd026d4cb', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b2ba4d261751895b7753cc4dc1bef171a15e0a4', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68e25b8cd4399a54050bed03196e23d8b85af440', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2802fbb25ecee9f599bad7b404ce869ecaddc10', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8227a6e6af48db97455e30f8e9cce0aa9b31d02f', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '443cc3e7d6a905257918c4260652cd68abbb6a63', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cd346c38781f1b08fc54df5ac14c9f4aa5691f0', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e062a64d46f275d049e2b439c7d0abf0e4f6a493', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}]",Faisal Riyaz,32358424,faisalriyaz011@gmail.com,User,,44,,11,11
461951945,Allow vector_integrate to handle ImplicitRegion objects,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
#19320

#### Brief description of what is fixed or changed
The purpose of this PR is to modify the `vector_integrate` method to directly integrate over `ImplicitRegion` objects.

Example:
```python
>>> circle = ImplicitRegion((x, y), x**2 + y**2 - 4)
>>> parametric_region_list(circle)
[ParametricRegion((2*sin(2*t), -2*cos(2*t)), (t, 0, 2*pi))]
>>> vector_integrate(1, circle)
8*pi
```
#### Other comments

#### Release Notes
<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* vector
    * `vector_integrate` can integrate over `ImplicitRegion` objects.
<!-- END RELEASE NOTES -->",True,19883,https://api.github.com/repos/sympy/sympy/pulls/19883,https://github.com/sympy/sympy/pull/19883,closed,40,6,5,3,17,0,2,0,"[{'name': 'GSoC'}, {'name': 'vector'}]",2020-08-03 05:32:32+00:00,2020-09-02 16:09:40+00:00,2630228.0,"30 days, 10:37:08",[],"[{'commit_sha': '87c19f3411c2a7bd83303bf440970e27c885ca89', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2ac2f71049f9a34ad3a933dba213234a71db39a', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9810b163818d324750c19435c034c5ab364980c6', 'committer_username': 'friyaz', 'committer_name': 'Faisal Riyaz', 'committer_email': 'faisalriyaz011@gmail.com', 'commit_date': datetime.datetime(2017, 9, 28, 9, 55, 56, tzinfo=datetime.timezone.utc)}]",Faisal Riyaz,32358424,faisalriyaz011@gmail.com,User,,44,,11,11

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
640534,sympy,sympy/sympy,Python,4363,12695,293,1320,58678,5121,14,717,"[{'id': 495687116, 'number': 20172, 'closed': datetime.datetime(2020, 10, 2, 9, 17, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 30, 18, 7, 21, tzinfo=datetime.timezone.utc), 'time_taken': 141002.0, 'time_delta': '1 day, 15:10:02', 'additions': 11, 'deletions': 4, 'state': 'closed'}, {'id': 478787941, 'number': 20044, 'closed': datetime.datetime(2020, 9, 4, 13, 2, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 3, 17, 46, 22, tzinfo=datetime.timezone.utc), 'time_taken': 69343.0, 'time_delta': '19:15:43', 'additions': 13, 'deletions': 6, 'state': 'closed'}, {'id': 475965877, 'number': 20021, 'closed': datetime.datetime(2020, 9, 5, 19, 42, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 30, 21, 28, 31, tzinfo=datetime.timezone.utc), 'time_taken': 512048.0, 'time_delta': '5 days, 22:14:08', 'additions': 146, 'deletions': 0, 'state': 'closed'}, {'id': 472990480, 'number': 20000, 'closed': datetime.datetime(2020, 8, 26, 7, 6, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 7, 3, 27, tzinfo=datetime.timezone.utc), 'time_taken': 86583.0, 'time_delta': '1 day, 0:03:03', 'additions': 43, 'deletions': 14, 'state': 'closed'}, {'id': 461951945, 'number': 19883, 'closed': datetime.datetime(2020, 9, 2, 16, 9, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 5, 32, 32, tzinfo=datetime.timezone.utc), 'time_taken': 2630228.0, 'time_delta': '30 days, 10:37:08', 'additions': 40, 'deletions': 6, 'state': 'closed'}, {'id': 453751414, 'number': 19807, 'closed': datetime.datetime(2020, 7, 30, 12, 29, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 19, 14, 30, tzinfo=datetime.timezone.utc), 'time_taken': 839703.0, 'time_delta': '9 days, 17:15:03', 'additions': 227, 'deletions': 31, 'state': 'closed'}, {'id': 444274481, 'number': 19703, 'closed': None, 'created': datetime.datetime(2020, 7, 4, 11, 41, 35, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 56, 'deletions': 3, 'state': 'open'}, {'id': 442687300, 'number': 19681, 'closed': datetime.datetime(2020, 7, 18, 21, 57, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 13, 6, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1500635.0, 'time_delta': '17 days, 8:50:35', 'additions': 409, 'deletions': 1, 'state': 'closed'}, {'id': 441214525, 'number': 19665, 'closed': datetime.datetime(2020, 6, 29, 10, 12, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 5, 56, 22, tzinfo=datetime.timezone.utc), 'time_taken': 15364.0, 'time_delta': '4:16:04', 'additions': 2, 'deletions': 4, 'state': 'closed'}, {'id': 440668710, 'number': 19650, 'closed': datetime.datetime(2020, 7, 3, 18, 9, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 16, 9, 36, tzinfo=datetime.timezone.utc), 'time_taken': 612001.0, 'time_delta': '7 days, 2:00:01', 'additions': 189, 'deletions': 17, 'state': 'closed'}, {'id': 436056112, 'number': 19580, 'closed': datetime.datetime(2020, 6, 18, 18, 15, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 19, 39, 22, tzinfo=datetime.timezone.utc), 'time_taken': 81393.0, 'time_delta': '22:36:33', 'additions': 74, 'deletions': 59, 'state': 'closed'}, {'id': 433326985, 'number': 19539, 'closed': datetime.datetime(2020, 6, 25, 20, 7, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 20, 54, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1206768.0, 'time_delta': '13 days, 23:12:48', 'additions': 229, 'deletions': 1, 'state': 'closed'}, {'id': 425891205, 'number': 19472, 'closed': datetime.datetime(2020, 6, 10, 20, 15, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 10, 28, 58, tzinfo=datetime.timezone.utc), 'time_taken': 812793.0, 'time_delta': '9 days, 9:46:33', 'additions': 158, 'deletions': 0, 'state': 'closed'}, {'id': 269702420, 'number': 16629, 'closed': None, 'created': datetime.datetime(2019, 4, 11, 18, 45, 13, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 257, 'deletions': 166, 'state': 'open'}, {'id': 268009458, 'number': 16567, 'closed': datetime.datetime(2019, 4, 7, 23, 40, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 4, 6, 3, 26, 54, tzinfo=datetime.timezone.utc), 'time_taken': 159213.0, 'time_delta': '1 day, 20:13:33', 'additions': 46, 'deletions': 33, 'state': 'closed'}, {'id': 259370592, 'number': 16199, 'closed': datetime.datetime(2019, 3, 14, 19, 1, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 3, 8, 6, 0, 41, tzinfo=datetime.timezone.utc), 'time_taken': 565270.0, 'time_delta': '6 days, 13:01:10', 'additions': 48, 'deletions': 3, 'state': 'closed'}, {'id': 257753583, 'number': 16158, 'closed': datetime.datetime(2019, 3, 3, 20, 6, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 3, 3, 17, 46, 18, tzinfo=datetime.timezone.utc), 'time_taken': 8428.0, 'time_delta': '2:20:28', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 257460634, 'number': 16117, 'closed': datetime.datetime(2019, 3, 1, 15, 29, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 3, 1, 14, 21, 59, tzinfo=datetime.timezone.utc), 'time_taken': 4028.0, 'time_delta': '1:07:08', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 255701837, 'number': 16068, 'closed': datetime.datetime(2019, 3, 2, 15, 43, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 2, 24, 18, 13, 9, tzinfo=datetime.timezone.utc), 'time_taken': 509450.0, 'time_delta': '5 days, 21:30:50', 'additions': 27, 'deletions': 3, 'state': 'closed'}, {'id': 254002036, 'number': 16021, 'closed': datetime.datetime(2019, 2, 21, 19, 45, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 2, 18, 17, 55, 57, tzinfo=datetime.timezone.utc), 'time_taken': 265786.0, 'time_delta': '3 days, 1:49:46', 'additions': 12, 'deletions': 3, 'state': 'closed'}, {'id': 243252354, 'number': 15754, 'closed': datetime.datetime(2019, 1, 17, 0, 29, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 1, 9, 8, 48, 5, tzinfo=datetime.timezone.utc), 'time_taken': 661290.0, 'time_delta': '7 days, 15:41:30', 'additions': 74, 'deletions': 21, 'state': 'closed'}, {'id': 242695891, 'number': 15747, 'closed': datetime.datetime(2019, 1, 9, 4, 29, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 1, 7, 15, 41, 12, tzinfo=datetime.timezone.utc), 'time_taken': 132508.0, 'time_delta': '1 day, 12:48:28', 'additions': 31, 'deletions': 6, 'state': 'closed'}, {'id': 234637757, 'number': 15567, 'closed': datetime.datetime(2018, 11, 30, 23, 43, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 11, 29, 13, 29, 13, tzinfo=datetime.timezone.utc), 'time_taken': 123257.0, 'time_delta': '1 day, 10:14:17', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 233305972, 'number': 15542, 'closed': datetime.datetime(2018, 12, 2, 23, 53, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 11, 24, 7, 31, tzinfo=datetime.timezone.utc), 'time_taken': 750125.0, 'time_delta': '8 days, 16:22:05', 'additions': 33, 'deletions': 12, 'state': 'closed'}, {'id': 228183271, 'number': 15453, 'closed': datetime.datetime(2018, 11, 9, 15, 38, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 11, 4, 15, 23, 22, tzinfo=datetime.timezone.utc), 'time_taken': 432883.0, 'time_delta': '5 days, 0:14:43', 'additions': 12, 'deletions': 16, 'state': 'closed'}, {'id': 221852298, 'number': 15372, 'closed': datetime.datetime(2019, 11, 19, 17, 10, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 10, 10, 16, 18, 53, tzinfo=datetime.timezone.utc), 'time_taken': 34995080.0, 'time_delta': '405 days, 0:51:20', 'additions': 25, 'deletions': 0, 'state': 'closed'}, {'id': 220771230, 'number': 15346, 'closed': datetime.datetime(2018, 10, 7, 10, 56, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 10, 5, 17, 25, 21, tzinfo=datetime.timezone.utc), 'time_taken': 149461.0, 'time_delta': '1 day, 17:31:01', 'additions': 11, 'deletions': 2, 'state': 'closed'}, {'id': 220465724, 'number': 15341, 'closed': datetime.datetime(2018, 11, 11, 18, 52, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 10, 4, 17, 58, 3, tzinfo=datetime.timezone.utc), 'time_taken': 3286482.0, 'time_delta': '38 days, 0:54:42', 'additions': 25, 'deletions': 11, 'state': 'closed'}]"
