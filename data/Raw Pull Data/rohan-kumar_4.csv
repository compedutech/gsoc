pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
979944101,[WIP] Sugarizer assignment dev ,,True,334,https://api.github.com/repos/llaske/sugarizer-server/pulls/334,https://github.com/llaske/sugarizer-server/pull/334,closed,26294,12249,43,70,13,158,0,0,[],2022-06-27 11:35:27+00:00,2023-01-14 22:11:50+00:00,17404583.0,"201 days, 10:36:23","[{'comment_id': 907342962, 'comment_body': 'Remove unnecessary line breaks', 'comment_created': datetime.datetime(2022, 6, 27, 12, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907343397, 'comment_body': 'Remove unnecessary console.log() statements', 'comment_created': datetime.datetime(2022, 6, 27, 12, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907347532, 'comment_body': ""Use correct error code for errors. Refer to locales.ini for the error code. For example, for error code 24, look for ErrorCode24. If the error message you're looking for does not exists, then create a new error code."", 'comment_created': datetime.datetime(2022, 6, 27, 12, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907350361, 'comment_body': ""It'll be better to end the function while returning the response.\r\nSo, instead of writing return in next line, write `return res.send...` instead. This practice will help us avoid making mistakes."", 'comment_created': datetime.datetime(2022, 6, 27, 12, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907354653, 'comment_body': 'We need to implement sorting and filtering in the findAll function. Look at the findAll function in classrooms.js for reference and implement that here.', 'comment_created': datetime.datetime(2022, 6, 27, 12, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907355479, 'comment_body': 'Replace assingid with assignmentId', 'comment_created': datetime.datetime(2022, 6, 27, 12, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907356450, 'comment_body': 'assignmentData variable is not needed', 'comment_created': datetime.datetime(2022, 6, 27, 12, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907358959, 'comment_body': 'IndexOf has a time complexity if O(n), which makes this loop have O(n^2) time complexity. Use `set` or `map` to reduce the time complexity.', 'comment_created': datetime.datetime(2022, 6, 27, 12, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907359954, 'comment_body': 'There was no need to add this concatenation', 'comment_created': datetime.datetime(2022, 6, 27, 12, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907360649, 'comment_body': 'These variables are not really required.', 'comment_created': datetime.datetime(2022, 6, 27, 12, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907362832, 'comment_body': '$unwind consumes higher memory. There are alternatives to unwind. Try to implement them.', 'comment_created': datetime.datetime(2022, 6, 27, 13, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907364393, 'comment_body': ""This variable does not needs to be initiated so sooner, it can be initiated where it's defined for the first time."", 'comment_created': datetime.datetime(2022, 6, 27, 13, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907368233, 'comment_body': ""You need to keep a counter of the entries that are updated and return the response only once when all the entries are updated.\r\n\r\nAs of now, this section of code won't work as expected and will lead to bugs. It needs to be fixed."", 'comment_created': datetime.datetime(2022, 6, 27, 13, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907368963, 'comment_body': ""This is not how we're returning error response in the rest of the code."", 'comment_created': datetime.datetime(2022, 6, 27, 13, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907372218, 'comment_body': 'copyEntry function is needed as discussed.', 'comment_created': datetime.datetime(2022, 6, 27, 13, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907375511, 'comment_body': ""Two assignments can have same names. You don't need this filter logic. Simply filter by matching the assignmentId."", 'comment_created': datetime.datetime(2022, 6, 27, 13, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907378413, 'comment_body': 'Ignore the changes of this file in your PR since it does not related to the title of the PR.', 'comment_created': datetime.datetime(2022, 6, 27, 13, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907378779, 'comment_body': 'Ignore this file too.', 'comment_created': datetime.datetime(2022, 6, 27, 13, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907379455, 'comment_body': 'Question: Does this function comes from the code of Sugarizer?', 'comment_created': datetime.datetime(2022, 6, 27, 13, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907380618, 'comment_body': 'Add a new line at the end of the file', 'comment_created': datetime.datetime(2022, 6, 27, 13, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907381852, 'comment_body': 'This does not needs to be included in the PR.', 'comment_created': datetime.datetime(2022, 6, 27, 13, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 907388627, 'comment_body': 'The favourite activities should not be changed.', 'comment_created': datetime.datetime(2022, 6, 27, 13, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 908219591, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 28, 8, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 908227693, 'comment_body': 'I changed the name from ""assingid"" to ""assignmentsId""', 'comment_created': datetime.datetime(2022, 6, 28, 9, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 908228624, 'comment_body': 'Done by using javascript Set.', 'comment_created': datetime.datetime(2022, 6, 28, 9, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 908901363, 'comment_body': ""Yes, I copied it from sugarizer, that's how the objectId is generated in sugarizer . So I do this to generate the same."", 'comment_created': datetime.datetime(2022, 6, 28, 20, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 928653804, 'comment_body': 'Instead of using Try/Catch, can you keep the coding pattern similar to the rest of the code.', 'comment_created': datetime.datetime(2022, 7, 25, 9, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931332785, 'comment_body': 'Remove the unnecessary console.log statements.', 'comment_created': datetime.datetime(2022, 7, 27, 17, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931334427, 'comment_body': 'Why are these eslint rules disabled? They should not be disabled.', 'comment_created': datetime.datetime(2022, 7, 27, 17, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931335919, 'comment_body': 'Separate global variables and imports with line break.', 'comment_created': datetime.datetime(2022, 7, 27, 17, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931336764, 'comment_body': 'Remove unnecessary line breaks.', 'comment_created': datetime.datetime(2022, 7, 27, 17, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931339597, 'comment_body': 'Move this logic to either dashboard/controller or frontend.', 'comment_created': datetime.datetime(2022, 7, 27, 17, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931341562, 'comment_body': 'This line is broken', 'comment_created': datetime.datetime(2022, 7, 27, 17, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931342088, 'comment_body': 'This line is broken', 'comment_created': datetime.datetime(2022, 7, 27, 17, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931343816, 'comment_body': 'ErrorCode23=Inexisting user\r\n\r\nUse correct Error Codes or create new Error Code in locale.ini if needed.\r\nThis comment is valid for all the instances where error codes are used.', 'comment_created': datetime.datetime(2022, 7, 27, 17, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931346411, 'comment_body': 'There should not be a problem if the assignment with the same name already exists. It should not have any impact on the functionality of the feature.\r\nAlso, it is pretty easy for the name of an assignment to repeat in real life scenario. ', 'comment_created': datetime.datetime(2022, 7, 27, 17, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931349062, 'comment_body': 'If the ""If"" condition is false, this function won\'t return anything. This will lead to application waiting for response until timeout.', 'comment_created': datetime.datetime(2022, 7, 27, 17, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931349904, 'comment_body': 'This ""if"" condition does it appears in ""addUser"" or ""addClassroom"", so maybe we can avoid using it.', 'comment_created': datetime.datetime(2022, 7, 27, 17, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931351126, 'comment_body': 'Combine these 2 lines in 1. Do this for other occurrences of similar pattern too.\r\n\r\n```\r\n            }\r\n            );\r\n```\r\n\r\nShould be:\r\n```\r\n            });\r\n```', 'comment_created': datetime.datetime(2022, 7, 27, 18, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931354237, 'comment_body': 'The variable `params` is redeclared. ', 'comment_created': datetime.datetime(2022, 7, 27, 18, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931357067, 'comment_body': '`params` should be `query` instead, and `addQuery` function needs to be used. As of now, filtering should not work as expected.', 'comment_created': datetime.datetime(2022, 7, 27, 18, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931357314, 'comment_body': 'Try to make it similar to other APIs.', 'comment_created': datetime.datetime(2022, 7, 27, 18, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931357793, 'comment_body': 'Instead of sorting by _id by default, sort by name.', 'comment_created': datetime.datetime(2022, 7, 27, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931441237, 'comment_body': ""This seems like a very complicated query to get the information about the Assignment Work for all assignments.\r\n\r\nWe can think of the information the endpoint needs to provide for the application to function.\r\n\r\nCorrect me if I'm wrong, but we only need the type of the activity so that we can display the correct icon on the List Assignments view, right?\r\n\r\nMaybe we can store the Activity Type (or Name) in the Assignment object itself. It will make this query much simpler."", 'comment_created': datetime.datetime(2022, 7, 27, 18, 29, 2, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931445373, 'comment_body': 'Remove unnecessary console statements.', 'comment_created': datetime.datetime(2022, 7, 27, 18, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931454238, 'comment_body': 'Same as the earlier comment:\r\n\r\n```\r\nparams should be query instead, and addQuery function needs to be used. As of now, filtering should not work as expected.\r\n```', 'comment_created': datetime.datetime(2022, 7, 27, 18, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931458405, 'comment_body': 'Remove unnecessary line breaks.', 'comment_created': datetime.datetime(2022, 7, 27, 18, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931460984, 'comment_body': 'This is a question:\r\nIs `""$$item.metadata.assignmentId""` correct? Do we need to use `$$` instead of `$`?', 'comment_created': datetime.datetime(2022, 7, 27, 18, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931462856, 'comment_body': 'This if condition seems unnecessary since `mongo.ObjectID.isValid(assignmentId)` is already used above.', 'comment_created': datetime.datetime(2022, 7, 27, 18, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931463153, 'comment_body': 'Remove unnecessary console statements.', 'comment_created': datetime.datetime(2022, 7, 27, 18, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931463534, 'comment_body': 'Remove unnecessary line breaks.', 'comment_created': datetime.datetime(2022, 7, 27, 18, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931468061, 'comment_body': 'If changes in the code of this file does not affects the Assignment Feature, then reset the changes in this file.', 'comment_created': datetime.datetime(2022, 7, 27, 18, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931470243, 'comment_body': 'Remove unnecessary line breaks.', 'comment_created': datetime.datetime(2022, 7, 27, 18, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931471064, 'comment_body': ""Don't reject with hardcoded messages."", 'comment_created': datetime.datetime(2022, 7, 27, 18, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931472414, 'comment_body': 'If the ""if"" condition fails, the promise will stay unresolved, thus breaking the code.', 'comment_created': datetime.datetime(2022, 7, 27, 18, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931473345, 'comment_body': 'Why is this condition used? `!typeof entryDoc.text == ""string""`', 'comment_created': datetime.datetime(2022, 7, 27, 18, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931481432, 'comment_body': 'This function does not works as discussed in the meeting. This function fetches the Entry every time from the storage, modifies it, and stores it.\r\n\r\nThe expected workflow should be that the Entry should be fetched only once, and this function should only modify the original entry, and store it.\r\n\r\nThis way, when hundreds of entries needs to be copied, we will be able to avoid fetching the Entry hundred times.', 'comment_created': datetime.datetime(2022, 7, 27, 18, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931484454, 'comment_body': 'If changes in the code of this file does not affects the Assignment Feature, then reset the changes in this file.', 'comment_created': datetime.datetime(2022, 7, 27, 18, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931492054, 'comment_body': 'This rule should not be disabled.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931492329, 'comment_body': 'Remove unnecessary line breaks', 'comment_created': datetime.datetime(2022, 7, 27, 19, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931492708, 'comment_body': 'Remove unnecessary line breaks -- do this for all files.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931498650, 'comment_body': 'Create a new PR if you want to upload the package.json or package-lock.json. These changes does not relate to assignment feature, so remove them from this PR.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931498876, 'comment_body': 'This change is irrelevant.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931499795, 'comment_body': 'Why is this change reflected in this PR?', 'comment_created': datetime.datetime(2022, 7, 27, 19, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931500579, 'comment_body': 'If changes in the code of this file does not affects the Assignment Feature, then reset the changes in this file.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931502048, 'comment_body': 'Why is this change reflected in this PR?', 'comment_created': datetime.datetime(2022, 7, 27, 19, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931503210, 'comment_body': '5 space for indent is used instead of 4.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931503897, 'comment_body': ""Don't add the same library in both header and footer. Remove this library import from here."", 'comment_created': datetime.datetime(2022, 7, 27, 19, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931504055, 'comment_body': 'Remove the commented code.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931504392, 'comment_body': 'Invalid code', 'comment_created': datetime.datetime(2022, 7, 27, 19, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931505402, 'comment_body': 'Fix the indentation in EJS files.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931507320, 'comment_body': 'If changes in the code of this file does not affects the Assignment Feature, then reset the changes in this file.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931510563, 'comment_body': 'Tutorial can also be added for deliveries view.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931511852, 'comment_body': 'If changes in the code of this file does not affects the Assignment Feature, then reset the changes in this file.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931512129, 'comment_body': 'If changes in the code of this file does not affects the Assignment Feature, then reset the changes in this file.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931512408, 'comment_body': 'If changes in the code of this file does not affects the Assignment Feature, then reset the changes in this file.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931512576, 'comment_body': 'If changes in the code of this file does not affects the Assignment Feature, then reset the changes in this file.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931514637, 'comment_body': 'Replace `hashList` and `iconList` with `iconMap`.\r\n\r\nhashList is too generic and iconList is misleading.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931515200, 'comment_body': 'Remove all unnecessary console.log statements which were used for debugging.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 38, 2, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931517786, 'comment_body': 'Errors are not handled like this in other Sugarizer Server views.', 'comment_created': datetime.datetime(2022, 7, 27, 19, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931519346, 'comment_body': 'The variable `assignments` is not what it should be here as discussed in the meeting. ', 'comment_created': datetime.datetime(2022, 7, 27, 19, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931521607, 'comment_body': 'Have you manually verified that on submitting the form with errors, the page reloads without any loss in the information already filled in the form?', 'comment_created': datetime.datetime(2022, 7, 27, 19, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 931524855, 'comment_body': 'Make the error handling consistent.\r\n', 'comment_created': datetime.datetime(2022, 7, 27, 19, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 938635508, 'comment_body': 'Resolved :) \r\nTested :+1: \r\nAlso made changes in test of this API.', 'comment_created': datetime.datetime(2022, 8, 5, 9, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 938640204, 'comment_body': 'Removed while implementing Filter and sorting :)', 'comment_created': datetime.datetime(2022, 8, 5, 9, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 938640539, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2022, 8, 5, 9, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 938640884, 'comment_body': 'done !', 'comment_created': datetime.datetime(2022, 8, 5, 9, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 938652803, 'comment_body': 'Yes `""$$item.metadata.assignmentId""` is correct is guess ,because $ is refereed to the root doc. and $$ refereed to the variable name (currentData) . and `as:item` is variable so that\'s why we use `$$item`', 'comment_created': datetime.datetime(2022, 8, 5, 9, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 938654494, 'comment_body': ""oh ! i didn't notice this.!\r\nResolved :)"", 'comment_created': datetime.datetime(2022, 8, 5, 9, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 938657311, 'comment_body': 'unnecessary spaces between the name of vars and operators is due to es-lint extension. Will fix', 'comment_created': datetime.datetime(2022, 8, 5, 9, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 938659128, 'comment_body': 'Resolved by resolving copyEntry function :)', 'comment_created': datetime.datetime(2022, 8, 5, 9, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 938660129, 'comment_body': 'what should i pass into `reject()` , may be `entryDoc`?', 'comment_created': datetime.datetime(2022, 8, 5, 10, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 938668353, 'comment_body': 'it checks that if text is not a  `""string""`  and  text is a valid `objectId`, so we do copy that entry, \r\nand now i feel that you are right , this can be work with ` mongo.ObjectID.isValid(entryDoc.text)` this only !', 'comment_created': datetime.datetime(2022, 8, 5, 10, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 938669115, 'comment_body': 'Resolved :smiling_face_with_tear: :smile: ', 'comment_created': datetime.datetime(2022, 8, 5, 10, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 938670462, 'comment_body': 'again due to  es-lint extension :smiling_face_with_tear: ', 'comment_created': datetime.datetime(2022, 8, 5, 10, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 938722406, 'comment_body': 'Okay ! Will remember in future\r\n', 'comment_created': datetime.datetime(2022, 8, 5, 11, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 938722574, 'comment_body': 'My bad !:)', 'comment_created': datetime.datetime(2022, 8, 5, 11, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 939011877, 'comment_body': 'Done ! also fix tuts for assignment view  ', 'comment_created': datetime.datetime(2022, 8, 5, 17, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 939014062, 'comment_body': 'You meant to say , i have to change the name of vars `hashList` and `iconList`  to `iconMap` right?\r\n', 'comment_created': datetime.datetime(2022, 8, 5, 17, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 939018414, 'comment_body': 'Done!\r\n', 'comment_created': datetime.datetime(2022, 8, 5, 17, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 939019665, 'comment_body': 'No, the information lost after page reload with error message !', 'comment_created': datetime.datetime(2022, 8, 5, 17, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 959669704, 'comment_body': 'But the other forms retain the form information, right? We need to forms features to be as similar as possible.', 'comment_created': datetime.datetime(2022, 8, 31, 14, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971931751, 'comment_body': 'This change is still irrelevant.', 'comment_created': datetime.datetime(2022, 9, 15, 12, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971932804, 'comment_body': 'Order of favorites should not be changed.', 'comment_created': datetime.datetime(2022, 9, 15, 12, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971934586, 'comment_body': 'The indentation issue is still not resolved.', 'comment_created': datetime.datetime(2022, 9, 15, 12, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971935863, 'comment_body': 'This ""if"" condition is not needed.', 'comment_created': datetime.datetime(2022, 9, 15, 12, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971936960, 'comment_body': 'Add new line at the end of each file of code.', 'comment_created': datetime.datetime(2022, 9, 15, 12, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971937342, 'comment_body': 'Fix indentation here', 'comment_created': datetime.datetime(2022, 9, 15, 12, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971939839, 'comment_body': 'The user is always going to be admin or teacher, so this if condition is not needed.', 'comment_created': datetime.datetime(2022, 9, 15, 12, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971940252, 'comment_body': 'Still invalid code', 'comment_created': datetime.datetime(2022, 9, 15, 12, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971942995, 'comment_body': 'The user is always going to be admin or teacher so the condition can be modified.', 'comment_created': datetime.datetime(2022, 9, 15, 12, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971946297, 'comment_body': 'This can be done with css. Javascript is not needed for this.', 'comment_created': datetime.datetime(2022, 9, 15, 12, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971948557, 'comment_body': 'The tailing ""/"" is not present on other APIs, so this can be removed.', 'comment_created': datetime.datetime(2022, 9, 15, 12, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971948917, 'comment_body': 'The tailing ""/"" is not present on other APIs, so this can be removed.', 'comment_created': datetime.datetime(2022, 9, 15, 12, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971949276, 'comment_body': 'Typo', 'comment_created': datetime.datetime(2022, 9, 15, 12, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971950761, 'comment_body': 'No error code 34 translation for Hindi.', 'comment_created': datetime.datetime(2022, 9, 15, 12, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971953058, 'comment_body': ""The locale file is a mess. The translations are added for only English.\r\nTranslations are added for some languages, while it's missing for other.\r\nIf you cannot add translation for some language, add placeholder English translation instead so that it can be translated later."", 'comment_created': datetime.datetime(2022, 9, 15, 12, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971963807, 'comment_body': 'These two libraries are imported:\r\n- dashboard/public/js/jquery.datetimepicker.min.js\r\n- dashboard/public/js/jquery.datetimepicker.full.js\r\n\r\nOnly one of them is needed.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971964345, 'comment_body': 'Newline needed.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971965195, 'comment_body': 'Check your code diff before making a request for review and remove errors like these yourself.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971967027, 'comment_body': 'The changes to this file are still irrelevant. Please reset the changes made in this file.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971969262, 'comment_body': 'Misleading comment. It sends to delivery page.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971973619, 'comment_body': 'Convert datetime to unix timestamp as discussed.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971974124, 'comment_body': 'This comment is still relevant.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971975567, 'comment_body': 'Line break not needed here', 'comment_created': datetime.datetime(2022, 9, 15, 13, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971976321, 'comment_body': 'Convert datetime to unix timestamp as discussed.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971979991, 'comment_body': 'The form data should not be load if there is an error and page reloads.\r\nTest other forms to check the expected behavior.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971983043, 'comment_body': 'Remove unnecessary line breaks.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971984543, 'comment_body': 'Test the return response. Do not check only the status.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971985668, 'comment_body': 'Test the return response. Do not check only the status.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971987740, 'comment_body': 'Test the return response. Do not check only the status.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971988064, 'comment_body': 'Test the return response. Do not check only the status.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971990404, 'comment_body': 'Remove this comment.\r\nAlso, changes in this file are irrelevant to the feature. Remove unnecessary changes.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971993185, 'comment_body': 'Maybe it will be better is we add a message here, like ""Failed to write journal entry""', 'comment_created': datetime.datetime(2022, 9, 15, 13, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 971999056, 'comment_body': 'Fix typo here', 'comment_created': datetime.datetime(2022, 9, 15, 13, 38, 2, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 972000437, 'comment_body': 'Can you send an error and code with the error response?', 'comment_created': datetime.datetime(2022, 9, 15, 13, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 972003001, 'comment_body': 'Also, why is status code 401 returned if assignment does not exists? This code is used for unauthorized requests.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 972003194, 'comment_body': 'Also, why is status code 401 returned if assignment does not exists? This code is used for unauthorized requests.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 972004748, 'comment_body': 'Set can contain an element only once. So check for ""has"" is not needed. Maybe you can confirm this and update the code if needed.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 972005684, 'comment_body': 'This looks like a mistake. This should not be there.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 972009227, 'comment_body': 'I guess we have used 401 for this purpose in other APIs in Sugarizer Server, so it cannot be avoided. But please do add error message and code.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 972010334, 'comment_body': 'Have you verified that you are using the right error codes?', 'comment_created': datetime.datetime(2022, 9, 15, 13, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 972011731, 'comment_body': ""Sometimes you have used return with res.send, sometimes you haven't. Make it consistent."", 'comment_created': datetime.datetime(2022, 9, 15, 13, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 972012363, 'comment_body': 'Remove unnecessary line breaks', 'comment_created': datetime.datetime(2022, 9, 15, 13, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 972012490, 'comment_body': 'Remove unnecessary line breaks', 'comment_created': datetime.datetime(2022, 9, 15, 13, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 972015583, 'comment_body': '`req` and `res` are not needed as parameters, they can be replaced with `assignmentId`.', 'comment_created': datetime.datetime(2022, 9, 15, 13, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'NikhilM98', 'type': 'User'}, {'comment_id': 972480598, 'comment_body': 'will add codes for Hindi\r\n', 'comment_created': datetime.datetime(2022, 9, 15, 22, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 972484691, 'comment_body': '> If you cannot add translation for some language, add placeholder English translation instead so that it can be translated later.\r\n\r\ncan you explain this more?', 'comment_created': datetime.datetime(2022, 9, 15, 23, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 972488069, 'comment_body': ""Imports aren't present in this file, one of the files is imported in the footer.ejs , extra file I'm deleting "", 'comment_created': datetime.datetime(2022, 9, 15, 23, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 972489253, 'comment_body': 'work in progress with dates ', 'comment_created': datetime.datetime(2022, 9, 15, 23, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 972499679, 'comment_body': 'Yeah ! Done\r\n', 'comment_created': datetime.datetime(2022, 9, 15, 23, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 972850135, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 16, 9, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 972853828, 'comment_body': 'done!\r\n', 'comment_created': datetime.datetime(2022, 9, 16, 9, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 972859787, 'comment_body': ""should i use return with all res.send()'s\r\n"", 'comment_created': datetime.datetime(2022, 9, 16, 10, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 972891050, 'comment_body': ""I guess yes because there shouldn't be two res,send() with the same code \r\nand maybe the problem is with that .toSting() thing"", 'comment_created': datetime.datetime(2022, 9, 16, 10, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 972895280, 'comment_body': 'I checked this when I was doing this. It works fine in this way\r\n', 'comment_created': datetime.datetime(2022, 9, 16, 10, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 973684454, 'comment_body': 'done\r\n', 'comment_created': datetime.datetime(2022, 9, 18, 8, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}, {'comment_id': 979319444, 'comment_body': 'Done\r\n', 'comment_created': datetime.datetime(2022, 9, 24, 21, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'codebloded', 'type': 'User'}]","[{'commit_sha': 'f5e67631d2efbecfb09040a3d1e56edaa861ec04', 'committer_username': 'saurabhhere', 'committer_name': 'Saurabh Gupta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 23, 17, 33, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bfb805867276791b7e73a88468bf8509a9776e5', 'committer_username': 'llaske', 'committer_name': 'Lionel Laské', 'committer_email': 'lionel@sugarizer.org', 'commit_date': datetime.datetime(2011, 8, 15, 19, 50, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4493d807966f7df049a442e0520fbb6cbb4c9524', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3742034e10ad0251a014844a3e47d3517d7143b0', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8113ba2c7cc01c534a7bf3fe984ed067a3e45983', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1df7e20f83cba42858f7d015cce3832ddc4dcc6f', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cc7e287848ab756d107437999b4c0d419f5e008', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '949cb1f9c540f28261e42096901bc19b7dafe889', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7e989f3a67704ab184ec2aa4149ba9d0c985fb2', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00bec6a5d0bd0b77841bae6fe1a0c368239fbd87', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a45e051ef2d6a88a6cfd3950b2795032a77c0fe7', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '607223fdb7fe1b36b014d716e285cbd58fecf183', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '161a57ae448e70ba39f466ebf5d973b237d4d06d', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3df351bdf07b4819939b04e367015f84ecba573', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93e80a1714120c6a134b1974cd03d7c6dc7afa76', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '184a33428cd6412e01d1466be6687f63ada3428e', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb9172003506f096b4e49d6bb8ddf1d7af28c757', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e5690f676ff575aa167df21bd304c4fbb9aea8e', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f863af81bbab6046687c5a830568d38186ef416', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea77a5e77a5ce1491ca3f4acc789ef4eb0486ee0', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0e17f417b5f59cc7b17a9d7c3774ce3ddebb64a', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fef860a435eb13ad6dc7a8af26d6b74987043575', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc4b4fcf9bfbb191476a2aa24c0f60bfbd758586', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eb2e5d4b9f108732e7d73eeab1205606e21c32d', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dee6917ca0e3c3bf547842aa9023739483bec9d', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '891c9cfaf37520e2b839e2e0422659f5fdaed179', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11b5ed89a3d504f3005dd8321cc12a6e25a8d21b', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82923c8605639c6a813c53d81d4b56a777e60a5e', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be59ac5e10991dc7e4a60b3c23aeac2daa6c6e1e', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a9cdb55c4900fc3331045d132b3e68a4d61f5fb', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7760588157d16ffcd9aa82ed0a893c2087c8c7d0', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12152ddc07365708ee1f544d7fb6f95252e8a962', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0fcc3d521e0d23ebd1d79dea68ea928de1a5ea3', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8593244d97cef910c42f1c7943d41bb623db10e5', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b903c81191add7d0c9db237efd1636dc6faca3d9', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e75c43c7245f3512fb065aef90fcf4003d94bc2', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2e6648c02aa28c644549e94da491f3be8c69bc5', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a19036716c350ac893df3f20c1ccfc6e5188e9', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f376f29d980b817df1da9ddb6febc340ceebe62b', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86e0fcc917a85768910a413883df5b01c5b30f02', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac2e82905ee085a021579102700a21645b61604d', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35dca4717579dbc167603fbdf45f61bcb9f9ed0c', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd56f7c83f3540a6d5d280f622acea8d1d0b910f3', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3dca2425490d5ee48ca43b985b6fe67069faab5', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '969af1b9adfa106bf9916f14bc207c915036a462', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd3ff80f52c41d920aa4ca22b6524850b5d612b6', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdc2e5d6c271cab7c1357e3d42049aa6514c6a39', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6d4a9aab3811f23e6e9a612a242be919183cfea', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '696899ed9fa9d40b03ba178cb889782402190cb6', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb7cd2de82a1d7a57b544702fd45a6da90fc2e64', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddb4a5e0fa9496d028ae1318a51fb21e47f83281', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbb6da4d7ff59fcca2492fb85a2b277604304e61', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e040c748506e96ef6467f5934743042a796bb3bc', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cad2162069b7b7292af61eba63ed9c0239235d03', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4fc70fa4e3f1dec01b9ad9478dfaa47776a90d9', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cbd5c4d8067b84380700cef1c0b4aec28a343b8', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3f4482718052014647c60744c8803f699118ff2', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b75c639dfcdb26c6aa7463c6f2b2c84cca20a83f', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7096c23a4d1ab1a800db8bff9cd861343cc0bcd4', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3039551911f8341b1db8d67d73fbba1454544183', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56ef2e56d6207331fdea804178a9eed932a0fb7d', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7574ecb4f1f9978c0dbb3cd175faa572bc7fd6bc', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88ca4a1cad282a9f9f934c318640c7e51ecc7063', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3723e69f570ae3b51d674b9f911b257bdeba70c9', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb1f5a48d6642e5313fa3747ba0f48a304effdc9', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01c41e29612bb01d963c68a1670796d7cb3912b4', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd20eddd19574ef47e209f599055cc31e4183bd0b', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '778cb0a5353a5e627fe66e94c367a4723ca06697', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4955773f947081d463e38bb2217767daf6e1ab1a', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9684708590c45323cedd2341add61b0b8ff0d800', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}]",Rohan kumar,48005711,,User,,112,,115,83
1035282494,[WIP] Add assignment Feature,,True,1092,https://api.github.com/repos/llaske/sugarizer/pulls/1092,https://github.com/llaske/sugarizer/pull/1092,closed,687,20,12,14,12,1,0,0,[],2022-08-24 10:31:28+00:00,2023-01-14 21:43:58+00:00,12395550.0,"143 days, 11:12:30","[{'comment_id': 954250899, 'comment_body': 'This file should not be updated.', 'comment_created': datetime.datetime(2022, 8, 24, 20, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'llaske', 'type': 'User'}]","[{'commit_sha': '64b43bf2f1b1eb632da23a574ddf7f7dca30fca9', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ea292229e86c91784a4a72c49e72165db92e23d', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c93bb445dd190bb3b4a52d180371235caf2ec7f8', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f071617a9e9d4fb72c841f1bb2a764021717d654', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1b81807ef00f8040142be311a9bfc8c323b2f2c', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e43b77fa8e26d93d119c97dd8a1dd1261a1f3d2', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8213472d16f4dd962e7ff780ab67e2dd6085d3d', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a960248ee049e8e312b9c640f88c19dbc135115b', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab2400325863ad76585ee864ba04f3d32ee162a', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4d69b86e8d8bf368425549b2cf6ffe5e3f06280', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '463e9650f55b6c8966e8fe3446d4f16c3e6fa729', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea57f6f2a8730a7e60cc11fd2b371307093ef4cb', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e28159ef41a6fe314f31d03fef75aeefdc3e99aa', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed73dc304dd3c7d355d5837e89557c5b35b621d2', 'committer_username': 'codebloded', 'committer_name': 'Rohan kumar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 26, 5, 58, 19, tzinfo=datetime.timezone.utc)}]",Rohan kumar,48005711,,User,,112,,115,83

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
92962945,sugarizer-server,llaske/sugarizer-server,JavaScript,92,42,10,27,1118,29,6,10,"[{'id': 979944101, 'number': 334, 'closed': datetime.datetime(2023, 1, 14, 22, 11, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 27, 11, 35, 27, tzinfo=datetime.timezone.utc), 'time_taken': 17404583.0, 'time_delta': '201 days, 10:36:23', 'additions': 26294, 'deletions': 12249, 'state': 'closed'}, {'id': 904865114, 'number': 327, 'closed': datetime.datetime(2022, 5, 23, 12, 43, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 9, 12, 2, 21, tzinfo=datetime.timezone.utc), 'time_taken': 3804092.0, 'time_delta': '44 days, 0:41:32', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 888283230, 'number': 314, 'closed': datetime.datetime(2022, 4, 9, 11, 0, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 24, 11, 53, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1379229.0, 'time_delta': '15 days, 23:07:09', 'additions': 2, 'deletions': 22950, 'state': 'closed'}, {'id': 866043347, 'number': 295, 'closed': datetime.datetime(2022, 3, 2, 14, 4, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 27, 12, 21, 52, tzinfo=datetime.timezone.utc), 'time_taken': 265385.0, 'time_delta': '3 days, 1:43:05', 'additions': 157, 'deletions': 12953, 'state': 'closed'}]"
14368627,sugarizer,llaske/sugarizer,JavaScript,411,197,20,149,5414,55,8,10,"[{'id': 1035282494, 'number': 1092, 'closed': datetime.datetime(2023, 1, 14, 21, 43, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 24, 10, 31, 28, tzinfo=datetime.timezone.utc), 'time_taken': 12395550.0, 'time_delta': '143 days, 11:12:30', 'additions': 687, 'deletions': 20, 'state': 'closed'}, {'id': 898872528, 'number': 1054, 'closed': datetime.datetime(2022, 4, 9, 19, 59, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 4, 11, 3, 27, tzinfo=datetime.timezone.utc), 'time_taken': 464136.0, 'time_delta': '5 days, 8:55:36', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 898859014, 'number': 1053, 'closed': datetime.datetime(2022, 4, 4, 10, 52, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 4, 10, 48, 34, tzinfo=datetime.timezone.utc), 'time_taken': 209.0, 'time_delta': '0:03:29', 'additions': 1, 'deletions': 1436, 'state': 'closed'}, {'id': 881100166, 'number': 1010, 'closed': datetime.datetime(2022, 4, 4, 10, 43, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 16, 9, 4, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1647555.0, 'time_delta': '19 days, 1:39:15', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 871017987, 'number': 992, 'closed': datetime.datetime(2022, 3, 4, 20, 58, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 3, 21, 9, 43, tzinfo=datetime.timezone.utc), 'time_taken': 85756.0, 'time_delta': '23:49:16', 'additions': 4, 'deletions': 5, 'state': 'closed'}, {'id': 867674350, 'number': 986, 'closed': datetime.datetime(2022, 3, 1, 20, 47, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 1, 9, 53, 44, tzinfo=datetime.timezone.utc), 'time_taken': 39239.0, 'time_delta': '10:53:59', 'additions': 10, 'deletions': 2, 'state': 'closed'}, {'id': 866877822, 'number': 984, 'closed': datetime.datetime(2022, 3, 1, 20, 50, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 28, 14, 59, 48, tzinfo=datetime.timezone.utc), 'time_taken': 107435.0, 'time_delta': '1 day, 5:50:35', 'additions': 13, 'deletions': 2, 'state': 'closed'}, {'id': 866204510, 'number': 983, 'closed': datetime.datetime(2022, 2, 28, 14, 44, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 27, 22, 18, 32, tzinfo=datetime.timezone.utc), 'time_taken': 59187.0, 'time_delta': '16:26:27', 'additions': 14, 'deletions': 1, 'state': 'closed'}]"
