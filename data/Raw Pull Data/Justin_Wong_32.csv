pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1369478740,WebGL mode documentation improvements,"(This PR is a working draft that's part of the GSoC 2023 project 'Supporting shader-based filters in p5.js"", mentored by @aferriss and @aceslowman)

Initial changes:
- add basic summary of differences between P2D and WEBGL mode
- add links to WEBGL mode tutorial content

 Screenshots:
- Before: 
![2023-05-29-14-45-01](https://github.com/processing/p5.js/assets/28441593/d54f9fed-b16d-4b38-8bbd-84f50e143fd4)
- After: 
![2023-05-29-14-45-09](https://github.com/processing/p5.js/assets/28441593/f6d484bb-3473-4049-a445-2d14a5928f3c)


#### PR Checklist
<!--
  To check any option, replace the ""[ ]"" with a ""[x]"". Be sure to check out how it looks in the Preview tab! Feel free to remove any portion of the template that is not relevant for your issue.
-->

- [x] `npm run lint` passes
- [x] [Inline documentation] is included / updated

[Inline documentation]: https://github.com/processing/p5.js/blob/main/contributor_docs/inline_documentation.md

",True,6167,https://api.github.com/repos/processing/p5.js/pulls/6167,https://github.com/processing/p5.js/pull/6167,closed,19,2,2,19,5,14,0,0,[],2023-05-29 19:08:38+00:00,2023-06-20 16:52:12+00:00,1892614.0,"21 days, 21:43:34","[{'comment_id': 1209518586, 'comment_body': 'I was thinking about adding links to each of the bold features, like `<a href=""https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5#text""><strong>Text</strong></a> is drawn differently`. Not sure if function docs should be linked, or p5js tutorial sections, or other content, or if they should even have links in the first place.', 'comment_created': datetime.datetime(2023, 5, 29, 19, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1210187562, 'comment_body': ""Linking sounds good to me, for what it's worth!"", 'comment_created': datetime.datetime(2023, 5, 30, 12, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 1210201050, 'comment_body': ""Also, just a heads up, for now bullet lists in our docs render just as newlines in the reference. I don't think we have an issue to track this yet so I made an issue for it here: https://github.com/processing/p5.js/issues/6170"", 'comment_created': datetime.datetime(2023, 5, 30, 12, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 1210503061, 'comment_body': 'I agree that it is helpful to link out to more info for each of those topics and I appreciate this as a brief list of differences. I think that replacing the bold text with links though might not be very clear, I wonder if things can be reworded in a way that lets you describe where the information can be found. Something like:\r\n\r\n`The coordinate system is centered and uses an optional z-dimension, which you can read more about in the <a href="""">""Getting Started With WebGL""</a> tutorial in the Learn page.`\r\n\r\nAdditionally, it would help to include a little more text for ""Text is drawn differently"" and ""You can use shaders"". For text, the reference page for [text()](https://p5js.org/reference/#/p5/text) describes some of the issues, maybe you can rephrase it into something like:\r\n\r\n`Text in WebGL requires opentype/truetype fonts loaded in your [preload()](https://p5js.org/reference/#/p5/preload) function using the [loadFont()](https://p5js.org/reference/#/p5/loadFont) method. More information about using text in this mode can be found in the [wiki](https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5#text).`\r\n\r\nAnd it might be helpful to briefly define shader, as some users might not be familiar:\r\n\r\n`WebGL mode makes it possible to use shaders, which are programs that can be used for creating a variety of effects and graphics that take advantage of hardware acceleration.`', 'comment_created': datetime.datetime(2023, 5, 30, 16, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aceslowman', 'type': 'User'}, {'comment_id': 1210584944, 'comment_body': ""A small nit but can we phrase this a little differently to reflect WEBGL's usage rather than it's notoriety. \r\n\r\n`One of the two render modes in p5.js, used for computationally intensive tasks like 3d rendering and drawing shaders.`"", 'comment_created': datetime.datetime(2023, 5, 30, 17, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1210590722, 'comment_body': 'Can we simplify the language here:\r\n`WEBGL differs from the default P2D renderer in the following ways:`', 'comment_created': datetime.datetime(2023, 5, 30, 17, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1210597151, 'comment_body': 'Also echoing what Austin said. I think for this list it would be good to put the topic as the first word, and then follow it with a sentence or two about how it is different. For example:\r\n\r\n**Coordinate System** - When drawing in WEBGL mode, the origin point (0,0,0) is located at the center of the screen. More information about WEBGL [coordinates and transformations can be found on the learn page](https://p5js.org/learn/getting-started-in-webgl-coords-and-transform.html)\r\n\r\n**Next topic** - one or two sentences describing the differences with a link to more info if possible.', 'comment_created': datetime.datetime(2023, 5, 30, 17, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1210608400, 'comment_body': 'I think we can also add a couple more elements to this list.\r\n**3D Shapes** - WEBGL mode can be used to draw 3D shapes like cubes, spheres, cones, and more. (with links to each shape). \r\n\r\n**Graphics Acceleration** - WEBGL mode uses the graphics card and may help you boost performance of your sketch or draw an increased number of shapes to the screen at once.\r\n\r\nAny other major differences worth mentioning here?', 'comment_created': datetime.datetime(2023, 5, 30, 17, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1213612612, 'comment_body': ""ok once this is merged https://github.com/processing/p5.js/pull/6177 you'll get bullets next to your list items!"", 'comment_created': datetime.datetime(2023, 6, 1, 19, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 1218434443, 'comment_body': ""I think we can leave this developer documentation in place, despite the fact that it doesn't render into the actual docs. Adding a note that explains that these docs are not rendered would be good though!\r\n\r\n`Note: Documentation is not generated on the p5.js website for functions on the p5.RendererGL prototype.`"", 'comment_created': datetime.datetime(2023, 6, 5, 18, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1218646194, 'comment_body': ""The other code examples only used the x and y parameters for [line()](https://p5js.org/reference/#/p5/line), so I added one using the z parameters for WEBGL mode. \r\n\r\nI figure it's a good goal to show all the possible parameters in the code examples, which would mean having a 3D example for the 2D primitives.\r\n\r\nHaving these scaffolded examples might naturally help users transition to WEBGL. Eg. they might know the WEBGL coordinate system is different just from their time browsing 2D primitives examples."", 'comment_created': datetime.datetime(2023, 6, 5, 22, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1218653622, 'comment_body': ""Agree, it's nice to see the webGL versions with the updated signatures! If we don't think it's too much code I think it could be nice to color these lines in rgb (xyz) gizmo fashion like so https://editor.p5js.org/aferriss/sketches/qCsZ08lJ8"", 'comment_created': datetime.datetime(2023, 6, 5, 22, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1218655300, 'comment_body': ""The round 2D primitives have a `detail` parameter, so technically for completeness they could use an example like this to show it in action.\r\n\r\nBut I think it would distract from useful parameters and examples, and `detail` doesn't seem like a popular feature for users, and `detail` is already documented well in `curveDetail()` and `bezierDetail()` and the 3D primitives.\r\n\r\nMaybe this should make it into the list of WEBGL vs P2D differences? Something like:\r\n- **Vertex Count** - When drawing curved shapes in `WEBGL` mode, you can specify how many vertices are drawn with a `detail` parameter.\r\n"", 'comment_created': datetime.datetime(2023, 6, 5, 22, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1218658065, 'comment_body': ""Instead of `Vertex Count` I think we can use p5's existing language and call it `Shape Detail`. \r\n\r\nAlso I don't think additional examples detracts and to be honest I didn't realize the round 2d shapes even had that parameter. I think it would be a good addition, and as you note, the 3d shapes include this, so why not 2d as well?\r\n\r\nhttps://p5js.org/reference/#/p5/sphere"", 'comment_created': datetime.datetime(2023, 6, 5, 22, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}]","[{'commit_sha': '1d6068dbd24a5d337228376ffc236e1ea6a14769', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d96c21777b93ceaea9eda8de8a40160e75b0a18', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17936c8457275ac13cca0ad10f9d61c4071a72c8', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2ef21d6a30bdda413b36c4a4e1257f436499025', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29a700dcf39a8bc3dff0e6588621ad6e03df448e', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84985f3d7a54f08d2426894bc7da629d6e1cc1a3', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1a00c66fe5c2fc32995450064ab3be994c5844b', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '021c56573996d29d73147785a175540a263db613', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '004ac1daef40a6f34a0c55e45c81d9f36365aeda', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4b3a9c2da214b787a66eafa689f3b645f7f7d36', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eed99e64df281b8fef46ce1f4e0fa6e5ea18432d', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dbe1c258b1e75dfbe2896b2f002d75026e5dabf', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '346e0a4afe43ea7057ca7545dd24b3df8738c06f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30d6fd4705f7f3592e8fedd59369422fda284212', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fafba9fee11e1f8b5009bc463c0a857adf37b6f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '699c92258470dc0de1cdfb2672e298eaac204ed2', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04f87639da45c7223296f7618576aafb48e59330', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '994d18faf6eb18a3db2f041753380c19a1de491b', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f3a967b4f8bc5aa318d48103d8de2f5974d80e', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}]",J Wong,28441593,justin@wonger.dev,User,,40,,20,8
1405725835,Adds createFilterShader() and custom shader support to the webGL filter() function ,"
Addresses: [#4820](https://github.com/processing/p5.js/issues/4820), [#5571](https://github.com/processing/p5.js/issues/5571)

## Initial changes:
- `filter()` accepts a shader parameter
- Added property for storing current filter shader

## Will also change:
- Apply the current filter shader and render to main canvas / parent renderer
- Add shaders for constants like `GRAYSCALE`, etc
- Clarifying docs to show new functionality

`p5.Framebuffer` is an alternative graphics layer to pursue if `p5.Graphics` doesn't work. Either one is nice if it gives a simple way to call `shader()`, renders to main with something like `texture() plane()` / `copyPixels()`, and gives resizing and other coverage for free. Right now I started a framebuffer approach after running into two difficult p5.Graphics errors.

(This PR is a working draft that's part of the GSoC 2023 project 'Supporting shader-based filters in p5.js"", mentored by @aferriss and @aceslowman)

---

- [x] npm run lint passes
- [ ] [Inline documentation] is included / updated
- [ ] [Unit tests] are included / updated",True,6237,https://api.github.com/repos/processing/p5.js/pulls/6237,https://github.com/processing/p5.js/pull/6237,closed,467,19,7,50,0,34,1,0,[{'name': 'Area:WebGL'}],2023-06-23 21:56:38+00:00,2023-08-02 20:08:32+00:00,3449514.0,"39 days, 22:11:54","[{'comment_id': 1242162698, 'comment_body': ""btw, in case it's useful, `RendererGL` has access to a lazily-created framebuffer that matches its size, currently used for its `loadPixels` implementation: https://github.com/processing/p5.js/blob/a66195a45fdd4d0b7396169b09ad2ce6dfffcdd4/src/webgl/p5.RendererGL.js#L1047-L1052\r\nMight work if you use that for filters too? But there could be other reasons why you want a separate one too."", 'comment_created': datetime.datetime(2023, 6, 26, 13, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 1248105450, 'comment_body': 'I think user shader will need to be created using the pg context here. I wonder if we can just extract the shader strings from an already loaded shader and reload it using `pg.createShader()`', 'comment_created': datetime.datetime(2023, 6, 30, 17, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1248303878, 'comment_body': 'I think we should continue this discussion about whether or not webGL filter should attempt to be used even if the source sketch was not in webGL model', 'comment_created': datetime.datetime(2023, 6, 30, 21, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1248313228, 'comment_body': ""We probably don't wanna create a shader every frame, can we cache it somehow?"", 'comment_created': datetime.datetime(2023, 6, 30, 22, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1248320536, 'comment_body': 'Add in example, alt text, supporting documentation, etc.', 'comment_created': datetime.datetime(2023, 6, 30, 22, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1248320664, 'comment_body': 'Should we provide users with a default vertex shader?', 'comment_created': datetime.datetime(2023, 6, 30, 22, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1257088606, 'comment_body': 'can we check if the filter layer exists first before executing the code here?\r\nAnd also leave a comment about what this code is doing?', 'comment_created': datetime.datetime(2023, 7, 8, 6, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1257092725, 'comment_body': ""Is this the right check? I think we need to know if args[0] is a p5.shader, or a filter constant ( BLUR, INVERT, etc), and if not, we print an error. Aren't the filter constants strings?"", 'comment_created': datetime.datetime(2023, 7, 8, 6, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1257097450, 'comment_body': 'Another thought, what about a case where you have two of the same shader, but want to pass different uniforms to them, or use them in different contexts throughout your sketch, (for ex an invert shader running on both a piece of geometry in the main sketch and an invert filter for the filter function) Would this code support that behavior?', 'comment_created': datetime.datetime(2023, 7, 8, 6, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1257366672, 'comment_body': ""I think so. Here are some related thoughts: #6144 \r\nI'm leaning towards the simplest option, just exposing a default vertex shader as a string constant."", 'comment_created': datetime.datetime(2023, 7, 8, 21, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1257371600, 'comment_body': ""Yes, that's the check. Although there shouldn't need to be a third case handling errors, since the args get validated in the parent `filter()` function: [pixels.js#L472](https://github.com/processing/p5.js/blob/3b0d1328b96a6d46dfc77e3f33e97077934967fa/src/image/pixels.js#L472)\r\n\r\nRight now the string / filter constant case has an error placeholder. It will be replaced in the next PR that implements the shader versions of filter constants. And the current code handles the p5.Shader case."", 'comment_created': datetime.datetime(2023, 7, 8, 21, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1257378084, 'comment_body': ""Agreed, I think that's the primary value of this whole project, speeding up existing `filter()` calls in P2D sketches. So P2D sketches would have to create a hidden webGL context if `filter` is used.\r\n\r\nI think shader filter usage should be automatic while including an opt-out. Something like `filter(CONSTANT, useWebGL=false)`?\r\n\r\nAnd I think that should be included in the next PR that implements the webGL shaders for filter constants.\r\n"", 'comment_created': datetime.datetime(2023, 7, 8, 21, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1257380100, 'comment_body': ""Great point, I didn't think of that use case. \r\n\r\nOn transferring uniforms from the main shader to the secondary shader: A better way of detecting when to copy uniforms might be checking for a child / copy reference, something like `if this.has duplicateShader, then this.duplicateShader.setUniform(...) instead`. And that reference would be set when the duplicateShader is created. I think that should work - not sure why I thought of this other way first.\r\n\r\nThe whole thing feels a little icky though - first having to create another webgl graphics context, and now having to duplicate shaders since the user's `createShader()` call is bound to the main renderer, and there doesn't seem like a decent way to rebind an existing shader to a different webgl context. And I think there's a little overhead to compiling another shader, although it's been a negligible effect in my testing. I think this duplication complexity would be avoided with the framebuffer approach."", 'comment_created': datetime.datetime(2023, 7, 8, 22, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1257383748, 'comment_body': 'Another thought, we could make a function to make a shader that only takes in a fragment shader and automatically uses that default vertex shader? Like createFilterShader()?', 'comment_created': datetime.datetime(2023, 7, 8, 23, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 1257600990, 'comment_body': 'I agree about the opt-out, most people would benefit from the hidden webGL context, but it feels like there would be some negative side-effects eventually if there was no way to avoid that. Am I correct in thinking that there might be situations where a shader heavy project might benefit from strategically shifting some effects to the CPU?', 'comment_created': datetime.datetime(2023, 7, 10, 1, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aceslowman', 'type': 'User'}, {'comment_id': 1257606031, 'comment_body': ""A default vertex shader as a string constant honestly makes sense to me, although I'd like to hear other thoughts. Would the idea be that they would use createShader() like normal, but pass in the new constant?"", 'comment_created': datetime.datetime(2023, 7, 10, 1, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aceslowman', 'type': 'User'}, {'comment_id': 1263954325, 'comment_body': 'I think instead of just turning a red canvas grey it would be better to show off the feature by filtering an image that has been previously drawn. There should be some images available in the library that can be used in examples without having to add a new image file', 'comment_created': datetime.datetime(2023, 7, 14, 17, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1263956928, 'comment_body': 'I think we can check if webgl support is available and then attempt to filter on the GPU for the filter constants. Agree that it would be good to opt out if possible but it does add some slight code complexity here', 'comment_created': datetime.datetime(2023, 7, 14, 17, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1263957809, 'comment_body': 'Is this modernizer line in other examples?', 'comment_created': datetime.datetime(2023, 7, 14, 17, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1263959091, 'comment_body': ""Should we preflip the y uv so that the user doesn't need to deal with this?"", 'comment_created': datetime.datetime(2023, 7, 14, 17, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1263959969, 'comment_body': 'I like it, nice and simple!', 'comment_created': datetime.datetime(2023, 7, 14, 17, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1263962427, 'comment_body': ""If we're supplying a shader created with createFilterShader() can we skip this?"", 'comment_created': datetime.datetime(2023, 7, 14, 17, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1263965338, 'comment_body': ""The overhead to create and compile a single other shader should be minimal, I don't think we need to worry too much since it's ideally only happening once in the lifetime of a sketch"", 'comment_created': datetime.datetime(2023, 7, 14, 17, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1270883411, 'comment_body': 'Just curious, would the user be able to understand that this is being done for them? Having difficulty articulating what I mean, but if certain things are done in the vertex shader I wonder whether or not it might leave people new to shaders with some misconceptions.', 'comment_created': datetime.datetime(2023, 7, 21, 16, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aceslowman', 'type': 'User'}, {'comment_id': 1271158368, 'comment_body': ""Yeah, after trying the pre-flipped `vTexCoords.y` it for a week I came across passing mouseY as a uniform and forgetting to invert the coordinates. So the user will eventually find out that they have to flip y, and the inconsistency might be confusing between when it's done for them (maybe this one time out of convenience) and when it's not (the rest of the time)."", 'comment_created': datetime.datetime(2023, 7, 21, 22, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1271159544, 'comment_body': ""Are we good to use `highp` as the default in examples? I guess it's only certain old mobile hardware that would care about mediump, and it's becoming less of a matter over time."", 'comment_created': datetime.datetime(2023, 7, 21, 23, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1277799717, 'comment_body': 'Yep, no issues there!', 'comment_created': datetime.datetime(2023, 7, 28, 17, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1277807523, 'comment_body': 'Can we change the language to clarify that the default input is a texture called tex0?\r\n\r\nSomething like: ""The fragment shader is provided with a single texture input uniform called `tex0`""', 'comment_created': datetime.datetime(2023, 7, 28, 17, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1277811941, 'comment_body': 'Maybe change the language slightly here to say that this function is intended to be used with the `filter()` function. \r\n\r\n""createFilterShader is intended to be used in tandem with the <a href=""filter function..."">`filter()`</a> for filtering the entire contents of a canvas when using webGL mode.', 'comment_created': datetime.datetime(2023, 7, 28, 17, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1277841631, 'comment_body': 'Could it not be working with pgraphics because this._pInst is referring to the main sketch?', 'comment_created': datetime.datetime(2023, 7, 28, 17, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1278179633, 'comment_body': 'Agreed to skip this tiny optimization for now', 'comment_created': datetime.datetime(2023, 7, 28, 23, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1280918157, 'comment_body': '@wong-justin can you remove this commented code before we merge?', 'comment_created': datetime.datetime(2023, 8, 1, 17, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}]","[{'commit_sha': '16def010727a6f35cde7f720f09d5dd3f4a9066b', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7abb8c6ca7d53d7fde66d023a1ffd2f9978650f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dbe59559c3689611a3acdba657d3eacfb3aac4e', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a09691407478c08eaf7d9e05a15082f03d9acff7', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87f347aa76b844a3a0f2d7d2d5e66c59b46438eb', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0126bfbbf2b518c23168b7377594d6450ce40db', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb1979bbff5650910ab997246519481a57966762', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '644e61a16fd1d10016fc18541a8f053a33095347', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '628fc18746135ffef135d3643fd9361a44091fb9', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '359d16b148128da7b9ad8a82278398d1ff1f02b7', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e857d5b65e0bcad510b1fee778cc65828b1b51e2', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a762869ac5c49e53b93c4012b0784c96fa0ff668', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eb64a019dba2ca83b42763e5cd6aa9c96c7319a', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c5d0ffbe38b62c928350ed958547c625b4e2a1c', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10d85ff11f729e42579349fb48b231e011e46263', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3244379205f1001ec8e1924c639b06ec86dab74', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f39f691277f5ee90a74799fcf3ca9e24f0a236b', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc50e52793bf15cf1bcc591dcecb75ba607eb73f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3a41e7f97e6a1066b7000f0a5978e17367ecb47', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7888ad4020b2f6ff5220bb1c9de11ce871627fa5', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b52a4677089a9983ab806ab74650396aa38ed113', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02113bb9770c031ef001f794383cb9a4528e36f2', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be7c01ca6e4bb32fa054af765f8ba1961bcff4e0', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa1f04826a52c404684dea4a98bc89539eb6beab', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d50053a622e8a7cc7aa0f874d471ae1ff758df4', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e52976c9896465f16f836e517755867e44c3836', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590d025f2d2e326062b7e4c1282d0e8314b37580', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2e69ae3efae7d27b554d853bf72b5888093c894', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e4c04e0448d17656d9a17eaed59bf43374b3208', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f23d07225b74d987020025b28fd16a00eda862b1', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '034ebb58c32871861a9e447404c2da7daf383263', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bfa2f2c2fafaa5d5ef1d5af7c0700a6ae8bc58e', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6fbdc273ef2d7559d7675176b66140232eec274', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86cb79d537ecda62348845b2139878e26ca87328', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf282f3ace0190184eda43cbadf4ce34d572c1f3', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25424c752adce98c3142a8acb4e5214d7fdec14b', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1dd620ee064413ec4aba1859b7984f8b9466cac', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa178bac49dafc57752489c0c8a4068379ae7414', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68ad8aec3a4d07bc9e2b7980f8c6dfcb3dfbb417', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c039991aa7d155bf578561110a76f0f8b428b6bb', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c476759224c76c5b365a7504f11df3f201d9f090', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b1e56e7a5d209cd9ea557bcbdc9e0299a69388d', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec76701ccfee243c5e62ac225f278979feff2e36', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82200710c1ed079eac80b2a827987955eb11ef88', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44ad94f524b294ac18fbe6422266fe1792df54c9', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5321461af065d2fb91f85dfc4dcf7ab02113c2d', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '479aca3ca77c02bd7fa2a90e595206a9e15839d5', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42503996503b953e02264ccd8dfbdf37a3b1a5a5', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5abd47d7502b433b662886a453e73d00a43532e0', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51aa8740443d9b834cd57d548f6cac1b68f2c489', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}]",J Wong,28441593,justin@wonger.dev,User,,40,,20,8
1461977830,"Add shaders for filter() constants, and use them by default in P2D","Resolves #4820 
Continuation of #6237 

 Changes (in progress):
- add fragment shader source files for BLUR, INVERT, etc
- replace original pixels `filter()` implementation with those shader filters
- add option to revert back to original pixels `filter()`

(This PR is a working draft that's part of the GSoC 2023 project 'Supporting shader-based filters in p5.js"", mentored by @aferriss and @aceslowman)

---

#### PR Checklist
<!--
  To check any option, replace the ""[ ]"" with a ""[x]"". Be sure to check out how it looks in the Preview tab! Feel free to remove any portion of the template that is not relevant for your issue.
-->

- [ ] `npm run lint` passes
- [ ] [Inline documentation] is included / updated
- [ ] [Unit tests] are included / updated",True,6324,https://api.github.com/repos/processing/p5.js/pulls/6324,https://github.com/processing/p5.js/pull/6324,closed,705,137,16,56,8,24,1,0,[{'name': 'Area:WebGL'}],2023-08-03 19:52:27+00:00,2023-08-31 21:10:55+00:00,2423908.0,"28 days, 1:18:28","[{'comment_id': 1290883036, 'comment_body': ""The POSTERIZE shader mostly works, but it looks a little different (and a little worse imo) compared to the original pixels POSTERIZE.\r\n[example sketch with old pixels filter](https://editor.p5js.org/jwong/sketches/ZsWF6Gxd6)\r\n[example sketch with this new shader](https://editor.p5js.org/jwong/sketches/r9fxPerPU)\r\n\r\nPixels filter code for comparison of implementation details:\r\nhttps://github.com/processing/p5.js/blob/6d3405fb08bef8673f9c5b7d2b11d39418f79cad/src/image/filters.js#L289-L308\r\n\r\n- Not sure how to handle validating the extra filter parameter; here it throws a vanilla error when outside 2-255. But others like BLUR and THRESHOLD just do their own little validation and fail silently if the parameter is invalid. Maybe I should add some extra friendly errors for each case? (`'🌸 POSTERIZE only accepts a parameter from 2 to 255; received x'`, or `'THRESHOLD only accepts a parameter between 0.0 and 1.0; received x'`)"", 'comment_created': datetime.datetime(2023, 8, 11, 4, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1290884306, 'comment_body': ""Not sure if the `if` statement should be replaced by some sort of `step` logic. I know it's good to avoid branching if statements in shaders for speed. But a simple `if` statement seems easier to read and maintain"", 'comment_created': datetime.datetime(2023, 8, 11, 4, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1291559798, 'comment_body': 'should we add `texelSize` to the documentation for `createFilterShader`?', 'comment_created': datetime.datetime(2023, 8, 11, 16, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291563296, 'comment_body': 'lets just simplify this whole block to `float spread = max(0.0, filterParameter);` and then set a default value for the filterParameter in the js that is overridden if explicitly set.', 'comment_created': datetime.datetime(2023, 8, 11, 16, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291563804, 'comment_body': 'How does the output of this blur compare to the cpu one?', 'comment_created': datetime.datetime(2023, 8, 11, 16, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291564482, 'comment_body': 'this is fine, haha. Probably just different implementers ', 'comment_created': datetime.datetime(2023, 8, 11, 16, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291572443, 'comment_body': ""I think that this shader can be simplified and maybe doesn't need the luma calculation. Let me know if I'm wrong but take a look here\r\n\r\nhttps://www.shadertoy.com/view/dtScWD"", 'comment_created': datetime.datetime(2023, 8, 11, 16, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291572865, 'comment_body': 'Same for erode, but it will be a min instead of max', 'comment_created': datetime.datetime(2023, 8, 11, 16, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291583018, 'comment_body': ""Interesting, I'll take a look and try to suss out whats going on here."", 'comment_created': datetime.datetime(2023, 8, 11, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291598224, 'comment_body': 'I think your round was doing something weird. It should be a floor instead. See: https://editor.p5js.org/aferriss/sketches/mjQKudkIP', 'comment_created': datetime.datetime(2023, 8, 11, 17, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291621720, 'comment_body': ""lets predefine some defaults for this value. \r\n```\r\nif(operation === 'BLUR'){\r\n  filterParameter = 4;\r\n} else if(operation == 'POSTERIZE') ...\r\n```\r\nThen later you can check if there is a value in args[1] and set it equal to filterParameter if it exists."", 'comment_created': datetime.datetime(2023, 8, 11, 17, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291663137, 'comment_body': ""Here's a sketch for comparison, although bricks.jpg isn't the best example to compare blur:\r\nhttps://editor.p5js.org/jwong/sketches/r9fxPerPU"", 'comment_created': datetime.datetime(2023, 8, 11, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1297820312, 'comment_body': ""@jwong I think that having it match what is expected for the non-webgl filters feels best, glad to see you leave a comment about it here, I think it's helpful context."", 'comment_created': datetime.datetime(2023, 8, 17, 22, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aceslowman', 'type': 'User'}, {'comment_id': 1298609748, 'comment_body': ""`max()` seems to choose that greatest of each component, compared to the `luma()` way of choosing the greatest overall vector. Example:\r\n```\r\na = (1, 1, 0)\r\nb = (0, 0, 1)\r\nmax(a,b) = (1, 1, 1)  # instead of (1, 1, 0)\r\n```\r\n\r\nNot sure if that's more desired or not. The results look similar though"", 'comment_created': datetime.datetime(2023, 8, 18, 15, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1298743706, 'comment_body': 'I think either way is fine, if the luma calculation is more accurate to the CPU mode then disregard my comment!', 'comment_created': datetime.datetime(2023, 8, 18, 18, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1301949089, 'comment_body': ""Do you actually need to call this again, isn't the shader already bound?"", 'comment_created': datetime.datetime(2023, 8, 22, 17, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1301951017, 'comment_body': ""Does this work? Aren't you drawing to the same buffer that you're writing to?  On the first pass I would have thought we could avoid the copy above and just do what we do for other filters with `this.filterShader.setUniform('tex0', this);`"", 'comment_created': datetime.datetime(2023, 8, 22, 17, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1301976482, 'comment_body': ""On the second pass, would it make sense to just draw directly to the main renderer?\r\n```\r\n// somewhere earlier we need to make the 2nd pass shader in the main renderer's context\r\nthis.filterShaderMain = new Shader(blur.vert, blur.frag);\r\n// later when we're about to draw to screen\r\n    this._pInst.push();\r\n    this._pInst.shader(this.filterShaderMain);\r\n    this.filterShaderMain.setUniform('texelSize', [1/this.width, 1/this.height]);\r\n    this.filterShaderMain.setUniform('tex0', pg);\r\n    this.filterShaderMain.setUniform('direction', [0, 2]);\r\n    this._pInst.rect(0, 0, this.width, this.height);\r\n    this._pInst.pop();\r\n    ```"", 'comment_created': datetime.datetime(2023, 8, 22, 17, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1301995694, 'comment_body': 'I think we should change this shader to use the model view projection matrix instead. See my issue here #6367 where this shader is causing trouble because of the depth testing. ', 'comment_created': datetime.datetime(2023, 8, 22, 17, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1303339572, 'comment_body': 'That could work too. I felt like it made more sense to do everything on the secondary renderer, and just leave the main renderer for the final step. Trying to keep things from being tangled together.', 'comment_created': datetime.datetime(2023, 8, 23, 17, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1303350870, 'comment_body': ""It seems like it works now just using one renderer, but I was doing it wrong before. `setUniform('tex0', this)` seems to have helped."", 'comment_created': datetime.datetime(2023, 8, 23, 17, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1303530206, 'comment_body': 'I feel like the 2 here might be causing some slight pixellation, maybe we should change back to 1 for both horizontal and vertical directions', 'comment_created': datetime.datetime(2023, 8, 23, 20, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1303532111, 'comment_body': 'why do we need to do these initial passes? I think we could get away with just drawing the source canvas into the pg layer without a shader, and then running the loop.', 'comment_created': datetime.datetime(2023, 8, 23, 20, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1308070186, 'comment_body': ""What if someone is trying to use the accelerated filters from p2d mode. Won't this cause an error?"", 'comment_created': datetime.datetime(2023, 8, 29, 0, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}]","[{'commit_sha': '568c4ec051ad62f6c2e1dd1fab0e3ec57546eabf', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f15a50575ad017690e048bc572168322cec9098', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2f123d2a3042b937d75b41943e46f070f3a0626', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd8dab45e39b1372d1798fad71d756aab55753d2', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a026453317306ed332d5e2acf8736edc6136076', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bbb9800a9cf880aa8877b21e06a943e4aad837a', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1bfee4497c5f70588d9202e4a5d5d4b7680dbd9', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef397a1d8b96a8eec3d9818292628b3d055e6440', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '197c9056eae0fa95a0292ec2e6c05c2035c5add5', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e34031e47e38d8da3e911eeee674d52d739b957', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bf256586efaa7d003b86b3ed58ad025e2fc87b7', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed40a78652f4594eafbdcbe8df7950ba8f909296', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc4181e2537b94b3fbb65c6d568afb2760df8ce1', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94936e62bfd84df58cd77cbea0b89e99052b54a', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '586e933c038b0014a34e13d71c118357adeac00a', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e02d7fd408763b62bb1387c4e9c9f042f7b0f5a', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0deeebcce0363b1044392df89b617332140d6fe', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dc1056514d64c74258020e01a392f53665b94f4', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72f789531db6d8118820a4592c2a38a5ca2f715b', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10e0cac3bdad261eea746210ea5f107fe7626d4a', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ae66c535ffb4427f892bc4dd287705279e85b2f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b71bc393ff0a8ee073af6f3b1f2eb1c69e23b6f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '289767041dbbcff368d07bcb81376d309b40d56a', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa1a7e06864dfa5e5cdfe93a9b4c94893c5a1777', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f1b62caea63974e1d6508b15840157cfac764cf', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e734106160505e63e85c91df3b0e250e7010c3f1', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88830eb036cbbfc34ebf01768e9a0ab298d53b02', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb6af677e22680e5d85da23ae9cdd194b57b6b73', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89aa4997dac9e7fda8df1cc1c9f11d008a64bb66', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23c3db544a39ce6d800a371c91c99cf4d9f73713', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92c72440c077507a69c74bacc7669ccc49878e3b', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41cf4ba6297dcf6d1e751bf56f65bce62826411f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c2e9cedc698c7ec87eec11d299ebf199cb8d32f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dc8887d78325de24755562facf40c3fbf2674d6', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1a76ec3e98f3a1a8ba5325031e861127bdb8fa7', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bafee004813b2aa2a44fbe805d3b4b1fc9ca4157', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c4afc5fbc6cb50de26d77ffc00d8aaba7380e70', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02d187bad54c174c9ba1e7b7602e2cd8595378d2', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5d533cdebb0f5fb7867ed46dd3268c6c551f43c', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec41c1f0ee9c1add50284f4e76baf83140b41fa6', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ccfe59c2cf5d5392f0cb3f9fe2c2ff541836bdb', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '347401b9aa201273af9567a38b1fa83be3cd0343', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39def400a12ffc79450fd656b0cd58e355e667d8', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e6a95b6dfb8df92626166b007e00b5c61812efd', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be091427684ed699d1fdad537d0bb82f55385ec9', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2294582d28c5c96989f57c2591ec3bb0d0c3bd', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eca2c7698a7052965ce0e1a4b61aea553ab5072e', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0ef9280af1b4c38296dd7d5299ef45903003e13', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '547578b5c2dc58488af080876abaef80ea81f50f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '44d8f2cc6be05d0ac045f24186f119ced9360992', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b7454db462e71ae111c305162fc64f97f96f4ca7', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f04ddf8c49bd68e1a9e32f14018270036537bf94', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0a2fe994812dafe1c440c44730a2ca169d3b7ba', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3583f702ad0d34d348412c56e3472553b02f390', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bfe9c7defd82d4808d1a717adaa19078ba9fb50', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '121137f5f11408affcfb9c179fcab3c52e324928', 'committer_username': 'aferriss', 'committer_name': 'Adam Ferriss', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 25, 22, 36, 16, tzinfo=datetime.timezone.utc)}]",J Wong,28441593,justin@wonger.dev,User,,40,,20,8
1461977830,"Add shaders for filter() constants, and use them by default in P2D","Resolves #4820 
Continuation of #6237 

 Changes (in progress):
- add fragment shader source files for BLUR, INVERT, etc
- replace original pixels `filter()` implementation with those shader filters
- add option to revert back to original pixels `filter()`

(This PR is a working draft that's part of the GSoC 2023 project 'Supporting shader-based filters in p5.js"", mentored by @aferriss and @aceslowman)

---

#### PR Checklist
<!--
  To check any option, replace the ""[ ]"" with a ""[x]"". Be sure to check out how it looks in the Preview tab! Feel free to remove any portion of the template that is not relevant for your issue.
-->

- [ ] `npm run lint` passes
- [ ] [Inline documentation] is included / updated
- [ ] [Unit tests] are included / updated",True,6324,https://api.github.com/repos/processing/p5.js/pulls/6324,https://github.com/processing/p5.js/pull/6324,closed,705,137,16,56,8,24,1,0,[{'name': 'Area:WebGL'}],2023-08-03 19:52:27+00:00,2023-08-31 21:10:55+00:00,2423908.0,"28 days, 1:18:28","[{'comment_id': 1290883036, 'comment_body': ""The POSTERIZE shader mostly works, but it looks a little different (and a little worse imo) compared to the original pixels POSTERIZE.\r\n[example sketch with old pixels filter](https://editor.p5js.org/jwong/sketches/ZsWF6Gxd6)\r\n[example sketch with this new shader](https://editor.p5js.org/jwong/sketches/r9fxPerPU)\r\n\r\nPixels filter code for comparison of implementation details:\r\nhttps://github.com/processing/p5.js/blob/6d3405fb08bef8673f9c5b7d2b11d39418f79cad/src/image/filters.js#L289-L308\r\n\r\n- Not sure how to handle validating the extra filter parameter; here it throws a vanilla error when outside 2-255. But others like BLUR and THRESHOLD just do their own little validation and fail silently if the parameter is invalid. Maybe I should add some extra friendly errors for each case? (`'🌸 POSTERIZE only accepts a parameter from 2 to 255; received x'`, or `'THRESHOLD only accepts a parameter between 0.0 and 1.0; received x'`)"", 'comment_created': datetime.datetime(2023, 8, 11, 4, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1290884306, 'comment_body': ""Not sure if the `if` statement should be replaced by some sort of `step` logic. I know it's good to avoid branching if statements in shaders for speed. But a simple `if` statement seems easier to read and maintain"", 'comment_created': datetime.datetime(2023, 8, 11, 4, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1291559798, 'comment_body': 'should we add `texelSize` to the documentation for `createFilterShader`?', 'comment_created': datetime.datetime(2023, 8, 11, 16, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291563296, 'comment_body': 'lets just simplify this whole block to `float spread = max(0.0, filterParameter);` and then set a default value for the filterParameter in the js that is overridden if explicitly set.', 'comment_created': datetime.datetime(2023, 8, 11, 16, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291563804, 'comment_body': 'How does the output of this blur compare to the cpu one?', 'comment_created': datetime.datetime(2023, 8, 11, 16, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291564482, 'comment_body': 'this is fine, haha. Probably just different implementers ', 'comment_created': datetime.datetime(2023, 8, 11, 16, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291572443, 'comment_body': ""I think that this shader can be simplified and maybe doesn't need the luma calculation. Let me know if I'm wrong but take a look here\r\n\r\nhttps://www.shadertoy.com/view/dtScWD"", 'comment_created': datetime.datetime(2023, 8, 11, 16, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291572865, 'comment_body': 'Same for erode, but it will be a min instead of max', 'comment_created': datetime.datetime(2023, 8, 11, 16, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291583018, 'comment_body': ""Interesting, I'll take a look and try to suss out whats going on here."", 'comment_created': datetime.datetime(2023, 8, 11, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291598224, 'comment_body': 'I think your round was doing something weird. It should be a floor instead. See: https://editor.p5js.org/aferriss/sketches/mjQKudkIP', 'comment_created': datetime.datetime(2023, 8, 11, 17, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291621720, 'comment_body': ""lets predefine some defaults for this value. \r\n```\r\nif(operation === 'BLUR'){\r\n  filterParameter = 4;\r\n} else if(operation == 'POSTERIZE') ...\r\n```\r\nThen later you can check if there is a value in args[1] and set it equal to filterParameter if it exists."", 'comment_created': datetime.datetime(2023, 8, 11, 17, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1291663137, 'comment_body': ""Here's a sketch for comparison, although bricks.jpg isn't the best example to compare blur:\r\nhttps://editor.p5js.org/jwong/sketches/r9fxPerPU"", 'comment_created': datetime.datetime(2023, 8, 11, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1297820312, 'comment_body': ""@jwong I think that having it match what is expected for the non-webgl filters feels best, glad to see you leave a comment about it here, I think it's helpful context."", 'comment_created': datetime.datetime(2023, 8, 17, 22, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aceslowman', 'type': 'User'}, {'comment_id': 1298609748, 'comment_body': ""`max()` seems to choose that greatest of each component, compared to the `luma()` way of choosing the greatest overall vector. Example:\r\n```\r\na = (1, 1, 0)\r\nb = (0, 0, 1)\r\nmax(a,b) = (1, 1, 1)  # instead of (1, 1, 0)\r\n```\r\n\r\nNot sure if that's more desired or not. The results look similar though"", 'comment_created': datetime.datetime(2023, 8, 18, 15, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1298743706, 'comment_body': 'I think either way is fine, if the luma calculation is more accurate to the CPU mode then disregard my comment!', 'comment_created': datetime.datetime(2023, 8, 18, 18, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1301949089, 'comment_body': ""Do you actually need to call this again, isn't the shader already bound?"", 'comment_created': datetime.datetime(2023, 8, 22, 17, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1301951017, 'comment_body': ""Does this work? Aren't you drawing to the same buffer that you're writing to?  On the first pass I would have thought we could avoid the copy above and just do what we do for other filters with `this.filterShader.setUniform('tex0', this);`"", 'comment_created': datetime.datetime(2023, 8, 22, 17, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1301976482, 'comment_body': ""On the second pass, would it make sense to just draw directly to the main renderer?\r\n```\r\n// somewhere earlier we need to make the 2nd pass shader in the main renderer's context\r\nthis.filterShaderMain = new Shader(blur.vert, blur.frag);\r\n// later when we're about to draw to screen\r\n    this._pInst.push();\r\n    this._pInst.shader(this.filterShaderMain);\r\n    this.filterShaderMain.setUniform('texelSize', [1/this.width, 1/this.height]);\r\n    this.filterShaderMain.setUniform('tex0', pg);\r\n    this.filterShaderMain.setUniform('direction', [0, 2]);\r\n    this._pInst.rect(0, 0, this.width, this.height);\r\n    this._pInst.pop();\r\n    ```"", 'comment_created': datetime.datetime(2023, 8, 22, 17, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1301995694, 'comment_body': 'I think we should change this shader to use the model view projection matrix instead. See my issue here #6367 where this shader is causing trouble because of the depth testing. ', 'comment_created': datetime.datetime(2023, 8, 22, 17, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1303339572, 'comment_body': 'That could work too. I felt like it made more sense to do everything on the secondary renderer, and just leave the main renderer for the final step. Trying to keep things from being tangled together.', 'comment_created': datetime.datetime(2023, 8, 23, 17, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1303350870, 'comment_body': ""It seems like it works now just using one renderer, but I was doing it wrong before. `setUniform('tex0', this)` seems to have helped."", 'comment_created': datetime.datetime(2023, 8, 23, 17, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1303530206, 'comment_body': 'I feel like the 2 here might be causing some slight pixellation, maybe we should change back to 1 for both horizontal and vertical directions', 'comment_created': datetime.datetime(2023, 8, 23, 20, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1303532111, 'comment_body': 'why do we need to do these initial passes? I think we could get away with just drawing the source canvas into the pg layer without a shader, and then running the loop.', 'comment_created': datetime.datetime(2023, 8, 23, 20, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1308070186, 'comment_body': ""What if someone is trying to use the accelerated filters from p2d mode. Won't this cause an error?"", 'comment_created': datetime.datetime(2023, 8, 29, 0, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}]","[{'commit_sha': '568c4ec051ad62f6c2e1dd1fab0e3ec57546eabf', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f15a50575ad017690e048bc572168322cec9098', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2f123d2a3042b937d75b41943e46f070f3a0626', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd8dab45e39b1372d1798fad71d756aab55753d2', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a026453317306ed332d5e2acf8736edc6136076', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bbb9800a9cf880aa8877b21e06a943e4aad837a', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1bfee4497c5f70588d9202e4a5d5d4b7680dbd9', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef397a1d8b96a8eec3d9818292628b3d055e6440', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '197c9056eae0fa95a0292ec2e6c05c2035c5add5', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e34031e47e38d8da3e911eeee674d52d739b957', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bf256586efaa7d003b86b3ed58ad025e2fc87b7', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed40a78652f4594eafbdcbe8df7950ba8f909296', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc4181e2537b94b3fbb65c6d568afb2760df8ce1', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94936e62bfd84df58cd77cbea0b89e99052b54a', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '586e933c038b0014a34e13d71c118357adeac00a', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e02d7fd408763b62bb1387c4e9c9f042f7b0f5a', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0deeebcce0363b1044392df89b617332140d6fe', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dc1056514d64c74258020e01a392f53665b94f4', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72f789531db6d8118820a4592c2a38a5ca2f715b', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10e0cac3bdad261eea746210ea5f107fe7626d4a', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ae66c535ffb4427f892bc4dd287705279e85b2f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b71bc393ff0a8ee073af6f3b1f2eb1c69e23b6f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '289767041dbbcff368d07bcb81376d309b40d56a', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa1a7e06864dfa5e5cdfe93a9b4c94893c5a1777', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f1b62caea63974e1d6508b15840157cfac764cf', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e734106160505e63e85c91df3b0e250e7010c3f1', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88830eb036cbbfc34ebf01768e9a0ab298d53b02', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb6af677e22680e5d85da23ae9cdd194b57b6b73', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89aa4997dac9e7fda8df1cc1c9f11d008a64bb66', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23c3db544a39ce6d800a371c91c99cf4d9f73713', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92c72440c077507a69c74bacc7669ccc49878e3b', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41cf4ba6297dcf6d1e751bf56f65bce62826411f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c2e9cedc698c7ec87eec11d299ebf199cb8d32f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dc8887d78325de24755562facf40c3fbf2674d6', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1a76ec3e98f3a1a8ba5325031e861127bdb8fa7', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bafee004813b2aa2a44fbe805d3b4b1fc9ca4157', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c4afc5fbc6cb50de26d77ffc00d8aaba7380e70', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02d187bad54c174c9ba1e7b7602e2cd8595378d2', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5d533cdebb0f5fb7867ed46dd3268c6c551f43c', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec41c1f0ee9c1add50284f4e76baf83140b41fa6', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ccfe59c2cf5d5392f0cb3f9fe2c2ff541836bdb', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '347401b9aa201273af9567a38b1fa83be3cd0343', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39def400a12ffc79450fd656b0cd58e355e667d8', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e6a95b6dfb8df92626166b007e00b5c61812efd', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be091427684ed699d1fdad537d0bb82f55385ec9', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2294582d28c5c96989f57c2591ec3bb0d0c3bd', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eca2c7698a7052965ce0e1a4b61aea553ab5072e', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0ef9280af1b4c38296dd7d5299ef45903003e13', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '547578b5c2dc58488af080876abaef80ea81f50f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '44d8f2cc6be05d0ac045f24186f119ced9360992', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b7454db462e71ae111c305162fc64f97f96f4ca7', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f04ddf8c49bd68e1a9e32f14018270036537bf94', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0a2fe994812dafe1c440c44730a2ca169d3b7ba', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3583f702ad0d34d348412c56e3472553b02f390', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bfe9c7defd82d4808d1a717adaa19078ba9fb50', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '121137f5f11408affcfb9c179fcab3c52e324928', 'committer_username': 'aferriss', 'committer_name': 'Adam Ferriss', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 25, 22, 36, 16, tzinfo=datetime.timezone.utc)}]",J Wong,28441593,justin@wonger.dev,User,,40,,20,8
1405725835,Adds createFilterShader() and custom shader support to the webGL filter() function ,"
Addresses: [#4820](https://github.com/processing/p5.js/issues/4820), [#5571](https://github.com/processing/p5.js/issues/5571)

## Initial changes:
- `filter()` accepts a shader parameter
- Added property for storing current filter shader

## Will also change:
- Apply the current filter shader and render to main canvas / parent renderer
- Add shaders for constants like `GRAYSCALE`, etc
- Clarifying docs to show new functionality

`p5.Framebuffer` is an alternative graphics layer to pursue if `p5.Graphics` doesn't work. Either one is nice if it gives a simple way to call `shader()`, renders to main with something like `texture() plane()` / `copyPixels()`, and gives resizing and other coverage for free. Right now I started a framebuffer approach after running into two difficult p5.Graphics errors.

(This PR is a working draft that's part of the GSoC 2023 project 'Supporting shader-based filters in p5.js"", mentored by @aferriss and @aceslowman)

---

- [x] npm run lint passes
- [ ] [Inline documentation] is included / updated
- [ ] [Unit tests] are included / updated",True,6237,https://api.github.com/repos/processing/p5.js/pulls/6237,https://github.com/processing/p5.js/pull/6237,closed,467,19,7,50,0,34,1,0,[{'name': 'Area:WebGL'}],2023-06-23 21:56:38+00:00,2023-08-02 20:08:32+00:00,3449514.0,"39 days, 22:11:54","[{'comment_id': 1242162698, 'comment_body': ""btw, in case it's useful, `RendererGL` has access to a lazily-created framebuffer that matches its size, currently used for its `loadPixels` implementation: https://github.com/processing/p5.js/blob/a66195a45fdd4d0b7396169b09ad2ce6dfffcdd4/src/webgl/p5.RendererGL.js#L1047-L1052\r\nMight work if you use that for filters too? But there could be other reasons why you want a separate one too."", 'comment_created': datetime.datetime(2023, 6, 26, 13, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 1248105450, 'comment_body': 'I think user shader will need to be created using the pg context here. I wonder if we can just extract the shader strings from an already loaded shader and reload it using `pg.createShader()`', 'comment_created': datetime.datetime(2023, 6, 30, 17, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1248303878, 'comment_body': 'I think we should continue this discussion about whether or not webGL filter should attempt to be used even if the source sketch was not in webGL model', 'comment_created': datetime.datetime(2023, 6, 30, 21, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1248313228, 'comment_body': ""We probably don't wanna create a shader every frame, can we cache it somehow?"", 'comment_created': datetime.datetime(2023, 6, 30, 22, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1248320536, 'comment_body': 'Add in example, alt text, supporting documentation, etc.', 'comment_created': datetime.datetime(2023, 6, 30, 22, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1248320664, 'comment_body': 'Should we provide users with a default vertex shader?', 'comment_created': datetime.datetime(2023, 6, 30, 22, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1257088606, 'comment_body': 'can we check if the filter layer exists first before executing the code here?\r\nAnd also leave a comment about what this code is doing?', 'comment_created': datetime.datetime(2023, 7, 8, 6, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1257092725, 'comment_body': ""Is this the right check? I think we need to know if args[0] is a p5.shader, or a filter constant ( BLUR, INVERT, etc), and if not, we print an error. Aren't the filter constants strings?"", 'comment_created': datetime.datetime(2023, 7, 8, 6, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1257097450, 'comment_body': 'Another thought, what about a case where you have two of the same shader, but want to pass different uniforms to them, or use them in different contexts throughout your sketch, (for ex an invert shader running on both a piece of geometry in the main sketch and an invert filter for the filter function) Would this code support that behavior?', 'comment_created': datetime.datetime(2023, 7, 8, 6, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1257366672, 'comment_body': ""I think so. Here are some related thoughts: #6144 \r\nI'm leaning towards the simplest option, just exposing a default vertex shader as a string constant."", 'comment_created': datetime.datetime(2023, 7, 8, 21, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1257371600, 'comment_body': ""Yes, that's the check. Although there shouldn't need to be a third case handling errors, since the args get validated in the parent `filter()` function: [pixels.js#L472](https://github.com/processing/p5.js/blob/3b0d1328b96a6d46dfc77e3f33e97077934967fa/src/image/pixels.js#L472)\r\n\r\nRight now the string / filter constant case has an error placeholder. It will be replaced in the next PR that implements the shader versions of filter constants. And the current code handles the p5.Shader case."", 'comment_created': datetime.datetime(2023, 7, 8, 21, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1257378084, 'comment_body': ""Agreed, I think that's the primary value of this whole project, speeding up existing `filter()` calls in P2D sketches. So P2D sketches would have to create a hidden webGL context if `filter` is used.\r\n\r\nI think shader filter usage should be automatic while including an opt-out. Something like `filter(CONSTANT, useWebGL=false)`?\r\n\r\nAnd I think that should be included in the next PR that implements the webGL shaders for filter constants.\r\n"", 'comment_created': datetime.datetime(2023, 7, 8, 21, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1257380100, 'comment_body': ""Great point, I didn't think of that use case. \r\n\r\nOn transferring uniforms from the main shader to the secondary shader: A better way of detecting when to copy uniforms might be checking for a child / copy reference, something like `if this.has duplicateShader, then this.duplicateShader.setUniform(...) instead`. And that reference would be set when the duplicateShader is created. I think that should work - not sure why I thought of this other way first.\r\n\r\nThe whole thing feels a little icky though - first having to create another webgl graphics context, and now having to duplicate shaders since the user's `createShader()` call is bound to the main renderer, and there doesn't seem like a decent way to rebind an existing shader to a different webgl context. And I think there's a little overhead to compiling another shader, although it's been a negligible effect in my testing. I think this duplication complexity would be avoided with the framebuffer approach."", 'comment_created': datetime.datetime(2023, 7, 8, 22, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1257383748, 'comment_body': 'Another thought, we could make a function to make a shader that only takes in a fragment shader and automatically uses that default vertex shader? Like createFilterShader()?', 'comment_created': datetime.datetime(2023, 7, 8, 23, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 1257600990, 'comment_body': 'I agree about the opt-out, most people would benefit from the hidden webGL context, but it feels like there would be some negative side-effects eventually if there was no way to avoid that. Am I correct in thinking that there might be situations where a shader heavy project might benefit from strategically shifting some effects to the CPU?', 'comment_created': datetime.datetime(2023, 7, 10, 1, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aceslowman', 'type': 'User'}, {'comment_id': 1257606031, 'comment_body': ""A default vertex shader as a string constant honestly makes sense to me, although I'd like to hear other thoughts. Would the idea be that they would use createShader() like normal, but pass in the new constant?"", 'comment_created': datetime.datetime(2023, 7, 10, 1, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aceslowman', 'type': 'User'}, {'comment_id': 1263954325, 'comment_body': 'I think instead of just turning a red canvas grey it would be better to show off the feature by filtering an image that has been previously drawn. There should be some images available in the library that can be used in examples without having to add a new image file', 'comment_created': datetime.datetime(2023, 7, 14, 17, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1263956928, 'comment_body': 'I think we can check if webgl support is available and then attempt to filter on the GPU for the filter constants. Agree that it would be good to opt out if possible but it does add some slight code complexity here', 'comment_created': datetime.datetime(2023, 7, 14, 17, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1263957809, 'comment_body': 'Is this modernizer line in other examples?', 'comment_created': datetime.datetime(2023, 7, 14, 17, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1263959091, 'comment_body': ""Should we preflip the y uv so that the user doesn't need to deal with this?"", 'comment_created': datetime.datetime(2023, 7, 14, 17, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1263959969, 'comment_body': 'I like it, nice and simple!', 'comment_created': datetime.datetime(2023, 7, 14, 17, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1263962427, 'comment_body': ""If we're supplying a shader created with createFilterShader() can we skip this?"", 'comment_created': datetime.datetime(2023, 7, 14, 17, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1263965338, 'comment_body': ""The overhead to create and compile a single other shader should be minimal, I don't think we need to worry too much since it's ideally only happening once in the lifetime of a sketch"", 'comment_created': datetime.datetime(2023, 7, 14, 17, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1270883411, 'comment_body': 'Just curious, would the user be able to understand that this is being done for them? Having difficulty articulating what I mean, but if certain things are done in the vertex shader I wonder whether or not it might leave people new to shaders with some misconceptions.', 'comment_created': datetime.datetime(2023, 7, 21, 16, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aceslowman', 'type': 'User'}, {'comment_id': 1271158368, 'comment_body': ""Yeah, after trying the pre-flipped `vTexCoords.y` it for a week I came across passing mouseY as a uniform and forgetting to invert the coordinates. So the user will eventually find out that they have to flip y, and the inconsistency might be confusing between when it's done for them (maybe this one time out of convenience) and when it's not (the rest of the time)."", 'comment_created': datetime.datetime(2023, 7, 21, 22, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1271159544, 'comment_body': ""Are we good to use `highp` as the default in examples? I guess it's only certain old mobile hardware that would care about mediump, and it's becoming less of a matter over time."", 'comment_created': datetime.datetime(2023, 7, 21, 23, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1277799717, 'comment_body': 'Yep, no issues there!', 'comment_created': datetime.datetime(2023, 7, 28, 17, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1277807523, 'comment_body': 'Can we change the language to clarify that the default input is a texture called tex0?\r\n\r\nSomething like: ""The fragment shader is provided with a single texture input uniform called `tex0`""', 'comment_created': datetime.datetime(2023, 7, 28, 17, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1277811941, 'comment_body': 'Maybe change the language slightly here to say that this function is intended to be used with the `filter()` function. \r\n\r\n""createFilterShader is intended to be used in tandem with the <a href=""filter function..."">`filter()`</a> for filtering the entire contents of a canvas when using webGL mode.', 'comment_created': datetime.datetime(2023, 7, 28, 17, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1277841631, 'comment_body': 'Could it not be working with pgraphics because this._pInst is referring to the main sketch?', 'comment_created': datetime.datetime(2023, 7, 28, 17, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1278179633, 'comment_body': 'Agreed to skip this tiny optimization for now', 'comment_created': datetime.datetime(2023, 7, 28, 23, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1280918157, 'comment_body': '@wong-justin can you remove this commented code before we merge?', 'comment_created': datetime.datetime(2023, 8, 1, 17, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}]","[{'commit_sha': '16def010727a6f35cde7f720f09d5dd3f4a9066b', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7abb8c6ca7d53d7fde66d023a1ffd2f9978650f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dbe59559c3689611a3acdba657d3eacfb3aac4e', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a09691407478c08eaf7d9e05a15082f03d9acff7', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87f347aa76b844a3a0f2d7d2d5e66c59b46438eb', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0126bfbbf2b518c23168b7377594d6450ce40db', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb1979bbff5650910ab997246519481a57966762', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '644e61a16fd1d10016fc18541a8f053a33095347', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '628fc18746135ffef135d3643fd9361a44091fb9', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '359d16b148128da7b9ad8a82278398d1ff1f02b7', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e857d5b65e0bcad510b1fee778cc65828b1b51e2', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a762869ac5c49e53b93c4012b0784c96fa0ff668', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eb64a019dba2ca83b42763e5cd6aa9c96c7319a', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c5d0ffbe38b62c928350ed958547c625b4e2a1c', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10d85ff11f729e42579349fb48b231e011e46263', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3244379205f1001ec8e1924c639b06ec86dab74', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f39f691277f5ee90a74799fcf3ca9e24f0a236b', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc50e52793bf15cf1bcc591dcecb75ba607eb73f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3a41e7f97e6a1066b7000f0a5978e17367ecb47', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7888ad4020b2f6ff5220bb1c9de11ce871627fa5', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b52a4677089a9983ab806ab74650396aa38ed113', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02113bb9770c031ef001f794383cb9a4528e36f2', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be7c01ca6e4bb32fa054af765f8ba1961bcff4e0', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa1f04826a52c404684dea4a98bc89539eb6beab', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d50053a622e8a7cc7aa0f874d471ae1ff758df4', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e52976c9896465f16f836e517755867e44c3836', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590d025f2d2e326062b7e4c1282d0e8314b37580', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2e69ae3efae7d27b554d853bf72b5888093c894', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e4c04e0448d17656d9a17eaed59bf43374b3208', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f23d07225b74d987020025b28fd16a00eda862b1', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '034ebb58c32871861a9e447404c2da7daf383263', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bfa2f2c2fafaa5d5ef1d5af7c0700a6ae8bc58e', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6fbdc273ef2d7559d7675176b66140232eec274', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86cb79d537ecda62348845b2139878e26ca87328', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf282f3ace0190184eda43cbadf4ce34d572c1f3', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25424c752adce98c3142a8acb4e5214d7fdec14b', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1dd620ee064413ec4aba1859b7984f8b9466cac', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa178bac49dafc57752489c0c8a4068379ae7414', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68ad8aec3a4d07bc9e2b7980f8c6dfcb3dfbb417', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c039991aa7d155bf578561110a76f0f8b428b6bb', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c476759224c76c5b365a7504f11df3f201d9f090', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b1e56e7a5d209cd9ea557bcbdc9e0299a69388d', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec76701ccfee243c5e62ac225f278979feff2e36', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82200710c1ed079eac80b2a827987955eb11ef88', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44ad94f524b294ac18fbe6422266fe1792df54c9', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5321461af065d2fb91f85dfc4dcf7ab02113c2d', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '479aca3ca77c02bd7fa2a90e595206a9e15839d5', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42503996503b953e02264ccd8dfbdf37a3b1a5a5', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5abd47d7502b433b662886a453e73d00a43532e0', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51aa8740443d9b834cd57d548f6cac1b68f2c489', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}]",J Wong,28441593,justin@wonger.dev,User,,40,,20,8
1369478740,WebGL mode documentation improvements,"(This PR is a working draft that's part of the GSoC 2023 project 'Supporting shader-based filters in p5.js"", mentored by @aferriss and @aceslowman)

Initial changes:
- add basic summary of differences between P2D and WEBGL mode
- add links to WEBGL mode tutorial content

 Screenshots:
- Before: 
![2023-05-29-14-45-01](https://github.com/processing/p5.js/assets/28441593/d54f9fed-b16d-4b38-8bbd-84f50e143fd4)
- After: 
![2023-05-29-14-45-09](https://github.com/processing/p5.js/assets/28441593/f6d484bb-3473-4049-a445-2d14a5928f3c)


#### PR Checklist
<!--
  To check any option, replace the ""[ ]"" with a ""[x]"". Be sure to check out how it looks in the Preview tab! Feel free to remove any portion of the template that is not relevant for your issue.
-->

- [x] `npm run lint` passes
- [x] [Inline documentation] is included / updated

[Inline documentation]: https://github.com/processing/p5.js/blob/main/contributor_docs/inline_documentation.md

",True,6167,https://api.github.com/repos/processing/p5.js/pulls/6167,https://github.com/processing/p5.js/pull/6167,closed,19,2,2,19,5,14,0,0,[],2023-05-29 19:08:38+00:00,2023-06-20 16:52:12+00:00,1892614.0,"21 days, 21:43:34","[{'comment_id': 1209518586, 'comment_body': 'I was thinking about adding links to each of the bold features, like `<a href=""https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5#text""><strong>Text</strong></a> is drawn differently`. Not sure if function docs should be linked, or p5js tutorial sections, or other content, or if they should even have links in the first place.', 'comment_created': datetime.datetime(2023, 5, 29, 19, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1210187562, 'comment_body': ""Linking sounds good to me, for what it's worth!"", 'comment_created': datetime.datetime(2023, 5, 30, 12, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 1210201050, 'comment_body': ""Also, just a heads up, for now bullet lists in our docs render just as newlines in the reference. I don't think we have an issue to track this yet so I made an issue for it here: https://github.com/processing/p5.js/issues/6170"", 'comment_created': datetime.datetime(2023, 5, 30, 12, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 1210503061, 'comment_body': 'I agree that it is helpful to link out to more info for each of those topics and I appreciate this as a brief list of differences. I think that replacing the bold text with links though might not be very clear, I wonder if things can be reworded in a way that lets you describe where the information can be found. Something like:\r\n\r\n`The coordinate system is centered and uses an optional z-dimension, which you can read more about in the <a href="""">""Getting Started With WebGL""</a> tutorial in the Learn page.`\r\n\r\nAdditionally, it would help to include a little more text for ""Text is drawn differently"" and ""You can use shaders"". For text, the reference page for [text()](https://p5js.org/reference/#/p5/text) describes some of the issues, maybe you can rephrase it into something like:\r\n\r\n`Text in WebGL requires opentype/truetype fonts loaded in your [preload()](https://p5js.org/reference/#/p5/preload) function using the [loadFont()](https://p5js.org/reference/#/p5/loadFont) method. More information about using text in this mode can be found in the [wiki](https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5#text).`\r\n\r\nAnd it might be helpful to briefly define shader, as some users might not be familiar:\r\n\r\n`WebGL mode makes it possible to use shaders, which are programs that can be used for creating a variety of effects and graphics that take advantage of hardware acceleration.`', 'comment_created': datetime.datetime(2023, 5, 30, 16, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aceslowman', 'type': 'User'}, {'comment_id': 1210584944, 'comment_body': ""A small nit but can we phrase this a little differently to reflect WEBGL's usage rather than it's notoriety. \r\n\r\n`One of the two render modes in p5.js, used for computationally intensive tasks like 3d rendering and drawing shaders.`"", 'comment_created': datetime.datetime(2023, 5, 30, 17, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1210590722, 'comment_body': 'Can we simplify the language here:\r\n`WEBGL differs from the default P2D renderer in the following ways:`', 'comment_created': datetime.datetime(2023, 5, 30, 17, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1210597151, 'comment_body': 'Also echoing what Austin said. I think for this list it would be good to put the topic as the first word, and then follow it with a sentence or two about how it is different. For example:\r\n\r\n**Coordinate System** - When drawing in WEBGL mode, the origin point (0,0,0) is located at the center of the screen. More information about WEBGL [coordinates and transformations can be found on the learn page](https://p5js.org/learn/getting-started-in-webgl-coords-and-transform.html)\r\n\r\n**Next topic** - one or two sentences describing the differences with a link to more info if possible.', 'comment_created': datetime.datetime(2023, 5, 30, 17, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1210608400, 'comment_body': 'I think we can also add a couple more elements to this list.\r\n**3D Shapes** - WEBGL mode can be used to draw 3D shapes like cubes, spheres, cones, and more. (with links to each shape). \r\n\r\n**Graphics Acceleration** - WEBGL mode uses the graphics card and may help you boost performance of your sketch or draw an increased number of shapes to the screen at once.\r\n\r\nAny other major differences worth mentioning here?', 'comment_created': datetime.datetime(2023, 5, 30, 17, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1213612612, 'comment_body': ""ok once this is merged https://github.com/processing/p5.js/pull/6177 you'll get bullets next to your list items!"", 'comment_created': datetime.datetime(2023, 6, 1, 19, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 1218434443, 'comment_body': ""I think we can leave this developer documentation in place, despite the fact that it doesn't render into the actual docs. Adding a note that explains that these docs are not rendered would be good though!\r\n\r\n`Note: Documentation is not generated on the p5.js website for functions on the p5.RendererGL prototype.`"", 'comment_created': datetime.datetime(2023, 6, 5, 18, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1218646194, 'comment_body': ""The other code examples only used the x and y parameters for [line()](https://p5js.org/reference/#/p5/line), so I added one using the z parameters for WEBGL mode. \r\n\r\nI figure it's a good goal to show all the possible parameters in the code examples, which would mean having a 3D example for the 2D primitives.\r\n\r\nHaving these scaffolded examples might naturally help users transition to WEBGL. Eg. they might know the WEBGL coordinate system is different just from their time browsing 2D primitives examples."", 'comment_created': datetime.datetime(2023, 6, 5, 22, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1218653622, 'comment_body': ""Agree, it's nice to see the webGL versions with the updated signatures! If we don't think it's too much code I think it could be nice to color these lines in rgb (xyz) gizmo fashion like so https://editor.p5js.org/aferriss/sketches/qCsZ08lJ8"", 'comment_created': datetime.datetime(2023, 6, 5, 22, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}, {'comment_id': 1218655300, 'comment_body': ""The round 2D primitives have a `detail` parameter, so technically for completeness they could use an example like this to show it in action.\r\n\r\nBut I think it would distract from useful parameters and examples, and `detail` doesn't seem like a popular feature for users, and `detail` is already documented well in `curveDetail()` and `bezierDetail()` and the 3D primitives.\r\n\r\nMaybe this should make it into the list of WEBGL vs P2D differences? Something like:\r\n- **Vertex Count** - When drawing curved shapes in `WEBGL` mode, you can specify how many vertices are drawn with a `detail` parameter.\r\n"", 'comment_created': datetime.datetime(2023, 6, 5, 22, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wong-justin', 'type': 'User'}, {'comment_id': 1218658065, 'comment_body': ""Instead of `Vertex Count` I think we can use p5's existing language and call it `Shape Detail`. \r\n\r\nAlso I don't think additional examples detracts and to be honest I didn't realize the round 2d shapes even had that parameter. I think it would be a good addition, and as you note, the 3d shapes include this, so why not 2d as well?\r\n\r\nhttps://p5js.org/reference/#/p5/sphere"", 'comment_created': datetime.datetime(2023, 6, 5, 22, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aferriss', 'type': 'User'}]","[{'commit_sha': '1d6068dbd24a5d337228376ffc236e1ea6a14769', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d96c21777b93ceaea9eda8de8a40160e75b0a18', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17936c8457275ac13cca0ad10f9d61c4071a72c8', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2ef21d6a30bdda413b36c4a4e1257f436499025', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29a700dcf39a8bc3dff0e6588621ad6e03df448e', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84985f3d7a54f08d2426894bc7da629d6e1cc1a3', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1a00c66fe5c2fc32995450064ab3be994c5844b', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '021c56573996d29d73147785a175540a263db613', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '004ac1daef40a6f34a0c55e45c81d9f36365aeda', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4b3a9c2da214b787a66eafa689f3b645f7f7d36', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eed99e64df281b8fef46ce1f4e0fa6e5ea18432d', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dbe1c258b1e75dfbe2896b2f002d75026e5dabf', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '346e0a4afe43ea7057ca7545dd24b3df8738c06f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30d6fd4705f7f3592e8fedd59369422fda284212', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fafba9fee11e1f8b5009bc463c0a857adf37b6f', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '699c92258470dc0de1cdfb2672e298eaac204ed2', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04f87639da45c7223296f7618576aafb48e59330', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '994d18faf6eb18a3db2f041753380c19a1de491b', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f3a967b4f8bc5aa318d48103d8de2f5974d80e', 'committer_username': 'wong-justin', 'committer_name': 'J Wong', 'committer_email': 'justin@wonger.dev', 'commit_date': datetime.datetime(2017, 5, 5, 12, 19, 57, tzinfo=datetime.timezone.utc)}]",J Wong,28441593,justin@wonger.dev,User,,40,,20,8

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
8424040,p5.js,processing/p5.js,JavaScript,3253,21302,498,750,13032,319,7,45,"[{'id': 1519739891, 'number': 6418, 'closed': datetime.datetime(2023, 9, 20, 5, 23, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 18, 15, 29, 23, tzinfo=datetime.timezone.utc), 'time_taken': 136456.0, 'time_delta': '1 day, 13:54:16', 'additions': 47, 'deletions': 0, 'state': 'closed'}, {'id': 1512846935, 'number': 6405, 'closed': datetime.datetime(2023, 10, 7, 5, 35, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 12, 21, 40, 7, tzinfo=datetime.timezone.utc), 'time_taken': 2102098.0, 'time_delta': '24 days, 7:54:58', 'additions': 33, 'deletions': 5, 'state': 'closed'}, {'id': 1461977830, 'number': 6324, 'closed': datetime.datetime(2023, 8, 31, 21, 10, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 3, 19, 52, 27, tzinfo=datetime.timezone.utc), 'time_taken': 2423908.0, 'time_delta': '28 days, 1:18:28', 'additions': 705, 'deletions': 137, 'state': 'closed'}, {'id': 1405725835, 'number': 6237, 'closed': datetime.datetime(2023, 8, 2, 20, 8, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 23, 21, 56, 38, tzinfo=datetime.timezone.utc), 'time_taken': 3449514.0, 'time_delta': '39 days, 22:11:54', 'additions': 467, 'deletions': 19, 'state': 'closed'}, {'id': 1369478740, 'number': 6167, 'closed': datetime.datetime(2023, 6, 20, 16, 52, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 29, 19, 8, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1892614.0, 'time_delta': '21 days, 21:43:34', 'additions': 19, 'deletions': 2, 'state': 'closed'}]"
