pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
414044919,Milestone 1.1: Add a check restricting defining type as any,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~1. This PR fixes or fixes part of #[fill_in_number_here].~
2. This PR does the following: Add a check restricting defining type as any

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9257,https://api.github.com/repos/oppia/oppia/pulls/9257,https://github.com/oppia/oppia/pull/9257,closed,228,1,2,9,4,48,0,2,[],2020-05-06 11:45:08+00:00,2020-05-07 11:18:34+00:00,84806.0,23:33:26,"[{'comment_id': 420731231, 'comment_body': ""I made a separate file for the exceptions because they are large in number and writing these in the code itself, didn't seem right."", 'comment_created': datetime.datetime(2020, 5, 6, 11, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420732037, 'comment_body': 'Declaring this variable is quite useless, just use `sys.stdout` in the `linter_utils.redirect_stdout` directly.', 'comment_created': datetime.datetime(2020, 5, 6, 11, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420732621, 'comment_body': 'Declaring this variable is quite useless, just use `self.all_filepaths` in the `for file_path in files_to_check` directly.\r\n', 'comment_created': datetime.datetime(2020, 5, 6, 11, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420734063, 'comment_body': 'Could you sort these alphabetically?', 'comment_created': datetime.datetime(2020, 5, 6, 11, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420734943, 'comment_body': 'Can you use `json.load` to open the file directly?', 'comment_created': datetime.datetime(2020, 5, 6, 11, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420735665, 'comment_body': 'Also maybe `FILES_EXCLUDED_FROM_ANY_TYPE_CHECK`.', 'comment_created': datetime.datetime(2020, 5, 6, 12, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420736016, 'comment_body': 'I think that `FILES_EXCLUDED_FROM_ANY_TYPE_CHECK_PATH` would be better.', 'comment_created': datetime.datetime(2020, 5, 6, 12, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420736871, 'comment_body': 'Do you need `failed`? Can you just check if `summary_messages` is not empty?', 'comment_created': datetime.datetime(2020, 5, 6, 12, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420737527, 'comment_body': 'Could you explain these two a bit?', 'comment_created': datetime.datetime(2020, 5, 6, 12, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420737925, 'comment_body': 'What does this exactly do? Maybe add some explanation comments.', 'comment_created': datetime.datetime(2020, 5, 6, 12, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420738223, 'comment_body': 'This can be moved to the previous line?', 'comment_created': datetime.datetime(2020, 5, 6, 12, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420776893, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 6, 13, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420776942, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 6, 13, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420776997, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 6, 13, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420777275, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 6, 13, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420777344, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 6, 13, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420777502, 'comment_body': 'Added comments. Does that make it clear?', 'comment_created': datetime.datetime(2020, 5, 6, 13, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420778074, 'comment_body': '`starts_with_type` is a variable that tells if the previous line ending with a `:`. So we know this line starts with a type.', 'comment_created': datetime.datetime(2020, 5, 6, 13, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420778155, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 6, 13, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420802136, 'comment_body': ""Does the file get closed correctly using this? Shouldn't we still use `with python_utils.open_file(EXCLUDE_ANY_TYPE_FILES_PATH, 'r') as f` and then pass `f` into `json.load`?"", 'comment_created': datetime.datetime(2020, 5, 6, 13, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420805078, 'comment_body': ""```suggestion\r\n        # First pattern is used to match cases like these: ': any'.\r\n        # Second pattern is used when the last character of \r\n        # the previous line was ':' so that we know that this line\r\n        # begins with a type.\r\n```"", 'comment_created': datetime.datetime(2020, 5, 6, 13, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420805590, 'comment_body': '@nishantwrp What about this? Please reply to all comments before you request another review.', 'comment_created': datetime.datetime(2020, 5, 6, 13, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420806499, 'comment_body': 'Yep, but these cases are both quite different one is used on every line the other just on some lines. So I would separate them into two variables.', 'comment_created': datetime.datetime(2020, 5, 6, 13, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420807395, 'comment_body': 'Rewrite this if into two cases maybe, so it is more clear to read.', 'comment_created': datetime.datetime(2020, 5, 6, 13, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420812547, 'comment_body': ""Oh, sorry @vojtechjelinek. Missed this. Actually are you suggesting that deciding that the check has passed if summary errors is empty?\r\n\r\nIf that's the case, I can't think we can do that because there is a success message in summary errors if it is has passed."", 'comment_created': datetime.datetime(2020, 5, 6, 13, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420816057, 'comment_body': 'But success message is added as the last item, so it should be okay to check on line 269 if the summary_messages are empty and then add the message.', 'comment_created': datetime.datetime(2020, 5, 6, 14, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420828209, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 6, 14, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420828319, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 6, 14, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420828501, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 6, 14, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420829449, 'comment_body': 'I think, success_messages is always gonna be empty on line 269', 'comment_created': datetime.datetime(2020, 5, 6, 14, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420829734, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 6, 14, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420850257, 'comment_body': '```suggestion\r\n        """"""Checks if the type of any variable is declared as \'any\'\r\n        in TypeScript files.\r\n```', 'comment_created': datetime.datetime(2020, 5, 6, 14, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420850916, 'comment_body': 'Why is this added?', 'comment_created': datetime.datetime(2020, 5, 6, 14, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420851168, 'comment_body': ""```suggestion\r\n        # This pattern is used to match cases like ': any'.\r\n```"", 'comment_created': datetime.datetime(2020, 5, 6, 14, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420851596, 'comment_body': ""```suggestion\r\n        # This pattern is used to match cases where the previous line ended\r\n        # with a ':', so we know this line begins with a type.\r\n```"", 'comment_created': datetime.datetime(2020, 5, 6, 14, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420851920, 'comment_body': 'Oh, I see sorry.', 'comment_created': datetime.datetime(2020, 5, 6, 14, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420852719, 'comment_body': 'Remove this from here.', 'comment_created': datetime.datetime(2020, 5, 6, 14, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420853334, 'comment_body': '```suggestion\r\n        return [summary_message]\r\n```', 'comment_created': datetime.datetime(2020, 5, 6, 14, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420853444, 'comment_body': 'Remove this.', 'comment_created': datetime.datetime(2020, 5, 6, 14, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 420863605, 'comment_body': '`:` is a invalid punctuation according to lint checks.', 'comment_created': datetime.datetime(2020, 5, 6, 15, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420867522, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 6, 15, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420867598, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 6, 15, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 420867671, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 6, 15, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 421065355, 'comment_body': '@Hudda Could you look into this, please?', 'comment_created': datetime.datetime(2020, 5, 6, 20, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 421232592, 'comment_body': ""@vojtechjelinek @nishantwrp I ran this code locally and I'm not seeing any error even after removing `# pylint: disable=invalid-punctuation-used`. @nishantwrp Could you please check one more time."", 'comment_created': datetime.datetime(2020, 5, 7, 4, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 421340965, 'comment_body': ""@Hudda weird. It's working now. Removed that line."", 'comment_created': datetime.datetime(2020, 5, 7, 8, 46, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 421427564, 'comment_body': ""@nishantwrp This was because you didn't have '.' at the end of your comments."", 'comment_created': datetime.datetime(2020, 5, 7, 11, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 421430573, 'comment_body': 'Ah, okay.', 'comment_created': datetime.datetime(2020, 5, 7, 11, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': '50aade60b22ece944cc08c25836c6b1768758acd', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b085f1fccfcb2508eb93ec537cd4bd4132abbe6a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bce49fae42802448e5605edd83cee90fac6db37', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b15513e71a02f06fa420ae6e169978c3dc05e921', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2918b16b93685ff478c9117818f6f696f3c32bbe', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c83397f4512e1a7334efdb8219773e1d03bfb756', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f39b426a72358f68b6b5691ecc28860ce5550501', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76dd79f8510f8984fd61f866ba62a522828c1a01', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ba88de7989c2f0b130648803bf942f2641ea837', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
415205290,"Milestone 1.2: Type definitions for midi, skulpt, math expressions","## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~1. This PR fixes or fixes part of #[fill_in_number_here].~ #6351 
2. This PR does the following: Type definitions for midi, skulpt, math expressions

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9266,https://api.github.com/repos/oppia/oppia/pulls/9266,https://github.com/oppia/oppia/pull/9266,closed,406,3,4,3,3,0,0,0,[],2020-05-08 12:15:26+00:00,2020-05-10 01:02:04+00:00,132398.0,"1 day, 12:46:38",[],"[{'commit_sha': '000ebd0c6dd3b7b68fa3ab2509da6e3b100ca07a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0c3406ebc2fb542ad6f324f7f0283307d783bbf', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9158d93569d78233bb3e5b565b888ea818e2a89d', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
415560164,"Milestone 1.3.1: Type definitions for guppy, removed blobbuilder","## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~1. This PR fixes or fixes part of #[fill_in_number_here].~ #6351 
2. This PR does the following: Type definitions for blobbuilder, guppy 

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9278,https://api.github.com/repos/oppia/oppia/pulls/9278,https://github.com/oppia/oppia/pull/9278,closed,99,109,6,9,9,26,0,2,[],2020-05-09 11:18:43+00:00,2020-05-11 15:57:04+00:00,189501.0,"2 days, 4:38:21","[{'comment_id': 422494939, 'comment_body': 'Hmmm, I have just looked where we use this and I think we can remove `BlobBuilder` from our codebase entirely `new Blob` is supported among all the newer browsers (https://caniuse.com/#feat=blobbuilder), can you try to remove `BlobBuilder` from our codebase?', 'comment_created': datetime.datetime(2020, 5, 9, 13, 18, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 422494985, 'comment_body': 'Could you explain this a bit more, maybe add links to some explanation online?', 'comment_created': datetime.datetime(2020, 5, 9, 13, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 422500263, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 5, 9, 14, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422500557, 'comment_body': 'Ok. Let there be a class `SampleClass`. Now we can create an object belonging to this class like this.\r\n```typescript\r\nconst sampleObject = new SampleClass();\r\n```\r\nbut there are no properties of a constructor class like.\r\n```typescript\r\nconst a = SampleClass.property;\r\n```\r\nGuppy has some properties like these like `init`. So this had to be done.', 'comment_created': datetime.datetime(2020, 5, 9, 14, 12, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422501040, 'comment_body': 'So let us rewrite it to something like: `Type system does not support constructor properties (Guppy.init) thus we need ts-ignore it.`', 'comment_created': datetime.datetime(2020, 5, 9, 14, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 422501577, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 9, 14, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422531143, 'comment_body': ""Hi @nishantwrp, just a general question, can you explain why init can't be added like other properties in `guppy-defs.d.ts` for the guppy class?"", 'comment_created': datetime.datetime(2020, 5, 9, 18, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 422534925, 'comment_body': 'Hi Can you refer this comment. https://github.com/oppia/oppia/pull/9278#discussion_r422500557', 'comment_created': datetime.datetime(2020, 5, 9, 19, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422538182, 'comment_body': ""Hi @nishantwrp, I did take a look at that comment. That didn't answer my question. You need not repeat yourself, my specific question was, why can't it be added in the definitions file like other properties."", 'comment_created': datetime.datetime(2020, 5, 9, 19, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 422539681, 'comment_body': ""Because `init` is not a property of a object belonging to class `Guppy`. It is a property of class constructor. As in\r\n```typescript\r\nvar a = new Guppy();\r\n// We don't want\r\na.init; // Declaring type for this would be possible\r\n// but we want\r\nGuppy.init \r\n```\r\n\r\n I don't think there is anything like that in typescript.\r\n"", 'comment_created': datetime.datetime(2020, 5, 9, 20, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422546937, 'comment_body': 'Why are we deleting these? [This helps us to have this functionality in cross-browser/devices.]', 'comment_created': datetime.datetime(2020, 5, 9, 21, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422547004, 'comment_body': 'You can use `git blame` to check when and why this was introduced*', 'comment_created': datetime.datetime(2020, 5, 9, 21, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422547158, 'comment_body': 'According to @vojtechjelinek all the browsers have this `new Blob()` now.', 'comment_created': datetime.datetime(2020, 5, 9, 21, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422551382, 'comment_body': 'all the new updated/browsers, right? (Have you check why this was added in the first place? Also, might worth checking server log errors for the errors dict reported through this function)', 'comment_created': datetime.datetime(2020, 5, 9, 21, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422553478, 'comment_body': 'https://github.com/oppia/oppia/pull/9278#discussion_r422494939\n\n@kevintab95 Can you please check the server logs for the message that we are deleting?', 'comment_created': datetime.datetime(2020, 5, 9, 22, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 422615724, 'comment_body': 'Okay I looked into this a bit more and you should be able to add definitions on class methods [TypeScript handbook namespace](https://www.typescriptlang.org/docs/handbook/declaration-files/deep-dive.html#adding-using-a-namespace)', 'comment_created': datetime.datetime(2020, 5, 10, 9, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 422617815, 'comment_body': ""Per my [comment](https://github.com/oppia/oppia/pull/8522#issuecomment-606160204) on a different PR, try-catch was added to investigate #6162 and that hasn't occured in a while. It seems to be fixed by #7784 where we added a second argument to the Blob constructor. So as long as we use Blob with the second argument, it should be fine. "", 'comment_created': datetime.datetime(2020, 5, 10, 9, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 422644153, 'comment_body': 'Thanks a lot! Done!', 'comment_created': datetime.datetime(2020, 5, 10, 13, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422666977, 'comment_body': 'Thanks for the info, @kevintab95!', 'comment_created': datetime.datetime(2020, 5, 10, 16, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422667343, 'comment_body': 'Wanted to check whether Guppy can also be an auto-upgrade?', 'comment_created': datetime.datetime(2020, 5, 10, 16, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422667523, 'comment_body': 'Make sure we have another test for the success process. ', 'comment_created': datetime.datetime(2020, 5, 10, 16, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422668480, 'comment_body': ""I don't really know what is the proccess of upgrading the libs in manifest.json. Probably @vojtechjelinek can help here.\r\n\r\nAlso Guppy's repo has been inactive for about 2 years. And we are using the latest version from that repo I guess."", 'comment_created': datetime.datetime(2020, 5, 10, 16, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422676677, 'comment_body': ""No, it can't since even a minor version needs to be upgraded manually."", 'comment_created': datetime.datetime(2020, 5, 10, 17, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 422680604, 'comment_body': 'I only removed the part where `BlobBuilder` was involved.', 'comment_created': datetime.datetime(2020, 5, 10, 18, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 423059383, 'comment_body': ""Can you please check whether we still have a test that checks the successful creation of Blob out of fetched audio/images data? Maybe share the link to that test block*\r\n\r\n[This comment wasn't published earlier]"", 'comment_created': datetime.datetime(2020, 5, 11, 13, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 423069523, 'comment_body': 'Here https://github.com/oppia/oppia/blob/2f8195b50e3568e2b425345da6e24f574332221e/core/templates/services/assets-backend-api.service.spec.ts#L132', 'comment_created': datetime.datetime(2020, 5, 11, 14, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': 'c98b113b4a03a0793b3d9226ceb9f6dd29a8722e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89e1634bb30bd461e6decdb580f5c942cd6f5ad9', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '965d9bc1afb2c114a366a0328b21de33b3cc3405', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c98038cd6c50653e1ad46f45c7e00837049d5ec', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d8ba9648f06d44d9e731a369bbed40d4be8efcc', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de5d02a2f1fd474f9a12429633c77dcf375a73d5', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '071baf7b822f46997122b681758324eeb8115e93', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cb20ea3414d1aa1a588d4d472a912d82bd07a95', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f8195b50e3568e2b425345da6e24f574332221e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
415569396,Milestone 1.3.2: Import WaveSurfer using yarn and add typedefs for it,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~1. This PR fixes or fixes part of #[fill_in_number_here].~ #6351 
2. This PR does the following: Import WaveSurfer using yarn

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9279,https://api.github.com/repos/oppia/oppia/pulls/9279,https://github.com/oppia/oppia/pull/9279,closed,101,200,7,8,5,25,0,2,[],2020-05-09 12:33:45+00:00,2020-05-11 12:14:37+00:00,171652.0,"1 day, 23:40:52","[{'comment_id': 422547995, 'comment_body': 'Do wee need parenthesis around `WaveSurfer`?\r\nAlso, can you please share the image of the audio waves in the translation tab after this change?  ', 'comment_created': datetime.datetime(2020, 5, 9, 21, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422548174, 'comment_body': 'Can you please test this feature thoroughly (as you update the version from 2.2.1 to 3.3.3)?\r\n', 'comment_created': datetime.datetime(2020, 5, 9, 21, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422548302, 'comment_body': 'Wanted to check whether we need to update this whenever we update the wave surfer version?', 'comment_created': datetime.datetime(2020, 5, 9, 21, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422548554, 'comment_body': 'Also, why are we using the master branch file here? Should we use this file from v3.3.3?', 'comment_created': datetime.datetime(2020, 5, 9, 21, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422550883, 'comment_body': ""No we don't need parenthesis.\r\n\r\nHere is an image\r\n![Screenshot_20200510_032047](https://user-images.githubusercontent.com/36989112/81485814-c3114180-926d-11ea-9e45-fcecaec81c31.png)\r\n"", 'comment_created': datetime.datetime(2020, 5, 9, 21, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422550933, 'comment_body': 'Yup, will add a lint check later on for this too.', 'comment_created': datetime.datetime(2020, 5, 9, 21, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422550952, 'comment_body': 'Oh, yeah correct. Done', 'comment_created': datetime.datetime(2020, 5, 9, 21, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422551256, 'comment_body': 'The translation was being played correctly. What other things do I need to test?', 'comment_created': datetime.datetime(2020, 5, 9, 21, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422551633, 'comment_body': '\r\nDo we have any (github) issue for that? Also, how would we catch this till we have this check?', 'comment_created': datetime.datetime(2020, 5, 9, 22, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422551828, 'comment_body': 'Slider bar, rendering, check the console, wave for small audio wave for big audio (intime or size). etc.', 'comment_created': datetime.datetime(2020, 5, 9, 22, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422551902, 'comment_body': 'Ah, actually the lint check will not check that the code link is correct. It will be there so that the dev is aware that the type defs were for a previous version and they may have changed now.', 'comment_created': datetime.datetime(2020, 5, 9, 22, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422551983, 'comment_body': 'Have you tested the type.defs with the file in v3.3.3 (as it can be different from master branch)?', 'comment_created': datetime.datetime(2020, 5, 9, 22, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422552051, 'comment_body': 'Actually I’m not sure about the expected behaviour. Can you do that please?', 'comment_created': datetime.datetime(2020, 5, 9, 22, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422552107, 'comment_body': 'Yup! Did that just now.', 'comment_created': datetime.datetime(2020, 5, 9, 22, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422552334, 'comment_body': 'Still, my question persists i.e, until we don\'t have that ""warning through lint checks"" how would we catch this during any update?', 'comment_created': datetime.datetime(2020, 5, 9, 22, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422554995, 'comment_body': ""I guess we can do that manually, as I don't think type defs would be updated so frequently."", 'comment_created': datetime.datetime(2020, 5, 9, 22, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422556197, 'comment_body': 'Btw, can you set it to `""3.3.3""` without `^` so that it doesn\'t get updated automatically and the coherence with the type definitions is kept.', 'comment_created': datetime.datetime(2020, 5, 9, 22, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 422557365, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 9, 23, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422616541, 'comment_body': ""@DubeySandeep Since I'm mostly responsible for library upgrades I can make sure that the type definitions are correct until we have the lint check."", 'comment_created': datetime.datetime(2020, 5, 10, 9, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 422665874, 'comment_body': ""Can you please create an issue to add '^` here once we have the warning functionality? [This will help us to track this task]"", 'comment_created': datetime.datetime(2020, 5, 10, 16, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422665948, 'comment_body': 'Release 3.3.3*', 'comment_created': datetime.datetime(2020, 5, 10, 16, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422666103, 'comment_body': 'Should we use this URL: https://raw.githubusercontent.com/katspaugh/wavesurfer.js/3.3.3/src/wavesurfer.js', 'comment_created': datetime.datetime(2020, 5, 10, 16, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 422667912, 'comment_body': 'Done #9287 ', 'comment_created': datetime.datetime(2020, 5, 10, 16, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422668058, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 5, 10, 16, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 422668074, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 5, 10, 16, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': '876db2577eb18aac11384699eeb18e3279cf2c73', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33c468285546ec4444418daffc9902e0873cd363', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81579e20b0ae7991df67f72da11124db766edcdb', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc178e30230243a52d8eea6b73009a62242db896', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08458e8bbd4c5ba9830a03022ad89c7fdeafc1c9', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8138f3493a3f7c46b02a83bf516a4e333238fcd3', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd624808e0408d062af9b4611cca61626b888c962', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fee71819c9917de067aa9e6c41a9b7dc8a7ab143', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
416300915,Milestone 1.4.1: Remove some any types from typings directory,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~1. This PR fixes or fixes part of #[fill_in_number_here].~
2. This PR does the following: Remove some any types from typings directory

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9293,https://api.github.com/repos/oppia/oppia/pulls/9293,https://github.com/oppia/oppia/pull/9293,closed,57,36,9,9,9,22,0,0,[],2020-05-11 19:33:15+00:00,2020-05-15 20:09:29+00:00,347774.0,"4 days, 0:36:14","[{'comment_id': 423272567, 'comment_body': 'Use `Boolean(…)` isntead of `!!`.', 'comment_created': datetime.datetime(2020, 5, 11, 19, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 423272817, 'comment_body': 'Why is this ignored? Add comment explaining this.', 'comment_created': datetime.datetime(2020, 5, 11, 19, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 423272822, 'comment_body': 'Hi @tjiang11,\r\nPlease review the changes. Was `opera` really needed here?', 'comment_created': datetime.datetime(2020, 5, 11, 19, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 423273515, 'comment_body': 'The previous behavior is a but different am I right?', 'comment_created': datetime.datetime(2020, 5, 11, 19, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 423273785, 'comment_body': ""This won't be replaced?"", 'comment_created': datetime.datetime(2020, 5, 11, 19, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 423274100, 'comment_body': 'Did this because technically the type error thrown here was correct. This is not the type of `MathJax` but `MathJaxConfig`. To not do this we would have to declare the custom mathjax config the other way suggested [here](https://docs.mathjax.org/en/v2.7-latest/configuration.html).', 'comment_created': datetime.datetime(2020, 5, 11, 19, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 423274123, 'comment_body': 'This is a manual change?', 'comment_created': datetime.datetime(2020, 5, 11, 19, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 423275019, 'comment_body': 'Will replace it in my next PR.', 'comment_created': datetime.datetime(2020, 5, 11, 19, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 423275431, 'comment_body': 'Nope. Forgot to run`yarn install` when changed `^3.3.3` to `3.3.3`.', 'comment_created': datetime.datetime(2020, 5, 11, 19, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 423277494, 'comment_body': 'Added a comment in this thread itself. Can you take a look at that.', 'comment_created': datetime.datetime(2020, 5, 11, 19, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 423278430, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 11, 19, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 423279543, 'comment_body': 'Saw but still, this should be explained in the code.', 'comment_created': datetime.datetime(2020, 5, 11, 19, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 423282750, 'comment_body': 'Maybe. But the Merge View was working fine!', 'comment_created': datetime.datetime(2020, 5, 11, 19, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 423284191, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 11, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 423551024, 'comment_body': 'Elaborate this comment more (i.e. explain the exact issue).', 'comment_created': datetime.datetime(2020, 5, 12, 8, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 423551726, 'comment_body': 'Why do we need as any here?', 'comment_created': datetime.datetime(2020, 5, 12, 8, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 423553964, 'comment_body': ""Any specific reason for why can't we follow the custom declaration?"", 'comment_created': datetime.datetime(2020, 5, 12, 8, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 423573016, 'comment_body': ""Yup, MathJax is a `namespace` itself. Also if we make the type of window.MathJax equal to `MathJax.Config` it finally becomes `MathJax.Config & typeof MathJax`. And I think it makes sense because technically window.MathJax should be the MathJax namespace, it shouldn't be just the config, right?"", 'comment_created': datetime.datetime(2020, 5, 12, 8, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 423575792, 'comment_body': ""Because if you look at the type we declared i.e. `MockDateConstructorType`, you'll see we have defined some properties of the function itself. So first we have to do `as any` before assigning that interface to the function because those properties don't really exist in our function.\r\n\r\nReference - https://stackoverflow.com/questions/46501911/typescript-declaring-a-function-with-properties"", 'comment_created': datetime.datetime(2020, 5, 12, 8, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 423578530, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 5, 12, 9, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 424757508, 'comment_body': 'Please add a comment in the code as well.', 'comment_created': datetime.datetime(2020, 5, 13, 22, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 425021834, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 5, 14, 10, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': '25233e63a230c02f37261e301e0639466213dde4', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bf48b116817707abf2e23c97dcec03954e41054', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb87233abb2a70decf091db7d5503f2586cbdaf3', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2374559ae90815cd70ec45756e7537591c3bd84', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e4bce6090239810ee386ff975cb8668297fa0c3', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b6c3a339f6fb68bc3ffea038905e7d27d77013', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '649b31c7814846b9b9ada58c1a645c25fff00caf', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f1b4edcaec5ccec3c2537941deab76ad7b5ff8e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80f95c5da37eba3b98fc560b120f9d49df7e6aa8', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
416721137, Milestone 1.4.2: Split ICustomScope to respective directives,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~1. This PR fixes or fixes part of #[fill_in_number_here].~
2. This PR does the following: Split ICustomScope to respective directives

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9298,https://api.github.com/repos/oppia/oppia/pulls/9298,https://github.com/oppia/oppia/pull/9298,closed,179,106,14,2,9,0,0,0,[],2020-05-12 13:20:37+00:00,2020-05-15 15:49:43+00:00,268146.0,"3 days, 2:29:06",[],"[{'commit_sha': '57cdb42f0e0fe7d844e7aca3e56b8e85b421f137', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b4241be17125313b4ca7469495b28a24440b93e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
417571316,Milestone 1.4.3: Add type definitions for __fixtures__,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~1. This PR fixes or fixes part of #[fill_in_number_here].~
2. This PR does the following: Add type definitions for __fixtures__

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9307,https://api.github.com/repos/oppia/oppia/pulls/9307,https://github.com/oppia/oppia/pull/9307,closed,218,23,5,1,3,0,0,1,[],2020-05-13 19:39:45+00:00,2020-05-14 15:54:03+00:00,72858.0,20:14:18,[],"[{'commit_sha': 'af6dc6c899cba481547ebd4c689cecbb7e2b779a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
417977209,Milestone 1.5: Add a check for checking the version of third party type defs,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes #9287
2. This PR does the following: Add a check for checking the version of third party type defs
## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9310,https://api.github.com/repos/oppia/oppia/pulls/9310,https://github.com/oppia/oppia/pull/9310,closed,318,4,12,17,13,53,1,0,[{'name': 'PR: LGTM'}],2020-05-14 12:54:22+00:00,2020-05-24 03:53:34+00:00,831552.0,"9 days, 14:59:12","[{'comment_id': 425753796, 'comment_body': 'This is quite useless to do, you can use `sys.stdout` directly on line 80.', 'comment_created': datetime.datetime(2020, 5, 15, 12, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 425754081, 'comment_body': 'Remove one empty line.', 'comment_created': datetime.datetime(2020, 5, 15, 12, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 425767589, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 5, 15, 12, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 425767632, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 5, 15, 12, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 426206542, 'comment_body': 'Do we use a newline between local imports?', 'comment_created': datetime.datetime(2020, 5, 17, 1, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426206666, 'comment_body': ""If this constant is used in all the linter files and we expect it to be the same in all the places then why don't we define this in a commonplace? Can you please move it to a commonplace, maybe linter_utils?"", 'comment_created': datetime.datetime(2020, 5, 17, 1, 30, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426206744, 'comment_body': 'filename* (here and elsewhere)', 'comment_created': datetime.datetime(2020, 5, 17, 1, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426206839, 'comment_body': 'Maybe `manifest_dependency_key` or `manifest_dependency_name` or ``manifest_frontend_dependency_name`?', 'comment_created': datetime.datetime(2020, 5, 17, 1, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426206895, 'comment_body': 'Should the value be the complete filename? If not, then change the key maybe `type_defs_filename_prefix`?', 'comment_created': datetime.datetime(2020, 5, 17, 1, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426207457, 'comment_body': ""Don't do this, that structure of the dict should be same throughout. Maybe have a key that indicates the source of these dependencies?"", 'comment_created': datetime.datetime(2020, 5, 17, 1, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426207958, 'comment_body': ""Can we define this on top (of this method) so that we don't have to do this in the loop?"", 'comment_created': datetime.datetime(2020, 5, 17, 1, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426208131, 'comment_body': 'Maybe we can do it inline \r\n\r\n```\r\nfiles_with_prefix_name = [\r\n    file_name for file_name in files_in_typings_dir\r\n    if file_name.startswith(prefix_name)\r\n]\r\n\r\n```\r\n\r\nJust trying to make this long method more readable and short and less branching.', 'comment_created': datetime.datetime(2020, 5, 17, 1, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426208236, 'comment_body': 'filename*', 'comment_created': datetime.datetime(2020, 5, 17, 1, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426208508, 'comment_body': 'Can you explain the random `-5` here? (Also add a code comment)', 'comment_created': datetime.datetime(2020, 5, 17, 2, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426208742, 'comment_body': ""I found this -5 is for `.d.ts` if so can we use `len('.d.ts`) and add a comment on top explaining that all type-defs filename ends with this?"", 'comment_created': datetime.datetime(2020, 5, 17, 2, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426208845, 'comment_body': ""Assume I have added a new typedef file for any dependencies so how will we make sure that the typedef filename has version + it's included in this list? [Basically how this lint test will make sure this happens for new type def files?]"", 'comment_created': datetime.datetime(2020, 5, 17, 2, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426247943, 'comment_body': 'Do not call it here, instead create a new file named `other_linter.py` and add this check under the `OtherLintChecksManager` class.', 'comment_created': datetime.datetime(2020, 5, 17, 11, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 426640789, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 5, 18, 13, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 426640862, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 18, 13, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 426641278, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 18, 13, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 426641334, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 18, 13, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 426641408, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 18, 13, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 426641499, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 18, 13, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 426641567, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 18, 13, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 426641634, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 18, 13, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 426641693, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 18, 13, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 426641754, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 18, 13, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 426642169, 'comment_body': ""We'll have to add the third party lib in the list."", 'comment_created': datetime.datetime(2020, 5, 18, 13, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 426642621, 'comment_body': ""Isn't this a general check like `codeowners` check. That check also is called this way."", 'comment_created': datetime.datetime(2020, 5, 18, 13, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 427596432, 'comment_body': ""(nit) Move this to the line above*\r\n```\r\nfiles_in_typings_dir = os.listdir(\r\n            os.path.join(os.getcwd(), 'typings'))\r\n```"", 'comment_created': datetime.datetime(2020, 5, 19, 20, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 427597510, 'comment_body': 'Define this in a constant and use it in THIRD_PARTY_LIBS and here.\r\n\r\nMaybe DEPENDENCY_SOURCE_MANIFEST', 'comment_created': datetime.datetime(2020, 5, 19, 21, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 427598224, 'comment_body': 'Move this to the line above here and elsewhere*', 'comment_created': datetime.datetime(2020, 5, 19, 21, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 427599160, 'comment_body': 'Should we add instruction on how to update the typedef? (not sure!)', 'comment_created': datetime.datetime(2020, 5, 19, 21, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 427599279, 'comment_body': 'is it resolved?', 'comment_created': datetime.datetime(2020, 5, 19, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 427662962, 'comment_body': '@Hudda, Do we have the infrastructure to have a unit test for this? (Though I think the unit test for the specif linter file will be easy can we do the integration testing?)\r\n\r\n@nishantwrp, Can you please write a unit test for this file? \r\n\r\n ', 'comment_created': datetime.datetime(2020, 5, 19, 23, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 427759559, 'comment_body': 'yep, you are right. Leave this then.', 'comment_created': datetime.datetime(2020, 5, 20, 6, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 427764431, 'comment_body': '@DubeySandeep Yep, We need unit tests for this file. But I have no idea about writing integration tests. Can you please point me to the right resources and if possible an example in the codebase.', 'comment_created': datetime.datetime(2020, 5, 20, 6, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 428006508, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 5, 20, 13, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428006592, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 20, 13, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428006653, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 20, 13, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428007306, 'comment_body': 'There are instructions in `README.md` of typings directory. Should I add something like please refer - typings/README.md.', 'comment_created': datetime.datetime(2020, 5, 20, 13, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428008134, 'comment_body': ""I couldn't find spec for other lint files. Can you refer me a file which i can refer for writing tests,"", 'comment_created': datetime.datetime(2020, 5, 20, 13, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428012075, 'comment_body': ""I think we won't be adding third party libs frequently. When we can simply add it to the list."", 'comment_created': datetime.datetime(2020, 5, 20, 13, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428050268, 'comment_body': ""I don't think we have a unit test file for any linter but we are planning to have it for all the lint test files. You can check the test file for the release script, they will be helpful!\r\n\r\n> But I have no idea about writing integration tests.\r\n\r\n@Hudda, By integration test I mean running pre_commit_linter test this new test i.e, testing the integration of this typedef check with the pre-commit linter. I think we can have it later but I think a unit test for this new file should be mandatory! "", 'comment_created': datetime.datetime(2020, 5, 20, 14, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428054808, 'comment_body': 'Yeah, I think that would be great!', 'comment_created': datetime.datetime(2020, 5, 20, 14, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428055596, 'comment_body': 'But we should have this check for any new typings we add, right? (To have this test future proof)\r\n', 'comment_created': datetime.datetime(2020, 5, 20, 14, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428176226, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 20, 17, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428177070, 'comment_body': 'I am unable to think of a way to automate this check. I mean not all files in `package.json` or `manifest.json` have typedefs. So, how do we know which ones to check?', 'comment_created': datetime.datetime(2020, 5, 20, 17, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428614813, 'comment_body': '@DubeySandeep Okay then, let @nishantwrp write a unit test for this file and I will add the integration tests later.', 'comment_created': datetime.datetime(2020, 5, 21, 12, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 428625822, 'comment_body': 'Sounds good!', 'comment_created': datetime.datetime(2020, 5, 21, 12, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428919561, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 21, 21, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 429241725, 'comment_body': '@nishantwrp, Can you please check whether the 100% coverage checks for linter files is enabled? ', 'comment_created': datetime.datetime(2020, 5, 22, 13, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 429258613, 'comment_body': 'Yup It is', 'comment_created': datetime.datetime(2020, 5, 22, 13, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': 'f5bfa083f528b620c2fc05298070dc3432e1478e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4cd32e7fbd52504ab7def7842c86fd207dbd985', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09872aa74c4e0fc0b9defd3e3971be061d43ee67', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b54c0599fdfcd169ac9b6d188fe4792af089f3d', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2664689db7cb302d9510408a2299c36896f805', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06a5ffb65bedf1c5cec3c73c339e093c393066c8', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6415f87a9daccf0f60bac89a61a6e9a0611e89df', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f45a8e6c1436e3a149e05bc683ad45417bfbd01', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfe8475682fb69c4599f76256cd79d553d6b3fe8', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6573a394b129732cc2dc9c2de1926ac44635d8c', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ae11f663396ed5dd513e473064d550b37cfd237', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcae598815ff6d6259ec151a75dab3a99a9f7011', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa1ea98234f35d17f01b4cd47f6d8e7da0763cad', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f663a8edc3256a22d0462d7eb87fd345280779a4', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b11bb69936e8e48481d5d7797cb94b463b81edcd', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1083d0ccd0424435d5a5d2509b66ac4b5bbd6fb9', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f272b57f565451d2fa8ca12d5d6c3e34e55a8173', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
420731925,Fix #9331: Added typescript checks to pre push hook ,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes #9331 
2. This PR does the following:  Added typescript checks to pre push hook 

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9334,https://api.github.com/repos/oppia/oppia/pulls/9334,https://github.com/oppia/oppia/pull/9334,closed,69,10,2,13,9,22,0,1,[],2020-05-20 12:54:18+00:00,2020-05-21 12:37:49+00:00,85411.0,23:43:31,"[{'comment_id': 428063364, 'comment_body': 'Why we should run a typescript test if js file changes? Any specific reason? (If yes, can you please add a code comment?)', 'comment_created': datetime.datetime(2020, 5, 20, 14, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428065144, 'comment_body': 'Can we move this to the line above?', 'comment_created': datetime.datetime(2020, 5, 20, 14, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428065671, 'comment_body': 'typescript_check**s**_status* (Following other variables have similar name)', 'comment_created': datetime.datetime(2020, 5, 20, 14, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428066949, 'comment_body': ""I see this check twice (line 413), why don't we move this code inside the same check? (You can use a newline to present visual separation of two checks!)"", 'comment_created': datetime.datetime(2020, 5, 20, 14, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428068436, 'comment_body': 'TYPESCRIPT_CHECKS_CMD**S**', 'comment_created': datetime.datetime(2020, 5, 20, 14, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428165228, 'comment_body': 'Nice Catch! It should be done only for `ts` files. Done!', 'comment_created': datetime.datetime(2020, 5, 20, 16, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428165317, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 20, 16, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428165379, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 20, 16, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428165490, 'comment_body': 'not needed', 'comment_created': datetime.datetime(2020, 5, 20, 16, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428165551, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 20, 16, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428198204, 'comment_body': '`diff_files` as arg name maybe? (Considering `lint` word is out of context of this method (as per the method name).)', 'comment_created': datetime.datetime(2020, 5, 20, 17, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428199412, 'comment_body': ""I was expecting it to be:\r\n```\r\nTYPESCRIPT_CHECKS_CMDS = [PYTHON_CMD, '-m', 'scripts.typescript_checks']\r\n```\r\n[Following max 80 chars in a ine]"", 'comment_created': datetime.datetime(2020, 5, 20, 17, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428200072, 'comment_body': ""file_path (As it's going to be the file path, not just the filename, right? [not sure!])"", 'comment_created': datetime.datetime(2020, 5, 20, 17, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428235871, 'comment_body': 'Already a method `does_diff_include_js_or_ts_files` follows the same convention.. Can you ptal!', 'comment_created': datetime.datetime(2020, 5, 20, 18, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428235890, 'comment_body': 'Already a method `does_diff_include_js_or_ts_files` follows the same convention.. Can you ptal!', 'comment_created': datetime.datetime(2020, 5, 20, 18, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428237829, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 20, 18, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428246360, 'comment_body': '> Already a method does_diff_include_js_or_ts_files follows the same convention\r\n\r\nYeah, I agree but I think they are also incorrect because of the same reason!', 'comment_created': datetime.datetime(2020, 5, 20, 19, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428246992, 'comment_body': ""> Already a method does_diff_include_js_or_ts_files follows the same convention\r\n\r\nYeh I agree, it's incorrect in those place as well, do you think we should fix those as well? [It would be great if you can do that!]"", 'comment_created': datetime.datetime(2020, 5, 20, 19, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428253582, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 20, 19, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428253629, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 20, 19, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 428255165, 'comment_body': 'Should we update the arg description accordingly? (here and elsewhere)', 'comment_created': datetime.datetime(2020, 5, 20, 19, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428260690, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 20, 19, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': '6bb88618bfb51ad7edeb86a69ede06d4f9b17524', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50f20a48159103d4b02876c097583b69de656293', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61e802ab112fb7f35d94bf4c0e780a82bfb190a3', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a51157afb82b1c29799059d0c4d02ac6f13cf513', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '230da0d8abef049117ba6510a8ed12d7b26614b0', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddd3bf808c979412208f9bb07819948725a75ba2', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16af561e107057342454cc2fae4d31e2ead86efd', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b5b27c637cd441a08582fa61234d38a4bff4507', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '143a4fb4b400378d6100fc46f8dc29f640c64965', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f5f9a091e9a3fc627c667f241c8e7070e9cbd20', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa8ce3fc62fb8d64932c5a7058cd3de8f71f458d', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cf871ae56cae653ae43da96f69c6b9f85fa8246', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc729a6c278dfae05cf4fc9bc15138de1324199b', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
422000319,Fix part of #7176: Add type definitions in some object factories,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #7176 .
2. This PR does the following: Add type definitions in some object factories

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9345,https://api.github.com/repos/oppia/oppia/pulls/9345,https://github.com/oppia/oppia/pull/9345,closed,403,203,32,6,9,8,0,1,[],2020-05-22 15:53:36+00:00,2020-05-28 15:52:51+00:00,518355.0,"5 days, 23:59:15","[{'comment_id': 429437005, 'comment_body': 'Maybe use the quotes consistently? So if there is at least one quoted item quote all the items. Ditto for other places.', 'comment_created': datetime.datetime(2020, 5, 22, 20, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 429439792, 'comment_body': ""Maybe:\r\n\r\n```suggestion\r\nimport { \r\n  IStoryReferenceBackendDict, \r\n  StoryReference,\r\n  StoryReferenceObjectFactory \r\n} from 'domain/topic/StoryReferenceObjectFactory';\r\n```"", 'comment_created': datetime.datetime(2020, 5, 22, 20, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 429551677, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 23, 14, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 429551687, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 23, 14, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 429663032, 'comment_body': 'Can you make this hex and make sure it is the correct value for this domain object (see constants.ts)? (Do this in the topic, subtopic, and story node specs too.)', 'comment_created': datetime.datetime(2020, 5, 24, 18, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 429666390, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 24, 19, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 430779859, 'comment_body': 'I think you can keep this object in a variable and use this variable in other places instead of asserting the hardcoded object.', 'comment_created': datetime.datetime(2020, 5, 27, 0, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'marianadasilvadev', 'type': 'User'}, {'comment_id': 431044419, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 27, 11, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': 'db8fb37b8bb16b48631fb8f0366a2a0f17e78b04', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '148b1b7ac3c7fbda05aae138acb32c63089f8200', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c35adbbf28b0b220a8494e27202b9b0ec8d6baf3', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec4c1e6aa65bcac2d8809012bec07c6a180c05b4', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3507f7e8366059092193f1002e103545a55a4a31', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd13db1916f5ba5c8d3c470ef6dd4502c85e178f1', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
422328382,Fix part of #7176: Remove any types from some object factories - II,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #7176.
2. This PR does the following:  Remove any types from some object factories - II

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9349,https://api.github.com/repos/oppia/oppia/pulls/9349,https://github.com/oppia/oppia/pull/9349,closed,115,148,13,4,5,0,0,1,[],2020-05-23 21:19:02+00:00,2020-05-27 00:44:09+00:00,271507.0,"3 days, 3:25:07",[],"[{'commit_sha': '29d3d581de23872a06c9cac4d0586c3865cad6c0', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45b51c3515b659cac60152433db8974ef62aaeff', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b18062152e5956dd144176bc26eec526ca88eff', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '100bbd1608fc4c64cb24d75a448383f797c67fec', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
422931420,Fix part of #7176: Remove any from RuleObjectFactory and introduce TypeChangeService,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part #7176 
2. This PR does the following: Remove any from RuleObjectFactory and introduce first TypeFactory

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9365,https://api.github.com/repos/oppia/oppia/pulls/9365,https://github.com/oppia/oppia/pull/9365,closed,132,105,12,8,10,43,0,1,[],2020-05-26 00:18:26+00:00,2020-06-03 17:55:01+00:00,754595.0,"8 days, 17:36:35","[{'comment_id': 430103844, 'comment_body': ""Now, in these functions we had two options\r\n- simply write `return true;`\r\n- Actually check the type of the variable\r\n\r\nCurrently I've followed the second point.\r\nAny can be used since we are going to use this factory only for changing the type of `IRuleInput` to the actual type.\r\n\r\nWhich one do you guys prefer?"", 'comment_created': datetime.datetime(2020, 5, 26, 0, 22, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 430236922, 'comment_body': 'can these be split into multiple lines?', 'comment_created': datetime.datetime(2020, 5, 26, 8, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 430237882, 'comment_body': 'Could you please explain how `variable is IGraphBackendDict` works?', 'comment_created': datetime.datetime(2020, 5, 26, 8, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 430239380, 'comment_body': '`any` is still used here', 'comment_created': datetime.datetime(2020, 5, 26, 8, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 430306664, 'comment_body': 'It tells the ts compiler that the `variable` is of type `IGraphBackendDict`', 'comment_created': datetime.datetime(2020, 5, 26, 10, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 430318371, 'comment_body': '/cc @vojtechjelinek @ankita240796 ', 'comment_created': datetime.datetime(2020, 5, 26, 10, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 430322242, 'comment_body': 'Missed it! Done!', 'comment_created': datetime.datetime(2020, 5, 26, 10, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 430322558, 'comment_body': ""`'extensions/interactions/MusicNotesInput/directives/music-notes-input-rules.service'` is more than 80 chars. I don't know how can it be split."", 'comment_created': datetime.datetime(2020, 5, 26, 10, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 430346661, 'comment_body': 'Hmm, but how is it different from `variable: IGraphBackendDict`?', 'comment_created': datetime.datetime(2020, 5, 26, 11, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 430348213, 'comment_body': ""I'm not sure what is the difference here, in one case we would be using just `variable is INote[]` and in the second there is the actual code?"", 'comment_created': datetime.datetime(2020, 5, 26, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 430363924, 'comment_body': 'Case 1\r\n```typescript\r\nfunc1(a: Object): GraphDict {\r\n...\r\n}\r\n```\r\nIt means that func1 returns a object whose type is GraphDict\r\n\r\nCase 2\r\n```typescript\r\nfunc1(a: Object): a is GraphDict {\r\n...\r\n}\r\n```\r\nIt means that func1 returns a `boolean` and if thats `true` it means a is of type GraphDict', 'comment_created': datetime.datetime(2020, 5, 26, 12, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 430364493, 'comment_body': 'The first point means something like this\r\n```typescript\r\n_isNoteArray(variable: Object): variable is INote[] {\r\n    return true;\r\n  }\r\n```', 'comment_created': datetime.datetime(2020, 5, 26, 12, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 430777505, 'comment_body': 'Are you using this variable here?', 'comment_created': datetime.datetime(2020, 5, 27, 0, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marianadasilvadev', 'type': 'User'}, {'comment_id': 430777995, 'comment_body': ""```suggestion\r\n  it('should correctly identify number array', () => {\r\n```"", 'comment_created': datetime.datetime(2020, 5, 27, 0, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'marianadasilvadev', 'type': 'User'}, {'comment_id': 430778233, 'comment_body': 'Here and elsewhere', 'comment_created': datetime.datetime(2020, 5, 27, 0, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'marianadasilvadev', 'type': 'User'}, {'comment_id': 431036736, 'comment_body': 'Yup, its used in this file.', 'comment_created': datetime.datetime(2020, 5, 27, 11, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 431037716, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 27, 11, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 431141566, 'comment_body': 'I think that the second option is fine, thanks!', 'comment_created': datetime.datetime(2020, 5, 27, 13, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 431141676, 'comment_body': 'Ok, thanks', 'comment_created': datetime.datetime(2020, 5, 27, 13, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 431374507, 'comment_body': ""There are other datatypes as well, right? That can come here.\r\nCan't you do something like `if typeof variable[0] !== <dataType>`? If not, I think this is fine.\r\n\r\nAlso, do the same check for all variables in the array, currently it is done only on the first element?"", 'comment_created': datetime.datetime(2020, 5, 27, 19, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 431374938, 'comment_body': ""Similar  comment, the field may be there in variable[0] but may not be in other elements, so make sure to check all elements.\r\nAlso, why aren't you verifying whether all the fields are there, why just this one?"", 'comment_created': datetime.datetime(2020, 5, 27, 19, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 431376244, 'comment_body': 'Ditto about checking all fields here and elsewhere.', 'comment_created': datetime.datetime(2020, 5, 27, 19, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 431379449, 'comment_body': ""Maybe rename to smtg like `verifyGraphInstance` since it is difficult to understand what the function does with the current name.\r\n\r\nAlso, what happens if it is not an instance, shouldn't  there be a return null or maybe throw Error? and why is the same variable that is passed in, returned? Can't the calling function just use that variable if the check passes? This could just be an `isGraphInstance` function as well, right? That returns bool?\r\n\r\nDitto below"", 'comment_created': datetime.datetime(2020, 5, 27, 19, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 431383764, 'comment_body': 'Ditto here about only checking first element.', 'comment_created': datetime.datetime(2020, 5, 27, 19, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 431748223, 'comment_body': ""@aks681 Actually we don't have to check everything completely because we know `variable` will be of type `IRuleInput` which is `(string | number | IFractionDict |\r\n  INumberWithUnitsBackendDict | string[] | INote[] |\r\n  number[] | IGraphBackendDict| string[][])`. So we just have to differentiate among these types and checking the first element would do that, right?"", 'comment_created': datetime.datetime(2020, 5, 28, 10, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 431748392, 'comment_body': 'Same reply as above.', 'comment_created': datetime.datetime(2020, 5, 28, 10, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 431749273, 'comment_body': ""Same reply as above. We don't have to check everything. Moreover is it sure that in the entire codebase the `numberWithUnits` will have all the properties?. I saw that `graph` in some places had only the `vertices` property."", 'comment_created': datetime.datetime(2020, 5, 28, 10, 53, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 431749411, 'comment_body': 'Same reply as above.', 'comment_created': datetime.datetime(2020, 5, 28, 10, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 431779028, 'comment_body': '1. Okay, I think `getGraphInstance` seems more appropriate. WDYT?\r\n2. Yeah, right. done! (Thrown an error if it is not an instance).\r\n3. Same variable is returned because we are just using it to change the type of `variable` because want the `ts compiler` to know that variable is of type  `IGraphBackendDict` (or other).\r\n4. It could be, but this way we can assure that only `IRuleInput` is passed as an argument.\r\n ', 'comment_created': datetime.datetime(2020, 5, 28, 11, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 432059532, 'comment_body': 'I would suggest to add comments for all this. In general, wherever you think a reviewer might have a question, add comments in advance.', 'comment_created': datetime.datetime(2020, 5, 28, 19, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 432060101, 'comment_body': 'Ditto - add comments.', 'comment_created': datetime.datetime(2020, 5, 28, 19, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 432060703, 'comment_body': 'Yes, let us go with option 2.', 'comment_created': datetime.datetime(2020, 5, 28, 19, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 432061107, 'comment_body': 'You can add a high level comment to explain this logic -- if not with every type check. Or it would be a better idea to add some documentation around this on wiki as well just to avoid confusion.', 'comment_created': datetime.datetime(2020, 5, 28, 19, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 432470459, 'comment_body': '@nishantwrp As @ankita240796 said, add comments for all these. But, are we validating anywhere that `IRuleInput` will just be those and not anything else (apart from just mentioning its types)?', 'comment_created': datetime.datetime(2020, 5, 29, 13, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 432472073, 'comment_body': 'Ah ok, so you are basically type casting the variable from an IRuleInput to IGraphBackendDIct for ts compiler. Is that it? Add that in a comment for this function.\r\nKnowing this, yeah, `getGraphInstance` sounds reasonable.', 'comment_created': datetime.datetime(2020, 5, 29, 13, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 432472391, 'comment_body': 'Ditto about adding comment.', 'comment_created': datetime.datetime(2020, 5, 29, 13, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 432647923, 'comment_body': 'Hmm, due to the failure of e2e tests, I think we would have to go with the first option. Because somewhere in the codebase it is happening that the `variable` should be of `some type` but is currently `null` or at that time has no properties.\r\n /cc @ankita240796 @vojtechjelinek ', 'comment_created': datetime.datetime(2020, 5, 29, 17, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 432648747, 'comment_body': 'done!', 'comment_created': datetime.datetime(2020, 5, 29, 17, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 432701904, 'comment_body': 'Also, I was thinking we could have a general `TypeChangeService` instead of `TypeFactories` if we agree on the above point.', 'comment_created': datetime.datetime(2020, 5, 29, 19, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 432771088, 'comment_body': ""I'm fine with using the first appraoch if you're not able to do it with the second."", 'comment_created': datetime.datetime(2020, 5, 29, 22, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 432812562, 'comment_body': '> Hmm, due to the failure of e2e tests, I think we would have to go with the first option. Because somewhere in the codebase it is happening that the variable should be of some type but is currently null or at that time has no properties.\r\n\r\nSo, are we planning to fix this later or is there any other issue with fixing this?', 'comment_created': datetime.datetime(2020, 5, 30, 5, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 432827839, 'comment_body': ""No I think it doesn't need to be fixed. It's something like suppose `inputs` is of type `IRuleInputs` and then `inputs.x` is of type `IRuleInput` and is currently empty. And we are doing something like\r\n```js\r\ninputs.x.vertices = [2,2];\r\n```\r\nIt will throw a ts error that `vertices` don't exist on type `IRuleInput`.\r\n\r\nNow if we use our `type factory` it will throw an error as well because vertices don't exist on `inputs.x`. \r\n\r\nBut with the first method, we can just assume that it is of type `IGraphDict`. "", 'comment_created': datetime.datetime(2020, 5, 30, 9, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 432971773, 'comment_body': 'Ok, thanks for explaining.', 'comment_created': datetime.datetime(2020, 5, 31, 18, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}]","[{'commit_sha': 'b8fbdb5e82ac7d97c037064808622e6f01d0b7da', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '614be0f5a861a9e4b04888d181fff1aa430cc167', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f87d726fcdd9e3d40c9ffe442f98566e0458c7a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab69594eae8f5e17d809e15527f0318a845c264b', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a806fd00857e7ce6f5af2079fed6ee8effee8e7', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40e0f3a5a03bb65eed69bbb0a5f3357a8dc75c3d', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '471fa5d0d510f2f6704831feb2393efea47dafff', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e9f9e7f910ec0f8304c1b82a5b677f6cc1d2bbb', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
423302167,Fix part of #7176: Remove any from some object factories - III,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #7176 
2. This PR does the following: Remove any from some object factories - III

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9370,https://api.github.com/repos/oppia/oppia/pulls/9370,https://github.com/oppia/oppia/pull/9370,closed,111,109,9,2,7,2,0,1,[],2020-05-26 16:04:53+00:00,2020-05-28 01:12:12+00:00,119239.0,"1 day, 9:07:19","[{'comment_id': 431385169, 'comment_body': 'Have you verified that all the new structures editors work as well?', 'comment_created': datetime.datetime(2020, 5, 27, 19, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 431391636, 'comment_body': ""I don't think there should be problems on the behaviour with just adding the types, as the code is transpiled to js anyway."", 'comment_created': datetime.datetime(2020, 5, 27, 19, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': '12e77aad51e81f95355ffbade9ab24ad930c12a3', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed6adaa0f27418c8953a21a5ef7728b6e2aae823', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
423311370,Fix part of #7165: Add WARNING_TYPE to interaction validation spec files,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #7165 .
2. This PR does the following: Add WARNING_TYPE to interaction validation spec files

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9371,https://api.github.com/repos/oppia/oppia/pulls/9371,https://github.com/oppia/oppia/pull/9371,closed,25,36,9,1,2,0,0,1,[],2020-05-26 16:22:06+00:00,2020-05-27 06:36:40+00:00,51274.0,14:14:34,[],"[{'commit_sha': '8f571463cbafbfd6e37c7afe6c60df0ed567361f', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
428060108,Fix part of #8038: Remove http requests from the files that are not backend api services ,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #8038.
2. This PR does the following: Remove http requests from the files that are not backend api services .

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9433,https://api.github.com/repos/oppia/oppia/pulls/9433,https://github.com/oppia/oppia/pull/9433,closed,3686,692,88,39,34,107,1,2,[{'name': 'PR: LGTM'}],2020-06-04 20:06:35+00:00,2020-06-25 20:17:58+00:00,1815083.0,"21 days, 0:11:23","[{'comment_id': 435523890, 'comment_body': 'Can you move some of the stuff from the next line onto this line?', 'comment_created': datetime.datetime(2020, 6, 4, 20, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 435524674, 'comment_body': 'While you are modifying this, can you also sort these firstly by the `$` services, regular services and constants at the end and then also alphabetically? ', 'comment_created': datetime.datetime(2020, 6, 4, 20, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 435526074, 'comment_body': '```suggestion\r\n * @fileoverview Unit tests for AdminDataObjectFactory.ts.\r\n```', 'comment_created': datetime.datetime(2020, 6, 4, 20, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 435528797, 'comment_body': 'Could you cache the promise in a variable so that when `getData` is called twice only one request is produced?', 'comment_created': datetime.datetime(2020, 6, 4, 20, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 435548987, 'comment_body': 'Ditto for all the other HTTP requests.', 'comment_created': datetime.datetime(2020, 6, 4, 21, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 435551812, 'comment_body': 'break after `fetchQuery(queryId)`', 'comment_created': datetime.datetime(2020, 6, 4, 21, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 435558262, 'comment_body': 'Maybe use uppercased `API`.', 'comment_created': datetime.datetime(2020, 6, 4, 21, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 435818217, 'comment_body': ""Shouldn't this be indented by 2 spaces to the right?"", 'comment_created': datetime.datetime(2020, 6, 5, 9, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 436004215, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 5, 15, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436004277, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 5, 15, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436004325, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 5, 15, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436004377, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 5, 15, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436004429, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 5, 15, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436004552, 'comment_body': 'That gives a lint error.', 'comment_created': datetime.datetime(2020, 6, 5, 15, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436005214, 'comment_body': ""Should that be done for all of em? I'm not sure like if we expect the response of backend to be different we make the request?\r\n\r\nAlso for adminBackendApiService that's already done in `AdminDataService`"", 'comment_created': datetime.datetime(2020, 6, 5, 15, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436251097, 'comment_body': 'Not done?', 'comment_created': datetime.datetime(2020, 6, 6, 8, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 436257001, 'comment_body': ""The tests for URLs should be an exact match, please don't use regex matchers."", 'comment_created': datetime.datetime(2020, 6, 6, 10, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 436257042, 'comment_body': '@kevinlee12 @bansalnitish have we made a style-decision on whether to use `this` for storing variables?', 'comment_created': datetime.datetime(2020, 6, 6, 10, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 436257121, 'comment_body': 'Please keep return type on same line as closing parenthesis.', 'comment_created': datetime.datetime(2020, 6, 6, 10, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 436257433, 'comment_body': ""Please don't wrap single-argument arrow functions in parentheses, just use `response => { ... }`."", 'comment_created': datetime.datetime(2020, 6, 6, 10, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 436273946, 'comment_body': ""done for two spec files I made. Rest use `params` while making the request. I don't know any other way of testing that."", 'comment_created': datetime.datetime(2020, 6, 6, 14, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436273972, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 6, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436273975, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 6, 14, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436274005, 'comment_body': 'These must have got back to this when I fixed the merge conficts. done!', 'comment_created': datetime.datetime(2020, 6, 6, 14, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436276455, 'comment_body': 'Please indent these by 4 spaces (see difference between this and line 54)', 'comment_created': datetime.datetime(2020, 6, 6, 15, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 436276641, 'comment_body': 'Seems my other comment was lost, but please add type information to `post` here:\r\n\r\n```typescript\r\nreturn this.http.post<IStorePlaythroughBackendResponse>(\r\n  playthroughUrl, {\r\n    ...\r\n  }).toPromise().then(response => {\r\n    return new StorePlaythroughResponse(...);\r\n  });\r\n```', 'comment_created': datetime.datetime(2020, 6, 6, 15, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 436276790, 'comment_body': 'Please sort these imports (Backend < Object).', 'comment_created': datetime.datetime(2020, 6, 6, 15, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 436276828, 'comment_body': 'Please have these indented by 4 spaces instead of 2.', 'comment_created': datetime.datetime(2020, 6, 6, 15, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 436277133, 'comment_body': ""I think doing `response: IStorePlaythroughBackendResponse` is same as that. Isn't it?"", 'comment_created': datetime.datetime(2020, 6, 6, 15, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436278209, 'comment_body': ""Yes, but the type safety is stronger when providing it to `post` (toPromise already has the correct type). Also, Angular's entire goal by introducing `get<T>` was to avoid developers from using `response: T`. Please change here and elsewhere."", 'comment_created': datetime.datetime(2020, 6, 6, 15, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 436284196, 'comment_body': 'Oh, ok. I think then it should be a global change in all the backend-api-services?', 'comment_created': datetime.datetime(2020, 6, 6, 17, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436284727, 'comment_body': 'Yes, I thought it already was since I recall seeing it in the codebase already: https://github.com/oppia/oppia/blob/b95f0e978ad853f086ef89723bc51cc00dfee77d/core/templates/domain/topics_and_skills_dashboard/topics-and-skills-dashboard-backend-api.service.ts#L73-L90.', 'comment_created': datetime.datetime(2020, 6, 6, 17, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 436293731, 'comment_body': '@brianrodri Yeah, it is but not in all places.', 'comment_created': datetime.datetime(2020, 6, 6, 19, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436295317, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 6, 19, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436295323, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 6, 19, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436295332, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 6, 19, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436295389, 'comment_body': 'So, should we create an issue for this to follow this convention everywhere?', 'comment_created': datetime.datetime(2020, 6, 6, 19, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436297640, 'comment_body': 'Move `string | number ..` to the next line.', 'comment_created': datetime.datetime(2020, 6, 6, 20, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436298596, 'comment_body': '```suggestion\r\n          permissions => permissions));\r\n```', 'comment_created': datetime.datetime(2020, 6, 6, 20, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436298887, 'comment_body': ""Actually, I'm confused with this. `UserExplorationPermissionsService.permissionsPromise` expects a promise, shouldn't it just return `this.explorationPermissionsBackendApiService.getPermissions()`?"", 'comment_created': datetime.datetime(2020, 6, 6, 20, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436298988, 'comment_body': 'Can we just do `expSummaries => ..` instead?', 'comment_created': datetime.datetime(2020, 6, 6, 20, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436299346, 'comment_body': '```suggestion\r\n      data).then(query => {\r\n```', 'comment_created': datetime.datetime(2020, 6, 6, 20, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436299367, 'comment_body': '```suggestion\r\n      .then(newQuery => {\r\n```', 'comment_created': datetime.datetime(2020, 6, 6, 20, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436300106, 'comment_body': ""Yep, I'm fine with using `this` for storing variables and making it a convention. But I would say, this can be done as part of a larger task to make all spec files use this convention. I feel introducing a new convention for just new spec files or files that are modified can lead to our codebase having different/conflicting patterns -- this can be confusing especially for new folks who write specs. Once we have a uniform pattern across all the spec files, we can have a linter to enforce the pattern for future PRs. WDYT? @brianrodri @bansalnitish @srijanreddy98 "", 'comment_created': datetime.datetime(2020, 6, 6, 20, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436302583, 'comment_body': 'Yes. Please start in this PR and we can clean up the rest incrementally.', 'comment_created': datetime.datetime(2020, 6, 6, 21, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 436351522, 'comment_body': 'Filed #9453 ', 'comment_created': datetime.datetime(2020, 6, 7, 11, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436357856, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 7, 12, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436357863, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 7, 12, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436357868, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 7, 12, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436357874, 'comment_body': 'Yeah, right. done', 'comment_created': datetime.datetime(2020, 6, 7, 12, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436357878, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 7, 12, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436357932, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 7, 12, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436373147, 'comment_body': '```suggestion\r\nexport class StorePlaythroughResponse {\r\n  constructor(\r\n      public playthroughStored: boolean,\r\n      public playthroughId: string);\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 6, 7, 15, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 436705181, 'comment_body': 'Please add these imports in sorted manner as it is done in this file already.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 436705482, 'comment_body': 'Add these too in sorted order (here and everywhere in this file).', 'comment_created': datetime.datetime(2020, 6, 8, 13, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 436955009, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 8, 19, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436955075, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 8, 19, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436955116, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 8, 19, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437109541, 'comment_body': ""What is this data? [I'm not sure what this method will return] I would suggest having a better name for this function? (I can help if you can provide some context!)"", 'comment_created': datetime.datetime(2020, 6, 9, 2, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439198045, 'comment_body': 'Please add these in sorted order.', 'comment_created': datetime.datetime(2020, 6, 12, 4, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 439405646, 'comment_body': 'I think i did that already.', 'comment_created': datetime.datetime(2020, 6, 12, 13, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 439443922, 'comment_body': 'if `response` corresponds to a domain object then add a better name for it (Else it looks like a raw response data)', 'comment_created': datetime.datetime(2020, 6, 12, 14, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439444010, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 6, 12, 14, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439444194, 'comment_body': 'Ditto here and elsewhere*', 'comment_created': datetime.datetime(2020, 6, 12, 14, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439447765, 'comment_body': 'Can we move this to the line above? (Ditto for the line 23)', 'comment_created': datetime.datetime(2020, 6, 12, 14, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439450923, 'comment_body': ""Let's not add the `Data` suffix here we have a JobModel in backend so let's call this just `Job` (we have Exploration for ExplorationModel.) "", 'comment_created': datetime.datetime(2020, 6, 12, 14, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439456939, 'comment_body': 'Why a separate domain class for just these two values which are just a part of `JobModel`? Can we use them directly like successcallback(jobId, isQueuedOrRunning)?', 'comment_created': datetime.datetime(2020, 6, 12, 14, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439457271, 'comment_body': 'Should we rename this to JobStatus?', 'comment_created': datetime.datetime(2020, 6, 12, 14, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439458552, 'comment_body': 'Remove `.ts`', 'comment_created': datetime.datetime(2020, 6, 12, 14, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439460769, 'comment_body': 'Should we define I*BackendDict in the *backend-api.service files so that all the backend related things are in one file? (not sure, what do you think?)', 'comment_created': datetime.datetime(2020, 6, 12, 14, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439461454, 'comment_body': 'Rename the response to adminDataBackendDict or adminDataResponseDict or something around that', 'comment_created': datetime.datetime(2020, 6, 12, 14, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439676085, 'comment_body': 'This returns all the data needed by the admin page. imo `AdminData` seems fine!', 'comment_created': datetime.datetime(2020, 6, 12, 23, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 439676097, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 12, 23, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 439676111, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 12, 23, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 439676122, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 12, 23, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 439676144, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 12, 23, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 439676154, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 12, 23, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 439676312, 'comment_body': ""I don't think we should do that, We are creating object factory for everthing  else. So why not this."", 'comment_created': datetime.datetime(2020, 6, 12, 23, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 439676392, 'comment_body': 'In backend response the name of this field is job spec. So..', 'comment_created': datetime.datetime(2020, 6, 12, 23, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 439676414, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 12, 23, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 439676709, 'comment_body': 'Object Factories are also related to backend. Also till now the convention that the `I*BackendDict` should be declared in the object factories is followed. ', 'comment_created': datetime.datetime(2020, 6, 12, 23, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 439676726, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 12, 23, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 439794623, 'comment_body': ""`AdminData` name seems weird to me Like AdminData isn't related to admin and we expect a domain class to store data then a `Data` suffix is not required. I'm not sure about a better name for this.\r\n\r\n@seanlip Do you have any suggestion for a class name which stores these data:\r\n```\r\n'config_properties': ...\r\n'continuous_computations_data': ...\r\n'demo_collections': ...\r\n'demo_explorations': ...\r\n'demo_exploration_ids': ...\r\n'human_readable_current_time': ...\r\n'one_off_job_specs': ...\r\n'audit_job_specs': ...\r\n'recent_job_data': ...\r\n'unfinished_job_data': ...\r\n'updatable_roles': ...\r\n'viewable_roles': ...\r\n'topic_summaries': ...\r\n'role_graph_data': ...\r\n```\r\n\r\nNote: These values are used for loading admin page tabs."", 'comment_created': datetime.datetime(2020, 6, 14, 5, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439794929, 'comment_body': ""I found that it's going to be a part of the adminData object, in that case, keep it as-is."", 'comment_created': datetime.datetime(2020, 6, 14, 5, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439799028, 'comment_body': 'Hm, I think the issue with this is that it\'s really not all just one ""thing"". In general, it should be fine for a GET request to return multiple ""things"". I.e., it shouldn\'t be the case that, just because a GET request returns a bunch of things, that they are all the same thing conceptually -- we sometimes do just one request for multiple things, in order to save bandwidth.\r\n\r\n@nishantwrp is it possible for this concept to be reflected in the types? I.e., to convey that getData() returns a dict with various key-value pairs, where different keys correspond to different items (some of which may be strings, some of which may be domain objects, etc.). I don\'t think ""AdminData"" really makes sense as a long-standing concept.\r\n\r\n/cc @vojtechjelinek ', 'comment_created': datetime.datetime(2020, 6, 14, 7, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439801506, 'comment_body': 'Should we call this a JobStatusSummary and change the backend response to *_status_summary instead of *_spec. any thoughts?', 'comment_created': datetime.datetime(2020, 6, 14, 7, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439801680, 'comment_body': ""From the discussion:\r\n\r\n- It shouldn't be the case that, just because a GET request returns a bunch of things, that they are all the same thing conceptually. We sometimes do just one request to save bandwidth.\r\n- if return multiple different chunks of data then make the succesCallback look like this: successCallback(chunk1, chunk2 ...)?"", 'comment_created': datetime.datetime(2020, 6, 14, 7, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439831441, 'comment_body': 'Yeah, I think `JobStatus` is a better name and the name of backend responses can be `audit_job_statuses` and `one_off_job_statuses`. Does that sound good?\r\n', 'comment_created': datetime.datetime(2020, 6, 14, 13, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 439833086, 'comment_body': ""Hmm, then I think we can remove the `AdminData` object factory because `AdminData` shouldn't be a `class`. So, we can just camelize the `keys` of the backend dict and return it. And the name of that interface could be `AdminPageData`?\r\n\r\n/cc @seanlip "", 'comment_created': datetime.datetime(2020, 6, 14, 14, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 439839628, 'comment_body': ""Make it JobStatusSummary as jobStatus doesn't sound like an object name instead it seems like a boolean variable name. "", 'comment_created': datetime.datetime(2020, 6, 14, 15, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439872104, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 14, 22, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 439874618, 'comment_body': 'I\'m not totally sure what you\'re proposing exactly, I\'d have to see how it ""looks"" before making a comment. Maybe make the changes to the PR itself and then @-mention us in those to take a look?\r\n\r\nI agree that AdminData doesn\'t make sense conceptually as a class but I don\'t really have a strong sense yet of what the actual conventions should be (sorry).', 'comment_created': datetime.datetime(2020, 6, 14, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440434107, 'comment_body': 'Made the changes. ptal!', 'comment_created': datetime.datetime(2020, 6, 15, 20, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 440547391, 'comment_body': ""Hi @nishantwrp, I think this looks fine to me -- or, at least, I can't really think of a better alternative. @DubeySandeep @vojtechjelinek what do you think?"", 'comment_created': datetime.datetime(2020, 6, 16, 2, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440633363, 'comment_body': 'LGTM!', 'comment_created': datetime.datetime(2020, 6, 16, 7, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 443152711, 'comment_body': 'Will it work for the angularJS files?', 'comment_created': datetime.datetime(2020, 6, 20, 19, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443152781, 'comment_body': '`file_paths.endswith(...)`', 'comment_created': datetime.datetime(2020, 6, 20, 19, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443152966, 'comment_body': 'Are we expecting this block to be inside the `with` block?', 'comment_created': datetime.datetime(2020, 6, 20, 19, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443156476, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 20, 20, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 443156536, 'comment_body': ""No, and I don't expect it to. We have decided to do this along with the angular migration."", 'comment_created': datetime.datetime(2020, 6, 20, 20, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 443156539, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 20, 20, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 443237601, 'comment_body': ""Move line 312 to 310 and change it to \r\n`if file_path.endswith('backend-api.service.ts'):`\r\n`continue`"", 'comment_created': datetime.datetime(2020, 6, 21, 16, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 443237831, 'comment_body': ""```suggestion\r\n                        summary_message = (\r\n                            '%s --> An instance of HttpClient is found in this '\r\n                            'file. You are not allowed to create http requests '\r\n                            'from files that are not backend api services.' % (\r\n                                file_path))\r\n                        summary_messages.append(summary_message)\r\n                        python_utils.PRINT(summary_message)\r\n                        python_utils.PRINT('')\r\n```\r\n\r\nWe are changing the linter message format so change it to the suggestion."", 'comment_created': datetime.datetime(2020, 6, 21, 16, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 443244794, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 21, 18, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 443244802, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 21, 18, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 444472086, 'comment_body': 'You need to add all of these new services to OppiaAngularRoot as well. You can take a look at step 12 here: https://github.com/oppia/oppia/wiki/Angular-Migration#implementation-details-to-migrate-services for further instructions.', 'comment_created': datetime.datetime(2020, 6, 23, 19, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 444535837, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 23, 22, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': '5170aac4b158b166be15d40a9d333118379cf356', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51c0775c187c21f1a0d6af48acb97fa2b062a6f0', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dbcf2486c39be4733f148fd7b3af86f099db027', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ffea8d32007867df655d714c59ddd717ac48c5', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4ddc1ec56c7fa4aa2124286726d0d6b047bed33', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd228daa58c2a1b339a7aa271fb7e8a84c65c46bf', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d186e13c03a053a1607d758580351c3c4b26c37', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d9d7a16c2d09be45d27638f9067376b0e8c493c', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23ddcdb70561344f6e162235c41c5a96e0f6259a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7649e8a3ed079d3fe2d51e622846d2d058e7332', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bcc6b0ff2c0b9f4bffffcac46f184ef81766f47', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de14a2db93b91a817f84f1c9ae86229fa5d5d449', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5cc6acd5cb3fae8721b0d6fdfe041c5536ded6b', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30815c3e78ad0b21e1303aa71d5042a13a3dd0fc', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96ee13c7ca9f92d4acb88a39413016b556bba0a2', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b140355bbb6a972523a7bb0147ac46f15fb331', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '472d7e5b68606a2d48ca9eabd9e02e811c85b820', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d260bcb7c29e37d4d2297a807cf0ef7c81052c6', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd662829aeb5d33bdae5a69d9a72e2a3996adfe72', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f4c264e9cccf7107d12dd63744a8986ee811f7f', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f48ce1de90dcb5c6065dc8ea816dd4d528203203', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1681c7824874edd8288ec3ff610b802356820435', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b4bb632c000b29b05b76c244b905f4422225483', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4efcc45295af3121c944b51b41aa93c0136da874', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c2a4d739c07cb13a6ff29fe924c6a01b2be3e1a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f084bbdd6e2ec509ec6f2f237f49d88063ed8a84', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05417132945eedbf117a727fb902c13a73f817b9', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0702cae14db0d64735cc9ccbdb86421f65aae92a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d0a39568eadbd0b37a4dac36f5c0392adba7012', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '733d3c05f7a3733d33e1f92cd03b0fa267653cda', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f0ba2e029fed1c2f5ac4b3a4c31c96d207cea39', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35441bc5cbd91925daa0309340cdf5e9c6594ae6', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3d3189d3f49db211144184a8fbfb676add35673', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8127d86547ceb4783fbada8206136610ed231ed5', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc29f4ed28e139b87d8a80f7cafa000d1d190656', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c58f41d48751fe8faf28d6be45ba39121252e37', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed2bc06cc663ca72f19117073008c92de502a9a6', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e423e188fcbc4bc7fce1ebbe4c83601511754154', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4cbbf191e59ce168d6681435fc38cfe1463f3f5', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
431318975,Fix part of #7176: Add types for Customization Args ,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #7176 
2. This PR does the following:  Add types for Customization Args 

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9463,https://api.github.com/repos/oppia/oppia/pulls/9463,https://github.com/oppia/oppia/pull/9463,closed,522,248,27,8,7,47,0,1,[],2020-06-08 18:33:04+00:00,2020-06-12 13:34:48+00:00,327704.0,"3 days, 19:01:44","[{'comment_id': 436948357, 'comment_body': 'break after `(`', 'comment_created': datetime.datetime(2020, 6, 8, 19, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 436948444, 'comment_body': 'break after `(`', 'comment_created': datetime.datetime(2020, 6, 8, 19, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 436951805, 'comment_body': 'put every type on a separate line', 'comment_created': datetime.datetime(2020, 6, 8, 19, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 436956124, 'comment_body': 'There are many kinds of customization args used in the codebase, so I think you should be more specific here. Maybe `IInteractionCustomizationArgs` instead?', 'comment_created': datetime.datetime(2020, 6, 8, 19, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 436956669, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 8, 19, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436956703, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 8, 19, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436956739, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 8, 19, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437123464, 'comment_body': 'Please keep parameters and their types on the same line when possible.', 'comment_created': datetime.datetime(2020, 6, 9, 3, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437123575, 'comment_body': 'Please add space after `>` here and elsewhere.', 'comment_created': datetime.datetime(2020, 6, 9, 3, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437164810, 'comment_body': 'Please split the if condition into two instead.', 'comment_created': datetime.datetime(2020, 6, 9, 6, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437184551, 'comment_body': 'Add space after `>` here and all other places.', 'comment_created': datetime.datetime(2020, 6, 9, 7, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437184750, 'comment_body': 'Keep parameters and their types on the same line.', 'comment_created': datetime.datetime(2020, 6, 9, 7, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437344279, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 11, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437344340, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 11, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437344386, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 11, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437344544, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 11, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437344578, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 11, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437344617, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 11, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437395578, 'comment_body': '```suggestion\r\n        .choices.value.map((val, ind) => ({val: ind, label: val}));\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 13, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437396715, 'comment_body': '```suggestion\r\n        .choices.value.map(val => ({val: val, label: val}));\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 13, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437397007, 'comment_body': '```suggestion\r\n        .choices.value.map(val => ({val: val, label: val}));\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 13, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437398719, 'comment_body': ""Shouldn't `customizationArgSpecs` have a type?"", 'comment_created': datetime.datetime(2020, 6, 9, 13, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437399898, 'comment_body': '`let` used here but `var` used on line 100. Please stay consistent, replace all `var` with `let`.', 'comment_created': datetime.datetime(2020, 6, 9, 13, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437402105, 'comment_body': 'Please keep parameter names and types on same line.', 'comment_created': datetime.datetime(2020, 6, 9, 13, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437402988, 'comment_body': 'Please keep parameter names and types on same line.', 'comment_created': datetime.datetime(2020, 6, 9, 13, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437403531, 'comment_body': ""Shouldn't this be `IMathExpressionCustomizationArgs`?"", 'comment_created': datetime.datetime(2020, 6, 9, 13, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437403680, 'comment_body': 'Ditto?', 'comment_created': datetime.datetime(2020, 6, 9, 13, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437404190, 'comment_body': 'Thanks for the clean up!', 'comment_created': datetime.datetime(2020, 6, 9, 13, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437404640, 'comment_body': ""Shouldn't this be `INumericInputCustomizationArgs`?"", 'comment_created': datetime.datetime(2020, 6, 9, 13, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437404706, 'comment_body': 'Ditto?', 'comment_created': datetime.datetime(2020, 6, 9, 13, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437410635, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 13, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437410706, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 13, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437410776, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 13, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437410947, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 13, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437411019, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 13, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437411090, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 13, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437411301, 'comment_body': ""I couldn't find any customization args for this interaction."", 'comment_created': datetime.datetime(2020, 6, 9, 13, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437411362, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2020, 6, 9, 13, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437411486, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2020, 6, 9, 13, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437411600, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2020, 6, 9, 13, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437413099, 'comment_body': 'will change it later on.', 'comment_created': datetime.datetime(2020, 6, 9, 13, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437433499, 'comment_body': ""OK, let's just make it an empty interface then."", 'comment_created': datetime.datetime(2020, 6, 9, 13, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437433697, 'comment_body': 'Likewise.', 'comment_created': datetime.datetime(2020, 6, 9, 13, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 437460929, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 14, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437460983, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 14, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437461086, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 14, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 437461126, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 9, 14, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': '770ce06a997664fa9622a80e4ea939bfa2ca8261', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cdb0d9e013c64c7a7f02de54dfe0962d0860294', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67a65c256cf8e630388474d227e6ba7461faad68', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea05d810377a88d7bbb0b8edc723384452613ac1', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34ea063b868ade7418823d6e6005bbcaf15b7b3a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5326f1db26d65cfa142eb19161f30126f5f20ec2', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99f676b1176eaf77a3ddfab7c8e8b63b1429225c', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '889744cd18406d5f1b21971306fedee419e4af7e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
432745439,Disallow using eslint disable statement for camelcase,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of NA.
2. This PR does the following: Disallow using eslint disable statement for camelcase

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9482,https://api.github.com/repos/oppia/oppia/pulls/9482,https://github.com/oppia/oppia/pull/9482,closed,205,230,19,4,6,8,0,1,[],2020-06-10 23:04:40+00:00,2020-06-15 22:46:23+00:00,430903.0,"4 days, 23:41:43","[{'comment_id': 438590805, 'comment_body': ""These were needed because these files had variables in `snake_case` that couldn't use quotes."", 'comment_created': datetime.datetime(2020, 6, 11, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 438728001, 'comment_body': 'Why remove this?', 'comment_created': datetime.datetime(2020, 6, 11, 11, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 438728069, 'comment_body': 'Why remove this?', 'comment_created': datetime.datetime(2020, 6, 11, 11, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 438743671, 'comment_body': 'there was no use of this.', 'comment_created': datetime.datetime(2020, 6, 11, 12, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 438743718, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2020, 6, 11, 12, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 438745517, 'comment_body': 'Okay, I was just confused since previously the stuf on line 150 was kept.', 'comment_created': datetime.datetime(2020, 6, 11, 12, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 438878494, 'comment_body': 'Can we use `BAD_PATTERNS_JS_AND_TS_REGEXP` instead of creating a new block here?', 'comment_created': datetime.datetime(2020, 6, 11, 15, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439102480, 'comment_body': ""done! didn't know we had something like this."", 'comment_created': datetime.datetime(2020, 6, 11, 22, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': 'b071bd6244ae55959b2b11a62b8b398f9a0dca8e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd6e7daeb7ab3e9ceaf0448f0febe01098286d7b', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac8eb27691732a3e03749c3df7fa35ba727c57bd', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd76d53ee413fe8ca9ea491660e02d8bfe21f7078', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
434709121,Fix part of #7176: Remove some more any types,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #7176 
2. This PR does the following:  Remove some more any types

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9544,https://api.github.com/repos/oppia/oppia/pulls/9544,https://github.com/oppia/oppia/pull/9544,closed,689,394,40,6,5,21,0,1,[],2020-06-15 18:43:33+00:00,2020-06-19 12:33:37+00:00,323404.0,"3 days, 17:50:04","[{'comment_id': 440485000, 'comment_body': '```suggestion\r\n      // TS ignore is used here because we are assigning the wrong type of \r\n      // value to test the warnings.\r\n      // @ts-ignore\r\n```', 'comment_created': datetime.datetime(2020, 6, 15, 22, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 440485073, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2020, 6, 15, 22, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 440485589, 'comment_body': 'break after first `,`\r\n', 'comment_created': datetime.datetime(2020, 6, 15, 22, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 440485691, 'comment_body': 'each argument on one line please', 'comment_created': datetime.datetime(2020, 6, 15, 22, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 440485735, 'comment_body': 'Ditto in other places, except when the args fit on one line.', 'comment_created': datetime.datetime(2020, 6, 15, 22, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 440486620, 'comment_body': 'Is it okay to remove this?', 'comment_created': datetime.datetime(2020, 6, 15, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 440486896, 'comment_body': 'Modify this.', 'comment_created': datetime.datetime(2020, 6, 15, 22, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 440487415, 'comment_body': 'Can you we use discriminated unions here? As Brian suggested in #9450.', 'comment_created': datetime.datetime(2020, 6, 15, 22, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 440487460, 'comment_body': 'Can you we use discriminated unions here? As Brian suggested in #9450.', 'comment_created': datetime.datetime(2020, 6, 15, 22, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 441694080, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 17, 17, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 441694139, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 17, 17, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 441694203, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 17, 17, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 441694420, 'comment_body': 'Yeah, there was no use of that.', 'comment_created': datetime.datetime(2020, 6, 17, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 441694498, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 17, 17, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 441694555, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 17, 17, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 441694696, 'comment_body': ""I don't think that can be done here."", 'comment_created': datetime.datetime(2020, 6, 17, 17, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 441769520, 'comment_body': 'Why AUTO is in uppercase?', 'comment_created': datetime.datetime(2020, 6, 17, 19, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 441769902, 'comment_body': 'Not done?', 'comment_created': datetime.datetime(2020, 6, 17, 19, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 441771301, 'comment_body': ""No idea! This is the command that is used. I don't know if there's a reason for this."", 'comment_created': datetime.datetime(2020, 6, 17, 19, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 441772161, 'comment_body': 'Sorry, done.', 'comment_created': datetime.datetime(2020, 6, 17, 19, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 442066828, 'comment_body': 'Ah, okay.', 'comment_created': datetime.datetime(2020, 6, 18, 8, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}]","[{'commit_sha': 'a1e3ba9762aa66d2d7f70c04a2813eecf74d48c0', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa981b7f760db1c0da060eacdb4e398761361bde', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4db73c478f99eb02cd5b38c251a2a16542a93fc6', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '826f5fd57340e253269cb97a8718adb4b51dc909', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '902bbf9117133d26e99d670f6a6731042afeede1', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a0709d32cc55f534339cc0f8d3ddd1cb3df6654', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
442280318,Fix part of #7165: Refactor interaction type defs and some more remove any types,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #7165 
2. This PR does the following: Refactor interaction type defs and some more remove any types

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9742,https://api.github.com/repos/oppia/oppia/pulls/9742,https://github.com/oppia/oppia/pull/9742,closed,935,445,53,6,11,0,1,1,[{'name': 'PR: LGTM'}],2020-06-30 20:39:08+00:00,2020-07-05 08:30:05+00:00,388257.0,"4 days, 11:50:57",[],"[{'commit_sha': 'a6319430f6d214216a46bf14202c48c6e1b042fa', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce710204b630e17941aedb62b7fbeb0226a4b847', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d2074b3d2bfdd17987f9d841ccc1513ab96f2bb', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a34c34a0e049320477aa6b5ff62213720bb38b4b', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f14c372d34ad18ef0235935fef42e54c1615646', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72481c1920ef7d8e28c4efa2e830657ebfc06b9f', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
443078978,Fix part of #7165: Remove some more any types,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #7165 
2. This PR does the following: Remove some more any types

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9754,https://api.github.com/repos/oppia/oppia/pulls/9754,https://github.com/oppia/oppia/pull/9754,closed,224,188,23,3,6,1,0,1,[],2020-07-01 23:50:01+00:00,2020-07-04 17:27:32+00:00,236251.0,"2 days, 17:37:31","[{'comment_id': 448673612, 'comment_body': 'I removed it from here because it should not be used directly but should be inherited first.', 'comment_created': datetime.datetime(2020, 7, 1, 23, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': 'bc1bf926da948be746e4338e1bc2159d329c7345', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fd45ce119ce3a0a169b839cd067a6bab64ef93a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '246d1fb8d8a1a8a1ab040ee2e57e938a88c4fbe6', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
444479584,Fix part of #8015: Refactor backend api services to return domain objects,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->
Fix part of #8015
Fixes #9797 

2. This PR does the following: Refactor backend api services to return domain objects

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9798,https://api.github.com/repos/oppia/oppia/pulls/9798,https://github.com/oppia/oppia/pull/9798,closed,2613,852,68,22,15,45,0,1,[],2020-07-06 00:05:29+00:00,2020-07-11 23:45:50+00:00,517221.0,"5 days, 23:40:21","[{'comment_id': 450168783, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2020, 7, 6, 11, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 450169512, 'comment_body': 'Stop using `I` at the start?', 'comment_created': datetime.datetime(2020, 7, 6, 11, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 450177963, 'comment_body': 'Is the deep clone still needed here?', 'comment_created': datetime.datetime(2020, 7, 6, 12, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 450180228, 'comment_body': 'Remove `_` here?', 'comment_created': datetime.datetime(2020, 7, 6, 12, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 450180777, 'comment_body': 'Remove `_` here?', 'comment_created': datetime.datetime(2020, 7, 6, 12, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 450181407, 'comment_body': 'Do we need `cloneDeep` here?', 'comment_created': datetime.datetime(2020, 7, 6, 12, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 450182612, 'comment_body': 'Move this away from the for loop, I do not see why it needs to be inside?', 'comment_created': datetime.datetime(2020, 7, 6, 12, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 450188016, 'comment_body': 'Add newline after `searchQuery`', 'comment_created': datetime.datetime(2020, 7, 6, 12, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 450192148, 'comment_body': '```suggestion\r\nimport { SuggestionBackendDict } from\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 12, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 450469739, 'comment_body': 'In the actual `collection_domain.py` the value of this field was `last_updated_msec` so did this so that responses are uniform.', 'comment_created': datetime.datetime(2020, 7, 6, 20, 44, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 450469804, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 6, 20, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 450473912, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 6, 20, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 450474076, 'comment_body': 'Actually @seanlip was in favour of keeping the `_` along with private.', 'comment_created': datetime.datetime(2020, 7, 6, 20, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 450474329, 'comment_body': 'done. Actually I did it exactly the way it was done earlier.', 'comment_created': datetime.datetime(2020, 7, 6, 20, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 450474369, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 6, 20, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 450474413, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2020, 7, 6, 20, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 450476407, 'comment_body': ""Won't it look weird?"", 'comment_created': datetime.datetime(2020, 7, 6, 20, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 450476448, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 6, 20, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 450534992, 'comment_body': ""No -- it's common for the closing paren to be on the same level of indentation as the opening one, similar to how it was before."", 'comment_created': datetime.datetime(2020, 7, 6, 23, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 450792696, 'comment_body': 'Ok, done', 'comment_created': datetime.datetime(2020, 7, 7, 11, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 451097268, 'comment_body': 'Just to confirm, this used to store an array of objects and is now changed to a single object, so all its calling functions have been edited correctly, right?', 'comment_created': datetime.datetime(2020, 7, 7, 19, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 451101583, 'comment_body': ""Yup, it was used in the collection-node-creator page. I've refactored it accordingly."", 'comment_created': datetime.datetime(2020, 7, 7, 19, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 451181155, 'comment_body': 'Where is this used?', 'comment_created': datetime.datetime(2020, 7, 7, 22, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 451182475, 'comment_body': 'There is a ProfileSumamryObjectFactory. It is used in both creator and learners dashboard', 'comment_created': datetime.datetime(2020, 7, 7, 22, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 451242062, 'comment_body': ""Why are we changing whether the user or email is displayed here? Shouldn't this PR just be a refactor, or are we including more substantive changes too?"", 'comment_created': datetime.datetime(2020, 7, 8, 2, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 451402774, 'comment_body': 'Yup, this PR is just for refactoring. But while refactoring I found a bug - #9797. So, I fixed that too.', 'comment_created': datetime.datetime(2020, 7, 8, 9, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 451802351, 'comment_body': 'Collection Summary Object Factory?', 'comment_created': datetime.datetime(2020, 7, 8, 20, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 451802440, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 7, 8, 20, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 451802575, 'comment_body': 'ditto: exp -> collection', 'comment_created': datetime.datetime(2020, 7, 8, 20, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 451815141, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 8, 20, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 451815171, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 8, 20, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 451815226, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 8, 20, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 451834036, 'comment_body': 'Also want to highlight this. Is there a better approach to this?\r\n\r\n/cc @kevintab95 ', 'comment_created': datetime.datetime(2020, 7, 8, 21, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 451844989, 'comment_body': ""Typo: because\r\n\r\nHm, this doesn't look great. Do we really need to compare the entire object in this case? If not, can we use something like this:\r\n\r\n```ctrl.incompleteExplorationsList.findIndex(exp => exp.id === activity.id)```"", 'comment_created': datetime.datetime(2020, 7, 8, 21, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 451845378, 'comment_body': ""But nice find! Wonder why this didn't result in a bug so far...\r\n/cc @nithusha21 "", 'comment_created': datetime.datetime(2020, 7, 8, 21, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 451845885, 'comment_body': ""> Do we really need to compare the entire object in this case?\r\n\r\nI'm not sure too."", 'comment_created': datetime.datetime(2020, 7, 8, 21, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 451846192, 'comment_body': 'Also, in general, always add the complete URL in the codebase. SO answers/questions generally have short URLs.', 'comment_created': datetime.datetime(2020, 7, 8, 21, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 451846720, 'comment_body': 'Actually the complete url was longer than 80 chars :sweat_smile: ', 'comment_created': datetime.datetime(2020, 7, 8, 21, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 451847811, 'comment_body': 'Oh click on the share button and copy the link. They are already shortened.\r\neg. https://stackoverflow.com/q/11704971, https://stackoverflow.com/a/11705017', 'comment_created': datetime.datetime(2020, 7, 8, 21, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 451848546, 'comment_body': 'Please take a look at the code and figure out if entire object needs to be compared. If not, use the method described above. Thanks!', 'comment_created': datetime.datetime(2020, 7, 8, 21, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 451937702, 'comment_body': ""Should we move this to the `domain/user/` dir? (COnsidering it's related to users and `user` sounds more like a domain name.)"", 'comment_created': datetime.datetime(2020, 7, 9, 3, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 452064083, 'comment_body': 'Please change this per discussion in comment thread [here](https://github.com/oppia/oppia/pull/9798#discussion_r451844989).', 'comment_created': datetime.datetime(2020, 7, 9, 8, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 452202201, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 9, 13, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 452202262, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 9, 13, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 453216833, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 11, 17, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': 'fe38908656a1effe85772072996c6a4db16f490e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43769ba703caa8a5b05ea322c1b2aff4bbdd42c6', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e3aa3eb06962bdc59b3651176905c5dfbb1627c', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1bce97f14f8c95216708df55675d28c53e64fad', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cf9edd4082ab506bbf028408c957911aa7d48ee', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08ebde9b78d100e8947b7643b0c3de7f515b4603', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '113af642ff00db06737874f0acf51bed88ac7797', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6336773476bff7bad7eea87049e548c73cf6cde7', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4404c6ec0150bc5f98794f58077aefc51f6e1ea', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4aec3b517561d4c953c1a2058cde9ae8ea5a472', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '655d5dc5b5a6944aa88fd479cfad3cd6f835f281', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47352175c87e3e99090fdaf37d028ea575b4632c', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a5b3036f087a76336510b4aaca7eae18af5a865', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37b438b108e4268752aadc03ff4d75076691f3b4', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0ac1f1fac70808783d8dd30a4c6e14ac0e70b77', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff2628fa6149d2f474e3fb685c2d4bd8e1691249', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dc6a5b10697465d23b4fc1376de82e572c6d3db', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fdc9c7216883959bcde91144f9a7447865bccec', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e3f66f453d03fbba358e545ca8260f67cac297d', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc80227a1003601aab6a73c1e4320a4de32cd766', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a129e86f94dacd402c41ca72203a572b2128caca', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8587a2077192d0260cf5e68d014127a232a74d4e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
445668328,Upgrade version of wavesurfer and use type defs from DefinitelyTyped,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of NA
2. This PR does the following: Upgrade version of wavesurfer and use type defs from DefinitelyTyped
## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9831,https://api.github.com/repos/oppia/oppia/pulls/9831,https://github.com/oppia/oppia/pull/9831,closed,14,99,5,2,4,0,1,1,[{'name': 'PR: LGTM'}],2020-07-07 20:47:25+00:00,2020-07-09 11:17:34+00:00,138609.0,"1 day, 14:30:09",[],"[{'commit_sha': '44fafd0a1b7716238d3639a6f2a31ad280c76425', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9166ef809b779281845a099feb91ee5753a06d1', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
446529237,Fix part of #7165: Remove some more any types,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #7165 
2. This PR does the following: Remove some more any types

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9854,https://api.github.com/repos/oppia/oppia/pulls/9854,https://github.com/oppia/oppia/pull/9854,closed,182,96,18,15,3,40,0,1,[],2020-07-08 23:08:22+00:00,2020-07-17 10:48:44+00:00,733222.0,"8 days, 11:40:22","[{'comment_id': 452046757, 'comment_body': 'Do we still need this check? It should be checked by the TypeScript right?', 'comment_created': datetime.datetime(2020, 7, 9, 8, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 452048231, 'comment_body': 'Why not only `Schema[]`?', 'comment_created': datetime.datetime(2020, 7, 9, 8, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 452049366, 'comment_body': 'Do we still need this check? It should be checked by the TypeScript right?', 'comment_created': datetime.datetime(2020, 7, 9, 8, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 452049887, 'comment_body': 'Why not `Env`?', 'comment_created': datetime.datetime(2020, 7, 9, 8, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 452179119, 'comment_body': 'Because if you see here in the list of valid schemas\r\nhttps://github.com/oppia/oppia/blob/804751e8a43285e5b88e604330a66f4481856278/schema_utils_test.py#L408-L412\r\n\r\n`items` can be either list of schemas or only a single schema.', 'comment_created': datetime.datetime(2020, 7, 9, 12, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 452179611, 'comment_body': 'I think we need this if we get some invalid input in runtime like null, undefined than the function should just return that invalid value.', 'comment_created': datetime.datetime(2020, 7, 9, 12, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 452179675, 'comment_body': 'I think we need this if we get some invalid input in runtime like null, undefined than the function should just return that invalid value.', 'comment_created': datetime.datetime(2020, 7, 9, 12, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 452179720, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 9, 12, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 452320171, 'comment_body': 'Name suggests that this is an array? or is it not?', 'comment_created': datetime.datetime(2020, 7, 9, 15, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 452411360, 'comment_body': 'yeah, right. ', 'comment_created': datetime.datetime(2020, 7, 9, 18, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 452444220, 'comment_body': 'Why are we removing this?', 'comment_created': datetime.datetime(2020, 7, 9, 19, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 452445291, 'comment_body': 'because the types are automatically inferred now as the type of `input` is known.', 'comment_created': datetime.datetime(2020, 7, 9, 19, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 453250533, 'comment_body': ""Hmm I find it hard to believe that angular doesn't provide these types, are you sure there isn't an `@angular/...` module which provides these?"", 'comment_created': datetime.datetime(2020, 7, 12, 0, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 453250625, 'comment_body': 'I only see one place where this is returned, and it is returned as a string. Use `string` as the type instead of `Object`, if that is the case.', 'comment_created': datetime.datetime(2020, 7, 12, 0, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 453250646, 'comment_body': 'Please sort.', 'comment_created': datetime.datetime(2020, 7, 12, 0, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 453252446, 'comment_body': 'Please sort.', 'comment_created': datetime.datetime(2020, 7, 12, 1, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 453252528, 'comment_body': 'Please define a union type and use that instead.', 'comment_created': datetime.datetime(2020, 7, 12, 1, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 453252613, 'comment_body': 'Please use `.hasOwnProperty` instead, here and elsewhere.', 'comment_created': datetime.datetime(2020, 7, 12, 1, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 453326598, 'comment_body': ""I don't think this is related with angular but with webpack. Also, I couldn't find these types anywhere."", 'comment_created': datetime.datetime(2020, 7, 12, 14, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 453326639, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 12, 14, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 453326645, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 12, 14, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 453326652, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 12, 14, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 453326932, 'comment_body': 'There are typescript errors if I use that. Btw, any specific reason to use that. Using `in` the typescript infers automatically the possible cases where `choices` may be present.', 'comment_created': datetime.datetime(2020, 7, 12, 14, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 453327091, 'comment_body': 'No, there are `Objects` passed as the `ENV`.', 'comment_created': datetime.datetime(2020, 7, 12, 15, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 454617096, 'comment_body': 'Please fix the names of these parameters to use `camelCase`.', 'comment_created': datetime.datetime(2020, 7, 14, 20, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 454617768, 'comment_body': 'Hmm OK, as long as we stay consistent this is fine with me then.', 'comment_created': datetime.datetime(2020, 7, 14, 20, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 454622358, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 14, 20, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 454627477, 'comment_body': '@nishantwrp please provide evidence (links to parts of the code). Try to do this in general when making assertions in comment threads.', 'comment_created': datetime.datetime(2020, 7, 14, 20, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 454631821, 'comment_body': 'Here \r\nhttps://github.com/oppia/oppia/blob/4a0850d03e10d70a7bd8024e874e4a35d3f38811/core/templates/expressions/expression-syntax-tree.service.ts#L84\r\n\r\n`this.system` is is treated like a Env. And it is a dict of objects.\r\nhttps://github.com/oppia/oppia/blob/4a0850d03e10d70a7bd8024e874e4a35d3f38811/core/templates/expressions/expression-syntax-tree.service.ts#L252-L261\r\n\r\nAlso like outside this file they `strings` are also used like @brianrodri mentioned. So, I think here we could use a generic type `Object`.', 'comment_created': datetime.datetime(2020, 7, 14, 20, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455003618, 'comment_body': ""Sorry @nishantwrp, I'm a bit confused by your reply.\r\n\r\n- The code snippets you gave do not actually help. The first one doesn't prove that this.system is a dict of objects (though I can see that it is treated like an Env).\r\n- I don't understand the relevance of the second code example, which has neither reference to Env or this.system.\r\n\r\nFor your reference, I took a look at the code and I thought that lookupEnvs was a good example of a method that would have answered my question -- notice the `env[name]` construct.\r\n\r\nI would like to understand the other part though. My understanding is that env is always a dict, which should be a non-string. So could you list the string cases? I suspect they are wrong and we should fix them."", 'comment_created': datetime.datetime(2020, 7, 15, 12, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456004423, 'comment_body': ""I'm also getting a bit confused now on the `env`. Now you saw that the `this.system` is a `env`. And `env` has a `name` property as in the `lookupEnvs`. You can see the value of `this.system` here.\r\n\r\nhttps://github.com/oppia/oppia/blob/13b1da20ee6c0e4eabc9720a3d1ca3d87c62fe8c/core/templates/expressions/expression-syntax-tree.service.ts#L158-L175\r\n\r\nNow this is a totally different thing?"", 'comment_created': datetime.datetime(2020, 7, 16, 18, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 456025024, 'comment_body': 'Isn\'t `name` an argument, not a property? It can take different values, it\'s not the literal string ""name"".', 'comment_created': datetime.datetime(2020, 7, 16, 19, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456047588, 'comment_body': ""Oh, yes sorry. But I have one more question. \r\n```typescript\r\n<string> env[name];\r\n```\r\nsuggests that the properties in env should be string. But looking at `this.system` above we don't see that ?"", 'comment_created': datetime.datetime(2020, 7, 16, 20, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 456052573, 'comment_body': 'Yes, the string cast/typing seems wrong. ', 'comment_created': datetime.datetime(2020, 7, 16, 20, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456053567, 'comment_body': ""Wait actually I'm not 100% certain about that. Let me read it a bit more. It would help if you could also try to understand what's going on too."", 'comment_created': datetime.datetime(2020, 7, 16, 20, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456057565, 'comment_body': ""OK, interesting, this might be polymorphic. I can't do this right now (in meetings) but what I suggest you do is take a look at core/templates/expressions/expression-type-parser.service.spec.ts and try to puzzle out how that works, especially around the calls to applyFunctionToParseTree(). (But take a look at the whole test to understand what it's doing.) See if you can post your analysis/understanding here regarding the role of this.system, and if you need help after that, we can figure out next steps."", 'comment_created': datetime.datetime(2020, 7, 16, 20, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456080633, 'comment_body': ""As far as I understood the type of env from it's usage like\r\n\r\nhttps://github.com/oppia/oppia/blob/38e07878998a252835fcdce895fe8e06f6124d47/core/templates/expressions/expression-type-parser.service.ts#L62-L63\r\n\r\nThat the type of env will be like `this.system` i.e. two functions `eval and getType`."", 'comment_created': datetime.datetime(2020, 7, 16, 21, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 456101557, 'comment_body': 'Can you provide more analysis? What are other examples of envs besides `this.system`? Point to these in the codebase at the points where it\'s specified, try to ""show your work"" so that the reader can understand how you got to your conclusion.\r\n\r\nTry to do this for all questions, otherwise we keep going back and forth.', 'comment_created': datetime.datetime(2020, 7, 16, 21, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456141485, 'comment_body': ""Ok. So first of all `ExpressionSyntaxTreeService` is used in three places.\r\n\r\n- `ExpressionTypeParserService` - This service actually isn't used anywhere. But uses only `lookupEnvs` function.\r\n- `ExpressionEvaluatorService` - This service is used in `ExpressionInterpolationService` and uses `lookupEnvs` and `applyFunctionToParseTree` function.\r\n- `ExpressionInterpolationService` - Uses both `ExpressionSyntaxTreeService` and `ExpressionEvaluatorService`. Uses only `getParamsUsedInExpression` function of `ExpressionSyntaxTreeService` which doesn't have anything to do with `envs`. This is the **only** service that is used in other places in the codebase.\r\n\r\nNow only the `evaluateExpression` function in the `ExpressionEvaluatorService` is used in the `ExpressionInterpolationService`. So, the main function that could tell what's really happening is `evaluateExpression`.\r\n\r\nhttps://github.com/oppia/oppia/blob/38e07878998a252835fcdce895fe8e06f6124d47/core/templates/expressions/expression-evaluator.service.ts#L72-L75\r\n\r\nAs it can be seen that it calls `applyFunctionToParseTree` which is \r\nhttps://github.com/oppia/oppia/blob/38e07878998a252835fcdce895fe8e06f6124d47/core/templates/expressions/expression-syntax-tree.service.ts#L77-L80\r\n\r\nWhich concats the `this.system` to the envs. Now finally the `func` argument in the above function always is `evaluate` function which is.\r\n\r\nhttps://github.com/oppia/oppia/blob/38e07878998a252835fcdce895fe8e06f6124d47/core/templates/expressions/expression-evaluator.service.ts#L84-L109\r\n\r\nThis finally clears all the doubts regarding the envs.\r\n\r\nSo initially envs are just the values of external variables like `a` or `b` and looks something like\r\n```typescript\r\n[{\r\n  a: 1,\r\n  b: 2\r\n}]\r\n```\r\nand afterwards the `this.system` is also included in the envs.\r\n\r\nand when there is a `expression` passed to `evaluateExpression` like `a+b`. The `ExpressionParserService.parse` converts it to something like `['+', ['#', 'a'], ['#', 'b']]`. `#` as I've understood is something which tells that the next element is a variable. And hence the `evaluate` function returns the result `a+b` i.e. 3. \r\n\r\n## Conclusion\r\n\r\nEnv can be either `this.system` or the values of variables. (The exploration parameters which I'm assuming would be string or numbers). I've updated the types accordingly. "", 'comment_created': datetime.datetime(2020, 7, 16, 23, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 456367773, 'comment_body': 'Good, well done, this sounds right to me. Thanks @nishantwrp! (And hopefully this provides a blueprint for the sort of thing you should do when you conduct future investigations :) )', 'comment_created': datetime.datetime(2020, 7, 17, 10, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}]","[{'commit_sha': '77daadac2b3757bf0d369ca1efd3aecf8a87715b', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c3e8b12e9af9806e1d5f637746753b3f0547e7f', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19ba5c30607e258d39f8de7dcf5323429a8bd421', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e23aac9bfd6519401cc86ed0707bdf401aa8818c', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0480598e70a5bf88cfc3ba43945bfc97ae1f96c', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a0850d03e10d70a7bd8024e874e4a35d3f38811', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00b6b671e981b91ebb249436ab723ffeb197aab6', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '802c8f27a4ddcea92f34f1b2a5ed45c423dad6fb', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5376e02f04a8117fc6685ff02e9c2fadc72fa4e0', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5666189d9e00e8744472544e71a70526e939ec44', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '854e1ecb9b7a6e18b9a67f421086e6120d55e044', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8307798050b38294a9b4c69a74cae48e0c93e794', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddc102b08345f7baecdc0f198ab13e02ae60556e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '583276ad3545cf341cbf256c192d5c3ee933acd0', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88db3249b37443ae41ab97397b580ec4e931f059', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
447800477,Fix part of #8015: Return a domain object in backend api services,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #8015 
2. This PR does the following: Return a domain object in backend api services

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9883,https://api.github.com/repos/oppia/oppia/pulls/9883,https://github.com/oppia/oppia/pull/9883,closed,510,220,31,10,6,11,0,1,[],2020-07-11 18:21:09+00:00,2020-07-14 00:09:55+00:00,193726.0,"2 days, 5:48:46","[{'comment_id': 453283639, 'comment_body': 'Add one empty line above.', 'comment_created': datetime.datetime(2020, 7, 12, 8, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 453283798, 'comment_body': 'Please break after `putData`', 'comment_created': datetime.datetime(2020, 7, 12, 8, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 453284117, 'comment_body': 'break after `chapterCompletionUrl, {}`', 'comment_created': datetime.datetime(2020, 7, 12, 8, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 453284149, 'comment_body': '```suggestion\r\ninterface ExplorationRatings {\r\n```', 'comment_created': datetime.datetime(2020, 7, 12, 8, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 453325184, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 12, 14, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 453325197, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 12, 14, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 453325215, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 12, 14, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 453325226, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 12, 14, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 453589752, 'comment_body': 'We are not returning domain object here, right?', 'comment_created': datetime.datetime(2020, 7, 13, 11, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 453597544, 'comment_body': ""Yeah, you're right we can return a domain object. I'll refactor it."", 'comment_created': datetime.datetime(2020, 7, 13, 11, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 453623208, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 13, 12, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': 'be66f1ac54aa071b94d050acf1b9e0c38837ecc4', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64a25fad2aaed9c72ec43a925ccc39b0745aa35d', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3af1df5a40ba23cbef77ff454c0c77f3c6b9674', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3528bd561915903aef7c8fe64a0d87a2369830fc', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7868bbbf5ed2e6419baeefbdb2c91a54e65c9278', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbdba60c8e8a88526a7191b5de862a4ab532aad4', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eb8f9752972d6594aa5a6eb57d3237b65dc1507', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69afe2929ac7fe459b48aaf2d60138ff880e3be6', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05a5dc8f5e0cf21d348dcf33cf423e805543d291', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0f39adc1f4fb252da5a076907389fbb356d4d33', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
449793944,Fix part of #8015 and Fix #9914: Refactor backend-api services to return domain objects.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #8015.
Fixes #9914 
2. This PR does the following: Refactor backend-api services to return domain objects.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9917,https://api.github.com/repos/oppia/oppia/pulls/9917,https://github.com/oppia/oppia/pull/9917,closed,1817,685,99,15,12,74,0,1,[],2020-07-15 23:23:25+00:00,2020-07-20 18:03:51+00:00,412826.0,"4 days, 18:40:26","[{'comment_id': 455421116, 'comment_body': ""I removed this because of two reasons\r\n- `categorized_skills_dict` is a dict with topic names as keys. In typescript if there's a dict all the values should be of same type.\r\n- The same information was already being returned in `untriaged_skill_summary_dicts`."", 'comment_created': datetime.datetime(2020, 7, 15, 23, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455423155, 'comment_body': 'Thanks @nishantwrp, adding @Showtim3 for review since he can advise on whether this change makes sense.', 'comment_created': datetime.datetime(2020, 7, 15, 23, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455424283, 'comment_body': 'Ok @seanlip, Please note that to declare a type for this in the backend-api service. This is **necessary**.', 'comment_created': datetime.datetime(2020, 7, 15, 23, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455425751, 'comment_body': ""Yup sorry -- I don't disagree. I think @Showtim3 and you would need to collaborate to make sure that the changes to the data structure look good and are propagated correctly. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 15, 23, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455745863, 'comment_body': ""This should be moved before `require('domain/skill/skill-backend-api.service.ts');`. K is after h in the alphabet ditto below."", 'comment_created': datetime.datetime(2020, 7, 16, 12, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455747383, 'comment_body': 'You changed the logic here a bit, could you please explain the changes?', 'comment_created': datetime.datetime(2020, 7, 16, 12, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455748070, 'comment_body': 'Maybe `TranslationCountsBackendDict`?', 'comment_created': datetime.datetime(2020, 7, 16, 12, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455755989, 'comment_body': 'Maybe `StateInteractionIdsBackendDict`.', 'comment_created': datetime.datetime(2020, 7, 16, 12, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455756326, 'comment_body': 'Maybe `StateTopAnswersBackendDict`.', 'comment_created': datetime.datetime(2020, 7, 16, 12, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455756956, 'comment_body': ""```suggestion\r\n  'answers': StateTopAnswerBackendDicts;\r\n  'interaction_ids': StateInteractionIds;\r\n```"", 'comment_created': datetime.datetime(2020, 7, 16, 12, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455757767, 'comment_body': '```suggestion\r\n    for (let stateName in backendDict.answers) {\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 12, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455758255, 'comment_body': '```suggestion\r\n  ReadOnlySubtopicPageData,\r\n  ReadOnlySubtopicPageObjectFactory,\r\n  SubtopicDataBackendDict\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 12, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455760173, 'comment_body': '```suggestion\r\n          skillSummary: ShortSkillSummary) => {\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 12, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455760782, 'comment_body': 'Why not \r\n```suggestion\r\n  getUncategorizedSkillSummaries(): ShortSkillSummary[] {\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 12, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455763629, 'comment_body': 'Why `Short`?', 'comment_created': datetime.datetime(2020, 7, 16, 12, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455764090, 'comment_body': '```suggestion\r\n  ReadOnlyTopic,\r\n  ReadOnlyTopicBackendDict,\r\n  ReadOnlyTopicObjectFactory\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 12, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455764546, 'comment_body': '```suggestion\r\n  AssignedSkill,\r\n  AssignedSkillBackendDict,\r\n  AssignedSkillObjectFactory\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 12, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455764900, 'comment_body': '```suggestion\r\n  AugmentedSkillSummary,\r\n  AugmentedSkillSummaryBackendDict,\r\n  AugmentedSkillSummaryObjectFactory\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 12, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455765213, 'comment_body': '```suggestion\r\n  ShortSkillSummary,\r\n  ShortSkillSummaryBackendDict,\r\n  ShortSkillSummaryObjectFactory\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 12, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455765568, 'comment_body': '```suggestion\r\nimport { SkillSummary, SkillSummaryBackendDict, SkillSummaryObjectFactory } from\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 12, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455765835, 'comment_body': '```suggestion\r\nimport { TopicSummary, TopicSummaryBackendDict, TopicSummaryObjectFactory } from\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 12, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455767991, 'comment_body': '```\r\n  FeaturedTranslationLanguage,\r\n  FeaturedTranslationLanguageBackendDict,\r\n  FeaturedTranslationLanguageObjectFactory\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 13, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455770206, 'comment_body': '```suggestion\r\nimport { UserProfile, UserProfileBackendDict, UserProfileObjectFactory } from\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 13, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455801986, 'comment_body': 'Thanks for fixing this!', 'comment_created': datetime.datetime(2020, 7, 16, 13, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455802874, 'comment_body': ""This should be move before `require('domain/skill/skill-backend-api.service.ts');`."", 'comment_created': datetime.datetime(2020, 7, 16, 13, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455803964, 'comment_body': ""```suggestion\r\n    ShortSkillSummaryObjectFactory = $injector.get('ShortSkillSummaryObjectFactory');\r\n```"", 'comment_created': datetime.datetime(2020, 7, 16, 13, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455807280, 'comment_body': '```suggestion\r\n  StateTopAnswersStats,\r\n  StateTopAnswersStatsBackendDict,\r\n  StateTopAnswersStatsObjectFactory\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455808303, 'comment_body': '```suggestion\r\n        for (let stateName in stateTopAnswersStats.answers) {\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 14, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 455827082, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455829983, 'comment_body': ""Ok So before my changes `categorizedSkills` was a dict with keys as topic names and there was one extra key `untriaged` which contained the untriaged skills. `hasUntriagedSkills` checks if the `topicName === 'untriaged'`. So what this did was iterated through the complete `categorizedSkills` and displayed the one with `untriaged` as key.\r\n\r\nI refactored the `categorizedSkills` to not contain that extra key. Instead use a separate variable `untriagedSkillSummaries` for that purpose."", 'comment_created': datetime.datetime(2020, 7, 16, 14, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455831316, 'comment_body': 'Actually this is a type which is also used in the domain object. So, adding backend would suggest that it needs to be converted to a domain object which is not the case here.', 'comment_created': datetime.datetime(2020, 7, 16, 14, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455831382, 'comment_body': 'Actually this is a type which is also used in the domain object. So, adding backend would suggest that it needs to be converted to a domain object which is not the case here.', 'comment_created': datetime.datetime(2020, 7, 16, 14, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455831442, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455831544, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455831601, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455831678, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455831789, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455831848, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455831935, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455832022, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455832126, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455832194, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455832285, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455832369, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455832440, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455832521, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455833028, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455833082, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455833156, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455833264, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 16, 14, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 455835632, 'comment_body': 'https://github.com/oppia/oppia/pull/9917#issuecomment-659453697', 'comment_created': datetime.datetime(2020, 7, 16, 14, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 456403381, 'comment_body': 'Okay, makes sense', 'comment_created': datetime.datetime(2020, 7, 17, 12, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 456764917, 'comment_body': 'Should be stateName not state, right? Ditto elsewhere.\r\n\r\nBe careful to distinguish between these two concepts.', 'comment_created': datetime.datetime(2020, 7, 18, 8, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456765204, 'comment_body': ""I wonder if there's any way you can think of to reduce the duplication a bit, here and elsewhere in this file. Otherwise, the important information about the differences between the different dicts gets lost in the overall jumble of information. Perhaps you could use a for loop."", 'comment_created': datetime.datetime(2020, 7, 18, 8, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456765426, 'comment_body': 'This seems like a functionality change. Where is currentUser defined?\r\n\r\nIf it is an error, why was it not caught?', 'comment_created': datetime.datetime(2020, 7, 18, 8, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456765600, 'comment_body': 'Woah. Why do we have ""username"" and ""profile username""? That\'s just confusing.\r\n\r\nAre both needed? What is the difference between the two fields?\r\n\r\nAlso you should not be renaming this to ""currentUser"". Please be really careful about the names of things. A ""user"" and a ""username"" are different. I\'ve seen this pattern in a couple places now so I\'d like to request that you audit all the fields and feel free to ask questions if you are not sure whether a renaming is valid.', 'comment_created': datetime.datetime(2020, 7, 18, 8, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456765883, 'comment_body': '(Note: this is probably covered by the comment below.)', 'comment_created': datetime.datetime(2020, 7, 18, 8, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456773213, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 18, 9, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 456773221, 'comment_body': 'does it look good now?', 'comment_created': datetime.datetime(2020, 7, 18, 9, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 456773411, 'comment_body': ""Yes it's defined in `user-profile-object.factory.ts`."", 'comment_created': datetime.datetime(2020, 7, 18, 9, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 456773678, 'comment_body': 'profile usename -> the username of profile being visited.\r\nusername -> This is the username of the user currently logged in. This is sent along with almost every endpoint.\r\n\r\n> Are both needed\r\n\r\nThis is used in that page just to determine if any user is logged in.\r\n\r\nShould I change it to `currentUsername` instead?', 'comment_created': datetime.datetime(2020, 7, 18, 10, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 456773936, 'comment_body': 'Add spaces around <', 'comment_created': datetime.datetime(2020, 7, 18, 10, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456774066, 'comment_body': 'Yes, I think so, thanks.', 'comment_created': datetime.datetime(2020, 7, 18, 10, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456774236, 'comment_body': 'username and usernameOfViewedProfile should work, I think. Best to keep ""username"" consistent everywhere.\r\n\r\nAlso, you have not replied to my last paragraph. Please make sure to respond to **all** parts in a comment. I would like a confirmation that you have reviewed every field -- probably what makes the most sense is for you to please list all the name changes explicitly here, with links to the code for each of those.', 'comment_created': datetime.datetime(2020, 7, 18, 10, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456776799, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 18, 10, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 456777026, 'comment_body': '> username and usernameOfViewedProfile should work, I think. Best to keep ""username"" consistent everywhere.\r\n\r\ndone.\r\n\r\nAh, sorry! I think I missed the last para. I had some doubts with it.\r\n\r\n> I\'ve seen this pattern in a couple places now so I\'d like to request that you audit all the fields and feel free to ask questions if you are not sure whether a renaming is valid.\r\n\r\nI didn\'t actually understand which pattern?\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 18, 10, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 456801969, 'comment_body': 'Yeah the changes look okay. Tested them locally also.', 'comment_created': datetime.datetime(2020, 7, 18, 15, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Showtim3', 'type': 'User'}, {'comment_id': 456836049, 'comment_body': ""The pattern of renaming fields to different names (i.e. anywhere where there's any sort of difference between the key name in the backend dict, the attribute name of the frontend object, or the variable used to refer to a value in the dict/object).\r\n\r\nDoes that clarify?"", 'comment_created': datetime.datetime(2020, 7, 18, 22, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456848615, 'comment_body': '@seanlip i had some questions\n1. does that mean that in some cases like this one to change the name of field in backend_dict too? (changing profile_username to username_of_viewed_profile)\n2. In some cases the backend_dict says skill_id and in the domain it is changed to id. Should these kind of cases be also changed?\n', 'comment_created': datetime.datetime(2020, 7, 19, 2, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 456849995, 'comment_body': 'Renaming is fine in some cases as long as it is not confusing. Hence the request for a list of all instances (with links to the relevant lines of code) so that I can give you specific advice.', 'comment_created': datetime.datetime(2020, 7, 19, 2, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456936273, 'comment_body': ""Here are instances I could find\r\n\r\nhttps://github.com/oppia/oppia/blob/f3ec0b4e15059ab8e6b452abca8bb9e59b6292bf/core/templates/domain/topic_viewer/read-only-topic-object.factory.ts#L38-L61\r\n\r\nHere properties like `additional_story_dicts` is renamed to `additionalStorySummaries`. I personally think, this is okay!\r\n\r\n\r\nThis file -> https://github.com/oppia/oppia/blob/develop/core/templates/domain/user/profile-summary-object.factory.ts\r\nThis is a common object factory for two backend dicts because it doesn't make sense to make a separate objects for these dicts.\r\n\r\nHere -> https://github.com/oppia/oppia/blob/develop/core/templates/domain/exploration/RuleObjectFactory.ts\r\n`rule_type` is renamed to just `type`. \r\n\r\nHere -> https://github.com/oppia/oppia/blob/develop/core/templates/domain/question/QuestionSummaryObjectFactory.ts\r\nI've corrected this one!\r\n\r\nHere -> https://github.com/oppia/oppia/blob/develop/core/templates/domain/skill/SkillSummaryObjectFactory.ts\r\nI think thats okay!\r\n\r\nHere -> https://github.com/oppia/oppia/blob/develop/core/templates/domain/skill/SkillRightsObjectFactory.ts\r\nCorrected this one!\r\n\r\nHere -> https://github.com/oppia/oppia/blob/develop/core/templates/domain/feedback_thread/FeedbackThreadSummaryObjectFactory.ts\r\nCorrected this one!"", 'comment_created': datetime.datetime(2020, 7, 19, 17, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 456936337, 'comment_body': '@seanlip ptal!', 'comment_created': datetime.datetime(2020, 7, 19, 17, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 456994191, 'comment_body': 'Leave this as it was (_questionId) and perhaps update the backend dict accordingly. Better to be clearer about what entity has the id (the question, not the question summary).', 'comment_created': datetime.datetime(2020, 7, 20, 2, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457272316, 'comment_body': '>Better to be clearer about what entity has the id (the question, not the question summary).\r\n\r\nGot it! done!', 'comment_created': datetime.datetime(2020, 7, 20, 10, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': '0b5f9378db8e7f780660ae8691e596b24bbfc9ba', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de976b507d9269635ac3d720b963c2c2b3ce2ef5', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95bf9bb6e735475b0654855e27ea4941cc1b9084', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c76eca2ec03be43b01c3e07a4373e255df26d5bb', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e26a86d07bf824e6162e78b841009b6277c36cf', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba3649383d2cf1e42a99d5c69ff7a0dd4b050410', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa12cccc61555c2b30e0990513eeb974d50261e7', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3830025ca31fb8cbbd46fce8fa229fc62ece44ba', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89b955ee4f9368c708f170c838bf1abcb2c9996e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1404990987cdfd08e255b40edb3f16f06e83b565', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '196dd3333e7d5c61387f3ffc5fe0cc7461590cc0', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50123abaac660bfcfa2b10d79e553f132846bb54', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65f528d12c16fc474b1b199e2c1ef19aae0f7605', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f63e7a1ed4c2b74b234be96cabb7a58d25be7d7a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '433651765548d856b86ba6aa6a6413938e154167', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
454657964,Fix #7165: Remove remaining any types and move any check to eslint,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes #7165.
2. This PR does the following: Remove remaining any types and move any check to eslint

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9990,https://api.github.com/repos/oppia/oppia/pulls/9990,https://github.com/oppia/oppia/pull/9990,closed,153,223,25,4,4,12,1,1,[{'name': 'PR: LGTM'}],2020-07-21 17:55:28+00:00,2020-07-23 02:36:24+00:00,117656.0,"1 day, 8:40:56","[{'comment_id': 458305259, 'comment_body': '```suggestion\r\n    this.http.get<PretestQuestionsBackendResponse>(\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 18, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 458305434, 'comment_body': '```suggestion\r\ninterface PretestQuestionsBackendResponse {\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 18, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 458306248, 'comment_body': 'Could you please create an issue for this? I guess this will be removed after Angular migration? Ditto below', 'comment_created': datetime.datetime(2020, 7, 21, 18, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 458307322, 'comment_body': 'Please create an issue for these.', 'comment_created': datetime.datetime(2020, 7, 21, 18, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 458401804, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 21, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 458401851, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 21, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 458407557, 'comment_body': 'filed #9996', 'comment_created': datetime.datetime(2020, 7, 21, 21, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 458407596, 'comment_body': 'filed #9996', 'comment_created': datetime.datetime(2020, 7, 21, 21, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 458675385, 'comment_body': 'Please replace `YashJipkate` with the `#9996`. Ditto in other places.', 'comment_created': datetime.datetime(2020, 7, 22, 9, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 458738450, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 22, 11, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 458834150, 'comment_body': 'I don\'t see ""unknown"" type being used in other places. Can you please explain why we need it? Ditto below.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 458921449, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 22, 16, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': '9af0dbbd01670bf6c1ee2a652daf8d61dec2de16', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af9f4ed1dfe9393941d8b843b59e42523c1280b0', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e53e81230eef3a29788a9d6a075d479a74ea691', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28b42ce46edb4af05839b927d050a3e0acbf893d', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
456798204,Fix 9996 and Fix part of #9982: Refactor backend api services and remove remaining any types,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes #9996, part of #9982 
2. This PR does the following: Refactor backend api services and remove remaining any types

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10054,https://api.github.com/repos/oppia/oppia/pulls/10054,https://github.com/oppia/oppia/pull/10054,closed,670,301,57,8,7,20,0,1,[],2020-07-26 20:02:23+00:00,2020-07-27 20:55:06+00:00,89563.0,"1 day, 0:52:43","[{'comment_id': 460567886, 'comment_body': 'Should resolve, reject have types?\r\n\r\nAlso, what is the general plan for ensuring that everything is fully typed?', 'comment_created': datetime.datetime(2020, 7, 26, 20, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460568150, 'comment_body': 'Can you add a lint check that disallows ""no-explicit-any"" anywhere in the codebase? Probably just adding it to the list of forbidden strings suffices (but make sure it applies to the right files).\r\n\r\nIn general, think about how to ensure that the measures you are putting in place now will hold forever.', 'comment_created': datetime.datetime(2020, 7, 26, 20, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460568425, 'comment_body': ""I've refactored \r\n```typescript\r\nreturn this.http.get(...).then(response => {\r\n  ...\r\n  return something;\r\n}, error {\r\n  throw new Error(error.error.error);\r\n});\r\n```\r\n\r\nto \r\n\r\n```typescript\r\nreturn new Promise((resolve, reject) => {\r\n  this.http.get(...).then(response => {\r\n    ...\r\n    resolve(something);\r\n  }, error {\r\n    reject(error.error.error);\r\n  });\r\n});\r\n```\r\n\r\nBecause the first one when rejecting the promise gives an instance of `Error` object. but the second one gives a string. In almost every other places in the codebase we return a string in case of a rejection. So, I did this to bring consistency. Also in many places we use `AlertsService` to throw errors from backend. This makes it easy to do that.\r\n"", 'comment_created': datetime.datetime(2020, 7, 26, 20, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 460568828, 'comment_body': 'They have types already. (They are inferred automatically by the ts compiler)', 'comment_created': datetime.datetime(2020, 7, 26, 20, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 460569757, 'comment_body': 'Ah ok, thanks. One question to clarify then: does the TS compiler complain if anything isn\'t fully typed?\r\n\r\nAlso can you add some info about this ""inferring"" stuff to the [wiki page](https://github.com/oppia/oppia/wiki/Guide-on-defining-types)? I think contributors need to understand the cases in which we need to add types and those in which it\'s not necessary to do so.', 'comment_created': datetime.datetime(2020, 7, 26, 20, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460570239, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 26, 20, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 460570426, 'comment_body': '> Ah ok, thanks. One question to clarify then: does the TS compiler complain if anything isn\'t fully typed?\r\n\r\nNot yet, but we can enable a check after the angular migration. (Because then everything will have types.)\r\n\r\n> Also can you add some info about this ""inferring"" stuff to the wiki page? I think contributors need to understand the cases in which we need to add types and those in which it\'s not necessary to do so.\r\n\r\nOkay.', 'comment_created': datetime.datetime(2020, 7, 26, 20, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 460570828, 'comment_body': '```suggestion\r\ninterface CollectionCreationBackendDict {\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 7, 26, 20, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 460571393, 'comment_body': ""Why do you need to wait for the Angular migration for everything to have types?\r\n\r\nCan't things have types before the Angular migration? We can't really consider types to be fully in place until types are enforced universally, and the Angular migration is going to take a while."", 'comment_created': datetime.datetime(2020, 7, 26, 20, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460572387, 'comment_body': ""What about `//eslint-disable-next-line@typescript-eslint/no-explicit-any`, `//eslint-disable-next-line         @typescript-eslint/no-explicit-any` (I'm not sure if these are valid)."", 'comment_created': datetime.datetime(2020, 7, 26, 20, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 460573414, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 26, 21, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 460573438, 'comment_body': 'yup, these are invalid statements. These lead to other errors.', 'comment_created': datetime.datetime(2020, 7, 26, 21, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 460574049, 'comment_body': ""Because the structure of the angular js files does not favor typing. There are no classes. But a single \r\n```typescript\r\nangular.module('oppia', ..., function(...) {  })\r\n```\r\nthat contains all the stuff.\r\n\r\nSo, defining types for angular js files is not possible. I even discussed this thing in my GSoC Proposal(https://docs.google.com/document/d/1fIoXVtO3Br2BtuR2B8XnsmJsHTAd3SjsGhUbjENJuPc/edit#bookmark=id.qceznp891cbq). "", 'comment_created': datetime.datetime(2020, 7, 26, 21, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 460574680, 'comment_body': ""OK, noted. Thanks (and sorry for forgetting that!)\r\n\r\nThat said -- a different question. Can the TS compiler complain if anything isn't fully typed, for migrated files only?"", 'comment_created': datetime.datetime(2020, 7, 26, 21, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460575245, 'comment_body': 'Nope because it there is no check for that because there is no way it can know if the file is in angular or angular js.', 'comment_created': datetime.datetime(2020, 7, 26, 21, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 460575616, 'comment_body': ""OK, thanks. Let's move this to an email thread to see what's possible (it won't block the merge of this PR)."", 'comment_created': datetime.datetime(2020, 7, 26, 21, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460576157, 'comment_body': 'any --> ""any""\r\n\r\nGreat idea to refer to the wiki page -- thanks!', 'comment_created': datetime.datetime(2020, 7, 26, 21, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460576192, 'comment_body': ""Don't think you need all the surrounding stuff -- just have a check for 'no-explicit-any'? That will catch more stuff."", 'comment_created': datetime.datetime(2020, 7, 26, 21, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460576863, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 26, 21, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 460576901, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 26, 21, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': '698996f11a6a74329cd2899d89ab38d803b02e88', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47e7c9b76398f92638f4d6586c4b96ca66501ad6', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab0711ca101e499ffabeb58ff7ca9512b394f1f3', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99829d45e0649353ba714890cf134710808b9ab3', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa3a2a548a16af12803f4ec2df14cb912707aee8', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4cd00b079281c6eaf464c18a85eb5187fc11c00', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49771e1c08c873f2547de8f9d460920ee9eb9bf2', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a39fb3f8b50466058f799449ada4c97792a032f', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
457892185,Add a lint check for ts-ignore,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes #10120
2. This PR does the following: Add a lint check for ts-ignore

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10088,https://api.github.com/repos/oppia/oppia/pulls/10088,https://github.com/oppia/oppia/pull/10088,closed,782,224,55,34,5,122,0,1,[],2020-07-28 15:38:39+00:00,2020-07-31 15:41:47+00:00,259388.0,"3 days, 0:03:08","[{'comment_id': 461776952, 'comment_body': 'Should we also add line numbers here? So that people do not add the same errors but on different lines?', 'comment_created': datetime.datetime(2020, 7, 28, 18, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 461778920, 'comment_body': ""I don't think that would work because people might have to change the line numbers here again and again when they edit these files."", 'comment_created': datetime.datetime(2020, 7, 28, 18, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462124754, 'comment_body': 'Can you use `@ts-expect-error` instead for test code (see docs online for why this is best practice)? Also add a check to forbid use of `@ts-expect-error` in non-spec files.\r\n\r\nThen you can omit such examples from this file.', 'comment_created': datetime.datetime(2020, 7, 29, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462125823, 'comment_body': 'Firstly, I am a bit confused. In https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-6.html it says ""ts-ignore suppresses errors on the following line"". But the ""following line"" here is a comment, so surely it has no errors and the ts-ignore can be removed?\r\n\r\nIf the line that is being suppressed is the line of code, then the thing quoted in this file should be the line of code (i.e. the line that is being suppressed) and the check should be modified accordingly.\r\n\r\n(Also, random aside: below this line in the original file, there is a typo: ore --> more.)', 'comment_created': datetime.datetime(2020, 7, 29, 8, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462130752, 'comment_body': 'I don\'t understand the comment associated with this one. Can you either fix it, or elaborate on it and perhaps point to a reference?\r\n\r\nAlso, for consistency, let\'s break after each ""["" in this file.', 'comment_created': datetime.datetime(2020, 7, 29, 8, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462131566, 'comment_body': 'There is no explanation for these ts-ignores. I think your lint checks should also require that each ts-ignore is followed by an explanation, as is best practice.\r\n\r\nPer https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-6.html : ""It is recommended practice to have the remainder of the comment following `@ts-ignore` explain which error is being suppressed.""', 'comment_created': datetime.datetime(2020, 7, 29, 8, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462131937, 'comment_body': 'What does the comment ""mediaDevices is read-only error"" mean? That does not make sense to me. Perhaps it needs elaboration.', 'comment_created': datetime.datetime(2020, 7, 29, 8, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462132103, 'comment_body': ""Same thing, I don't understand the comment attached to this. It needs more elaboration."", 'comment_created': datetime.datetime(2020, 7, 29, 8, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462133414, 'comment_body': ""Don't understand the comment above this one. It doesn't explain why the suppression is needed."", 'comment_created': datetime.datetime(2020, 7, 29, 8, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462133953, 'comment_body': ""Try to explain what we're trying to test with this file -- what it's trying to exemplify. Walk through the file and explain what is valid and what is not valid."", 'comment_created': datetime.datetime(2020, 7, 29, 8, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462160193, 'comment_body': 'Also -- one general note, please try to remove ts-ignores wherever possible (again, per  https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-6.html).\r\n\r\nI think that, in the comment that accompanies the ts-ignore, you should make it a convention to clearly include the error message that shows up when the ts-ignore is removed, followed by an explanation. This will help developers understand what exactly the problem is and allow reviewers to evaluate if it is reasonable or not.\r\n\r\nPlease fix for all instances of ts-ignore that remain in this file. You can use a format like\r\n\r\n```\r\n@ts-ignore This throws a ""Property \'camelCase\' is missing in type \'(selector: any, context: any) => any\'"" error. We need to manually suppress this error because ...\r\n```\r\n\r\nand have all your comments be in a similar format, and have the lint check require this format too.', 'comment_created': datetime.datetime(2020, 7, 29, 9, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462454437, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 29, 17, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462454558, 'comment_body': 'Elaborated ', 'comment_created': datetime.datetime(2020, 7, 29, 17, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462454667, 'comment_body': 'added explanation', 'comment_created': datetime.datetime(2020, 7, 29, 17, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462454748, 'comment_body': 'added explanation', 'comment_created': datetime.datetime(2020, 7, 29, 17, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462454799, 'comment_body': 'added explanation', 'comment_created': datetime.datetime(2020, 7, 29, 17, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462454875, 'comment_body': 'added explanation', 'comment_created': datetime.datetime(2020, 7, 29, 17, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462454975, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 29, 17, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462455839, 'comment_body': ""done. Also I've used the convention\r\n```\r\n// Explanation why the error is caused. Why we need to suppress it.\r\n// @ts-ignore\r\n```\r\nThis way it will be easier for the lint check to check for the explanation."", 'comment_created': datetime.datetime(2020, 7, 29, 17, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462460758, 'comment_body': ""I think `@ts-expect-error` can also be used in non `spec` files. Also, I've added a check for it along with the `ts-ignore` check since it may also be unnecessarily used to suppress errors.\r\n\r\nAlso FYI -- The places where we used `@ts-ignore` can be divided into the following categories.\r\n\r\nI think we can use `@ts-expect-error` here.\r\n1. Where the control shouldn't reach ideally. Example - (https://github.com/oppia/oppia/pull/10088/files#diff-d28bc2a637cdc32be5d1da90d8f067e2R114-R116)\r\n2. Assigning invalid types to test validations in spec files. Example - (https://github.com/oppia/oppia/pull/10088/files#diff-e4cc090fa5747257556fcac5fc4384ddR142-R143)\r\n\r\nand `@ts-ignore` here.\r\n1. More properties are expected while mocking an object. Example - (https://github.com/oppia/oppia/pull/10088/files#diff-7034e0434cc3ccf243d9c8b4f8a4da2fR143-R146)\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 29, 17, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462543552, 'comment_body': ""Missing closing double quote somewhere (I can't tell where)."", 'comment_created': datetime.datetime(2020, 7, 29, 19, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462544057, 'comment_body': 'Please verify that the explanatory comment starts with `This throws ""..."".` and has something nonempty after that message. (Impose a specific format. Be clear in the error message what format is expected.)', 'comment_created': datetime.datetime(2020, 7, 29, 19, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462546256, 'comment_body': 'Don\'t understand the second part. The last part of that statement holds for ... pretty much all functionality in the JS files in general, so the explanation is insufficient to explain why the ts-ignore is needed for this case and not for others.\r\n\r\nAlso, maybe explain, after the first sentence, something like ""This only happens on Chrome."" etc.', 'comment_created': datetime.datetime(2020, 7, 29, 19, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462547020, 'comment_body': ""I don't see any dot notation to remove."", 'comment_created': datetime.datetime(2020, 7, 29, 19, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462549740, 'comment_body': 'Be clearer; try not to write in ""abbreviated sentences"". (When you say ""but is not to test validations"" it kinda sounds like you\'re doing something to not test validation, which is not what you mean, I think.) Reread what you wrote from the perspective of an external reader, to double-check clarity.\r\n\r\nE.g.:\r\n\r\nThe task type should be \'high bounce rate\', but we set it to an invalid value here in order to test validations.\r\n\r\nDitto elsewhere.', 'comment_created': datetime.datetime(2020, 7, 29, 19, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462552238, 'comment_body': 'Try to write a really clear comment, similar to the example I gave above. Use multiple sentences if necessary, but be precise. (Again, ditto elsewhere.)', 'comment_created': datetime.datetime(2020, 7, 29, 19, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462552674, 'comment_body': '""thumbnail"" is misspelled. Please proofread. Also similar comments about docstring clarity apply.', 'comment_created': datetime.datetime(2020, 7, 29, 19, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462554047, 'comment_body': 'This throws ""..."". We suppress this error because the MathJax instructions at [LINK] explicitly instruct us to set window.MathJax to a MathJax config, which will only be changed to a MathJax object (which is what the typescript compiler expects) after the MathJax library loads.', 'comment_created': datetime.datetime(2020, 7, 29, 20, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462555029, 'comment_body': '... need only the ""files"" property for testing.\r\n\r\nThat said -- please file an issue and add a TODO here for changing the code being tested to not use DOM methods. This seems to be an anti-pattern in Angular and is the sort of thing the TS compiler checks would help with avoiding in the future (at the very least, a reviewer would hopefully see this and ask questions).', 'comment_created': datetime.datetime(2020, 7, 29, 20, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462555155, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2020, 7, 29, 20, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462556240, 'comment_body': 'Just checking -- what changed? Why was it needed before and not now?', 'comment_created': datetime.datetime(2020, 7, 29, 20, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462557074, 'comment_body': ""ts-expect-error? (here + below) \r\n\r\nI think that's the general thing to use for these cases."", 'comment_created': datetime.datetime(2020, 7, 29, 20, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462557707, 'comment_body': 'Same thing, ts-expect-error, ditto for this sort of use case in other spec files', 'comment_created': datetime.datetime(2020, 7, 29, 20, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462557850, 'comment_body': ""Add a space before '('. Do this in general for prose."", 'comment_created': datetime.datetime(2020, 7, 29, 20, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462558569, 'comment_body': 'If this also checks ts-expect-error ... do we need to update the name/docstring/printed-stuff/varnames/etc.?', 'comment_created': datetime.datetime(2020, 7, 29, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462559758, 'comment_body': ""I think you can drop spec files from this list if we use ts-expect-error for them. I think that's going to be a common case and it's fine to have that be a pattern. We should still prevent abuse, so perhaps the best approach is to add a separate list that whitelists the specific objects for which we allow ts-expect-error.\r\n\r\nIn general, these exception lists should be small and comprehensive."", 'comment_created': datetime.datetime(2020, 7, 29, 20, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462560306, 'comment_body': 'Yes, that convention seems fine, thanks!', 'comment_created': datetime.datetime(2020, 7, 29, 20, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462560592, 'comment_body': '...used, but no...', 'comment_created': datetime.datetime(2020, 7, 29, 20, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462563184, 'comment_body': 'I disagree with using `@ts-expect-error` in non-spec files. As a general rule, we should not be expecting errors in code that runs in production. Also I think that it helps with having clear conventions.\r\n\r\nI suggest that we use ts-expect-error for the last two cases you mentioned above (mocking system objects in spec files where there are too many properties to feasibly mock, and assigning invalid types for validation testing). Everything else is ts-ignore. How does that sound?\r\n\r\nAlso, sorry -- I\'m having trouble finding the ""where the control shouldn\'t reach ideally"" case. The link you provided doesn\'t seem to work for me, it just shows the general Files Changed page. Could you please elaborate?', 'comment_created': datetime.datetime(2020, 7, 29, 20, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462563858, 'comment_body': ""Actually, scratch the exception list for ts-expect-error. We use that also for testing validations and I don't think it makes sense to have an exception list for those. I still think that having a check that ts-expect-error is only used in spec files, and dropping spec files from this list if we use ts-expect-error for them, is the way to go."", 'comment_created': datetime.datetime(2020, 7, 29, 20, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462568233, 'comment_body': '@seanlip You can refer -> https://github.com/oppia/oppia/blob/develop/core/templates/services/schema-default-value.service.ts#L114. Here the value of `schema.type` is only supposed to be one of `bool`, `unicode`, `html`, `list`, `dict`, `int`, `float`. And if it is none of them we have the last else block. (Which should ideally never happen)', 'comment_created': datetime.datetime(2020, 7, 29, 20, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462569690, 'comment_body': '> I suggest that we use ts-expect-error for the last two cases you mentioned above (mocking system objects in spec files where there are too many properties to feasibly mock, and assigning invalid types for validation testing). Everything else is ts-ignore. How does that sound?\r\n\r\nI think the `ts-expect-error` should be used in the places where we know an error is going to pop up for sure. So, I think the first type should also use the `ts-expect-error`.', 'comment_created': datetime.datetime(2020, 7, 29, 20, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462573292, 'comment_body': ""I see, thanks. That usage seems fine. Is it a general usage? If not then I think we can treat it as a one-off, similar to MathJax.\r\n\r\nYou might also be able to get rid of it altogether by throwing an Error, especially if it's not supposed to happen in prod. Just double-check the PR that introduced that line of code to make sure there aren't reasons for logging an error rather than throwing one (maybe link that PR here). If there's no good reason for only soft-logging, then you can just replace that stuff with throwing an error and you won't need the ts-ignore."", 'comment_created': datetime.datetime(2020, 7, 29, 20, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462574827, 'comment_body': '> I think the ts-expect-error should be used in the places where we know an error is going to pop up for sure. So, I think the first type should also use the ts-expect-error.\r\n\r\nSee the comment just above this one for ideas on what we do with it.\r\n\r\nAlso, I do get your point, but I think there is value in introducing a clear and simple codebase-wide convention and it would be better not to muddy it where possible.', 'comment_created': datetime.datetime(2020, 7, 29, 20, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462646873, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 29, 23, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462646968, 'comment_body': 'it is in the next line', 'comment_created': datetime.datetime(2020, 7, 29, 23, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462646996, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 29, 23, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462647071, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 29, 23, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462647112, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 29, 23, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462647145, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 29, 23, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462647173, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 29, 23, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462647211, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 29, 23, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462647460, 'comment_body': '`window` was missing a definition for `$` added that.', 'comment_created': datetime.datetime(2020, 7, 29, 23, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462647501, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 29, 23, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462647535, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 29, 23, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462647578, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 29, 23, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462647711, 'comment_body': 'now there is a separate check for ts-expect-error. ', 'comment_created': datetime.datetime(2020, 7, 29, 23, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462647775, 'comment_body': '> I still think that having a check that ts-expect-error is only used in spec files, and dropping spec files from this list if we use ts-expect-error for them, is the way to go.\r\n\r\ndone', 'comment_created': datetime.datetime(2020, 7, 29, 23, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462648476, 'comment_body': ""I've refactored the else block to log the complete `schema` we are receiving. This way we don't have to use `@ts-ignore`."", 'comment_created': datetime.datetime(2020, 7, 29, 23, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462648838, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 29, 23, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462649852, 'comment_body': 'done. Filed #10113.', 'comment_created': datetime.datetime(2020, 7, 29, 23, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462650126, 'comment_body': 'corrected', 'comment_created': datetime.datetime(2020, 7, 29, 23, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 462705238, 'comment_body': 'There is no closing double quote in the next line. Where do you see it?', 'comment_created': datetime.datetime(2020, 7, 30, 2, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462705389, 'comment_body': 'Deprecated --> deprecated', 'comment_created': datetime.datetime(2020, 7, 30, 2, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462705625, 'comment_body': ""Please fix -- you're not using TS ignore any more. I suggest you impose the same convention that we use for ts-ignore for explanations of why the check is necessary."", 'comment_created': datetime.datetime(2020, 7, 30, 3, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462705726, 'comment_body': 'User --> Use\r\n\r\n(Please proofread your changes!)', 'comment_created': datetime.datetime(2020, 7, 30, 3, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462705962, 'comment_body': 'Complete sentences please. Include ""The"" in the relevant places. E.g.:\r\n\r\n""Here, the task_type should be \'ineffective_feedback_loop\', but we set it to an invalid value in order to test validations.""\r\n\r\nDitto elsewhere.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462706025, 'comment_body': 'Two ""but""s. Again, please proofread.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462706239, 'comment_body': 'Please make this clearer and follow conventions elsewhere. If you put quotes around the type elsewhere, do so here too. All the cases in these stats-related files should have very similar comments.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462706405, 'comment_body': 'Here, the playthrough dict has been assigned ...\r\n\r\n(not ""is"", the assignment isn\'t happening in the line below. Also missing ""the"".)', 'comment_created': datetime.datetime(2020, 7, 30, 3, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462706444, 'comment_body': 'Please proofread this and fix it. See notes above.\r\n\r\nDitto below.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462706997, 'comment_body': ""There's a misinterpretation here. The aim was to get the *code* not to use DOM methods. That way, document.getElementById doesn't need to be mocked.\r\n\r\nPlease also make your issue more descriptive and clear. Include more context and explanation so that it is self-explanatory, and point to the relevant code files which need to be fixed. Don't just file one-line issues. Your issue should enumerate all the tasks that need to be done in order to be properly complete. All the necessary context should be in the issue, don't force the user to click through to files in order to see what the issue is about."", 'comment_created': datetime.datetime(2020, 7, 30, 3, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462707155, 'comment_body': 'files --> ""files""', 'comment_created': datetime.datetime(2020, 7, 30, 3, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462707186, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462707486, 'comment_body': 'Not using TS ignore any more. Please fix.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462707619, 'comment_body': 'This is an excellent comment! Very clear.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462707841, 'comment_body': '... doesn\'t match the type of the actual $.ajax. ...\r\n\r\nAlso it\'s kind of vague. What do you mean by ""the type of function we are using here""? Give more detail.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462707900, 'comment_body': 'Ditto here and below.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462707960, 'comment_body': 'Please also fix all other instances of this mismatch.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462708230, 'comment_body': 'Too vague. In what way do they not match? Also put quotes around ""element"" if you are referring to that term in the codebase and not a generic element.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462708367, 'comment_body': 'Nice idea for a fix!', 'comment_created': datetime.datetime(2020, 7, 30, 3, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462708514, 'comment_body': ""Spelling -- please proofread.\r\n\r\nAlso, in what way do they not match -- please explain. (The point of this is to be clear to the reader about why we can't just make them match.)"", 'comment_created': datetime.datetime(2020, 7, 30, 3, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462708690, 'comment_body': 'Not enough. You had a comment somewhere back explaining how we purposely set the value to an invalid type to check validation -- that context is useful here as well.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462708924, 'comment_body': 'Drop the second ""here"".\r\n\r\nAlso it is still not clear what the error being tested is. I think the ts-expect-error comments need to also specify the error message, similar to ts-ignore.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462709231, 'comment_body': 'actual --> the actual\r\n\r\nDitto below.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462709533, 'comment_body': 'Require specification of the error message, similar to ts-ignore.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462710024, 'comment_body': ""Add more cases, e.g. where there's a comment but not of the correct format. (Try to signal, through other comments in this test file, what each of those cases checks.)"", 'comment_created': datetime.datetime(2020, 7, 30, 3, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462710059, 'comment_body': ""Add more cases, e.g. where there's a comment but not of the correct format. (Try to signal, through other comments in this test file, what each of those cases checks.)"", 'comment_created': datetime.datetime(2020, 7, 30, 3, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462710223, 'comment_body': 'This is a *much* better list. Thanks for shortening it.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462710371, 'comment_body': 'Where is the check to force ts_expect_error to occur only in spec files?', 'comment_created': datetime.datetime(2020, 7, 30, 3, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 463012042, 'comment_body': 'Oh, ok. Sorry was referring to another comment. added that now.', 'comment_created': datetime.datetime(2020, 7, 30, 13, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463012207, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463012353, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463012469, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463012674, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463012750, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463012861, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463012995, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463013150, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463013272, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463013479, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463013693, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463013838, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463013938, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463014279, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463014379, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463014498, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463014633, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463014790, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463014890, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463014969, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463015548, 'comment_body': ""It's there in this function itself.See line 404."", 'comment_created': datetime.datetime(2020, 7, 30, 13, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463015772, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 13, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463019025, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 30, 14, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463086236, 'comment_body': 'Have you tested this in the topic editor, when trying to create questions?', 'comment_created': datetime.datetime(2020, 7, 30, 15, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 463086327, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 7, 30, 15, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 463159945, 'comment_body': 'yup, i did that. Also you can see `questions-list-select-skill-and-difficulty-modal.controller.ts` to see the changes I did.', 'comment_created': datetime.datetime(2020, 7, 30, 17, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463160001, 'comment_body': 'yup', 'comment_created': datetime.datetime(2020, 7, 30, 17, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463162094, 'comment_body': 'Also while testing that I found a bug #10120 and I fixed that. (it was only one line fix)', 'comment_created': datetime.datetime(2020, 7, 30, 17, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463252904, 'comment_body': ""Just a note -- something seems wrong here, because the get() should be a function. I think they are declared wrongly at the top -- should be using '&' rather than '=' perhaps for one-way binding.\r\n\r\nOK to fix separately, but could you please file an issue? Make sure the issue is very clear and fully enumerates the steps of what to do. Check with one of the LaCE team leads whether they understand it and can fix it.\r\n\r\nThanks!"", 'comment_created': datetime.datetime(2020, 7, 30, 20, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 463274493, 'comment_body': ""@seanlip filed #10124. Can you ptal at the issue? I'm not sure if I've understood the issue correctly. (As far as I've understood the names of the props are invalid. It looks like they are functions but are not. So, they need to be renamed. Is that correct?) "", 'comment_created': datetime.datetime(2020, 7, 30, 21, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 463331264, 'comment_body': ""Thanks @nishantwrp, I think it suffices.  I left an additional comment that might help.\r\n\r\nThere are two possible fixes, basically. One is to change the names since they're not functions. But the other is to change the binding, so that the inner code only reads from the outer code and there's no two-way syncing. That latter option might be better if the binding doesn't actually need to be two-way (one-way binding is more efficient)."", 'comment_created': datetime.datetime(2020, 7, 30, 23, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}]","[{'commit_sha': '24f4764a3f5921625bedd0251409d9152b8954c3', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bac48bb0ce96c31e9fc47830254e73e67e3ac61', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa2052a3c989bf582ee80f34af8aa5b2286d9988', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f6202ad7722d9886a2c3d9b3a33636ce9110c7a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b774dd31136145eb37afcde848cb1d808dfe53b7', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd3e1adbd724dd47f403f648c294a790f75c8917', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49a5b8cb11875392ab26978d3913becd537519d7', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5babdb1e375843f8c82bc30ff0029bdf907599e5', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be3aa3c878608e88c3ab48aceb1bdb16a87aabda', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65eb04fc448cdabf51733361792fc00bbe14b774', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f45b6124449160cedccdd6a74e47cb66cf7668cf', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c57ebb9b0e16fe7f179332635596eb262676561', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43c32bb978d0354516262dd9a9e524f2a1e0284e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ccb3aa9441970da5346015cdd6ed43c6b6ea12e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b914f50f5c35e1eacb0dcea28c260e2b7cd2ee25', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bd7d22f17d0f3c5a1230715f1f96f8f25b694cf', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb59c8f464380f115aa6244b46ec679b19486edd', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75a08d598a24d87c16e063febb14f93ef4dd3097', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eaf98ca793209a6ff37990f1c8ea6dd30a07036', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afe9c187bbb2950810d6610934db4ec4407c1b90', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d40f589488774bdb6cef9cbbc567c32a8f05f71', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92d1fae91a8ddbb16781af412cfe3a0c90129a41', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f0a4686b5c27f140a9afc63ec3334bf32a450a5', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a84275f88d586b09ddca1a2c59e4fdae1a2fee44', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e479cfbbdeb272e6603aea100b6dd5823a495e5a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52c7827d8c3ac2b5732fabdc709d7f88004e521e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aad2a6222d049dd33fce150ce14521fbb37e010', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1baff0ec8cca88af1845a206c6c83cba64d1605e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb003e0fe8ef5f0a7a0d643e5b8c62fb2d4e7039', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87b14fbf1f5b3c06c5a323db0f598247d08014ba', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bcfc4a00fcd7f3a013cb51d3aa77652af6811da', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81fb23a16185a306c00a51ad9792337299a915ea', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f30ed7098466cd96103f1b5bc22cf8e2467ac05', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d7a21fb8948cb4c2092a55bab8a816da78aef9e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
460577134,Rename all .scripts.ts files to .import.ts,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: Rename all .scripts.ts files to .import.ts.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10132,https://api.github.com/repos/oppia/oppia/pulls/10132,https://github.com/oppia/oppia/pull/10132,closed,42,42,43,1,5,0,0,1,[],2020-07-31 22:36:05+00:00,2020-08-03 06:34:36+00:00,201511.0,"2 days, 7:58:31",[],"[{'commit_sha': 'daba4b6eb1dac316f2a38aacf7e5cd1d8d6d893e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
457977197,Fix #10055: Remove unneeded optional properties,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes #10055 
2. This PR does the following: Remove question marks in customization-args-defs.ts

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10093,https://api.github.com/repos/oppia/oppia/pulls/10093,https://github.com/oppia/oppia/pull/10093,closed,1071,168,35,9,7,51,0,1,[],2020-07-28 18:27:48+00:00,2020-08-13 17:11:17+00:00,1377809.0,"15 days, 22:43:29","[{'comment_id': 461800151, 'comment_body': 'I think that the comment should be more descriptive.', 'comment_created': datetime.datetime(2020, 7, 28, 18, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 461951005, 'comment_body': 'Ditto below.', 'comment_created': datetime.datetime(2020, 7, 28, 23, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 462178624, 'comment_body': 'Strongly agree. Please see comments in #10088.', 'comment_created': datetime.datetime(2020, 7, 29, 9, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 464131881, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 2, 22, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 464132119, 'comment_body': ""I added a generic type `Object` here because I realized that adding different kinds of changes we use don't make sense here because this service that technically accepts any kind of change."", 'comment_created': datetime.datetime(2020, 8, 2, 22, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 464245563, 'comment_body': 'Here and below: could you please change the backend response to return null if new structures are not enabled, rather than leave out the key-value pair altogether? /cc @aks681 ', 'comment_created': datetime.datetime(2020, 8, 3, 7, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 464245823, 'comment_body': 'But then we should handle it similarly to playthroughs / interactions and fully enumerate those kinds of changes, otherwise we\'re going against the principles of type safety. (One day, we might be able to tighten this up yet further, but I think ""Object"" is too loose.)', 'comment_created': datetime.datetime(2020, 8, 3, 7, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 464246430, 'comment_body': 'I think you can always keep it but have it be null?\r\n\r\nAlso, try to define the whole ""params"" dict at once, rather than in stages.', 'comment_created': datetime.datetime(2020, 8, 3, 7, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 464246963, 'comment_body': ""typo: params (ditto two lines below, too).\r\n\r\nI don't understand the justification for optional properties. Can't we fully fix the list of properties, using techniques similar to those mentioned in my previous comments above?"", 'comment_created': datetime.datetime(2020, 8, 3, 7, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 464247475, 'comment_body': 'We are purposely assigning the wrong type of ...\r\n\r\n(ditto elsewhere in the other files)', 'comment_created': datetime.datetime(2020, 8, 3, 7, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 465357367, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 4, 22, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 465357471, 'comment_body': 'see comment below', 'comment_created': datetime.datetime(2020, 8, 4, 22, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 465357518, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 4, 22, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 465358103, 'comment_body': 'I don\'t think so. Because for example when I tried to do that the URL is something like `?collection_id=null` and the backend receives the collection_id as ""null"" and starts to look for a collection with id `""null""` and which in return gives an error. \r\n', 'comment_created': datetime.datetime(2020, 8, 4, 22, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 465358380, 'comment_body': 'Makes sense. Will add types here. ', 'comment_created': datetime.datetime(2020, 8, 4, 22, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 465588099, 'comment_body': 'Ah, I see what you mean, thanks for clarifying. Could you clarify the comment please? Currently it\'s very vague ""may not be applicable"" and I think you want to replace that with something more concrete like ""may not be present in the URL"". You can also add a note that, otherwise, we will end up sending a url like `?collection_id=null` which will not be recognized by the backend.', 'comment_created': datetime.datetime(2020, 8, 5, 9, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 465588349, 'comment_body': 'OK, please give a clearer comment (see below).', 'comment_created': datetime.datetime(2020, 8, 5, 9, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 466034674, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 5, 22, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 466034698, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 5, 22, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 466181001, 'comment_body': ""Technically, shouldn't this be an empty list?\r\n\r\nAlso I'm a bit confused. In creator-dashboard-backend-api-service.ts, if the variable is declared as TopicSummaryBackendDict[], shouldn't this error be detected?\r\n\r\nAlso, I'm surprised there isn't a backend test coverage error for these lines. Any idea why?"", 'comment_created': datetime.datetime(2020, 8, 6, 6, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 466185886, 'comment_body': 'Surely you can be more specific than ""Object"", here and below?', 'comment_created': datetime.datetime(2020, 8, 6, 6, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 466186286, 'comment_body': 'backend --> the backend', 'comment_created': datetime.datetime(2020, 8, 6, 6, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 466186355, 'comment_body': 'backend --> the backend', 'comment_created': datetime.datetime(2020, 8, 6, 6, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 466628200, 'comment_body': 'Not the full story, `message` is optional primarily because that is the interface provided by the actual `Error` class.', 'comment_created': datetime.datetime(2020, 8, 6, 19, 10, 28, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 467336935, 'comment_body': 'Why are we evaluating these many values and returning `[]` at the end? Can we move this else condition on top?', 'comment_created': datetime.datetime(2020, 8, 8, 0, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 467337023, 'comment_body': 'Add a unit test for this', 'comment_created': datetime.datetime(2020, 8, 8, 0, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 467342984, 'comment_body': '[Question unrelated to this PR] I see `is_cancelable` is that the same field?', 'comment_created': datetime.datetime(2020, 8, 8, 1, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 467627070, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 9, 20, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 467627074, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 9, 20, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 467627088, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 9, 20, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 467627147, 'comment_body': 'actually there is no evaluation done for `topic_summary_dicts` if the new structures are not enabled.', 'comment_created': datetime.datetime(2020, 8, 9, 20, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 467627153, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 9, 20, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 467627235, 'comment_body': 'Nope! \r\n\r\nhttps://github.com/oppia/oppia/blob/6f99ce42489ff0d0cca419e750c4f0e3759b4bd3/core/controllers/admin.py#L89-L93', 'comment_created': datetime.datetime(2020, 8, 9, 20, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 467627248, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 9, 20, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 467627510, 'comment_body': ""> Technically, shouldn't this be an empty list?\r\n\r\ndone\r\n\r\n> Also I'm a bit confused. In creator-dashboard-backend-api-service.ts, if the variable is declared as TopicSummaryBackendDict[], shouldn't this error be detected?\r\n\r\nHow could this error be detected, I mean typescript doesn't know what's there in the backend?\r\n\r\nAlso, we can assign `null` to any type.\r\n\r\n> Also, I'm surprised there isn't a backend test coverage error for these lines. Any idea why?\r\n\r\nThere was a test for checking the response when the new structures are not enabled.\r\n"", 'comment_created': datetime.datetime(2020, 8, 9, 20, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 467632638, 'comment_body': ""Wow good catch @nishantwrp. Why wasn't this detected before?"", 'comment_created': datetime.datetime(2020, 8, 9, 21, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467632733, 'comment_body': 'This, as written, does not make sense. Please clarify it.', 'comment_created': datetime.datetime(2020, 8, 9, 21, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467632817, 'comment_body': ""The changes here are much better -- and, as you've seen, they've caught some errors that would have gone undetected otherwise. Thanks @nishantwrp! "", 'comment_created': datetime.datetime(2020, 8, 9, 21, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467632943, 'comment_body': ""> How could this error be detected, I mean typescript doesn't know what's there in the backend?\r\n\r\nAh I didn't realize you could assign null to any type. I think that explains it (I would have thought something else in the frontend would error).\r\n\r\n>> Also, I'm surprised there isn't a backend test coverage error for these lines. Any idea why?\r\n\r\n> There was a test for checking the response when the new structures are not enabled.\r\n\r\nCould you please update the existing test, or add a new one, so that this error would have been caught? In general, always adopt that mentality when bug-fixing, i.e. try to make it such that the problem can never happen again in the future. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 9, 21, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 468081771, 'comment_body': 'I think we should do this check on top and return the value instead of doing it here. wdyt?', 'comment_created': datetime.datetime(2020, 8, 10, 18, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 468082485, 'comment_body': 'Something like:\r\n\r\n```\r\n if not something_enabled:\r\n   self.render(...)\r\n   return\r\n\r\n.\r\n.\r\n.\r\n.\r\n\r\nself.render(....)\r\n\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 18, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 468085190, 'comment_body': ""I think I misunderstood this change. Ignore my comments, I'll mark this comment resolved. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 10, 18, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 469446394, 'comment_body': '> Could you please update the existing test, or add a new one, so that this error would have been caught? In general, always adopt that mentality when bug-fixing, i.e. try to make it such that the problem can never happen again in the future. Thanks!\r\n\r\nI already did that.', 'comment_created': datetime.datetime(2020, 8, 12, 18, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 469446535, 'comment_body': 'updated! is it fine now?', 'comment_created': datetime.datetime(2020, 8, 12, 18, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 469448376, 'comment_body': ""It is because there is no usage of this interface that imply `showChoicesInShuffledOrder` is a `bool`. It was used in one place as \r\n\r\n```typescript\r\n\r\nif (showChoicesInShuffledOrder) {\r\n...\r\n}\r\n\r\n```\r\n\r\nNow as you can see it's also valid if it were a string."", 'comment_created': datetime.datetime(2020, 8, 12, 18, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 469640262, 'comment_body': 'Yes, much better -- thanks!', 'comment_created': datetime.datetime(2020, 8, 13, 1, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 469640407, 'comment_body': 'Oh yep, sorry, missed that. Thanks!', 'comment_created': datetime.datetime(2020, 8, 13, 1, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 470239120, 'comment_body': '@nishantwrp Hi Nishant, I have a question here.. why is highlightRegionsOnHover here a string for ImageClickInputCustomizationArgsBackendDict, but a boolean for ImageClickInputCustomizationArgs? Ditto for InteractiveMapCustomizationArgsBackendDict (zoom is a string on backend dict, but a number for frontend)', 'comment_created': datetime.datetime(2020, 8, 13, 20, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shavavo', 'type': 'User'}, {'comment_id': 470242317, 'comment_body': ""For now, I've changed the backend dicts to match the frontend ones. Let me know if that's a bad change."", 'comment_created': datetime.datetime(2020, 8, 13, 20, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shavavo', 'type': 'User'}, {'comment_id': 470243505, 'comment_body': 'yup, it should be boolean in both', 'comment_created': datetime.datetime(2020, 8, 13, 20, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 470244113, 'comment_body': 'Gotchu- thanks for the quick response', 'comment_created': datetime.datetime(2020, 8, 13, 20, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shavavo', 'type': 'User'}]","[{'commit_sha': '749c4a761201024617555d6256a87e2121e588f5', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9bedbf316c55fd909cf3a1c57452f269ba04abb', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1f9971b179b845138cbc07b9d6861332cc876c0', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c067cc117a0df78ff1a368b7cbd11bab73d64714', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd251e7ef586cfaa4c59bda3fb2813e8d418f6fbd', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f595658f041f5804c245c67fad81aff5e90794cd', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5317db17c6904c31390d4b989ab36e5485648ffa', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aff8bbeb756967b54c5e4c87e2417d1b08b143c3', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b6835667b563dc98a9cbf1d3296dfd7ea6bec4c', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
462295577,Move scripts imports in header to webpack,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: Move scripts imports in header to webpack

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10141,https://api.github.com/repos/oppia/oppia/pulls/10141,https://github.com/oppia/oppia/pull/10141,closed,712,386,102,12,4,22,0,1,[],2020-08-03 17:10:21+00:00,2020-08-08 12:58:19+00:00,416878.0,"4 days, 19:47:58","[{'comment_id': 464752938, 'comment_body': '```suggestion\r\n * @fileoverview This file imports the jQuery, jQuery UI.\r\n```', 'comment_created': datetime.datetime(2020, 8, 4, 1, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 464764232, 'comment_body': 'Why is this moved, also it is possible to replace this by Angular? We want to limit the direct usage of jQuery as much as possible.', 'comment_created': datetime.datetime(2020, 8, 4, 2, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 464764782, 'comment_body': 'Why is this moved?', 'comment_created': datetime.datetime(2020, 8, 4, 2, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 464765672, 'comment_body': 'Why you are at it could you please try to limit the number of libs that we import here? I think for the basic pages you can inspire in pending deletion page or delete account page.', 'comment_created': datetime.datetime(2020, 8, 4, 2, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 464765705, 'comment_body': 'Ditto below', 'comment_created': datetime.datetime(2020, 8, 4, 2, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 464765901, 'comment_body': 'Why is this added?', 'comment_created': datetime.datetime(2020, 8, 4, 2, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 465016427, 'comment_body': 'It was there in the `.import.ts` file but it should be here. imo, the `.import.ts` should have jquery and module as the first two things.', 'comment_created': datetime.datetime(2020, 8, 4, 12, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 465016596, 'comment_body': ""I'll do it in my further PRs. "", 'comment_created': datetime.datetime(2020, 8, 4, 12, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 465022160, 'comment_body': 'Third party libs need angular. Angular is included in bundle so, we have to load `third_party.js` after our webpack bundles.', 'comment_created': datetime.datetime(2020, 8, 4, 12, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 465035943, 'comment_body': ""> Why is this moved\r\n\r\nIt uses jQuery and jQuery is now loaded in the webpack bundle, so, it needs to be after the footer_libs import.\r\n\r\n> is it possible to replace this by Angular?\r\n\r\nThis page currently has no controller. It's just a `mainpage.html`. \r\n\r\nAlso, I think the smooth scroll doesn't work. You can see it here -> https://www.oppia.org/terms"", 'comment_created': datetime.datetime(2020, 8, 4, 13, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 465037414, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 4, 13, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 465398433, 'comment_body': 'Could you please introduce a controller then?', 'comment_created': datetime.datetime(2020, 8, 5, 0, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 465398642, 'comment_body': 'Okay.', 'comment_created': datetime.datetime(2020, 8, 5, 0, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 465398739, 'comment_body': 'Makes sense.', 'comment_created': datetime.datetime(2020, 8, 5, 0, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 465399116, 'comment_body': 'Or somehow manage it so that there is functionality similar to this piece of code.', 'comment_created': datetime.datetime(2020, 8, 5, 0, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 465715564, 'comment_body': 'done. added an angular component. Also fixed the smooth scroll :) \r\n\r\nbefore\r\n![before (1)](https://user-images.githubusercontent.com/36989112/89416556-0f73fc80-d74b-11ea-9190-87126505024b.gif)\r\n\r\nafter\r\n![after (1)](https://user-images.githubusercontent.com/36989112/89416660-3a5e5080-d74b-11ea-8795-ec22357dc6fb.gif)\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 5, 13, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 466742556, 'comment_body': ""Do I need to be on this one? Probably not because it hasn't got any of the actual content?"", 'comment_created': datetime.datetime(2020, 8, 6, 23, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 466742813, 'comment_body': 'Also just to check -- why is this different for the privacy vs the terms page? I.e. why is one changing but not the other?', 'comment_created': datetime.datetime(2020, 8, 6, 23, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 466967444, 'comment_body': ""> Do I need to be on this one? Probably not because it hasn't got any of the actual content?\r\n\r\nok, removed."", 'comment_created': datetime.datetime(2020, 8, 7, 10, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 466967676, 'comment_body': '> is this different for the privacy vs the terms page? I.e. why is one changing but not the other?\r\n\r\nbecause `terms` page had jquery code. (Refer https://github.com/oppia/oppia/pull/10141#discussion_r464764232)', 'comment_created': datetime.datetime(2020, 8, 7, 10, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 466970120, 'comment_body': 'Ah I see. OK, thanks!', 'comment_created': datetime.datetime(2020, 8, 7, 10, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 466997637, 'comment_body': 'Thanks! It looks great now!', 'comment_created': datetime.datetime(2020, 8, 7, 12, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}]","[{'commit_sha': '64c037db9c66431487420d53ad75247ea4753bff', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b317c6128c4cbfee7747815da0191e4f33cfd81', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2acfbc5a0c4c67d7a05f7b92166549c63f5d84ba', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97a370d7af849aef98a9af22886873a6736e4a6a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd38e6f7a039aff9296191646eacd55aa4f0ff712', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '340744804857e4047e2c9fa576b8f0d35bbb5f7e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f6c589aae14376a75adbd7a44a3bbc081ac47c4', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59b6c3edcd54ce23f57c27df4f354112d2b79162', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21577d8861e08757246a76b3ec15c2f91356a6b9', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a1cf88494882b80f5c39b5e1b3b9e52e9b4c05c', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1f41397ca819982b5dad51a699099e0442c393f', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67dafd5bddf773c1b2e1e352772b8566e4d73141', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
463016330,Use cache-loader in webpack,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: Use cache-loader and thread-loader in webpack

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10155,https://api.github.com/repos/oppia/oppia/pulls/10155,https://github.com/oppia/oppia/pull/10155,closed,15,10,2,2,1,8,0,1,[],2020-08-04 21:23:30+00:00,2020-08-06 16:43:02+00:00,155972.0,"1 day, 19:19:32","[{'comment_id': 465396512, 'comment_body': 'Why remove `transpileOnly` here?', 'comment_created': datetime.datetime(2020, 8, 5, 0, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 465396759, 'comment_body': ""```suggestion\r\n        'cache-loader',\r\n```"", 'comment_created': datetime.datetime(2020, 8, 5, 0, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 465397132, 'comment_body': 'Btw, we removed `thread-loader` in #8760 (more exactly in #8756), could you check if the reasoning for the removal still holds?', 'comment_created': datetime.datetime(2020, 8, 5, 0, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 465397274, 'comment_body': ""```suggestion\r\n        'cache-loader',\r\n        'thread-loader',\r\n```"", 'comment_created': datetime.datetime(2020, 8, 5, 0, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 465598561, 'comment_body': 'reverted', 'comment_created': datetime.datetime(2020, 8, 5, 9, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 465598615, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 5, 9, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 465598664, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 5, 9, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 465598944, 'comment_body': ""Seems reasonable. I've removed the thread-loader from karma config as well."", 'comment_created': datetime.datetime(2020, 8, 5, 9, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': 'ac23642f122a5c848ff0893dd169aed60034b9e7', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82bfa0b72e52e4ace546d06a41eb4d91737aa048', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
464249677,Introduce new eslint checks,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: Introduce new eslint checks

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10187,https://api.github.com/repos/oppia/oppia/pulls/10187,https://github.com/oppia/oppia/pull/10187,closed,162,136,35,4,6,6,0,1,[],2020-08-06 20:33:26+00:00,2020-08-14 13:35:55+00:00,666149.0,"7 days, 17:02:29","[{'comment_id': 466992871, 'comment_body': 'Why not use the default options here? https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/ban-types.md', 'comment_created': datetime.datetime(2020, 8, 7, 11, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 467289547, 'comment_body': 'I see there are two extra rules there. But I think we can work on them a little later deciding a proper convention for them.\r\n\r\nWe can mark it as a todo in the eslint sheet?', 'comment_created': datetime.datetime(2020, 8, 7, 21, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 467309796, 'comment_body': ""Ok, not a problem, let's mark it as TODO in the sheet and do it later."", 'comment_created': datetime.datetime(2020, 8, 7, 22, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 467507900, 'comment_body': 'Object* (Not related to this PR changes!)', 'comment_created': datetime.datetime(2020, 8, 8, 21, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 467508101, 'comment_body': ""Can we do something to avoid such a typo in these files? (Just wanted to know if it's possible to do something here!)"", 'comment_created': datetime.datetime(2020, 8, 8, 21, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 467508558, 'comment_body': 'done! There is an issue filed for this. (#10219)', 'comment_created': datetime.datetime(2020, 8, 8, 22, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': 'bda78a8fa647605556ad6d887a18a696511a8c9c', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a6cb5b7ec02d3eb644d52629db3b3683a071edb', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e54bf87d59122a34d3ffe2d49ea2b78af0b458a1', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad746e4244415fe38fb33ae6187ba44bf3f38913', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
465076847,"Loads libraries in manifest.json using webpack, Add a seperate light module for karma","## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: Loads libraries in manifest.json using webpack

## add a separate light module for karma

Currently karma used `about-page.module.ts` because there was one module needed. But the size of the bundle of that module in the webpack compilation was around (47mb) and this new module bundle size is around 300kb. so, this may slightly help with the compilation speed in the fe tests.


## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10223,https://api.github.com/repos/oppia/oppia/pulls/10223,https://github.com/oppia/oppia/pull/10223,closed,310,433,105,23,21,17,0,1,[],2020-08-08 21:34:24+00:00,2020-08-18 14:31:46+00:00,838642.0,"9 days, 16:57:22","[{'comment_id': 469068933, 'comment_body': 'Too much empty space?', 'comment_created': datetime.datetime(2020, 8, 12, 7, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 469070496, 'comment_body': '```suggestion\r\n * @fileoverview This file imports the ngAudio library.\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 7, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 469072603, 'comment_body': 'Remove this empty line.', 'comment_created': datetime.datetime(2020, 8, 12, 7, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 469075710, 'comment_body': ""Let's sort these alphabetically."", 'comment_created': datetime.datetime(2020, 8, 12, 7, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 469075809, 'comment_body': 'Ditto in other places.', 'comment_created': datetime.datetime(2020, 8, 12, 7, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 469077861, 'comment_body': 'Remove empty line.', 'comment_created': datetime.datetime(2020, 8, 12, 8, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 469388155, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 16, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 469388238, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 16, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 469388292, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 16, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 469388366, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 16, 29, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 469388444, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 16, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 470125752, 'comment_body': 'This will let the test keep running even if it has not output anything for up to an hour. That seems like an awfully long time to wait. Why do we expect to have to wait so long?', 'comment_created': datetime.datetime(2020, 8, 13, 17, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 470136538, 'comment_body': ""Reduced it to `30`. Btw, it is because webpack can take more than 10mins to build. But I think (I'm not sure though) the wait stops when the process has exited."", 'comment_created': datetime.datetime(2020, 8, 13, 17, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 470842483, 'comment_body': ""So are we going to wait for 30 mins for each build (I'm not sure what's 30 here!). Also, what's the time limit for no-output-stall?"", 'comment_created': datetime.datetime(2020, 8, 14, 20, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 470845177, 'comment_body': ""Nope! You don't have to wait if the process finishes before 30mins. The default limit is 10min."", 'comment_created': datetime.datetime(2020, 8, 14, 20, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 470849002, 'comment_body': '1. So the webpack compilation can take more than 10 mins now for all the tests? \r\n2. Will it also take same time running the server locally? \r\n3. how much time it will take for the pre-push checks?\r\n4. How much time it will take to re-build stuff when files are changed in the development process?', 'comment_created': datetime.datetime(2020, 8, 14, 20, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 470869795, 'comment_body': '1. Yes webpack takes more than 10mins for productions\r\n2. It depends on the machine and the other processes and varies time to time. Its less on my laptop.\r\n3. It will be the same approximately.\r\n4. It will be the same as of now.', 'comment_created': datetime.datetime(2020, 8, 14, 21, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': '00d42065754c2e47cebe81fa77b4fb9cf8de5175', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c08fabb2bdea9609bf4d56ed28915f875131f061', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '214be647c75052f6565b3431c8ab01bd3b288c4c', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ff4f9ddc14ff703718c5b6b5fa482802886dd1d', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd03c86b11de769c4907df21ae329efe3ab10ea1c', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b4dad7efb3b8c630a65c4b4e23d82115004e0fd', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '558f3d80f7fee3d297ff0fb7cda2340ec11a16e4', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71782b71b6aa5aaa2c90026e9d4b1d45aaaefd63', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f29311309fad0f0f1abb26935b9529a2fe867a75', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d51978ffc6e480672f59426ed2d45a8689f25e7', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c021fd4ddcd51bfc147aa10795682522d135a8c9', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4c22c8d152809d755a2c8e4f5372fc584ffcb03', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c642cd8ba21ac7b1cc273f988f90b04b4d5e2dfb', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '702d4ddd52268266305a64b0d125a5416e83b1ae', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73c2c3b5e52c00c7f4350f9285b26543c1a566fe', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27e8cbd8a3c06e9fdb9fb8ba1bd59dbbb9ff51fc', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f44c2d82bc0a2237d1db2c1e16213495d9010bcb', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '949bbb3583582df78ecf97ad8f63d3f4c4f9ab5b', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9e217cfd91bd72b25d60b6d1ea093d134a5e802', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08a612307a750a41e95aaeb621f232ac8db2a46e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45a544c495b193972d23b83d61bd1f079b573f7f', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a3754fba010c374391a2327ee63f97afa405a72', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5b4190b8665312ac3c9fd1c5a375c5e62419b1c', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
465181566,Use faster devtools in webpack,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: Use faster devtools in webpack

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10228,https://api.github.com/repos/oppia/oppia/pulls/10228,https://github.com/oppia/oppia/pull/10228,closed,239,25,13,15,15,27,1,2,[{'name': 'PR: LGTM'}],2020-08-09 17:48:53+00:00,2020-08-16 03:24:53+00:00,552960.0,"6 days, 9:36:00","[{'comment_id': 467840157, 'comment_body': 'Add these to constants.', 'comment_created': datetime.datetime(2020, 8, 10, 11, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 467840351, 'comment_body': 'Add this to constants.', 'comment_created': datetime.datetime(2020, 8, 10, 11, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 467840649, 'comment_body': 'I think we do not need `--source_maps` here.', 'comment_created': datetime.datetime(2020, 8, 10, 11, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 467841027, 'comment_body': '```suggestion\r\n * @fileoverview Development environment config file for Webpack with proper source maps.\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 11, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 467847320, 'comment_body': 'Should we go with `eval-cheap-source-map` here, to have at least line numbers?', 'comment_created': datetime.datetime(2020, 8, 10, 11, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 467847693, 'comment_body': 'You can remove this line entirnely.', 'comment_created': datetime.datetime(2020, 8, 10, 11, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 467847793, 'comment_body': '```suggestion\r\n * @fileoverview Production environment config file for Webpack with proper source maps.\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 11, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 467848604, 'comment_body': ""```suggestion\r\n        webpack_config_file = (\r\n            'webpack.dev.sourcemap.config.ts' if parsed_args.source_maps \r\n            else 'webpack.dev.config.ts')\r\n        background_processes.append(subprocess.Popen([\r\n            common.NODE_BIN_PATH,\r\n            os.path.join(\r\n                common.NODE_MODULES_PATH, 'webpack', 'bin', 'webpack.js'),\r\n                '--config', webpack_config_file, '--watch']))\r\n```\r\nand have the file names be in constants."", 'comment_created': datetime.datetime(2020, 8, 10, 11, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 467852548, 'comment_body': 'Remove empty line.', 'comment_created': datetime.datetime(2020, 8, 10, 11, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 469512850, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 20, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 469512891, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 20, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 469513240, 'comment_body': 'I did because i want atleast one ci check to have the `--source_maps` in prod_env to check if there are no issues when deploying.', 'comment_created': datetime.datetime(2020, 8, 12, 20, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 469513707, 'comment_body': 'Umm, i think if we are optimizing the build according to time, we should do it completely. Also given that developers can use `--source_maps` flag if they want.', 'comment_created': datetime.datetime(2020, 8, 12, 20, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 469513747, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 20, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 469513791, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 20, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 469513885, 'comment_body': 'ah, nice! done!', 'comment_created': datetime.datetime(2020, 8, 12, 20, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 469513942, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 20, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 469809797, 'comment_body': 'Hmmm, okay, but I would prefer if you used some e2e test and also this needs to be documented.', 'comment_created': datetime.datetime(2020, 8, 13, 9, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 469809938, 'comment_body': 'Okay', 'comment_created': datetime.datetime(2020, 8, 13, 9, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 469811226, 'comment_body': ""Let's do `/webpack.*.ts` here with me and you as code owners."", 'comment_created': datetime.datetime(2020, 8, 13, 9, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 470146399, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 13, 18, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 470148919, 'comment_body': ""Are you talking about this flag to be documented? Then please tell me which wiki page to document this. (I couldn't find any suitable page). Also I'll mail oppia-dev about it once it's merged. "", 'comment_created': datetime.datetime(2020, 8, 13, 18, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 470149834, 'comment_body': 'Also, I think we can keep this in the lighthouse checks itself given that there is already a special config for `terser` in e2e tests.', 'comment_created': datetime.datetime(2020, 8, 13, 18, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 470153129, 'comment_body': 'Sorry, I meant to have a comment in the code explaining why we use the flag here since if it is not really needed for the tests I can imagine someone refactoring the tests and thinking it can be removed if there is no comment in the code.', 'comment_created': datetime.datetime(2020, 8, 13, 18, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 470274730, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 13, 22, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 470966820, 'comment_body': '```suggestion\r\n    # We are using --source_maps here, so that we have at least one CI check\r\n    # that builds using source maps in prod env. This is to ensure that\r\n    # there are no issues while deploying oppia.\r\n```', 'comment_created': datetime.datetime(2020, 8, 15, 11, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 470981193, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 15, 13, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': '04b487f41336fc14b6427043539d7cbf4b8d436f', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc551552c59403ffca8a18bc406bf04569022ab3', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e5c77a96714df0929d9960aacc3645620c0e2bd', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7df420573309effba5d041f8d690564234fee541', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cc4062c32541aae421b48536ca834e4911a13e7', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79562527e7d1f0e5aca9d481c420d727b1431ad7', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd64102de746702c89f1e7c90046e3b813c644fa8', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eb96fd57696673f675f5bbb1322066b2b35a971', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e9d20fd3d5839be33899b71a96de4b5261d8664', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ca83a5c65c3ebb0a7d0a9ddd5bebebcf58e2a1b', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeabca319d59fbfdbc9a817ef92b6af0810cab49', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '566685a45c090349d55f2c0a4181e6d1af3c7201', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f80a0260de30658699133a3079b2fcb02441e7a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '805ef100788a9b6ec0521ac986a1abfc74ae63cf', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '497e9b3e194b54b8d398132a837d55572f1bcfba', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
469721567,Introduce more eslint checks,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: Introduce more eslint checks

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10377,https://api.github.com/repos/oppia/oppia/pulls/10377,https://github.com/oppia/oppia/pull/10377,closed,336,199,84,13,4,0,0,3,[],2020-08-18 20:16:33+00:00,2020-08-21 20:08:35+00:00,258722.0,"2 days, 23:52:02",[],"[{'commit_sha': '06b223599237d0556d0602380e3ca01a00c20637', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a54a2c083bed3551b249721e8404dc11de44298', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dc574db606cbcb262854671a48f8069c2705954', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95e56c4f697f1f93950676b15d6ef9269cc7bdf5', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61ba66e5cba78f13f9bd84a73aad843594d02a55', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fc7392a6d2f85b41ccd6e97fc136c0530120822', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a1857229e0f45db664c45161614f7e071794b4d', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e5434f37e5828c49f4df7690682c775525e2d5a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff3e6fe1d08244168c6533c6790c42711a81f551', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8126b0dd11fc5ddb0ebe76cc20665aa06c10e3bf', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b620230be08adb2b3986bce9288257c057a2abb', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83db1dd27f2defb904212f497fa255d6f7dbdcd6', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7484bb767ce908b178789a26e62690bcfffe0aad', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
468823640,Modifications so that guppy can be loaded using webpack,"Added `module.exports = Guppy` in the build files. So, that we can do

const Guppy = require(guppy.min.js);",True,1,https://api.github.com/repos/oppia/guppy/pulls/1,https://github.com/oppia/guppy/pull/1,closed,3,1,2,2,2,0,0,1,[],2020-08-17 13:12:54+00:00,2020-08-18 22:02:19+00:00,118165.0,"1 day, 8:49:25",[],"[{'commit_sha': '7c751c8f3d519f29e7d06ea925214785a4e02a96', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a26764436acb83425d95302d3223e42cbd36e979', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
463976106,Modifications so that MIDI can be loaded using webpack,"There was an incorrect check for NodeJs environment in the MIDI.js. This PR fixes that along with exporting the `Base64Binary` object so, that it can be loaded using webpack.",True,1,https://api.github.com/repos/oppia/MIDI.js/pulls/1,https://github.com/oppia/MIDI.js/pull/1,closed,3,9,2,1,3,0,0,0,[],2020-08-06 11:49:14+00:00,2020-08-06 23:39:49+00:00,42635.0,11:50:35,[],"[{'commit_sha': 'f2fed6efd3a1800c0a8c2d81ea2a1f29fc1ee109', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
470334330,Move libraries used for interactions to webpack,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: Move libraries used for interactions using webpack
## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10388,https://api.github.com/repos/oppia/oppia/pulls/10388,https://github.com/oppia/oppia/pull/10388,closed,109,53,32,14,6,6,0,1,[],2020-08-19 18:20:27+00:00,2020-08-24 23:10:52+00:00,449425.0,"5 days, 4:50:25","[{'comment_id': 473821862, 'comment_body': 'Could any of these newly added libs be only imported at places where they are actually needed? Like in some directive where they are used.', 'comment_created': datetime.datetime(2020, 8, 20, 9, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 473822342, 'comment_body': 'Why is it no longer needed here?', 'comment_created': datetime.datetime(2020, 8, 20, 9, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 474279513, 'comment_body': 'its added in the respective directive.', 'comment_created': datetime.datetime(2020, 8, 20, 21, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 474280730, 'comment_body': 'Actually the issue with that is these imports look like this\r\n\r\n`window.Guppy = ...`\r\n\r\nand requiring this multiple times loads the library script many times. Plus anyways they need to be loaded in exploration editor and player page. So, added these here to load the script only once.', 'comment_created': datetime.datetime(2020, 8, 20, 21, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 474676571, 'comment_body': 'Ok, that makes sense.', 'comment_created': datetime.datetime(2020, 8, 21, 12, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 474677320, 'comment_body': 'Ok.', 'comment_created': datetime.datetime(2020, 8, 21, 12, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}]","[{'commit_sha': '73d17c14507b6f92cfe9426e5fb8ce2663a092c4', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b776013732f5cbacc19114e0847d5d5f7103352', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd86b8e5a39fbe14a6f480de31e109a08eee44b81', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2535219015b34ab473a76d9400130e1c700f0ce0', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb656be637080ce37b626e69fdc8b62962d273a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c761663f6bcb8a55b157ee8bbc5ae77b3a81038', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '568c21494c5c920cbfa1b5c930e177b158e04e5a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50771b1768ac6eb262584e581dd7f4b41eef4df8', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c29b4f559541c6eaab2f4ca85cecf4702283fd51', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d8b5f87eb77db954bbad19cc7e22e1c33853575', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b35765a9d8c3b0a08318504e19f62e3949be2a8', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa57a422819a8904b0ace30039ceed82e199bc12', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc87646994938f2c69ac2aee67bd52167163490e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c51a33700d23b327537aafcd20b7eaec8b1bf987', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
472024082,Add some more eslint checks,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: Add some more eslint checks

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10414,https://api.github.com/repos/oppia/oppia/pulls/10414,https://github.com/oppia/oppia/pull/10414,closed,4,0,1,6,4,0,0,1,[],2020-08-22 19:09:13+00:00,2020-08-25 09:10:32+00:00,223279.0,"2 days, 14:01:19",[],"[{'commit_sha': 'bc2c776101a8e5b73913c96503411e486d44bcfb', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '289a0150430383a8aab0c39e9a31e29d77ebe746', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6ca8cb4c7b4eafb91eb944968f960f4ea96f217', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '745ccbbcbac5a196afa6c0ea076a9b49c3d76d9d', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69cc4a3ae8044a0c1a63ab0161cb182c4fc551ef', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47fbd62031dcb4bd5b256e66a2534f54ddd7ae4a', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
472833197,Add a new config for strict typescript checks,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #10327 
2. This PR does the following: Add a new config for strict typescript checks

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10433,https://api.github.com/repos/oppia/oppia/pulls/10433,https://github.com/oppia/oppia/pull/10433,closed,147,13,9,7,3,20,0,1,[],2020-08-24 23:12:26+00:00,2020-08-27 11:31:58+00:00,217172.0,"2 days, 12:19:32","[{'comment_id': 476373974, 'comment_body': '```suggestion\r\n/tsconfig-strict.json @nishantwrp @vojtechjelinek\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 11, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476374389, 'comment_body': 'Should we also introduce `noImplicitAny` while we are at it?', 'comment_created': datetime.datetime(2020, 8, 25, 11, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476374932, 'comment_body': 'Just `typings` should work too, right? Also, should we include `core/templates/services/contextual` since these seemed to work okay.', 'comment_created': datetime.datetime(2020, 8, 25, 11, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476375625, 'comment_body': '```suggestion\r\n        STRICT_TSCONFIG_FILEPATH \r\n        if parsed_args.strict_checks else\r\n        TSCONFIG_FILEPATH\r\n    )\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 11, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476688912, 'comment_body': 'using `strict` does that.', 'comment_created': datetime.datetime(2020, 8, 25, 19, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 476688959, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 476689067, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 19, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 476689953, 'comment_body': 'Actually there is a test folder inside typings that imports other files.', 'comment_created': datetime.datetime(2020, 8, 25, 19, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 476690216, 'comment_body': 'I tried adding `core/templates/services/contextual` there were some errors thrown.', 'comment_created': datetime.datetime(2020, 8, 25, 19, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 476694813, 'comment_body': 'Ah, okay, just realized I only tried it with `strictNullChecks`.', 'comment_created': datetime.datetime(2020, 8, 25, 19, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476696033, 'comment_body': '> Actually there is a test folder inside typings that imports other files.\r\n\r\nShould we also modify tsconfig.json then?', 'comment_created': datetime.datetime(2020, 8, 25, 19, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476696721, 'comment_body': 'Umm, why. That passes normal checks, right?', 'comment_created': datetime.datetime(2020, 8, 25, 19, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 476774008, 'comment_body': 'Do we need to run the typescript checks twice? If yes, will it be possible to run the ""normal/simple"" checks as well using the --strict_mode?\r\n\r\nAlso, if we are running the script twice are we compiling files twice?\r\n\r\nOne more: How much time will it add for pre_push checks?', 'comment_created': datetime.datetime(2020, 8, 25, 21, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477016039, 'comment_body': ""My understanding is that we want the typescript checks to pass before running e2e tests, that's why we have these in CircleCI. Is strict check tests required to pass for the e2e tests to run? Or is it specific to typescript checks itself? \r\nIf its the latter, can we move it to Github Actions? @nithusha21 FYI "", 'comment_created': datetime.datetime(2020, 8, 26, 3, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 477468455, 'comment_body': ""I don't know, actually do we need both typescript checks and the strict typescript checks? What's the difference? Would just the strict checks suffice?"", 'comment_created': datetime.datetime(2020, 8, 26, 17, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 477472459, 'comment_body': ""Actually the thing is that we want to make the typescript checks more strict so we are enabling the `strict` flag in tsconfig. But the strict checks can't be enabled in the complete codebase due to a lot of ts errors. You can refer the discussion at #10327 \r\n\r\nSo, only some files are compiled using the strict config and we plan to cover the complete codebase gradually.\r\n\r\nAlso, I think it would be better to run only the strict checks when `--strict_checks` flag is used. \r\n\r\nThe time added to the pre_push_hooks is about 3 seconds."", 'comment_created': datetime.datetime(2020, 8, 26, 17, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 477475827, 'comment_body': ""Actually the thing is that we want to make the typescript checks more strict so we are enabling the `strict` flag in tsconfig. But the strict checks can't be enabled in the complete codebase due to a lot of ts errors. You can refer the discussion at #10327 \r\n\r\nSo, only some files are compiled using the strict config and we plan to cover the complete codebase gradually.\r\n\r\nI think we can enable the strict checks in circle ci given that they take a less amount of time (currently only 3s) and the checks are also present in pre_push_hoooks. "", 'comment_created': datetime.datetime(2020, 8, 26, 17, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 478169358, 'comment_body': 'Ah okay, sounds good. Thanks for the explanation!', 'comment_created': datetime.datetime(2020, 8, 27, 6, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 478346922, 'comment_body': 'I see, so in the future, we will only have strict checks. Thanks for the info!', 'comment_created': datetime.datetime(2020, 8, 27, 11, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 478347576, 'comment_body': 'Yup, correct!', 'comment_created': datetime.datetime(2020, 8, 27, 11, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': 'dd47b5e3a65d59c351b4261ad516347bb9fd03b3', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ac991d0ae16c51ca5e7040f35fc41ece5162e82', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab5f446819b0ab8d7cfb3724321c5757dc31d558', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '644e9b54b8fab4bb9a5f2f7309073640e34338cf', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb8c61d08f1400797d70812c74d647b9b6109b9', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6337cc6e5ae1a1d48da0d397240493529edff556', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23bd20e556d410cf6b735483c72ea28d65ad060e', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848
474156564,Introduce new eslint rules,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: Introduce new eslint rules

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10455,https://api.github.com/repos/oppia/oppia/pulls/10455,https://github.com/oppia/oppia/pull/10455,closed,6,0,1,8,2,0,0,1,[],2020-08-26 21:14:13+00:00,2020-08-28 08:57:51+00:00,128618.0,"1 day, 11:43:38",[],"[{'commit_sha': 'dec32b8e87d0defc4ae719743c7247c87af5ceab', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd50ea27f2dd92096ce3058357760a3748a456f46', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b8e5a1f05ab5efebe2faec16c6ca59fc04e5bda', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79baf7302a1e3fa8684f1d2ffb4f24fea6331705', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '427fe0e0f4f02bae639ebccac3b2a4de27406814', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98c2c943552b9ca20a5cc65e07f316d044a64b44', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51667247b3349ebdcda049a2340f7194f9006ed9', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6a7a7232b427a0f97d729ba667c13501ba8cf8c', 'committer_username': 'nishantwrp', 'committer_name': 'Nishant Mittal', 'committer_email': 'contact@nishantwrp.com', 'commit_date': datetime.datetime(2018, 3, 2, 11, 24, 44, tzinfo=datetime.timezone.utc)}]",Nishant Mittal,36989112,contact@nishantwrp.com,User,,40,,50,848

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
40687563,oppia,oppia/oppia,Python,3839,5715,240,775,15753,1414,419,24,"[{'id': 542906198, 'number': 11445, 'closed': datetime.datetime(2020, 12, 28, 7, 55, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 19, 10, 2, 28, tzinfo=datetime.timezone.utc), 'time_taken': 769976.0, 'time_delta': '8 days, 21:52:56', 'additions': 98, 'deletions': 9, 'state': 'closed'}, {'id': 536897009, 'number': 11370, 'closed': datetime.datetime(2020, 12, 12, 13, 34, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 11, 13, 28, 22, tzinfo=datetime.timezone.utc), 'time_taken': 86796.0, 'time_delta': '1 day, 0:06:36', 'additions': 66, 'deletions': 30, 'state': 'closed'}, {'id': 511032263, 'number': 11060, 'closed': datetime.datetime(2020, 11, 25, 16, 46, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 27, 20, 18, 5, tzinfo=datetime.timezone.utc), 'time_taken': 2492909.0, 'time_delta': '28 days, 20:28:29', 'additions': 1111, 'deletions': 970, 'state': 'closed'}, {'id': 497472580, 'number': 10867, 'closed': datetime.datetime(2020, 10, 10, 19, 26, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 4, 17, 53, 25, tzinfo=datetime.timezone.utc), 'time_taken': 523979.0, 'time_delta': '6 days, 1:32:59', 'additions': 333, 'deletions': 346, 'state': 'closed'}, {'id': 487441827, 'number': 10693, 'closed': datetime.datetime(2020, 9, 17, 16, 27, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 15, 17, 19, 4, tzinfo=datetime.timezone.utc), 'time_taken': 169705.0, 'time_delta': '1 day, 23:08:25', 'additions': 453, 'deletions': 437, 'state': 'closed'}, {'id': 485873328, 'number': 10651, 'closed': datetime.datetime(2020, 9, 14, 13, 15, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 12, 11, 25, 53, tzinfo=datetime.timezone.utc), 'time_taken': 179382.0, 'time_delta': '2 days, 1:49:42', 'additions': 15, 'deletions': 49, 'state': 'closed'}, {'id': 477348675, 'number': 10526, 'closed': datetime.datetime(2020, 9, 2, 20, 29, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 1, 21, 29, 42, tzinfo=datetime.timezone.utc), 'time_taken': 82794.0, 'time_delta': '22:59:54', 'additions': 9, 'deletions': 10, 'state': 'closed'}, {'id': 475804188, 'number': 10485, 'closed': datetime.datetime(2020, 8, 30, 21, 27, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 29, 17, 14, 56, tzinfo=datetime.timezone.utc), 'time_taken': 101569.0, 'time_delta': '1 day, 4:12:49', 'additions': 7, 'deletions': 3, 'state': 'closed'}, {'id': 475534272, 'number': 10476, 'closed': datetime.datetime(2020, 9, 9, 8, 1, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 17, 11, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1003835.0, 'time_delta': '11 days, 14:50:35', 'additions': 821, 'deletions': 1221, 'state': 'closed'}, {'id': 474156564, 'number': 10455, 'closed': datetime.datetime(2020, 8, 28, 8, 57, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 21, 14, 13, tzinfo=datetime.timezone.utc), 'time_taken': 128618.0, 'time_delta': '1 day, 11:43:38', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 472833197, 'number': 10433, 'closed': datetime.datetime(2020, 8, 27, 11, 31, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 23, 12, 26, tzinfo=datetime.timezone.utc), 'time_taken': 217172.0, 'time_delta': '2 days, 12:19:32', 'additions': 147, 'deletions': 13, 'state': 'closed'}, {'id': 472024082, 'number': 10414, 'closed': datetime.datetime(2020, 8, 25, 9, 10, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 22, 19, 9, 13, tzinfo=datetime.timezone.utc), 'time_taken': 223279.0, 'time_delta': '2 days, 14:01:19', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 470334330, 'number': 10388, 'closed': datetime.datetime(2020, 8, 24, 23, 10, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 18, 20, 27, tzinfo=datetime.timezone.utc), 'time_taken': 449425.0, 'time_delta': '5 days, 4:50:25', 'additions': 109, 'deletions': 53, 'state': 'closed'}, {'id': 470162831, 'number': 10384, 'closed': datetime.datetime(2020, 8, 20, 13, 44, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 13, 24, 36, tzinfo=datetime.timezone.utc), 'time_taken': 87604.0, 'time_delta': '1 day, 0:20:04', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 469721567, 'number': 10377, 'closed': datetime.datetime(2020, 8, 21, 20, 8, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 20, 16, 33, tzinfo=datetime.timezone.utc), 'time_taken': 258722.0, 'time_delta': '2 days, 23:52:02', 'additions': 336, 'deletions': 199, 'state': 'closed'}, {'id': 468046780, 'number': 10344, 'closed': datetime.datetime(2020, 8, 14, 18, 3, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 15, 27, 40, tzinfo=datetime.timezone.utc), 'time_taken': 9369.0, 'time_delta': '2:36:09', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 465181566, 'number': 10228, 'closed': datetime.datetime(2020, 8, 16, 3, 24, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 17, 48, 53, tzinfo=datetime.timezone.utc), 'time_taken': 552960.0, 'time_delta': '6 days, 9:36:00', 'additions': 239, 'deletions': 25, 'state': 'closed'}, {'id': 465076847, 'number': 10223, 'closed': datetime.datetime(2020, 8, 18, 14, 31, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 8, 21, 34, 24, tzinfo=datetime.timezone.utc), 'time_taken': 838642.0, 'time_delta': '9 days, 16:57:22', 'additions': 310, 'deletions': 433, 'state': 'closed'}, {'id': 464249677, 'number': 10187, 'closed': datetime.datetime(2020, 8, 14, 13, 35, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 20, 33, 26, tzinfo=datetime.timezone.utc), 'time_taken': 666149.0, 'time_delta': '7 days, 17:02:29', 'additions': 162, 'deletions': 136, 'state': 'closed'}, {'id': 463016330, 'number': 10155, 'closed': datetime.datetime(2020, 8, 6, 16, 43, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 21, 23, 30, tzinfo=datetime.timezone.utc), 'time_taken': 155972.0, 'time_delta': '1 day, 19:19:32', 'additions': 15, 'deletions': 10, 'state': 'closed'}, {'id': 462295577, 'number': 10141, 'closed': datetime.datetime(2020, 8, 8, 12, 58, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 17, 10, 21, tzinfo=datetime.timezone.utc), 'time_taken': 416878.0, 'time_delta': '4 days, 19:47:58', 'additions': 712, 'deletions': 386, 'state': 'closed'}, {'id': 460577134, 'number': 10132, 'closed': datetime.datetime(2020, 8, 3, 6, 34, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 22, 36, 5, tzinfo=datetime.timezone.utc), 'time_taken': 201511.0, 'time_delta': '2 days, 7:58:31', 'additions': 42, 'deletions': 42, 'state': 'closed'}, {'id': 457977197, 'number': 10093, 'closed': datetime.datetime(2020, 8, 13, 17, 11, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 18, 27, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1377809.0, 'time_delta': '15 days, 22:43:29', 'additions': 1071, 'deletions': 168, 'state': 'closed'}, {'id': 457892185, 'number': 10088, 'closed': datetime.datetime(2020, 7, 31, 15, 41, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 15, 38, 39, tzinfo=datetime.timezone.utc), 'time_taken': 259388.0, 'time_delta': '3 days, 0:03:08', 'additions': 782, 'deletions': 224, 'state': 'closed'}, {'id': 456798204, 'number': 10054, 'closed': datetime.datetime(2020, 7, 27, 20, 55, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 20, 2, 23, tzinfo=datetime.timezone.utc), 'time_taken': 89563.0, 'time_delta': '1 day, 0:52:43', 'additions': 670, 'deletions': 301, 'state': 'closed'}, {'id': 455868537, 'number': 10017, 'closed': datetime.datetime(2020, 7, 25, 9, 56, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 17, 58, 44, tzinfo=datetime.timezone.utc), 'time_taken': 143872.0, 'time_delta': '1 day, 15:57:52', 'additions': 1482, 'deletions': 1473, 'state': 'closed'}, {'id': 454657964, 'number': 9990, 'closed': datetime.datetime(2020, 7, 23, 2, 36, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 17, 55, 28, tzinfo=datetime.timezone.utc), 'time_taken': 117656.0, 'time_delta': '1 day, 8:40:56', 'additions': 153, 'deletions': 223, 'state': 'closed'}, {'id': 449793944, 'number': 9917, 'closed': datetime.datetime(2020, 7, 20, 18, 3, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 23, 23, 25, tzinfo=datetime.timezone.utc), 'time_taken': 412826.0, 'time_delta': '4 days, 18:40:26', 'additions': 1817, 'deletions': 685, 'state': 'closed'}, {'id': 447800477, 'number': 9883, 'closed': datetime.datetime(2020, 7, 14, 0, 9, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 18, 21, 9, tzinfo=datetime.timezone.utc), 'time_taken': 193726.0, 'time_delta': '2 days, 5:48:46', 'additions': 510, 'deletions': 220, 'state': 'closed'}, {'id': 446529237, 'number': 9854, 'closed': datetime.datetime(2020, 7, 17, 10, 48, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 23, 8, 22, tzinfo=datetime.timezone.utc), 'time_taken': 733222.0, 'time_delta': '8 days, 11:40:22', 'additions': 182, 'deletions': 96, 'state': 'closed'}, {'id': 445668328, 'number': 9831, 'closed': datetime.datetime(2020, 7, 9, 11, 17, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 20, 47, 25, tzinfo=datetime.timezone.utc), 'time_taken': 138609.0, 'time_delta': '1 day, 14:30:09', 'additions': 14, 'deletions': 99, 'state': 'closed'}, {'id': 444479584, 'number': 9798, 'closed': datetime.datetime(2020, 7, 11, 23, 45, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 0, 5, 29, tzinfo=datetime.timezone.utc), 'time_taken': 517221.0, 'time_delta': '5 days, 23:40:21', 'additions': 2613, 'deletions': 852, 'state': 'closed'}, {'id': 443078978, 'number': 9754, 'closed': datetime.datetime(2020, 7, 4, 17, 27, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 23, 50, 1, tzinfo=datetime.timezone.utc), 'time_taken': 236251.0, 'time_delta': '2 days, 17:37:31', 'additions': 224, 'deletions': 188, 'state': 'closed'}, {'id': 442280318, 'number': 9742, 'closed': datetime.datetime(2020, 7, 5, 8, 30, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 20, 39, 8, tzinfo=datetime.timezone.utc), 'time_taken': 388257.0, 'time_delta': '4 days, 11:50:57', 'additions': 935, 'deletions': 445, 'state': 'closed'}, {'id': 441130888, 'number': 9712, 'closed': datetime.datetime(2020, 6, 29, 16, 3, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 28, 23, 28, 34, tzinfo=datetime.timezone.utc), 'time_taken': 59682.0, 'time_delta': '16:34:42', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 440965593, 'number': 9695, 'closed': datetime.datetime(2020, 6, 27, 22, 54, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 27, 21, 40, 20, tzinfo=datetime.timezone.utc), 'time_taken': 4468.0, 'time_delta': '1:14:28', 'additions': 25, 'deletions': 23, 'state': 'closed'}, {'id': 440740765, 'number': 9677, 'closed': datetime.datetime(2020, 7, 3, 20, 32, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 19, 1, 52, tzinfo=datetime.timezone.utc), 'time_taken': 610261.0, 'time_delta': '7 days, 1:31:01', 'additions': 359, 'deletions': 188, 'state': 'closed'}, {'id': 440203709, 'number': 9663, 'closed': datetime.datetime(2020, 6, 30, 12, 16, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 19, 3, 45, tzinfo=datetime.timezone.utc), 'time_taken': 407580.0, 'time_delta': '4 days, 17:13:00', 'additions': 379, 'deletions': 289, 'state': 'closed'}, {'id': 437413215, 'number': 9596, 'closed': datetime.datetime(2020, 6, 25, 0, 55, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 13, 36, 4, tzinfo=datetime.timezone.utc), 'time_taken': 386371.0, 'time_delta': '4 days, 11:19:31', 'additions': 793, 'deletions': 367, 'state': 'closed'}, {'id': 434709121, 'number': 9544, 'closed': datetime.datetime(2020, 6, 19, 12, 33, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 18, 43, 33, tzinfo=datetime.timezone.utc), 'time_taken': 323404.0, 'time_delta': '3 days, 17:50:04', 'additions': 689, 'deletions': 394, 'state': 'closed'}, {'id': 432745439, 'number': 9482, 'closed': datetime.datetime(2020, 6, 15, 22, 46, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 23, 4, 40, tzinfo=datetime.timezone.utc), 'time_taken': 430903.0, 'time_delta': '4 days, 23:41:43', 'additions': 205, 'deletions': 230, 'state': 'closed'}, {'id': 431318975, 'number': 9463, 'closed': datetime.datetime(2020, 6, 12, 13, 34, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 18, 33, 4, tzinfo=datetime.timezone.utc), 'time_taken': 327704.0, 'time_delta': '3 days, 19:01:44', 'additions': 522, 'deletions': 248, 'state': 'closed'}, {'id': 428060108, 'number': 9433, 'closed': datetime.datetime(2020, 6, 25, 20, 17, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 20, 6, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1815083.0, 'time_delta': '21 days, 0:11:23', 'additions': 3686, 'deletions': 692, 'state': 'closed'}, {'id': 423311370, 'number': 9371, 'closed': datetime.datetime(2020, 5, 27, 6, 36, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 26, 16, 22, 6, tzinfo=datetime.timezone.utc), 'time_taken': 51274.0, 'time_delta': '14:14:34', 'additions': 25, 'deletions': 36, 'state': 'closed'}, {'id': 423302167, 'number': 9370, 'closed': datetime.datetime(2020, 5, 28, 1, 12, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 26, 16, 4, 53, tzinfo=datetime.timezone.utc), 'time_taken': 119239.0, 'time_delta': '1 day, 9:07:19', 'additions': 111, 'deletions': 109, 'state': 'closed'}, {'id': 422931420, 'number': 9365, 'closed': datetime.datetime(2020, 6, 3, 17, 55, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 26, 0, 18, 26, tzinfo=datetime.timezone.utc), 'time_taken': 754595.0, 'time_delta': '8 days, 17:36:35', 'additions': 132, 'deletions': 105, 'state': 'closed'}, {'id': 422328382, 'number': 9349, 'closed': datetime.datetime(2020, 5, 27, 0, 44, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 23, 21, 19, 2, tzinfo=datetime.timezone.utc), 'time_taken': 271507.0, 'time_delta': '3 days, 3:25:07', 'additions': 115, 'deletions': 148, 'state': 'closed'}, {'id': 422000319, 'number': 9345, 'closed': datetime.datetime(2020, 5, 28, 15, 52, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 22, 15, 53, 36, tzinfo=datetime.timezone.utc), 'time_taken': 518355.0, 'time_delta': '5 days, 23:59:15', 'additions': 403, 'deletions': 203, 'state': 'closed'}, {'id': 420731925, 'number': 9334, 'closed': datetime.datetime(2020, 5, 21, 12, 37, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 12, 54, 18, tzinfo=datetime.timezone.utc), 'time_taken': 85411.0, 'time_delta': '23:43:31', 'additions': 69, 'deletions': 10, 'state': 'closed'}, {'id': 417977209, 'number': 9310, 'closed': datetime.datetime(2020, 5, 24, 3, 53, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 12, 54, 22, tzinfo=datetime.timezone.utc), 'time_taken': 831552.0, 'time_delta': '9 days, 14:59:12', 'additions': 318, 'deletions': 4, 'state': 'closed'}, {'id': 417571316, 'number': 9307, 'closed': datetime.datetime(2020, 5, 14, 15, 54, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 19, 39, 45, tzinfo=datetime.timezone.utc), 'time_taken': 72858.0, 'time_delta': '20:14:18', 'additions': 218, 'deletions': 23, 'state': 'closed'}, {'id': 416721137, 'number': 9298, 'closed': datetime.datetime(2020, 5, 15, 15, 49, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 13, 20, 37, tzinfo=datetime.timezone.utc), 'time_taken': 268146.0, 'time_delta': '3 days, 2:29:06', 'additions': 179, 'deletions': 106, 'state': 'closed'}, {'id': 416300915, 'number': 9293, 'closed': datetime.datetime(2020, 5, 15, 20, 9, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 11, 19, 33, 15, tzinfo=datetime.timezone.utc), 'time_taken': 347774.0, 'time_delta': '4 days, 0:36:14', 'additions': 57, 'deletions': 36, 'state': 'closed'}, {'id': 415569396, 'number': 9279, 'closed': datetime.datetime(2020, 5, 11, 12, 14, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 9, 12, 33, 45, tzinfo=datetime.timezone.utc), 'time_taken': 171652.0, 'time_delta': '1 day, 23:40:52', 'additions': 101, 'deletions': 200, 'state': 'closed'}, {'id': 415560164, 'number': 9278, 'closed': datetime.datetime(2020, 5, 11, 15, 57, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 9, 11, 18, 43, tzinfo=datetime.timezone.utc), 'time_taken': 189501.0, 'time_delta': '2 days, 4:38:21', 'additions': 99, 'deletions': 109, 'state': 'closed'}, {'id': 415205290, 'number': 9266, 'closed': datetime.datetime(2020, 5, 10, 1, 2, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 8, 12, 15, 26, tzinfo=datetime.timezone.utc), 'time_taken': 132398.0, 'time_delta': '1 day, 12:46:38', 'additions': 406, 'deletions': 3, 'state': 'closed'}, {'id': 414044919, 'number': 9257, 'closed': datetime.datetime(2020, 5, 7, 11, 18, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 6, 11, 45, 8, tzinfo=datetime.timezone.utc), 'time_taken': 84806.0, 'time_delta': '23:33:26', 'additions': 228, 'deletions': 1, 'state': 'closed'}, {'id': 412520098, 'number': 9213, 'closed': datetime.datetime(2020, 5, 6, 2, 50, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 2, 23, 4, 10, tzinfo=datetime.timezone.utc), 'time_taken': 272760.0, 'time_delta': '3 days, 3:46:00', 'additions': 17, 'deletions': 6, 'state': 'closed'}, {'id': 412450879, 'number': 9207, 'closed': datetime.datetime(2020, 5, 2, 19, 54, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 2, 13, 21, 39, tzinfo=datetime.timezone.utc), 'time_taken': 23546.0, 'time_delta': '6:32:26', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 410959184, 'number': 9190, 'closed': datetime.datetime(2020, 5, 1, 3, 31, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 29, 21, 18, 54, tzinfo=datetime.timezone.utc), 'time_taken': 108764.0, 'time_delta': '1 day, 6:12:44', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 409071657, 'number': 9161, 'closed': datetime.datetime(2020, 4, 30, 15, 45, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 26, 12, 2, 28, tzinfo=datetime.timezone.utc), 'time_taken': 358983.0, 'time_delta': '4 days, 3:43:03', 'additions': 8, 'deletions': 7, 'state': 'closed'}, {'id': 408981727, 'number': 9160, 'closed': datetime.datetime(2020, 4, 28, 2, 44, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 25, 22, 47, 29, tzinfo=datetime.timezone.utc), 'time_taken': 187025.0, 'time_delta': '2 days, 3:57:05', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 402412635, 'number': 9072, 'closed': datetime.datetime(2020, 4, 13, 18, 29, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 12, 23, 6, 2, tzinfo=datetime.timezone.utc), 'time_taken': 69816.0, 'time_delta': '19:23:36', 'additions': 42, 'deletions': 42, 'state': 'closed'}, {'id': 402260897, 'number': 9060, 'closed': datetime.datetime(2020, 4, 14, 0, 42, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 11, 23, 25, 45, tzinfo=datetime.timezone.utc), 'time_taken': 177393.0, 'time_delta': '2 days, 1:16:33', 'additions': 272, 'deletions': 20, 'state': 'closed'}, {'id': 394431743, 'number': 8929, 'closed': datetime.datetime(2020, 3, 27, 3, 58, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 26, 21, 24, 20, tzinfo=datetime.timezone.utc), 'time_taken': 23665.0, 'time_delta': '6:34:25', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 393288958, 'number': 8922, 'closed': datetime.datetime(2020, 3, 27, 3, 58, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 24, 22, 33, 33, tzinfo=datetime.timezone.utc), 'time_taken': 192286.0, 'time_delta': '2 days, 5:24:46', 'additions': 8, 'deletions': 7, 'state': 'closed'}, {'id': 391481046, 'number': 8879, 'closed': datetime.datetime(2020, 3, 23, 4, 50, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 20, 11, 26, 48, tzinfo=datetime.timezone.utc), 'time_taken': 235399.0, 'time_delta': '2 days, 17:23:19', 'additions': 8, 'deletions': 135, 'state': 'closed'}, {'id': 390581683, 'number': 8866, 'closed': datetime.datetime(2020, 4, 15, 23, 20, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 18, 17, 51, 36, tzinfo=datetime.timezone.utc), 'time_taken': 2438929.0, 'time_delta': '28 days, 5:28:49', 'additions': 23, 'deletions': 12, 'state': 'closed'}, {'id': 388622434, 'number': 8848, 'closed': datetime.datetime(2020, 3, 16, 1, 59, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 15, 8, 5, 18, tzinfo=datetime.timezone.utc), 'time_taken': 64435.0, 'time_delta': '17:53:55', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 387178253, 'number': 8823, 'closed': datetime.datetime(2020, 3, 31, 1, 24, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 12, 11, 5, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1606770.0, 'time_delta': '18 days, 14:19:30', 'additions': 39, 'deletions': 13, 'state': 'closed'}, {'id': 385288644, 'number': 8785, 'closed': datetime.datetime(2020, 3, 11, 20, 40, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 8, 16, 57, 34, tzinfo=datetime.timezone.utc), 'time_taken': 272592.0, 'time_delta': '3 days, 3:43:12', 'additions': 42, 'deletions': 42, 'state': 'closed'}, {'id': 384627854, 'number': 8770, 'closed': datetime.datetime(2020, 3, 14, 2, 35, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 6, 4, 27, 36, tzinfo=datetime.timezone.utc), 'time_taken': 684452.0, 'time_delta': '7 days, 22:07:32', 'additions': 30, 'deletions': 5, 'state': 'closed'}, {'id': 383162351, 'number': 8759, 'closed': datetime.datetime(2020, 3, 23, 20, 25, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 3, 20, 36, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1727317.0, 'time_delta': '19 days, 23:48:37', 'additions': 250, 'deletions': 54, 'state': 'closed'}, {'id': 379023026, 'number': 8712, 'closed': datetime.datetime(2020, 3, 14, 22, 47, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 24, 14, 34, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1671175.0, 'time_delta': '19 days, 8:12:55', 'additions': 127, 'deletions': 2, 'state': 'closed'}, {'id': 373910045, 'number': 8624, 'closed': datetime.datetime(2020, 2, 21, 3, 32, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 11, 22, 5, 50, tzinfo=datetime.timezone.utc), 'time_taken': 797183.0, 'time_delta': '9 days, 5:26:23', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 368769736, 'number': 8520, 'closed': datetime.datetime(2020, 2, 10, 6, 45, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 29, 21, 17, 37, tzinfo=datetime.timezone.utc), 'time_taken': 984446.0, 'time_delta': '11 days, 9:27:26', 'additions': 58, 'deletions': 0, 'state': 'closed'}, {'id': 365053760, 'number': 8462, 'closed': datetime.datetime(2020, 2, 7, 18, 47, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 21, 1, 12, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1532101.0, 'time_delta': '17 days, 17:35:01', 'additions': 109, 'deletions': 101, 'state': 'closed'}, {'id': 364590078, 'number': 8457, 'closed': datetime.datetime(2020, 1, 23, 5, 42, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 19, 22, 56, 54, tzinfo=datetime.timezone.utc), 'time_taken': 283549.0, 'time_delta': '3 days, 6:45:49', 'additions': 0, 'deletions': 3, 'state': 'closed'}, {'id': 364476633, 'number': 8452, 'closed': datetime.datetime(2020, 2, 7, 18, 43, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 18, 23, 31, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1710700.0, 'time_delta': '19 days, 19:11:40', 'additions': 143, 'deletions': 131, 'state': 'closed'}, {'id': 363920199, 'number': 8438, 'closed': datetime.datetime(2020, 2, 4, 13, 28, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 17, 1, 15, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1599179.0, 'time_delta': '18 days, 12:12:59', 'additions': 117, 'deletions': 126, 'state': 'closed'}, {'id': 363902481, 'number': 8437, 'closed': datetime.datetime(2020, 2, 10, 23, 45, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 16, 23, 58, 55, tzinfo=datetime.timezone.utc), 'time_taken': 2159167.0, 'time_delta': '24 days, 23:46:07', 'additions': 38, 'deletions': 1, 'state': 'closed'}, {'id': 363357858, 'number': 8431, 'closed': datetime.datetime(2020, 3, 15, 0, 10, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 15, 22, 0, 10, tzinfo=datetime.timezone.utc), 'time_taken': 5105397.0, 'time_delta': '59 days, 2:09:57', 'additions': 191, 'deletions': 6, 'state': 'closed'}, {'id': 362874410, 'number': 8426, 'closed': datetime.datetime(2020, 2, 15, 22, 18, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 14, 22, 45, 21, tzinfo=datetime.timezone.utc), 'time_taken': 2763174.0, 'time_delta': '31 days, 23:32:54', 'additions': 375, 'deletions': 282, 'state': 'closed'}, {'id': 358111186, 'number': 8314, 'closed': datetime.datetime(2020, 1, 20, 23, 14, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 30, 13, 24, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1849845.0, 'time_delta': '21 days, 9:50:45', 'additions': 79, 'deletions': 58, 'state': 'closed'}, {'id': 357542783, 'number': 8302, 'closed': datetime.datetime(2020, 1, 20, 1, 10, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 28, 16, 32, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1931870.0, 'time_delta': '22 days, 8:37:50', 'additions': 83, 'deletions': 95, 'state': 'closed'}, {'id': 357048094, 'number': 8295, 'closed': datetime.datetime(2020, 2, 19, 12, 10, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 26, 19, 10, 5, tzinfo=datetime.timezone.utc), 'time_taken': 4726843.0, 'time_delta': '54 days, 17:00:43', 'additions': 113, 'deletions': 71, 'state': 'closed'}, {'id': 356686145, 'number': 8280, 'closed': datetime.datetime(2019, 12, 29, 18, 45, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 24, 18, 32, 12, tzinfo=datetime.timezone.utc), 'time_taken': 432808.0, 'time_delta': '5 days, 0:13:28', 'additions': 108, 'deletions': 63, 'state': 'closed'}, {'id': 355816276, 'number': 8246, 'closed': datetime.datetime(2019, 12, 23, 6, 5, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 20, 17, 3, 48, tzinfo=datetime.timezone.utc), 'time_taken': 219675.0, 'time_delta': '2 days, 13:01:15', 'additions': 125, 'deletions': 24, 'state': 'closed'}, {'id': 354276992, 'number': 8220, 'closed': datetime.datetime(2019, 12, 27, 15, 9, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 17, 19, 40, 55, tzinfo=datetime.timezone.utc), 'time_taken': 847744.0, 'time_delta': '9 days, 19:29:04', 'additions': 165, 'deletions': 146, 'state': 'closed'}, {'id': 353696306, 'number': 8207, 'closed': datetime.datetime(2019, 12, 21, 5, 21, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 16, 18, 17, 20, tzinfo=datetime.timezone.utc), 'time_taken': 385474.0, 'time_delta': '4 days, 11:04:34', 'additions': 125, 'deletions': 24, 'state': 'closed'}, {'id': 352528020, 'number': 8176, 'closed': datetime.datetime(2019, 12, 16, 17, 32, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 12, 17, 24, 59, tzinfo=datetime.timezone.utc), 'time_taken': 346076.0, 'time_delta': '4 days, 0:07:56', 'additions': 33, 'deletions': 6, 'state': 'closed'}, {'id': 351323634, 'number': 8158, 'closed': datetime.datetime(2019, 12, 15, 22, 41, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 10, 10, 50, 39, tzinfo=datetime.timezone.utc), 'time_taken': 474639.0, 'time_delta': '5 days, 11:50:39', 'additions': 11, 'deletions': 1, 'state': 'closed'}, {'id': 350439703, 'number': 8149, 'closed': datetime.datetime(2019, 12, 11, 11, 28, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 8, 18, 20, 37, tzinfo=datetime.timezone.utc), 'time_taken': 234498.0, 'time_delta': '2 days, 17:08:18', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 350341674, 'number': 8142, 'closed': datetime.datetime(2019, 12, 9, 5, 4, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 7, 19, 54, 35, tzinfo=datetime.timezone.utc), 'time_taken': 119402.0, 'time_delta': '1 day, 9:10:02', 'additions': 182, 'deletions': 302, 'state': 'closed'}, {'id': 349478508, 'number': 8133, 'closed': datetime.datetime(2019, 12, 8, 18, 46, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 5, 14, 46, 13, tzinfo=datetime.timezone.utc), 'time_taken': 273619.0, 'time_delta': '3 days, 4:00:19', 'additions': 10, 'deletions': 3, 'state': 'closed'}, {'id': 348517913, 'number': 8121, 'closed': datetime.datetime(2019, 12, 24, 18, 7, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 3, 19, 48, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1808313.0, 'time_delta': '20 days, 22:18:33', 'additions': 224, 'deletions': 19, 'state': 'closed'}, {'id': 348477903, 'number': 8120, 'closed': datetime.datetime(2019, 12, 5, 20, 28, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 3, 18, 16, 52, tzinfo=datetime.timezone.utc), 'time_taken': 180699.0, 'time_delta': '2 days, 2:11:39', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 344215427, 'number': 8061, 'closed': datetime.datetime(2019, 11, 24, 8, 49, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 21, 20, 18, 42, tzinfo=datetime.timezone.utc), 'time_taken': 217837.0, 'time_delta': '2 days, 12:30:37', 'additions': 224, 'deletions': 40, 'state': 'closed'}, {'id': 335314167, 'number': 7888, 'closed': datetime.datetime(2019, 11, 10, 7, 40, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 1, 7, 56, 36, tzinfo=datetime.timezone.utc), 'time_taken': 776659.0, 'time_delta': '8 days, 23:44:19', 'additions': 102, 'deletions': 2, 'state': 'closed'}]"
288135843,guppy,oppia/guppy,JavaScript,4,1,2,14,502,3,9,3,"[{'id': 468823640, 'number': 1, 'closed': datetime.datetime(2020, 8, 18, 22, 2, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 13, 12, 54, tzinfo=datetime.timezone.utc), 'time_taken': 118165.0, 'time_delta': '1 day, 8:49:25', 'additions': 3, 'deletions': 1, 'state': 'closed'}]"
285521169,MIDI.js,oppia/MIDI.js,JavaScript,0,0,2,22,251,0,3,0,"[{'id': 463976106, 'number': 1, 'closed': datetime.datetime(2020, 8, 6, 23, 39, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 11, 49, 14, tzinfo=datetime.timezone.utc), 'time_taken': 42635.0, 'time_delta': '11:50:35', 'additions': 3, 'deletions': 9, 'state': 'closed'}]"
