pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
441600175,Removal of baseline images from matplotlib_baseline_images package,"## PR Summary

- Generated a matplotlib.tests wheel that can be uploaded to PyPI as a separate PyPI package (""distribution"", in distutils parlance), to make it possible to install test data from PyPI.
This is useful e.g. for mplcairo, whose test suite relies on matplotlib's one.
Also, useful for Baseline image problem optimisation.
- Created the `test_data` folder needed for additional test images apart from the baseline images
-  Created the logic for the generation of the baseline images on fresh install of matplotlib
- In case, the baseline images exists exist and have changed then the logic for modification of the baseline images is created.  
- Creation of a plugin to generate images for both `matplotlib` and `mpl_toolkits` folders
- Added related documentation.




Fixes #16447 

attn: @anntzer 

## PR Checklist

- [ ] Has Pytest style unit tests
- [ ] Code is [Flake 8](http://flake8.pycqa.org/en/latest/) compliant
- [ ] New features are documented, with examples if plot related
- [ ] Documentation is sphinx and numpydoc compliant
- [ ] Added an entry to doc/users/next_whats_new/ if major new feature (follow instructions in README.rst there)
- [ ] Documented in doc/api/api_changes.rst if API changed in a backward-incompatible way

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",False,17793,https://api.github.com/repos/matplotlib/matplotlib/pulls/17793,https://github.com/matplotlib/matplotlib/pull/17793,closed,411,293,2434,11,7,84,2,0,"[{'name': 'topic: testing'}, {'name': 'status: needs rebase'}]",2020-06-29 19:16:57+00:00,2021-05-08 21:00:49+00:00,27049432.0,"313 days, 1:43:52","[{'comment_id': 447864433, 'comment_body': ""You could just check that shutil.which doesn't return None."", 'comment_created': datetime.datetime(2020, 6, 30, 17, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 447865481, 'comment_body': 'use venv instead', 'comment_created': datetime.datetime(2020, 6, 30, 17, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 447866311, 'comment_body': 'use cwd=... to run relative to the correct directory.', 'comment_created': datetime.datetime(2020, 6, 30, 17, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 447866610, 'comment_body': 'use cwd=... to run relative to the correct directory.\r\n... <- get from `matplotlib.__file__`', 'comment_created': datetime.datetime(2020, 6, 30, 17, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 447867905, 'comment_body': 'use cwd=... instead', 'comment_created': datetime.datetime(2020, 6, 30, 17, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 447870474, 'comment_body': 'instead of activating, use full path to python below (`""tmpenv/bin/python""`)', 'comment_created': datetime.datetime(2020, 6, 30, 17, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 447870781, 'comment_body': 'use shutil.copytree', 'comment_created': datetime.datetime(2020, 6, 30, 17, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 447871320, 'comment_body': 'use subprocess.run()', 'comment_created': datetime.datetime(2020, 6, 30, 17, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 447872323, 'comment_body': 'what if the directory already exists?', 'comment_created': datetime.datetime(2020, 6, 30, 17, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'anntzer', 'type': 'User'}, {'comment_id': 448412809, 'comment_body': 'What version of git do we get `worktree`?  I suspect that would be both faster and small footprint.', 'comment_created': datetime.datetime(2020, 7, 1, 14, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 448413450, 'comment_body': ""Don't rely on `'python'` being in the path or being the _right_ Python, it is better to use `sys.executable`"", 'comment_created': datetime.datetime(2020, 7, 1, 14, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 448414853, 'comment_body': 'should this be the new venv python?', 'comment_created': datetime.datetime(2020, 7, 1, 14, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 448415754, 'comment_body': 'Should also install pytest and all of the extra dependencies (pandas, ...) to make sure we generate all of the images or should we only match what the user has installed in their development environment? ', 'comment_created': datetime.datetime(2020, 7, 1, 14, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 448710044, 'comment_body': ""I think installing all extra dependencies is a better option as testing aims to check integrity amongst the components too, which can't be achieved if only some of the installs are done. \r\nFirst time all the images will be generated, later on we can move on specific missing installs and modifications of the baseline images."", 'comment_created': datetime.datetime(2020, 7, 2, 2, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'SidharthBansal', 'type': 'User'}, {'comment_id': 448725113, 'comment_body': 'What do you think @anntzer ?\r\n', 'comment_created': datetime.datetime(2020, 7, 2, 3, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'SidharthBansal', 'type': 'User'}, {'comment_id': 461278006, 'comment_body': 'I think we can remove the bottom half of this license file.', 'comment_created': datetime.datetime(2020, 7, 28, 2, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461279415, 'comment_body': 'Did you mean to commit all of these symlinks?', 'comment_created': datetime.datetime(2020, 7, 28, 2, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461279678, 'comment_body': 'We can drop this as we ended up not using it?', 'comment_created': datetime.datetime(2020, 7, 28, 2, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461279774, 'comment_body': 'remove extra comment?', 'comment_created': datetime.datetime(2020, 7, 28, 2, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461279884, 'comment_body': ""We don't need to commit this.  Sorry for leading down you a blind alley with this."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461280378, 'comment_body': 'I suspect we may need to invert this logic?  And probably look up why we are mixing eps and pdf here...', 'comment_created': datetime.datetime(2020, 7, 28, 2, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461280810, 'comment_body': 'We should raise a different exception here as the issue is not an ImageComparison failure, it is a ""failed to put the image in the right place"" failure.', 'comment_created': datetime.datetime(2020, 7, 28, 2, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461280949, 'comment_body': ""We don't need the `()` "", 'comment_created': datetime.datetime(2020, 7, 28, 2, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461282650, 'comment_body': 'We need to put some version of this back.\r\n\r\nWe should also add a default search path in `Path(matplotlib.get_cachedir()) / \'baselines\'` so that the caching on CI ""just works"" after we generate it the first time.  It is also good to store the baseline images outside of the repo so `git clean -xfd` does not delete them.', 'comment_created': datetime.datetime(2020, 7, 28, 2, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461283333, 'comment_body': ""This is :+1: the way it is, but I wonder if it is possible to use this pytest hook to fully _remove_ the tests we don't want to run?  Don't spend more than 15 minutes on this if you look at it at all."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461283528, 'comment_body': 'This needs to have some prose added to explain how to use the new flag.', 'comment_created': datetime.datetime(2020, 7, 28, 2, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461283607, 'comment_body': 'Add the mpl_toolkits directory as well?', 'comment_created': datetime.datetime(2020, 7, 28, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461283660, 'comment_body': 'We can pull the `fig.savefig` call up above the `if` to reduce the code duplication.\r\n\r\nThis is the sort of thing which if I were to come cross this in 2 years I would ask ""wait, this looks like it could have been done just once, why are they different?  There must be a reason!"" and then spend a bunch of time trying to figure out why it was written this way :-p ', 'comment_created': datetime.datetime(2020, 7, 28, 2, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461288239, 'comment_body': 'This is a bit picky, but the names in this function are confusing.  Could you change them to uniformly be `src_` for the file we are copying from and `dest_` for the paths we are copying to.\r\n\r\n""result"" is a bit ambiguous.  Is it the result of the run that we need to move or the ""result"" of the move.', 'comment_created': datetime.datetime(2020, 7, 28, 2, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461288397, 'comment_body': 'This comment applies to the other version of this code in conftest.py as well.', 'comment_created': datetime.datetime(2020, 7, 28, 2, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461288636, 'comment_body': 'Same comment about only calling savefig once ', 'comment_created': datetime.datetime(2020, 7, 28, 3, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 461518573, 'comment_body': 'Ok.', 'comment_created': datetime.datetime(2020, 7, 28, 11, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'SidharthBansal', 'type': 'User'}, {'comment_id': 468017236, 'comment_body': 'I think the plan is to also publish these to pypi?', 'comment_created': datetime.datetime(2020, 8, 10, 16, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 468020442, 'comment_body': 'move this logic to the pgf backend as well.', 'comment_created': datetime.datetime(2020, 8, 10, 16, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 468285453, 'comment_body': 'This section should probably be a paragraph, not a numbered list.  ', 'comment_created': datetime.datetime(2020, 8, 11, 2, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 468285602, 'comment_body': 'It is better to pull these out into their own blocks with \r\n\r\n```rst\r\n\r\nthis is some text ::\r\n\r\n    this is some code\r\n\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 2, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 468286148, 'comment_body': ""I'm still optimistic that we can convince pytest to generate both at once (as we can run both at once!)"", 'comment_created': datetime.datetime(2020, 8, 11, 2, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 468286510, 'comment_body': 'We don\'t need ""otherwise tests will fail"".', 'comment_created': datetime.datetime(2020, 8, 11, 2, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 468286791, 'comment_body': 'Again despite my request for lists, I think this would be read better as a paragraph.  Sorry that I communicated badly on this. ', 'comment_created': datetime.datetime(2020, 8, 11, 2, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 468286857, 'comment_body': 'What should a developer do if they want to change an image?', 'comment_created': datetime.datetime(2020, 8, 11, 2, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 471853554, 'comment_body': 'Do we need both of these markers?', 'comment_created': datetime.datetime(2020, 8, 18, 0, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 471853666, 'comment_body': 'Rather than skipping can we _remove_ the un-needed tests from this run?', 'comment_created': datetime.datetime(2020, 8, 18, 0, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 471853958, 'comment_body': ""I don't think we need to capture this variable?"", 'comment_created': datetime.datetime(2020, 8, 18, 0, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 471922804, 'comment_body': 'Anyhow the time complexity will remain the same that is, O(no of items aka tests) due to for loop. How is this change beneficial?', 'comment_created': datetime.datetime(2020, 8, 18, 5, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'SidharthBansal', 'type': 'User'}, {'comment_id': 471925084, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 18, 5, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'SidharthBansal', 'type': 'User'}, {'comment_id': 471925134, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 8, 18, 5, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SidharthBansal', 'type': 'User'}, {'comment_id': 473563675, 'comment_body': 'This should go in the developer set up guide (https://matplotlib.org/devel/contributing.html#installing-matplotlib-in-developer-mode) because this is something people need to know to get started with development now!', 'comment_created': datetime.datetime(2020, 8, 20, 3, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 473563979, 'comment_body': 'I think this and the previous sections should be merged as \r\n\r\n""either install the images shipped in the repo (for now) or generate from the current branch""', 'comment_created': datetime.datetime(2020, 8, 20, 3, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 473564984, 'comment_body': 'If we really can not get pytest to generate both sets at once, can you put a python script in `tools` that will do both of these?', 'comment_created': datetime.datetime(2020, 8, 20, 3, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 473566091, 'comment_body': 'This probably should also be in the contributing section as this is something that developers will have to do regularly?', 'comment_created': datetime.datetime(2020, 8, 20, 3, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 473566853, 'comment_body': 'This error message should detailed instructions of how to fix the problem (either by installing or generating).', 'comment_created': datetime.datetime(2020, 8, 20, 3, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 473567311, 'comment_body': 'This should include detailed instructions on how to generate the images?', 'comment_created': datetime.datetime(2020, 8, 20, 3, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 473568250, 'comment_body': 'This should probably be removed for now?', 'comment_created': datetime.datetime(2020, 8, 20, 3, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 473568330, 'comment_body': 'or used to generalize the code below.', 'comment_created': datetime.datetime(2020, 8, 20, 3, 37, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 478796920, 'comment_body': 'We probably need to put this back to package the handful of images that we still use in the tests or are they now packaged by default?', 'comment_created': datetime.datetime(2020, 8, 28, 2, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 478797561, 'comment_body': 'How is this working?  We should be looking for png/pdf/eps/svg not .py!', 'comment_created': datetime.datetime(2020, 8, 28, 2, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 478797685, 'comment_body': 'Can probably move this outside of the loop?', 'comment_created': datetime.datetime(2020, 8, 28, 2, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 478798302, 'comment_body': 'Also include how to install this from pypi?', 'comment_created': datetime.datetime(2020, 8, 28, 2, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 478799613, 'comment_body': 'This is probably a good place to put the logic of how the images are going to be managed going forward (either pulled from a ""blessed"" package or generated in-place).  We should also add some thing about the logic of why we think that these sometimes re-generated images (!!) are going to still provide the quality assurance that we are getting from a static set of images.', 'comment_created': datetime.datetime(2020, 8, 28, 2, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 478800149, 'comment_body': 'having these fixed set of ""blessed"" images sets (tied to a given release) is how we will ensure cross-platform consistency (like we do now).', 'comment_created': datetime.datetime(2020, 8, 28, 2, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 478800291, 'comment_body': ""Maybe also re-enforce here that we are ensuring that for a given developer the baseline images don't change due to local changes (even if there may be some variation between developers respective baselines due to different freetype / latex / ...)."", 'comment_created': datetime.datetime(2020, 8, 28, 2, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 478800383, 'comment_body': 'I would change this to ""How to update an existing baseline image""', 'comment_created': datetime.datetime(2020, 8, 28, 2, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 478800502, 'comment_body': ""We don't need to assert that the tests will pass (they should always be passing)."", 'comment_created': datetime.datetime(2020, 8, 28, 2, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 478800687, 'comment_body': 'Can you add a section here about how to add a _new_ image?  I think putting it before the how to change an image makes sense so that you can in the ""how to change"" section be like ""It is like adding an image, but we are also removing the old one"".', 'comment_created': datetime.datetime(2020, 8, 28, 2, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 478805496, 'comment_body': 'Maybe reduce this to ""If you are missing baseline images run with `--generate-images`, see [link] for more details""?\r\n\r\nSomething I do with my own writing is after I write a sentence I flip the order (put the second half first).  On one hand it makes sense to tell the reader the important information first, but readers usually do better being told why they should care about finishing the sentence rather than trying to guess why what you just told them was important.  For example\r\n\r\n> In the previous flow the committed baseline images were changed when the tests generating them changed.\r\n\r\nreads better than\r\n\r\n> In case any test doing comparison against baseline images is changed, then the baseline image was changed in the earlier flow.\r\n\r\n(and is shorter to boot!) ', 'comment_created': datetime.datetime(2020, 8, 28, 3, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 478962115, 'comment_body': 'This is on the per image basis, so it has to be inside the loop I guess.', 'comment_created': datetime.datetime(2020, 8, 28, 8, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'SidharthBansal', 'type': 'User'}, {'comment_id': 479178700, 'comment_body': 'But I guess we are not going to add any images. Images in the sub-wheel will also be generated images. ', 'comment_created': datetime.datetime(2020, 8, 28, 11, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'SidharthBansal', 'type': 'User'}, {'comment_id': 479203988, 'comment_body': 'As far as I remember those images were not image comparison tests for `baseline images`. So, we kept in the `test_data` folder. Then tests were passing. So, do we need this to revert it?', 'comment_created': datetime.datetime(2020, 8, 28, 12, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SidharthBansal', 'type': 'User'}, {'comment_id': 479396344, 'comment_body': 'I should have phrased this as ""add new tests that require new images"".', 'comment_created': datetime.datetime(2020, 8, 28, 16, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 479397188, 'comment_body': 'These control what goes into the build artifacts (the sdist and the wheels), if you do `pip install -ve .` you are running against the tree and things might work even if the packaging meta data is not correct.', 'comment_created': datetime.datetime(2020, 8, 28, 16, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 479405571, 'comment_body': 'Same version of matplotlib baseline images package as that of the matplotlib.', 'comment_created': datetime.datetime(2020, 8, 28, 16, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SidharthBansal', 'type': 'User'}, {'comment_id': 479425731, 'comment_body': 'Should we be suggesting folks generate the images themselves?  That will introduce all sorts of changes due to bad font installs.  I think tests should be done against canonical, even locally. ', 'comment_created': datetime.datetime(2020, 8, 28, 16, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 479426471, 'comment_body': '```suggestion\r\nCanonical images will be tied to\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 16, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 479427458, 'comment_body': 'As above - not sure we should encourage this.  Its basically a useless test if local images pass but fail when uploaded.', 'comment_created': datetime.datetime(2020, 8, 28, 17, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 479430396, 'comment_body': ""So I still don't understand what will happen at this point.  I fix a bug, but it changes the image for  `test_boo.py::test_existing_feature`.   I decide the change is acceptable, and submit a PR.  How does the reviewer know that the image changed?  How do they compare the old versus new and assess if the new change is actually acceptable or not?  How do the CI tests pass?  "", 'comment_created': datetime.datetime(2020, 8, 28, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 479432974, 'comment_body': ""In the previous flow changed baseline images were explicitly committed to the repo as part of the PR as a change to the file, and you could compare before and after.  I'm still not at all clear what the new plan is from these descriptions.  This needs a thorough before and after guide."", 'comment_created': datetime.datetime(2020, 8, 28, 17, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 479964218, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 31, 8, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SidharthBansal', 'type': 'User'}, {'comment_id': 480242865, 'comment_body': 'The point of this work is so that we _don\'t_ have to compare against the canonical version of the images which eliminates the issues we have with freetype / latex drifting under us.  So long as you don\'t change your local images commit-to-commit they should also not change commit-to-commit on a different machine with a different freetype / latex install.\r\n\r\nThe plan is to with a release publish a set of ""blessed"" images with a fixed freetype.', 'comment_created': datetime.datetime(2020, 8, 31, 16, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 480259594, 'comment_body': ""OK, I thought the point was not to have all the images in the repo.  \r\n\r\nSo the idea is that I generate the images off of master, and then make a new branch, make my changes and then run the tests and compare my changes to the ones I made on master.  \r\n\r\nA possible difficulty here are all the fixed-size tests we have that are *not* image tests.  There are many tests we have that assert the position of an element is at 0.9765, but it may not be if we don't have the same font library.  \r\n\r\nIn either case, the above description is not clear on the process.  I'd say something like\r\n\r\n```\r\nIn order to run local image tests, the developer should checkout the ``master`` branch and \r\nrun the tests once to get a set of baseline images that are consistent with the code in \r\n``master``.  Then subsequent tests from their branches will test against these baseline\r\n images.  \r\n\r\nAlternately, the developer could download the ``matplotlib-baseline-images`` package and\r\ncompare against these images.  However, the developer will have to be certain to have \r\ndevelopment environment that has the same free type and other dependencies as the testing \r\nenvironment on the the machine that made ``matplotlib-baseline-images``.  \r\n\r\n```"", 'comment_created': datetime.datetime(2020, 8, 31, 16, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jklymak', 'type': 'User'}, {'comment_id': 480273415, 'comment_body': 'Great thoughts. I will write the documentation for those cases. Thanks\r\n', 'comment_created': datetime.datetime(2020, 8, 31, 17, 19, 57, tzinfo=datetime.timezone.utc), 'commenter': 'SidharthBansal', 'type': 'User'}, {'comment_id': 481256888, 'comment_body': 'The idea is to eventually remove all of the images but we have options about where devs get the baselines from.', 'comment_created': datetime.datetime(2020, 9, 1, 16, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 484508617, 'comment_body': 'This needs a paragraph explaining the current state of things to the reader.  To us (who have been thinking about this all summer), this makes perfect sense, but to a new contributor who does not even know we _have_ baseline images checked into the repo this is going to be consufing.', 'comment_created': datetime.datetime(2020, 9, 7, 16, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 484509882, 'comment_body': 'I agree.', 'comment_created': datetime.datetime(2020, 9, 7, 16, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tacaswell', 'type': 'User'}, {'comment_id': 484999642, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 9, 8, 15, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SidharthBansal', 'type': 'User'}]","[{'commit_sha': '1559df38aa68778391eb8a2ebb0d32f7463c1e6b', 'committer_username': 'SidharthBansal', 'committer_name': 'Sidharth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 14, 18, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec5e8cfa989aef89808f0a42ea2dcc690d74788f', 'committer_username': 'SidharthBansal', 'committer_name': 'Sidharth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 14, 18, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '282c0a5e2e9fa0dd9c0791d22f4aa04394e7208a', 'committer_username': 'SidharthBansal', 'committer_name': 'Sidharth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 14, 18, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba5baebc53d1f6ecaa9c53d744f05c6f0e3269a2', 'committer_username': 'SidharthBansal', 'committer_name': 'Sidharth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 14, 18, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcdb2680bd71194f3a5dc0993a7fc9615be9b4c1', 'committer_username': 'SidharthBansal', 'committer_name': 'Sidharth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 14, 18, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9d5aeda3cae4cff228f605c2be4bd1d4807ea52', 'committer_username': 'SidharthBansal', 'committer_name': 'Sidharth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 14, 18, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b32cae7bed6f16bebd2f658fef9ee926c7a9cc9d', 'committer_username': 'SidharthBansal', 'committer_name': 'Sidharth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 14, 18, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5355933ff349e9a9e8c7596d3b3e5dc95fa8cee5', 'committer_username': 'SidharthBansal', 'committer_name': 'Sidharth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 14, 18, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8243f7dea6fc809840d6d605ee8c8b3fcd585563', 'committer_username': 'SidharthBansal', 'committer_name': 'Sidharth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 14, 18, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57bfa8985848be598d5bb01e6dea559b8f3cb0c0', 'committer_username': 'SidharthBansal', 'committer_name': 'Sidharth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 14, 18, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ac82c77a88c462c4d336dba62222dea7a32d90a', 'committer_username': 'SidharthBansal', 'committer_name': 'Sidharth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 14, 18, 21, tzinfo=datetime.timezone.utc)}]",Sidharth Bansal,20972099,,User,,115,,8,71

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
1385122,matplotlib,matplotlib/matplotlib,Python,7544,19832,596,1713,50929,1592,23,389,"[{'id': 454521553, 'number': 17996, 'closed': datetime.datetime(2020, 7, 21, 18, 32, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 13, 54, 9, tzinfo=datetime.timezone.utc), 'time_taken': 16717.0, 'time_delta': '4:38:37', 'additions': 20, 'deletions': 24, 'state': 'closed'}, {'id': 441600175, 'number': 17793, 'closed': datetime.datetime(2021, 5, 8, 21, 0, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 19, 16, 57, tzinfo=datetime.timezone.utc), 'time_taken': 27049432.0, 'time_delta': '313 days, 1:43:52', 'additions': 411, 'deletions': 293, 'state': 'closed'}, {'id': 440855303, 'number': 17776, 'closed': datetime.datetime(2020, 6, 28, 3, 59, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 27, 3, 47, 3, tzinfo=datetime.timezone.utc), 'time_taken': 87151.0, 'time_delta': '1 day, 0:12:31', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 427146391, 'number': 17557, 'closed': datetime.datetime(2020, 8, 18, 17, 19, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 3, 11, 41, 1, tzinfo=datetime.timezone.utc), 'time_taken': 6586733.0, 'time_delta': '76 days, 5:38:53', 'additions': 183, 'deletions': 54, 'state': 'closed'}, {'id': 419157934, 'number': 17434, 'closed': datetime.datetime(2020, 6, 5, 18, 4, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 17, 19, 3, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1638047.0, 'time_delta': '18 days, 23:00:47', 'additions': 56, 'deletions': 9, 'state': 'closed'}, {'id': 401438442, 'number': 17080, 'closed': datetime.datetime(2020, 4, 9, 16, 58, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 9, 13, 55, tzinfo=datetime.timezone.utc), 'time_taken': 11009.0, 'time_delta': '3:03:29', 'additions': 0, 'deletions': 16, 'state': 'closed'}, {'id': 401036796, 'number': 17074, 'closed': datetime.datetime(2020, 4, 8, 22, 25, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 8, 19, 29, 40, tzinfo=datetime.timezone.utc), 'time_taken': 10555.0, 'time_delta': '2:55:55', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 400803323, 'number': 17068, 'closed': datetime.datetime(2020, 4, 8, 16, 47, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 8, 11, 55, 22, tzinfo=datetime.timezone.utc), 'time_taken': 17523.0, 'time_delta': '4:52:03', 'additions': 191, 'deletions': 311, 'state': 'closed'}, {'id': 400214868, 'number': 17056, 'closed': datetime.datetime(2022, 12, 6, 0, 18, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 7, 11, 42, 34, tzinfo=datetime.timezone.utc), 'time_taken': 84026138.0, 'time_delta': '972 days, 12:35:38', 'additions': 5, 'deletions': 8, 'state': 'closed'}, {'id': 399926986, 'number': 17050, 'closed': datetime.datetime(2020, 4, 8, 11, 50, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 6, 21, 55, 45, tzinfo=datetime.timezone.utc), 'time_taken': 136462.0, 'time_delta': '1 day, 13:54:22', 'additions': 24459, 'deletions': 41210, 'state': 'closed'}, {'id': 399710422, 'number': 17047, 'closed': datetime.datetime(2020, 4, 7, 9, 48, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 6, 15, 4, 39, tzinfo=datetime.timezone.utc), 'time_taken': 67426.0, 'time_delta': '18:43:46', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 399511054, 'number': 17042, 'closed': datetime.datetime(2020, 4, 7, 17, 2, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 6, 9, 36, 31, tzinfo=datetime.timezone.utc), 'time_taken': 113163.0, 'time_delta': '1 day, 7:26:03', 'additions': 6, 'deletions': 52, 'state': 'closed'}, {'id': 399053902, 'number': 17038, 'closed': datetime.datetime(2020, 4, 5, 14, 53, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 5, 12, 5, 6, tzinfo=datetime.timezone.utc), 'time_taken': 10133.0, 'time_delta': '2:48:53', 'additions': 6, 'deletions': 4, 'state': 'closed'}, {'id': 398734330, 'number': 17031, 'closed': datetime.datetime(2020, 4, 4, 21, 6, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 4, 20, 26, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2453.0, 'time_delta': '0:40:53', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 398701444, 'number': 17030, 'closed': datetime.datetime(2020, 4, 30, 20, 54, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 4, 19, 38, 28, tzinfo=datetime.timezone.utc), 'time_taken': 2250968.0, 'time_delta': '26 days, 1:16:08', 'additions': 58, 'deletions': 64, 'state': 'closed'}, {'id': 398516652, 'number': 17028, 'closed': datetime.datetime(2020, 4, 13, 20, 26, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 4, 11, 47, 44, tzinfo=datetime.timezone.utc), 'time_taken': 808742.0, 'time_delta': '9 days, 8:39:02', 'additions': 13, 'deletions': 5, 'state': 'closed'}, {'id': 398417058, 'number': 17021, 'closed': datetime.datetime(2020, 4, 7, 7, 9, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 3, 22, 42, 50, tzinfo=datetime.timezone.utc), 'time_taken': 289594.0, 'time_delta': '3 days, 8:26:34', 'additions': 12, 'deletions': 14, 'state': 'closed'}, {'id': 397786497, 'number': 17008, 'closed': datetime.datetime(2020, 4, 3, 18, 9, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 2, 19, 57, 47, tzinfo=datetime.timezone.utc), 'time_taken': 79920.0, 'time_delta': '22:12:00', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 397227814, 'number': 16998, 'closed': datetime.datetime(2020, 4, 1, 22, 0, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 1, 20, 55, 16, tzinfo=datetime.timezone.utc), 'time_taken': 3900.0, 'time_delta': '1:05:00', 'additions': 15, 'deletions': 15, 'state': 'closed'}]"
