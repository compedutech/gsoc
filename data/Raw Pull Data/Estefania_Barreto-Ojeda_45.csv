pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
677488146,Initial refactor and test added [Fixes #33],"Helps to fix #33.
In this first version of the refactored code, the calculation of curvature doesn't evaluate per leaflet, and instead, it runs for a surface defined by selected atoms. (More general)

Changes in this PR:
- [x] Surface derived from direct selection using `MDAnalysis`.
- [x] Deleted functions `def_all_beads`, `curvature` and `core_fast`.
- [x] Function `grid_map` to map coordinates to grid added.  
- [x] In `grid_map` arguments as np.array / tuples instead of topologies. 
- [x] Replaced `MDtraj` by `MDanalysis` 100%.

As suggested [here](https://github.com/MDAnalysis/membrane-curvature/pull/30#pullrequestreview-687924575), tests with toy model using `pytest.mark.parametrize` added:
- [x] `test_grid_map_small_9grid`,  using toy model in small grid of 9 lipids in a 3x3 grid, with x values of 0, 1, 2, and y values of 0, 1, 2.
- [x] `test_grid_map_25grid`, using toy model in small grid of 25 lipids in a 5x5 grid, with x values of 0, 1, 2,3,4 and y values of 0, 1, 2,3,4.

This  PR may also fix
- #27   since function `def_all_beads` was deleted after replacing `MDtraj by `MDAnalysis`. 
- #28   since function `core_fast` was deleted after refactoring. 
- #32  since function `def_all_beads` was deleted after refactoring and replaced by direct selection using MDAnalysis`.

Edit: This PR also fixes #16 . ",True,34,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/34,https://github.com/MDAnalysis/membrane-curvature/pull/34,closed,198,401,6,6,4,26,0,0,[],2021-06-24 22:48:10+00:00,2021-06-25 22:38:53+00:00,85843.0,23:50:43,"[{'comment_id': 658396513, 'comment_body': ""MDAnalysis is not restricted to GRO format files. I'd just call it *topology* and *trajectory*."", 'comment_created': datetime.datetime(2021, 6, 25, 1, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658398333, 'comment_body': 'This gives you Lx only. Do you assume square X-Y ?', 'comment_created': datetime.datetime(2021, 6, 25, 1, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658399155, 'comment_body': 'Maybe at least\r\n```python\r\nbox_size = max(u.dimensions[0], u.dimensions[1])\r\n```\r\n\r\nIf you assume orthorhombic boxes then consider just failing here if you encounter a triclinic box.', 'comment_created': datetime.datetime(2021, 6, 25, 1, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658400338, 'comment_body': 'Docs (x,y) do not seem to agree with function signature (coords, factor)', 'comment_created': datetime.datetime(2021, 6, 25, 1, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658402409, 'comment_body': ""Is coords a single coordinate (essentially a 3-tuple)?\r\n\r\nIf so then you should keep in mind for later that you can almost certainly gain quite a bit of performance by doing the grid indexing operation on all coordinates at once (there's code related to `np.histogramdd` that you can probably use... but not in this PR!)"", 'comment_created': datetime.datetime(2021, 6, 25, 1, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658403156, 'comment_body': 'What was the `jump` argument good for?', 'comment_created': datetime.datetime(2021, 6, 25, 1, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658403979, 'comment_body': 'Why division by 10?\r\n\r\nWhat units is your code working in?\r\n', 'comment_created': datetime.datetime(2021, 6, 25, 1, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658404829, 'comment_body': 'Once you start optimizing for performance, you most likely will want to completely eliminate this for-loop.', 'comment_created': datetime.datetime(2021, 6, 25, 1, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658406379, 'comment_body': ""personally, I'd have kept `l` and `m` — they are only used here and I find the more mathematical notation clearer, but different people have different preferences. "", 'comment_created': datetime.datetime(2021, 6, 25, 1, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658407470, 'comment_body': 'On the other had, `grid_1` and `grid_2` could do with more expressive names, like `z_grid` and `counts`/`n_grid` ... anything but numbers ;-)', 'comment_created': datetime.datetime(2021, 6, 25, 1, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658409301, 'comment_body': ""We tend to avoid `print` in production code as it's easy overlooked and people often don't like it when their screen is filled with random messages. If it needs to be printed then we use a logger. If you need to know provide warnings to the user then you can also build up the information in a list and then outside the loop summarize what happened in a message.\r\n\r\nFor right now, you can leave the `print` but down the line you'll want to think about hoe to communicate with the user."", 'comment_created': datetime.datetime(2021, 6, 25, 1, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658410146, 'comment_body': 'Also amenable to array arithmetic for speedups (later...)\r\n\r\nSame for the for loop below.', 'comment_created': datetime.datetime(2021, 6, 25, 1, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658411389, 'comment_body': 'Why are you removing/changing tests here? This seems dangerous. How do you know that your changes did not introduce bugs? \r\n\r\nFor this PR I would have expected _no changes_ to the tests.', 'comment_created': datetime.datetime(2021, 6, 25, 1, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658430215, 'comment_body': 'Interesting, this is another type of detail pep8 shouts at me to tell me that is too vague and I should do it more specific. The previous versions were `l` and `m`.  ', 'comment_created': datetime.datetime(2021, 6, 25, 2, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 658431322, 'comment_body': '`jump` was to skip frames. I was using `jump = 1` for all the tests so I decided it was not very useful at this point either.', 'comment_created': datetime.datetime(2021, 6, 25, 2, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 658436455, 'comment_body': 'Yes, this is one of the limitations and one of the next issues to solve. Issue #35 added. ', 'comment_created': datetime.datetime(2021, 6, 25, 2, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 658436807, 'comment_body': ""Yes, you are right and thanks for this catch. I'll update it. \r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 25, 2, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 658438700, 'comment_body': 'In `nm` :( ', 'comment_created': datetime.datetime(2021, 6, 25, 2, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 658440454, 'comment_body': 'I will put them back, I just thought of simplifying the tests by providing smaller arrays. But I see your point.', 'comment_created': datetime.datetime(2021, 6, 25, 3, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 658448982, 'comment_body': 'Previous tests`test_gaussian_curvature` and `test_mean_curvature`(now called `test_gaussian_curvature_all`and `test_mean_curvature_all`, repectively) added back and passing. ', 'comment_created': datetime.datetime(2021, 6, 25, 3, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 658919345, 'comment_body': ""Could you please add a test with negative coordinates? It might fail for now but that's ok."", 'comment_created': datetime.datetime(2021, 6, 25, 17, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 658921016, 'comment_body': 'This parametrization is just testing one set of arguments, do you plan to add more? You could combine the 9-grid and the 25-grid into the one function with parametrize though.', 'comment_created': datetime.datetime(2021, 6, 25, 17, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 658922928, 'comment_body': ""+1 to @orbeckst's comment -- it would be good to start thinking about expected inputs and output. For example, the most common way that coordinates tend to be passed around is in an (N x 3) numpy array. Even without `np.histogramdd` you could then simplify this function to `return np.abs(coords * factor).astype(int)`. "", 'comment_created': datetime.datetime(2021, 6, 25, 17, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 658928449, 'comment_body': ""Warnings have the advantage that they can be easily tested for in pytest, so that you can check that they're raised when a user does something silly :)"", 'comment_created': datetime.datetime(2021, 6, 25, 17, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 658938511, 'comment_body': 'I think that `test_mapper` is not strictly needed here -- I think you could do the below?\r\n\r\n```suggestion\r\n        assert grid_map(dummy_coord, factor) == dummy_coord\r\n```\r\n\r\nIn addition, could you please add a test where the output of `grid_map` is different from the input `dummy_coord`? Otherwise this will pass even with `grid_map = lambda x, *args: x` :) ', 'comment_created': datetime.datetime(2021, 6, 25, 17, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 658971682, 'comment_body': ""I see that you're first creating an average surface before computing the curvature. On a scientific level, maybe we should consider treating each surface for each frame separately? Otherwise, if you have a membrane that undulates such that a patch has ~50% positive curvature and 50% negative curvature over the frames, the Gaussian curvature is ultimately computed on a flat surface?"", 'comment_created': datetime.datetime(2021, 6, 25, 18, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}]","[{'commit_sha': 'e09c2dff8d93430573b555211e3830bc3fd3d2b8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3df5cdd66a498b8f256ea7afc8fa5b975ac7067c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '042e62515e51f2f7507c535b53b698d8b23c6db9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c9ea46229bc2c1f99abd5a7e9d8ec9036277896a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0e4a100e61de5e305d3323350aefa221f5f01a57', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8569cf02420ce3466f75c0bdaf1c6788a6642bfe', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
679552675,Added `derive_surface` and `get_positions` with tests.,"Function `core_fast_leaflets` split into three functions:

- [x] get positions for each atom in the atom group for each frame.
- [x]  identify the grid cell for each coordinate.
- [x] calculate the average z for the atom group.

Tests added:
- [x] `test_get_positions` using dummy coordinates for beads 0 to 8, all of them with `z=10`:
```
o ______ o _____ o _______ |
|   (6)  |  (7)   |   (8)  |
o ______ o _____ o _______ |
|   (3)  |  (4)   |   (5)  |
o _______o ______ o ______ |
|   (0)  |  (1)   |   (2)  |
o ______ o ______ o ______ |
```
Using the same number of beads in grids, 

- [x] `test_avg_unit_cell` added for two systems.
1.  z values of `z=10`
2. z values as below:
```
o ______ o _____ o _______ |
| (z=10) | (z=20) | (z=30) |
o ______ o _____ o _______ |
| (z=10) | (z=20) | (z=30) |
o _______o ______ o ______ |
| (z=10) | (z=20) | (z=30) |
o ______ o ______ o ______ |
```
3. z values of `z=10` and number of beads per unit cell as shown below:
```
o ____ o ____ o ___ |
|   2  |  1   |  1  |
o ____ o ____ o ___ |
|   1  |  2   |  1  |
o ____ o ____ o ___ |
|   1  |  1   |  2  |
o ____ o ____ o ___ |
```

- [x] `test_derive_surface` added for same `dummy_coordinates` as in `test_get_positions`.",True,40,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/40,https://github.com/MDAnalysis/membrane-curvature/pull/40,closed,139,99,3,12,6,47,0,0,[],2021-06-29 03:19:13+00:00,2021-07-06 02:19:01+00:00,601188.0,"6 days, 22:59:48","[{'comment_id': 660857021, 'comment_body': ""Hi @ojeda-e I'm looking forward to being able to use your membrane curvature tool! I'm not sure if this fits your purpose exactly, but you could use [`scipy.stats.binned_statistic_2d`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binned_statistic_2d.html) to generate a surface of all your beads in one go."", 'comment_created': datetime.datetime(2021, 6, 29, 18, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 660857939, 'comment_body': 'could you do `selection.wrap` to ensure all atoms are within the grid boundaries?', 'comment_created': datetime.datetime(2021, 6, 29, 18, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 661051748, 'comment_body': ""Thanks for this suggestion @p-j-smith. I love the simplicity of `binned_statistic_2d(statistic='mean')` to get the mean z-values in one go! We might have to remember this for the refactor and remember to unwrap values for PBC"", 'comment_created': datetime.datetime(2021, 6, 30, 0, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 661051960, 'comment_body': 'I feel like selection was the better choice here 😅', 'comment_created': datetime.datetime(2021, 6, 30, 0, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 661052062, 'comment_body': '```suggestion\r\n    z_ref = np.zeros((n_cells, n_cells))\r\n```\r\n\r\nThe suggested type for a numpy array shape is a tuple of integers. The same suggestion applies to the below.', 'comment_created': datetime.datetime(2021, 6, 30, 0, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 661054536, 'comment_body': '```suggestion\r\ndef get_z_surface(coordinates, n_x_bins=10, n_y_bins=10, x_range=(0, 100), y_range=(0, 100)):\r\n```\r\n\r\nCould you have a go at writing this function to only take in an array (Nx3) of coordinates in angstrom, number of cells/bins on the x-axis (n_x_bins), number of cells/bins on the y-axis (n_y_bins), the minimum and maximum x values (x_range) in angstrom, and the minimum and maximum y values (y_range)?\r\n\r\n<img width=""516"" alt=""Screen Shot 2021-06-29 at 5 49 17 pm"" src=""https://user-images.githubusercontent.com/31115101/123885441-54c09000-d902-11eb-9f1a-016346f1ee04.png"">\r\n\r\n\r\nThis then becomes the most essential, basic point of the function. Later you can write new functions that add new functionality like applying it to an AtomGroup, for example:\r\n\r\n```python\r\ndef derive_surface(atomgroup, n_cells, max_width):\r\n\tatomgroup.unwrap(pbc=True)\r\n\tcoordinates = atomgroup.positions\r\n\treturn get_z_surface(coordinates, n_x_bins=n_cells, n_y_bins=n_cells,\r\n\t\t\t\t\t     x_range=(0, max_width), y_range=(0, max_width))\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 0, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 661074185, 'comment_body': ""Looking back over previous comments I realise that this directly contradicts https://github.com/MDAnalysis/membrane-curvature/pull/34#pullrequestreview-693038505 . Sorry if I am being confusing and backtracking on that. The motivation for the original comment came from how long the original function was. If the same thing can be accomplished with one line, it doesn't need to be separate functions anymore.\r\n\r\n> I would be keen to have these as divorced from either MDTraj or MDAnalysis as possible and work only with numpy arrays, which are generally more versatile. The overall function could grab the positions from the AtomGroup and feed it into the functions instead.\r\n\r\nThe above point is the more important one than having separate functions -- working with just numpy arrays for the base function."", 'comment_created': datetime.datetime(2021, 6, 30, 1, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 661267078, 'comment_body': ""I don't think you need to (or should) loop over atoms.  Instead something like `np.rint(bead.positions[:, :2] / factor)` should give you an array of the `l` and `m` values."", 'comment_created': datetime.datetime(2021, 6, 30, 8, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 663281876, 'comment_body': ""Is there a special reason for casting to np.float32? Why not just `n_cells / max_width` to keep it simple?\r\n\r\nMy reason is that you remove something that's mysterious not obvious why it needs to be there so that reading the code becomes easier. If at some point you _need_ an array top be float32, explicitly set the array's dtype."", 'comment_created': datetime.datetime(2021, 7, 2, 23, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 663282083, 'comment_body': ""I don't think this function should be needed. See if you can write your code with numpy arrays and broadcasting/slicing."", 'comment_created': datetime.datetime(2021, 7, 2, 23, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 663282168, 'comment_body': ""ANd you'll get rid of `get_positions()`."", 'comment_created': datetime.datetime(2021, 7, 2, 23, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 663282751, 'comment_body': 'See if you can eliminate this loop. Something like\r\n```python\r\nnormed = grid_norm_unit > 0\r\nz_ref[normed] += grid_z_coordinates / grid_norm_unit\r\nz_ref[~normed] = np.nan\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 23, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 663320475, 'comment_body': 'Thanks for the comment @orbeckst Yes, there is a reason to use the `np.float32`. I discovered in the process of writing the code that the `/` operation is more expensive when I perform `n_cells / max_width` due to the type of the variables: `int` and `numpy.float64`, respectively. The `np.float32` was introduced to speed up. Since it is an operation that runs in every frame, the difference in performance is significant. To give you an estimate, in a system with only 500 lipid headgroups to define the surfaces per leaflet, the calculations runs 20% faster using the `np.float32` trick.', 'comment_created': datetime.datetime(2021, 7, 3, 5, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663345360, 'comment_body': ""I think I'm mis-reading this, aren't `max_width` and `n_cells` both `ints` (going by both the docstring and the tests)?\r\n\r\nOr are you referring to another division somewhere else?"", 'comment_created': datetime.datetime(2021, 7, 3, 9, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 663346285, 'comment_body': '@fiona-naughton just pointed out the following to me: https://github.com/MDAnalysis/membrane-curvature/blob/97713b39675940ea141b2980ae948db74fa3d5e5/membrane_curvature/core.py#L27\r\n\r\nIn any case, casting to np.float32 is more expensive for this specific operation on my end, does the performance difference maybe appear later on in the calculation?', 'comment_created': datetime.datetime(2021, 7, 3, 10, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 663395288, 'comment_body': 'Thanks @IAlibay . In real-world systems the performance is significantly better using `np.float32`. The tests added so far were simplified as suggested by @lilyminium (See #22 and #31). I would prefer to keep it in the code, even if for the tests it looks like overkill. (I can remove it later if the benchmarks say otherwise)', 'comment_created': datetime.datetime(2021, 7, 3, 18, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663395509, 'comment_body': ""Thanks for your comment @richardjgowers. It also simplifies the function to the point `grid_map` isn't necessary. Since I also need the z coordinate as a float, I modified your suggestion to the following\r\n`cell_xy_floor = np.int32( selection.positions[:,:2] / factor )`\r\n`z_coordinate = selection.positions[:, 2] / factor * 10`.\r\n"", 'comment_created': datetime.datetime(2021, 7, 3, 18, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663395631, 'comment_body': 'This is very cool, thanks @orbeckst. Your suggestion was included in the function `avg_unit_cell`. The previous tests work as expected. ', 'comment_created': datetime.datetime(2021, 7, 3, 18, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663400789, 'comment_body': ""I still heavily recommend against early optimization, especially given that we don't seem to know what is actually benefitting from the cast? (it 100% can't be line 64)\r\n\r\nAnyways, at the end of the day I don't see it as a big deal (as long as it doesn't impact accuracy), so I'll default to the other mentor's opinions here (especially given that @lilyminium's suggestion https://github.com/MDAnalysis/membrane-curvature/pull/40#discussion_r661054536 would change this code completely?).\r\n\r\nHowever, I will add the following as things that probably need addressing:\r\n\r\n1. Both `n_cells` and `max_width` are written in the docstring as `int` inputs. Is this meant to be the case? If not, the docstring needs to be updated accordingly.\r\n\r\n2. Especially if they are meant to be `int`, then assuming we still want to keep this optimization in, why `np.float32`? Unless you're doing heavy vector operations, shouldn't a built-in `float` for a single value always be equal or faster in performance? (if they are `int` then it will default to a built-in `float` so it shouldn't even be necessary to cast?)\r\n"", 'comment_created': datetime.datetime(2021, 7, 3, 19, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 663401621, 'comment_body': ""Thanks for highlighting the docstrings, `max_width` is not `int` type, it's `float`. I'll update them. \r\nI don't see anything wrong with keeping it anyway. I'll leave and will re-evaluate in a performance test. \r\n"", 'comment_created': datetime.datetime(2021, 7, 3, 19, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663435927, 'comment_body': '> Hi @ojeda-e, I think I had something different in mind when I requested that you only use numpy etc and break it down to basics. Could you have a go at writing the function with the input arguments I suggested? I haven\'t had a look at tests because I assume they\'ll change with the new function.\r\n> \r\n> @p-j-smith had a good suggestion with the scipy function. When I said ""numpy only"" that was probably too restrictive, sorry; totally on me. For future reference, you should consider any package safe if it\'s something that MDAnalysis considers a [""core dependency""](https://userguide.mdanalysis.org/stable/module_imports.html#list-of-core-module-dependencies). I actually find it preferable to use numpy/scipy functions because they\'re usually written by people much smarter than me, who\'ve thought about the problem longer than me -- this usually results in faster, better code.\r\n> \r\n> If you try something like the code below, you might make this a very short function!\r\n> \r\n> ```python\r\n> x, y, z = coordinates.T\r\n> scipy.stats.binned_statistic_2d(x, y, z, statistic=""mean"", bins=..., range=...)\r\n> ```\r\n\r\nHi @lilyminium, the PR has a lot of different feedback at this point and I ended up following the suggestion from @richardjgowers which conflicts with this one. Could we defer this to an issue as it would require me to add a new dependency and can be done in parallel with other work?', 'comment_created': datetime.datetime(2021, 7, 4, 2, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663437477, 'comment_body': ""> def get_z_surface(coordinates, n_x_bins=10, n_y_bins=10, x_range=(0, 100), y_range=(0, 100)):\r\n\r\nI don't think the feedback about the function signature contradicts @richardjgowers. You don't have to use scipy now if you don't want to -- the main gist is to have the main function work solely on numpy arrays of positions. I think you'll find this helpful for refactoring in #41; if you have a look at existing AnalysisBase classes, the important functions very rarely work on MDAnalysis Universes. Instead, the positions are extracted in `_single_frame` and these numpy arrays are used for the actual computation.\r\n\r\nYou've already done most of the work, to be honest. The simplest, most immediate conversion would be:\r\n\r\n```python\r\ndef derive_surface(n_cells, selection, max_width):\r\n\tcoordinates = selection.positions\r\n\treturn get_z_surface(coordinates, n_x_bins=n_cells, n_y_bins=n_cells,\r\n\t\t\t\t\t     x_range=(0, max_width), y_range=(0, max_width))\r\n\r\ndef get_z_surface(coordinates, n_x_bins=10, n_y_bins=10, x_range=(0, 100), y_range=(0, 100)):\r\n\tz_ref = np.zeros((n_x_bins, n_y_bins))\r\n\tgrid_z_coordinates = np.zeros((n_x_bins, n_y_bins))\r\n    grid_norm_unit = np.zeros((n_x_bins, n_y_bins))\r\n\r\n    x_factor = n_x_bins / (x_range[1] - x_range[0])\r\n    y_factor = n_y_bins / (y_range[1] - y_range[0])\r\n    x_coords, y_coords, z_coords = coordinates.T\r\n    cell_x_floor = np.floor(x_coords * x_factor).astype(int)\r\n    cell_y_floor = np.floor(y_coords * y_factor).astype(int)\r\n    for l, m, z in zip(cell_x_floor, cell_y_floor, z_coords):\r\n    \t... # rest of current derive_surface\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 4, 2, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663438124, 'comment_body': ""I also wouldn't be afraid of adding a new dependency (especially from the MDAnalysis core dependencies). It's mostly a matter of adding the package name to:\r\n* https://github.com/MDAnalysis/membrane-curvature/blob/main/devtools/conda-envs/test_env.yaml\r\n* https://github.com/MDAnalysis/membrane-curvature/blob/main/docs/requirements.yaml"", 'comment_created': datetime.datetime(2021, 7, 4, 3, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663439487, 'comment_body': 'Thanks, I just thought this was going to be a separate issue. In the function you suggest the number of x and y bins is different, which I thought was going to be addressed later in #35 (together with PBC issue #36). \r\n\r\nWould you please confirm that is better to add this change here? @lilyminium \r\nAnother option is to use your suggested function but without independent `x` and `y` (i.e. square arrays) and then complete the work when I address #35 later on?', 'comment_created': datetime.datetime(2021, 7, 4, 3, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663440097, 'comment_body': ""IMO since you know that you want to address #35 in the future, there's no harm in designing your code towards that direction now. If you think it's easier to write and test a function that only takes `get_z_surface(coordinates, n_bins=10, range=(0, 100))` and then modify all the tests you write here for the `get_z_surface(coordinates, n_x_bins=10, n_y_bins=10, x_range=(0, 100), y_range=(0, 100))` signature later, go for it -- but to me it sounds like extra work.\r\n\r\nIf you have no intention of testing non-square arrays in this PR, you could just pass the same number into `n_x_bins` and `n_y_bins` as shown in the `derive_surface` example above. Then when you want to add rectangular functionality, you don't need to modify the existing tests from this PR."", 'comment_created': datetime.datetime(2021, 7, 4, 3, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663440326, 'comment_body': ""Thanks for the quick reply. I'll add it here then. "", 'comment_created': datetime.datetime(2021, 7, 4, 3, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663570561, 'comment_body': ""You've now added ``max_width_x`` and ``max_width_y``, could you please update the\r\ndocumentation? The ``n_cells`` entry too :)"", 'comment_created': datetime.datetime(2021, 7, 4, 23, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663570776, 'comment_body': ""Could you please be a little more precise what this returns -- typically if it's an array we would give the type and expected shape of the array, e.g.\r\n\r\n```\r\nReturns\r\n-------\r\nz_coordinates: numpy.ndarray\r\n\tAverage z-coordinate values. This is a numpy array of floats,\r\n    shape (n_cells, n_cells)\r\n```"", 'comment_created': datetime.datetime(2021, 7, 4, 23, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663570818, 'comment_body': '```suggestion\r\n    coordinates : numpy.ndarray\r\n```\r\n\r\nI think this is a numpy array?', 'comment_created': datetime.datetime(2021, 7, 4, 23, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663571015, 'comment_body': '```suggestion\r\n    x_range : tuple of (float, float)\r\n        Range of indexes in grid in the x dimension with shape=(0, max_width_x).\r\n```\r\n\r\nI thought this would be the minimum x coordinate and the maximum x coordinate in angstrom? The shape is actually (2,) because there are two elements in the tuple.\r\n\r\nSame for y_range below.', 'comment_created': datetime.datetime(2021, 7, 4, 23, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663571119, 'comment_body': 'Could you be a little more precise about the return type here, as in the `derive_surface` function?\r\n', 'comment_created': datetime.datetime(2021, 7, 4, 23, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663573290, 'comment_body': ""Suggestion: numpy is a really powerful library where you can do a lot with very few commands. I've shown some more nifty tricks below. The below code also means that you don't need to generate z_ref yourself (i.e. the function signature could be just `def avg_unit_cell(grid_z_coordinates, grid_norm_unit):`). Instead, you can just make an array from numpy division.\r\n\r\n```python\r\n\t# this creates a *new* array where all the 0 values\r\n\t# in grid_norm_unit are replaced with np.nan\r\n    grid_norm_unit = np.where(grid_norm_unit > 0,  # the condition\r\n    \t\t\t\t\t\t  grid_norm_unit,  # values if condition is True\r\n    \t\t\t\t\t\t  np.nan)  # value if condition is False\r\n\r\n    z_ref = grid_z_coordinates / grid_norm_unit\r\n```\r\n\r\nIt relies on the knowledge that any operation with `np.nan` results in np.nan.\r\n\r\n```python\r\n>>> np.nan / 1\r\nnan\r\n>>> 1 / np.nan\r\nnan\r\n>>> 0 / np.nan\r\nnan\r\n```\r\n\r\nIt also avoids the RuntimeWarnings that would be generated in the existing code, since the current line ``grid_z_coordinates / grid_norm_unit`` still results in division by 0:\r\n\r\n```python\r\n>>> arr = np.arange(12).reshape((4, 3))\r\n>>> arr\r\narray([[ 0,  1,  2],\r\n       [ 3,  4,  5],\r\n       [ 6,  7,  8],\r\n       [ 9, 10, 11]])\r\n>>> arr2 = np.zeros_like(arr)\r\n>>> arr / arr2\r\n__main__:1: RuntimeWarning: divide by zero encountered in true_divide\r\n__main__:1: RuntimeWarning: invalid value encountered in true_divide\r\narray([[nan, inf, inf],\r\n       [inf, inf, inf],\r\n       [inf, inf, inf],\r\n       [inf, inf, inf]])\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 7, 4, 23, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663574579, 'comment_body': '`assert_almost_equal` works for 2D arrays as well so you can get rid of the for loop altogether. You can also use `pytest.mark.parametrize` to bundle the two test cases together.\r\n\r\n```suggestion\r\n@pytest.mark.parametrize(""n_cells, grid_z_coords"", [\r\n    (3, np.full((3, 3), 10)),\r\n    (3, np.array([[10, 20, 30], [10, 20, 30], [10, 20, 30]], dtype=float)),\r\n])\r\ndef test_avg_unit_cell_identity(n_cells, grid_z_coords):\r\n    z_ref = np.zeros((n_cells, n_cells))  # this is not necessary if you go with the trick suggested above\r\n    unit = np.ones((n_cells, n_cells))\r\n    averaged_surface = avg_unit_cell(z_ref, grid_z_coords, unit)\r\n    assert_almost_equal(averaged_surface, grid_z_coords)\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 0, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663574678, 'comment_body': ""Could you come up with a more descriptive name, like `average_z_coordinates`? I'm not really sure what averaging the unit cell means with respect to the arguments given to the function."", 'comment_created': datetime.datetime(2021, 7, 5, 0, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663575079, 'comment_body': ""```suggestion\r\ndef test_avg_unit_cell_more_beads():\r\n    grid_z_coords = np.full((3, 3), 10, dtype=float)\r\n    grid_norm = np.array([[2, 1, 1],\r\n                          [1, 2, 1],\r\n                           1, 1, 2]], dtype=int)\r\n    expected_surface = np.array([[5, 10, 10],\r\n                                 [10, 5, 10],\r\n                                 [10, 10, 5]], dtype=float)\r\n    z_ref = np.zeros((n_cells, n_cells))\r\n    averaged_surface = avg_unit_cell(z_ref, grid_z_coords, grid_norm)\r\n    assert_almost_equal(averaged_surface, expected_surface)\r\n```\r\n\r\nYou don't need to use `pytest.mark.parametrize` if you don't have multiple test cases to run through."", 'comment_created': datetime.datetime(2021, 7, 5, 0, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663575346, 'comment_body': 'Could you please rewrite this test to not use `parametrize` (since it does not use multiple test cases) and only with `assert_almost_equal` instead of the for loop?', 'comment_created': datetime.datetime(2021, 7, 5, 0, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663575668, 'comment_body': ""This doesn't need to be parametrized either, as there's only one entry. Could you put `dummy_array` inside the test function?"", 'comment_created': datetime.datetime(2021, 7, 5, 0, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663575788, 'comment_body': ""Could you please delete this test, and it's now just a duplicate of test_get_z_surface?"", 'comment_created': datetime.datetime(2021, 7, 5, 0, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663575957, 'comment_body': ""Could you please rewrite this test to use `get_z_surface` instead of `derive_surface`? This means you won't have to put the array into an MDAnalysis universe :)"", 'comment_created': datetime.datetime(2021, 7, 5, 0, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663579886, 'comment_body': 'Thanks. I will  update to `derive_surface(n_cells_x, n_cells_y, selection, max_width_x, max_width_y)` (and respective tests if applicable).', 'comment_created': datetime.datetime(2021, 7, 5, 0, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663579981, 'comment_body': ""Yeah, thanks for this comment. I wasn't sure what to put here. :)"", 'comment_created': datetime.datetime(2021, 7, 5, 0, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663584352, 'comment_body': 'Thanks. Let me confirm before submitting changes, @lilyminium. (In the process I clarify what I think is supposed to be correct). The structure of the parameters in the docstring is\r\n```\r\nparameter: type\r\n    description\r\n``` \r\ncorrect?\r\nIs it common to add the shape of the numpy arrays in the type? Here I had it in the description. So in general, it should be like \r\n```\r\ncoordinates : numpy.ndarray \r\n     Coordinates of AtomGroup. Numpy of shape=(n_atoms, 3).\r\n```\r\nor should I specify the shape with the type as you suggest below for tuples?', 'comment_created': datetime.datetime(2021, 7, 5, 1, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663600540, 'comment_body': 'Sorry, missed this comment. Will be pushed shortly. ', 'comment_created': datetime.datetime(2021, 7, 5, 2, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663610440, 'comment_body': ""```\r\nparameter: type\r\n    description\r\n```\r\n\r\nErm, that's probably the correct one. I'll be honest that I'm not totally sure what's correct here. As long as the docs look good, either one works."", 'comment_created': datetime.datetime(2021, 7, 5, 3, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663610777, 'comment_body': ""I still think this would be the minimum x coordinate and the maximum x coordinate in angstrom, instead of the indexes in the grid. It's a replacement for `max_width` rather than n_cells, right?"", 'comment_created': datetime.datetime(2021, 7, 5, 3, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663612133, 'comment_body': 'Sorry, I thought I included this change already. Give me a sec to update.', 'comment_created': datetime.datetime(2021, 7, 5, 3, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663614263, 'comment_body': 'And I think I missed this too. Next push will include these changes.', 'comment_created': datetime.datetime(2021, 7, 5, 3, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}]","[{'commit_sha': 'c3eb126dfccc616a18ee726839c41f2aa65895fd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b9d2becffc9bc1f8faeb6ce4b5eb787320bf441a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ae67ca1abb1f653073fcb121ca4add7bd9e0bf7e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dd2c690e8e8310928c3ef79be8190585e4cfde0d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ae7dacddb18caf1c288207780e01434f0e381bc0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b0e79346528c29dc6d91ab79a3c6e36c5691343a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1dd3e238574f5c9b07f067a3fc08de766eb9c32b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c53d5dd6ce09beba314122b25bd269a53e60a1f7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '90c17725a93f06b7e13ac7e403759ce3e31fc6b0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '667144d1f8c0561de56805687d017ee0bd6f7a4f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5e285994f98714b72d4c67c0199f01aa742d400e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4567ed1588334caf424fd7d90a7a4f4156ec94dc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
684053162,Added explicit imports. ,"This PR fixes #21 

In this PR:

- [x] `membrane_curvature` folder restructured.
- [x] In `membrane_curvatre/tests`, renamed `test_mdakit_membcurv.py` to `test_membrane_curvature.py`.
- [x] Added explicit imports in `test_membrane_curvature.py` 
- [x] `curvature.py` and `surface.py` added as a replacement for `lib/mods.py`. 

Previous folder structure:
```
membrane_curvature
├── __init__.py
├── core.py
├── lib
│   └── mods.py
├── data
├── tests
├── ...
```

updated structure:
```
membrane_curvature
├── __init__.py
├── core.py *
├── curvature.py --> this would contain H, K
├── surface.py --> this would contain z_ref, derive_surface, normalized_grid
├── data
├── tests
├── ...
```
* `core.py` is expected to be replaced by `base.py` (PR #43)

",True,44,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/44,https://github.com/MDAnalysis/membrane-curvature/pull/44,closed,61,56,5,2,2,0,0,0,[],2021-07-06 04:36:15+00:00,2021-07-06 04:47:45+00:00,690.0,0:11:30,[],"[{'commit_sha': 'ef04a0c248939bb2af4eda5f35e2c9ff7eb53e1a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b5635b63de940b3cb324a4523802574286fdc096', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
664150624,Working code added. [Issue#7],"## Description
Initial code with tests added. Fixes #7. ",True,9,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/9,https://github.com/MDAnalysis/membrane-curvature/pull/9,closed,19497,20,5,8,4,5,0,0,[],2021-06-08 02:58:32+00:00,2021-06-09 00:19:04+00:00,76832.0,21:20:32,"[{'comment_id': 647842425, 'comment_body': ""I'd move the `.gitignore` to the top level of the repo."", 'comment_created': datetime.datetime(2021, 6, 8, 22, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 647842993, 'comment_body': 'Ignore also\r\n```\r\n__pycache__\r\n*.pyc\r\n```', 'comment_created': datetime.datetime(2021, 6, 8, 22, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 647866068, 'comment_body': 'Thanks @orbeckst. Is there a way I can double check the `__pycache__` got actually untracked? How can I identify that particular change? Not sure I can find it the ""Files changed"" tab.', 'comment_created': datetime.datetime(2021, 6, 8, 23, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 647870018, 'comment_body': ""I hadn't realized that you already had a perfectly good .gitignore at the top level.\r\n\r\nI would have just add `*.npz` at the end of the file."", 'comment_created': datetime.datetime(2021, 6, 8, 23, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 647871519, 'comment_body': ""It's still there if you look under https://github.com/MDAnalysis/membrane-curvature/pull/9/files\r\n\r\nIf you do a \r\n```\r\ngit rm -rf  mdakit_membcurv/lib/__pycache__/\r\ngit commit -m 'removed __pycache__'\r\ngit push\r\n```\r\nthen it should be removed from the PR.\r\n\r\nIt's important that you *Squash and merge* the PR because that will rewrite git history in such a way that it appears as if the deleted files were never there. Otherwise it's fairly difficult to truly get rid of files in git."", 'comment_created': datetime.datetime(2021, 6, 8, 23, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': '9a8032ba2ee131fcde31a4b91f17d92cbcf947b6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f9877cfbdcff10b3d48fd5693a969a2e392b5082', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '326019ca8b1e581551d18a45aa5b8b6f89183dd8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '296f0ef7be60c248c055d6ded3529b2718249cf6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8f429d577f82346d9f8eb17960a6ba82865ed2f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0ffc4d026845720e59e59a5c2a783d151fc291d8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '854b5cab06a27f814042e405c431290d5c6cab74', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3b2cbeec7ffde546af12b924afe7249dbbc63ff7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
664150624,Working code added. [Issue#7],"## Description
Initial code with tests added. Fixes #7. ",True,9,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/9,https://github.com/MDAnalysis/membrane-curvature/pull/9,closed,19497,20,5,8,4,5,0,0,[],2021-06-08 02:58:32+00:00,2021-06-09 00:19:04+00:00,76832.0,21:20:32,"[{'comment_id': 647842425, 'comment_body': ""I'd move the `.gitignore` to the top level of the repo."", 'comment_created': datetime.datetime(2021, 6, 8, 22, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 647842993, 'comment_body': 'Ignore also\r\n```\r\n__pycache__\r\n*.pyc\r\n```', 'comment_created': datetime.datetime(2021, 6, 8, 22, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 647866068, 'comment_body': 'Thanks @orbeckst. Is there a way I can double check the `__pycache__` got actually untracked? How can I identify that particular change? Not sure I can find it the ""Files changed"" tab.', 'comment_created': datetime.datetime(2021, 6, 8, 23, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 647870018, 'comment_body': ""I hadn't realized that you already had a perfectly good .gitignore at the top level.\r\n\r\nI would have just add `*.npz` at the end of the file."", 'comment_created': datetime.datetime(2021, 6, 8, 23, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 647871519, 'comment_body': ""It's still there if you look under https://github.com/MDAnalysis/membrane-curvature/pull/9/files\r\n\r\nIf you do a \r\n```\r\ngit rm -rf  mdakit_membcurv/lib/__pycache__/\r\ngit commit -m 'removed __pycache__'\r\ngit push\r\n```\r\nthen it should be removed from the PR.\r\n\r\nIt's important that you *Squash and merge* the PR because that will rewrite git history in such a way that it appears as if the deleted files were never there. Otherwise it's fairly difficult to truly get rid of files in git."", 'comment_created': datetime.datetime(2021, 6, 8, 23, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': '9a8032ba2ee131fcde31a4b91f17d92cbcf947b6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f9877cfbdcff10b3d48fd5693a969a2e392b5082', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '326019ca8b1e581551d18a45aa5b8b6f89183dd8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '296f0ef7be60c248c055d6ded3529b2718249cf6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8f429d577f82346d9f8eb17960a6ba82865ed2f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0ffc4d026845720e59e59a5c2a783d151fc291d8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '854b5cab06a27f814042e405c431290d5c6cab74', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3b2cbeec7ffde546af12b924afe7249dbbc63ff7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
677488146,Initial refactor and test added [Fixes #33],"Helps to fix #33.
In this first version of the refactored code, the calculation of curvature doesn't evaluate per leaflet, and instead, it runs for a surface defined by selected atoms. (More general)

Changes in this PR:
- [x] Surface derived from direct selection using `MDAnalysis`.
- [x] Deleted functions `def_all_beads`, `curvature` and `core_fast`.
- [x] Function `grid_map` to map coordinates to grid added.  
- [x] In `grid_map` arguments as np.array / tuples instead of topologies. 
- [x] Replaced `MDtraj` by `MDanalysis` 100%.

As suggested [here](https://github.com/MDAnalysis/membrane-curvature/pull/30#pullrequestreview-687924575), tests with toy model using `pytest.mark.parametrize` added:
- [x] `test_grid_map_small_9grid`,  using toy model in small grid of 9 lipids in a 3x3 grid, with x values of 0, 1, 2, and y values of 0, 1, 2.
- [x] `test_grid_map_25grid`, using toy model in small grid of 25 lipids in a 5x5 grid, with x values of 0, 1, 2,3,4 and y values of 0, 1, 2,3,4.

This  PR may also fix
- #27   since function `def_all_beads` was deleted after replacing `MDtraj by `MDAnalysis`. 
- #28   since function `core_fast` was deleted after refactoring. 
- #32  since function `def_all_beads` was deleted after refactoring and replaced by direct selection using MDAnalysis`.

Edit: This PR also fixes #16 . ",True,34,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/34,https://github.com/MDAnalysis/membrane-curvature/pull/34,closed,198,401,6,6,4,26,0,0,[],2021-06-24 22:48:10+00:00,2021-06-25 22:38:53+00:00,85843.0,23:50:43,"[{'comment_id': 658396513, 'comment_body': ""MDAnalysis is not restricted to GRO format files. I'd just call it *topology* and *trajectory*."", 'comment_created': datetime.datetime(2021, 6, 25, 1, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658398333, 'comment_body': 'This gives you Lx only. Do you assume square X-Y ?', 'comment_created': datetime.datetime(2021, 6, 25, 1, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658399155, 'comment_body': 'Maybe at least\r\n```python\r\nbox_size = max(u.dimensions[0], u.dimensions[1])\r\n```\r\n\r\nIf you assume orthorhombic boxes then consider just failing here if you encounter a triclinic box.', 'comment_created': datetime.datetime(2021, 6, 25, 1, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658400338, 'comment_body': 'Docs (x,y) do not seem to agree with function signature (coords, factor)', 'comment_created': datetime.datetime(2021, 6, 25, 1, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658402409, 'comment_body': ""Is coords a single coordinate (essentially a 3-tuple)?\r\n\r\nIf so then you should keep in mind for later that you can almost certainly gain quite a bit of performance by doing the grid indexing operation on all coordinates at once (there's code related to `np.histogramdd` that you can probably use... but not in this PR!)"", 'comment_created': datetime.datetime(2021, 6, 25, 1, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658403156, 'comment_body': 'What was the `jump` argument good for?', 'comment_created': datetime.datetime(2021, 6, 25, 1, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658403979, 'comment_body': 'Why division by 10?\r\n\r\nWhat units is your code working in?\r\n', 'comment_created': datetime.datetime(2021, 6, 25, 1, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658404829, 'comment_body': 'Once you start optimizing for performance, you most likely will want to completely eliminate this for-loop.', 'comment_created': datetime.datetime(2021, 6, 25, 1, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658406379, 'comment_body': ""personally, I'd have kept `l` and `m` — they are only used here and I find the more mathematical notation clearer, but different people have different preferences. "", 'comment_created': datetime.datetime(2021, 6, 25, 1, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658407470, 'comment_body': 'On the other had, `grid_1` and `grid_2` could do with more expressive names, like `z_grid` and `counts`/`n_grid` ... anything but numbers ;-)', 'comment_created': datetime.datetime(2021, 6, 25, 1, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658409301, 'comment_body': ""We tend to avoid `print` in production code as it's easy overlooked and people often don't like it when their screen is filled with random messages. If it needs to be printed then we use a logger. If you need to know provide warnings to the user then you can also build up the information in a list and then outside the loop summarize what happened in a message.\r\n\r\nFor right now, you can leave the `print` but down the line you'll want to think about hoe to communicate with the user."", 'comment_created': datetime.datetime(2021, 6, 25, 1, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658410146, 'comment_body': 'Also amenable to array arithmetic for speedups (later...)\r\n\r\nSame for the for loop below.', 'comment_created': datetime.datetime(2021, 6, 25, 1, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658411389, 'comment_body': 'Why are you removing/changing tests here? This seems dangerous. How do you know that your changes did not introduce bugs? \r\n\r\nFor this PR I would have expected _no changes_ to the tests.', 'comment_created': datetime.datetime(2021, 6, 25, 1, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 658430215, 'comment_body': 'Interesting, this is another type of detail pep8 shouts at me to tell me that is too vague and I should do it more specific. The previous versions were `l` and `m`.  ', 'comment_created': datetime.datetime(2021, 6, 25, 2, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 658431322, 'comment_body': '`jump` was to skip frames. I was using `jump = 1` for all the tests so I decided it was not very useful at this point either.', 'comment_created': datetime.datetime(2021, 6, 25, 2, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 658436455, 'comment_body': 'Yes, this is one of the limitations and one of the next issues to solve. Issue #35 added. ', 'comment_created': datetime.datetime(2021, 6, 25, 2, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 658436807, 'comment_body': ""Yes, you are right and thanks for this catch. I'll update it. \r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 25, 2, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 658438700, 'comment_body': 'In `nm` :( ', 'comment_created': datetime.datetime(2021, 6, 25, 2, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 658440454, 'comment_body': 'I will put them back, I just thought of simplifying the tests by providing smaller arrays. But I see your point.', 'comment_created': datetime.datetime(2021, 6, 25, 3, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 658448982, 'comment_body': 'Previous tests`test_gaussian_curvature` and `test_mean_curvature`(now called `test_gaussian_curvature_all`and `test_mean_curvature_all`, repectively) added back and passing. ', 'comment_created': datetime.datetime(2021, 6, 25, 3, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 658919345, 'comment_body': ""Could you please add a test with negative coordinates? It might fail for now but that's ok."", 'comment_created': datetime.datetime(2021, 6, 25, 17, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 658921016, 'comment_body': 'This parametrization is just testing one set of arguments, do you plan to add more? You could combine the 9-grid and the 25-grid into the one function with parametrize though.', 'comment_created': datetime.datetime(2021, 6, 25, 17, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 658922928, 'comment_body': ""+1 to @orbeckst's comment -- it would be good to start thinking about expected inputs and output. For example, the most common way that coordinates tend to be passed around is in an (N x 3) numpy array. Even without `np.histogramdd` you could then simplify this function to `return np.abs(coords * factor).astype(int)`. "", 'comment_created': datetime.datetime(2021, 6, 25, 17, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 658928449, 'comment_body': ""Warnings have the advantage that they can be easily tested for in pytest, so that you can check that they're raised when a user does something silly :)"", 'comment_created': datetime.datetime(2021, 6, 25, 17, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 658938511, 'comment_body': 'I think that `test_mapper` is not strictly needed here -- I think you could do the below?\r\n\r\n```suggestion\r\n        assert grid_map(dummy_coord, factor) == dummy_coord\r\n```\r\n\r\nIn addition, could you please add a test where the output of `grid_map` is different from the input `dummy_coord`? Otherwise this will pass even with `grid_map = lambda x, *args: x` :) ', 'comment_created': datetime.datetime(2021, 6, 25, 17, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 658971682, 'comment_body': ""I see that you're first creating an average surface before computing the curvature. On a scientific level, maybe we should consider treating each surface for each frame separately? Otherwise, if you have a membrane that undulates such that a patch has ~50% positive curvature and 50% negative curvature over the frames, the Gaussian curvature is ultimately computed on a flat surface?"", 'comment_created': datetime.datetime(2021, 6, 25, 18, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}]","[{'commit_sha': 'e09c2dff8d93430573b555211e3830bc3fd3d2b8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3df5cdd66a498b8f256ea7afc8fa5b975ac7067c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '042e62515e51f2f7507c535b53b698d8b23c6db9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c9ea46229bc2c1f99abd5a7e9d8ec9036277896a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0e4a100e61de5e305d3323350aefa221f5f01a57', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8569cf02420ce3466f75c0bdaf1c6788a6642bfe', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
679552675,Added `derive_surface` and `get_positions` with tests.,"Function `core_fast_leaflets` split into three functions:

- [x] get positions for each atom in the atom group for each frame.
- [x]  identify the grid cell for each coordinate.
- [x] calculate the average z for the atom group.

Tests added:
- [x] `test_get_positions` using dummy coordinates for beads 0 to 8, all of them with `z=10`:
```
o ______ o _____ o _______ |
|   (6)  |  (7)   |   (8)  |
o ______ o _____ o _______ |
|   (3)  |  (4)   |   (5)  |
o _______o ______ o ______ |
|   (0)  |  (1)   |   (2)  |
o ______ o ______ o ______ |
```
Using the same number of beads in grids, 

- [x] `test_avg_unit_cell` added for two systems.
1.  z values of `z=10`
2. z values as below:
```
o ______ o _____ o _______ |
| (z=10) | (z=20) | (z=30) |
o ______ o _____ o _______ |
| (z=10) | (z=20) | (z=30) |
o _______o ______ o ______ |
| (z=10) | (z=20) | (z=30) |
o ______ o ______ o ______ |
```
3. z values of `z=10` and number of beads per unit cell as shown below:
```
o ____ o ____ o ___ |
|   2  |  1   |  1  |
o ____ o ____ o ___ |
|   1  |  2   |  1  |
o ____ o ____ o ___ |
|   1  |  1   |  2  |
o ____ o ____ o ___ |
```

- [x] `test_derive_surface` added for same `dummy_coordinates` as in `test_get_positions`.",True,40,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/40,https://github.com/MDAnalysis/membrane-curvature/pull/40,closed,139,99,3,12,6,47,0,0,[],2021-06-29 03:19:13+00:00,2021-07-06 02:19:01+00:00,601188.0,"6 days, 22:59:48","[{'comment_id': 660857021, 'comment_body': ""Hi @ojeda-e I'm looking forward to being able to use your membrane curvature tool! I'm not sure if this fits your purpose exactly, but you could use [`scipy.stats.binned_statistic_2d`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binned_statistic_2d.html) to generate a surface of all your beads in one go."", 'comment_created': datetime.datetime(2021, 6, 29, 18, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 660857939, 'comment_body': 'could you do `selection.wrap` to ensure all atoms are within the grid boundaries?', 'comment_created': datetime.datetime(2021, 6, 29, 18, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 661051748, 'comment_body': ""Thanks for this suggestion @p-j-smith. I love the simplicity of `binned_statistic_2d(statistic='mean')` to get the mean z-values in one go! We might have to remember this for the refactor and remember to unwrap values for PBC"", 'comment_created': datetime.datetime(2021, 6, 30, 0, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 661051960, 'comment_body': 'I feel like selection was the better choice here 😅', 'comment_created': datetime.datetime(2021, 6, 30, 0, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 661052062, 'comment_body': '```suggestion\r\n    z_ref = np.zeros((n_cells, n_cells))\r\n```\r\n\r\nThe suggested type for a numpy array shape is a tuple of integers. The same suggestion applies to the below.', 'comment_created': datetime.datetime(2021, 6, 30, 0, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 661054536, 'comment_body': '```suggestion\r\ndef get_z_surface(coordinates, n_x_bins=10, n_y_bins=10, x_range=(0, 100), y_range=(0, 100)):\r\n```\r\n\r\nCould you have a go at writing this function to only take in an array (Nx3) of coordinates in angstrom, number of cells/bins on the x-axis (n_x_bins), number of cells/bins on the y-axis (n_y_bins), the minimum and maximum x values (x_range) in angstrom, and the minimum and maximum y values (y_range)?\r\n\r\n<img width=""516"" alt=""Screen Shot 2021-06-29 at 5 49 17 pm"" src=""https://user-images.githubusercontent.com/31115101/123885441-54c09000-d902-11eb-9f1a-016346f1ee04.png"">\r\n\r\n\r\nThis then becomes the most essential, basic point of the function. Later you can write new functions that add new functionality like applying it to an AtomGroup, for example:\r\n\r\n```python\r\ndef derive_surface(atomgroup, n_cells, max_width):\r\n\tatomgroup.unwrap(pbc=True)\r\n\tcoordinates = atomgroup.positions\r\n\treturn get_z_surface(coordinates, n_x_bins=n_cells, n_y_bins=n_cells,\r\n\t\t\t\t\t     x_range=(0, max_width), y_range=(0, max_width))\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 0, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 661074185, 'comment_body': ""Looking back over previous comments I realise that this directly contradicts https://github.com/MDAnalysis/membrane-curvature/pull/34#pullrequestreview-693038505 . Sorry if I am being confusing and backtracking on that. The motivation for the original comment came from how long the original function was. If the same thing can be accomplished with one line, it doesn't need to be separate functions anymore.\r\n\r\n> I would be keen to have these as divorced from either MDTraj or MDAnalysis as possible and work only with numpy arrays, which are generally more versatile. The overall function could grab the positions from the AtomGroup and feed it into the functions instead.\r\n\r\nThe above point is the more important one than having separate functions -- working with just numpy arrays for the base function."", 'comment_created': datetime.datetime(2021, 6, 30, 1, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 661267078, 'comment_body': ""I don't think you need to (or should) loop over atoms.  Instead something like `np.rint(bead.positions[:, :2] / factor)` should give you an array of the `l` and `m` values."", 'comment_created': datetime.datetime(2021, 6, 30, 8, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 663281876, 'comment_body': ""Is there a special reason for casting to np.float32? Why not just `n_cells / max_width` to keep it simple?\r\n\r\nMy reason is that you remove something that's mysterious not obvious why it needs to be there so that reading the code becomes easier. If at some point you _need_ an array top be float32, explicitly set the array's dtype."", 'comment_created': datetime.datetime(2021, 7, 2, 23, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 663282083, 'comment_body': ""I don't think this function should be needed. See if you can write your code with numpy arrays and broadcasting/slicing."", 'comment_created': datetime.datetime(2021, 7, 2, 23, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 663282168, 'comment_body': ""ANd you'll get rid of `get_positions()`."", 'comment_created': datetime.datetime(2021, 7, 2, 23, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 663282751, 'comment_body': 'See if you can eliminate this loop. Something like\r\n```python\r\nnormed = grid_norm_unit > 0\r\nz_ref[normed] += grid_z_coordinates / grid_norm_unit\r\nz_ref[~normed] = np.nan\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 23, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 663320475, 'comment_body': 'Thanks for the comment @orbeckst Yes, there is a reason to use the `np.float32`. I discovered in the process of writing the code that the `/` operation is more expensive when I perform `n_cells / max_width` due to the type of the variables: `int` and `numpy.float64`, respectively. The `np.float32` was introduced to speed up. Since it is an operation that runs in every frame, the difference in performance is significant. To give you an estimate, in a system with only 500 lipid headgroups to define the surfaces per leaflet, the calculations runs 20% faster using the `np.float32` trick.', 'comment_created': datetime.datetime(2021, 7, 3, 5, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663345360, 'comment_body': ""I think I'm mis-reading this, aren't `max_width` and `n_cells` both `ints` (going by both the docstring and the tests)?\r\n\r\nOr are you referring to another division somewhere else?"", 'comment_created': datetime.datetime(2021, 7, 3, 9, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 663346285, 'comment_body': '@fiona-naughton just pointed out the following to me: https://github.com/MDAnalysis/membrane-curvature/blob/97713b39675940ea141b2980ae948db74fa3d5e5/membrane_curvature/core.py#L27\r\n\r\nIn any case, casting to np.float32 is more expensive for this specific operation on my end, does the performance difference maybe appear later on in the calculation?', 'comment_created': datetime.datetime(2021, 7, 3, 10, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 663395288, 'comment_body': 'Thanks @IAlibay . In real-world systems the performance is significantly better using `np.float32`. The tests added so far were simplified as suggested by @lilyminium (See #22 and #31). I would prefer to keep it in the code, even if for the tests it looks like overkill. (I can remove it later if the benchmarks say otherwise)', 'comment_created': datetime.datetime(2021, 7, 3, 18, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663395509, 'comment_body': ""Thanks for your comment @richardjgowers. It also simplifies the function to the point `grid_map` isn't necessary. Since I also need the z coordinate as a float, I modified your suggestion to the following\r\n`cell_xy_floor = np.int32( selection.positions[:,:2] / factor )`\r\n`z_coordinate = selection.positions[:, 2] / factor * 10`.\r\n"", 'comment_created': datetime.datetime(2021, 7, 3, 18, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663395631, 'comment_body': 'This is very cool, thanks @orbeckst. Your suggestion was included in the function `avg_unit_cell`. The previous tests work as expected. ', 'comment_created': datetime.datetime(2021, 7, 3, 18, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663400789, 'comment_body': ""I still heavily recommend against early optimization, especially given that we don't seem to know what is actually benefitting from the cast? (it 100% can't be line 64)\r\n\r\nAnyways, at the end of the day I don't see it as a big deal (as long as it doesn't impact accuracy), so I'll default to the other mentor's opinions here (especially given that @lilyminium's suggestion https://github.com/MDAnalysis/membrane-curvature/pull/40#discussion_r661054536 would change this code completely?).\r\n\r\nHowever, I will add the following as things that probably need addressing:\r\n\r\n1. Both `n_cells` and `max_width` are written in the docstring as `int` inputs. Is this meant to be the case? If not, the docstring needs to be updated accordingly.\r\n\r\n2. Especially if they are meant to be `int`, then assuming we still want to keep this optimization in, why `np.float32`? Unless you're doing heavy vector operations, shouldn't a built-in `float` for a single value always be equal or faster in performance? (if they are `int` then it will default to a built-in `float` so it shouldn't even be necessary to cast?)\r\n"", 'comment_created': datetime.datetime(2021, 7, 3, 19, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 663401621, 'comment_body': ""Thanks for highlighting the docstrings, `max_width` is not `int` type, it's `float`. I'll update them. \r\nI don't see anything wrong with keeping it anyway. I'll leave and will re-evaluate in a performance test. \r\n"", 'comment_created': datetime.datetime(2021, 7, 3, 19, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663435927, 'comment_body': '> Hi @ojeda-e, I think I had something different in mind when I requested that you only use numpy etc and break it down to basics. Could you have a go at writing the function with the input arguments I suggested? I haven\'t had a look at tests because I assume they\'ll change with the new function.\r\n> \r\n> @p-j-smith had a good suggestion with the scipy function. When I said ""numpy only"" that was probably too restrictive, sorry; totally on me. For future reference, you should consider any package safe if it\'s something that MDAnalysis considers a [""core dependency""](https://userguide.mdanalysis.org/stable/module_imports.html#list-of-core-module-dependencies). I actually find it preferable to use numpy/scipy functions because they\'re usually written by people much smarter than me, who\'ve thought about the problem longer than me -- this usually results in faster, better code.\r\n> \r\n> If you try something like the code below, you might make this a very short function!\r\n> \r\n> ```python\r\n> x, y, z = coordinates.T\r\n> scipy.stats.binned_statistic_2d(x, y, z, statistic=""mean"", bins=..., range=...)\r\n> ```\r\n\r\nHi @lilyminium, the PR has a lot of different feedback at this point and I ended up following the suggestion from @richardjgowers which conflicts with this one. Could we defer this to an issue as it would require me to add a new dependency and can be done in parallel with other work?', 'comment_created': datetime.datetime(2021, 7, 4, 2, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663437477, 'comment_body': ""> def get_z_surface(coordinates, n_x_bins=10, n_y_bins=10, x_range=(0, 100), y_range=(0, 100)):\r\n\r\nI don't think the feedback about the function signature contradicts @richardjgowers. You don't have to use scipy now if you don't want to -- the main gist is to have the main function work solely on numpy arrays of positions. I think you'll find this helpful for refactoring in #41; if you have a look at existing AnalysisBase classes, the important functions very rarely work on MDAnalysis Universes. Instead, the positions are extracted in `_single_frame` and these numpy arrays are used for the actual computation.\r\n\r\nYou've already done most of the work, to be honest. The simplest, most immediate conversion would be:\r\n\r\n```python\r\ndef derive_surface(n_cells, selection, max_width):\r\n\tcoordinates = selection.positions\r\n\treturn get_z_surface(coordinates, n_x_bins=n_cells, n_y_bins=n_cells,\r\n\t\t\t\t\t     x_range=(0, max_width), y_range=(0, max_width))\r\n\r\ndef get_z_surface(coordinates, n_x_bins=10, n_y_bins=10, x_range=(0, 100), y_range=(0, 100)):\r\n\tz_ref = np.zeros((n_x_bins, n_y_bins))\r\n\tgrid_z_coordinates = np.zeros((n_x_bins, n_y_bins))\r\n    grid_norm_unit = np.zeros((n_x_bins, n_y_bins))\r\n\r\n    x_factor = n_x_bins / (x_range[1] - x_range[0])\r\n    y_factor = n_y_bins / (y_range[1] - y_range[0])\r\n    x_coords, y_coords, z_coords = coordinates.T\r\n    cell_x_floor = np.floor(x_coords * x_factor).astype(int)\r\n    cell_y_floor = np.floor(y_coords * y_factor).astype(int)\r\n    for l, m, z in zip(cell_x_floor, cell_y_floor, z_coords):\r\n    \t... # rest of current derive_surface\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 4, 2, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663438124, 'comment_body': ""I also wouldn't be afraid of adding a new dependency (especially from the MDAnalysis core dependencies). It's mostly a matter of adding the package name to:\r\n* https://github.com/MDAnalysis/membrane-curvature/blob/main/devtools/conda-envs/test_env.yaml\r\n* https://github.com/MDAnalysis/membrane-curvature/blob/main/docs/requirements.yaml"", 'comment_created': datetime.datetime(2021, 7, 4, 3, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663439487, 'comment_body': 'Thanks, I just thought this was going to be a separate issue. In the function you suggest the number of x and y bins is different, which I thought was going to be addressed later in #35 (together with PBC issue #36). \r\n\r\nWould you please confirm that is better to add this change here? @lilyminium \r\nAnother option is to use your suggested function but without independent `x` and `y` (i.e. square arrays) and then complete the work when I address #35 later on?', 'comment_created': datetime.datetime(2021, 7, 4, 3, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663440097, 'comment_body': ""IMO since you know that you want to address #35 in the future, there's no harm in designing your code towards that direction now. If you think it's easier to write and test a function that only takes `get_z_surface(coordinates, n_bins=10, range=(0, 100))` and then modify all the tests you write here for the `get_z_surface(coordinates, n_x_bins=10, n_y_bins=10, x_range=(0, 100), y_range=(0, 100))` signature later, go for it -- but to me it sounds like extra work.\r\n\r\nIf you have no intention of testing non-square arrays in this PR, you could just pass the same number into `n_x_bins` and `n_y_bins` as shown in the `derive_surface` example above. Then when you want to add rectangular functionality, you don't need to modify the existing tests from this PR."", 'comment_created': datetime.datetime(2021, 7, 4, 3, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663440326, 'comment_body': ""Thanks for the quick reply. I'll add it here then. "", 'comment_created': datetime.datetime(2021, 7, 4, 3, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663570561, 'comment_body': ""You've now added ``max_width_x`` and ``max_width_y``, could you please update the\r\ndocumentation? The ``n_cells`` entry too :)"", 'comment_created': datetime.datetime(2021, 7, 4, 23, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663570776, 'comment_body': ""Could you please be a little more precise what this returns -- typically if it's an array we would give the type and expected shape of the array, e.g.\r\n\r\n```\r\nReturns\r\n-------\r\nz_coordinates: numpy.ndarray\r\n\tAverage z-coordinate values. This is a numpy array of floats,\r\n    shape (n_cells, n_cells)\r\n```"", 'comment_created': datetime.datetime(2021, 7, 4, 23, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663570818, 'comment_body': '```suggestion\r\n    coordinates : numpy.ndarray\r\n```\r\n\r\nI think this is a numpy array?', 'comment_created': datetime.datetime(2021, 7, 4, 23, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663571015, 'comment_body': '```suggestion\r\n    x_range : tuple of (float, float)\r\n        Range of indexes in grid in the x dimension with shape=(0, max_width_x).\r\n```\r\n\r\nI thought this would be the minimum x coordinate and the maximum x coordinate in angstrom? The shape is actually (2,) because there are two elements in the tuple.\r\n\r\nSame for y_range below.', 'comment_created': datetime.datetime(2021, 7, 4, 23, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663571119, 'comment_body': 'Could you be a little more precise about the return type here, as in the `derive_surface` function?\r\n', 'comment_created': datetime.datetime(2021, 7, 4, 23, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663573290, 'comment_body': ""Suggestion: numpy is a really powerful library where you can do a lot with very few commands. I've shown some more nifty tricks below. The below code also means that you don't need to generate z_ref yourself (i.e. the function signature could be just `def avg_unit_cell(grid_z_coordinates, grid_norm_unit):`). Instead, you can just make an array from numpy division.\r\n\r\n```python\r\n\t# this creates a *new* array where all the 0 values\r\n\t# in grid_norm_unit are replaced with np.nan\r\n    grid_norm_unit = np.where(grid_norm_unit > 0,  # the condition\r\n    \t\t\t\t\t\t  grid_norm_unit,  # values if condition is True\r\n    \t\t\t\t\t\t  np.nan)  # value if condition is False\r\n\r\n    z_ref = grid_z_coordinates / grid_norm_unit\r\n```\r\n\r\nIt relies on the knowledge that any operation with `np.nan` results in np.nan.\r\n\r\n```python\r\n>>> np.nan / 1\r\nnan\r\n>>> 1 / np.nan\r\nnan\r\n>>> 0 / np.nan\r\nnan\r\n```\r\n\r\nIt also avoids the RuntimeWarnings that would be generated in the existing code, since the current line ``grid_z_coordinates / grid_norm_unit`` still results in division by 0:\r\n\r\n```python\r\n>>> arr = np.arange(12).reshape((4, 3))\r\n>>> arr\r\narray([[ 0,  1,  2],\r\n       [ 3,  4,  5],\r\n       [ 6,  7,  8],\r\n       [ 9, 10, 11]])\r\n>>> arr2 = np.zeros_like(arr)\r\n>>> arr / arr2\r\n__main__:1: RuntimeWarning: divide by zero encountered in true_divide\r\n__main__:1: RuntimeWarning: invalid value encountered in true_divide\r\narray([[nan, inf, inf],\r\n       [inf, inf, inf],\r\n       [inf, inf, inf],\r\n       [inf, inf, inf]])\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 7, 4, 23, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663574579, 'comment_body': '`assert_almost_equal` works for 2D arrays as well so you can get rid of the for loop altogether. You can also use `pytest.mark.parametrize` to bundle the two test cases together.\r\n\r\n```suggestion\r\n@pytest.mark.parametrize(""n_cells, grid_z_coords"", [\r\n    (3, np.full((3, 3), 10)),\r\n    (3, np.array([[10, 20, 30], [10, 20, 30], [10, 20, 30]], dtype=float)),\r\n])\r\ndef test_avg_unit_cell_identity(n_cells, grid_z_coords):\r\n    z_ref = np.zeros((n_cells, n_cells))  # this is not necessary if you go with the trick suggested above\r\n    unit = np.ones((n_cells, n_cells))\r\n    averaged_surface = avg_unit_cell(z_ref, grid_z_coords, unit)\r\n    assert_almost_equal(averaged_surface, grid_z_coords)\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 0, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663574678, 'comment_body': ""Could you come up with a more descriptive name, like `average_z_coordinates`? I'm not really sure what averaging the unit cell means with respect to the arguments given to the function."", 'comment_created': datetime.datetime(2021, 7, 5, 0, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663575079, 'comment_body': ""```suggestion\r\ndef test_avg_unit_cell_more_beads():\r\n    grid_z_coords = np.full((3, 3), 10, dtype=float)\r\n    grid_norm = np.array([[2, 1, 1],\r\n                          [1, 2, 1],\r\n                           1, 1, 2]], dtype=int)\r\n    expected_surface = np.array([[5, 10, 10],\r\n                                 [10, 5, 10],\r\n                                 [10, 10, 5]], dtype=float)\r\n    z_ref = np.zeros((n_cells, n_cells))\r\n    averaged_surface = avg_unit_cell(z_ref, grid_z_coords, grid_norm)\r\n    assert_almost_equal(averaged_surface, expected_surface)\r\n```\r\n\r\nYou don't need to use `pytest.mark.parametrize` if you don't have multiple test cases to run through."", 'comment_created': datetime.datetime(2021, 7, 5, 0, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663575346, 'comment_body': 'Could you please rewrite this test to not use `parametrize` (since it does not use multiple test cases) and only with `assert_almost_equal` instead of the for loop?', 'comment_created': datetime.datetime(2021, 7, 5, 0, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663575668, 'comment_body': ""This doesn't need to be parametrized either, as there's only one entry. Could you put `dummy_array` inside the test function?"", 'comment_created': datetime.datetime(2021, 7, 5, 0, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663575788, 'comment_body': ""Could you please delete this test, and it's now just a duplicate of test_get_z_surface?"", 'comment_created': datetime.datetime(2021, 7, 5, 0, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663575957, 'comment_body': ""Could you please rewrite this test to use `get_z_surface` instead of `derive_surface`? This means you won't have to put the array into an MDAnalysis universe :)"", 'comment_created': datetime.datetime(2021, 7, 5, 0, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663579886, 'comment_body': 'Thanks. I will  update to `derive_surface(n_cells_x, n_cells_y, selection, max_width_x, max_width_y)` (and respective tests if applicable).', 'comment_created': datetime.datetime(2021, 7, 5, 0, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663579981, 'comment_body': ""Yeah, thanks for this comment. I wasn't sure what to put here. :)"", 'comment_created': datetime.datetime(2021, 7, 5, 0, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663584352, 'comment_body': 'Thanks. Let me confirm before submitting changes, @lilyminium. (In the process I clarify what I think is supposed to be correct). The structure of the parameters in the docstring is\r\n```\r\nparameter: type\r\n    description\r\n``` \r\ncorrect?\r\nIs it common to add the shape of the numpy arrays in the type? Here I had it in the description. So in general, it should be like \r\n```\r\ncoordinates : numpy.ndarray \r\n     Coordinates of AtomGroup. Numpy of shape=(n_atoms, 3).\r\n```\r\nor should I specify the shape with the type as you suggest below for tuples?', 'comment_created': datetime.datetime(2021, 7, 5, 1, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663600540, 'comment_body': 'Sorry, missed this comment. Will be pushed shortly. ', 'comment_created': datetime.datetime(2021, 7, 5, 2, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663610440, 'comment_body': ""```\r\nparameter: type\r\n    description\r\n```\r\n\r\nErm, that's probably the correct one. I'll be honest that I'm not totally sure what's correct here. As long as the docs look good, either one works."", 'comment_created': datetime.datetime(2021, 7, 5, 3, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663610777, 'comment_body': ""I still think this would be the minimum x coordinate and the maximum x coordinate in angstrom, instead of the indexes in the grid. It's a replacement for `max_width` rather than n_cells, right?"", 'comment_created': datetime.datetime(2021, 7, 5, 3, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663612133, 'comment_body': 'Sorry, I thought I included this change already. Give me a sec to update.', 'comment_created': datetime.datetime(2021, 7, 5, 3, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663614263, 'comment_body': 'And I think I missed this too. Next push will include these changes.', 'comment_created': datetime.datetime(2021, 7, 5, 3, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}]","[{'commit_sha': 'c3eb126dfccc616a18ee726839c41f2aa65895fd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b9d2becffc9bc1f8faeb6ce4b5eb787320bf441a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ae67ca1abb1f653073fcb121ca4add7bd9e0bf7e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dd2c690e8e8310928c3ef79be8190585e4cfde0d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ae7dacddb18caf1c288207780e01434f0e381bc0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b0e79346528c29dc6d91ab79a3c6e36c5691343a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1dd3e238574f5c9b07f067a3fc08de766eb9c32b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c53d5dd6ce09beba314122b25bd269a53e60a1f7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '90c17725a93f06b7e13ac7e403759ce3e31fc6b0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '667144d1f8c0561de56805687d017ee0bd6f7a4f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5e285994f98714b72d4c67c0199f01aa742d400e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4567ed1588334caf424fd7d90a7a4f4156ec94dc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
684053162,Added explicit imports. ,"This PR fixes #21 

In this PR:

- [x] `membrane_curvature` folder restructured.
- [x] In `membrane_curvatre/tests`, renamed `test_mdakit_membcurv.py` to `test_membrane_curvature.py`.
- [x] Added explicit imports in `test_membrane_curvature.py` 
- [x] `curvature.py` and `surface.py` added as a replacement for `lib/mods.py`. 

Previous folder structure:
```
membrane_curvature
├── __init__.py
├── core.py
├── lib
│   └── mods.py
├── data
├── tests
├── ...
```

updated structure:
```
membrane_curvature
├── __init__.py
├── core.py *
├── curvature.py --> this would contain H, K
├── surface.py --> this would contain z_ref, derive_surface, normalized_grid
├── data
├── tests
├── ...
```
* `core.py` is expected to be replaced by `base.py` (PR #43)

",True,44,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/44,https://github.com/MDAnalysis/membrane-curvature/pull/44,closed,61,56,5,2,2,0,0,0,[],2021-07-06 04:36:15+00:00,2021-07-06 04:47:45+00:00,690.0,0:11:30,[],"[{'commit_sha': 'ef04a0c248939bb2af4eda5f35e2c9ff7eb53e1a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b5635b63de940b3cb324a4523802574286fdc096', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
679552675,Added `derive_surface` and `get_positions` with tests.,"Function `core_fast_leaflets` split into three functions:

- [x] get positions for each atom in the atom group for each frame.
- [x]  identify the grid cell for each coordinate.
- [x] calculate the average z for the atom group.

Tests added:
- [x] `test_get_positions` using dummy coordinates for beads 0 to 8, all of them with `z=10`:
```
o ______ o _____ o _______ |
|   (6)  |  (7)   |   (8)  |
o ______ o _____ o _______ |
|   (3)  |  (4)   |   (5)  |
o _______o ______ o ______ |
|   (0)  |  (1)   |   (2)  |
o ______ o ______ o ______ |
```
Using the same number of beads in grids, 

- [x] `test_avg_unit_cell` added for two systems.
1.  z values of `z=10`
2. z values as below:
```
o ______ o _____ o _______ |
| (z=10) | (z=20) | (z=30) |
o ______ o _____ o _______ |
| (z=10) | (z=20) | (z=30) |
o _______o ______ o ______ |
| (z=10) | (z=20) | (z=30) |
o ______ o ______ o ______ |
```
3. z values of `z=10` and number of beads per unit cell as shown below:
```
o ____ o ____ o ___ |
|   2  |  1   |  1  |
o ____ o ____ o ___ |
|   1  |  2   |  1  |
o ____ o ____ o ___ |
|   1  |  1   |  2  |
o ____ o ____ o ___ |
```

- [x] `test_derive_surface` added for same `dummy_coordinates` as in `test_get_positions`.",True,40,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/40,https://github.com/MDAnalysis/membrane-curvature/pull/40,closed,139,99,3,12,6,47,0,0,[],2021-06-29 03:19:13+00:00,2021-07-06 02:19:01+00:00,601188.0,"6 days, 22:59:48","[{'comment_id': 660857021, 'comment_body': ""Hi @ojeda-e I'm looking forward to being able to use your membrane curvature tool! I'm not sure if this fits your purpose exactly, but you could use [`scipy.stats.binned_statistic_2d`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binned_statistic_2d.html) to generate a surface of all your beads in one go."", 'comment_created': datetime.datetime(2021, 6, 29, 18, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 660857939, 'comment_body': 'could you do `selection.wrap` to ensure all atoms are within the grid boundaries?', 'comment_created': datetime.datetime(2021, 6, 29, 18, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 661051748, 'comment_body': ""Thanks for this suggestion @p-j-smith. I love the simplicity of `binned_statistic_2d(statistic='mean')` to get the mean z-values in one go! We might have to remember this for the refactor and remember to unwrap values for PBC"", 'comment_created': datetime.datetime(2021, 6, 30, 0, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 661051960, 'comment_body': 'I feel like selection was the better choice here 😅', 'comment_created': datetime.datetime(2021, 6, 30, 0, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 661052062, 'comment_body': '```suggestion\r\n    z_ref = np.zeros((n_cells, n_cells))\r\n```\r\n\r\nThe suggested type for a numpy array shape is a tuple of integers. The same suggestion applies to the below.', 'comment_created': datetime.datetime(2021, 6, 30, 0, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 661054536, 'comment_body': '```suggestion\r\ndef get_z_surface(coordinates, n_x_bins=10, n_y_bins=10, x_range=(0, 100), y_range=(0, 100)):\r\n```\r\n\r\nCould you have a go at writing this function to only take in an array (Nx3) of coordinates in angstrom, number of cells/bins on the x-axis (n_x_bins), number of cells/bins on the y-axis (n_y_bins), the minimum and maximum x values (x_range) in angstrom, and the minimum and maximum y values (y_range)?\r\n\r\n<img width=""516"" alt=""Screen Shot 2021-06-29 at 5 49 17 pm"" src=""https://user-images.githubusercontent.com/31115101/123885441-54c09000-d902-11eb-9f1a-016346f1ee04.png"">\r\n\r\n\r\nThis then becomes the most essential, basic point of the function. Later you can write new functions that add new functionality like applying it to an AtomGroup, for example:\r\n\r\n```python\r\ndef derive_surface(atomgroup, n_cells, max_width):\r\n\tatomgroup.unwrap(pbc=True)\r\n\tcoordinates = atomgroup.positions\r\n\treturn get_z_surface(coordinates, n_x_bins=n_cells, n_y_bins=n_cells,\r\n\t\t\t\t\t     x_range=(0, max_width), y_range=(0, max_width))\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 0, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 661074185, 'comment_body': ""Looking back over previous comments I realise that this directly contradicts https://github.com/MDAnalysis/membrane-curvature/pull/34#pullrequestreview-693038505 . Sorry if I am being confusing and backtracking on that. The motivation for the original comment came from how long the original function was. If the same thing can be accomplished with one line, it doesn't need to be separate functions anymore.\r\n\r\n> I would be keen to have these as divorced from either MDTraj or MDAnalysis as possible and work only with numpy arrays, which are generally more versatile. The overall function could grab the positions from the AtomGroup and feed it into the functions instead.\r\n\r\nThe above point is the more important one than having separate functions -- working with just numpy arrays for the base function."", 'comment_created': datetime.datetime(2021, 6, 30, 1, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 661267078, 'comment_body': ""I don't think you need to (or should) loop over atoms.  Instead something like `np.rint(bead.positions[:, :2] / factor)` should give you an array of the `l` and `m` values."", 'comment_created': datetime.datetime(2021, 6, 30, 8, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 663281876, 'comment_body': ""Is there a special reason for casting to np.float32? Why not just `n_cells / max_width` to keep it simple?\r\n\r\nMy reason is that you remove something that's mysterious not obvious why it needs to be there so that reading the code becomes easier. If at some point you _need_ an array top be float32, explicitly set the array's dtype."", 'comment_created': datetime.datetime(2021, 7, 2, 23, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 663282083, 'comment_body': ""I don't think this function should be needed. See if you can write your code with numpy arrays and broadcasting/slicing."", 'comment_created': datetime.datetime(2021, 7, 2, 23, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 663282168, 'comment_body': ""ANd you'll get rid of `get_positions()`."", 'comment_created': datetime.datetime(2021, 7, 2, 23, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 663282751, 'comment_body': 'See if you can eliminate this loop. Something like\r\n```python\r\nnormed = grid_norm_unit > 0\r\nz_ref[normed] += grid_z_coordinates / grid_norm_unit\r\nz_ref[~normed] = np.nan\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 23, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 663320475, 'comment_body': 'Thanks for the comment @orbeckst Yes, there is a reason to use the `np.float32`. I discovered in the process of writing the code that the `/` operation is more expensive when I perform `n_cells / max_width` due to the type of the variables: `int` and `numpy.float64`, respectively. The `np.float32` was introduced to speed up. Since it is an operation that runs in every frame, the difference in performance is significant. To give you an estimate, in a system with only 500 lipid headgroups to define the surfaces per leaflet, the calculations runs 20% faster using the `np.float32` trick.', 'comment_created': datetime.datetime(2021, 7, 3, 5, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663345360, 'comment_body': ""I think I'm mis-reading this, aren't `max_width` and `n_cells` both `ints` (going by both the docstring and the tests)?\r\n\r\nOr are you referring to another division somewhere else?"", 'comment_created': datetime.datetime(2021, 7, 3, 9, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 663346285, 'comment_body': '@fiona-naughton just pointed out the following to me: https://github.com/MDAnalysis/membrane-curvature/blob/97713b39675940ea141b2980ae948db74fa3d5e5/membrane_curvature/core.py#L27\r\n\r\nIn any case, casting to np.float32 is more expensive for this specific operation on my end, does the performance difference maybe appear later on in the calculation?', 'comment_created': datetime.datetime(2021, 7, 3, 10, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 663395288, 'comment_body': 'Thanks @IAlibay . In real-world systems the performance is significantly better using `np.float32`. The tests added so far were simplified as suggested by @lilyminium (See #22 and #31). I would prefer to keep it in the code, even if for the tests it looks like overkill. (I can remove it later if the benchmarks say otherwise)', 'comment_created': datetime.datetime(2021, 7, 3, 18, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663395509, 'comment_body': ""Thanks for your comment @richardjgowers. It also simplifies the function to the point `grid_map` isn't necessary. Since I also need the z coordinate as a float, I modified your suggestion to the following\r\n`cell_xy_floor = np.int32( selection.positions[:,:2] / factor )`\r\n`z_coordinate = selection.positions[:, 2] / factor * 10`.\r\n"", 'comment_created': datetime.datetime(2021, 7, 3, 18, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663395631, 'comment_body': 'This is very cool, thanks @orbeckst. Your suggestion was included in the function `avg_unit_cell`. The previous tests work as expected. ', 'comment_created': datetime.datetime(2021, 7, 3, 18, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663400789, 'comment_body': ""I still heavily recommend against early optimization, especially given that we don't seem to know what is actually benefitting from the cast? (it 100% can't be line 64)\r\n\r\nAnyways, at the end of the day I don't see it as a big deal (as long as it doesn't impact accuracy), so I'll default to the other mentor's opinions here (especially given that @lilyminium's suggestion https://github.com/MDAnalysis/membrane-curvature/pull/40#discussion_r661054536 would change this code completely?).\r\n\r\nHowever, I will add the following as things that probably need addressing:\r\n\r\n1. Both `n_cells` and `max_width` are written in the docstring as `int` inputs. Is this meant to be the case? If not, the docstring needs to be updated accordingly.\r\n\r\n2. Especially if they are meant to be `int`, then assuming we still want to keep this optimization in, why `np.float32`? Unless you're doing heavy vector operations, shouldn't a built-in `float` for a single value always be equal or faster in performance? (if they are `int` then it will default to a built-in `float` so it shouldn't even be necessary to cast?)\r\n"", 'comment_created': datetime.datetime(2021, 7, 3, 19, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 663401621, 'comment_body': ""Thanks for highlighting the docstrings, `max_width` is not `int` type, it's `float`. I'll update them. \r\nI don't see anything wrong with keeping it anyway. I'll leave and will re-evaluate in a performance test. \r\n"", 'comment_created': datetime.datetime(2021, 7, 3, 19, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663435927, 'comment_body': '> Hi @ojeda-e, I think I had something different in mind when I requested that you only use numpy etc and break it down to basics. Could you have a go at writing the function with the input arguments I suggested? I haven\'t had a look at tests because I assume they\'ll change with the new function.\r\n> \r\n> @p-j-smith had a good suggestion with the scipy function. When I said ""numpy only"" that was probably too restrictive, sorry; totally on me. For future reference, you should consider any package safe if it\'s something that MDAnalysis considers a [""core dependency""](https://userguide.mdanalysis.org/stable/module_imports.html#list-of-core-module-dependencies). I actually find it preferable to use numpy/scipy functions because they\'re usually written by people much smarter than me, who\'ve thought about the problem longer than me -- this usually results in faster, better code.\r\n> \r\n> If you try something like the code below, you might make this a very short function!\r\n> \r\n> ```python\r\n> x, y, z = coordinates.T\r\n> scipy.stats.binned_statistic_2d(x, y, z, statistic=""mean"", bins=..., range=...)\r\n> ```\r\n\r\nHi @lilyminium, the PR has a lot of different feedback at this point and I ended up following the suggestion from @richardjgowers which conflicts with this one. Could we defer this to an issue as it would require me to add a new dependency and can be done in parallel with other work?', 'comment_created': datetime.datetime(2021, 7, 4, 2, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663437477, 'comment_body': ""> def get_z_surface(coordinates, n_x_bins=10, n_y_bins=10, x_range=(0, 100), y_range=(0, 100)):\r\n\r\nI don't think the feedback about the function signature contradicts @richardjgowers. You don't have to use scipy now if you don't want to -- the main gist is to have the main function work solely on numpy arrays of positions. I think you'll find this helpful for refactoring in #41; if you have a look at existing AnalysisBase classes, the important functions very rarely work on MDAnalysis Universes. Instead, the positions are extracted in `_single_frame` and these numpy arrays are used for the actual computation.\r\n\r\nYou've already done most of the work, to be honest. The simplest, most immediate conversion would be:\r\n\r\n```python\r\ndef derive_surface(n_cells, selection, max_width):\r\n\tcoordinates = selection.positions\r\n\treturn get_z_surface(coordinates, n_x_bins=n_cells, n_y_bins=n_cells,\r\n\t\t\t\t\t     x_range=(0, max_width), y_range=(0, max_width))\r\n\r\ndef get_z_surface(coordinates, n_x_bins=10, n_y_bins=10, x_range=(0, 100), y_range=(0, 100)):\r\n\tz_ref = np.zeros((n_x_bins, n_y_bins))\r\n\tgrid_z_coordinates = np.zeros((n_x_bins, n_y_bins))\r\n    grid_norm_unit = np.zeros((n_x_bins, n_y_bins))\r\n\r\n    x_factor = n_x_bins / (x_range[1] - x_range[0])\r\n    y_factor = n_y_bins / (y_range[1] - y_range[0])\r\n    x_coords, y_coords, z_coords = coordinates.T\r\n    cell_x_floor = np.floor(x_coords * x_factor).astype(int)\r\n    cell_y_floor = np.floor(y_coords * y_factor).astype(int)\r\n    for l, m, z in zip(cell_x_floor, cell_y_floor, z_coords):\r\n    \t... # rest of current derive_surface\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 4, 2, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663438124, 'comment_body': ""I also wouldn't be afraid of adding a new dependency (especially from the MDAnalysis core dependencies). It's mostly a matter of adding the package name to:\r\n* https://github.com/MDAnalysis/membrane-curvature/blob/main/devtools/conda-envs/test_env.yaml\r\n* https://github.com/MDAnalysis/membrane-curvature/blob/main/docs/requirements.yaml"", 'comment_created': datetime.datetime(2021, 7, 4, 3, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663439487, 'comment_body': 'Thanks, I just thought this was going to be a separate issue. In the function you suggest the number of x and y bins is different, which I thought was going to be addressed later in #35 (together with PBC issue #36). \r\n\r\nWould you please confirm that is better to add this change here? @lilyminium \r\nAnother option is to use your suggested function but without independent `x` and `y` (i.e. square arrays) and then complete the work when I address #35 later on?', 'comment_created': datetime.datetime(2021, 7, 4, 3, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663440097, 'comment_body': ""IMO since you know that you want to address #35 in the future, there's no harm in designing your code towards that direction now. If you think it's easier to write and test a function that only takes `get_z_surface(coordinates, n_bins=10, range=(0, 100))` and then modify all the tests you write here for the `get_z_surface(coordinates, n_x_bins=10, n_y_bins=10, x_range=(0, 100), y_range=(0, 100))` signature later, go for it -- but to me it sounds like extra work.\r\n\r\nIf you have no intention of testing non-square arrays in this PR, you could just pass the same number into `n_x_bins` and `n_y_bins` as shown in the `derive_surface` example above. Then when you want to add rectangular functionality, you don't need to modify the existing tests from this PR."", 'comment_created': datetime.datetime(2021, 7, 4, 3, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663440326, 'comment_body': ""Thanks for the quick reply. I'll add it here then. "", 'comment_created': datetime.datetime(2021, 7, 4, 3, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663570561, 'comment_body': ""You've now added ``max_width_x`` and ``max_width_y``, could you please update the\r\ndocumentation? The ``n_cells`` entry too :)"", 'comment_created': datetime.datetime(2021, 7, 4, 23, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663570776, 'comment_body': ""Could you please be a little more precise what this returns -- typically if it's an array we would give the type and expected shape of the array, e.g.\r\n\r\n```\r\nReturns\r\n-------\r\nz_coordinates: numpy.ndarray\r\n\tAverage z-coordinate values. This is a numpy array of floats,\r\n    shape (n_cells, n_cells)\r\n```"", 'comment_created': datetime.datetime(2021, 7, 4, 23, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663570818, 'comment_body': '```suggestion\r\n    coordinates : numpy.ndarray\r\n```\r\n\r\nI think this is a numpy array?', 'comment_created': datetime.datetime(2021, 7, 4, 23, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663571015, 'comment_body': '```suggestion\r\n    x_range : tuple of (float, float)\r\n        Range of indexes in grid in the x dimension with shape=(0, max_width_x).\r\n```\r\n\r\nI thought this would be the minimum x coordinate and the maximum x coordinate in angstrom? The shape is actually (2,) because there are two elements in the tuple.\r\n\r\nSame for y_range below.', 'comment_created': datetime.datetime(2021, 7, 4, 23, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663571119, 'comment_body': 'Could you be a little more precise about the return type here, as in the `derive_surface` function?\r\n', 'comment_created': datetime.datetime(2021, 7, 4, 23, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663573290, 'comment_body': ""Suggestion: numpy is a really powerful library where you can do a lot with very few commands. I've shown some more nifty tricks below. The below code also means that you don't need to generate z_ref yourself (i.e. the function signature could be just `def avg_unit_cell(grid_z_coordinates, grid_norm_unit):`). Instead, you can just make an array from numpy division.\r\n\r\n```python\r\n\t# this creates a *new* array where all the 0 values\r\n\t# in grid_norm_unit are replaced with np.nan\r\n    grid_norm_unit = np.where(grid_norm_unit > 0,  # the condition\r\n    \t\t\t\t\t\t  grid_norm_unit,  # values if condition is True\r\n    \t\t\t\t\t\t  np.nan)  # value if condition is False\r\n\r\n    z_ref = grid_z_coordinates / grid_norm_unit\r\n```\r\n\r\nIt relies on the knowledge that any operation with `np.nan` results in np.nan.\r\n\r\n```python\r\n>>> np.nan / 1\r\nnan\r\n>>> 1 / np.nan\r\nnan\r\n>>> 0 / np.nan\r\nnan\r\n```\r\n\r\nIt also avoids the RuntimeWarnings that would be generated in the existing code, since the current line ``grid_z_coordinates / grid_norm_unit`` still results in division by 0:\r\n\r\n```python\r\n>>> arr = np.arange(12).reshape((4, 3))\r\n>>> arr\r\narray([[ 0,  1,  2],\r\n       [ 3,  4,  5],\r\n       [ 6,  7,  8],\r\n       [ 9, 10, 11]])\r\n>>> arr2 = np.zeros_like(arr)\r\n>>> arr / arr2\r\n__main__:1: RuntimeWarning: divide by zero encountered in true_divide\r\n__main__:1: RuntimeWarning: invalid value encountered in true_divide\r\narray([[nan, inf, inf],\r\n       [inf, inf, inf],\r\n       [inf, inf, inf],\r\n       [inf, inf, inf]])\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 7, 4, 23, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663574579, 'comment_body': '`assert_almost_equal` works for 2D arrays as well so you can get rid of the for loop altogether. You can also use `pytest.mark.parametrize` to bundle the two test cases together.\r\n\r\n```suggestion\r\n@pytest.mark.parametrize(""n_cells, grid_z_coords"", [\r\n    (3, np.full((3, 3), 10)),\r\n    (3, np.array([[10, 20, 30], [10, 20, 30], [10, 20, 30]], dtype=float)),\r\n])\r\ndef test_avg_unit_cell_identity(n_cells, grid_z_coords):\r\n    z_ref = np.zeros((n_cells, n_cells))  # this is not necessary if you go with the trick suggested above\r\n    unit = np.ones((n_cells, n_cells))\r\n    averaged_surface = avg_unit_cell(z_ref, grid_z_coords, unit)\r\n    assert_almost_equal(averaged_surface, grid_z_coords)\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 0, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663574678, 'comment_body': ""Could you come up with a more descriptive name, like `average_z_coordinates`? I'm not really sure what averaging the unit cell means with respect to the arguments given to the function."", 'comment_created': datetime.datetime(2021, 7, 5, 0, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663575079, 'comment_body': ""```suggestion\r\ndef test_avg_unit_cell_more_beads():\r\n    grid_z_coords = np.full((3, 3), 10, dtype=float)\r\n    grid_norm = np.array([[2, 1, 1],\r\n                          [1, 2, 1],\r\n                           1, 1, 2]], dtype=int)\r\n    expected_surface = np.array([[5, 10, 10],\r\n                                 [10, 5, 10],\r\n                                 [10, 10, 5]], dtype=float)\r\n    z_ref = np.zeros((n_cells, n_cells))\r\n    averaged_surface = avg_unit_cell(z_ref, grid_z_coords, grid_norm)\r\n    assert_almost_equal(averaged_surface, expected_surface)\r\n```\r\n\r\nYou don't need to use `pytest.mark.parametrize` if you don't have multiple test cases to run through."", 'comment_created': datetime.datetime(2021, 7, 5, 0, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663575346, 'comment_body': 'Could you please rewrite this test to not use `parametrize` (since it does not use multiple test cases) and only with `assert_almost_equal` instead of the for loop?', 'comment_created': datetime.datetime(2021, 7, 5, 0, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663575668, 'comment_body': ""This doesn't need to be parametrized either, as there's only one entry. Could you put `dummy_array` inside the test function?"", 'comment_created': datetime.datetime(2021, 7, 5, 0, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663575788, 'comment_body': ""Could you please delete this test, and it's now just a duplicate of test_get_z_surface?"", 'comment_created': datetime.datetime(2021, 7, 5, 0, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663575957, 'comment_body': ""Could you please rewrite this test to use `get_z_surface` instead of `derive_surface`? This means you won't have to put the array into an MDAnalysis universe :)"", 'comment_created': datetime.datetime(2021, 7, 5, 0, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663579886, 'comment_body': 'Thanks. I will  update to `derive_surface(n_cells_x, n_cells_y, selection, max_width_x, max_width_y)` (and respective tests if applicable).', 'comment_created': datetime.datetime(2021, 7, 5, 0, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663579981, 'comment_body': ""Yeah, thanks for this comment. I wasn't sure what to put here. :)"", 'comment_created': datetime.datetime(2021, 7, 5, 0, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663584352, 'comment_body': 'Thanks. Let me confirm before submitting changes, @lilyminium. (In the process I clarify what I think is supposed to be correct). The structure of the parameters in the docstring is\r\n```\r\nparameter: type\r\n    description\r\n``` \r\ncorrect?\r\nIs it common to add the shape of the numpy arrays in the type? Here I had it in the description. So in general, it should be like \r\n```\r\ncoordinates : numpy.ndarray \r\n     Coordinates of AtomGroup. Numpy of shape=(n_atoms, 3).\r\n```\r\nor should I specify the shape with the type as you suggest below for tuples?', 'comment_created': datetime.datetime(2021, 7, 5, 1, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663600540, 'comment_body': 'Sorry, missed this comment. Will be pushed shortly. ', 'comment_created': datetime.datetime(2021, 7, 5, 2, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663610440, 'comment_body': ""```\r\nparameter: type\r\n    description\r\n```\r\n\r\nErm, that's probably the correct one. I'll be honest that I'm not totally sure what's correct here. As long as the docs look good, either one works."", 'comment_created': datetime.datetime(2021, 7, 5, 3, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663610777, 'comment_body': ""I still think this would be the minimum x coordinate and the maximum x coordinate in angstrom, instead of the indexes in the grid. It's a replacement for `max_width` rather than n_cells, right?"", 'comment_created': datetime.datetime(2021, 7, 5, 3, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 663612133, 'comment_body': 'Sorry, I thought I included this change already. Give me a sec to update.', 'comment_created': datetime.datetime(2021, 7, 5, 3, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 663614263, 'comment_body': 'And I think I missed this too. Next push will include these changes.', 'comment_created': datetime.datetime(2021, 7, 5, 3, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}]","[{'commit_sha': 'c3eb126dfccc616a18ee726839c41f2aa65895fd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b9d2becffc9bc1f8faeb6ce4b5eb787320bf441a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ae67ca1abb1f653073fcb121ca4add7bd9e0bf7e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dd2c690e8e8310928c3ef79be8190585e4cfde0d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ae7dacddb18caf1c288207780e01434f0e381bc0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b0e79346528c29dc6d91ab79a3c6e36c5691343a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1dd3e238574f5c9b07f067a3fc08de766eb9c32b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c53d5dd6ce09beba314122b25bd269a53e60a1f7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '90c17725a93f06b7e13ac7e403759ce3e31fc6b0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '667144d1f8c0561de56805687d017ee0bd6f7a4f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5e285994f98714b72d4c67c0199f01aa742d400e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4567ed1588334caf424fd7d90a7a4f4156ec94dc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
684053162,Added explicit imports. ,"This PR fixes #21 

In this PR:

- [x] `membrane_curvature` folder restructured.
- [x] In `membrane_curvatre/tests`, renamed `test_mdakit_membcurv.py` to `test_membrane_curvature.py`.
- [x] Added explicit imports in `test_membrane_curvature.py` 
- [x] `curvature.py` and `surface.py` added as a replacement for `lib/mods.py`. 

Previous folder structure:
```
membrane_curvature
├── __init__.py
├── core.py
├── lib
│   └── mods.py
├── data
├── tests
├── ...
```

updated structure:
```
membrane_curvature
├── __init__.py
├── core.py *
├── curvature.py --> this would contain H, K
├── surface.py --> this would contain z_ref, derive_surface, normalized_grid
├── data
├── tests
├── ...
```
* `core.py` is expected to be replaced by `base.py` (PR #43)

",True,44,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/44,https://github.com/MDAnalysis/membrane-curvature/pull/44,closed,61,56,5,2,2,0,0,0,[],2021-07-06 04:36:15+00:00,2021-07-06 04:47:45+00:00,690.0,0:11:30,[],"[{'commit_sha': 'ef04a0c248939bb2af4eda5f35e2c9ff7eb53e1a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b5635b63de940b3cb324a4523802574286fdc096', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
684044712,AnalysisBase ,"This PR is an initial suggestion to fix #41 

- Methods included in the initial analysis base:

- [x] `__init__` 
- [x] `_prepare`
- [x] `_single_frame`
- [x] `_conclude`

- Some additional comments

This first AnalysisBase was build under the following assumptions:
1. The atoms of reference in `AtomGroup` remain the same during the `n_frames` of the trajectory.
2. lipid translocation does not occur during the trajectory. (Although I am not considering bilayers, this reinforces 1)
3. By introducing a grid of bigger size than the simulation box, the calculation of `H` and `K` may be jeopardized by the introduction of `np.nans`. This selection will certainly generate `np.nans` in the calculation of the gradient, which ultimately will affect the averaged grids. Hence, the attempt of warning the user (in `__init__`). 
4. The overall result is the averaged `np.array` of `surface`, `K`, and `H` over frames. (in `_conclude`)
5. The calculation of `surface`, `H`, and `K`, is performed in every frame (in `_single_frame`).
6. The respective values of `surface`, `H` and `K` and their normalized grids are initialized (in `_prepare`). They are a tuple of np.arrays where the first element contains the respective values, and the second element counts the elements when defined.
7.  To sum and normalize values, the `_output` function was introduced. (But I am not sure this is something people would agree with)

As discussed in #21  with @lilyminium, this analysis base will potentially replace `core.py`. ",True,43,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/43,https://github.com/MDAnalysis/membrane-curvature/pull/43,closed,285,61,5,20,17,53,0,0,[],2021-07-06 04:09:48+00:00,2021-07-14 01:51:59+00:00,682931.0,"7 days, 21:42:11","[{'comment_id': 664224652, 'comment_body': '```suggestion\r\n    self.results.surface = np.zeros((self.x_bins, self.y_bins))\r\n    self.results.surface_count = np.zeros((self.x_bins, self.y_bins))\r\n    self.results.mean = np.zeros((self.x_bins, self.y_bins))\r\n    self.results.mean_count = np.zeros((self.x_bins, self.y_bins))\r\n    self.results.gaussian = np.zeros((self.x_bins, self.y_bins))\r\n    self.results.gaussian_count = np.zeros((self.x_bins, self.y_bins))\r\n```\r\nI think these results would be easier to work with if they were separate.\r\n\r\nYou also need to construct new arrays each time. As it is, currently, `self.results.gaussian[0] is self.results.mean[0]` will return True -- they are the same object in memory. That means, when you call `_output` on the surface, mean, and gaussian results, you are updating the same arrays 3 times.', 'comment_created': datetime.datetime(2021, 7, 6, 4, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 664225623, 'comment_body': ""Where do you give `derive_surface` the coordinates? I don't see `self.n_cells_x, self.n_cells_y, self.max_width_x, self.max_width_y` defined either?"", 'comment_created': datetime.datetime(2021, 7, 6, 4, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 664227140, 'comment_body': 'Could you use `np.nanmean` to average over your surfaces without needing to have these `counter` arrays?\r\n\r\nFor example, you could set up a `z_surface` array to collect all the surfaces you get from `derive_surface` without modification:\r\n\r\n```python\r\ndef _prepare(self):\r\n    self.results.z_surface = np.full((self.n_frames, self.x_bins, self.y_bins), np.nan)\r\n\r\ndef _single_frame(self):\r\n    self.results.z_surface[self._frame_index] = derive_surface(...)\r\n```\r\n\r\nand then finally average over the frames in _conclude:\r\n\r\n```python\r\ndef _conclude(self):\r\n   self.results.average_z_surface = np.nanmean(self.results.z_surface, axis=0)\r\n```\r\n\r\n(and the same for the mean and gaussian surfaces).', 'comment_created': datetime.datetime(2021, 7, 6, 4, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 664227615, 'comment_body': 'Nice, I like these defaults!', 'comment_created': datetime.datetime(2021, 7, 6, 4, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 664228200, 'comment_body': '```suggestion\r\ndef __init__(self, universe, select,\r\n             x_bins=100, y_bins=100,\r\n             x_range=None,\r\n             y_range=None,\r\n             pbc=True, **kwargs):\r\n    super().__init__(universe.trajectory, **kwargs)\r\n    self.universe = universe\r\n```\r\n\r\nCalling the parent class `__init__` makes sure the base class instantiation is done as well!', 'comment_created': datetime.datetime(2021, 7, 6, 4, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 664228332, 'comment_body': 'Do you need `universe` to get passed? Is `select` an AtomGroup or a string -- if it\'s an AtomGroup, you could just use `universe = select.universe`.\r\n\r\nFYI most AnalysisBase classes use `select` as a string, and many accept either an AtomGroup or Universe for the first argument. To safeguard against the multiple possibilities, you could do this:\r\n\r\n```python\r\ndef __init__(self, universe, select=""all"", ..., **kwargs):\r\n  super().__init__(universe.universe.trajectory, **kwargs)\r\n  self.selection = universe.select_atoms(select)\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 4, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 664228565, 'comment_body': 'Could you please name this something more accurate, such as `n_y_bins`? `y_bins` could be the actual bins, i.e. `[(0, 10), (10, 20), (20, 30), ...]`', 'comment_created': datetime.datetime(2021, 7, 6, 4, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 664229749, 'comment_body': ""```suggestion\r\nfrom MDAnalysis.analysis.base import AnalysisBase\r\n\r\nclass MembraneCurvature(AnalysisBase):\r\n```\r\nI think you're missing an actual class definition!"", 'comment_created': datetime.datetime(2021, 7, 6, 4, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 664235330, 'comment_body': ""Actually, I was about to edit when I received the review 😄. \r\n\r\nI had it initially in the explicit form as you suggested, but I found it ugly (long and redundant). Then I changed to the submitted version, but yes, that's incorrect. I will submit a change with the explicit version. \r\n\r\nWhat do you think about this option?\r\n\r\n```\r\ncumulative = np.zeros((self.x_bins, self.y_bins))\r\ncount = np.zeros((self.x_bins, self.y_bins))\r\n\r\nself.results.surface = (cumulative.copy() , count.copy() )\r\nself.results.mean = (cumulative.copy(), count.copy() )\r\nself.results.gaussian = (cumulative.copy(), count.copy())\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 7, 6, 4, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 665654632, 'comment_body': ""I still wouldn't be keen on having a tuple of arrays in the results. Simpler is often better, even if it results in more lines of code."", 'comment_created': datetime.datetime(2021, 7, 7, 19, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 665657673, 'comment_body': ""Thanks for the comment @lilyminium. Maybe it's something silly, but may I ask why tuples of arrays are not the best approach here? \r\nEdit: You say it's for simplicity, but I wonder if there's anything else I don't see here of why tuples aren't the most convenient.\r\n(Sorry if my question wasn't clear)"", 'comment_created': datetime.datetime(2021, 7, 7, 19, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 665660048, 'comment_body': ""I'm mostly thinking of the user experience when I say this. If I wanted to work with the raw `mean` array, it's much handier for me to work with `self.results.mean_array` than `self.results.mean[0]`. The `[0]` might look like a small addition but it means that I have to remember which order the arrays are in (because it might be `self.results.mean[1]`), so I have to look up the documentation each time (in fact this is a real downside of the existing RMSD class in MDAnalysis -- the actual RMSD results are only from the third column of the `self.results.rmsd` array).\r\n\r\nIt's also easier to document `self.results.mean_array is the array of the mean surfaces` instead of `self.results.mean is a tuple of arrays, the first array is the array of mean surfaces, the second is the array of counts` :)\r\n\r\nAnyway, I think you may be able to get rid of the counter arrays by using `np.nanmean`."", 'comment_created': datetime.datetime(2021, 7, 7, 19, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 665665473, 'comment_body': 'I see. Thanks for the clear explanation. \r\nThe question was more out of curiosity to see the downside of the approach I used here. And to be honest, while writing code I never think of that, but as an user I can totally see it :) Very helpful, thanks again.', 'comment_created': datetime.datetime(2021, 7, 7, 19, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 665667161, 'comment_body': ""It was a good question! There's always a balance between making life easier for the developer but thinking about users too :p"", 'comment_created': datetime.datetime(2021, 7, 7, 19, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 665673303, 'comment_body': ""I wanted to ask you something about this approach, @lilyminium . To be honest, I didn't see any other sensible option to accumulate the values per frame and count. Would you please share with me some alternatives? What do you think would be a good idea? \r\n(Not that I am looking for a change ☺️ , more to consider alternatives I can't see by myself)"", 'comment_created': datetime.datetime(2021, 7, 7, 20, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 665679236, 'comment_body': 'Do you need to accumulate the count per frame as an end goal? My first thought would be to collect all the surfaces in a 3D array: (n_frames, n_x_cells, n_y_cells) and then average over them with `np.nanmean` for the average surface.', 'comment_created': datetime.datetime(2021, 7, 7, 20, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 667205635, 'comment_body': 'I think you need to install it explicitly via pip:\n\n```suggestion\n  - pip:\n      - MDAnalysis==2.0.0-dev0\n```\n', 'comment_created': datetime.datetime(2021, 7, 9, 20, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 667237549, 'comment_body': ""@ojeda-e \r\nBecause it's relying on the `Results` class, could you raise an issue as a reminder that MDA should get pinned to >=2.0.0 in `setup.py`? (I wouldn't do it now, but it'd be a good thing to do before the first release)"", 'comment_created': datetime.datetime(2021, 7, 9, 22, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 667238598, 'comment_body': ""Also +1 to @RMeli's comment. The beta needs to be installed via `pip` (swapping `-dev0` with `b0` should do the trick)."", 'comment_created': datetime.datetime(2021, 7, 9, 22, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 667239035, 'comment_body': 'I think I missed some of the discussion on this.\r\nAssuming the grid needs to cover the entire box, how do you deal with NPT-led box fluctuations?', 'comment_created': datetime.datetime(2021, 7, 9, 22, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 667294238, 'comment_body': 'Probably already on your to-do list, but some docstring (especially detailing the input variables), would be very useful.', 'comment_created': datetime.datetime(2021, 7, 10, 5, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 667294471, 'comment_body': 'Just to make everything clearer to future developers I would rename this from self.selection to either self.ag or self.atomgroup. That way folks can look at the name and immediately know what type of object it is (also better matches other MDA analysis methods).', 'comment_created': datetime.datetime(2021, 7, 10, 5, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 667294992, 'comment_body': ""Nothing wrong with this technically, but it might be good to simplify it to just `len(atomgroup) == 0` purely on the the basis that it's more descriptive of your intent / more widely used way of doing this?"", 'comment_created': datetime.datetime(2021, 7, 10, 5, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 667513517, 'comment_body': ""Thanks, @IAlibay, I wasn't sure if it was going to be better/easier to open an issue after this PR was accepted. I will include docstrings in the next push. "", 'comment_created': datetime.datetime(2021, 7, 11, 17, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 667513792, 'comment_body': ""At least for this first PR I'd suggest adding input/output parameters and anything that's raised. That way it's easier for everyone to keep track of what is intended to be what."", 'comment_created': datetime.datetime(2021, 7, 11, 17, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 667515781, 'comment_body': ""I think that's something I didn't pay too much attention to (and I didn't clarify, my bad). One of the assumptions I had is that calculation of membrane curvature is performed in equilibrated systems.  If the box shrinks or expands too much (one unit cell in the grid), the calculation wouldn't be accurate. \r\n\r\nThe reason why I introduced the restrictions (which I changed now to a warning message) is that (1) if the surface is derived from a portion of the membrane, the calculation of curvature in the edges will be inaccurate because the calculation of a  gradient runs over adjacent values. On the other hand, (2) in the scenario in which the grid is too big, unnecessary `np.nans` will be introduced. It means that, again, the undefined adjacent values will have a negative impact on the calculation of curvature. \r\n\r\nI don't see a straightforward solution for NPT systems unless the calculation returns a different grid per frame and then results must be normalized over grids of the same size, and I don't have a clear idea, at least right now, of how to keep track of such variation over frames. Do you have any suggestions here? "", 'comment_created': datetime.datetime(2021, 7, 11, 18, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 667516057, 'comment_body': 'By renaming `selection` to `ag`, your suggestion reads better, so I updated it. Thanks.', 'comment_created': datetime.datetime(2021, 7, 11, 18, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 667524898, 'comment_body': '@IAlibay this is the modified warning message, now updated for `x` and `y` dimensions. ', 'comment_created': datetime.datetime(2021, 7, 11, 19, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 669003080, 'comment_body': 'Use relative imports\r\n```suggestion\r\nfrom .surface import get_z_surface\r\nfrom .curvature import mean_curvature, gaussian_curvature\r\n```\r\nto be explicit about the relationship between the modules. This makes clear that they are all in the same package.', 'comment_created': datetime.datetime(2021, 7, 13, 18, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669004593, 'comment_body': ""I'd move the general `import MDAnalysis` before the specific one for `AnalysisBase` — it's no big thing but conceptually I like loading the foundation first so if any errors occur then I know that they are in the foundation and not the specifics. (MDAnalysis.analysis is not loaded when you do `import MDAnalysis` so it could conceivably help you in pinning down issues.)"", 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669004896, 'comment_body': ""I _think_ in our style we don't have an empty line here."", 'comment_created': datetime.datetime(2021, 7, 13, 18, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669005504, 'comment_body': '```suggestion\r\n    x_range : tuple of (float, float), optional. Default: (0, `universe.dimensions[0]`)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669005664, 'comment_body': '```suggestion\r\n    y_range : tuple of (float, float), optional. Default: (0, `universe.dimensions[1]`)\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669009283, 'comment_body': ""The syntax for default values seems to be according to  [numpy docstring standard](https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard) (which is what we follow  [Userguide: Working with the docs](https://userguide.mdanalysis.org/2.0.0-dev0/contributing_code.html#working-with-the-code-documentation))\r\n\r\n```suggestion\r\n    select : str or iterable of str, optional, default: 'all'\r\n```\r\n\r\nbut you can leave out the value because it's already part of the function signature."", 'comment_created': datetime.datetime(2021, 7, 13, 18, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669009621, 'comment_body': 'default', 'comment_created': datetime.datetime(2021, 7, 13, 18, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669012492, 'comment_body': 'We use single backquotes when referring to a parameter. For anything else we either use explicit reST roles (like :func: or :class: or :attr:) or use ""inline code"" _double_ backquotes\r\n```suggestion\r\n        Number of bins in grid in the ``x`` dimension.\r\n```\r\nALternatively, you can also use the :math: role\r\n```reST\r\n        Number of bins in grid in the :math:`x` dimension.\r\n```\r\nalthough in this specific case, this seems less readable and you could also just write\r\n```reST\r\n        Number of bins in grid in the x dimension.\r\n```\r\n\r\nThe main point is that when you mark-up something then think about why you are marking it up and what _meaning_ it should carry.', 'comment_created': datetime.datetime(2021, 7, 13, 18, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669015632, 'comment_body': ""It does not make sense to specify return values for a class unless the class is pretending to be a function (with `__call__`) but that's not what Analysis classes do. They store results in `results` after executing `run()` — exactly as you documented. The `__init__` method does not have a return value.\r\n\r\nRemove the *Returns* section. Add whatever `_conclude()` adds to `results` to the attribute section. Add some text explaining that these specific attributes are available after run.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 13, 18, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669016980, 'comment_body': ""add a note for later that you're only checking the first frame and that NPT simulations are not properly covered here"", 'comment_created': datetime.datetime(2021, 7, 13, 18, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669018848, 'comment_body': ""It's good practice to also log a warning using the [logging facility](https://docs.python.org/3/library/logging.html). See density analysis https://github.com/MDAnalysis/mdanalysis/blob/8f9f402fe65d6a90e88b60b6da735c130425f00e/package/MDAnalysis/analysis/density.py#L181-L183 and eg https://github.com/MDAnalysis/mdanalysis/blob/8f9f402fe65d6a90e88b60b6da735c130425f00e/package/MDAnalysis/analysis/density.py#L420-L424 as examples."", 'comment_created': datetime.datetime(2021, 7, 13, 18, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669021048, 'comment_body': ""I would eliminate the blank lines to make it easier to read it as one computing block but that's personal style."", 'comment_created': datetime.datetime(2021, 7, 13, 18, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669021119, 'comment_body': ""I would eliminate the blank lines to make it easier to read it as one computing block but that's personal style."", 'comment_created': datetime.datetime(2021, 7, 13, 18, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669022333, 'comment_body': '- update the doc string\r\n- renaming `selection` -> `atoms` would be clearer', 'comment_created': datetime.datetime(2021, 7, 13, 18, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669023499, 'comment_body': 'You need to test these two lines separately, otherwise you can get a passing test even if one of them does not raise the warning.', 'comment_created': datetime.datetime(2021, 7, 13, 18, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669024024, 'comment_body': '`pytest.warns` can also match part of the warnings string, always a good idea to test that the warning looks like what you expect it.', 'comment_created': datetime.datetime(2021, 7, 13, 18, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669029242, 'comment_body': 'Btw, @IAlibay, this PR demonstrates to be that the beta was worth the effort because it makes it a lot easier for packages to test against what 2.0 will look like.', 'comment_created': datetime.datetime(2021, 7, 13, 18, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669186704, 'comment_body': 'Mark up the results attribute:\r\n```suggestion\r\n    :attr:`results` attributes.\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 23, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669187385, 'comment_body': ""Isn't this inside `results`? So\r\n```suggestion\r\n    The attribute :attr:`MembraneCurvature.results.z_surface`\r\n```\r\n\r\nIf you only want to display `z_surface` use the tilde\r\n```reST\r\n    The attribute :attr:`~MembraneCurvature.results.z_surface`\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 14, 0, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669187520, 'comment_body': 'results?', 'comment_created': datetime.datetime(2021, 7, 14, 0, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669187585, 'comment_body': 'results?', 'comment_created': datetime.datetime(2021, 7, 14, 0, 1, 59, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669187778, 'comment_body': 'Needs double colon to format as code\r\n```suggestion\r\n    You can pass a universe containing your selection of reference::\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 0, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669187983, 'comment_body': 'Maybe two lines for how to plot with matplotlib to round it off?', 'comment_created': datetime.datetime(2021, 7, 14, 0, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669190605, 'comment_body': 'name your logger differently ... something like\r\n```suggestion\r\nlogger = logging.getLogger(""MDAnalysis.MDAKit.membrane_curvature"")\r\n```\r\nI started your logger\'s name with ""MDAnalysis"" so that output gets added to the default logger that can be started with\r\n```python\r\nimport MDAnalysis\r\nMDAnalysis.start_logging()\r\n```\r\nand whose root logger is named ""MDAnalysis"". Hence any logger named ""MDAnalysis.*"" will also log under it.\r\n\r\nI suggest ""MDAnalysis.MDAKit"" to define a namespace that all MDAKits could be using but we haven\'t really thought about this so this could definitely be subject to change. Maybe @IAlibay @lilyminium @richardjgowers @fiona-naughton have opinions.\r\n\r\nIn any case, for right now, pretty much anything is ok that\'s not ""density"" ;-).\r\n', 'comment_created': datetime.datetime(2021, 7, 14, 0, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 669221176, 'comment_body': 'Added. ', 'comment_created': datetime.datetime(2021, 7, 14, 1, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}]","[{'commit_sha': 'd81ce2b294ab27b39e914161357df28ef71f6d38', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6546d1b8cbbc43adbd5d0a7e6805c51ad41151ee', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6580a783db9a276497373a996a50d7b4e1444237', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '28389171cdce01629d5439d51bcc2fa536a2734a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dcb51f0f3f7d94abd6d4ce8461b133960d3d2eda', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ab546a5368c8a5137362c84523dc6d7b3e4baada', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ff49d89b14abd52397d217b9ae8a62ec5fcf7423', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9d6b86dce285271e1bccb3c6ad0778f707badb7e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fcf59e584c052a2042927a943d3649c2ccab52e7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2f4ff1bbae0fe147125048fdf49263f589f47e6c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '775f693d595e221aa46c6ef3810e1e4a59d12a7a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9f8cbe97de9290a0d3e19448f9694bc0088b1e70', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'aa7b18a9f13bcb5f72bf1b586d89ec9eb27182a6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '278adabd76f553d524df890683d18c29f66542a7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '042506cf63b10591597fbc4e418fc7798fd7b1bd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2f7ea644a6d36183b3894d6986f2185490a441ff', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bf2603c9a374ca79f165cf15f31c05812ebc5408', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ea482719adc94a66ee22a0c06c8204ede4492940', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f952b57c851694d8db23de80f3c8e895be3a7ca0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9451b0cfbf67d7f7a9cfcdc5d0b13c2c7f85dfa4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
691802580,Add coordinate wrapping ,"In this PR I added PBC conditions. Changes in this PR fix #36 and possibly #22 

- [x] `self.ag.wrap()` added to`__init__` and ` _single_frame`.
- [x] Added tests for coordinate wrapping, including negative coordinates in x, y, and z, as suggested in #22 
- [x] Since PBC has an effect on the overall results, respective tests for `results.z_surface` and `results.mean` were updated.
- [x] I am not sure mentors would be interested in keeping previous tests, so I didn't delete but marked them as `xfail(reason=""PBC conditions not applied."")`  (See line 276 is `tests_membrane_curvature.py`.

@orbeckst @lilyminium @IAlibay are there any other relevant tests I am missing here?
Thanks
",True,48,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/48,https://github.com/MDAnalysis/membrane-curvature/pull/48,closed,316,16,5,12,13,38,0,0,[],2021-07-17 00:28:41+00:00,2021-08-02 21:32:05+00:00,1458204.0,"16 days, 21:03:24","[{'comment_id': 671585561, 'comment_body': 'Any reason for the more verbose `is True` check here vs. conventional `if self.pbc:`? You do that as expected below, for example.', 'comment_created': datetime.datetime(2021, 7, 17, 1, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 671586741, 'comment_body': 'Thanks for your comment. No, not really, I just learned from PEP8 the way you suggest is the best one. :)', 'comment_created': datetime.datetime(2021, 7, 17, 1, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 671669259, 'comment_body': ""This isn't being used as far as I can see? The wrap method on AtomGroups requires no import."", 'comment_created': datetime.datetime(2021, 7, 17, 10, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 678454986, 'comment_body': ""I'd clarify what this means.  This will pack all the particles into the primary unit cell before processing them further right?"", 'comment_created': datetime.datetime(2021, 7, 28, 16, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 678508702, 'comment_body': ""Yes, correct, it's to keep all articles in the primary unit cell. I'll update this. Thanks."", 'comment_created': datetime.datetime(2021, 7, 28, 17, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 678530641, 'comment_body': 'ALso send to logger.warning', 'comment_created': datetime.datetime(2021, 7, 28, 17, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 680103393, 'comment_body': 'Can you please add in something about ignoring this warning if the trajectory is processed to rotate -- otherwise, people who are following the directions and not using `wrap=True` will be unnecessarily alarmed.', 'comment_created': datetime.datetime(2021, 7, 30, 17, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680103892, 'comment_body': ""Can this be a little more fine-grained -- do many engines unwrap atoms in raw trajectories? If the trajectory is raw, it's usually more likely that the atoms are already in the unit cell, right? Could you mention translation vs rotation?"", 'comment_created': datetime.datetime(2021, 7, 30, 17, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680104163, 'comment_body': ""What's this for?"", 'comment_created': datetime.datetime(2021, 7, 30, 17, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680105665, 'comment_body': 'Instead of deleting this test and replacing it with the  new one, could you please keep both tests for `wrap=True` and `wrap=False`?', 'comment_created': datetime.datetime(2021, 7, 30, 17, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680228522, 'comment_body': 'Sorry, I have no idea how that line ended up there. ', 'comment_created': datetime.datetime(2021, 7, 30, 21, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680267847, 'comment_body': 'Ok, I added a test for both. Thanks for this. :)', 'comment_created': datetime.datetime(2021, 7, 30, 23, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680270555, 'comment_body': ""I'm sorry for not noticing this before. The fact that the box has `u.dimension[2]=30 A` (or 3nm), made the tests in lines 303 and 315 fail. Since 120 is a multiple of 30, the `derived_surface` was zero and therefore, everything else was zero.  Hope it makes sense. "", 'comment_created': datetime.datetime(2021, 7, 30, 23, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680271329, 'comment_body': 'I deleted the trajectory for now since I would need to create a new trajectory test with `u.dimensions[2]=30`. Skipping the trajectory the tests pass. ', 'comment_created': datetime.datetime(2021, 7, 30, 23, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680272489, 'comment_body': 'I changed the lines a bit. Happy to received suggestions for the pushed changes.', 'comment_created': datetime.datetime(2021, 7, 30, 23, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680275978, 'comment_body': ""```suggestion\r\n                               wrap=False).run()\r\n```\r\n\r\nThis string will still evaluate truthily, i.e. wrapping is still turned on. So, it's hard for this test to evaluate whether `wrap=False` is working. Switching to a new universe (maybe with dummy coordinates if that's easiest) where `wrap=True` and `wrap=False` give you different results might be the best way?"", 'comment_created': datetime.datetime(2021, 7, 31, 0, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680276207, 'comment_body': ""Ah, thanks for that explanation, I wouldn't have known where to look otherwise!"", 'comment_created': datetime.datetime(2021, 7, 31, 0, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680292229, 'comment_body': 'Sorry about that and thanks for spotting it.', 'comment_created': datetime.datetime(2021, 7, 31, 2, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680425288, 'comment_body': 'without this condition, negative indexes will pass regardless because Python returns the i-th element `(-1, 0) = (i, 0)`. So previously, all the negative indexes were in fact passed. ', 'comment_created': datetime.datetime(2021, 8, 1, 0, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680555984, 'comment_body': 'Superfluous print?', 'comment_created': datetime.datetime(2021, 8, 1, 19, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680557425, 'comment_body': ""Does this need to happen in `__init__`? Does it affect any part of the set-up in `_prepare` (e.g. calculating the grid)? Otherwise, if it gets called in every frame, that's probably enough for analysis. It's a small thing but I wouldn't expect just creating this analysis to be side-effecting. Otherwise you could not modify coordinates in-place; `wrap(inplace=True)` is default, but you could use the values returned from `wrap(inplace=False)`. That could be handy if the user has loaded their trajectory into memory.\r\n\r\n```python\r\n>>> import MDAnalysis as mda\r\n>>> from membrane_curvature.base import MembraneCurvature\r\n>>> from MDAnalysis.tests.datafiles import TPR, GRO\r\n>>> u = mda.Universe(TPR, GRO)\r\n>>> u.atoms.positions = u.atoms.positions - 60\r\n>>> u.atoms.positions\r\narray([[ -7.9799995, -16.440002 , -28.45     ],\r\n       [ -8.810001 , -15.890003 , -28.28     ],\r\n       [ -8.449997 , -17.169998 , -28.96     ],\r\n       ...,\r\n       [ 45.340004 ,  14.07     , -19.010002 ],\r\n       [ -2.3199997, -24.68     , -45.2      ],\r\n       [  2.959999 , -12.760002 , -56.25     ]], dtype=float32)\r\n>>> curvature = MembraneCurvature(u)\r\n[80.017006 80.017006 80.01703  60.00001  60.00001  90.      ]  # <-- the extra print!\r\n>>> u.atoms.positions  # these have changed just from creating the analysis\r\narray([[32.0285    , 23.568497  , 28.130604  ],\r\n       [31.198498  , 24.118496  , 28.300604  ],\r\n       [31.558502  , 22.838501  , 27.620605  ],\r\n       ...,\r\n       [85.3485    , 54.0785    , 37.570602  ],\r\n       [37.6885    , 15.328499  , 11.380604  ],\r\n       [42.9685    , 27.248497  ,  0.33060455]], dtype=float32)\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2021, 8, 1, 19, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680557817, 'comment_body': 'Instead of printing the error message, could you please warn instead?', 'comment_created': datetime.datetime(2021, 8, 1, 19, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680558035, 'comment_body': ""I don't think you use or need this."", 'comment_created': datetime.datetime(2021, 8, 1, 19, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680558132, 'comment_body': 'Thanks for the picture, they take effort to put together but make it *so* much easier to understand!', 'comment_created': datetime.datetime(2021, 8, 1, 19, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680558751, 'comment_body': ""I'm not sure this corresponds to the picture (assuming it goes 1 to 9). Shouldn't 1 wrap from `[300, 0, 110]` to `[0, 0, 110]`? If so, I don't understand how either the unwrapped or wrapped version of atom 1 is in the center of the bottom row?\r\n\r\n```python\r\n>>> import MDAnalysis as mda\r\n>>> import numpy as np\r\n>>> a = np.array([[300., 0., 110.], [100., 0., 150.], [200., 0., 150.],\r\n...               [0., 100., 150.], [100., 100., 150.], [-100., 100., 150.],\r\n...               [300., 200., 110.], [100., 200., 150.], [200., 200., 150.]])\r\n>>> u = mda.Universe(a, n_atoms=9)\r\n>>> u.dimensions = [300, 300, 300, 90, 90, 90]\r\n>>> ag2 = u.atoms.wrap(inplace=False)\r\n>>> ag2\r\narray([[  0.,   0., 110.],\r\n       [100.,   0., 150.],\r\n       [200.,   0., 150.],\r\n       [  0., 100., 150.],\r\n       [100., 100., 150.],\r\n       [200., 100., 150.],\r\n       [  0., 200., 110.],\r\n       [100., 200., 150.],\r\n       [200., 200., 150.]], dtype=float32)\r\n```"", 'comment_created': datetime.datetime(2021, 8, 1, 20, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680559156, 'comment_body': ""The 300s will convert to 0 unless you change the bounds to 300.01 or similar, so I don't think it'll be equivalent? Also, suggestion: would `dummy_universe_unwrapped_xy` be better, because this is *not* wrapped?"", 'comment_created': datetime.datetime(2021, 8, 1, 20, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680560213, 'comment_body': ""Why are the nans now in the 3rd row and column? Should it not be like the 4x4 grid but with nans in the extra rows and columns? I'm not sure that this is the answer we'd want to get for the surface."", 'comment_created': datetime.datetime(2021, 8, 1, 20, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680560734, 'comment_body': 'If all of these unwrap to the same coordinates, I think just the tests you already have above for the surface are enough for the x-y and you could delete the ones here. The z-unwrapping is a good thought though!', 'comment_created': datetime.datetime(2021, 8, 1, 20, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680561095, 'comment_body': 'Seeing as you repeat the same analysis over and over, a fixture might be a good choice to save time.\r\n\r\n```python\r\n@pytest.fixture()\r\ndef wrapped_curvature_of_unwrapped_universe(universe_dummy_wrap):\r\n\treturn MembraneCurvature(universe_dummy_wrap,\r\n                               n_x_bins=3,\r\n                               n_y_bins=3).run()\r\n\r\ndef test_analysis_mean_wrap(self, wrapped_curvature_of_unwrapped_universe, dummy_surface):\r\n\tavg_mean = wrapped_curvature_of_unwrapped_universe.results.average_mean\r\n    expected_mean = mean_curvature(dummy_surface)\r\n    assert_almost_equal(avg_mean, expected_mean)\r\n```', 'comment_created': datetime.datetime(2021, 8, 1, 20, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680561189, 'comment_body': ""I'm not quite sure what this does that `universe_dummy_wrap` does not, actually, since `universe_dummy_wrap` also wraps to different coordinates?"", 'comment_created': datetime.datetime(2021, 8, 1, 20, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680561458, 'comment_body': 'If you warn you can also add a test that it happens!', 'comment_created': datetime.datetime(2021, 8, 1, 20, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 681142595, 'comment_body': 'Yes, the indexes in the picture were not accurate. Updated.', 'comment_created': datetime.datetime(2021, 8, 2, 17, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 681143472, 'comment_body': ""Sorry if I wasn't clear. Both universes are unwrapped. When they wrap, they are equivalent. Then there is a test where we can check that coordinates wrap correctly in x, and another separate that wraps correctly in x and y.\r\n```\r\nimport MDAnalysis as mda\r\nimport numpy as np\r\n\r\narray_x = np.array([[300., 0., 110.], [100., 0., 150.], [200., 0., 150.],\r\n              [0., 100., 150.], [100., 100., 150.], [-100., 100., 150.],\r\n              [300., 200., 110.], [100., 200., 150.], [200., 200., 150.]])\r\n\r\nu = mda.Universe(array_x, n_atoms=9)\r\nu.dimensions = [300, 300, 300,  90., 90., 90.]\r\nag2 = u.atoms.wrap()\r\nag2\r\narray([[  0.,   0., 110.],\r\n       [100.,   0., 150.],\r\n       [200.,   0., 150.],\r\n       [  0., 100., 150.],\r\n       [100., 100., 150.],\r\n       [200., 100., 150.],\r\n       [  0., 200., 110.],\r\n       [100., 200., 150.],\r\n       [200., 200., 150.]], dtype=float32)\r\n```\r\nand\r\n \r\n```\r\narray_xy = np.array([[300., 0., 110.], [100., 0., 150.], [200., 0., 150.],\r\n              [0., -200., 150.], [100., -200., 150.], [-100., 100., 150.],\r\n              [300., 200., 110.], [100., 200., 150.], [200., 200., 150.]])\r\n\r\nu = mda.Universe(array_xy, n_atoms=9)\r\nu.dimensions = [300, 300, 300,  90., 90., 90.]\r\nag2_xy = u.atoms.wrap()\r\nag2_xy\r\n\r\nag2_x == ag2_xy\r\narray([[ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True]])\r\n```\r\nIf that's ok, I'd prefer to keep both cases. I think it's clearer. In the first case, only atoms are out of bounds in the x coordinate, while in the second atoms are out of bounds in x and y. \r\n"", 'comment_created': datetime.datetime(2021, 8, 2, 17, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 681144219, 'comment_body': ""Ok, thanks. I'll leave z coordinates."", 'comment_created': datetime.datetime(2021, 8, 2, 17, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 681182842, 'comment_body': 'You could use the `curvature_unwrapped_universe_xy` fixture here too, right? (the line after)', 'comment_created': datetime.datetime(2021, 8, 2, 18, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 681187061, 'comment_body': 'Ah, I forgot that xrange and yrange defaulted to the universe dimensions. Never mind.', 'comment_created': datetime.datetime(2021, 8, 2, 18, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 681203957, 'comment_body': 'This test runs with the grofile with 9 particles (`GRO_PO4_SMALL`). In the file, the 9 particles in the system are distributed like this:\r\n```\r\n   +-----------+\r\n   | 7 | 8 | 9 | \r\n   +-----------+\r\n   | 4 | 5 | 6 |\r\n   +-----------+\r\n   | 1 | 2 | 3 | \r\n   +-----------+\r\n```\r\n, where atoms 1-4 have `z=150`, and atoms 5-9 have `z=120`. \r\nThen, when we divide the same grid into 4 bins, we have that each bin covers a region of 0.75\r\n\r\n```\r\n  y = 3+---------------+\r\n       | x | x | x | x | \r\n       +---------------+\r\n       | 7 | 8 | 9 | x | \r\n       +---------------+\r\n       | 4 | 5 | 6 | x | \r\n       +---------------+\r\n       | 1 | 2 | 3 | x |\r\n y = 0 +---------------+\r\n      +---|---|---|----+ \r\n       x=0             x=3\r\n```\r\nWith 5 bins, we have that each bin covers a region of 0.6. \r\nAtom 3= [ 20.,   0., 150.], --> `1.8 < x < 2.4`, `0. < y < 0.6`,\r\nAtom 6= [ 20.,   10., 150.], --> `1.8 < x < 2.4`, `0.6 < y < 1.2`\r\nAtom 7 = [  0.,  20., 120.], --> `0. < x < 0.6`, `1.8 < y < 2.4`\r\nAtom 8=  [ 10.,  20., 120.], --> `0.6 < x < 1.2`, `1.8 < y < 2.4`\r\nAtom 9 = [ 20.,  20., 120.] --> `1.8 < x < 2.4`, `1.8 < y < 2.4`\r\nthen all the space between `1.8 < x < 2.4` and 1.8 < y < 2.4` is empty.\r\n```\r\ny=3 +-------------------+\r\n    | x | x | x | x | x | \r\n2.4 +-------------------+\r\n    | 7 | 8 | x | 9 | x | \r\n1.8 +-------------------+\r\n    | x | x | x | x | x |\r\n1.2 +-------------------+\r\n    | 4 | 5 | x | 6 | x |\r\n0.6 +-------------------+\r\n    | 1 | 2 | x | 3 | x |\r\ny=0 +-------------------+\r\n    +---|---|---|---|---+ \r\n   x=0 0.6 1.2 1.8 2.4 x=3\r\n```\r\nThis is why the 3rd row and column of nans. Sorry it took forever to answer.', 'comment_created': datetime.datetime(2021, 8, 2, 19, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 681204535, 'comment_body': 'Oh, yeah, I missed that, thanks!', 'comment_created': datetime.datetime(2021, 8, 2, 19, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}]","[{'commit_sha': 'efc208e0f1de83790fb4ed4c6e0f2a5314e29402', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b3e26a317745d83b199ddfaa5e61b25ce14be95d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '070a5e46725273313007c24e6a635c3179579077', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'de7191ebef5069a6515e78653879f38f2dce0341', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ec114889918c9c9625e70207f554a8eeba999aa5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1ee79e94df44de464832734874a0643c01fec124', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ccacd8fccbbc19800dfff564f4d4e5b96cf7ce17', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f3c046af1bcfeb1561cf4217c82d1a6af52a6658', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f950a5dc344f2559917869ce5b28ab5776a073f3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bfe5f9e11bce36e875c0961e7ef27fc5f9d0bdfb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4f3e4d7cbcb1b71590f219a96d71ed87aae87419', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4aa405c00b9d25c6cc1e8096e0edb3b607ebad66', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
691802580,Add coordinate wrapping ,"In this PR I added PBC conditions. Changes in this PR fix #36 and possibly #22 

- [x] `self.ag.wrap()` added to`__init__` and ` _single_frame`.
- [x] Added tests for coordinate wrapping, including negative coordinates in x, y, and z, as suggested in #22 
- [x] Since PBC has an effect on the overall results, respective tests for `results.z_surface` and `results.mean` were updated.
- [x] I am not sure mentors would be interested in keeping previous tests, so I didn't delete but marked them as `xfail(reason=""PBC conditions not applied."")`  (See line 276 is `tests_membrane_curvature.py`.

@orbeckst @lilyminium @IAlibay are there any other relevant tests I am missing here?
Thanks
",True,48,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/48,https://github.com/MDAnalysis/membrane-curvature/pull/48,closed,316,16,5,12,13,38,0,0,[],2021-07-17 00:28:41+00:00,2021-08-02 21:32:05+00:00,1458204.0,"16 days, 21:03:24","[{'comment_id': 671585561, 'comment_body': 'Any reason for the more verbose `is True` check here vs. conventional `if self.pbc:`? You do that as expected below, for example.', 'comment_created': datetime.datetime(2021, 7, 17, 1, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 671586741, 'comment_body': 'Thanks for your comment. No, not really, I just learned from PEP8 the way you suggest is the best one. :)', 'comment_created': datetime.datetime(2021, 7, 17, 1, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 671669259, 'comment_body': ""This isn't being used as far as I can see? The wrap method on AtomGroups requires no import."", 'comment_created': datetime.datetime(2021, 7, 17, 10, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 678454986, 'comment_body': ""I'd clarify what this means.  This will pack all the particles into the primary unit cell before processing them further right?"", 'comment_created': datetime.datetime(2021, 7, 28, 16, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 678508702, 'comment_body': ""Yes, correct, it's to keep all articles in the primary unit cell. I'll update this. Thanks."", 'comment_created': datetime.datetime(2021, 7, 28, 17, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 678530641, 'comment_body': 'ALso send to logger.warning', 'comment_created': datetime.datetime(2021, 7, 28, 17, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 680103393, 'comment_body': 'Can you please add in something about ignoring this warning if the trajectory is processed to rotate -- otherwise, people who are following the directions and not using `wrap=True` will be unnecessarily alarmed.', 'comment_created': datetime.datetime(2021, 7, 30, 17, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680103892, 'comment_body': ""Can this be a little more fine-grained -- do many engines unwrap atoms in raw trajectories? If the trajectory is raw, it's usually more likely that the atoms are already in the unit cell, right? Could you mention translation vs rotation?"", 'comment_created': datetime.datetime(2021, 7, 30, 17, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680104163, 'comment_body': ""What's this for?"", 'comment_created': datetime.datetime(2021, 7, 30, 17, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680105665, 'comment_body': 'Instead of deleting this test and replacing it with the  new one, could you please keep both tests for `wrap=True` and `wrap=False`?', 'comment_created': datetime.datetime(2021, 7, 30, 17, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680228522, 'comment_body': 'Sorry, I have no idea how that line ended up there. ', 'comment_created': datetime.datetime(2021, 7, 30, 21, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680267847, 'comment_body': 'Ok, I added a test for both. Thanks for this. :)', 'comment_created': datetime.datetime(2021, 7, 30, 23, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680270555, 'comment_body': ""I'm sorry for not noticing this before. The fact that the box has `u.dimension[2]=30 A` (or 3nm), made the tests in lines 303 and 315 fail. Since 120 is a multiple of 30, the `derived_surface` was zero and therefore, everything else was zero.  Hope it makes sense. "", 'comment_created': datetime.datetime(2021, 7, 30, 23, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680271329, 'comment_body': 'I deleted the trajectory for now since I would need to create a new trajectory test with `u.dimensions[2]=30`. Skipping the trajectory the tests pass. ', 'comment_created': datetime.datetime(2021, 7, 30, 23, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680272489, 'comment_body': 'I changed the lines a bit. Happy to received suggestions for the pushed changes.', 'comment_created': datetime.datetime(2021, 7, 30, 23, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680275978, 'comment_body': ""```suggestion\r\n                               wrap=False).run()\r\n```\r\n\r\nThis string will still evaluate truthily, i.e. wrapping is still turned on. So, it's hard for this test to evaluate whether `wrap=False` is working. Switching to a new universe (maybe with dummy coordinates if that's easiest) where `wrap=True` and `wrap=False` give you different results might be the best way?"", 'comment_created': datetime.datetime(2021, 7, 31, 0, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680276207, 'comment_body': ""Ah, thanks for that explanation, I wouldn't have known where to look otherwise!"", 'comment_created': datetime.datetime(2021, 7, 31, 0, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680292229, 'comment_body': 'Sorry about that and thanks for spotting it.', 'comment_created': datetime.datetime(2021, 7, 31, 2, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680425288, 'comment_body': 'without this condition, negative indexes will pass regardless because Python returns the i-th element `(-1, 0) = (i, 0)`. So previously, all the negative indexes were in fact passed. ', 'comment_created': datetime.datetime(2021, 8, 1, 0, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680555984, 'comment_body': 'Superfluous print?', 'comment_created': datetime.datetime(2021, 8, 1, 19, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680557425, 'comment_body': ""Does this need to happen in `__init__`? Does it affect any part of the set-up in `_prepare` (e.g. calculating the grid)? Otherwise, if it gets called in every frame, that's probably enough for analysis. It's a small thing but I wouldn't expect just creating this analysis to be side-effecting. Otherwise you could not modify coordinates in-place; `wrap(inplace=True)` is default, but you could use the values returned from `wrap(inplace=False)`. That could be handy if the user has loaded their trajectory into memory.\r\n\r\n```python\r\n>>> import MDAnalysis as mda\r\n>>> from membrane_curvature.base import MembraneCurvature\r\n>>> from MDAnalysis.tests.datafiles import TPR, GRO\r\n>>> u = mda.Universe(TPR, GRO)\r\n>>> u.atoms.positions = u.atoms.positions - 60\r\n>>> u.atoms.positions\r\narray([[ -7.9799995, -16.440002 , -28.45     ],\r\n       [ -8.810001 , -15.890003 , -28.28     ],\r\n       [ -8.449997 , -17.169998 , -28.96     ],\r\n       ...,\r\n       [ 45.340004 ,  14.07     , -19.010002 ],\r\n       [ -2.3199997, -24.68     , -45.2      ],\r\n       [  2.959999 , -12.760002 , -56.25     ]], dtype=float32)\r\n>>> curvature = MembraneCurvature(u)\r\n[80.017006 80.017006 80.01703  60.00001  60.00001  90.      ]  # <-- the extra print!\r\n>>> u.atoms.positions  # these have changed just from creating the analysis\r\narray([[32.0285    , 23.568497  , 28.130604  ],\r\n       [31.198498  , 24.118496  , 28.300604  ],\r\n       [31.558502  , 22.838501  , 27.620605  ],\r\n       ...,\r\n       [85.3485    , 54.0785    , 37.570602  ],\r\n       [37.6885    , 15.328499  , 11.380604  ],\r\n       [42.9685    , 27.248497  ,  0.33060455]], dtype=float32)\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2021, 8, 1, 19, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680557817, 'comment_body': 'Instead of printing the error message, could you please warn instead?', 'comment_created': datetime.datetime(2021, 8, 1, 19, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680558035, 'comment_body': ""I don't think you use or need this."", 'comment_created': datetime.datetime(2021, 8, 1, 19, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680558132, 'comment_body': 'Thanks for the picture, they take effort to put together but make it *so* much easier to understand!', 'comment_created': datetime.datetime(2021, 8, 1, 19, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680558751, 'comment_body': ""I'm not sure this corresponds to the picture (assuming it goes 1 to 9). Shouldn't 1 wrap from `[300, 0, 110]` to `[0, 0, 110]`? If so, I don't understand how either the unwrapped or wrapped version of atom 1 is in the center of the bottom row?\r\n\r\n```python\r\n>>> import MDAnalysis as mda\r\n>>> import numpy as np\r\n>>> a = np.array([[300., 0., 110.], [100., 0., 150.], [200., 0., 150.],\r\n...               [0., 100., 150.], [100., 100., 150.], [-100., 100., 150.],\r\n...               [300., 200., 110.], [100., 200., 150.], [200., 200., 150.]])\r\n>>> u = mda.Universe(a, n_atoms=9)\r\n>>> u.dimensions = [300, 300, 300, 90, 90, 90]\r\n>>> ag2 = u.atoms.wrap(inplace=False)\r\n>>> ag2\r\narray([[  0.,   0., 110.],\r\n       [100.,   0., 150.],\r\n       [200.,   0., 150.],\r\n       [  0., 100., 150.],\r\n       [100., 100., 150.],\r\n       [200., 100., 150.],\r\n       [  0., 200., 110.],\r\n       [100., 200., 150.],\r\n       [200., 200., 150.]], dtype=float32)\r\n```"", 'comment_created': datetime.datetime(2021, 8, 1, 20, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680559156, 'comment_body': ""The 300s will convert to 0 unless you change the bounds to 300.01 or similar, so I don't think it'll be equivalent? Also, suggestion: would `dummy_universe_unwrapped_xy` be better, because this is *not* wrapped?"", 'comment_created': datetime.datetime(2021, 8, 1, 20, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680560213, 'comment_body': ""Why are the nans now in the 3rd row and column? Should it not be like the 4x4 grid but with nans in the extra rows and columns? I'm not sure that this is the answer we'd want to get for the surface."", 'comment_created': datetime.datetime(2021, 8, 1, 20, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680560734, 'comment_body': 'If all of these unwrap to the same coordinates, I think just the tests you already have above for the surface are enough for the x-y and you could delete the ones here. The z-unwrapping is a good thought though!', 'comment_created': datetime.datetime(2021, 8, 1, 20, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680561095, 'comment_body': 'Seeing as you repeat the same analysis over and over, a fixture might be a good choice to save time.\r\n\r\n```python\r\n@pytest.fixture()\r\ndef wrapped_curvature_of_unwrapped_universe(universe_dummy_wrap):\r\n\treturn MembraneCurvature(universe_dummy_wrap,\r\n                               n_x_bins=3,\r\n                               n_y_bins=3).run()\r\n\r\ndef test_analysis_mean_wrap(self, wrapped_curvature_of_unwrapped_universe, dummy_surface):\r\n\tavg_mean = wrapped_curvature_of_unwrapped_universe.results.average_mean\r\n    expected_mean = mean_curvature(dummy_surface)\r\n    assert_almost_equal(avg_mean, expected_mean)\r\n```', 'comment_created': datetime.datetime(2021, 8, 1, 20, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680561189, 'comment_body': ""I'm not quite sure what this does that `universe_dummy_wrap` does not, actually, since `universe_dummy_wrap` also wraps to different coordinates?"", 'comment_created': datetime.datetime(2021, 8, 1, 20, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680561458, 'comment_body': 'If you warn you can also add a test that it happens!', 'comment_created': datetime.datetime(2021, 8, 1, 20, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 681142595, 'comment_body': 'Yes, the indexes in the picture were not accurate. Updated.', 'comment_created': datetime.datetime(2021, 8, 2, 17, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 681143472, 'comment_body': ""Sorry if I wasn't clear. Both universes are unwrapped. When they wrap, they are equivalent. Then there is a test where we can check that coordinates wrap correctly in x, and another separate that wraps correctly in x and y.\r\n```\r\nimport MDAnalysis as mda\r\nimport numpy as np\r\n\r\narray_x = np.array([[300., 0., 110.], [100., 0., 150.], [200., 0., 150.],\r\n              [0., 100., 150.], [100., 100., 150.], [-100., 100., 150.],\r\n              [300., 200., 110.], [100., 200., 150.], [200., 200., 150.]])\r\n\r\nu = mda.Universe(array_x, n_atoms=9)\r\nu.dimensions = [300, 300, 300,  90., 90., 90.]\r\nag2 = u.atoms.wrap()\r\nag2\r\narray([[  0.,   0., 110.],\r\n       [100.,   0., 150.],\r\n       [200.,   0., 150.],\r\n       [  0., 100., 150.],\r\n       [100., 100., 150.],\r\n       [200., 100., 150.],\r\n       [  0., 200., 110.],\r\n       [100., 200., 150.],\r\n       [200., 200., 150.]], dtype=float32)\r\n```\r\nand\r\n \r\n```\r\narray_xy = np.array([[300., 0., 110.], [100., 0., 150.], [200., 0., 150.],\r\n              [0., -200., 150.], [100., -200., 150.], [-100., 100., 150.],\r\n              [300., 200., 110.], [100., 200., 150.], [200., 200., 150.]])\r\n\r\nu = mda.Universe(array_xy, n_atoms=9)\r\nu.dimensions = [300, 300, 300,  90., 90., 90.]\r\nag2_xy = u.atoms.wrap()\r\nag2_xy\r\n\r\nag2_x == ag2_xy\r\narray([[ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True]])\r\n```\r\nIf that's ok, I'd prefer to keep both cases. I think it's clearer. In the first case, only atoms are out of bounds in the x coordinate, while in the second atoms are out of bounds in x and y. \r\n"", 'comment_created': datetime.datetime(2021, 8, 2, 17, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 681144219, 'comment_body': ""Ok, thanks. I'll leave z coordinates."", 'comment_created': datetime.datetime(2021, 8, 2, 17, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 681182842, 'comment_body': 'You could use the `curvature_unwrapped_universe_xy` fixture here too, right? (the line after)', 'comment_created': datetime.datetime(2021, 8, 2, 18, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 681187061, 'comment_body': 'Ah, I forgot that xrange and yrange defaulted to the universe dimensions. Never mind.', 'comment_created': datetime.datetime(2021, 8, 2, 18, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 681203957, 'comment_body': 'This test runs with the grofile with 9 particles (`GRO_PO4_SMALL`). In the file, the 9 particles in the system are distributed like this:\r\n```\r\n   +-----------+\r\n   | 7 | 8 | 9 | \r\n   +-----------+\r\n   | 4 | 5 | 6 |\r\n   +-----------+\r\n   | 1 | 2 | 3 | \r\n   +-----------+\r\n```\r\n, where atoms 1-4 have `z=150`, and atoms 5-9 have `z=120`. \r\nThen, when we divide the same grid into 4 bins, we have that each bin covers a region of 0.75\r\n\r\n```\r\n  y = 3+---------------+\r\n       | x | x | x | x | \r\n       +---------------+\r\n       | 7 | 8 | 9 | x | \r\n       +---------------+\r\n       | 4 | 5 | 6 | x | \r\n       +---------------+\r\n       | 1 | 2 | 3 | x |\r\n y = 0 +---------------+\r\n      +---|---|---|----+ \r\n       x=0             x=3\r\n```\r\nWith 5 bins, we have that each bin covers a region of 0.6. \r\nAtom 3= [ 20.,   0., 150.], --> `1.8 < x < 2.4`, `0. < y < 0.6`,\r\nAtom 6= [ 20.,   10., 150.], --> `1.8 < x < 2.4`, `0.6 < y < 1.2`\r\nAtom 7 = [  0.,  20., 120.], --> `0. < x < 0.6`, `1.8 < y < 2.4`\r\nAtom 8=  [ 10.,  20., 120.], --> `0.6 < x < 1.2`, `1.8 < y < 2.4`\r\nAtom 9 = [ 20.,  20., 120.] --> `1.8 < x < 2.4`, `1.8 < y < 2.4`\r\nthen all the space between `1.8 < x < 2.4` and 1.8 < y < 2.4` is empty.\r\n```\r\ny=3 +-------------------+\r\n    | x | x | x | x | x | \r\n2.4 +-------------------+\r\n    | 7 | 8 | x | 9 | x | \r\n1.8 +-------------------+\r\n    | x | x | x | x | x |\r\n1.2 +-------------------+\r\n    | 4 | 5 | x | 6 | x |\r\n0.6 +-------------------+\r\n    | 1 | 2 | x | 3 | x |\r\ny=0 +-------------------+\r\n    +---|---|---|---|---+ \r\n   x=0 0.6 1.2 1.8 2.4 x=3\r\n```\r\nThis is why the 3rd row and column of nans. Sorry it took forever to answer.', 'comment_created': datetime.datetime(2021, 8, 2, 19, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 681204535, 'comment_body': 'Oh, yeah, I missed that, thanks!', 'comment_created': datetime.datetime(2021, 8, 2, 19, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}]","[{'commit_sha': 'efc208e0f1de83790fb4ed4c6e0f2a5314e29402', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b3e26a317745d83b199ddfaa5e61b25ce14be95d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '070a5e46725273313007c24e6a635c3179579077', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'de7191ebef5069a6515e78653879f38f2dce0341', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ec114889918c9c9625e70207f554a8eeba999aa5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1ee79e94df44de464832734874a0643c01fec124', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ccacd8fccbbc19800dfff564f4d4e5b96cf7ce17', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f3c046af1bcfeb1561cf4217c82d1a6af52a6658', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f950a5dc344f2559917869ce5b28ab5776a073f3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bfe5f9e11bce36e875c0961e7ef27fc5f9d0bdfb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4f3e4d7cbcb1b71590f219a96d71ed87aae87419', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4aa405c00b9d25c6cc1e8096e0edb3b607ebad66', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
691802580,Add coordinate wrapping ,"In this PR I added PBC conditions. Changes in this PR fix #36 and possibly #22 

- [x] `self.ag.wrap()` added to`__init__` and ` _single_frame`.
- [x] Added tests for coordinate wrapping, including negative coordinates in x, y, and z, as suggested in #22 
- [x] Since PBC has an effect on the overall results, respective tests for `results.z_surface` and `results.mean` were updated.
- [x] I am not sure mentors would be interested in keeping previous tests, so I didn't delete but marked them as `xfail(reason=""PBC conditions not applied."")`  (See line 276 is `tests_membrane_curvature.py`.

@orbeckst @lilyminium @IAlibay are there any other relevant tests I am missing here?
Thanks
",True,48,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/48,https://github.com/MDAnalysis/membrane-curvature/pull/48,closed,316,16,5,12,13,38,0,0,[],2021-07-17 00:28:41+00:00,2021-08-02 21:32:05+00:00,1458204.0,"16 days, 21:03:24","[{'comment_id': 671585561, 'comment_body': 'Any reason for the more verbose `is True` check here vs. conventional `if self.pbc:`? You do that as expected below, for example.', 'comment_created': datetime.datetime(2021, 7, 17, 1, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 671586741, 'comment_body': 'Thanks for your comment. No, not really, I just learned from PEP8 the way you suggest is the best one. :)', 'comment_created': datetime.datetime(2021, 7, 17, 1, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 671669259, 'comment_body': ""This isn't being used as far as I can see? The wrap method on AtomGroups requires no import."", 'comment_created': datetime.datetime(2021, 7, 17, 10, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 678454986, 'comment_body': ""I'd clarify what this means.  This will pack all the particles into the primary unit cell before processing them further right?"", 'comment_created': datetime.datetime(2021, 7, 28, 16, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 678508702, 'comment_body': ""Yes, correct, it's to keep all articles in the primary unit cell. I'll update this. Thanks."", 'comment_created': datetime.datetime(2021, 7, 28, 17, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 678530641, 'comment_body': 'ALso send to logger.warning', 'comment_created': datetime.datetime(2021, 7, 28, 17, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 680103393, 'comment_body': 'Can you please add in something about ignoring this warning if the trajectory is processed to rotate -- otherwise, people who are following the directions and not using `wrap=True` will be unnecessarily alarmed.', 'comment_created': datetime.datetime(2021, 7, 30, 17, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680103892, 'comment_body': ""Can this be a little more fine-grained -- do many engines unwrap atoms in raw trajectories? If the trajectory is raw, it's usually more likely that the atoms are already in the unit cell, right? Could you mention translation vs rotation?"", 'comment_created': datetime.datetime(2021, 7, 30, 17, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680104163, 'comment_body': ""What's this for?"", 'comment_created': datetime.datetime(2021, 7, 30, 17, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680105665, 'comment_body': 'Instead of deleting this test and replacing it with the  new one, could you please keep both tests for `wrap=True` and `wrap=False`?', 'comment_created': datetime.datetime(2021, 7, 30, 17, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680228522, 'comment_body': 'Sorry, I have no idea how that line ended up there. ', 'comment_created': datetime.datetime(2021, 7, 30, 21, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680267847, 'comment_body': 'Ok, I added a test for both. Thanks for this. :)', 'comment_created': datetime.datetime(2021, 7, 30, 23, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680270555, 'comment_body': ""I'm sorry for not noticing this before. The fact that the box has `u.dimension[2]=30 A` (or 3nm), made the tests in lines 303 and 315 fail. Since 120 is a multiple of 30, the `derived_surface` was zero and therefore, everything else was zero.  Hope it makes sense. "", 'comment_created': datetime.datetime(2021, 7, 30, 23, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680271329, 'comment_body': 'I deleted the trajectory for now since I would need to create a new trajectory test with `u.dimensions[2]=30`. Skipping the trajectory the tests pass. ', 'comment_created': datetime.datetime(2021, 7, 30, 23, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680272489, 'comment_body': 'I changed the lines a bit. Happy to received suggestions for the pushed changes.', 'comment_created': datetime.datetime(2021, 7, 30, 23, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680275978, 'comment_body': ""```suggestion\r\n                               wrap=False).run()\r\n```\r\n\r\nThis string will still evaluate truthily, i.e. wrapping is still turned on. So, it's hard for this test to evaluate whether `wrap=False` is working. Switching to a new universe (maybe with dummy coordinates if that's easiest) where `wrap=True` and `wrap=False` give you different results might be the best way?"", 'comment_created': datetime.datetime(2021, 7, 31, 0, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680276207, 'comment_body': ""Ah, thanks for that explanation, I wouldn't have known where to look otherwise!"", 'comment_created': datetime.datetime(2021, 7, 31, 0, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680292229, 'comment_body': 'Sorry about that and thanks for spotting it.', 'comment_created': datetime.datetime(2021, 7, 31, 2, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680425288, 'comment_body': 'without this condition, negative indexes will pass regardless because Python returns the i-th element `(-1, 0) = (i, 0)`. So previously, all the negative indexes were in fact passed. ', 'comment_created': datetime.datetime(2021, 8, 1, 0, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 680555984, 'comment_body': 'Superfluous print?', 'comment_created': datetime.datetime(2021, 8, 1, 19, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680557425, 'comment_body': ""Does this need to happen in `__init__`? Does it affect any part of the set-up in `_prepare` (e.g. calculating the grid)? Otherwise, if it gets called in every frame, that's probably enough for analysis. It's a small thing but I wouldn't expect just creating this analysis to be side-effecting. Otherwise you could not modify coordinates in-place; `wrap(inplace=True)` is default, but you could use the values returned from `wrap(inplace=False)`. That could be handy if the user has loaded their trajectory into memory.\r\n\r\n```python\r\n>>> import MDAnalysis as mda\r\n>>> from membrane_curvature.base import MembraneCurvature\r\n>>> from MDAnalysis.tests.datafiles import TPR, GRO\r\n>>> u = mda.Universe(TPR, GRO)\r\n>>> u.atoms.positions = u.atoms.positions - 60\r\n>>> u.atoms.positions\r\narray([[ -7.9799995, -16.440002 , -28.45     ],\r\n       [ -8.810001 , -15.890003 , -28.28     ],\r\n       [ -8.449997 , -17.169998 , -28.96     ],\r\n       ...,\r\n       [ 45.340004 ,  14.07     , -19.010002 ],\r\n       [ -2.3199997, -24.68     , -45.2      ],\r\n       [  2.959999 , -12.760002 , -56.25     ]], dtype=float32)\r\n>>> curvature = MembraneCurvature(u)\r\n[80.017006 80.017006 80.01703  60.00001  60.00001  90.      ]  # <-- the extra print!\r\n>>> u.atoms.positions  # these have changed just from creating the analysis\r\narray([[32.0285    , 23.568497  , 28.130604  ],\r\n       [31.198498  , 24.118496  , 28.300604  ],\r\n       [31.558502  , 22.838501  , 27.620605  ],\r\n       ...,\r\n       [85.3485    , 54.0785    , 37.570602  ],\r\n       [37.6885    , 15.328499  , 11.380604  ],\r\n       [42.9685    , 27.248497  ,  0.33060455]], dtype=float32)\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2021, 8, 1, 19, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680557817, 'comment_body': 'Instead of printing the error message, could you please warn instead?', 'comment_created': datetime.datetime(2021, 8, 1, 19, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680558035, 'comment_body': ""I don't think you use or need this."", 'comment_created': datetime.datetime(2021, 8, 1, 19, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680558132, 'comment_body': 'Thanks for the picture, they take effort to put together but make it *so* much easier to understand!', 'comment_created': datetime.datetime(2021, 8, 1, 19, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680558751, 'comment_body': ""I'm not sure this corresponds to the picture (assuming it goes 1 to 9). Shouldn't 1 wrap from `[300, 0, 110]` to `[0, 0, 110]`? If so, I don't understand how either the unwrapped or wrapped version of atom 1 is in the center of the bottom row?\r\n\r\n```python\r\n>>> import MDAnalysis as mda\r\n>>> import numpy as np\r\n>>> a = np.array([[300., 0., 110.], [100., 0., 150.], [200., 0., 150.],\r\n...               [0., 100., 150.], [100., 100., 150.], [-100., 100., 150.],\r\n...               [300., 200., 110.], [100., 200., 150.], [200., 200., 150.]])\r\n>>> u = mda.Universe(a, n_atoms=9)\r\n>>> u.dimensions = [300, 300, 300, 90, 90, 90]\r\n>>> ag2 = u.atoms.wrap(inplace=False)\r\n>>> ag2\r\narray([[  0.,   0., 110.],\r\n       [100.,   0., 150.],\r\n       [200.,   0., 150.],\r\n       [  0., 100., 150.],\r\n       [100., 100., 150.],\r\n       [200., 100., 150.],\r\n       [  0., 200., 110.],\r\n       [100., 200., 150.],\r\n       [200., 200., 150.]], dtype=float32)\r\n```"", 'comment_created': datetime.datetime(2021, 8, 1, 20, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680559156, 'comment_body': ""The 300s will convert to 0 unless you change the bounds to 300.01 or similar, so I don't think it'll be equivalent? Also, suggestion: would `dummy_universe_unwrapped_xy` be better, because this is *not* wrapped?"", 'comment_created': datetime.datetime(2021, 8, 1, 20, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680560213, 'comment_body': ""Why are the nans now in the 3rd row and column? Should it not be like the 4x4 grid but with nans in the extra rows and columns? I'm not sure that this is the answer we'd want to get for the surface."", 'comment_created': datetime.datetime(2021, 8, 1, 20, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680560734, 'comment_body': 'If all of these unwrap to the same coordinates, I think just the tests you already have above for the surface are enough for the x-y and you could delete the ones here. The z-unwrapping is a good thought though!', 'comment_created': datetime.datetime(2021, 8, 1, 20, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680561095, 'comment_body': 'Seeing as you repeat the same analysis over and over, a fixture might be a good choice to save time.\r\n\r\n```python\r\n@pytest.fixture()\r\ndef wrapped_curvature_of_unwrapped_universe(universe_dummy_wrap):\r\n\treturn MembraneCurvature(universe_dummy_wrap,\r\n                               n_x_bins=3,\r\n                               n_y_bins=3).run()\r\n\r\ndef test_analysis_mean_wrap(self, wrapped_curvature_of_unwrapped_universe, dummy_surface):\r\n\tavg_mean = wrapped_curvature_of_unwrapped_universe.results.average_mean\r\n    expected_mean = mean_curvature(dummy_surface)\r\n    assert_almost_equal(avg_mean, expected_mean)\r\n```', 'comment_created': datetime.datetime(2021, 8, 1, 20, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680561189, 'comment_body': ""I'm not quite sure what this does that `universe_dummy_wrap` does not, actually, since `universe_dummy_wrap` also wraps to different coordinates?"", 'comment_created': datetime.datetime(2021, 8, 1, 20, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 680561458, 'comment_body': 'If you warn you can also add a test that it happens!', 'comment_created': datetime.datetime(2021, 8, 1, 20, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 681142595, 'comment_body': 'Yes, the indexes in the picture were not accurate. Updated.', 'comment_created': datetime.datetime(2021, 8, 2, 17, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 681143472, 'comment_body': ""Sorry if I wasn't clear. Both universes are unwrapped. When they wrap, they are equivalent. Then there is a test where we can check that coordinates wrap correctly in x, and another separate that wraps correctly in x and y.\r\n```\r\nimport MDAnalysis as mda\r\nimport numpy as np\r\n\r\narray_x = np.array([[300., 0., 110.], [100., 0., 150.], [200., 0., 150.],\r\n              [0., 100., 150.], [100., 100., 150.], [-100., 100., 150.],\r\n              [300., 200., 110.], [100., 200., 150.], [200., 200., 150.]])\r\n\r\nu = mda.Universe(array_x, n_atoms=9)\r\nu.dimensions = [300, 300, 300,  90., 90., 90.]\r\nag2 = u.atoms.wrap()\r\nag2\r\narray([[  0.,   0., 110.],\r\n       [100.,   0., 150.],\r\n       [200.,   0., 150.],\r\n       [  0., 100., 150.],\r\n       [100., 100., 150.],\r\n       [200., 100., 150.],\r\n       [  0., 200., 110.],\r\n       [100., 200., 150.],\r\n       [200., 200., 150.]], dtype=float32)\r\n```\r\nand\r\n \r\n```\r\narray_xy = np.array([[300., 0., 110.], [100., 0., 150.], [200., 0., 150.],\r\n              [0., -200., 150.], [100., -200., 150.], [-100., 100., 150.],\r\n              [300., 200., 110.], [100., 200., 150.], [200., 200., 150.]])\r\n\r\nu = mda.Universe(array_xy, n_atoms=9)\r\nu.dimensions = [300, 300, 300,  90., 90., 90.]\r\nag2_xy = u.atoms.wrap()\r\nag2_xy\r\n\r\nag2_x == ag2_xy\r\narray([[ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True],\r\n       [ True,  True,  True]])\r\n```\r\nIf that's ok, I'd prefer to keep both cases. I think it's clearer. In the first case, only atoms are out of bounds in the x coordinate, while in the second atoms are out of bounds in x and y. \r\n"", 'comment_created': datetime.datetime(2021, 8, 2, 17, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 681144219, 'comment_body': ""Ok, thanks. I'll leave z coordinates."", 'comment_created': datetime.datetime(2021, 8, 2, 17, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 681182842, 'comment_body': 'You could use the `curvature_unwrapped_universe_xy` fixture here too, right? (the line after)', 'comment_created': datetime.datetime(2021, 8, 2, 18, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 681187061, 'comment_body': 'Ah, I forgot that xrange and yrange defaulted to the universe dimensions. Never mind.', 'comment_created': datetime.datetime(2021, 8, 2, 18, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 681203957, 'comment_body': 'This test runs with the grofile with 9 particles (`GRO_PO4_SMALL`). In the file, the 9 particles in the system are distributed like this:\r\n```\r\n   +-----------+\r\n   | 7 | 8 | 9 | \r\n   +-----------+\r\n   | 4 | 5 | 6 |\r\n   +-----------+\r\n   | 1 | 2 | 3 | \r\n   +-----------+\r\n```\r\n, where atoms 1-4 have `z=150`, and atoms 5-9 have `z=120`. \r\nThen, when we divide the same grid into 4 bins, we have that each bin covers a region of 0.75\r\n\r\n```\r\n  y = 3+---------------+\r\n       | x | x | x | x | \r\n       +---------------+\r\n       | 7 | 8 | 9 | x | \r\n       +---------------+\r\n       | 4 | 5 | 6 | x | \r\n       +---------------+\r\n       | 1 | 2 | 3 | x |\r\n y = 0 +---------------+\r\n      +---|---|---|----+ \r\n       x=0             x=3\r\n```\r\nWith 5 bins, we have that each bin covers a region of 0.6. \r\nAtom 3= [ 20.,   0., 150.], --> `1.8 < x < 2.4`, `0. < y < 0.6`,\r\nAtom 6= [ 20.,   10., 150.], --> `1.8 < x < 2.4`, `0.6 < y < 1.2`\r\nAtom 7 = [  0.,  20., 120.], --> `0. < x < 0.6`, `1.8 < y < 2.4`\r\nAtom 8=  [ 10.,  20., 120.], --> `0.6 < x < 1.2`, `1.8 < y < 2.4`\r\nAtom 9 = [ 20.,  20., 120.] --> `1.8 < x < 2.4`, `1.8 < y < 2.4`\r\nthen all the space between `1.8 < x < 2.4` and 1.8 < y < 2.4` is empty.\r\n```\r\ny=3 +-------------------+\r\n    | x | x | x | x | x | \r\n2.4 +-------------------+\r\n    | 7 | 8 | x | 9 | x | \r\n1.8 +-------------------+\r\n    | x | x | x | x | x |\r\n1.2 +-------------------+\r\n    | 4 | 5 | x | 6 | x |\r\n0.6 +-------------------+\r\n    | 1 | 2 | x | 3 | x |\r\ny=0 +-------------------+\r\n    +---|---|---|---|---+ \r\n   x=0 0.6 1.2 1.8 2.4 x=3\r\n```\r\nThis is why the 3rd row and column of nans. Sorry it took forever to answer.', 'comment_created': datetime.datetime(2021, 8, 2, 19, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 681204535, 'comment_body': 'Oh, yeah, I missed that, thanks!', 'comment_created': datetime.datetime(2021, 8, 2, 19, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}]","[{'commit_sha': 'efc208e0f1de83790fb4ed4c6e0f2a5314e29402', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b3e26a317745d83b199ddfaa5e61b25ce14be95d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '070a5e46725273313007c24e6a635c3179579077', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'de7191ebef5069a6515e78653879f38f2dce0341', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ec114889918c9c9625e70207f554a8eeba999aa5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1ee79e94df44de464832734874a0643c01fec124', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ccacd8fccbbc19800dfff564f4d4e5b96cf7ce17', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f3c046af1bcfeb1561cf4217c82d1a6af52a6658', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f950a5dc344f2559917869ce5b28ab5776a073f3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bfe5f9e11bce36e875c0961e7ef27fc5f9d0bdfb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4f3e4d7cbcb1b71590f219a96d71ed87aae87419', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4aa405c00b9d25c6cc1e8096e0edb3b607ebad66', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
697553947,Updated API docs,"This is a preliminary version of updated API docs. It may help to fix #56 

This PR includes:
- [x] Updated API docs
- [x] Updated `index.rst`  

`getting_started.rst` is not really ready.

But maybe I can have some review for what I have so far @lilyminium?
Any suggestions are appreciated @orbeckst @IAlibay @fiona-naughton 
",True,57,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/57,https://github.com/MDAnalysis/membrane-curvature/pull/57,closed,174,60,10,8,3,9,0,0,[],2021-07-27 05:45:18+00:00,2021-07-28 05:34:05+00:00,85727.0,23:48:47,"[{'comment_id': 677565947, 'comment_body': 'Broken link. It should be http://github.com/MDAnalysis/membrane-curvature', 'comment_created': datetime.datetime(2021, 7, 27, 15, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 677699293, 'comment_body': 'Actually, use SSL whenever possible: https', 'comment_created': datetime.datetime(2021, 7, 27, 18, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 677702207, 'comment_body': 'As a matter of style I avoid ""this page"" (or ""click here""...). Just start the sentence with ""The MDAnalysis MembraneCurvature tool is ... . To get started using it we\'ll walk you through a simple example."" Or something like that. The heading already gives the information that you\'re on the right page so you don\'t have to be redundant. Rather capitalize on your reader\'s eagerness and attention and (1) convey the information that you want them to keep in mind and (2) hit the ground running.', 'comment_created': datetime.datetime(2021, 7, 27, 18, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 677702444, 'comment_body': 'Move up.\r\n', 'comment_created': datetime.datetime(2021, 7, 27, 18, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 677703776, 'comment_body': 'I would move Curvature and Surface into separate files and include them via the toctree. You coukd have a directory `api` to keep things nicely separated. I am generally more a fan of ""1 module, 1 page"". It also makes linking easier and it just leaves room to grow.', 'comment_created': datetime.datetime(2021, 7, 27, 18, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 677704264, 'comment_body': 'Do you like the ""Welcome to ..."" default from Sphinx? \r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 27, 18, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 677705101, 'comment_body': ""Good that you deleted the technical detail – users don't initially care, it's much more important to answer the questions\r\n\r\n1. What can you do for me?\r\n2. How do I get my job done with the minimal amount of effort?"", 'comment_created': datetime.datetime(2021, 7, 27, 18, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 677705882, 'comment_body': 'I would add the date and version information to the top of the docs together with the minimum version of MDAnalysis required.', 'comment_created': datetime.datetime(2021, 7, 27, 18, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 677876436, 'comment_body': 'Maybe remove this text from the Python doc string and move it to a dedicated reST file where you\r\n1. show a real example with data\r\n2. include actual images\r\n\r\nThat makes the example much more impactful.', 'comment_created': datetime.datetime(2021, 7, 27, 23, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': '6b5612567fca1d4c5d7e6db9d2afa5cd779e376d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e49f921b51a6fec5dd4df9e57a79e639819230c7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3406cc7ada03e02d4eb174b24aee222bd53ac2e2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '675b1012382a76f725ebb1f0cbb23942e979bb9f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'da9da29cb963a10912702e22e8fdfccd487257a2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c7437b3e06d904f7ff7a16f719582486c1edfaab', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e3412b288d39f9bc9ababea7b83aae0131dee615', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f1be0765c7ac649a826196eb7a2639d2f260e800', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
702938599,Updated docs pages,"Changes in this PR fixes #58 

Changes include:

- [x] Updated algorithm page.
- [x] Update Usage page for three cases 
- Membrane-only
- Membrane-protein with posres.
- Membrane-protein with no posres.
- [x] Updated visualization page.

Pending:
- [x] Add real data file to the test suite. 
- [x] Add real plots to the Visualization page.

Question:
I left the usage page as if I were going to use a different test data file for each case. 
- Is it a good idea to add a dataset for each one of the cases I have or better to reuse some MDA tests?

Happy to receive any other suggestions. Thanks!

@lilyminium @orbeckst @IAlibay @fiona-naughton 
",True,62,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/62,https://github.com/MDAnalysis/membrane-curvature/pull/62,closed,17257,59,14,10,6,21,0,0,[],2021-08-04 04:05:07+00:00,2021-08-08 04:23:10+00:00,346683.0,"4 days, 0:18:03","[{'comment_id': 684107288, 'comment_body': '```suggestion\r\nThe first step in the algorithm consists of selecting atoms that will be used as\r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 9, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684107515, 'comment_body': '```suggestion\r\n:class:`~MDAnalysis.core.groups.AtomGroup`. Typically in biological membranes, lipid headgroups are the most\r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 9, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684108022, 'comment_body': '```suggestion\r\ncontained in the MDAnalysis :class:`~MDAnalysis.core.universe.Universe`. The grid comprises ``n_x_bins`` x ``n_y_bins`` number of bins.\r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 9, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684108674, 'comment_body': 'Could you please explain what this means: i.e., the dimensions of the grid will be determined by the size of the box on the first frame.', 'comment_created': datetime.datetime(2021, 8, 6, 9, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684109398, 'comment_body': '```suggestion\r\n``(n_x_bins, n_y_bins)``.\r\n```\r\n\r\nWhat shape do `z_surface`, etc. have? :-)', 'comment_created': datetime.datetime(2021, 8, 6, 9, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684111906, 'comment_body': ""Instead of manually linking to pages, you can use the `intersphinx` extension to do it for you. At the bottom of the `conf.py` file in `docs/`, you can add:\r\n\r\n```\r\nintersphinx_mapping = {'https://docs.python.org/': None,  # optional, if you want to link to PYthon docs\r\n                       'https://docs.mdanalysis.org/stable/': None,\r\n\t\t\t\t\t   'https://matplotlib.org/stable': None,\r\n\t\t\t\t\t   'https://docs.scipy.org/doc/reference/': None,  # scipy\r\n\t\t\t\t\t   'https://docs.scipy.org/doc/numpy/': None,  # if you want to link to numpy docs for interpolation\r\n                       }\r\n```"", 'comment_created': datetime.datetime(2021, 8, 6, 9, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684115944, 'comment_body': 'Could you explain what needs to happen in the preprocessing?', 'comment_created': datetime.datetime(2021, 8, 6, 10, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684116670, 'comment_body': '```suggestion\r\n        curvature_lower_leaflet = MembraneCurvature(universe, \r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 10, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684116933, 'comment_body': ""```suggestion\r\n        \tax.imshow(mc, interpolation='gaussian', cmap='seismic', origin='lower')\r\n```"", 'comment_created': datetime.datetime(2021, 8, 6, 10, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684117201, 'comment_body': 'Similar indentation for the rest of the lines, I suspect', 'comment_created': datetime.datetime(2021, 8, 6, 10, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684120048, 'comment_body': ""I wonder if you could try installing the ``ipython`` [directive](https://matplotlib.org/sampledoc/ipython_directive.html) and getting that to plot this for you. If you choose to do this (up to you), you'd need to:\r\n\r\n* add `ipython` to https://github.com/MDAnalysis/membrane-curvature/blob/main/docs/requirements.yaml \r\n* add `'IPython.sphinxext.ipython_console_highlighting', 'IPython.sphinxext.ipython_directive'` to `extensions` in `conf.py` (see user guide https://github.com/MDAnalysis/UserGuide/blob/e88eeefd93ff982032c880cd270929c8d861e1b7/doc/source/conf.py#L86)\r\n* Rewrite this to start with `.. ipython::` instead of `::`\r\n"", 'comment_created': datetime.datetime(2021, 8, 6, 10, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684121804, 'comment_body': '```suggestion\r\nWith :func:`~matplotlib.pyplot.imshow`, each element of the array is plotted as a square in a matrix \r\n```\r\n\r\nSquiggle ~ means only ""imshow"" is shown.', 'comment_created': datetime.datetime(2021, 8, 6, 10, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684124528, 'comment_body': '```suggestion\r\nYou can use contour plots using :func:`~matplotlib.pyplot.contourf`. With this approach, contour lines\r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 10, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684125205, 'comment_body': '```suggestion\r\nWe suggest using the :func:`scipy.ndimage.gaussian_filter` as in::\r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 10, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684125688, 'comment_body': '```suggestion\r\nWhen plotting using :func:`~matplotlib.pyplot.contourf`, an extra step is required to perform an interpolation. \r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 10, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684126019, 'comment_body': 'You should be able to replace all of these with intersphinx.', 'comment_created': datetime.datetime(2021, 8, 6, 10, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684129158, 'comment_body': '```suggestion\r\ncalculated and stored in :attr:`MembraneCurvature.results.z_surface<membrane_curvature.base.MembraneCurvature.results.z_surface>`.\r\n```\r\n\r\nI can\'t click this; you may need to fully qualify the path. I haven\'t checked the above code but something like that should link to ""membrane_curvature.base.MembraneCurvature.results.z_surface"", but only show ""MembraneCurvature.results.z_surface"" to the reader.', 'comment_created': datetime.datetime(2021, 8, 6, 10, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684359092, 'comment_body': ""Ohhh that's neat! Had no idea about this. Thanks! "", 'comment_created': datetime.datetime(2021, 8, 6, 16, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 684584248, 'comment_body': 'Thanks for showing me this! Looks awesome! :D ', 'comment_created': datetime.datetime(2021, 8, 7, 4, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 684585645, 'comment_body': ""Bruh... this I couldn't fix :( \r\nI tried:\r\n- :attr:`MembraneCurvature.results.z_surface<membrane_curvature.base.MembraneCurvature.results.z_surface>`\r\n- :attr:`MembraneCurvature.results.z_surface<MembraneCurvature.results.z_surface>`\r\n- :attr:`~MembraneCurvature.results.average_z_surface<membrane_curvature.base.MembraneCurvature.results.average_z_surface>`\r\n\r\nNone of them worked. Honestly, I can't identify what's the issue here."", 'comment_created': datetime.datetime(2021, 8, 7, 5, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 684709778, 'comment_body': ""Sorry, I think this was a brainfart on my part -- I think it makes sense that you can't make this clickable because `.z_surface` is not an attribute of MembraneCurvature but of the Results object, if that makes sense. My apologies!"", 'comment_created': datetime.datetime(2021, 8, 8, 3, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}]","[{'commit_sha': '17071880a29fa16cc011338d354ecba76032e6a3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '721e83fa20338a3c3da5d52da2750608b6739637', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '523fd6222db467a08d8b7962ea7c4f7077f46448', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6d6ba52443355a290669ba453aa8c3270b405e1b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fbbc1df10dfc355c7503a5fda2db5f2c98f78a36', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '424ac53e735edf8e826cfe821beb39798c839da2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '03b65ccc95a589238af7f743b884d929959ecae4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7c071a6efd4d2793f1c73c4119d1723328444440', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '30d01356c1cf902622117a6fad657432e57ec632', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3e235e75e68dd9304b9d403e756b8f66b4eb0dbf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
707006139,Added ipynb tutorial,"This PR fixes #63 

- [x] Added tutorial for membrane-only systems.

I would appreciate some feedback for this tutorial while I finish the other two notebooks. @lilyminium @orbeckst @richardjgowers @IAlibay 

Thanks!   
Edit: I forgot to mention I couldn't manage to make the NGLwidget render, so I ended up adding the png files of the widgets. Hope that works as an alternative.  ",True,64,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/64,https://github.com/MDAnalysis/membrane-curvature/pull/64,closed,27701,6,10,13,20,4,0,0,[],2021-08-10 03:52:51+00:00,2021-08-19 16:57:56+00:00,824705.0,"9 days, 13:05:05","[{'comment_id': 686170061, 'comment_body': 'You can add the below code to require JS for your notebooks:\r\n\r\n```\r\nnbsphinx_prolog = r""""""\r\n.. raw:: html\r\n\r\n    <script src=\'http://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\'></script>\r\n    <script>require=requirejs;</script>\r\n\r\n""""""\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 17, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 686170783, 'comment_body': 'Please add `nbsphinx` to the `docs/requirements.yaml` so RTD can build :)', 'comment_created': datetime.datetime(2021, 8, 10, 17, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 686263509, 'comment_body': ""<p>Could you please make the title more detailed? Imagine you've just been emailed this notebook by someone else with no context.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/MDAnalysis/membrane-curvature/pull/64/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='0'/>"", 'comment_created': datetime.datetime(2021, 8, 10, 19, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 686282692, 'comment_body': ""Shouldn't this be\r\n```suggestion\r\n     - nbsphinx \r\n```\r\ni.e., indented so that it forms a list as the dict item `{'pip': ['nbsphinx']}` ?\r\n\r\nDon't just take this suggestion but have a look at what the exact format of the requirements file ought to be."", 'comment_created': datetime.datetime(2021, 8, 10, 20, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': 'c2a2c022c485b4c8cdc86d3af8a5fc746fcdaa6a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '70e31c66494b432b05f390a6e7fc7933a8678cef', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'af5df6a61361c6833b71c423925b2d328240b1f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4f56f7565117f1bcaee4a9a1a782f405da3b8d14', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '22ec68e1e3ca1112472a5ebbdb92e3c68de72b95', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cc68a0a1fd1e35a1350226b482efb71348f5201a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '352abfa5438b848e5d76d7372418420764316420', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dd6287cd98d0091a3c56c8abae8226b564ef3f6f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7f13b1cd4b6976263663a216c22f9c3d5c6d901c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '555cb8199b40a2075ab4cf8b3f13b271d9668a8d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f5815c86cdd11bb1a434f8362a90e9b08d261c44', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c7c9dbaedae8cf8be70358232aebf4c7ae4de1b7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '694ca4326a7a511fcf814e4075901998cefc4844', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
717076265,Added ipynb tutorial - membrane-protein.,"This PR fixes #68 

Changes include:

- [x] Tutorial membrane-protein systems with posres.
- [x] Tutorial page updated. 

",True,69,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/69,https://github.com/MDAnalysis/membrane-curvature/pull/69,closed,2191,7,4,11,36,4,0,0,[],2021-08-21 02:36:45+00:00,2021-09-29 21:23:52+00:00,3437227.0,"39 days, 18:47:07","[{'comment_id': 717533001, 'comment_body': 'Add the MARTINI citation or a link to http://cgmartini.nl  would be nice :)', 'comment_created': datetime.datetime(2021, 9, 28, 12, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 717533832, 'comment_body': 'Again perhaps add a citation to the CHARMM36 FF if you mention it 👍 ', 'comment_created': datetime.datetime(2021, 9, 28, 12, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 717534630, 'comment_body': '```suggestion\r\nUse MembraneCurvature to derive 2D maps of curvature induced by the sodium-proton antiporter NhaA.\r\n```', 'comment_created': datetime.datetime(2021, 9, 28, 12, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 717997826, 'comment_body': 'Added. ', 'comment_created': datetime.datetime(2021, 9, 28, 22, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}]","[{'commit_sha': 'c20ceb4c8ae764bfb885479e5ec41f3c0135d051', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ea97db993423802410d1e0a46c10ca429aa917b9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c1316b37459828e7f8d986e239b72513337df7a1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '60556a61b6c5c2fcfbb0731c43238f9ff842f5f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '76599c0aa85eb717808eb696500c9cd49c4f980d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5eb5aa52587f8caaf8516e91cb7a7ec7007a36b7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'aae7bbf0486c72eeacc930b4a6fa155fa36cc546', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8c8ae6f353d9a2ff0d1fc107c9212d1b87a896c9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3fc08fc02dee1b30916b80d67812ebc55c892b90', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b8c27159e759e0459796e85c1eec39c9ce0123fe', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2ee68983467a41bc65437a2ba362264c6a2abfea', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
697553947,Updated API docs,"This is a preliminary version of updated API docs. It may help to fix #56 

This PR includes:
- [x] Updated API docs
- [x] Updated `index.rst`  

`getting_started.rst` is not really ready.

But maybe I can have some review for what I have so far @lilyminium?
Any suggestions are appreciated @orbeckst @IAlibay @fiona-naughton 
",True,57,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/57,https://github.com/MDAnalysis/membrane-curvature/pull/57,closed,174,60,10,8,3,9,0,0,[],2021-07-27 05:45:18+00:00,2021-07-28 05:34:05+00:00,85727.0,23:48:47,"[{'comment_id': 677565947, 'comment_body': 'Broken link. It should be http://github.com/MDAnalysis/membrane-curvature', 'comment_created': datetime.datetime(2021, 7, 27, 15, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 677699293, 'comment_body': 'Actually, use SSL whenever possible: https', 'comment_created': datetime.datetime(2021, 7, 27, 18, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 677702207, 'comment_body': 'As a matter of style I avoid ""this page"" (or ""click here""...). Just start the sentence with ""The MDAnalysis MembraneCurvature tool is ... . To get started using it we\'ll walk you through a simple example."" Or something like that. The heading already gives the information that you\'re on the right page so you don\'t have to be redundant. Rather capitalize on your reader\'s eagerness and attention and (1) convey the information that you want them to keep in mind and (2) hit the ground running.', 'comment_created': datetime.datetime(2021, 7, 27, 18, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 677702444, 'comment_body': 'Move up.\r\n', 'comment_created': datetime.datetime(2021, 7, 27, 18, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 677703776, 'comment_body': 'I would move Curvature and Surface into separate files and include them via the toctree. You coukd have a directory `api` to keep things nicely separated. I am generally more a fan of ""1 module, 1 page"". It also makes linking easier and it just leaves room to grow.', 'comment_created': datetime.datetime(2021, 7, 27, 18, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 677704264, 'comment_body': 'Do you like the ""Welcome to ..."" default from Sphinx? \r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 27, 18, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 677705101, 'comment_body': ""Good that you deleted the technical detail – users don't initially care, it's much more important to answer the questions\r\n\r\n1. What can you do for me?\r\n2. How do I get my job done with the minimal amount of effort?"", 'comment_created': datetime.datetime(2021, 7, 27, 18, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 677705882, 'comment_body': 'I would add the date and version information to the top of the docs together with the minimum version of MDAnalysis required.', 'comment_created': datetime.datetime(2021, 7, 27, 18, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 677876436, 'comment_body': 'Maybe remove this text from the Python doc string and move it to a dedicated reST file where you\r\n1. show a real example with data\r\n2. include actual images\r\n\r\nThat makes the example much more impactful.', 'comment_created': datetime.datetime(2021, 7, 27, 23, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': '6b5612567fca1d4c5d7e6db9d2afa5cd779e376d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e49f921b51a6fec5dd4df9e57a79e639819230c7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3406cc7ada03e02d4eb174b24aee222bd53ac2e2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '675b1012382a76f725ebb1f0cbb23942e979bb9f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'da9da29cb963a10912702e22e8fdfccd487257a2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c7437b3e06d904f7ff7a16f719582486c1edfaab', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e3412b288d39f9bc9ababea7b83aae0131dee615', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f1be0765c7ac649a826196eb7a2639d2f260e800', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
702938599,Updated docs pages,"Changes in this PR fixes #58 

Changes include:

- [x] Updated algorithm page.
- [x] Update Usage page for three cases 
- Membrane-only
- Membrane-protein with posres.
- Membrane-protein with no posres.
- [x] Updated visualization page.

Pending:
- [x] Add real data file to the test suite. 
- [x] Add real plots to the Visualization page.

Question:
I left the usage page as if I were going to use a different test data file for each case. 
- Is it a good idea to add a dataset for each one of the cases I have or better to reuse some MDA tests?

Happy to receive any other suggestions. Thanks!

@lilyminium @orbeckst @IAlibay @fiona-naughton 
",True,62,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/62,https://github.com/MDAnalysis/membrane-curvature/pull/62,closed,17257,59,14,10,6,21,0,0,[],2021-08-04 04:05:07+00:00,2021-08-08 04:23:10+00:00,346683.0,"4 days, 0:18:03","[{'comment_id': 684107288, 'comment_body': '```suggestion\r\nThe first step in the algorithm consists of selecting atoms that will be used as\r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 9, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684107515, 'comment_body': '```suggestion\r\n:class:`~MDAnalysis.core.groups.AtomGroup`. Typically in biological membranes, lipid headgroups are the most\r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 9, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684108022, 'comment_body': '```suggestion\r\ncontained in the MDAnalysis :class:`~MDAnalysis.core.universe.Universe`. The grid comprises ``n_x_bins`` x ``n_y_bins`` number of bins.\r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 9, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684108674, 'comment_body': 'Could you please explain what this means: i.e., the dimensions of the grid will be determined by the size of the box on the first frame.', 'comment_created': datetime.datetime(2021, 8, 6, 9, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684109398, 'comment_body': '```suggestion\r\n``(n_x_bins, n_y_bins)``.\r\n```\r\n\r\nWhat shape do `z_surface`, etc. have? :-)', 'comment_created': datetime.datetime(2021, 8, 6, 9, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684111906, 'comment_body': ""Instead of manually linking to pages, you can use the `intersphinx` extension to do it for you. At the bottom of the `conf.py` file in `docs/`, you can add:\r\n\r\n```\r\nintersphinx_mapping = {'https://docs.python.org/': None,  # optional, if you want to link to PYthon docs\r\n                       'https://docs.mdanalysis.org/stable/': None,\r\n\t\t\t\t\t   'https://matplotlib.org/stable': None,\r\n\t\t\t\t\t   'https://docs.scipy.org/doc/reference/': None,  # scipy\r\n\t\t\t\t\t   'https://docs.scipy.org/doc/numpy/': None,  # if you want to link to numpy docs for interpolation\r\n                       }\r\n```"", 'comment_created': datetime.datetime(2021, 8, 6, 9, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684115944, 'comment_body': 'Could you explain what needs to happen in the preprocessing?', 'comment_created': datetime.datetime(2021, 8, 6, 10, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684116670, 'comment_body': '```suggestion\r\n        curvature_lower_leaflet = MembraneCurvature(universe, \r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 10, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684116933, 'comment_body': ""```suggestion\r\n        \tax.imshow(mc, interpolation='gaussian', cmap='seismic', origin='lower')\r\n```"", 'comment_created': datetime.datetime(2021, 8, 6, 10, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684117201, 'comment_body': 'Similar indentation for the rest of the lines, I suspect', 'comment_created': datetime.datetime(2021, 8, 6, 10, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684120048, 'comment_body': ""I wonder if you could try installing the ``ipython`` [directive](https://matplotlib.org/sampledoc/ipython_directive.html) and getting that to plot this for you. If you choose to do this (up to you), you'd need to:\r\n\r\n* add `ipython` to https://github.com/MDAnalysis/membrane-curvature/blob/main/docs/requirements.yaml \r\n* add `'IPython.sphinxext.ipython_console_highlighting', 'IPython.sphinxext.ipython_directive'` to `extensions` in `conf.py` (see user guide https://github.com/MDAnalysis/UserGuide/blob/e88eeefd93ff982032c880cd270929c8d861e1b7/doc/source/conf.py#L86)\r\n* Rewrite this to start with `.. ipython::` instead of `::`\r\n"", 'comment_created': datetime.datetime(2021, 8, 6, 10, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684121804, 'comment_body': '```suggestion\r\nWith :func:`~matplotlib.pyplot.imshow`, each element of the array is plotted as a square in a matrix \r\n```\r\n\r\nSquiggle ~ means only ""imshow"" is shown.', 'comment_created': datetime.datetime(2021, 8, 6, 10, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684124528, 'comment_body': '```suggestion\r\nYou can use contour plots using :func:`~matplotlib.pyplot.contourf`. With this approach, contour lines\r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 10, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684125205, 'comment_body': '```suggestion\r\nWe suggest using the :func:`scipy.ndimage.gaussian_filter` as in::\r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 10, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684125688, 'comment_body': '```suggestion\r\nWhen plotting using :func:`~matplotlib.pyplot.contourf`, an extra step is required to perform an interpolation. \r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 10, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684126019, 'comment_body': 'You should be able to replace all of these with intersphinx.', 'comment_created': datetime.datetime(2021, 8, 6, 10, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684129158, 'comment_body': '```suggestion\r\ncalculated and stored in :attr:`MembraneCurvature.results.z_surface<membrane_curvature.base.MembraneCurvature.results.z_surface>`.\r\n```\r\n\r\nI can\'t click this; you may need to fully qualify the path. I haven\'t checked the above code but something like that should link to ""membrane_curvature.base.MembraneCurvature.results.z_surface"", but only show ""MembraneCurvature.results.z_surface"" to the reader.', 'comment_created': datetime.datetime(2021, 8, 6, 10, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684359092, 'comment_body': ""Ohhh that's neat! Had no idea about this. Thanks! "", 'comment_created': datetime.datetime(2021, 8, 6, 16, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 684584248, 'comment_body': 'Thanks for showing me this! Looks awesome! :D ', 'comment_created': datetime.datetime(2021, 8, 7, 4, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 684585645, 'comment_body': ""Bruh... this I couldn't fix :( \r\nI tried:\r\n- :attr:`MembraneCurvature.results.z_surface<membrane_curvature.base.MembraneCurvature.results.z_surface>`\r\n- :attr:`MembraneCurvature.results.z_surface<MembraneCurvature.results.z_surface>`\r\n- :attr:`~MembraneCurvature.results.average_z_surface<membrane_curvature.base.MembraneCurvature.results.average_z_surface>`\r\n\r\nNone of them worked. Honestly, I can't identify what's the issue here."", 'comment_created': datetime.datetime(2021, 8, 7, 5, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 684709778, 'comment_body': ""Sorry, I think this was a brainfart on my part -- I think it makes sense that you can't make this clickable because `.z_surface` is not an attribute of MembraneCurvature but of the Results object, if that makes sense. My apologies!"", 'comment_created': datetime.datetime(2021, 8, 8, 3, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}]","[{'commit_sha': '17071880a29fa16cc011338d354ecba76032e6a3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '721e83fa20338a3c3da5d52da2750608b6739637', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '523fd6222db467a08d8b7962ea7c4f7077f46448', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6d6ba52443355a290669ba453aa8c3270b405e1b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fbbc1df10dfc355c7503a5fda2db5f2c98f78a36', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '424ac53e735edf8e826cfe821beb39798c839da2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '03b65ccc95a589238af7f743b884d929959ecae4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7c071a6efd4d2793f1c73c4119d1723328444440', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '30d01356c1cf902622117a6fad657432e57ec632', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3e235e75e68dd9304b9d403e756b8f66b4eb0dbf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
707006139,Added ipynb tutorial,"This PR fixes #63 

- [x] Added tutorial for membrane-only systems.

I would appreciate some feedback for this tutorial while I finish the other two notebooks. @lilyminium @orbeckst @richardjgowers @IAlibay 

Thanks!   
Edit: I forgot to mention I couldn't manage to make the NGLwidget render, so I ended up adding the png files of the widgets. Hope that works as an alternative.  ",True,64,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/64,https://github.com/MDAnalysis/membrane-curvature/pull/64,closed,27701,6,10,13,20,4,0,0,[],2021-08-10 03:52:51+00:00,2021-08-19 16:57:56+00:00,824705.0,"9 days, 13:05:05","[{'comment_id': 686170061, 'comment_body': 'You can add the below code to require JS for your notebooks:\r\n\r\n```\r\nnbsphinx_prolog = r""""""\r\n.. raw:: html\r\n\r\n    <script src=\'http://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\'></script>\r\n    <script>require=requirejs;</script>\r\n\r\n""""""\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 17, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 686170783, 'comment_body': 'Please add `nbsphinx` to the `docs/requirements.yaml` so RTD can build :)', 'comment_created': datetime.datetime(2021, 8, 10, 17, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 686263509, 'comment_body': ""<p>Could you please make the title more detailed? Imagine you've just been emailed this notebook by someone else with no context.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/MDAnalysis/membrane-curvature/pull/64/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='0'/>"", 'comment_created': datetime.datetime(2021, 8, 10, 19, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 686282692, 'comment_body': ""Shouldn't this be\r\n```suggestion\r\n     - nbsphinx \r\n```\r\ni.e., indented so that it forms a list as the dict item `{'pip': ['nbsphinx']}` ?\r\n\r\nDon't just take this suggestion but have a look at what the exact format of the requirements file ought to be."", 'comment_created': datetime.datetime(2021, 8, 10, 20, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': 'c2a2c022c485b4c8cdc86d3af8a5fc746fcdaa6a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '70e31c66494b432b05f390a6e7fc7933a8678cef', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'af5df6a61361c6833b71c423925b2d328240b1f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4f56f7565117f1bcaee4a9a1a782f405da3b8d14', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '22ec68e1e3ca1112472a5ebbdb92e3c68de72b95', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cc68a0a1fd1e35a1350226b482efb71348f5201a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '352abfa5438b848e5d76d7372418420764316420', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dd6287cd98d0091a3c56c8abae8226b564ef3f6f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7f13b1cd4b6976263663a216c22f9c3d5c6d901c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '555cb8199b40a2075ab4cf8b3f13b271d9668a8d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f5815c86cdd11bb1a434f8362a90e9b08d261c44', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c7c9dbaedae8cf8be70358232aebf4c7ae4de1b7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '694ca4326a7a511fcf814e4075901998cefc4844', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
717076265,Added ipynb tutorial - membrane-protein.,"This PR fixes #68 

Changes include:

- [x] Tutorial membrane-protein systems with posres.
- [x] Tutorial page updated. 

",True,69,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/69,https://github.com/MDAnalysis/membrane-curvature/pull/69,closed,2191,7,4,11,36,4,0,0,[],2021-08-21 02:36:45+00:00,2021-09-29 21:23:52+00:00,3437227.0,"39 days, 18:47:07","[{'comment_id': 717533001, 'comment_body': 'Add the MARTINI citation or a link to http://cgmartini.nl  would be nice :)', 'comment_created': datetime.datetime(2021, 9, 28, 12, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 717533832, 'comment_body': 'Again perhaps add a citation to the CHARMM36 FF if you mention it 👍 ', 'comment_created': datetime.datetime(2021, 9, 28, 12, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 717534630, 'comment_body': '```suggestion\r\nUse MembraneCurvature to derive 2D maps of curvature induced by the sodium-proton antiporter NhaA.\r\n```', 'comment_created': datetime.datetime(2021, 9, 28, 12, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 717997826, 'comment_body': 'Added. ', 'comment_created': datetime.datetime(2021, 9, 28, 22, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}]","[{'commit_sha': 'c20ceb4c8ae764bfb885479e5ec41f3c0135d051', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ea97db993423802410d1e0a46c10ca429aa917b9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c1316b37459828e7f8d986e239b72513337df7a1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '60556a61b6c5c2fcfbb0731c43238f9ff842f5f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '76599c0aa85eb717808eb696500c9cd49c4f980d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5eb5aa52587f8caaf8516e91cb7a7ec7007a36b7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'aae7bbf0486c72eeacc930b4a6fa155fa36cc546', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8c8ae6f353d9a2ff0d1fc107c9212d1b87a896c9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3fc08fc02dee1b30916b80d67812ebc55c892b90', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b8c27159e759e0459796e85c1eec39c9ce0123fe', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2ee68983467a41bc65437a2ba362264c6a2abfea', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
707006139,Added ipynb tutorial,"This PR fixes #63 

- [x] Added tutorial for membrane-only systems.

I would appreciate some feedback for this tutorial while I finish the other two notebooks. @lilyminium @orbeckst @richardjgowers @IAlibay 

Thanks!   
Edit: I forgot to mention I couldn't manage to make the NGLwidget render, so I ended up adding the png files of the widgets. Hope that works as an alternative.  ",True,64,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/64,https://github.com/MDAnalysis/membrane-curvature/pull/64,closed,27701,6,10,13,20,4,0,0,[],2021-08-10 03:52:51+00:00,2021-08-19 16:57:56+00:00,824705.0,"9 days, 13:05:05","[{'comment_id': 686170061, 'comment_body': 'You can add the below code to require JS for your notebooks:\r\n\r\n```\r\nnbsphinx_prolog = r""""""\r\n.. raw:: html\r\n\r\n    <script src=\'http://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js\'></script>\r\n    <script>require=requirejs;</script>\r\n\r\n""""""\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 17, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 686170783, 'comment_body': 'Please add `nbsphinx` to the `docs/requirements.yaml` so RTD can build :)', 'comment_created': datetime.datetime(2021, 8, 10, 17, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 686263509, 'comment_body': ""<p>Could you please make the title more detailed? Imagine you've just been emailed this notebook by someone else with no context.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/MDAnalysis/membrane-curvature/pull/64/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='0'/>"", 'comment_created': datetime.datetime(2021, 8, 10, 19, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 686282692, 'comment_body': ""Shouldn't this be\r\n```suggestion\r\n     - nbsphinx \r\n```\r\ni.e., indented so that it forms a list as the dict item `{'pip': ['nbsphinx']}` ?\r\n\r\nDon't just take this suggestion but have a look at what the exact format of the requirements file ought to be."", 'comment_created': datetime.datetime(2021, 8, 10, 20, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': 'c2a2c022c485b4c8cdc86d3af8a5fc746fcdaa6a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '70e31c66494b432b05f390a6e7fc7933a8678cef', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'af5df6a61361c6833b71c423925b2d328240b1f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4f56f7565117f1bcaee4a9a1a782f405da3b8d14', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '22ec68e1e3ca1112472a5ebbdb92e3c68de72b95', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cc68a0a1fd1e35a1350226b482efb71348f5201a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '352abfa5438b848e5d76d7372418420764316420', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dd6287cd98d0091a3c56c8abae8226b564ef3f6f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7f13b1cd4b6976263663a216c22f9c3d5c6d901c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '555cb8199b40a2075ab4cf8b3f13b271d9668a8d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f5815c86cdd11bb1a434f8362a90e9b08d261c44', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c7c9dbaedae8cf8be70358232aebf4c7ae4de1b7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '694ca4326a7a511fcf814e4075901998cefc4844', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
717076265,Added ipynb tutorial - membrane-protein.,"This PR fixes #68 

Changes include:

- [x] Tutorial membrane-protein systems with posres.
- [x] Tutorial page updated. 

",True,69,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/69,https://github.com/MDAnalysis/membrane-curvature/pull/69,closed,2191,7,4,11,36,4,0,0,[],2021-08-21 02:36:45+00:00,2021-09-29 21:23:52+00:00,3437227.0,"39 days, 18:47:07","[{'comment_id': 717533001, 'comment_body': 'Add the MARTINI citation or a link to http://cgmartini.nl  would be nice :)', 'comment_created': datetime.datetime(2021, 9, 28, 12, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 717533832, 'comment_body': 'Again perhaps add a citation to the CHARMM36 FF if you mention it 👍 ', 'comment_created': datetime.datetime(2021, 9, 28, 12, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 717534630, 'comment_body': '```suggestion\r\nUse MembraneCurvature to derive 2D maps of curvature induced by the sodium-proton antiporter NhaA.\r\n```', 'comment_created': datetime.datetime(2021, 9, 28, 12, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 717997826, 'comment_body': 'Added. ', 'comment_created': datetime.datetime(2021, 9, 28, 22, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}]","[{'commit_sha': 'c20ceb4c8ae764bfb885479e5ec41f3c0135d051', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ea97db993423802410d1e0a46c10ca429aa917b9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c1316b37459828e7f8d986e239b72513337df7a1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '60556a61b6c5c2fcfbb0731c43238f9ff842f5f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '76599c0aa85eb717808eb696500c9cd49c4f980d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5eb5aa52587f8caaf8516e91cb7a7ec7007a36b7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'aae7bbf0486c72eeacc930b4a6fa155fa36cc546', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8c8ae6f353d9a2ff0d1fc107c9212d1b87a896c9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3fc08fc02dee1b30916b80d67812ebc55c892b90', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b8c27159e759e0459796e85c1eec39c9ce0123fe', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2ee68983467a41bc65437a2ba362264c6a2abfea', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30
694933853,Surface Interpolation Function [Fixes Issue45],"This is a starting point to solve #45 

Changes in this PR:

- [x] Added function to calculate interpolation of z_surface (`surface_interpolation`). Includes docstrings.
- [x] Added tests of `surface_interpolation`. 

As suggested by @orbeckst in this [comment](https://github.com/MDAnalysis/membrane-curvature/issues/45#issuecomment-881972548), the function here included uses NumPy. Thanks for encouraging numpy! 

Surfaces included in tests are dummy_arrays with the following characteristics:
- size 3x3 with all values 150 and one `np.nan`.
- size 4x3 with all values 150 and two `np.nan`.
- size 4x4 with all values 150 and two `np.nan`.
- size 3x3 array 3x3  with lots of `np.nan`. 💪🏽 

Probably I'll be asked to add more tests, but this is ok to start. Probably @lilyminium will give me lots of ideas. 😅 

 Thanks.
",False,52,https://api.github.com/repos/MDAnalysis/membrane-curvature/pulls/52,https://github.com/MDAnalysis/membrane-curvature/pull/52,closed,183,42,3,8,5,22,0,0,[],2021-07-22 07:27:06+00:00,2023-12-29 02:45:26+00:00,76879100.0,"889 days, 19:18:20","[{'comment_id': 674563744, 'comment_body': ""I just noticed I didn't use `np.full` here. Booo. "", 'comment_created': datetime.datetime(2021, 7, 22, 7, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 675881632, 'comment_body': 'axi > axis?', 'comment_created': datetime.datetime(2021, 7, 23, 21, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 675884069, 'comment_body': 'Since `mask_nans` is used twice in inverted form, and never in its original form, perhaps it is worth it to invert at the original `isnan` location rather than inverting the original value twice?', 'comment_created': datetime.datetime(2021, 7, 23, 21, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 675885116, 'comment_body': 'For arrays of floats, the [docstring for `assert_almost_equal`](https://numpy.org/doc/stable/reference/generated/numpy.testing.assert_almost_equal.html) suggests using i.e., `assert_allclose` these days for better consistency.', 'comment_created': datetime.datetime(2021, 7, 23, 21, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 675885653, 'comment_body': 'Not sure if performance is currently a concern. This approach may be just fine, I\'d be tempted to experiment a bit to see if a solution with ""pure broadcasting"" exists, but only if performance is critical.', 'comment_created': datetime.datetime(2021, 7, 23, 21, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 675886106, 'comment_body': 'Here and in a few other places: Numpy -> NumPy\r\n\r\nCould also just omit the NumPy specification or use `np.array` instead perhaps.', 'comment_created': datetime.datetime(2021, 7, 23, 22, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 676173523, 'comment_body': ""I completely missed it and it's a good point. You mean, having this instead, correct?\r\n\r\n```\r\n   mask_nans = ~np.isnan(array_surface) #invert original\r\n\r\n   index_array = np.arange(array_surface.shape[0])\r\n\r\n   interpolated_array = np.interp(index_array,\r\n                                  np.flatnonzero(mask_nans),   #not inverted\r\n                                  array_surface[mask_nans]).   #not inverted\r\n```"", 'comment_created': datetime.datetime(2021, 7, 25, 16, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 676176567, 'comment_body': 'Thanks. I remember @orbeckst [mentioned](https://github.com/MDAnalysis/membrane-curvature/pull/13#discussion_r651379750) that  MDAnalysis typically uses `assert_almost_equal`. Maybe we can have his opinion on what would be best here? ', 'comment_created': datetime.datetime(2021, 7, 25, 17, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 676176708, 'comment_body': ""We haven't really assessed performance. I'll skip it for the moment, but will keep it in mind. "", 'comment_created': datetime.datetime(2021, 7, 25, 17, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 682003925, 'comment_body': ""MDAnalysis uses `assert_almost_equal` in preference to `assert_array_almost_equal`. `assert_allclose` might be more recent than when we started using numpy tests so MDAnalysis might just be outdated and should be switching eventually. Follow @tylerjereddy 's advice :-)."", 'comment_created': datetime.datetime(2021, 8, 3, 18, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 683844953, 'comment_body': 'had to set `rtol=6` here and in the next test otherwise, the tests fail.', 'comment_created': datetime.datetime(2021, 8, 5, 23, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 684337233, 'comment_body': ""Oh dear, that's a very large `rtol`. The default value is 1e-5, for reference. Are you sure you want tests to pass if any calculated value is within 600% of the target value? "", 'comment_created': datetime.datetime(2021, 8, 6, 15, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684338402, 'comment_body': 'If it used to pass with `assert_almost_equal` (where the `decimal=7` by default), you could try setting `atol=1e-7` in `allclose`?', 'comment_created': datetime.datetime(2021, 8, 6, 15, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684656934, 'comment_body': 'The test passes with `assert_allclose(h, h_test)` (without specifying `rtol=6`). ', 'comment_created': datetime.datetime(2021, 8, 7, 17, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 684657445, 'comment_body': ' It should be `assert_allclose(k, k_test, atol=1e-7)`', 'comment_created': datetime.datetime(2021, 8, 7, 17, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ojeda-e', 'type': 'User'}, {'comment_id': 684711860, 'comment_body': ""```suggestion\r\n                self.results.interpolated_z_surface, axis=0)\r\n```\r\n\r\nAnd with the others too -- if you specify `frame_index`, you'll wind up only getting the mean of the last frame."", 'comment_created': datetime.datetime(2021, 8, 8, 4, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684712033, 'comment_body': 'Over which axis?', 'comment_created': datetime.datetime(2021, 8, 8, 4, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684712800, 'comment_body': ""I'm not quite understanding this. `mask_nans` is 2D, with shape (n_x, n_y). `index_array` is 1D, with shape `n_x`. `np.flatnonzero(mask_nans)` and `array_surface[mask_nans]` will be 1D, of length between 0 to n_x * n_y. So I *think* that means that you are only ever operating on the first row of `array_surface`?\r\n\r\nI guess my question is then, why is `array_surface` 2D? Why not just pass in one row at a time? In addition, as it is a 2D surface, why use a 1D interpolation function? Why not a [2D one](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.interp2d.html)?"", 'comment_created': datetime.datetime(2021, 8, 8, 4, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684712999, 'comment_body': 'Ok, I see that you are applying `interpolation_by_array` by row, then. In that case I suggest amending the documentation of `interpolation_by_array` to specify that the input is 1-dimensional with length `n_x`, instead of `n_x, n_y`. Although I think doing 2D interpolation would be less arbitrary (choosing which axis is x and which is y is basically a random, right?)', 'comment_created': datetime.datetime(2021, 8, 8, 4, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684713314, 'comment_body': ""Could you please add some tests with more interesting values? e.g. in the one below, the 145 number could have come from interpolating either along the x-axis or the y-axis. In order to be diagnostic of potential current and future bugs, I'd be interested in seeing one where using 1D interpolation gives different results if it's run across the x-axis, vs. the y-axis.\r\n\r\n```python\r\n(np.array([[150., 150,  150.,  150.],\r\n               [150., np.nan, np.nan,  150.],\r\n               [150., 130., 140.,  150.],\r\n               [150., 150., 150.,  150.]]),\r\n     np.array([[150., 150, 150.,  150.],\r\n               [150., 140., 145.,  150.],\r\n               [150., 130., 140.,  150.],\r\n               [150., 150., 150.,  150.]])),\r\n```"", 'comment_created': datetime.datetime(2021, 8, 8, 4, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684713741, 'comment_body': ""Here as well, tests where the expected values aren't all one number are needed to really check assumptions such as:\r\n\r\n* is it interpolating along the axis I think it is\r\n* is it interpolating in a linear way (vs. some random other polynomial)\r\n* is it even interpolating, or just taking the most common number?\r\n* are we sure it's interpolating independently for every frame, or is it interpolating across different frames?\r\n\r\netc.\r\n\r\nI am, incidentally, somewhat surprised that coordinates are getting wrapped with `np.nan` values in them. @richardjgowers should this be happening...?"", 'comment_created': datetime.datetime(2021, 8, 8, 4, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 684714058, 'comment_body': 'Do you need `np.nanmean`? Do you expect `np.nan` values in your interpolated surfaces? If not, using `np.mean` will reveal errors in case there ever are `np.nan` values.', 'comment_created': datetime.datetime(2021, 8, 8, 4, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}]","[{'commit_sha': '33b97484773973e5ac2ab4e1de667ff467ed2bfc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '13ea4a92dc84d910ec3bf2522389b0988df43c22', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '36bd38eb80b0c9474e97d8c22fac6d72e17155d5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7382cec73c68e36dd50e77b31908b49e1ee81eef', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '10fd0a7bc92573e420033ef4c75dc657d7130510', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fc4ec9520bf67de43b652d07422c2334b17e0ea9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3a2ad5d82fd452535ae4070e17eec41886ff925c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7d7f4ca2c86a0e9152ea0099621e8f8af138408e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Estefania Barreto-Ojeda,27988163,estefania.b.ojeda@gmail.com,User,,31,,20,30

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
371151495,membrane-curvature,MDAnalysis/membrane-curvature,Python,6,29,10,8,74,6,13,1,"[{'id': 1663535274, 'number': 122, 'closed': datetime.datetime(2024, 1, 4, 21, 55, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 3, 16, 39, 21, tzinfo=datetime.timezone.utc), 'time_taken': 105361.0, 'time_delta': '1 day, 5:16:01', 'additions': 1036, 'deletions': 13777, 'state': 'closed'}, {'id': 1659525267, 'number': 119, 'closed': datetime.datetime(2024, 1, 2, 23, 42, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 29, 2, 52, 12, tzinfo=datetime.timezone.utc), 'time_taken': 420600.0, 'time_delta': '4 days, 20:50:00', 'additions': 115, 'deletions': 3094, 'state': 'closed'}, {'id': 1109770044, 'number': 106, 'closed': datetime.datetime(2022, 11, 3, 17, 26, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 3, 15, 31, 22, tzinfo=datetime.timezone.utc), 'time_taken': 6896.0, 'time_delta': '1:54:56', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 1092787160, 'number': 103, 'closed': datetime.datetime(2022, 11, 2, 1, 13, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 19, 19, 29, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1143806.0, 'time_delta': '13 days, 5:43:26', 'additions': 36, 'deletions': 11, 'state': 'closed'}, {'id': 1092769833, 'number': 102, 'closed': datetime.datetime(2022, 10, 20, 0, 42, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 19, 19, 11, 40, tzinfo=datetime.timezone.utc), 'time_taken': 19839.0, 'time_delta': '5:30:39', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 1091665910, 'number': 100, 'closed': datetime.datetime(2022, 11, 3, 15, 16, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 19, 3, 14, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1339324.0, 'time_delta': '15 days, 12:02:04', 'additions': 17, 'deletions': 5, 'state': 'closed'}, {'id': 1091664890, 'number': 99, 'closed': datetime.datetime(2022, 10, 19, 5, 46, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 19, 3, 13, 31, tzinfo=datetime.timezone.utc), 'time_taken': 9151.0, 'time_delta': '2:32:31', 'additions': 16, 'deletions': 1, 'state': 'closed'}, {'id': 1086138138, 'number': 95, 'closed': datetime.datetime(2022, 10, 14, 3, 13, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 13, 13, 57, 45, tzinfo=datetime.timezone.utc), 'time_taken': 47757.0, 'time_delta': '13:15:57', 'additions': 38, 'deletions': 15, 'state': 'closed'}, {'id': 1040412001, 'number': 94, 'closed': datetime.datetime(2022, 8, 30, 19, 25, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 30, 3, 28, 49, tzinfo=datetime.timezone.utc), 'time_taken': 57375.0, 'time_delta': '15:56:15', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 986838789, 'number': 91, 'closed': None, 'created': datetime.datetime(2022, 7, 4, 21, 59, 6, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 63, 'deletions': 0, 'state': 'open'}, {'id': 823820822, 'number': 89, 'closed': datetime.datetime(2022, 10, 17, 23, 47, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 16, 3, 32, 21, tzinfo=datetime.timezone.utc), 'time_taken': 23746497.0, 'time_delta': '274 days, 20:14:57', 'additions': 13833, 'deletions': 787, 'state': 'closed'}, {'id': 752719356, 'number': 85, 'closed': datetime.datetime(2021, 10, 7, 3, 17, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 7, 0, 16, 53, tzinfo=datetime.timezone.utc), 'time_taken': 10860.0, 'time_delta': '3:01:00', 'additions': 11, 'deletions': 0, 'state': 'closed'}, {'id': 747846997, 'number': 83, 'closed': datetime.datetime(2021, 10, 2, 23, 39, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 1, 18, 20, 28, tzinfo=datetime.timezone.utc), 'time_taken': 105543.0, 'time_delta': '1 day, 5:19:03', 'additions': 61, 'deletions': 2, 'state': 'closed'}, {'id': 747227232, 'number': 82, 'closed': datetime.datetime(2021, 10, 1, 15, 50, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 1, 3, 55, 51, tzinfo=datetime.timezone.utc), 'time_taken': 42873.0, 'time_delta': '11:54:33', 'additions': 18, 'deletions': 5, 'state': 'closed'}, {'id': 747215833, 'number': 81, 'closed': datetime.datetime(2021, 10, 2, 20, 44, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 1, 3, 18, 44, tzinfo=datetime.timezone.utc), 'time_taken': 149138.0, 'time_delta': '1 day, 17:25:38', 'additions': 17, 'deletions': 1, 'state': 'closed'}, {'id': 739677774, 'number': 78, 'closed': datetime.datetime(2021, 9, 29, 23, 29, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 21, 22, 13, 32, tzinfo=datetime.timezone.utc), 'time_taken': 695758.0, 'time_delta': '8 days, 1:15:58', 'additions': 2864, 'deletions': 1083, 'state': 'closed'}, {'id': 730116269, 'number': 76, 'closed': datetime.datetime(2021, 9, 10, 4, 41, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 9, 2, 18, 27, tzinfo=datetime.timezone.utc), 'time_taken': 94977.0, 'time_delta': '1 day, 2:22:57', 'additions': 44, 'deletions': 1, 'state': 'closed'}, {'id': 727311903, 'number': 75, 'closed': datetime.datetime(2021, 9, 10, 4, 3, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 4, 23, 40, 44, tzinfo=datetime.timezone.utc), 'time_taken': 447787.0, 'time_delta': '5 days, 4:23:07', 'additions': 29, 'deletions': 29, 'state': 'closed'}, {'id': 726409974, 'number': 72, 'closed': datetime.datetime(2021, 9, 11, 3, 41, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 3, 1, 15, 14, tzinfo=datetime.timezone.utc), 'time_taken': 699995.0, 'time_delta': '8 days, 2:26:35', 'additions': 17, 'deletions': 12, 'state': 'closed'}, {'id': 717076265, 'number': 69, 'closed': datetime.datetime(2021, 9, 29, 21, 23, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 21, 2, 36, 45, tzinfo=datetime.timezone.utc), 'time_taken': 3437227.0, 'time_delta': '39 days, 18:47:07', 'additions': 2191, 'deletions': 7, 'state': 'closed'}, {'id': 709562882, 'number': 67, 'closed': datetime.datetime(2021, 8, 13, 18, 32, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 20, 15, 3, tzinfo=datetime.timezone.utc), 'time_taken': 166668.0, 'time_delta': '1 day, 22:17:48', 'additions': 24, 'deletions': 9, 'state': 'closed'}, {'id': 707835928, 'number': 65, 'closed': datetime.datetime(2021, 8, 11, 19, 13, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 23, 8, 52, tzinfo=datetime.timezone.utc), 'time_taken': 72279.0, 'time_delta': '20:04:39', 'additions': 112, 'deletions': 26, 'state': 'closed'}, {'id': 707006139, 'number': 64, 'closed': datetime.datetime(2021, 8, 19, 16, 57, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 3, 52, 51, tzinfo=datetime.timezone.utc), 'time_taken': 824705.0, 'time_delta': '9 days, 13:05:05', 'additions': 27701, 'deletions': 6, 'state': 'closed'}, {'id': 702938599, 'number': 62, 'closed': datetime.datetime(2021, 8, 8, 4, 23, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 4, 4, 5, 7, tzinfo=datetime.timezone.utc), 'time_taken': 346683.0, 'time_delta': '4 days, 0:18:03', 'additions': 17257, 'deletions': 59, 'state': 'closed'}, {'id': 699923969, 'number': 61, 'closed': datetime.datetime(2021, 7, 30, 21, 6, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 0, 41, 38, tzinfo=datetime.timezone.utc), 'time_taken': 73463.0, 'time_delta': '20:24:23', 'additions': 577, 'deletions': 18, 'state': 'closed'}, {'id': 697553947, 'number': 57, 'closed': datetime.datetime(2021, 7, 28, 5, 34, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 5, 45, 18, tzinfo=datetime.timezone.utc), 'time_taken': 85727.0, 'time_delta': '23:48:47', 'additions': 174, 'deletions': 60, 'state': 'closed'}, {'id': 696407279, 'number': 55, 'closed': datetime.datetime(2021, 7, 25, 0, 32, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 24, 21, 21, 59, tzinfo=datetime.timezone.utc), 'time_taken': 11431.0, 'time_delta': '3:10:31', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 694933853, 'number': 52, 'closed': datetime.datetime(2023, 12, 29, 2, 45, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 22, 7, 27, 6, tzinfo=datetime.timezone.utc), 'time_taken': 76879100.0, 'time_delta': '889 days, 19:18:20', 'additions': 183, 'deletions': 42, 'state': 'closed'}, {'id': 691804237, 'number': 49, 'closed': datetime.datetime(2021, 7, 23, 3, 30, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 0, 38, 2, tzinfo=datetime.timezone.utc), 'time_taken': 528734.0, 'time_delta': '6 days, 2:52:14', 'additions': 43, 'deletions': 16, 'state': 'closed'}, {'id': 691802580, 'number': 48, 'closed': datetime.datetime(2021, 8, 2, 21, 32, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 0, 28, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1458204.0, 'time_delta': '16 days, 21:03:24', 'additions': 316, 'deletions': 16, 'state': 'closed'}, {'id': 684053162, 'number': 44, 'closed': datetime.datetime(2021, 7, 6, 4, 47, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 4, 36, 15, tzinfo=datetime.timezone.utc), 'time_taken': 690.0, 'time_delta': '0:11:30', 'additions': 61, 'deletions': 56, 'state': 'closed'}, {'id': 684044712, 'number': 43, 'closed': datetime.datetime(2021, 7, 14, 1, 51, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 4, 9, 48, tzinfo=datetime.timezone.utc), 'time_taken': 682931.0, 'time_delta': '7 days, 21:42:11', 'additions': 285, 'deletions': 61, 'state': 'closed'}, {'id': 679552675, 'number': 40, 'closed': datetime.datetime(2021, 7, 6, 2, 19, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 29, 3, 19, 13, tzinfo=datetime.timezone.utc), 'time_taken': 601188.0, 'time_delta': '6 days, 22:59:48', 'additions': 139, 'deletions': 99, 'state': 'closed'}, {'id': 678438197, 'number': 38, 'closed': datetime.datetime(2021, 6, 30, 1, 42, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 27, 1, 19, 46, tzinfo=datetime.timezone.utc), 'time_taken': 260544.0, 'time_delta': '3 days, 0:22:24', 'additions': 25, 'deletions': 25, 'state': 'closed'}, {'id': 677488146, 'number': 34, 'closed': datetime.datetime(2021, 6, 25, 22, 38, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 22, 48, 10, tzinfo=datetime.timezone.utc), 'time_taken': 85843.0, 'time_delta': '23:50:43', 'additions': 198, 'deletions': 401, 'state': 'closed'}, {'id': 673785874, 'number': 31, 'closed': datetime.datetime(2021, 6, 25, 21, 36, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 19, 0, 1, 21, tzinfo=datetime.timezone.utc), 'time_taken': 596102.0, 'time_delta': '6 days, 21:35:02', 'additions': 295, 'deletions': 115, 'state': 'closed'}, {'id': 673771214, 'number': 30, 'closed': datetime.datetime(2021, 6, 29, 17, 15, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 23, 3, 24, tzinfo=datetime.timezone.utc), 'time_taken': 929549.0, 'time_delta': '10 days, 18:12:29', 'additions': 17, 'deletions': 20, 'state': 'closed'}, {'id': 673751884, 'number': 29, 'closed': datetime.datetime(2021, 6, 18, 22, 6, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 21, 57, 13, tzinfo=datetime.timezone.utc), 'time_taken': 586.0, 'time_delta': '0:09:46', 'additions': 0, 'deletions': 176, 'state': 'closed'}, {'id': 673162668, 'number': 25, 'closed': datetime.datetime(2021, 6, 19, 0, 13, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 4, 47, 53, tzinfo=datetime.timezone.utc), 'time_taken': 69957.0, 'time_delta': '19:25:57', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 673149126, 'number': 23, 'closed': datetime.datetime(2021, 6, 18, 4, 19, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 4, 9, 4, tzinfo=datetime.timezone.utc), 'time_taken': 620.0, 'time_delta': '0:10:20', 'additions': 34, 'deletions': 35, 'state': 'closed'}, {'id': 669720178, 'number': 20, 'closed': datetime.datetime(2021, 6, 15, 2, 31, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 16, 48, 17, tzinfo=datetime.timezone.utc), 'time_taken': 34985.0, 'time_delta': '9:43:05', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 668969887, 'number': 15, 'closed': datetime.datetime(2021, 6, 13, 8, 6, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 13, 0, 29, 52, tzinfo=datetime.timezone.utc), 'time_taken': 27408.0, 'time_delta': '7:36:48', 'additions': 121, 'deletions': 12, 'state': 'closed'}, {'id': 667714637, 'number': 14, 'closed': datetime.datetime(2021, 6, 11, 6, 59, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 11, 6, 4, 7, tzinfo=datetime.timezone.utc), 'time_taken': 3316.0, 'time_delta': '0:55:16', 'additions': 13, 'deletions': 12, 'state': 'closed'}, {'id': 667550229, 'number': 13, 'closed': datetime.datetime(2021, 6, 16, 15, 1, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 11, 0, 27, 21, tzinfo=datetime.timezone.utc), 'time_taken': 484466.0, 'time_delta': '5 days, 14:34:26', 'additions': 11261, 'deletions': 93, 'state': 'closed'}, {'id': 664150624, 'number': 9, 'closed': datetime.datetime(2021, 6, 9, 0, 19, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 2, 58, 32, tzinfo=datetime.timezone.utc), 'time_taken': 76832.0, 'time_delta': '21:20:32', 'additions': 19497, 'deletions': 20, 'state': 'closed'}, {'id': 663945384, 'number': 8, 'closed': datetime.datetime(2021, 6, 13, 0, 42, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 7, 22, 9, 20, tzinfo=datetime.timezone.utc), 'time_taken': 441177.0, 'time_delta': '5 days, 2:32:57', 'additions': 54220, 'deletions': 64, 'state': 'closed'}, {'id': 659338293, 'number': 5, 'closed': datetime.datetime(2021, 6, 4, 2, 22, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 1, 21, 0, 6, tzinfo=datetime.timezone.utc), 'time_taken': 192122.0, 'time_delta': '2 days, 5:22:02', 'additions': 159, 'deletions': 77, 'state': 'closed'}, {'id': 659332409, 'number': 4, 'closed': datetime.datetime(2021, 6, 4, 2, 34, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 1, 20, 49, 3, tzinfo=datetime.timezone.utc), 'time_taken': 193508.0, 'time_delta': '2 days, 5:45:08', 'additions': 30, 'deletions': 13, 'state': 'closed'}]"
