pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1009704801,Issue/91/zlibtransport integration,"* Add the alternative zlib implementation - muzic
* Add tests for muzic
* Add options to enable muzic
* Add tests for TZlibTransport
* Add options to enable TZlibTransport",True,123,https://api.github.com/repos/zephyrproject-rtos/gsoc-2022-thrift/pulls/123,https://github.com/zephyrproject-rtos/gsoc-2022-thrift/pull/123,closed,2548,1,18,7,3,26,0,0,[],2022-07-27 13:58:11+00:00,2022-08-02 02:20:57+00:00,476566.0,"5 days, 12:22:46","[{'comment_id': 931577449, 'comment_body': 'This table optimizes prematurely for speed instead of size.\n\nTypically things in Zephyr want to be option mixed for either size or both size and speed.\n\nIt would be an interesting exercise to demonstrate the case where you optimize for size (or both speed and size).', 'comment_created': datetime.datetime(2022, 7, 27, 21, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932673752, 'comment_body': 'What do these variable names mean? Please use descriptive variable names or document the function. ', 'comment_created': datetime.datetime(2022, 7, 28, 21, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932696369, 'comment_body': 'Since this is a config that is really only used for ZlibTransport, it should be listed in the extra_configs field in test case.yaml', 'comment_created': datetime.datetime(2022, 7, 28, 21, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932698525, 'comment_body': 'Might not be great to allocate such a large amount on the stack.\n\nPlease make static / shared among all test cases.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932699531, 'comment_body': 'Please make static / shared among all test cases.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932699843, 'comment_body': 'Way too large for the stack.\nPlease make static / shared among all test cases.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932700775, 'comment_body': 'Please make static / shared among all test cases.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932700940, 'comment_body': 'Please make static / shared among all test cases.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932701162, 'comment_body': 'Please make static / shared among all test cases.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932701548, 'comment_body': 'Please make static / shared among all test cases.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932702330, 'comment_body': 'Please make this static.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932707210, 'comment_body': 'VLAs are very bad, and you really do not want to allocate this on the stack', 'comment_created': datetime.datetime(2022, 7, 28, 21, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932709330, 'comment_body': 'This is going to be extremely costly. Is there no way to determine how many bytes might be needed and then make 1 large dynamic allocation?', 'comment_created': datetime.datetime(2022, 7, 28, 21, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932710979, 'comment_body': ""The default stack sizes are not enough because they are being smashed in most test functions.\n\nAny time an array is declared at function scope without the `static` keyword, it's using stack memory.\n\nAdditionally, using a variable to declare the size of an array inside of a function is called a VLA. They are generally considered very bad.\n\nA better solution would be to make the buffer static at file scope (i.e statically allocated in neither heap or stack memory but in the .data section)."", 'comment_created': datetime.datetime(2022, 7, 28, 21, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932793342, 'comment_body': ""This bothered me as well. The underlying deflate implementation comes from uzlib, and it used a dynamically growing buffer for output. The size of this buffer grows linearly instead of exponentially (and what even the worse is it doesn't check if `realloc` succeed or not). I recognized the performance impact but decided to leave it untouched back then, to focus on the compatibility layer with Zlib. It worth some effort to rewrite the output buffer of uzlib's deflate implementation."", 'comment_created': datetime.datetime(2022, 7, 29, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'SdtElectronics', 'type': 'User'}, {'comment_id': 932816509, 'comment_body': 'I don\'t think this is something worth optimizing now either. Functionality first. I would make a note of this in #91 too. Also, please remember to make a note about the 32kB buffer size in #91. Anything that is essentially converted to a deferred problem or ""for later optimization"" should be explicitly noted (just so it is not forgotten).', 'comment_created': datetime.datetime(2022, 7, 29, 2, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932822350, 'comment_body': ""Sure. In fact, I have implemented the scalable buffer yesterday, and it doesn't require a 32kB buffer (from the beginning) now. But I think it's better to make it into another PR, as there are possibly some improvements for the current implementation. I'll make a note for this first."", 'comment_created': datetime.datetime(2022, 7, 29, 2, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'SdtElectronics', 'type': 'User'}, {'comment_id': 933775863, 'comment_body': 'Please add Mei here as well for consistence ', 'comment_created': datetime.datetime(2022, 7, 30, 9, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 934434071, 'comment_body': 'Is `muzic` supposed to be available outside this module? (i.e. should you be able to use these headers directly in your app?)\r\n\r\nIf not, this should use `zephyr_library_include_directories()`.', 'comment_created': datetime.datetime(2022, 8, 1, 11, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'stephanosio', 'type': 'User'}, {'comment_id': 934437466, 'comment_body': 'These style/format changes should be in their own commit; that way, it is easy to identify which ""functional"" changes are actually required to make this work without all the noise.\r\n\r\np.s. the `uzlib_comp*` change looks questionable since this is in a C (not C++) header, but not really a showstopper.', 'comment_created': datetime.datetime(2022, 8, 1, 11, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'stephanosio', 'type': 'User'}, {'comment_id': 934438169, 'comment_body': 'simply adding `/* SPDX-License-Identifier: Zlib */` should be enough.', 'comment_created': datetime.datetime(2022, 8, 1, 11, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'stephanosio', 'type': 'User'}, {'comment_id': 934439716, 'comment_body': 'This is a really strange style choice for C (i.e. not C++) code, but I guess we can tolerate it for this specific module.', 'comment_created': datetime.datetime(2022, 8, 1, 11, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'stephanosio', 'type': 'User'}, {'comment_id': 934626820, 'comment_body': ""We shouldn't really need this here."", 'comment_created': datetime.datetime(2022, 8, 1, 14, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 934631397, 'comment_body': 'please run `git mv lib/thrift/muzic/src/*.c lib/thrift/src` and `mkdir lib/thrift/include/muzic; git mv lib/thrift/muzic/include/*.h lib/thrift/include/muzic`. \r\n\r\nIn relevant source files, you could probably adjust e.g. `#include ""uzlib.h""` to `#include <muzic/uzlib.h>`. ', 'comment_created': datetime.datetime(2022, 8, 1, 15, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 934633126, 'comment_body': 'Looks like this is missing `_TRANSPORT` at the end\r\n\r\nAlso, you can likely combine these two `zlib_library_sources_ifdef()` blocks into one.', 'comment_created': datetime.datetime(2022, 8, 1, 15, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 934634146, 'comment_body': ""Can we remove this since it's synonymous with `THRIFT_ZLIB_TRANSPORT`?"", 'comment_created': datetime.datetime(2022, 8, 1, 15, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}]","[{'commit_sha': 'b95924060e933b9ef508c4133bfbd05678e13f5a', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '196c9a1d350e4d9c112f4e68eb37809d48afece7', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf801ce9999c73590fbb4e9f093e048b620e8e23', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f75d462e9450601e792777a65f475f2e297c3e2', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b86be6609ede584cbc213c35565a3d174644b77', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61c1a70c92244c765c535c94c6ef2ae44fdf16c3', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc960dc2207e3093206f190e04d31a9b09690ea2', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}]",Young,35762924,,User,,55,,6,53
1022723739,TSSLSocket: initial implementation,"* Use mbedTLS in place of OpenSSL to provide Transport Layer Security
* Add sample application for TSSLSocket",True,126,https://api.github.com/repos/zephyrproject-rtos/gsoc-2022-thrift/pulls/126,https://github.com/zephyrproject-rtos/gsoc-2022-thrift/pull/126,closed,1687,7,15,4,9,31,0,0,[],2022-08-10 13:37:00+00:00,2022-08-18 02:56:38+00:00,652778.0,"7 days, 13:19:38","[{'comment_id': 943818159, 'comment_body': 'This is going to need to be changed to `<zephyr/posix/netdb.h>` because of upstream.', 'comment_created': datetime.datetime(2022, 8, 11, 18, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 943818384, 'comment_body': 'This is going to need to be changed to `<zephyr/posix/sys/socket.h>` because of upstream.', 'comment_created': datetime.datetime(2022, 8, 11, 18, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 943818846, 'comment_body': 'This is going to need to be changed to `<zephyr/posix/unistd.h>` because of upstream.', 'comment_created': datetime.datetime(2022, 8, 11, 18, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944028500, 'comment_body': 'This has to be changed to `<zephyr/zephyr.h>` due to upstream changes.', 'comment_created': datetime.datetime(2022, 8, 12, 0, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944028608, 'comment_body': 'This has to be changed to `<zephyr/zephyr.h>` due to upstream changes.', 'comment_created': datetime.datetime(2022, 8, 12, 0, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944030571, 'comment_body': 'I think this logic is wrong - this file is always the client whether or it is being built for Zephyr or the host.', 'comment_created': datetime.datetime(2022, 8, 12, 0, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944030820, 'comment_body': 'I think this logic is wrong - this file is always the server whether or it is being built for Zephyr or the host.', 'comment_created': datetime.datetime(2022, 8, 12, 0, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944050972, 'comment_body': ""The naming here is very confusing, cause I didn't realize a peculiarity here initially: The client has to verify the hostname (the field FQDN in the certificate) of the server, and when the server is run under QEMU, the hostname (192.0.2.1) differs from the case it is run natively (192.0.2.2). The difference between these two certificates is not client and server, but the FQDN encoded in them. They need less confusing names which reflect this difference."", 'comment_created': datetime.datetime(2022, 8, 12, 1, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'SdtElectronics', 'type': 'User'}, {'comment_id': 944445192, 'comment_body': 'Oh - can you modify this slightly?\r\n\r\n```\r\n      Enable this option to support Apache Thrift\r\n\r\nif THRIFT\r\n...\r\ndepends on MBEDTLS\r\ndepends on MBEDTLS_PEM_CERTIFICATE_FORMAT\r\ndepends on NET_SOCKETS_SOCKOPT_TLS\r\n...\r\n     Enable this option to support TZlibTransport for Thrift\r\n\r\nendif # THRIFT\r\n```\r\n`THRIFT` is implicit due to the `if THRIFT` above', 'comment_created': datetime.datetime(2022, 8, 12, 13, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944445645, 'comment_body': 'can just be removed.', 'comment_created': datetime.datetime(2022, 8, 12, 13, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944446223, 'comment_body': ""please don't comment-out SSLv2 - if it's unsupported, throw an exception in the implementation."", 'comment_created': datetime.datetime(2022, 8, 12, 13, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944450648, 'comment_body': 'can probably remove', 'comment_created': datetime.datetime(2022, 8, 12, 13, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944452279, 'comment_body': '`<zephyr/..>` headers probably do not need to be included here, likely just the `.cpp` files', 'comment_created': datetime.datetime(2022, 8, 12, 13, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944453032, 'comment_body': ""I think I see what's happening - rather than removing the `ctx` parameter from various `TSSLSocket()` constructors, I would suggest defining it here to be an empty class or struct, depending on which is more advantageous. We want the `TSSLSocket` method signatures to remain approximately the same whether it's being built for Linux, macOS, or Zephyr.\r\n\r\nMaybe the SSLContext class could hold a file descriptor? That would be a good way to change out the FD for one end of a socketpair, for test cases."", 'comment_created': datetime.datetime(2022, 8, 12, 13, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944455633, 'comment_body': '`ThriftTLScertificateType` can probably just be declared inside `TSSLServerSocket.cpp`', 'comment_created': datetime.datetime(2022, 8, 12, 13, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944463784, 'comment_body': ""Ah, I see - please undelete the following methods:\r\n```\r\n-  /**\r\n-   * Authorize peer access after SSL handshake completes.\r\n-   */\r\n-  virtual void authorize();\r\n-  /**\r\n-   * Initiate SSL handshake if not already initiated.\r\n-   */\r\n-  void initializeHandshake();\r\n-  /**\r\n-   * Initiate SSL handshake params.\r\n-   */\r\n-  void initializeHandshakeParams();\r\n-  /**\r\n-   * Check if  SSL handshake is completed or not.\r\n-   */\r\n-  bool checkHandshake();\r\n-  /**\r\n-   * Waits for an socket or shutdown event.\r\n-   *\r\n-   * @throw TTransportException::INTERRUPTED if interrupted is signaled.\r\n-   *\r\n-   * @return TSSL_EINTR if EINTR happened on the underlying socket\r\n-   *         TSSL_DATA  if data is available on the socket.\r\n-   */\r\n-  unsigned int waitForEvent(bool wantRead);\r\n```\r\n\r\nEven if they do nothing, it's fine. I guess the only tricky one would be `waitForEvent()`, but it might be possible to use `poll(2)` to achieve what you need. "", 'comment_created': datetime.datetime(2022, 8, 12, 13, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944476353, 'comment_body': 'The zephyr way of setting authenticate mode requires the socket is set up first. However, the thrift API made this setting exposed by the factory of TSSLSocket, which exists before any TSSLSocket is created. Therefore, the factory has to remember the authenticate mode set by the user, and pass it to the TSSLSocket it creates. As the factory is set as a friend class of TSSLSocket, it can directly set the mode member of TSSLSocket, but I decided to make a function for this nevertheless. It can be removed and the factory have to directly set the field of TSSLSocket creates.', 'comment_created': datetime.datetime(2022, 8, 12, 13, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'SdtElectronics', 'type': 'User'}, {'comment_id': 944477173, 'comment_body': ""Not sure about these - I don't think we should create additional public methods if we can avoid it."", 'comment_created': datetime.datetime(2022, 8, 12, 13, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944480187, 'comment_body': 'Also note, that this was removed, which might actually be kind of useful for us.\r\n```\r\n-  std::shared_ptr<SSLContext> ctx_;\r\n```', 'comment_created': datetime.datetime(2022, 8, 12, 13, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944480634, 'comment_body': 'This might be a good candidate to put inside of our own `SSLContext`.', 'comment_created': datetime.datetime(2022, 8, 12, 13, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944481286, 'comment_body': 'This one I would change from an inline definition to out-of-line (in the `.cpp` file).', 'comment_created': datetime.datetime(2022, 8, 12, 13, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944481530, 'comment_body': 'This one I would change from an inline definition to out-of-line (in the `.cpp` file).', 'comment_created': datetime.datetime(2022, 8, 12, 13, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944482030, 'comment_body': 'We can probably keep `ctx_` and define our own `SSLContext` class.', 'comment_created': datetime.datetime(2022, 8, 12, 13, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944482606, 'comment_body': ""If this is part of the `SSLContext ctx_` then we don't need a dedicated field here."", 'comment_created': datetime.datetime(2022, 8, 12, 13, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944524926, 'comment_body': ""I didn't modify this - it is commented out in the original source. In current implementation this enum type doesn't have any effect, as TLSv1_2 is hard coded into the open method."", 'comment_created': datetime.datetime(2022, 8, 12, 14, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'SdtElectronics', 'type': 'User'}, {'comment_id': 944594875, 'comment_body': ""I see - I wouldn't necessarily hard-code it. I think throwing an exception might be better."", 'comment_created': datetime.datetime(2022, 8, 12, 15, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 945033386, 'comment_body': 'Selection of TLS protocol is now implemented. It is wrapped in `SSLContext` as well.', 'comment_created': datetime.datetime(2022, 8, 13, 2, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'SdtElectronics', 'type': 'User'}, {'comment_id': 945170380, 'comment_body': 'I see why you had this in the public header now - because it\'s shared with `TSSLSocket.cpp`. \r\n\r\nYou can put it in a common header ""ThriftTLScertificateType.h"" or something like that, and share it between the two files, but it\'s probably best to keep it out of the public / exported headers.', 'comment_created': datetime.datetime(2022, 8, 13, 17, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 948513453, 'comment_body': 'Does this need to be static?', 'comment_created': datetime.datetime(2022, 8, 17, 23, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 948514620, 'comment_body': 'Does this need to be static?', 'comment_created': datetime.datetime(2022, 8, 17, 23, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 948519289, 'comment_body': ""I think there are 2 port variables that don't need to be static. Not a huge deal though. \n\nLGTM"", 'comment_created': datetime.datetime(2022, 8, 17, 23, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}]","[{'commit_sha': 'e16aa8e7b782d32149c604cfb1053fd5d51eee06', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3558a6e7432bc54fa0024e2711484932ab6d84c2', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee10219c923f01191b4694587d2bfcc6489b1b52', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9ade402a94ee0bea355ff425005c2e7863fc05f', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}]",Young,35762924,,User,,55,,6,53
1009704801,Issue/91/zlibtransport integration,"* Add the alternative zlib implementation - muzic
* Add tests for muzic
* Add options to enable muzic
* Add tests for TZlibTransport
* Add options to enable TZlibTransport",True,123,https://api.github.com/repos/zephyrproject-rtos/gsoc-2022-thrift/pulls/123,https://github.com/zephyrproject-rtos/gsoc-2022-thrift/pull/123,closed,2548,1,18,7,3,26,0,0,[],2022-07-27 13:58:11+00:00,2022-08-02 02:20:57+00:00,476566.0,"5 days, 12:22:46","[{'comment_id': 931577449, 'comment_body': 'This table optimizes prematurely for speed instead of size.\n\nTypically things in Zephyr want to be option mixed for either size or both size and speed.\n\nIt would be an interesting exercise to demonstrate the case where you optimize for size (or both speed and size).', 'comment_created': datetime.datetime(2022, 7, 27, 21, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932673752, 'comment_body': 'What do these variable names mean? Please use descriptive variable names or document the function. ', 'comment_created': datetime.datetime(2022, 7, 28, 21, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932696369, 'comment_body': 'Since this is a config that is really only used for ZlibTransport, it should be listed in the extra_configs field in test case.yaml', 'comment_created': datetime.datetime(2022, 7, 28, 21, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932698525, 'comment_body': 'Might not be great to allocate such a large amount on the stack.\n\nPlease make static / shared among all test cases.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932699531, 'comment_body': 'Please make static / shared among all test cases.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932699843, 'comment_body': 'Way too large for the stack.\nPlease make static / shared among all test cases.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932700775, 'comment_body': 'Please make static / shared among all test cases.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932700940, 'comment_body': 'Please make static / shared among all test cases.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932701162, 'comment_body': 'Please make static / shared among all test cases.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932701548, 'comment_body': 'Please make static / shared among all test cases.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932702330, 'comment_body': 'Please make this static.', 'comment_created': datetime.datetime(2022, 7, 28, 21, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932707210, 'comment_body': 'VLAs are very bad, and you really do not want to allocate this on the stack', 'comment_created': datetime.datetime(2022, 7, 28, 21, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932709330, 'comment_body': 'This is going to be extremely costly. Is there no way to determine how many bytes might be needed and then make 1 large dynamic allocation?', 'comment_created': datetime.datetime(2022, 7, 28, 21, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932710979, 'comment_body': ""The default stack sizes are not enough because they are being smashed in most test functions.\n\nAny time an array is declared at function scope without the `static` keyword, it's using stack memory.\n\nAdditionally, using a variable to declare the size of an array inside of a function is called a VLA. They are generally considered very bad.\n\nA better solution would be to make the buffer static at file scope (i.e statically allocated in neither heap or stack memory but in the .data section)."", 'comment_created': datetime.datetime(2022, 7, 28, 21, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932793342, 'comment_body': ""This bothered me as well. The underlying deflate implementation comes from uzlib, and it used a dynamically growing buffer for output. The size of this buffer grows linearly instead of exponentially (and what even the worse is it doesn't check if `realloc` succeed or not). I recognized the performance impact but decided to leave it untouched back then, to focus on the compatibility layer with Zlib. It worth some effort to rewrite the output buffer of uzlib's deflate implementation."", 'comment_created': datetime.datetime(2022, 7, 29, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'SdtElectronics', 'type': 'User'}, {'comment_id': 932816509, 'comment_body': 'I don\'t think this is something worth optimizing now either. Functionality first. I would make a note of this in #91 too. Also, please remember to make a note about the 32kB buffer size in #91. Anything that is essentially converted to a deferred problem or ""for later optimization"" should be explicitly noted (just so it is not forgotten).', 'comment_created': datetime.datetime(2022, 7, 29, 2, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 932822350, 'comment_body': ""Sure. In fact, I have implemented the scalable buffer yesterday, and it doesn't require a 32kB buffer (from the beginning) now. But I think it's better to make it into another PR, as there are possibly some improvements for the current implementation. I'll make a note for this first."", 'comment_created': datetime.datetime(2022, 7, 29, 2, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'SdtElectronics', 'type': 'User'}, {'comment_id': 933775863, 'comment_body': 'Please add Mei here as well for consistence ', 'comment_created': datetime.datetime(2022, 7, 30, 9, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 934434071, 'comment_body': 'Is `muzic` supposed to be available outside this module? (i.e. should you be able to use these headers directly in your app?)\r\n\r\nIf not, this should use `zephyr_library_include_directories()`.', 'comment_created': datetime.datetime(2022, 8, 1, 11, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'stephanosio', 'type': 'User'}, {'comment_id': 934437466, 'comment_body': 'These style/format changes should be in their own commit; that way, it is easy to identify which ""functional"" changes are actually required to make this work without all the noise.\r\n\r\np.s. the `uzlib_comp*` change looks questionable since this is in a C (not C++) header, but not really a showstopper.', 'comment_created': datetime.datetime(2022, 8, 1, 11, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'stephanosio', 'type': 'User'}, {'comment_id': 934438169, 'comment_body': 'simply adding `/* SPDX-License-Identifier: Zlib */` should be enough.', 'comment_created': datetime.datetime(2022, 8, 1, 11, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'stephanosio', 'type': 'User'}, {'comment_id': 934439716, 'comment_body': 'This is a really strange style choice for C (i.e. not C++) code, but I guess we can tolerate it for this specific module.', 'comment_created': datetime.datetime(2022, 8, 1, 11, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'stephanosio', 'type': 'User'}, {'comment_id': 934626820, 'comment_body': ""We shouldn't really need this here."", 'comment_created': datetime.datetime(2022, 8, 1, 14, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 934631397, 'comment_body': 'please run `git mv lib/thrift/muzic/src/*.c lib/thrift/src` and `mkdir lib/thrift/include/muzic; git mv lib/thrift/muzic/include/*.h lib/thrift/include/muzic`. \r\n\r\nIn relevant source files, you could probably adjust e.g. `#include ""uzlib.h""` to `#include <muzic/uzlib.h>`. ', 'comment_created': datetime.datetime(2022, 8, 1, 15, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 934633126, 'comment_body': 'Looks like this is missing `_TRANSPORT` at the end\r\n\r\nAlso, you can likely combine these two `zlib_library_sources_ifdef()` blocks into one.', 'comment_created': datetime.datetime(2022, 8, 1, 15, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 934634146, 'comment_body': ""Can we remove this since it's synonymous with `THRIFT_ZLIB_TRANSPORT`?"", 'comment_created': datetime.datetime(2022, 8, 1, 15, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}]","[{'commit_sha': 'b95924060e933b9ef508c4133bfbd05678e13f5a', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '196c9a1d350e4d9c112f4e68eb37809d48afece7', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf801ce9999c73590fbb4e9f093e048b620e8e23', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f75d462e9450601e792777a65f475f2e297c3e2', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b86be6609ede584cbc213c35565a3d174644b77', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61c1a70c92244c765c535c94c6ef2ae44fdf16c3', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc960dc2207e3093206f190e04d31a9b09690ea2', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}]",Young,35762924,,User,,55,,6,53
1022723739,TSSLSocket: initial implementation,"* Use mbedTLS in place of OpenSSL to provide Transport Layer Security
* Add sample application for TSSLSocket",True,126,https://api.github.com/repos/zephyrproject-rtos/gsoc-2022-thrift/pulls/126,https://github.com/zephyrproject-rtos/gsoc-2022-thrift/pull/126,closed,1687,7,15,4,9,31,0,0,[],2022-08-10 13:37:00+00:00,2022-08-18 02:56:38+00:00,652778.0,"7 days, 13:19:38","[{'comment_id': 943818159, 'comment_body': 'This is going to need to be changed to `<zephyr/posix/netdb.h>` because of upstream.', 'comment_created': datetime.datetime(2022, 8, 11, 18, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 943818384, 'comment_body': 'This is going to need to be changed to `<zephyr/posix/sys/socket.h>` because of upstream.', 'comment_created': datetime.datetime(2022, 8, 11, 18, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 943818846, 'comment_body': 'This is going to need to be changed to `<zephyr/posix/unistd.h>` because of upstream.', 'comment_created': datetime.datetime(2022, 8, 11, 18, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944028500, 'comment_body': 'This has to be changed to `<zephyr/zephyr.h>` due to upstream changes.', 'comment_created': datetime.datetime(2022, 8, 12, 0, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944028608, 'comment_body': 'This has to be changed to `<zephyr/zephyr.h>` due to upstream changes.', 'comment_created': datetime.datetime(2022, 8, 12, 0, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944030571, 'comment_body': 'I think this logic is wrong - this file is always the client whether or it is being built for Zephyr or the host.', 'comment_created': datetime.datetime(2022, 8, 12, 0, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944030820, 'comment_body': 'I think this logic is wrong - this file is always the server whether or it is being built for Zephyr or the host.', 'comment_created': datetime.datetime(2022, 8, 12, 0, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944050972, 'comment_body': ""The naming here is very confusing, cause I didn't realize a peculiarity here initially: The client has to verify the hostname (the field FQDN in the certificate) of the server, and when the server is run under QEMU, the hostname (192.0.2.1) differs from the case it is run natively (192.0.2.2). The difference between these two certificates is not client and server, but the FQDN encoded in them. They need less confusing names which reflect this difference."", 'comment_created': datetime.datetime(2022, 8, 12, 1, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'SdtElectronics', 'type': 'User'}, {'comment_id': 944445192, 'comment_body': 'Oh - can you modify this slightly?\r\n\r\n```\r\n      Enable this option to support Apache Thrift\r\n\r\nif THRIFT\r\n...\r\ndepends on MBEDTLS\r\ndepends on MBEDTLS_PEM_CERTIFICATE_FORMAT\r\ndepends on NET_SOCKETS_SOCKOPT_TLS\r\n...\r\n     Enable this option to support TZlibTransport for Thrift\r\n\r\nendif # THRIFT\r\n```\r\n`THRIFT` is implicit due to the `if THRIFT` above', 'comment_created': datetime.datetime(2022, 8, 12, 13, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944445645, 'comment_body': 'can just be removed.', 'comment_created': datetime.datetime(2022, 8, 12, 13, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944446223, 'comment_body': ""please don't comment-out SSLv2 - if it's unsupported, throw an exception in the implementation."", 'comment_created': datetime.datetime(2022, 8, 12, 13, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944450648, 'comment_body': 'can probably remove', 'comment_created': datetime.datetime(2022, 8, 12, 13, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944452279, 'comment_body': '`<zephyr/..>` headers probably do not need to be included here, likely just the `.cpp` files', 'comment_created': datetime.datetime(2022, 8, 12, 13, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944453032, 'comment_body': ""I think I see what's happening - rather than removing the `ctx` parameter from various `TSSLSocket()` constructors, I would suggest defining it here to be an empty class or struct, depending on which is more advantageous. We want the `TSSLSocket` method signatures to remain approximately the same whether it's being built for Linux, macOS, or Zephyr.\r\n\r\nMaybe the SSLContext class could hold a file descriptor? That would be a good way to change out the FD for one end of a socketpair, for test cases."", 'comment_created': datetime.datetime(2022, 8, 12, 13, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944455633, 'comment_body': '`ThriftTLScertificateType` can probably just be declared inside `TSSLServerSocket.cpp`', 'comment_created': datetime.datetime(2022, 8, 12, 13, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944463784, 'comment_body': ""Ah, I see - please undelete the following methods:\r\n```\r\n-  /**\r\n-   * Authorize peer access after SSL handshake completes.\r\n-   */\r\n-  virtual void authorize();\r\n-  /**\r\n-   * Initiate SSL handshake if not already initiated.\r\n-   */\r\n-  void initializeHandshake();\r\n-  /**\r\n-   * Initiate SSL handshake params.\r\n-   */\r\n-  void initializeHandshakeParams();\r\n-  /**\r\n-   * Check if  SSL handshake is completed or not.\r\n-   */\r\n-  bool checkHandshake();\r\n-  /**\r\n-   * Waits for an socket or shutdown event.\r\n-   *\r\n-   * @throw TTransportException::INTERRUPTED if interrupted is signaled.\r\n-   *\r\n-   * @return TSSL_EINTR if EINTR happened on the underlying socket\r\n-   *         TSSL_DATA  if data is available on the socket.\r\n-   */\r\n-  unsigned int waitForEvent(bool wantRead);\r\n```\r\n\r\nEven if they do nothing, it's fine. I guess the only tricky one would be `waitForEvent()`, but it might be possible to use `poll(2)` to achieve what you need. "", 'comment_created': datetime.datetime(2022, 8, 12, 13, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944476353, 'comment_body': 'The zephyr way of setting authenticate mode requires the socket is set up first. However, the thrift API made this setting exposed by the factory of TSSLSocket, which exists before any TSSLSocket is created. Therefore, the factory has to remember the authenticate mode set by the user, and pass it to the TSSLSocket it creates. As the factory is set as a friend class of TSSLSocket, it can directly set the mode member of TSSLSocket, but I decided to make a function for this nevertheless. It can be removed and the factory have to directly set the field of TSSLSocket creates.', 'comment_created': datetime.datetime(2022, 8, 12, 13, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'SdtElectronics', 'type': 'User'}, {'comment_id': 944477173, 'comment_body': ""Not sure about these - I don't think we should create additional public methods if we can avoid it."", 'comment_created': datetime.datetime(2022, 8, 12, 13, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944480187, 'comment_body': 'Also note, that this was removed, which might actually be kind of useful for us.\r\n```\r\n-  std::shared_ptr<SSLContext> ctx_;\r\n```', 'comment_created': datetime.datetime(2022, 8, 12, 13, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944480634, 'comment_body': 'This might be a good candidate to put inside of our own `SSLContext`.', 'comment_created': datetime.datetime(2022, 8, 12, 13, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944481286, 'comment_body': 'This one I would change from an inline definition to out-of-line (in the `.cpp` file).', 'comment_created': datetime.datetime(2022, 8, 12, 13, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944481530, 'comment_body': 'This one I would change from an inline definition to out-of-line (in the `.cpp` file).', 'comment_created': datetime.datetime(2022, 8, 12, 13, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944482030, 'comment_body': 'We can probably keep `ctx_` and define our own `SSLContext` class.', 'comment_created': datetime.datetime(2022, 8, 12, 13, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944482606, 'comment_body': ""If this is part of the `SSLContext ctx_` then we don't need a dedicated field here."", 'comment_created': datetime.datetime(2022, 8, 12, 13, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 944524926, 'comment_body': ""I didn't modify this - it is commented out in the original source. In current implementation this enum type doesn't have any effect, as TLSv1_2 is hard coded into the open method."", 'comment_created': datetime.datetime(2022, 8, 12, 14, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'SdtElectronics', 'type': 'User'}, {'comment_id': 944594875, 'comment_body': ""I see - I wouldn't necessarily hard-code it. I think throwing an exception might be better."", 'comment_created': datetime.datetime(2022, 8, 12, 15, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 945033386, 'comment_body': 'Selection of TLS protocol is now implemented. It is wrapped in `SSLContext` as well.', 'comment_created': datetime.datetime(2022, 8, 13, 2, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'SdtElectronics', 'type': 'User'}, {'comment_id': 945170380, 'comment_body': 'I see why you had this in the public header now - because it\'s shared with `TSSLSocket.cpp`. \r\n\r\nYou can put it in a common header ""ThriftTLScertificateType.h"" or something like that, and share it between the two files, but it\'s probably best to keep it out of the public / exported headers.', 'comment_created': datetime.datetime(2022, 8, 13, 17, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 948513453, 'comment_body': 'Does this need to be static?', 'comment_created': datetime.datetime(2022, 8, 17, 23, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 948514620, 'comment_body': 'Does this need to be static?', 'comment_created': datetime.datetime(2022, 8, 17, 23, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}, {'comment_id': 948519289, 'comment_body': ""I think there are 2 port variables that don't need to be static. Not a huge deal though. \n\nLGTM"", 'comment_created': datetime.datetime(2022, 8, 17, 23, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'cfriedt', 'type': 'User'}]","[{'commit_sha': 'e16aa8e7b782d32149c604cfb1053fd5d51eee06', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3558a6e7432bc54fa0024e2711484932ab6d84c2', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee10219c923f01191b4694587d2bfcc6489b1b52', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9ade402a94ee0bea355ff425005c2e7863fc05f', 'committer_username': 'SdtElectronics', 'committer_name': 'Young', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 24, 9, 36, 18, tzinfo=datetime.timezone.utc)}]",Young,35762924,,User,,55,,6,53

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
468022407,gsoc-2022-thrift,zephyrproject-rtos/gsoc-2022-thrift,C++,2,10,6,3,120,0,1,0,"[{'id': 1041808923, 'number': 141, 'closed': datetime.datetime(2022, 9, 4, 11, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 31, 2, 51, 20, tzinfo=datetime.timezone.utc), 'time_taken': 376420.0, 'time_delta': '4 days, 8:33:40', 'additions': 102, 'deletions': 128, 'state': 'closed'}, {'id': 1040908216, 'number': 138, 'closed': datetime.datetime(2022, 8, 31, 1, 44, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 30, 12, 17, 6, tzinfo=datetime.timezone.utc), 'time_taken': 48423.0, 'time_delta': '13:27:03', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1038878696, 'number': 137, 'closed': datetime.datetime(2022, 8, 30, 11, 45, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 28, 13, 28, 12, tzinfo=datetime.timezone.utc), 'time_taken': 166619.0, 'time_delta': '1 day, 22:16:59', 'additions': 194, 'deletions': 116, 'state': 'closed'}, {'id': 1034256533, 'number': 136, 'closed': datetime.datetime(2022, 8, 23, 23, 42, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 23, 14, 14, 33, tzinfo=datetime.timezone.utc), 'time_taken': 34090.0, 'time_delta': '9:28:10', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1030925315, 'number': 135, 'closed': datetime.datetime(2022, 8, 22, 16, 39, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 19, 9, 9, 43, tzinfo=datetime.timezone.utc), 'time_taken': 286171.0, 'time_delta': '3 days, 7:29:31', 'additions': 222, 'deletions': 14, 'state': 'closed'}, {'id': 1027520176, 'number': 134, 'closed': datetime.datetime(2022, 8, 16, 13, 22, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 16, 11, 51, 34, tzinfo=datetime.timezone.utc), 'time_taken': 5429.0, 'time_delta': '1:30:29', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1025706767, 'number': 133, 'closed': datetime.datetime(2022, 8, 16, 11, 13, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 14, 2, 27, 34, tzinfo=datetime.timezone.utc), 'time_taken': 204335.0, 'time_delta': '2 days, 8:45:35', 'additions': 39, 'deletions': 85, 'state': 'closed'}, {'id': 1022723739, 'number': 126, 'closed': datetime.datetime(2022, 8, 18, 2, 56, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 10, 13, 37, tzinfo=datetime.timezone.utc), 'time_taken': 652778.0, 'time_delta': '7 days, 13:19:38', 'additions': 1687, 'deletions': 7, 'state': 'closed'}, {'id': 1022672633, 'number': 125, 'closed': datetime.datetime(2022, 8, 11, 9, 7, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 10, 12, 54, 54, tzinfo=datetime.timezone.utc), 'time_taken': 72778.0, 'time_delta': '20:12:58', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1014999056, 'number': 124, 'closed': datetime.datetime(2022, 8, 2, 17, 22, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 11, 39, 5, tzinfo=datetime.timezone.utc), 'time_taken': 20629.0, 'time_delta': '5:43:49', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1009704801, 'number': 123, 'closed': datetime.datetime(2022, 8, 2, 2, 20, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 27, 13, 58, 11, tzinfo=datetime.timezone.utc), 'time_taken': 476566.0, 'time_delta': '5 days, 12:22:46', 'additions': 2548, 'deletions': 1, 'state': 'closed'}, {'id': 1008435250, 'number': 122, 'closed': datetime.datetime(2022, 7, 27, 22, 3, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 26, 12, 3, 31, tzinfo=datetime.timezone.utc), 'time_taken': 122379.0, 'time_delta': '1 day, 9:59:39', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1000760988, 'number': 121, 'closed': datetime.datetime(2022, 7, 20, 2, 7, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 19, 13, 8, 35, tzinfo=datetime.timezone.utc), 'time_taken': 46723.0, 'time_delta': '12:58:43', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 997272493, 'number': 120, 'closed': datetime.datetime(2022, 7, 15, 11, 31, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 15, 1, 56, 35, tzinfo=datetime.timezone.utc), 'time_taken': 34487.0, 'time_delta': '9:34:47', 'additions': 25, 'deletions': 3, 'state': 'closed'}, {'id': 994274273, 'number': 117, 'closed': datetime.datetime(2022, 7, 12, 13, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 12, 13, 11, 13, tzinfo=datetime.timezone.utc), 'time_taken': 827.0, 'time_delta': '0:13:47', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 991626179, 'number': 112, 'closed': datetime.datetime(2022, 7, 12, 11, 15, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 8, 12, 45, 24, tzinfo=datetime.timezone.utc), 'time_taken': 340226.0, 'time_delta': '3 days, 22:30:26', 'additions': 5, 'deletions': 34, 'state': 'closed'}, {'id': 988066915, 'number': 111, 'closed': datetime.datetime(2022, 7, 8, 9, 5, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 6, 2, 17, 46, tzinfo=datetime.timezone.utc), 'time_taken': 197291.0, 'time_delta': '2 days, 6:48:11', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 984945299, 'number': 105, 'closed': datetime.datetime(2022, 7, 12, 12, 53, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 1, 13, 5, 20, tzinfo=datetime.timezone.utc), 'time_taken': 949667.0, 'time_delta': '10 days, 23:47:47', 'additions': 781, 'deletions': 2, 'state': 'closed'}, {'id': 977039782, 'number': 97, 'closed': datetime.datetime(2022, 6, 29, 14, 55, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 23, 11, 47, 36, tzinfo=datetime.timezone.utc), 'time_taken': 529698.0, 'time_delta': '6 days, 3:08:18', 'additions': 404, 'deletions': 384, 'state': 'closed'}]"
