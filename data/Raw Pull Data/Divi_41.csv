pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1389026111,feat: allow restoring to different port/host/username,"This PR adds a new feature that allows users to restore to a different port, host, or username. 
This Draft is to show the configuration version for PostgreSQL, I haven't tested this yet, just created to share progress.
Next Steps:

- [x] Provide overrides from the command line.
- [x] Do the same thing for :
- [x] MongoDB
- [x] MySQL
- [x] SQLite.
- [x] Tests",True,73,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/73,https://github.com/borgmatic-collective/borgmatic/pull/73,closed,1222,65,14,18,5,68,0,0,[],2023-06-12 16:28:17+00:00,2023-06-22 19:28:34+00:00,874817.0,"10 days, 3:00:17","[{'comment_id': 1227081224, 'comment_body': 'Grammar nit: I think this should be ""Username with which to restore the database"". Or ""Username to restore the database with"" would also be fine IMO.. just more informal.\r\n', 'comment_created': datetime.datetime(2023, 6, 12, 18, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1227082884, 'comment_body': 'I\'d change ""restored to."" to just ""restored."" here. Alternatively: ""Password with which to connect to the restore database."" Or even: ""Password to restore the database with.""', 'comment_created': datetime.datetime(2023, 6, 12, 18, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1227090426, 'comment_body': ""I'd recommend doing this in `make_extra_environment` just so that all the environment variables can be set (and tested!) all in one place."", 'comment_created': datetime.datetime(2023, 6, 12, 18, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1227096053, 'comment_body': ""For these, I think you'll still need an `if` somewhere, because if neither `restore_username` nor `username` options are set, you want to omit the `--username` flag entirely."", 'comment_created': datetime.datetime(2023, 6, 12, 18, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1227127983, 'comment_body': ""I thought about doing that, but even dump_database uses that function right? So I'll have to check where its called from (addind an argument) just for this key?"", 'comment_created': datetime.datetime(2023, 6, 12, 19, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1227130790, 'comment_body': 'By `omit the --username flag entirely.` you mean send an empty tuple as the username? \r\nBecause that\'s what this code should be doing-\r\n\r\n```python\r\nx={1:""1"",2:""2"",3:""3""}\r\nx.get(5,x.get(4,""99""))\r\n```', 'comment_created': datetime.datetime(2023, 6, 12, 19, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1227144075, 'comment_body': ""Oh, good call! I totally didn't think of that. And yeah, adding an argument or a toggle for the restore use case would probably be a decent compromise."", 'comment_created': datetime.datetime(2023, 6, 12, 19, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1227145209, 'comment_body': ""Nope, I mean omitting both the username value _and_ the `--username` flag. That's what the previous code did when a `username` configuration option wasn't set."", 'comment_created': datetime.datetime(2023, 6, 12, 19, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1227156492, 'comment_body': 'Oh, got it!', 'comment_created': datetime.datetime(2023, 6, 12, 19, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1228588324, 'comment_body': 'I assume this is just a temporary debugging log?', 'comment_created': datetime.datetime(2023, 6, 13, 19, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228593072, 'comment_body': 'Is there a reason you chose to break these out instead of just passing in `restore_arguments`? Either approach could work of course.', 'comment_created': datetime.datetime(2023, 6, 13, 19, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228596176, 'comment_body': ""You can probably end the description here. The rest of it is accurate, but it's a lot to put into a configuration comment."", 'comment_created': datetime.datetime(2023, 6, 13, 19, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228600337, 'comment_body': ""If it's the case that `connection_params` is only used for restore, then you could maybe cut the `restore` flag and only check whether `connection_params` is set. You could even rename it to `restore_connection_params` here to make that clear."", 'comment_created': datetime.datetime(2023, 6, 13, 19, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228605540, 'comment_body': ""One idea for simplifying:\r\n\r\n```python\r\ntry:\r\n    extra['PGPASSWORD'] = connection_params.get('password') or database['restore_password']\r\nexcept (AttributeError, KeyError):\r\n    pass\r\n```\r\n\r\nSometimes it's better to ask forgiveness than permission! :smiley:"", 'comment_created': datetime.datetime(2023, 6, 13, 19, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228607178, 'comment_body': ""You could almost make a tiny function to do this logic so you don't have to repeat it. Do not feel strongly."", 'comment_created': datetime.datetime(2023, 6, 13, 19, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228609656, 'comment_body': 'Could you just check if username is non-None, hostname is non-None, etc? Because you have the logic above to set these values.', 'comment_created': datetime.datetime(2023, 6, 13, 19, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228609950, 'comment_body': 'Similar here.', 'comment_created': datetime.datetime(2023, 6, 13, 19, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228610236, 'comment_body': 'Should probably be a `.get()`?', 'comment_created': datetime.datetime(2023, 6, 13, 19, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228861130, 'comment_body': ""Well, no reason except restore arguments wasn't being used anywhere, so I thought this was a clear indication of what was happening. Can do either though."", 'comment_created': datetime.datetime(2023, 6, 14, 1, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1228954869, 'comment_body': 'Up to you. I can see merits to both approaches.', 'comment_created': datetime.datetime(2023, 6, 14, 4, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1229957779, 'comment_body': ""Didn't get you 😅 Do you mean this:\r\n\r\n```python\r\n    hostname = connection_params['hostname'] or database.get('restore_hostname', database.get('hostname'))\r\n```\r\n\r\nHere, if everything is not provided, hostname should be none, and this piece of code (line 233) should exclude --host from the command,  right? "", 'comment_created': datetime.datetime(2023, 6, 14, 17, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1229961627, 'comment_body': 'Yup, that\'s the ""logic above"" I was referring to!\r\n\r\n> Here, if everything is not provided, hostname should be none, and this piece of code (line 233) should exclude --host from the command, right?\r\n\r\nRight. But wouldn\'t the following for line 233 accomplish that?\r\n\r\n```python\r\n((\'--host\', hostname) if hostname else ())\r\n```\r\n\r\nI might be missing something obvious here...', 'comment_created': datetime.datetime(2023, 6, 14, 17, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1230092683, 'comment_body': ""Oh lol, yeah you're right. I'll check and edit."", 'comment_created': datetime.datetime(2023, 6, 14, 19, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1230153220, 'comment_body': ""Nit: There's a double space after the second comma."", 'comment_created': datetime.datetime(2023, 6, 14, 20, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1230160208, 'comment_body': 'I should probably revamp this function at some point to be more declarative in building the command like the other database hooks are...', 'comment_created': datetime.datetime(2023, 6, 14, 20, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1230165808, 'comment_body': 'I _think_ `database[\'restore_password\']` needs to be `database.get(\'restore_password\')` here, or you\'ll never get to `database[\'password\']`.\r\n\r\nAlso, I\'m pretty sure using the `\'restore_password\'` value from the `database` configuration needs to gate on whether `restore_connection_params` is non-`None`—since that\'s now your ""flag"" for whether this is a restore, right?\r\n\r\nSoapbox time: Sometimes when I\'m working on gnarly logic like this, I actually find it easier to write the tests _as_ I\'m developing the function. That way, I can convince myself that the code I\'m writing satisfies each use case. Doesn\'t always work (sometimes I still screw it up even after writing tests!), but sometimes it actually helps.', 'comment_created': datetime.datetime(2023, 6, 14, 21, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1230169926, 'comment_body': 'It occurs to me you could use a `collections.namedtuple` for this data structure, just to formalize its contents a bit. Do not feel strongly at all.', 'comment_created': datetime.datetime(2023, 6, 14, 21, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1231307928, 'comment_body': 'Yeah, I could do this in a future PR too (or get my friends to work on it, some of them are pretty enthusiastic to work on Borgmatic), since this pattern is followed throughout the file.', 'comment_created': datetime.datetime(2023, 6, 15, 16, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1233168668, 'comment_body': ""Let me know what you think of these and I'll duplicate them for the other databases too!"", 'comment_created': datetime.datetime(2023, 6, 18, 1, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1233193502, 'comment_body': ""I don't think this is being used. Especially since you're not connecting to this database on port 5433. You can probably remove this."", 'comment_created': datetime.datetime(2023, 6, 18, 5, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233193516, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2023, 6, 18, 5, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233193545, 'comment_body': 'And here.', 'comment_created': datetime.datetime(2023, 6, 18, 5, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233193926, 'comment_body': ""Note that this is the default port, so this won't actually override anything or test the restore port."", 'comment_created': datetime.datetime(2023, 6, 18, 5, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233193943, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2023, 6, 18, 5, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233194014, 'comment_body': 'And here! ', 'comment_created': datetime.datetime(2023, 6, 18, 5, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233194558, 'comment_body': ""This function totally makes sense to me, although I'm questioning its name a little bit.. Just because there's no code _in here_ specific to CLI arguments. So I wonder if it should have a less specific name and then just happen to be called from the CLI-testing test case below?"", 'comment_created': datetime.datetime(2023, 6, 18, 5, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233194876, 'comment_body': ""Not necessary to include here, IMO. This is testing a specific edge case that's important to test, but it doesn't need testing in _every_ e2e test case in this file as long as it's in one of them."", 'comment_created': datetime.datetime(2023, 6, 18, 5, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233194973, 'comment_body': 'This test looks good to me!', 'comment_created': datetime.datetime(2023, 6, 18, 5, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233195003, 'comment_body': ""This also won't override anything, just because it's the default port."", 'comment_created': datetime.datetime(2023, 6, 18, 5, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233197108, 'comment_body': 'Might want to call this function something more generic like `test_database_dump_and_restore_with_restore_configuration_options()` for parity with the previous test case name.', 'comment_created': datetime.datetime(2023, 6, 18, 5, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233198416, 'comment_body': ""I've heard it said before that test functions should be [DAMP not DRY](https://stackoverflow.com/questions/6453235/what-does-damp-not-dry-mean-when-talking-about-unit-tests). But you might consider factoring some of this out to a utility function anyway, just maybe something to get the created archive name since you're doing it in every test. Don't feel strongly."", 'comment_created': datetime.datetime(2023, 6, 18, 5, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233198740, 'comment_body': ""What about the case where there's no CLI password and it's just a `restore_connection_params` password? Worth testing too?"", 'comment_created': datetime.datetime(2023, 6, 18, 5, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233199881, 'comment_body': ""IMO this is an integration test because `make_extra_environment()` isn't mocked. But if you _do_ mock it, the test isn't really testing anything because all of the with/without password logic exists in `make_extra_environment()`. So my recommendation would be either to cut this test or, if you want to keep it, move it into `integration/`.\r\n\r\nI know this unit/integration distinction might seem silly, but it goes back to that test pyramid.. It keeps us honest about what kinds of tests we're actually writing."", 'comment_created': datetime.datetime(2023, 6, 18, 5, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233360095, 'comment_body': 'restore_connection_params password is the password we get through the CLI though. Did you mean no config password?', 'comment_created': datetime.datetime(2023, 6, 18, 18, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1233360341, 'comment_body': ""Ah okay, I have no issues cutting this out if it doesn't add value :D"", 'comment_created': datetime.datetime(2023, 6, 18, 18, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1233363546, 'comment_body': ""I think I should keep this and try to run postgres on the container's port 5433, but I wasn't able to do that. I found this - https://stackoverflow.com/questions/37775702/changing-a-postgres-containers-server-port-in-docker-compose but  I don't think it worked. I want to do 5433 and map it to the host's 5433 so that I can test the --restore option without the default, as you mention below."", 'comment_created': datetime.datetime(2023, 6, 18, 19, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1233364779, 'comment_body': ""Oh, the answer I linked seems to do what I want for postgres, I'll look for solutions for the other databases too."", 'comment_created': datetime.datetime(2023, 6, 18, 19, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1233366990, 'comment_body': 'Okay done for all, let me know if this is better.\r\n', 'comment_created': datetime.datetime(2023, 6, 18, 19, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1233468277, 'comment_body': ""Yes, my bad. That's what I meant!"", 'comment_created': datetime.datetime(2023, 6, 19, 2, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233468670, 'comment_body': ""Actually, looking at the function under test, I think I meant: What about the case where there's no CLI password and it's just a config password?"", 'comment_created': datetime.datetime(2023, 6, 19, 2, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233471604, 'comment_body': 'So I think your `command: -p 5433` is a good fix here, because it means the second Postgres is running on a different port than the first one, so you can test the port overriding feature of your new code. But I still don\'t think the `ports: - ""5433:5432""` is doing anything for your tests, because they\'re going through the container network rather than the host network.. You don\'t need to expose the port at all. (Unless I\'m sorely mistaken..)', 'comment_created': datetime.datetime(2023, 6, 19, 2, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1234301765, 'comment_body': ""Oh yeah, I remember now, I left it out because I thought `test_restore_database_dump_runs_pg_restore_with_username_and_password` tests the same thing doesn't it?\r\n\r\n- No restore_x in config\r\n- No --x as a restore arg through the cli"", 'comment_created': datetime.datetime(2023, 6, 19, 17, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1234302434, 'comment_body': 'Yup, it worked without the ports: thing (and I understand why), thanks!', 'comment_created': datetime.datetime(2023, 6, 19, 17, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1234305522, 'comment_body': ""Sorry, I'm being totally unclear. I mean the case where there's no CLI password and there's only a _restore_ config password.. (Or a restore config password + a standard `password`.)"", 'comment_created': datetime.datetime(2023, 6, 19, 17, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1234697687, 'comment_body': ""It occurs to me that there's nothing in these two tests asserting that the database actually got restored to the correct Postgres instance—which is kind of the whole point of the feature. Do you think that's worth adding somehow? Or is the unit coverage for that sufficient?"", 'comment_created': datetime.datetime(2023, 6, 20, 3, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1234703430, 'comment_body': 'Worth including `restore_*` options here to make sure they get overridden by the CLI flags?', 'comment_created': datetime.datetime(2023, 6, 20, 3, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1234704118, 'comment_body': ""Same here. Should this have `restore_*` options to ensure they're ignored?"", 'comment_created': datetime.datetime(2023, 6, 20, 3, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1234704819, 'comment_body': 'And here too. (My bad not catching this the first time around.)', 'comment_created': datetime.datetime(2023, 6, 20, 3, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1234718087, 'comment_body': ""Maybe include `restore_path` here to make sure it doesn't get used?"", 'comment_created': datetime.datetime(2023, 6, 20, 4, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1235652821, 'comment_body': ""If the correct command gets sent to postgres shouldn't that be enough? What further should I check?"", 'comment_created': datetime.datetime(2023, 6, 20, 18, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1235653073, 'comment_body': 'True, will do.', 'comment_created': datetime.datetime(2023, 6, 20, 18, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1235713565, 'comment_body': 'With the original database tests, there\'s only a single database instance per hook, so if the restore executes without erroring, you\'re pretty well assured that it worked. However with these new tests, there are two database instances per hook. So a silent failure mode is if a restore happens successfully—just to the wrong database instance. Like if all the `restore_*` options or new CLI flags get ignored.\r\n\r\nOne way to check for that would just be to run a query (`psql` or similar) against the expected database instance and make sure the named database in question actually exists there. If it does, then you know it must\'ve been because you restored it. (But that will only work if the `POSTGRES_DB` in the `docker-compose.yaml` is different for each database instance.)\r\n\r\nAn argument against doing this is that you\'ve already got coverage for the ""wrong database instance"" in your unit tests, so maybe you don\'t need it / want it in your end-to-end tests too. Ultimately, I\'ll leave the decision to you. Just raising the question here in case you want to do anything about it.', 'comment_created': datetime.datetime(2023, 6, 20, 19, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1235718668, 'comment_body': ""Hm, thanks for letting me know. \r\n\r\nAlso, won't docker create the POSTGRES_DB in docker_compose.yaml as soon as I start the tests (even before backup)? If yes, even the database check query won't work and I'll have to check for something else inside the database."", 'comment_created': datetime.datetime(2023, 6, 20, 19, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1235731164, 'comment_body': ""Yeah, that's why I was suggesting two different `POSTGRES_DB` names, one for each database instance. Like if the first instance's database is `test1` and the second instance's is `test2`. Then if you attempt to restore `test1` to the second instance, and you see `test1` actually created there, you know it must've worked."", 'comment_created': datetime.datetime(2023, 6, 20, 19, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1235743100, 'comment_body': ""Doesn't the restore command  need the database to already exist? "", 'comment_created': datetime.datetime(2023, 6, 20, 19, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1235746006, 'comment_body': ""https://www.postgresql.org/docs/current/app-pgrestore.html I think that's what the --create option is for."", 'comment_created': datetime.datetime(2023, 6, 20, 19, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1235752648, 'comment_body': ""You are correct! Without that flag, it won't create it. You could _add_ the flag though, which might not be a bad idea to have anyway.. Assuming it still works when the database already exists."", 'comment_created': datetime.datetime(2023, 6, 20, 19, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1291639204, 'comment_body': ""Just following up on this. It turns out that restores are [not working correctly in this end-to-end test](https://projects.torsion.org/borgmatic-collective/borgmatic/issues/738#issuecomment-6912) in main—likely broken by me _after_ you submitted this PR. But my point in bringing this up now is that more assertions on whether the tests were actually restoring the expected data probably would've caught that! "", 'comment_created': datetime.datetime(2023, 8, 11, 17, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}]","[{'commit_sha': 'f558cb31563dcf303ca5eebc469a8e462f2ccbe6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e8e64d920a8d4ad7c31dd12b7da361b616987f4', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '230cf6adc45a3f15cae54da11d934fe2560f8c45', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67f4d43aece67321affa6ec45bd0fffd15d40748', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '205e5b152466f0315d3761a99002c7f4b3c2d8db', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9386b7a8789ace90b9bb6a4d0c6c29a4aee5d29', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7423c488e9df2174cbbbbaebdf5a9c6f319b9c6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b6f1329923020da8ffdbe0dc6109f5358189bb', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82d851d8911b0e77e6705d2196908e343b40383d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8389851f2f907164713a621240b4e0f6e2e66663', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89602d1614b80bd14e6ab314bd6f84ba49c352bf', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c876085488b8ab9aef7cc9bab3da6534df790c1', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e53dd3da87bbd743061ad8e46dbf0a8a627f1918', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9016dcc41816fa5acd74f33c931aca330660abc1', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '384182172a29c89c393786daeca1c9d71136ee1e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2d82e9bba1fb053eee717c478df4aaea8629cc9', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a21eb03cdc4e506575a6579b36ff758b7aa069d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87c6e5b349710535b01e607b6135e22509482374', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1351187076,feat: store configs used to create an archive in the archive and add borgmatic bootstrap,"From [#697](https://projects.torsion.org/borgmatic-collective/borgmatic/issues/697)

> you need the output of borgmatic/config/collect.py:collect_config_filenames()

🤦 I thought this function will just return the filename and not the complete path (since we use the word ""path"" in and around these files too).


This should store the config used to create an archive inside the archive itself.

TODO:
- [x] Create a `~/.borgmatic/bootstrap/configs-list.json` file.
- [ ] Update tests

![image](https://github.com/borgmatic-collective/borgmatic/assets/41837037/af105f01-9e24-47ef-a02a-bce7697cb869)
",True,71,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/71,https://github.com/borgmatic-collective/borgmatic/pull/71,closed,615,59,11,26,20,113,0,0,[],2023-05-15 17:39:50+00:00,2023-06-10 21:39:53+00:00,2260803.0,"26 days, 4:00:03","[{'comment_id': 1194156213, 'comment_body': 'Will this cause a problem?', 'comment_created': datetime.datetime(2023, 5, 15, 17, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1194172115, 'comment_body': 'I don\'t *think* so, but I wouldn\'t do it here if you\'re going to overwrite the paths like this. Instead, I\'d do it as early as possible, as close to the argument parsing as possible. Currently, that\'d be in `borgmatic/commands/borgmatic.py:main()` right after the `collect.collect_config_filenames()` call. That way, this value (`global_arguments.config_paths`) doesn\'t unexpectedly have two different values over the course of borgmatic running. Instead, it mostly has a single value.\r\n\r\nThe one thing I can see that breaking is this error in the same source file:\r\n\r\n```python\r\n    if not configs:\r\n        yield from log_error_records(\r\n            f""{\' \'.join(arguments[\'global\'].config_paths)}: No valid configuration files found"",\r\n        )\r\n        return\r\n```\r\n\r\nThat\'s because we want the error to show the unfiltered config paths as the user gave them. But those could always get saved off and passed into the containing function (`collect_configuration_run_summary_logs()`).', 'comment_created': datetime.datetime(2023, 5, 15, 17, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1194244048, 'comment_body': ""Okay, I'll work on this next for this PR.\r\n\r\nAlso, I was thinking of adding the borgmatic version used to create the archive inside this manifest too, so I use the correct config with the correct version. What do you think, and where can I get the current version from? A quick ctrl+f didn't help.\r\n"", 'comment_created': datetime.datetime(2023, 5, 15, 18, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1194250475, 'comment_body': ""That makes sense. Good idea!\r\n\r\nFor the version, see `main()` which gets that. The magical incantation is `importlib_metadata.version('borgmatic')`."", 'comment_created': datetime.datetime(2023, 5, 15, 19, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1195432625, 'comment_body': ""I don't think this `if` is necessary since `.get()` returns None if the key is not found...?"", 'comment_created': datetime.datetime(2023, 5, 16, 16, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1195438197, 'comment_body': ""Minor code style nit: No single-letter variables—even in cases like this where it's pretty obvious what it is."", 'comment_created': datetime.datetime(2023, 5, 16, 16, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1207100755, 'comment_body': 'if not arguments[argument]:', 'comment_created': datetime.datetime(2023, 5, 26, 17, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1212117785, 'comment_body': ""Maybe consider some error handling around here. E.g., what if the file is not found, what if it's invalid JSON, etc etc."", 'comment_created': datetime.datetime(2023, 5, 31, 18, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212125902, 'comment_body': 'Reminder about the proposed command-line flag for a user to override the default borgmatic source directory.', 'comment_created': datetime.datetime(2023, 5, 31, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212129693, 'comment_body': ""Does this need a `destination_path=/` so it doesn't just extract to the current directory?"", 'comment_created': datetime.datetime(2023, 5, 31, 18, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212149242, 'comment_body': 'Does this work even when there are `--flag` style arguments?', 'comment_created': datetime.datetime(2023, 5, 31, 18, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212151011, 'comment_body': ""If I'm reading this correctly, it seems like it would require _all_ sub-commands to be present rather than just one of them."", 'comment_created': datetime.datetime(2023, 5, 31, 18, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212154762, 'comment_body': 'Maybe remove this flag until more than extracting config files is supported?', 'comment_created': datetime.datetime(2023, 5, 31, 18, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212155145, 'comment_body': ""I may have missed it, but I didn't see this consumed anywhere. Also, you might want to default to `/` for `bootstrap` in particular."", 'comment_created': datetime.datetime(2023, 5, 31, 18, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212156952, 'comment_body': 'These two flags would also need to get passed in.', 'comment_created': datetime.datetime(2023, 5, 31, 18, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212160496, 'comment_body': 'Rather than hard-coding _config_ subparsers here, what do you think of calling it something more general (`subsubparsers` or whatever)?', 'comment_created': datetime.datetime(2023, 5, 31, 18, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212166616, 'comment_body': 'What do you think of having this function merge subparsers and config_subparsers and return that instead? Or does that make problems for one of the callers? (I see `borgmatic/commands/completion.py` calls this function too.)', 'comment_created': datetime.datetime(2023, 5, 31, 18, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212174428, 'comment_body': ""I'm not sure about this `if` check. In the usual use of borgmatic, config might not be in arguments (due to no `--config` flag being used), but this guard still needs to run. Instead though, you could always skip the check if `boostrap` is in `arguments`."", 'comment_created': datetime.datetime(2023, 5, 31, 18, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212183672, 'comment_body': ""Given that `bootstrap` can only really be used by itself, I wonder if it's worth erroring if there are other actions on the command-line. (Probably that wouldn't go here, but in `parse_arguments()` or similar.)"", 'comment_created': datetime.datetime(2023, 5, 31, 19, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212184426, 'comment_body': ""I feel a little weird about this monkey-patching, but not weird enough to raise an objection over it. I guess we'll see how it goes!"", 'comment_created': datetime.datetime(2023, 5, 31, 19, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212189941, 'comment_body': ""Given that config won't be available, there might be some additional command-line flags we'll eventually need for duplicating configuration options. But we can probably add those as user feature requests come in rather than trying to do it in advance."", 'comment_created': datetime.datetime(2023, 5, 31, 19, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213012980, 'comment_body': ""Should that check be added after we decide what other sub commands should be added to the `borgmatic config` action? `parse_arguments()` seems to check for existence of other keywords, but we don't have any other than bootstrap."", 'comment_created': datetime.datetime(2023, 6, 1, 11, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213014392, 'comment_body': ""I was having trouble merging them into one, could you tell me how to merge two Subparser objects? I tried merging their choices but that didn't work."", 'comment_created': datetime.datetime(2023, 6, 1, 11, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213018090, 'comment_body': 'I added error handling for JSONDecodeError around these statements, for other errors, should I wrap the extract_archive() call, or does borgmatic handle that already?', 'comment_created': datetime.datetime(2023, 6, 1, 11, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213382633, 'comment_body': '[It depends on the error type.](https://projects.torsion.org/borgmatic-collective/borgmatic/src/branch/main/borgmatic/commands/borgmatic.py#L140). So generally you want to catch and then raise an error type that the higher-level borgmatic code can handle, ideally including a user-facing error message in it. Grep for `ValueError` to see some examples.', 'comment_created': datetime.datetime(2023, 6, 1, 16, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213386452, 'comment_body': ""I don't think multiple `borgmatic config` actions would typically be used simultaneously on a single command-line invocation, right? I brought this issue up because of cases like a user running `borgmatic config bootstrap list info` and then being surprised that their `list` and `info` actions are silently ignored."", 'comment_created': datetime.datetime(2023, 6, 1, 16, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213404712, 'comment_body': ""I honestly don't know.. I was imagining you'd do something like your existing `choices` merging trick and then stuff that value into a new instance. If that doesn't work out, a couple of different ideas:\r\n\r\n * Instead of returning `subparsers` and `config_subparsers` separately, return them in a tuple or list. The idea is that it could contain any number of subparsers and the calling code would have to handle that.\r\n * Or, replace `subparsers` and `config_subparsers` with a single return value of subparser _choices_, which you already know how to merge. Although looking at some of the shell completion code that calls `make_parsers()`, there is one case where it also accesses `subparsers._actions` from that return value. So that would have to be accounted for with this approach."", 'comment_created': datetime.datetime(2023, 6, 1, 16, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213411746, 'comment_body': ""Oops, looking at your code changes, that linked `except` might occurs `after` you've already processed the `bootstrap` action and returned. If that's the case, you might need to catch raised errors yourself (in `collect_configuration_run_summary_logs()`) and then yield a log record appropriately. See the `before_everything` hooks call in that function for an example."", 'comment_created': datetime.datetime(2023, 6, 1, 16, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213576542, 'comment_body': 'I think I found a way to make it work with the choices merging:\r\n\r\n```python\r\n\r\n    merged_subparsers = argparse._SubParsersAction(None, None, metavar=None, dest=\'merged\', parser_class=None)\r\n\r\n    for name, subparser in subparsers.choices.items():\r\n        merged_subparsers._name_parser_map[name] = subparser\r\n        subparser._name_parser_map = merged_subparsers._name_parser_map\r\n\r\n    for name, subparser in config_subparsers.choices.items():\r\n        merged_subparsers._name_parser_map[name] = subparser\r\n        subparser._name_parser_map = merged_subparsers._name_parser_map\r\n\r\n    return top_level_parser, merged_subparsers        \r\n\r\n\r\ndef parse_arguments(*unparsed_arguments):\r\n    \'\'\'\r\n    Given command-line arguments with which this script was invoked, parse the arguments and return\r\n    them as a dict mapping from subparser name (or ""global"") to an argparse.Namespace instance.\r\n    \'\'\'\r\n    top_level_parser, subparsers = make_parsers()\r\n```\r\n\r\nThis works, and I guess it wouldn\'t harm other functions calling this too?', 'comment_created': datetime.datetime(2023, 6, 1, 19, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213577224, 'comment_body': 'Shared a snippet below.', 'comment_created': datetime.datetime(2023, 6, 1, 19, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213585107, 'comment_body': ""Ah okay gotcha (I didn't even know you could use multiple actions at once). So there should probably be a list of actions somewhere so I can do something like:\r\n\r\n```python\r\n    for action in action_names:\r\n        if 'bootstrap' in arguments and action in arguments['bootstrap']:\r\n            raise ValueError(\r\n                'The bootstrap action cannot be used together with other actions.'\r\n            )\r\n```\r\n?"", 'comment_created': datetime.datetime(2023, 6, 1, 19, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213599272, 'comment_body': 'Oops!\r\n\r\nTo fix this, first I thought of doing this:\r\n\r\n```python\r\nif not any(subcommand in arguments for subcommand in subcommand_parsers_mapping[argument]):\r\n                raise ValueError(""Missing subcommand for {}. Expected one of {}"".format(\r\n                    argument, subcommand_parsers_mapping[argument]\r\n              ))\r\n```\r\n\r\nbut this checks if *atleast* one subcommand is present in the arguments, we should check if *exactly* one of them is present right? Is there a better way to do that other than this:\r\n\r\n```python\r\nsubcommand_count = 0\r\nfor subcommand in subcommand_parsers_mapping[argument]:\r\nif subcommand in arguments:\r\n    subcommand_count += 1\r\nif subcommand_count != 1:\r\nraise ValueError(""Missing subcommand for {}. Expected one of {}"".format(\r\n    argument, subcommand_parsers_mapping[argument]\r\n))\r\n```\r\n?', 'comment_created': datetime.datetime(2023, 6, 1, 19, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213607979, 'comment_body': ""Didn't get you here, \r\n\r\n`arguments[argument]` will be None only when a command that has a subcommand (like config has bootstrap) will be called, so right now:\r\n\r\n{\r\n\tconfig: None\r\n\tbootstrap: <the parser obj>\r\n}\r\n\r\nI tried creating a new flag for `bootstrap` and checking what comes up here:\r\n\r\n![image](https://github.com/borgmatic-collective/borgmatic/assets/41837037/af39e60d-0091-45c0-86e4-443b02e83473)\r\nhello -> True\r\n\r\nIs this what you meant?\r\n\r\n"", 'comment_created': datetime.datetime(2023, 6, 1, 19, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213623335, 'comment_body': ""Nice. It *probably* won't harm other callers, but the way to find out is to try it! For instance, with this code in place, you could generate and source the bash completion and make sure that its tab completion still works as expected, especially when tab-completing action names."", 'comment_created': datetime.datetime(2023, 6, 1, 20, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213633843, 'comment_body': ""I think it may be even easier than that. How about:\r\n\r\n```python\r\nif 'bootstrap' in arguments.keys() and len(arguments.keys()) > 1:\r\n    raise ValueError(...)\r\n```\r\n\r\nThis would be before the `'global'` key gets set into `arguments` though.\r\n\r\n> I didn't even know you could use multiple actions at once\r\n\r\nIt's handy for use cases like overriding the default borgmatic actions but just omitting one of them."", 'comment_created': datetime.datetime(2023, 6, 1, 20, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213637562, 'comment_body': ""IMO you don't need to check that _exactly_ one of them is present.. _at least_ should be sufficient here. The other borgmatic actions support multiple at a time, and in theory `config` sub-actions could work like that too. The main exception would be `bootstrap`, but you've already got a check for that elsewhere.\r\n\r\nSo your first fix is probably sufficient unless I'm missing something."", 'comment_created': datetime.datetime(2023, 6, 1, 20, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213642171, 'comment_body': 'My bad; I misunderstood what `arguments` was here. For some reason I was thinking it was a list of all arguments rather than a map from action to parse arguments. So ignore this and carry on!', 'comment_created': datetime.datetime(2023, 6, 1, 20, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213643425, 'comment_body': 'You might consider removing the `not` and reversing the logic. Or even:\r\n\r\n```python\r\narguments[canonical_name] = None if canonical_name in subcommand_parsers_mapping else parsed\r\n```\r\n\r\nUp to you!', 'comment_created': datetime.datetime(2023, 6, 1, 20, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213643889, 'comment_body': 'Thanks, this makes sense!', 'comment_created': datetime.datetime(2023, 6, 1, 20, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1214886177, 'comment_body': 'Not a big deal at all right now, but you might consider moving this file to `borgmatic/actions/config/bootstrap.py`.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214886983, 'comment_body': 'As you do tests, it would be great if you could also flesh out these functions with docstrings. That includes basic info what arguments it accepts, what it returns, what it _does_, and stuff like ""what exception types does this thing raise and when?"" (Grep the codebase for ""Raise"" for examples.)', 'comment_created': datetime.datetime(2023, 6, 2, 22, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214888316, 'comment_body': 'You could just call this `manifest.json`. Less specific, but maybe a tiny bit more future-proofed.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214895167, 'comment_body': 'Maybe make this the default at the arguments level instead of here? Just so it has the ""correct"" value sooner.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214896682, 'comment_body': 'Code style nit: f-string instead of `.format()`.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214898444, 'comment_body': 'There might be a way to introspect this information from `subparsers` instead of duplicating it here. (Do not feel strongly.)', 'comment_created': datetime.datetime(2023, 6, 2, 22, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214899269, 'comment_body': 'Note that this help/description are currently inaccurate. You might want to update it to reflect the current code.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214900875, 'comment_body': 'Might be nice to explain what this is for users just browsing `--help`. See the `borgmatic_source_directory` description in the config schema for inspiration (or just copying outright).', 'comment_created': datetime.datetime(2023, 6, 2, 22, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214901264, 'comment_body': 'Maybe change ""extract"" to ""bootstrap from"" or ""extract config files from"" here.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214901599, 'comment_body': 'Similar here as above: Update ""extract"" as appropriate.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214901760, 'comment_body': 'And here.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214904173, 'comment_body': ""I don't think this would catch your `JSONDecodeError` or a `KeyError` exception types. So one option is to catch them and re-raise `ValueError`s within `get_config_paths()` or `run_bootstrap()`.. or you can just catch the expected exception types here."", 'comment_created': datetime.datetime(2023, 6, 2, 22, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220851441, 'comment_body': 'Duplicated comment?', 'comment_created': datetime.datetime(2023, 6, 7, 5, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220853126, 'comment_body': 'Was there a difficulty in hitting coverage for this? At minimum a `..._does_not_raise()` test covering the error case would be nice.', 'comment_created': datetime.datetime(2023, 6, 7, 5, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220863372, 'comment_body': ""Looks like this is a duplicate of above? If you're trying to test that it's called twice, try this:\r\n\r\n```\r\nflexmock(module.borgmatic.borg.extract).should_receive('extract_archive').and_return(\r\n    extract_process\r\n).twice()\r\n```\r\n\r\nOr leave out the `.twice()` if you're just mocking out the function and don't care how many times it's called.\r\n\r\nI will note that I don't see any assertions in this test function (whether an explicit `assert` or something implicit like `.once()`/`.twice()`). So depending on what you're testing for, that may influence your decision here."", 'comment_created': datetime.datetime(2023, 6, 7, 5, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220864794, 'comment_body': 'What are you testing for here? Maybe you can mention that in the test name? E.g., `_does_not_raise()`? `_calls_extract()`? Something else? The unit under test here is pretty basic (it\'s just some calls and a for loop), so a ""does not raise"" test might be just fine.', 'comment_created': datetime.datetime(2023, 6, 7, 5, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220872682, 'comment_body': ""IMO `os.path.join()` doesn't need to be mocked out for a unit test unless it makes your life easier in that test. My rationale is that it: 1. is in the standard library, and 2. has no side effects, and 3. doesn't read from the environment, the filesystem, the network, etc."", 'comment_created': datetime.datetime(2023, 6, 7, 5, 30, 6, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220874341, 'comment_body': ""You've got some nice mocking here. But does `importlib_metadata.version()` need mocking too? I'm assuming it accesses the filesystem/environment."", 'comment_created': datetime.datetime(2023, 6, 7, 5, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220875839, 'comment_body': 'Is it worth testing the case when the borgmatic source directory is set in the location config?', 'comment_created': datetime.datetime(2023, 6, 7, 5, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220880450, 'comment_body': 'Nice. Good to have coverage of all of these error cases.', 'comment_created': datetime.datetime(2023, 6, 7, 5, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220881945, 'comment_body': ""Looks good. This way you don't have to assert on the log message itself."", 'comment_created': datetime.datetime(2023, 6, 7, 5, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220890776, 'comment_body': 'Do you think you can mock out `get_config_paths()` as well? Otherwise IMO that pushes this into the realm of an integration test. Maybe you disagree on that point though since `run_bootstrap()` is the only caller of `get_config_paths()` right now?\r\n\r\nIf you do mock out `get_config_paths()`, that would probably mean you\'d ""lose"" its existing test coverage and would have to write a test for it to get that coverage back. Fortunately it\'s a really simple function and would hopefully be easy to test.', 'comment_created': datetime.datetime(2023, 6, 7, 5, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220902411, 'comment_body': 'Probably needs mocking in existing `run_create()` unit tests?', 'comment_created': datetime.datetime(2023, 6, 7, 6, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220905741, 'comment_body': 'Does this need a test? Maybe something along the lines of the existing `test_create_archive_with_patterns_calls_borg_with_patterns_including_converted_source_directories()`?', 'comment_created': datetime.datetime(2023, 6, 7, 6, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220913361, 'comment_body': ""IMO this would benefit from some explicit test coverage. I think the easiest way to do that would be to factor it out into a separate function, mock that function within tests of this `parse_subparser_arguments()`, and then independently test the function by passing in various `remaining_subparser_arguments` and asserting the result.\r\n\r\nBut if you'd rather keep it all inline, you could probably still test the logic by calling `parse_subparser_arguments()` and manipulating a mocked `parse_known_args()` to return the results you want to test.\r\n\r\nLet me know though if either approach looks like it will be problematic."", 'comment_created': datetime.datetime(2023, 6, 7, 6, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220917178, 'comment_body': ""Any test for these two loops portion of the function? I'm still not 100% sure of what they do. :smile: "", 'comment_created': datetime.datetime(2023, 6, 7, 6, 14, 54, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1221846910, 'comment_body': 'Can you give a hint about what I should be asserting here? Your point about asserting whether extract_archive gets called twice is what I was trying to do with this test. ', 'comment_created': datetime.datetime(2023, 6, 7, 16, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1221851148, 'comment_body': ""Sure! If this is a `_does_not_raise()` test, then you don't need to assert anything! Just put the `extract_archive` mock in place once, and it'll be used each time it's called. But instead if you do actually want to assert that `extract_archive()` gets called twice, then the `.twice()` invocation I pasted above should do it."", 'comment_created': datetime.datetime(2023, 6, 7, 16, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1221865932, 'comment_body': ""What difference would that make test-wise? Only this line is concerned with the source directory right - \r\n\r\n```python\r\n    borgmatic_source_directory = location.get(\r\n        'borgmatic_source_directory', DEFAULT_BORGMATIC_SOURCE_DIRECTORY\r\n    )\r\n```\r\n\r\nSo should I check if I do give it a location, it should use that instead of the DEFAULT directory? I though `.get()` won't induce any unexpected behaviour so I didn't add it."", 'comment_created': datetime.datetime(2023, 6, 7, 16, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1221876262, 'comment_body': ""Yeah, it's less about testing that `.get()` does what it's supposed to, but more about testing that the function as a whole (regardless of its implementation) adheres to its contract of honoring the `borgmatic_source_directory` option. If someone comes along later and accidentally deletes that `.get()` line or changes it to hard-code `DEFAULT_BORGMATIC_SOURCE_DIRECTORY`, you ideally want a test failing loudly (and clearly). Getting on my [soapbox](https://idioms.thefreedictionary.com/soapbox) for a moment: Tests should be about defining and enforcing the contract that a unit under test has with its caller. If a part of the contract _isn't_ defined in the tests, then it's not part of the contract IMO!\r\n\r\nHaving said all that, I don't actually feel strongly about this particular example, so follow your heart. :smile: "", 'comment_created': datetime.datetime(2023, 6, 7, 16, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1221931797, 'comment_body': ""> Tests should be about defining and enforcing the contract that a unit under test has with its caller. If a part of the contract isn't defined in the tests, then it's not part of the contract.\r\n\r\nTrue, will remember this quote when writing tests in the future 😄 "", 'comment_created': datetime.datetime(2023, 6, 7, 17, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1221971177, 'comment_body': 'Yeah, I wrote separate tests for these but though that this one would cover get_config_paths too.', 'comment_created': datetime.datetime(2023, 6, 7, 17, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1221993705, 'comment_body': ""I can deal with that as long as there aren't other callers of `get_config_paths()`, as that would really stretch the definition of a unit. :smiley: "", 'comment_created': datetime.datetime(2023, 6, 7, 18, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1221995259, 'comment_body': 'One thing though is just to make sure any side-effect-having functions of `get_config_paths()` are mocked out as well in these tests.', 'comment_created': datetime.datetime(2023, 6, 7, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222001358, 'comment_body': ""They merge all the subsubparsers and the subparser variable into one. Here's the discussion - https://github.com/borgmatic-collective/borgmatic/pull/71#discussion_r1212166616"", 'comment_created': datetime.datetime(2023, 6, 7, 18, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1222002747, 'comment_body': ""Right, I'm just not totally clear on how. :sweat_smile: "", 'comment_created': datetime.datetime(2023, 6, 7, 18, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222024060, 'comment_body': ""Shouldn't this be considered tested, considering failing tests prompted us to rewrite this section ( the extract/list thing)? What should I test here?"", 'comment_created': datetime.datetime(2023, 6, 7, 18, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1222028931, 'comment_body': ""Oh, I can't really say I do either, I was just trying things out and this ended up working. "", 'comment_created': datetime.datetime(2023, 6, 7, 18, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1222032090, 'comment_body': 'Now that I look at it again, this line in both loops confuses me too:\r\n\r\n```python\r\n        subparser._name_parser_map = merged_subparsers._name_parser_map\r\n```', 'comment_created': datetime.datetime(2023, 6, 7, 18, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1222036131, 'comment_body': ""You're right that it's got _coverage_, meaning the code is exercised by tests, but it's not tested on its own. The code is fairly complex and while it definitely handles the `extract/list` case as you point out, without targeted tests I wouldn't necessarily be convinced it'd handle other cases of finding unique remaining arguments across all subparsers. If this were my feature (and to be clear, it's most definitely not!), I'd probably write a targeted test that, given some contrived `remaining_subparser_arguments`, assert that the code produces the expected `remaining_arguments`. And I might even throw a couple of different variants at it to make sure it handles edge cases like zero overlapping remaining arguments across the subparsers, an empty `remaining_subparser_arguments` element for one subparser, etc etc. Basically whenever I'm scared by complexity I throw test cases at the problem until I'm a little calmer.\r\n\r\nHaving said all that, this is _your_ feature, so if you're comfortable with the existing coverage, I can be fine with it too."", 'comment_created': datetime.datetime(2023, 6, 7, 18, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222038789, 'comment_body': ""Maybe it's so the existing (pre-merged) subparsers act the same as the merged one? You could try taking that line out and seeing what happens, although I imagine you added it for a reason."", 'comment_created': datetime.datetime(2023, 6, 7, 18, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222075737, 'comment_body': ""Yeah, I guess it could be tested more.\r\n\r\nI tried this - [`6475345` (#71)](https://github.com/borgmatic-collective/borgmatic/pull/71/commits/6475345a8fbaa9b3d9aaeb7444075829c49343ab#diff-d39d71411512f243818b758012a11063b00ebfa284f762c22eca562d30d0bce8R180) to parameterize and separate the unit to test it.\r\n\r\nBut it's probably wrong since whatever I pass as the array here (remaining_arguments):\r\n\r\nparse_known_args=lambda arguments: (flexmock(), ['--verbosity', 'lots']\r\n\r\nwill get returned as remaining_arguments.\r\n\r\nOr... maybe the test case is the reason I feel like that?\r\nIf that's the case can you suggest me a good set of parameters so I know this is ok?"", 'comment_created': datetime.datetime(2023, 6, 7, 19, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1222083681, 'comment_body': 'parse_subsubparser_arguments?', 'comment_created': datetime.datetime(2023, 6, 7, 19, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1222085645, 'comment_body': ""Another case that I tried but don't know if this is correct (it passes the test):\r\n```python\r\n        (\r\n            {'extract': flexmock(), 'list': flexmock()},\r\n            ['--progress', '--archive', 'myarchive'],\r\n            {\r\n                'extract': flexmock(parse_known_args=lambda arguments: (flexmock(), ['--archive', 'myarchive'])),\r\n                'list': flexmock(parse_known_args=lambda arguments: (flexmock(), [])),\r\n            },\r\n            [],\r\n        )\r\n```"", 'comment_created': datetime.datetime(2023, 6, 7, 19, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1222128196, 'comment_body': ""> But it's probably wrong since whatever I pass as the array here (remaining_arguments):\r\n> parse_known_args=lambda arguments: (flexmock(), ['--verbosity', 'lots']\r\n> will get returned as remaining_arguments.\r\n\r\nIf you're only passing in a single subparser's arguments, then I'd expect them to get returned, since technically those remaining arguments are found in the remaining arguments for every subparser ... because there's only one. Let me know if I'm misunderstanding the example though.\r\n\r\n>  If that's the case can you suggest me a good set of parameters so I know this is ok?\r\n\r\nFrom [this comment](https://github.com/borgmatic-collective/borgmatic/pull/71#issuecomment-1577651275), here's some potential test case data:\r\n\r\n```python\r\nremaining_subparser_arguments = (\r\n    ('--latest', 'archive', 'prune', 'extract', 'list', '--wtf'),  # remaining from check\r\n    ('--latest', 'archive', 'check', 'extract', 'list', '--wtf'),   # remaining from prune\r\n    ('prune', 'check', 'list', '--wtf'),  # remaining from extract\r\n    ('prune', 'check', 'extract', '--wtf'),  # remaining from list\r\n)\r\n```\r\n\r\nAnd the expected result: `['--wtf']`\r\n\r\n> Another case that I tried but don't know if this is correct (it passes the test):\r\n\r\nI'm not seeing the definition of `get_remaining_arguments()`. Could you maybe push that so I could have a look at it in the context of this test? Also, is `unparsed_arguments` the same as `remaining_subparser_arguments` in the existing code? If so, the problem might be that it's a single list rather than a list of lists (one per subparser)."", 'comment_created': datetime.datetime(2023, 6, 7, 20, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222131054, 'comment_body': ""Nevermind, I think I found the code in question. I'll have a look."", 'comment_created': datetime.datetime(2023, 6, 7, 20, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222135709, 'comment_body': ""It's not only doing subsubparsers.. This is also the code doing the actual parsing for each top-level subparser (and returning remaining arguments, of course). So maybe `parse_known_subparsers_arguments()` or something?"", 'comment_created': datetime.datetime(2023, 6, 7, 20, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222139841, 'comment_body': ""> From https://github.com/borgmatic-collective/borgmatic/pull/71#issuecomment-1577651275, here's some potential test case data:\r\n\r\nNote that my example test case data from above is only for the second half of your factored-out `parse_subparser_arguments()`/`parse_known_subparser_arguments` function. (I hadn't found the actual function before I commented.) So if you wanted a test case for the whole function, it would be like one of your existing examples except `unparsed_arguments` might be `('--latest', 'archive', 'check', 'prune', 'extract', 'list', '--wtf')` with the subparsers set up to mimic the actual `check`, `prune`, `extract`, `list`, etc. But maybe your existing `extract`/`list`-only example would be sufficient."", 'comment_created': datetime.datetime(2023, 6, 7, 20, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222161550, 'comment_body': '> Another case that I tried but don\'t know if this is correct (it passes the test):\r\n\r\nOkay, finally viewing this test data in light of the actual code. My thoughts:\r\n\r\n * Do you need the action names in the unparsed arguments?\r\n * Does the `extract` subparser need to consume `--archive` like `list` does?\r\n * Should the `list` subparser return `--progress` among their remaining arguments? AFAIK it doesn\'t touch `--progress`.\r\n\r\nIf you want to ""cheat"" here, just instrument the actual code with print statements and then run borgmatic with the flags of your test case. Then look at the printed values and steal them for your tests.', 'comment_created': datetime.datetime(2023, 6, 7, 20, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223331093, 'comment_body': 'Another thought: Sometimes, if a function is tough to name, it means you haven\'t captured a coherent, describable unit of functionality with it. Like maybe it either does too much or too little such that it\'s hard to describe succinctly. So one thing you _could_ do in this case is to only make the function contain the ""# Determine the remaining arguments that no subparsers have consumed"" code and not the other loop. That way it\'d be easier to create test cases for and it\'d be easier to name. Just an idea.', 'comment_created': datetime.datetime(2023, 6, 8, 17, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223863549, 'comment_body': ""Cool.. I didn't know you could do that!"", 'comment_created': datetime.datetime(2023, 6, 9, 5, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223865459, 'comment_body': ""Technically, I'm not sure this test is testing that `used_config_paths` actually makes it all the way through from here to `execute_command()`. For instance, I bet if you changed this value, the test would still pass. I think that's because there are so many functions between here and there.. and therefore so many mocks. I'm not exactly sure what to do about that though. Maybe add `.with_args()` to the `expand_directories()` mocks to assert that they're getting the paths it should be? Maybe just ignore the problem? I imagine other existing tests have the same issue."", 'comment_created': datetime.datetime(2023, 6, 9, 5, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223871435, 'comment_body': ""The test code here looks good, but it doesn't look like it's actually calling a unit under test.. as the code under test is just copy/pasted here. Is there a way to call the actual live code? Either by testing the larger function containing it or perhaps by factoring it out into its own function?"", 'comment_created': datetime.datetime(2023, 6, 9, 5, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223871752, 'comment_body': 'Nit: You might consider grouping some of these together to cut down on vertical whitespace.', 'comment_created': datetime.datetime(2023, 6, 9, 5, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223873274, 'comment_body': 'Nit: Newline before `return` would make it stand out a little more IMO.', 'comment_created': datetime.datetime(2023, 6, 9, 5, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223874857, 'comment_body': 'Nit: Remove "","" before ""and"".', 'comment_created': datetime.datetime(2023, 6, 9, 5, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223876722, 'comment_body': 'Convention (in borgmatic) is for subparsers to have identical `help` and `description`.', 'comment_created': datetime.datetime(2023, 6, 9, 6, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223879916, 'comment_body': ""Something that occurs to me: Did you have a chance to play with [borgmatic's bash completion](https://torsion.org/borgmatic/docs/how-to/set-up-backups/#bash) with these argument changes incorporated? For instance: `borgmatic conf<tab>` or `borgmatic config boot<tab>` or even `borgmatic config bootstrap --prog<tab>`. Might also be good to try just `borgmatic boot<tab>` and see what happens.\r\n\r\nIf some of these don't work as expected, it'd be good to know. They don't necessarily need to be fixed in this PR (the scope is already large enough), but they should be filed for follow-on work. I might even be able to pick them up after they're filed (if they need to be)."", 'comment_created': datetime.datetime(2023, 6, 9, 6, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223882324, 'comment_body': 'Should be a doc string at this point, IMO.', 'comment_created': datetime.datetime(2023, 6, 9, 6, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223884204, 'comment_body': ""Docstring missing. (It'd be nice to know what the arguments are, too!)"", 'comment_created': datetime.datetime(2023, 6, 9, 6, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1224204915, 'comment_body': 'Just added "" during the ""create"" operation"" now. ', 'comment_created': datetime.datetime(2023, 6, 9, 11, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1224207995, 'comment_body': 'I use zsh, will completions work for that? I remember trying it when you mentioned this, but no completions worked for me (even with older versions). Let me try with bash.', 'comment_created': datetime.datetime(2023, 6, 9, 11, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1224208944, 'comment_body': '![image](https://github.com/borgmatic-collective/borgmatic/assets/41837037/86994ee3-1434-4c8b-9c8c-11922925d499)\r\nWorks!\r\n\r\n![image](https://github.com/borgmatic-collective/borgmatic/assets/41837037/8ae3dea3-94a9-4d79-ad47-db58a2a865af)\r\n\r\nIt recommended borg as a subcommand too though ', 'comment_created': datetime.datetime(2023, 6, 9, 11, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1224503728, 'comment_body': 'Awesome! Yeah, completions are only implemented for bash and fish right now. zsh would be a logical next step.\r\n\r\nRecommending `borg` after `config` should probably be fixed (not in this PR!), as that would produce an invalid command-line. Feel free to file it as a separate issue.', 'comment_created': datetime.datetime(2023, 6, 9, 16, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1224592303, 'comment_body': 'So I did this - \r\n\r\n```python\r\ndef test_create_archive_with_sources_and_used_config_paths_calls_borg_with_sources_and_config_paths():\r\n    flexmock(module.borgmatic.logger).should_receive(\'add_custom_log_levels\')\r\n    flexmock(module.logging).ANSWER = module.borgmatic.logger.ANSWER\r\n    flexmock(module).should_receive(\'collect_borgmatic_source_directories\').and_return([\'/etc/borgmatic/config.yaml\'])\r\n    flexmock(module).should_receive(\'deduplicate_directories\').and_return(\r\n        (\'foo\', \'bar\', \'/etc/borgmatic/config.yaml\')\r\n    )\r\n    flexmock(module).should_receive(\'map_directories_to_devices\').and_return({})\r\n    flexmock(module).should_receive(\'expand_directories\').with_args(\r\n        (\'foo\', \'bar\', \'/etc/borgmatic/config.yaml\')\r\n    ).and_return(())\r\n```\r\n\r\nBut got this error:\r\n\r\n""Arguments for call expand_directories did not match expectations:\\n  Received call:\\texpand_directories([\'/etc/borgmatic/config.yaml\'])\\n  Expected call[1]:\\texpand_directories(directories=(\'foo\', \'bar\', \'/etc/borgmatic/config.yaml\'))""\r\n\r\nWhy didn\'t expand_directories recieve the location_config as args? And this is what I should be testing right?', 'comment_created': datetime.datetime(2023, 6, 9, 17, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1224612131, 'comment_body': ""I'm guessing because `expand_directories()` is called twice—once inside of `map_directories_to_devices()` and once above, on line 346. And I bet that first call is the one where the expectation isn't matched..."", 'comment_created': datetime.datetime(2023, 6, 9, 18, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1224612711, 'comment_body': ""> And this is what I should be testing right?\r\n\r\nAnd yeah, I think this is probably the right thing to test given the constraints. It's obnoxious to have to do so much mocking, but I don't see a better way to do it short of switching to an integration test."", 'comment_created': datetime.datetime(2023, 6, 9, 18, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1225594154, 'comment_body': ""Can be deleted now that it's been factored out?"", 'comment_created': datetime.datetime(2023, 6, 10, 21, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1225595433, 'comment_body': 'Since this function doesn\'t have any asserts (implicit or explict), I\'m not sure the name of the function is accurate right now. As written, this function is more of a ""does not raise"" test case.', 'comment_created': datetime.datetime(2023, 6, 10, 21, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1225596330, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2023, 6, 10, 21, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1225596553, 'comment_body': 'This one looks good because it has an actual assertion (`.never()`)!', 'comment_created': datetime.datetime(2023, 6, 10, 21, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1225596720, 'comment_body': 'Thanks for doing this. I know it was a pain...', 'comment_created': datetime.datetime(2023, 6, 10, 21, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1225597860, 'comment_body': ""(I'll do this to save the PR roundtrip.)"", 'comment_created': datetime.datetime(2023, 6, 10, 21, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1225598099, 'comment_body': ""(I'll fix this to save the PR roundtrip. Probably just add a `.once()`...)"", 'comment_created': datetime.datetime(2023, 6, 10, 21, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}]","[{'commit_sha': '1bc7bb49714a33ac9613a2da10cc7951ccace276', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49b4d371cea63afa872e7e81f4e95666567ae179', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b10148844bc0214f07e0e9357c22d82c8262790d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee32b076eb666cefcee652cf8572f39b386649b8', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2241de11c00c8f4dc138ce89750fb5470912301d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b7996dfda6656a0324e1d920d85a6c7922c47ec', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96adee444bd26184ee993c1b3f5474ccbf857dea', 'committer_username': 'witten', 'committer_name': 'Dan Helfman', 'committer_email': 'witten@torsion.org', 'commit_date': datetime.datetime(2008, 7, 15, 20, 34, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4a169fdf3644c1d637a9765b9bc5212c75691ce', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbb778a4d6ed472b6a39d861f43e6a61502c799d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c60bf84d71941eecf406c22e6adc79684daebd4', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74aa28e02797adc1aab3003e2012f8b125fbea3e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb60b25399c89def1bfe289a019ec83a8cc08155', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '206a9c960743c21bc69b43e2b54eacba8e611221', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a1d1a2e5902f36a43cebbda25f3ee4dac292fb0', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b024daae0bea31020bad0967cb3b0c2552a097b', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f82631e3bbb725078e416a1e910dcf63535597b8', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d761dd86b55f5ad9994af0e707a8c3984031236', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc56fd33a01e5f437f1bab9663bca2f0266e4b35', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcb90bba50561a9ad204adef15fb0fcaaecc6aaf', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8384eaefb1c42068f9dffe99a235f242c0f9cf5b', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f90d30e0e19a4e56ac58d51583be5b48f180c677', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6475345a8fbaa9b3d9aaeb7444075829c49343ab', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3315555d06e4690a9905a42de77dae870db47372', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '425f260a22f0c74b214b3cfd1d59ea8da4c96f2f', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '197920d9efa9e0e823e1bdf7e87ff2b56747867e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd370ff958d04bc43a31f38f6234430e1d586609c', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1410606490,feat: exclude gui,"<!--- Provide a general summary of your changes in the Title above -->

### Description
Progress updates for #907 will be added here. This is the base implementation which will allow the user to add exclude rules, select exclude presets to include, and edit/copy/paste the exclusions from a ""Raw"" tab.

TODO:
- [x] Presets Tab and a starting json file for presets.
- [x] Raw tab.
- [x] Actually pass the data to borg.
- [x] Exclude if Present Dialog.

### Related Issue
#907 

### Motivation and Context
Makes it simpler for the user to add excludes with a more intuitive interface.

### How Has This Been Tested?
Testing this manually for all scenarios that I can think of.

[Screencast from 21-08-23 01:12:55 AM IST.webm](https://github.com/borgbase/vorta/assets/41837037/f7bf556a-77a2-4708-a5ba-a5f6bda1f641)

### Screenshots (if appropriate):

### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [ ] I have added tests to cover my changes.
- [ ] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->

***

### Follow ups

- [ ] Preview excludes (dialog)
- [ ] Edit custom patterns inline",False,1742,https://api.github.com/repos/borgbase/vorta/pulls/1742,https://github.com/borgbase/vorta/pull/1742,closed,1136,95,17,40,78,44,0,0,[],2023-06-27 21:08:30+00:00,2023-11-24 21:20:50+00:00,12960740.0,"150 days, 0:12:20","[{'comment_id': 1253966710, 'comment_body': 'this can be removed, I had some other thing in mind earlier (linking the row to a github permalink for the json file).', 'comment_created': datetime.datetime(2023, 7, 6, 5, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1259337338, 'comment_body': 'Is the `author` key needed for anything?', 'comment_created': datetime.datetime(2023, 7, 11, 7, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1259337669, 'comment_body': 'What is the meaning of `fm`?', 'comment_created': datetime.datetime(2023, 7, 11, 7, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1259338216, 'comment_body': '```suggestion\r\n        ""name"": ""Rust artifacts"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 11, 7, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1259431194, 'comment_body': 'Nope, only to attribute the author.', 'comment_created': datetime.datetime(2023, 7, 11, 8, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1259433526, 'comment_body': 'https://borgbackup.readthedocs.io/en/stable/usage/help.html#borg-help-patterns @real-yfprojects asked me to follow this link for patterns and I think fm: is the default one, so I went with that in these patterns. Other pattern types can be added by the community in the future by just changing this text to \r\n\r\n`sh:` etc.', 'comment_created': datetime.datetime(2023, 7, 11, 8, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1259434667, 'comment_body': ""Ah, I follow British English so that's what google recommended."", 'comment_created': datetime.datetime(2023, 7, 11, 8, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1259438503, 'comment_body': ""Wasn't aware that's how it's written in British English. Then let's keep it :)"", 'comment_created': datetime.datetime(2023, 7, 11, 9, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1259708673, 'comment_body': ""Does that make sense? Contributors might  modify presets in the future. Furthermore since the author isn't shown in the GUI."", 'comment_created': datetime.datetime(2023, 7, 11, 13, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1259741400, 'comment_body': '@m3nu I had the same thought regarding edits and revisions.', 'comment_created': datetime.datetime(2023, 7, 11, 13, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1262765574, 'comment_body': 'Have you tested these patterns with borg >1.2? AFAIK paths are relative to root and do not contain a leading slash.', 'comment_created': datetime.datetime(2023, 7, 13, 15, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262771450, 'comment_body': ""Why don't you add these fields to `BackupProfileModel`?"", 'comment_created': datetime.datetime(2023, 7, 13, 16, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262772274, 'comment_body': 'What is the date used for?', 'comment_created': datetime.datetime(2023, 7, 13, 16, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262774998, 'comment_body': 'Inconsistent naming.', 'comment_created': datetime.datetime(2023, 7, 13, 16, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262776290, 'comment_body': ""This name isn't descriptive."", 'comment_created': datetime.datetime(2023, 7, 13, 16, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262777612, 'comment_body': 'You can put this into the class docstring or move the comment into `setData` but it seems out of place at the moment.', 'comment_created': datetime.datetime(2023, 7, 13, 16, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262960573, 'comment_body': ""What is the date used for other than sorting? Couldn't we use the id column in the table instead? Or whatabout sorting alphabetically?"", 'comment_created': datetime.datetime(2023, 7, 13, 19, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262962813, 'comment_body': 'Maybe use an Enum, so devs can use autocompletion?', 'comment_created': datetime.datetime(2023, 7, 13, 19, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262965999, 'comment_body': 'What is the reason for this default?', 'comment_created': datetime.datetime(2023, 7, 13, 19, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1263485593, 'comment_body': ""I haven't tested these paths yet (not started with that phase)."", 'comment_created': datetime.datetime(2023, 7, 14, 8, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1263486186, 'comment_body': 'Yeah, that makes more sense.', 'comment_created': datetime.datetime(2023, 7, 14, 8, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1263486485, 'comment_body': 'Nothing, will be removed when I move this to BackupProfileModel now.', 'comment_created': datetime.datetime(2023, 7, 14, 8, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1263488696, 'comment_body': ""Don't have a preference, but yes I can remove the date. I'll sort by id."", 'comment_created': datetime.datetime(2023, 7, 14, 9, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1263489693, 'comment_body': 'When I added presets, I found it annoying to manually enable them to see them in the preview tab, adding should ideally enable them by default?', 'comment_created': datetime.datetime(2023, 7, 14, 9, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1263527074, 'comment_body': ':+1: one after another', 'comment_created': datetime.datetime(2023, 7, 14, 9, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1263529528, 'comment_body': 'Makes sense.', 'comment_created': datetime.datetime(2023, 7, 14, 9, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1264367936, 'comment_body': 'Something like this  - https://github.com/coleifer/peewee/issues/630#issuecomment-459404401?', 'comment_created': datetime.datetime(2023, 7, 15, 9, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1266890715, 'comment_body': 'My idea was using an Enum with String values that are then passed to peewee but your suggestion is also possible.', 'comment_created': datetime.datetime(2023, 7, 18, 14, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1285065013, 'comment_body': 'Please use the unicode ellipsis here.', 'comment_created': datetime.datetime(2023, 8, 5, 14, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1285066183, 'comment_body': '\n```suggestion\n            ""This is a preview of the patterns that will be passed to borg for excluding files and folders from the backup.""\n```', 'comment_created': datetime.datetime(2023, 8, 5, 14, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1285066202, 'comment_body': '\n```suggestion\n            ""These presets are provided by the community and are a good starting point for excluding certain types of files. You can enable or disable them as you see fit. To see the patterns that comprise a preset, switch to the \\""Preview\\"" tab after enabling it.""  # noqa: E501\n```', 'comment_created': datetime.datetime(2023, 8, 5, 14, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1285066286, 'comment_body': 'Please use `translate` to mark these texts for translation.', 'comment_created': datetime.datetime(2023, 8, 5, 14, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299992348, 'comment_body': 'This can raise `peewee.IntegrityError: UNIQUE constraint failed: exclusionmodel.name`', 'comment_created': datetime.datetime(2023, 8, 21, 11, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1300216265, 'comment_body': 'I should just catch it and skip those cases right?', 'comment_created': datetime.datetime(2023, 8, 21, 14, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1300223461, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 21, 14, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1300268656, 'comment_body': 'I would think this shadows other kinds of integrity errors but the peewee docs do it like that in their examples as well.', 'comment_created': datetime.datetime(2023, 8, 21, 15, 17, 17, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302801480, 'comment_body': 'Why do we even need to customly style the widgets?\nAnd when you use the same style for multiple lists you can store the style sheet in a variable and reuse it.', 'comment_created': datetime.datetime(2023, 8, 23, 10, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302806198, 'comment_body': ""I didn't find a way to style these elements other than this one (border, icon, item).\n\nYes, I can use the same string again, will do."", 'comment_created': datetime.datetime(2023, 8, 23, 10, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1302810198, 'comment_body': ""> I didn't find a way to style these elements other than this one (border, icon, item).\r\n\r\nYeah, but why to you want to style them? You override the Qt style used on the different platforms. On KDE Qt apps will use the Breeze theme which results in very nice looking list items, on Gnome one might use Kvantum."", 'comment_created': datetime.datetime(2023, 8, 23, 10, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302817417, 'comment_body': ""![image](https://github.com/borgbase/vorta/assets/41837037/b7320a3c-c249-4f47-9dbe-3fdef4370693)\r\nIt looked too packed for me, that's why I added the styles. Does it look good for you by default? Maybe then I can remove them."", 'comment_created': datetime.datetime(2023, 8, 23, 10, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1302891044, 'comment_body': ""> It looked too packed for me, that's why I added the styles.\r\n\r\nThat's true but that's how the cerators of the oxygen style have chosen to design it. Outside my dev environment Vorta's lists look similar to this:\r\n\r\n![grafik](https://github.com/borgbase/vorta/assets/62463991/9de5ad0f-8ce9-42d1-898f-97e386527b1c)\r\n"", 'comment_created': datetime.datetime(2023, 8, 23, 11, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1313490502, 'comment_body': ""I suppose the example shouldn't be enabled by default."", 'comment_created': datetime.datetime(2023, 9, 1, 20, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1313490773, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2023, 9, 1, 20, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1313491999, 'comment_body': 'Can you add a code comment exlaining what this catch is for?', 'comment_created': datetime.datetime(2023, 9, 1, 20, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}]","[{'commit_sha': '21c86cd84651084b80ba9d7f3043cf54943d1815', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e46e1f181e6ff022448cb7fe5321a56e82aecacf', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2cd061b156a8dd4ce3f860a296363142f8100b6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b2640848601ecc85998bc25b6bc6548f60e588', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28c082d3c065e93259a9bf4a604169b0c611c36e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd2367d9a74d8fd4deff963f6be05782586bf6d6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b4548f6c5eee04b2ba39c517ea5cb9ff8b47c43', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1fc018d752f05ca0e12a34650a70aa95bcf44b2', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62d8e108ce5d64eaef9498f63bf584b3322d5666', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fccea565ba4fac61ef1fe1d7b74c217e4823585c', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8899ab0e4ed97658381b96293def9209e41c7e2', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8f437275bfea0f5767d2d1f2847955b3be13e58', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9c6ede9f6c41fad95bfcaa4a541976be3388ea5', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59551135c86c9f8ba7d1964e78e43852a7dbc953', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e255ddeffe6092fe028a3fcbe73613b6c22b03e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2f8d8baabfe14560334d68f1f0bd1b66593b266', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe6b7ed3c15e8d750360bd7ff560c123a791d87', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae2e948d174a4655d411a49190374b0bbb564179', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6da86d7119921beb170e6e8e0acbc2c489539431', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dbfe1a21e3d8d0184b430088706c69347200893', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96e3fa7c2721afa58df0f09104ad79acd2fbc43c', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f9014a1b8ee3d39b921dfb55f32707c0af54bd9', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bcd08b6ef47a8896a458a3b89f869074fc13512', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '328b46f3fef3336ac0558ec05a5deda463b81fc7', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f27c6536adc49b512725543def4e971e6dabe938', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b00779c9350e439aa638e3f7b533a6be0e6eb950', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d8885d4b5b0e8ea510f0ad59392cc41d0363017', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9188265d6c77dd9c1d836e7407e1066a7677b5f9', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c50f21118a750114a6af911c178c26819b7c78fd', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c2e4c2fef247540b81c9189e640346d6bb8544c', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4522a5b11fdc7c2ec080a77bf0b5a4bef2b9a57b', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '423aa4d9d93077c8854b2a1c6bcb332a3e20766d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cae7ba4e0f754df3136f74d2eb80f264a33045d6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf22238a9d06c2a1a020e3dfc415940474514c8', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d71208ec64327296ac6e3e8e241b91cbb8f0b8e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15c87e68bc11750a973a2c862e649038dd07a666', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25a44d6009d4b369717d47d29c000dfb532b87c9', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c74853d84c9677b58a8b549a15f34f0b9e2ca258', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85cff5882e82e13a9c9cafcba2a843f424556e82', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3566e0d6d918793465554702ae5110a4cc802895', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1288123133,feat: allow defining custom variables in config file,"```
# Constants to use in the configuration file. All occurrences of the
# constant name within curly braces will be replaced with the value.
# For example, if you have a constant named ""hostname"" with the value
# ""myhostname"", then the string ""{hostname}"" will be replaced with
# ""myhostname"" in the configuration file.
# constants:
    # hostname: myhostname
    # prefix: myprefix
```

- [x]  Tests pass
- [x] can replace primitive constants
- [x] Support more [complex](https://projects.torsion.org/borgmatic-collective/borgmatic/issues/612#issuecomment-5715) data types.

Still have to add support for the third point from `generate.py::render_configuration()` and test it out.

Questions:
1. Should this support more complex cases like these:

```yaml
constants:
  x: /home/divi/folder
  y: {x}/file.txt
```
",True,60,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/60,https://github.com/borgmatic-collective/borgmatic/pull/60,closed,55,3,3,3,9,6,0,0,[],2023-03-23 21:14:54+00:00,2023-03-25 05:50:57+00:00,117363.0,"1 day, 8:36:03","[{'comment_id': 1146893465, 'comment_body': 'Nit: No single-letter variables. (I realize this is kind of obnoxious. :smile:)', 'comment_created': datetime.datetime(2023, 3, 23, 21, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1146918314, 'comment_body': 'Ah, I keep forgetting 😅. Is there maybe a flake8 rule or something for this? The consistency makes sense to me. And we might add one for using `f""` strings instead of `.format`  if that\'s consistent too.', 'comment_created': datetime.datetime(2023, 3, 23, 21, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1146924549, 'comment_body': ""found this - https://pypi.org/project/flake8-variables-names/ and this - https://github.com/MichaelKim0407/flake8-use-fstring. They don't seem to be that popular though.\r\n"", 'comment_created': datetime.datetime(2023, 3, 23, 22, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1146925657, 'comment_body': ""Yes, I was just looking at them too after your first comment! I'll integrate one or both of these or update https://torsion.org/borgmatic/docs/how-to/develop-on-borgmatic/ page to mention these conventions."", 'comment_created': datetime.datetime(2023, 3, 23, 22, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1147157442, 'comment_body': ""Well, it was a pain, but it's done! Both plugins are integrated in master—and there are no more `string.format()`s in the code! Thanks for suggesting this."", 'comment_created': datetime.datetime(2023, 3, 24, 6, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1147163609, 'comment_body': ""That was a lot of f'strings indeed 😆!"", 'comment_created': datetime.datetime(2023, 3, 24, 6, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}]","[{'commit_sha': '6f300b00795dd76ced62407f9eb065778a8bcbe6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af95134cd2ec7a779600247be818bf180aa8de7b', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78e8bb6c8c0d47d491f7a9a9cb1a4d892ef53963', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1260887535,feat: add dump-restore support for sqlite databases,"fixes [#295](https://projects.torsion.org/borgmatic-collective/borgmatic/issues/295)
Will add to e2e tests once I understand how to do so. ",True,50,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/50,https://github.com/borgmatic-collective/borgmatic/pull/50,closed,296,5,8,8,0,30,0,0,[],2023-03-02 18:28:35+00:00,2023-03-04 17:47:21+00:00,170326.0,"1 day, 23:18:46","[{'comment_id': 1123746905, 'comment_body': '```suggestion\r\nAs of now, borgmatic supports PostgreSQL, MySQL/MariaDB, MongoDB and SQLite databases\r\n```\r\njust noticed this, will fix with the next commit.', 'comment_created': datetime.datetime(2023, 3, 2, 21, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1123776476, 'comment_body': 'I think you can safely omit the ""If absolute ..."" sentence, as it\'s strongly implied!', 'comment_created': datetime.datetime(2023, 3, 2, 22, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123777517, 'comment_body': 'I\'d suggest putting this ""name"" option before ""path"" so as to keep to the convention set by the other database hooks above.', 'comment_created': datetime.datetime(2023, 3, 2, 22, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123780681, 'comment_body': 'This second sentence might be clearer if it was instead something like: ""It is not the path to the database file itself.""', 'comment_created': datetime.datetime(2023, 3, 2, 22, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123784416, 'comment_body': 'Please remove the ""# pragma: no cover"" here. We definitely want test coverage to be tracked for main functions like these ones. Thanks!', 'comment_created': datetime.datetime(2023, 3, 2, 22, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123787957, 'comment_body': ""This variable is only used once, so you could cut it and just use `database['name']` directly below. (I don't feel strongly either way.)"", 'comment_created': datetime.datetime(2023, 3, 2, 22, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123808980, 'comment_body': ""You could probably inline the removal command here, given it's so short. (Do not feel strongly.)"", 'comment_created': datetime.datetime(2023, 3, 2, 22, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123811084, 'comment_body': 'I think the ""-"" shouldn\'t be on this line, right? Since the path and the name are part of the same list mapping.', 'comment_created': datetime.datetime(2023, 3, 2, 22, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123811600, 'comment_body': 'Same thing here.', 'comment_created': datetime.datetime(2023, 3, 2, 22, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123812587, 'comment_body': ""That's a fair omission! Do you think it's worth documenting what happens if `all` is used for a SQLite database.. Or even coding in an error if the user tries to set a name of `all`?"", 'comment_created': datetime.datetime(2023, 3, 2, 22, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123813142, 'comment_body': 'Remove ""-"" here too.', 'comment_created': datetime.datetime(2023, 3, 2, 22, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123814378, 'comment_body': ""IMO you don't need to mock out the logging calls at all, as they're part of the standard library and we don't really care about the side effects. Up to you though."", 'comment_created': datetime.datetime(2023, 3, 2, 22, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123821159, 'comment_body': ""Rather than returning the same string everytime, I'd recommend returning a unique flexmock instance, which is really designed for this sort of use case. One way to do that is something like:\r\n\r\n```python\r\nprocesses = [flexmock(), flexmock()]\r\nflexmock(module).should_receive('execute_command').and_return(processes[0]).and_return(processes[1])\r\n\r\nassert module.dump_databases(...) == processes\r\n```"", 'comment_created': datetime.datetime(2023, 3, 2, 22, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123822443, 'comment_body': ""Does this actually work? You might need to do this instead:\r\n\r\n```python\r\nflexmock(module.dump).should_receive('create_parent_directory_for_dump')\r\n```"", 'comment_created': datetime.datetime(2023, 3, 2, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123823191, 'comment_body': ""Since you're testing that something _doesn't_ happen (as per the test function's name), this might be a good place to do:\r\n\r\n```python\r\nflexmock(module).should_receive('execute_command').never()\r\n```\r\n\r\nYou could also slap a `.never()` onto the `create_parent_directory_for_dump` mocking above."", 'comment_created': datetime.datetime(2023, 3, 2, 22, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123825436, 'comment_body': ""You'll also need to mock out `execute_command()` in order to mock out the removal of the database file prior to restoration."", 'comment_created': datetime.datetime(2023, 3, 2, 22, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123825946, 'comment_body': ""This mock doesn't need to return anything."", 'comment_created': datetime.datetime(2023, 3, 2, 22, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1123827687, 'comment_body': ""An additional test you could add as well in a separate test function: Testing what happens when the database doesn't exist and you skip the removal."", 'comment_created': datetime.datetime(2023, 3, 2, 22, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1124803379, 'comment_body': ""Maybe a message with `logger.info` is enough, letting the user know it's treated as a general name for sqlite databases instead of a special keyword.\r\nI'll remove it from the docs."", 'comment_created': datetime.datetime(2023, 3, 3, 17, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1124808373, 'comment_body': 'Sounds good!', 'comment_created': datetime.datetime(2023, 3, 3, 17, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1125273115, 'comment_body': ""This looks like it's only checking the first database for the name `all`, when in practice a user *could* configure multiple databases and, for example, name the second or third one `all`. If you wanted to deal with this you could do this check for the current database within the `for` loop below instead of here."", 'comment_created': datetime.datetime(2023, 3, 4, 3, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1125275765, 'comment_body': ""It just occurred to me that you could replace this with the Python native `os.remove()` since we don't need anything special provided by `execute_command()`. Up to you though.\r\n\r\nIf you do make that change, the `except` on the next line would change to a `FileNotFoundError`."", 'comment_created': datetime.datetime(2023, 3, 4, 3, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1125282445, 'comment_body': ""Unless I'm missing it, it doesn't look like `/tmp/sqlite_test.db` is actually populated anywhere. So when the test dumps the database file, it's simply dumping.. nothing..? (I just confirmed that `sqlite3` will happily dump a non-existent file.) So do you think it's worth trying to create this as a SQLite test file within the test, so it's actually dumping something?\r\n\r\nRelated question: Do you think borgmatic should warn or error if the `path` file to be dumped doesn't exist? Or should that be on the user to worry about?"", 'comment_created': datetime.datetime(2023, 3, 4, 3, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1125289039, 'comment_body': 'You could do a `.never()` assertion here that no commands are executed (like you do in tests below). Up to you!', 'comment_created': datetime.datetime(2023, 3, 4, 3, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1125387401, 'comment_body': ""For the first part, I don't think the contents of the file really matter for the test?\r\nSecond part, yeah, I value UX and think that a simple warning log should be done to let the user know that the file didn't exist firsthand, and they are creating an empty database and dumping it's contents."", 'comment_created': datetime.datetime(2023, 3, 4, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1125388306, 'comment_body': ""Okay, I'm fine with dumping nothing if you are! And a warning sounds great."", 'comment_created': datetime.datetime(2023, 3, 4, 6, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1125403822, 'comment_body': ""IMO this should be mocked out in any test that gets this far, so as to avoid attempting file removal on the filesystem during tests. I realize it's unlikely to delete anything real, but I try to avoid unintended filesystem side-effects in tests. Sorry to be a pain here!"", 'comment_created': datetime.datetime(2023, 3, 4, 7, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1125408948, 'comment_body': ""No worries! I'm not in a hurry to get this merged 😄. Nice catch though, helps me think more about the side effects of my code."", 'comment_created': datetime.datetime(2023, 3, 4, 7, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1125502902, 'comment_body': ""Looks like you've maybe left a test path in here...?"", 'comment_created': datetime.datetime(2023, 3, 4, 17, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1125505212, 'comment_body': 'ah, my bad, sorry.\r\n', 'comment_created': datetime.datetime(2023, 3, 4, 17, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}]","[{'commit_sha': 'af1cc27988f16bde56b4b07487b72002a8788236', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aa88085ed7310b43380f3e4ec48449fb73f7692', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '903507bd03aed7942fd8434b7ba8f01005c7e97a', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '767a7d900b35ada478867d6aafb76ee6abda248f', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1793ad74bdf4ce485b9aeb7c10e1995dee54cbeb', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '675e54ba9f2b8001c11550aa6f46a7ab48f2de43', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c71eb60cd253d9d1ce70ad1ffefb86610ee0231d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf0275a3ed4c524444731f573b2c1976ad840548', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1263222088,fix: remove extra dark mode styles,To avoid unintended behaviour on devices that have enabled dark mode.,True,52,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/52,https://github.com/borgmatic-collective/borgmatic/pull/52,closed,0,70,4,1,1,0,0,0,[],2023-03-04 21:47:40+00:00,2023-03-05 00:18:04+00:00,9024.0,2:30:24,[],"[{'commit_sha': 'db18364a73e57c01f55ebfd1abb83660334083b9', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1280828731,feat: add optional check for existence of source directories,"Resolves [#501](https://projects.torsion.org/borgmatic-collective/borgmatic/issues/501).
Will add tests once I know if this is correct.",True,53,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/53,https://github.com/borgmatic-collective/borgmatic/pull/53,closed,46,1,3,3,6,1,0,0,[],2023-03-17 23:07:17+00:00,2023-03-18 20:59:20+00:00,78723.0,21:52:03,"[{'comment_id': 1140904140, 'comment_body': 'You can use [f-strings](https://realpython.com/python-f-strings/) for new code if you like.', 'comment_created': datetime.datetime(2023, 3, 18, 2, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}]","[{'commit_sha': 'd17b2c74dbf8dba351b9664955901ea33c8c34b5', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '997f60b3e660a4b219c611d83d628c9bcf55626a', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f803836416f15c50da237b1e419ee4fff1810654', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1281763487,feat: file:// URLs support,Yet to do (and write) some tests.,True,54,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/54,https://github.com/borgmatic-collective/borgmatic/pull/54,closed,39,26,6,4,2,6,0,0,[],2023-03-19 21:13:59+00:00,2023-03-21 17:22:40+00:00,158921.0,"1 day, 20:08:41","[{'comment_id': 1141569842, 'comment_body': ""Given that this logic is repeated and is now a little more complicated than a one-liner, you might consider factoring it out into a common function. Among other benefits, that would allow you to write tests for it in one place and test the logic independently from everything around it.\r\n\r\nHowever.. Is this logic even necessary here? If I'm following the code correctly, then your changes in `normalize.py` mean that all repository paths that come from a configuration file are already processed and absolute (with the `file://` prefix removed) by the time they get here. Therefore within `export_tar.py`, it shouldn't be necessary to process the repository path any further, right?\r\n\r\nThe same question goes for the `extract.py` changes. Are they even necessary there? Can you just reduce everything down to simply `repository` and lose all the `if` logic?"", 'comment_created': datetime.datetime(2023, 3, 20, 2, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1141586471, 'comment_body': ""Here's a way to do this last part that avoids a magic number (or at least uses a slightly less magic one):\r\n\r\n```python\r\nos.path.abspath(repository.partition('file://')[-1])\r\n```\r\n\r\nAn alternative:\r\n\r\n```python\r\nos.path.abspath(repository[len('file://'):])\r\n```"", 'comment_created': datetime.datetime(2023, 3, 20, 3, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1141690099, 'comment_body': 'Yes, I can.\nI had the same doubt but my reason for doing this was that even before my changes there was a conditional here (on top of the same one in normalize.py).\nWas that also redundant?', 'comment_created': datetime.datetime(2023, 3, 20, 6, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1141691558, 'comment_body': 'yeah, I used the second suggestion before I used the magic number, but got some interesting conflicts between black and flake8 😅. Will share on IRC and try the first suggestion.', 'comment_created': datetime.datetime(2023, 3, 20, 6, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1142158386, 'comment_body': ""yeah, looks like it was redundant at the first place, I'll use `repository` directly and check."", 'comment_created': datetime.datetime(2023, 3, 20, 13, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1142441110, 'comment_body': ""I think you are correct that it's redundant. My guess is that `normalize.py` wasn't always doing `abspath()` and so, previously, these action functions needed to do it themselves."", 'comment_created': datetime.datetime(2023, 3, 20, 17, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}]","[{'commit_sha': '58c95d8015344fe442d7cad1036c73573a93dd52', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86587ab2dcd561527f7c79b4e6b76b0d117196db', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e86d223bbf0e6ff836a3f18111fc3b24cda18783', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39ad8f64c4d9038f3ca16d6902420fe15579bba0', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1284900322,fix: rephrase error when running from config,"to avoid confusion, as the user might think the problem is with their config file.

fixes [#623](https://projects.torsion.org/borgmatic-collective/borgmatic/issues/623)",True,55,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/55,https://github.com/borgmatic-collective/borgmatic/pull/55,closed,1,3,1,1,1,0,0,0,[],2023-03-21 20:53:34+00:00,2023-03-21 21:23:09+00:00,1775.0,0:29:35,[],"[{'commit_sha': '23e7f27ee4a74063d3a91bcf1a74defc63eec09a', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1285205101,fix: no error on database backups without source dirs,"Your detailed explanation in [#655](https://projects.torsion.org/borgmatic-collective/borgmatic/issues/655#issuecomment-5679) helped.

This solution passes all current tests, so it should be backward compatible, and does not raise an error anymore when source dirs don't exist:
![image](https://user-images.githubusercontent.com/41837037/226800424-b818af62-098e-4ad6-ab31-c211871fa17a.png)
",True,56,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/56,https://github.com/borgmatic-collective/borgmatic/pull/56,closed,69,35,3,4,1,9,0,0,[],2023-03-22 04:14:16+00:00,2023-03-22 19:59:01+00:00,56685.0,15:44:45,"[{'comment_id': 1144278695, 'comment_body': ""Minor nit: The (unwritten) code style is that borgmatic source doesn't use single-letter variables."", 'comment_created': datetime.datetime(2023, 3, 22, 6, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1144278760, 'comment_body': 'Adding this parameter to `execute_command_and_capture_output()` is a clever way to change the error behavior of just `collect_special_file_paths()` without affecting other code, but the name of the parameter ""leaks"" implementation details about what\'s considered an error. Maybe it could be named something more generic like `raise_on_exit_code_warning` or `treat_exit_code_warning_as_error` or `error_on_warning` or whatever.\r\n\r\nI also wonder a little whether the parameter is needed at all. Maybe this same type of bug exists in some of the other callers of `execute_command_and_capture_output()`.... Having wondered that aloud, I don\'t think you need to expand scope to encompass the other callers right now, but it\'s maybe something to think about or look out for in the future.', 'comment_created': datetime.datetime(2023, 3, 22, 6, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1144283288, 'comment_body': 'This logic looks correct to me, but it\'s effectively repeating some of the logic encapsulated in `exit_code_indicates_error()`, which has indeed changed over time as the concept of ""what\'s an error"" has evolved with different Borg releases. So it would be great to continue to keep that logic in one place.\r\n\r\nTo do that, maybe you could call `exit_code_indicates_error()` as needed from `execute_command_and_capture_output()`? Right now `exit_code_indicates_error()` takes a `process` as a parameter, but there\'s no reason it needs to. It could just as easily take a command sequence (which you have here), and then other callers could pass in `process.args` for that command.\r\n\r\nI know this expands scope a little, but hopefully not too much as it\'s mostly a mechanical change.', 'comment_created': datetime.datetime(2023, 3, 22, 6, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1144573362, 'comment_body': ""I tried running the old tests after removing `raise_on_exit_code` and just keeping this logic:\r\n```python\r\nexcept subprocess.CalledProcessError as error:\r\n    if error.returncode != 1:\r\n        raise\r\n    output = error.output\r\n    logger.warning('Command output: {}'.format(output))\r\n```\r\nAll the tests passed, and considering the 100% test coverage for Borgmatic, maybe this parameter can be removed, and still, we can get rid of the unexpected error. What do you recommend?"", 'comment_created': datetime.datetime(2023, 3, 22, 10, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1145224827, 'comment_body': ""borgmatic has 100%-ish test coverage, but it's mostly unit tests instead of integration tests. So if some callers in one unit are implicitly relying on Borg warnings being treated as errors in another unit, that won't necessarily be captured in any existing test.\r\n\r\nHaving said that, I went ahead and manually reviewed all callers of `execute_command_and_capture_output()`, and I didn't immediately see anything that would be problematic. And just thinking this through, if some existing code calls Borg and now doesn't receive an exception when Borg returns exit code 1, that should hopefully not hurt anything and is arguably more correct.\r\n\r\nThe one case I did test manually was when `borgmatic init` probes for repository existence with `borg rinfo`/`borg info`. And I did confirm that when the repository doesn't exist, Borg helpfully returns exit code 2 instead of 1.\r\n\r\nSo my recommendation is to proceed with your approach!"", 'comment_created': datetime.datetime(2023, 3, 22, 18, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1145226943, 'comment_body': 'Looks like this docstring comment is now out of date!', 'comment_created': datetime.datetime(2023, 3, 22, 18, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1145230204, 'comment_body': ""It looks like this comment is also out of date. I think you can almost just leave it as it was: `Raise subprocesses.CalledProcessError if an error occurs while running the command.` That's because an error is non-zero for all commands except for Borg, for which warnings (exit code 1) are treated as such and errors (not exit code 1 or 0) are treated as errors. So in all cases, you're raising for semantic errors."", 'comment_created': datetime.datetime(2023, 3, 22, 18, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1145230809, 'comment_body': 'Looks like this needs to pass in the `command`, too?', 'comment_created': datetime.datetime(2023, 3, 22, 18, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1145234132, 'comment_body': ""Shouldn't this be more like `test_execute_command_and_capture_output_raises_when_command_errors()` or something?"", 'comment_created': datetime.datetime(2023, 3, 22, 18, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}]","[{'commit_sha': '09183464cde4aa9d82a271c3cb19ac7ccabca1a8', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd235f042602a9a29cc5f81880e3b36c21c0fcc3', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b5ede8044fa93bd2f7bab40f1a6138af127d27b', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e3a3bf1e7b73fa34e73e6905d6b17c27bb1bd5f', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1286399684,feat: tag repos,"Just a POC with only  `create_archive` accepting a repo label for now. 
Once reviewed, adding label support to other borgmatic `--repository` commands should be easier.

This is what it looks like:
![image](https://user-images.githubusercontent.com/41837037/227016638-edccd016-363a-4815-8eeb-658605f617f7.png)
with this config:
![image](https://user-images.githubusercontent.com/41837037/227016751-f770f440-6f91-4400-964f-6a099bffeefa.png)

Tasks:
- [x] fix Merge conflicts (probably the format() and fstring thing).
- [x] two end to end tests failing for some reason.
- [x] Add normalization test
- [x] Add to docs

e2e:
![image](https://user-images.githubusercontent.com/41837037/227627856-60d162f8-658f-4c6f-8185-62210e0ef8fa.png)
unit:
![image](https://user-images.githubusercontent.com/41837037/227627887-c446d30a-9f0d-43e6-9cf5-0bd83ca9279b.png)
",True,57,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/57,https://github.com/borgmatic-collective/borgmatic/pull/57,closed,614,461,74,11,8,21,0,0,[],2023-03-22 19:33:17+00:00,2023-03-27 22:46:22+00:00,443585.0,"5 days, 3:13:05","[{'comment_id': 1145320354, 'comment_body': ""For clarity, I'd suggest calling this variable `repository_path` or similar."", 'comment_created': datetime.datetime(2023, 3, 22, 19, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1145322687, 'comment_body': 'Missing start of sentence here!', 'comment_created': datetime.datetime(2023, 3, 22, 19, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1145323202, 'comment_body': 'Example should just be a string now.', 'comment_created': datetime.datetime(2023, 3, 22, 19, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1145323529, 'comment_body': 'It might be good to suggest here what the label is used for.', 'comment_created': datetime.datetime(2023, 3, 22, 19, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1145327471, 'comment_body': ""If there are implicit expectations here about whether the second repository can be a dict or not, I'd recommend changing the function parameter names and docstring accordingly. (E.g., change `first` and `second` to `config_repository` and `repository_name` or something.) Because if I'm reading this right, if you pass in two dicts right now, this function won't work! An alternative would be to handle any `first` and `second` parameters regardless of whether they are dicts or strings."", 'comment_created': datetime.datetime(2023, 3, 22, 19, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1148436279, 'comment_body': ""Why would it ever be a string at this point? Don't repositories get normalized from strings to dicts after loading the configuration file?"", 'comment_created': datetime.datetime(2023, 3, 25, 21, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1148436563, 'comment_body': ""Same here. If I'm reading this correctly, the repository value in `run_actions()` comes from the repository queue in `run_configuration()`—which gets populated with the (presumably already normalized) `location['repositories']`."", 'comment_created': datetime.datetime(2023, 3, 25, 21, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1148436877, 'comment_body': ""Nice! I'm glad to see it's that simple."", 'comment_created': datetime.datetime(2023, 3, 25, 21, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1148437121, 'comment_body': ""It's certainly not a huge deal if you don't, but you might consider renaming the `repository` parameter in these `borgmatic.borg.*` functions to `repository_path`. That way it's abundantly clear that it's _not_ one of the repository dicts from config."", 'comment_created': datetime.datetime(2023, 3, 25, 21, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1148437919, 'comment_body': ""This sets `label` to a blank value even if it's omitted from the original configuration. It wouldn't normally be a problem, except this code path is also executed when _updating_ configuration (`generate-borgmatic-configuration --source ...`)\r\n\r\nSo would something like this work instead?\r\n\r\n```python\r\nconfig['location']['repositories'].append(\r\n    dict({'path': updated_repository_path}, **repository_dict)\r\n)\r\n```\r\n\r\nThat way `label` (and anything else in that dict) would only get copied over if it's already set.\r\n\r\nSimilar idea for the dicts through the rest of this function."", 'comment_created': datetime.datetime(2023, 3, 25, 21, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1148439982, 'comment_body': '""option"" -> ""flag"" here. In user-facing stuff, I try to be pretty rigorous about using ""option"" to refer to configuration file values and ""flag"" to refer to command-line arguments. Cuts down on confusion, IMO.', 'comment_created': datetime.datetime(2023, 3, 25, 22, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1148440164, 'comment_body': 'Maybe this should say: ""Given two repository dicts or path strings ...""? Or something similar to suggest that it accepts either one.', 'comment_created': datetime.datetime(2023, 3, 25, 22, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1148440271, 'comment_body': 'This is about as straightforward as this can be!', 'comment_created': datetime.datetime(2023, 3, 25, 22, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1148441018, 'comment_body': ""Wouldn't it make more sense to omit `label` if it's not set? After all, it's optional. Similar throughout this test file."", 'comment_created': datetime.datetime(2023, 3, 25, 22, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1148441273, 'comment_body': 'Similar thing here. (It probably would require changing what this function outputs though.)', 'comment_created': datetime.datetime(2023, 3, 25, 22, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1148520926, 'comment_body': ""This doesn't support a mix and match between repository dicts and strs, so might need to document that (note to self). Either all the repositories have to have a label or all of them shouldn't have one."", 'comment_created': datetime.datetime(2023, 3, 26, 10, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1148526750, 'comment_body': ""Ah, looking back now, I probably changed these to pass the tests; I should've changed the tests though.\r\n(The tests after the normalization phase that are sending strings to these functions)."", 'comment_created': datetime.datetime(2023, 3, 26, 10, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1148535179, 'comment_body': 'I can\'t get this one test to pass, something to do with the order these functions are called in:\r\n```bash\r\nflexmock.CallOrderError:\r\nlog_error_records(""bar: Error running actions for repository"", , levelno=30, log_command_error_output=True) \r\ncalled before\r\nlog_error_records(levelno=30, log_command_error_output=True, message=""foo: Error running actions for repository"", error=<class \'OSError\'>)\r\n```\r\n\r\nAny suggestion on what would be the right way to fix this?\r\n\r\n(Also this should probably be `round_robin`)', 'comment_created': datetime.datetime(2023, 3, 26, 11, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1148535561, 'comment_body': ""will do this in one commit, so it's easier to check."", 'comment_created': datetime.datetime(2023, 3, 26, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1148595155, 'comment_body': ""> Any suggestion on what would be the right way to fix this?\r\n\r\nI didn't write this test, but I think what's going on is the config setup is incorrect:\r\n\r\nSimply change this:\r\n\r\n```python\r\nconfig = {'location': {'repositories': [{'path':'foo','path':'bar'}]}, 'storage': {'retries': 1}}\r\n```\r\n\r\n... to this:\r\n\r\n```python\r\nconfig = {'location': {'repositories': [{'path':'foo'}, {'path':'bar'}]}, 'storage': {'retries': 1}}\r\n```\r\n\r\n> (Also this should probably be round_robin)\r\n\r\nYes! Good catch."", 'comment_created': datetime.datetime(2023, 3, 26, 16, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1149800549, 'comment_body': 'For clarity, it might make sense to call this `error_repository_path` and change the `on_error` hook to take a `repository_path`. Alternatively, if it makes more sense, you could leave this as `error_repository` but make it the full repository dict instead of just the path, and then pass the dict into the `on_error` hook instead of the path. Do not feel strongly.', 'comment_created': datetime.datetime(2023, 3, 27, 21, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}]","[{'commit_sha': '8a63c494984425f649375475b07215c9614598f6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a2f287918beea36378aa0dd9fbdf8ca9ae16355', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e83ad9e1e4cb3dfb2209268f51a0f853825c6fc4', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeaf69f49e0081a2b3c835d86d5206a550357155', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bc003560ac55229a1e67f8e60e1d36571ab9a3d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6dfb8753a0a09cc2998fabd93f8fad78efd4850', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b511e679ae7792257afa7201dfc55314df72bc2e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a136fda92d599f0dd6ecbf48e82f6bc0771ef956', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec9def4e71a98d876fdfdbbbe718b8965452491e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b336b9bedfc96532863cf2ace0af0a57a7337af2', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bef1c698b3f2c3cdf2d9c3a44c4bed5a9068282', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1287978250,docs: copy to clipboard support,"Adds a quick copy to clipboard button to every codeblock in the docs, improving UX a little.
Uses https://github.com/mamezou-tech/eleventy-plugin-code-clipboard

![image](https://user-images.githubusercontent.com/41837037/227328838-d77754f4-fe31-4abc-9929-6e74f4af95ce.png)

Let me know what you think!",True,58,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/58,https://github.com/borgmatic-collective/borgmatic/pull/58,closed,7,1,3,1,1,3,0,0,[],2023-03-23 19:32:42+00:00,2023-03-23 19:39:41+00:00,419.0,0:06:59,"[{'comment_id': 1146734339, 'comment_body': ""I'll admit I'm not wild about pulling down 300k just for a single icon, but I guess it'll be cached after the first page load. (Or even before then, if it's on a common CDN.)"", 'comment_created': datetime.datetime(2023, 3, 23, 19, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1146753047, 'comment_body': ""Good point, it didn't cross my mind when I was trying to get it to work 😅. Another dev raised the same point here - https://github.com/mamezou-tech/eleventy-plugin-code-clipboard/issues/8.\r\nApparently, both these css links can be removed, and it'll still work (I wasn't using the tooltips anyway). I got it to work, will submit a patch right away!"", 'comment_created': datetime.datetime(2023, 3, 23, 19, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1146755577, 'comment_body': 'Awesome!', 'comment_created': datetime.datetime(2023, 3, 23, 19, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}]","[{'commit_sha': '66d2f49f18c4a39ccb03955b02ef82d2d09d0007', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1288007648,fix: remove extra links from docs css,"Improve page load time (or just remove extra links).

Works the same.",True,59,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/59,https://github.com/borgmatic-collective/borgmatic/pull/59,closed,15,2,2,2,1,0,0,0,[],2023-03-23 19:56:01+00:00,2023-03-23 19:57:56+00:00,115.0,0:01:55,[],"[{'commit_sha': 'a01dc62468e01e25f2e07f2e587a1b8266a3ac25', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08afad5d819468d315f2400f9c6affd4de1620be', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1288123133,feat: allow defining custom variables in config file,"```
# Constants to use in the configuration file. All occurrences of the
# constant name within curly braces will be replaced with the value.
# For example, if you have a constant named ""hostname"" with the value
# ""myhostname"", then the string ""{hostname}"" will be replaced with
# ""myhostname"" in the configuration file.
# constants:
    # hostname: myhostname
    # prefix: myprefix
```

- [x]  Tests pass
- [x] can replace primitive constants
- [x] Support more [complex](https://projects.torsion.org/borgmatic-collective/borgmatic/issues/612#issuecomment-5715) data types.

Still have to add support for the third point from `generate.py::render_configuration()` and test it out.

Questions:
1. Should this support more complex cases like these:

```yaml
constants:
  x: /home/divi/folder
  y: {x}/file.txt
```
",True,60,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/60,https://github.com/borgmatic-collective/borgmatic/pull/60,closed,55,3,3,3,9,6,0,0,[],2023-03-23 21:14:54+00:00,2023-03-25 05:50:57+00:00,117363.0,"1 day, 8:36:03","[{'comment_id': 1146893465, 'comment_body': 'Nit: No single-letter variables. (I realize this is kind of obnoxious. :smile:)', 'comment_created': datetime.datetime(2023, 3, 23, 21, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1146918314, 'comment_body': 'Ah, I keep forgetting 😅. Is there maybe a flake8 rule or something for this? The consistency makes sense to me. And we might add one for using `f""` strings instead of `.format`  if that\'s consistent too.', 'comment_created': datetime.datetime(2023, 3, 23, 21, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1146924549, 'comment_body': ""found this - https://pypi.org/project/flake8-variables-names/ and this - https://github.com/MichaelKim0407/flake8-use-fstring. They don't seem to be that popular though.\r\n"", 'comment_created': datetime.datetime(2023, 3, 23, 22, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1146925657, 'comment_body': ""Yes, I was just looking at them too after your first comment! I'll integrate one or both of these or update https://torsion.org/borgmatic/docs/how-to/develop-on-borgmatic/ page to mention these conventions."", 'comment_created': datetime.datetime(2023, 3, 23, 22, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1147157442, 'comment_body': ""Well, it was a pain, but it's done! Both plugins are integrated in master—and there are no more `string.format()`s in the code! Thanks for suggesting this."", 'comment_created': datetime.datetime(2023, 3, 24, 6, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1147163609, 'comment_body': ""That was a lot of f'strings indeed 😆!"", 'comment_created': datetime.datetime(2023, 3, 24, 6, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}]","[{'commit_sha': '6f300b00795dd76ced62407f9eb065778a8bcbe6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af95134cd2ec7a779600247be818bf180aa8de7b', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78e8bb6c8c0d47d491f7a9a9cb1a4d892ef53963', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1289634180,fix: docs cli reference create spelling,"Was checking out [#462](https://projects.torsion.org/borgmatic-collective/borgmatic/issues/462), trying to find out where the default behaviour for `borgmatic` is documented.
Found this small spelling mistake.
This should change the [docs](https://torsion.org/borgmatic/docs/reference/command-line/) too right?",True,61,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/61,https://github.com/borgmatic-collective/borgmatic/pull/61,closed,1,1,1,1,1,0,0,0,[],2023-03-24 21:17:08+00:00,2023-03-24 23:09:51+00:00,6763.0,1:52:43,[],"[{'commit_sha': '61ce6f04731a2f146acd375e8494d77d2cbd8874', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1289944301,fix: replace primitive values in config without quotes,Went with the more readable approach.,True,62,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/62,https://github.com/borgmatic-collective/borgmatic/pull/62,closed,1,1,1,1,1,0,0,0,[],2023-03-25 06:43:32+00:00,2023-03-25 06:45:36+00:00,124.0,0:02:04,[],"[{'commit_sha': 'a082cb87cb22c3b75ddfb9df4547d5e1a636bb40', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1293334812,fix: make check repositories work with dict and str repositories,[#662](https://projects.torsion.org/borgmatic-collective/borgmatic/issues/662),True,63,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/63,https://github.com/borgmatic-collective/borgmatic/pull/63,closed,22,3,2,3,8,0,0,0,[],2023-03-28 16:45:32+00:00,2023-03-28 18:15:01+00:00,5369.0,1:29:29,[],"[{'commit_sha': '2d08a63e603d53ec2a949405cdccbbf809bcad37', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce22d2d30252a23ff8aea0c9afb0491d618aca75', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08e358e27f09b84f08e932973ddf666356c889d4', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1298775107,Fix: run typos,"Ran [typos](https://github.com/crate-ci/typos) on the source code to fix minor spelling mistakes.
(I Encountered some during development, so I thought maybe there were more).",True,65,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/65,https://github.com/borgmatic-collective/borgmatic/pull/65,closed,17,17,12,2,2,0,0,0,[],2023-04-01 16:44:52+00:00,2023-04-01 17:44:11+00:00,3559.0,0:59:19,[],"[{'commit_sha': '6054ced931d35173627019054d9bc801cfd2d1ed', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32ab17fa465b7db529d121eaf486906c6e41880e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1299958525,add favicon to documentation,"I thought this was missing 😅.
A green/grey icon would be better for dark mode users, though.
![image](https://user-images.githubusercontent.com/41837037/229504726-157930a3-12f8-4f17-b624-6b82451f86ad.png)

Before:
![image](https://user-images.githubusercontent.com/41837037/229504873-d1812d06-4a96-4932-a23c-8ce0928593f7.png)

After:
![image](https://user-images.githubusercontent.com/41837037/229504836-7b530af9-fdf0-420e-a64e-6ac9812dc975.png)

(Irrelevant, but why is the title on the home page not capitalised?)
",True,66,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/66,https://github.com/borgmatic-collective/borgmatic/pull/66,closed,1,0,1,1,1,0,0,0,[],2023-04-03 12:09:48+00:00,2023-04-03 17:22:12+00:00,18744.0,5:12:24,[],"[{'commit_sha': 'fc58ba5763d37c9b8f1c2d9e9fe6a275911eb2e5', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1303766179,feat: restore specific schemas,"Fixes [#375](https://projects.torsion.org/borgmatic-collective/borgmatic/issues/375)

- [x] Restore a specific psql schema.
- [x] Restore multiple psql schemas at the same time. For this, maybe I have to use multiple `-n`s instead of `--schema`. Ref: the schema section here - https://www.postgresql.org/docs/current/app-pgrestore.html 
- [x] Restore multiple MongoDB collections at the same time.",True,67,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/67,https://github.com/borgmatic-collective/borgmatic/pull/67,closed,134,28,7,4,2,11,0,0,[],2023-04-05 20:46:25+00:00,2023-04-14 23:26:26+00:00,787201.0,"9 days, 2:40:01","[{'comment_id': 1159008627, 'comment_body': 'This is not how it works 😅.', 'comment_created': datetime.datetime(2023, 4, 5, 20, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1159030995, 'comment_body': 'There\'s a risk that this mutates the database dict and ""leaks"" that mutation to callers of `restore_single_database`. Consider making a copy of `database` and mutating that instead. Alternatively, since it looks like the whole `database` dict is only used in a single place below, you could even do it inline:\r\n\r\n```python\r\ndict(database, **{\'schema\': schema})\r\n```\r\n\r\n(That syntax sidesteps duplicate keyword collisions on `schema`.)', 'comment_created': datetime.datetime(2023, 4, 5, 21, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1159031613, 'comment_body': 'Nit: No spaces around the `=` operator here. (Flake8 might catch this.)', 'comment_created': datetime.datetime(2023, 4, 5, 21, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1159032451, 'comment_body': 'Maybe worth noting ""if supported by your database system"" or whatever? Or even specifying the database hooks that support this?', 'comment_created': datetime.datetime(2023, 4, 5, 21, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1159032740, 'comment_body': 'Looks like you already knew about `nargs`! Nice.', 'comment_created': datetime.datetime(2023, 4, 5, 21, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1159033369, 'comment_body': ':smile: ', 'comment_created': datetime.datetime(2023, 4, 5, 21, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1164978071, 'comment_body': ""If you wanted to, this could be worked into the `restore_command` declaration above instead of extending the command here. Something like:\r\n\r\n```python\r\n  + tuple(itertools.chain.from_iterable(('--schema', schema) for schema in database['schemas']))\r\n```\r\n\r\n(Do not feel strongly.)"", 'comment_created': datetime.datetime(2023, 4, 13, 4, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1164979296, 'comment_body': 'Clever way to pass this in!', 'comment_created': datetime.datetime(2023, 4, 13, 4, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1164980967, 'comment_body': 'Would it be possible to add unit tests for the `schemas` case with these MongoDB and PostgreSQL functions? In the case of PostgreSQL, the simplest thing would be to add another test for `restore_database_dump()` with appropriate mocking. An alternative though would to be to break out a function that builds the restore command and then test _that_. However, that would require more changes to existing tests. So, a trade-off either way.', 'comment_created': datetime.datetime(2023, 4, 13, 4, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1167253774, 'comment_body': 'Nice!', 'comment_created': datetime.datetime(2023, 4, 14, 20, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1167329502, 'comment_body': 'Good call on including the `if` here!', 'comment_created': datetime.datetime(2023, 4, 14, 23, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}]","[{'commit_sha': '9bc2322f9a38c6ab704be284563b1928c7673172', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '264cebd2b10cd13c3782d639bba32e07f556c2be', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fea429d785ba9902057472c2d3afc2cdb7ffa79', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f273e82d74d31f4706c3fcc721a5a97a185a539b', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1304077997,feat: add logfile name to hook context for interpolation,"... when --log-file is passed as an argument

Should Fix [#413](https://projects.torsion.org/borgmatic-collective/borgmatic/issues/413)",True,68,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/68,https://github.com/borgmatic-collective/borgmatic/pull/68,closed,56,18,2,3,1,10,0,0,[],2023-04-06 04:02:42+00:00,2023-04-06 20:46:45+00:00,60243.0,16:44:03,"[{'comment_id': 1159261547, 'comment_body': ""I don't think this will actually ever raise because `log_file` is always an attribute on `global_arguments` even if the value is `None`. So an `if` instead of a `try`/`except` might work just fine. Although.. I'd be fine unconditionally setting this into `hook_context` when it's originally assigned above, maybe empty string when the `log_file` value is `None`...?"", 'comment_created': datetime.datetime(2023, 4, 6, 4, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1159261644, 'comment_body': 'These two lines could be combined into one without the intermediate variable.', 'comment_created': datetime.datetime(2023, 4, 6, 4, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1159264223, 'comment_body': ""I'm not seeing any asserts/expectations that log file is actually making its way into `hook_context` though..?"", 'comment_created': datetime.datetime(2023, 4, 6, 4, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1159265125, 'comment_body': ""Ah, I got the `AttributeError` from tests, but again, I should've updated the tests only."", 'comment_created': datetime.datetime(2023, 4, 6, 4, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1159370613, 'comment_body': 'Can you help me understand why this does not work?\r\nFlexmock throws this error:\r\n```bash\r\nE           flexmock.MethodSignatureError: run_create(<flexmock.MockClass object at 0x7fc8afc78340>, {\'path\': \'repo\'}, {\'repositories\': []}, <flexmock.MockClass object at 0x7fc8afc4bb80>, {}, {\'repository\': \'repo\', \'repositories\': \'\', \'log_file\': \'foo\'}, <flexmock.MockClass object at 0x7fc8afc4bb50>, <flexmock.MockClass object at 0x7fc8afc78220>, <flexmock.MockClass object at 0x7fc8afc48cd0>, """", <flexmock.MockClass object at 0x7fc8afc4a050>, <flexmock.MockClass object at 0x7fc8afc49990>)\r\n```\r\nBut isn\'t the method signature correct?', 'comment_created': datetime.datetime(2023, 4, 6, 7, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1159996526, 'comment_body': ""The first discrepancy I see is the `hook_context`. You're asserting that the `hook_context` is `{'log_file': 'foo'}`, but the Flexmock error indicates that it's actually `{'repository': 'repo', 'repositories': '', 'log_file': 'foo'}` (as the sixth argument)."", 'comment_created': datetime.datetime(2023, 4, 6, 16, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1160000831, 'comment_body': ""You could fold this directly into the `hook_context` declaration if you wanted. (Less mutation.) Example:\r\n\r\n```python\r\nhook_context = {\r\n   ...\r\n   'repositories': ...\r\n   'log_file': global_arguments.log_file if global_arguments.log_file else ''\r\n}\r\n```\r\n\r\nI do not feel strongly about this though."", 'comment_created': datetime.datetime(2023, 4, 6, 16, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1160003370, 'comment_body': 'FYI there\'s a cool trick you can do with Flexmock if there\'s an argument you don\'t really care about setting an expectation for. Just set its value inside a `.with_args()` call to `object`. That effectively tells flexmock ""any object will do here; I don\'t really care what the value is"".\r\n\r\nI\'m not saying you have to do that here. Just letting you know because it often saves on boilerplate.', 'comment_created': datetime.datetime(2023, 4, 6, 16, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1160075589, 'comment_body': 'Thanks, I changed it to this:\r\n```python\r\n flexmock(borgmatic.actions.create).should_receive(\'run_create\').with_args(\r\n        config_filename=flexmock(),\r\n        repository={\'path\': \'repo\'},\r\n        location={\'repositories\': []},\r\n        storage=flexmock(),\r\n        hooks={},\r\n        hook_context={\'repository\': \'repo\', \'repositories\': \'\', \'log_file\': \'foo\'},\r\n        local_borg_version=flexmock(),\r\n        create_arguments=flexmock(),\r\n        global_arguments=flexmock(dry_run=False, log_file=\'foo\'),\r\n        dry_run_label=\'\',\r\n        local_path=flexmock(),\r\n        remote_path=flexmock(),\r\n    ).once()\r\n```\r\nBut it still raises the  same error:\r\n\r\n```bash\r\nflexmock.MethodSignatureError: run_create(<flexmock.MockClass object at 0x7f1f465ce5c0>, {\'path\': \'repo\'}, {\'repositories\': []}, <flexmock.MockClass object at 0x7f1f465cfd90>, {}, {\'repository\': \'repo\', \'repositories\': \'\', \'log_file\': \'foo\'}, <flexmock.MockClass object at 0x7f1f46435a80>, <flexmock.MockClass object at 0x7f1f465ce7a0>, <flexmock.MockClass object at 0x7f1f46458370>, """", <flexmock.MockClass object at 0x7f1f465cea40>, <flexmock.MockClass object at 0x7f1f465cee60>)\r\n```', 'comment_created': datetime.datetime(2023, 4, 6, 17, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1160165419, 'comment_body': ""I think what's going on is that the instances of `flexmock()` are not matching up. For instance, you'd need the `flexmock()` instance used in `run_actions()` to be the exact same instance used in your expectation here. If you don't care about that level of fidelity, then just use `object` instead to indicate that you expect _something_ passed in but you don't care what it is."", 'comment_created': datetime.datetime(2023, 4, 6, 19, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}]","[{'commit_sha': '0fbdf8d860ec47257f23621397396ccfa563927a', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '091d60c226f1d66f98f21252d6b072b62080b57c', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16d7131fb75b2aef9bd02c0af47607c86c209572', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1351187076,feat: store configs used to create an archive in the archive and add borgmatic bootstrap,"From [#697](https://projects.torsion.org/borgmatic-collective/borgmatic/issues/697)

> you need the output of borgmatic/config/collect.py:collect_config_filenames()

🤦 I thought this function will just return the filename and not the complete path (since we use the word ""path"" in and around these files too).


This should store the config used to create an archive inside the archive itself.

TODO:
- [x] Create a `~/.borgmatic/bootstrap/configs-list.json` file.
- [ ] Update tests

![image](https://github.com/borgmatic-collective/borgmatic/assets/41837037/af105f01-9e24-47ef-a02a-bce7697cb869)
",True,71,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/71,https://github.com/borgmatic-collective/borgmatic/pull/71,closed,615,59,11,26,20,113,0,0,[],2023-05-15 17:39:50+00:00,2023-06-10 21:39:53+00:00,2260803.0,"26 days, 4:00:03","[{'comment_id': 1194156213, 'comment_body': 'Will this cause a problem?', 'comment_created': datetime.datetime(2023, 5, 15, 17, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1194172115, 'comment_body': 'I don\'t *think* so, but I wouldn\'t do it here if you\'re going to overwrite the paths like this. Instead, I\'d do it as early as possible, as close to the argument parsing as possible. Currently, that\'d be in `borgmatic/commands/borgmatic.py:main()` right after the `collect.collect_config_filenames()` call. That way, this value (`global_arguments.config_paths`) doesn\'t unexpectedly have two different values over the course of borgmatic running. Instead, it mostly has a single value.\r\n\r\nThe one thing I can see that breaking is this error in the same source file:\r\n\r\n```python\r\n    if not configs:\r\n        yield from log_error_records(\r\n            f""{\' \'.join(arguments[\'global\'].config_paths)}: No valid configuration files found"",\r\n        )\r\n        return\r\n```\r\n\r\nThat\'s because we want the error to show the unfiltered config paths as the user gave them. But those could always get saved off and passed into the containing function (`collect_configuration_run_summary_logs()`).', 'comment_created': datetime.datetime(2023, 5, 15, 17, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1194244048, 'comment_body': ""Okay, I'll work on this next for this PR.\r\n\r\nAlso, I was thinking of adding the borgmatic version used to create the archive inside this manifest too, so I use the correct config with the correct version. What do you think, and where can I get the current version from? A quick ctrl+f didn't help.\r\n"", 'comment_created': datetime.datetime(2023, 5, 15, 18, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1194250475, 'comment_body': ""That makes sense. Good idea!\r\n\r\nFor the version, see `main()` which gets that. The magical incantation is `importlib_metadata.version('borgmatic')`."", 'comment_created': datetime.datetime(2023, 5, 15, 19, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1195432625, 'comment_body': ""I don't think this `if` is necessary since `.get()` returns None if the key is not found...?"", 'comment_created': datetime.datetime(2023, 5, 16, 16, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1195438197, 'comment_body': ""Minor code style nit: No single-letter variables—even in cases like this where it's pretty obvious what it is."", 'comment_created': datetime.datetime(2023, 5, 16, 16, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1207100755, 'comment_body': 'if not arguments[argument]:', 'comment_created': datetime.datetime(2023, 5, 26, 17, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1212117785, 'comment_body': ""Maybe consider some error handling around here. E.g., what if the file is not found, what if it's invalid JSON, etc etc."", 'comment_created': datetime.datetime(2023, 5, 31, 18, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212125902, 'comment_body': 'Reminder about the proposed command-line flag for a user to override the default borgmatic source directory.', 'comment_created': datetime.datetime(2023, 5, 31, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212129693, 'comment_body': ""Does this need a `destination_path=/` so it doesn't just extract to the current directory?"", 'comment_created': datetime.datetime(2023, 5, 31, 18, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212149242, 'comment_body': 'Does this work even when there are `--flag` style arguments?', 'comment_created': datetime.datetime(2023, 5, 31, 18, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212151011, 'comment_body': ""If I'm reading this correctly, it seems like it would require _all_ sub-commands to be present rather than just one of them."", 'comment_created': datetime.datetime(2023, 5, 31, 18, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212154762, 'comment_body': 'Maybe remove this flag until more than extracting config files is supported?', 'comment_created': datetime.datetime(2023, 5, 31, 18, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212155145, 'comment_body': ""I may have missed it, but I didn't see this consumed anywhere. Also, you might want to default to `/` for `bootstrap` in particular."", 'comment_created': datetime.datetime(2023, 5, 31, 18, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212156952, 'comment_body': 'These two flags would also need to get passed in.', 'comment_created': datetime.datetime(2023, 5, 31, 18, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212160496, 'comment_body': 'Rather than hard-coding _config_ subparsers here, what do you think of calling it something more general (`subsubparsers` or whatever)?', 'comment_created': datetime.datetime(2023, 5, 31, 18, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212166616, 'comment_body': 'What do you think of having this function merge subparsers and config_subparsers and return that instead? Or does that make problems for one of the callers? (I see `borgmatic/commands/completion.py` calls this function too.)', 'comment_created': datetime.datetime(2023, 5, 31, 18, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212174428, 'comment_body': ""I'm not sure about this `if` check. In the usual use of borgmatic, config might not be in arguments (due to no `--config` flag being used), but this guard still needs to run. Instead though, you could always skip the check if `boostrap` is in `arguments`."", 'comment_created': datetime.datetime(2023, 5, 31, 18, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212183672, 'comment_body': ""Given that `bootstrap` can only really be used by itself, I wonder if it's worth erroring if there are other actions on the command-line. (Probably that wouldn't go here, but in `parse_arguments()` or similar.)"", 'comment_created': datetime.datetime(2023, 5, 31, 19, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212184426, 'comment_body': ""I feel a little weird about this monkey-patching, but not weird enough to raise an objection over it. I guess we'll see how it goes!"", 'comment_created': datetime.datetime(2023, 5, 31, 19, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1212189941, 'comment_body': ""Given that config won't be available, there might be some additional command-line flags we'll eventually need for duplicating configuration options. But we can probably add those as user feature requests come in rather than trying to do it in advance."", 'comment_created': datetime.datetime(2023, 5, 31, 19, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213012980, 'comment_body': ""Should that check be added after we decide what other sub commands should be added to the `borgmatic config` action? `parse_arguments()` seems to check for existence of other keywords, but we don't have any other than bootstrap."", 'comment_created': datetime.datetime(2023, 6, 1, 11, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213014392, 'comment_body': ""I was having trouble merging them into one, could you tell me how to merge two Subparser objects? I tried merging their choices but that didn't work."", 'comment_created': datetime.datetime(2023, 6, 1, 11, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213018090, 'comment_body': 'I added error handling for JSONDecodeError around these statements, for other errors, should I wrap the extract_archive() call, or does borgmatic handle that already?', 'comment_created': datetime.datetime(2023, 6, 1, 11, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213382633, 'comment_body': '[It depends on the error type.](https://projects.torsion.org/borgmatic-collective/borgmatic/src/branch/main/borgmatic/commands/borgmatic.py#L140). So generally you want to catch and then raise an error type that the higher-level borgmatic code can handle, ideally including a user-facing error message in it. Grep for `ValueError` to see some examples.', 'comment_created': datetime.datetime(2023, 6, 1, 16, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213386452, 'comment_body': ""I don't think multiple `borgmatic config` actions would typically be used simultaneously on a single command-line invocation, right? I brought this issue up because of cases like a user running `borgmatic config bootstrap list info` and then being surprised that their `list` and `info` actions are silently ignored."", 'comment_created': datetime.datetime(2023, 6, 1, 16, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213404712, 'comment_body': ""I honestly don't know.. I was imagining you'd do something like your existing `choices` merging trick and then stuff that value into a new instance. If that doesn't work out, a couple of different ideas:\r\n\r\n * Instead of returning `subparsers` and `config_subparsers` separately, return them in a tuple or list. The idea is that it could contain any number of subparsers and the calling code would have to handle that.\r\n * Or, replace `subparsers` and `config_subparsers` with a single return value of subparser _choices_, which you already know how to merge. Although looking at some of the shell completion code that calls `make_parsers()`, there is one case where it also accesses `subparsers._actions` from that return value. So that would have to be accounted for with this approach."", 'comment_created': datetime.datetime(2023, 6, 1, 16, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213411746, 'comment_body': ""Oops, looking at your code changes, that linked `except` might occurs `after` you've already processed the `bootstrap` action and returned. If that's the case, you might need to catch raised errors yourself (in `collect_configuration_run_summary_logs()`) and then yield a log record appropriately. See the `before_everything` hooks call in that function for an example."", 'comment_created': datetime.datetime(2023, 6, 1, 16, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213576542, 'comment_body': 'I think I found a way to make it work with the choices merging:\r\n\r\n```python\r\n\r\n    merged_subparsers = argparse._SubParsersAction(None, None, metavar=None, dest=\'merged\', parser_class=None)\r\n\r\n    for name, subparser in subparsers.choices.items():\r\n        merged_subparsers._name_parser_map[name] = subparser\r\n        subparser._name_parser_map = merged_subparsers._name_parser_map\r\n\r\n    for name, subparser in config_subparsers.choices.items():\r\n        merged_subparsers._name_parser_map[name] = subparser\r\n        subparser._name_parser_map = merged_subparsers._name_parser_map\r\n\r\n    return top_level_parser, merged_subparsers        \r\n\r\n\r\ndef parse_arguments(*unparsed_arguments):\r\n    \'\'\'\r\n    Given command-line arguments with which this script was invoked, parse the arguments and return\r\n    them as a dict mapping from subparser name (or ""global"") to an argparse.Namespace instance.\r\n    \'\'\'\r\n    top_level_parser, subparsers = make_parsers()\r\n```\r\n\r\nThis works, and I guess it wouldn\'t harm other functions calling this too?', 'comment_created': datetime.datetime(2023, 6, 1, 19, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213577224, 'comment_body': 'Shared a snippet below.', 'comment_created': datetime.datetime(2023, 6, 1, 19, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213585107, 'comment_body': ""Ah okay gotcha (I didn't even know you could use multiple actions at once). So there should probably be a list of actions somewhere so I can do something like:\r\n\r\n```python\r\n    for action in action_names:\r\n        if 'bootstrap' in arguments and action in arguments['bootstrap']:\r\n            raise ValueError(\r\n                'The bootstrap action cannot be used together with other actions.'\r\n            )\r\n```\r\n?"", 'comment_created': datetime.datetime(2023, 6, 1, 19, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213599272, 'comment_body': 'Oops!\r\n\r\nTo fix this, first I thought of doing this:\r\n\r\n```python\r\nif not any(subcommand in arguments for subcommand in subcommand_parsers_mapping[argument]):\r\n                raise ValueError(""Missing subcommand for {}. Expected one of {}"".format(\r\n                    argument, subcommand_parsers_mapping[argument]\r\n              ))\r\n```\r\n\r\nbut this checks if *atleast* one subcommand is present in the arguments, we should check if *exactly* one of them is present right? Is there a better way to do that other than this:\r\n\r\n```python\r\nsubcommand_count = 0\r\nfor subcommand in subcommand_parsers_mapping[argument]:\r\nif subcommand in arguments:\r\n    subcommand_count += 1\r\nif subcommand_count != 1:\r\nraise ValueError(""Missing subcommand for {}. Expected one of {}"".format(\r\n    argument, subcommand_parsers_mapping[argument]\r\n))\r\n```\r\n?', 'comment_created': datetime.datetime(2023, 6, 1, 19, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213607979, 'comment_body': ""Didn't get you here, \r\n\r\n`arguments[argument]` will be None only when a command that has a subcommand (like config has bootstrap) will be called, so right now:\r\n\r\n{\r\n\tconfig: None\r\n\tbootstrap: <the parser obj>\r\n}\r\n\r\nI tried creating a new flag for `bootstrap` and checking what comes up here:\r\n\r\n![image](https://github.com/borgmatic-collective/borgmatic/assets/41837037/af39e60d-0091-45c0-86e4-443b02e83473)\r\nhello -> True\r\n\r\nIs this what you meant?\r\n\r\n"", 'comment_created': datetime.datetime(2023, 6, 1, 19, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1213623335, 'comment_body': ""Nice. It *probably* won't harm other callers, but the way to find out is to try it! For instance, with this code in place, you could generate and source the bash completion and make sure that its tab completion still works as expected, especially when tab-completing action names."", 'comment_created': datetime.datetime(2023, 6, 1, 20, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213633843, 'comment_body': ""I think it may be even easier than that. How about:\r\n\r\n```python\r\nif 'bootstrap' in arguments.keys() and len(arguments.keys()) > 1:\r\n    raise ValueError(...)\r\n```\r\n\r\nThis would be before the `'global'` key gets set into `arguments` though.\r\n\r\n> I didn't even know you could use multiple actions at once\r\n\r\nIt's handy for use cases like overriding the default borgmatic actions but just omitting one of them."", 'comment_created': datetime.datetime(2023, 6, 1, 20, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213637562, 'comment_body': ""IMO you don't need to check that _exactly_ one of them is present.. _at least_ should be sufficient here. The other borgmatic actions support multiple at a time, and in theory `config` sub-actions could work like that too. The main exception would be `bootstrap`, but you've already got a check for that elsewhere.\r\n\r\nSo your first fix is probably sufficient unless I'm missing something."", 'comment_created': datetime.datetime(2023, 6, 1, 20, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213642171, 'comment_body': 'My bad; I misunderstood what `arguments` was here. For some reason I was thinking it was a list of all arguments rather than a map from action to parse arguments. So ignore this and carry on!', 'comment_created': datetime.datetime(2023, 6, 1, 20, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213643425, 'comment_body': 'You might consider removing the `not` and reversing the logic. Or even:\r\n\r\n```python\r\narguments[canonical_name] = None if canonical_name in subcommand_parsers_mapping else parsed\r\n```\r\n\r\nUp to you!', 'comment_created': datetime.datetime(2023, 6, 1, 20, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1213643889, 'comment_body': 'Thanks, this makes sense!', 'comment_created': datetime.datetime(2023, 6, 1, 20, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1214886177, 'comment_body': 'Not a big deal at all right now, but you might consider moving this file to `borgmatic/actions/config/bootstrap.py`.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214886983, 'comment_body': 'As you do tests, it would be great if you could also flesh out these functions with docstrings. That includes basic info what arguments it accepts, what it returns, what it _does_, and stuff like ""what exception types does this thing raise and when?"" (Grep the codebase for ""Raise"" for examples.)', 'comment_created': datetime.datetime(2023, 6, 2, 22, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214888316, 'comment_body': 'You could just call this `manifest.json`. Less specific, but maybe a tiny bit more future-proofed.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214895167, 'comment_body': 'Maybe make this the default at the arguments level instead of here? Just so it has the ""correct"" value sooner.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214896682, 'comment_body': 'Code style nit: f-string instead of `.format()`.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214898444, 'comment_body': 'There might be a way to introspect this information from `subparsers` instead of duplicating it here. (Do not feel strongly.)', 'comment_created': datetime.datetime(2023, 6, 2, 22, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214899269, 'comment_body': 'Note that this help/description are currently inaccurate. You might want to update it to reflect the current code.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214900875, 'comment_body': 'Might be nice to explain what this is for users just browsing `--help`. See the `borgmatic_source_directory` description in the config schema for inspiration (or just copying outright).', 'comment_created': datetime.datetime(2023, 6, 2, 22, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214901264, 'comment_body': 'Maybe change ""extract"" to ""bootstrap from"" or ""extract config files from"" here.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214901599, 'comment_body': 'Similar here as above: Update ""extract"" as appropriate.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214901760, 'comment_body': 'And here.', 'comment_created': datetime.datetime(2023, 6, 2, 22, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1214904173, 'comment_body': ""I don't think this would catch your `JSONDecodeError` or a `KeyError` exception types. So one option is to catch them and re-raise `ValueError`s within `get_config_paths()` or `run_bootstrap()`.. or you can just catch the expected exception types here."", 'comment_created': datetime.datetime(2023, 6, 2, 22, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220851441, 'comment_body': 'Duplicated comment?', 'comment_created': datetime.datetime(2023, 6, 7, 5, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220853126, 'comment_body': 'Was there a difficulty in hitting coverage for this? At minimum a `..._does_not_raise()` test covering the error case would be nice.', 'comment_created': datetime.datetime(2023, 6, 7, 5, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220863372, 'comment_body': ""Looks like this is a duplicate of above? If you're trying to test that it's called twice, try this:\r\n\r\n```\r\nflexmock(module.borgmatic.borg.extract).should_receive('extract_archive').and_return(\r\n    extract_process\r\n).twice()\r\n```\r\n\r\nOr leave out the `.twice()` if you're just mocking out the function and don't care how many times it's called.\r\n\r\nI will note that I don't see any assertions in this test function (whether an explicit `assert` or something implicit like `.once()`/`.twice()`). So depending on what you're testing for, that may influence your decision here."", 'comment_created': datetime.datetime(2023, 6, 7, 5, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220864794, 'comment_body': 'What are you testing for here? Maybe you can mention that in the test name? E.g., `_does_not_raise()`? `_calls_extract()`? Something else? The unit under test here is pretty basic (it\'s just some calls and a for loop), so a ""does not raise"" test might be just fine.', 'comment_created': datetime.datetime(2023, 6, 7, 5, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220872682, 'comment_body': ""IMO `os.path.join()` doesn't need to be mocked out for a unit test unless it makes your life easier in that test. My rationale is that it: 1. is in the standard library, and 2. has no side effects, and 3. doesn't read from the environment, the filesystem, the network, etc."", 'comment_created': datetime.datetime(2023, 6, 7, 5, 30, 6, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220874341, 'comment_body': ""You've got some nice mocking here. But does `importlib_metadata.version()` need mocking too? I'm assuming it accesses the filesystem/environment."", 'comment_created': datetime.datetime(2023, 6, 7, 5, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220875839, 'comment_body': 'Is it worth testing the case when the borgmatic source directory is set in the location config?', 'comment_created': datetime.datetime(2023, 6, 7, 5, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220880450, 'comment_body': 'Nice. Good to have coverage of all of these error cases.', 'comment_created': datetime.datetime(2023, 6, 7, 5, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220881945, 'comment_body': ""Looks good. This way you don't have to assert on the log message itself."", 'comment_created': datetime.datetime(2023, 6, 7, 5, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220890776, 'comment_body': 'Do you think you can mock out `get_config_paths()` as well? Otherwise IMO that pushes this into the realm of an integration test. Maybe you disagree on that point though since `run_bootstrap()` is the only caller of `get_config_paths()` right now?\r\n\r\nIf you do mock out `get_config_paths()`, that would probably mean you\'d ""lose"" its existing test coverage and would have to write a test for it to get that coverage back. Fortunately it\'s a really simple function and would hopefully be easy to test.', 'comment_created': datetime.datetime(2023, 6, 7, 5, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220902411, 'comment_body': 'Probably needs mocking in existing `run_create()` unit tests?', 'comment_created': datetime.datetime(2023, 6, 7, 6, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220905741, 'comment_body': 'Does this need a test? Maybe something along the lines of the existing `test_create_archive_with_patterns_calls_borg_with_patterns_including_converted_source_directories()`?', 'comment_created': datetime.datetime(2023, 6, 7, 6, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220913361, 'comment_body': ""IMO this would benefit from some explicit test coverage. I think the easiest way to do that would be to factor it out into a separate function, mock that function within tests of this `parse_subparser_arguments()`, and then independently test the function by passing in various `remaining_subparser_arguments` and asserting the result.\r\n\r\nBut if you'd rather keep it all inline, you could probably still test the logic by calling `parse_subparser_arguments()` and manipulating a mocked `parse_known_args()` to return the results you want to test.\r\n\r\nLet me know though if either approach looks like it will be problematic."", 'comment_created': datetime.datetime(2023, 6, 7, 6, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1220917178, 'comment_body': ""Any test for these two loops portion of the function? I'm still not 100% sure of what they do. :smile: "", 'comment_created': datetime.datetime(2023, 6, 7, 6, 14, 54, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1221846910, 'comment_body': 'Can you give a hint about what I should be asserting here? Your point about asserting whether extract_archive gets called twice is what I was trying to do with this test. ', 'comment_created': datetime.datetime(2023, 6, 7, 16, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1221851148, 'comment_body': ""Sure! If this is a `_does_not_raise()` test, then you don't need to assert anything! Just put the `extract_archive` mock in place once, and it'll be used each time it's called. But instead if you do actually want to assert that `extract_archive()` gets called twice, then the `.twice()` invocation I pasted above should do it."", 'comment_created': datetime.datetime(2023, 6, 7, 16, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1221865932, 'comment_body': ""What difference would that make test-wise? Only this line is concerned with the source directory right - \r\n\r\n```python\r\n    borgmatic_source_directory = location.get(\r\n        'borgmatic_source_directory', DEFAULT_BORGMATIC_SOURCE_DIRECTORY\r\n    )\r\n```\r\n\r\nSo should I check if I do give it a location, it should use that instead of the DEFAULT directory? I though `.get()` won't induce any unexpected behaviour so I didn't add it."", 'comment_created': datetime.datetime(2023, 6, 7, 16, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1221876262, 'comment_body': ""Yeah, it's less about testing that `.get()` does what it's supposed to, but more about testing that the function as a whole (regardless of its implementation) adheres to its contract of honoring the `borgmatic_source_directory` option. If someone comes along later and accidentally deletes that `.get()` line or changes it to hard-code `DEFAULT_BORGMATIC_SOURCE_DIRECTORY`, you ideally want a test failing loudly (and clearly). Getting on my [soapbox](https://idioms.thefreedictionary.com/soapbox) for a moment: Tests should be about defining and enforcing the contract that a unit under test has with its caller. If a part of the contract _isn't_ defined in the tests, then it's not part of the contract IMO!\r\n\r\nHaving said all that, I don't actually feel strongly about this particular example, so follow your heart. :smile: "", 'comment_created': datetime.datetime(2023, 6, 7, 16, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1221931797, 'comment_body': ""> Tests should be about defining and enforcing the contract that a unit under test has with its caller. If a part of the contract isn't defined in the tests, then it's not part of the contract.\r\n\r\nTrue, will remember this quote when writing tests in the future 😄 "", 'comment_created': datetime.datetime(2023, 6, 7, 17, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1221971177, 'comment_body': 'Yeah, I wrote separate tests for these but though that this one would cover get_config_paths too.', 'comment_created': datetime.datetime(2023, 6, 7, 17, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1221993705, 'comment_body': ""I can deal with that as long as there aren't other callers of `get_config_paths()`, as that would really stretch the definition of a unit. :smiley: "", 'comment_created': datetime.datetime(2023, 6, 7, 18, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1221995259, 'comment_body': 'One thing though is just to make sure any side-effect-having functions of `get_config_paths()` are mocked out as well in these tests.', 'comment_created': datetime.datetime(2023, 6, 7, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222001358, 'comment_body': ""They merge all the subsubparsers and the subparser variable into one. Here's the discussion - https://github.com/borgmatic-collective/borgmatic/pull/71#discussion_r1212166616"", 'comment_created': datetime.datetime(2023, 6, 7, 18, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1222002747, 'comment_body': ""Right, I'm just not totally clear on how. :sweat_smile: "", 'comment_created': datetime.datetime(2023, 6, 7, 18, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222024060, 'comment_body': ""Shouldn't this be considered tested, considering failing tests prompted us to rewrite this section ( the extract/list thing)? What should I test here?"", 'comment_created': datetime.datetime(2023, 6, 7, 18, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1222028931, 'comment_body': ""Oh, I can't really say I do either, I was just trying things out and this ended up working. "", 'comment_created': datetime.datetime(2023, 6, 7, 18, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1222032090, 'comment_body': 'Now that I look at it again, this line in both loops confuses me too:\r\n\r\n```python\r\n        subparser._name_parser_map = merged_subparsers._name_parser_map\r\n```', 'comment_created': datetime.datetime(2023, 6, 7, 18, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1222036131, 'comment_body': ""You're right that it's got _coverage_, meaning the code is exercised by tests, but it's not tested on its own. The code is fairly complex and while it definitely handles the `extract/list` case as you point out, without targeted tests I wouldn't necessarily be convinced it'd handle other cases of finding unique remaining arguments across all subparsers. If this were my feature (and to be clear, it's most definitely not!), I'd probably write a targeted test that, given some contrived `remaining_subparser_arguments`, assert that the code produces the expected `remaining_arguments`. And I might even throw a couple of different variants at it to make sure it handles edge cases like zero overlapping remaining arguments across the subparsers, an empty `remaining_subparser_arguments` element for one subparser, etc etc. Basically whenever I'm scared by complexity I throw test cases at the problem until I'm a little calmer.\r\n\r\nHaving said all that, this is _your_ feature, so if you're comfortable with the existing coverage, I can be fine with it too."", 'comment_created': datetime.datetime(2023, 6, 7, 18, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222038789, 'comment_body': ""Maybe it's so the existing (pre-merged) subparsers act the same as the merged one? You could try taking that line out and seeing what happens, although I imagine you added it for a reason."", 'comment_created': datetime.datetime(2023, 6, 7, 18, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222075737, 'comment_body': ""Yeah, I guess it could be tested more.\r\n\r\nI tried this - [`6475345` (#71)](https://github.com/borgmatic-collective/borgmatic/pull/71/commits/6475345a8fbaa9b3d9aaeb7444075829c49343ab#diff-d39d71411512f243818b758012a11063b00ebfa284f762c22eca562d30d0bce8R180) to parameterize and separate the unit to test it.\r\n\r\nBut it's probably wrong since whatever I pass as the array here (remaining_arguments):\r\n\r\nparse_known_args=lambda arguments: (flexmock(), ['--verbosity', 'lots']\r\n\r\nwill get returned as remaining_arguments.\r\n\r\nOr... maybe the test case is the reason I feel like that?\r\nIf that's the case can you suggest me a good set of parameters so I know this is ok?"", 'comment_created': datetime.datetime(2023, 6, 7, 19, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1222083681, 'comment_body': 'parse_subsubparser_arguments?', 'comment_created': datetime.datetime(2023, 6, 7, 19, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1222085645, 'comment_body': ""Another case that I tried but don't know if this is correct (it passes the test):\r\n```python\r\n        (\r\n            {'extract': flexmock(), 'list': flexmock()},\r\n            ['--progress', '--archive', 'myarchive'],\r\n            {\r\n                'extract': flexmock(parse_known_args=lambda arguments: (flexmock(), ['--archive', 'myarchive'])),\r\n                'list': flexmock(parse_known_args=lambda arguments: (flexmock(), [])),\r\n            },\r\n            [],\r\n        )\r\n```"", 'comment_created': datetime.datetime(2023, 6, 7, 19, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1222128196, 'comment_body': ""> But it's probably wrong since whatever I pass as the array here (remaining_arguments):\r\n> parse_known_args=lambda arguments: (flexmock(), ['--verbosity', 'lots']\r\n> will get returned as remaining_arguments.\r\n\r\nIf you're only passing in a single subparser's arguments, then I'd expect them to get returned, since technically those remaining arguments are found in the remaining arguments for every subparser ... because there's only one. Let me know if I'm misunderstanding the example though.\r\n\r\n>  If that's the case can you suggest me a good set of parameters so I know this is ok?\r\n\r\nFrom [this comment](https://github.com/borgmatic-collective/borgmatic/pull/71#issuecomment-1577651275), here's some potential test case data:\r\n\r\n```python\r\nremaining_subparser_arguments = (\r\n    ('--latest', 'archive', 'prune', 'extract', 'list', '--wtf'),  # remaining from check\r\n    ('--latest', 'archive', 'check', 'extract', 'list', '--wtf'),   # remaining from prune\r\n    ('prune', 'check', 'list', '--wtf'),  # remaining from extract\r\n    ('prune', 'check', 'extract', '--wtf'),  # remaining from list\r\n)\r\n```\r\n\r\nAnd the expected result: `['--wtf']`\r\n\r\n> Another case that I tried but don't know if this is correct (it passes the test):\r\n\r\nI'm not seeing the definition of `get_remaining_arguments()`. Could you maybe push that so I could have a look at it in the context of this test? Also, is `unparsed_arguments` the same as `remaining_subparser_arguments` in the existing code? If so, the problem might be that it's a single list rather than a list of lists (one per subparser)."", 'comment_created': datetime.datetime(2023, 6, 7, 20, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222131054, 'comment_body': ""Nevermind, I think I found the code in question. I'll have a look."", 'comment_created': datetime.datetime(2023, 6, 7, 20, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222135709, 'comment_body': ""It's not only doing subsubparsers.. This is also the code doing the actual parsing for each top-level subparser (and returning remaining arguments, of course). So maybe `parse_known_subparsers_arguments()` or something?"", 'comment_created': datetime.datetime(2023, 6, 7, 20, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222139841, 'comment_body': ""> From https://github.com/borgmatic-collective/borgmatic/pull/71#issuecomment-1577651275, here's some potential test case data:\r\n\r\nNote that my example test case data from above is only for the second half of your factored-out `parse_subparser_arguments()`/`parse_known_subparser_arguments` function. (I hadn't found the actual function before I commented.) So if you wanted a test case for the whole function, it would be like one of your existing examples except `unparsed_arguments` might be `('--latest', 'archive', 'check', 'prune', 'extract', 'list', '--wtf')` with the subparsers set up to mimic the actual `check`, `prune`, `extract`, `list`, etc. But maybe your existing `extract`/`list`-only example would be sufficient."", 'comment_created': datetime.datetime(2023, 6, 7, 20, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1222161550, 'comment_body': '> Another case that I tried but don\'t know if this is correct (it passes the test):\r\n\r\nOkay, finally viewing this test data in light of the actual code. My thoughts:\r\n\r\n * Do you need the action names in the unparsed arguments?\r\n * Does the `extract` subparser need to consume `--archive` like `list` does?\r\n * Should the `list` subparser return `--progress` among their remaining arguments? AFAIK it doesn\'t touch `--progress`.\r\n\r\nIf you want to ""cheat"" here, just instrument the actual code with print statements and then run borgmatic with the flags of your test case. Then look at the printed values and steal them for your tests.', 'comment_created': datetime.datetime(2023, 6, 7, 20, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223331093, 'comment_body': 'Another thought: Sometimes, if a function is tough to name, it means you haven\'t captured a coherent, describable unit of functionality with it. Like maybe it either does too much or too little such that it\'s hard to describe succinctly. So one thing you _could_ do in this case is to only make the function contain the ""# Determine the remaining arguments that no subparsers have consumed"" code and not the other loop. That way it\'d be easier to create test cases for and it\'d be easier to name. Just an idea.', 'comment_created': datetime.datetime(2023, 6, 8, 17, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223863549, 'comment_body': ""Cool.. I didn't know you could do that!"", 'comment_created': datetime.datetime(2023, 6, 9, 5, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223865459, 'comment_body': ""Technically, I'm not sure this test is testing that `used_config_paths` actually makes it all the way through from here to `execute_command()`. For instance, I bet if you changed this value, the test would still pass. I think that's because there are so many functions between here and there.. and therefore so many mocks. I'm not exactly sure what to do about that though. Maybe add `.with_args()` to the `expand_directories()` mocks to assert that they're getting the paths it should be? Maybe just ignore the problem? I imagine other existing tests have the same issue."", 'comment_created': datetime.datetime(2023, 6, 9, 5, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223871435, 'comment_body': ""The test code here looks good, but it doesn't look like it's actually calling a unit under test.. as the code under test is just copy/pasted here. Is there a way to call the actual live code? Either by testing the larger function containing it or perhaps by factoring it out into its own function?"", 'comment_created': datetime.datetime(2023, 6, 9, 5, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223871752, 'comment_body': 'Nit: You might consider grouping some of these together to cut down on vertical whitespace.', 'comment_created': datetime.datetime(2023, 6, 9, 5, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223873274, 'comment_body': 'Nit: Newline before `return` would make it stand out a little more IMO.', 'comment_created': datetime.datetime(2023, 6, 9, 5, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223874857, 'comment_body': 'Nit: Remove "","" before ""and"".', 'comment_created': datetime.datetime(2023, 6, 9, 5, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223876722, 'comment_body': 'Convention (in borgmatic) is for subparsers to have identical `help` and `description`.', 'comment_created': datetime.datetime(2023, 6, 9, 6, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223879916, 'comment_body': ""Something that occurs to me: Did you have a chance to play with [borgmatic's bash completion](https://torsion.org/borgmatic/docs/how-to/set-up-backups/#bash) with these argument changes incorporated? For instance: `borgmatic conf<tab>` or `borgmatic config boot<tab>` or even `borgmatic config bootstrap --prog<tab>`. Might also be good to try just `borgmatic boot<tab>` and see what happens.\r\n\r\nIf some of these don't work as expected, it'd be good to know. They don't necessarily need to be fixed in this PR (the scope is already large enough), but they should be filed for follow-on work. I might even be able to pick them up after they're filed (if they need to be)."", 'comment_created': datetime.datetime(2023, 6, 9, 6, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223882324, 'comment_body': 'Should be a doc string at this point, IMO.', 'comment_created': datetime.datetime(2023, 6, 9, 6, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1223884204, 'comment_body': ""Docstring missing. (It'd be nice to know what the arguments are, too!)"", 'comment_created': datetime.datetime(2023, 6, 9, 6, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1224204915, 'comment_body': 'Just added "" during the ""create"" operation"" now. ', 'comment_created': datetime.datetime(2023, 6, 9, 11, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1224207995, 'comment_body': 'I use zsh, will completions work for that? I remember trying it when you mentioned this, but no completions worked for me (even with older versions). Let me try with bash.', 'comment_created': datetime.datetime(2023, 6, 9, 11, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1224208944, 'comment_body': '![image](https://github.com/borgmatic-collective/borgmatic/assets/41837037/86994ee3-1434-4c8b-9c8c-11922925d499)\r\nWorks!\r\n\r\n![image](https://github.com/borgmatic-collective/borgmatic/assets/41837037/8ae3dea3-94a9-4d79-ad47-db58a2a865af)\r\n\r\nIt recommended borg as a subcommand too though ', 'comment_created': datetime.datetime(2023, 6, 9, 11, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1224503728, 'comment_body': 'Awesome! Yeah, completions are only implemented for bash and fish right now. zsh would be a logical next step.\r\n\r\nRecommending `borg` after `config` should probably be fixed (not in this PR!), as that would produce an invalid command-line. Feel free to file it as a separate issue.', 'comment_created': datetime.datetime(2023, 6, 9, 16, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1224592303, 'comment_body': 'So I did this - \r\n\r\n```python\r\ndef test_create_archive_with_sources_and_used_config_paths_calls_borg_with_sources_and_config_paths():\r\n    flexmock(module.borgmatic.logger).should_receive(\'add_custom_log_levels\')\r\n    flexmock(module.logging).ANSWER = module.borgmatic.logger.ANSWER\r\n    flexmock(module).should_receive(\'collect_borgmatic_source_directories\').and_return([\'/etc/borgmatic/config.yaml\'])\r\n    flexmock(module).should_receive(\'deduplicate_directories\').and_return(\r\n        (\'foo\', \'bar\', \'/etc/borgmatic/config.yaml\')\r\n    )\r\n    flexmock(module).should_receive(\'map_directories_to_devices\').and_return({})\r\n    flexmock(module).should_receive(\'expand_directories\').with_args(\r\n        (\'foo\', \'bar\', \'/etc/borgmatic/config.yaml\')\r\n    ).and_return(())\r\n```\r\n\r\nBut got this error:\r\n\r\n""Arguments for call expand_directories did not match expectations:\\n  Received call:\\texpand_directories([\'/etc/borgmatic/config.yaml\'])\\n  Expected call[1]:\\texpand_directories(directories=(\'foo\', \'bar\', \'/etc/borgmatic/config.yaml\'))""\r\n\r\nWhy didn\'t expand_directories recieve the location_config as args? And this is what I should be testing right?', 'comment_created': datetime.datetime(2023, 6, 9, 17, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1224612131, 'comment_body': ""I'm guessing because `expand_directories()` is called twice—once inside of `map_directories_to_devices()` and once above, on line 346. And I bet that first call is the one where the expectation isn't matched..."", 'comment_created': datetime.datetime(2023, 6, 9, 18, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1224612711, 'comment_body': ""> And this is what I should be testing right?\r\n\r\nAnd yeah, I think this is probably the right thing to test given the constraints. It's obnoxious to have to do so much mocking, but I don't see a better way to do it short of switching to an integration test."", 'comment_created': datetime.datetime(2023, 6, 9, 18, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1225594154, 'comment_body': ""Can be deleted now that it's been factored out?"", 'comment_created': datetime.datetime(2023, 6, 10, 21, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1225595433, 'comment_body': 'Since this function doesn\'t have any asserts (implicit or explict), I\'m not sure the name of the function is accurate right now. As written, this function is more of a ""does not raise"" test case.', 'comment_created': datetime.datetime(2023, 6, 10, 21, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1225596330, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2023, 6, 10, 21, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1225596553, 'comment_body': 'This one looks good because it has an actual assertion (`.never()`)!', 'comment_created': datetime.datetime(2023, 6, 10, 21, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1225596720, 'comment_body': 'Thanks for doing this. I know it was a pain...', 'comment_created': datetime.datetime(2023, 6, 10, 21, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1225597860, 'comment_body': ""(I'll do this to save the PR roundtrip.)"", 'comment_created': datetime.datetime(2023, 6, 10, 21, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1225598099, 'comment_body': ""(I'll fix this to save the PR roundtrip. Probably just add a `.once()`...)"", 'comment_created': datetime.datetime(2023, 6, 10, 21, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}]","[{'commit_sha': '1bc7bb49714a33ac9613a2da10cc7951ccace276', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49b4d371cea63afa872e7e81f4e95666567ae179', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b10148844bc0214f07e0e9357c22d82c8262790d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee32b076eb666cefcee652cf8572f39b386649b8', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2241de11c00c8f4dc138ce89750fb5470912301d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b7996dfda6656a0324e1d920d85a6c7922c47ec', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96adee444bd26184ee993c1b3f5474ccbf857dea', 'committer_username': 'witten', 'committer_name': 'Dan Helfman', 'committer_email': 'witten@torsion.org', 'commit_date': datetime.datetime(2008, 7, 15, 20, 34, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4a169fdf3644c1d637a9765b9bc5212c75691ce', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbb778a4d6ed472b6a39d861f43e6a61502c799d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c60bf84d71941eecf406c22e6adc79684daebd4', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74aa28e02797adc1aab3003e2012f8b125fbea3e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb60b25399c89def1bfe289a019ec83a8cc08155', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '206a9c960743c21bc69b43e2b54eacba8e611221', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a1d1a2e5902f36a43cebbda25f3ee4dac292fb0', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b024daae0bea31020bad0967cb3b0c2552a097b', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f82631e3bbb725078e416a1e910dcf63535597b8', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d761dd86b55f5ad9994af0e707a8c3984031236', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc56fd33a01e5f437f1bab9663bca2f0266e4b35', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcb90bba50561a9ad204adef15fb0fcaaecc6aaf', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8384eaefb1c42068f9dffe99a235f242c0f9cf5b', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f90d30e0e19a4e56ac58d51583be5b48f180c677', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6475345a8fbaa9b3d9aaeb7444075829c49343ab', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3315555d06e4690a9905a42de77dae870db47372', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '425f260a22f0c74b214b3cfd1d59ea8da4c96f2f', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '197920d9efa9e0e823e1bdf7e87ff2b56747867e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd370ff958d04bc43a31f38f6234430e1d586609c', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1389026111,feat: allow restoring to different port/host/username,"This PR adds a new feature that allows users to restore to a different port, host, or username. 
This Draft is to show the configuration version for PostgreSQL, I haven't tested this yet, just created to share progress.
Next Steps:

- [x] Provide overrides from the command line.
- [x] Do the same thing for :
- [x] MongoDB
- [x] MySQL
- [x] SQLite.
- [x] Tests",True,73,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/73,https://github.com/borgmatic-collective/borgmatic/pull/73,closed,1222,65,14,18,5,68,0,0,[],2023-06-12 16:28:17+00:00,2023-06-22 19:28:34+00:00,874817.0,"10 days, 3:00:17","[{'comment_id': 1227081224, 'comment_body': 'Grammar nit: I think this should be ""Username with which to restore the database"". Or ""Username to restore the database with"" would also be fine IMO.. just more informal.\r\n', 'comment_created': datetime.datetime(2023, 6, 12, 18, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1227082884, 'comment_body': 'I\'d change ""restored to."" to just ""restored."" here. Alternatively: ""Password with which to connect to the restore database."" Or even: ""Password to restore the database with.""', 'comment_created': datetime.datetime(2023, 6, 12, 18, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1227090426, 'comment_body': ""I'd recommend doing this in `make_extra_environment` just so that all the environment variables can be set (and tested!) all in one place."", 'comment_created': datetime.datetime(2023, 6, 12, 18, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1227096053, 'comment_body': ""For these, I think you'll still need an `if` somewhere, because if neither `restore_username` nor `username` options are set, you want to omit the `--username` flag entirely."", 'comment_created': datetime.datetime(2023, 6, 12, 18, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1227127983, 'comment_body': ""I thought about doing that, but even dump_database uses that function right? So I'll have to check where its called from (addind an argument) just for this key?"", 'comment_created': datetime.datetime(2023, 6, 12, 19, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1227130790, 'comment_body': 'By `omit the --username flag entirely.` you mean send an empty tuple as the username? \r\nBecause that\'s what this code should be doing-\r\n\r\n```python\r\nx={1:""1"",2:""2"",3:""3""}\r\nx.get(5,x.get(4,""99""))\r\n```', 'comment_created': datetime.datetime(2023, 6, 12, 19, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1227144075, 'comment_body': ""Oh, good call! I totally didn't think of that. And yeah, adding an argument or a toggle for the restore use case would probably be a decent compromise."", 'comment_created': datetime.datetime(2023, 6, 12, 19, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1227145209, 'comment_body': ""Nope, I mean omitting both the username value _and_ the `--username` flag. That's what the previous code did when a `username` configuration option wasn't set."", 'comment_created': datetime.datetime(2023, 6, 12, 19, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1227156492, 'comment_body': 'Oh, got it!', 'comment_created': datetime.datetime(2023, 6, 12, 19, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1228588324, 'comment_body': 'I assume this is just a temporary debugging log?', 'comment_created': datetime.datetime(2023, 6, 13, 19, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228593072, 'comment_body': 'Is there a reason you chose to break these out instead of just passing in `restore_arguments`? Either approach could work of course.', 'comment_created': datetime.datetime(2023, 6, 13, 19, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228596176, 'comment_body': ""You can probably end the description here. The rest of it is accurate, but it's a lot to put into a configuration comment."", 'comment_created': datetime.datetime(2023, 6, 13, 19, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228600337, 'comment_body': ""If it's the case that `connection_params` is only used for restore, then you could maybe cut the `restore` flag and only check whether `connection_params` is set. You could even rename it to `restore_connection_params` here to make that clear."", 'comment_created': datetime.datetime(2023, 6, 13, 19, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228605540, 'comment_body': ""One idea for simplifying:\r\n\r\n```python\r\ntry:\r\n    extra['PGPASSWORD'] = connection_params.get('password') or database['restore_password']\r\nexcept (AttributeError, KeyError):\r\n    pass\r\n```\r\n\r\nSometimes it's better to ask forgiveness than permission! :smiley:"", 'comment_created': datetime.datetime(2023, 6, 13, 19, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228607178, 'comment_body': ""You could almost make a tiny function to do this logic so you don't have to repeat it. Do not feel strongly."", 'comment_created': datetime.datetime(2023, 6, 13, 19, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228609656, 'comment_body': 'Could you just check if username is non-None, hostname is non-None, etc? Because you have the logic above to set these values.', 'comment_created': datetime.datetime(2023, 6, 13, 19, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228609950, 'comment_body': 'Similar here.', 'comment_created': datetime.datetime(2023, 6, 13, 19, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228610236, 'comment_body': 'Should probably be a `.get()`?', 'comment_created': datetime.datetime(2023, 6, 13, 19, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1228861130, 'comment_body': ""Well, no reason except restore arguments wasn't being used anywhere, so I thought this was a clear indication of what was happening. Can do either though."", 'comment_created': datetime.datetime(2023, 6, 14, 1, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1228954869, 'comment_body': 'Up to you. I can see merits to both approaches.', 'comment_created': datetime.datetime(2023, 6, 14, 4, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1229957779, 'comment_body': ""Didn't get you 😅 Do you mean this:\r\n\r\n```python\r\n    hostname = connection_params['hostname'] or database.get('restore_hostname', database.get('hostname'))\r\n```\r\n\r\nHere, if everything is not provided, hostname should be none, and this piece of code (line 233) should exclude --host from the command,  right? "", 'comment_created': datetime.datetime(2023, 6, 14, 17, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1229961627, 'comment_body': 'Yup, that\'s the ""logic above"" I was referring to!\r\n\r\n> Here, if everything is not provided, hostname should be none, and this piece of code (line 233) should exclude --host from the command, right?\r\n\r\nRight. But wouldn\'t the following for line 233 accomplish that?\r\n\r\n```python\r\n((\'--host\', hostname) if hostname else ())\r\n```\r\n\r\nI might be missing something obvious here...', 'comment_created': datetime.datetime(2023, 6, 14, 17, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1230092683, 'comment_body': ""Oh lol, yeah you're right. I'll check and edit."", 'comment_created': datetime.datetime(2023, 6, 14, 19, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1230153220, 'comment_body': ""Nit: There's a double space after the second comma."", 'comment_created': datetime.datetime(2023, 6, 14, 20, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1230160208, 'comment_body': 'I should probably revamp this function at some point to be more declarative in building the command like the other database hooks are...', 'comment_created': datetime.datetime(2023, 6, 14, 20, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1230165808, 'comment_body': 'I _think_ `database[\'restore_password\']` needs to be `database.get(\'restore_password\')` here, or you\'ll never get to `database[\'password\']`.\r\n\r\nAlso, I\'m pretty sure using the `\'restore_password\'` value from the `database` configuration needs to gate on whether `restore_connection_params` is non-`None`—since that\'s now your ""flag"" for whether this is a restore, right?\r\n\r\nSoapbox time: Sometimes when I\'m working on gnarly logic like this, I actually find it easier to write the tests _as_ I\'m developing the function. That way, I can convince myself that the code I\'m writing satisfies each use case. Doesn\'t always work (sometimes I still screw it up even after writing tests!), but sometimes it actually helps.', 'comment_created': datetime.datetime(2023, 6, 14, 21, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1230169926, 'comment_body': 'It occurs to me you could use a `collections.namedtuple` for this data structure, just to formalize its contents a bit. Do not feel strongly at all.', 'comment_created': datetime.datetime(2023, 6, 14, 21, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1231307928, 'comment_body': 'Yeah, I could do this in a future PR too (or get my friends to work on it, some of them are pretty enthusiastic to work on Borgmatic), since this pattern is followed throughout the file.', 'comment_created': datetime.datetime(2023, 6, 15, 16, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1233168668, 'comment_body': ""Let me know what you think of these and I'll duplicate them for the other databases too!"", 'comment_created': datetime.datetime(2023, 6, 18, 1, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1233193502, 'comment_body': ""I don't think this is being used. Especially since you're not connecting to this database on port 5433. You can probably remove this."", 'comment_created': datetime.datetime(2023, 6, 18, 5, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233193516, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2023, 6, 18, 5, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233193545, 'comment_body': 'And here.', 'comment_created': datetime.datetime(2023, 6, 18, 5, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233193926, 'comment_body': ""Note that this is the default port, so this won't actually override anything or test the restore port."", 'comment_created': datetime.datetime(2023, 6, 18, 5, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233193943, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2023, 6, 18, 5, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233194014, 'comment_body': 'And here! ', 'comment_created': datetime.datetime(2023, 6, 18, 5, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233194558, 'comment_body': ""This function totally makes sense to me, although I'm questioning its name a little bit.. Just because there's no code _in here_ specific to CLI arguments. So I wonder if it should have a less specific name and then just happen to be called from the CLI-testing test case below?"", 'comment_created': datetime.datetime(2023, 6, 18, 5, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233194876, 'comment_body': ""Not necessary to include here, IMO. This is testing a specific edge case that's important to test, but it doesn't need testing in _every_ e2e test case in this file as long as it's in one of them."", 'comment_created': datetime.datetime(2023, 6, 18, 5, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233194973, 'comment_body': 'This test looks good to me!', 'comment_created': datetime.datetime(2023, 6, 18, 5, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233195003, 'comment_body': ""This also won't override anything, just because it's the default port."", 'comment_created': datetime.datetime(2023, 6, 18, 5, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233197108, 'comment_body': 'Might want to call this function something more generic like `test_database_dump_and_restore_with_restore_configuration_options()` for parity with the previous test case name.', 'comment_created': datetime.datetime(2023, 6, 18, 5, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233198416, 'comment_body': ""I've heard it said before that test functions should be [DAMP not DRY](https://stackoverflow.com/questions/6453235/what-does-damp-not-dry-mean-when-talking-about-unit-tests). But you might consider factoring some of this out to a utility function anyway, just maybe something to get the created archive name since you're doing it in every test. Don't feel strongly."", 'comment_created': datetime.datetime(2023, 6, 18, 5, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233198740, 'comment_body': ""What about the case where there's no CLI password and it's just a `restore_connection_params` password? Worth testing too?"", 'comment_created': datetime.datetime(2023, 6, 18, 5, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233199881, 'comment_body': ""IMO this is an integration test because `make_extra_environment()` isn't mocked. But if you _do_ mock it, the test isn't really testing anything because all of the with/without password logic exists in `make_extra_environment()`. So my recommendation would be either to cut this test or, if you want to keep it, move it into `integration/`.\r\n\r\nI know this unit/integration distinction might seem silly, but it goes back to that test pyramid.. It keeps us honest about what kinds of tests we're actually writing."", 'comment_created': datetime.datetime(2023, 6, 18, 5, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233360095, 'comment_body': 'restore_connection_params password is the password we get through the CLI though. Did you mean no config password?', 'comment_created': datetime.datetime(2023, 6, 18, 18, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1233360341, 'comment_body': ""Ah okay, I have no issues cutting this out if it doesn't add value :D"", 'comment_created': datetime.datetime(2023, 6, 18, 18, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1233363546, 'comment_body': ""I think I should keep this and try to run postgres on the container's port 5433, but I wasn't able to do that. I found this - https://stackoverflow.com/questions/37775702/changing-a-postgres-containers-server-port-in-docker-compose but  I don't think it worked. I want to do 5433 and map it to the host's 5433 so that I can test the --restore option without the default, as you mention below."", 'comment_created': datetime.datetime(2023, 6, 18, 19, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1233364779, 'comment_body': ""Oh, the answer I linked seems to do what I want for postgres, I'll look for solutions for the other databases too."", 'comment_created': datetime.datetime(2023, 6, 18, 19, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1233366990, 'comment_body': 'Okay done for all, let me know if this is better.\r\n', 'comment_created': datetime.datetime(2023, 6, 18, 19, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1233468277, 'comment_body': ""Yes, my bad. That's what I meant!"", 'comment_created': datetime.datetime(2023, 6, 19, 2, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233468670, 'comment_body': ""Actually, looking at the function under test, I think I meant: What about the case where there's no CLI password and it's just a config password?"", 'comment_created': datetime.datetime(2023, 6, 19, 2, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1233471604, 'comment_body': 'So I think your `command: -p 5433` is a good fix here, because it means the second Postgres is running on a different port than the first one, so you can test the port overriding feature of your new code. But I still don\'t think the `ports: - ""5433:5432""` is doing anything for your tests, because they\'re going through the container network rather than the host network.. You don\'t need to expose the port at all. (Unless I\'m sorely mistaken..)', 'comment_created': datetime.datetime(2023, 6, 19, 2, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1234301765, 'comment_body': ""Oh yeah, I remember now, I left it out because I thought `test_restore_database_dump_runs_pg_restore_with_username_and_password` tests the same thing doesn't it?\r\n\r\n- No restore_x in config\r\n- No --x as a restore arg through the cli"", 'comment_created': datetime.datetime(2023, 6, 19, 17, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1234302434, 'comment_body': 'Yup, it worked without the ports: thing (and I understand why), thanks!', 'comment_created': datetime.datetime(2023, 6, 19, 17, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1234305522, 'comment_body': ""Sorry, I'm being totally unclear. I mean the case where there's no CLI password and there's only a _restore_ config password.. (Or a restore config password + a standard `password`.)"", 'comment_created': datetime.datetime(2023, 6, 19, 17, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1234697687, 'comment_body': ""It occurs to me that there's nothing in these two tests asserting that the database actually got restored to the correct Postgres instance—which is kind of the whole point of the feature. Do you think that's worth adding somehow? Or is the unit coverage for that sufficient?"", 'comment_created': datetime.datetime(2023, 6, 20, 3, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1234703430, 'comment_body': 'Worth including `restore_*` options here to make sure they get overridden by the CLI flags?', 'comment_created': datetime.datetime(2023, 6, 20, 3, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1234704118, 'comment_body': ""Same here. Should this have `restore_*` options to ensure they're ignored?"", 'comment_created': datetime.datetime(2023, 6, 20, 3, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1234704819, 'comment_body': 'And here too. (My bad not catching this the first time around.)', 'comment_created': datetime.datetime(2023, 6, 20, 3, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1234718087, 'comment_body': ""Maybe include `restore_path` here to make sure it doesn't get used?"", 'comment_created': datetime.datetime(2023, 6, 20, 4, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1235652821, 'comment_body': ""If the correct command gets sent to postgres shouldn't that be enough? What further should I check?"", 'comment_created': datetime.datetime(2023, 6, 20, 18, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1235653073, 'comment_body': 'True, will do.', 'comment_created': datetime.datetime(2023, 6, 20, 18, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1235713565, 'comment_body': 'With the original database tests, there\'s only a single database instance per hook, so if the restore executes without erroring, you\'re pretty well assured that it worked. However with these new tests, there are two database instances per hook. So a silent failure mode is if a restore happens successfully—just to the wrong database instance. Like if all the `restore_*` options or new CLI flags get ignored.\r\n\r\nOne way to check for that would just be to run a query (`psql` or similar) against the expected database instance and make sure the named database in question actually exists there. If it does, then you know it must\'ve been because you restored it. (But that will only work if the `POSTGRES_DB` in the `docker-compose.yaml` is different for each database instance.)\r\n\r\nAn argument against doing this is that you\'ve already got coverage for the ""wrong database instance"" in your unit tests, so maybe you don\'t need it / want it in your end-to-end tests too. Ultimately, I\'ll leave the decision to you. Just raising the question here in case you want to do anything about it.', 'comment_created': datetime.datetime(2023, 6, 20, 19, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1235718668, 'comment_body': ""Hm, thanks for letting me know. \r\n\r\nAlso, won't docker create the POSTGRES_DB in docker_compose.yaml as soon as I start the tests (even before backup)? If yes, even the database check query won't work and I'll have to check for something else inside the database."", 'comment_created': datetime.datetime(2023, 6, 20, 19, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1235731164, 'comment_body': ""Yeah, that's why I was suggesting two different `POSTGRES_DB` names, one for each database instance. Like if the first instance's database is `test1` and the second instance's is `test2`. Then if you attempt to restore `test1` to the second instance, and you see `test1` actually created there, you know it must've worked."", 'comment_created': datetime.datetime(2023, 6, 20, 19, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1235743100, 'comment_body': ""Doesn't the restore command  need the database to already exist? "", 'comment_created': datetime.datetime(2023, 6, 20, 19, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1235746006, 'comment_body': ""https://www.postgresql.org/docs/current/app-pgrestore.html I think that's what the --create option is for."", 'comment_created': datetime.datetime(2023, 6, 20, 19, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1235752648, 'comment_body': ""You are correct! Without that flag, it won't create it. You could _add_ the flag though, which might not be a bad idea to have anyway.. Assuming it still works when the database already exists."", 'comment_created': datetime.datetime(2023, 6, 20, 19, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1291639204, 'comment_body': ""Just following up on this. It turns out that restores are [not working correctly in this end-to-end test](https://projects.torsion.org/borgmatic-collective/borgmatic/issues/738#issuecomment-6912) in main—likely broken by me _after_ you submitted this PR. But my point in bringing this up now is that more assertions on whether the tests were actually restoring the expected data probably would've caught that! "", 'comment_created': datetime.datetime(2023, 8, 11, 17, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}]","[{'commit_sha': 'f558cb31563dcf303ca5eebc469a8e462f2ccbe6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e8e64d920a8d4ad7c31dd12b7da361b616987f4', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '230cf6adc45a3f15cae54da11d934fe2560f8c45', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67f4d43aece67321affa6ec45bd0fffd15d40748', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '205e5b152466f0315d3761a99002c7f4b3c2d8db', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9386b7a8789ace90b9bb6a4d0c6c29a4aee5d29', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7423c488e9df2174cbbbbaebdf5a9c6f319b9c6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b6f1329923020da8ffdbe0dc6109f5358189bb', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82d851d8911b0e77e6705d2196908e343b40383d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8389851f2f907164713a621240b4e0f6e2e66663', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89602d1614b80bd14e6ab314bd6f84ba49c352bf', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c876085488b8ab9aef7cc9bab3da6534df790c1', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e53dd3da87bbd743061ad8e46dbf0a8a627f1918', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9016dcc41816fa5acd74f33c931aca330660abc1', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '384182172a29c89c393786daeca1c9d71136ee1e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2d82e9bba1fb053eee717c478df4aaea8629cc9', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a21eb03cdc4e506575a6579b36ff758b7aa069d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87c6e5b349710535b01e607b6135e22509482374', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1435741858,add docs for database restore params and config bootstrap,"![image](https://github.com/borgmatic-collective/borgmatic/assets/41837037/ae26beb8-86af-42f3-b1a3-6f01722001c9)
![image](https://github.com/borgmatic-collective/borgmatic/assets/41837037/6717ae01-dff7-4af4-92bf-c2bfbf43f6bc)
",True,74,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/74,https://github.com/borgmatic-collective/borgmatic/pull/74,closed,48,1,2,3,1,20,0,0,[],2023-07-15 06:58:42+00:00,2023-07-31 18:56:33+00:00,1425471.0,"16 days, 11:57:51","[{'comment_id': 1265662415, 'comment_body': 'Nit: The info here is good, but just from an editing prose perspective, there\'s lots of ""you can"" and ""can be done"" going on in this paragraph. A little of that is totally fine of course; I\'m just calling out the repeated use.', 'comment_created': datetime.datetime(2023, 7, 17, 17, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1265663252, 'comment_body': '`hooks:` is gone in main!', 'comment_created': datetime.datetime(2023, 7, 17, 17, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1265665647, 'comment_body': 'Overall this section looks great to me!', 'comment_created': datetime.datetime(2023, 7, 17, 17, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1265673602, 'comment_body': 'Nit: borgmatic is lowercased (even at the start of sentences!).', 'comment_created': datetime.datetime(2023, 7, 17, 17, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1265681235, 'comment_body': 'I feel like this is at a odd spot in flow of the page, even though I think I see why you put it first-ish: Because `bootstrap` needs to come first on a fresh system. Anyway, the previous section is about `extract`ing individual files from an existing repo, and the section after this new one is about a variant of that.. specifying a single repository to use with `extract`. Neither of which have to do with bootstrapping!\r\n\r\nSo here\'s an alternate idea on where to put your new section such that the whole page flows a little better:\r\n\r\n * Start the page with a brief intro paragraph: ""When the worst happens ..."" etc etc.\r\n * Then insert your new section, perhaps prefaced with: ""If you\'re extracting to a fresh system that doesn\'t have borgmatic configuration files ..."" or whatever.\r\n * And then the next section can dive into the existing `extract` docs with another preface: ""If you already have borgmatic configuration files (or you\'ve just bootstrapped them as per above), you can extract your files from a repository. A good way to do that is to use the `rlist` action ...""\r\n\r\nIf you don\'t like that approach, then maybe just leave the document mostly alone and then move your new section to the end? That way it doesn\'t interrupt the flow of talking about the `extract` action across sections?', 'comment_created': datetime.datetime(2023, 7, 17, 17, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1265681656, 'comment_body': 'Nit: Remove comma.', 'comment_created': datetime.datetime(2023, 7, 17, 17, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1265682107, 'comment_body': 'Maybe change ""also"" to ""automatically""?', 'comment_created': datetime.datetime(2023, 7, 17, 17, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1265683502, 'comment_body': 'In this whole section, is it worth pluralizing this and talking about extracting ""configuration file**s**"" wherever they\'re mentioned? That seems like an important (and cool!) part of the feature.', 'comment_created': datetime.datetime(2023, 7, 17, 17, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1265685499, 'comment_body': ""I think it's also worth mentioning that:\r\n\r\n1. You don't need any existing configuration files on disk in order to use the `bootstrap` feature! (That's why `--repository` is required.)\r\n2. If you don't specify a destination, it will extract configuration files to their original path, silently overwriting any configuration files that may already exist. I think that's important to mention both because it seems like a common way to use the feature and also because it might be a little surprising if someone isn't expecting the overwrite.\r\n3. IMO not all command-line flags of an action need to be documented, but it seems like `--archive` is important to mention..?"", 'comment_created': datetime.datetime(2023, 7, 17, 17, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1265688108, 'comment_body': 'Wouldn\'t it be more like `/tmp/etc/borgmatic/config.yaml`? (You could explicitly mention that it includes the directory components of its original path or just let the example speak for itself.) Also, this last sentence should probably start with ""For instance,"" or similar, as the user may very well have different configuration file(s) with different paths.', 'comment_created': datetime.datetime(2023, 7, 17, 17, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1275193218, 'comment_body': 'Oh okay, done. btw, https://github.com/diivi/borgmatic/blob/1f415a24b878f08aff161ceb9261a6e3f61b3593/borgmatic/hooks/ntfy.py#L31-L32 is the only other occurrence of the capital B, if you wanna change that.', 'comment_created': datetime.datetime(2023, 7, 26, 16, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1275797178, 'comment_body': 'Thanks for pointing that out.. fixed!', 'comment_created': datetime.datetime(2023, 7, 27, 6, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1275798945, 'comment_body': ""And lemme know when you push your changes and you're ready for review again!"", 'comment_created': datetime.datetime(2023, 7, 27, 6, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1277950397, 'comment_body': ""Moved this section to the end since I didn't wanna move a lot of stuff around here."", 'comment_created': datetime.datetime(2023, 7, 28, 18, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1278599850, 'comment_body': ""This last sentence isn't actually true! `extract` extracts to the current directory by default. Maybe just cut that part?"", 'comment_created': datetime.datetime(2023, 7, 30, 18, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1278599896, 'comment_body': 'Grammar nit: Maybe change that last comma to a semi-colon? Alternatively, an em dash would work too.', 'comment_created': datetime.datetime(2023, 7, 30, 18, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1278599983, 'comment_body': 'Grammar nit: Remove comma. ', 'comment_created': datetime.datetime(2023, 7, 30, 18, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'witten', 'type': 'User'}, {'comment_id': 1279710988, 'comment_body': ""```suggestion\r\nNote that to run the `config bootstrap` action, you don't need to have a borgmatic configuration file. You only need to specify the repository to use via the `--repository` flag; borgmatic will figure out the rest.\r\n```"", 'comment_created': datetime.datetime(2023, 7, 31, 18, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1279711263, 'comment_body': '```suggestion\r\nIf a destination directory is not specified, the configuration files will be extracted to their original locations, silently **overwriting** any configuration files that may already exist. For example, if a configuration file was located at `/etc/borgmatic/config.yaml` when the archive was created, it will be extracted to `/etc/borgmatic/config.yaml` too.\r\n```', 'comment_created': datetime.datetime(2023, 7, 31, 18, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1279711590, 'comment_body': '```suggestion\r\nfile or you want to see what configurations were used to create a particular\r\n```', 'comment_created': datetime.datetime(2023, 7, 31, 18, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}]","[{'commit_sha': '1f415a24b878f08aff161ceb9261a6e3f61b3593', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adfb89ee65835d3fc969759df97eb79ee2758fe1', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59465b256dcd64cd997cc6ab5400f4c9fe16e27d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1456923386,feat: optionally disable config bootstrap,[#725](https://projects.torsion.org/borgmatic-collective/borgmatic/issues/725),True,75,https://api.github.com/repos/borgmatic-collective/borgmatic/pulls/75,https://github.com/borgmatic-collective/borgmatic/pull/75,closed,98,2,5,4,7,1,0,0,[],2023-07-31 20:02:44+00:00,2023-07-31 21:00:01+00:00,3437.0,0:57:17,"[{'comment_id': 1279851508, 'comment_body': 'Disclaimer: this is Copilot generated. I just took a glance (lines 691 and 677) and it made sense + it passed.', 'comment_created': datetime.datetime(2023, 7, 31, 20, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}]","[{'commit_sha': 'f2ce2f387f7c41b9514590b417af56bdd0b3bcc5', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b09ca80222954639c6a41ed0bdcc86c1f42ce4e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '562f4a281b876a3c1666befa877851f67041cec2', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '962267b3c5b3888d0ef984c0717f9e270c77dfb1', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1250261259,feat: remove paramiko,"<!--- Provide a general summary of your changes in the Title above -->

### Description
Removed paramiko as a dependency and replaced it with a simple function that checks the first line of a file to verify if it's a ssh key.

### Related Issue
#1559  

### Motivation and Context
Helped remove a heavy dependecy used just for checking if a file is a SSH key.

### How Has This Been Tested?
Checked the combobox options

### Screenshots (if appropriate):
![image](https://user-images.githubusercontent.com/41837037/220658368-cdb78f25-ca58-4ab0-bf1a-e927991b47c5.png)

### Types of changes
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [ ] I have added tests to cover my changes.
- [x] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->
",True,1606,https://api.github.com/repos/borgbase/vorta/pulls/1606,https://github.com/borgbase/vorta/pull/1606,closed,33,45,4,19,6,43,0,0,[],2023-02-22 14:52:38+00:00,2023-03-17 15:03:49+00:00,1987871.0,"23 days, 0:11:11","[{'comment_id': 1114502292, 'comment_body': 'Do we need to catch all of those errors?', 'comment_created': datetime.datetime(2023, 2, 22, 15, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1114789985, 'comment_body': '`NotImplementedError` definitely not. 😀 `PermissionError`, yes. `IsADirectoryError` also not, since this is already checked further up.\r\n\r\nTo be fair to OP, some of those were already there. Good to remove them now.', 'comment_created': datetime.datetime(2023, 2, 22, 18, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1114873424, 'comment_body': 'yeah, I needed some context about why they were here at the first place, thanks! I will remove `NotImplementedError` and `IsADirectoryError`', 'comment_created': datetime.datetime(2023, 2, 22, 19, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1114911512, 'comment_body': 'Probably some more to remove.', 'comment_created': datetime.datetime(2023, 2, 22, 20, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1114981402, 'comment_body': '@m3nu in which cases is a permission error expected?', 'comment_created': datetime.datetime(2023, 2, 22, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1115081985, 'comment_body': 'I think this line breaks your code. Also consider using the `pathlib` module. It makes working with files way easier in my opinion.', 'comment_created': datetime.datetime(2023, 2, 22, 23, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1115083040, 'comment_body': ""I think this else isn't needed. (I know it was there before.)"", 'comment_created': datetime.datetime(2023, 2, 22, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1115085286, 'comment_body': '```suggestion\ndef get_private_keys() -> List[str]:\n```', 'comment_created': datetime.datetime(2023, 2, 22, 23, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1115085766, 'comment_body': '```suggestion\ndef is_ssh_file(filename: str) -> bool:\n```', 'comment_created': datetime.datetime(2023, 2, 22, 23, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1115567712, 'comment_body': ""should I replace this line with `filepath = Path.home() / '.ssh' / filename`? Also, curious to know what issue this was causing"", 'comment_created': datetime.datetime(2023, 2, 23, 11, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1115580072, 'comment_body': ""No, you don't have to use `pathlib`. I thought you were passing the complete filepath to this function but I just noticed that you have to variables `key_file` and `key`. So this line is correct. \n\nHowever I think, the function should expect a complete file path removing redundancy and making the code more reusable."", 'comment_created': datetime.datetime(2023, 2, 23, 12, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1115591677, 'comment_body': 'Agreed, I will use filepath here instead of filename for reusability 👍🏼 ', 'comment_created': datetime.datetime(2023, 2, 23, 12, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1115702664, 'comment_body': ""This line isn't needed because you already have `key_file`."", 'comment_created': datetime.datetime(2023, 2, 23, 13, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1116220300, 'comment_body': 'I just wondered whether we should only support openssh key files instead of all files starting with `-----BEGIN( \\w+)? PRIVATE KEY-----`. But I guess if anyone needs that, we will see an FR opened.', 'comment_created': datetime.datetime(2023, 2, 23, 20, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1116750759, 'comment_body': ""Yes, would be better. I have one SSH key here that starts with `-----BEGIN RSA PRIVATE KEY-----`. It's an older key I made for AWS EC2.\r\n\r\nSo there could be 3 different headers: https://superuser.com/a/1444343/890011"", 'comment_created': datetime.datetime(2023, 2, 24, 9, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1116907299, 'comment_body': ""Okay, I'll use the regex @real-yfprojects mentioned"", 'comment_created': datetime.datetime(2023, 2, 24, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1116954013, 'comment_body': ""It's possible. Like when people run commands as root, while `$HOME` is still set for their own user."", 'comment_created': datetime.datetime(2023, 2, 24, 12, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1116967220, 'comment_body': 'We should also add the `UnicodeDecodeError`. Else it crashes for me while parsing a macOS-specific file in that folder\r\n\r\n```\r\n2023-02-24 12:58:35,597 - root - DEBUG - Expected error parsing file in .ssh: .DS_Store (You can safely ignore this)\r\nTraceback (most recent call last):\r\n  File ""/Users/manu/Workspace/vorta/src/vorta/utils.py"", line 201, in get_private_keys\r\n    if is_ssh_file(key_file):\r\n       ^^^^^^^^^^^^^^^^^^^^^\r\n  File ""/Users/manu/Workspace/vorta/src/vorta/utils.py"", line 181, in is_ssh_file\r\n    first_line = f.readline()\r\n                 ^^^^^^^^^^^^\r\n  File ""<frozen codecs>"", line 322, in decode\r\nUnicodeDecodeError: \'utf-8\' codec can\'t decode byte 0x80 in position 3131: invalid start byte\r\n```', 'comment_created': datetime.datetime(2023, 2, 24, 13, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1117176832, 'comment_body': 'Please add a comment in the code on why we need special handling for these errors. (PermissionError is a subclass of `OSError`.)', 'comment_created': datetime.datetime(2023, 2, 24, 15, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1122918815, 'comment_body': 'how about `is_ssh_private_key_file`?', 'comment_created': datetime.datetime(2023, 3, 2, 10, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ThomasWaldmann', 'type': 'User'}, {'comment_id': 1122924768, 'comment_body': ""Maybe you could avoid UnicodeDecodeError locally in the called function.\r\nIf you get that there, you will know for sure it is not a private key and it can return False.\r\n\r\nPermissionError is another problem, we can't know what it is in that case (we can just know we can not use it due to that).\r\n\r\nAlso check the comment for orthography and punctuation."", 'comment_created': datetime.datetime(2023, 3, 2, 11, 3, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ThomasWaldmann', 'type': 'User'}, {'comment_id': 1122928301, 'comment_body': 'You have an ""if"", but you dropped the ""else: raise"".\r\n\r\nThe ""continue"" in the if-block basically means ""do nothing"" and as you have removed the else-block, it is also doing nothing there.\r\n\r\nLooks suspicious.\r\n', 'comment_created': datetime.datetime(2023, 3, 2, 11, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ThomasWaldmann', 'type': 'User'}, {'comment_id': 1122955081, 'comment_body': '\r\nyeah, I guess I should raise the error in the end.', 'comment_created': datetime.datetime(2023, 3, 2, 11, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1123291027, 'comment_body': ""As *ThomasWaldmann* pointed out, the `raise` is needed. However the else isn't."", 'comment_created': datetime.datetime(2023, 3, 2, 15, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1125445917, 'comment_body': 'Why is this ""expected""?', 'comment_created': datetime.datetime(2023, 3, 4, 11, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ThomasWaldmann', 'type': 'User'}, {'comment_id': 1125446376, 'comment_body': 'Maybe issueing a warning for the file would be better.', 'comment_created': datetime.datetime(2023, 3, 4, 11, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1125446737, 'comment_body': 'Hmm, just noticed that this hasn\'t changed, it was ""debug"" and ""expected"" before this PR already.', 'comment_created': datetime.datetime(2023, 3, 4, 11, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ThomasWaldmann', 'type': 'User'}, {'comment_id': 1125453819, 'comment_body': 'Your point still applies I guess', 'comment_created': datetime.datetime(2023, 3, 4, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1126359976, 'comment_body': 'This log line used to be for any private key error. It\'s much more specific now and would only trigger, when the current user can\'t read the file. If we want to keep the old behavior of logging anything that\'s not a private key, the line needs to go up:\r\n\r\n```\r\nif is_ssh_private_key_file(key_file):\r\n    available_private_keys.append(key)\r\nelse:\r\n    logger.debug(""Not a private SSH key file..."")\r\n```', 'comment_created': datetime.datetime(2023, 3, 6, 12, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1126361129, 'comment_body': ""Since we already have the permission check here, we could also check for correct key permissions. This sometimes comes up in support requests. Specifically SSH won't use the key if perms are **too open**. Like 644 or higher. Could be worth including and logging too."", 'comment_created': datetime.datetime(2023, 3, 6, 12, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1126851011, 'comment_body': ""Do you mean something like this?:\r\n```python\r\nif is_ssh_private_key_file(key_file):\r\n  if os.stat(key_file).st_mode & 0o777 >= 0o644: # will look for the correct code to get the octal value of the st_mode and compare it\r\n      available_private_keys.append(key)\r\n  else:\r\n      logger.debug(f'Key file {key_file} permissions are too open')\r\n```"", 'comment_created': datetime.datetime(2023, 3, 6, 18, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1126864685, 'comment_body': 'Guess it should check for `== 0o600` and else log a user-visible warning (not debug).', 'comment_created': datetime.datetime(2023, 3, 6, 18, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ThomasWaldmann', 'type': 'User'}, {'comment_id': 1126867413, 'comment_body': 'Or even better: `mode & 0o077 == 0`.\r\n\r\nPermissions for the owner could be r or rw (or even rwx).', 'comment_created': datetime.datetime(2023, 3, 6, 18, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ThomasWaldmann', 'type': 'User'}, {'comment_id': 1126891081, 'comment_body': ""```python\r\nlogger.debug(f'Expected error parsing file in .ssh: {key} (You can safely ignore this)', exc_info=True)\r\n```\r\nshould I replace this line too? With this:\r\n```python\r\nlogger.debug(f'Permission error while opening file in .ssh: {key}', exc_info=True)\r\n```"", 'comment_created': datetime.datetime(2023, 3, 6, 18, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1127001284, 'comment_body': 'Yes, please.', 'comment_created': datetime.datetime(2023, 3, 6, 20, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1129638152, 'comment_body': 'This comment line is no longer up-to-date.', 'comment_created': datetime.datetime(2023, 3, 8, 15, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1129645292, 'comment_body': 'Is debug the right logging level?', 'comment_created': datetime.datetime(2023, 3, 8, 15, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1129960610, 'comment_body': 'How about warning?\r\n', 'comment_created': datetime.datetime(2023, 3, 8, 20, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1129962849, 'comment_body': ""Do I need the comment now? (The warning seems self-explanatory, we handled PermissionError separately to let the user know about an expected error - they don't have permission to read the file)"", 'comment_created': datetime.datetime(2023, 3, 8, 20, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1129972071, 'comment_body': 'You are right it is not needed any more.', 'comment_created': datetime.datetime(2023, 3, 8, 20, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1129972274, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2023, 3, 8, 20, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1130303896, 'comment_body': 'Use `key_file` (== full path) in all log messages?', 'comment_created': datetime.datetime(2023, 3, 9, 2, 13, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ThomasWaldmann', 'type': 'User'}, {'comment_id': 1130304358, 'comment_body': '(then you do not need to mention ""in .ssh"" either)', 'comment_created': datetime.datetime(2023, 3, 9, 2, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ThomasWaldmann', 'type': 'User'}]","[{'commit_sha': '59babf81304db3a81c0a07608d177538ac0cc2c6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e5260665f297d7b4596d1d073a93d50ab9c7592', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '369b64e1df9340b58bc3a46a61072abb1b988475', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04fc9934d97f8cd64cfd9ce79b709df30b021c64', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5fd48ff15562a2dd75daffa4de4c37f0a8ecd0a', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1504f9da6d9240ace924fde0e02988317a0f89ee', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe6fb5e5ce166f9dab526b05137d41fa17f25bcf', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08cef65a5b49f52995249c28fc78bc86961e3ae9', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '726c2fec8be2ccbc13e10e79b55fc360351d3d78', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cea44727f33a0ffe75d18e9665a910c4b4d8473', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07bf041097aceb12b02af296ddd2195bf4597fa7', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2be6fd024b7bca50824e4e816ba9c37c152ef67e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad3d1d07cb4b3fa3debffcab8d35a17d81ac7ce', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd96afaf75eccf02a70b37e37278db659c33f9f4c', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1d2e09aa8e82579ccf29d316866d9d50b24ad10', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e6ffd6d92b6b5dbc3de85b3b89413f709140448', 'committer_username': 'real-yfprojects', 'committer_name': 'yfprojects', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 21, 9, 28, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab0a33ee6a1bf4edc6edb6a0e4bda75363b5483f', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cfe523c332c42454ac18d151a0ed4c3826cb51e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fdee761c8ef3730bc003059eb02ec356dae5914', 'committer_username': 'real-yfprojects', 'committer_name': 'yfprojects', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 21, 9, 28, 39, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1253617145,feat: add link to the logs folder in borg warnings,"
### Description
Adds a link to the vorta logs folder on the user's device in the `progressText` qLabel.
Please let me know in what state I should leave the strings for translation, thanks.

### Related Issue
#1486 

### Motivation and Context
Easier to open the logs folder without having to look for it (better UX).


### Screenshots (if appropriate):
![image](https://user-images.githubusercontent.com/41837037/221244947-c745a908-ce71-4e07-b56b-67c9e449d45a.png)

### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [ ] I have added tests to cover my changes.
- [x] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->
",True,1609,https://api.github.com/repos/borgbase/vorta/pulls/1609,https://github.com/borgbase/vorta/pull/1609,closed,29,7,5,20,1,25,0,0,[],2023-02-24 17:20:16+00:00,2023-03-12 07:05:46+00:00,1345530.0,"15 days, 13:45:30","[{'comment_id': 1117911663, 'comment_body': '```suggestion\r\n                trans_late(\'BorgCheckJob\', f\'Repo check failed. See <a href=""file://{LOG_DIR}"">logs</a> for details.\')\r\n```\r\n\r\nUsually the context equals the class the string is used in. In this particular case there might be good reasons to use a different context, though I wouldn\'t consider `messages` a descriptive context.', 'comment_created': datetime.datetime(2023, 2, 25, 11, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1117913008, 'comment_body': 'For platform independency `pathlib.Path.as_uri()` would find good use here.', 'comment_created': datetime.datetime(2023, 2, 25, 11, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1117922412, 'comment_body': 'from the docs - `However sometimes you want to mark a string, use the english version and translate it later. In these cases you have to use trans_late and call translate on the string later.` I thought `translate it later` here meant that this function is used for strings which are not yet translated (untranslated), and translations for these strings will be done by people later, so I used that. But yes, now I understand that the ""later"" relates to the runtime 😄. I will replace these with translate, thanks.', 'comment_created': datetime.datetime(2023, 2, 25, 13, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1117922590, 'comment_body': 'Should I replace this for the `Log` text in the misc tab in this PR too? Even there the linking is done like this.', 'comment_created': datetime.datetime(2023, 2, 25, 13, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1117940850, 'comment_body': ""That would be great. It doesn't matter for Linux and MacOS support but in anticipation of the Windows alpha being worked on in #1592 it does."", 'comment_created': datetime.datetime(2023, 2, 25, 15, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1117941011, 'comment_body': ""> I thought `translate it later` here meant that this function is used for strings which are not yet translated (untranslated), and translations for these strings will be done by people later, so I used that.\r\n\r\nI see the source of misunderstanding. I'll think about a way to clarify that."", 'comment_created': datetime.datetime(2023, 2, 25, 15, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1117941293, 'comment_body': 'Cool, thanks for the context.', 'comment_created': datetime.datetime(2023, 2, 25, 15, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1117954602, 'comment_body': 'What do you think about borgbase/vorta.borgbase.com#37?', 'comment_created': datetime.datetime(2023, 2, 25, 17, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1117983943, 'comment_body': ""It's better. thanks :)\r\n"", 'comment_created': datetime.datetime(2023, 2, 25, 21, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1118042922, 'comment_body': ""I just checked `config.py`. \r\nisn't this enough for platform independence?\r\n```python\r\ndirs = appdirs.AppDirs(APP_NAME, APP_AUTHOR)\r\nLOG_DIR = dirs.user_log_dir\r\n```\r\n"", 'comment_created': datetime.datetime(2023, 2, 26, 8, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1118053426, 'comment_body': 'Windows path use backslashes instead of forward slashes and they have drive names.', 'comment_created': datetime.datetime(2023, 2, 26, 9, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1118093456, 'comment_body': ""I noticed a few things, i wasn't aware of before. In my local testing Qt won't recognise the translate statements spanning over multiple lines, for some reason this works when using `self.tr` :shrug:. Additionally, Qt won't be able to translate a string if it changes on runtime. You therefore have to format the string after you translate it."", 'comment_created': datetime.datetime(2023, 2, 26, 14, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1118106923, 'comment_body': 'should I try - \r\n```python\r\ntranslate(\'VortaApp\',\'Borg exited with a warning message. See <a href=""{0}"">logs</a> for details.\'.format(Path(LOG_DIR).as_uri()))\r\n```\r\n - from https://stackoverflow.com/a/18367425', 'comment_created': datetime.datetime(2023, 2, 26, 15, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1119299029, 'comment_body': 'Almost. I think the StackOverflow answer is wrong. This should work:\n```python\ntranslate(\'VortaApp\',\'Borg exited with a warning message. See <a href=""{0}"">logs</a> for details.\').format(Path(LOG_DIR).as_uri())\n ```\n\n', 'comment_created': datetime.datetime(2023, 2, 27, 20, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1125458423, 'comment_body': 'this is slightly misleading wording (was already before this PR, so it could be changed here or in a later PR):\r\n\r\n""borg exited"" refers to the return code of borg, which can be 1 to indicate that there were warnings.\r\nnote the plural and also that borg did not exit **because** of a warning (or ""with **a** warning"") but **after** logging some warnings.\r\n\r\n ""Borg exited with warning status (rc 1), check the logs for warnings."" would be more appropriate.\r\n', 'comment_created': datetime.datetime(2023, 3, 4, 12, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ThomasWaldmann', 'type': 'User'}, {'comment_id': 1125458589, 'comment_body': 'better wording here, but note that there is a space missing after the dot.', 'comment_created': datetime.datetime(2023, 3, 4, 12, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ThomasWaldmann', 'type': 'User'}, {'comment_id': 1125595193, 'comment_body': 'considering that the translations need an update now anyway, guess we could fix the original string:\r\n\r\n""See **the** logs for details.""\r\n\r\nAlso:\r\n\r\nDo we have multiple logs or why the plural?\r\n\r\nAnd even if we have multiple - for that specific backup, only one of them is meant, right?\r\n\r\nAfter discussion this might need a global fix at all relevant places.', 'comment_created': datetime.datetime(2023, 3, 5, 4, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ThomasWaldmann', 'type': 'User'}, {'comment_id': 1125607480, 'comment_body': '> Do we have multiple logs or why the plural?\r\n\r\nWe have a single log spread over multiple files (RotatingFileHandler).', 'comment_created': datetime.datetime(2023, 3, 5, 6, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1125711652, 'comment_body': 'ok, so ""the logs"" as it is now seems fine.', 'comment_created': datetime.datetime(2023, 3, 5, 18, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ThomasWaldmann', 'type': 'User'}, {'comment_id': 1126334290, 'comment_body': 'Only 1 `backup_progress_event`, please. Else it will just show nothing.', 'comment_created': datetime.datetime(2023, 3, 6, 12, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1126335283, 'comment_body': '![Screenshot 2023-03-06 at 11 52 49](https://user-images.githubusercontent.com/3916435/223107538-03ea3f1e-f82e-4204-b72c-d48b1076b6d4.jpg)\r\n', 'comment_created': datetime.datetime(2023, 3, 6, 12, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1126350659, 'comment_body': 'So do you want me to create a new event and signal? `backup_warning_event`?', 'comment_created': datetime.datetime(2023, 3, 6, 12, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1126498948, 'comment_body': ""No. You're emitting this event 2x. The first sets the correct text. The second just sets `None`, hence the status stays empty.\r\n\r\nDid you test this case at all before committing it?"", 'comment_created': datetime.datetime(2023, 3, 6, 14, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1126500898, 'comment_body': 'You have nested 2 event calls within one another. Check the line below and compare to the other files you changed.', 'comment_created': datetime.datetime(2023, 3, 6, 14, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1126654700, 'comment_body': ""Oh, I am sorry, a really silly mistake from my end. 😓 Made quick changes and didn't test. Will be more careful next time."", 'comment_created': datetime.datetime(2023, 3, 6, 15, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}]","[{'commit_sha': '6d3fd14ecd327a9eef37c3179fcbc5c55bf03138', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e44a48b204b1feee870faa8d2040429fedec8dc6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfc5bff67b2a52f883c5849dce4f2c6655222759', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21a4af25d70a59fc4efdff54e13d32eabf9776d0', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e20e923ba92ddd2de9f8a3a5a404c7a954c0317a', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cc051482b04c133c4b516145343aa05e9f47805', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29e3bb7a9944fb00bef3ddad1c5cc5128c9f3f83', 'committer_username': 'real-yfprojects', 'committer_name': 'yfprojects', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 21, 9, 28, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b2b583aecba4b17e59944c9325822b38a740ff6', 'committer_username': 'real-yfprojects', 'committer_name': 'yfprojects', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 21, 9, 28, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '898d5adff2a4af3d91e9a742b20516d9c5093800', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e84ec517459f335a1b59061e4f9256739ea6ffac', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd07c68ea5152fb9562cbbc2dd2aa4851e6bddc87', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2503d0f43bd4983355f953a2798d54222c6f11e3', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96e08c68f9f12da663269d5628b8f504b5094d00', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66299a68232d2f6db598115a7fcab582cd95cf6f', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3ef29ee93723576524d0ab393131b5e4f7bc9c0', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '520016bd811135d35f37d75d2ae8f786b0b67838', 'committer_username': 'real-yfprojects', 'committer_name': 'yfprojects', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 21, 9, 28, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d9b11e0fd4348e22e74ff1ef5434157b93bf614', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38c833ad094e8a1fc8fafbbe98a18315253dd232', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed1c688187871272df1a28f485a1c48eea6e089a', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e5ab076ef072691e90b3c22e2493a2d1cc6a67c', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1254482038,Replace print with logging in application.py,"#1611 
Added [flake8-print](https://github.com/JBKahn/flake8-print), 
referred the flake-8 docs for additional-dependencies - https://flake8.pycqa.org/en/latest/user/using-hooks.html",True,1612,https://api.github.com/repos/borgbase/vorta/pulls/1612,https://github.com/borgbase/vorta/pull/1612,closed,2,2,1,11,10,3,0,0,[],2023-02-26 12:54:55+00:00,2023-03-08 16:47:51+00:00,877976.0,"10 days, 3:52:56","[{'comment_id': 1118110878, 'comment_body': 'Could this be a log statement instead?', 'comment_created': datetime.datetime(2023, 2, 26, 16, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1118122516, 'comment_body': ""I don't really know why this was a print statement at the first place, can you give me some context, so I can replace it if needed? cc:@real-yfprojects "", 'comment_created': datetime.datetime(2023, 2, 26, 17, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1118350396, 'comment_body': 'I am to blame for this line.\r\nlog would indeed be better', 'comment_created': datetime.datetime(2023, 2, 27, 7, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}]","[{'commit_sha': 'eeb8847f154bec4fd74dcdc8379d4e01b06698e8', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '056fa4821a88df337a44fa2c3b8febf127b2047a', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64a175da18632944b74bb75ae9eef6d56ee7e220', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4712c97be4509283b3c3916c8cd4d38b679e9c06', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e53ab97040957ae867d96a592b98c71f4e8f1a7f', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95db9b34d93de4dc42cb70c0a1fc21437aba233', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e71b32ebf504e51cda69e60d82604c4fc12f2d2', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7c935c5fcb679ad16829fcd9306ce5543f5869f', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78a4f2e9fdec1731a3145531c42e3c9ff2eb7785', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fe014992df0a3242bf7d9871ab0884e9adb0d55', 'committer_username': 'real-yfprojects', 'committer_name': 'yfprojects', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 21, 9, 28, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72168a756fde9acf52493c06fd3d1b4f017f5eb5', 'committer_username': 'real-yfprojects', 'committer_name': 'yfprojects', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 21, 9, 28, 39, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1254529859,feat: more descriptive messages when no sources are selected to backup,"fixes #1463 
![image](https://user-images.githubusercontent.com/41837037/221421618-f46b68d5-e09d-4001-b3bf-94ad9a25feb3.png)
",True,1613,https://api.github.com/repos/borgbase/vorta/pulls/1613,https://github.com/borgbase/vorta/pull/1613,closed,1,1,1,3,2,0,0,0,[],2023-02-26 16:01:11+00:00,2023-03-02 16:55:32+00:00,348861.0,"4 days, 0:54:21",[],"[{'commit_sha': 'a062395106b2cf669614c08facbfc203835b9660', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6254671ccbee565e22a1a19a02fab159ebe0b716', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67c76d7ab6cad69ceb9e94a498b0de09a612c6bf', 'committer_username': 'real-yfprojects', 'committer_name': 'yfprojects', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 21, 9, 28, 39, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1260356306,feat: add settings for files list views,"Added two settings to remember user's preferred files list view in the diff and extract dialogs
- `extract_files_display_mode`
- `diff_files_display_mode`

fixes #1516 
### Motivation and Context
Improves UX

### How Has This Been Tested?
Tested by changing the views and reopening vorta.

### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [ ] I have added tests to cover my changes.
- [ ] All new and existing tests passed.

I have to update the tests, then I'll make this ready for review.

*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->
",True,1621,https://api.github.com/repos/borgbase/vorta/pulls/1621,https://github.com/borgbase/vorta/pull/1621,closed,28,4,4,12,0,11,0,0,[],2023-03-02 12:11:13+00:00,2023-04-05 11:20:43+00:00,2934570.0,"33 days, 23:09:30","[{'comment_id': 1123313836, 'comment_body': ""```suggestion\r\n    def __init__(self, mode: 'FileTreeModel.DisplayMode', *, parent=None):\r\n```"", 'comment_created': datetime.datetime(2023, 3, 2, 15, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1123720372, 'comment_body': 'What was the star for here? I added it and got errors in tests, so I kept the type annotation suggestion', 'comment_created': datetime.datetime(2023, 3, 2, 21, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1124068779, 'comment_body': 'It forces to use `parent` as a kw arg. I like that for QObjects since it will increase forward compatibility.', 'comment_created': datetime.datetime(2023, 3, 3, 6, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1124071391, 'comment_body': ""The name isn't fully fitting. The method doesn't return the display mode but instantiates a TreeModel."", 'comment_created': datetime.datetime(2023, 3, 3, 6, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1125712599, 'comment_body': 'If you swap these lines, do you still need `get_diff_tree`?', 'comment_created': datetime.datetime(2023, 3, 5, 18, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1125712859, 'comment_body': 'Why is that needed?', 'comment_created': datetime.datetime(2023, 3, 5, 18, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1125718133, 'comment_body': 'Yeah, with mode=None this might not be needed. Earlier when I was passing a mode i used this. Thanks for pointing this out.', 'comment_created': datetime.datetime(2023, 3, 5, 19, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1125718351, 'comment_body': ""Didn't get you 😕 Swap which lines?"", 'comment_created': datetime.datetime(2023, 3, 5, 19, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1127038408, 'comment_body': 'lines 102 and 103. The signal will triggered by the programmatic change too.', 'comment_created': datetime.datetime(2023, 3, 6, 21, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1128148558, 'comment_body': 'Ah, nice!', 'comment_created': datetime.datetime(2023, 3, 7, 16, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1129633825, 'comment_body': ""```suggestion\n        self.comboBoxDisplayMode.currentIndexChanged.connect(self.change_display_mode)\n        self.comboBoxDisplayMode.setCurrentIndex(int(SettingsModel.get(key='diff_files_display_mode').str_value))\n```\n\nThis or move line 101 down one line."", 'comment_created': datetime.datetime(2023, 3, 8, 15, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}]","[{'commit_sha': '7d84fa64538f3a0f31b862d1cd655f9f2b3a03be', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b7b9c8af0031476322252cc8d8c0a75a7d45dd0', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5efe360a4a82e0a59ad29c7b75dd5f17e489dc6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d8b65280542700735b71290a42fc2a32465f87e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cfd9087c553a63a28018b8d96a8e6477112dfbb', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66bac7c628df59cd80bfdf306aefd29dac11984c', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9dec7900052370f42a80df9779461ab6ddb56fa', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdff3adae71d5190707b71ecdaba05d59e9b5164', 'committer_username': 'real-yfprojects', 'committer_name': 'yfprojects', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 21, 9, 28, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14c6b2627388366cb49b389e075eb19ca956551d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b016c1caebf91897c27e600c3c33a0bdebb41984', 'committer_username': 'real-yfprojects', 'committer_name': 'yfprojects', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 21, 9, 28, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3a4c3c7c70e07cf5aa845226b41bab57fab3ba0', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aadff660d43b59d81b50d9632c3a2453408c25c', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1268443524,feat: add profile name to log messages,"### Description
Append profile name to every log message

### Related Issue
#1379 

### Motivation and Context
Helps the user know which profile the log is coming from.

### How Has This Been Tested?
![image](https://user-images.githubusercontent.com/41837037/223846263-ad295ae3-8e84-4938-8875-112ede0d6726.png)


### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [x] I have added tests to cover my changes.
- [x] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->
",True,1637,https://api.github.com/repos/borgbase/vorta/pulls/1637,https://github.com/borgbase/vorta/pull/1637,closed,64,46,16,8,8,0,0,0,[],2023-03-08 20:55:35+00:00,2023-03-22 11:16:46+00:00,1174871.0,"13 days, 14:21:11",[],"[{'commit_sha': 'ac45c4951d537013f697ee45586e3640c08d954b', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eda585c47bf6280ca144e6e0e7e2459a09c5865', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '011cbcf2d37772ff0a99cf5f66f4557864c81f79', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f610c3664184043dd33fbb83ac67d1e0c317afe', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '288cb478120da83253d99ad86e70f9ef63c6c83f', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73419cff185a988798de668e68c2ba031d78eeb1', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '577c7c570866962a774298eeeee5cf2f30ee5546', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e61d0c45f98c97758f51292cbab339773933b6a1', 'committer_username': 'Hofer-Julian', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 10, 14, 32, 41, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1279120903,feat: block after vorta create and log status,"<!--- Provide a general summary of your changes in the Title above -->

### Description
Fixes #1380 
blocks `vorta --create` to log the result of the backing up operation.

### Motivation and Context
Better UX for `vorta --create`

### How Has This Been Tested?
Test GIF:
![create-block](https://user-images.githubusercontent.com/41837037/225720684-c548ed52-e77c-45a4-b6d4-dcf785e0c9e4.gif)

### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [ ] I have added tests to cover my changes.
- [x] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->
",False,1656,https://api.github.com/repos/borgbase/vorta/pulls/1656,https://github.com/borgbase/vorta/pull/1656,open,55,27,2,7,5,6,0,1,[],2023-03-16 18:40:32+00:00,,0.0,,"[{'comment_id': 1139235246, 'comment_body': 'The tests are failing because even during a normal backup I try to call `self.app.reply()`, which I should not. @real-yfprojects can you help me understand how I can check if the backup creation was triggered from the command line or normally from the GUI, so I can call `reply` optionally here?', 'comment_created': datetime.datetime(2023, 3, 16, 18, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1139256821, 'comment_body': 'You can connect a handle to `BorgJob.result` when triggered from the cmd command.', 'comment_created': datetime.datetime(2023, 3, 16, 19, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1140407806, 'comment_body': '\n```suggestion\n        if not args.profile:\n```\n\nElse `sys.exit` would have been called.', 'comment_created': datetime.datetime(2023, 3, 17, 15, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1143125074, 'comment_body': 'I think level `info` would fit better.', 'comment_created': datetime.datetime(2023, 3, 21, 9, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1239716161, 'comment_body': '`if True` is generally quicker to read than `if not XX`. And since we have a large code block under this condition now, it should get at least a comment on *when* this path is chosen. Still, keeping most of the code on the default path and dealing with exceptions some other way is preferable.', 'comment_created': datetime.datetime(2023, 6, 23, 11, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}]","[{'commit_sha': '4ba2cf0bf4e8f1a02a7df538070ad805f516141b', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f5218b4a65c11926b505f5063d1d1dda69be04d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfc8a4e3decc27fdacb7b7ef20bf30a094958821', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36a7da5dbf2eb6c957a1d67db337998fd25a5c34', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '599fdc39b25fed51c3beb28236c779fef853641a', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73c9d81005d5ef57120ee6c8da94848236e87fea', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c8ac3ed24654c8fc72612a4c5d83e897df47a0', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1280044100,feat: settings to allow new networks and show notif when a network is disallowed,"Adds 2 columns to the profile model:
1. shows the ""This wifi is not allowed"" notification only when it is checked. Shows the notif by default.
2. adds new networks to allowed networks only when checked. Does not add by default.

### Related Issue
Fixes #1655 

### Motivation and Context
#1654 

### How Has This Been Tested?
Manually tested.

### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [ ] I have added tests to cover my changes.
- [x] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->
",False,1658,https://api.github.com/repos/borgbase/vorta/pulls/1658,https://github.com/borgbase/vorta/pull/1658,open,126,2,7,14,10,12,0,1,[],2023-03-17 11:06:57+00:00,,0.0,,"[{'comment_id': 1140395725, 'comment_body': ""```suggestion\r\n            if (\r\n                msg['message'] != 'Current Wifi is not allowed.'\r\n                or profile.show_notification_when_network_disallowed\r\n            ):\r\n```\r\n\r\nThis does the same. I am not sure which is more readable."", 'comment_created': datetime.datetime(2023, 3, 17, 15, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1140396915, 'comment_body': ""Shouldn't the default be false since this is the current behaviour?"", 'comment_created': datetime.datetime(2023, 3, 17, 15, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1140399951, 'comment_body': ""```suggestion\r\n        self.allowNewNetworksCheckBox.setChecked(\r\n            profile.allow_new_networks\r\n        )\r\n```\r\n\r\n`setChecked` expects a boolean. Therefore the if isn't needed."", 'comment_created': datetime.datetime(2023, 3, 17, 15, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1140404717, 'comment_body': 'Your suggestion is more readable to me, thanks.', 'comment_created': datetime.datetime(2023, 3, 17, 15, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1140406199, 'comment_body': 'You mean true? \r\nAlso, I think not using new networks is a safer bet and better for users, but let me know.', 'comment_created': datetime.datetime(2023, 3, 17, 15, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1140417145, 'comment_body': ""> You mean true?\r\n\r\nYes\r\n\r\n> I think not using new networks is a safer bet and better for users\r\n\r\nWe can discuss the default for new users in https://github.com/borgbase/vorta/blob/28c30f18b1a804ec06800753e214f016712109ae/src/vorta/store/models.py#L98\r\nbut the migration shouldn't change the behaviour the user is expecting.\r\n\r\nNot allowing new networks is safer but some users might wonder why their backups don't run on WiFi. With *simple by default, powerful when needed* in mind I advocate a default of `True`."", 'comment_created': datetime.datetime(2023, 3, 17, 15, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1140590170, 'comment_body': ""Makes sense, I'll make `True` the default value."", 'comment_created': datetime.datetime(2023, 3, 17, 18, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1158378665, 'comment_body': 'Comparing the precise error message duplicates it and is prone to breaking, if it slightly changes later?', 'comment_created': datetime.datetime(2023, 4, 5, 11, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1158417976, 'comment_body': 'Do you suggest adding a numeric value to the msg dict? Like a code or something? Vorta does not use consistent return codes, so I found nothing.', 'comment_created': datetime.datetime(2023, 4, 5, 11, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1239719193, 'comment_body': ""Here it defaults to `False`, but in migrations it's `True`? Suggest to use `True` everywhere, which is the current behavior."", 'comment_created': datetime.datetime(2023, 6, 23, 11, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1239721576, 'comment_body': 'I think yf and I discussed this before (been long so idr exactly where, I tried searching). The new behaviour should not surprise existing users, so the migration changes nothing. But for new users, having this value as false is more beneficial.', 'comment_created': datetime.datetime(2023, 6, 23, 11, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1239723064, 'comment_body': 'found it - https://github.com/borgbase/vorta/pull/1658#discussion_r1140417145', 'comment_created': datetime.datetime(2023, 6, 23, 11, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}]","[{'commit_sha': '28c30f18b1a804ec06800753e214f016712109ae', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '213ba8c3b561fcb9d143ee47990832923384e32c', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '728c53116f86c28dba2653ef8745b33bc899f2bb', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dce04dff3170a6b25bc3b032bf73a502a23ac8a8', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72d58c9f7490ac3a9f60c416e3d51d57a5d2cef2', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03b759ec992bc12188cc210f6de04c340d6a2fda', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c74ed009201eb13362cf90112b697fd6851e7525', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4724451c22c721330e9606a237f91d849f73b504', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5811da23a1ab2efe4c2a508549e55d37f8eaef2', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd934a90e2214beb1d055aa263d86a0c4df49f963', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4633672511580ab052dbc5a762a335d2e8f0981', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1be6d59d1f5e697082a52f7080b495fb12a26011', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4900a14a8c64a7210a7a07414813572c15d0240', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c42be5fbe30bd513f185cd65d37abebd87f09b3e', 'committer_username': 'TheLazron', 'committer_name': 'Aryaman Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 10, 1, 15, 30, 20, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1281741495,feat: quick mount,"### Description
Adds a Quick Mount feature to vorta so a user can browse their backups quickly. Improves UX as it will no longer be required to create a folder separately, open it in vorta, and then mount.
I'll add tests too once the code gets reviewed.

### Related Issue
Closes #1435 

### Motivation and Context
UX Improvement and an old feature request.

### How Has This Been Tested?
Tested with repos for now. The old functionality is ""Mount to Folder"" and the new one is ""Quick Mount"". This option opens the created folder and deletes it when the user unmounts the repository.

### Screenshots (if appropriate):
![Quick Mount](https://user-images.githubusercontent.com/41837037/226204862-3148219d-f5e3-4c58-8920-339ad921b9d9.gif)

### What's Left:
- [ ] Quick mount for archives
- [ ] Updating/Adding Tests

### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [ ] I have added tests to cover my changes.
- [x] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->
",False,1664,https://api.github.com/repos/borgbase/vorta/pulls/1664,https://github.com/borgbase/vorta/pull/1664,open,88,7,2,6,4,17,1,1,[{'name': 'help wanted'}],2023-03-19 19:45:40+00:00,,0.0,,"[{'comment_id': 1141458419, 'comment_body': 'Assuming this should be safe right?  The other (more complex?) option is to delete the quick mount folder when vorta exits.', 'comment_created': datetime.datetime(2023, 3, 19, 19, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1143173982, 'comment_body': '\n```suggestion\n        elif quick:\n```', 'comment_created': datetime.datetime(2023, 3, 21, 10, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1143175939, 'comment_body': 'You should check whether the folder already exists/is empty.', 'comment_created': datetime.datetime(2023, 3, 21, 10, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1143178377, 'comment_body': 'Please only disconnect the specific slot.', 'comment_created': datetime.datetime(2023, 3, 21, 10, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1143179239, 'comment_body': 'Can you add a small comment explaining why a type error might be raised?', 'comment_created': datetime.datetime(2023, 3, 21, 10, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1143181433, 'comment_body': ""Why didn't you include that code in `bmount_archive_refresh`?"", 'comment_created': datetime.datetime(2023, 3, 21, 10, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1143184876, 'comment_body': 'This var is related to repo mounts only I think.', 'comment_created': datetime.datetime(2023, 3, 21, 10, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1143188230, 'comment_body': ""I'd consider this safe."", 'comment_created': datetime.datetime(2023, 3, 21, 10, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1143188586, 'comment_body': 'How do you know which repo a mount point belongs to?', 'comment_created': datetime.datetime(2023, 3, 21, 10, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1143193993, 'comment_body': 'Maybe the `self.mount_points` dict can be reused for this. Why a new dict for this? Not possible to add more than one archive from the same repo and the mounts need to be discovered during startup. So tracking them all in one place is better.', 'comment_created': datetime.datetime(2023, 3, 21, 10, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1143198124, 'comment_body': 'So this variable is only used to decide if the folder get deleted? Why not use the name for that? What if I quick mount from one profile and then normal mount from another? Will it remove that folder too?', 'comment_created': datetime.datetime(2023, 3, 21, 10, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1143634850, 'comment_body': 'If I trigger `bmountrepo_refresh` on load, I can handle mounting/unmounting different repos, will do that.', 'comment_created': datetime.datetime(2023, 3, 21, 16, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1153641247, 'comment_body': 'Why are there two calls to `connect`?', 'comment_created': datetime.datetime(2023, 3, 30, 18, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1153644294, 'comment_body': ""Would `bmountarchive_clicked` be connected to the signal multiple times?\nThis also doesn't disconnect the slot `lambda: self.bmountarchive_clicked(quick=True)` afaik."", 'comment_created': datetime.datetime(2023, 3, 30, 18, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1153652105, 'comment_body': ""Why is that needed? I guess it doesn't hurt either."", 'comment_created': datetime.datetime(2023, 3, 30, 18, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1153738550, 'comment_body': 'To support changing the repository from the dropdown in the`Repository` tab. Without this, the Unmount option is visible for all repositories when I restart Vorta and not just the one I mounted.', 'comment_created': datetime.datetime(2023, 3, 30, 20, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1154571302, 'comment_body': 'I think this would make more sense in `_toggle_all_buttons`', 'comment_created': datetime.datetime(2023, 3, 31, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}]","[{'commit_sha': '3e82c5f28fa7f24335d37802b5999f78b5ab2812', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24f418e562e3af888852e4591d147ee52174cd37', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaf03b250da9e15f73a4db0b83d6545fd9217faf', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdf9c69975ab5ed18141ea0f0248a3bc98272622', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '317cd0b3600b1fc85710c95050503eed8b92834c', 'committer_username': 'TheLazron', 'committer_name': 'Aryaman Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 10, 1, 15, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac624edfb6583e486bcf498e1e52f40ab4b009c1', 'committer_username': 'TheLazron', 'committer_name': 'Aryaman Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 10, 1, 15, 30, 20, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1283445399,feat: assign names to repos,"### Description
Adds a ""name"" field in the new repo creation form and displays it where I thought it was suitable.

### Related Issue
Fixes #1388 

### Motivation and Context
Easier to remember and tag repos.

### How Has This Been Tested?
Tried creating a repo and looking at the places where I rendered the name instead of the url.

### Screenshots (if appropriate):

![image](https://user-images.githubusercontent.com/41837037/226489801-be219ad8-21e3-4a01-87dd-ec78952f24d3.png)
![image](https://user-images.githubusercontent.com/41837037/226489850-72cf3aaa-904c-4470-9761-27cf4b87d3c5.png)
![image](https://user-images.githubusercontent.com/41837037/226489864-1d8a823c-fce9-471a-9487-a43d596bc725.png)


### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [x] I have added tests to cover my changes.
- [x] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->
",True,1665,https://api.github.com/repos/borgbase/vorta/pulls/1665,https://github.com/borgbase/vorta/pull/1665,closed,332,278,13,22,14,2,0,1,[],2023-03-20 23:54:30+00:00,2023-06-24 19:57:47+00:00,8280197.0,"95 days, 20:03:17","[{'comment_id': 1161087716, 'comment_body': 'Double space in case of empty profile name.', 'comment_created': datetime.datetime(2023, 4, 8, 9, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1198690444, 'comment_body': 'This doubles the translation string. I\'d prefer\n\n\n```suggestion\n            if profile.repo.name:\n                repo_name = f""{profile.repo.name} ({profile.repo.url})""\n            else:\n                repo_name = profile.repo.url\n            self.toolBox.setItemText(0, self.tr(\'Archives for {}\').format(repo_name))\n```', 'comment_created': datetime.datetime(2023, 5, 19, 8, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}]","[{'commit_sha': '03fc2c811799a682f654681d8ab5e80888cfd64d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e70d6fab6839ef61d83da2b45b5373bc66b564cb', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39b4b1e73bbedc6faaffadaee219e362bf14cb79', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e5b871fc0825fe744b2605f43a291a7c1935ae5', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '111253d0cb9ad1a5b721cc6c70e33f2f21c32c1d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53698d8823fb773f63572377d286954771a166f4', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15bc9ea9f868529cc13e5696b5b1551185dae0f9', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a99cfd1f8c63322a8045a743e6c42f14f622714f', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77fdbdd5362f10cc658a77924bae119d1a292f69', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ad2a9386183cb8766d75a9694ee6227c6526815', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b656e3d3e284e36444abf6a4214752a476e243c', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cb409a57606ddb4d1c55a534e6897c0d9a22417', 'committer_username': 'real-yfprojects', 'committer_name': 'yfprojects', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 21, 9, 28, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0fb0ae41587ae5d21dc2ae7afffecbb5a84789a', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de8a57775c6debc09d54e1f9d362f843df4a006', 'committer_username': 'real-yfprojects', 'committer_name': 'yfprojects', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 21, 9, 28, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e27718e13f96975d42ba58e262be465bc8f8788', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da01812d53621e67e56b85917fa0359ddf29f9a7', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ade78921985a504ce898d1567b0069732428ece', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f332097ab0d442ca6e7576b7310d25b52a67be07', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '744b340e7c35961a5ee4997fc6f5fb124822f01e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba99cc35b445f6b0019fa6c671e5e808cd50aa6e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d6d29caa64fb2d1318a8370b349683f71fcb3e8', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aedc512d2cc69a0ad585eba4e23986d4fff0e224', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1283847033,ci: add ruff for print checks,"
### Description
Recently committed a print statement, which reminded me of https://github.com/borgbase/vorta/pull/1612#issuecomment-1447782606

### Screenshots (if appropriate):
![image](https://user-images.githubusercontent.com/41837037/226560718-612c7d3e-e1a6-4c7d-93ae-d3d3df8c3e65.png)


### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [ ] I have added tests to cover my changes.
- [x] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->
",True,1666,https://api.github.com/repos/borgbase/vorta/pulls/1666,https://github.com/borgbase/vorta/pull/1666,closed,277,71,88,3,22,19,0,0,[],2023-03-21 09:08:01+00:00,2023-05-09 19:03:07+00:00,4269306.0,"49 days, 9:55:06","[{'comment_id': 1143111692, 'comment_body': ""In order to see if ruff can replace flake8 and isort mid-term, let's activate all flake8 and isort features."", 'comment_created': datetime.datetime(2023, 3, 21, 9, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1143112749, 'comment_body': 'I feel like pre-commit should replace the `make lint` rule.\r\nThis can also be handled in a follow up PR.', 'comment_created': datetime.datetime(2023, 3, 21, 9, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1143116959, 'comment_body': ""Even if we don't want to immediately move away from flake8 (https://github.com/borgbase/vorta/pull/1612#issuecomment-1447080212), I think we can safely move from isort to ruff."", 'comment_created': datetime.datetime(2023, 3, 21, 9, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1143196881, 'comment_body': '*ruff', 'comment_created': datetime.datetime(2023, 3, 21, 10, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1143199025, 'comment_body': 'Ah yes :P', 'comment_created': datetime.datetime(2023, 3, 21, 10, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1143201024, 'comment_body': 'Is it possible to limit the print checks to production code?', 'comment_created': datetime.datetime(2023, 3, 21, 10, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1143203056, 'comment_body': 'Yes https://beta.ruff.rs/docs/settings/#exclude', 'comment_created': datetime.datetime(2023, 3, 21, 10, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1143211010, 'comment_body': ""I'd like to still run other ruff checks on these files."", 'comment_created': datetime.datetime(2023, 3, 21, 11, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1143216525, 'comment_body': 'In that case, the status quo is the best option as far as I can see', 'comment_created': datetime.datetime(2023, 3, 21, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1143218865, 'comment_body': 'There is https://beta.ruff.rs/docs/settings/#per-file-ignores', 'comment_created': datetime.datetime(2023, 3, 21, 11, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1143225645, 'comment_body': ""Helper scripts don't need to be included in these checks. Just `src`."", 'comment_created': datetime.datetime(2023, 3, 21, 11, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1143728743, 'comment_body': ""Turns out ruff does not use the same options with isort as isort itself. I could replicate the functionality to limit the changes to a minimum. But I can't figure out what option is triggering changes like these:\r\n![image](https://user-images.githubusercontent.com/41837037/226685235-0ea8d001-260f-4ae6-bfca-ce4449f87bf9.png)\r\nhere are all the options ruff allows configuring - https://beta.ruff.rs/docs/settings/#isort\r\nAlso, I had to add a rule to remove line breaks between import sections too, why did we suppress them in the first place? They look better imo:\r\n![image](https://user-images.githubusercontent.com/41837037/226685687-b3f6d18e-9d53-4120-ae82-622441f30c8e.png)\r\n"", 'comment_created': datetime.datetime(2023, 3, 21, 17, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1153672963, 'comment_body': 'Having https://github.com/borgbase/vorta/pull/1666#discussion_r1143728743 in mind I suggest keeping this as a check.', 'comment_created': datetime.datetime(2023, 3, 30, 18, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1153673379, 'comment_body': ""> I had to add a rule to remove line breaks between import sections too, why did we suppress them in the first place? They look better imo\r\n\r\nI like them as well. But I guess @m3nu doesn't."", 'comment_created': datetime.datetime(2023, 3, 30, 18, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1153686871, 'comment_body': ""> But I can't figure out what option is triggering changes like these\r\n\r\nMaybe `PyQt5` isn't recognized as a [third party library](https://beta.ruff.rs/docs/settings/#known-third-party)?\r\n\r\n"", 'comment_created': datetime.datetime(2023, 3, 30, 19, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1153694430, 'comment_body': 'Either way is good. If there are many imports, some line breaks can separate the various groups of imports.', 'comment_created': datetime.datetime(2023, 3, 30, 19, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1158655070, 'comment_body': 'I removed isort from the codebase and replaced it with ruff. It added some lines between imports but I think this separation is better.', 'comment_created': datetime.datetime(2023, 4, 5, 15, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1181453104, 'comment_body': ""Why `--fix`? This is intended as a check only. That's why black is run with `--check`."", 'comment_created': datetime.datetime(2023, 5, 1, 8, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1181454232, 'comment_body': ""I'd prefer running the pre-commit hook with `--fix`."", 'comment_created': datetime.datetime(2023, 5, 1, 8, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}]","[{'commit_sha': 'f0a5a36275eb8951c230289bfa81eb0e1292b2f7', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24e1dd5c561bc3da972e41e6fd61961f12a2fc9f', 'committer_username': 'real-yfprojects', 'committer_name': 'yfprojects', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 21, 9, 28, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82270adf4f27b228fe0871aba36c39926d6ab6b5', 'committer_username': 'real-yfprojects', 'committer_name': 'yfprojects', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 21, 9, 28, 39, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1374781264,feat: refresh multiple archives,"<!--- Provide a general summary of your changes in the Title above -->

### Description
First task for one of my GSoC Projects, ""Enhancing the Archive Table actions"". I listed these tasks out in the proposal, in total they should take me around 50 hours:

- [ ] #1734 
- [x] #1732 
- [x] #1727 
- [x] #1723
- [ ] #1664



This will allow Vorta users to select multiple archives and refresh them at once, hence improving UX.

### Motivation and Context
Saves the user's time.

### How Has This Been Tested?
I tested this manually:

![refresh-multiple](https://github.com/borgbase/vorta/assets/41837037/7b0ff267-8176-462e-8454-ec6c4b3275fb)



### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [ ] I have added tests to cover my changes.
- [x] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->
",True,1723,https://api.github.com/repos/borgbase/vorta/pulls/1723,https://github.com/borgbase/vorta/pull/1723,closed,49,28,3,15,14,30,0,1,[],2023-06-01 21:00:40+00:00,2023-07-05 10:28:10+00:00,2899650.0,"33 days, 13:27:30","[{'comment_id': 1213679705, 'comment_body': 'Is this a dirty hack? I thought this was the only way to do this with the layout. Otherwise I could do something like https://github.com/borgbase/vorta/pull/1723/files#diff-1340facde0499b13accf612e9eab00d2c0909090fb7320e61ce2f0cf6282ca02R370-R372', 'comment_created': datetime.datetime(2023, 6, 1, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1214351284, 'comment_body': ""This link goes to the current page, but you're right. This can be solved better probably."", 'comment_created': datetime.datetime(2023, 6, 2, 13, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1214352400, 'comment_body': 'yes, it redirects to the 3 lines above, where I disabled the other buttons one by one manually.', 'comment_created': datetime.datetime(2023, 6, 2, 13, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1214356271, 'comment_body': ""`if 'Refresh' not in tooltip:`\r\n\r\nThis one doesn't look very stable if we ever rename the tooltip text. Maybe there is a better way to use some metadata or name of the button instead."", 'comment_created': datetime.datetime(2023, 6, 2, 13, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1214390463, 'comment_body': 'You also have to keep i18n in mind.', 'comment_created': datetime.datetime(2023, 6, 2, 13, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1214398563, 'comment_body': 'Thanks, Done.', 'comment_created': datetime.datetime(2023, 6, 2, 13, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1224244844, 'comment_body': 'This comment needs to be adapted (or removed)', 'comment_created': datetime.datetime(2023, 6, 9, 12, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1224252677, 'comment_body': 'Why do we need to special case `bRefreshArchive` here?', 'comment_created': datetime.datetime(2023, 6, 9, 12, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1224340992, 'comment_body': 'Because every button is disabled when multiple archives are selected except the refresh button. The ""reason"" variable here is - Only one archive should be selected (similar).', 'comment_created': datetime.datetime(2023, 6, 9, 13, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1224362093, 'comment_body': 'What about:\r\n\r\n```py\r\n# too few or too many selected.\r\nfor widget in [self.fArchiveActions, self.bMountArchive, ...]:\r\n    tooltip = widget.toolTip()\r\n    tooltip = self.tooltip_dict.setdefault(widget, tooltip)\r\n    widget.setToolTip(tooltip + "" "" + reason)\r\n    widget.setEnabled(False)\r\n\r\n# special treatment for dynamic mount/unmount button.\r\nself.bmountarchive_refresh()\r\ntooltip = self.bMountArchive.toolTip()\r\nself.bMountArchive.setToolTip(tooltip + "" "" + reason) \r\n\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 14, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1224362982, 'comment_body': ""@diivi I understand, but that also applies for the diff button. Can't you treat them similarly?"", 'comment_created': datetime.datetime(2023, 6, 9, 14, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1224603596, 'comment_body': '> What about:\r\n> \r\n> ```python\r\n> # too few or too many selected.\r\n> for widget in [self.fArchiveActions, self.bMountArchive, ...]:\r\n>     tooltip = widget.toolTip()\r\n>     tooltip = self.tooltip_dict.setdefault(widget, tooltip)\r\n>     widget.setToolTip(tooltip + "" "" + reason)\r\n>     widget.setEnabled(False)\r\n> \r\n> # special treatment for dynamic mount/unmount button.\r\n> self.bmountarchive_refresh()\r\n> tooltip = self.bMountArchive.toolTip()\r\n> self.bMountArchive.setToolTip(tooltip + "" "" + reason) \r\n> ```\r\n\r\nself.fArchiveActions will include the refresh button though, so this snippet did not work.\r\nBut with the same idea, this works:\r\n\r\n```python\r\n        if self.repoactions_enabled and len(indexes) == 1:\r\n            # Enable archive actions\r\n            for widget in [self.bMountArchive, self.bExtract, self.bRename]:\r\n                widget.setEnabled(True)\r\n\r\n            for index in range(layout.count()):\r\n                widget = layout.itemAt(index).widget()\r\n                widget.setToolTip(self.tooltip_dict.get(widget, """"))\r\n\r\n            # refresh bMountArchive for the selected archive\r\n            self.bmountarchive_refresh()\r\n        else:\r\n            reason = reason or self.tr(""(Select exactly one archive)"")\r\n\r\n            # too few or too many selected.\r\n            for widget in [self.bMountArchive, self.bExtract, self.bRename]:\r\n                tooltip = widget.toolTip()\r\n                tooltip = self.tooltip_dict.setdefault(widget, tooltip)\r\n                widget.setToolTip(tooltip + "" "" + reason)\r\n                widget.setEnabled(False)\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 18, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1224690452, 'comment_body': 'I think this is a much nicer approach :)\r\n\r\nOne small thing: How about you extract `[self.bMountArchive, self.bExtract, self.bRename]` here and on line 371 into a variable with a descriptive name? ', 'comment_created': datetime.datetime(2023, 6, 9, 19, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1224693802, 'comment_body': 'Good idea!', 'comment_created': datetime.datetime(2023, 6, 9, 19, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1225713911, 'comment_body': ""Wouldn't it be more readable if one grouped these three statements by button?"", 'comment_created': datetime.datetime(2023, 6, 11, 5, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1225714434, 'comment_body': 'According to the HIG disabled widgets should state a reason for being disabled when they are by enclosing the reason with brackets and appending it to the tooltip. The refresh button is missing that.', 'comment_created': datetime.datetime(2023, 6, 11, 5, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1225714817, 'comment_body': 'Why is all of that needed?', 'comment_created': datetime.datetime(2023, 6, 11, 5, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1227133877, 'comment_body': 'I pasted this stuff from other pieces of the code to get the names of the selected archives, do you have a better alternative in mind?', 'comment_created': datetime.datetime(2023, 6, 12, 19, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1229514600, 'comment_body': '[`selected_archive_name`](https://github.com/borgbase/vorta/blob/2cb9afd4d551dfa5f251d6edafb29de020a4234e/src/vorta/views/archive_tab.py#LL507C24-L507C24) works with less code.', 'comment_created': datetime.datetime(2023, 6, 14, 12, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1229529937, 'comment_body': 'This does the same thing with multiple archives instead of one though, right? I got this code from there only.', 'comment_created': datetime.datetime(2023, 6, 14, 12, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1229919074, 'comment_body': 'Your code starts off the same as `selected_archive_name`. Then you query the database to sort the archives. This differs from the `selected_archive_name`. Why do you do that?', 'comment_created': datetime.datetime(2023, 6, 14, 16, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1229929777, 'comment_body': '```suggestion\r\n        profile = self.profile()\r\n\r\n        archive_names = []\r\n        for index in selected_archives:\r\n            archive_names.append(self.archiveTable.item(index.row(), 4).text())\r\n```\r\nI should be doing this right?', 'comment_created': datetime.datetime(2023, 6, 14, 17, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1229930971, 'comment_body': 'Yes, that should work.', 'comment_created': datetime.datetime(2023, 6, 14, 17, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1229933298, 'comment_body': ""Can you log the problem when `not params['ok']` or maybe even display it in the GUI."", 'comment_created': datetime.datetime(2023, 6, 14, 17, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1229936765, 'comment_body': 'Similar to this:\r\nhttps://github.com/borgbase/vorta/blob/2cb9afd4d551dfa5f251d6edafb29de020a4234e/src/vorta/views/archive_tab.py#L810-L813C19', 'comment_created': datetime.datetime(2023, 6, 14, 17, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1229939187, 'comment_body': 'This will enable the buttons again although the other info jobs are still running.', 'comment_created': datetime.datetime(2023, 6, 14, 17, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1229940945, 'comment_body': ""So should I connect just the last job's result to this function?"", 'comment_created': datetime.datetime(2023, 6, 14, 17, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1229959644, 'comment_body': ""Well, theoretically you don't know which job finishes first. Did you try to run the current code? I would think that only one borg jobs succeeds because of the repo lock."", 'comment_created': datetime.datetime(2023, 6, 14, 17, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1230091627, 'comment_body': 'Yeah I tried running it (I attached a GIF above).', 'comment_created': datetime.datetime(2023, 6, 14, 19, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1230158095, 'comment_body': ""Nevermind, I didn't attach the GIF. Here,\r\n![Peek 2023-06-15 02-22](https://github.com/borgbase/vorta/assets/41837037/d810ea57-1dd1-483b-a4f9-9c24d63c2d6b)\r\n\r\nThey do blink, but all jobs are succeeding right?"", 'comment_created': datetime.datetime(2023, 6, 14, 20, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}]","[{'commit_sha': '24b5197884c435b03113b0164b758fdf4ff7be4d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '888eaea7b53558b17edd7b7b6b5068abda6e38c5', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20a79c3737bd84786ac069b9f9f6153331beff17', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd0cbf2c0ef22fa891faa4fae2ce7a47e37d8e2f', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1bd6f72b7360068f8ba8680e3d8ce55608fbc96', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cecc66f09519998a4c690cdf7f7bb992488ae79f', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '133216f49a300834e901b11dbc6c4e47a9162114', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0997825ca7cb8d106485912606522573c4e00dce', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2bd1a074c22764afc4318dae3ae1054a0b346c0', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dac1baa384d55f804e8a9765b76e585c33e53f2', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5884a8896df7781eb106abbe0f1e17f4e891d5ad', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33b241fa516d552638f0976ce2b9566ace1cbe08', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19f666eee6ca9714a826ce04833e7935fd8ba138', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69f8243c20fdb491d7c86bed6e3325dd9f08a403', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c3179e20e2bc054f1a7d9356a50453ae7a1a120', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1379593972,feat: remove compact button for older borg versions < 1.2,"<!--- Provide a general summary of your changes in the Title above -->

### Description
This PR removes the check for Borg version in compact.py and hides the compact button in archive_tab.py if the Borg version is less than 1.2.0. This is done to prevent errors and crashes caused by using the compact feature with an incompatible Borg version.

### Related Issue
Related to:
#1723 

### Motivation and Context
Hides the compact button from the user instead of misleading them into thinking compact will work.

### How Has This Been Tested?
Tested manually with Borg 1.2.0

### Screenshots (if appropriate):
After manually changing the minimum reqd version to 1.5.0 just to test:
![image](https://github.com/borgbase/vorta/assets/41837037/f6c5b9c5-8b02-4a9e-84ab-b6bd4af42bb9)

### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [ ] I have added tests to cover my changes.
- [x] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->
",True,1727,https://api.github.com/repos/borgbase/vorta/pulls/1727,https://github.com/borgbase/vorta/pull/1727,closed,19,4,4,10,4,8,0,1,[],2023-06-05 19:16:42+00:00,2023-06-23 19:20:23+00:00,1555421.0,"18 days, 0:03:41","[{'comment_id': 1225718225, 'comment_body': 'Instead of removing this you could raise an Exception 🤷', 'comment_created': datetime.datetime(2023, 6, 11, 6, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1226421256, 'comment_body': 'Right. In case the code is somehow run with the wrong version. But how would that work if the same check already runs elsewhere? Who knows..', 'comment_created': datetime.datetime(2023, 6, 12, 10, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1226422205, 'comment_body': ""Minor idea that @real-yfprojects noted in another PR: If a button is disabled, it could give a reason. But just a nice-to-have from my side. It's fine as it is."", 'comment_created': datetime.datetime(2023, 6, 12, 10, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'm3nu', 'type': 'User'}, {'comment_id': 1227101510, 'comment_body': 'Hmm, even I thought it might be redundant but ig good to have it.', 'comment_created': datetime.datetime(2023, 6, 12, 18, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1227132738, 'comment_body': 'Please add a comment to the function that it may only be run multiple times.', 'comment_created': datetime.datetime(2023, 6, 12, 19, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1227133189, 'comment_body': 'A docstring would be nice to have as well.', 'comment_created': datetime.datetime(2023, 6, 12, 19, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1227140920, 'comment_body': 'single time? During the start', 'comment_created': datetime.datetime(2023, 6, 12, 19, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1227532671, 'comment_body': ""Oh, yes that's what I wanted to write."", 'comment_created': datetime.datetime(2023, 6, 13, 5, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}]","[{'commit_sha': '49a2bbd5df54b7a59d93338d4f930a3aaa07ab79', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '971168cfbf4e24972bb3a92db50b22f54d493bfd', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fae1d7b01938982dc27551b89bf21e92f18095d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fc0ee9a29625e4f7e713b6f3b71e84df3e000ea', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9eed80fb126de4635e47522da81ab52f7504b3d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64012358243262372e430286250c3ecb94c4dd9a', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b68a9170516f9d360844365493f609f2670faf6a', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7989a0394e5f74f6e8bb94e553ea56494a786fe8', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29ddec50901a821fafc458f454b0c5f911daa4ca', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7ffdf5e2b2b2c2da548bad1214988d7b2b1559d', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1397279685,feat: add a trigger column to the archive table,"<!--- Provide a general summary of your changes in the Title above -->

### Description
This PR  adds a ""trigger"" column to the archive table that shows whether an archive was created by the scheduler or by the user manually.

To cover:

- [ ]  hide the mount point column if no archive has a mount point.

### Related Issue
Part of #1723 

### Motivation and Context
Easier to differentiate between schedule and user created archives.

### How Has This Been Tested?
Created 3 archives with the scheduler and manually.

### Screenshots (if appropriate):
![image](https://github.com/borgbase/vorta/assets/41837037/36a46c21-65cd-4201-a64b-492aa61670ce)



### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [ ] I have added tests to cover my changes.
- [x] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->
",True,1732,https://api.github.com/repos/borgbase/vorta/pulls/1732,https://github.com/borgbase/vorta/pull/1732,closed,48,5,7,4,1,0,0,0,[],2023-06-18 21:07:18+00:00,2023-06-23 13:21:55+00:00,404077.0,"4 days, 16:14:37",[],"[{'commit_sha': 'e0e60208679dcb2601798f3236a1c57e67d7232f', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db7a0a872fd77265ab6d6ed7c94db02fc64cb945', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e029881ab0960b1ed25ca25a6614f3a7a7c9edc', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd1f80bebc367ae19a25039922262e0be1251e7e', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1398857523,feat: inline edit for archive renaming,"<!--- Provide a general summary of your changes in the Title above -->

### Description
This PR adds the ability to rename archives in the archive tab. When a user double-clicks on the name of an archive, they can edit the name. If the new name is valid, the archive is renamed. If the new name is invalid, an error message is displayed. This feature is implemented using the `cellChanged` signal of the `QTableWidget`. The `rename_action` method has been removed.

### Related Issue
Part of #1723

### Motivation and Context
Faster renaming of archives.

### How Has This Been Tested?
![Peek 2023-06-20 02-31](https://github.com/borgbase/vorta/assets/41837037/f63b77e8-0ccc-4913-881c-3f8444e2418c)


### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [x] I have added tests to cover my changes.
- [x] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->
",True,1734,https://api.github.com/repos/borgbase/vorta/pulls/1734,https://github.com/borgbase/vorta/pull/1734,closed,70,62,5,16,24,10,0,1,[],2023-06-19 21:19:05+00:00,2023-08-15 11:38:52+00:00,4889987.0,"56 days, 14:19:47","[{'comment_id': 1234487508, 'comment_body': 'Will look at some docs online to add a new test here, according to the changes. Any help will also be appreciated!', 'comment_created': datetime.datetime(2023, 6, 19, 21, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1235497114, 'comment_body': 'I tested using simple double mouse click event and it works\r\n\r\n```\r\npos = tab.archiveTable.visualRect(tab.archiveTable.model().index(0, 4)).center()\r\n qtbot.mouseClick(tab.archiveTable.viewport(), QtCore.Qt.MouseButton.LeftButton, pos=pos)\r\n qtbot.mouseDClick(tab.archiveTable.viewport(), QtCore.Qt.MouseButton.LeftButton, pos=pos)\r\n```\r\n\r\nThis will trigger the double click and rename action. You can then send new name and enter key.', 'comment_created': datetime.datetime(2023, 6, 20, 16, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1235500568, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2023, 6, 20, 16, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1257257696, 'comment_body': 'Typo', 'comment_created': datetime.datetime(2023, 7, 8, 12, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1257259256, 'comment_body': ""You should return early when the column isn't column 4 (the name column)."", 'comment_created': datetime.datetime(2023, 7, 8, 12, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1257261198, 'comment_body': 'The original name of the archive should be restored then.', 'comment_created': datetime.datetime(2023, 7, 8, 12, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1259787248, 'comment_body': 'Good point', 'comment_created': datetime.datetime(2023, 7, 11, 14, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1275336575, 'comment_body': ""Should `item.setText(self.renamed_archive_original_name)` get called before this line? When I'm testing this, I find the status message is easily missed, and the name stays as the invalid name until an archive refresh."", 'comment_created': datetime.datetime(2023, 7, 26, 18, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bigtedde', 'type': 'User'}, {'comment_id': 1281511849, 'comment_body': ""Shouldn't we update `snapshot_id` then?\n\nThis might solve the bug, where duration and size is lost when refreshing the archive list."", 'comment_created': datetime.datetime(2023, 8, 2, 7, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1281523631, 'comment_body': 'Yes, this is still an issue.', 'comment_created': datetime.datetime(2023, 8, 2, 7, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}]","[{'commit_sha': '026ced4d7467d47a0e9761479698bf8ec067f822', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eded8be51eb09e282050c0e07f3845dafaa8a2fd', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '970c517d52095cfa3b885f769bdd25b1eac54804', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd51daeca071b59a1b7e4f5b3ea23756e5db5453', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e3efa687f2d36deae21f9ce2fda3325eaeacc9', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05977695228b0a40b335363e1dca894b6d630b0c', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93f3d33e55ca6df976e8fdbf32034e61a712aea6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de4b3f5c972b092b866bff2b444b67deccf0ec9', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31ef41aaad917c43f74fe97a1b1293cb6aafc714', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48204f8bfd087b0206421c515d3f11bdc803ddaa', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52adf31ad2e2628d25bf65bef5d6dd4558cfaafa', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ac424061eef2774754f2e0992c238001677ba85', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b25957ff31a5229eb8b1b32dbceeb67f6066d535', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b53a21bb36beff7775eafecda9e19708f9ed324f', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01a4f62a1ee96aeb8abe30864bd9a1289e149022', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '623010f6990aa2606547157520e4d0438e56c187', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1410606490,feat: exclude gui,"<!--- Provide a general summary of your changes in the Title above -->

### Description
Progress updates for #907 will be added here. This is the base implementation which will allow the user to add exclude rules, select exclude presets to include, and edit/copy/paste the exclusions from a ""Raw"" tab.

TODO:
- [x] Presets Tab and a starting json file for presets.
- [x] Raw tab.
- [x] Actually pass the data to borg.
- [x] Exclude if Present Dialog.

### Related Issue
#907 

### Motivation and Context
Makes it simpler for the user to add excludes with a more intuitive interface.

### How Has This Been Tested?
Testing this manually for all scenarios that I can think of.

[Screencast from 21-08-23 01:12:55 AM IST.webm](https://github.com/borgbase/vorta/assets/41837037/f7bf556a-77a2-4708-a5ba-a5f6bda1f641)

### Screenshots (if appropriate):

### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [ ] I have added tests to cover my changes.
- [ ] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->

***

### Follow ups

- [ ] Preview excludes (dialog)
- [ ] Edit custom patterns inline",False,1742,https://api.github.com/repos/borgbase/vorta/pulls/1742,https://github.com/borgbase/vorta/pull/1742,closed,1136,95,17,40,78,44,0,0,[],2023-06-27 21:08:30+00:00,2023-11-24 21:20:50+00:00,12960740.0,"150 days, 0:12:20","[{'comment_id': 1253966710, 'comment_body': 'this can be removed, I had some other thing in mind earlier (linking the row to a github permalink for the json file).', 'comment_created': datetime.datetime(2023, 7, 6, 5, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1259337338, 'comment_body': 'Is the `author` key needed for anything?', 'comment_created': datetime.datetime(2023, 7, 11, 7, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1259337669, 'comment_body': 'What is the meaning of `fm`?', 'comment_created': datetime.datetime(2023, 7, 11, 7, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1259338216, 'comment_body': '```suggestion\r\n        ""name"": ""Rust artifacts"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 11, 7, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1259431194, 'comment_body': 'Nope, only to attribute the author.', 'comment_created': datetime.datetime(2023, 7, 11, 8, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1259433526, 'comment_body': 'https://borgbackup.readthedocs.io/en/stable/usage/help.html#borg-help-patterns @real-yfprojects asked me to follow this link for patterns and I think fm: is the default one, so I went with that in these patterns. Other pattern types can be added by the community in the future by just changing this text to \r\n\r\n`sh:` etc.', 'comment_created': datetime.datetime(2023, 7, 11, 8, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1259434667, 'comment_body': ""Ah, I follow British English so that's what google recommended."", 'comment_created': datetime.datetime(2023, 7, 11, 8, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1259438503, 'comment_body': ""Wasn't aware that's how it's written in British English. Then let's keep it :)"", 'comment_created': datetime.datetime(2023, 7, 11, 9, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hofer-Julian', 'type': 'User'}, {'comment_id': 1259708673, 'comment_body': ""Does that make sense? Contributors might  modify presets in the future. Furthermore since the author isn't shown in the GUI."", 'comment_created': datetime.datetime(2023, 7, 11, 13, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1259741400, 'comment_body': '@m3nu I had the same thought regarding edits and revisions.', 'comment_created': datetime.datetime(2023, 7, 11, 13, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1262765574, 'comment_body': 'Have you tested these patterns with borg >1.2? AFAIK paths are relative to root and do not contain a leading slash.', 'comment_created': datetime.datetime(2023, 7, 13, 15, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262771450, 'comment_body': ""Why don't you add these fields to `BackupProfileModel`?"", 'comment_created': datetime.datetime(2023, 7, 13, 16, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262772274, 'comment_body': 'What is the date used for?', 'comment_created': datetime.datetime(2023, 7, 13, 16, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262774998, 'comment_body': 'Inconsistent naming.', 'comment_created': datetime.datetime(2023, 7, 13, 16, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262776290, 'comment_body': ""This name isn't descriptive."", 'comment_created': datetime.datetime(2023, 7, 13, 16, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262777612, 'comment_body': 'You can put this into the class docstring or move the comment into `setData` but it seems out of place at the moment.', 'comment_created': datetime.datetime(2023, 7, 13, 16, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262960573, 'comment_body': ""What is the date used for other than sorting? Couldn't we use the id column in the table instead? Or whatabout sorting alphabetically?"", 'comment_created': datetime.datetime(2023, 7, 13, 19, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262962813, 'comment_body': 'Maybe use an Enum, so devs can use autocompletion?', 'comment_created': datetime.datetime(2023, 7, 13, 19, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1262965999, 'comment_body': 'What is the reason for this default?', 'comment_created': datetime.datetime(2023, 7, 13, 19, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1263485593, 'comment_body': ""I haven't tested these paths yet (not started with that phase)."", 'comment_created': datetime.datetime(2023, 7, 14, 8, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1263486186, 'comment_body': 'Yeah, that makes more sense.', 'comment_created': datetime.datetime(2023, 7, 14, 8, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1263486485, 'comment_body': 'Nothing, will be removed when I move this to BackupProfileModel now.', 'comment_created': datetime.datetime(2023, 7, 14, 8, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1263488696, 'comment_body': ""Don't have a preference, but yes I can remove the date. I'll sort by id."", 'comment_created': datetime.datetime(2023, 7, 14, 9, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1263489693, 'comment_body': 'When I added presets, I found it annoying to manually enable them to see them in the preview tab, adding should ideally enable them by default?', 'comment_created': datetime.datetime(2023, 7, 14, 9, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1263527074, 'comment_body': ':+1: one after another', 'comment_created': datetime.datetime(2023, 7, 14, 9, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1263529528, 'comment_body': 'Makes sense.', 'comment_created': datetime.datetime(2023, 7, 14, 9, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1264367936, 'comment_body': 'Something like this  - https://github.com/coleifer/peewee/issues/630#issuecomment-459404401?', 'comment_created': datetime.datetime(2023, 7, 15, 9, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1266890715, 'comment_body': 'My idea was using an Enum with String values that are then passed to peewee but your suggestion is also possible.', 'comment_created': datetime.datetime(2023, 7, 18, 14, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1285065013, 'comment_body': 'Please use the unicode ellipsis here.', 'comment_created': datetime.datetime(2023, 8, 5, 14, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1285066183, 'comment_body': '\n```suggestion\n            ""This is a preview of the patterns that will be passed to borg for excluding files and folders from the backup.""\n```', 'comment_created': datetime.datetime(2023, 8, 5, 14, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1285066202, 'comment_body': '\n```suggestion\n            ""These presets are provided by the community and are a good starting point for excluding certain types of files. You can enable or disable them as you see fit. To see the patterns that comprise a preset, switch to the \\""Preview\\"" tab after enabling it.""  # noqa: E501\n```', 'comment_created': datetime.datetime(2023, 8, 5, 14, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1285066286, 'comment_body': 'Please use `translate` to mark these texts for translation.', 'comment_created': datetime.datetime(2023, 8, 5, 14, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299992348, 'comment_body': 'This can raise `peewee.IntegrityError: UNIQUE constraint failed: exclusionmodel.name`', 'comment_created': datetime.datetime(2023, 8, 21, 11, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1300216265, 'comment_body': 'I should just catch it and skip those cases right?', 'comment_created': datetime.datetime(2023, 8, 21, 14, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1300223461, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 21, 14, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1300268656, 'comment_body': 'I would think this shadows other kinds of integrity errors but the peewee docs do it like that in their examples as well.', 'comment_created': datetime.datetime(2023, 8, 21, 15, 17, 17, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302801480, 'comment_body': 'Why do we even need to customly style the widgets?\nAnd when you use the same style for multiple lists you can store the style sheet in a variable and reuse it.', 'comment_created': datetime.datetime(2023, 8, 23, 10, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302806198, 'comment_body': ""I didn't find a way to style these elements other than this one (border, icon, item).\n\nYes, I can use the same string again, will do."", 'comment_created': datetime.datetime(2023, 8, 23, 10, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1302810198, 'comment_body': ""> I didn't find a way to style these elements other than this one (border, icon, item).\r\n\r\nYeah, but why to you want to style them? You override the Qt style used on the different platforms. On KDE Qt apps will use the Breeze theme which results in very nice looking list items, on Gnome one might use Kvantum."", 'comment_created': datetime.datetime(2023, 8, 23, 10, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302817417, 'comment_body': ""![image](https://github.com/borgbase/vorta/assets/41837037/b7320a3c-c249-4f47-9dbe-3fdef4370693)\r\nIt looked too packed for me, that's why I added the styles. Does it look good for you by default? Maybe then I can remove them."", 'comment_created': datetime.datetime(2023, 8, 23, 10, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'diivi', 'type': 'User'}, {'comment_id': 1302891044, 'comment_body': ""> It looked too packed for me, that's why I added the styles.\r\n\r\nThat's true but that's how the cerators of the oxygen style have chosen to design it. Outside my dev environment Vorta's lists look similar to this:\r\n\r\n![grafik](https://github.com/borgbase/vorta/assets/62463991/9de5ad0f-8ce9-42d1-898f-97e386527b1c)\r\n"", 'comment_created': datetime.datetime(2023, 8, 23, 11, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1313490502, 'comment_body': ""I suppose the example shouldn't be enabled by default."", 'comment_created': datetime.datetime(2023, 9, 1, 20, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1313490773, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2023, 9, 1, 20, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1313491999, 'comment_body': 'Can you add a code comment exlaining what this catch is for?', 'comment_created': datetime.datetime(2023, 9, 1, 20, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}]","[{'commit_sha': '21c86cd84651084b80ba9d7f3043cf54943d1815', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e46e1f181e6ff022448cb7fe5321a56e82aecacf', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2cd061b156a8dd4ce3f860a296363142f8100b6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b2640848601ecc85998bc25b6bc6548f60e588', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28c082d3c065e93259a9bf4a604169b0c611c36e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd2367d9a74d8fd4deff963f6be05782586bf6d6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b4548f6c5eee04b2ba39c517ea5cb9ff8b47c43', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1fc018d752f05ca0e12a34650a70aa95bcf44b2', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62d8e108ce5d64eaef9498f63bf584b3322d5666', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fccea565ba4fac61ef1fe1d7b74c217e4823585c', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8899ab0e4ed97658381b96293def9209e41c7e2', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8f437275bfea0f5767d2d1f2847955b3be13e58', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9c6ede9f6c41fad95bfcaa4a541976be3388ea5', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59551135c86c9f8ba7d1964e78e43852a7dbc953', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e255ddeffe6092fe028a3fcbe73613b6c22b03e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2f8d8baabfe14560334d68f1f0bd1b66593b266', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe6b7ed3c15e8d750360bd7ff560c123a791d87', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae2e948d174a4655d411a49190374b0bbb564179', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6da86d7119921beb170e6e8e0acbc2c489539431', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dbfe1a21e3d8d0184b430088706c69347200893', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96e3fa7c2721afa58df0f09104ad79acd2fbc43c', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f9014a1b8ee3d39b921dfb55f32707c0af54bd9', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bcd08b6ef47a8896a458a3b89f869074fc13512', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '328b46f3fef3336ac0558ec05a5deda463b81fc7', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f27c6536adc49b512725543def4e971e6dabe938', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b00779c9350e439aa638e3f7b533a6be0e6eb950', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d8885d4b5b0e8ea510f0ad59392cc41d0363017', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9188265d6c77dd9c1d836e7407e1066a7677b5f9', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c50f21118a750114a6af911c178c26819b7c78fd', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c2e4c2fef247540b81c9189e640346d6bb8544c', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4522a5b11fdc7c2ec080a77bf0b5a4bef2b9a57b', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '423aa4d9d93077c8854b2a1c6bcb332a3e20766d', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cae7ba4e0f754df3136f74d2eb80f264a33045d6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf22238a9d06c2a1a020e3dfc415940474514c8', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d71208ec64327296ac6e3e8e241b91cbb8f0b8e', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15c87e68bc11750a973a2c862e649038dd07a666', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25a44d6009d4b369717d47d29c000dfb532b87c9', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c74853d84c9677b58a8b549a15f34f0b9e2ca258', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85cff5882e82e13a9c9cafcba2a843f424556e82', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3566e0d6d918793465554702ae5110a4cc802895', 'committer_username': 'm3nu', 'committer_name': 'Manu', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 20, 3, 5, 55, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109
1254564477,feat: add cache dir to --debug,"fixes #5963 
--debug output now:
```bash
➜  borg git:(master) ✗ ./borg-env/bin/borg -r /home/divyansh/Desktop/borg2 rlist --debug 
using builtin fallback logging configuration
38 self tests completed in 0.06 seconds
Verified integrity of /home/divyansh/Desktop/borg2/index.9
Enter passphrase for key /home/divyansh/Desktop/borg2: 
TAM-verified manifest
Using /home/divyansh/.cache/borg/496f0ecf408beb37acb21eac471aecaeae36e549fc70d1a49778e64413242cb9 as cache
security: read previous location '/home/divyansh/Desktop/borg2'
security: read manifest timestamp '2023-02-25T21:03:06.588359+00:00'
security: determined newest manifest timestamp as 2023-02-25T21:03:06.588359+00:00
security: repository checks ok, allowing access
Monday                               Sun, 2023-02-26 02:31:47 +0530 [0aec6822f0dc8c7e76ab2f26277beba306a54884764db4cd505931442da01045]
Tuesday                              Sun, 2023-02-26 02:33:06 +0530 [c9848cadcdecd1961d976d8474199e18d6296224e988f894245b9c5de2fba33e]
```",True,7388,https://api.github.com/repos/borgbackup/borg/pulls/7388,https://github.com/borgbackup/borg/pull/7388,closed,1,0,1,1,2,0,0,0,[],2023-02-26 18:20:08+00:00,2023-02-26 20:02:13+00:00,6125.0,1:42:05,[],"[{'commit_sha': '7dd186ccf35a73692afcee6e6846bd2f6cca88c6', 'committer_username': 'diivi', 'committer_name': 'Divyansh Singh', 'committer_email': 'divyanshanandsingh@gmail.com', 'commit_date': datetime.datetime(2018, 7, 28, 16, 26, 56, tzinfo=datetime.timezone.utc)}]",Divyansh Singh,41837037,divyanshanandsingh@gmail.com,User,,61,,64,109

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
26840434,borgmatic,borgmatic-collective/borgmatic,Python,94,1711,29,99,2322,1,1,1,"[{'id': 1456923386, 'number': 75, 'closed': datetime.datetime(2023, 7, 31, 21, 0, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 31, 20, 2, 44, tzinfo=datetime.timezone.utc), 'time_taken': 3437.0, 'time_delta': '0:57:17', 'additions': 98, 'deletions': 2, 'state': 'closed'}, {'id': 1435741858, 'number': 74, 'closed': datetime.datetime(2023, 7, 31, 18, 56, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 15, 6, 58, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1425471.0, 'time_delta': '16 days, 11:57:51', 'additions': 48, 'deletions': 1, 'state': 'closed'}, {'id': 1389026111, 'number': 73, 'closed': datetime.datetime(2023, 6, 22, 19, 28, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 12, 16, 28, 17, tzinfo=datetime.timezone.utc), 'time_taken': 874817.0, 'time_delta': '10 days, 3:00:17', 'additions': 1222, 'deletions': 65, 'state': 'closed'}, {'id': 1351187076, 'number': 71, 'closed': datetime.datetime(2023, 6, 10, 21, 39, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 15, 17, 39, 50, tzinfo=datetime.timezone.utc), 'time_taken': 2260803.0, 'time_delta': '26 days, 4:00:03', 'additions': 615, 'deletions': 59, 'state': 'closed'}, {'id': 1304077997, 'number': 68, 'closed': datetime.datetime(2023, 4, 6, 20, 46, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 6, 4, 2, 42, tzinfo=datetime.timezone.utc), 'time_taken': 60243.0, 'time_delta': '16:44:03', 'additions': 56, 'deletions': 18, 'state': 'closed'}, {'id': 1303766179, 'number': 67, 'closed': datetime.datetime(2023, 4, 14, 23, 26, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 5, 20, 46, 25, tzinfo=datetime.timezone.utc), 'time_taken': 787201.0, 'time_delta': '9 days, 2:40:01', 'additions': 134, 'deletions': 28, 'state': 'closed'}, {'id': 1299958525, 'number': 66, 'closed': datetime.datetime(2023, 4, 3, 17, 22, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 3, 12, 9, 48, tzinfo=datetime.timezone.utc), 'time_taken': 18744.0, 'time_delta': '5:12:24', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1298775107, 'number': 65, 'closed': datetime.datetime(2023, 4, 1, 17, 44, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 1, 16, 44, 52, tzinfo=datetime.timezone.utc), 'time_taken': 3559.0, 'time_delta': '0:59:19', 'additions': 17, 'deletions': 17, 'state': 'closed'}, {'id': 1293334812, 'number': 63, 'closed': datetime.datetime(2023, 3, 28, 18, 15, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 28, 16, 45, 32, tzinfo=datetime.timezone.utc), 'time_taken': 5369.0, 'time_delta': '1:29:29', 'additions': 22, 'deletions': 3, 'state': 'closed'}, {'id': 1289944301, 'number': 62, 'closed': datetime.datetime(2023, 3, 25, 6, 45, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 25, 6, 43, 32, tzinfo=datetime.timezone.utc), 'time_taken': 124.0, 'time_delta': '0:02:04', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1289634180, 'number': 61, 'closed': datetime.datetime(2023, 3, 24, 23, 9, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 24, 21, 17, 8, tzinfo=datetime.timezone.utc), 'time_taken': 6763.0, 'time_delta': '1:52:43', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1288123133, 'number': 60, 'closed': datetime.datetime(2023, 3, 25, 5, 50, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 23, 21, 14, 54, tzinfo=datetime.timezone.utc), 'time_taken': 117363.0, 'time_delta': '1 day, 8:36:03', 'additions': 55, 'deletions': 3, 'state': 'closed'}, {'id': 1288007648, 'number': 59, 'closed': datetime.datetime(2023, 3, 23, 19, 57, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 23, 19, 56, 1, tzinfo=datetime.timezone.utc), 'time_taken': 115.0, 'time_delta': '0:01:55', 'additions': 15, 'deletions': 2, 'state': 'closed'}, {'id': 1287978250, 'number': 58, 'closed': datetime.datetime(2023, 3, 23, 19, 39, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 23, 19, 32, 42, tzinfo=datetime.timezone.utc), 'time_taken': 419.0, 'time_delta': '0:06:59', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 1286399684, 'number': 57, 'closed': datetime.datetime(2023, 3, 27, 22, 46, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 22, 19, 33, 17, tzinfo=datetime.timezone.utc), 'time_taken': 443585.0, 'time_delta': '5 days, 3:13:05', 'additions': 614, 'deletions': 461, 'state': 'closed'}, {'id': 1285205101, 'number': 56, 'closed': datetime.datetime(2023, 3, 22, 19, 59, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 22, 4, 14, 16, tzinfo=datetime.timezone.utc), 'time_taken': 56685.0, 'time_delta': '15:44:45', 'additions': 69, 'deletions': 35, 'state': 'closed'}, {'id': 1284900322, 'number': 55, 'closed': datetime.datetime(2023, 3, 21, 21, 23, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 21, 20, 53, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1775.0, 'time_delta': '0:29:35', 'additions': 1, 'deletions': 3, 'state': 'closed'}, {'id': 1281763487, 'number': 54, 'closed': datetime.datetime(2023, 3, 21, 17, 22, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 19, 21, 13, 59, tzinfo=datetime.timezone.utc), 'time_taken': 158921.0, 'time_delta': '1 day, 20:08:41', 'additions': 39, 'deletions': 26, 'state': 'closed'}, {'id': 1280828731, 'number': 53, 'closed': datetime.datetime(2023, 3, 18, 20, 59, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 17, 23, 7, 17, tzinfo=datetime.timezone.utc), 'time_taken': 78723.0, 'time_delta': '21:52:03', 'additions': 46, 'deletions': 1, 'state': 'closed'}, {'id': 1263222088, 'number': 52, 'closed': datetime.datetime(2023, 3, 5, 0, 18, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 4, 21, 47, 40, tzinfo=datetime.timezone.utc), 'time_taken': 9024.0, 'time_delta': '2:30:24', 'additions': 0, 'deletions': 70, 'state': 'closed'}, {'id': 1260887535, 'number': 50, 'closed': datetime.datetime(2023, 3, 4, 17, 47, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 2, 18, 28, 35, tzinfo=datetime.timezone.utc), 'time_taken': 170326.0, 'time_delta': '1 day, 23:18:46', 'additions': 296, 'deletions': 5, 'state': 'closed'}]"
154956532,vorta,borgbase/vorta,Python,130,1966,18,75,835,183,5,29,"[{'id': 1410606490, 'number': 1742, 'closed': datetime.datetime(2023, 11, 24, 21, 20, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 27, 21, 8, 30, tzinfo=datetime.timezone.utc), 'time_taken': 12960740.0, 'time_delta': '150 days, 0:12:20', 'additions': 1136, 'deletions': 95, 'state': 'closed'}, {'id': 1398857523, 'number': 1734, 'closed': datetime.datetime(2023, 8, 15, 11, 38, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 19, 21, 19, 5, tzinfo=datetime.timezone.utc), 'time_taken': 4889987.0, 'time_delta': '56 days, 14:19:47', 'additions': 70, 'deletions': 62, 'state': 'closed'}, {'id': 1397279685, 'number': 1732, 'closed': datetime.datetime(2023, 6, 23, 13, 21, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 18, 21, 7, 18, tzinfo=datetime.timezone.utc), 'time_taken': 404077.0, 'time_delta': '4 days, 16:14:37', 'additions': 48, 'deletions': 5, 'state': 'closed'}, {'id': 1379593972, 'number': 1727, 'closed': datetime.datetime(2023, 6, 23, 19, 20, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 5, 19, 16, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1555421.0, 'time_delta': '18 days, 0:03:41', 'additions': 19, 'deletions': 4, 'state': 'closed'}, {'id': 1374781264, 'number': 1723, 'closed': datetime.datetime(2023, 7, 5, 10, 28, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 1, 21, 0, 40, tzinfo=datetime.timezone.utc), 'time_taken': 2899650.0, 'time_delta': '33 days, 13:27:30', 'additions': 49, 'deletions': 28, 'state': 'closed'}, {'id': 1283847033, 'number': 1666, 'closed': datetime.datetime(2023, 5, 9, 19, 3, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 21, 9, 8, 1, tzinfo=datetime.timezone.utc), 'time_taken': 4269306.0, 'time_delta': '49 days, 9:55:06', 'additions': 277, 'deletions': 71, 'state': 'closed'}, {'id': 1283445399, 'number': 1665, 'closed': datetime.datetime(2023, 6, 24, 19, 57, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 20, 23, 54, 30, tzinfo=datetime.timezone.utc), 'time_taken': 8280197.0, 'time_delta': '95 days, 20:03:17', 'additions': 332, 'deletions': 278, 'state': 'closed'}, {'id': 1281741495, 'number': 1664, 'closed': None, 'created': datetime.datetime(2023, 3, 19, 19, 45, 40, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 88, 'deletions': 7, 'state': 'open'}, {'id': 1280044100, 'number': 1658, 'closed': None, 'created': datetime.datetime(2023, 3, 17, 11, 6, 57, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 126, 'deletions': 2, 'state': 'open'}, {'id': 1279120903, 'number': 1656, 'closed': None, 'created': datetime.datetime(2023, 3, 16, 18, 40, 32, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 55, 'deletions': 27, 'state': 'open'}, {'id': 1268443524, 'number': 1637, 'closed': datetime.datetime(2023, 3, 22, 11, 16, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 8, 20, 55, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1174871.0, 'time_delta': '13 days, 14:21:11', 'additions': 64, 'deletions': 46, 'state': 'closed'}, {'id': 1260356306, 'number': 1621, 'closed': datetime.datetime(2023, 4, 5, 11, 20, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 2, 12, 11, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2934570.0, 'time_delta': '33 days, 23:09:30', 'additions': 28, 'deletions': 4, 'state': 'closed'}, {'id': 1254529859, 'number': 1613, 'closed': datetime.datetime(2023, 3, 2, 16, 55, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 26, 16, 1, 11, tzinfo=datetime.timezone.utc), 'time_taken': 348861.0, 'time_delta': '4 days, 0:54:21', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1254482038, 'number': 1612, 'closed': datetime.datetime(2023, 3, 8, 16, 47, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 26, 12, 54, 55, tzinfo=datetime.timezone.utc), 'time_taken': 877976.0, 'time_delta': '10 days, 3:52:56', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1253617145, 'number': 1609, 'closed': datetime.datetime(2023, 3, 12, 7, 5, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 24, 17, 20, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1345530.0, 'time_delta': '15 days, 13:45:30', 'additions': 29, 'deletions': 7, 'state': 'closed'}, {'id': 1250261259, 'number': 1606, 'closed': datetime.datetime(2023, 3, 17, 15, 3, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 22, 14, 52, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1987871.0, 'time_delta': '23 days, 0:11:11', 'additions': 33, 'deletions': 45, 'state': 'closed'}]"
35517126,borg,borgbackup/borg,Python,738,10899,151,325,8516,467,9,17,"[{'id': 1254564477, 'number': 7388, 'closed': datetime.datetime(2023, 2, 26, 20, 2, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 26, 18, 20, 8, tzinfo=datetime.timezone.utc), 'time_taken': 6125.0, 'time_delta': '1:42:05', 'additions': 1, 'deletions': 0, 'state': 'closed'}]"
