pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
648571037,Async Support for TensorFlow Backend,"### Patch Set Description

This patchset is a part of necessary deliverables in the GSoC project [Async Support for TensorFlow Backend in FFmpeg](https://summerofcode.withgoogle.com/projects/#5224576843251712).

**Objective**: Asynchronous Support for TensorFlow backend
**Parts under this deliverable**:
    - Switch the execution mode to `TFRequestItem` based inference.
    - Implementing a standard asynchronous inference module `DNNAsyncExecModule` for use across the TF and Native backends.
    - Implement async mode in the TensorFlow backend.

### Earlier Merged Patches in this patchset

The below patches move the `TaskItem` and `InferenceItem` from the OpenVINO backend to the `dnn_backend_common` and adjust them for shared use across the three backends. Then we define the `TFRequestItem` with execution parameters and switch the execution mechanism in the TensorFlow backend to `TFRequestItem` based inference.

f5ab890 lavfi/dnn: Extract TaskItem and InferenceItem from OpenVino Backend
446b4f7 lavfi/dnn: Convert output_name to char** in TaskItem
9675ebb lavfi/dnn: Add nb_output to TaskItem
6b961f7 lavfi/dnn: Use uint8_t for async and do_ioproc in TaskItems
5509235 lavfi/dnn: Fill Task using Common Function
68cf14d lavfi/dnn_backend_tf: TaskItem Based Inference
a4de605 lavfi/dnn_backend_tf: Add TFInferRequest and TFRequestItem
08d8b3b lavfi/dnn_backend_tf: Request-based Execution
b849228 lavfi/dnn_backend_tf: Separate function for filling RequestItem
84e4e60 lavfi/dnn_backend_tf: Separate function for Completion Callback
6f9570a lavfi/dnn_backend_tf: Error Handling

### Final Patches

The below-mentioned patches implement the `DNNAsyncExecModule` and use them in the TensorFlow backend for adding the async mode. The methodology behind the `DNNAsyncExecModule` being to execute a number of `TFRequestItem`'s (which can also be set using the backend configuration parameter `nireq`) concurrently along the main FFmpeg execution thread so that the inference requests can be executed in an asynchronous fashion.

Each `TFRequestItem` has its instance of `DNNAsyncExecModule`, which corresponds to a single thread. When `TF_SessionRun` returns, the thread routine also returns with relevant exit code, and the `TFRequestItem` is pushed back to the `request_queue`. This return status is caught when next time the same `TFRequestItem` is used for the execution. In case the previous execution failed, the error message is already printed, and we cancel all further executions by returning `DNN_ERROR`.

86f0a4f9 lavfi/dnn: Add Async Execution Mechanism and Documentation
c7165785 lavfi/dnn: Common Function to Get Async Result in DNN Backends
e6ae8fc1 lavfi/dnn_backend_tf: TFInferRequest Execution and Documentation
0985e928 lavfi/dnn: Async Support for TensorFlow Backend
a3db9b54 lavfi/dnn_backend_tf: Error Handling for execute_model_tf
4d627ace lavfi/dnn_backend_tf: Add TF_Status to TFRequestItem
009b2e5b lavfi/dnn: Extract Common Parts from get_output functions
371e5672 lavfi/dnn_backend_tf: Error Handling for tf_create_inference_request
2063745a lavfi/dnn: DNNAsyncExecModule Execution Failure Handling",False,407,https://api.github.com/repos/intel-media-ci/ffmpeg/pulls/407,https://github.com/intel-media-ci/ffmpeg/pull/407,closed,433,110,7,9,15,92,0,0,[],2021-05-20 08:18:50+00:00,2021-08-11 11:11:44+00:00,7181574.0,"83 days, 2:52:54","[{'comment_id': 637370092, 'comment_body': 'Since these have value 0 or 1, will `uint8_t` be better?', 'comment_created': datetime.datetime(2021, 5, 22, 7, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 637370989, 'comment_body': 'This part and the below part will remain common in all three backends. Shall we use a common function for this?\r\n```C\r\n    if (!in_frame) {\r\n        av_log(ctx, AV_LOG_ERROR, ""Failed to allocate memory for input frame\\n"");\r\n        return DNN_ERROR;\r\n    }\r\n    out_frame = av_frame_alloc();\r\n    if (!out_frame) {\r\n        av_log(ctx, AV_LOG_ERROR, ""Failed to allocate memory for output frame\\n"");\r\n        av_frame_free(&amp;in_frame);\r\n        return DNN_ERROR;\r\n    }\r\n    in_frame->width = input_width;\r\n    in_frame->height = input_height;\r\n```', 'comment_created': datetime.datetime(2021, 5, 22, 7, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 637525630, 'comment_body': 'yes', 'comment_created': datetime.datetime(2021, 5, 23, 10, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 637525713, 'comment_body': 'you can try it with a small separate patch', 'comment_created': datetime.datetime(2021, 5, 23, 10, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 637526275, 'comment_body': 'add a simple comment to explain what model is', 'comment_created': datetime.datetime(2021, 5, 23, 10, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 637526790, 'comment_body': 'you may extract it into a new separate small patch, so I can have an easy life for review.  I mean all the changes \r\nfrom task->ov_model to ov_model.', 'comment_created': datetime.datetime(2021, 5, 23, 10, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 637543348, 'comment_body': 'Okay', 'comment_created': datetime.datetime(2021, 5, 23, 13, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 637543416, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 5, 23, 13, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 637544897, 'comment_body': 'Sure. I divide the changes in the OpenVino backend into separate smaller patches.\r\n\r\nCurrently this patch had the following changes:\r\n1. Extract TaskItems and InferenceItems to `dnn_backend_common.h`\r\n2. Change model in TaskItem to `void *model` and the task->ov_model to ov_model part. (since `task->ov_model` will be a void pointer, so its properties like `task->ov_model->model` cannot be accessed directly without casting it to `((OVModel *) task->ov_model)->model`.\r\n3. Change `char *output_name` to `char **output_names` and corresponding changes in `dnn_backend_openvino.c`', 'comment_created': datetime.datetime(2021, 5, 23, 13, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 637549205, 'comment_body': ""But I'm wondering each OVModel in a task points to the same DNNModel instance. So why use `task->ov_model->model` instead of `ov_model` (like ov_model parameter in `fill_model_input_ov`)?"", 'comment_created': datetime.datetime(2021, 5, 23, 13, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 637553194, 'comment_body': 'I might forget ov_model when I wrote the code.', 'comment_created': datetime.datetime(2021, 5, 23, 14, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 637555262, 'comment_body': ""No problem. I'll add those changes as well."", 'comment_created': datetime.datetime(2021, 5, 23, 14, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 640705498, 'comment_body': 'need a new line at the end of the file', 'comment_created': datetime.datetime(2021, 5, 27, 14, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 640706165, 'comment_body': 'it is the same as:\r\ntask->output_names = exec_params->output_names\r\n\r\nso backend is not needed', 'comment_created': datetime.datetime(2021, 5, 27, 14, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 640709850, 'comment_body': 'can you first send out this patch to community?\r\n', 'comment_created': datetime.datetime(2021, 5, 27, 15, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 640716784, 'comment_body': '#include ""libavutil/thread.h""\r\n\r\nbtw, i today do not have more time to review starting from the tf backend, ', 'comment_created': datetime.datetime(2021, 5, 27, 15, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 640719374, 'comment_body': 'extra empty line', 'comment_created': datetime.datetime(2021, 5, 27, 15, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 640851397, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 5, 27, 18, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 640882925, 'comment_body': 'Oh, okay. Corrected', 'comment_created': datetime.datetime(2021, 5, 27, 18, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 640958797, 'comment_body': ""I have corrected this and handled the case where pthreads aren't supported. \r\nNo problem, you may review whenever you find the time. I'll continue further."", 'comment_created': datetime.datetime(2021, 5, 27, 20, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 641085678, 'comment_body': ""is it possible to separate the error handle into a new small patch?\r\n\r\nas a reviewer, hope to see small but function complete patch one by one.\r\n\r\nbtw, you may send these patches into the community just to let others know what you are doing.  I'll not review those patches, I'll continue to do the first round review here, and you can send v2 patches when we finish here."", 'comment_created': datetime.datetime(2021, 5, 28, 1, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 641277127, 'comment_body': ""I understand these changes in a single patch roughly amount to 600 lines, making it harder to read. I'll convert these to smaller patches.\r\n\r\nSure, I'll send these today."", 'comment_created': datetime.datetime(2021, 5, 28, 5, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 646000035, 'comment_body': ""it is still a big patch, possible to separate it more?  It's fine to say 'no' if there's really no reasonable method."", 'comment_created': datetime.datetime(2021, 6, 5, 14, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 646015224, 'comment_body': 'One way I could think of is to convert the patch (""lavfi/dnn_backend_tf: Request-based Execution"") to two smaller patches -\r\n\r\n1. One where execution is changed to only TaskItem based execution (this will account for all the changes like `output_names` to `task->output_names`) - Bigger Patch as compared to below one\r\n2. Add RequestItem related changes to the above \r\n\r\nI\'ll try these changes and update them.', 'comment_created': datetime.datetime(2021, 6, 5, 17, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 646122091, 'comment_body': 'Sir, I tried partitioning the changes further down to smaller patches. The async execution functions for `tf_infer_request` are also now in separate patches.', 'comment_created': datetime.datetime(2021, 6, 6, 11, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 654931405, 'comment_body': ""use goto err or something like, I do not see ffmpeg use 'final' for the label."", 'comment_created': datetime.datetime(2021, 6, 20, 12, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 654931661, 'comment_body': 'to make it clear, change to TFRequestItem, (and so OVRquestItem for openvino backend), ', 'comment_created': datetime.datetime(2021, 6, 20, 12, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 654931787, 'comment_body': ""ffmpeg's typedef name style:  TFInferRequest"", 'comment_created': datetime.datetime(2021, 6, 20, 12, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 654988427, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 6, 20, 21, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 654988836, 'comment_body': 'Okay, thanks. Corrected.', 'comment_created': datetime.datetime(2021, 6, 20, 21, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 654988864, 'comment_body': 'Yes, actually, I was a bit confused about what to use for its name. Thanks.', 'comment_created': datetime.datetime(2021, 6, 20, 21, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 663494328, 'comment_body': 'if (!tf_model->inference_queue) {\r\nfree...\r\nreturn NULL;\r\n}\r\n\r\non other comment for the first patch.', 'comment_created': datetime.datetime(2021, 7, 4, 12, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 663495268, 'comment_body': 'Yes, the error handling of this part is in the commit ""lavfi/dnn_backend_tf: Error Handling"".\r\n', 'comment_created': datetime.datetime(2021, 7, 4, 12, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 663496160, 'comment_body': 'ok, so no problem of the first patch.', 'comment_created': datetime.datetime(2021, 7, 4, 12, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 663497025, 'comment_body': 'the below are missed?\r\n\r\nTF_DeleteTensor(request->output_tensors[i]);\r\nav_freep(&request);', 'comment_created': datetime.datetime(2021, 7, 4, 12, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 663499036, 'comment_body': ""Oh, yes! TF_DeleteTensor for output tensors is missed. I'll add it.\r\n\r\nActually, this function frees only the contents of the request (used in the completion callback). So the same request item can be used again after inference. That's why the request pointer is not freed."", 'comment_created': datetime.datetime(2021, 7, 4, 12, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 663499090, 'comment_body': 'I did a quick review of patch: lavfi/dnn_backend_tf: Request-based Execution. I did not find obvious issues, the basic code logic is right. So now no comment for this patch.\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 4, 12, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 663500333, 'comment_body': 'Okay, thanks.', 'comment_created': datetime.datetime(2021, 7, 4, 12, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 663500449, 'comment_body': ""btw, I'm thinking the name of inference queue / InferenceItem.  Looks that they are not the best because of the existing of batch mode.  One inference item is not for one inference API call to the framework (TF/OpenVINO/Native), that is what requestItem/infer_request/request_queue does.  How about to change InferenceItem to SubtaskItem?  Do you have a better naming?  @Semmer2  @shubhanshu02  \r\n\r\nThe rename can be done after all of these patches in this patch set are accepted in upstream.\r\n"", 'comment_created': datetime.datetime(2021, 7, 4, 12, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 663501539, 'comment_body': 'basically ok for patch: lavfi/dnn_backend_tf: Separate function for filling RequestItem.', 'comment_created': datetime.datetime(2021, 7, 4, 13, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 663502481, 'comment_body': 'basically ok for patch: lavfi/dnn_backend_tf: Separate function for Completion Callback', 'comment_created': datetime.datetime(2021, 7, 4, 13, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 663503764, 'comment_body': 'Yes, the name `InferenceItem` is a bit misleading. The name `SubTaskItem`, as you suggested, seems good for naming since each `InferenceItem` is a part of a `TaskItem`.', 'comment_created': datetime.datetime(2021, 7, 4, 13, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 663504200, 'comment_body': ""basically ok for patch: lavfi/dnn_backend_tf: Error Handling.\r\n\r\nYou may send the first 6 patches to mail list. \r\n\r\nIt is async functions starting from the next patch, and I'll find other time for the review."", 'comment_created': datetime.datetime(2021, 7, 4, 13, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 663505091, 'comment_body': ""Okay. I'll send them once I add the deletion of output_tensors in `tf_free_request`.\r\n\r\nThank you for reviewing."", 'comment_created': datetime.datetime(2021, 7, 4, 13, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 663505358, 'comment_body': 'well done, thanks.', 'comment_created': datetime.datetime(2021, 7, 4, 13, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 676011092, 'comment_body': 'why we need this line?', 'comment_created': datetime.datetime(2021, 7, 24, 15, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 676011381, 'comment_body': 'function name ff_*,\r\n\r\nff_ is needed to avoid conflict with other libraries when libavfilter.a is used.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 676011615, 'comment_body': ""i'm not sure if pthread_exit is needed here for detached thread, just google it and do not find the result."", 'comment_created': datetime.datetime(2021, 7, 24, 15, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 676012474, 'comment_body': ""> Yes, the name `InferenceItem` is a bit misleading. The name `SubTaskItem`, as you suggested, seems good for naming since each `InferenceItem` is a part of a `TaskItem`.\r\n\r\n@Semmer2 any comment? if no, we can change to SubtaskItem, after shubhanshu02's patches, which reply on InferenceItem, are merged."", 'comment_created': datetime.datetime(2021, 7, 24, 15, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 676013155, 'comment_body': 'the error message can queried with function TF_Message.\r\n\r\nyou may add the change here in this commit, or add a new commit for all the cases.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 676014415, 'comment_body': 'or LastLevelTaskItem?', 'comment_created': datetime.datetime(2021, 7, 24, 15, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 676016124, 'comment_body': ""for the function name, i don't see delete in ffmpeg, we may use free/destory"", 'comment_created': datetime.datetime(2021, 7, 24, 16, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 676017459, 'comment_body': 'function name: ff_*\r\n\r\nand, dnn_get_output is not correct, since we just fill the task here and we do not get output yet, need a new function name.', 'comment_created': datetime.datetime(2021, 7, 24, 16, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 676064779, 'comment_body': 'not sure if the two functions are supported on Windows.', 'comment_created': datetime.datetime(2021, 7, 25, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 676065391, 'comment_body': 'I think no, see https://github.com/FFmpeg/FFmpeg/blob/master/compat/w32pthreads.h for the supported functions for windows.\r\n\r\nif no, we might consider the default thread.', 'comment_created': datetime.datetime(2021, 7, 25, 1, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 676066391, 'comment_body': '@xuguangxin do we now have windows build in CI?  I heard that we have enabled the windows build, if so, could you please have someone to try https://github.com/intel-media-ci/ffmpeg/pull/430, thanks.', 'comment_created': datetime.datetime(2021, 7, 25, 1, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 676133985, 'comment_body': 'Actually on adding `queue.h` in `dnn_backend_common.h`, the `make` command gave error as follows:\r\n```\r\nIn file included from libavfilter/dnn/dnn_backend_common.h:27,\r\n                 from libavfilter/dnn/dnn_backend_common.c:24:\r\nlibavfilter/dnn/queue.h:47:1: error: unknown type name ‘size_t’\r\n   47 | size_t ff_queue_size(Queue *q);\r\n      | ^~~~~~\r\nlibavfilter/dnn/queue.h:1:1: note: ‘size_t’ is defined in header ‘<stddef.h>’; did you forget to ‘#include <stddef.h>’?\r\n  +++ |+#include <stddef.h>\r\n    1 | /*\r\n```', 'comment_created': datetime.datetime(2021, 7, 25, 11, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 676134196, 'comment_body': 'Oh, that\'s the reason why all functions have ""ff"" in the beginning :open_mouth:. Sure, I\'ll correct it.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 676134794, 'comment_body': ""Okay, I'll correct this."", 'comment_created': datetime.datetime(2021, 7, 25, 12, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 676137619, 'comment_body': ""Sure, I'll add the change here. Should I query the message using TF_Message for other lines as well where status != OK?"", 'comment_created': datetime.datetime(2021, 7, 25, 12, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 676148829, 'comment_body': 'Yes, it allocates memory for the frames and fills the task. How about `ff_dnn_allocate_frame_and_fill_tasks`?', 'comment_created': datetime.datetime(2021, 7, 25, 13, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 676247033, 'comment_body': ""No, not yet. Windows CI is harder than we expected. If you just want check it's break windows or not. you can ask fan1x.li@intel.com for help."", 'comment_created': datetime.datetime(2021, 7, 26, 2, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'xuguangxin', 'type': 'User'}, {'comment_id': 676254654, 'comment_body': ""let's make it more straightforward, how about ff_dnn_file_gettingoutput_task"", 'comment_created': datetime.datetime(2021, 7, 26, 2, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 676255053, 'comment_body': ""yes, just pending these changes for other cases, let's focus this patch set first"", 'comment_created': datetime.datetime(2021, 7, 26, 2, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 676255431, 'comment_body': 'ok', 'comment_created': datetime.datetime(2021, 7, 26, 2, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 676272581, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 7, 26, 3, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 676274052, 'comment_body': 'Yes, looks good. Thanks', 'comment_created': datetime.datetime(2021, 7, 26, 3, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 676279432, 'comment_body': ""Not necessary. According to [this](https://man7.org/linux/man-pages/man3/pthread_create.3.html), this is equivalent to `return 0`.\r\n\r\n\r\n> The new thread terminates in one of the following ways:\r\n> \r\n> 1. It calls pthread_exit(3), specifying an exit status value that is > available to another thread in the same process that calls > pthread_join(3).\r\n> 2. It returns from start_routine().  This is equivalent to calling pthread_exit(3) with the value supplied in the return statement.\r\n\r\nI didn't know FFmpeg works on windows as well, so I included it. I'll remove it. Thanks"", 'comment_created': datetime.datetime(2021, 7, 26, 4, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 678196076, 'comment_body': ""checked with Fan, HAVE_PTHREAD_CANCEL is not enabled in Windows, what enabled is PTHREAD_CANCEL_ENABLE.\r\n\r\n@shubhanshu02  to make the async support available for future extending in Windows (we can define HAVE_PTHREAD_CANCEL for windows whenever we want to support async), we'd better do not use the functionalities not defined in https://github.com/FFmpeg/FFmpeg/blob/master/compat/w32pthreads.h \r\n\r\nin other words, we could not use PTHREAD_CREATE_DETACHED, we may do phtread_join at the beginning of ff_dnn_execute_model_async_tf or get_async functions (actually, you may find a better place in your code) ."", 'comment_created': datetime.datetime(2021, 7, 28, 10, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 678233650, 'comment_body': ""Sure, I'll correct this part.\r\n\r\nI think joining the thread in the function `ff_dnn_start_inference_async` so as to keep the threading logic separate in the `dnn_backend_common`. \r\n\r\nOne question, do we have to check PTHREAD_CANCEL_ENABLE in addition to HAVE_PTHREAD_CANCEL in the code where we use pthread functions?"", 'comment_created': datetime.datetime(2021, 7, 28, 12, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 678240437, 'comment_body': 'sure, it is a better place, just to make sure the last thread is joined.\r\n\r\nwe now just check HAVE_PTHREAD_CANCEL , to make the thing simple.', 'comment_created': datetime.datetime(2021, 7, 28, 12, 10, 28, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 678249217, 'comment_body': ""Okay, thanks. I'll update the patches and let you know."", 'comment_created': datetime.datetime(2021, 7, 28, 12, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 679173852, 'comment_body': 'Corrected.', 'comment_created': datetime.datetime(2021, 7, 29, 13, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 679195408, 'comment_body': 'for the firs time that async_module->thread_id has not been created via pthread_create, will this function cause error?', 'comment_created': datetime.datetime(2021, 7, 29, 14, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 679197356, 'comment_body': ""we will see this log tons of times in this path, we'd output this message once (or just several times)  in the whole process. We may output this warning message at another place."", 'comment_created': datetime.datetime(2021, 7, 29, 14, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 679299542, 'comment_body': ""No, this won't be a problem. pthread_join returns 3 (no such process) in case no thread with this id is running. I also tried running inference with this patchset and found to be working fine"", 'comment_created': datetime.datetime(2021, 7, 29, 16, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 679301657, 'comment_body': 'Sure. How about showing this warning in the ff_dnn_load_model_tf function? ', 'comment_created': datetime.datetime(2021, 7, 29, 16, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 679565408, 'comment_body': 'looks good', 'comment_created': datetime.datetime(2021, 7, 30, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 680034468, 'comment_body': 'we forget to check the result, just fix it in another patch.', 'comment_created': datetime.datetime(2021, 7, 30, 15, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 680037936, 'comment_body': '#if !HAVE_PTHREAD_CANCEL\r\nif (ctx->options.async)\r\n   av_log(...)\r\n#endif', 'comment_created': datetime.datetime(2021, 7, 30, 16, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 680184707, 'comment_body': 'The async is in the DnnContext which isn\'t being passed to the load_model function. I also found this line in `dnn_filter_common.c`:\r\n```c\r\nint ff_dnn_init(DnnContext *ctx, DNNFunctionType func_type, AVFilterContext *filter_ctx)\r\n{\r\n...\r\n#if !HAVE_PTHREAD_CANCEL\r\n    if (ctx->async) {\r\n        ctx->async = 0;\r\n        av_log(filter_ctx, AV_LOG_WARNING, ""pthread is not supported, roll back to sync.\\n"");\r\n    }\r\n#endif\r\n...\r\n}\r\n```\r\nSo there is no need for checking this for now :thinking:, but I think we\'ll need this line in the unification patches. Shall I remove this line for now?', 'comment_created': datetime.datetime(2021, 7, 30, 19, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 680185642, 'comment_body': 'Sure, thanks.', 'comment_created': datetime.datetime(2021, 7, 30, 19, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 680289346, 'comment_body': 'yes, as for now, we may remove it, thanks.', 'comment_created': datetime.datetime(2021, 7, 31, 1, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 680312113, 'comment_body': 'Thanks, sent.', 'comment_created': datetime.datetime(2021, 7, 31, 5, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 683387049, 'comment_body': 'man pthread_join:\r\nOn success, pthread_join() returns 0; on error, it returns an error number.\r\n\r\ncan we just compare it with -1? ', 'comment_created': datetime.datetime(2021, 8, 5, 12, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 683389459, 'comment_body': 'the return type is ""void *"", and where do we check the return value of this function?', 'comment_created': datetime.datetime(2021, 8, 5, 12, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 683468195, 'comment_body': 'The error number is when it cannot join the thread. In our case, the thread will join successfully and we are catching the status of `async_thread_routine()`. If we change the value of `DNN_ASYNC_SUCCESS` to something like `(void *)40`, then on the success the status will be 40 but the return value of `pthread_join()` will be 0. \r\n\r\nFor example, the output of the below code is `0 -1`.\r\n\r\n```C\r\nvoid *runner(void *arg)\r\n{\r\n    sleep(1);\r\n    return (void *)-1;\r\n}\r\n\r\nint main() {\r\n    pthread_t thread;\r\n    int returnValue = pthread_create(&thread, NULL, runner, NULL);\r\n    void *status = 0;\r\n    int ret = pthread_join(thread, &status);\r\n    printf(""%d %d\\n"", ret, (int *)status);\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 13, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 683473211, 'comment_body': 'thanks, i see, looks good.', 'comment_created': datetime.datetime(2021, 8, 5, 13, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 683474758, 'comment_body': 'Yes, on line 26 I have defined this status value as follows. The return value is checked on Line 117 before starting the next inference.\r\n\r\n```C\r\n#define DNN_ASYNC_SUCCESS (void *)0\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 13, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 683478713, 'comment_body': 'Just one question, do we need to check the exit status in `ff_dnn_async_module_cleanup` also? It is called only when the request item is destroyed to ensure the thread was joined.', 'comment_created': datetime.datetime(2021, 8, 5, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 684262114, 'comment_body': 'yes, i think so, we may output a warning here', 'comment_created': datetime.datetime(2021, 8, 6, 14, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 684277807, 'comment_body': ""Okay, I'll add this to the patch. Thank you."", 'comment_created': datetime.datetime(2021, 8, 6, 14, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}]","[{'commit_sha': '06d840d3169b4a4b37fe3a7bb2f535611bd698b1', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd136b0580cd3441fb5d463c55dc28a82e22744eb', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '606e1afebf679b3bc03920f3a3e4d4da63efc9ed', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5b74e891b7a4bc3a7b5f4c4a0195b7a16d42daa', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56bf3e3e38053a0cada1e26686016a54770ae1c1', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32a1b3e26c0452a5e071a185946356d719e9b623', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af3894931eda79c830f7f70532793c834e5fb935', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc418762d08fe42c71d0374891eb6c65fe2d7a01', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f23321e1a5d92370be2c365e96bb4c2c8f57c00', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}]",Shubhanshu Saxena,54344426,,User,,62,,50,92
687167650,lavfi/dnn: Unification of Async and Sync Modes,"### Patch Set Description

This patchset is a part of optional deliverables in the GSoC project [Async Support for TensorFlow Backend in FFmpeg](https://summerofcode.withgoogle.com/projects/#5224576843251712).

- Builds on the patchset from PR #407. 

**Objective**: Unification of async and sync modes in the DNN backends from the filters' perspective.
**Parts under this deliverable**:
    - Unifies the async and sync modes in the DNN backend from the filters' perspective.
    - Adds `TaskItem` based inference in Native backend.
    - Renames `InferenceItem` to `LastLevelTaskItem`.

### Methodology

In this patchset, we plan to deliver a common inference function for async and sync modes to the filters (as compared to the two functions `ff_dnn_execute_model_async` and `ff_dnn_execute_model`). This will simplify the code on the filter side and the filters don't have to care about the mode of execution. With this patchset, the image frames are sent first by the frames and then collected using the `ff_dnn_get_result` function which sends back the input and output frames in a sequential manner.

The execution mode can now be set by using the `async` flag in the `backend_configs` as follows:
- async mode: `backend_configs=async=1`
- sync mode: `backend_configs=async=0`

Another part of this patchset contains the renaming of the `InferenceItem` in the three backends to `LastLevelTaskItem` and the relevant changes to avoid further confusion in the meaning of these structs.

### Patches

2c2a825b067c990f6af78e80316b484b5ae5b1aa Task-based Inference in Native Backend
5db57894287f23894d2db37d2e8745dc8da11dff Unify Execution Modes in DNN Filters
c0b4154e04d2da26116cd00d320183cb2cc6d9e9 Remove synchronous functions from DNN filters
42ce1db6f37eadb130b3426847ee28177e52fdcd Remove Async Flag from DNN Filter Side
5f0a0ed7ed3d11af31f831f237cff916341dd4b8 Rename InferenceItem to LastLevelTaskItem
85fed1e447bd121089acc623999e1a712cc938bd Include dnn_processing in docs of sr and derain filter
",False,423,https://api.github.com/repos/intel-media-ci/ffmpeg/pulls/423,https://github.com/intel-media-ci/ffmpeg/pull/423,closed,379,471,18,6,14,57,0,0,[],2021-07-10 11:14:20+00:00,2021-08-29 18:38:31+00:00,4346651.0,"50 days, 7:24:11","[{'comment_id': 686769425, 'comment_body': ""it's not good to disable a feature even it is temporary, we need to refine the patches"", 'comment_created': datetime.datetime(2021, 8, 11, 12, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 686772075, 'comment_body': 'it might be a good method for close/internal code, but it is not good for open source.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 686787086, 'comment_body': 'Okay, got it.\r\nHow about reordering the ""Task-based Inference in Native Backend"" to first and then combining the unification patches in the three backend to one?', 'comment_created': datetime.datetime(2021, 8, 11, 12, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 686795982, 'comment_body': 'looks good, hope the merged patch is not big, :)', 'comment_created': datetime.datetime(2021, 8, 11, 12, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 686813179, 'comment_body': ""I'll try not to make the patch too large. Once refining is complete, I'll tell you. Thank you."", 'comment_created': datetime.datetime(2021, 8, 11, 13, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 687086329, 'comment_body': 'I tried merging the patches. The first two patches are a bit large, but the next two are small.', 'comment_created': datetime.datetime(2021, 8, 11, 18, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 688932622, 'comment_body': ""fyi, we may change the inference in a new patch after this patch set is finished, it is really confusing.\r\n\r\nthe struct name can be LastLevelTaskItem, and the function name may extract_lltask_from_task, we use lltask for variable.\r\n\r\nThe last level task means the task can be passed to the inference engine, so, 'task' for the interface between filter and ffmpeg-dnn, while lltask is the interface between dnn and inference engine."", 'comment_created': datetime.datetime(2021, 8, 14, 13, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 688932735, 'comment_body': 'looks that the code in dnn_backend_native.c/h can be a separate patch, as the preparation for the async/sync unification of filter.', 'comment_created': datetime.datetime(2021, 8, 14, 13, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 688932836, 'comment_body': 'do we need this if? The allowed values are 0 and 1.\r\n\r\n    { ""async"",           ""use DNN async inference"",       OFFSET(options.async),           AV_OPT_TYPE_BOOL,   { .i64 = 1 },     0,       1, FLAGS },', 'comment_created': datetime.datetime(2021, 8, 14, 13, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 688932925, 'comment_body': '.i64=1 in dnn_backend_common.h  has set the default value as 1.', 'comment_created': datetime.datetime(2021, 8, 14, 13, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 688933516, 'comment_body': 'need this line?', 'comment_created': datetime.datetime(2021, 8, 14, 13, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 688933569, 'comment_body': 'need these 2 lines?', 'comment_created': datetime.datetime(2021, 8, 14, 13, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 688933586, 'comment_body': 'these', 'comment_created': datetime.datetime(2021, 8, 14, 13, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 688935142, 'comment_body': ""still use dnn_detect_activate here.  It is not good to see 'async' or 'sync' here, since the filter will not care about this concept.  For less change, we may change the function name from dnn_detect_activate_async into dnn_detect_activate_impl, and call dnn_detect_activate_impl in function dnn_detect_activate.  and then delete function  dnn_detect_activate_sync.\r\n\r\n```\r\nstatic int dnn_detect_activate(AVFilterContext *filter_ctx)\r\n{\r\n    DnnDetectContext *ctx = filter_ctx->priv;\r\n\r\n    if (ctx->dnnctx.async)  // do not remove this variable, but to add deprecated, refer to 'options' in dnn_filter_common.h\r\n        output warning here to be backward compatible.\r\n   \r\n    return dnn_detect_activate_impl(filter_ctx);\r\n}\r\n```\r\nthe same comment for dnn_processing."", 'comment_created': datetime.datetime(2021, 8, 14, 14, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 688935344, 'comment_body': 'ok, please ignore this comment, since I see it is fixed in the next patch.', 'comment_created': datetime.datetime(2021, 8, 14, 14, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 688935536, 'comment_body': 'ctx->options.async?', 'comment_created': datetime.datetime(2021, 8, 14, 14, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 688935658, 'comment_body': ""do not remove it for backward compatible, just add comment such as: ignored, use backend_configs='async=1' ..."", 'comment_created': datetime.datetime(2021, 8, 14, 14, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 688936070, 'comment_body': 'I mean comment updated in the second column, ""use DNN async inference""', 'comment_created': datetime.datetime(2021, 8, 14, 14, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 688937366, 'comment_body': 'not catch this point.\r\n\r\nwe do support asyn for tf backend now.\r\nand sync/async is combined in next patch without any change here.\r\n\r\nI know that classification is not supported/tested for sync in the previous, is this the root cause? So we return error here to first keep the same feature as previous.', 'comment_created': datetime.datetime(2021, 8, 14, 14, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 688937945, 'comment_body': ""looks that batch mode for sync execution can be supported without much effort, right?  I do not mean you'd add such support or not, just a discussion."", 'comment_created': datetime.datetime(2021, 8, 14, 14, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 688975055, 'comment_body': 'Sure, got the point. Shall I include this in this patchset as the last patch or include it in the next patch set?', 'comment_created': datetime.datetime(2021, 8, 14, 18, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 688975368, 'comment_body': 'Oh right. Thanks for the catch.', 'comment_created': datetime.datetime(2021, 8, 14, 18, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 688976107, 'comment_body': ""Oh so this sets the default value. Okay I'll remove this line"", 'comment_created': datetime.datetime(2021, 8, 14, 18, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 688981249, 'comment_body': ""Yes. It seems like we can use the same code we do for async batch mode to support this. Just that we'd need to be sure that the flush frame function is being called for edge cases."", 'comment_created': datetime.datetime(2021, 8, 14, 19, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 688981844, 'comment_body': 'like which part? The conversion to `TaskItem` based inference is in a separate patch.', 'comment_created': datetime.datetime(2021, 8, 14, 19, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 688983317, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2021, 8, 14, 19, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 688983355, 'comment_body': 'Yes, corrected.', 'comment_created': datetime.datetime(2021, 8, 14, 19, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 688984326, 'comment_body': 'Like this ""use DNN async inference (ignored, use backend_configs=\'async=1\')""?', 'comment_created': datetime.datetime(2021, 8, 14, 19, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 688986840, 'comment_body': ""Yes. I checked with the following two filters in this way and found them to be working with sync mode as well.\r\n\r\n```sh\r\nffmpeg -i cici.jpg -vf dnn_classify=dnn_backend=openvino:model=emotions-recognition-retail-0003.xml:input=data:output=prob_emotion:confidence=0.3:labels=emotions-recognition-retail-0003.label:target=face:backend_configs=async=0,showinfo -f null -\r\n```\r\n\r\n```sh\r\nffmpeg -i cici.jpg -vf dnn_detect=dnn_backend=openvino:model=face-detection-adas-0001.xml:input=data:output=detection_out:confidence=0.6:labels=face-detection-adas-0001.label:backend_configs=async=0,showinfo -f null -\r\n```\r\n\r\nBut I did not remove these lines as I wasn't sure if it will work in all cases. Like if there are other cases as well. "", 'comment_created': datetime.datetime(2021, 8, 14, 20, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 689009399, 'comment_body': 'i see', 'comment_created': datetime.datetime(2021, 8, 15, 0, 38, 2, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 689009475, 'comment_body': 'yes, otherwise, people will see program reports error and ends due to the unknown option, if he used async in the command line.', 'comment_created': datetime.datetime(2021, 8, 15, 0, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 689009959, 'comment_body': ""i meant the code in dnn_backend_native.c/h in the second patch. anyway, it doesn't matter to separate it."", 'comment_created': datetime.datetime(2021, 8, 15, 0, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 689009974, 'comment_body': 'add as the last patch would be better', 'comment_created': datetime.datetime(2021, 8, 15, 0, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 689010965, 'comment_body': 'the first command line is not correct, dnn_classify will do nothing since no detect result, and the second command line just contain dnn_detect, not dnn_classify.\r\nTo use classify, we need to use the two filters together:  -vf dnn_detect=...dnn_classify=...\r\n\r\nmy concern was about the comment, we may update the comment to be more clear, keeping return error.', 'comment_created': datetime.datetime(2021, 8, 15, 0, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 689037564, 'comment_body': ""Okay, I'll add the patch today."", 'comment_created': datetime.datetime(2021, 8, 15, 6, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 689037749, 'comment_body': ""Done. I had a question - how will people who haven't seen the source code see this comment? Is there any help command for the filter?"", 'comment_created': datetime.datetime(2021, 8, 15, 6, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 689039341, 'comment_body': ""Oh yes, I just noticed it didn't return any coordinates of the regions classified.\r\n\r\nHow about this?\r\n```\r\n        // Classification filter has not been completely tested with the sync\r\n        // mode and on the TensorFlow and Native backends. So, do not support now\r\n```"", 'comment_created': datetime.datetime(2021, 8, 15, 6, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 689040097, 'comment_body': 'I tried it also and it works fine since all filters which can use `batch_mode` call the flush frame function.', 'comment_created': datetime.datetime(2021, 8, 15, 6, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 689040192, 'comment_body': 'Okay', 'comment_created': datetime.datetime(2021, 8, 15, 6, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 689044746, 'comment_body': 'yes, it is not complete backward compatible.\r\n\r\nffmpeg -h filter=<name of filter>', 'comment_created': datetime.datetime(2021, 8, 15, 7, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 689045676, 'comment_body': 'just the first line is enough.\r\n\r\nwe can always support here no matter if tf/native backends are supported or not,', 'comment_created': datetime.datetime(2021, 8, 15, 7, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 689045819, 'comment_body': 'we may enable it in another new patch some time later', 'comment_created': datetime.datetime(2021, 8, 15, 7, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 689048895, 'comment_body': 'Okay. Updated.', 'comment_created': datetime.datetime(2021, 8, 15, 8, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 689048904, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 8, 15, 8, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 689050425, 'comment_body': ""I was thinking that we can make it backward compatible by passing this async parameter to the backend load function. \r\n\r\nSince this `async` is present in `DnnContext`, we can pass it to the load model functions and check if the user has set the value there. (in this case, we'd have to set a default value other than 0 or 1)\r\n\r\nThe only problem with this method is that if the user sets both the values `async=0` and `backend_configs=async=1`, we'll not know which one user was trying to use."", 'comment_created': datetime.datetime(2021, 8, 15, 8, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 689050877, 'comment_body': 'What about the `inference_queue`? Shall I name it `lltask_queue`?\r\n\r\nIf I understood correctly, the request item should look like this, right?\r\n```c\r\ntypedef struct OVRequestItem {\r\n    ie_infer_request_t *infer_request;\r\n    LastLevelTaskItem **lltasks;\r\n    uint32_t lltask_count;\r\n    ie_complete_call_back_t callback;\r\n} OVRequestItem;\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 8, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 689052701, 'comment_body': 'yes. right.', 'comment_created': datetime.datetime(2021, 8, 15, 8, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 689053007, 'comment_body': 'i guess not many people are using the filter option, and such  backward compatible is too complex ...', 'comment_created': datetime.datetime(2021, 8, 15, 8, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 689053449, 'comment_body': 'Okay, thanks.', 'comment_created': datetime.datetime(2021, 8, 15, 8, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 689053579, 'comment_body': 'Okay. I have changed the comment in column 2.', 'comment_created': datetime.datetime(2021, 8, 15, 8, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 689070337, 'comment_body': 'Added', 'comment_created': datetime.datetime(2021, 8, 15, 10, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 689075804, 'comment_body': 'the option has default value', 'comment_created': datetime.datetime(2021, 8, 15, 11, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 689076415, 'comment_body': 'for log message, we can use the full name: last level task instead of lltask', 'comment_created': datetime.datetime(2021, 8, 15, 11, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 689077068, 'comment_body': 'we need to change the function name to ff_dnn_get_result_common, up to you to decide which patch is best for the change.', 'comment_created': datetime.datetime(2021, 8, 15, 11, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'guoyejun', 'type': 'User'}, {'comment_id': 689081248, 'comment_body': 'Corrected', 'comment_created': datetime.datetime(2021, 8, 15, 12, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 689081271, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 8, 15, 12, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}, {'comment_id': 689081334, 'comment_body': 'I merged it in the unification patch.', 'comment_created': datetime.datetime(2021, 8, 15, 12, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shubhanshu02', 'type': 'User'}]","[{'commit_sha': 'b22cd7121f2a9fab08b432ba36be7b65f0420b94', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae688e4a59b9a6bc58bc3c36fe831fa03330d8b6', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356b011b9ab8bb991776075c8b54bba82f210f36', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15db9d9d6d68d3c6efe4e029f5ac46c0551dea47', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4105d51bc586f0b9af5b113be95ea8077bdd2ddf', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bac25e7a5be91e38418b7eaa06fe36aa4a7a3a7', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}]",Shubhanshu Saxena,54344426,,User,,62,,50,92
689132919,lavfi/dnn: Async Support for Native Backend,"## TODO

This pull request will be reopened after the pull request #423 gets merged.

## Patch Set Description

This patchset is a part of optional deliverables in the GSoC project [Async Support for TensorFlow Backend in FFmpeg](https://summerofcode.withgoogle.com/projects/#5224576843251712).

- Builds on the patchset from PR #423. 

**Objective**: Extend the asynchronous inference support to the Native Backend.

### Parts under this deliverable

- Switches the inference mechanism to `NativeRequestItem` based.
- Extends the async support to the Native Backend

Notable Points

- Each `NativeRequestItem` has its own set of operands compared to a single operand set per `NativeModel` earlier.
- Reduced default value of `conv2d_threads` only for async execution

## Patches

1f177d1208b0ade875dfd6596408924372cfbcf2 lavfi/dnn_backend_native: Separate Functions for Filling Model with Input
2200a04cf33df661efa9f0069a1d775b2962c8f1 lavfi/dnn_backend_native: Separate Functions Completion Callback
848a8200ffdac47a8d570e86f2dd9597407b4d6b lavfi/dnn_backend_native: Add NativeRequestItem and copy_operands
d70712a6cf37d23fb14e0f49f1f29eb6cd999346 lavfi/dnn_backend_native: Request-based Inference
05f28d848c1ab6ae64e04f352259dff6ad3c8a06 lavfi/dnn_backend_native: Add Inference Function
e42c7295a48ad12be0313b56c1ef70baa8b9bd6b lavfi/dnn_backend_native: Documentation for New Functions
5431d81a8d68e151ccfc68f4d0d603bbcd884865 lavfi/dnn: Async Support for Native Backend
bf69c639c4dcf56e6e6c692cbc9ff1e9f796d4cf lavfi/dnn_backend_native: Switch Flushing to Async
1fb16f6ba9523c6369fe5db9516788cd6b13bd7c lavfi/dnn_backend_native: Reduce default value of conv2d_threads
",False,425,https://api.github.com/repos/intel-media-ci/ffmpeg/pulls/425,https://github.com/intel-media-ci/ffmpeg/pull/425,closed,921,473,18,21,2,0,0,0,[],2021-07-13 14:54:55+00:00,2021-08-12 19:22:51+00:00,2608076.0,"30 days, 4:27:56",[],"[{'commit_sha': 'c46928ceb99bb32c7f215f504b8a369434a91adf', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c35ab30777ddf39e983df52e56e84161d5160f2', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14eb600aa7db60f8245964324ac4e6a654a8a045', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb4efb8d6c7ed55242e90b3207eae769c2f5220b', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77394e4a780efc7e3e4f4d9a8ca798c601c2a871', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ca9f48f90f439e343f8b749100280d54594fbc9', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6250b35aa03634f4f2edb88d974e02a28084c6a1', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72271fc08ddb51e2395dc52e428dbe228b90773e', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55152bd43c046a1772a7c2a3d11f4bf37b2694ff', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf007bb072f5a6d6615f17f4239f94e288983915', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac3d879b1524ebdde486a05718ef8017d2ca50a3', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d1b0ade34f161101ef3472cf961e1eb7583b754', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6271dabf9415c78bf02fe75424cb26787da3aead', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab152444a5e73bdf1725518b6349863d8ece4ff1', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '713dec4f498e18e6946613b30ecdd7eea0f5414a', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78ecc3753d2d07c84dde5070e007507f68b519e3', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b19eb0a038da70aed84d42b277b2db8e98722885', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da5f813884e97457d725cad7c80a8890599e2fb3', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfe66fe0b232b60fce57acab26f0feda412131de', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bf5820944ea00da2d445380b12605579127a7f4', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8be323859236b74d17c07d228db92db6c3cb2cb5', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}]",Shubhanshu Saxena,54344426,,User,,62,,50,92
690472033,lavfi/dnn: Batch Execution in TensorFlow Backend,"## TODO

This pull request will be reopened after pull request #423 gets merged.

## Patch Set Description

This patchset is a part of optional deliverables in the GSoC project [Async Support for TensorFlow Backend in FFmpeg](https://summerofcode.withgoogle.com/projects/#5224576843251712).

- Builds on the patchset from PR #423. 

**Objective**: Implements batch execution in the TensorFlow backend

## Relevant Patches in the PR

790eac30ff65990bd47e1dbb5de26ae12f070e00 lavfi/dnn_backend_tf: Batch Execution Support

",False,427,https://api.github.com/repos/intel-media-ci/ffmpeg/pulls/427,https://github.com/intel-media-ci/ffmpeg/pull/427,closed,736,441,17,14,2,0,0,0,[],2021-07-15 07:35:57+00:00,2021-08-12 19:21:46+00:00,2461549.0,"28 days, 11:45:49",[],"[{'commit_sha': 'c46928ceb99bb32c7f215f504b8a369434a91adf', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c35ab30777ddf39e983df52e56e84161d5160f2', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14eb600aa7db60f8245964324ac4e6a654a8a045', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb4efb8d6c7ed55242e90b3207eae769c2f5220b', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77394e4a780efc7e3e4f4d9a8ca798c601c2a871', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ca9f48f90f439e343f8b749100280d54594fbc9', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6250b35aa03634f4f2edb88d974e02a28084c6a1', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72271fc08ddb51e2395dc52e428dbe228b90773e', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55152bd43c046a1772a7c2a3d11f4bf37b2694ff', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf007bb072f5a6d6615f17f4239f94e288983915', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac3d879b1524ebdde486a05718ef8017d2ca50a3', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d1b0ade34f161101ef3472cf961e1eb7583b754', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6271dabf9415c78bf02fe75424cb26787da3aead', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06c19ad49dc30a2faa11f775824a494c13eb7157', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}]",Shubhanshu Saxena,54344426,,User,,62,,50,92
715092033,lavfi/dnn: Error Specificity,"## Patch Set Description

This patchset improves the error specificity on all the patchsets from the GSoC project [Async Support for TensorFlow Backend in FFmpeg](https://summerofcode.withgoogle.com/projects/#5224576843251712).

- Builds on the patchset from PR #423, #425, and #427

**Objective**: Return Specific Error codes from the DNN Backend Functions

### Parts under this deliverable

- Add `DNN_GENERIC_ERROR` for errors related to the backend framework API-related errors.
- Use error codes from [libavutil/error.c](libavutil/error.c)

### Patches

41b15128ede7a041e51fc8de15735c79cab79e2c libavfilter: Prepare to handle specific error codes in DNN Filters
9f53605b93bf4cbc39b9a794cec64c1063d46cc8 lavfi/dnn: Error Specificity in Native Backend Layers
c3a2fe2ddb34ab4ff5ec00543bd03dbe50dd71a6 lavfi/dnn_io_proc: Return Specific Error Codes
9e219b76e2d745c937fbfff24810544ef68691b6 lavfi/dnn_backend_openvino: Return Specific Error Codes
4a498acbc4abd8092dff69e77b5fbff6b07159bc lavfi/dnn_backend_tf: Return Specific Error Codes
ec471f77dcc0f3b5fa34d71b328817a7ee9a505b lavfi/dnn_backend_native: Return Specific Error Codes
605cccb76e1087d6ee4611886cc7e3d77cf03ce3 lavfi/dnn_backend_common: Return specific error codes
",False,438,https://api.github.com/repos/intel-media-ci/ffmpeg/pulls/438,https://github.com/intel-media-ci/ffmpeg/pull/438,closed,785,446,29,17,5,0,0,0,[],2021-08-18 13:40:18+00:00,2021-12-16 18:01:43+00:00,10383685.0,"120 days, 4:21:25",[],"[{'commit_sha': '0969885478d984d3246818e06b2c0d203d928ab8', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90ac85bb1828c073798bb151b7b7eecba7134740', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '140b2833253037b084fbb8f03390f15c1f868819', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88aa1eafba61cbe2aad38e7afdc40a095d04befb', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '024e80aa139e251a7507c2e817f0897ef700c71e', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f13f0a8e09386943165fcfc3abca1a683f2123e', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ed6509d0b10bdda5d970c86aad130f92a3af7b9', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4c217d443719fbd04b265af6919e5f6ff79054e', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f94d8f7eacb1d0f59eb1d6c3b30f758a41daca0e', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58505221e8cad5809e09dbf820f1609e309c3e9a', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfc1f8d049ab50ff2fc7c734f413ae04559a4e17', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b0d328a6b51ad5075d03149cd40445cf28b3f48', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f656cd51453d4db4258f0603814a6e8d91c5f9e', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89b48dfbf06a6c16c007f2e2fae760ad1f1ecc1a', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed64a5b35361beef5554b611b53cd88aa0fbfb4c', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dae7687e00d877559f1d98dbf742b0edd9408503', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b346fe2dee45c903132f78d9b19c78ae00477cd0', 'committer_username': 'shubhanshu02', 'committer_name': 'Shubhanshu Saxena', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 21, 4, 7, 10, tzinfo=datetime.timezone.utc)}]",Shubhanshu Saxena,54344426,,User,,62,,50,92

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
153713178,ffmpeg,intel-media-ci/ffmpeg,C,47,39,11,2394,116755,7,3,7,"[{'id': 858554742, 'number': 504, 'closed': datetime.datetime(2022, 3, 16, 9, 21, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 19, 12, 11, 56, tzinfo=datetime.timezone.utc), 'time_taken': 2149754.0, 'time_delta': '24 days, 21:09:14', 'additions': 391, 'deletions': 335, 'state': 'closed'}, {'id': 715092033, 'number': 438, 'closed': datetime.datetime(2021, 12, 16, 18, 1, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 13, 40, 18, tzinfo=datetime.timezone.utc), 'time_taken': 10383685.0, 'time_delta': '120 days, 4:21:25', 'additions': 785, 'deletions': 446, 'state': 'closed'}, {'id': 690472033, 'number': 427, 'closed': datetime.datetime(2021, 8, 12, 19, 21, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 7, 35, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2461549.0, 'time_delta': '28 days, 11:45:49', 'additions': 736, 'deletions': 441, 'state': 'closed'}, {'id': 689132919, 'number': 425, 'closed': datetime.datetime(2021, 8, 12, 19, 22, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 14, 54, 55, tzinfo=datetime.timezone.utc), 'time_taken': 2608076.0, 'time_delta': '30 days, 4:27:56', 'additions': 921, 'deletions': 473, 'state': 'closed'}, {'id': 687167650, 'number': 423, 'closed': datetime.datetime(2021, 8, 29, 18, 38, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 10, 11, 14, 20, tzinfo=datetime.timezone.utc), 'time_taken': 4346651.0, 'time_delta': '50 days, 7:24:11', 'additions': 379, 'deletions': 471, 'state': 'closed'}, {'id': 668893168, 'number': 415, 'closed': datetime.datetime(2021, 6, 13, 8, 57, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 12, 15, 26, 3, tzinfo=datetime.timezone.utc), 'time_taken': 63092.0, 'time_delta': '17:31:32', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 648571037, 'number': 407, 'closed': datetime.datetime(2021, 8, 11, 11, 11, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 20, 8, 18, 50, tzinfo=datetime.timezone.utc), 'time_taken': 7181574.0, 'time_delta': '83 days, 2:52:54', 'additions': 433, 'deletions': 110, 'state': 'closed'}, {'id': 634360177, 'number': 400, 'closed': datetime.datetime(2021, 5, 11, 8, 23, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 8, 11, 53, 51, tzinfo=datetime.timezone.utc), 'time_taken': 246583.0, 'time_delta': '2 days, 20:29:43', 'additions': 248, 'deletions': 200, 'state': 'closed'}, {'id': 628422145, 'number': 396, 'closed': datetime.datetime(2021, 5, 18, 11, 44, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 1, 12, 11, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1467157.0, 'time_delta': '16 days, 23:32:37', 'additions': 142, 'deletions': 0, 'state': 'closed'}, {'id': 625240417, 'number': 394, 'closed': datetime.datetime(2021, 5, 11, 8, 24, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 28, 13, 43, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1104101.0, 'time_delta': '12 days, 18:41:41', 'additions': 46, 'deletions': 0, 'state': 'closed'}, {'id': 621208330, 'number': 391, 'closed': datetime.datetime(2021, 4, 25, 13, 23, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 22, 15, 32, 33, tzinfo=datetime.timezone.utc), 'time_taken': 251452.0, 'time_delta': '2 days, 21:50:52', 'additions': 60, 'deletions': 0, 'state': 'closed'}, {'id': 620280100, 'number': 389, 'closed': datetime.datetime(2021, 4, 25, 13, 23, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 21, 14, 41, 47, tzinfo=datetime.timezone.utc), 'time_taken': 340882.0, 'time_delta': '3 days, 22:41:22', 'additions': 75, 'deletions': 0, 'state': 'closed'}]"
