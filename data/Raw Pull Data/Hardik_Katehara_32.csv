pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
668786843,Fix #13054: Adding support for running backend type checks,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #13054 .
2. This PR does the following: This PR does the following:
  a. Adds mypy test runner script
  b. Adds type annotations to utils.py and utils_test.py
  c. Adds CI test for Mypy using GIthub workflows 
  d. Adding '`type:`' to excluded phrases because type annotations start with 'type:' and we want to avoid lint error stating that the comment starts with a lowercase letter. 

`typing` module is added to the prerequisites packages because we will be adding type annotations to the scripts which are used to setup and install packages and the files which are imported there. Therefore `typing` module will need to be downloaded before running the installation scripts.


## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [ ] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13060,https://api.github.com/repos/oppia/oppia/pulls/13060,https://github.com/oppia/oppia/pull/13060,closed,1339,91,12,84,43,188,1,2,[{'name': 'PR: LGTM'}],2021-06-12 06:21:01+00:00,2021-06-26 16:59:05+00:00,1247884.0,"14 days, 10:38:04","[{'comment_id': 650483674, 'comment_body': ""@vojtechjelinek Do you have any suggestion how we can handle this?\r\n**Problem**: `typing` module has to be used to add type annotations and it only exists for python3. With this kind of implementation:\r\n1. under normal circumstances (i.e while using python2), the code goes into **except** block and we avoid importing from `typing`. But lint checks and coverage tests fails - lint fails as it runs using python2 and cannot identify `typing`, coverage fails since code inside try block will never execute.\r\n2. when mypy tests are running (currently via github workflow), it uses python3, so the execution goes into **try** block and it is able to perform type checks comfortably.\r\n\r\nI don't see a straightforward way of dealing with the problems in (1), do see some way of dealing with this? (@hardikkat24 and I couldn't find a solution of this, this implementation is also just a hack currently)"", 'comment_created': datetime.datetime(2021, 6, 13, 7, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 650494913, 'comment_body': ""**Update**: Found a reason behind this - We already have typing module in requirements.txt file so it can work with python2. The issue here is that `install_backend_python_libs` imports `utils.py`, and inside `utils.py` we are importing `typing` module. So when we are installing third part libs in github workflows, `utils.py` is imported and though typing module has not yet been installed but `utils.py` is still trying to import it, which is raising the error. We need to find a way so that `typing` is already installed before we try to import it in `utils.py`.\r\n\r\nAlso, lint checks aren't facing any import issues due to `typing`. They are just failing. I misunderstood. Sorry for that!"", 'comment_created': datetime.datetime(2021, 6, 13, 9, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 650495749, 'comment_body': ""`typing` is a standard library in python3. So I would suggest that we should type annotate `utils.py` only after py3 migration so that we can import `typing` directly. Then we won't face the issue of importing `typing`(which Sajal explained above). I suggest that we must only type annotate those files which are not imported before our third-party libraries are installed.\r\n@vojtechjelinek @seanlip What do you think? Thanks!"", 'comment_created': datetime.datetime(2021, 6, 13, 9, 12, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 651502381, 'comment_body': '@hardikkat24 Can you please update the PR description stating the steps you had to take to resolve this error - it is one of the important decisions you took in this PR, and all such important changes should be highlighted via description. (Also leave a comment here after you have edited the PR description so that we know about the update on this issue) \r\nThanks!', 'comment_created': datetime.datetime(2021, 6, 15, 6, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 651678081, 'comment_body': 'Which are disabled? Should we add a TODO to enable some later?', 'comment_created': datetime.datetime(2021, 6, 15, 10, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651678327, 'comment_body': ""```suggestion\r\n    'type:'\r\n]\r\n```"", 'comment_created': datetime.datetime(2021, 6, 15, 10, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651678910, 'comment_body': ""```suggestion\r\n        excluded_files_regex = (\r\n            '|'.join(NOT_FULLY_COVERED_FILES + EXCLUDED_DIRECTORIES))\r\n```"", 'comment_created': datetime.datetime(2021, 6, 15, 10, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651679113, 'comment_body': '```suggestion\r\n)\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 10, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651679330, 'comment_body': '```suggestion\r\n    description=""Type checking script for Oppia codebase.""\r\n)\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 10, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651679656, 'comment_body': 'You should probably provide a path to out own installed version of `mypy`', 'comment_created': datetime.datetime(2021, 6, 15, 10, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651681007, 'comment_body': 'Add todo here to change this after we type all files.', 'comment_created': datetime.datetime(2021, 6, 15, 11, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651682531, 'comment_body': '```suggestion\r\nnamespace_packages = True\r\nexplicit_package_bases = True\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 11, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651682818, 'comment_body': 'Can you add comments to this file to explain why some configurations are used.', 'comment_created': datetime.datetime(2021, 6, 15, 11, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651685034, 'comment_body': 'Should we try to not use `Any`?', 'comment_created': datetime.datetime(2021, 6, 15, 11, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651686078, 'comment_body': 'Why cannot you use `Union`?', 'comment_created': datetime.datetime(2021, 6, 15, 11, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651686221, 'comment_body': 'Why are these needed?', 'comment_created': datetime.datetime(2021, 6, 15, 11, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651686635, 'comment_body': 'Why is this ignore needed?', 'comment_created': datetime.datetime(2021, 6, 15, 11, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651686708, 'comment_body': 'Why is this ignore needed?', 'comment_created': datetime.datetime(2021, 6, 15, 11, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651689700, 'comment_body': 'Why is this ignore needed?', 'comment_created': datetime.datetime(2021, 6, 15, 11, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651689853, 'comment_body': 'Why is this ignore needed?', 'comment_created': datetime.datetime(2021, 6, 15, 11, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651691727, 'comment_body': 'Can you create mypy_requirements.in from which we will then generate this file?', 'comment_created': datetime.datetime(2021, 6, 15, 11, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651693245, 'comment_body': '```suggestion\r\n    for language in constants.SUPPORTED_AUDIO_LANGUAGES: # type: ignore[attr-defined]\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 11, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651694140, 'comment_body': 'Why `Any`?', 'comment_created': datetime.datetime(2021, 6, 15, 11, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651694628, 'comment_body': 'Remove this newline.', 'comment_created': datetime.datetime(2021, 6, 15, 11, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651695263, 'comment_body': '```suggestion\r\n        ] # type: List[Union[None,Text]]\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 11, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 651720690, 'comment_body': 'Everything is enabled(or strict) as of now. So todo is not required.', 'comment_created': datetime.datetime(2021, 6, 15, 12, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 651736365, 'comment_body': 'Lets see this example. \r\n```\r\ndef get_random_choice(alist):\r\n    # type: (List[T]) -> T\r\n```\r\nSo what this function does is that it returns a random element from the list. This means that a list of integers must return an integer and so on.\r\nNow lets say we have written `# type: (List[Any]) -> Any`, this means a list is given as a parameter and anything can be returned.\r\nSo I think the earlier type statement is more strict.', 'comment_created': datetime.datetime(2021, 6, 15, 12, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 651737762, 'comment_body': 'This function is not type annotated. As we have specified `disallow-untyped-calls` as true, this means any call of an untyped function will be notified. So to ignore this error, we have added type ignore.\r\nHere is a todo for this. https://github.com/oppia/oppia/issues/13059', 'comment_created': datetime.datetime(2021, 6, 15, 12, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 651740434, 'comment_body': ""The python_utils.open_file() function is not type annotated, so the return type of such a function is `Any'. So f.read() is of type any too. So the return type of the method we are writing is Any. And we have specified in configurations file `warn-return-any` as True. An error will be thrown when returning `Any`. So to ignore this error, we have added type ignore.\r\nHere is a todo for this: https://github.com/oppia/oppia/issues/13059"", 'comment_created': datetime.datetime(2021, 6, 15, 12, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 651741646, 'comment_body': 'Ditto as other ignores.', 'comment_created': datetime.datetime(2021, 6, 15, 12, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 651748913, 'comment_body': ""We accept unicode(or Text) but imghdr.what(file, h) accept 'h' of type str. So earlier I added type ignore call overload as we should avoid using `str` in py2 with mypy type annotations. \r\nNow I have another way to do this, `content = cast(str, content)`. This casts content to be of type str. Here cast is a method of module typing."", 'comment_created': datetime.datetime(2021, 6, 15, 12, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 651753940, 'comment_body': ""The problem here is that linter is throwing errors 'line too long' for `# type:` pragma exceeding the 80 length too. I have discussed with Sandeep and Sajal and I am working on this. I haven't found a solution for this yet. @vojtechjelinek Please let me know if you know a fix for this. Thanks!"", 'comment_created': datetime.datetime(2021, 6, 15, 12, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 652603039, 'comment_body': ""I think this python3 package will be downloaded by mypy script as it is a python3 package. So I don't want to download it in our third_party/ folder as it has only python2 packages. So I think using `mypy` will be better. What do you think? Thanks! "", 'comment_created': datetime.datetime(2021, 6, 16, 11, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 652797030, 'comment_body': 'I think in test files, it will be best to use Any because a variable can be assigned to a lot of value types. What do you think?', 'comment_created': datetime.datetime(2021, 6, 16, 15, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 652799268, 'comment_body': 'Yes I think DICT_LIST_TYPE can be replaced with union instead. Thanks!', 'comment_created': datetime.datetime(2021, 6, 16, 15, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 652799660, 'comment_body': 'Discussed on Hangouts. No need of this.', 'comment_created': datetime.datetime(2021, 6, 16, 15, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 652850025, 'comment_body': ""This variable here is of type enumerate and 'enum' is not a type in MyPy. So used this. What do you think?"", 'comment_created': datetime.datetime(2021, 6, 16, 16, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 652940164, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 16, 18, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 652940575, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 16, 18, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 652973062, 'comment_body': '@vojtechjelinek I have suggested @hardikkat24 the same and we have also active discussion in [this](https://docs.google.com/document/d/1P6DkYljDaGp3I5DzkGMIFDICKaQ6QJI7wa6B-1wUKOs/edit?disco=AAAAMiOSqXk) thread of Type Annotations Draft Wiki doc.', 'comment_created': datetime.datetime(2021, 6, 16, 19, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 653090294, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 16, 22, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653090397, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 16, 22, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653090593, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 6, 16, 22, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653090659, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 16, 22, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653090726, 'comment_body': 'Added the comments. ', 'comment_created': datetime.datetime(2021, 6, 16, 22, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653091008, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 16, 22, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653091363, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 16, 22, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653091684, 'comment_body': 'It should be `List[List[Union[None, Text]]]`. Added it.', 'comment_created': datetime.datetime(2021, 6, 16, 22, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653116130, 'comment_body': ""Isn't it like `Iterator[(int, T)]` where `T` is the type of `iterable`?"", 'comment_created': datetime.datetime(2021, 6, 16, 23, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 653116617, 'comment_body': 'If this is a temporary solution, until py3 is introduced should we add a TODO?', 'comment_created': datetime.datetime(2021, 6, 16, 23, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 653117210, 'comment_body': ""Ah, I see, isn't there one flag to enable all strict checks?"", 'comment_created': datetime.datetime(2021, 6, 16, 23, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 653117553, 'comment_body': 'Yeah, makes sense to do it this way before py3 is introduced, could you add a TODO?', 'comment_created': datetime.datetime(2021, 6, 16, 23, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 653118007, 'comment_body': 'Agreed, just that it seems a bit weird to me that we have to define these, cannot we use `# type: (List[T]) -> T` without these two lines?', 'comment_created': datetime.datetime(2021, 6, 16, 23, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 653242243, 'comment_body': 'Yes, there is a flag. But I chose to move forward with individual configurations because:\r\n1. It will be easy to set a couple of flags off in the future.\r\n2. The configuration file itself gives the information of the which thing is allowed or not.', 'comment_created': datetime.datetime(2021, 6, 17, 5, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653244856, 'comment_body': ""In python3, this will change to bytes I think. Or what should be its type in python3? . So the whole type annotation needs to change after that. Don't think TODO is required here."", 'comment_created': datetime.datetime(2021, 6, 17, 5, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653253735, 'comment_body': 'Added it.', 'comment_created': datetime.datetime(2021, 6, 17, 6, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653256510, 'comment_body': 'No, we cannot use this directly. Mypy is unable to determine what is `T` here. Yes this seems weird but this is used by other organisations as well. [Here](https://github.com/zulip/zulip/blob/12a439b8bd4f5c8f6c54dcb926e48d4d71d81792/zerver/lib/pysa.py) is an example.', 'comment_created': datetime.datetime(2021, 6, 17, 6, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653256925, 'comment_body': 'Did it. Thanks!', 'comment_created': datetime.datetime(2021, 6, 17, 6, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653477081, 'comment_body': '1. Why would we want to disable something in the future?\r\n2. Makes sense.\r\n\r\nBut one problem I see is that if new strict checks are added to the MyPy library and we would upgrade, we can easily forget about these new strict checks.', 'comment_created': datetime.datetime(2021, 6, 17, 11, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 653482489, 'comment_body': 'Can this be\r\n```suggestion\r\n    # type: (Text) -> Dict[Text, Any]\r\n```', 'comment_created': datetime.datetime(2021, 6, 17, 11, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 653484430, 'comment_body': 'empty string is not optional, if `None` was allowed then it would be optional\r\n```suggestion\r\n    # type: (Text) -> Text\r\n```', 'comment_created': datetime.datetime(2021, 6, 17, 11, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 653487010, 'comment_body': 'I think we can force the `fillvalue` to be the same type as the stuff in iterable.\r\n```suggestion\r\n    # type: (Iterable[T], int, Optional[T]) -> Iterable[Iterable[T]]\r\n```', 'comment_created': datetime.datetime(2021, 6, 17, 11, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 653487471, 'comment_body': 'Okay, I went through all the types in this file and we do not use `U` so you can probably remove it.', 'comment_created': datetime.datetime(2021, 6, 17, 11, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 653599470, 'comment_body': '1. In future while adding type annotations, a case may arise in which we have to ignore some errors. \r\nBut yes, I get your point that this can be changed later.\r\nIf mypy introduces new checks, we would not automatically want that check to be added. \r\nTherefore I think it is better to write all the configurations explicitly. What do you think? Thanks!', 'comment_created': datetime.datetime(2021, 6, 17, 14, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653606089, 'comment_body': 'In our test `test_capitalize_string()`, we also pass None to it. So I think Optional would be a better choice here as it must have been designed to accept None. What do you think?', 'comment_created': datetime.datetime(2021, 6, 17, 14, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653618658, 'comment_body': 'Yes it can be as key of YAML is always a string. Done.', 'comment_created': datetime.datetime(2021, 6, 17, 14, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653619504, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 17, 14, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653619853, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 6, 17, 14, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 653843747, 'comment_body': 'Changed the implementation and broke the test into multiple tests as per the discussion on the above thread.', 'comment_created': datetime.datetime(2021, 6, 17, 18, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654059207, 'comment_body': ""If `None` is passed just in tests then remove that test. This is a rule to follow in general, do not conform the types to tests but tests to types. A slight exception might be data coming from 'unknown' sources like HTTP requests."", 'comment_created': datetime.datetime(2021, 6, 18, 0, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 654060635, 'comment_body': 'I think we actually want all new strict check to be enabled. Since we will only upgrade mypy manually we can then see that some mypy checks are failing and disable the strict checks temporarily until we fix it in our codebase and then enable all checks again.', 'comment_created': datetime.datetime(2021, 6, 18, 0, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 654153768, 'comment_body': 'So I am replacing all the configurations by strict=True.', 'comment_created': datetime.datetime(2021, 6, 18, 5, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654156733, 'comment_body': ""For now this is used only at one place to capitalize a string whose default is `''`. So I think Removing optional will work."", 'comment_created': datetime.datetime(2021, 6, 18, 5, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654162397, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 18, 6, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654162709, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 18, 6, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654439633, 'comment_body': '@DubeySandeep Who should be the codeowner for this? I might not be available, and I think @hardikkat24 has pretty decent knowledge about mypy in general, so maybe can co-own this with someone else \r\n(if not independently initially), wdyt?', 'comment_created': datetime.datetime(2021, 6, 18, 13, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 654490644, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2021, 6, 18, 14, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 654495182, 'comment_body': 'Comments should be clear in explanation - Either elaborate it here or link to a place where it has been properly explained like our wiki or any external link (I prefer latter one).', 'comment_created': datetime.datetime(2021, 6, 18, 14, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 654501153, 'comment_body': 'Add in sorted order*', 'comment_created': datetime.datetime(2021, 6, 18, 15, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654503798, 'comment_body': 'Do we need to merge with upstream/develop after installing wheel? (using `./.github/actions/merge`)', 'comment_created': datetime.datetime(2021, 6, 18, 15, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654505564, 'comment_body': 'Should we use `if: ${{ steps.check-risk.outputs.is-low-risk != 0 }}`? [Note: we are now using updated is-low-risk flag]', 'comment_created': datetime.datetime(2021, 6, 18, 15, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654508751, 'comment_body': 'Assign these files to the DataStability team, i.e, @vojtechjelinek for now!', 'comment_created': datetime.datetime(2021, 6, 18, 15, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654509406, 'comment_body': 'You have to clearly define this approach for dealing with line limit exceeded error due to type ignore in the wiki page. Once you added details there I will resolve this.', 'comment_created': datetime.datetime(2021, 6, 18, 15, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 654510196, 'comment_body': 'Maybe: `Python type checks` or  `Python type checks with mypy`\r\n\r\n(Just to be specific/clear about the language.) wdyt?', 'comment_created': datetime.datetime(2021, 6, 18, 15, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654510872, 'comment_body': ""In genral, make sure this follows other workflow's structure* "", 'comment_created': datetime.datetime(2021, 6, 18, 15, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654512357, 'comment_body': ""Why do we need a separate requirements file? (Why can't we use the existing requirement file?)"", 'comment_created': datetime.datetime(2021, 6, 18, 15, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654516939, 'comment_body': ""```suggestion\r\n    description='Python type checking using mypy script.'\r\n```"", 'comment_created': datetime.datetime(2021, 6, 18, 15, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654517813, 'comment_body': 'Add docstring for args and returns*', 'comment_created': datetime.datetime(2021, 6, 18, 15, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654518865, 'comment_body': ""why `files[0]`? (I'm expecting files[0] to be a string*)"", 'comment_created': datetime.datetime(2021, 6, 18, 15, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654519845, 'comment_body': ""mypy script doesn't depend on any other requirements? I mean if we won't install any other third_paty libs then this script would work fine?"", 'comment_created': datetime.datetime(2021, 6, 18, 15, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654521209, 'comment_body': 'Do we need this else?', 'comment_created': datetime.datetime(2021, 6, 18, 15, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654522193, 'comment_body': ""```suggestion\r\n        python_utils.PRINT('Mypy and stubs for third party libraries installed successfully.')\r\n```\r\n\r\n(Optional^) [I see this pattern in other places] "", 'comment_created': datetime.datetime(2021, 6, 18, 15, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654522530, 'comment_body': 'Why `unused_parsed_args`? (i.e, why we have unused prefix here)', 'comment_created': datetime.datetime(2021, 6, 18, 15, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654523422, 'comment_body': '```suggestion\r\n""""""Tests for MyPy type check runner script.""""""\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 15, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654523506, 'comment_body': '```suggestion\r\n# Copyright 2021 The Oppia Authors. All Rights Reserved.\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 15, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654534832, 'comment_body': 'Mock `NOT_FULLY_COVERED_FILES` and other variable and assert the full cmd*', 'comment_created': datetime.datetime(2021, 6, 18, 15, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654535246, 'comment_body': 'Assert the full cmd instead part of it*', 'comment_created': datetime.datetime(2021, 6, 18, 15, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654535997, 'comment_body': 'Why do we need this swap?', 'comment_created': datetime.datetime(2021, 6, 18, 15, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654537301, 'comment_body': '```suggestion\r\n    def test_main_with_files_success(self):\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 15, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654540172, 'comment_body': 'How would we ensure that all the imports are used in type?', 'comment_created': datetime.datetime(2021, 6, 18, 16, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654545321, 'comment_body': 'This looks very untidy, are we going to have these imports and disable flags in all the files?', 'comment_created': datetime.datetime(2021, 6, 18, 16, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654554355, 'comment_body': 'Added to the wiki. Thanks!', 'comment_created': datetime.datetime(2021, 6, 18, 16, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654555819, 'comment_body': '`new_iterable ` will not be same type as `iterable` everytime because it can either be enumeration of iterable or the iterable itself. ', 'comment_created': datetime.datetime(2021, 6, 18, 16, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654558317, 'comment_body': 'Any specific reason for placing these todos here?', 'comment_created': datetime.datetime(2021, 6, 18, 16, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654558451, 'comment_body': 'Where is this used? (Are we going to use this?)', 'comment_created': datetime.datetime(2021, 6, 18, 16, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654559071, 'comment_body': ""Is there any way to disable the type for test functions? (I don't think this is useful and it's never going to change, right?)"", 'comment_created': datetime.datetime(2021, 6, 18, 16, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654562647, 'comment_body': 'The files above this are unsorted. So how should I?', 'comment_created': datetime.datetime(2021, 6, 18, 16, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654562806, 'comment_body': ""I don't know about this. How does this help? Thanks!"", 'comment_created': datetime.datetime(2021, 6, 18, 16, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654563524, 'comment_body': 'These are python3 requirements. So till python3 migration, @vojtechjelinek @sajalasati and I decided to keep it this way.', 'comment_created': datetime.datetime(2021, 6, 18, 16, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654566456, 'comment_body': ""This looks strange in the first look. The behaviour you assume is for `extend` argparse action. But that is only available in python3.8+. So I used `append` argparse action. It gave `files = [['file1', file2]]`. Thanks!"", 'comment_created': datetime.datetime(2021, 6, 18, 16, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654567858, 'comment_body': 'installing typing module is required. We are already using typing module. But now, I have added it to the PREREQUISITES list which has packages which need to be downloaded before installing other backend packages and importing modules. See here: https://github.com/oppia/oppia/blob/173ca903584c84f6e70abe46144d6e66d72b092e/scripts/install_third_party_libs.py#L37', 'comment_created': datetime.datetime(2021, 6, 18, 16, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654575728, 'comment_body': 'Yes this is required as pylint as thinks there imports are unused. Other option is to use `# noqa`. What do you prefer?', 'comment_created': datetime.datetime(2021, 6, 18, 17, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654583632, 'comment_body': ""No, not me! I'm away from today, assign them to Sajal but add a TODO(#13119) comment above similar to the other TODO comments in this file."", 'comment_created': datetime.datetime(2021, 6, 18, 17, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 654584496, 'comment_body': 'We decided to type even tests since it is not that hard.', 'comment_created': datetime.datetime(2021, 6, 18, 17, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 654677072, 'comment_body': 'But at a lot of places we still use this. I just took inspiration from lint.yml. Will it work?', 'comment_created': datetime.datetime(2021, 6, 18, 21, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654678956, 'comment_body': 'Yes I took inspiration from lint.yml', 'comment_created': datetime.datetime(2021, 6, 18, 21, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654682966, 'comment_body': 'This is the thing we do normally so is it actually needed to change it? I have seen this being used at a lot of places.', 'comment_created': datetime.datetime(2021, 6, 18, 21, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654684584, 'comment_body': '`Python type checks` looks good. Changed', 'comment_created': datetime.datetime(2021, 6, 18, 21, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654684669, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 18, 21, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654684701, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 18, 21, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654684767, 'comment_body': 'Not needed actually. Changed', 'comment_created': datetime.datetime(2021, 6, 18, 21, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654685036, 'comment_body': ""I don't know actually. Changed."", 'comment_created': datetime.datetime(2021, 6, 18, 21, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654685072, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 18, 21, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654685097, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 18, 21, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654689256, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 18, 21, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654689303, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 18, 21, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654689433, 'comment_body': 'Checking that the script throws error when something incorrect is used.', 'comment_created': datetime.datetime(2021, 6, 18, 21, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654689908, 'comment_body': 'There is no way to do that as everything imported here is used in type comments.', 'comment_created': datetime.datetime(2021, 6, 18, 21, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654690179, 'comment_body': 'The reason is that these ignores are added to this file and there are a lot of them. These can be removed after py3. So made a todo for them.', 'comment_created': datetime.datetime(2021, 6, 18, 21, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654691059, 'comment_body': 'I had a similar conversation with Vojta, please see the [thread](https://github.com/oppia/oppia/pull/13060#discussion_r651736365). And yes they will be used. Thanks!', 'comment_created': datetime.datetime(2021, 6, 18, 21, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654697081, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 18, 22, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654699158, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 18, 22, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654807735, 'comment_body': 'But it adds lots of extra types testing + unwanted information. (Note: We have also excluded having docstring for test_* functions)', 'comment_created': datetime.datetime(2021, 6, 19, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654808035, 'comment_body': 'I think we can write a pylint check to ensure all the imports are used in the file, right? (Though this can be a future work)', 'comment_created': datetime.datetime(2021, 6, 19, 15, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654808363, 'comment_body': '> These are python3 requirements.\r\n\r\nWe are using mypy for the python2.7 type check, right? does it need python3 libs? (not sure!)\r\n\r\nAlso, in that case, we can call it py3_requirements.txt? (It can be used for other features which need py3 requirements and in future, we can replace it with requirements.txt) wdyt?', 'comment_created': datetime.datetime(2021, 6, 19, 15, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654808553, 'comment_body': 'You can read the description in the action file. (I think it makes sure that we merge the branch with upstream/develop before running the test.)', 'comment_created': datetime.datetime(2021, 6, 19, 15, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654808586, 'comment_body': 'I think the `/python_utils*.py` is not added in the correct way, can you also fix that, that would be great! :)', 'comment_created': datetime.datetime(2021, 6, 19, 15, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654809337, 'comment_body': ""Sorry, I didn't get it! You mean we only mypy + typings need to be installed to run this script? In that case, do we need to run intall_third_party_libs in the `.github/workflows/backend_type_checks.yml `?"", 'comment_created': datetime.datetime(2021, 6, 19, 15, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654809707, 'comment_body': ""I would suggest only passing `['file1', file2]` to this `get_mypy_cmd` and have a clear docstring, will that e fine?\r\n\r\nAlso, I think if you'll change action for this arg to `store` instead of `append` then it will fix the issue."", 'comment_created': datetime.datetime(2021, 6, 19, 15, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 654841884, 'comment_body': 'Corrected the position of python_utils and added TODOs.', 'comment_created': datetime.datetime(2021, 6, 19, 21, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654841930, 'comment_body': 'It is not required as far as I know. Thanks!', 'comment_created': datetime.datetime(2021, 6, 19, 21, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654842199, 'comment_body': 'Mypy can type check py2 code but it needs python3 to run. This was one of the main blockers of this PR. So had to make a lot of changes. And the name can remain same as there is a TODO to add these to the original requirements.txt file and this will remain same.', 'comment_created': datetime.datetime(2021, 6, 19, 21, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654842586, 'comment_body': 'Thanks, it worked.', 'comment_created': datetime.datetime(2021, 6, 19, 21, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654842772, 'comment_body': 'Typing will be installed from `install_third_party_libs.py` and mypy will be installed from run_mypy_checks. So yes, `install_third_party_libs.py` is needed.', 'comment_created': datetime.datetime(2021, 6, 19, 21, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654843276, 'comment_body': 'We will be changing the type annotation syntax after python3 migration. \r\nThe future annotations will look like this(after py3 migration):\r\n`def(x: int, y: int) -> int:`\r\nDo you think linters will still find the imported values unused?', 'comment_created': datetime.datetime(2021, 6, 19, 21, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654843364, 'comment_body': 'And other point was that we had a look at other organisations and found that they also add type annotations to test files. Example: Zulip.', 'comment_created': datetime.datetime(2021, 6, 19, 21, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654920475, 'comment_body': 'Changed', 'comment_created': datetime.datetime(2021, 6, 20, 11, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 654949764, 'comment_body': ""I think it's an important step to ensure that all the PR builds are running with changes in develop, right? Are you facing any issue with having this action? Let me know I can help if needed! :) "", 'comment_created': datetime.datetime(2021, 6, 20, 15, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 655410920, 'comment_body': 'I think that this can be resolved. PTAL', 'comment_created': datetime.datetime(2021, 6, 21, 14, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 655432940, 'comment_body': ""@DubeySandeep I had a look at lint.yml and these checks are similar to them so don't think this will be required."", 'comment_created': datetime.datetime(2021, 6, 21, 14, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 655436679, 'comment_body': 'I have added it. Thanks!', 'comment_created': datetime.datetime(2021, 6, 21, 14, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 655473742, 'comment_body': ""> And other point was that we had a look at other organisations and found that they also add type annotations to test files. Example: Zulip.\r\n\r\nThanks for the info!\r\n\r\nI'm fine with leaving it as is if it's not possible to exclude test_* function for typecheck!\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 21, 15, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 655476012, 'comment_body': ""Yeah, I'm not sure the reason behind the inconsistency, I'll check with the automated-test team, meanwhile, you can leave it as-is. Thanks for all the info! :)"", 'comment_created': datetime.datetime(2021, 6, 21, 15, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 655478306, 'comment_body': 'Do we have any close expected date for the python3 migration completion? If not, I would suggest creating an issue to have a linter check and we can add one later!', 'comment_created': datetime.datetime(2021, 6, 21, 15, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 655482071, 'comment_body': 'Can we change the ImportOnlyModulesChecker to allow importing class (not modules) from `typings` and `__future__`? [Feel free to create an issue and do it in a separate PR]', 'comment_created': datetime.datetime(2021, 6, 21, 15, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 655492464, 'comment_body': 'Overall solution:\r\n- To avoid import-only-modules:  change the ImportOnlyModulesChecker to allow importing class (not modules) from typings and` __future__`\r\n\r\n- To avoid unused-import: Move all typing class to `dummy-variables-rgx` in .pylintrc (Possible?)\r\n\r\n- To avoid isort:skip: Add imports in sorted order*\r\n\r\n[I would suggest doing this in a separate PR, lets get this PR merged]', 'comment_created': datetime.datetime(2021, 6, 21, 15, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 655515848, 'comment_body': 'https://github.com/oppia/oppia/issues/13169 Added1', 'comment_created': datetime.datetime(2021, 6, 21, 16, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 655517716, 'comment_body': '@DubeySandeep Can I postpone this a bit? I already have a lot of work pending. Thanks a lot!', 'comment_created': datetime.datetime(2021, 6, 21, 16, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 655521756, 'comment_body': ""> @DubeySandeep Can I postpone this a bit? I already have a lot of work pending. Thanks a lot!\r\n\r\nI'm fine with postponing if we are not going to add more disable flags* [Note: I think this will help to have a better python typing structure for developers to write else they will start using disable flag and it will look like we are promoting such flag usage.]"", 'comment_created': datetime.datetime(2021, 6, 21, 16, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 655524516, 'comment_body': ""I see, I'm fine to have it if we have TODO comment and github-issue for the same!"", 'comment_created': datetime.datetime(2021, 6, 21, 16, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 655526340, 'comment_body': 'So I would suggest installing everything through `install_third_party_libs` and running `install_third_party_libs` from `run_mypy_checks`. [Considering this check will raise error without initially running the `install_third_party_libs` script, right?]', 'comment_created': datetime.datetime(2021, 6, 21, 16, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 655527896, 'comment_body': ""> Do you think linters will still find the imported values unused?\r\n\r\nI'm not sure but until the python3 migration is not completed we should have a lint check to ensue that we don't have any unwanted typing imports in a file*"", 'comment_created': datetime.datetime(2021, 6, 21, 16, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 655532679, 'comment_body': 'https://github.com/oppia/oppia/issues/13131 Here is the issue. The comment is already added to mypy_requirements.txt file. PTAL.', 'comment_created': datetime.datetime(2021, 6, 21, 16, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 655534567, 'comment_body': 'We are already excluding a lot of files and excluding test files will not be a problem. I, @sajalasati , @vojtechjelinek  and @seanlip had a long discussion about this and the main reason for us to add type annotations to test files was that other organisations also add them. Thanks!', 'comment_created': datetime.datetime(2021, 6, 21, 16, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 655539300, 'comment_body': ""I get your point. I'll fix this with a new PR. Here is the issue for this: https://github.com/oppia/oppia/issues/13171 . \r\nNote: # isort: skip tells me to split this import for each of the type. Example:\r\n```\r\nfrom typing import Any\r\nfrom typing import Dict\r\n```\r\nSo do you think it is good to import this way?"", 'comment_created': datetime.datetime(2021, 6, 21, 16, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 655541640, 'comment_body': ""We tried this. But weren't able to do so because of py2 and py3 mismatch. So this was our solution till the python3 migration. A lot of problems are arising here due to current working in py2 version.  We cannot install everything from install_third_party_libraries right now. Thanks a lot!"", 'comment_created': datetime.datetime(2021, 6, 21, 16, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 655542392, 'comment_body': ""I don't think we should put in time here. Py3 migration will be complete in a month or so. Till then manual checking of imports would be the best option. Thanks!"", 'comment_created': datetime.datetime(2021, 6, 21, 16, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 655612410, 'comment_body': ""@hardikkat24 I think you didn't get what @DubeySandeep is trying to say here.\r\n\r\nCurrently all scripts can work based on the dependencies that were installed using `install_third_party_libs`. Take `run_backend_tests` for example -  it simply [calls third party libs script](https://github.com/oppia/oppia/blob/976a2146c250024a74359048686325d318b8a23f/scripts/run_backend_tests.py#L69) to ensure everything is setup before you can run it. \r\n\r\nCan't we move `install_mypy_prerequisites` function also to the `install_third_party_libs` file? You can write line 759 there too, right? This is a good structure we try to follow in the codebase and makes sure everything is setup before checks are run.\r\n\r\nCurrently if someone has a missing dependency and they try to run this check, they will get missing libraries errors instead of them getting automatically installed. Do you get what I am saying?"", 'comment_created': datetime.datetime(2021, 6, 21, 18, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 655938857, 'comment_body': 'Installing mypy prerequisites cannot be added to install_third_party_libs because mypy prerequisites are python3 modules. All our backend tests run using python2 so we cannot add py3 modules to install_third_party_libs.\r\n@sajalasati As per the discussion, I have added install_third_party_libs in the mypy script itself. Thanks!', 'comment_created': datetime.datetime(2021, 6, 22, 7, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 656353342, 'comment_body': 'Resolving as it was approved by @aks681.', 'comment_created': datetime.datetime(2021, 6, 22, 15, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 656354989, 'comment_body': 'Resolving as the codeowners were changed.', 'comment_created': datetime.datetime(2021, 6, 22, 15, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 656383217, 'comment_body': ""> Is there any way to disable the type for test functions? (I don't think this is useful and it's never going to change, right?)\r\n\r\n@DubeySandeep - @hardikkat24 told me in an offline discussion that we can only exclude complete files and not test methods. So what do you think we can exclude the entire test files? Else we will have to proceed this way only I guess - right @hardikkat24?"", 'comment_created': datetime.datetime(2021, 6, 22, 16, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 656515817, 'comment_body': '@DubeySandeep  Yes. Files can be ignored. Not methods. We can add a regex for files to be excluded. ', 'comment_created': datetime.datetime(2021, 6, 22, 19, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 656516091, 'comment_body': ""@DubeySandeep I'll make a PR for this before I add type annotations to new files."", 'comment_created': datetime.datetime(2021, 6, 22, 19, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 656516474, 'comment_body': ""@DubeySandeep . Python3 migration will be completed in a month or so. I don't think this is required. Thanks!"", 'comment_created': datetime.datetime(2021, 6, 22, 19, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 656517501, 'comment_body': '@DubeySandeep PTAL. I have added `install_third_party_libs` inside mypy script itself. PTAL.', 'comment_created': datetime.datetime(2021, 6, 22, 19, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 657500733, 'comment_body': 'Do we still need this step?', 'comment_created': datetime.datetime(2021, 6, 23, 22, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 658043864, 'comment_body': '`install_third_party_libs.main()` inside `run_mypy_checks` would install all the packages and is that why you are saying this line becomes redundant @DubeySandeep?\r\n\r\nWe also import python utils in `run_mypy_checks` and it might raise some external library import error perhaps? Not sure about that. But I see this pattern is only being used in other checkers also like `run_backend_tests` - see [here](https://github.com/oppia/oppia/blob/140c2919b6a8ba5e28c701558bf0fa2efc76d485/.github/workflows/backend_tests.yml#L29) and [here](https://github.com/oppia/oppia/blob/140c2919b6a8ba5e28c701558bf0fa2efc76d485/scripts/run_backend_tests.py#L69)? Do we plan to fix those too?', 'comment_created': datetime.datetime(2021, 6, 24, 15, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 658048151, 'comment_body': '@DubeySandeep Do you think this should be outside main? For others like `run_backend_tests` I see they are written at the [top](https://github.com/oppia/oppia/blob/140c2919b6a8ba5e28c701558bf0fa2efc76d485/scripts/run_backend_tests.py#L69).', 'comment_created': datetime.datetime(2021, 6, 24, 15, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 658645803, 'comment_body': '> We also import python utils in run_mypy_checks and it might raise some external library import error perhaps\r\n\r\nYes the import errors were thrown without the install_third_party_libs in the workflow.', 'comment_created': datetime.datetime(2021, 6, 25, 9, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 658646920, 'comment_body': '@sajalasati I had a look at pre_commit_linter and we install the libraries inside main. Thanks!', 'comment_created': datetime.datetime(2021, 6, 25, 10, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 658996315, 'comment_body': ""It is required on top, if the script needs to import something which is expected to install via install_third_party_libs. [Make sure that we don't need to install any third_party to import python_utils on top! Maybe test the run_mypy script after clearing oppia_tools and third-party dir. (OR move thises folders to a temporary dir and then run the script to check whether it starts downloading third_party_libs)]"", 'comment_created': datetime.datetime(2021, 6, 25, 19, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 658998071, 'comment_body': 'We had that pattern in circleCI for some reason to avoid install libs multiple times, but I think now we can remove those lines!', 'comment_created': datetime.datetime(2021, 6, 25, 19, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 659153701, 'comment_body': '@DubeySandeep I tried running checks without install_third_party_libs, errors were thrown because of missing imports. ', 'comment_created': datetime.datetime(2021, 6, 26, 10, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 659154564, 'comment_body': ""When I ran the workflow without install_third_party_libs and an error occured saying 'yaml' was not found. This occured due to import python_utils. What should be done here? I am trying to mimic the way lint.yml is written."", 'comment_created': datetime.datetime(2021, 6, 26, 11, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 659168232, 'comment_body': ""> When I ran the workflow without install_third_party_libs and an error occured saying 'yaml' was not found. This occured due to import python_utils. What should be done here? I am trying to mimic the way lint.yml is written.\r\n\r\n@DubeySandeep Then it seems we do need to have third party libs installed for python_utils to be imported without errors. So I would suggest @hardikkat24 to shift `install_third_party_libs.main()` to the top (like the example I gave here) and also keep `run: python -m scripts.install_third_party_libs ` in the yml file for now. We can perhaps create new issue to solve this and get this PR merged ASAP - @DubeySandeep will you do this?"", 'comment_created': datetime.datetime(2021, 6, 26, 13, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 659171404, 'comment_body': '@sajalasati I have moved install_third_party_libs to the top. PTAL.', 'comment_created': datetime.datetime(2021, 6, 26, 14, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 659191670, 'comment_body': '@DubeySandeep this will be handled by @hardikkat24 using --skip-install flag as mentioned in #13088 in his upcoming PR #13114.', 'comment_created': datetime.datetime(2021, 6, 26, 16, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}]","[{'commit_sha': 'e7d6e7545b01ac6ae93beed1423264b838c9cfda', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f75c05231d023f14323cb81891bf9971568cb9e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4378a8e1170e51477a8905b8cce358c200a3a1a5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3ba1ef5953df63b065aa9831b80aca8119f0c79', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37ea8c355d2156a1464ae1408c72ac76e4668822', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24816cb1a60c3e215727c7afce73363c5a110117', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2587593ac41ea48a5abc8d01d436e66a4916f0ad', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71941474d551bda6617a7b075b4d4641a2fa8b31', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ae44119820f1c474070f92e9342104e47bfed07', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '967a7473fdc2b7547cd2f5f6d115499eb560ec8c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ec854e798ca3335d1db908b11b0127a650fb388', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3093f843289a3a6bab1252aa5c68fbaa88194b94', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2fd8e90acba706e59ed14d44e028065de496199', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f879ad6485d33cc1ef84b57b18636e9c03823ae', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1ba93a29f78e85d0a7e44518448523e293551a1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d25954d92e333b1857305814ec43c56a7661afa', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2efe3f09e8e273eaa790e9801855780e355c3fd', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '632ff60e1bfa43fc7736647f72957f86865df4ec', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '743d1dd9b5c0c55ed49461ed74dddd371dd622b8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6b3da5a4f805101016c79ed0ce4825bca87b477', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a824754ec66f999ead7ded24a4ce21abf837863', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3cf1fa11bf6a686dbaf7942069761701324c7b6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2df3fbf3a5e4ff4db946d9fad77f7cdd6f2d7210', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '392d957c1b8fdabc84410d5bd23fa50aaa896d83', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3875e8ad6d9e2a3286dffdc1bdbd6444880a1d6c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94e95536036ae1c6fd7e8e39795017ebf9cf5e9a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3070f94be5360d409831416c901eaf4ebc1cb50a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de8b8a98e4d7f2a6e1daf1131d3f7cd820fed4da', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e9557181f80b31f6c7bb3eeb76dc0e3801aeb02', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d576a0289600e7b6baf87a2addb50af99af5a1b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3225ace4994256522cb9df8e747e16647436e5aa', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4346016cfc39898ecbf4dcda6994a522d2392f84', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31d99ae0b3c25a26cb9db7dd06802d6c7155d411', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '632e5c5c4609458a0816fd6caf436d5f92770885', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '228089d20de017178970858f43f734a1bd42ee5c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8283cff744cee8c65a231c5c5e56f0d5a3ddcaa4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fcb8fd4d45091a046ccb9ac873c932a78718640', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9ef4eb7d971097508db7df4304ec74785ba524e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5d76fa60284c1c3d6cf6ff331997e6d5329772b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee8d9f53f598e85ab6a6991e2ed2f6213c0371a9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3154363eb453be57be938bf3067d9e598919db3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a26f0a13ffec0ba0a06dd572f69046e12d3e577', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab04746e5cc3592941fae1801a8f53fa224f7e81', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f8ba0fe0e2273c6b77473dffa1b3f6cdca0a2e5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2648e6bcf0cf56a8d0d78b921154e103fe554c26', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3dfb0add9e1cc6be04d5522fea4ce50d1f44b06', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a9a36dad0c6a5a4ad39d7385e5a15e12cb4ccc6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e81a7fd84fb72a223f58b7fab33e681717b26b2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acbfa38ba11952926414e4bdb0cc0069fa695890', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6893aa51fe81adb09fd08d462ec9612e2af0a42', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a23028e2baa18869a6372c7a069983b2140d4d25', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fe7a5d0256d4b1bdd6388a0efc17241c14b1a67', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8ea3d7a5cecf7240f4c9221855a5f0a38233d15', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e87589dabeb91def66b461cea5b617459dece7', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05afb4727d6e25acdb2a33ad45d2840c05d26369', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e5be46351e59acd383e13dc00806e1beef9b978', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36ddca7ed7027f05980d9eb82458112ca01568b1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '769fcdf414d090de1371ab12b4822b95fabd82fc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35cd7e26223ca699b58415f20be0c892a96c49ac', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c14762e8350a6ed399af4c9cbfb56c6dd1ba3960', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '173ca903584c84f6e70abe46144d6e66d72b092e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dbda691477f046de245b0c60c4d776e6713ed48', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3152dbcc140df345d08232eab323a4fca27628e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04a1811425ca7aae7d1bdd833d0975b6d56c79a9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd738df6703450afc74c406d41708859f192124b9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '477eb92c9bf8ebd7fc0b339f87058ed04426e707', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5223932a306bd8638caf158a94eba338ef39cd05', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78bf9a06230bc802dcdb5fcff663a0d0b841b680', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0953553dab4a39f936629d49279b50e32b0aa89', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '498b1eca3afc10f3ce0682808d08a3a1a2c3936b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '330809be90e5c9999d73af6d34febad82f56e7c8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e625471c1eba3d52c5027792df4319aa3d1ef63', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c1b7d90b1ce22118d0e562db7aca138d98f39ac', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d063bfdd16652d6b610b16b89d8f0d36b4bb68c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61fe64f940475c00c6eb348a13df172efe936da2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a3b43dbf642ea328c5f115b2bacd99543e657c8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49cf81ccce3ee546631cbf275a02fe87a93096a5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25365f4f86a1c39f529cda7ada03bee8677b5489', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da76d9bff8ba616d0bfe7c35a67b901de6170223', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15a2b92faa45fea94964bf691be51e6bca0658f4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c886add0ea81d125f941912d8977cb2ded1241a4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '936b7ec422b7c1f1c47023929319aef465a558a4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71bd38de6b407ead9eb81648ee6f748202500b6e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '645843427ea8298e825a61ce399adefa8177be48', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}]",Hardik Katehara,54679643,,User,,28,,35,21
672454424,Fix #13088: Add pre-push checks for MyPy,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #13088 .
2. This PR does the following: This PR adds pre-push checks for MyPy and adds skip-install flag in mypy script. This PR is stacked on PR#13054.

**Runtime data of mypy script:**
**Note:** This data assumes there is no mypy cache. But cache is created on the local system for mypy whenever mypy tests run.  This cache further speeds up the mypy checks. The speed reduced may vary from 2s-5s.
Files passed to mypy script: Files/directories that mypy checked
Number of files checked: Number of files checked by mypy
Number of Errors Thrown: Number of mypy errors
Time Taken: Time taken by mypy script to run with --skip-install flag enabled
| Files passed to mypy script | Number of files checked | Number of Errors Thrown | Time Taken (is sec)|
|---|---|---|---|
| core/controller/admin.py | 1 | 241 | 8.23 |
| core/domain/ | 225 | 23404 | 15.14 | 
| core/ | 465 | 38684 | 20.63 | 15 |

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

When Pre-push mypy checks pass:
![Screenshot from 2021-06-28 01-56-36](https://user-images.githubusercontent.com/54679643/123558579-a6f39b00-d7b4-11eb-9c0c-0e85e90dc0fd.png)

When Pre-push mypy checks fail:
![Screenshot from 2021-06-28 01-59-29](https://user-images.githubusercontent.com/54679643/123558615-e1f5ce80-d7b4-11eb-9878-ea0b2edc43fd.png)
![Screenshot from 2021-06-28 01-59-08](https://user-images.githubusercontent.com/54679643/123558619-e6ba8280-d7b4-11eb-8836-fd3518bac3f8.png)


## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13114,https://api.github.com/repos/oppia/oppia/pulls/13114,https://github.com/oppia/oppia/pull/13114,closed,122,40,5,103,23,31,1,1,[{'name': 'PR: LGTM'}],2021-06-17 09:49:12+00:00,2021-07-03 06:28:39+00:00,1370367.0,"15 days, 20:39:27","[{'comment_id': 659325297, 'comment_body': 'Use a more descriptive name for this. What causes this failure? Mention that in the name as done in other tests.', 'comment_created': datetime.datetime(2021, 6, 27, 13, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 659325889, 'comment_body': 'With true what? Use a name like `test_install_third_party_with_skip_install_as_true` - or something around that. And why is there no assert statement here? What is it testing that you are testing and how you are doing that - that is not clear here.', 'comment_created': datetime.datetime(2021, 6, 27, 13, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 659325994, 'comment_body': 'Ditto - Use a better test name here. And explain why an assert statement cannot be used here?', 'comment_created': datetime.datetime(2021, 6, 27, 13, 57, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 659326271, 'comment_body': '@hardikkat24 Can you explain why this line is being removed here?', 'comment_created': datetime.datetime(2021, 6, 27, 13, 59, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 659327312, 'comment_body': ""@DubeySandeep Is it possible to do the same for linters too - i.e. include a skip install flag in the commands list itself, and do the installing third party libs part separately in main (or wherever correct). I thought this would be helpful as we wouldn't have to depend on linter run to ensure all third party libs are installed for mypy before it can run.\r\n@hardikkat24 Did you explore this?"", 'comment_created': datetime.datetime(2021, 6, 27, 14, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 659330088, 'comment_body': 'Sorry, removed it by mistake.', 'comment_created': datetime.datetime(2021, 6, 27, 14, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 659370970, 'comment_body': ""Changed the name. PTAL.\r\nAnd the test is that running this method doesn't throw any error. We do this in our codebase. PTAL at the example [here](https://github.com/oppia/oppia/blob/4172bcc457b5fff70bb8ee70e596b0c7940b2fdb/scripts/run_e2e_tests_test.py#L145)."", 'comment_created': datetime.datetime(2021, 6, 27, 20, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 659371260, 'comment_body': 'Done. PTAL', 'comment_created': datetime.datetime(2021, 6, 27, 20, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 659371305, 'comment_body': 'Explained in the other example. Thanks!', 'comment_created': datetime.datetime(2021, 6, 27, 20, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 659371822, 'comment_body': '@sajalasati In pre-push hook before mypy checks, we check for backend python lib inconsistencies. See [here](https://github.com/oppia/oppia/blob/4172bcc457b5fff70bb8ee70e596b0c7940b2fdb/scripts/pre_push_hook.py#L499)\r\nSo do you think that is enough?\r\nAnd after that if there are files to lint, then linter is run with installs all backend python libs.\r\nThanks!', 'comment_created': datetime.datetime(2021, 6, 27, 20, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 659750460, 'comment_body': '`test_main_failure_due_to_mypy_errors `', 'comment_created': datetime.datetime(2021, 6, 28, 12, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 659751847, 'comment_body': 'cc @DubeySandeep - PTAL once!', 'comment_created': datetime.datetime(2021, 6, 28, 12, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 659761251, 'comment_body': ""> @sajalasati In pre-push hook before mypy checks, we check for backend python lib inconsistencies. See [here](https://github.com/oppia/oppia/blob/4172bcc457b5fff70bb8ee70e596b0c7940b2fdb/scripts/pre_push_hook.py#L499)\r\n> So do you think that is enough?\r\n> And after that if there are files to lint, then linter is run with installs all backend python libs.\r\n> Thanks!\r\n\r\n@hardikkat24 As per the function documentation, I don't think it's installing any dependencies, it's just checking for inconsistencies."", 'comment_created': datetime.datetime(2021, 6, 28, 12, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 659786110, 'comment_body': '@sajalasati I think that if the backend libraries are not installed fully, the script will stop executing due to inconsistencies. Am I missing something here?', 'comment_created': datetime.datetime(2021, 6, 28, 13, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 660963501, 'comment_body': 'Is it possible to run mypy checks only for the changed files? (similar to lint checks)', 'comment_created': datetime.datetime(2021, 6, 29, 21, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 660964230, 'comment_body': 'This is important as the time for type check is expected to increase rapidly, right? (And we are trying to reduce the pre-push load as much as possible)', 'comment_created': datetime.datetime(2021, 6, 29, 21, 7, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 660976546, 'comment_body': ""@DubeySandeep The time to run type checks won't be much as you can see in the PR description. This time further reduces as MyPy creates cache. \r\nIn linters, we can run tests on all the files. In MyPy tests we have a list of files and directories which do not have type annotations so we would have to check every changed file whether it exists in the list or not and type check only type annotated + changed file.\r\nDo you think it is worth it? Thanks!"", 'comment_created': datetime.datetime(2021, 6, 29, 21, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 660985755, 'comment_body': 'And there was one more important point, a change somewhere in a file can result in mypy errors in other files. So I would say we should type check all the type annotated files where they are changed or unchanged.', 'comment_created': datetime.datetime(2021, 6, 29, 21, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 661616437, 'comment_body': ""@DubeySandeep Let's suppose there are 2 files X and Y. X has function f definition and Y calls the function f.\r\nNow in one PR, type annotation to file Y is added. Here we have added `# type: ignore[no-untyped-call]` after the function f call to tell mypy to not throw the error due to function f not having type annotation.\r\nNow in a different PR, type annotations to file X is added. This will lead to mypy error in file Y. The error will be because the `#type: ignore[no-untyped-call]` we added earlier is not used now as function f has type annotations.\r\nNow there are two cases:\r\n1. Running pre-push type checks on all files: The error in file Y will be thrown and developer will fix them before pushing.\r\n2. Running pre-push check on changed files: The error in file Y will not be thrown if file Y is not changed in the PR. The developer will see this error in CI checks and will have to fix this and push again.\r\n\r\nSo I would highly suggest running pre-push type checks on all the type annotated files."", 'comment_created': datetime.datetime(2021, 6, 30, 16, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 662340627, 'comment_body': '@hardikkat24 Please edit the above msg and also explain with the example you discussed with me - how was mypy handling that error before (in PR for Y file) and what error would be shown had we been running mypy check locally for all files. (An example would help in understanding your argument better)', 'comment_created': datetime.datetime(2021, 7, 1, 14, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 662367550, 'comment_body': '@sajalasati Added the example.', 'comment_created': datetime.datetime(2021, 7, 1, 14, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 662843253, 'comment_body': ""@hardikkat24 I'm not sure why pre-push check should rely on different PRs?"", 'comment_created': datetime.datetime(2021, 7, 2, 8, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 662869432, 'comment_body': '```suggestion\r\ndef execute_mypy_checks():\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 9, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 662869772, 'comment_body': 'Add docstring to Returns*', 'comment_created': datetime.datetime(2021, 7, 2, 9, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 662871363, 'comment_body': ""As per our offline discussion, we're going to run checks for the entire codebase. Reasons:\r\n\r\n1. Mypy cache for files are operated with file hash so the caches are going to be reliable and useful.\r\n2. If a commit changes function definition then other modules calling such functions with invalid params won't get caught!\r\n"", 'comment_created': datetime.datetime(2021, 7, 2, 9, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 662872195, 'comment_body': '```suggestion\r\n                sys.exit(mypy_check_status)\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 9, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 662876844, 'comment_body': 'Can we remove the flags now?', 'comment_created': datetime.datetime(2021, 7, 2, 9, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 663085002, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 2, 15, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 663085049, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 2, 15, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 663085150, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 2, 15, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 663085237, 'comment_body': 'Yes. Removed.', 'comment_created': datetime.datetime(2021, 7, 2, 15, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}]","[{'commit_sha': 'e7d6e7545b01ac6ae93beed1423264b838c9cfda', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f75c05231d023f14323cb81891bf9971568cb9e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4378a8e1170e51477a8905b8cce358c200a3a1a5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3ba1ef5953df63b065aa9831b80aca8119f0c79', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37ea8c355d2156a1464ae1408c72ac76e4668822', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24816cb1a60c3e215727c7afce73363c5a110117', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2587593ac41ea48a5abc8d01d436e66a4916f0ad', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71941474d551bda6617a7b075b4d4641a2fa8b31', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ae44119820f1c474070f92e9342104e47bfed07', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '967a7473fdc2b7547cd2f5f6d115499eb560ec8c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ec854e798ca3335d1db908b11b0127a650fb388', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3093f843289a3a6bab1252aa5c68fbaa88194b94', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2fd8e90acba706e59ed14d44e028065de496199', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f879ad6485d33cc1ef84b57b18636e9c03823ae', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1ba93a29f78e85d0a7e44518448523e293551a1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d25954d92e333b1857305814ec43c56a7661afa', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2efe3f09e8e273eaa790e9801855780e355c3fd', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '632ff60e1bfa43fc7736647f72957f86865df4ec', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '743d1dd9b5c0c55ed49461ed74dddd371dd622b8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6b3da5a4f805101016c79ed0ce4825bca87b477', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a824754ec66f999ead7ded24a4ce21abf837863', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3cf1fa11bf6a686dbaf7942069761701324c7b6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2df3fbf3a5e4ff4db946d9fad77f7cdd6f2d7210', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '392d957c1b8fdabc84410d5bd23fa50aaa896d83', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3875e8ad6d9e2a3286dffdc1bdbd6444880a1d6c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94e95536036ae1c6fd7e8e39795017ebf9cf5e9a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3070f94be5360d409831416c901eaf4ebc1cb50a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de8b8a98e4d7f2a6e1daf1131d3f7cd820fed4da', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e9557181f80b31f6c7bb3eeb76dc0e3801aeb02', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d576a0289600e7b6baf87a2addb50af99af5a1b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3225ace4994256522cb9df8e747e16647436e5aa', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4346016cfc39898ecbf4dcda6994a522d2392f84', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31d99ae0b3c25a26cb9db7dd06802d6c7155d411', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08f2aad6c21e739afa51adf88144365bc34a76d7', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '632e5c5c4609458a0816fd6caf436d5f92770885', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '228089d20de017178970858f43f734a1bd42ee5c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8283cff744cee8c65a231c5c5e56f0d5a3ddcaa4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fcb8fd4d45091a046ccb9ac873c932a78718640', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9ef4eb7d971097508db7df4304ec74785ba524e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5d76fa60284c1c3d6cf6ff331997e6d5329772b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee8d9f53f598e85ab6a6991e2ed2f6213c0371a9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3154363eb453be57be938bf3067d9e598919db3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a26f0a13ffec0ba0a06dd572f69046e12d3e577', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab04746e5cc3592941fae1801a8f53fa224f7e81', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f8ba0fe0e2273c6b77473dffa1b3f6cdca0a2e5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2648e6bcf0cf56a8d0d78b921154e103fe554c26', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3dfb0add9e1cc6be04d5522fea4ce50d1f44b06', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a9a36dad0c6a5a4ad39d7385e5a15e12cb4ccc6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e81a7fd84fb72a223f58b7fab33e681717b26b2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acbfa38ba11952926414e4bdb0cc0069fa695890', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6893aa51fe81adb09fd08d462ec9612e2af0a42', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a23028e2baa18869a6372c7a069983b2140d4d25', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fe7a5d0256d4b1bdd6388a0efc17241c14b1a67', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8ea3d7a5cecf7240f4c9221855a5f0a38233d15', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e87589dabeb91def66b461cea5b617459dece7', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0be6173bd3c0b884eee0588081d62607c45ca94b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e18af76cb4f1dd54ff87df63a9ac3efc28b4ddc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05afb4727d6e25acdb2a33ad45d2840c05d26369', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e5be46351e59acd383e13dc00806e1beef9b978', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36ddca7ed7027f05980d9eb82458112ca01568b1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c96e5f08b3e37533e650a498dbdefb60947b624b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d85e6942328ac57c58d2fad7a01513e82c76488', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '769fcdf414d090de1371ab12b4822b95fabd82fc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35cd7e26223ca699b58415f20be0c892a96c49ac', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c14762e8350a6ed399af4c9cbfb56c6dd1ba3960', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '173ca903584c84f6e70abe46144d6e66d72b092e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dbda691477f046de245b0c60c4d776e6713ed48', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3152dbcc140df345d08232eab323a4fca27628e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04a1811425ca7aae7d1bdd833d0975b6d56c79a9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd738df6703450afc74c406d41708859f192124b9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '477eb92c9bf8ebd7fc0b339f87058ed04426e707', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5223932a306bd8638caf158a94eba338ef39cd05', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78bf9a06230bc802dcdb5fcff663a0d0b841b680', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0953553dab4a39f936629d49279b50e32b0aa89', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '498b1eca3afc10f3ce0682808d08a3a1a2c3936b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '330809be90e5c9999d73af6d34febad82f56e7c8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e625471c1eba3d52c5027792df4319aa3d1ef63', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c1b7d90b1ce22118d0e562db7aca138d98f39ac', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d063bfdd16652d6b610b16b89d8f0d36b4bb68c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61fe64f940475c00c6eb348a13df172efe936da2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a3b43dbf642ea328c5f115b2bacd99543e657c8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49cf81ccce3ee546631cbf275a02fe87a93096a5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25365f4f86a1c39f529cda7ada03bee8677b5489', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da76d9bff8ba616d0bfe7c35a67b901de6170223', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15a2b92faa45fea94964bf691be51e6bca0658f4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c886add0ea81d125f941912d8977cb2ded1241a4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '936b7ec422b7c1f1c47023929319aef465a558a4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c3a81594844dfc3c79b6901b5abe9e222c3d316', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '369e996f6c42ab6fc623139f87fe23b278dc8bc9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71bd38de6b407ead9eb81648ee6f748202500b6e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '645843427ea8298e825a61ce399adefa8177be48', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3957271cd437a053d1aeb56bfe2566d0c31f4e8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e1e2d62907501175d53e32fce3235ea76355fa9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5999177c33b40bb1a5069f2edcb790fb24f5c6cd', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d8d1ad600efed9f94785260e49a17eed0136465', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '479959ec1e04eb134bf68dafc7fb134c1e42f887', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdbc215a4287acc76db1d0619af8f5f1373b050c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90730076cb306aa41426f467d512d1351cd76f3b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab7a355b810eb6659fa688099ab08ee2b2d77112', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b8afe0ff3fcc4befcfa5b1ae4b7270b8bf39cb9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22fa3a2bbfb2146971f0dc40b278f493b60f45e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '480db49d9e94062638d51984ec242dd3ea92415e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '367b2381fe19d65d997aff73cc15d534a4014627', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}]",Hardik Katehara,54679643,,User,,28,,35,21
680753291,Fix #13239 and #13171: Adding type annotations to root files and fix constants errors with mypy,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #13239 and #13171.
2. This PR does the following: 
   - Adds `__getattr__` and `__setattr__` with type annotations to Constants class to fix `[attr-defined]` error of constants with MyPy.
   - Adds type annotations to root folder files except `python_utils.py` and `python_utils_test.py`.
   - Changes the pylint extension `ImportOnlyModuleChecker` to allow `__future__` and `typing` to import classes.
## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13269,https://api.github.com/repos/oppia/oppia/pulls/13269,https://github.com/oppia/oppia/pull/13269,closed,253,172,22,111,25,50,2,2,"[{'name': 'PR: LGTM'}, {'name': 'PR: Affects datastore layer'}]",2021-06-30 10:56:54+00:00,2021-07-07 17:14:03+00:00,627429.0,"7 days, 6:17:09","[{'comment_id': 662330920, 'comment_body': 'To avoid using `# pylint: disable=line-too-long`, you can modify the regex in pylint option [line-too-long](https://github.com/PyCQA/pylint/blob/5c23856c67a598a26678adfe943cc6224acec0f7/pylint/checkers/format.py#L257) to also incorporate `# type:` statements. The modified regex has to be mentioned in `.pylintrc` file to override the default value.', 'comment_created': datetime.datetime(2021, 7, 1, 14, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 662347222, 'comment_body': '```suggestion\r\n    models.Registry.import_transaction_services()# type: ignore[no-untyped-call]\r\n)\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 14, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 662347821, 'comment_body': 'Is this going to be added for all decorators?', 'comment_created': datetime.datetime(2021, 7, 1, 14, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 662350126, 'comment_body': ""Several cases like these wouldn't need to be split into multiple lines once you fix the pylint regex `line-too-long` - make sure you fix these back when you have changed the regex."", 'comment_created': datetime.datetime(2021, 7, 1, 14, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 662353758, 'comment_body': ""Where are these going to be used? (Just asking because you haven't used them yet or defined their usage afaik)"", 'comment_created': datetime.datetime(2021, 7, 1, 14, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 662424079, 'comment_body': 'Why this change? How come it was excluded in develop because I see its test file was already there? Please look into it once.', 'comment_created': datetime.datetime(2021, 7, 1, 16, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 662424463, 'comment_body': 'Same comment as above, how was this file excluded earlier?', 'comment_created': datetime.datetime(2021, 7, 1, 16, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 662427605, 'comment_body': 'Why is this not (float,int)? (I cannot recall exactly the reasoning behind this you once told me - you should add this convention to the wiki along with the entire reasoning if it turns out to be the right thing, so that in future you can just guide other people to it)', 'comment_created': datetime.datetime(2021, 7, 1, 16, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 662427966, 'comment_body': 'Ditto, why not (float, int)', 'comment_created': datetime.datetime(2021, 7, 1, 16, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 662437441, 'comment_body': 'Why can mypy here not understand the return type? Did you check the [documentation](https://docs.python.org/2.7/library/re.html#re.match) to understand this?', 'comment_created': datetime.datetime(2021, 7, 1, 16, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 662443964, 'comment_body': 'You can avoid `disable-unused-import` as suggested [here](https://github.com/oppia/oppia/issues/13171#issuecomment-871423878) and elsewhere (in other files of this PR).', 'comment_created': datetime.datetime(2021, 7, 1, 16, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 662455539, 'comment_body': 'Can you check if this ignore can be avoided using the following syntax:\r\n```python\r\nfor schemas, error_msg in invalid_schemas_with_error_messages.items():\r\n```\r\nWe already use this syntax in our codebase - [ref](https://github.com/oppia/oppia/blob/f208d8709b40befcfcb544282d65c35851ddb55c/core/jobs.py#L263).', 'comment_created': datetime.datetime(2021, 7, 1, 17, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 662592433, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 21, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 662593466, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 21, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 662595355, 'comment_body': ""No that was just an example to show similarity between Unicode and str. I kept float here because why can't we specify the max-value of float to be float."", 'comment_created': datetime.datetime(2021, 7, 1, 21, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 662599520, 'comment_body': 'The error thrown here is: \r\n`main.py:102: error: Untyped decorator makes function ""get"" untyped  [misc]`.\r\nThis ignore will be there for untyped decorators.', 'comment_created': datetime.datetime(2021, 7, 1, 21, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 662603820, 'comment_body': ""I seriously don't know how come these files are not included in the denylist. I just saw them throwing errors and added them to the list."", 'comment_created': datetime.datetime(2021, 7, 1, 21, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 662603890, 'comment_body': ""I seriously don't know how come these files are not included in the denylist. I just saw them throwing errors and added them to the list."", 'comment_created': datetime.datetime(2021, 7, 1, 21, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 662747514, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 2, 5, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 662748348, 'comment_body': ""In main.py we import core.controllers.base and base uses backports. So that's why."", 'comment_created': datetime.datetime(2021, 7, 2, 5, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 662749841, 'comment_body': ""I was stuck here for long. But now found out that re.match() returns a match object or none. So now I'll return `bool(re.match(..))`"", 'comment_created': datetime.datetime(2021, 7, 2, 5, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 662770144, 'comment_body': ""No, here we have deliberately used invalid schema. Here one schema is in the form of list. That's why this ignore is used."", 'comment_created': datetime.datetime(2021, 7, 2, 6, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 662825322, 'comment_body': 'This is not done here because solution is not working as expected. Will fix this when we find a solution for this.', 'comment_created': datetime.datetime(2021, 7, 2, 8, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 663355764, 'comment_body': ""I don't see any problem in that, but let's keep the mentioned type only if there aren't other reasons."", 'comment_created': datetime.datetime(2021, 7, 3, 11, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 663357086, 'comment_body': 'If you are able to fix it, then leave an update on this thread.', 'comment_created': datetime.datetime(2021, 7, 3, 11, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 663360024, 'comment_body': 'There were three things to be fixed.\r\n1. pylint: disable=import-only-modules. This was fixed after updating the pylint extension ImportOnlyModulesChecker\r\n2. pylint: disable=unused-import. The solution of dummy-variable-rgx was not working.  See [here](https://github.com/oppia/oppia/issues/13171#issuecomment-872791769).\r\n3. isort: skip. The solution suggested by Sandeep was working but leading to other issues. See [here](https://github.com/oppia/oppia/issues/13171#issuecomment-872791071).', 'comment_created': datetime.datetime(2021, 7, 3, 12, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 663383383, 'comment_body': ""For 3 I've replied on the issue itself - [Link](https://github.com/oppia/oppia/issues/13171#issuecomment-873433095)\r\nFor 2, I don't have a solution ([ref](https://github.com/oppia/oppia/issues/13171#issuecomment-872810248)), so acc to me then you can keep the ignore statement, else you can talk to @DubeySandeep."", 'comment_created': datetime.datetime(2021, 7, 3, 16, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 663469014, 'comment_body': 'Are we expecting to remove this once the codebase is migrated to py3? If yes, then please create an issue and add a TODO comment above*', 'comment_created': datetime.datetime(2021, 7, 4, 8, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 663469068, 'comment_body': 'Please add typings to third_party in isort.config file*', 'comment_created': datetime.datetime(2021, 7, 4, 8, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 663527989, 'comment_body': ""is it possible to write strict type i.e, as we are expecting dict to have a specific key, so are we expecting to have such type check? [Sorry, I've no experience with python type checks, so maybe my question is silly/incorrect!]"", 'comment_created': datetime.datetime(2021, 7, 4, 16, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 663529416, 'comment_body': ""Instead of making this a module property, should we make it a class property for the specific lint check? (Another option is to pass it via .pylintrc and have `allowed-modules-to-import-internals` (or something around that) as an option for the checker.)\r\n\r\nI'm fine with either of the above solutions*"", 'comment_created': datetime.datetime(2021, 7, 4, 16, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 663532267, 'comment_body': 'Have a separate test function `test_importing_internals_from_allowed_modules_does_not_raise_message`\r\n`', 'comment_created': datetime.datetime(2021, 7, 4, 17, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 663532432, 'comment_body': 'Are you expecting the mypy checks to be required i.e, a compulsory check? (Note: Currently, we can mere PR which fails mypy checks as it\'s not a ""required"" check.) ', 'comment_created': datetime.datetime(2021, 7, 4, 17, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 663555021, 'comment_body': ""Ah yes! I get you. I was also confused and wanted to ask do we want to do this? @seanlip suggested me to use [TypedDict](https://docs.python.org/3/library/typing.html#typing.TypedDict). But the documentation mentions 'New in version 3.8'. So I don't think we can use it here. We will be migrating to py3.7. \r\nAnd one more point, type annotations in the form of TypedDict will make our code messier. In typescript, the type is defined just after the variable but in python, this will make our code look clumsy.\r\nExample:\r\n```\r\nfrom typing import TypedDict\r\n\r\nPoint2D = TypedDict('Point2D', {\r\n  'x': int, \r\n  'y': int, \r\n  'label': str\r\n})\r\n\r\na = {'x': 1, 'y': 2, 'label': 'good'} # type: Point2D\r\n\r\n```\r\nWhat do you think? @sajalasati @DubeySandeep "", 'comment_created': datetime.datetime(2021, 7, 4, 20, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 663964408, 'comment_body': 'Added', 'comment_created': datetime.datetime(2021, 7, 5, 14, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 663969422, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 5, 14, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 663969792, 'comment_body': 'Done using a class property.', 'comment_created': datetime.datetime(2021, 7, 5, 14, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 663970366, 'comment_body': ""I don't think so. We will be changing this when we make our type annotations py3 style(if we do so). Thanks!"", 'comment_created': datetime.datetime(2021, 7, 5, 14, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 664094488, 'comment_body': ""@DubeySandeep PTAL - [here](https://github.com/oppia/oppia/issues/13171#issuecomment-873441762) - I discussed with @hardikkat24 but didn't find a proper solution i.e. we would have to use both isort skip and disable unused-import. I wanted to resolve this comment but leaving for you to take a look."", 'comment_created': datetime.datetime(2021, 7, 5, 19, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 664094573, 'comment_body': '@hardikkat24 Any update on this?', 'comment_created': datetime.datetime(2021, 7, 5, 19, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 664132900, 'comment_body': '@sajalasati Sorry, I forgot about this. Done. Thanks!', 'comment_created': datetime.datetime(2021, 7, 5, 21, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 664132948, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 5, 21, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 664787393, 'comment_body': ""> We will be changing this when we make our type annotations py3 style(if we do so)\r\n\r\nIs there any issue to track this task? (An issue is important here as there aren't any stimuli (or any test will fail) that will remind us to undo this change.)\r\n\r\nAlso, the `# type: ...` is compatible with py3? (for my knowledge)"", 'comment_created': datetime.datetime(2021, 7, 6, 18, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664789112, 'comment_body': 'The example looks fine and simple to me. (Maybe the name should have a `Type` prefix?)', 'comment_created': datetime.datetime(2021, 7, 6, 18, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664797662, 'comment_body': ""Considering we have added __future__ here can we remove the flags from all the future imports? (I can create a separate PR if it's possible, can you create a github-issue for the same once this PR is approved?)"", 'comment_created': datetime.datetime(2021, 7, 6, 18, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664832954, 'comment_body': 'I can add a task but it is not yet decided whether we want to change type annotations to py3 style in near future. \r\n\r\n>Also, the # type: ... is compatible with py3? \r\n\r\nYes, they are compatible.', 'comment_created': datetime.datetime(2021, 7, 6, 19, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 664836993, 'comment_body': 'Yes Type prefix can be added. But still it is new in version 3.8, can we use this in py3.7?\r\nAnd my point still stays, I think this TypedDict will make our code clumpsier.', 'comment_created': datetime.datetime(2021, 7, 6, 19, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 664839973, 'comment_body': 'I have made an [issue](https://github.com/oppia/oppia/issues/13326) for this.', 'comment_created': datetime.datetime(2021, 7, 6, 19, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 665250494, 'comment_body': 'We will be using `# isort: skip` and `# pylint: disable=unused-import` for now. We will be fixing them in new PR.', 'comment_created': datetime.datetime(2021, 7, 7, 10, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 665253187, 'comment_body': 'I think what @hardikkat24 is trying to suggest here is is that such a case might not be frequent (i.e. outside of constants file), and to decide whether to implement it codebase-wide or not, maybe we can discuss this in detail separately (what to do and the plan that we should have) - since anyways it can be implemented only after we start using python3.8+. What do you suggest?', 'comment_created': datetime.datetime(2021, 7, 7, 10, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}]","[{'commit_sha': 'e7d6e7545b01ac6ae93beed1423264b838c9cfda', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f75c05231d023f14323cb81891bf9971568cb9e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4378a8e1170e51477a8905b8cce358c200a3a1a5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3ba1ef5953df63b065aa9831b80aca8119f0c79', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37ea8c355d2156a1464ae1408c72ac76e4668822', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24816cb1a60c3e215727c7afce73363c5a110117', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2587593ac41ea48a5abc8d01d436e66a4916f0ad', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71941474d551bda6617a7b075b4d4641a2fa8b31', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ae44119820f1c474070f92e9342104e47bfed07', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '967a7473fdc2b7547cd2f5f6d115499eb560ec8c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ec854e798ca3335d1db908b11b0127a650fb388', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3093f843289a3a6bab1252aa5c68fbaa88194b94', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2fd8e90acba706e59ed14d44e028065de496199', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f879ad6485d33cc1ef84b57b18636e9c03823ae', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1ba93a29f78e85d0a7e44518448523e293551a1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d25954d92e333b1857305814ec43c56a7661afa', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2efe3f09e8e273eaa790e9801855780e355c3fd', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '632ff60e1bfa43fc7736647f72957f86865df4ec', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '743d1dd9b5c0c55ed49461ed74dddd371dd622b8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6b3da5a4f805101016c79ed0ce4825bca87b477', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a824754ec66f999ead7ded24a4ce21abf837863', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3cf1fa11bf6a686dbaf7942069761701324c7b6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2df3fbf3a5e4ff4db946d9fad77f7cdd6f2d7210', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '392d957c1b8fdabc84410d5bd23fa50aaa896d83', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3875e8ad6d9e2a3286dffdc1bdbd6444880a1d6c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94e95536036ae1c6fd7e8e39795017ebf9cf5e9a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3070f94be5360d409831416c901eaf4ebc1cb50a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de8b8a98e4d7f2a6e1daf1131d3f7cd820fed4da', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e9557181f80b31f6c7bb3eeb76dc0e3801aeb02', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d576a0289600e7b6baf87a2addb50af99af5a1b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3225ace4994256522cb9df8e747e16647436e5aa', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4346016cfc39898ecbf4dcda6994a522d2392f84', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31d99ae0b3c25a26cb9db7dd06802d6c7155d411', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '632e5c5c4609458a0816fd6caf436d5f92770885', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '228089d20de017178970858f43f734a1bd42ee5c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8283cff744cee8c65a231c5c5e56f0d5a3ddcaa4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fcb8fd4d45091a046ccb9ac873c932a78718640', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9ef4eb7d971097508db7df4304ec74785ba524e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5d76fa60284c1c3d6cf6ff331997e6d5329772b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee8d9f53f598e85ab6a6991e2ed2f6213c0371a9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3154363eb453be57be938bf3067d9e598919db3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a26f0a13ffec0ba0a06dd572f69046e12d3e577', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab04746e5cc3592941fae1801a8f53fa224f7e81', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f8ba0fe0e2273c6b77473dffa1b3f6cdca0a2e5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2648e6bcf0cf56a8d0d78b921154e103fe554c26', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3dfb0add9e1cc6be04d5522fea4ce50d1f44b06', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a9a36dad0c6a5a4ad39d7385e5a15e12cb4ccc6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e81a7fd84fb72a223f58b7fab33e681717b26b2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acbfa38ba11952926414e4bdb0cc0069fa695890', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6893aa51fe81adb09fd08d462ec9612e2af0a42', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a23028e2baa18869a6372c7a069983b2140d4d25', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fe7a5d0256d4b1bdd6388a0efc17241c14b1a67', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8ea3d7a5cecf7240f4c9221855a5f0a38233d15', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e87589dabeb91def66b461cea5b617459dece7', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05afb4727d6e25acdb2a33ad45d2840c05d26369', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e5be46351e59acd383e13dc00806e1beef9b978', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36ddca7ed7027f05980d9eb82458112ca01568b1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '769fcdf414d090de1371ab12b4822b95fabd82fc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35cd7e26223ca699b58415f20be0c892a96c49ac', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c14762e8350a6ed399af4c9cbfb56c6dd1ba3960', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '173ca903584c84f6e70abe46144d6e66d72b092e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dbda691477f046de245b0c60c4d776e6713ed48', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3152dbcc140df345d08232eab323a4fca27628e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04a1811425ca7aae7d1bdd833d0975b6d56c79a9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd738df6703450afc74c406d41708859f192124b9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '477eb92c9bf8ebd7fc0b339f87058ed04426e707', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5223932a306bd8638caf158a94eba338ef39cd05', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78bf9a06230bc802dcdb5fcff663a0d0b841b680', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0953553dab4a39f936629d49279b50e32b0aa89', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '498b1eca3afc10f3ce0682808d08a3a1a2c3936b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '330809be90e5c9999d73af6d34febad82f56e7c8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e625471c1eba3d52c5027792df4319aa3d1ef63', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c1b7d90b1ce22118d0e562db7aca138d98f39ac', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d063bfdd16652d6b610b16b89d8f0d36b4bb68c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61fe64f940475c00c6eb348a13df172efe936da2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a3b43dbf642ea328c5f115b2bacd99543e657c8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49cf81ccce3ee546631cbf275a02fe87a93096a5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25365f4f86a1c39f529cda7ada03bee8677b5489', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da76d9bff8ba616d0bfe7c35a67b901de6170223', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15a2b92faa45fea94964bf691be51e6bca0658f4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c886add0ea81d125f941912d8977cb2ded1241a4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '936b7ec422b7c1f1c47023929319aef465a558a4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71bd38de6b407ead9eb81648ee6f748202500b6e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '645843427ea8298e825a61ce399adefa8177be48', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1114109ce167e1ba613eca324893d104585cddef', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59fb533e89e188c89de236e432f8f326056c4ad9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a66002fc73d206b7f835fae164d9b0c1ea3bdf7f', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2fa393b3685ffbed191392f07b36f7aca393984', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c42ce6bb8a9605d22bdac92a1ce44fce904b328c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8d5f33bf15a57a3d288038b2b347c4cd6345074', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6a16201f6c00ffce1fa1a42f4c3e2511b0dc143', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd3cd04cb69718a23c98ca54d7fdf44d53f9e0eb', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1185f6b19bc1eb093a87a22dc13b73a13926457e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7fd2329ca533ec2eebd09d065168ec595a026ed', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b307c4fe941e568b6b0b023e4c6090e44fb8c1b3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f229088512196bcecde9191173c31032106c8c2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e33051c20eb2134373947097ee30ae0cb6df5af', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f91b04b1ee9f9f7a7798f5fd11d422e4c2b5759c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0402f41441ed55edf8e7309e2ffd05ce8c53ad2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00c73365a0afa2d071f83b8e57b9a1e05dca61d6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53348f554f8c161504dc6a993c48848f15bb7183', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd374c5264e9764036cc65d9218530def5267d10e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5865f45125aa4202a3d42460809c330ccae99e1c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6261e3f6aa0fc1c564eac93d6b203243b3e1594', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22e3a83c5343f40e8a823913912e31602d2523d3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d150fa45ae26fc67cd9d566f28507e8c468adc5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de7b047a7a6d4f0cedb220baf8412e12b0a0da7d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a508281d8fad0fb41365b85ae3cefa6bf3b0bd4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e7190158035947b178a3982c4b63051f852d9c6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dfa3ee532718eab37c39e786a1b836810192028', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '256de6cfb2d92757448edf2a5ac525b3b3005c7e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}]",Hardik Katehara,54679643,,User,,28,,35,21
683445357,Fix pre-push mypy checks,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of NA.
2. This PR does the following: 
   - ~Adds `typed-ast` to mypy_requirements~.
   - Installs mypy requirements in ~oppia_tools~ `third_party/python3_libs` instead of installing globally for local dev environment.
   - Installs mypy globally for CI checks.
   - Downgraded the MyPy version as it comes with type stubs for third-party libs preinstalled. In mypy >= 0.900, we were having problem with mypy not detecting type stubs installed with pip.
  
## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13310,https://api.github.com/repos/oppia/oppia/pulls/13310,https://github.com/oppia/oppia/pull/13310,closed,138,46,4,38,34,66,0,2,[],2021-07-05 07:39:23+00:00,2021-07-16 15:06:34+00:00,977231.0,"11 days, 7:27:11","[{'comment_id': 664800906, 'comment_body': ""```suggestion\r\nMYPY_TOOLS_DIR = os.path.join(os.pardir, 'oppia_tools', 'mypy_libs')\r\n```\r\n\r\nOptiona: Maybe this^"", 'comment_created': datetime.datetime(2021, 7, 6, 18, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664801559, 'comment_body': 'Why `--upgrade`? Will it do an auto-upgrade of libs?', 'comment_created': datetime.datetime(2021, 7, 6, 18, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 668879643, 'comment_body': 'I would maybe use a more descriptive variable name.', 'comment_created': datetime.datetime(2021, 7, 13, 15, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 668879893, 'comment_body': 'Add a TODO here', 'comment_created': datetime.datetime(2021, 7, 13, 15, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 669905884, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 14, 19, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 669905943, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 14, 19, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670636165, 'comment_body': '```suggestion\r\ndef install_mypy_prerequisites(install_globally):\r\n```\r\n\r\nThe param name shoukd explain the usage*', 'comment_created': datetime.datetime(2021, 7, 15, 16, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 670636665, 'comment_body': ""Also, wxplain what's unexpected here which need to be fixed*"", 'comment_created': datetime.datetime(2021, 7, 15, 16, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 670637905, 'comment_body': 'In general we expect to have similar setup/workflow on CI, this helps us ensure that the general setup proccess is working fine if CI tests are passing. So this need to be fixed asap after the migration!', 'comment_created': datetime.datetime(2021, 7, 15, 16, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 670639537, 'comment_body': 'The flage name should somwhat match the `help` description, maybe `--install-globally`?', 'comment_created': datetime.datetime(2021, 7, 15, 16, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 670643225, 'comment_body': ""I've left a comment in teh TODO issue please update the issue with proper explanation!"", 'comment_created': datetime.datetime(2021, 7, 15, 16, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 670644284, 'comment_body': 'Outdated comment, please ignore!', 'comment_created': datetime.datetime(2021, 7, 15, 16, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 670644509, 'comment_body': 'outdated-cooment, please ignore!', 'comment_created': datetime.datetime(2021, 7, 15, 16, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 670764241, 'comment_body': ""@DubeySandeep The plan is that after python3 migration, we will look how CI checks behave. I and @vojtechjelinek tried to fix this. But the installation in CI is not creating the `bin` folder as it creates locally. \r\nThat's why we install it globally for CI."", 'comment_created': datetime.datetime(2021, 7, 15, 19, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670765330, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 15, 19, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670765408, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 15, 19, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670778243, 'comment_body': ""This help message is confusing to me. It sounds like the user is supposed to pass `--ci-check=true`, but they're actually just supposed to pass `--ci-check`. This message might be clearer:\r\n\r\n```suggestion\r\n    help='Install mypy and its requirements globally. By default, they are installed to ' + MYPY_TOOLS_DIR,\r\n```\r\n\r\n(I see that you were following the pattern set by the argument defined above, but I think that's confusing too. No need to fix it though)"", 'comment_created': datetime.datetime(2021, 7, 15, 20, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670778431, 'comment_body': ""I agree with DubeySandeep's comment, but I don't see it fixed in the current diff"", 'comment_created': datetime.datetime(2021, 7, 15, 20, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670779504, 'comment_body': ""I think DubeySandeep's comment on the argument above applies here too. It would be clearer to have the argument specify whether mypy should be installed globally than to specify whether we are running on CI"", 'comment_created': datetime.datetime(2021, 7, 15, 20, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670780936, 'comment_body': 'This TODO message is a little unclear. Maybe `Use path to mypy executable instead of ""mypy"" after Python 3 migration`\r\n\r\nAlso, does this only apply to the `mypy_cmd = \'mypy\'` line? It seems like the code in the `else` block already uses the path. If it only applies to the block where `ci_check=True`, the TODO should be inside that block', 'comment_created': datetime.datetime(2021, 7, 15, 20, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670782729, 'comment_body': ""I don't see this fixed in the current diff"", 'comment_created': datetime.datetime(2021, 7, 15, 20, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670783567, 'comment_body': 'I agree with Sandeep\'s top comment that the TODO message is unclear. What needs about the installation needs to ""change""?', 'comment_created': datetime.datetime(2021, 7, 15, 20, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670784321, 'comment_body': 'Why are we leaving `typed-ast` here? It looks like it was duplicated in the original file.\r\n\r\nAlso, if we do remove `typed-ast`, this fill will only contain `mypy`, which seems unnecessarily complex. Why not just install mypy directly from the code and skip the requirements file?', 'comment_created': datetime.datetime(2021, 7, 15, 20, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670784929, 'comment_body': 'Merged two issues. Added #13113  to #13398 .', 'comment_created': datetime.datetime(2021, 7, 15, 20, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670785883, 'comment_body': ""nit: Abbreviating `command` to `cmd` here doesn't reduce verbosity much, and it might make it harder to read for someone who isn't familiar with the abbreviation. However, `cmd` is common enough that I think it's okay if you want to leave it"", 'comment_created': datetime.datetime(2021, 7, 15, 20, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670788900, 'comment_body': 'Can you add a comment explaining what case this handles?', 'comment_created': datetime.datetime(2021, 7, 15, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670789362, 'comment_body': 'Why use `getattr` instead of `parsed_args.files`?', 'comment_created': datetime.datetime(2021, 7, 15, 20, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670789710, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 15, 20, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670791425, 'comment_body': ""Also, this change means that `mypy`'s dependencies will no longer be pinned, which could allow for automatic upgrades that break our tests. What's the benefit of this change?"", 'comment_created': datetime.datetime(2021, 7, 15, 20, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670792725, 'comment_body': 'Pushed it 1 minute before.', 'comment_created': datetime.datetime(2021, 7, 15, 20, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670793331, 'comment_body': 'Pushed it just now. What I do is that I make changes locally and reply to the comments. Then push. Then Ask for review.', 'comment_created': datetime.datetime(2021, 7, 15, 20, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670793396, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2021, 7, 15, 20, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670794005, 'comment_body': ""files won't be an attribute if `--files` is not passed. So it will throw error."", 'comment_created': datetime.datetime(2021, 7, 15, 20, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670794783, 'comment_body': ""It's best to avoid disabling pylint if at all possible. In this case, I think you can change the argument name to be `unused_ci` instead"", 'comment_created': datetime.datetime(2021, 7, 15, 20, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670794896, 'comment_body': 'Actually I copied and pasted from [here](https://github.com/oppia/oppia/blob/2d1496b33ac891c40709017ffa29a9df870540e1/scripts/install_third_party_libs.py#L48).', 'comment_created': datetime.datetime(2021, 7, 15, 20, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670795378, 'comment_body': ""Similarly, can't you use `unused_args` and `unused_kwargs`? I think `args` and `kwargs` are just used by convention--I don't think they have any syntactic meaning"", 'comment_created': datetime.datetime(2021, 7, 15, 20, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670795894, 'comment_body': ""Don't call something `unused_*` if you use it! :smile:"", 'comment_created': datetime.datetime(2021, 7, 15, 20, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670796161, 'comment_body': 'ditto: use `unused_ci` instead', 'comment_created': datetime.datetime(2021, 7, 15, 20, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670799576, 'comment_body': 'The reason for this change is that from mypy >= 0.900 requires stubs to be installed as separate pip packages. And right now we were trying to install stub packages in third_party directory and mypy was not able to detect them. So this is the fix we use as installing separate stubs for mypy is a new feature and we expect this feature to be documented well or fixed. Thanks!', 'comment_created': datetime.datetime(2021, 7, 15, 20, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670803766, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 15, 21, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670803886, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 15, 21, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670809533, 'comment_body': '> Why are we leaving typed-ast here? It looks like it was duplicated in the original file.\r\n\r\ntyped-ast is required for checks to run on py2 codebase.', 'comment_created': datetime.datetime(2021, 7, 15, 21, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670812248, 'comment_body': 'Done. Thanks!', 'comment_created': datetime.datetime(2021, 7, 15, 21, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670812509, 'comment_body': 'I have used `unused_args`, `unused_kwargs` now. Thanks!', 'comment_created': datetime.datetime(2021, 7, 15, 21, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670812657, 'comment_body': 'My bad! Changed it.', 'comment_created': datetime.datetime(2021, 7, 15, 21, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670812705, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 15, 21, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670814821, 'comment_body': 'I think using `cmd` here is fine. Thanks!', 'comment_created': datetime.datetime(2021, 7, 15, 21, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670816496, 'comment_body': ""> Also, this change means that mypy's dependencies will no longer be pinned\r\n\r\nEvery version of mypy comes with specific stubs. So I don't think this will upgrade the stubs automatically.\r\nPlease let me know if I got you wrong. Thanks!"", 'comment_created': datetime.datetime(2021, 7, 15, 21, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670857928, 'comment_body': ""I think `--files` has to be passed since when it's added as an argument, `nargs='+'` ([docs](https://python.readthedocs.io/en/v2.7.2/library/argparse.html#nargs)). If `--files` is omitted, argparse will throw an error, right?\r\n\r\nMore generally, I think specifying a default value is a cleaner way to handle this"", 'comment_created': datetime.datetime(2021, 7, 15, 23, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670858361, 'comment_body': 'I still find the ""If true"" part confusing since user doesn\'t set this flag to be true or false--they either pass it or don\'t', 'comment_created': datetime.datetime(2021, 7, 15, 23, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670858768, 'comment_body': '```suggestion\r\n    # install packages globally for CI as in CI. pip installation is not in a way\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 23, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670860104, 'comment_body': ""OK. I've reached out to @DubeySandeep to try and figure out what this is doing"", 'comment_created': datetime.datetime(2021, 7, 15, 23, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670860716, 'comment_body': ""LGTM. I'm leaving this thread open since this seems like something the linter could have caught. @DubeySandeep should the linter have caught this?"", 'comment_created': datetime.datetime(2021, 7, 15, 23, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 670922686, 'comment_body': ""```\r\nhelp='optional; if specified, installs mypy and its requirements globally.'\r\n    ' By default, they are installed to  %s' % ...\r\n```"", 'comment_created': datetime.datetime(2021, 7, 16, 2, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 670923278, 'comment_body': ""```suggestion\r\ndef get_mypy_cmd(files, using_global_mypy):\r\n```\r\n\r\nThis function doesn't install anything so `install_*` variable is bit off."", 'comment_created': datetime.datetime(2021, 7, 16, 2, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 670925454, 'comment_body': '> If --files is omitted, argparse will throw an error, right?\r\n\r\nNo, the error is not thrown in this case. I have tested this.', 'comment_created': datetime.datetime(2021, 7, 16, 2, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670926020, 'comment_body': '```suggestion\r\n        using_global_mypy: bool. Whether generated command should run using global mypy.\r\n```', 'comment_created': datetime.datetime(2021, 7, 16, 2, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 670926517, 'comment_body': 'Changed. Thanks!', 'comment_created': datetime.datetime(2021, 7, 16, 2, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670926570, 'comment_body': 'Changed this too!', 'comment_created': datetime.datetime(2021, 7, 16, 2, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670926944, 'comment_body': '```suggestion\r\n    stdout, stderr = process.communicate()\r\n```', 'comment_created': datetime.datetime(2021, 7, 16, 2, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 670927348, 'comment_body': '```suggestion\r\n    python_utils.PRINT(stdout)\r\n    python_utils.PRINT(stderr)\r\n```', 'comment_created': datetime.datetime(2021, 7, 16, 2, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 670931371, 'comment_body': ""Changed it to parsed_args.files. It doesn't throw error now. Thanks!"", 'comment_created': datetime.datetime(2021, 7, 16, 3, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 670934942, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 7, 16, 3, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 670934974, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 7, 16, 3, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 670935011, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 7, 16, 3, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 670935034, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 7, 16, 3, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}]","[{'commit_sha': '9ca9b3760cfa6e696788d3c94cc999b6aed5ed5c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bac4f32a117d2abe7ac8ffe6836f505873d6819', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea6fcba2d5db1d048bb509fb06cd061d94b035cc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1de79674cd982820de6262096242dfa3a226315', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc9eac21efaab41da9826ec92fd7b90ee50d85b3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2435840301898fa75014528d45914267368ae48f', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82bbda7c558e329dadfd71c0ae991ecc28823d29', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ff1e6c6cc105634d7e369fdb6d4daa0c8a9c6be', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '431eb48700c7eca419428d214d356b1bce6d585e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c2e465dd68df9d73aac2595d8862522fd6f4a9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e61d02db898218da541a6cab155bed21fbe8a636', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51da4fae382621ad66066bed9daf1730c0c8801a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be5358cc896c20ad98b25ed739ad57d406c15265', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34b121df282dfc548913f00cdbf68ab44c0e6b74', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3d1023d05f6145083468a33df641198d6d90542', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcab81fef85c3a939f38b7014735be9fbd924bd0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fa00766f94f9df24920eec066ca5f7d67ea0970', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '982856f5eabcd7a3e317712e5fda66799aa2b2e3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2836ed56723f339830ada9c752cd00e463da2a4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a224f329367dd3eb90502b3cb14d9103928a04e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fad332585619bef9405d4c718f71a943ba43b202', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92439836ba6c34a74ac2a25a1c3ba7394fb4b20d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ed5863f520953e6cc0b92f6c75b04380fa74a4e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f26d9bae86df5369c2da7457d99e976b2648bad3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a5629560f43773153fa5a108ca1644212605806', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5750ee4263d5c2b94023b62e9295c4e81160e853', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0b4a9448a86af3e37a6de9217e1caf9b7808a1c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1fd0e59d473f966a665703e782539342314d4d5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95e5d5bd1dcb39a79ffa1b0218791f2e434070f1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18727e7a260797eeb1058a306906b14c2e7e8c9d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea4fdacda0c67e75ac5345c8ebc71ca58bdd3ed7', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f4c73aab9e3783c00a63bdbfc3a367597270528', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '989b8ce82f9b7d5f7d08c441bad38fbd8fc39fce', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2739d9dae30c72aaa866b00534f70720f4140ab', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccd12b940a1f00290602efeb94232802af292a4d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a572fea7f2be95e458aed664c0578792b0d1b090', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '638fa0ce5c287391aebe0ce2f2bc73390760908b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e14626f0f4d5e292ac7356a584b75f80258149b', 'committer_username': 'DubeySandeep', 'committer_name': 'Sandeep Dubey', 'committer_email': 'dubeysandeep.in@gmail.com', 'commit_date': datetime.datetime(2016, 1, 11, 18, 40, 48, tzinfo=datetime.timezone.utc)}]",Hardik Katehara,54679643,,User,,28,,35,21
691930151,M2.1: Add type annotations,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of NA.
2. This PR does the following: 
- Adds type annotations to files of:
  - core/platform/datastore
  - core/platform/transaction
  - core/platform/models
  - core/storage/activity
  - core/storage/app_feedback_report
  - core/storage/audit
  - core/storage/auth
  - core/storage/base_model
  - core/storage/classifier
  - core/storage/collection
  - core/storage/config

- Adds mypy_imports file:
  -  MyPy doesn't work well with passing of modules as variables. This is what we do when we import modules from `core/storage` and `core/platform`. Example: `datastore_services`, `base_models`, `auth_models`. 
  - That's why we have added the following code snippet so that MyPy can detect the modules we are importing in a file.
    ```
    MYPY = False
    if MYPY:
        from mypy_imports import * # pragma: no cover # pylint: disable=import-only-modules,wildcard-import,unused-wildcard-import
     ```
  - The part inside the if block only runs when we run type checks. While running type checks, mypy will override the value of variable `MYPY` to `True`. This is substitute of [typing.TYPE_CHECKING ](https://docs.python.org/3/library/typing.html#typing.TYPE_CHECKING)in py2.
- Some type ignores in other files(Ex: main.py)  were removed as they were fixed after I added type annotations to some files.
- We create enums in a very dynamic way using the function `create_enum`. Therefore mypy is unable to understand the type of our enums. Therefore we have changed our enums to be created statically.
- I have used self typing in core/storage/base_models. Self typing is giving the type of `cls` or `self` variables so that their type information can be used in type annotations. This is because we subclass the classes of base_models and we need to work them properly. For example: get_version of VersionedModel returns the instance which is either VersionedModel or its subclass. So explicitly mentioning VersionModel there will instruct MyPy that the return type is VersionedModel(not its subclass).

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [ ] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13413,https://api.github.com/repos/oppia/oppia/pulls/13413,https://github.com/oppia/oppia/pull/13413,closed,1405,276,45,66,79,265,1,2,[{'name': 'PR: Affects datastore layer'}],2021-07-17 13:08:57+00:00,2021-08-05 22:51:14+00:00,1676537.0,"19 days, 9:42:17","[{'comment_id': 672478508, 'comment_body': ""Can you explain this change? \r\n\r\nReading the [docs](https://mypy.readthedocs.io/en/latest/command_line.html?highlight=reexport#cmdoption-mypy-no-implicit-reexport) I understood reexport roughly means use of from-as in imports. I suppose this is only going to be useful for `mypy_imports` file, so isn't it better to just use type ignores for this particular case instead of allowing this codebase-wise?"", 'comment_created': datetime.datetime(2021, 7, 19, 17, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 672487359, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2021, 7, 19, 17, 19, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 672490783, 'comment_body': 'Are `misc` type of errors frequent?', 'comment_created': datetime.datetime(2021, 7, 19, 17, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 672501913, 'comment_body': 'Will this ignore be removed after test_utils has been annotated?', 'comment_created': datetime.datetime(2021, 7, 19, 17, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 672502437, 'comment_body': 'Any reason for using these blank lines here and below?', 'comment_created': datetime.datetime(2021, 7, 19, 17, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 672503927, 'comment_body': ""This is very difficult to read, can't this be split into multiple lines? Causing lint issues?"", 'comment_created': datetime.datetime(2021, 7, 19, 17, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 672507104, 'comment_body': 'Why do we need to explicitly define type here? (Want to get an idea if this can be seen at other places too)', 'comment_created': datetime.datetime(2021, 7, 19, 17, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 673163757, 'comment_body': 'I pushed it by mistake. Will remove this. Thanks!', 'comment_created': datetime.datetime(2021, 7, 20, 14, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673165594, 'comment_body': 'The errors are not that frequent. This is here due to type of datastore_services.Model being of type Any.', 'comment_created': datetime.datetime(2021, 7, 20, 14, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673166138, 'comment_body': 'Yes. This is due to assertRaisesrRgexp being untyped.', 'comment_created': datetime.datetime(2021, 7, 20, 14, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673167433, 'comment_body': 'Moved this discussion to the [doc](https://docs.google.com/document/d/1LEWKK2H303eHmWg1hHN2EMIlnewB6EnEyrQoReY-M6s/edit?usp=sharing).', 'comment_created': datetime.datetime(2021, 7, 20, 14, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673175338, 'comment_body': ""The type annotations cannot be broken down into multiple lines.\r\nThere is one other way to do this:\r\n```\r\ndef send_email(address,     # type: Union[str, List[str]]\r\n               sender,      # type: str\r\n               cc,          # type: Optional[List[str]]\r\n               bcc,         # type: Optional[List[str]]\r\n               subject='',\r\n               body=None    # type: List[str]\r\n               ):\r\n    # type: (...) -> bool\r\n```\r\n\r\nWhat do you prefer?"", 'comment_created': datetime.datetime(2021, 7, 20, 14, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673177377, 'comment_body': 'Mistake. Fixed.', 'comment_created': datetime.datetime(2021, 7, 20, 14, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673177478, 'comment_body': 'Mistake. Fixed', 'comment_created': datetime.datetime(2021, 7, 20, 14, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673355184, 'comment_body': 'Does mypy recognize this as error of type `misc` only, or is there some other way to type ignore it using a more specific pragma (since then it will reflect a more specific reason, and would be clear to understand too).', 'comment_created': datetime.datetime(2021, 7, 20, 17, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 673356142, 'comment_body': 'Another unwanted blank line which you can remove.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 673363885, 'comment_body': ""For example if you consider the `create()` function above (for which I made this comment) there are about 17 parameters, and to find out the type of any of these parameters from single line looks cumbersome (you have to count and map manually) - the new method you proposed would increase the number of lines, but I think that cost is justified by the readability it provides. @hardikkat24 Have you verified that this doesn't introduce any lint errors?\r\n\r\n@seanlip @DubeySandeep Just to confirm - does the second method introduce any anti-pattern? I agree that to avoid confusion as to which method to use, there should be some criteria that helps a developer decide that - something like for `<= x` (=10 maybe) parameters method 1 (the current one used to define annotation in single line) should be used, else method 2. I am a bit skeptical here and wanted an opinion first. Thanks!"", 'comment_created': datetime.datetime(2021, 7, 20, 18, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 673369780, 'comment_body': 'Why are these imports inside an if block only in this file and not others?', 'comment_created': datetime.datetime(2021, 7, 20, 18, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 673374274, 'comment_body': ""When type checks run (MYPY=True), wouldn't this again cause mypy to fail again - whatever value `base_models` got inside `from mypy_imports import *` would be overwritten by this. Though checks don't seem to be failing here, but I want you to be consistent about this - I've left a comment for other place where you placed this inside else block - which of these is the better approach, please explain and use that only."", 'comment_created': datetime.datetime(2021, 7, 20, 18, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 673382445, 'comment_body': ""@hardikkat24 I don't think this is working as expected, backend tests are failing probably due to this, and the linter is also failing. PTAL!"", 'comment_created': datetime.datetime(2021, 7, 20, 18, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 673676712, 'comment_body': ""Multiple lines seems fine to me. I would probably just break after the '(' rather than push everything to the right.\r\n\r\n@DubeySandeep what do you think?\r\n\r\nAlso, will this change once we move to Python 3? What is the plan then?"", 'comment_created': datetime.datetime(2021, 7, 21, 5, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673679202, 'comment_body': ""1. Are we going to make `#` look vertically oriented all the time? (This will make it hard to do new changes, like adding new param name of bigger length)\r\n2. `# type: (...) -> bool` Are we going to have something in between `...` or is it just a syntaxt to hilight the usage of inline param type?\r\n3. Can we enforce to only have this way to write param's type? [Just to have consistent pattern in the codebase and I think the new pattern looks more consistent to fronted type + after python 3 migration we are going to have the same structure, right?]\r\n\r\nIn general, I agree this would be a better way to present the type for params!"", 'comment_created': datetime.datetime(2021, 7, 21, 5, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 673744336, 'comment_body': 'Here and in other files, why do you need to add this?', 'comment_created': datetime.datetime(2021, 7, 21, 7, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673744539, 'comment_body': ""I think you can make these tighter. Let's try to avoid the use of Any everywhere."", 'comment_created': datetime.datetime(2021, 7, 21, 7, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673745240, 'comment_body': 'Try to avoid Any.', 'comment_created': datetime.datetime(2021, 7, 21, 7, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673746544, 'comment_body': 'Why is the second arg a ""Union[int, Text]""? It should be one or the other.', 'comment_created': datetime.datetime(2021, 7, 21, 7, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673749293, 'comment_body': 'Why is the type of datastore_services.Model equal to Any? That seems weird.\r\n\r\nUsing Any is an antipattern and every usage should be carefully justified. Often there will be ways to work around it. We had similar issues last year in the typescript project and managed to remove most cases.', 'comment_created': datetime.datetime(2021, 7, 21, 8, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673761442, 'comment_body': ""> Why is the type of datastore_services.Model equal to Any? \r\ndatastore_services.Model is ndb.Model. And ndb doesn't have type  stubs or type annotations. I have tried to reduce the usage of `Any` and tried to find workarounds whenever possible."", 'comment_created': datetime.datetime(2021, 7, 21, 8, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673765379, 'comment_body': ""@DubeySandeep \r\n1. I don't prefer making the type comments for this to be vertically oriented.\r\n2. The `()` bracket generally contains the types of the function parameters, but here we have specified them in the lines itself, so `(...)` will be used.\r\n3. I don't think breaking the function definition will look good for comparatively smaller functions. In python 3, we will have  syntax like this:\r\n   ```\r\n   def func(x: int, y: int, z: bool) -> bool:\r\n      ...\r\n   ```\r\n   So here we are not breaking the function call."", 'comment_created': datetime.datetime(2021, 7, 21, 8, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673766692, 'comment_body': ""@seanlip I added __init__ in models where they are not present for mypy to work correctly. If the constructor is not added, MyPy assumes the subclass variable's object to be that of Parent class.\r\nAlready wrote this in the description also. PTAL. Thanks!"", 'comment_created': datetime.datetime(2021, 7, 21, 8, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673768678, 'comment_body': '@seanlip We create enums in a very dynamic way using the function create_enum. Therefore mypy is unable to understand the type of our enums. Therefore we have to annotate our enums as type `Any`.\r\nAlready mentioned in the PR description. PTAL.', 'comment_created': datetime.datetime(2021, 7, 21, 8, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673769083, 'comment_body': 'This is because of Enums. Explained in PR description and other comment. Thanks!', 'comment_created': datetime.datetime(2021, 7, 21, 8, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673769572, 'comment_body': 'We have been passing both `int` and `str` values for version in our codebase knowingly or unknowingly.', 'comment_created': datetime.datetime(2021, 7, 21, 8, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673778426, 'comment_body': ""I haven't seen any proof that this is unavoidable or that this is the only way to do it. \r\n\r\nIt also seems a bit odd that MyPy does that. Can you point to any documentation around this issue? Have you asked on the MyPy community channels whether this is an error with MyPy? I don't see, from a conceptual perspective, why the constructor is needed here."", 'comment_created': datetime.datetime(2021, 7, 21, 8, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673779125, 'comment_body': 'I did read your description, but you have not provided any detail on alternative solutions.\r\n\r\nThis is one of those things that should be discussed in the doc. Using Any should really be the last resort and needs to be justified by ""there is no other approach that would work"". In order for this justification to hold, the other approaches need to be seen.', 'comment_created': datetime.datetime(2021, 7, 21, 8, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673779416, 'comment_body': 'See above.', 'comment_created': datetime.datetime(2021, 7, 21, 8, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673779561, 'comment_body': ""Then let's fix that and standardize it."", 'comment_created': datetime.datetime(2021, 7, 21, 8, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673781077, 'comment_body': 'These attempts at workarounds should be fully documented. Please use the doc that was created for this purpose and get sign-off before resorting to Any.', 'comment_created': datetime.datetime(2021, 7, 21, 8, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673781622, 'comment_body': ""I encounter it and asked the community about it. Haven't received a reply till now. \r\nIf I didn't add constructor to VersionedModel(which is subclas of BaseModel) then its instances using VersionedModel() were thought by mypy to be of type BaseModel\r\n"", 'comment_created': datetime.datetime(2021, 7, 21, 8, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673782859, 'comment_body': ""The only approach for this is to create enums like this:\r\n```\r\nclass Color(Enum):\r\n    RED = 1\r\n    GREEN = 2\r\n    BLUE = 3\r\n```\r\nI don't think this is feasible, right? @seanlip "", 'comment_created': datetime.datetime(2021, 7, 21, 8, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673783012, 'comment_body': 'Will do', 'comment_created': datetime.datetime(2021, 7, 21, 8, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673785047, 'comment_body': ""Let's keep it to `str`?"", 'comment_created': datetime.datetime(2021, 7, 21, 8, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673788814, 'comment_body': ""Should I add this to doc now or is it approved? \r\nI'll take care of this from next time."", 'comment_created': datetime.datetime(2021, 7, 21, 8, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673790720, 'comment_body': ""It's not approved. I still need to see the justification."", 'comment_created': datetime.datetime(2021, 7, 21, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673791662, 'comment_body': 'Perhaps try asking again? See if you can point to the discussion here too, so that others can follow along. Have you filed an issue?\r\n\r\nAlso, is the issue actually a generic one due to MyPy or is it specific to ndb.Model? Try creating a minimal new project, with something like:\r\n\r\n```\r\nclass Base(object):\r\n    def __init__(self):\r\n         self.x = 42\r\n\r\nclass Derived(Base):\r\n    pass\r\n\r\ndef f(x: Derived) -> None:\r\n    return 10\r\n\r\nderived_instance = Derived()\r\nprint f(derived_instance)\r\n```\r\n\r\nand then run MyPy on it. Does MyPy throw an error?', 'comment_created': datetime.datetime(2021, 7, 21, 8, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673792179, 'comment_body': 'Int seems more sensible, since versions are ints. Why str?', 'comment_created': datetime.datetime(2021, 7, 21, 8, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673792498, 'comment_body': 'This needs to be discussed in your doc. When you make statements like ""The only approach"", those statements need justification.', 'comment_created': datetime.datetime(2021, 7, 21, 9, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673810835, 'comment_body': ""@seanlip Tried this. This error occurs only when we subclass something of type `Any`.\r\n```\r\n# x is of type Any\r\n\r\nclass A(x):\r\n    def __init__(self, *args, **kwargs):\r\n        # type: (*Any, **Any) -> None\r\n        self.a = 1\r\n\r\nclass B(A):\r\n    pass\r\n\r\nclass C(B):\r\n    pass\r\n\r\na = A()\r\nb = B()\r\nc = C()\r\n\r\nreveal_type(a)\r\nreveal_type(b)\r\nreveal_type(c)\r\n```\r\nThis outputs:\r\n```\r\n../../t.py:19: note: Revealed type is 't.A'\r\n../../t.py:20: note: Revealed type is 't.A'\r\n../../t.py:21: note: Revealed type is 't.A'\r\n```\r\n\r\nIf I use `object` in place of `x`, the parent class is not `Any`. Now the output is:\r\n```\r\n../../t.py:19: note: Revealed type is 't.A'\r\n../../t.py:20: note: Revealed type is 't.B'\r\n../../t.py:21: note: Revealed type is 't.C'\r\n``` \r\n\r\nI will report this bug. For now using __init__ seems a good workaround right?"", 'comment_created': datetime.datetime(2021, 7, 21, 9, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673817824, 'comment_body': ""Nope (but thanks for investigating). Let's try and find a way to get the parent to not be Any. Fixing this issue now will make a lot of problems later go away."", 'comment_created': datetime.datetime(2021, 7, 21, 9, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 673819243, 'comment_body': ""I'll move forward with int. Thanks!"", 'comment_created': datetime.datetime(2021, 7, 21, 9, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673820882, 'comment_body': ""@seanlip Thanks! How should I proceed with this? I'm clueless about this. \r\nJust asking, why adding inits is not a good idea?"", 'comment_created': datetime.datetime(2021, 7, 21, 9, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673821091, 'comment_body': 'Added to [doc](https://docs.google.com/document/d/1LEWKK2H303eHmWg1hHN2EMIlnewB6EnEyrQoReY-M6s/edit?usp=sharing)', 'comment_created': datetime.datetime(2021, 7, 21, 9, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673821247, 'comment_body': 'Added in [Doc](https://docs.google.com/document/d/1LEWKK2H303eHmWg1hHN2EMIlnewB6EnEyrQoReY-M6s/edit?usp=sharing)', 'comment_created': datetime.datetime(2021, 7, 21, 9, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 673861341, 'comment_body': 'This, you will need to figure out.\r\n\r\nAdding code that necessitates our use of pylint-disables is typically not a good idea.', 'comment_created': datetime.datetime(2021, 7, 21, 10, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 674076427, 'comment_body': ""Why can't this be `type: ndb.Key`? Ditto elsewhere?"", 'comment_created': datetime.datetime(2021, 7, 21, 15, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 674110373, 'comment_body': 'Should be `(List[ndb.Key])`.', 'comment_created': datetime.datetime(2021, 7, 21, 15, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 674110741, 'comment_body': 'Should be `(List[ndb.Key])`.', 'comment_created': datetime.datetime(2021, 7, 21, 15, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 674228191, 'comment_body': ""@brianrodri ndb isn't type annotated and we don't have type-stubs for it - that's why this was @hardikkat24's primary decision based on options provided by mypy to handle such cases. Though this is also in discussion [here](https://docs.google.com/document/d/1LEWKK2H303eHmWg1hHN2EMIlnewB6EnEyrQoReY-M6s/edit?ts=60f82765#) and @hardikkat24 will provide an update on this in case he finds a better option viable."", 'comment_created': datetime.datetime(2021, 7, 21, 18, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 674794745, 'comment_body': 'Btw, after we migrate to py3 I think we can introduce enums in a way that you mention above Hardik.', 'comment_created': datetime.datetime(2021, 7, 22, 13, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676541350, 'comment_body': 'Added stubs now', 'comment_created': datetime.datetime(2021, 7, 26, 12, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 676541500, 'comment_body': 'Split the current function into multiple lines', 'comment_created': datetime.datetime(2021, 7, 26, 12, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 676543452, 'comment_body': 'There should be 2 lines between functions right?', 'comment_created': datetime.datetime(2021, 7, 26, 12, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 676543745, 'comment_body': 'Removed. Made it by mistake.', 'comment_created': datetime.datetime(2021, 7, 26, 12, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 676550610, 'comment_body': ""No it doesn't overrite the the module. I used the else block by mistake. Thanks!"", 'comment_created': datetime.datetime(2021, 7, 26, 12, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 676550926, 'comment_body': ""I don't think it is failing due to this,"", 'comment_created': datetime.datetime(2021, 7, 26, 12, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 676551074, 'comment_body': 'Added stubs', 'comment_created': datetime.datetime(2021, 7, 26, 12, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 676551208, 'comment_body': 'Already changed ENUMs', 'comment_created': datetime.datetime(2021, 7, 26, 12, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 676551353, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 26, 12, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 676551764, 'comment_body': 'Changed the approach. Added stubs and used ndb.Key', 'comment_created': datetime.datetime(2021, 7, 26, 12, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 676551843, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 26, 12, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 676551933, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 26, 12, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 676690496, 'comment_body': 'Please make sure that lines in this file are shorter than 80 chars.', 'comment_created': datetime.datetime(2021, 7, 26, 15, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676701656, 'comment_body': 'Can you please explain why is this file needed? It would be best in a comment.', 'comment_created': datetime.datetime(2021, 7, 26, 15, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676702624, 'comment_body': 'Why is this still here?', 'comment_created': datetime.datetime(2021, 7, 26, 15, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676706032, 'comment_body': 'Why use wildcard import? Why we cannot use specific imports here?', 'comment_created': datetime.datetime(2021, 7, 26, 15, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676707021, 'comment_body': 'Can we be more specific here?', 'comment_created': datetime.datetime(2021, 7, 26, 15, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676709908, 'comment_body': 'Why is the assert needed here? Maybe add a short comment. Ditto above.', 'comment_created': datetime.datetime(2021, 7, 26, 15, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676711140, 'comment_body': 'Can `Any` be replaced with something more specific here?', 'comment_created': datetime.datetime(2021, 7, 26, 15, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676711703, 'comment_body': 'Can `Any` be replaced with something more specific here?', 'comment_created': datetime.datetime(2021, 7, 26, 15, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676727891, 'comment_body': '```suggestion\r\n    # type: (datetime.datetime) -> ContextManager\r\n```', 'comment_created': datetime.datetime(2021, 7, 26, 15, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676728570, 'comment_body': 'Why is this ignore needed?', 'comment_created': datetime.datetime(2021, 7, 26, 15, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676729391, 'comment_body': 'Add a comment on why are these asserts needed, ditto elsewhere.', 'comment_created': datetime.datetime(2021, 7, 26, 15, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676730908, 'comment_body': 'Are all these ignores needed here?\r\n', 'comment_created': datetime.datetime(2021, 7, 26, 15, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676846095, 'comment_body': 'Can we replace the `Any` here?', 'comment_created': datetime.datetime(2021, 7, 26, 18, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676846640, 'comment_body': 'Can we replace the `Any` here?', 'comment_created': datetime.datetime(2021, 7, 26, 18, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676847836, 'comment_body': 'Any is not used anywhere, btw I also realized, can this import be moved to the if block below.', 'comment_created': datetime.datetime(2021, 7, 26, 18, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676848777, 'comment_body': 'Please split this up into multiple lines.', 'comment_created': datetime.datetime(2021, 7, 26, 18, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 676959300, 'comment_body': ""+1, I also have this question.\r\n\r\n@hardikkat24 we've talked before about not using Any. All such usages should be exceptions and need full justification via the doc approach we discussed before, otherwise they'll just be rejected at PR review time. "", 'comment_created': datetime.datetime(2021, 7, 26, 21, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 676961365, 'comment_body': 'Why is the ignore needed? Can you do this without an ignore? Ditto elsewhere.', 'comment_created': datetime.datetime(2021, 7, 26, 21, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 676962209, 'comment_body': 'Generally, any ignore statement (other than no-untyped-call) needs an explanation.', 'comment_created': datetime.datetime(2021, 7, 26, 21, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 676962882, 'comment_body': 'Why ignore[return]?', 'comment_created': datetime.datetime(2021, 7, 26, 21, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 676983300, 'comment_body': ""@vojtechjelinek  @seanlip  Added the explanation in the doc.\r\nOne more thing, there are some error which I'm not able to fix nor am I able to find solutions online or on the public channels, so the last option which I see is to ignore errors in these lines. So should I also add them to the doc? Thanks!"", 'comment_created': datetime.datetime(2021, 7, 26, 22, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 676987767, 'comment_body': 'Yes. The requirement is to not use Any/ignore, and any exceptions to that should be discussed in the doc before they make it into a PR.', 'comment_created': datetime.datetime(2021, 7, 26, 22, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 676988862, 'comment_body': ""And one more thing, most used ignores will be of:\r\n1. no-untyped-calls due to calling an untyped function\r\n2. arg-type in test files: passing wrong arguments in test files deliberately.\r\n3.  override: we override a lot of functions in a way mypy disapproves. They had a discussion to change these errors but they suggest to keep throwing the error and use type ignore when you don't want such an error.\r\n4. no-any-return: Untyped calls return value Any. So returning values by calling untyped functions leads to such errors\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 26, 22, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 677174298, 'comment_body': '@hardikkat24 If you were trying to use type asserts here - then maybe use `assert isinstance()` as mentioned [here](https://mypy.readthedocs.io/en/stable/casts.html#casts-and-type-assertions).\r\n\r\n@vojtechjelinek you can refer to the doc for details about this - see [point (1)](https://docs.google.com/document/d/1LEWKK2H303eHmWg1hHN2EMIlnewB6EnEyrQoReY-M6s/edit#heading=h.4u9f3tsw1yfs).', 'comment_created': datetime.datetime(2021, 7, 27, 7, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 677217875, 'comment_body': '@seanlip This is required as we should return Any from get() function of the query.get() method in stubs. This is because model.query() will return the Query object. The get() function of the query object will return the Model. So in static typing I found no method to solve this issue. So the return type from the query get() and get_multi() will be `Any`. Please let me know you views. ', 'comment_created': datetime.datetime(2021, 7, 27, 8, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 677218908, 'comment_body': ""Why can't the return type be a union of ndb.Model or None? The returned object will be one of those, right?"", 'comment_created': datetime.datetime(2021, 7, 27, 8, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 677219138, 'comment_body': ""Here the point is that MyPy throws the error entities[i] may have value None and entities[i].deleted will not exist in this case. But mypy being a static type checker is not able to detect that here we already checked the None case. That's why"", 'comment_created': datetime.datetime(2021, 7, 27, 8, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 677222692, 'comment_body': 'I thought we already had a mechanism for that -- either casting or asserts.', 'comment_created': datetime.datetime(2021, 7, 27, 8, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 677224516, 'comment_body': 'Return an object of type ndb.Model . Then mypy will not be able to detect the Type whether it is an exploration model or any other model. It will assume the type to be ndb.Model. So fields added in the model wont be accessed as mypy will assume it to be of type ndb.Model not its subclass. Thanks!', 'comment_created': datetime.datetime(2021, 7, 27, 8, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 677235044, 'comment_body': 'But here casting is not a good idea. We ourselver are not sure that the value is none or None. So we ourselves are checking that using `if entities[i] and entities[i].deleted:`', 'comment_created': datetime.datetime(2021, 7, 27, 8, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 677240094, 'comment_body': 'Then refactor the code such that you check whether entities[i] exists, do the assertion for mypy, and then check entities[i].deleted.', 'comment_created': datetime.datetime(2021, 7, 27, 8, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 677255004, 'comment_body': ""Couldn't the stub for query.get() return (ndb.Model|None), and the caller of this method cast it to the correct type?"", 'comment_created': datetime.datetime(2021, 7, 27, 8, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 677255879, 'comment_body': 'This is good substitute. WIll do. Thanks!', 'comment_created': datetime.datetime(2021, 7, 27, 8, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 677454901, 'comment_body': 'Tried to refactor. Was unsuccessful. Moved the discussion to the doc. Thanks!', 'comment_created': datetime.datetime(2021, 7, 27, 13, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 677455296, 'comment_body': 'Succesfully changed the stubs and added casts wherever necessary. Thanks!', 'comment_created': datetime.datetime(2021, 7, 27, 13, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 677561159, 'comment_body': 'Forgot to commit this. Will be removing this.', 'comment_created': datetime.datetime(2021, 7, 27, 15, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 677562516, 'comment_body': 'These will only be imported during mypy checks not during runtime. So we have no issue using wildcard import.\r\nWhat do you think?', 'comment_created': datetime.datetime(2021, 7, 27, 15, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 677617504, 'comment_body': 'There is adiscussion on this topic in the [doc](https://docs.google.com/document/d/1LEWKK2H303eHmWg1hHN2EMIlnewB6EnEyrQoReY-M6s/edit?usp=sharing). PTAL', 'comment_created': datetime.datetime(2021, 7, 27, 16, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 677617982, 'comment_body': 'Please see the discussion in the [doc](https://docs.google.com/document/d/1LEWKK2H303eHmWg1hHN2EMIlnewB6EnEyrQoReY-M6s/edit?usp=sharing). Thanks!', 'comment_created': datetime.datetime(2021, 7, 27, 16, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 677623440, 'comment_body': 'No sorry, removing unnecessary ones.', 'comment_created': datetime.datetime(2021, 7, 27, 16, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 677624187, 'comment_body': 'Actually we might be using casts in our codebase. And in future we will be migrating to py3 type annotations style. So this will require the classes to be imported while runtime also.', 'comment_created': datetime.datetime(2021, 7, 27, 16, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678330944, 'comment_body': ""This is causing backend test failure `local variable 'model' referenced before assignment` - [see here](https://github.com/oppia/oppia/pull/13413/checks?check_run_id=3181264537#step:8:341)."", 'comment_created': datetime.datetime(2021, 7, 28, 14, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 678337605, 'comment_body': 'Why we need this ignore?', 'comment_created': datetime.datetime(2021, 7, 28, 14, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 678354403, 'comment_body': ""Here is what MyPy expects the return value should be: `Callable[..., Iterator[<nothing>]]`. So using ContextManager here is not correct I think. Do let me know if I'm wrong. Thanks!"", 'comment_created': datetime.datetime(2021, 7, 28, 14, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678391186, 'comment_body': 'Can we use type assert or casting here to deal with it?', 'comment_created': datetime.datetime(2021, 7, 28, 15, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 678391696, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2021, 7, 28, 15, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678398997, 'comment_body': ""@seanlip @vojtechjelinek Can we avoid using the wrong argument type here for testing? If I correlate this with static-typed languages, we would see compilation errors there, and that's why this seems to me like a wrong understanding of invalid age. This ignore has to be used because of that. Any suggestions here?"", 'comment_created': datetime.datetime(2021, 7, 28, 15, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 678418204, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 28, 15, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678418461, 'comment_body': 'Added in the file docstring.', 'comment_created': datetime.datetime(2021, 7, 28, 15, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678418649, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 28, 15, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678419418, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 28, 15, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678419654, 'comment_body': 'Added', 'comment_created': datetime.datetime(2021, 7, 28, 15, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678422238, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 28, 15, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678422507, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2021, 7, 28, 15, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678436086, 'comment_body': ""What's MYPY here? is this a constant to enable/disable the mypy checks? "", 'comment_created': datetime.datetime(2021, 7, 28, 15, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 678438350, 'comment_body': ""According to the docstring, it should return a list? Also, what's the 2nd param `...`?"", 'comment_created': datetime.datetime(2021, 7, 28, 15, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 678439760, 'comment_body': 'Is it possible to specify which module type?', 'comment_created': datetime.datetime(2021, 7, 28, 15, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 678440900, 'comment_body': 'Ditto as above! Also, why are we importing using `*`?', 'comment_created': datetime.datetime(2021, 7, 28, 15, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 678444947, 'comment_body': ""I'm reading the explanation in the PR description, I'll let you know if I have any other questions! (Also, for explaining any specific changes in the PR maybe leaving a comment around that line would be better for reviewers!) "", 'comment_created': datetime.datetime(2021, 7, 28, 16, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 678552751, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2021, 7, 28, 18, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678552831, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2021, 7, 28, 18, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678554026, 'comment_body': ""I'll keep this in mind. Thanks!!"", 'comment_created': datetime.datetime(2021, 7, 28, 18, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678556028, 'comment_body': ""Tuple[Type, ...] means Tuple of variables of type 'Type'. I think the docstring here is wrong. If we take a look at the code, we see that this calls `Platform.import_models()` and this returns tuple."", 'comment_created': datetime.datetime(2021, 7, 28, 18, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678556266, 'comment_body': 'No actually, I tried it. But it was not possible to do it.', 'comment_created': datetime.datetime(2021, 7, 28, 18, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678556973, 'comment_body': 'These will only be imported during mypy checks not during runtime. So we have no issue using wildcard import.\r\nWhat do you think? ', 'comment_created': datetime.datetime(2021, 7, 28, 18, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 678716827, 'comment_body': ""Why can't you import only what you need? We generally discourage importing * since that will make it harder to trace classes back to the source."", 'comment_created': datetime.datetime(2021, 7, 28, 23, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678749219, 'comment_body': ""I don't understand this comment. Shouldn't it be a type hint instead? kwargs seems pretty generic and I don't see any reason why it wouldn't allow named boolean args.\r\n\r\nPlus, you've already typed this as Any, so why do we need a further exception?\r\n\r\nDitto below."", 'comment_created': datetime.datetime(2021, 7, 29, 1, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678749987, 'comment_body': 'Just a note -- @vojtechjelinek is making adjustments to his py3 PR so that we use str throughout the codebase. So just wanted to give you a heads-up that, after moving to py3, you should be able to use str in general (except for some special cases, he has a doc). That would be stricter than Text and can help with avoiding some errors.', 'comment_created': datetime.datetime(2021, 7, 29, 1, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678815598, 'comment_body': ""@hardikkat24 You should find a way to handle this that does not use Any, as we've discussed. If @vojtechjelinek's suggestion is incorrect then perhaps you can try to find the correct one. Have you read up on how mypy should be used with generators? "", 'comment_created': datetime.datetime(2021, 7, 29, 4, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678815750, 'comment_body': 'Any reference link to substantiate this statement? You should include it here.', 'comment_created': datetime.datetime(2021, 7, 29, 4, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678817739, 'comment_body': 'Why this ignore? Should either drop it, or have a comment explaining.', 'comment_created': datetime.datetime(2021, 7, 29, 4, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678818243, 'comment_body': 'Then please update the docstring so that it is consistent with the types, so as to avoid future developer confusion.', 'comment_created': datetime.datetime(2021, 7, 29, 4, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678818515, 'comment_body': '@hardikkat24 is correct here, there should be 2 blank lines above each function.', 'comment_created': datetime.datetime(2021, 7, 29, 4, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678818709, 'comment_body': 'Please avoid * imports, here and elsewhere.', 'comment_created': datetime.datetime(2021, 7, 29, 4, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678841774, 'comment_body': ""Add newline above this one, since it's logically separate.\r\n\r\nAlso try not to redeclare variables; can you just return cast(...) directly?"", 'comment_created': datetime.datetime(2021, 7, 29, 5, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678841925, 'comment_body': 'Ditto, try not to redeclare if possible. Can you combine the two lines? Do the casting as part of the computation.\r\n\r\nDitto elsewhere.', 'comment_created': datetime.datetime(2021, 7, 29, 5, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678842268, 'comment_body': 'This variable name should probably be firebase_model_keys (and, do the cast inline).', 'comment_created': datetime.datetime(2021, 7, 29, 5, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678842318, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2021, 7, 29, 5, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678842622, 'comment_body': 'What is the effect of this change on existing models in the datastore? /cc @vojtechjelinek ', 'comment_created': datetime.datetime(2021, 7, 29, 5, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678842894, 'comment_body': 'if entity is not None', 'comment_created': datetime.datetime(2021, 7, 29, 5, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678843180, 'comment_body': 'You could probably do `for i, entity in enumerate(entities)` or similar.', 'comment_created': datetime.datetime(2021, 7, 29, 5, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678843454, 'comment_body': 'Any ignores that are not ""ignore call"" should have comments with explanation.', 'comment_created': datetime.datetime(2021, 7, 29, 5, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678843606, 'comment_body': 'Any use of Any should have a clear comment or a TODO (probably a TODO in this case). Please fix throughout.', 'comment_created': datetime.datetime(2021, 7, 29, 5, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678844893, 'comment_body': 'Have you checked that all callers of this method pass in int?', 'comment_created': datetime.datetime(2021, 7, 29, 5, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678845275, 'comment_body': ""Yes, I don't see why we need to test this if the type checks would catch cases when a string is passed to that method erroneously. (Will they?)"", 'comment_created': datetime.datetime(2021, 7, 29, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678845433, 'comment_body': 'This should have at least a TODO. See my comment above re usage of Any in general. Ditto elsewhere.', 'comment_created': datetime.datetime(2021, 7, 29, 5, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 678891614, 'comment_body': ""Yes mypy would definitely catch type mis-matches. \r\n\r\nThere's one catch here: Our codebase it still partially annotated. Any type annotated method in the codebase which tries to call this method (`get_all_non_private_commits` here) with invalid type will throw mypy errors - but until a calling function has been type annotated, it can still possibly pass wrong argument types to `get_all_non_private_commits` (it's a possibility, can't really comment on it's probability).\r\n\r\nMy reasoning to tackle this is - if after removing these tests we don't see any coverage error then we shouldn't be  worrying about removing tests, because it means the same lines of code which was meant to handle error is being executed in some other manner - meaning it was able to handle error via a different situation. I don't see any additional catch there. On the other hand if we do see coverage error, then I cannot precisely predict what case that might be, and it can be discussed.\r\n\r\nWhat are your views on this? @seanlip @vojtechjelinek @hardikkat24 If you don't see any other problems here, I think we should start removing such tests (which use wrong argument types). Thanks!"", 'comment_created': datetime.datetime(2021, 7, 29, 7, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 678893292, 'comment_body': ""I'm fine with removing -- just do a general check, before doing so, to verify that wrong arg types can't be passed, based on the current code in the codebase. Thanks!"", 'comment_created': datetime.datetime(2021, 7, 29, 7, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679107686, 'comment_body': ""@seanlip  @sajalasati  I think removing tests which check for wrong type of arguments is a nice idea. But there is one thing that we miss here.\r\nExample: Let's say File A is typed and has a function `func(x: int)`. Then we have a FIle B which is untyped and imports file A and used `A.func`.\r\nNow we remove the test from `A_test` which checks the behaviour when wrong type value is passed. Still we can use `A.func('string')` in file B as it is not type checked.\r\nSo my opinion on this case would be to remove the tests which check for bad type values when our full codebase is type annotated. "", 'comment_created': datetime.datetime(2021, 7, 29, 12, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679108405, 'comment_body': ""Yes. I'll start using str when we migrate to py3. Also can you please share the doc with me? Thanks!"", 'comment_created': datetime.datetime(2021, 7, 29, 12, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679119324, 'comment_body': '@seanlip There are some ignores which I think must be used:\r\n1. no-untyped-call: Already approved to use due to partially typed codebase.\r\n2. arg-type: In test files, we try to provide wrong type values intentionally to check how the function behaves. So this should be used. Example is this case itself.\r\n3. [override](https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides): For example see [delete](https://github.com/oppia/oppia/blob/3d808927f2984e2e92dfbc0ba9b3cbcdf4c1ad3e/core/storage/base_model/gae_models.py#L342) of base_model and [delete](https://github.com/oppia/oppia/blob/3d808927f2984e2e92dfbc0ba9b3cbcdf4c1ad3e/core/storage/base_model/gae_models.py#L836) of VersionedModel. Here mypy gives error that signature of VersionedModel.delete is incompatible with that of BaseModel.delete. I have used this ignore 12 times in core/storage and core/platform till now. \r\n\r\nHere we have a couple of options for point 2 and 3:\r\n- Add a comment above every ignore.\r\n- Add a point in the wiki about using this.\r\n   What do you think is most appropriate?\r\n', 'comment_created': datetime.datetime(2021, 7, 29, 12, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679157942, 'comment_body': ""For override, can I change the signature of BaseModel.delete? I think I'll try this"", 'comment_created': datetime.datetime(2021, 7, 29, 13, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679433205, 'comment_body': 'Yup, here it is: https://docs.google.com/document/d/100RBK4yGzA5-1a268FEDcRerlnkxwHsLkTMzAXAnyqM/edit . Note that this will be converted to a wiki page shortly.', 'comment_created': datetime.datetime(2021, 7, 29, 19, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679439038, 'comment_body': 'For arg type, @sajalasati had a note about dropping tests for invalid types if mypy will already check this. I\'m fine with whatever you decide (to drop those tests now or later). If you drop them later, though, then every occurrence of arg-type should have a comment explaining why and a TODO pointing to the issue, so that it is easy to find all the incidents later on when we do a sweep and delete them.\r\n\r\nFor override, I thought about it and the decision on what to do here is tricky. I would suggest changing the signature of BaseModel.delete to accept *args, and putting a comment above that to say ""The unused *args here is needed in order to support additional arguments like committer_id in subclasses like VersionedModel while still keeping the method signatures consistent."" Would that work?\r\n\r\nFor the general things, please do both: add a comment above every ignore (except point 1) **and** add a point in the wiki as well. For 2 and 3, make the comments specific to each case rather than a boilerplate comment that is repeated everywhere.', 'comment_created': datetime.datetime(2021, 7, 29, 19, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679442480, 'comment_body': ""I'm OK either way. If we are removing them later, though, there should be an issue with full context, and TODOs pointing to that issue.\r\n\r\nIt's also fine with me to remove them now if you can check that the current codebase doesn't have any possibility of calling them incorrectly, and it is unlikely that such cases will be added in the future."", 'comment_created': datetime.datetime(2021, 7, 29, 19, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679462310, 'comment_body': 'One of the main reasons is that we would have to split the imports in multiple lines and have `pragma: no cover` for all lines and suppress unused import error. So this was one of the reasons. And the packages will only be imported while type checking. \r\nSo do you want me to remove wildcard import here?', 'comment_created': datetime.datetime(2021, 7, 29, 20, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679465231, 'comment_body': 'Yes, please. Though I\'m not sure you need multiple lines. Could you use commas like you did for ""from typing""?\r\n\r\n(Reasoning: even if it\'s only used when type checking, developers should be able to figure out the source of a call just by visual inspection of the code.)', 'comment_created': datetime.datetime(2021, 7, 29, 20, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679468992, 'comment_body': 'Yes will do it like typing. Thanks!\r\n', 'comment_created': datetime.datetime(2021, 7, 29, 20, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679472002, 'comment_body': ""Ah!! Fixed it, there is some bug in its typestubs and it only accepts py2 `str` but we were passing unicode ('indexed'). So I passed b'indexed' instead. Thanks!"", 'comment_created': datetime.datetime(2021, 7, 29, 20, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679491868, 'comment_body': 'I tried adding *args to the BaseModel.delete. Still mypy says that Signature of delete is not compatible with the base model. I think we should continue to use override in this case as adding *args is not working.', 'comment_created': datetime.datetime(2021, 7, 29, 21, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679492085, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 29, 21, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679492327, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 29, 21, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679492622, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 29, 21, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679492955, 'comment_body': 'In all such cases, returned cast(..) directly', 'comment_created': datetime.datetime(2021, 7, 29, 21, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679493279, 'comment_body': 'I was thinking for a common naming convention throughout and named it `keys = .. `in all the cases and in the next PR too.', 'comment_created': datetime.datetime(2021, 7, 29, 21, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679493422, 'comment_body': 'Returned cast(...) directly.', 'comment_created': datetime.datetime(2021, 7, 29, 21, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679493730, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 29, 21, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679493871, 'comment_body': 'In this specific case, I think it is fine to use override, but please include a clear comment with explanation for why we are doing this. To double-check, is it correct that ""override"" only needs to be annotated just once (rather than at every callsite)?\r\n\r\nPlease also note that this does not constitute a general exception for other cases in the codebase, and other usages of override are not approved by default.', 'comment_created': datetime.datetime(2021, 7, 29, 21, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679505598, 'comment_body': 'Yes for this method everyone references using int.', 'comment_created': datetime.datetime(2021, 7, 29, 21, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679505807, 'comment_body': 'Changing to wildcard', 'comment_created': datetime.datetime(2021, 7, 29, 21, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679515965, 'comment_body': 'Added', 'comment_created': datetime.datetime(2021, 7, 29, 22, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679521637, 'comment_body': 'I had a look at it closely. It might be fixed if we are able to get the types of `with_metaclass` as we will be removing python_utils and exposing future.utils directly. Should I mention it?', 'comment_created': datetime.datetime(2021, 7, 29, 22, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679534832, 'comment_body': '> To double-check, is it correct that ""override"" only needs to be annotated just once (rather than at every callsite)?\r\n\r\nYes, this ignore is only needed when function is declared. Not when function is called.\r\n\r\n> Please also note that this does not constitute a general exception for other cases in the codebase, and other usages of override are not approved by default.\r\n\r\nThere are 4 similar cases:\r\n1. [_Gae.import_models() ](https://github.com/oppia/oppia/blob/35bdbe6d101c2033ceb4b738a78f6f4502bb08eb/core/platform/models.py#L72) with [Platform.import_models()](https://github.com/oppia/oppia/blob/35bdbe6d101c2033ceb4b738a78f6f4502bb08eb/core/platform/models.py#L50)\r\n2. [VersionedModel.delete_multi()](https://github.com/oppia/oppia/blob/35bdbe6d101c2033ceb4b738a78f6f4502bb08eb/core/storage/base_model/gae_models.py#L897) and [CollectionModel.delete_multi()](https://github.com/oppia/oppia/blob/35bdbe6d101c2033ceb4b738a78f6f4502bb08eb/core/storage/collection/gae_models.py#L290) with [BaseModel.delete_multi()](https://github.com/oppia/oppia/blob/35bdbe6d101c2033ceb4b738a78f6f4502bb08eb/core/storage/base_model/gae_models.py#L324)\r\n3. [ConfigPropertyModel.commit()](https://github.com/oppia/oppia/blob/35bdbe6d101c2033ceb4b738a78f6f4502bb08eb/core/storage/config/gae_models.py#L73) with[ VersionedModel.commit()](https://github.com/oppia/oppia/blob/35bdbe6d101c2033ceb4b738a78f6f4502bb08eb/core/storage/base_model/gae_models.py#L998)', 'comment_created': datetime.datetime(2021, 7, 29, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679537052, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 29, 22, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679651301, 'comment_body': ""Just confirming, this is for cases like `''` empty string can also escape the if block?"", 'comment_created': datetime.datetime(2021, 7, 30, 5, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679651584, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 30, 5, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679651601, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 30, 5, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679656068, 'comment_body': 'Had a closer look. Found out the return type would be Iterator[None] as this yields nothing.', 'comment_created': datetime.datetime(2021, 7, 30, 5, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679699711, 'comment_body': 'Do you actually need ""no cover"" on this line given that it\'s already on the line above and this is just a continuation?', 'comment_created': datetime.datetime(2021, 7, 30, 7, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679700577, 'comment_body': 'Yup, give as much detail as possible in comments, especially when explaining ""why"".', 'comment_created': datetime.datetime(2021, 7, 30, 7, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679703503, 'comment_body': 'This comment is wrong. Do not blindly copy/paste comments, this is the source of many errors. Always check to make sure that the comment is specific to where you\'re putting it. I\'ve already mentioned this in the last paragraph of my comment [here](https://github.com/oppia/oppia/pull/13413#discussion_r679439038).\r\n\r\nFor this case, we should update the method signature of the superclass method. It is reasonable for the method to have a ""model_names"" arg throughout the inheritance stack.\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 30, 7, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679704310, 'comment_body': ""I don't see why you need this. Doesn't it match VersionedModel?"", 'comment_created': datetime.datetime(2021, 7, 30, 7, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679705020, 'comment_body': 'Confirming that this specific override is OK. (Again, this is not a general approval for other overrides.)', 'comment_created': datetime.datetime(2021, 7, 30, 7, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679705753, 'comment_body': 'I have already asked not to use ""import *"" for anything. Please apply these general comments throughout the PR and not just in the place that was commented on.', 'comment_created': datetime.datetime(2021, 7, 30, 7, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679706286, 'comment_body': ""(Note: @hardikkat24, to be clear, this is a question for you. You can test by making some models in develop on your local dev server and then switching to this branch. I'm only cc-ing @vojtechjelinek for info.)"", 'comment_created': datetime.datetime(2021, 7, 30, 7, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679715336, 'comment_body': ""I've mentioned this before, but try not to redeclare variables with the same name. Cast inline instead.\r\n\r\nPlease fix this throughout your PR, not just here. If you don't fix the general comments then the reviewer will just ask you to do that again, and that wastes time. "", 'comment_created': datetime.datetime(2021, 7, 30, 7, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679716689, 'comment_body': 'Same thing, here and elsewhere -- no * imports.', 'comment_created': datetime.datetime(2021, 7, 30, 7, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679716894, 'comment_body': ""Three reviewers have already commented on not using `*`. Please don't use `*` anywhere."", 'comment_created': datetime.datetime(2021, 7, 30, 7, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 679830818, 'comment_body': 'I think adding this pragma to if MYPY: only will fix this. Did this', 'comment_created': datetime.datetime(2021, 7, 30, 10, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679843557, 'comment_body': 'Yes it matches with VersionedModel, but not with BaseModel(super of VersionedModel).\r\nError: ` Signature of ""delete_multi"" incompatible with supertype ""BaseModel""  [override]`', 'comment_created': datetime.datetime(2021, 7, 30, 11, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679863447, 'comment_body': 'Ah!! I changed all the files which mere meant to be type annotated by this PR but missed other files which were having mypy issues. Sorry for this!', 'comment_created': datetime.datetime(2021, 7, 30, 11, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679863534, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2021, 7, 30, 11, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679863937, 'comment_body': ""Changed the parent class's signature and added a default value for model_names in both the classes."", 'comment_created': datetime.datetime(2021, 7, 30, 11, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 679864241, 'comment_body': 'Yeah I missed a couple of these. Fixed them!', 'comment_created': datetime.datetime(2021, 7, 30, 11, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680045797, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 30, 16, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680049610, 'comment_body': ""I had a look and talked to Vojta about this.\r\nHere we don't actually store our ENUMs in the datastore. We only return them from methods like: `get_deletion_policy()`, `get_model_association_to_user()`, `get_export_policy()`.\r\nStill I changed our ENUMs from int to str, like `KEEP = 1` to `KEEP = 'KEEP'` to keep our ENUMs similar to enums we had."", 'comment_created': datetime.datetime(2021, 7, 30, 16, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680059488, 'comment_body': 'Added a TODO for this.', 'comment_created': datetime.datetime(2021, 7, 30, 16, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680148938, 'comment_body': 'Though not stored, but ENUMS are part of the procedure how models are managed in datastore, and I assume that was the focus point here. \r\n\r\n@seanlip But with tests like [these](https://github.com/oppia/oppia/blob/d2831581de5b7665a59599ead5512ef076df5c5e/core/storage/user/gae_models_test.py#L114), wouldn\'t it be automatically tested whether new implementation is working fine or not (i.e. managing model creation/deletion/export etc the same old way or not). I am not sure which other ""effect of this change"" you are talking about.', 'comment_created': datetime.datetime(2021, 7, 30, 18, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680256104, 'comment_body': 'Please add a TODO and issue since this refers to a future task.', 'comment_created': datetime.datetime(2021, 7, 30, 22, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 680256179, 'comment_body': 'Here and elsewhere: I think we typically use ""backend""/""frontend"" and don\'t hyphenate, when talking about the noun. Could you please fix this everywhere? Probably clearer to say ""the backend"" instead of ""back-end"".\r\n\r\nAlso it should be ""type-annotated"".', 'comment_created': datetime.datetime(2021, 7, 30, 22, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 680256261, 'comment_body': 'Say which method (e.g. ""test the XXX() method""). DItto for all similar comments.', 'comment_created': datetime.datetime(2021, 7, 30, 22, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 680256453, 'comment_body': ""Don't include a default arg here. It's not needed and '' doesn't make sense semantically anyway in this context (it's not a reasonable default arg)."", 'comment_created': datetime.datetime(2021, 7, 30, 22, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 680256546, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2021, 7, 30, 22, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 680256765, 'comment_body': 'Inline the cast, so that you just have `results = cast(..., ...)`.\r\n\r\nThis is because the uncasted and casted variable represent the same thing, so calling these two different names is a bit misleading unless the cast actually has a nontrivial effect.', 'comment_created': datetime.datetime(2021, 7, 30, 22, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 680256931, 'comment_body': 'Why are we changing this? The two statements seemed unrelated before.', 'comment_created': datetime.datetime(2021, 7, 30, 22, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 680257006, 'comment_body': 'Same note as above, here and elsewhere. You can break after the comma if you want the actual ""definition"" of metadata_models to be on its own line, that could make it more readable.', 'comment_created': datetime.datetime(2021, 7, 30, 22, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 680257749, 'comment_body': ""Oh I see. So even if this is mediated through an intermediate class (VersionedModel) the error still shows up at the child class level? If so, that's annoying, but I guess it is what it is."", 'comment_created': datetime.datetime(2021, 7, 30, 22, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 680258792, 'comment_body': ""Ah actually, on further investigation, these are totally fine either way, because we don't store the enums in the datastore as @hardikkat24 mentioned. So I'm no longer worried and would be OK with anything as the values (either numbers or strings).\r\n\r\nFor any enums that are used as choices for something to store in the datastore, though, we should be careful. Otherwise a change to our representation here can mess up the old models which would become invalid since the field value they store is no longer part of the enum."", 'comment_created': datetime.datetime(2021, 7, 30, 22, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 680331977, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 31, 8, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680331989, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 31, 8, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680333679, 'comment_body': 'Done this wherever it was possible to do so.', 'comment_created': datetime.datetime(2021, 7, 31, 9, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680333754, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 31, 9, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680335449, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 31, 9, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680335849, 'comment_body': 'Removed!', 'comment_created': datetime.datetime(2021, 7, 31, 9, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680335855, 'comment_body': 'Removed!!\r\n', 'comment_created': datetime.datetime(2021, 7, 31, 9, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680336204, 'comment_body': ""Yes. And we don't have anything to fix this!"", 'comment_created': datetime.datetime(2021, 7, 31, 9, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680336479, 'comment_body': 'Moved the discussion to the doc.', 'comment_created': datetime.datetime(2021, 7, 31, 9, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680360129, 'comment_body': '@hardikkat24 I think a better wording will be - `Use of Any in the type annotation below will be removed when....` - it would be easier for developers to understand that this TODO is related to typing when explicitly said.', 'comment_created': datetime.datetime(2021, 7, 31, 13, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680466604, 'comment_body': ""Nit: it would be slightly better to use an actual model name here, so that it's clear that the error isn't due to what is obviously an invalid string."", 'comment_created': datetime.datetime(2021, 8, 1, 7, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 680467577, 'comment_body': 'Where was it not possible to do so?', 'comment_created': datetime.datetime(2021, 8, 1, 7, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 680467596, 'comment_body': 'I have replied in the doc.', 'comment_created': datetime.datetime(2021, 8, 1, 7, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 680531532, 'comment_body': 'Yeah, I know about the usage. I just think that it is useful to add a generic comment everywhere we use the assert so that devs are not confused.', 'comment_created': datetime.datetime(2021, 8, 1, 16, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 680533382, 'comment_body': 'Why is the `b` added?', 'comment_created': datetime.datetime(2021, 8, 1, 16, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 680534779, 'comment_body': 'Why not?\r\n```suggestion\r\n        return cls._PLATFORM_MAPPING[GAE_PLATFORM]\r\n```', 'comment_created': datetime.datetime(2021, 8, 1, 16, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 680537001, 'comment_body': 'Please split this up into multiple lines.', 'comment_created': datetime.datetime(2021, 8, 1, 16, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 680542910, 'comment_body': 'Ditto elsewhere ', 'comment_created': datetime.datetime(2021, 8, 1, 17, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 680543049, 'comment_body': 'Why is this line modified?', 'comment_created': datetime.datetime(2021, 8, 1, 17, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 680544398, 'comment_body': 'Split to multiple lines please.', 'comment_created': datetime.datetime(2021, 8, 1, 17, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 680544958, 'comment_body': 'Can we do this?\r\n```suggestion\r\n    COMMON_RIGHTS_ALLOWED_COMMANDS\r\n) # type: List[Dict[Text, Union[Text, List[Text], Dict[Text, Union[Text, List[Text]]]]]]\r\n```', 'comment_created': datetime.datetime(2021, 8, 1, 17, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 680561588, 'comment_body': 'Because there is some bug or something in stubs for .get() as it only accepts str(not unicode) as first argument.', 'comment_created': datetime.datetime(2021, 8, 1, 20, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680562092, 'comment_body': 'If we do this, we face lint errors. See [here](https://github.com/oppia/oppia/pull/13413#issuecomment-881905916) for errors.\r\n', 'comment_created': datetime.datetime(2021, 8, 1, 20, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680716770, 'comment_body': 'Example:\r\n```\r\nresult = query.fetch_page(...)\r\nmodels = cast(List[BaseModels], result[0])\r\nreturn (models, ...)\r\n```\r\nThese cases.\r\nWherever I found same thing in 2 variables due to casting, changed them. Thanks!', 'comment_created': datetime.datetime(2021, 8, 2, 7, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680718188, 'comment_body': 'Changed the implementation and used `# type: ignore[return]` as per the discussion on doc.', 'comment_created': datetime.datetime(2021, 8, 2, 7, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680719643, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 2, 7, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680729366, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 2, 7, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680732238, 'comment_body': 'Changed it earlier but forgot to remove it. Thanks!', 'comment_created': datetime.datetime(2021, 8, 2, 7, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680770790, 'comment_body': 'A todo is added for dicts where Dict[Text, Any] is used and usage of Any cannot be avoided. Have already added TODO here also.', 'comment_created': datetime.datetime(2021, 8, 2, 8, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680771090, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 2, 8, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680771161, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 2, 8, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680771528, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 2, 8, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 681337758, 'comment_body': 'Hmm, interesting. Can we create an issue for this? Since I think that `return cls._PLATFORM_MAPPING[GAE_PLATFORM]` would be much better.', 'comment_created': datetime.datetime(2021, 8, 2, 23, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 681337958, 'comment_body': 'Ok.', 'comment_created': datetime.datetime(2021, 8, 2, 23, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 681338902, 'comment_body': '```suggestion\r\n            snapshot_id, committer_id, commit_type, commit_message, commit_cmds\r\n        ) # type: BaseSnapshotMetadataModel\r\n```', 'comment_created': datetime.datetime(2021, 8, 2, 23, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 681339024, 'comment_body': '```suggestion\r\n            self.SNAPSHOT_CONTENT_CLASS.create(snapshot_id, snapshot)\r\n        ) # type: BaseSnapshotContentModel\r\n```', 'comment_created': datetime.datetime(2021, 8, 2, 23, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 681344251, 'comment_body': 'A function that returns a tuple of three values where first is a list of some type of models, second is a cursor, and the third is a boolean is in a few places in the codebase. Would it be possible to make a generic type variable for it? ', 'comment_created': datetime.datetime(2021, 8, 3, 0, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 681348678, 'comment_body': 'Hi @vojtechjelinek -- I think, if we do that, it should probably be a generic SearchResult domain object. Wdyt?', 'comment_created': datetime.datetime(2021, 8, 3, 0, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 681452403, 'comment_body': 'It is possible to make a generic type variable for it. \n@seanlip Do you think using domain object will be a nice thing to do? I will add this in the issue created for this. Please let me know. Thanks!!', 'comment_created': datetime.datetime(2021, 8, 3, 5, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 681456173, 'comment_body': ""Yes, I think so -- if you have stuff that's passed around internally to the Oppia codebase, then in general, I would suggest a domain object. Thanks for checking!"", 'comment_created': datetime.datetime(2021, 8, 3, 5, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 681465782, 'comment_body': 'Have added it to the issue. Thanks!!', 'comment_created': datetime.datetime(2021, 8, 3, 6, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 681467367, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 3, 6, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 681467456, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 3, 6, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 681912701, 'comment_body': 'Yeah, domain object makes more sense here, I think mainly because we have a chain of methods that return 3-tuple. If there was just one function in that change custom type might be better', 'comment_created': datetime.datetime(2021, 8, 3, 16, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 683735283, 'comment_body': '`Function to save the entities to the datastore used for testing.`', 'comment_created': datetime.datetime(2021, 8, 5, 19, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 683739651, 'comment_body': '`We are using BaseModel.put() to save the changes to the datastore since the put() method which TestBaseHumanMaintainedModel class inherits from BaseHumanMaintainedModel raises NotImplementedError.`', 'comment_created': datetime.datetime(2021, 8, 5, 19, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}]","[{'commit_sha': 'a78400ba8b11265e072cdb4d2312064f6d7cd01a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '524165ae51575cc2d067517dd5bfc55c16be2179', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590c3a3ba009261e53a9e01151bf4342e5b0fceb', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e5f44e99b46fc3aaf3435b7fa457d636ad468ba', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03d43722c7743a9df4448171d17ea0b10ea921b7', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c14e10a7e0a5a0f90278c5bfda9a2514148161b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '093568183a149449b88b988734d41e8e1a758f6c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50708339c88b517e201359c7901d0ef4d68b7337', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f8db937fe9741d16536bad06ed2bbcd77bfd952', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaac5737572efd20dec7c0cfa54bf7b493395fa8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a95335d718fe4881d1940431f7e4d3e9721b8663', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a986adb7e6e36ad3b9081a17623c7ab9382c721c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eb28d10d3382aed198b86548f488ca5cf85cb06', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c0201490e9084db8fcc8e5bb09e8ef558ee0217', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa5c8f12119a1fdda5f6ec32120eca7b5748e03d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef00b4b4633b87341d102880e122f98bfa4dbbef', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b66dbe40e2cfaeade5a0e7a94784041f3d73ac53', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c37d177635b185bc7ac1fa84c04ecf66f129b69', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dbf3773bd299e853e63e8cbe10ca80a8819ac54', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c9e5f27ee2007c0be4e4f72c17a2f3884a5344b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63136ad9cf4fbbd2a09f3778439072c9843a08c0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3782126910de4fb0f1921ebea32ccb1479f3ec1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a90b222b50ff315d8ecd2405960aabadd4d0e8da', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '281830572cc8afc9870c981f64e369a0e10b9352', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f4f63f1d7a9895ded346649047ad73fc4d98e5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5fdaa1216f26678a5e8b4867e0a27e55be4f1d2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c76073a045e1ab87a6936d48ab6b016e60625ca9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b784b7245c1c7c185cbc92b6594c3b27be398bb1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381f0d25cb7f3ac68a448f76af4b26097a7f1df1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '861386e37027a5a4b7e7754df1cfa65739ce8bdc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ad5c768e2f95fa15002f1ea0a9f251ae70a54c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48660cbcac278477c91afb3c20ad6f99149523af', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '759f0e70b4331631b1db810075a5356441a32ab5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f21e6cb150241e611c64ffeb179122bfb50d9a5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd94e9e0e409fd73ee79eaf17359a1e421fe213e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6769aa1261ff491a4eabcea541d8833a9e3e7e27', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c71a79ecab422e7103006288acb9dd97ffcec1e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38e712cbecaa2d9b9ee6ae634706c530374499cd', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3263ebe65df17791c07e43946324d3a774d74d1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cfff8c728d3b2dfdcf05cc02a6d9d5ea7162e08', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '499161e4eda7e0df34f1702abf654fd7bf97a360', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cdabc7faf2f1a7266beebada5ab17bc03dfc561', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '795cfacd64b24293a03f198b5a1f322f9e409bd3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69248c4a4e4a0816dd92d5445b60d045a697ae42', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2a1f95fb7663e880deaeead8cd1a38359cbea92', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de2d109a73d59628ed0adf85a53ac2cee17facfc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdbcec3d20db946fd63c9f39a4ad9048bdc6b6f0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0ebf54398d923ba4302ebdd8f3ac8697e4ab83f', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c341f726a43f15a53f0d2276798d8b040949f76e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '713afe7eb0f459396dad5506cb5dc2ebbb02a785', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67b36537318a91d8e4815d899ececa22db5a2483', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46527ea12af5b58b5d779bee404536abae56420d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4244b9baa0000b7e12bd4913e95eca62c5e36d3c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15386f37ba4864616a7ac9ab1a66219378197157', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '834145acd4e85e84c806e06405d387ecf3226bb6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b8a4bdb654a677fba86e8335d10d51e3044e5fc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '817a3274a17b254939a11429795b728c1adc32b6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b910d35da09d6eb0ed206f9af037d93d944b4088', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3affdd3ea88c5e967718e0eab4bf2a22157c84b2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '627c64d877412003b6a1257a85c6e86a558b3a96', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c43166ef40ec7e7440e6c6ac56673af634aee7a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faff0ba692bc6f623fc8b1fcc18486f13b3c4eb6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61ccf3d0b2374c1585479030bb2a87ed253a0a55', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '254c3fbdc25d45da03d7ace3b135d87ff82f680c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f9a9654699fb74f3d1383a0efcdc3bb2311d704', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa09ef717096b547698183ed8d616e4697bafbba', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}]",Hardik Katehara,54679643,,User,,28,,35,21
699886179,M2.2: Add type annotations,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #NA.
2. This PR does the following: Added type annotations to files of core/storage/ :
   - email
   - exploration
   - feedback
   - improvements
   - job
   - opportunity
   - user
 
 This is stacked PR on #13413 

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13524,https://api.github.com/repos/oppia/oppia/pulls/13524,https://github.com/oppia/oppia/pull/13524,closed,1442,808,19,110,42,102,1,1,[{'name': 'PR: Affects datastore layer'}],2021-07-29 22:45:52+00:00,2021-08-09 07:59:11+00:00,897199.0,"10 days, 9:13:19","[{'comment_id': 680467830, 'comment_body': 'I think it would be best to retain the old variable name i.e. `feedback_models`.', 'comment_created': datetime.datetime(2021, 8, 1, 7, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680467893, 'comment_body': 'I think it would be best to retain the old variable name i.e. `feedback_models`.', 'comment_created': datetime.datetime(2021, 8, 1, 7, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680468178, 'comment_body': ""Why is this split across multiple lines? This line of code hasn't changed, so it should still fit within 80 character limit."", 'comment_created': datetime.datetime(2021, 8, 1, 7, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680468608, 'comment_body': 'Casting `keys` first and then passing it to the function as is (i.e. casted) will improve readability.\r\n\r\n```python\r\nkeys = cast(List[datastore_services.Key], ...)\r\ndatastore_services.delete_multi(keys)\r\n```', 'comment_created': datetime.datetime(2021, 8, 1, 7, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680469494, 'comment_body': ""@hardikkat24 Just want to confirm one thing here - will mypy report error if a developer puts unnecessary cast like it reports error for unnecessary ignores? Have you checked that? (To make it clear, it's a general question, I don't see problem using it here)"", 'comment_created': datetime.datetime(2021, 8, 1, 7, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680470417, 'comment_body': 'Same comment here as earlier - can we cast the variable before only, and then just pass the variable alone into the function - will improve readability.', 'comment_created': datetime.datetime(2021, 8, 1, 8, 0, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680471378, 'comment_body': 'I agree using this syntax looks better here style.\r\n@DubeySandeep FYI - we had this conversation before [here](https://github.com/oppia/oppia/pull/13413#discussion_r672503927) but I am not sure if you approved this usage in that PR, so letting you know again.', 'comment_created': datetime.datetime(2021, 8, 1, 8, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680471644, 'comment_body': 'You can remove this newline.', 'comment_created': datetime.datetime(2021, 8, 1, 8, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680471999, 'comment_body': 'Same comment as before - can we cast the keys variable earlier and pass that as is here.', 'comment_created': datetime.datetime(2021, 8, 1, 8, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680472085, 'comment_body': 'Ditto - cast the variable before and then pass it as is here to improve readability.', 'comment_created': datetime.datetime(2021, 8, 1, 8, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680492184, 'comment_body': 'Cast the variable before (ditto as previous comments).', 'comment_created': datetime.datetime(2021, 8, 1, 10, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680492431, 'comment_body': 'Cast the variable before (ditto as earlier comment).', 'comment_created': datetime.datetime(2021, 8, 1, 10, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680492488, 'comment_body': 'Cast the variable before.', 'comment_created': datetime.datetime(2021, 8, 1, 10, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680492611, 'comment_body': 'Cast the variable before (ditto as previous comments about this).', 'comment_created': datetime.datetime(2021, 8, 1, 10, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680492723, 'comment_body': 'Cast the variable before (ditto as previous comments about this).', 'comment_created': datetime.datetime(2021, 8, 1, 10, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680492852, 'comment_body': 'Cast the variable before (ditto as previous comments about this).', 'comment_created': datetime.datetime(2021, 8, 1, 10, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680492901, 'comment_body': 'Cast the variable before (ditto as previous comments about this).', 'comment_created': datetime.datetime(2021, 8, 1, 10, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680493010, 'comment_body': 'Cast the variable before (ditto as previous comments about this).', 'comment_created': datetime.datetime(2021, 8, 1, 10, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680493063, 'comment_body': 'Cast the variable before (ditto as previous comments about this).', 'comment_created': datetime.datetime(2021, 8, 1, 10, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680493785, 'comment_body': ""Creating a set by casting empty list doesn't make much sense here. We could just use `ids = set()` too, right? Though I think you would still need the type hint."", 'comment_created': datetime.datetime(2021, 8, 1, 11, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 680832388, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 2, 9, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680832555, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 2, 9, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680836481, 'comment_body': 'Did some change earlier and removed thechanges. Done!', 'comment_created': datetime.datetime(2021, 8, 2, 9, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680858559, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 8, 2, 10, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680860405, 'comment_body': 'Yes it throws errors for redundant casts,\r\nEx:\r\n```\r\nx = 12\r\nz = cast(int, x)\r\n```\r\nError:\r\n```\r\nRedundant cast to ""int""  [redundant-cast]\r\n\r\n```', 'comment_created': datetime.datetime(2021, 8, 2, 10, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680861120, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 2, 10, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680861511, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 8, 2, 10, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680862731, 'comment_body': 'Done!!', 'comment_created': datetime.datetime(2021, 8, 2, 10, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680862929, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 2, 10, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680864400, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 8, 2, 10, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680864758, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 8, 2, 10, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680864925, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 8, 2, 10, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680865128, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 8, 2, 10, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680865261, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 8, 2, 10, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680865484, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 8, 2, 10, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680865744, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 8, 2, 10, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680865937, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 2, 10, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680866270, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 2, 10, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 680868742, 'comment_body': 'Yes set() is same is set([]). Changed it!', 'comment_created': datetime.datetime(2021, 8, 2, 10, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 681116417, 'comment_body': ""I've commented in a previous PR, multiple times, on not using *.\r\n\r\nPlease fix all the issues here that arise from the previous code review, and then you can assign reviewers. You should check the Files Changed tab to ensure that everything is correct before assigning reviewers (i.e., do a self-review)."", 'comment_created': datetime.datetime(2021, 8, 2, 16, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 681123639, 'comment_body': ""Actually I am waiting for PR1 to get completed to merge it to this PR. That's why I wanted to get files of some specific folders in this PR to be checked as this is a stacked PR. See the files [here](https://github.com/oppia/oppia/pull/13524#issuecomment-890983198).\r\n\r\nThanks!!"", 'comment_created': datetime.datetime(2021, 8, 2, 16, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 681127909, 'comment_body': 'This is fine and is probably preferred for methods with many arguments.', 'comment_created': datetime.datetime(2021, 8, 2, 16, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 681132084, 'comment_body': 'We have came to a conclusion to split the method definition whenever the type annotations exceeds 80char limit. Changed PR1 also according to this!', 'comment_created': datetime.datetime(2021, 8, 2, 17, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 681176241, 'comment_body': 'Thanks for confirming! (Will still keep the conversation unresolved for visibility)', 'comment_created': datetime.datetime(2021, 8, 2, 18, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 681360591, 'comment_body': 'Again as in the previous PR, can this be generalized and used here?', 'comment_created': datetime.datetime(2021, 8, 3, 1, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 681467486, 'comment_body': 'Can we have this as 1 flag instead of multiple? Provides a single point of control, and easily enabling/disabling this flag.', 'comment_created': datetime.datetime(2021, 8, 3, 6, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 681470823, 'comment_body': 'Actually this is not a flag. This must be false in our codebase. Reason:\r\nThe `MYPY` flag should be false throughout our code. And while type checking, mypy assumes it to be True. If we want to set it to true, it will be better to just remove this variable. Thanks!', 'comment_created': datetime.datetime(2021, 8, 3, 6, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 682122416, 'comment_body': ""This function isn't used anywhere, just delete it."", 'comment_created': datetime.datetime(2021, 8, 3, 21, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 682132789, 'comment_body': 'Why is the return list optional? I think in other places we make it non optional.', 'comment_created': datetime.datetime(2021, 8, 3, 22, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 682132928, 'comment_body': 'ditto as above', 'comment_created': datetime.datetime(2021, 8, 3, 22, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 682133124, 'comment_body': 'Why optional here?', 'comment_created': datetime.datetime(2021, 8, 3, 22, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 682133260, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2021, 8, 3, 22, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 682134022, 'comment_body': 'Hmm, can we use `get` instead of fetch here? (since we are returning only one result anyway', 'comment_created': datetime.datetime(2021, 8, 3, 22, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 682134977, 'comment_body': 'Why is this changed?', 'comment_created': datetime.datetime(2021, 8, 3, 22, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 682136324, 'comment_body': '```suggestion\r\n            ).fetch(keys_only=True)\r\n```\r\nand remove the bracket from prev line.', 'comment_created': datetime.datetime(2021, 8, 3, 22, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 682136414, 'comment_body': '```suggestion\r\n            ).fetch(keys_only=True)\r\n```\r\nand remove the bracket from prev line.', 'comment_created': datetime.datetime(2021, 8, 3, 22, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 682136872, 'comment_body': '```suggestion\r\n            cls.query(\r\n                cls.can_review_questions == True  # pylint: disable=singleton-comparison\r\n            ).fetch( keys_only=True)\r\n        )\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 22, 13, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 682137053, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2021, 8, 3, 22, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 682516264, 'comment_body': ""Yes. I have added changing such tuples to domain objects in the issue already as per your and Sean's suggestion!"", 'comment_created': datetime.datetime(2021, 8, 4, 11, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 682516583, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 4, 11, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 682519345, 'comment_body': ""Yes I'm wrong here. fetch_page() returns empty list for no result. Thanks!"", 'comment_created': datetime.datetime(2021, 8, 4, 11, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 682521313, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 4, 11, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 682522038, 'comment_body': ""I'm wrong here. Thanks!"", 'comment_created': datetime.datetime(2021, 8, 4, 11, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 682522273, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 4, 11, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 682525397, 'comment_body': 'Yes, changed!', 'comment_created': datetime.datetime(2021, 8, 4, 11, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 682526391, 'comment_body': 'By mistake, wanted to add None to its return type. Thanks!!', 'comment_created': datetime.datetime(2021, 8, 4, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 682527057, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 4, 11, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 682527147, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 4, 11, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 682529197, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 4, 11, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 683034661, 'comment_body': '```suggestion\r\n        return cast(\r\n            Optional[UserSettingsModel],\r\n            cls.query(cls.email == email).get()\r\n        )\r\n```', 'comment_created': datetime.datetime(2021, 8, 4, 23, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 683163888, 'comment_body': 'Done. Thanks!!', 'comment_created': datetime.datetime(2021, 8, 5, 6, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684298831, 'comment_body': 'Solves [this](https://github.com/oppia/oppia/pull/13413#discussion_r683735283) comment as per earlier PR.', 'comment_created': datetime.datetime(2021, 8, 6, 14, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684299154, 'comment_body': 'Solves [this](https://github.com/oppia/oppia/pull/13413#discussion_r683739651) comment as per earlier PR.', 'comment_created': datetime.datetime(2021, 8, 6, 14, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684307301, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2021, 8, 6, 15, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684310994, 'comment_body': 'How is non-None return guaranteed here now? Have you checked that tests cover this expected behaviour? This is an important question because you are also casting the result in the return statement.', 'comment_created': datetime.datetime(2021, 8, 6, 15, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684311215, 'comment_body': 'Ditto, how is non-None guaranteed here now?', 'comment_created': datetime.datetime(2021, 8, 6, 15, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684322038, 'comment_body': 'Ditto, how is non-None guaranteed here now?', 'comment_created': datetime.datetime(2021, 8, 6, 15, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684373978, 'comment_body': ""This function is not used anywhere. See Vojta's comment too [here](https://github.com/oppia/oppia/pull/13524#discussion_r682122416)."", 'comment_created': datetime.datetime(2021, 8, 6, 16, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684381267, 'comment_body': 'The [test](https://github.com/oppia/oppia/blob/33349322f5669cbff40c02739ae86e71a5c24e7e/core/storage/opportunity/gae_models_test.py#L142) which shows that even if there is no result, a list is returned (see the fetched entities after deletion). Moreover, we can see in the ndb documentation [here](https://cloud.google.com/appengine/docs/standard/python/ndb/queryclass)  that fetch() and fetch_page() return a list always while get() can return None.', 'comment_created': datetime.datetime(2021, 8, 6, 17, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684381679, 'comment_body': 'Gave reasoning in the comment above.', 'comment_created': datetime.datetime(2021, 8, 6, 17, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684381688, 'comment_body': 'Gave reasoning in the comment above.', 'comment_created': datetime.datetime(2021, 8, 6, 17, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684419686, 'comment_body': 'Yes I was convinced by the documentation but just wanted to see which test is covering that. Missed this test during review, thanks for clear explanation!', 'comment_created': datetime.datetime(2021, 8, 6, 18, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684421275, 'comment_body': 'Looks good, found a test here also confirming a list is always returned.', 'comment_created': datetime.datetime(2021, 8, 6, 18, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684736650, 'comment_body': 'This comment is not so clear, it\'s not clear whether the ""used for testing"" part applies to the datastore or to the function. Can you rewrite it so that it\'s unambiguous?', 'comment_created': datetime.datetime(2021, 8, 8, 8, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 684736697, 'comment_body': '""....raises NotImplementedError, and we do actually want to save the changes in this case.""', 'comment_created': datetime.datetime(2021, 8, 8, 8, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 684736749, 'comment_body': ""We're now in Python 3. Could you use str throughout instead? Would be better not to promulgate Text all over the place if that's not needed."", 'comment_created': datetime.datetime(2021, 8, 8, 8, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 684736915, 'comment_body': ""Why is this optional? That seems weird to me conceptually... won't emails always need a recipient or are there cases in which they do not? If the latter, what are those cases?"", 'comment_created': datetime.datetime(2021, 8, 8, 8, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 684737136, 'comment_body': 'Where is the corresponding TODO (here and elsewhere)?', 'comment_created': datetime.datetime(2021, 8, 8, 8, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 684737317, 'comment_body': 'So why don\'t we put it in the ""if MYPY"" block?', 'comment_created': datetime.datetime(2021, 8, 8, 8, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 684766843, 'comment_body': 'Cannot be put inside MYPY block now. As we are moving to py3 type annotations, moving the import of feedback_domain inside if MYPY: block will mean that feedback_domain is inaccessibile during runtime and will throw errors.\r\nIn py2 style this was possible because type annotations were in the form of comments but in py3, this is not possible as type annotations are not comments now.', 'comment_created': datetime.datetime(2021, 8, 8, 12, 22, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684766948, 'comment_body': 'Yes, we should do this. Will also remove the point stating to use Text in place of str from the wiki. Thanks!', 'comment_created': datetime.datetime(2021, 8, 8, 12, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684767554, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 8, 12, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684768298, 'comment_body': 'Done. PTAL', 'comment_created': datetime.datetime(2021, 8, 8, 12, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684768813, 'comment_body': ""Yes I think I'm wrong here. There is no test here which checks for None. Changed it to `List[str]. Thanks!"", 'comment_created': datetime.datetime(2021, 8, 8, 12, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684769951, 'comment_body': 'Ah! Forgot to add TODO for these tuples. Added. Thanks!!', 'comment_created': datetime.datetime(2021, 8, 8, 12, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684820292, 'comment_body': 'Try to change to Python 3 typing wherever possible. I will typically comment on this for anything that\'s been touched during a PR (like this one), but at some point you might find it simpler to just do it once and for all for the codebase so that there is a consistent global standard. (People are already following the ""wrong"" patterns, we should try to stop that soonish.)', 'comment_created': datetime.datetime(2021, 8, 8, 19, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 684820511, 'comment_body': ""OK, perhaps you should explain that in the comment. (You don't need to refer to py2, just explain why it needs to be outside the mypy block in py3.)"", 'comment_created': datetime.datetime(2021, 8, 8, 19, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 684821587, 'comment_body': ""Hey Sean, We'll be changing the type annotations for files merged in PR1 in couple of weeks. I have changed all the files to be type annotated by this PR. Please wait till then, I had a talk with @sajalasati about this and planned this after my GSoC work. Thanks a lot!"", 'comment_created': datetime.datetime(2021, 8, 8, 19, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684821883, 'comment_body': ""Hm OK -- for this case, I'm fine with that. But, just as a general note, if you make major changes to a file in a PR, that file should be typed properly as part of that PR. (This case isn't that major since it's just comments.)"", 'comment_created': datetime.datetime(2021, 8, 8, 19, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 684822105, 'comment_body': 'You should probably update the lint checks ASAP though to require the new Py3 annotations, so that other developers know to use them. Otherwise that just creates more work later on as the ""not wanted"" practices spread.', 'comment_created': datetime.datetime(2021, 8, 8, 20, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 684823180, 'comment_body': 'Added. THanks!', 'comment_created': datetime.datetime(2021, 8, 8, 20, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684823668, 'comment_body': 'I have also created an issue for tracking. See [here](https://github.com/oppia/oppia/issues/13602). Thanks!!', 'comment_created': datetime.datetime(2021, 8, 8, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}]","[{'commit_sha': 'a78400ba8b11265e072cdb4d2312064f6d7cd01a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '524165ae51575cc2d067517dd5bfc55c16be2179', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590c3a3ba009261e53a9e01151bf4342e5b0fceb', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e5f44e99b46fc3aaf3435b7fa457d636ad468ba', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03d43722c7743a9df4448171d17ea0b10ea921b7', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c14e10a7e0a5a0f90278c5bfda9a2514148161b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '093568183a149449b88b988734d41e8e1a758f6c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50708339c88b517e201359c7901d0ef4d68b7337', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f8db937fe9741d16536bad06ed2bbcd77bfd952', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaac5737572efd20dec7c0cfa54bf7b493395fa8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a95335d718fe4881d1940431f7e4d3e9721b8663', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a986adb7e6e36ad3b9081a17623c7ab9382c721c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eb28d10d3382aed198b86548f488ca5cf85cb06', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c0201490e9084db8fcc8e5bb09e8ef558ee0217', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa5c8f12119a1fdda5f6ec32120eca7b5748e03d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef00b4b4633b87341d102880e122f98bfa4dbbef', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b66dbe40e2cfaeade5a0e7a94784041f3d73ac53', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c37d177635b185bc7ac1fa84c04ecf66f129b69', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dbf3773bd299e853e63e8cbe10ca80a8819ac54', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c9e5f27ee2007c0be4e4f72c17a2f3884a5344b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63136ad9cf4fbbd2a09f3778439072c9843a08c0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3782126910de4fb0f1921ebea32ccb1479f3ec1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a90b222b50ff315d8ecd2405960aabadd4d0e8da', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '281830572cc8afc9870c981f64e369a0e10b9352', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f4f63f1d7a9895ded346649047ad73fc4d98e5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5fdaa1216f26678a5e8b4867e0a27e55be4f1d2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c76073a045e1ab87a6936d48ab6b016e60625ca9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b784b7245c1c7c185cbc92b6594c3b27be398bb1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381f0d25cb7f3ac68a448f76af4b26097a7f1df1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '861386e37027a5a4b7e7754df1cfa65739ce8bdc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ad5c768e2f95fa15002f1ea0a9f251ae70a54c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48660cbcac278477c91afb3c20ad6f99149523af', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '759f0e70b4331631b1db810075a5356441a32ab5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f21e6cb150241e611c64ffeb179122bfb50d9a5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd94e9e0e409fd73ee79eaf17359a1e421fe213e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6769aa1261ff491a4eabcea541d8833a9e3e7e27', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5cc5ce409d5eedafd67c08aba3214f202baae96', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ed37492fa24d15c2fd624638d01600ca40bd395', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c71a79ecab422e7103006288acb9dd97ffcec1e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38e712cbecaa2d9b9ee6ae634706c530374499cd', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3263ebe65df17791c07e43946324d3a774d74d1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cfff8c728d3b2dfdcf05cc02a6d9d5ea7162e08', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '499161e4eda7e0df34f1702abf654fd7bf97a360', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cdabc7faf2f1a7266beebada5ab17bc03dfc561', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '795cfacd64b24293a03f198b5a1f322f9e409bd3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69248c4a4e4a0816dd92d5445b60d045a697ae42', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf695b36751fe2ce74d5cd4278c067ab92ebea6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2a1f95fb7663e880deaeead8cd1a38359cbea92', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de2d109a73d59628ed0adf85a53ac2cee17facfc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdbcec3d20db946fd63c9f39a4ad9048bdc6b6f0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bc4ac0cad36d3318b9185cbf6487c3672a2f058', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0ebf54398d923ba4302ebdd8f3ac8697e4ab83f', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c341f726a43f15a53f0d2276798d8b040949f76e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '713afe7eb0f459396dad5506cb5dc2ebbb02a785', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67b36537318a91d8e4815d899ececa22db5a2483', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46527ea12af5b58b5d779bee404536abae56420d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a881c1e435e18ed055a72342b3df26922ff1c8d0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d1acbcc1971c205d3165ca371364cb2c4600b13', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05be95650726a029b486d9d07cb021a178570fb3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '603a60b55e64d30dbaf17888590cd8829455d44a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12e219ce627466adb8f1301d3eb39de26756793d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13bb96ab82c085f4739a3380f8a495704d85af5d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4244b9baa0000b7e12bd4913e95eca62c5e36d3c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ede02e464c71e5c331c13f74893c38d0ed04c022', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b3423ba65743f0a57eaf57d235109f4dc3d2e6a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96a6576b53bc4857a97800ffb8f6657629b21233', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15386f37ba4864616a7ac9ab1a66219378197157', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '834145acd4e85e84c806e06405d387ecf3226bb6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b94a27f3f93c2d656a7e5f678528196818af1645', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b8a4bdb654a677fba86e8335d10d51e3044e5fc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '817a3274a17b254939a11429795b728c1adc32b6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f133fb8cec9c7e714b880a030e389488bab9b96', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b910d35da09d6eb0ed206f9af037d93d944b4088', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3affdd3ea88c5e967718e0eab4bf2a22157c84b2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '627c64d877412003b6a1257a85c6e86a558b3a96', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cacedff65e1eda462056a8f571801876d64173e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ef246f22e47db8362cb6446651aa83c739bc4d8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d9524d3fe42b55c8468fb91ef5eea55ed37c02b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cf1a1fc038aa347179c63f22ccc9a9784870a68', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c43166ef40ec7e7440e6c6ac56673af634aee7a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faff0ba692bc6f623fc8b1fcc18486f13b3c4eb6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4d75191fa621bc90c7e94313b4607888adacc2c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4023643c456c5f92cd21cb56a85a5e21490a418', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '665ab42dbc7e0e65d8abae60589e9d869107e825', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61ccf3d0b2374c1585479030bb2a87ed253a0a55', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '254c3fbdc25d45da03d7ace3b135d87ff82f680c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c940d791fd82b76a9be2f6da3a1413f972b8d700', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfb159c17986c88ccca52f5d283b20913da13e10', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f9a9654699fb74f3d1383a0efcdc3bb2311d704', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa09ef717096b547698183ed8d616e4697bafbba', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c44f640a54c1ba7265b5c780fbef3d02ca5e41a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cea52d755a3e0f8cc07b5bffa38258a75606a64', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c87fa48231b3a7108a4cad86f445eca1134af9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30a52102ba81b30fed6ba329c3831e6aee41aaa2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0991eb6f95dedc7e17a0549035db3212f52edefe', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2575b76966aa4a67d23ec8ff3f9251f9ec0be19e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0e9ab9ba07885697bbfd63dbd2d043ac10f452c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ba259de2e1805d9ddc702b62969fed96b09625', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74099096ca4606f3e9a2f52a06145738b1f9f70e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '599a13cde83013be088e1127b5c0a70f4fac82bf', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '418ea217a5eb74f97ff04a164f63f3316ff73413', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37e90bae27c366baad00f2d509eced306b8db45c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '065a264f58270620fe9314fbeedcdacd025faf2e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31e1f5ecf3f1b1ebc7ce1cea2962edac335a7236', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbb01af57754c6db78d3452b7367033603ae0a2a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd25e852123958d7f1cfd0e50ec0fa9906ce70d0a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '318dc7f0bd6a39c39ac2aee9b583c5866c8cd8ba', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '991aacef9c56ef3de82ec808ef4ebb62cb74bf1b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91357c77cb3ea506b321172f08ec8e2fa8667e62', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ebcc39f9616bd737608205584a45f32575d2c1e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}]",Hardik Katehara,54679643,,User,,28,,35,21
702302940,M2.3: Add type annotations,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: Added type annotations to files of core/storage/ 
- question
- recommendation
- skill
- statistics
- story
- subtopic
- suggestion
- topic
- translation
## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [ ] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface in various display sizes (mainly phone, tablet, and desktop display size) to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13565,https://api.github.com/repos/oppia/oppia/pulls/13565,https://github.com/oppia/oppia/pull/13565,closed,1343,647,22,153,33,106,2,1,"[{'name': 'PR: LGTM'}, {'name': 'PR: Affects datastore layer'}]",2021-08-03 13:53:58+00:00,2021-08-12 06:37:21+00:00,751403.0,"8 days, 16:43:23","[{'comment_id': 684430428, 'comment_body': ""A general comment here regarding reassigning values to a variable - it's generally a bad practice and is better to use a new variable (i.e. with new name) in such cases like `updated_question_model1`."", 'comment_created': datetime.datetime(2021, 8, 6, 18, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684432749, 'comment_body': 'This usage of Dict[Text,Any] is missing a comment and TODO.', 'comment_created': datetime.datetime(2021, 8, 6, 18, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684432929, 'comment_body': 'Ditto: This usage of Dict[Text,Any] is missing a comment and TODO.', 'comment_created': datetime.datetime(2021, 8, 6, 18, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684433121, 'comment_body': 'Ditto: This usage of Dict[Text,Any] is missing a comment and TODO.', 'comment_created': datetime.datetime(2021, 8, 6, 18, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684435915, 'comment_body': 'Would be helpful to know here which case in the codebase is causing this type violation - it could possibly be fixed since **we already have a domain object defined** in this case. Would recommend the same for handling other similar cases.', 'comment_created': datetime.datetime(2021, 8, 6, 18, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684437448, 'comment_body': ""Can we keep int only as the type in the docstring and fix the places using string type (instead of casting to int plus also having str type)? Because I don't understand what is the advantage of doing this."", 'comment_created': datetime.datetime(2021, 8, 6, 18, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684439017, 'comment_body': 'Having a name for the variable actually helps in reading the tests properly, so I would advise against this change unless there is some other reason.', 'comment_created': datetime.datetime(2021, 8, 6, 18, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684439233, 'comment_body': 'Ditto as previous comment.', 'comment_created': datetime.datetime(2021, 8, 6, 18, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684443091, 'comment_body': 'Ditto previous comment - it is giving no real benefit, only reducing readability.', 'comment_created': datetime.datetime(2021, 8, 6, 18, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684443500, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2021, 8, 6, 18, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 684613561, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 7, 10, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684614156, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 7, 10, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684614179, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 7, 10, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684614190, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 7, 10, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684619326, 'comment_body': 'Done!!', 'comment_created': datetime.datetime(2021, 8, 7, 11, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684619709, 'comment_body': ""That's what I thought at first. But the storage model stores it as string. See [here](https://github.com/oppia/oppia/blob/f10087ee6939e867a4381e3a767446ea39281234/core/storage/statistics/gae_models.py#L1648)."", 'comment_created': datetime.datetime(2021, 8, 7, 11, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684622084, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 7, 11, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684622130, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 7, 11, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684625702, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 7, 12, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684625723, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 7, 12, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 685418113, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2021, 8, 9, 18, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 685441209, 'comment_body': ""Disadvantage: The use of Any here will be propagated elsewhere too. @hardikkat24 can you analyse exactly how many places will be affected directly (roughly)? (Anything using `LearnerAnswerInfo` or this create method would be affected, at least)\r\n\r\n@seanlip Explaining this situation bit to propose a solution for this particular case to avoid using Any: Here `LearnerAnswerInfo` is a class inside stats_domain. Now stats_domain [imports](https://github.com/oppia/oppia/blob/26ea17b93df3c193a0e17fe7119fdd44e20aad58/core/domain/stats_domain.py#L28) action_registry, and [we import](https://github.com/oppia/oppia/blob/26ea17b93df3c193a0e17fe7119fdd44e20aad58/core/domain/action_registry.py#L29) statistics model inside action registry - and that is causing circular imports. The [only use of imported storage model](https://github.com/oppia/oppia/blob/26ea17b93df3c193a0e17fe7119fdd44e20aad58/core/domain/action_registry.py#L45) is to use the enum defined in it - would it make sense to shift those class specific enums to feconf to store all enums/other backend constants at a single place? Or what other refactor can help us fix this case of circular import? If we don't make a plan for this, other similar places would also have to use Any."", 'comment_created': datetime.datetime(2021, 8, 9, 18, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 685447188, 'comment_body': ""But my point (as I stated earlier) is that you are still typecasting it to integer (and it's working fine). Even the method earlier defined `int` as its type in docstring. Had a look at [tests](https://github.com/oppia/oppia/blob/7bd323854f82f1ebb435a7a5c14838f636da906b/core/storage/statistics/gae_models_test.py#L530) too and even they provide strs of integers as arguments. Have you tried modifying the attribute type to IntegerProperty? Tests would have to be modified too then.\r\n\r\n(cc @seanlip - as the code owner please see if this is going in the right direction, tests might be misleading here, so not sure. My suggestions are only based on observations.)"", 'comment_created': datetime.datetime(2021, 8, 9, 19, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 685468639, 'comment_body': 'You adviced me to change `learner_answer_info_list` here to list of domain object `LearnerAnswerInfo`. So this change had to be made for it. See [here](https://github.com/oppia/oppia/blob/26ea17b93df3c193a0e17fe7119fdd44e20aad58/core/storage/statistics/gae_models.py#L1746).', 'comment_created': datetime.datetime(2021, 8, 9, 19, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 685473241, 'comment_body': ""@sajalasati  The only place Any will be propogated here is in [stats_services](https://github.com/oppia/oppia/blob/26ea17b93df3c193a0e17fe7119fdd44e20aad58/core/domain/stats_services.py#L974). And this propogation will be stopped in stats_services only as we're using this function at only one place and the argument type is weak here(`List[Any]`) but the return type is strict here.\r\nSo only 1 place will be affected here(The lines you mentioned in the earlier [comment](https://github.com/oppia/oppia/pull/13565#discussion_r685418113)).\r\n\r\n"", 'comment_created': datetime.datetime(2021, 8, 9, 19, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 685474163, 'comment_body': ""Regarding changing of datatype in storage model, I don't think it is allowed generally? \r\nAnd if we want to change this, we will have to:\r\n1. Change all the occurences of this function.\r\n2. Write a one off job to change all the entities in the model\r\n\r\n@seanlip Please let me know if I'm wrong. Thanks!"", 'comment_created': datetime.datetime(2021, 8, 9, 19, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 685478932, 'comment_body': '@hardikkat24 is correct that we can\'t change the data type in the storage model. We\'ll just have to live with the inconsistency for now and I think the cast that you have is probably the best thing to do given the current situation.\r\n\r\nI have a feeling that this model might get updated anyway though since we\'re moving to Py3 and Beam. Could you please add a TODO above the ""version"" field and file an issue saying something like ""TODO(...): Determine whether this can be updated to use an int version instead, and update existing datastore models if needed."" That way, when someone looks at this in the future and thinks about the stats pipeline, this issue can be flagged. Thanks!', 'comment_created': datetime.datetime(2021, 8, 9, 19, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 685479583, 'comment_body': 'For questions relating to circular imports, please tag @vojtechjelinek, not me. Thanks! \r\n', 'comment_created': datetime.datetime(2021, 8, 9, 19, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 685485753, 'comment_body': 'Ohh yeah, it did look familiar. I got confused by the type annotation here. Looks good then.', 'comment_created': datetime.datetime(2021, 8, 9, 20, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 685491865, 'comment_body': 'Oh okay. @vojtechjelinek PTAL. Thanks!', 'comment_created': datetime.datetime(2021, 8, 9, 20, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 685540278, 'comment_body': 'Flagging this for @vojtechjelinek to look at.', 'comment_created': datetime.datetime(2021, 8, 9, 21, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 685540937, 'comment_body': ""... This is due to lack of information about the possible values for `params`. If you're working with this part of the code in the future and find that the type for `params` is incorrect, please go ahead and change it, and feel free to remove this comment once you've done so."", 'comment_created': datetime.datetime(2021, 8, 9, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 685541393, 'comment_body': 'Ditto (minor wording change).', 'comment_created': datetime.datetime(2021, 8, 9, 21, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 685541474, 'comment_body': 'Ditto, here and elsewhere.', 'comment_created': datetime.datetime(2021, 8, 9, 21, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 685541602, 'comment_body': ""Why is this a string? Seems weird and does not match with the docstring.\r\n\r\nMore generally, please do a check to ensure that your types and the docstrings are fully aligned in all the functions that you're touching in this (and other) PRs. Otherwise developers are going to be confused."", 'comment_created': datetime.datetime(2021, 8, 9, 21, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 685542757, 'comment_body': 'Adding an extra comment here so that this thread also shows up as part of my more comprehensive review pass (to help with bookkeeping).', 'comment_created': datetime.datetime(2021, 8, 9, 21, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 685545847, 'comment_body': 'Could you use PEP 526 for variable types? See:\r\n- https://www.python.org/dev/peps/pep-0526/#global-and-local-variable-annotations \r\n- https://stackoverflow.com/questions/39971929/what-are-variable-annotations\r\n\r\n/cc @sajalasati @vojtechjelinek ', 'comment_created': datetime.datetime(2021, 8, 9, 21, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 685557154, 'comment_body': 'So sorry, I changed the storage files to py3 style, forgot this one. Sorry again!', 'comment_created': datetime.datetime(2021, 8, 9, 22, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 685566623, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 9, 22, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 685566687, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 9, 22, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 685567136, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 9, 22, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 685568092, 'comment_body': 'My bad. It must be int as per the storage model definition. Changed.', 'comment_created': datetime.datetime(2021, 8, 9, 22, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 685572693, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 8, 9, 22, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 685574104, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 8, 9, 22, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 685590338, 'comment_body': ""Please confirm whether you've checked all the other docstrings."", 'comment_created': datetime.datetime(2021, 8, 9, 23, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 685792373, 'comment_body': 'Checked and found 3 places where None was missing from the docstring. Changed. Thanks!', 'comment_created': datetime.datetime(2021, 8, 10, 8, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 685871935, 'comment_body': ""@hardikkat24 Thanks for providing this info. I would leave it to Vojta to decide what's best here."", 'comment_created': datetime.datetime(2021, 8, 10, 9, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 686285950, 'comment_body': 'Hi @hardikkat24 -- for docstrings, every time you add None, please be clear on what the None value means. E.g. in this case, say ""If None, this means that the search should start from the first page of results."" And similarly in the other cases.\r\n\r\nAlso, to avoid future back-and-forth, please make sure that in all future PRs: (a) the docstrings match the types, and (b) the above point is followed too.\r\n\r\nThanks!', 'comment_created': datetime.datetime(2021, 8, 10, 20, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 686286241, 'comment_body': '...in datastore, or None if no such model instance exists.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 686313465, 'comment_body': 'Done. Will do this from now on. Thanks!!', 'comment_created': datetime.datetime(2021, 8, 10, 20, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686313512, 'comment_body': 'Done!!', 'comment_created': datetime.datetime(2021, 8, 10, 20, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686388936, 'comment_body': 'Btw, I think it is possible to remove the quotes if you do `from __future__ import annotations`, just something we might want to consider to create an issue for.', 'comment_created': datetime.datetime(2021, 8, 10, 23, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686389644, 'comment_body': 'I think we can do\r\n```suggestion\r\n            cls, skill_id: str\r\n```\r\n\r\n(if all the args fit on one line it is fine to keep multiple on one line)', 'comment_created': datetime.datetime(2021, 8, 10, 23, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686389931, 'comment_body': ""Why is this optional, `fetch` will return empty list, I don't think it ever returns `None`."", 'comment_created': datetime.datetime(2021, 8, 10, 23, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686390038, 'comment_body': ""Why is this optional, `fetch` will return empty list, I don't think it ever returns `None`."", 'comment_created': datetime.datetime(2021, 8, 10, 23, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686390061, 'comment_body': ""Why is this optional, `fetch` will return empty list, I don't think it ever returns `None`."", 'comment_created': datetime.datetime(2021, 8, 10, 23, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686390087, 'comment_body': ""Why is this optional, `fetch` will return empty list, I don't think it ever returns `None`."", 'comment_created': datetime.datetime(2021, 8, 10, 23, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686391034, 'comment_body': '```suggestion\r\n            self\r\n    ) -> None:\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 23, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686398521, 'comment_body': 'Opening other thread so I can track it more easily.', 'comment_created': datetime.datetime(2021, 8, 11, 0, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686398715, 'comment_body': 'Wait why cannot we import this in the `if MYPY` block, it is only used in types.', 'comment_created': datetime.datetime(2021, 8, 11, 0, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686399008, 'comment_body': '```suggestion\r\n                ).fetch(feconf.DEFAULT_QUERY_LIMIT))\r\n            ]\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 0, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686399647, 'comment_body': 'Btw, here the code can be simplified to just `return cls.get(instance_id, strict=False)` without the change in functionality.', 'comment_created': datetime.datetime(2021, 8, 11, 0, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686399813, 'comment_body': '```suggestion\r\n            learner_answer_info_list=[\r\n                learner_answer_info.to_dict()\r\n                for learner_answer_info in learner_answer_info_list\r\n            ]),\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 0, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686400080, 'comment_body': 'Wait if we only add the import to `if MYPY` imports will it still lead to circular imports errors?', 'comment_created': datetime.datetime(2021, 8, 11, 0, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686402829, 'comment_body': '```suggestion\r\n            self\r\n    ) -> None:\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 0, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686402887, 'comment_body': 'ditto elsewhere in this file', 'comment_created': datetime.datetime(2021, 8, 11, 0, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686403651, 'comment_body': 'This test name is a bit confusing since it tests a different thing, can we rename it while we are here.', 'comment_created': datetime.datetime(2021, 8, 11, 0, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686404021, 'comment_body': '```suggestion\r\n            self\r\n    ) -> None:\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 0, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686404314, 'comment_body': 'Can we introduce a type variable for the commands? The structure seems pretty similar.', 'comment_created': datetime.datetime(2021, 8, 11, 0, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686519514, 'comment_body': 'Done. Created an [issue](https://github.com/oppia/oppia/issues/13628).', 'comment_created': datetime.datetime(2021, 8, 11, 5, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686524938, 'comment_body': 'Done for all the similar places', 'comment_created': datetime.datetime(2021, 8, 11, 6, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686527030, 'comment_body': 'Yes, My bad. Changed it.', 'comment_created': datetime.datetime(2021, 8, 11, 6, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686527090, 'comment_body': 'Changed it.', 'comment_created': datetime.datetime(2021, 8, 11, 6, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686527209, 'comment_body': 'Changed', 'comment_created': datetime.datetime(2021, 8, 11, 6, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686527300, 'comment_body': 'Changed', 'comment_created': datetime.datetime(2021, 8, 11, 6, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686528667, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 6, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686531106, 'comment_body': 'If I use the following, then in the runtime python will throw an error that exp_domain is not defined.\r\n```\r\nif MYPY:\r\n  from core.domain import exp_domain\r\n\r\ndef func(x: str) -> exp_domain.Class: ...\r\n```\r\nThanks!', 'comment_created': datetime.datetime(2021, 8, 11, 6, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686531692, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 6, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686532128, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 6, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686533912, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 6, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686536411, 'comment_body': 'Done for all cases in this file.', 'comment_created': datetime.datetime(2021, 8, 11, 6, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686537717, 'comment_body': 'Here in a comment it is mentioned that:\r\n```\r\n # Calling create() method calls _get_instance (a protected method)\r\n# and sets the instance id equal to the result of calling that method.\r\n```\r\n\r\nSo changing it to test__get_instance. Thanks!', 'comment_created': datetime.datetime(2021, 8, 11, 6, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686537974, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 6, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686550201, 'comment_body': 'Made a new variable `TYPE_COMMAND = Dict[Text, Union[Text, List[Text], Dict[Text, Union[Text, List[Text]]]]`and used it in feconf.py. PTAL.\r\nThanks!', 'comment_created': datetime.datetime(2021, 8, 11, 6, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686568967, 'comment_body': 'If I add stats_domain to if MYPY block, during runtime stats_domain will not be found. See my explanation in the similar comment [here](https://github.com/oppia/oppia/pull/13565#discussion_r686531106).', 'comment_created': datetime.datetime(2021, 8, 11, 7, 26, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686787110, 'comment_body': 'Could you look a this https://stackoverflow.com/a/39757388, I think if we introduce `from __future__ import annotations` and then `if TYPE_CHECKING:` block, it should work.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686790877, 'comment_body': 'Nit:\r\n```suggestion\r\n        return cls.get(instance_id, strict=False)\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 12, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686791337, 'comment_body': 'Can this fit one line?', 'comment_created': datetime.datetime(2021, 8, 11, 12, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686791752, 'comment_body': 'I think similar solution as I suggested above, can be used.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686799628, 'comment_body': '```python\r\nif status in STATUS_CHOICES:\r\n    voiceover_application_query = cls.query(\r\n        datastore_services.all_of(\r\n            cls.author_id == author_id, cls.status == status\r\n        )\r\n    )\r\nelse:\r\n    voiceover_application_query = cls.query(\r\n        cls.author_id == author_id\r\n    )\r\n\r\nreturn cast(\r\n    List[GeneralVoiceoverApplicationModel],\r\n    voiceover_application_query.fetch()\r\n)', 'comment_created': datetime.datetime(2021, 8, 11, 12, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686813011, 'comment_body': 'Nit:\r\n```python\r\nself.assertEqual(topic_model.name, self.TOPIC_NAME)\r\n```\r\nditto below', 'comment_created': datetime.datetime(2021, 8, 11, 13, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686814276, 'comment_body': 'Maybe just `Command` or `CommandType`.', 'comment_created': datetime.datetime(2021, 8, 11, 13, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686825887, 'comment_body': 'Even without using this import, we can do so by enclosing the type in quotes. Thanks!', 'comment_created': datetime.datetime(2021, 8, 11, 13, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686837267, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 13, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686837634, 'comment_body': 'Yes, missed this. Thanks!', 'comment_created': datetime.datetime(2021, 8, 11, 13, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686839613, 'comment_body': ""Actually we are trying to do cast as soon as we fetch. For uniformity. So I'm writing this but will cast the result while assignment only. Is it fine? Thanks!!"", 'comment_created': datetime.datetime(2021, 8, 11, 13, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686840414, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 13, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686841635, 'comment_body': 'Changed it to `CommandType`. The reason here is that the variable name must show that a variable is a type. Thanks!', 'comment_created': datetime.datetime(2021, 8, 11, 13, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686845246, 'comment_body': ""Yes. What I did here is that imported domain in if MYPY block and while adding types, enclosed them in quotes.\r\nEx: `def (...) -> 'exp_domain.Object': ...`"", 'comment_created': datetime.datetime(2021, 8, 11, 13, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686856458, 'comment_body': ""@vojtechjelinek Just to inform you, following disables will be required for domain imports in `if MYPY` block.\r\n`# isort:skip # pylint: disable=invalid-import,unused-import,ungrouped-imports`\r\n1. `# isort: skip`: Otherwise it tells me to import like this:\r\n ```\r\n(1)from core.domain import (\r\n(2) exp_domain) # pylint: disable=...\r\n ```\r\n    This cannot be used here because the pylint disable flag must go in line 1 not in line2, but isort rejects pylint disable in line 1.\r\n2. `invalid-import`: importing domain in storage layer.\r\n3. `unused-import`: pylint thinks the domain modules are unused (their usage is inside quotes like this.  `'exp_domain.Object'`\r\n4. `ungrouped-imports`: these domain imports are not with other imports from `core` module."", 'comment_created': datetime.datetime(2021, 8, 11, 13, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687121055, 'comment_body': ""Fine by me, isort is really annoying with these errors, we should try to find a way where isort doesn't report the longlines (as we already have pylint for that)"", 'comment_created': datetime.datetime(2021, 8, 11, 19, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 687121405, 'comment_body': '> Even without using this import, we can do so by enclosing the type in quotes. Thanks!\r\n\r\nDid you mean that even with `from __future__ import annotations` we have to enclose it in quotes? Why?', 'comment_created': datetime.datetime(2021, 8, 11, 19, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 687122004, 'comment_body': 'But that is what my approach does, we only create the query and then do the `fetch` in one place.', 'comment_created': datetime.datetime(2021, 8, 11, 19, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 687166856, 'comment_body': ""@vojtechjelinek I did this without using this import. We have made an issue to decide on this whether we should import this or not. So that's why I have not used the import here and proceeded with the quotes approach. Thanks!"", 'comment_created': datetime.datetime(2021, 8, 11, 20, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687169015, 'comment_body': 'I think I used this import somewhere already (while doing the Python 3 migration), but yeah, it is not immediately needed.', 'comment_created': datetime.datetime(2021, 8, 11, 20, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 687227996, 'comment_body': 'Sorry, my bad. Misunderstood this. Done. ', 'comment_created': datetime.datetime(2021, 8, 11, 22, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}]","[{'commit_sha': 'a78400ba8b11265e072cdb4d2312064f6d7cd01a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '524165ae51575cc2d067517dd5bfc55c16be2179', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590c3a3ba009261e53a9e01151bf4342e5b0fceb', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e5f44e99b46fc3aaf3435b7fa457d636ad468ba', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03d43722c7743a9df4448171d17ea0b10ea921b7', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c14e10a7e0a5a0f90278c5bfda9a2514148161b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '093568183a149449b88b988734d41e8e1a758f6c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50708339c88b517e201359c7901d0ef4d68b7337', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f8db937fe9741d16536bad06ed2bbcd77bfd952', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaac5737572efd20dec7c0cfa54bf7b493395fa8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a95335d718fe4881d1940431f7e4d3e9721b8663', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a986adb7e6e36ad3b9081a17623c7ab9382c721c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eb28d10d3382aed198b86548f488ca5cf85cb06', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c0201490e9084db8fcc8e5bb09e8ef558ee0217', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa5c8f12119a1fdda5f6ec32120eca7b5748e03d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef00b4b4633b87341d102880e122f98bfa4dbbef', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b66dbe40e2cfaeade5a0e7a94784041f3d73ac53', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c37d177635b185bc7ac1fa84c04ecf66f129b69', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dbf3773bd299e853e63e8cbe10ca80a8819ac54', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c9e5f27ee2007c0be4e4f72c17a2f3884a5344b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63136ad9cf4fbbd2a09f3778439072c9843a08c0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3782126910de4fb0f1921ebea32ccb1479f3ec1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a90b222b50ff315d8ecd2405960aabadd4d0e8da', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '281830572cc8afc9870c981f64e369a0e10b9352', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f4f63f1d7a9895ded346649047ad73fc4d98e5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5fdaa1216f26678a5e8b4867e0a27e55be4f1d2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c76073a045e1ab87a6936d48ab6b016e60625ca9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b784b7245c1c7c185cbc92b6594c3b27be398bb1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381f0d25cb7f3ac68a448f76af4b26097a7f1df1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '861386e37027a5a4b7e7754df1cfa65739ce8bdc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ad5c768e2f95fa15002f1ea0a9f251ae70a54c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48660cbcac278477c91afb3c20ad6f99149523af', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '759f0e70b4331631b1db810075a5356441a32ab5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f21e6cb150241e611c64ffeb179122bfb50d9a5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd94e9e0e409fd73ee79eaf17359a1e421fe213e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6769aa1261ff491a4eabcea541d8833a9e3e7e27', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5cc5ce409d5eedafd67c08aba3214f202baae96', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ed37492fa24d15c2fd624638d01600ca40bd395', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c71a79ecab422e7103006288acb9dd97ffcec1e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38e712cbecaa2d9b9ee6ae634706c530374499cd', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3263ebe65df17791c07e43946324d3a774d74d1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cfff8c728d3b2dfdcf05cc02a6d9d5ea7162e08', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '499161e4eda7e0df34f1702abf654fd7bf97a360', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cdabc7faf2f1a7266beebada5ab17bc03dfc561', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '795cfacd64b24293a03f198b5a1f322f9e409bd3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69248c4a4e4a0816dd92d5445b60d045a697ae42', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf695b36751fe2ce74d5cd4278c067ab92ebea6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2a1f95fb7663e880deaeead8cd1a38359cbea92', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de2d109a73d59628ed0adf85a53ac2cee17facfc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdbcec3d20db946fd63c9f39a4ad9048bdc6b6f0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bc4ac0cad36d3318b9185cbf6487c3672a2f058', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0ebf54398d923ba4302ebdd8f3ac8697e4ab83f', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c341f726a43f15a53f0d2276798d8b040949f76e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '713afe7eb0f459396dad5506cb5dc2ebbb02a785', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67b36537318a91d8e4815d899ececa22db5a2483', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46527ea12af5b58b5d779bee404536abae56420d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a881c1e435e18ed055a72342b3df26922ff1c8d0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d1acbcc1971c205d3165ca371364cb2c4600b13', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05be95650726a029b486d9d07cb021a178570fb3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '603a60b55e64d30dbaf17888590cd8829455d44a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12e219ce627466adb8f1301d3eb39de26756793d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13bb96ab82c085f4739a3380f8a495704d85af5d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4244b9baa0000b7e12bd4913e95eca62c5e36d3c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ede02e464c71e5c331c13f74893c38d0ed04c022', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b3423ba65743f0a57eaf57d235109f4dc3d2e6a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96a6576b53bc4857a97800ffb8f6657629b21233', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15386f37ba4864616a7ac9ab1a66219378197157', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '834145acd4e85e84c806e06405d387ecf3226bb6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b94a27f3f93c2d656a7e5f678528196818af1645', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b8a4bdb654a677fba86e8335d10d51e3044e5fc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '817a3274a17b254939a11429795b728c1adc32b6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f133fb8cec9c7e714b880a030e389488bab9b96', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b910d35da09d6eb0ed206f9af037d93d944b4088', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3affdd3ea88c5e967718e0eab4bf2a22157c84b2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8beb73dc69e8794f029857da881ccda3734cd1a4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7731da672a19d9bacb7ef01542bc55c8b928575', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '377fbf397628f1aa6f7fb32b58c21b6b0ed92078', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '627c64d877412003b6a1257a85c6e86a558b3a96', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cacedff65e1eda462056a8f571801876d64173e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ef246f22e47db8362cb6446651aa83c739bc4d8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d9524d3fe42b55c8468fb91ef5eea55ed37c02b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cf1a1fc038aa347179c63f22ccc9a9784870a68', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31459203953233840ec26cd09053f5a0980b72f0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b918ba428afde519b4c2cd644955a430bda14c9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bbb8534dcc3e2e512d0353694416fe1b6e0062e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8535e7a6dd3c096a39c7a77c78864cdb8cb91634', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c43166ef40ec7e7440e6c6ac56673af634aee7a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faff0ba692bc6f623fc8b1fcc18486f13b3c4eb6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4d75191fa621bc90c7e94313b4607888adacc2c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4023643c456c5f92cd21cb56a85a5e21490a418', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '665ab42dbc7e0e65d8abae60589e9d869107e825', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7a0975871839a114aa1e99a6ea64a0c303ef76c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a6eefd2def05d648684c8477259e0cecd5e0c78', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61ccf3d0b2374c1585479030bb2a87ed253a0a55', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c415a426e133fde3709d379478dcc9549e22c96d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2380013a5a94cb9a7f60669d2a1765f753b00e8e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3d822289090142f868c4aedb7395b0c54835860', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '610e570339ff133421c71a55671c4f7a3cd046bb', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '831a89f3f84ad03b7dfc63e62c97cc4c382d56c7', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '254c3fbdc25d45da03d7ace3b135d87ff82f680c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c940d791fd82b76a9be2f6da3a1413f972b8d700', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90620f22040f93d2870a70d4d1dbec56d3deb36b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfb159c17986c88ccca52f5d283b20913da13e10', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f9a9654699fb74f3d1383a0efcdc3bb2311d704', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa09ef717096b547698183ed8d616e4697bafbba', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c44f640a54c1ba7265b5c780fbef3d02ca5e41a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cea52d755a3e0f8cc07b5bffa38258a75606a64', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c87fa48231b3a7108a4cad86f445eca1134af9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b98589e5002272b740304b6653a9c23dcc47432c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30a52102ba81b30fed6ba329c3831e6aee41aaa2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0991eb6f95dedc7e17a0549035db3212f52edefe', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2575b76966aa4a67d23ec8ff3f9251f9ec0be19e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0e9ab9ba07885697bbfd63dbd2d043ac10f452c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ba259de2e1805d9ddc702b62969fed96b09625', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74099096ca4606f3e9a2f52a06145738b1f9f70e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '599a13cde83013be088e1127b5c0a70f4fac82bf', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '418ea217a5eb74f97ff04a164f63f3316ff73413', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37e90bae27c366baad00f2d509eced306b8db45c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '065a264f58270620fe9314fbeedcdacd025faf2e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ade792c7bba0538769e5a821a1f0b2241145499d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3012fc115fb397f1db1f14b55a0c353e3b604606', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9080702c27b1d785f99c73d3bf7137a49b411374', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0422d9d91aec9f68ea6509ad890cb11c8675447c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9edfb2c87cd22097794e49919ca0cb0c2a290409', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31e1f5ecf3f1b1ebc7ce1cea2962edac335a7236', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbb01af57754c6db78d3452b7367033603ae0a2a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd25e852123958d7f1cfd0e50ec0fa9906ce70d0a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '318dc7f0bd6a39c39ac2aee9b583c5866c8cd8ba', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '991aacef9c56ef3de82ec808ef4ebb62cb74bf1b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91357c77cb3ea506b321172f08ec8e2fa8667e62', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ebcc39f9616bd737608205584a45f32575d2c1e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28bf3ab5c8d7171ee395d0d572dbb69cce3688da', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34eaeeda6e54b06ef755db731128701011eeca1d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa3d09b8f70f66080a5573b7fadcb8e21ffe9627', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d4fe42d09dc5155a1e5bf4f25b9dd6d0009474d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c64d1987e38aa01e20634718970097327302e4ee', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cda929b892a5f45a898962bbbf8564062ea38a9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ac314a58fbfcfeb3bbff0196a434d77a79a7279', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '088d47a72cb2dc3846ff7a9cb1ee27ba139179ef', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35ce614a6ecf9501ccc54957554fc44de9464429', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26ea17b93df3c193a0e17fe7119fdd44e20aad58', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f404fd9916a5b78fc43ca40254c2fc800c66d796', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3efc26e4ce125ff5d000839c31fb3689956a0abe', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eac29eca9d82eab1725bd309c54aedb122adb9d5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0fbbaef534d92353f2be46e73f7bfda25fe5847', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e05bdab5c78015a35fd5442ab5166dd505b4a9a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e1e80f6974781c517973eec4fd3e3cdcbc70981', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9c1d9882a03a3b1dadc4250d0f9070fae7b2d26', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '512e368d17a2dbc3a152c7e3bf9fef907fa14f3e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771b87530f90646bf3810ae56bf01c108269a5ba', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1ef9b516f499c65d46547be8eb12243d024ba90', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e5d9d3b9a96b810482f58c893a05b46dc22d775', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0fd6f4b6fc8e4b0d91e14e4c5ff505d2aa1454a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}]",Hardik Katehara,54679643,,User,,28,,35,21
705496118,M2.4: Add type annotations,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of NA
2. This PR does the following: Added type annotations to core/platform folders
- app_identity
- bulk_email
- cache
- email
- taskqueue
- translate

Adds stubs for:
- google/api_core/retry
- google/appengine/api/
- google/auth
- google/cloud/tasks_v2
- google/cloud/translate_v2
- mailchimp3



## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [ ] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface in various display sizes (mainly phone, tablet, and desktop display size) to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13589,https://api.github.com/repos/oppia/oppia/pulls/13589,https://github.com/oppia/oppia/pull/13589,closed,506,195,38,176,36,109,2,1,"[{'name': 'PR: LGTM'}, {'name': 'PR: Affects datastore layer'}]",2021-08-06 13:44:04+00:00,2021-08-15 17:47:28+00:00,792204.0,"9 days, 4:03:24","[{'comment_id': 684789018, 'comment_body': '@sajalasati Am I right here?', 'comment_created': datetime.datetime(2021, 8, 8, 15, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 684922831, 'comment_body': 'Recommending the same types as defined in typeshed for the std lib method `logging.info` -  https://github.com/python/typeshed/blob/9af9cca7f3d9f4ea8507af4060a5adecb9525178/stdlib/logging/__init__.pyi#L76', 'comment_created': datetime.datetime(2021, 8, 9, 5, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 685892325, 'comment_body': 'To me this seems fine for now. Can you create an issue on their repository stating this, we can add a TODO for ourselves (pointing to the issue created on typeshed) to update our libraries and this type annotation when they fix this issue. Add that TODO as a comment here.', 'comment_created': datetime.datetime(2021, 8, 10, 10, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 685911538, 'comment_body': 'Why? (Here and elsewhere in this test file, I am unable to understand which change is this linked to)', 'comment_created': datetime.datetime(2021, 8, 10, 10, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 685913367, 'comment_body': 'Ditto, why this change?', 'comment_created': datetime.datetime(2021, 8, 10, 10, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 685923192, 'comment_body': 'Missing TODO/justification why this is valid use of `Dict[str, Any]`.', 'comment_created': datetime.datetime(2021, 8, 10, 11, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 685925999, 'comment_body': 'Missing TODO/Justification of why this usage of `Dict[str, Any]` is valid.', 'comment_created': datetime.datetime(2021, 8, 10, 11, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 685927520, 'comment_body': 'Missing TODO/Justification of why this usage of `Dict[str, Any]` is valid.', 'comment_created': datetime.datetime(2021, 8, 10, 11, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 686025456, 'comment_body': ""In the emulator, we had a discrepancy. The docstring of `create_task` states that default value is None but this was not the case. So I added a default value `None` to payload in the [create_task](https://github.com/oppia/oppia/blob/2c386ec2edcc8cdf00ace462076cfbea97ddc182/core/platform/taskqueue/cloud_tasks_emulator.py#L178) here.\r\n\r\nThis can also be seen [here](https://github.com/oppia/oppia/blob/2c386ec2edcc8cdf00ace462076cfbea97ddc182/core/platform/taskqueue/cloud_taskqueue_services.py#L42). A similar function also has a default value for payload as None.\r\n\r\nDue to this, I had to change payload=payload. \r\n\r\nPlease let me know if I'm wrong. Thanks!"", 'comment_created': datetime.datetime(2021, 8, 10, 13, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686092920, 'comment_body': 'Moved to doc. Will provide justification after it is approved from the doc.', 'comment_created': datetime.datetime(2021, 8, 10, 14, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686093023, 'comment_body': 'Moved to doc', 'comment_created': datetime.datetime(2021, 8, 10, 14, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686093144, 'comment_body': 'Moved to doc', 'comment_created': datetime.datetime(2021, 8, 10, 14, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686106692, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 10, 15, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686108085, 'comment_body': 'Explained in other comment.', 'comment_created': datetime.datetime(2021, 8, 10, 15, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 686178670, 'comment_body': 'Just for this you can add a comment above that `Dict[str, Any]` is needed because it emulates the behaviour of `<module>.<class>.<method>`.', 'comment_created': datetime.datetime(2021, 8, 10, 17, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 686182284, 'comment_body': ""I think this usage is justified since it's mentioned in docstring (sorry didn't pay attention to it earlier) as well as explained via examples in the doc ([ref](https://docs.google.com/document/d/1LEWKK2H303eHmWg1hHN2EMIlnewB6EnEyrQoReY-M6s/edit#bookmark=id.x165l86yr83y)). Similar for other places in PR also where payload is used and type is already mentioned in docstring, I have no issues (I have verified also that there is no problematic case).\r\n\r\nFor places that create a function to mock this, you can have a comment on top explaining the reason - see my other comment [here](https://github.com/oppia/oppia/pull/13589#discussion_r686178670)."", 'comment_created': datetime.datetime(2021, 8, 10, 17, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 686184371, 'comment_body': 'Looks good!', 'comment_created': datetime.datetime(2021, 8, 10, 17, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 686187977, 'comment_body': 'Okay, no issues then. Thanks for explaining.', 'comment_created': datetime.datetime(2021, 8, 10, 17, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 686199328, 'comment_body': 'This method being a test mock lacks docstring, so it can be difficult to understand quickly. \r\n\r\nAs I mentioned in the [doc comment](https://docs.google.com/document/d/1LEWKK2H303eHmWg1hHN2EMIlnewB6EnEyrQoReY-M6s/edit?disco=AAAAN7vj3PE), I think adding a comment on top would make it clear - this function mocks requests.post function where the type of json has been defined ANY, hence using Dict[str, Any] here. Link to typeshed type info: https://github.com/python/typeshed/blob/master/stubs/requests/requests/api.pyi#L78.', 'comment_created': datetime.datetime(2021, 8, 10, 17, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 686209069, 'comment_body': ""I agree with the justification you provided via its usage in [doc](https://docs.google.com/document/d/1LEWKK2H303eHmWg1hHN2EMIlnewB6EnEyrQoReY-M6s/edit#bookmark=id.827ops6u08cn), but I can see down below the it's basically passed to CLIENT.create_task function, which belongs to google cloud library - can we use its type stubs to provide a justification of usage of Dict[str, Any] as I mentioned in previous comments? (If yes, then add a comment on top here and elsewhere too - I see 2 other places)"", 'comment_created': datetime.datetime(2021, 8, 10, 18, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 686406619, 'comment_body': 'Can these two fit into one line?', 'comment_created': datetime.datetime(2021, 8, 11, 0, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686407318, 'comment_body': 'Should this rather be\r\n```suggestion\r\n        customization_ids: Optional[Union[Text, List[Text]]] = ...,\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 0, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686407473, 'comment_body': 'Can we limit the `Any` here?', 'comment_created': datetime.datetime(2021, 8, 11, 0, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686407639, 'comment_body': 'Can we get rid of this `Any`?', 'comment_created': datetime.datetime(2021, 8, 11, 0, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686407759, 'comment_body': 'Can we get rid of this `Any` here?', 'comment_created': datetime.datetime(2021, 8, 11, 0, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686407905, 'comment_body': '```suggestion\r\n        request: Any = ...,\r\n```\r\nAlso, can we get rid of this `Any`?', 'comment_created': datetime.datetime(2021, 8, 11, 0, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686408062, 'comment_body': 'Can we get rid of this `Any`?', 'comment_created': datetime.datetime(2021, 8, 11, 0, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686408215, 'comment_body': 'Not needed.', 'comment_created': datetime.datetime(2021, 8, 11, 0, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686408355, 'comment_body': 'Wrong formatting here.', 'comment_created': datetime.datetime(2021, 8, 11, 0, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686408418, 'comment_body': 'Why is this `cast` needed?', 'comment_created': datetime.datetime(2021, 8, 11, 0, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686409007, 'comment_body': 'Wrong formatting.', 'comment_created': datetime.datetime(2021, 8, 11, 0, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686409095, 'comment_body': 'Explain why is this needed as you did in your other PR.', 'comment_created': datetime.datetime(2021, 8, 11, 0, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686821043, 'comment_body': 'Hmm, not sure if we want to do this here, or rather throw a proper error (no assertion error) if it is not set.', 'comment_created': datetime.datetime(2021, 8, 11, 13, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686822716, 'comment_body': 'Why do we need to do the `cast` here?', 'comment_created': datetime.datetime(2021, 8, 11, 13, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686823038, 'comment_body': 'Ditto why the `cast` is needed?', 'comment_created': datetime.datetime(2021, 8, 11, 13, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686828459, 'comment_body': 'Although the docstring states some kind of usage, should we also look into our usage of this function, and see if we can limit this arg to some type.', 'comment_created': datetime.datetime(2021, 8, 11, 13, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 686831317, 'comment_body': 'Why `Optional`?', 'comment_created': datetime.datetime(2021, 8, 11, 13, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 687120868, 'comment_body': 'Hello Vojta, PTAL at this [doc](https://docs.google.com/document/d/1LEWKK2H303eHmWg1hHN2EMIlnewB6EnEyrQoReY-M6s/edit?disco=AAAAN7YgTKY). Thanks!', 'comment_created': datetime.datetime(2021, 8, 11, 19, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687124790, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 19, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687125632, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 19, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687133322, 'comment_body': 'I actually tried doing so but you can see [here](https://github.com/VingtCinq/python-mailchimp/blob/122b772cc36206458c17c218d2b5170db350e383/mailchimp3/entities/listmembers.py#L37) that a response object is returned. If we follow how the response here is obtained, we figure out that it the JSON response returned and it can be of type Any. \r\nOnly one Any, data of create can be converted to Text. Thanks!', 'comment_created': datetime.datetime(2021, 8, 11, 19, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687138474, 'comment_body': ""Here `target_pb2` is a protobuf message so that's the best we can do I think right?? "", 'comment_created': datetime.datetime(2021, 8, 11, 19, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687141646, 'comment_body': 'Please take a look at the [doc](https://docs.google.com/document/d/1LEWKK2H303eHmWg1hHN2EMIlnewB6EnEyrQoReY-M6s/edit?disco=AAAAN7YgTKY). It explains why task has to be of type Any. Thanks!', 'comment_created': datetime.datetime(2021, 8, 11, 20, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687154522, 'comment_body': 'Done.  Removed the Any', 'comment_created': datetime.datetime(2021, 8, 11, 20, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687160224, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 20, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687160523, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 20, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687164960, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 20, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687169771, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 20, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687176384, 'comment_body': 'Because task_name [here](https://github.com/oppia/oppia/blob/37c24c46e6fc5a9ee1e8df6fb62d55737fa1ced3/core/platform/taskqueue/dev_mode_taskqueue_services.py#L44) can be None. ', 'comment_created': datetime.datetime(2021, 8, 11, 20, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687178108, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 20, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687180281, 'comment_body': 'Used `assert instead. Thanks!', 'comment_created': datetime.datetime(2021, 8, 11, 20, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687194319, 'comment_body': 'Actually this is not needed. Deleted. Thanks!', 'comment_created': datetime.datetime(2021, 8, 11, 21, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687213609, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 21, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687213889, 'comment_body': 'Such detailed type information is not present in this library as discussed offline.', 'comment_created': datetime.datetime(2021, 8, 11, 21, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687217222, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 21, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687219153, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 11, 21, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687441227, 'comment_body': 'But line 39 here is not covered by backend tests. How should I proceed? Thanks!', 'comment_created': datetime.datetime(2021, 8, 12, 7, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687445220, 'comment_body': 'Cast is needed here because mget() is not typed in the typeshed version we have.', 'comment_created': datetime.datetime(2021, 8, 12, 7, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687445463, 'comment_body': 'Cast is needed here because mset() is not typed in the typeshed version we have.', 'comment_created': datetime.datetime(2021, 8, 12, 7, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 687448708, 'comment_body': 'Removing this because they are useless to us.\r\nThese types-packages will only be detected by mypy when they exist in the environment or globally. So it will be detected only in CI (as we use global installation in CI) not locally. So this can make the stubs for ci and local dev env different. Thanks!', 'comment_created': datetime.datetime(2021, 8, 12, 7, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688438387, 'comment_body': ""@vojtechjelinek I agree with the explanation given in doc - based on the usage of payload currently, it looks like we don't have a choice."", 'comment_created': datetime.datetime(2021, 8, 13, 11, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688438873, 'comment_body': 'Looks good! Thanks.', 'comment_created': datetime.datetime(2021, 8, 13, 11, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688441295, 'comment_body': '@hardikkat24 Can we add a TODO and comment here also like we did above to remove this type ignore and cast once typeshed is updated? (The comment is important as it will make it clear why we need to do a cast here)', 'comment_created': datetime.datetime(2021, 8, 13, 11, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688441541, 'comment_body': '@hardikkat24 Ditto as above, add a todo and comment.', 'comment_created': datetime.datetime(2021, 8, 13, 11, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688444097, 'comment_body': ""Remove the extra line. The explanation looks good, but replace the link with this one - https://github.com/python/typeshed/blob/5e0fc4607323a4657b587bf70e3c26becf1c88d0/stubs/requests/requests/api.pyi#L78 (the above link it's specific to a commit has a risk of pointing to something else in the future)"", 'comment_created': datetime.datetime(2021, 8, 13, 11, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688446798, 'comment_body': 'Hmm, I think that you might be able to import and set some type of it. Google repositories usually have generate protobuf stuff.', 'comment_created': datetime.datetime(2021, 8, 13, 11, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688447343, 'comment_body': '`In the type annotation below, task is of type Dict[str, Any] because its structure can vary a lot.` - this is still vague.  It would be worth mentioning some details here (by pointing to appropriate links) as you wrote in the doc (at least the ""justification from library"" part of it).  Thanks for summarizing it properly in the doc btw!', 'comment_created': datetime.datetime(2021, 8, 13, 11, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688452281, 'comment_body': '```suggestion\r\n        # In the type annotation below, we have used Dict[str, Any] for JSON.\r\n        # This is because this function mocks requests.post function where the\r\n        # type of JSON has been defined Any, hence using Dict[str, Any] here.\r\n        # https://github.com/python/typeshed/blob/master/stubs/requests/requests/api.pyi#L78.\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 11, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688452545, 'comment_body': '(remove the line between the method call and the comment)', 'comment_created': datetime.datetime(2021, 8, 13, 11, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688453625, 'comment_body': 'Hmmm, lets make it non-optional and put some generic string in the call site.', 'comment_created': datetime.datetime(2021, 8, 13, 11, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688767718, 'comment_body': 'Done as discussed offline.', 'comment_created': datetime.datetime(2021, 8, 13, 20, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688773064, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 13, 20, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688773125, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 13, 20, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688774537, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 13, 20, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688776796, 'comment_body': 'Yes got you. Done.', 'comment_created': datetime.datetime(2021, 8, 13, 20, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688779749, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 21, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688780698, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 13, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688823508, 'comment_body': 'Add a backend test for it then. Also, do we still need this line?', 'comment_created': datetime.datetime(2021, 8, 13, 23, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688825075, 'comment_body': 'Btw, did we report this on the mypy repo, or do they already know about the issue?', 'comment_created': datetime.datetime(2021, 8, 13, 23, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688825813, 'comment_body': '```suggestion\r\nMailgunQueryType = Tuple[\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 23, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688826045, 'comment_body': 'Should we move this import to the `if MYPY` block to clearly state that this import is needed just for mypy. ', 'comment_created': datetime.datetime(2021, 8, 13, 23, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688826405, 'comment_body': 'Agreed.', 'comment_created': datetime.datetime(2021, 8, 13, 23, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688826840, 'comment_body': 'This comment can be removed.', 'comment_created': datetime.datetime(2021, 8, 13, 23, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688827520, 'comment_body': ""```suggestion\r\n    headers['X-Appengine-TaskName'] = task_name or 'task_without_name'\r\n```"", 'comment_created': datetime.datetime(2021, 8, 13, 23, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688828243, 'comment_body': 'Wait, why is it optional here?', 'comment_created': datetime.datetime(2021, 8, 13, 23, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688828455, 'comment_body': ""Isn't this more like subclass of `Enum`?"", 'comment_created': datetime.datetime(2021, 8, 13, 23, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688887099, 'comment_body': 'We have reported it. See [here](https://github.com/python/typeshed/issues/5906).', 'comment_created': datetime.datetime(2021, 8, 14, 6, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688887147, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 14, 6, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688887519, 'comment_body': ""@vojtechjelinek  I did a mistake here. This pylint disable can be removed.\r\nWe have 2 options here:\r\n1. Import datetime globally.(Like I did now)\r\n2. Import datetime in if MYPY and enclose the type of datetime in quotes. Like this `'datetime.datetime'`\r\n\r\nI would prefer the first one. What do you think?"", 'comment_created': datetime.datetime(2021, 8, 14, 6, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688887760, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 14, 6, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688911340, 'comment_body': 'The default value of payload here is None. So it should definitely be Optional.', 'comment_created': datetime.datetime(2021, 8, 14, 10, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688913252, 'comment_body': 'Hmm, again I think that `from __future__ import annotations` might be helpful and then the 2 would be fine to do. But yeah 1 seems fine too if the pylint disable is not needed.', 'comment_created': datetime.datetime(2021, 8, 14, 10, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688914142, 'comment_body': 'Done. Removed the assert too.', 'comment_created': datetime.datetime(2021, 8, 14, 10, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688914297, 'comment_body': 'Removed these lines:\r\n```\r\n    # Create_task either expects this protobuf message or a dictionary having\r\n    # a similar structure.\r\n    # This clearly points to the fact that the task is of type Dict[str, Any].\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 10, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688914460, 'comment_body': ""Not exactly enum because enums don't return a variable of type str right? Like target_pb2.HttpMethod.POST will be enum object not string right?\r\nI noticed we don't need protobuf.message.Message here. Used by mistake. Thanks!"", 'comment_created': datetime.datetime(2021, 8, 14, 10, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688915110, 'comment_body': 'Thanks! Done using 1! ', 'comment_created': datetime.datetime(2021, 8, 14, 10, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688917672, 'comment_body': 'Ah sorry for ambiguity, I meant just `# Construct the request body.`.', 'comment_created': datetime.datetime(2021, 8, 14, 11, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688917724, 'comment_body': ""```suggestion\r\n            with self.assertRaisesRegexp( # type: ignore[no-untyped-call]\r\n                ValueError, 'Value None for application id is invalid.'\r\n            ):\r\n```"", 'comment_created': datetime.datetime(2021, 8, 14, 11, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688917913, 'comment_body': 'One more thing, why is this `Optional`?', 'comment_created': datetime.datetime(2021, 8, 14, 11, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688917982, 'comment_body': 'Looking at it the lines that you removed are quite redundant so lets keep them removed.', 'comment_created': datetime.datetime(2021, 8, 14, 11, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688918183, 'comment_body': 'Why it can be optional?', 'comment_created': datetime.datetime(2021, 8, 14, 11, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688918278, 'comment_body': 'Yeah, but what about the usages of this function. I think we should maybe prefer `{}` and pass it explicitly everywhere.', 'comment_created': datetime.datetime(2021, 8, 14, 11, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688922667, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 14, 12, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688922808, 'comment_body': 'Removed `# Construct the request body.` also.', 'comment_created': datetime.datetime(2021, 8, 14, 12, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688923510, 'comment_body': ""We explicitly check for 'None' in this method. See [here](https://github.com/oppia/oppia/blob/a4a3c2b7c673e928264919b595f51222ddd8e2c5/core/platform/taskqueue/cloud_taskqueue_services.py#L72). If value is not None, we do something. Hence I think optional should be used."", 'comment_created': datetime.datetime(2021, 8, 14, 12, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688923658, 'comment_body': 'It mocks the function [here](https://github.com/oppia/oppia/blob/a4a3c2b7c673e928264919b595f51222ddd8e2c5/core/platform/taskqueue/cloud_taskqueue_services.py#L39) for dev mode. Therefore the types should be same.', 'comment_created': datetime.datetime(2021, 8, 14, 12, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688924287, 'comment_body': 'Yes this is only used in test files. Done.', 'comment_created': datetime.datetime(2021, 8, 14, 12, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688971766, 'comment_body': 'Looks better, thanks!', 'comment_created': datetime.datetime(2021, 8, 14, 17, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 689096768, 'comment_body': 'Makes sense.', 'comment_created': datetime.datetime(2021, 8, 15, 14, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}]","[{'commit_sha': 'a78400ba8b11265e072cdb4d2312064f6d7cd01a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '524165ae51575cc2d067517dd5bfc55c16be2179', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590c3a3ba009261e53a9e01151bf4342e5b0fceb', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e5f44e99b46fc3aaf3435b7fa457d636ad468ba', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03d43722c7743a9df4448171d17ea0b10ea921b7', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c14e10a7e0a5a0f90278c5bfda9a2514148161b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '093568183a149449b88b988734d41e8e1a758f6c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50708339c88b517e201359c7901d0ef4d68b7337', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f8db937fe9741d16536bad06ed2bbcd77bfd952', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaac5737572efd20dec7c0cfa54bf7b493395fa8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a95335d718fe4881d1940431f7e4d3e9721b8663', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a986adb7e6e36ad3b9081a17623c7ab9382c721c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eb28d10d3382aed198b86548f488ca5cf85cb06', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c0201490e9084db8fcc8e5bb09e8ef558ee0217', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa5c8f12119a1fdda5f6ec32120eca7b5748e03d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef00b4b4633b87341d102880e122f98bfa4dbbef', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b66dbe40e2cfaeade5a0e7a94784041f3d73ac53', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c37d177635b185bc7ac1fa84c04ecf66f129b69', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dbf3773bd299e853e63e8cbe10ca80a8819ac54', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c9e5f27ee2007c0be4e4f72c17a2f3884a5344b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63136ad9cf4fbbd2a09f3778439072c9843a08c0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3782126910de4fb0f1921ebea32ccb1479f3ec1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a90b222b50ff315d8ecd2405960aabadd4d0e8da', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '281830572cc8afc9870c981f64e369a0e10b9352', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f4f63f1d7a9895ded346649047ad73fc4d98e5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5fdaa1216f26678a5e8b4867e0a27e55be4f1d2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c76073a045e1ab87a6936d48ab6b016e60625ca9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b784b7245c1c7c185cbc92b6594c3b27be398bb1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381f0d25cb7f3ac68a448f76af4b26097a7f1df1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '861386e37027a5a4b7e7754df1cfa65739ce8bdc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ad5c768e2f95fa15002f1ea0a9f251ae70a54c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48660cbcac278477c91afb3c20ad6f99149523af', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '759f0e70b4331631b1db810075a5356441a32ab5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f21e6cb150241e611c64ffeb179122bfb50d9a5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd94e9e0e409fd73ee79eaf17359a1e421fe213e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6769aa1261ff491a4eabcea541d8833a9e3e7e27', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5cc5ce409d5eedafd67c08aba3214f202baae96', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ed37492fa24d15c2fd624638d01600ca40bd395', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c71a79ecab422e7103006288acb9dd97ffcec1e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38e712cbecaa2d9b9ee6ae634706c530374499cd', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3263ebe65df17791c07e43946324d3a774d74d1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cfff8c728d3b2dfdcf05cc02a6d9d5ea7162e08', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '499161e4eda7e0df34f1702abf654fd7bf97a360', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cdabc7faf2f1a7266beebada5ab17bc03dfc561', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '795cfacd64b24293a03f198b5a1f322f9e409bd3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69248c4a4e4a0816dd92d5445b60d045a697ae42', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf695b36751fe2ce74d5cd4278c067ab92ebea6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2a1f95fb7663e880deaeead8cd1a38359cbea92', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de2d109a73d59628ed0adf85a53ac2cee17facfc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdbcec3d20db946fd63c9f39a4ad9048bdc6b6f0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bc4ac0cad36d3318b9185cbf6487c3672a2f058', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0ebf54398d923ba4302ebdd8f3ac8697e4ab83f', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c341f726a43f15a53f0d2276798d8b040949f76e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '713afe7eb0f459396dad5506cb5dc2ebbb02a785', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67b36537318a91d8e4815d899ececa22db5a2483', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46527ea12af5b58b5d779bee404536abae56420d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a881c1e435e18ed055a72342b3df26922ff1c8d0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d1acbcc1971c205d3165ca371364cb2c4600b13', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05be95650726a029b486d9d07cb021a178570fb3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '603a60b55e64d30dbaf17888590cd8829455d44a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12e219ce627466adb8f1301d3eb39de26756793d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13bb96ab82c085f4739a3380f8a495704d85af5d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4244b9baa0000b7e12bd4913e95eca62c5e36d3c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ede02e464c71e5c331c13f74893c38d0ed04c022', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b3423ba65743f0a57eaf57d235109f4dc3d2e6a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96a6576b53bc4857a97800ffb8f6657629b21233', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15386f37ba4864616a7ac9ab1a66219378197157', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '834145acd4e85e84c806e06405d387ecf3226bb6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b94a27f3f93c2d656a7e5f678528196818af1645', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b8a4bdb654a677fba86e8335d10d51e3044e5fc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '817a3274a17b254939a11429795b728c1adc32b6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f133fb8cec9c7e714b880a030e389488bab9b96', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b910d35da09d6eb0ed206f9af037d93d944b4088', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3affdd3ea88c5e967718e0eab4bf2a22157c84b2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8beb73dc69e8794f029857da881ccda3734cd1a4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7731da672a19d9bacb7ef01542bc55c8b928575', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '377fbf397628f1aa6f7fb32b58c21b6b0ed92078', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '627c64d877412003b6a1257a85c6e86a558b3a96', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cacedff65e1eda462056a8f571801876d64173e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ef246f22e47db8362cb6446651aa83c739bc4d8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d9524d3fe42b55c8468fb91ef5eea55ed37c02b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cf1a1fc038aa347179c63f22ccc9a9784870a68', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31459203953233840ec26cd09053f5a0980b72f0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b918ba428afde519b4c2cd644955a430bda14c9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bbb8534dcc3e2e512d0353694416fe1b6e0062e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8535e7a6dd3c096a39c7a77c78864cdb8cb91634', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c43166ef40ec7e7440e6c6ac56673af634aee7a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faff0ba692bc6f623fc8b1fcc18486f13b3c4eb6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4d75191fa621bc90c7e94313b4607888adacc2c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4023643c456c5f92cd21cb56a85a5e21490a418', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '665ab42dbc7e0e65d8abae60589e9d869107e825', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7a0975871839a114aa1e99a6ea64a0c303ef76c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a6eefd2def05d648684c8477259e0cecd5e0c78', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61ccf3d0b2374c1585479030bb2a87ed253a0a55', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c415a426e133fde3709d379478dcc9549e22c96d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2380013a5a94cb9a7f60669d2a1765f753b00e8e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3d822289090142f868c4aedb7395b0c54835860', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '610e570339ff133421c71a55671c4f7a3cd046bb', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '831a89f3f84ad03b7dfc63e62c97cc4c382d56c7', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25a060513f26fec609fd29a3014db7d4b4b7c6bd', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f08754ed27c300e60e33e18b2847022b6c13e006', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7b8a4e78687decb08934ceb0bc2963836946628', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '637168b0556a241a37a83adc60b3d1661aff0936', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '254c3fbdc25d45da03d7ace3b135d87ff82f680c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c940d791fd82b76a9be2f6da3a1413f972b8d700', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90620f22040f93d2870a70d4d1dbec56d3deb36b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '827fce97bc0dd004064519b3171d9b7f5d176faf', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfb159c17986c88ccca52f5d283b20913da13e10', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31668831b376cb4c0b524ab6b18645e4be8f4132', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f9a9654699fb74f3d1383a0efcdc3bb2311d704', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa09ef717096b547698183ed8d616e4697bafbba', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c44f640a54c1ba7265b5c780fbef3d02ca5e41a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cea52d755a3e0f8cc07b5bffa38258a75606a64', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c87fa48231b3a7108a4cad86f445eca1134af9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b98589e5002272b740304b6653a9c23dcc47432c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30a52102ba81b30fed6ba329c3831e6aee41aaa2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0991eb6f95dedc7e17a0549035db3212f52edefe', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5491ea7c5e33819314636ab4f0e43b0fc39b33ad', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b67b2e61769dbeac79aa8687122aeb0e12e60439', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e043c8a96c4d1c9d9c0dd38c61138102e8e63c7a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b0a6b301912d509e582698bef04eaacd514949', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2575b76966aa4a67d23ec8ff3f9251f9ec0be19e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0e9ab9ba07885697bbfd63dbd2d043ac10f452c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ba259de2e1805d9ddc702b62969fed96b09625', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74099096ca4606f3e9a2f52a06145738b1f9f70e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '599a13cde83013be088e1127b5c0a70f4fac82bf', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '418ea217a5eb74f97ff04a164f63f3316ff73413', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37e90bae27c366baad00f2d509eced306b8db45c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '065a264f58270620fe9314fbeedcdacd025faf2e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ade792c7bba0538769e5a821a1f0b2241145499d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3012fc115fb397f1db1f14b55a0c353e3b604606', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9080702c27b1d785f99c73d3bf7137a49b411374', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0422d9d91aec9f68ea6509ad890cb11c8675447c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9edfb2c87cd22097794e49919ca0cb0c2a290409', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ba4718e92be83149ca0d102dda29f45cf161144', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c59c06631472adf18fd1c018eb5264e099888b9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31e1f5ecf3f1b1ebc7ce1cea2962edac335a7236', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbb01af57754c6db78d3452b7367033603ae0a2a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd25e852123958d7f1cfd0e50ec0fa9906ce70d0a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '318dc7f0bd6a39c39ac2aee9b583c5866c8cd8ba', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '991aacef9c56ef3de82ec808ef4ebb62cb74bf1b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f29602a410d47df73611dc28fcf8ff6dc212c9f1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91357c77cb3ea506b321172f08ec8e2fa8667e62', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ebcc39f9616bd737608205584a45f32575d2c1e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd984d6cd2498f9a8e2faf61550a709fd29e893c2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28bf3ab5c8d7171ee395d0d572dbb69cce3688da', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34eaeeda6e54b06ef755db731128701011eeca1d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa3d09b8f70f66080a5573b7fadcb8e21ffe9627', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d4fe42d09dc5155a1e5bf4f25b9dd6d0009474d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c64d1987e38aa01e20634718970097327302e4ee', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cda929b892a5f45a898962bbbf8564062ea38a9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ac314a58fbfcfeb3bbff0196a434d77a79a7279', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '088d47a72cb2dc3846ff7a9cb1ee27ba139179ef', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35ce614a6ecf9501ccc54957554fc44de9464429', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26ea17b93df3c193a0e17fe7119fdd44e20aad58', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f08f765bf61207f9a8c9b32c2b44e7d9577b6cd4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '563a58db760811c4df6db93c8d54c717fe3b807a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '693a36228206a612710dbf1e07c17d02843a35b8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee3ac196bee7a9e016b74d73659c3d752eeb19ff', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18878b0bc5e7e01f45167454c981eb06867149b8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22e7cb19012098d5cf677adf8553b3b249473b9e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c386ec2edcc8cdf00ace462076cfbea97ddc182', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ef5dd840399fd79f4267c4c96a21e6b7bf5770e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '023f6cd7e2b30e32073fdee242517183c8062c72', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9299b0aa84aee19f470a0af1f0ee4f71f57b2bea', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fa531fb826e5bcc9983ffa7d65e2fd02614354e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a931e4cae164b4ec7981ab23c370b51147d969d9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0267550b53f34f5efdf7081671c5f0418e3f99e1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee473140869c5f1f393b859208010ce916a0fa02', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74a7a4e8e8df57ca34687cfc2b177f5879db8041', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84a4c1887d25016396f5aebf529117724ee65440', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41561a09a43839d2bebafddb51bd881e4354409d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '062e0c884e5cbdb37cc14a67f1af22c7c956472a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd334367bcf0b7a5422d949228634faf60ebaae7', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ac4f04b03650d0ba2d9ee148926cc0de018f231', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38cd3be5d0412a02a4643d0dd2ba38d967b831d2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}]",Hardik Katehara,54679643,,User,,28,,35,21
708781658,M2.4(B) - Add type annotations(platform.auth + platform.search),"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #NA
2. This PR does the following: Added type annotations to core.platform.auth and core.platform.search.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface in various display sizes (mainly phone, tablet, and desktop display size) to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13629,https://api.github.com/repos/oppia/oppia/pulls/13629,https://github.com/oppia/oppia/pull/13629,closed,845,200,17,147,21,72,0,1,[],2021-08-11 11:44:15+00:00,2021-08-16 09:44:02+00:00,424787.0,"4 days, 21:59:47","[{'comment_id': 688466497, 'comment_body': 'Can you please stop using `Text` here and elsewhere?', 'comment_created': datetime.datetime(2021, 8, 13, 12, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688472639, 'comment_body': ""```suggestion\r\ndef establish_auth_session(\r\n        request: webapp2.Request,\r\n        response: webapp2.Response) -> None:\r\n```\r\n\r\nPrefer keeping closing parenthesis on the same line (unless the return type annotation causes it to exceed 80 chars). Ditto for other places too.\r\n\r\ncc @vojtechjelinek, @DubeySandeep for comments on this. My suggestion is based on what we have been doing elsewhere in the codebase since we don't have strict rules around this?\r\n\r\n@DubeySandeep do you think the current styling is wrong? Should the closing parenthesis be right indented by 4 spaces?"", 'comment_created': datetime.datetime(2021, 8, 13, 12, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688476699, 'comment_body': 'Why do we need to put this in quotes?', 'comment_created': datetime.datetime(2021, 8, 13, 12, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688480106, 'comment_body': 'Missing TODO/explanation here.', 'comment_created': datetime.datetime(2021, 8, 13, 12, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688481059, 'comment_body': 'Missing TODO/explanation here.', 'comment_created': datetime.datetime(2021, 8, 13, 12, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688482120, 'comment_body': '(Just a note - this looks good! We should use similar explanations elsewhere too (where we use ANY) so that the purpose is loud and clear to every developer)', 'comment_created': datetime.datetime(2021, 8, 13, 12, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688484346, 'comment_body': ""Can we point to the documentation/stubs here also as we did for similar cases in your other PR? You have already added stubs for elasticsearch, why we can't use some type that they define - that would be the best way to handle it. \r\n\r\n(I myself know that elastic search documents can be any json object, but it would be good to point to some external/internal resource to make it clear it others too as to why we have this - what and why is this special case if we are defining the type for it ourselves)"", 'comment_created': datetime.datetime(2021, 8, 13, 12, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688486506, 'comment_body': 'Ditto for queries: These are simple json objects without strict structure, but will be good to point to a resource.', 'comment_created': datetime.datetime(2021, 8, 13, 12, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688667759, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 13, 17, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688668126, 'comment_body': '@sajalasati In our codebase, we are consistent in placing the return type in next line.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688672669, 'comment_body': 'Due to some unknown reason, `firebase_auth.BatchDeleteAccountsResponse` is not recognized here and throws firebase_auth has no attribute BatchDeleteAccountsResponse. But [here](https://github.com/oppia/oppia/blob/7c70f79de3ae649ef3c6114ffbb67c6c66f186d8/core/platform/auth/firebase_auth_services_test.py#L825) it is detected. \r\nEven it is not available in [firebase_admin.auth](https://github.com/firebase/firebase-admin-python/blob/master/firebase_admin/auth.py) on their github repo.  But it is available in[ firebase_admin._user_mgt](https://github.com/firebase/firebase-admin-python/blob/0e35c9a6ce7bc4bd8034c5369e601cb440cff061/firebase_admin/_user_mgt.py#L436). But if I use this, linter throws accessing private variables is not allowed. So putting it in quotes seems the best option. Thanks!\r\n', 'comment_created': datetime.datetime(2021, 8, 13, 17, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688681930, 'comment_body': ""Found that we use only str, bool, None for values in our codebase for claims. See [here](https://github.com/oppia/oppia/blob/7c70f79de3ae649ef3c6114ffbb67c6c66f186d8/core/platform/auth/firebase_auth_services.py#L581). When we see the structure of [auth_domain.AuthClaims](https://github.com/oppia/oppia/blob/7c70f79de3ae649ef3c6114ffbb67c6c66f186d8/core/domain/auth_domain.py#L51), we see that Dict's type should be `Dict[str, Optional[Union[str, bool]]]`"", 'comment_created': datetime.datetime(2021, 8, 13, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688682271, 'comment_body': 'Removed Any from here. Reason explained in comment above.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688745251, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2021, 8, 13, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688745376, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 19, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688746084, 'comment_body': 'Tried to do this for other usages of Any.', 'comment_created': datetime.datetime(2021, 8, 13, 19, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688776739, 'comment_body': 'Personally, I like the sad-face approach (some arguments why are in this [blog-post](https://lukasz.langa.pl/1d1a43c4-9c8a-4c5f-a366-7f22ce6a49fc/) except for the consistency argument). I think it is also useful because if the type is too long (`really_long_variable: ReallyLongType) -> ReallyLongType:`) then it makes sense to split it up before the `)` anyway so using it by default makes it more consistent across the codebase.', 'comment_created': datetime.datetime(2021, 8, 13, 20, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688810822, 'comment_body': 'Should we move all MyPy only imports to the `if` block? I think it would be beneficial if we decide to automatically ignore stuff like this only in the `if` block.', 'comment_created': datetime.datetime(2021, 8, 13, 22, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688811985, 'comment_body': ""Is this something that `from __future__ import annotations` would help with? (I don't want to add it now, it is only useful for the future reference."", 'comment_created': datetime.datetime(2021, 8, 13, 22, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688813473, 'comment_body': 'Why this weird type?', 'comment_created': datetime.datetime(2021, 8, 13, 22, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688813673, 'comment_body': 'Should we create a type variable for this?', 'comment_created': datetime.datetime(2021, 8, 13, 22, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688815059, 'comment_body': 'Should this be separated into a type variable?', 'comment_created': datetime.datetime(2021, 8, 13, 22, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688815154, 'comment_body': 'Should this be separated into a type variable?', 'comment_created': datetime.datetime(2021, 8, 13, 22, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688815819, 'comment_body': ""Isn't there some enum for it in `logging`?"", 'comment_created': datetime.datetime(2021, 8, 13, 22, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688816220, 'comment_body': 'Again, why this weird type?', 'comment_created': datetime.datetime(2021, 8, 13, 22, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688817782, 'comment_body': 'Why is this `str`, in the code we transform it to `int` anyway.', 'comment_created': datetime.datetime(2021, 8, 13, 22, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688821585, 'comment_body': ""Why do we need this file? I don't think we use this library anymore."", 'comment_created': datetime.datetime(2021, 8, 13, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688821919, 'comment_body': '```suggestion\r\n            self, data: Dict[str, Any]\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 23, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688822236, 'comment_body': 'Why is the `= ..` part needed here?', 'comment_created': datetime.datetime(2021, 8, 13, 23, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 688916021, 'comment_body': 'I think this will help out in future. Thanks!', 'comment_created': datetime.datetime(2021, 8, 14, 10, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688920042, 'comment_body': '\r\nError is thrown If I use `ContextManager[List[str]]` for `capture_logging`.:\r\n```\r\n""ContextManager[List[str]]"" of ""capture_logging"" incompatible with return type ""_GeneratorContextManager[Any]"" in supertype ""TestBase""  [override]\r\n\r\n```\r\n\r\nReason: See the type stubs of [contextlib.contextmanager](https://github.com/python/typeshed/blob/ee487304d76c671aa353a15e34bc1102bffa2362/stdlib/contextlib.pyi#L37)', 'comment_created': datetime.datetime(2021, 8, 14, 11, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688920104, 'comment_body': 'Added in if MYPY block.', 'comment_created': datetime.datetime(2021, 8, 14, 11, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688920702, 'comment_body': 'No it is not an enum. See the stubs for logging [here](https://github.com/python/typeshed/blob/ee487304d76c671aa353a15e34bc1102bffa2362/stdlib/logging/__init__.pyi#L217).', 'comment_created': datetime.datetime(2021, 8, 14, 11, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688921460, 'comment_body': 'I think changing this is not enough. This is linked throughout our codebase and we use str for offset. \r\nSee [here](https://github.com/oppia/oppia/blob/a4a3c2b7c673e928264919b595f51222ddd8e2c5/core/domain/search_services.py#L167).\r\nWe already have a todo for this. See [here](https://github.com/oppia/oppia/issues/11314).', 'comment_created': datetime.datetime(2021, 8, 14, 11, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688921639, 'comment_body': 'removed', 'comment_created': datetime.datetime(2021, 8, 14, 11, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688921708, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 14, 11, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688922405, 'comment_body': 'This `...` part means that a default value is specified in the function for this.', 'comment_created': datetime.datetime(2021, 8, 14, 12, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688922471, 'comment_body': 'Explained in the comment earlier.', 'comment_created': datetime.datetime(2021, 8, 14, 12, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688935587, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 14, 14, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688935690, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 14, 14, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688936120, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 14, 14, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 688974747, 'comment_body': 'Yes I agree with the advantages, and perhaps following a single rule will help. Thanks!', 'comment_created': datetime.datetime(2021, 8, 14, 17, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688976091, 'comment_body': ""@hardikkat24 Sorry I don't get how you infer from AuthClaims structure the type info here using the links you gave. Which set of functions are you looking at in this file which leads you to this conclusion?"", 'comment_created': datetime.datetime(2021, 8, 14, 18, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 688976435, 'comment_body': '@hardikkat24 Can you share the error log here - it seems weird, because if we can use that function, and we also have stubs defined for it, what exactly is the problem then. @vojtechjelinek are you able to understand this behaviour?', 'comment_created': datetime.datetime(2021, 8, 14, 18, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}, {'comment_id': 689087469, 'comment_body': ""Not really, I imagine it can be related to some internal structure of firebase_admin where some components are loaded dynamically. But I don't think we need to bother with this, I think the long-term solution is to introduce `from __future__ import annotations` or move to Python 3.8 (which should be fairly easy compared to the Python 2 to Python 3 migration)."", 'comment_created': datetime.datetime(2021, 8, 15, 13, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 689088050, 'comment_body': 'Wait, how is `capture_logging` related to this?', 'comment_created': datetime.datetime(2021, 8, 15, 13, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 689088321, 'comment_body': 'Should we do this?\r\n```suggestion\r\nUidsPartitionTupleType = Tuple[\r\n    List[Tuple[int, str]],\r\n    List[Tuple[int, str]]\r\n]\r\n\r\nUidsZipPartitionTupleType = Tuple[\r\n    List[Tuple[int, Tuple[str, str]]],\r\n    List[Tuple[int, Tuple[str, str]]]\r\n]\r\n\r\nRecordsPartitionTupleType = Tuple[\r\n    List[Tuple[int, Tuple[firebase_auth.ImportUserRecord, str]]],\r\n    List[Tuple[int, Tuple[firebase_auth.ImportUserRecord, str]]]\r\n]\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 13, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 689088741, 'comment_body': 'Ah, okay.', 'comment_created': datetime.datetime(2021, 8, 15, 13, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 689090742, 'comment_body': '```suggestion\r\n            self, session_cookie: Optional[str] = None\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 13, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 689091007, 'comment_body': 'Btw, both these can fit one line.', 'comment_created': datetime.datetime(2021, 8, 15, 13, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 689091081, 'comment_body': '```suggestion\r\n            self, errors: List[Tuple[int, str]]\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 13, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 689091137, 'comment_body': '```suggestion\r\n            self, total: int, errors: List[Tuple[int, str]]\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 13, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 689091246, 'comment_body': '```suggestion\r\n            self, token: str\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 13, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 689091349, 'comment_body': '```suggestion\r\n            self, uid: str, custom_claims: Optional[str]\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 13, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 689091475, 'comment_body': '```suggestion\r\n            self, uids: List[str], force_delete: bool = False\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 13, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 689097312, 'comment_body': ""This error is thrown if I use ContentManager[List[str]] for capture_logging. This means that the self.swap(..) returns `_GeneratorContextManager[...]`. So that's why I used them here?\r\nShould I change everything except capture_logging to use typing.ContextManager?"", 'comment_created': datetime.datetime(2021, 8, 15, 14, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 689097704, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 15, 14, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 689097853, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 15, 14, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 689097960, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 15, 14, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 689098019, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 15, 14, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 689098072, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 15, 14, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 689098137, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 15, 14, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 689098195, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 15, 14, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 689098251, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 15, 14, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 689105094, 'comment_body': 'Changed all of these to `ContextManager` except capture_logging. Thanks!', 'comment_created': datetime.datetime(2021, 8, 15, 15, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 689125949, 'comment_body': '@sajalasati  The attributes of the domain class led me to this conclusion. See [here](https://github.com/oppia/oppia/blob/7c70f79de3ae649ef3c6114ffbb67c6c66f186d8/core/domain/auth_domain.py#L57).', 'comment_created': datetime.datetime(2021, 8, 15, 18, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 689126207, 'comment_body': '>  Can you share the error log here\r\n\r\nNo error during mypy stubs because we have stubs. But error while running backend test. I agree with what @vojtechjelinek said. Thanks!', 'comment_created': datetime.datetime(2021, 8, 15, 18, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 689126248, 'comment_body': '> move to Python 3.8\r\n\r\n@vojtechjelinek Are we going to do this soon?', 'comment_created': datetime.datetime(2021, 8, 15, 18, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 689144652, 'comment_body': ""I don't know, we still need to finish the Python 3 migration (mainly Beam jobs) so there are other priorities. On the other hand, I don't really want to delay it so we should do it in the next few months. I also assume it will be quite simple and easy."", 'comment_created': datetime.datetime(2021, 8, 15, 21, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 689145235, 'comment_body': ""```suggestion\r\n    def __enter__(self) -> 'Elasticsearch': ...\r\n```"", 'comment_created': datetime.datetime(2021, 8, 15, 21, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 689154494, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 15, 22, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hardikkat24', 'type': 'User'}, {'comment_id': 689292419, 'comment_body': 'Looked at the usage properly, and understood now. Thanks!', 'comment_created': datetime.datetime(2021, 8, 16, 7, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sajalasati', 'type': 'User'}]","[{'commit_sha': 'a78400ba8b11265e072cdb4d2312064f6d7cd01a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '524165ae51575cc2d067517dd5bfc55c16be2179', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590c3a3ba009261e53a9e01151bf4342e5b0fceb', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e5f44e99b46fc3aaf3435b7fa457d636ad468ba', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03d43722c7743a9df4448171d17ea0b10ea921b7', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c14e10a7e0a5a0f90278c5bfda9a2514148161b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '093568183a149449b88b988734d41e8e1a758f6c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50708339c88b517e201359c7901d0ef4d68b7337', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f8db937fe9741d16536bad06ed2bbcd77bfd952', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaac5737572efd20dec7c0cfa54bf7b493395fa8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a95335d718fe4881d1940431f7e4d3e9721b8663', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a986adb7e6e36ad3b9081a17623c7ab9382c721c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eb28d10d3382aed198b86548f488ca5cf85cb06', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c0201490e9084db8fcc8e5bb09e8ef558ee0217', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa5c8f12119a1fdda5f6ec32120eca7b5748e03d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef00b4b4633b87341d102880e122f98bfa4dbbef', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b66dbe40e2cfaeade5a0e7a94784041f3d73ac53', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c37d177635b185bc7ac1fa84c04ecf66f129b69', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dbf3773bd299e853e63e8cbe10ca80a8819ac54', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c9e5f27ee2007c0be4e4f72c17a2f3884a5344b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63136ad9cf4fbbd2a09f3778439072c9843a08c0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3782126910de4fb0f1921ebea32ccb1479f3ec1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a90b222b50ff315d8ecd2405960aabadd4d0e8da', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '281830572cc8afc9870c981f64e369a0e10b9352', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f4f63f1d7a9895ded346649047ad73fc4d98e5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5fdaa1216f26678a5e8b4867e0a27e55be4f1d2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c76073a045e1ab87a6936d48ab6b016e60625ca9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b784b7245c1c7c185cbc92b6594c3b27be398bb1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381f0d25cb7f3ac68a448f76af4b26097a7f1df1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '861386e37027a5a4b7e7754df1cfa65739ce8bdc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ad5c768e2f95fa15002f1ea0a9f251ae70a54c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48660cbcac278477c91afb3c20ad6f99149523af', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '759f0e70b4331631b1db810075a5356441a32ab5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f21e6cb150241e611c64ffeb179122bfb50d9a5', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd94e9e0e409fd73ee79eaf17359a1e421fe213e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6769aa1261ff491a4eabcea541d8833a9e3e7e27', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5cc5ce409d5eedafd67c08aba3214f202baae96', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ed37492fa24d15c2fd624638d01600ca40bd395', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c71a79ecab422e7103006288acb9dd97ffcec1e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38e712cbecaa2d9b9ee6ae634706c530374499cd', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3263ebe65df17791c07e43946324d3a774d74d1', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cfff8c728d3b2dfdcf05cc02a6d9d5ea7162e08', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '499161e4eda7e0df34f1702abf654fd7bf97a360', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cdabc7faf2f1a7266beebada5ab17bc03dfc561', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '795cfacd64b24293a03f198b5a1f322f9e409bd3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69248c4a4e4a0816dd92d5445b60d045a697ae42', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf695b36751fe2ce74d5cd4278c067ab92ebea6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2a1f95fb7663e880deaeead8cd1a38359cbea92', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de2d109a73d59628ed0adf85a53ac2cee17facfc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdbcec3d20db946fd63c9f39a4ad9048bdc6b6f0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bc4ac0cad36d3318b9185cbf6487c3672a2f058', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0ebf54398d923ba4302ebdd8f3ac8697e4ab83f', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c341f726a43f15a53f0d2276798d8b040949f76e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '713afe7eb0f459396dad5506cb5dc2ebbb02a785', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67b36537318a91d8e4815d899ececa22db5a2483', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46527ea12af5b58b5d779bee404536abae56420d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a881c1e435e18ed055a72342b3df26922ff1c8d0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d1acbcc1971c205d3165ca371364cb2c4600b13', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05be95650726a029b486d9d07cb021a178570fb3', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '603a60b55e64d30dbaf17888590cd8829455d44a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12e219ce627466adb8f1301d3eb39de26756793d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13bb96ab82c085f4739a3380f8a495704d85af5d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4244b9baa0000b7e12bd4913e95eca62c5e36d3c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ede02e464c71e5c331c13f74893c38d0ed04c022', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b3423ba65743f0a57eaf57d235109f4dc3d2e6a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96a6576b53bc4857a97800ffb8f6657629b21233', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15386f37ba4864616a7ac9ab1a66219378197157', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '834145acd4e85e84c806e06405d387ecf3226bb6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b94a27f3f93c2d656a7e5f678528196818af1645', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b8a4bdb654a677fba86e8335d10d51e3044e5fc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '817a3274a17b254939a11429795b728c1adc32b6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f133fb8cec9c7e714b880a030e389488bab9b96', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b910d35da09d6eb0ed206f9af037d93d944b4088', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3affdd3ea88c5e967718e0eab4bf2a22157c84b2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8beb73dc69e8794f029857da881ccda3734cd1a4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7731da672a19d9bacb7ef01542bc55c8b928575', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '377fbf397628f1aa6f7fb32b58c21b6b0ed92078', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '627c64d877412003b6a1257a85c6e86a558b3a96', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cacedff65e1eda462056a8f571801876d64173e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ef246f22e47db8362cb6446651aa83c739bc4d8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d9524d3fe42b55c8468fb91ef5eea55ed37c02b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cf1a1fc038aa347179c63f22ccc9a9784870a68', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31459203953233840ec26cd09053f5a0980b72f0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b918ba428afde519b4c2cd644955a430bda14c9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bbb8534dcc3e2e512d0353694416fe1b6e0062e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8535e7a6dd3c096a39c7a77c78864cdb8cb91634', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c43166ef40ec7e7440e6c6ac56673af634aee7a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faff0ba692bc6f623fc8b1fcc18486f13b3c4eb6', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4d75191fa621bc90c7e94313b4607888adacc2c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4023643c456c5f92cd21cb56a85a5e21490a418', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '665ab42dbc7e0e65d8abae60589e9d869107e825', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7a0975871839a114aa1e99a6ea64a0c303ef76c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a6eefd2def05d648684c8477259e0cecd5e0c78', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61ccf3d0b2374c1585479030bb2a87ed253a0a55', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c415a426e133fde3709d379478dcc9549e22c96d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2380013a5a94cb9a7f60669d2a1765f753b00e8e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3d822289090142f868c4aedb7395b0c54835860', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '610e570339ff133421c71a55671c4f7a3cd046bb', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '831a89f3f84ad03b7dfc63e62c97cc4c382d56c7', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25a060513f26fec609fd29a3014db7d4b4b7c6bd', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b83299e9e2865c402bdb4f0f2c984e62cf951fc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '254c3fbdc25d45da03d7ace3b135d87ff82f680c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c940d791fd82b76a9be2f6da3a1413f972b8d700', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90620f22040f93d2870a70d4d1dbec56d3deb36b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfb159c17986c88ccca52f5d283b20913da13e10', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f9a9654699fb74f3d1383a0efcdc3bb2311d704', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa09ef717096b547698183ed8d616e4697bafbba', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c44f640a54c1ba7265b5c780fbef3d02ca5e41a', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cea52d755a3e0f8cc07b5bffa38258a75606a64', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c87fa48231b3a7108a4cad86f445eca1134af9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b98589e5002272b740304b6653a9c23dcc47432c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30a52102ba81b30fed6ba329c3831e6aee41aaa2', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0991eb6f95dedc7e17a0549035db3212f52edefe', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2575b76966aa4a67d23ec8ff3f9251f9ec0be19e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0e9ab9ba07885697bbfd63dbd2d043ac10f452c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ba259de2e1805d9ddc702b62969fed96b09625', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74099096ca4606f3e9a2f52a06145738b1f9f70e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '599a13cde83013be088e1127b5c0a70f4fac82bf', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '418ea217a5eb74f97ff04a164f63f3316ff73413', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37e90bae27c366baad00f2d509eced306b8db45c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '065a264f58270620fe9314fbeedcdacd025faf2e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ade792c7bba0538769e5a821a1f0b2241145499d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3012fc115fb397f1db1f14b55a0c353e3b604606', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9080702c27b1d785f99c73d3bf7137a49b411374', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0422d9d91aec9f68ea6509ad890cb11c8675447c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9edfb2c87cd22097794e49919ca0cb0c2a290409', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b67402322e88f3cd211765766feae32dd81fb468', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45fe8aa9b7fac2855031bd3a58406eb2ea3039e4', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11da5ae7dc430afdd98c5c7acfd0e762b9747e34', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01306af4374e7555ea28982d62c2bd30be604cd0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f40f072e7db87c9a0ca74b362d8688572f533295', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1f87cac8026c55b31e386f720683bae4dda603c', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70c6e362fa0b400ca7be641f7e325f1d4a8c1e54', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb38c6bc01c23b8d2c56be28340e94e5baebec75', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cad4a29946b40fa2fcce96579fd4092392dee9b', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd83936b3433e18184d01be52f92528cc4b6b2f05', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89578ccec9d8936998e5be83e062a8640c657d44', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c70f79de3ae649ef3c6114ffbb67c6c66f186d8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9d2cc21484f89c08016119d0acb4c3fb2f5bdbc', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94ecf73bcfd4a0f93ea5f1c1637a116122c84903', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a55491ce7073ce377502068165e495ddccbc4d16', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '053d35360d9b0985192802d3fad12178097fab02', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8699b6e866cb01f76a62df580345a8d17c34ea0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '879cc16a48862fe9c699a30fb2b4973c05a828c0', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df7f6a7735cc97d4e7d9ae97ac262ced1fa53792', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1840d8cf967f892edb941703738a49c29b75fb3e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c666cb98f83448c6441138ecbf3d41b07fc3ac8', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}]",Hardik Katehara,54679643,,User,,28,,35,21
696567470,Fix #13249: Fix mypy pre-push checks,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #13429 
2. This PR does the following: 
   - Adds the path to `USER_BASE/bin` to `_PATH_TO_INSERT` if mypy_requirements are installed using --user flag.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13490,https://api.github.com/repos/oppia/oppia/pulls/13490,https://github.com/oppia/oppia/pull/13490,closed,33,23,2,5,19,0,1,1,[{'name': 'PR: LGTM'}],2021-07-25 21:32:44+00:00,2021-07-28 19:53:19+00:00,253235.0,"2 days, 22:20:35",[],"[{'commit_sha': '45b8037ac89681e6041bd10cf6229955e6aa88fa', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca7922527d70a095e42eebee5289c0e25939349e', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5965f941a8f831c1e4bf5276517793a7e088904d', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74068faa7f5cf93c433e38012d98226e91351aa9', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a51290fbf54aa66f1c14638b65e4f325e23fc87', 'committer_username': 'hardikkat24', 'committer_name': 'Hardik Katehara', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 29, 16, 11, 2, tzinfo=datetime.timezone.utc)}]",Hardik Katehara,54679643,,User,,28,,35,21

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
40687563,oppia,oppia/oppia,Python,3838,5716,240,775,15750,1418,418,27,"[{'id': 722561108, 'number': 13775, 'closed': datetime.datetime(2021, 9, 14, 4, 31, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 30, 14, 52, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1258743.0, 'time_delta': '14 days, 13:39:03', 'additions': 10, 'deletions': 169, 'state': 'closed'}, {'id': 708781658, 'number': 13629, 'closed': datetime.datetime(2021, 8, 16, 9, 44, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 11, 44, 15, tzinfo=datetime.timezone.utc), 'time_taken': 424787.0, 'time_delta': '4 days, 21:59:47', 'additions': 845, 'deletions': 200, 'state': 'closed'}, {'id': 705496118, 'number': 13589, 'closed': datetime.datetime(2021, 8, 15, 17, 47, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 6, 13, 44, 4, tzinfo=datetime.timezone.utc), 'time_taken': 792204.0, 'time_delta': '9 days, 4:03:24', 'additions': 506, 'deletions': 195, 'state': 'closed'}, {'id': 702302940, 'number': 13565, 'closed': datetime.datetime(2021, 8, 12, 6, 37, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 13, 53, 58, tzinfo=datetime.timezone.utc), 'time_taken': 751403.0, 'time_delta': '8 days, 16:43:23', 'additions': 1343, 'deletions': 647, 'state': 'closed'}, {'id': 699886179, 'number': 13524, 'closed': datetime.datetime(2021, 8, 9, 7, 59, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 29, 22, 45, 52, tzinfo=datetime.timezone.utc), 'time_taken': 897199.0, 'time_delta': '10 days, 9:13:19', 'additions': 1442, 'deletions': 808, 'state': 'closed'}, {'id': 696567470, 'number': 13490, 'closed': datetime.datetime(2021, 7, 28, 19, 53, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 21, 32, 44, tzinfo=datetime.timezone.utc), 'time_taken': 253235.0, 'time_delta': '2 days, 22:20:35', 'additions': 33, 'deletions': 23, 'state': 'closed'}, {'id': 696560647, 'number': 13489, 'closed': datetime.datetime(2021, 7, 25, 20, 57, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 20, 34, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1354.0, 'time_delta': '0:22:34', 'additions': 9, 'deletions': 6, 'state': 'closed'}, {'id': 691930151, 'number': 13413, 'closed': datetime.datetime(2021, 8, 5, 22, 51, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 13, 8, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1676537.0, 'time_delta': '19 days, 9:42:17', 'additions': 1405, 'deletions': 276, 'state': 'closed'}, {'id': 685476447, 'number': 13337, 'closed': datetime.datetime(2021, 7, 16, 15, 15, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 20, 6, 34, tzinfo=datetime.timezone.utc), 'time_taken': 760131.0, 'time_delta': '8 days, 19:08:51', 'additions': 75, 'deletions': 22, 'state': 'closed'}, {'id': 683445357, 'number': 13310, 'closed': datetime.datetime(2021, 7, 16, 15, 6, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 7, 39, 23, tzinfo=datetime.timezone.utc), 'time_taken': 977231.0, 'time_delta': '11 days, 7:27:11', 'additions': 138, 'deletions': 46, 'state': 'closed'}, {'id': 680753291, 'number': 13269, 'closed': datetime.datetime(2021, 7, 7, 17, 14, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 10, 56, 54, tzinfo=datetime.timezone.utc), 'time_taken': 627429.0, 'time_delta': '7 days, 6:17:09', 'additions': 253, 'deletions': 172, 'state': 'closed'}, {'id': 678581894, 'number': 13240, 'closed': datetime.datetime(2021, 7, 1, 8, 54, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 27, 21, 16, 18, tzinfo=datetime.timezone.utc), 'time_taken': 301080.0, 'time_delta': '3 days, 11:38:00', 'additions': 30, 'deletions': 26, 'state': 'closed'}, {'id': 672454424, 'number': 13114, 'closed': datetime.datetime(2021, 7, 3, 6, 28, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 9, 49, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1370367.0, 'time_delta': '15 days, 20:39:27', 'additions': 122, 'deletions': 40, 'state': 'closed'}, {'id': 668786843, 'number': 13060, 'closed': datetime.datetime(2021, 6, 26, 16, 59, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 12, 6, 21, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1247884.0, 'time_delta': '14 days, 10:38:04', 'additions': 1339, 'deletions': 91, 'state': 'closed'}, {'id': 635575394, 'number': 12763, 'closed': datetime.datetime(2021, 6, 8, 6, 59, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 9, 8, 39, 44, tzinfo=datetime.timezone.utc), 'time_taken': 2586005.0, 'time_delta': '29 days, 22:20:05', 'additions': 145, 'deletions': 138, 'state': 'closed'}, {'id': 629658108, 'number': 12724, 'closed': datetime.datetime(2021, 6, 23, 6, 52, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 4, 9, 36, 54, tzinfo=datetime.timezone.utc), 'time_taken': 4310164.0, 'time_delta': '49 days, 21:16:04', 'additions': 91, 'deletions': 0, 'state': 'closed'}, {'id': 627170087, 'number': 12678, 'closed': datetime.datetime(2021, 5, 18, 20, 32, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 30, 9, 38, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1594479.0, 'time_delta': '18 days, 10:54:39', 'additions': 105, 'deletions': 17, 'state': 'closed'}, {'id': 612234098, 'number': 12477, 'closed': datetime.datetime(2021, 4, 22, 19, 17, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 9, 7, 43, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1164875.0, 'time_delta': '13 days, 11:34:35', 'additions': 9, 'deletions': 14, 'state': 'closed'}, {'id': 594535397, 'number': 12240, 'closed': datetime.datetime(2021, 4, 22, 16, 19, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 17, 9, 9, 35, tzinfo=datetime.timezone.utc), 'time_taken': 3136179.0, 'time_delta': '36 days, 7:09:39', 'additions': 74, 'deletions': 2, 'state': 'closed'}, {'id': 586057094, 'number': 12115, 'closed': datetime.datetime(2021, 3, 6, 19, 14, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 6, 12, 46, 12, tzinfo=datetime.timezone.utc), 'time_taken': 23319.0, 'time_delta': '6:28:39', 'additions': 214, 'deletions': 4, 'state': 'closed'}, {'id': 581383631, 'number': 12052, 'closed': datetime.datetime(2021, 3, 8, 21, 11, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 27, 18, 46, 44, tzinfo=datetime.timezone.utc), 'time_taken': 786286.0, 'time_delta': '9 days, 2:24:46', 'additions': 256, 'deletions': 31, 'state': 'closed'}, {'id': 577074096, 'number': 11998, 'closed': datetime.datetime(2021, 3, 7, 10, 19, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 21, 8, 31, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1216071.0, 'time_delta': '14 days, 1:47:51', 'additions': 269, 'deletions': 15, 'state': 'closed'}, {'id': 572542668, 'number': 11926, 'closed': datetime.datetime(2021, 3, 10, 15, 45, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 12, 14, 5, 53, tzinfo=datetime.timezone.utc), 'time_taken': 2252355.0, 'time_delta': '26 days, 1:39:15', 'additions': 2326, 'deletions': 2270, 'state': 'closed'}, {'id': 568988735, 'number': 11871, 'closed': datetime.datetime(2021, 2, 11, 11, 54, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 7, 15, 4, 28, tzinfo=datetime.timezone.utc), 'time_taken': 334206.0, 'time_delta': '3 days, 20:50:06', 'additions': 70, 'deletions': 0, 'state': 'closed'}, {'id': 562268217, 'number': 11797, 'closed': datetime.datetime(2021, 1, 31, 15, 28, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 27, 6, 36, 51, tzinfo=datetime.timezone.utc), 'time_taken': 377472.0, 'time_delta': '4 days, 8:51:12', 'additions': 15, 'deletions': 5, 'state': 'closed'}, {'id': 560602300, 'number': 11770, 'closed': datetime.datetime(2021, 2, 10, 16, 18, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 24, 13, 35, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1478604.0, 'time_delta': '17 days, 2:43:24', 'additions': 45, 'deletions': 4, 'state': 'closed'}, {'id': 557935010, 'number': 11739, 'closed': datetime.datetime(2021, 1, 21, 17, 19, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 20, 4, 20, 5, tzinfo=datetime.timezone.utc), 'time_taken': 133142.0, 'time_delta': '1 day, 12:59:02', 'additions': 9, 'deletions': 9, 'state': 'closed'}]"
