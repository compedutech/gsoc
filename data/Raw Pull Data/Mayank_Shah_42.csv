pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
426521062,conformance validation: add new helper to `testutil`,"Fixes https://github.com/linkerd/linkerd2/issues/4530

- Add new struct `GenericTestHelperOptions`

`GenericTestHelperOptions` defines the `TestHelper` options
that are used along with `NewGenericTestHelper()` method to obtain a `*TestHelper`

- Add new helper function `NewGenericTestHelper`

`NewGenericTestHelper` accepts a `*GenericTestHelperOptions` and returns a new `*TestHelper` from the options provided. This helper was created to be able to reuse the `testutil` package without any hard restrictions 

Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>

<!--  Thanks for sending a pull request!

If you already have a well-structured git commit message, chances are GitHub
set the title and description of this PR to the git commit message subject and
body, respectively. If so, you may delete these instructions and submit your PR.

If this is your first time, please read our contributor guide:
https://github.com/linkerd/linkerd2/blob/master/CONTRIBUTING.md

The title and description of your Pull Request should match the git commit
subject and body, respectively. Git commit messages are structured as follows:

```
Subject

Problem

Solution

Validation

Fixes #[GitHub issue ID]

DCO Sign off
```

Example git commit message:

```
Introduce Pull Request Template

GitHub's community guidelines recommend a pull request template, the repo was
lacking one.

Introduce a `PULL_REQUEST_TEMPLATE.md` file.

Once merged, the
[Community profile checklist](https://github.com/linkerd/linkerd2/community)
should indicate the repo now provides a pull request template.

Fixes #3321

Signed-off-by: Jane Smith <jane.smith@example.com>
```

Note the git commit message subject becomes the pull request title.

For more details around git commits, see the section on Committing in our
contributor guide:
https://github.com/linkerd/linkerd2/blob/master/CONTRIBUTING.md#committing
-->
",True,4532,https://api.github.com/repos/linkerd/linkerd2/pulls/4532,https://github.com/linkerd/linkerd2/pull/4532,closed,33,0,1,3,6,0,0,0,[],2020-06-02 11:22:33+00:00,2020-06-12 05:15:43+00:00,841990.0,"9 days, 17:53:10",[],"[{'commit_sha': '6596cd9c9df9e626869c5a871459e5377cd880cd', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb071ec2f418939c1475350dfdbd2f3e688c9d7b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a5d2f962f414ebd04857804a432c1116abc5c60', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
433647272,Update function signature of `testutil.NewGenericTestHelper`,"This PR is a follow-up for https://github.com/linkerd/linkerd2/pull/4532

Once merged, `testutil.NewGenericTestHelper` will

- accept `version`, `httpClient` and `k8sContext` as parameters
- initialize the `KubernetesHelper` field in the returned instance of `*TestHelper`

Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>

Cc: @Pothulapati @alpeb ",True,4591,https://api.github.com/repos/linkerd/linkerd2/pulls/4591,https://github.com/linkerd/linkerd2/pull/4591,closed,9,3,1,4,1,4,0,0,[],2020-06-12 12:18:51+00:00,2020-06-18 11:23:28+00:00,515077.0,"5 days, 23:04:37","[{'comment_id': 440279455, 'comment_body': 'Looks like there is also `KubernetesHelper` variable in `TestHelper`. Maybe we can use that somewhere in the code using the returned value from `NewKubernetesHelper()`?', 'comment_created': datetime.datetime(2020, 6, 15, 15, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 440306351, 'comment_body': 'Ah, nice catch - was only considering setting the private fields through this method, but it certainly makes sense to initialize the `KubernetesHelper` field as well. That would mean that `NewGenericTestHelper` would now also have to accept `k8sContext` as a parameter and also return the error returned from `NewKubernetesHelper`.\r\n\r\nI have pushed the changes incorporating the above. PTAL! :smile: ', 'comment_created': datetime.datetime(2020, 6, 15, 16, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 440643067, 'comment_body': ""As the `kubernetesHelper` is public, and so is `NewKubernetesHelper()`, why can't we just take it as a argument and assign it directly, rather than using this function directly. Any upsides to this?"", 'comment_created': datetime.datetime(2020, 6, 16, 7, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 440737737, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 6, 16, 10, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}]","[{'commit_sha': '56960dc0e1349ca731207c3efb13387a39473684', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '651778e4c1370a023119e9902ac6f5598d0c88d2', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb29dac5b87e6d50cc524b6ff484fb73c8a04aff', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8242231e109d834b8e10340fd70c31dca7a9074b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
437512049,Refactor helper functions from `inject` integration tests,Fixes https://github.com/linkerd/linkerd2/issues/4643,True,4644,https://api.github.com/repos/linkerd/linkerd2/pulls/4644,https://github.com/linkerd/linkerd2/pull/4644,closed,105,97,2,3,0,0,0,0,[],2020-06-21 08:04:19+00:00,2020-06-22 17:45:53+00:00,121294.0,"1 day, 9:41:34",[],"[{'commit_sha': 'cc6a4f9953ff6ab7854d41fe741155a381bb7dc8', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f56e5b41a2cee4b0bc1963e6dad698af832565ce', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52339e4406b07ef357ad922c1f1785184a18d3fd', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
440904580,conformance validation: Refactor install test helpers,"The `install_test.go` integration tests currently make use of 2 useful helper funcions - `exerciseTestAppEndpoint` and `testResourcesPostInstall`. In order to be able to reuse these in [conformance validation](https://github.com/linkerd/linkerd2-conformance) for install and upgrade tests, this PR refactors these helpers into the `testutil` package

- Move `testResourcesPostInstall` to `testutil.TestResourcesPostInstall`
- Move `exerciseTestAppEndpoint` to `testutil.ExerciseTestAppEndpoint`

Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>

<!--  Thanks for sending a pull request!

If you already have a well-structured git commit message, chances are GitHub
set the title and description of this PR to the git commit message subject and
body, respectively. If so, you may delete these instructions and submit your PR.

If this is your first time, please read our contributor guide:
https://github.com/linkerd/linkerd2/blob/main/CONTRIBUTING.md

The title and description of your Pull Request should match the git commit
subject and body, respectively. Git commit messages are structured as follows:

```
Subject

Problem

Solution

Validation

Fixes #[GitHub issue ID]

DCO Sign off
```

Example git commit message:

```
Introduce Pull Request Template

GitHub's community guidelines recommend a pull request template, the repo was
lacking one.

Introduce a `PULL_REQUEST_TEMPLATE.md` file.

Once merged, the
[Community profile checklist](https://github.com/linkerd/linkerd2/community)
should indicate the repo now provides a pull request template.

Fixes #3321

Signed-off-by: Jane Smith <jane.smith@example.com>
```

Note the git commit message subject becomes the pull request title.

For more details around git commits, see the section on Committing in our
contributor guide:
https://github.com/linkerd/linkerd2/blob/main/CONTRIBUTING.md#committing
-->
",True,4681,https://api.github.com/repos/linkerd/linkerd2/pulls/4681,https://github.com/linkerd/linkerd2/pull/4681,closed,57,49,2,2,1,0,0,0,[],2020-06-27 12:30:21+00:00,2020-06-29 21:29:42+00:00,205161.0,"2 days, 8:59:21",[],"[{'commit_sha': '33f775ad395cd030dd8d70821009c73dd14c226d', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4fe8fdf03f3b757431597d43feb28ca72e3d942', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
457240433,conformance validation: move `tap_test.go` test helpers to `testutil`,"The `tap` integration tests currently make use of 2 useful helper functions - `validateExpected` and `tap`, and struct `tapEvent`. This PR moves these into the `testutil` package so that they can be reused for [conformance validation](https://github.com/linkerd/linkerd2-conformance) and to ensure consistency between the 2 repos.

- move `tap` to `testutil.Tap`
- move `validateExpected` to `testutil.ValidateExpected`
- move struct `tapEvent` to `testutil.TapEvent`

Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>

Cc: @Pothulapati @ihcsim @alpeb 
<!--  Thanks for sending a pull request!

If you already have a well-structured git commit message, chances are GitHub
set the title and description of this PR to the git commit message subject and
body, respectively. If so, you may delete these instructions and submit your PR.

If this is your first time, please read our contributor guide:
https://github.com/linkerd/linkerd2/blob/main/CONTRIBUTING.md

The title and description of your Pull Request should match the git commit
subject and body, respectively. Git commit messages are structured as follows:

```
Subject

Problem

Solution

Validation

Fixes #[GitHub issue ID]

DCO Sign off
```

Example git commit message:

```
Introduce Pull Request Template

GitHub's community guidelines recommend a pull request template, the repo was
lacking one.

Introduce a `PULL_REQUEST_TEMPLATE.md` file.

Once merged, the
[Community profile checklist](https://github.com/linkerd/linkerd2/community)
should indicate the repo now provides a pull request template.

Fixes #3321

Signed-off-by: Jane Smith <jane.smith@example.com>
```

Note the git commit message subject becomes the pull request title.

For more details around git commits, see the section on Committing in our
contributor guide:
https://github.com/linkerd/linkerd2/blob/main/CONTRIBUTING.md#committing
-->
",True,4800,https://api.github.com/repos/linkerd/linkerd2/pulls/4800,https://github.com/linkerd/linkerd2/pull/4800,closed,133,125,2,6,0,2,0,1,[],2020-07-27 15:33:25+00:00,2020-07-28 20:12:26+00:00,103141.0,"1 day, 4:39:01","[{'comment_id': 461399383, 'comment_body': 'are we planning to use these fields directly, and hence we need to make them public here?', 'comment_created': datetime.datetime(2020, 7, 28, 8, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 461508034, 'comment_body': ""Yep. We may have to create expected tap events that we'll check against the received tap events using the `ValidateExpected` method. Plus the `tap_test.go` also need to create instances of `TapEvent` for assertion."", 'comment_created': datetime.datetime(2020, 7, 28, 11, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}]","[{'commit_sha': 'fecb99d0e50f9205b52a627923af76af5cdd70e6', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69eb707076354e07a0d7b009b587b828bfe3aa09', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92994f0bdb993f2bd480876d2a42a3502dea368f', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ceae656e7c5cd4249d0c59ced6c2761de4d20cc', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7fc38c46f6b19cfb4357d0717be98317821a3c8', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b8083f687ea4869a3edafa54210435e9825553c', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
447902429,conformance validation: make `checkOutput` public,"### Problem

The conformance validation project needs a way to validate the output of `linkerd check`. A very simple way to do this would be to capture the output of `check` and compare it against some predefined `.golden` file which holds the desired output, much like the integration tests. The  issue with this is that for conformance validation, users are allowed to specify the version of Linkerd CLI to use for performing the tests, and it is possible for different versions to have different sets of checks. It is also not feasible to have a `.golden` file with the desired check output for each stable and edge version.

### Solution

Capture the JSON output of the check results (`linkerd check -o json`), and unmarshal it to an instance of `CheckOutput`. We can now iterate through this object to see if any `Check.Result` holds `""error""`.


Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>

<!--  Thanks for sending a pull request!

If you already have a well-structured git commit message, chances are GitHub
set the title and description of this PR to the git commit message subject and
body, respectively. If so, you may delete these instructions and submit your PR.

If this is your first time, please read our contributor guide:
https://github.com/linkerd/linkerd2/blob/main/CONTRIBUTING.md

The title and description of your Pull Request should match the git commit
subject and body, respectively. Git commit messages are structured as follows:

```
Subject

Problem

Solution

Validation

Fixes #[GitHub issue ID]

DCO Sign off
```

Example git commit message:

```
Introduce Pull Request Template

GitHub's community guidelines recommend a pull request template, the repo was
lacking one.

Introduce a `PULL_REQUEST_TEMPLATE.md` file.

Once merged, the
[Community profile checklist](https://github.com/linkerd/linkerd2/community)
should indicate the repo now provides a pull request template.

Fixes #3321

Signed-off-by: Jane Smith <jane.smith@example.com>
```

Note the git commit message subject becomes the pull request title.

For more details around git commits, see the section on Committing in our
contributor guide:
https://github.com/linkerd/linkerd2/blob/main/CONTRIBUTING.md#committing
-->
",False,4752,https://api.github.com/repos/linkerd/linkerd2/pulls/4752,https://github.com/linkerd/linkerd2/pull/4752,closed,13,11,1,2,3,0,0,1,[],2020-07-12 13:46:37+00:00,2020-07-21 04:04:53+00:00,742696.0,"8 days, 14:18:16",[],"[{'commit_sha': '28be9392adc231b9cd078619ec0fbfe27a2ac821', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d2cccc88721749b7a8de1ffc5ad9b2774022fd8', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
425495273,First pass on conformance validation,"This PR adds the following changes into the repository:

- Add a single test for verifying proxy injection
- Adds test helpers for installing / uninstalling control plane and running pre and post installation checks
- Adds support for reading test configuration from a config YAML
- Add a Dockerfile for housing the conformance tests. For the sake of testing, this image is accessible on [hub.docker.com](hub.docker.com) at [mayankshah1607/linkerd2-conformance](https://hub.docker.com/repository/docker/mayankshah1607/linkerd2-conformance)
- Add convenience scripts for building and pushing the various docker images for local development, as well as for running the tool locally
-  Add a Sonobuoy plugin file
- Update README with relevant documention regarding description, use cases and usage

Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>",True,1,https://api.github.com/repos/linkerd/linkerd2-conformance/pulls/1,https://github.com/linkerd/linkerd2-conformance/pull/1,closed,3765,2,31,125,10,64,0,0,[],2020-05-30 17:07:25+00:00,2020-07-21 09:13:06+00:00,4464341.0,"51 days, 16:05:41","[{'comment_id': 433183079, 'comment_body': 'Looks like `--plugin` can take a URL directly.', 'comment_created': datetime.datetime(2020, 6, 1, 11, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 433185672, 'comment_body': 'Yep! Downloading the plugin gives users the freedom to set their own options in the plugin definition. For example, the start up command as defined in the plugin currently uses a set of flags. Users could append flags like `--ginkgo.progress` to show progress reports on the pod logs, or `-linkerd-namespace` to modify the control plane ns before kicking off sonobuoy.\r\n\r\nBut for folks who want to use it directly out of the box, we should document that the plugin URL can be used directly! :)', 'comment_created': datetime.datetime(2020, 6, 1, 11, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 433187084, 'comment_body': ""The link for this image is in the PR description. Left it empty here for now so that we can have the link from Linkerd2's container registry."", 'comment_created': datetime.datetime(2020, 6, 1, 11, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 433197294, 'comment_body': 'Why not perform `linkerd check` and report its output? Would complete a total Linkerd install check and should be a pretty small change.', 'comment_created': datetime.datetime(2020, 6, 1, 12, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 433224246, 'comment_body': 'Yep! That was actually the next test I was going to write - to perform `check`, and also wait for the control plane components to change state to `Running`.\r\n\r\nWill add that now :)', 'comment_created': datetime.datetime(2020, 6, 1, 13, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 435873174, 'comment_body': '@Pothulapati Looks like Sonobuoy lets you pass environment variables for the pod during runtime. Fortunately, the [script](https://raw.githubusercontent.com/linkerd/website/master/run.linkerd.io/public/install) used for installing the linkerd2 binary uses the `LINKERD2_VERSION` environment variable to fetch the required binary of a particular version.\r\nThis seems like a neat option to me. WDYT? :) ', 'comment_created': datetime.datetime(2020, 6, 5, 11, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 435874644, 'comment_body': ""I've introduced this script after going through the Sonobuoy docs. Instead of cluttering the plugin file with a lot of commands, the container simply uses this as a start up script to install the specified version of linkerd2 binary (which is read from the `LINKERD2_VERSION` env variable), and initiate the tests."", 'comment_created': datetime.datetime(2020, 6, 5, 12, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 437827074, 'comment_body': 'Hmm, this gives an impression that you would need Linkerd install and would run conformance on top but we install Linkerd too right. So, How about ""run on a specific Linkerd binary""?', 'comment_created': datetime.datetime(2020, 6, 10, 2, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 437834681, 'comment_body': 'Hmm, Do we need `run.sh` actually? By removing it we can directly pass the planned config yaml here which is confused by a conformance helper and downloads the binary, etc and then calls the `testutil.TestHelper` with relevant configuration.\r\n\r\nBy removing this we only have a single layer i.e Go Conformance Helpers where we perform book-keeping tasks initially.. I think we can remove it unless there is some use-case. :) ', 'comment_created': datetime.datetime(2020, 6, 10, 3, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 437909775, 'comment_body': ""It exists only to make sure that the command section is not too untidy and filled with commands. Once we get https://github.com/linkerd/linkerd2/pull/4532 merged, I'll make sure to remove the binary installation process from here and make it a part of the config yaml. :smile:  "", 'comment_created': datetime.datetime(2020, 6, 10, 7, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 446282415, 'comment_body': 'typo ;)', 'comment_created': datetime.datetime(2020, 6, 26, 16, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'olix0r', 'type': 'User'}, {'comment_id': 446288151, 'comment_body': 'Oops! If only I could be a little more careful while using vim..', 'comment_created': datetime.datetime(2020, 6, 26, 16, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 447337681, 'comment_body': ""I don't see a reason to set the default version. We can get the default version of Linkerd2 when we we don't set the env right? Can we do something with that here?"", 'comment_created': datetime.datetime(2020, 6, 30, 0, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 447337903, 'comment_body': 'Also, How about using the latest edge as the default?', 'comment_created': datetime.datetime(2020, 6, 30, 0, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 447341645, 'comment_body': 'I don\'t see why `globalControlPlane` would come here as we were thinking that flag would be more like a global one which acts like the default install tests.\r\n\r\nSomething like\r\n```yaml\r\nlinkerdVersion: stable-2.8.1\r\nexternalIssuer: false\r\nglobalControlPlane:\r\n    enable: true\r\n    uninstall: true\r\ninstall:\r\n    enabled: true\r\n    config:\r\n        ha: false\r\n        # upgradeFromVersion: stable-2.7.0\r\n        flags:\r\n            - ""--controller-log-level""\r\n            - ""debug""\r\n            - ""--proxy-log-level""\r\n            - ""warn,linkerd2_proxy=debug""\r\n        addOns:\r\n            tracing:\r\n                enabled: true\r\n                collector:\r\n                    resources:\r\n                        cpu:\r\n                            limit: 100m\r\n                            request: 10m\r\n                        memory:\r\n                            limit: 100Mi\r\n                            request: 50Mi\r\ninject:\r\n    enabled: true\r\n    clean: true\r\n    config:\r\n         flags:\r\n...\r\n\r\n```\r\n\r\nAlso, What do you think about each test having `skipTest` and having some common fields across all tests and extra config field based on the test?', 'comment_created': datetime.datetime(2020, 6, 30, 0, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 447402981, 'comment_body': ""We're actually doing that only - the latest version of Linkerd is being fetched from the `version.json` endpoint if you have a look at the `parse()` method; however it's possible for that to return an error for any reason, and hence it would just use this statically set `defaultVersion` :)\r\nIt still makes sense to remove this variable because in that case, user should just manually set a version "", 'comment_created': datetime.datetime(2020, 6, 30, 4, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 447403593, 'comment_body': 'Hmm, the reason for choosing `skipTest` was that the zero value of booleans is `false`, which means, if the user chooses to skip the `enabled` field, it will always default to `false` and the test will not run unless they always manually specify `enabled: true`', 'comment_created': datetime.datetime(2020, 6, 30, 4, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 447427052, 'comment_body': ""Yeah. I don't see why fetch version.json could fail as we heavily depend on it in a lot of other places. We can just remove this and propagate a error! if both are not available i.e version.json and users override."", 'comment_created': datetime.datetime(2020, 6, 30, 5, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 451954484, 'comment_body': 'I think we should nest these test case configuration, under a parent variable named `testCase`. This will separate the test case configuration from the general meta configuration like Linkerd version, binary path,\r\n\r\nE.g.,\r\n\r\n```yaml\r\ntestCase:\r\n  lifecycle:\r\n    skip: false\r\n    reinstall: false \r\n    uninstall: true   \r\n  inject:\r\n    skip: false\r\n    clean: true\r\n  ingress:\r\n    skip: false\r\n    config:\r\n      controllers:\r\n       - nginx\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 4, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 451954599, 'comment_body': 'Instead of specifying `skip: [false|true]` for each test case, what do you think of utilizing regex to pattern match test functions to be skipped?\r\n\r\nE.g.,\r\n\r\n```yaml\r\ntestSuite:\r\n   skip: [""TestIngress.*"", ""^MyFlakyTest$""]\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 4, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 451955024, 'comment_body': ""Do these config apply to all, most or specify test cases? I'd think something like `ha`, `flags` are only relevant to control plane installation tests. Will it make sense to group them under the `lifecycle` configuration?"", 'comment_created': datetime.datetime(2020, 7, 9, 4, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 451955178, 'comment_body': ""\r\nThe `linkerdBinaryPath` doesn't seem to work for me, when I run the tests locally:\r\n\r\n```bash\r\n$ cat config.yaml| grep linkerdBinaryPath                                            \r\nlinkerdBinaryPath: /home/isim/.linkerd2/bin/linkerd  # specify default location in config.yaml\r\n\r\n$ bin/run-all\r\nfailed to initialize test helper or config: failed to parse YAML: yaml: unmarshal errors:\r\n  line 2: field linkerdBinaryPath not found in type utils.ConformanceTestOptionsFAIL    github.com/linkerd/linkerd2-conformance/tests/lifecycle 0.014s\r\nFAIL\r\nfailed to initialize test helper or config: failed to parse YAML: yaml: unmarshal errors:\r\n  line 2: field linkerdBinaryPath not found in type utils.ConformanceTestOptionsFAIL    github.com/linkerd/linkerd2-conformance/tests/inject    0.014s\r\nFAIL\r\n```"", 'comment_created': datetime.datetime(2020, 7, 9, 4, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 451955553, 'comment_body': ""Consider adding the `reports` folder to `.gitignore`, so that git won't track that folder during multiple test runs."", 'comment_created': datetime.datetime(2020, 7, 9, 4, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 451956450, 'comment_body': ""`#!/usr/bin/env sh` will be more flexible on different systems. See scripts in the Linkerd2 repo's `bin` folder.\r\n"", 'comment_created': datetime.datetime(2020, 7, 9, 4, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 451957302, 'comment_body': 'After this test failed on my local cluster, the test script went on to delete my Linkerd control plane. I am not sure how to debug why the tests failed. Any thoughts?\r\n\r\n```\r\n$ bin/run-all\r\n....\r\n=== RUN   TestIngress\r\nRunning Suite: ingress\r\n======================\r\nRandom Seed: 1594265401\r\nWill run 1 of 1 specs\r\n\r\nSTEP: Installing emojivoto\r\nSTEP: Injecting emojivoto\r\nlinkerd\r\n  can work with nginx ingress controller\r\n  /home/isim/workspace/linkerd/linkerd2-conformance/tests/ingress/specs.go:18\r\nSTEP: Creating ingress-nginx controller\r\nSTEP: Injecting linkerd into the ingress controller pods\r\n\r\n• Failure [65.663 seconds]\r\nlinkerd\r\n/home/isim/workspace/linkerd/linkerd2-conformance/tests/ingress/specs.go:8\r\n  can work with nginx ingress controller [It]\r\n  /home/isim/workspace/linkerd/linkerd2-conformance/tests/ingress/specs.go:18\r\n\r\n  could not find a proxy container for deploy/ingress-nginx-controller\r\n  Expected\r\n      <*v1.Container | 0x0>: nil\r\n  not to be nil\r\n...\r\n\r\n# went on to run the uninstall test\r\n```\r\n\r\nWhen the script exits, my cluster looks like this:\r\n```\r\n$ k get ns\r\nNAME                 STATUS   AGE\r\ndefault              Active   31h\r\ningress-nginx        Active   7m36s  # failed test namespace was left behind, but everything else was deleted\r\nkube-node-lease      Active   31h\r\nkube-public          Active   31h\r\nkube-system          Active   31h\r\nlocal-path-storage   Active   31h\r\n\r\n$ k -n ingress-nginx get po\r\nNAME                                        READY   STATUS      RESTARTS   AGE\r\ningress-nginx-admission-create-xzhnb        0/1     Completed   0          7m34s\r\ningress-nginx-admission-patch-wssr4         0/1     Completed   2          7m34s\r\ningress-nginx-controller-67454c7568-hffz8   2/2     Running     0          6m39s\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 9, 4, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 451958796, 'comment_body': '> -v\r\n\r\nWhile the tests are running, the output feels a bit verbose. Every test is repeating the same headers with information on the control plane namespace, cluster domain, CLI path etc. It might be better to just output this information once, at the start of the entire test run. Also, maybe provide a way to enable/disable `-v`.\r\n\r\nE.g.,\r\n\r\n```\r\nUnspecified linkerd2 control plane namespace - use default value ""l5d-conformance"" // repeated in every test case\r\nUnspecified cluster domain - using default value ""cluster.local"" // repeated in every test case\r\nUnspecified path to linkerd2 binary - using default value ""/home/isim/.linkerd2/bin/linkerd"" // repeated in every test case\r\nlinkerd2 binary exists in ""/home/isim/.linkerd2/bin/linkerd""- skipping installation\r\n=== RUN   TestLifecycle\r\nRunning Suite: Lifecycle\r\n========================\r\nRandom Seed: 1594265290  // ?\r\nWill run 1 of 1 specs\r\n\r\n `linkerd install` \r\n  can install a new control plane\r\n  /home/isim/workspace/linkerd/linkerd2-conformance/tests/lifecycle/specs.go:18\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 4, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 451958962, 'comment_body': 'What does the `linkerd2 binary exists in ""/home/isim/.linkerd2/bin/linkerd""- skipping installation` header that appear before the install test mean? Is the install test being executed after all?', 'comment_created': datetime.datetime(2020, 7, 9, 4, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 451961606, 'comment_body': 'Does `ginkgo bootstrap` do the same thing?', 'comment_created': datetime.datetime(2020, 7, 9, 4, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 451963069, 'comment_body': 'Are we just checking for syntax errors here?', 'comment_created': datetime.datetime(2020, 7, 9, 4, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 452020642, 'comment_body': ""Utiizing regex patterns would be useful if these could be passed down to the `--skip` flag of the [Ginkgo CLI](https://onsi.github.io/ginkgo/#the-ginkgo-cli). But in our case, we're not programatically determining the values for any of the CLI flags, and neither does Ginkgo natively provide APIs to skip tests on the basis of regex patterns.\r\nTo programatically determine if a Ginkgo test should be skipped would mean having to check a condition under the `ginkgo.BeforeEach` block and calling `ginkgo.Skip`. I don't see any advantage over matching regex patterns in the code than simply determining boolean values to evaluate an `if` condition. Moreover, we also have to consider that our users will not be familiar with the name of the test functions in our code (like `TestIngress`, etc) when they choose to run our Sonobuoy plugin - they only have to deal with setting up a correct config YAML and running the plugin. We could document these names, but I'm not really sure if this makes our user experience better.\r\n\r\nGinkgo also works little differently from the standard `testing` library. Each of our test suites, actually has only one `Test*` function, which holds several [Ginkgo 'containers'](https://onsi.github.io/ginkgo/#structuring-your-specs). For example, the ingress test suite contains only one function `TestIngress` that holds our Ginkgo specs, and similarly for inject (TestInject), etc. Using regex for such similar names seems a little superfluous to me. \r\n\r\nIf the redundancy of the `skip` flag is an issue, what do you think about having to skip on the basis of test names rather than regex pattern? For example:\r\n```yaml\r\ntestSuite:\r\n  skip:\r\n    - ingress\r\n    - inject\r\n    - myFlakyTest\r\n```"", 'comment_created': datetime.datetime(2020, 7, 9, 7, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 452023012, 'comment_body': 'These config apply to all installations of linkerd. Currently, we support to ways of control plane installation : \r\n1. a ""universal"" control plane - the control plane is installed as a part of the ""lifecycle test"", and the same control plane installation is used for the remaining tests.\r\n2. a ""local"" control plane - the control plane is installed and uninstalled as a part of the ""lifecycle"" tests. Each suceeding test will then install a control plane, run the tests and assertions, and finally uninstall once the test is complete.\r\n\r\nThese configs are common to both our above cases. I\'m completely okay with moving these under ""lifecycle"". @Pothulapati wdyt?', 'comment_created': datetime.datetime(2020, 7, 9, 7, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 452024139, 'comment_body': 'Yep, if you want to be able debug your control plane, you need to have a ""universal"" control plane installation (set `lifecycle.reinstall` to `false`), and skip the uninstall test (set `lifecycle.uninstall` to false). That way your control plane will stay even if your test fails :smile: ', 'comment_created': datetime.datetime(2020, 7, 9, 7, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 452026534, 'comment_body': ""Hmm, the reason why those headers are repeating is because each time a new test suite (`_test.go`) file is run, the config YAML is being re-read and parsed again, as each test suite runs as a separate `go test` process. But I'm sure there's a workaround to just show that output once."", 'comment_created': datetime.datetime(2020, 7, 9, 7, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 452029766, 'comment_body': '> What does the linkerd2 binary exists in `""/home/isim/.linkerd2/bin/linkerd""- skipping installation` header that appear before the install test mean?\r\n\r\nAh, so that header appears when the tests try to download a linkerd2 binary. Before downloading, it attempts to check if a binary exists in the default `/.linkerd2` directory. If it does, it skips the binary downloading part, which is what ""skipping installation"" means. I just realised that its misleading, and can easily be confused with ""skipping control plane installation"". I should change the message to ""skipping linkerd2 binary installation"".\r\n\r\n> Is the install test being executed after all?\r\n\r\nYep, this header actually has nothing to do with the control plane installation, as I mentioned above. The install tests would run regardless. I will change the message :smile: ', 'comment_created': datetime.datetime(2020, 7, 9, 7, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 452035499, 'comment_body': '`ginkgo bootstrap` only provides us with a single file (`<package>_suite_test.go`) which acts as an entrypoint for the ginkgo test suite. Further, `ginkgo generate <testname>` gives us a single test file (`<testname>_test.go`) with a single spec.\r\nThe above process is a little naive in the sense that it will run the test cases generated in a random order (because thats how ginkgo deals with multiple `_test.go` files under a single package). We wanted more control over the randomization and better organization over our test cases, which is why we had to have a custom template instead.\r\n[This section](https://github.com/mayankshah1607/linkerd2-conformance#adding-new-tests) explains how our test suites are organized and the significance of the `test_template` directory. :smile: \r\n\r\nMoreoever, each of our `_test.go` files need some logic in the `BeforeSuite` and `AfterSuite` blocks which does not come with `ginkgo generate`. Having a standard test template which satisfies all these requirements seemed a lot more effecient. :smile: ', 'comment_created': datetime.datetime(2020, 7, 9, 8, 0, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 452037493, 'comment_body': 'The `-i` flag installs the dependencies and compiles our tests for any errors, but does not run them. This was done so that when users are running the tests on Sonouoy, the pod does is only focussed towards running the tests and not install any dependencies.\r\nI forgot to remove `# Build the test binary` comment; it is from when the Dockerfile was a lot different.', 'comment_created': datetime.datetime(2020, 7, 9, 8, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 452097030, 'comment_body': 'Hmm, Here we wanted to support both the cases where a test would and would not need a specific linkerd installation. If a specific test would need a different installation, the test-case can perform its own right in a different namespace, WDYT? :thinking: ', 'comment_created': datetime.datetime(2020, 7, 9, 9, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 452391541, 'comment_body': 'Can we just pass the regex to the `go test` (adding a `-run` flag) in the `bin/go-test`? (I assume that\'s the entrypoint to run the test.) Feels like a lot of boiler plate code to have to do this for every spec.\r\n\r\n```\r\n\tginkgo.BeforeEach(func() {\r\n\t\tif c.Skip<TestName>() {\r\n\t\t\tginkgo.Skip(""Skipping <test> tests"")\r\n\t\t}\r\n\t})\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 17, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 452393877, 'comment_body': ""How about a `fail-fast` option where I can decide to skip the rest of the test cases (and don't destroy my control plane), if one fails? I think `go test -failfast` should work?"", 'comment_created': datetime.datetime(2020, 7, 9, 17, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 452394983, 'comment_body': 'Hmm, but this might not work too well when running with the Sonobuoy workflow where the scripts are hidden away from the users and all they have to do is define the configuration in the YAML and mount it as a configMap.\r\nThe config YAML is supposed to be the single source for reading any kind of configuration to have a consistent UX. What do you think?', 'comment_created': datetime.datetime(2020, 7, 9, 18, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 452675611, 'comment_body': 'For now, I\'ve made this boilerplate a single reusable function :\r\n```go\r\nfunc ShouldTestSkip(skip bool, message string) bool {\r\n\treturn ginkgo.BeforeEach(func() {\r\n\t\tif skip {\r\n\t\t\tginkgo.Skip(message)\r\n\t\t}\r\n\t})\r\n}\r\n```\r\n\r\nThis helper is called in the beginning of every skippable test:\r\n```go\r\nvar _ = ginkgo.Describe(""`linkerd inject`"", func() {\r\n\t_, config := utils.GetHelperAndConfig()\r\n\t_ = utils.ShouldTestSkip(config.SkipInject(), ""Skipping inject tests"")\r\n        \r\n       // remaining specs go here\r\n})\r\n\r\nI hope this solves temporarily solves the problem of redundant boilerplate code. :smile: ', 'comment_created': datetime.datetime(2020, 7, 10, 7, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 452690051, 'comment_body': 'This is fixed!', 'comment_created': datetime.datetime(2020, 7, 10, 8, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 455271326, 'comment_body': 'The indentation looks a bit off. See the [one in the Linkerd repo](https://github.com/linkerd/linkerd2/blob/main/LICENSE).', 'comment_created': datetime.datetime(2020, 7, 15, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 455303170, 'comment_body': 'The more commonly used snippet is:\r\n\r\n> Linkerd is a community project and is hosted by the Cloud Native Computing Foundation. Linkerd is committed to open governance.\r\n\r\n(See the footer in all the recent blog posts.)\r\n\r\nfwiw, I think you can just omit this line since you already hyperlinked it in the first paragraph.', 'comment_created': datetime.datetime(2020, 7, 15, 19, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 455304806, 'comment_body': ""I'd present the reader with an opportunity here, with something like:\r\n\r\n> If you are interested in helping to extend the test suites, see [Adding new tests](#adding-new-tests) below."", 'comment_created': datetime.datetime(2020, 7, 15, 19, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 455331726, 'comment_body': 's/mayankshah1607/linkerd', 'comment_created': datetime.datetime(2020, 7, 15, 20, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 455332545, 'comment_body': 's/Kuberenetes/Kubernetes', 'comment_created': datetime.datetime(2020, 7, 15, 20, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 455362518, 'comment_body': 's/test results results/test results', 'comment_created': datetime.datetime(2020, 7, 15, 21, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 455362895, 'comment_body': 's/convience/convenient', 'comment_created': datetime.datetime(2020, 7, 15, 21, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 455364718, 'comment_body': ""The arbitrary test IDs won't be necessary if we group all the test cases into one test suite, right?\r\n\r\nIf we really want to keep this, instead of asking the users to manually input an arbitrary test ID, can the script infer it based on the number of tests provided? E.g.,\r\n\r\n```\r\nbin/go-test inject # test ID is 01\r\nbin/go-test lifecycle inject ingress # test IDs are 01, 02, 03\r\n```"", 'comment_created': datetime.datetime(2020, 7, 15, 21, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 455371337, 'comment_body': 'This is ok for now. But I do want us to think about ways to auto-generate these boiler plate codes as much as possible, in a future PR.', 'comment_created': datetime.datetime(2020, 7, 15, 21, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 455383805, 'comment_body': 'These need to be updated with the `testCase.` prefix.', 'comment_created': datetime.datetime(2020, 7, 15, 21, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 455389745, 'comment_body': ""Using both `go test -v` *and* `-ginkgo.v` as the default verbosity level feels a bit much. IMO, we should minimize the output of passing tests, because they aren't interesting. OTOH, details of failing tests are more important. When my ingress test failed previously, the relevant outputs were buried by those of the passing tests. We can consider omit the `-v` flags by default, and allow users to do `bin/go-test -v` to alter the verbosity level."", 'comment_created': datetime.datetime(2020, 7, 15, 21, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 455398614, 'comment_body': ""Does this happen before or after `BeforeSuite`, `TestIngress` etc.? I'd think we want this check to happen sooner before setting up emojivoto etc."", 'comment_created': datetime.datetime(2020, 7, 15, 22, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 455404952, 'comment_body': 'I don\'t think you need the `utils.Err(err)` at the end; should be able to just do `fmt.Sprintf(""failed to create controller: %s"", err)`. Otherwise, it feels simpler to just do the good old:\r\n```\r\nif err != nil {\r\n  return err\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 7, 15, 22, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 455411258, 'comment_body': ""> Moreoever, each of our _test.go files need some logic in the BeforeSuite and AfterSuite blocks \r\n\r\nWhat are the benefits of separating the tests into different suites? Since these tests need to be executed in a certain order, can we just group them into one test suite? With one test suite,\r\n\r\n1. we don't have to introduce an arbitrary test IDs ordering mechanism\r\n1. we don't have to repeat the `BeforeSuite` and `AfterSuite` in every suite\r\n1. the output will be clearer and easier to grok\r\n1. the test template will also be simpler (and probably won't even be necessary)"", 'comment_created': datetime.datetime(2020, 7, 15, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 456534061, 'comment_body': 'You can `&&` these to avoid the extra layers.', 'comment_created': datetime.datetime(2020, 7, 17, 16, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 456535376, 'comment_body': 'Should this be moved to line 21?', 'comment_created': datetime.datetime(2020, 7, 17, 16, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 457665469, 'comment_body': 's/mayankshah1607/linkerd', 'comment_created': datetime.datetime(2020, 7, 20, 20, 14, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 457665915, 'comment_body': 'Extra line break.', 'comment_created': datetime.datetime(2020, 7, 20, 20, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 457667576, 'comment_body': '>  must contain a single (if required, more) \r\n\r\nAs in, _at least one_?', 'comment_created': datetime.datetime(2020, 7, 20, 20, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 457668086, 'comment_body': 'Mind fixing up the identation here? Thanks.', 'comment_created': datetime.datetime(2020, 7, 20, 20, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 457899227, 'comment_body': ""I would keep the configuration options later in the file, as users don't have to touch this in the default case. "", 'comment_created': datetime.datetime(2020, 7, 21, 7, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 457899878, 'comment_body': 'Also, we should definitely separate this into another doc. but does not have to be in this PR', 'comment_created': datetime.datetime(2020, 7, 21, 7, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}]","[{'commit_sha': '3356904469b9a3ce467bb1861b6252559362b26e', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6c1d485d36531e7039d4d399a3abf79d319d89b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18dfa045c001473ff2f1c0aac980e63036ee0cea', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fa9f018a7ab6f4d164d4f588fddfb36a28e7e79', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3961bf865de9ad3273cebb56052c4b36e0aecb21', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dffccfb135e5e606a5377b9c112e7cf7e7a0d0c9', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c55dfde2025305c5bf052c8160fc0dd21a03fd1b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ea55a79fc6a01a8d46fcc1eb35f2acb6b23ed3a', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dedfc6f3630eb2d8fce797890f89c4443a38b460', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8361179c5def8c8d000edd0df4815f5b9bee340', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c1a0ee372a8e55f80869c151a7930b283b40186', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cd7db8065296f4f7846f61295b7d6e48bc444cf', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66a4852af96ec9e83868ea0ad4610c89917a7cba', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e83c47d3fc8f2ff6f0aefc29e81f4af6fcedcb2', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da03079c8dee38578ae5fef0b90a2576eeb57e85', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c21925cd998563e881cf318d8f7bbdf597db85f', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e52fcc2927214e6306a90c42d764fddc93132424', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a7e239189353139a0f96ba21a79a3e446964d1a', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f6d5debc2585b6fdacefcc4309fc96532d68da8', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b47f414136bb3f114be68c5896c7703897011cf', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fdd7172a11b7ebf189540825744f2076fba9b19', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f67e66dc0ddffc7ab42749c2490b7b57147f4fe3', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c54573ed54611c6863ded716b7ec1e83a3a361aa', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cffd7d0a06c1b07a6baafb7fdcddfd56c89f09b9', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67c7b6508191c7ad747b66e67d3c172a913dc9cf', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cb47bf18a0bcb42199ea21681e1188b06114ba3', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8005585bcee6286d15a2e336aa8857132980a04a', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85b48c86422895d39f5694cbeb2d53c41b89b3f9', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1487b84a4f5b1d3f9f9e651de7494b7268d1a161', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0db789e7e811327b1ca0ffeb88ec55fb70843e9', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3b5cddff80c361e4cc391587bed238d62bfb940', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '673a43537591af07d93716701cc4dc6712e4aef0', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fc4d4d14ad1ac375e7aedd889d0eb179b04ca65', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6e9c9d1bfe96315e0e72a1968e75529014cbde5', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83275455ede11ad1bea4d281402abf3f8065d2fe', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea169f120ad714fbeb2d49b95a0fffadd14e2724', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bdb9141622a196376be04ae0bcc4c13880969e1', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0dcf3acb0644ef2b4599de7fad91ad76c4d3977', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99585a1039b508c0edb9d9a2f653c1c1924e6948', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3d7053db180b0a07ef19f56807c54e08fe6969d', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590de4db6fa605f6a5e53fa458b275ef4f30312b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48a48c14466a1e3940a1e4bc2fd8cea3b06a057f', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49f53657f116f40a6b67c605009e47ab2b2bc575', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6723571a685ceaba96a99c336f3234a52229c652', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd08a8d324b93726835d62f6f04b7583a30273e8d', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11922182a0ed737b6014928589d92945f6328167', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30145b049ef75e99a15e327ac7916c9970e63706', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aa6ac7169f855645fd824f21dafb6d0c9eb60df', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '929c19e69b081c71daeae1c4958062c1cae89a34', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73e9cdff43bb325d88937031263120eee50a0f91', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45b80160a02f1f9d072963027150d963ceaccf72', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f18fff0989c2078de98a0a8db683a0dd32a0106', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dead65d6cbbd8fee199826c92ede9d83fb271b7', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6a154b1c3af415b7dfa63cbe478f36677436169', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '075bf82de6e30df4b4a8797128e83a462d3ef635', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32105f1b82cb16d0e79d51add5969d1402cd8036', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee52ca93a647d37b17fe1fd7182a227ceccb03e5', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '115405d1c92290ed5ea7692a9cfa0f3572ee6150', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efc11fa1d4e9f19b98d90d96a76f8b892c104fa9', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea26d7ff036a7115f71c4fb2625adb887e5abc40', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dccd33da61fbcf3cbf159f1e27c73dc2df4b277', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cec85b3dd5368e2c9fa7f0144050cb91b122c525', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50acde27f01c9bba64cea07b05d1bfe7b08533a7', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9938556ca5d0347985daa519576ff424707ea3de', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0c06a3cb8acd968c7fc73db02203de0f0a81d9b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5cac73fdf16e359fce516ac927dbb3dbae434f6', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '419eb12f2ff08d9933d8c92c72d533f2bef50adb', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '470bdf9213b4af93c90ba3da04226f4967ead927', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81804f5d9ea3185461dd9de361058955fc43cbb0', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdd972592d501627aebd60c89ccf4b1401931677', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dda4f43523a05eeff69503d9423f1b1c7841ac11', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b223c38fed747901b5fad13f341452f92787242f', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17d0a250f290586d2feda05f673ef87f1c3a51db', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '951b05d3d25ee82330fa76c616b9e6bad70525e6', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '218ea44b4de3d87ab245de24fd33cf664572be94', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f278dfdaf207dac22a8a0f13fd8d71bc97e284d', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a22f2a04ac5ba726b4e8070f643cdc8ea7979fd', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3010cf6a166b293db07fadaff73dfad7f72fa004', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e564e377263da806e58633067768c4767256973', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '208e77fa733d225a8f3d1a7109643dfb6e395c3a', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ac17ea5ac396665f97dd2cdb0c590cdbc1bb972', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98b6b68cae694996c8bfad1e0622e5e6a006928c', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '673697b02b06a19174cbd6dae91c0773352d6533', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c4335e2e6e4a3c0c57041ef74567258abb748ea', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c47960f2154fa97d1255c59cb4c70805587ab53e', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8fbbd155b8fc0e4ebf4e313fd71f67f7bbe4587', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6506b2bf3a1538b045251e53d3426e21bf8cab49', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9d024c788462c08c213b391aec8f3dbf1f788b4', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12bd4565526066427a68a3c8f4a710097404789c', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aec5b83fccdaaa37241fc1cea39d1b15654b67b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b7bffb6a2819baef88e333370da8b671040f5d', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5a46e1a578daf82745130e081325f392cebe621', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0033d605182bad1eb272932ae587940e69c7cf6', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87c257e2b2e216b12e08e9c89d8268abc8fb49af', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85c93e58c983e8de41b91e4627010566c4fd0e4e', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aa105b940968cc76c1bc70b1b0b0f4a2e2bd26c', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4e2f90b41df873b78f68b2b9d4c61ea8f15f1ab', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ce8d57e363373d477bde969fed7a644532ca412', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c45eb72548b2a17560f3ec6b0230d57a71f859b9', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '276beeef6013c40925b89c15d238c1688fbb4448', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7ea8d282e42944391abedbad4dfa368747cd71a', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3911752c77b541c0cfd038b0e61ce655abd2885b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6796f05edf79c96cbd5de07f7502ce262616412c', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80581f9c238235133e0f160481bac4d220cb1c3d', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e14b06111e801eefe2c00fd6d4c51177e32e1069', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0931501b7837b918c417ab37d67f08230863eed', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7806a3e7ce6ef286b040e3b7ca44803e7d454b42', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a3cb3c8585368214faba6bf092a535da353fdaf', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31786364bd5f233afa375ca01d18cf43fc2ca240', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f40a69f097f16d1acd0cbde901914c736a3738a', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfacd8854f6fe4cb5fb2b7d12aadad47094d26dd', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7f9334adc036603a9331c220f1abc936a8d12ad', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92db04036c9f81bdc7beeeac3c0f7ab7c64dd8e2', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f3c14e15f845b42af33bd571d8f656df92aa57a', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01f01494267b1ba767829f45a47c7188378c9e62', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e784cc9d8e7a60fb41ad7e70470566adcaa30fd', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '981d9460c188c3bebe6f0c63830fa8cf41396a46', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dbce12d7de28d69c4ff8564e495b53157e4fb88', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df6d2ee803fefb4544b69644e1e97c56236915b5', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b4a2ff13d9b87646919453b6309546a10dbebb3', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd43ecf3a7ac5e30dc4663678935e3ce0b4969c8c', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70b940ae055304e4fcb8dbb92868e85f6b0be67e', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '764d8f7638ce3a53b738fa8585d21afdaf602348', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1472424dc64292a04342b7a4f659068fc72efce', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7a91d459daca1218286e9fec151e99df88d0a23', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
454523192,CI: add Github workflow for KinD testing and static checks,"Fixes https://github.com/linkerd/linkerd2-conformance/issues/4

Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>",True,11,https://api.github.com/repos/linkerd/linkerd2-conformance/pulls/11,https://github.com/linkerd/linkerd2-conformance/pull/11,closed,70,10,9,12,4,9,0,0,[],2020-07-21 13:56:49+00:00,2020-08-13 08:09:24+00:00,1966355.0,"22 days, 18:12:35","[{'comment_id': 458770643, 'comment_body': ""Just wondering why we can't use the default way of running tests i.e without a config file? :thinking: "", 'comment_created': datetime.datetime(2020, 7, 22, 12, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 458770952, 'comment_body': 'Good Find!', 'comment_created': datetime.datetime(2020, 7, 22, 12, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 458773111, 'comment_body': ""Wondering if we could use https://github.com/golangci/golangci-lint directly, so that we don't have to take the hassle of maintaining all these tools induvidually :thinking: \r\n"", 'comment_created': datetime.datetime(2020, 7, 22, 13, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 458778252, 'comment_body': 'For the only reason that currently we want to skip the ingress tests in the CI - because KinD does not yet support Load balancers and having an external IP. Till we find a better alternative, we need to skip ingress by explicitly mentioning it in a config.\r\nBut I think we can remove the remaining settings and simply use the defaults', 'comment_created': datetime.datetime(2020, 7, 22, 13, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 458779846, 'comment_body': 'Ah, that makes sense! I think we should directly go ahead with the action it provides - https://golangci-lint.run/usage/install/#ci-installation\r\n', 'comment_created': datetime.datetime(2020, 7, 22, 13, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 464216366, 'comment_body': 'Wondering how this would work, for the ingress test-case as there is no externalIP being created? :thinking: ', 'comment_created': datetime.datetime(2020, 8, 3, 6, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 464216929, 'comment_body': 'Can you confirm if `fmt` is not part of the `golangci-lint-action` so that we can remove this if its already there. Also can you remove the `./bin/goimports` as we are not using that anymore?', 'comment_created': datetime.datetime(2020, 8, 3, 6, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 464220756, 'comment_body': 'As discussed over Slack, we have a custom `config.yaml` for KinD, so that we can skip ingress on kind - https://github.com/linkerd/linkerd2-conformance/blob/95c1e3b0c192e5f655cc6f50436841a7c4776004/.github/config.yaml#L22  ', 'comment_created': datetime.datetime(2020, 8, 3, 6, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 464224225, 'comment_body': ""Yep! `fmt` can be enabled in the CI using a flag. I've made the required changes and cleaned up the `bin/` folder. 😄 "", 'comment_created': datetime.datetime(2020, 8, 3, 6, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}]","[{'commit_sha': '5520f0c1bda30117f7a4ebd2237bb503d5dd2006', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81bfa6be6a8a2990d5055684b904c3524e2406b5', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b4fd7c0c287ec4e15a693e9d8f8bd8a02b62513', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59e298c7b176291a17f7dfad266ee19aae05f7aa', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d1897881878c0daa50f2005e149e44912bf9e2d', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffb4c4e5ca24639d08e91ba68a63b8cf6e498779', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '998b3b7bceb97525819b0560b4fcf0c832540403', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5090d6cb1795e37e70a3a78334fdf4f0ad7f6427', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95c1e3b0c192e5f655cc6f50436841a7c4776004', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f259815f4e7022572cd2913f4db42a145805aa3', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baa6c54a9d230dbe4ba003a2cb92ece5b967c557', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcfc09465f53285351e02e8d4f30ed77102022e7', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
455082128,Ingress: Add tests for various other ingress controllers,"closes https://github.com/linkerd/linkerd2-conformance/issues/7

https://github.com/linkerd/linkerd2-conformance/pull/1 introduced tests for ingress to verify the working of ingress-nginx controller with Linkerd. This PR adds tests for the following controllers:

- [x] Traefik
- [x] Contour
- [x] Gloo
- [x] Ambassador",False,12,https://api.github.com/repos/linkerd/linkerd2-conformance/pulls/12,https://github.com/linkerd/linkerd2-conformance/pull/12,closed,2525,98,16,6,3,15,0,0,[],2020-07-22 12:18:08+00:00,2020-09-01 06:27:38+00:00,3521370.0,"40 days, 18:09:30","[{'comment_id': 464214115, 'comment_body': 'Hmm :thinking: Why not use a single sample application (could be emojivoto or a even smaller one) for all the tests, so that we have consistent experience and less manifest code?', 'comment_created': datetime.datetime(2020, 8, 3, 6, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 464215838, 'comment_body': 'I ran the tests locally on Kind, and my test failed stating \r\n```\r\n/conformance/specs/specs.go:58\r\n\r\n  /conformance/specs/specs.go:38\r\n    ingress\r\n    /conformance/specs/ingress/spec.go:81\r\n      nginx:\r\n      /conformance/specs/ingress/spec.go:89\r\n        nginx ingress controller must work with Linkerd [It]\r\n        /conformance/specs/ingress/spec.go:94\r\n\r\n        IP address is empty\r\n        Expected\r\n            <*errors.errorString | 0xc0000fc8d0>: {\r\n                s: ""IP address is empty"",\r\n            }\r\n        to be nil\r\n```\r\nas there is no controller to create external IPs.\r\n\r\n_(+1 on the verbose logs)_\r\n\r\nShould we instead use the `clusterIP` to reach out to the service and test? :thinking: but that could not work when we are running the tests directly and not through sonobuoy. So, we try for external IP and fall back to clusterIP if there isn\'t one? :thinking: \r\n\r\ncc\'ing @ihcsim to see if he has any better suggestions here.', 'comment_created': datetime.datetime(2020, 8, 3, 6, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 464217376, 'comment_body': ""Shouldn't be a problem. I just wanted to replicate the tests as they're on the [docs](https://linkerd.io/2/tasks/using-ingress/index.html)\r\nThat way I wouldn't have to deal with changing any of the ingress resource configuration as instructions the docs are known to not cause any trouble. :)"", 'comment_created': datetime.datetime(2020, 8, 3, 6, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 464219039, 'comment_body': ""Hmm, if I understand correctly, the point of ingress is to allow external traffic from the internet into the cluster. `ClusterIP` only exposes a service internally so that it is accessible only from within the cluster, which defeats the point of having ingress. We would expect users to test ingress only when they know that their cluster supports having a `LoadBalancer` with an external IP as required by Ingress. We could very well port-forward traffic to the `ClusterIP` but that's not how we want Ingress to work. WDYT?\r\n"", 'comment_created': datetime.datetime(2020, 8, 3, 6, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 464222302, 'comment_body': ""I can definitely imagine a lot of cluster env's (could be on-premise, etc) where they don't get external IPs directly. Ingress is definitely tightly coupled with having a external IP but it also very much used to have a single point of access to all services. My worry is that, we would just miss running Ingress tsts on a lot of environments because of this expectation.\r\n\r\nI will leave the decision to @ihcsim :)  "", 'comment_created': datetime.datetime(2020, 8, 3, 6, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 465981656, 'comment_body': 'Why not use `const`?', 'comment_created': datetime.datetime(2020, 8, 5, 20, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 465997228, 'comment_body': 'I agree with @Pothulapati that we should use only one sample application. If extra work and time are needed to figure out the configuration needed for gloo and contour, we can tackle them in separate PRs. That way, we can still merge this PR that covers most of the other ingress controllers.', 'comment_created': datetime.datetime(2020, 8, 5, 20, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 466017696, 'comment_body': ""Any reasons why this can't be the same as the `default` case? The only noticeable difference is that the contour YAML is annotated with `linkerd.io/inject: enabled`. The approach in the `default` case should still work if we use an un-annotated contour YAML, right? Just trying to see if we can reduce the amount of code."", 'comment_created': datetime.datetime(2020, 8, 5, 21, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 466043362, 'comment_body': 'Feels like we can remove these intermediate functions if we add the reference to the resource YAML as a field to [`testCases`](https://github.com/mayankshah1607/linkerd2-conformance/blob/1bf22153f8675a79b2dce90fbe5e565b48813533/specs/ingress/spec.go#L35-L41).\r\n\r\nI recognize that `testGloo()` and `testContour()` are different.\r\n\r\nIIUC, the only reason why `testContour()` is different is that it uses a different sample application, right? If we re-use emojivoto, then we should be able to re-use the `testIngress()` function, right?\r\n\r\n`testGloo()` seems very different from the rest in terms of setup and testing. What do you think of removing it from the `testCases` struct, and make it into its own test case?', 'comment_created': datetime.datetime(2020, 8, 5, 22, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 466050543, 'comment_body': ""Using `ClusterIP` is fine, as @Pothulapati suggested. The most important thing is that the `l5d-dst-override` header is added to all requests which go through the ingress controller, regardless of the request origin. This should work because the relevant annotation defined in the `Ingress` resource should get converted into the ingress controller's config.\r\n\r\nThe ingress-nginx e2e test uses the clusterIP of the nginx controller pod too:\r\n\r\n1. Create a HTTP client [here](https://github.com/kubernetes/ingress-nginx/blob/030c15b32194a142e7262db0e97b98ed143f845f/test/e2e/ingress/pathtype_exact.go#L67-L73)\r\n1. Set the base target URL in the client [here](https://github.com/kubernetes/ingress-nginx/blob/030c15b32194a142e7262db0e97b98ed143f845f/test/e2e/framework/framework.go#L458)\r\n1. Which is really just clusterIP of the service as seen [here](https://github.com/kubernetes/ingress-nginx/blob/030c15b32194a142e7262db0e97b98ed143f845f/test/e2e/framework/framework.go#L182-L190)\r\n"", 'comment_created': datetime.datetime(2020, 8, 5, 23, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 466052003, 'comment_body': 'Instead of making local copies of these YAML, can we just pull specific versions from their repo with `kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.34.1/deploy/static/provider/cloud/deploy.yaml`?', 'comment_created': datetime.datetime(2020, 8, 5, 23, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 466173341, 'comment_body': 'The main reason why we made local copies of the controller YAML is because some properties had to be changed - either adding another `Service` object for `LoadBalancer` or `ClusterIP` (like in the case for ambassador), changing the default port configuration of the `Service` object (like adding port 80 for ingress-nginx `ClusterIP`), adding `Namespace` object to ensure consistency and re-usability of the `testIngress` function, or even changing names of the default `Deployment` or `Namespace` objects to ensure consistency with other test cases. ', 'comment_created': datetime.datetime(2020, 8, 6, 6, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 466195884, 'comment_body': ""> Any reasons why this can't be the same as the default case\r\n\r\nIn case of `contour`, the number of replicas of the controller deployment is 2, which is different from the default case. Hence, a separate check for that :)"", 'comment_created': datetime.datetime(2020, 8, 6, 7, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 466540368, 'comment_body': ""Can't we just keep the YAML of the new objects, and pull the rest from their sources?\r\n\r\n> changing the default port configuration of the Service object (like adding port 80 for ingress-nginx ClusterIP)\r\n\r\nWhat happens if you run `kubectl apply` again to apply your deltas on top of the original YAML?"", 'comment_created': datetime.datetime(2020, 8, 6, 16, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 466981247, 'comment_body': 'Hmm, I think that should work. However, for controllers like Traefik, I cannot find a YAML hosted on the repo. Had to manually create a local copy in the repo for the tests.\r\nThe doc contains broken links - https://docs.traefik.io/v1.3/user-guide/kubernetes/', 'comment_created': datetime.datetime(2020, 8, 7, 11, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}]","[{'commit_sha': '1641e942ac47add0c24fd47796e0dde1421598f7', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bbf3fc5cefc86e17403bdfe86d5567b21d3ab1b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a93f742f656cdb2a885799752293baf20e9f6e6', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a80bbec7ac30bc41724f7093f6d21f42e01327ea', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0c5d8cb666bf7c57d5aa335fdb0a73b46b76579', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bf22153f8675a79b2dce90fbe5e565b48813533', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
458405105,tap: Add new test suite for `tap` command,"This PR adds the following tests for `tap` command:

- `tap` can tap deployment
- `tap` can use context namespace
- `tap` can tap pod
- `tap` errors on disabled deployment
- `tap` can tap service calls
- `tap` can filter using method
- `tap` can filter using authority

`tap` test can be muted by setting `testCase.tap.skip` to `true`. By setting `testCase.tap.clean` to `true`, the tests shall delete the sample application created for testing.",True,16,https://api.github.com/repos/linkerd/linkerd2-conformance/pulls/16,https://github.com/linkerd/linkerd2-conformance/pull/16,closed,474,1,8,8,4,0,0,0,[],2020-07-29 12:25:30+00:00,2020-08-25 11:53:16+00:00,2330866.0,"26 days, 23:27:46",[],"[{'commit_sha': 'dbbbae8982cfbff4979082fe068d12c8d59e7037', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdad850ae2ec7c235e1dbf79bb26810302a17365', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec95e6d5ea51f05c2792ce153e95118bfe06387a', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74c7ce2ae57099736537adf48a0bd93d87d9c0ab', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '951d35d9a75118cd9bd298075a97d3e8ec543ef7', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '082df1f201a7a2a50ed81c2f7952121d6a0fa531', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7067574bdc32f8c76cc540e3ea198ddba994cb0c', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96e6d105655e33d7cbf36c6f981813f2e2b7c232', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
461150413,stat: Add new test suite for `stat` command,"This PR adds tests for `linkerd stat` by testing against emojivoto:
- `linkerd stat deploy -n emojivoto`
- `linkerd stat deploy -n emojivoto --to deploy/emoji`
- `linkerd stat deploy -n emojivoto --from deploy/web`
-  `linkerd stat deploy -n emojivoto --to svc/emoji-svc`
- `linkerd stat deploy -n emojivoto --to svc/voting-svc`
- `linkerd stat deploy -n emojivoto --to svc/web-svc`
- `linkerd stat ns emojivoto`

To do:
- [ ] Add config for `stat`
- [ ] Finish wiring up with `specs/spec.go`

Waiting on https://github.com/linkerd/linkerd2-conformance/pull/16 and https://github.com/linkerd/linkerd2-conformance/pull/12 to get merged, followed by a refactor that may cause multiple merge conflicts.

Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>",True,17,https://api.github.com/repos/linkerd/linkerd2-conformance/pulls/17,https://github.com/linkerd/linkerd2-conformance/pull/17,closed,206,0,5,4,0,0,0,0,[],2020-08-01 14:19:14+00:00,2020-08-26 06:02:07+00:00,2130173.0,"24 days, 15:42:53",[],"[{'commit_sha': 'c367fda794383c4b5612fdceb598742c1c74ad8c', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3d7929ea497e96f3ae21433d99a9fa62ec139b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1b612bdadb613c5c323197c7d6412f400e18da0', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd647512199d586f7e467648af6ef552dfcc92c4d', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
464033597,Refactor Gomega assertions,"- Create reusable helper functions in `utils` package to prevent
rewriting long Gomega assertions
- Remove  redundant `ginkgo.By` messages to keep logs clean
- Add line breaks wherever required 

Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>",False,18,https://api.github.com/repos/linkerd/linkerd2-conformance/pulls/18,https://github.com/linkerd/linkerd2-conformance/pull/18,closed,165,137,5,2,1,0,0,0,[],2020-08-06 13:38:12+00:00,2020-08-22 06:30:37+00:00,1356745.0,"15 days, 16:52:25",[],"[{'commit_sha': 'a37dd0fb92bc9002897f2896c56baa6f0167575b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50ebe43fb3faaff7b9e74ea5637b55224229d831', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
464662523,"Ingress: clean nginx, traefik and ambassador tests","A cleaner, refactored version of https://github.com/linkerd/linkerd2-conformance/pull/12

This PR includes:
- tackle traefik, nginx and ambassador ingress controllers, as gloo and contour have a slightly different testing process (which will be tackled in a separate PR).
- use controller YAML URL instead of storing it locally
- port-forward on the ingress controller pod instead of relying on external IP
- make test structure a lot simpler

I did not directly make changes to https://github.com/linkerd/linkerd2-conformance/pull/12 so that gloo and contour tests are not lost because of the refactoring process. 


Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>",True,19,https://api.github.com/repos/linkerd/linkerd2-conformance/pulls/19,https://github.com/linkerd/linkerd2-conformance/pull/19,closed,374,755,11,9,2,2,0,0,[],2020-08-07 15:19:27+00:00,2020-08-25 17:01:39+00:00,1561332.0,"18 days, 1:42:12","[{'comment_id': 468834329, 'comment_body': ""Any reasons why we don't want to use the `svc` of the controller here? E.g., nginx-ingress has the `ingress-nginx-controller` service, and traefik has `traefik-ingress-controller`."", 'comment_created': datetime.datetime(2020, 8, 11, 20, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 468836598, 'comment_body': 'NIt: Consider renaming this function, because in the context of network tests, `ping` means ICMP to me. How about just `httpGet(url string)`?', 'comment_created': datetime.datetime(2020, 8, 11, 20, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}]","[{'commit_sha': '25aa6acaa64118ba944aec447e2ee3e8146a18f7', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67405c792d173374917feac7380e23d7e2f61188', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '705f049934d0490a3e57d6695734f9e56653b674', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3836bd1c0c7120f7eaab71e8826728997e8454b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3243b95fedeffd54b510d94f88d51d83589d6e25', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4839244d4b8ca9cba545962c1a3cf7f9f14a1e3', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1071f88cac48973a2f2ee5bf5cae43cd5f7ad1cb', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2b83f3aa5e6e46e34046e0a835eeaa707b4a7db', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a15dcb5620b8d0dddbfb37c9448dfd83d2118bb2', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
465009182,routes: Add tests for `routes` command,"This PR adds tests for `routes` command. The tests have been derived from the integration tests for `routes`:

- install smoke test application
- install ServiceProfiles for Linkerd control plane and the sample application
- test routes for both use cases
- uninstall all the installed resources

Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>",True,20,https://api.github.com/repos/linkerd/linkerd2-conformance/pulls/20,https://github.com/linkerd/linkerd2-conformance/pull/20,closed,294,0,8,5,0,0,0,0,[],2020-08-08 09:21:32+00:00,2020-09-01 17:59:04+00:00,2104652.0,"24 days, 8:37:32",[],"[{'commit_sha': '58b4af0757e106376a70de0b17d7c7de108d1cd7', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc6c995c960ba8cc643d34ebd5ea501718b39d7f', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07838baaeacfbbb9a1d40960a883a53a7f8f2e0b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56c0f02dc6484f9e44c68292877775a3820ccd6e', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afc59e8324a4275fc1ee4871e013baad8436dc17', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
471947455,Change timeout to 30m,"Update CI linter timeout to `30m`

Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>",True,21,https://api.github.com/repos/linkerd/linkerd2-conformance/pulls/21,https://github.com/linkerd/linkerd2-conformance/pull/21,closed,1,1,1,1,0,0,0,0,[],2020-08-22 06:38:54+00:00,2020-08-24 13:27:18+00:00,197304.0,"2 days, 6:48:24",[],"[{'commit_sha': '3419150a65ce688ad1b61bca6344b86b14f1946b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
471975069,edges: Add new test suite for `linkerd edges`,"This PR adds a new test suite for `linkerd edges`

",True,22,https://api.github.com/repos/linkerd/linkerd2-conformance/pulls/22,https://github.com/linkerd/linkerd2-conformance/pull/22,closed,249,0,8,9,1,0,0,0,[],2020-08-22 11:21:26+00:00,2020-09-01 17:58:24+00:00,887818.0,"10 days, 6:36:58",[],"[{'commit_sha': '098d6c48b9f558f5a84d765b53ebf3cf19a74a2a', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a875acb47b7fa36b49c1e5ae15c72ab0c58b5150', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '895c87629524fab92ecf917424be33e0435855b3', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28d3cddb289a270ac205073fac75e4f157a55ef6', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b3367be70b5afac010193504ebddb9d5a88e887', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c625b8f0f694288d513fb92f258a0ae8e2a0e7e', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd90d6390539d9e76c9358098afd313a674455d97', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '304fbb5d9af38576041d96dbdef351c54ea8145b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3984e2fc7b4f626d6bd30add8b59b2f6992cdff9', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
473011364,Omit flaky `linkerd inject --manual` output validation,"This PR temporarily mutes the text validation part of `linkerd inject --manual` test case. This has to be done because currently manual injection is tested by validating the text output against a predefined `.golden` file that holds the expected output. This approach may often fail because `linkerd inject --manual` may have a different text output depending on the version of Linkerd used (mentioned in the `config.yaml`; by default its the latest edge). Until we figure out a better way to validate the output, this part of the test case needs to be omitted to prevent flakiness.

Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>",True,23,https://api.github.com/repos/linkerd/linkerd2-conformance/pulls/23,https://github.com/linkerd/linkerd2-conformance/pull/23,closed,13,8,1,1,0,0,0,0,[],2020-08-25 07:48:30+00:00,2020-08-25 11:05:56+00:00,11846.0,3:17:26,[],"[{'commit_sha': 'd263ad1cce95df4073d439029ab775dac1c41ab1', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
475916920,"Add tests for ServiceProfiles,  routes and retries","This PR adds a new test suite for checking the functionality of ServiceProfiles, Routes and retries

- Verify if Booksapp deployments are injected and in `Running`
- Install ServiceProfiles
- Verify the routes for each edge between upstream and downstream connection
- Enable retries and verify if `Effective Success` is above 95%

Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>",False,25,https://api.github.com/repos/linkerd/linkerd2-conformance/pulls/25,https://github.com/linkerd/linkerd2-conformance/pull/25,closed,598,12,11,4,0,0,0,0,[],2020-08-30 14:15:29+00:00,2023-06-20 11:00:42+00:00,88461913.0,"1023 days, 20:45:13",[],"[{'commit_sha': '78705ea0ce4de208688ff932457020e17a9f2da8', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f76c836720f8c1946b70800e129a150f1832c39', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8808350758297bd90332b7f9e2c5c4fde1e3557', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3176c377f1ba27b142e11a39b20293c4a1da9694', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
477650636,Clean up lifecycle and inject tests,"This PR cleans up the code for lifecycle and inject tests 

- Add line breaks where lines get too long
- Remove unnecessary `ginkgo.By` log messages

Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>",False,26,https://api.github.com/repos/linkerd/linkerd2-conformance/pulls/26,https://github.com/linkerd/linkerd2-conformance/pull/26,closed,85,74,3,2,0,0,0,0,[],2020-09-02 08:12:37+00:00,2023-06-20 11:00:47+00:00,88224490.0,"1021 days, 2:48:10",[],"[{'commit_sha': 'a59b93d4b8f4950b2a880c69bacdfc8a740b911d', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66670ff70bf00ab785dbd9e5042884895c35685f', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
414643414,Update `inject` to throw an error while injecting non-compliant pods,"Fixes https://github.com/linkerd/linkerd2/issues/4214

This PR updates the way `inject` behaves while attempting to inject non-compliant pods, i.e, pods that have issues related to host network, UDP port, sidecars and `automountServiceAccountToken`

Now instead of displaying warning messages and writing an uninjected YAML to `stdout`, `inject` throws an error. For example :
```bash
$ cat cli/cmd/testdata/inject_emojivoto_deployment_hostNetwork_true.input.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: emojivoto
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-svc
  template:
    metadata:
      labels:
        app: web-svc
    spec:
      containers:
      - env:
        - name: WEB_PORT
          value: ""80""
        - name: EMOJISVC_HOST
          value: emoji-svc.emojivoto:8080
        - name: VOTINGSVC_HOST
          value: voting-svc.emojivoto:8080
        - name: INDEX_BUNDLE
          value: dist/index_bundle.js
        image: buoyantio/emojivoto-web:v3
        name: web-svc
        ports:
        - containerPort: 9100
          hostPort: 9100
          name: http
      hostNetwork: true
---
$ cat cli/cmd/testdata/inject_emojivoto_deployment_hostNetwork_true.input.yml | bin/go-run cli inject -

Error transforming resources: failed to inject deployment/web - pods use host networking
```",True,4346,https://api.github.com/repos/linkerd/linkerd2/pulls/4346,https://github.com/linkerd/linkerd2/pull/4346,closed,128,64,41,26,10,14,0,1,[],2020-05-07 12:06:26+00:00,2020-06-24 19:07:06+00:00,4172440.0,"48 days, 7:00:40","[{'comment_id': 433469483, 'comment_body': 'I think this can be simplified by just returning `error`; nil if not, `error` if yes', 'comment_created': datetime.datetime(2020, 6, 1, 20, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 433471594, 'comment_body': 'You might wanna reuse the strings from `report.go` (the `Reasons` map).', 'comment_created': datetime.datetime(2020, 6, 1, 20, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 433475535, 'comment_body': 'Given this slice is filled with calls to `err.Error()`, I think it makes more sense to return a slice of `error`.', 'comment_created': datetime.datetime(2020, 6, 1, 20, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 433484899, 'comment_body': 'Even better, a `[]error` would be cooler in order to accumulate all the errors from a single pod instead of short-circuiting on the first :wink: ', 'comment_created': datetime.datetime(2020, 6, 1, 20, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 433636949, 'comment_body': ""@alpeb That would indeed make the code cleaner! However, we're using the returned slice of string error message [here](https://github.com/linkerd/linkerd2/blob/fe71f52c63786c85a4456de17633fd09f47cf6f2/cli/cmd/inject_util.go#L35) to concatenate the error strings and throw that as an error message.\r\nIf we were to return a slice of errors instead, we might need another helper function that first converts the slice of `error`s to slice of `string`s and then use it in `strings.Join` to produce a final error message. WDYT? :)"", 'comment_created': datetime.datetime(2020, 6, 2, 5, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 436162165, 'comment_body': 'Ok how about giving a try at using wrapped errors?\r\nhttps://play.golang.org/p/nqNrM8qOvST\r\nYou could have `processYAML()` return just `error`, which would really be wrapped errors, which would not need to be joined on the calling side. I *think* this might result in a more go-ish and elegant way!', 'comment_created': datetime.datetime(2020, 6, 5, 21, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 436251250, 'comment_body': ""We don't use `err != nil` here because `throwInjectError` initialises a non-nil error (an empty string) for the sake of accumulation of error messages."", 'comment_created': datetime.datetime(2020, 6, 6, 8, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 442493265, 'comment_body': ""Given this function is all about `inject.Report`, I think it's better to move it into `report.go` and make it a method of that struct. That will also avoid having to repeat these consts."", 'comment_created': datetime.datetime(2020, 6, 18, 20, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 442647552, 'comment_body': ""@alpeb Done! You can find that refactor in [this](https://github.com/linkerd/linkerd2/pull/4346/commits/69ac7fc0b0cdd6ed2688a8ac343d03ce6f23a3f2) commit. (Had to rebase against master because some of the CI integration tests didn't seem to run)"", 'comment_created': datetime.datetime(2020, 6, 19, 6, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 443818308, 'comment_body': 'is the extra white space before the `:` intended? I think we should remove it to make it consistent with other CLI output. Currently, the output looks like this:\r\n```\r\nError transforming resources:\r\nfailed to inject deployment/emoji :\r\nautomountServiceAccountToken set to ""false""\r\n```\r\n\r\nAlso, consider outputting the reason on the same line as the error prefix. E.g,\r\n```\r\nfailed to inject deployment/emoji: automountServiceAccountToken set to ""false""\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 20, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 443831419, 'comment_body': ""For my own understanding, `output` writes to `stderr`, right? But I can't seem to get the CLI to output this error. What am I missing?"", 'comment_created': datetime.datetime(2020, 6, 22, 21, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 444017015, 'comment_body': 'Ah, I think this might be redundant. The CLI will error out before this part of the code is executed.', 'comment_created': datetime.datetime(2020, 6, 23, 7, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 444339629, 'comment_body': ""Let's remove it then. Thanks."", 'comment_created': datetime.datetime(2020, 6, 23, 16, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 444676119, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2020, 6, 24, 6, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}]","[{'commit_sha': 'd718bb608e12fe7ce9cf4cab41b499a28c18c7f6', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c384c67c826a6b9da813d4293c38a5db00708632', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f29a483beb6907e86992d421b1603cf2221b1724', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc40c08247ebced9e56d2fa3a62bf83f6e7b8e50', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77340f2734019b0f019f8e814f5dac93bcb49157', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6304fbd1d4b55fc0287e930e557b177e3527fd96', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d644131ad3023267b02e4f5588aee70fe50572a', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '890747f21f9671eb54545f89487a07ccba45b2f0', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ec927a76a2889c20cf246c1f775bd859b47638c', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e01a0ea333b25481bbe5ad3fd62e5d2f24329c72', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0adea183025c7f7e9dd6bf7d91804f7812b8e435', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f061a033fbb487365510e48a39acaaed3f96ca99', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '696263b55378f35935cc60346a64fbb4986c0d46', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8643d547428c3aacdd4d96326d907b5ab8b6bae', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b015a4424a7383b4cc610016e59a416deedbe44', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '023b9a190a7e9aca4aba8522eaf4c5dacd9bef2b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69ac7fc0b0cdd6ed2688a8ac343d03ce6f23a3f2', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45ff1a741c39e88cf6e0be812428a1a84aaca56c', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38f5f59532500ae037b8245e4ff3bc11b22875ef', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38ae23dea8ec32c1e1600795a7ac5819a5f66197', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cbe2c80b1b0ecf6efd5f5371d9816d50c95cb48', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeb305cffa914d3b7f8ab7e04ccdf23a895c7a95', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50f741197156922cb86a37fa0b7d793d3251367d', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '254ccd7bbb9219066f9cb2ee119852847cc9b1a4', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91149fb6f1306b6087f8d34eca6b9b2954bfad6b', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e38fa35a29ea069665079514ba74088958508af', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
424891421,multicluster: normalize nginx configmap naming,"Fixes https://github.com/linkerd/linkerd2/issues/4505

Signed-off-by: Mayank Shah <mayankshah1614@gmail.com>",True,4508,https://api.github.com/repos/linkerd/linkerd2/pulls/4508,https://github.com/linkerd/linkerd2/pull/4508,closed,2,2,1,1,0,0,0,0,[],2020-05-29 05:20:05+00:00,2020-06-01 19:55:54+00:00,311749.0,"3 days, 14:35:49",[],"[{'commit_sha': '700c478313b30640409299b1cca5822cdc795d2e', 'committer_username': 'mayankshah1607', 'committer_name': 'Mayank Shah', 'committer_email': 'mayankshah1614@gmail.com', 'commit_date': datetime.datetime(2017, 7, 20, 13, 17, 35, tzinfo=datetime.timezone.utc)}]",Mayank Shah,30319228,mayankshah1614@gmail.com,User,,93,,22,129
448654244,Handle incompatible automount token setting in service account YAML (#4651),"Handle incompatible automount token setting in service account YAML (#4651)

Following #4145 the `inject` command will return an error with pods YAML that has the `automountServiceAccountToken` property set to `false`. The same validation should be applied to service accounts YAML. E.g., `linkerd inject` should return an error with the following YAML:

 ```
 kind: ServiceAccount
 apiVersion: v1
 metadata:
   name: emoji
     namespace: emojivoto
     automountServiceAccountToken: false
```

Now instead of skipping service account YAML, `inject` throws an error when `automountServiceAccountToken` is `false`. Using the YAML above:

```
$ cat cli/cmd/testdata/inject_emojivoto_serviceAccount_automountServiceAccountToken_false.input.yml
Error transforming resources: failed to inject
serviceaccount/emoji: automountServiceAccountToken set to ""false""
```

Fixes #4651",False,4757,https://api.github.com/repos/linkerd/linkerd2/pulls/4757,https://github.com/linkerd/linkerd2/pull/4757,closed,0,0,0,0,8,0,0,1,[],2020-07-14 05:30:21+00:00,2020-07-22 20:42:05+00:00,745904.0,"8 days, 15:11:44",[],[],,6857977,,User,,64,,83,39
415849621,Detect windows nodes and skip injection of proxies,"Add a function to detect windows nodes and skip deploying proxies on them

begins implementation to fix #2882 

I have tried to find a solution to this issue but since this is my first time contributing to linkerd as well as my first contribution in golang, I was anxious to get some feedback before I went any further. I am not sure this is the solution you were looking for ... Please forgive me for the mistakes I have probably made and provide as much criticism as you feel necessary :)  
I shall try and implement the suggestions and come up with a final pull request. 

**Implementation**
A field added to the report given to the inject function, indicating when the node has a windows image, and that it should skip the injection of proxy.

The function checks for a windows node image or checks for applied taints with the field 'os'. If neither is found it concludes there are no windows node images. 

Both these are optional fields though, so I think it would be helpful to add this to the documentation if this proposed solution is adopted :)

*TO-DO*
- add documentation on taints
- provide a more elegant warning 

Signed-off-by: Vani Singh <vanisingh@live.co.uk>",False,4368,https://api.github.com/repos/linkerd/linkerd2/pulls/4368,https://github.com/linkerd/linkerd2/pull/4368,closed,1036,2,35,5,4,11,0,1,[],2020-05-11 03:45:53+00:00,2020-06-15 21:23:44+00:00,3087471.0,"35 days, 17:37:51","[{'comment_id': 423206779, 'comment_body': '`unsupportedOS = ""pods cannot run on windows""` ', 'comment_created': datetime.datetime(2020, 5, 11, 17, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'grampelberg', 'type': 'User'}, {'comment_id': 423208585, 'comment_body': '`Windows is currently unsupported`', 'comment_created': datetime.datetime(2020, 5, 11, 17, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'grampelberg', 'type': 'User'}, {'comment_id': 423608191, 'comment_body': ""Any reason why you've made this field public?"", 'comment_created': datetime.datetime(2020, 5, 12, 9, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 423609929, 'comment_body': 'honestly, no. Do you suggest I should leave it out? ', 'comment_created': datetime.datetime(2020, 5, 12, 9, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vaniisgh', 'type': 'User'}, {'comment_id': 423613172, 'comment_body': ""I think you might want to leave it as `unsupportedOS`. I don't see why that field should be exported."", 'comment_created': datetime.datetime(2020, 5, 12, 9, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 423614187, 'comment_body': 'There\'s a linting error here. You may wanna leave this as \r\n```go\r\nif strings.Contains(strings.ToLower(osimage),""windows"") {\r\n```', 'comment_created': datetime.datetime(2020, 5, 12, 10, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 423615647, 'comment_body': '@vaniisgh You might also have fix the [formatting](https://github.com/linkerd/linkerd2/blob/master/BUILD.md#formatting) here and in a few other places so that the CI checks pass :)', 'comment_created': datetime.datetime(2020, 5, 12, 10, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mayankshah1607', 'type': 'User'}, {'comment_id': 423616760, 'comment_body': 'ya, I saw that :( . for some reason, my editor seems to show them differently! fixing that.  ', 'comment_created': datetime.datetime(2020, 5, 12, 10, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vaniisgh', 'type': 'User'}, {'comment_id': 427160816, 'comment_body': 'From what I have been reading [here](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/), Looks like they allow you to get repelled from specific nodes from being scheduled? Did I understand something wrong? \r\n\r\n', 'comment_created': datetime.datetime(2020, 5, 19, 9, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 427161917, 'comment_body': 'Can we rename this to something like `IsWindowsNode()`, as we are returning a bool, but not the name?\r\nSame goes for field in `report` ', 'comment_created': datetime.datetime(2020, 5, 19, 9, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Pothulapati', 'type': 'User'}, {'comment_id': 427163183, 'comment_body': ""no, you're right. I need to set this to look for taints may be, and set a tolerant... or something of that sort. "", 'comment_created': datetime.datetime(2020, 5, 19, 9, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vaniisgh', 'type': 'User'}]","[{'commit_sha': '299c483c6f6a602f90a8a36f9fa6338a33560947', 'committer_username': 'vaniisgh', 'committer_name': None, 'committer_email': 'vanisingh@live.co.uk', 'commit_date': datetime.datetime(2015, 8, 21, 15, 10, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11462a97e740e8e88d899f179ff519133ecbc628', 'committer_username': 'vaniisgh', 'committer_name': None, 'committer_email': 'vanisingh@live.co.uk', 'commit_date': datetime.datetime(2015, 8, 21, 15, 10, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c87837cc8bfc4395c38b5b16881ad4a703efe22a', 'committer_username': 'vaniisgh', 'committer_name': None, 'committer_email': 'vanisingh@live.co.uk', 'commit_date': datetime.datetime(2015, 8, 21, 15, 10, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b9644d25acb1f46fe439f5ddeb934324b70d2f1', 'committer_username': 'vaniisgh', 'committer_name': None, 'committer_email': 'vanisingh@live.co.uk', 'commit_date': datetime.datetime(2015, 8, 21, 15, 10, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f562f050953a43920cacb3ffec5d30f8b543d3cc', 'committer_username': 'vaniisgh', 'committer_name': None, 'committer_email': 'vanisingh@live.co.uk', 'commit_date': datetime.datetime(2015, 8, 21, 15, 10, 32, tzinfo=datetime.timezone.utc)}]",,13905608,vanisingh@live.co.uk,User,,66,,110,39

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
113106184,linkerd2,linkerd/linkerd2,Go,1269,10545,194,365,7085,217,173,8,"[{'id': 571793567, 'number': 5721, 'closed': datetime.datetime(2021, 3, 3, 20, 37, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 11, 12, 47, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1756197.0, 'time_delta': '20 days, 7:49:57', 'additions': 292, 'deletions': 6, 'state': 'closed'}, {'id': 568133419, 'number': 5671, 'closed': datetime.datetime(2021, 2, 11, 15, 1, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 5, 6, 41, 32, tzinfo=datetime.timezone.utc), 'time_taken': 548422.0, 'time_delta': '6 days, 8:20:22', 'additions': 41, 'deletions': 112, 'state': 'closed'}, {'id': 472472517, 'number': 4907, 'closed': datetime.datetime(2020, 9, 1, 6, 26, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 12, 8, 21, tzinfo=datetime.timezone.utc), 'time_taken': 670715.0, 'time_delta': '7 days, 18:18:35', 'additions': 79, 'deletions': 61, 'state': 'closed'}, {'id': 457240433, 'number': 4800, 'closed': datetime.datetime(2020, 7, 28, 20, 12, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 15, 33, 25, tzinfo=datetime.timezone.utc), 'time_taken': 103141.0, 'time_delta': '1 day, 4:39:01', 'additions': 133, 'deletions': 125, 'state': 'closed'}, {'id': 447902429, 'number': 4752, 'closed': datetime.datetime(2020, 7, 21, 4, 4, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 12, 13, 46, 37, tzinfo=datetime.timezone.utc), 'time_taken': 742696.0, 'time_delta': '8 days, 14:18:16', 'additions': 13, 'deletions': 11, 'state': 'closed'}, {'id': 440904580, 'number': 4681, 'closed': datetime.datetime(2020, 6, 29, 21, 29, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 27, 12, 30, 21, tzinfo=datetime.timezone.utc), 'time_taken': 205161.0, 'time_delta': '2 days, 8:59:21', 'additions': 57, 'deletions': 49, 'state': 'closed'}, {'id': 437512049, 'number': 4644, 'closed': datetime.datetime(2020, 6, 22, 17, 45, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 21, 8, 4, 19, tzinfo=datetime.timezone.utc), 'time_taken': 121294.0, 'time_delta': '1 day, 9:41:34', 'additions': 105, 'deletions': 97, 'state': 'closed'}, {'id': 433647272, 'number': 4591, 'closed': datetime.datetime(2020, 6, 18, 11, 23, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 12, 18, 51, tzinfo=datetime.timezone.utc), 'time_taken': 515077.0, 'time_delta': '5 days, 23:04:37', 'additions': 9, 'deletions': 3, 'state': 'closed'}, {'id': 426521062, 'number': 4532, 'closed': datetime.datetime(2020, 6, 12, 5, 15, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 11, 22, 33, tzinfo=datetime.timezone.utc), 'time_taken': 841990.0, 'time_delta': '9 days, 17:53:10', 'additions': 33, 'deletions': 0, 'state': 'closed'}, {'id': 424891421, 'number': 4508, 'closed': datetime.datetime(2020, 6, 1, 19, 55, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 29, 5, 20, 5, tzinfo=datetime.timezone.utc), 'time_taken': 311749.0, 'time_delta': '3 days, 14:35:49', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 414643414, 'number': 4346, 'closed': datetime.datetime(2020, 6, 24, 19, 7, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 7, 12, 6, 26, tzinfo=datetime.timezone.utc), 'time_taken': 4172440.0, 'time_delta': '48 days, 7:00:40', 'additions': 128, 'deletions': 64, 'state': 'closed'}, {'id': 398639016, 'number': 4235, 'closed': datetime.datetime(2020, 5, 7, 12, 8, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 4, 16, 52, 19, tzinfo=datetime.timezone.utc), 'time_taken': 2834171.0, 'time_delta': '32 days, 19:16:11', 'additions': 138, 'deletions': 14, 'state': 'closed'}, {'id': 384899186, 'number': 4145, 'closed': datetime.datetime(2020, 4, 1, 14, 39, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 6, 16, 4, 29, tzinfo=datetime.timezone.utc), 'time_taken': 2241321.0, 'time_delta': '25 days, 22:35:21', 'additions': 83, 'deletions': 35, 'state': 'closed'}, {'id': 381368345, 'number': 4120, 'closed': datetime.datetime(2020, 3, 20, 15, 45, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 28, 12, 34, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1825817.0, 'time_delta': '21 days, 3:10:17', 'additions': 136, 'deletions': 81, 'state': 'closed'}, {'id': 373580331, 'number': 4040, 'closed': datetime.datetime(2020, 2, 17, 18, 40, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 11, 10, 31, 44, tzinfo=datetime.timezone.utc), 'time_taken': 547704.0, 'time_delta': '6 days, 8:08:24', 'additions': 87, 'deletions': 51, 'state': 'closed'}, {'id': 370440525, 'number': 4007, 'closed': datetime.datetime(2020, 2, 20, 5, 44, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 3, 17, 43, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1425679.0, 'time_delta': '16 days, 12:01:19', 'additions': 3, 'deletions': 8, 'state': 'closed'}, {'id': 368481052, 'number': 3990, 'closed': datetime.datetime(2020, 2, 13, 9, 21, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 29, 10, 30, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1291899.0, 'time_delta': '14 days, 22:51:39', 'additions': 103, 'deletions': 10, 'state': 'closed'}, {'id': 367350808, 'number': 3975, 'closed': datetime.datetime(2020, 1, 28, 7, 41, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 27, 7, 37, 9, tzinfo=datetime.timezone.utc), 'time_taken': 86651.0, 'time_delta': '1 day, 0:04:11', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 364554152, 'number': 3952, 'closed': datetime.datetime(2020, 1, 22, 14, 38, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 19, 16, 47, 28, tzinfo=datetime.timezone.utc), 'time_taken': 251464.0, 'time_delta': '2 days, 21:51:04', 'additions': 28, 'deletions': 21, 'state': 'closed'}, {'id': 364084537, 'number': 3942, 'closed': datetime.datetime(2020, 2, 7, 17, 7, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 17, 10, 56, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1836638.0, 'time_delta': '21 days, 6:10:38', 'additions': 163, 'deletions': 0, 'state': 'closed'}, {'id': 363544096, 'number': 3933, 'closed': datetime.datetime(2020, 1, 21, 17, 48, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 16, 9, 33, 42, tzinfo=datetime.timezone.utc), 'time_taken': 461668.0, 'time_delta': '5 days, 8:14:28', 'additions': 5, 'deletions': 7, 'state': 'closed'}, {'id': 361292029, 'number': 3909, 'closed': datetime.datetime(2020, 1, 10, 21, 33, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 10, 6, 10, 57, tzinfo=datetime.timezone.utc), 'time_taken': 55352.0, 'time_delta': '15:22:32', 'additions': 33, 'deletions': 12, 'state': 'closed'}, {'id': 359315160, 'number': 3886, 'closed': datetime.datetime(2020, 1, 13, 18, 2, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 5, 16, 16, 37, tzinfo=datetime.timezone.utc), 'time_taken': 697549.0, 'time_delta': '8 days, 1:45:49', 'additions': 34, 'deletions': 295, 'state': 'closed'}, {'id': 356795502, 'number': 3868, 'closed': datetime.datetime(2020, 1, 10, 21, 20, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 25, 12, 10, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1415379.0, 'time_delta': '16 days, 9:09:39', 'additions': 164, 'deletions': 1, 'state': 'closed'}, {'id': 356784734, 'number': 3867, 'closed': datetime.datetime(2019, 12, 25, 12, 9, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 25, 10, 39, 22, tzinfo=datetime.timezone.utc), 'time_taken': 5416.0, 'time_delta': '1:30:16', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 335846382, 'number': 3668, 'closed': datetime.datetime(2019, 11, 5, 6, 21, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 2, 14, 27, 5, tzinfo=datetime.timezone.utc), 'time_taken': 230083.0, 'time_delta': '2 days, 15:54:43', 'additions': 27, 'deletions': 1, 'state': 'closed'}, {'id': 330363489, 'number': 3607, 'closed': datetime.datetime(2019, 10, 30, 15, 18, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 21, 11, 48, 6, tzinfo=datetime.timezone.utc), 'time_taken': 790196.0, 'time_delta': '9 days, 3:29:56', 'additions': 160, 'deletions': 30, 'state': 'closed'}, {'id': 326097761, 'number': 3549, 'closed': datetime.datetime(2019, 10, 21, 11, 58, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 9, 6, 53, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1055118.0, 'time_delta': '12 days, 5:05:18', 'additions': 195, 'deletions': 42, 'state': 'closed'}, {'id': 321559119, 'number': 3482, 'closed': datetime.datetime(2019, 10, 9, 7, 0, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 9, 26, 6, 29, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1125059.0, 'time_delta': '13 days, 0:30:59', 'additions': 215, 'deletions': 52, 'state': 'closed'}]"
267353400,linkerd2-conformance,linkerd/linkerd2-conformance,Go,2,1,8,2,10,4,2,0,"[{'id': 477650636, 'number': 26, 'closed': datetime.datetime(2023, 6, 20, 11, 0, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 2, 8, 12, 37, tzinfo=datetime.timezone.utc), 'time_taken': 88224490.0, 'time_delta': '1021 days, 2:48:10', 'additions': 85, 'deletions': 74, 'state': 'closed'}, {'id': 475916920, 'number': 25, 'closed': datetime.datetime(2023, 6, 20, 11, 0, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 30, 14, 15, 29, tzinfo=datetime.timezone.utc), 'time_taken': 88461913.0, 'time_delta': '1023 days, 20:45:13', 'additions': 598, 'deletions': 12, 'state': 'closed'}, {'id': 473011364, 'number': 23, 'closed': datetime.datetime(2020, 8, 25, 11, 5, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 7, 48, 30, tzinfo=datetime.timezone.utc), 'time_taken': 11846.0, 'time_delta': '3:17:26', 'additions': 13, 'deletions': 8, 'state': 'closed'}, {'id': 471975069, 'number': 22, 'closed': datetime.datetime(2020, 9, 1, 17, 58, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 22, 11, 21, 26, tzinfo=datetime.timezone.utc), 'time_taken': 887818.0, 'time_delta': '10 days, 6:36:58', 'additions': 249, 'deletions': 0, 'state': 'closed'}, {'id': 471947455, 'number': 21, 'closed': datetime.datetime(2020, 8, 24, 13, 27, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 22, 6, 38, 54, tzinfo=datetime.timezone.utc), 'time_taken': 197304.0, 'time_delta': '2 days, 6:48:24', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 465009182, 'number': 20, 'closed': datetime.datetime(2020, 9, 1, 17, 59, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 8, 9, 21, 32, tzinfo=datetime.timezone.utc), 'time_taken': 2104652.0, 'time_delta': '24 days, 8:37:32', 'additions': 294, 'deletions': 0, 'state': 'closed'}, {'id': 464662523, 'number': 19, 'closed': datetime.datetime(2020, 8, 25, 17, 1, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 15, 19, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1561332.0, 'time_delta': '18 days, 1:42:12', 'additions': 374, 'deletions': 755, 'state': 'closed'}, {'id': 464033597, 'number': 18, 'closed': datetime.datetime(2020, 8, 22, 6, 30, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 13, 38, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1356745.0, 'time_delta': '15 days, 16:52:25', 'additions': 165, 'deletions': 137, 'state': 'closed'}, {'id': 461150413, 'number': 17, 'closed': datetime.datetime(2020, 8, 26, 6, 2, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 1, 14, 19, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2130173.0, 'time_delta': '24 days, 15:42:53', 'additions': 206, 'deletions': 0, 'state': 'closed'}, {'id': 458405105, 'number': 16, 'closed': datetime.datetime(2020, 8, 25, 11, 53, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 12, 25, 30, tzinfo=datetime.timezone.utc), 'time_taken': 2330866.0, 'time_delta': '26 days, 23:27:46', 'additions': 474, 'deletions': 1, 'state': 'closed'}, {'id': 455082128, 'number': 12, 'closed': datetime.datetime(2020, 9, 1, 6, 27, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 12, 18, 8, tzinfo=datetime.timezone.utc), 'time_taken': 3521370.0, 'time_delta': '40 days, 18:09:30', 'additions': 2525, 'deletions': 98, 'state': 'closed'}, {'id': 454523192, 'number': 11, 'closed': datetime.datetime(2020, 8, 13, 8, 9, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 13, 56, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1966355.0, 'time_delta': '22 days, 18:12:35', 'additions': 70, 'deletions': 10, 'state': 'closed'}, {'id': 454346930, 'number': 10, 'closed': datetime.datetime(2020, 7, 21, 10, 15, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 10, 9, 33, tzinfo=datetime.timezone.utc), 'time_taken': 364.0, 'time_delta': '0:06:04', 'additions': 3765, 'deletions': 2, 'state': 'closed'}, {'id': 449378295, 'number': 9, 'closed': datetime.datetime(2020, 7, 21, 11, 46, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 10, 2, 6, tzinfo=datetime.timezone.utc), 'time_taken': 524658.0, 'time_delta': '6 days, 1:44:18', 'additions': 12, 'deletions': 0, 'state': 'closed'}, {'id': 425495273, 'number': 1, 'closed': datetime.datetime(2020, 7, 21, 9, 13, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 30, 17, 7, 25, tzinfo=datetime.timezone.utc), 'time_taken': 4464341.0, 'time_delta': '51 days, 16:05:41', 'additions': 3765, 'deletions': 2, 'state': 'closed'}]"
