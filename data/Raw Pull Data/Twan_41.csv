pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
608539682,GRIFFON: Text To Speech (TTS) for the Game,"Text To Speech (TTS) service for intro story by concatenating strings then passing into TTS handler. Texts are passed as paragraphs.

There is also a GUI for enabling TTS in the options menu of Griffon

Related Minor Fixes:
- Fixed the display of the story. In this version the sky background disappears only after all the text has scrolled over the screen. (`if (yy < 10 && i == ARRAYSIZE(story) - 1)`)
- Used `ARRAYSIZE(story)` `ARRAYSIZE(story2)` for the loops 
<!---
Thank you for contributing to ScummVM. Please read the following carefully before submitting your Pull Request.

Make sure your individual commits follow the guidelines found in the ScummVM Wiki: https://wiki.scummvm.org/index.php?title=Commit_Guidelines. If they're not please edit them before submitting the Pull Request.

Proper documentation must also be included for common code and changes impacting user facing elements. 

Commits and Pull Requests should use the following template:

```
SUBSYSTEM: Short (50 chars or less) summary of changes

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Write your commit message in the present tense: ""Fix bug"" and not ""Fixed
bug.""  This convention matches up with commit messages generated by
commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, preceded by a
 single space, with blank lines in between, but conventions vary here

- Use a hanging indent
```
--->
",True,2912,https://api.github.com/repos/scummvm/scummvm/pulls/2912,https://github.com/scummvm/scummvm/pull/2912,closed,203,31,4,28,2,32,1,0,[{'name': 'GSoC'}],2021-04-04 12:38:43+00:00,2021-06-08 17:23:44+00:00,5633101.0,"65 days, 4:45:01","[{'comment_id': 606801370, 'comment_body': 'This could really need some buffer overflow checks - or use Common::String and the append operator for this.', 'comment_created': datetime.datetime(2021, 4, 4, 13, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mgerhardy', 'type': 'User'}, {'comment_id': 606801558, 'comment_body': 'Using `for (int i = 0; i < ARRAYSIZE(story); i++) {` would maybe be better - to not duplicate the size of the story array. ', 'comment_created': datetime.datetime(2021, 4, 4, 13, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mgerhardy', 'type': 'User'}, {'comment_id': 606801600, 'comment_body': 'Using for (int i = 0; i < ARRAYSIZE(story); ++i) { would maybe be better - to not duplicate the size of the story array.', 'comment_created': datetime.datetime(2021, 4, 4, 13, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mgerhardy', 'type': 'User'}, {'comment_id': 606801933, 'comment_body': '`_ttsMan` should get a null check - this is done in the other locations, too', 'comment_created': datetime.datetime(2021, 4, 4, 13, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mgerhardy', 'type': 'User'}, {'comment_id': 606808589, 'comment_body': 'Thank you for this feedback!  I have modified it as you said, and will proceed to fix the code as you have reviewed them.', 'comment_created': datetime.datetime(2021, 4, 4, 14, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 606808608, 'comment_body': 'Thank you for this feedback!  I have modified it as you said, and will proceed to fix the code as you have reviewed them.', 'comment_created': datetime.datetime(2021, 4, 4, 14, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 606821388, 'comment_body': 'The indention here is off - the preprocessor line should be at the beginning of the line - and the guarded code itself is one level too deep.', 'comment_created': datetime.datetime(2021, 4, 4, 16, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mgerhardy', 'type': 'User'}, {'comment_id': 606821525, 'comment_body': 'The whole code should be guarded by that null check - the constructed string is not needed if `ttsMan == nullptr`', 'comment_created': datetime.datetime(2021, 4, 4, 16, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mgerhardy', 'type': 'User'}, {'comment_id': 606821619, 'comment_body': ""Formatting doesn't match coding guidelines"", 'comment_created': datetime.datetime(2021, 4, 4, 16, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mgerhardy', 'type': 'User'}, {'comment_id': 606837352, 'comment_body': 'Thanks! I have a hard time understanding what is expected in this case though. The code conventions I have consulted are here: https://wiki.scummvm.org/index.php?title=Code_Formatting_Conventions\r\nI have temporarily edited the code by guessing that I should merge them into one line, please forgive me if I am mistaken.', 'comment_created': datetime.datetime(2021, 4, 4, 18, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 607345623, 'comment_body': '`result += story[0];`', 'comment_created': datetime.datetime(2021, 4, 5, 21, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'athrxx', 'type': 'User'}, {'comment_id': 607517931, 'comment_body': '`for (int i = 10; i < ARRAYSIZE(story); ++i) {`\r\n\r\nThis would e..g. be the right formatting. Watch out for the missing whitespaces. See the existing code to get an idea about the formatting. Keep formatting it the same way.\r\n\r\nOr try to use something like clang-formatter to perform the base formatting (if you ever have more than this to format)\r\n\r\nAlso if you use clang-format on a whole file, you should get used to `git add -p` to only use the relevant parts for your particular commit.', 'comment_created': datetime.datetime(2021, 4, 6, 5, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mgerhardy', 'type': 'User'}, {'comment_id': 608618020, 'comment_body': 'This is not correct. Please pay attention to the details. As it was pointed out, the correct formatting is\r\n`for (int i = 10; i < ARRAYSIZE(story); ++i) {`', 'comment_created': datetime.datetime(2021, 4, 7, 12, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sev-', 'type': 'User'}, {'comment_id': 620680721, 'comment_body': 'You seem to be missing indentation on this line (and the next ones).', 'comment_created': datetime.datetime(2021, 4, 26, 22, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 620682537, 'comment_body': 'Doing it this way will leave a trailing space at the end of the prarapgaph. This probably doesn\'t matter, but this can be easily fixed by moving this at the start of the while loop if the parapraph is not empty:\r\n```c++\r\n\twhile (nextparagraph < arraysize && story[nextparagraph][0] != \' \') {\r\n\t\tif (!paragraph.empty())\r\n\t\t\tparagraph += "" "";\r\n\t\tparagraph += story[nextparagraph++];\r\n\t}\r\n```', 'comment_created': datetime.datetime(2021, 4, 26, 22, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 620683269, 'comment_body': 'You could also check that `story[nextparagraph][0] != 0` to handle the empty lines in the first story array.', 'comment_created': datetime.datetime(2021, 4, 26, 22, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 620685131, 'comment_body': 'You have a line with a trailing tab here. You may want to check the settings in your text editor as it can help you avoid those (for example Xcode has a setting `Automatically trim trailing whitespace` and a separate child option `Including whitespace-only lines` and I would recommend to toggle both on.', 'comment_created': datetime.datetime(2021, 4, 26, 22, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 620685754, 'comment_body': ""Don't we want to read the first 10 lines as well before the actual start of the story?"", 'comment_created': datetime.datetime(2021, 4, 26, 22, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 620691814, 'comment_body': ""You probably don't want this test here because it means that if it has not finished speaking the previous paragraph it will skip this paragraph, and all the remaining ones afterward (as you test for `i == nextparagraph` to call this function).\r\n\r\nWhat you want to do instead is to always execute this code and queue the speech so that it speaks this paragraph as soon as it can.\r\n\r\nIf you look at https://github.com/scummvm/scummvm/blob/master/common/text-to-speech.h you can see the following (I simplified a bit to keep only the relevant code):\r\n```c++\r\nclass TextToSpeechManager {\r\npublic:\r\n\tenum Action {\r\n\t\tINTERRUPT,\r\n\t\tINTERRUPT_NO_REPEAT,\r\n\t\tQUEUE,\r\n\t\tQUEUE_NO_REPEAT,\r\n\t\tDROP\r\n\t};\r\n\r\n\tbool say(const String &str, Action action, CodePage charset = kUtf8);\r\n\r\n\tbool say(const String &str, CodePage charset = kUtf8) {\r\n\t\treturn say(str, INTERRUPT_NO_REPEAT, charset);\r\n\t}\r\n};\r\n```\r\n\r\nThis means you can use one of two functions to speak some text, one where you pass only the text (the one you are currently using) and that interrupts the current speech, and another one where in addition to the text you also specify an action to indicate what you want it to do if it is currently speaking.  When using that one with the `QUEUE` action you indicate that it should continue the current speech and once it has finished immediately start speaking the new text. See the documentation at [on lines 169-178](https://github.com/scummvm/scummvm/blob/master/common/text-to-speech.h#L169-L178) for more details on the actions."", 'comment_created': datetime.datetime(2021, 4, 26, 22, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 636503382, 'comment_body': 'I am worried that this array might be too small and you may need to pad it with a couple of 0 to avoid out of bound access which could have unexpected consequences.\r\n\r\nLooking at the code, it seems that both `curselMapTitles` and `curselMapValues` can be accessed with an index between `MINCURSEL` and `MAXCURSEL` inclusive. And `MAXCURSEL` is defined as 16. Since indexes start from 0, this means the arrays need to have at least 17 values to avoid an out of bound access when used with index 16.', 'comment_created': datetime.datetime(2021, 5, 20, 22, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 643449047, 'comment_body': ""It would be better to change the name for the local `story` variable here to avoid ambiguity with the global `story` variable. This would also silence the following warning:\r\n```\r\nengines/griffon/cutscenes.cpp:139:49: warning: declaration shadows a variable in namespace 'Griffon' [-Wshadow]\r\nint textToSpeech(int nextparagraph, const char *story[], int arraysize) {\r\n                                                ^\r\nengines/griffon/cutscenes.cpp:57:13: note: previous declaration is here\r\nconst char *story[48] = {\r\n            ^\r\n```"", 'comment_created': datetime.datetime(2021, 6, 1, 20, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 643450615, 'comment_body': '`tts_enabled` is not a very pretty name to show to the user.\r\n\r\n![image](https://user-images.githubusercontent.com/552105/120384916-af27fa00-c31e-11eb-9617-94b4b2ed7c59.png)\r\n\r\n\r\nYou can maybe use `Enable Text to Speech` instead.', 'comment_created': datetime.datetime(2021, 6, 1, 20, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 643454403, 'comment_body': 'This is minor, but it looks like you removed a new line at the end of the file here for no reason.', 'comment_created': datetime.datetime(2021, 6, 1, 20, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 643463131, 'comment_body': 'You can get a crash here when `mode` is 1 (which is the case when accessing the menu from the game using the Esc key).\r\n\r\nThat is because in such a case `cursel` can be equal to 3:\r\n```c++\r\nif (cursel >= (mode == 1 ? 4 : 3))\r\n\tcursel = 0;\r\n```\r\nThis code means:\r\n```c++\r\nif (mode == 1) {\r\n\tif (cursel >= 4)\r\n\t\tcursel = 0;\r\n} else {\r\n\tif (cursel >= 3)\r\n\t\tcursel = 0;\r\n}\r\n```\r\n\r\nThis is related to the following code as well: when `mode` is 1, there is an additional ""return"" item in the menu.\r\n```c++\r\nif (mode == 1)\r\n\tdrawString(_videoBuffer, ""return"", x, y + 48, 4);\r\n```\r\n\r\nHowever the `optionTitles` array only has 3 elements, so valid indexes are 0, 1, and 2. Accessing it with `cursel = 3` will cause random issues (for me it seems to almost always crash).\r\n\r\nThe obvious solution would be to include the ""return"" string into `optionsTitle`.\r\n', 'comment_created': datetime.datetime(2021, 6, 1, 20, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 643470927, 'comment_body': 'Why did you change the size here from 17 to 25 in b15c584?\r\n\r\nAlso you should remove the comma at the end here as well.', 'comment_created': datetime.datetime(2021, 6, 1, 20, 52, 39, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 643473959, 'comment_body': 'It might be better to add a couple of 0 to the array at the end so that all 17 values (`MAXCURSEL+1`) are explicitly initialized. By default if not all values are given it will initialize the remaining ones to 0, so it is not required to do so, but that makes it obvious that we want those two values to be 0, and not that we just forgot to initialize them.\r\n\r\nAlso you should not end the list with a comma (some compilers do not like trailing comas at the end of lists, as this only became valid code with the c++11 standard).', 'comment_created': datetime.datetime(2021, 6, 1, 20, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 643486951, 'comment_body': 'I think this one is supposed to be 15, and the one below 16 (and not 17).\r\nYou only increased `MAXCURSEL` by 2, and its maximum value is 16, so `cursel` can never be 17. When you select `Exit + Save` it is 15, which does nothing as you have no case 15. And when you select `Exit`, it is 16, and it does a save and exit and not just exit.', 'comment_created': datetime.datetime(2021, 6, 1, 21, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 643496179, 'comment_body': 'This block of code, and the similar one below, does not quite work properly with the `Exit + Save` and `Exit` menus for me when I use the arrow keys quickly to go down or up in the menu. I think the issue is with calling `say()` with an empty text when `curselMapTitles[cursel]` is 0, and with queuing the following text.\r\nWhat seems to work properly is to check that there is some text to speak, and only use queuing when there was an interrupt before. That would give something like this:\r\n```c++\r\nif (ttsMan != nullptr && ConfMan.getBool(""tts_enabled"")) {\r\n\tCommon::TextToSpeechManager::Action valueAction = Common::TextToSpeechManager::INTERRUPT;\r\n\tif (curselMapTitles[cursel] != 0) {\r\n\t\tttsMan->say(optionTitles[curselMapTitles[cursel]]);\r\n\t\tvalueAction = Common::TextToSpeechManager:: QUEUE;\r\n\t}\r\n\tif (curselMapValues[cursel] != 0)\r\n\t\tttsMan->say(optionValues[curselMapValues[cursel]], valueAction);\r\n}\r\n```\r\n\r\nAlso note that we are not expecting a space before and after `->` (so it should be `ttsMan->say` and not `ttsMan -> say`).', 'comment_created': datetime.datetime(2021, 6, 1, 21, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 643499248, 'comment_body': 'That looks strange. Now we return only if `ttsMan` is not nullptr, and `ttsMan->isSpeaking()` is false. It seems to me that it should return in the case where `ttsMan` is nullptr.\r\nSo I would expect a test like:\r\n```c++\r\nif (yy < 10 && i == ARRAYSIZE(story) - 1) {\t\r\n\tif (ttsMan == nullptr || ttsMan->isSpeaking() == false)\r\n\t\treturn;\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 6, 1, 21, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 643500755, 'comment_body': 'Same comment as above. I would expect to break as well is `ttsMan` is a nullptr.', 'comment_created': datetime.datetime(2021, 6, 1, 21, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 646037014, 'comment_body': 'Why change the `break` into a `return` here? Is this a mistake?', 'comment_created': datetime.datetime(2021, 6, 5, 21, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}]","[{'commit_sha': '72137e2da90d51e35907aea2f17e7e3352cb66f9', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c131bcfcd6aa4523bd57576a5f26c1172d4160b4', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '623e573ed5c291bf6332f7f74da766095c526b11', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2362708a41ade3f5aaec3dbeb825396349acced', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e00dcea5b87d4bf5a9d63b06ecc39cc5d40888ca', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '802869793a1d418af737e2229b2aa62c3a4b5b80', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bef5bbe518bd242a72da1ee396299b933bde130', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28bcd50cb560348b98411ebba5da9e8197cc97f1', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f06fbc48e780d7bcf995ded7fdc525b826f6079', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4298bddc1fb3c145d1e249b590ce7912235c7467', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '012110106a7aa0a9022ca47eeb408b9bf3a551a1', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcd15d406dae8d265129f3b7ebd0112a5a2a446b', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34c55d98b93f047a2dca89d8c4cf7ca479c0b0e4', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '714326734e845394a32ce6742108b305b7f9b5fc', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c08bf606038165665c835673974ee91c5ae47ae6', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc172fd901326c1841e1670a2e47521b4b24cf5c', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d0653aed46e167b920d273b10bda39a61162352', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9846a061726a75a75597718d6d85465239d73a88', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaebb1486f0b9a631fc1ebab8005ba2a12707d92', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '604a686d6be7b8e1de5965856ae833f7fde4575d', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ecea67ee43729a78bbec08fe39691a89e1ec20e', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba79dd1d649d3b5eeef01c239b544f156ac3dee2', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b15c584579437766e8573ff85225af13315fbf9c', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '027c012474373f2c31819d7988001009f450a700', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b581c1a1c086a3fa40dfed5e967e3d29e0060ef2', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0909e8bcb08c5b8062f54a73e93d09e650bb4fcc', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '571d2824cfab62710c33c486fe155162962d6794', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f731429883e815e170b0ec296a6535c269f19e8', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}]",,77198777,,User,,7,,1,1
663189813,DREAMWEB: Text To Speech (TTS) for the game,"The TTS feature is implemented to the following:

- GUI (ScummVM main menu > edit game > ""Enable Text To Speech"")
- Opening bible quote (""And I heard..."")
- Opening intro story (""Unseen...."")
- Actions in the game (""Open inventory"", ""Examine book"", ""Walk to stone floor"", etc.)
- Everyday objects in the game and actions upon (""Take watch"", ""Place gum"", ""Use wallet"", etc.)
- In game options (""Return to map"", ""Disk options"", ""Select page"", etc.)

<!---
Thank you for contributing to ScummVM. Please read the following carefully before submitting your Pull Request.

Make sure your individual commits follow the guidelines found in the ScummVM Wiki: https://wiki.scummvm.org/index.php?title=Commit_Guidelines. If they're not please edit them before submitting the Pull Request.

Proper documentation must also be included for common code and changes impacting user facing elements.

Commits and Pull Requests should use the following template:

```
SUBSYSTEM: Short (50 chars or less) summary of changes

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Write your commit message in the present tense: ""Fix bug"" and not ""Fixed
bug.""  This convention matches up with commit messages generated by
commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, preceded by a
 single space, with blank lines in between, but conventions vary here

- Use a hanging indent
```
--->
",True,3048,https://api.github.com/repos/scummvm/scummvm/pulls/3048,https://github.com/scummvm/scummvm/pull/3048,closed,184,3,9,22,8,50,1,0,[{'name': 'GSoC'}],2021-06-07 05:38:30+00:00,2021-09-04 18:27:46+00:00,7735756.0,"89 days, 12:49:16","[{'comment_id': 646465452, 'comment_body': 'Could you please rename it to GAMEOPTION_TTS?', 'comment_created': datetime.datetime(2021, 6, 7, 10, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sev-', 'type': 'User'}, {'comment_id': 646465769, 'comment_body': 'The code formatting here is incorrect.', 'comment_created': datetime.datetime(2021, 6, 7, 10, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sev-', 'type': 'User'}, {'comment_id': 646466055, 'comment_body': 'The code formatting is incorrect. Please follow our code formatting conventions', 'comment_created': datetime.datetime(2021, 6, 7, 10, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sev-', 'type': 'User'}, {'comment_id': 646466478, 'comment_body': 'Also, why put this on a global level? Please move it to the engine class.', 'comment_created': datetime.datetime(2021, 6, 7, 10, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sev-', 'type': 'User'}, {'comment_id': 646467434, 'comment_body': 'The initialization is redundant. Common::String is already initialized with an empty string upon creation', 'comment_created': datetime.datetime(2021, 6, 7, 10, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sev-', 'type': 'User'}, {'comment_id': 646467996, 'comment_body': 'What is the purpose of this variable, why not add `string` right away to `theText`?', 'comment_created': datetime.datetime(2021, 6, 7, 10, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sev-', 'type': 'User'}, {'comment_id': 646468229, 'comment_body': 'Same question here. The variable looks redundant to me.', 'comment_created': datetime.datetime(2021, 6, 7, 10, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sev-', 'type': 'User'}, {'comment_id': 646469358, 'comment_body': 'Please split this line, so it doesn\'t go too far off the screen. you may write like this:\r\n\r\n```C++\r\nstory = ""This is beginning, ""\r\n        ""this continues ""\r\n        ""even more.""\r\n```\r\n             ', 'comment_created': datetime.datetime(2021, 6, 7, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sev-', 'type': 'User'}, {'comment_id': 647382587, 'comment_body': 'Hello sev, thank you for reviewing. I will make sure to fix your requests, especially the coding format part, sorry again for not recognizing the pattern. To answer your question: Because it would make the uttered speech sound more natural. For example, ""Walk to Jeans"", instead of saying: ""Walk to"", ""Jeans"", it would say: ""Walk-tuh-jeans"", so I decided to concatenate before saying. ', 'comment_created': datetime.datetime(2021, 6, 8, 12, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 647576652, 'comment_body': 'My reasoning to putting it at global level, is because the function is called many times to print the same string, so it needs something outside the scope to detect if TTS should speak. Would you suggest me to pass an external variable to the function instead of declaring a global variable?', 'comment_created': datetime.datetime(2021, 6, 8, 15, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 649926382, 'comment_body': 'The question is not about the `theText` variable that you are using to concatenate the verb and the object, but about the `temp` variable. You could write directly `theText += (const char *)string` without using a temporary variable.\r\n\r\nAnd by the way you are missing a space before the `*` in `(const char*)string`.', 'comment_created': datetime.datetime(2021, 6, 11, 12, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 650076103, 'comment_body': 'This is verse 1, not 7.\r\n\r\nAlso the punctuation is not quite correct. In game the first line ends with a coma: `saying to the seven angels, go your ways`', 'comment_created': datetime.datetime(2021, 6, 11, 15, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 652079878, 'comment_body': 'Does that work when the language is Russian?\r\n\r\nAlso you can probably use `Common::getLanguageCode` instead to simplify the code:\r\n```c++\r\nttsMan->setLanguage(Common::getLanguageCode(getLanguage()));\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 19, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 652083229, 'comment_body': ""Formatting.\r\nhttps://wiki.scummvm.org/index.php?title=Code_Formatting_Conventions#Naming\r\n\r\n> **Class member variables**\r\n> Prefixed with '_' and in camel case (Yo! no underscore separators), starting with lowercase.\r\n> `char *_someVariableName;`"", 'comment_created': datetime.datetime(2021, 6, 15, 19, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 652084343, 'comment_body': 'Formatting (space between `char` and `*`).\r\n```c++\r\nconst char *theText = (const char *)string;\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 19, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 652085584, 'comment_body': 'Is this check needed when using the `QUEUE_NO_REPEAT` option below? I would expect the NO_REPEAT to skip it if it is the same as the last text.', 'comment_created': datetime.datetime(2021, 6, 15, 19, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 652086015, 'comment_body': 'Formatting (space between `char` and `*`).', 'comment_created': datetime.datetime(2021, 6, 15, 19, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 652086342, 'comment_body': 'Formatting.', 'comment_created': datetime.datetime(2021, 6, 15, 19, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 652091465, 'comment_body': 'The indentation seems off on a couple of lines here. You may be using spaces instead of tabs.\r\n\r\nAlso maybe it would be worth using a variable for the text.\r\n```c++\r\nconst uint8 *text = (const uint8 *)_personText.getString(index*64 + talkPos);\r\nCommon::TextToSpeechManager *ttsMan = g_system->getTextToSpeechManager();\r\nif (ttsMan != nullptr && ConfMan.getBool(""tts_enabled"") && !hasSpeech())\r\n\tttsMan->say((const char*)text),\tCommon::TextToSpeechManager::INTERRUPT);\r\nreturn text;\t\r\n', 'comment_created': datetime.datetime(2021, 6, 15, 19, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 652093121, 'comment_body': ""Also I am wondering if it might be better to use the `TextToSpeechManager` in places where this function is called rather than here. And I see you already do that in `startTalk()`. Doesn't that cause some sentences to be spoken twice?"", 'comment_created': datetime.datetime(2021, 6, 15, 19, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 652104343, 'comment_body': 'For the French text you can drop the guillemets. They should not not difference for the TTS engine.\r\n\r\nAlso to avoid encoding issues it would be better to encode the non-ASCII characters. By default the TextToSpeechManager expects UTF-8 encoding. And for example the UTF-8 encoding for `è` is `0xC3 0xA8`. So using hex notation you can write `""la col\\xC3\\xA8re de Dieu.""`\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 15, 19, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 652106049, 'comment_body': 'Apparently there are Czech and Russian fan translations as well (we can see those in the detection table).\r\nIf we want to default to English for those here, we would need to temporarily change the language of the TextToSpeechManager to English.', 'comment_created': datetime.datetime(2021, 6, 15, 19, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 653140814, 'comment_body': ""The reason is that for somehow `QUEUE_NO_REPEAT` doesn't take effect, and the sentences keeps repeating itself until the next line arrives. Everything is actually good with only `_lastText != theText`. Do we want to just remove `QUEUE_NO_REPEAT`?"", 'comment_created': datetime.datetime(2021, 6, 17, 0, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 685541366, 'comment_body': 'We discussed for a separate game, and indeed I forgot that `QUEUE_NO_REPEAT` prevent repeating the sentence currently being spoken, but as soon as it has finished, it can speak it again. So the additional check here is indeed needed.', 'comment_created': datetime.datetime(2021, 8, 9, 21, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 685546670, 'comment_body': 'Formatting (missing space between `char` and `*`)', 'comment_created': datetime.datetime(2021, 8, 9, 21, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 685550008, 'comment_body': ""```suggestion\r\n\tconst char *colon_pos = strchr(placeName, ':');\r\n```\r\n`auto` is a c++11 feature, which is only allowed for engines that declare using c++11 (in their `configure.engine` file). And this is not the case of the dreamweb engine."", 'comment_created': datetime.datetime(2021, 8, 9, 22, 0, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 685550889, 'comment_body': 'You could move that last line inside the `if` block as it is not necessary for the case where `_lastText` is already equal to `theText`.', 'comment_created': datetime.datetime(2021, 8, 9, 22, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 685554435, 'comment_body': 'What is the purpose of the `string2` and `str1` variables here? It looks like you want to check if the string is empty? In that case you can simply check that the first character of the string is not 0 (since strings are null terminated): `*string` (or `*string != 0`).', 'comment_created': datetime.datetime(2021, 8, 9, 22, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 685555639, 'comment_body': 'Same as above. Please do not use c++11 feature.', 'comment_created': datetime.datetime(2021, 8, 9, 22, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 685558501, 'comment_body': 'You could combine the two tests in one:\r\n```c++\r\nif (!_vm->hasSpeech() || ConfMan.getBool(""tts_enabled_speech""))\r\n\treturn false;\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 22, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 685584104, 'comment_body': 'And since this is only used for the TTS, you should move this inside the `if (_ttsMan != nullptr && ...)` block.\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 9, 23, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 685584600, 'comment_body': 'Same remarks again:\r\n - Please do not use `auto`\r\n - Please move this inside the `if` block.', 'comment_created': datetime.datetime(2021, 8, 9, 23, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 685584900, 'comment_body': 'Another one to change', 'comment_created': datetime.datetime(2021, 8, 9, 23, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 685585227, 'comment_body': 'And another one', 'comment_created': datetime.datetime(2021, 8, 9, 23, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 688122747, 'comment_body': 'Is there a reason to change the behaviour here (and in the other places where you made the change) from `INTERRUPT` (the default) to `DROP`?\r\n\r\nIf not you can simply write `_ttsMan->say((const char *)string, _textEncoding);`', 'comment_created': datetime.datetime(2021, 8, 12, 22, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 688129943, 'comment_body': '`kDos850` should work for English as well.\r\nIt will definitely not work for Russian though. If I had to take a guess it would be that it might be using `kDos866`. But since this is a fan translation, it may be using something more recent (e.g. `kWindows1251`). You probably want to ask sev. Since he added support for it (in https://github.com/scummvm/scummvm/commit/93dfd39) he might know what encoding is used.\r\n\r\nFor the checks it would also be better to use the language code rather than string comparisons:\r\n```c+\r\nswitch (getLanguage()) {\r\ncase Common::RU_RUS:\r\n    _textEncoding = Common::kDos866;\r\n    break;\r\ndefault:\r\n    _textEncoding = Common::kDos850;\r\n    break;\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 22, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 688964240, 'comment_body': 'After checking, the encoding for Russian is `kDos866`\r\nAs for Czech, I see this message popping up when I tried to open the game\r\nWhat should I do? Do I go post at https://bugs.scummvm.org/?\r\n```\r\nThe game in \'dreamweb-cz\' seems to be an unknown game variant.\r\n\r\nPlease report the following data to the ScummVM team at https://bugs.scummvm.org/ along with the name of the game you tried to add and its version, language, etc.:\r\n\r\nMatched game IDs for the dreamweb engine: dreamweb-cd\r\n\r\n  {""dreamweb.r00"", 0, ""3b5c87717fc40cc5a5ae19c155662ee3"", 152918},\r\n  {""dreamweb.r02"", 0, ""28458718167a040d7e988cf7d2298eae"", 210466},\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 16, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 688966015, 'comment_body': 'I thought misunderstood the default as `DROP`, and resolved to add it to all the places I intended with `_ttsMan->say((const char *)string, _textEncoding);`. It seemed that I need 3 inputs for that.', 'comment_created': datetime.datetime(2021, 8, 14, 16, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 688977276, 'comment_body': '> As for Czech, I see this message popping up when I tried to open the game\r\n> What should I do? Do I go post at https://bugs.scummvm.org/?\r\n> \r\n> ```\r\n> The game in \'dreamweb-cz\' seems to be an unknown game variant.\r\n> \r\n> Please report the following data to the ScummVM team at https://bugs.scummvm.org/ along with the name of the game you tried to add and its version, language, etc.:\r\n> \r\n> Matched game IDs for the dreamweb engine: dreamweb-cd\r\n> \r\n>   {""dreamweb.r00"", 0, ""3b5c87717fc40cc5a5ae19c155662ee3"", 152918},\r\n>   {""dreamweb.r02"", 0, ""28458718167a040d7e988cf7d2298eae"", 210466},\r\n> ```\r\nThis matches the detection we already have for the Czech version, but you are probably missing the `dreamweb.exe` file that is also used for the detection.\r\n\r\nThe Czech version download is not the full game. This is a patch that you apply on top of another version. As indicated in https://bugs.scummvm.org/ticket/7078, you can for example use the CD DOS Version (English US) that you can find on https://www.scummvm.org/games/#games-dreamweb and replace some of the files with those in the Czech downloads.\r\n', 'comment_created': datetime.datetime(2021, 8, 14, 18, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 689070377, 'comment_body': 'Here\'s what I get printed when setting the encoding to Windows1250\r\nLooks a lot like what is printed on the screen & Google translate recognizes it\r\n```\r\nNeviden...\r\nObydli samotnych myslenek formuje nasi budoucnost...  Dreamweb.\r\n..  Dreamweb.\r\nStrazena svymi sluhy.......\r\nMiliardy let stara......\r\nPo staleti byla Dreamweb neotresena..........\r\nNyni ale chce zlo prevzit vladu.........\r\n""Strazci. Pavucina snu se pomalu borti.""         \r\n""Sedm sil zla na Zemi se pomalu spojuji v jednu""   \r\n""Pokud se stanou prilis silnymi, Dreamweb bude znicen""    \r\n""Kdo bude ten vykonavatel ?""\r\n""Kdy se to stane?""\r\n""TICHO! Ti, kdoz byli vyvoleni, prichazeji.""  \r\n""Pokud odhali svoji silu, pak se stanou prilis silnymi""\r\n""Bylo seme zasazeno?""\r\n""Ano. Mohutne vzrostlo a ma se cile k svetu."" \r\n""Prisel cas a ja ho probudim.""\r\n""Tohle je budoucnost..""\r\n""Vim, co ode mne chcete. Myslim, ze vam nyni rozumim.""\r\n""Tech sedm se stalo silnejsimi.""\r\n""Strasili mne v mych snech.""  \r\n""Vim. Maji moc nad sedmi misty pavuciny snu - Dreamweb.""\r\n""Museji byt zniceni?""    \r\n""Ano.""\r\n""Citim blizkost vsech sedmi. Ktery z nich ma byt prvni?""     \r\n""Jmenuje se  Crane.""\r\n""Je nejslabsi ze vsech sedmi.""\r\n""Jak ho mam najit?""\r\n""Je velmi blizko. Opatri si zbran a zacni ho hledat."" \r\n""Cas se nam kvapem krati, bratre....""\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 10, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 689107073, 'comment_body': ""I was wrong! They're all good now"", 'comment_created': datetime.datetime(2021, 8, 15, 15, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 689156716, 'comment_body': ""You can remove the space at the start of this  line (since there is a space at the end of the previous one).\r\nAnd you need to add a space at the end of this line (or at the start of the next one). Currently for me the TTS makes no pause between `Dieu` and `L'apocalypse` (which sounds strange) because of the missing space."", 'comment_created': datetime.datetime(2021, 8, 15, 23, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 689260153, 'comment_body': 'Just pushed. The lastest update applies the principle to other versions of translation as well', 'comment_created': datetime.datetime(2021, 8, 16, 6, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 693374762, 'comment_body': 'You can use `textToSpeech()` here', 'comment_created': datetime.datetime(2021, 8, 21, 16, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bluegr', 'type': 'User'}, {'comment_id': 693374805, 'comment_body': 'You can use `textToSpeech()` here', 'comment_created': datetime.datetime(2021, 8, 21, 16, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'bluegr', 'type': 'User'}, {'comment_id': 693374911, 'comment_body': 'You can use `textToSpeech()` here', 'comment_created': datetime.datetime(2021, 8, 21, 16, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'bluegr', 'type': 'User'}, {'comment_id': 693375291, 'comment_body': 'Could `_ttsMan->isSpeaking()` be used instead of checking if the string changed?', 'comment_created': datetime.datetime(2021, 8, 21, 16, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bluegr', 'type': 'User'}, {'comment_id': 693381935, 'comment_body': 'The short answer is no.\r\n\r\nBy default `TextToSpeechManager::say()` already does nothing when trying to speak again the same string that it is currently speaking. But the issue here is that we also want to avoid repeating again and again the same string. Without this check, as soon has it has finished speaking the text, it will start speaking it again because `useTimedText()` gets called again and again (multiple times per second). We only want to speak the text when a new text is displayed.', 'comment_created': datetime.datetime(2021, 8, 21, 17, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 693382614, 'comment_body': 'Indeed.\r\nAnd I would also suggest renaming `textToSpeech()` into something like `speakObjectName()` to clarify that it cannot be used to speak conversation text.', 'comment_created': datetime.datetime(2021, 8, 21, 17, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 693408912, 'comment_body': ""Fair enough :) I'm just not a fan of keeping a state of the currently playing sentence "", 'comment_created': datetime.datetime(2021, 8, 21, 22, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bluegr', 'type': 'User'}]","[{'commit_sha': 'b8444620e92c8610671320480e56cf4c790396f6', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8927c49cbe798b19874f56e1f8cb27105f941c72', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33cbba9b1210befc81d725b4a84091b9eada8dcb', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3169b8dc1a1465dcb4298763c76e1b084459dba', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dc8065670c6a671a324cb2e715b54ad921fb551', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ea2ba573f482b8eada4dfe56471e0bcf91362c8', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d783b7814db8c2cb1e26c0679f0c695075d811e', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1804140a211d089729c76adfca97dbbb5018ee45', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9446ce11fa9dcca448f5d7d8246eeb227c9247a', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5680c132a54b8a5abf826848b74197bbaeca5f45', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '093fa1bad91a11ca78e65319da83d9407fbf0fb4', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c95c2aaf7dc75d168e5c5d65e23d614c470cbc1', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1105565528849c3e61c1864bd017bf221fa74c54', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f19466bee7a5cf2cf0039236332a66f1a51f1ca', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a71cbe7985d990c68636f8825e0d4696b216f168', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21ae398bd7fe2f5013be21864013ea49cc738b96', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7492570848b8eb254225dae7b97ff2cf7696406', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd35f3b8a58beb58b059b9d8b834ae74320c74481', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fef6ee9b0924d48b4c772398331d8c13ff058283', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e212cc95fe3243abc6a20dbfd6ed4faca0b01193', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22040f3546fa46febf1af2e1778b711f88821783', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3582aa295d7b3bd7d01cce034ba5b6c25a4c10c9', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}]",,77198777,,User,,7,,1,1
707328180,SCI: Text To Speech (TTS) for Laurabow2 and Castle of Dr. Brain,"Tentative attempt in adding TTS to two games that are powered by SCI. 
The functions are far from perfect, but here's what we have
- GUI option that comes up only when Laurabow2/ Castle of Dr.Brain is played
- TTS for Quit game options
- TTS for subtitles that appear in the game
- TTS for some clickable options that appear in the game

<!---
Thank you for contributing to ScummVM. Please read the following carefully before submitting your Pull Request.

Make sure your individual commits follow the guidelines found in the ScummVM Wiki: https://wiki.scummvm.org/index.php?title=Commit_Guidelines. If they're not please edit them before submitting the Pull Request.

Proper documentation must also be included for common code and changes impacting user facing elements.

Commits and Pull Requests should use the following template:

```
SUBSYSTEM: Short (50 chars or less) summary of changes

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Write your commit message in the present tense: ""Fix bug"" and not ""Fixed
bug.""  This convention matches up with commit messages generated by
commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, preceded by a
 single space, with blank lines in between, but conventions vary here

- Use a hanging indent
```
--->
",False,3256,https://api.github.com/repos/scummvm/scummvm/pulls/3256,https://github.com/scummvm/scummvm/pull/3256,closed,166,21,13,15,13,8,1,0,[{'name': 'GSoC'}],2021-08-10 12:55:26+00:00,2021-12-19 20:13:01+00:00,11344655.0,"131 days, 7:17:35","[{'comment_id': 686147920, 'comment_body': 'Why is this needed at all?', 'comment_created': datetime.datetime(2021, 8, 10, 16, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'bluegr', 'type': 'User'}, {'comment_id': 686884718, 'comment_body': 'Thanks for taking a look. \r\nIt\'s for the text that appear in the question book of Laurabow2 (shown below). It\'s here to avoid passing repeated text to ttsMan by tracking what has been recently printed before. The text that gets printed every time a new option gets its highlight removed is not speeched.\r\n<img width=""637"" alt=""Screen Shot 2564-08-11 at 22 19 35"" src=""https://user-images.githubusercontent.com/77198777/129046054-dcf8d39f-a5a0-4ca9-bb32-d04b0400a9c7.png"">\r\n', 'comment_created': datetime.datetime(2021, 8, 11, 14, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 696065211, 'comment_body': 'Newline', 'comment_created': datetime.datetime(2021, 8, 25, 19, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'bluegr', 'type': 'User'}, {'comment_id': 696065391, 'comment_body': 'Newline', 'comment_created': datetime.datetime(2021, 8, 25, 19, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bluegr', 'type': 'User'}, {'comment_id': 696066120, 'comment_body': '```suggestion\r\n\t\tif (ttsMan != nullptr && g_sci->getGameId() == GID_LAURABOW2 && !g_sci->isDemo())\r\n```', 'comment_created': datetime.datetime(2021, 8, 25, 19, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bluegr', 'type': 'User'}, {'comment_id': 696068182, 'comment_body': 'This should be more descriptive, e.g. ttsPickLB2NotebookTopic', 'comment_created': datetime.datetime(2021, 8, 25, 19, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bluegr', 'type': 'User'}, {'comment_id': 771995262, 'comment_body': 'This comparison is probably not what was intended - either use strcmp() here, or the != operator from Common::String', 'comment_created': datetime.datetime(2021, 12, 19, 20, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'bluegr', 'type': 'User'}]","[{'commit_sha': 'c8bf366daa3607342531bbd27e89d64a6f748c5d', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b25f7bf4ee5b4fc2cabc0f1ed64f0b728e1e00f', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a332445a76992869ffd9d1185fe568961641c25', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e76c1f5e6e41d1a43d6e350289a990bd1551f5f', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9b04c5b570543c5f4fb348ef27e4f933c524e40', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df764ba4d8064418a42cfca08337d5669fccc580', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0528f97fc03aeb5f6632ae134bed3dfb5257b3cf', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b3a061e4b5bbb55f827eee4a2aaeb72827419a8', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '635c5fd541d9f039c62e9a5bc1a475e3c19f7d94', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9abe2457b5d0dfc28d5fff6c98bc4037ee6ffc08', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '057c322730b3f4258538b381acfd8a8e401af952', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95b4ecc0c6294fead37e3f4265943d380e5e413a', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47876032cc91a0062905e589fe4de0de3d90fef1', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71b43c0db92a723feeaacee2238460f7a5f46fbf', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a6e6cdc62ecd1ad4c03ed004099d298b776e06a', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}]",,77198777,,User,,7,,1,1
689863845,CGE: Text To Speech (TTS) for the Soltys Game ,"Adding TTS for the object, options and speech that are shown in the game. This also includes, the TTS option on engine menu, and TTS for the ending message",True,3155,https://api.github.com/repos/scummvm/scummvm/pulls/3155,https://github.com/scummvm/scummvm/pull/3155,closed,41,8,5,2,3,16,1,0,[{'name': 'GSoC'}],2021-07-14 12:17:59+00:00,2021-07-17 06:27:42+00:00,238183.0,"2 days, 18:09:43","[{'comment_id': 669657308, 'comment_body': 'If this is unused, please remove it', 'comment_created': datetime.datetime(2021, 7, 14, 14, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'bluegr', 'type': 'User'}, {'comment_id': 669657415, 'comment_body': 'If this is unused, please remove it', 'comment_created': datetime.datetime(2021, 7, 14, 14, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bluegr', 'type': 'User'}, {'comment_id': 669657495, 'comment_body': 'If this is unused, please remove it', 'comment_created': datetime.datetime(2021, 7, 14, 14, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'bluegr', 'type': 'User'}, {'comment_id': 669874393, 'comment_body': '`lastText` should get initialized.', 'comment_created': datetime.datetime(2021, 7, 14, 18, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mgerhardy', 'type': 'User'}, {'comment_id': 670110548, 'comment_body': 'Sorry......Thank you for pointing out.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 670110583, 'comment_body': 'Sorry......Thank you for pointing out.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 670110618, 'comment_body': 'Sorry too for this...', 'comment_created': datetime.datetime(2021, 7, 15, 3, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 670110732, 'comment_body': 'just initialized with """" !', 'comment_created': datetime.datetime(2021, 7, 15, 3, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 671908181, 'comment_body': 'Why add this include? It does not look like it would be needed here?', 'comment_created': datetime.datetime(2021, 7, 18, 22, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 671908408, 'comment_body': ""Do you need tp check `lastText` here? Wouldn't using `INTERRUPT_NO_REPEAT` work just as well?"", 'comment_created': datetime.datetime(2021, 7, 18, 22, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 671908614, 'comment_body': 'Why not make this function a member of the `Talk` class?', 'comment_created': datetime.datetime(2021, 7, 18, 22, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 671908934, 'comment_body': 'Is this tooltip accurate? I would think it reads more than just the descriptions (such as the dialogs as well)?', 'comment_created': datetime.datetime(2021, 7, 18, 22, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 673078461, 'comment_body': ""I followed all the reviews you did, except for this one, I've only fixed the wrong indentation and removed `INTERRUPT_NO_REPEAT`, because when that action item is used independently, the text repeats itself at the beginner of an utterance."", 'comment_created': datetime.datetime(2021, 7, 20, 12, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 673102356, 'comment_body': 'Yes, as you pointed out on the cge2 pull request, the `INTERRUPT_NO_REPEAT` is indeed not sufficient. So you can ignore this comment.', 'comment_created': datetime.datetime(2021, 7, 20, 13, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 673103314, 'comment_body': 'Also you have missing brackets here, but this has already been fixed in master by digitall in e821511050.', 'comment_created': datetime.datetime(2021, 7, 20, 13, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 673105379, 'comment_body': 'It might be better here to initialise `lastText` to nullptr. You could also possibly make it a member of the `Talk` class.', 'comment_created': datetime.datetime(2021, 7, 20, 13, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}]","[{'commit_sha': 'e13a9c50d474222c47d13a2fe13e3f8b72476a0a', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a371010f919ef4f5b771bf9fd5d2e68187c00c4', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}]",,77198777,,User,,7,,1,1
693492804,CGE: Change declaration place and descriptions,"Some adjustments to the way TTS is done

- remove unnecessary header
- move void textToSpeech(const char *text) to talk engine
- adjust tooltip description in detection.cpp
- adjustments to the function void textToSpeech(const char *text)
<!---
Thank you for contributing to ScummVM. Please read the following carefully before submitting your Pull Request.

Make sure your individual commits follow the guidelines found in the ScummVM Wiki: https://wiki.scummvm.org/index.php?title=Commit_Guidelines. If they're not please edit them before submitting the Pull Request.

Proper documentation must also be included for common code and changes impacting user facing elements.

Commits and Pull Requests should use the following template:

```
SUBSYSTEM: Short (50 chars or less) summary of changes

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Write your commit message in the present tense: ""Fix bug"" and not ""Fixed
bug.""  This convention matches up with commit messages generated by
commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, preceded by a
 single space, with blank lines in between, but conventions vary here

- Use a hanging indent
```
--->
",True,3177,https://api.github.com/repos/scummvm/scummvm/pulls/3177,https://github.com/scummvm/scummvm/pull/3177,closed,11,15,4,3,3,0,1,0,[{'name': 'GSoC'}],2021-07-20 14:00:57+00:00,2021-07-21 20:36:01+00:00,110104.0,"1 day, 6:35:04",[],"[{'commit_sha': '7909e27432041281d708450e39385dd683592987', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2015f74edc3a3363ca659d4fa682326ba91d7d46', 'committer_username': 'criezy', 'committer_name': 'Thierry Crozat', 'committer_email': 'criezy@scummvm.org', 'commit_date': datetime.datetime(2011, 1, 7, 15, 57, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37a9752c9217deccb77c926f2614322e5f0d9241', 'committer_username': 'criezy', 'committer_name': 'Thierry Crozat', 'committer_email': 'criezy@scummvm.org', 'commit_date': datetime.datetime(2011, 1, 7, 15, 57, 46, tzinfo=datetime.timezone.utc)}]",,77198777,,User,,7,,1,1
689869604,CGE2: Text To Speech (TTS) for the Sfinx Game,"There will be TTS for the following
- Options in the game
- Speech in the game

And options to do these things
- Turn TTS for objects on an off
- In the English version, an option to override the original voice over with TTS (in English)

<!---
Thank you for contributing to ScummVM. Please read the following carefully before submitting your Pull Request.

Make sure your individual commits follow the guidelines found in the ScummVM Wiki: https://wiki.scummvm.org/index.php?title=Commit_Guidelines. If they're not please edit them before submitting the Pull Request.

Proper documentation must also be included for common code and changes impacting user facing elements.

Commits and Pull Requests should use the following template:

```
SUBSYSTEM: Short (50 chars or less) summary of changes

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Write your commit message in the present tense: ""Fix bug"" and not ""Fixed
bug.""  This convention matches up with commit messages generated by
commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, preceded by a
 single space, with blank lines in between, but conventions vary here

- Use a hanging indent
```
--->
",True,3156,https://api.github.com/repos/scummvm/scummvm/pulls/3156,https://github.com/scummvm/scummvm/pull/3156,closed,64,8,7,9,5,41,1,0,[{'name': 'GSoC'}],2021-07-14 12:26:34+00:00,2021-07-26 11:35:27+00:00,1033733.0,"11 days, 23:08:53","[{'comment_id': 669871278, 'comment_body': ""this looks suspicious. `lastText != text` is no string compare. It might be that you are comparing a buffer pointer with different content since the last call - but as the same buffer was used, the check didn't evaluate to true. It would imo be better to perform a string compare here."", 'comment_created': datetime.datetime(2021, 7, 14, 18, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mgerhardy', 'type': 'User'}, {'comment_id': 669872412, 'comment_body': 'lastText is not initialized in the constructor', 'comment_created': datetime.datetime(2021, 7, 14, 18, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mgerhardy', 'type': 'User'}, {'comment_id': 669873347, 'comment_body': ""these aren't initialized - so they might send garbage in `VMenu::touch` to `ttsMan->say`"", 'comment_created': datetime.datetime(2021, 7, 14, 18, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mgerhardy', 'type': 'User'}, {'comment_id': 670750094, 'comment_body': ""I'm not sure about the name of the config variable. it might be used in other engines, too - and should imo get a better speaking name.\r\n\r\nAlso I'm no native speaker, but the upper case writing of the description doesn't look correct for me. Is there a reason behind writing it like this? Like highlighting words with special meanings in the game?"", 'comment_created': datetime.datetime(2021, 7, 15, 19, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mgerhardy', 'type': 'User'}, {'comment_id': 670756406, 'comment_body': 'cge2 is not marked as c++11 - this would break in c++98 compilation mode. You should init the var in the constructor.', 'comment_created': datetime.datetime(2021, 7, 15, 19, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mgerhardy', 'type': 'User'}, {'comment_id': 670890132, 'comment_body': 'The upper case is there just because it was also there in the other engines I worked on, just thinking about uniforming the format. ', 'comment_created': datetime.datetime(2021, 7, 16, 0, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 670904485, 'comment_body': 'Is it this particular variable? or all the variables?', 'comment_created': datetime.datetime(2021, 7, 16, 1, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 671902701, 'comment_body': ""The config option name is indeed not very good. It doesn't really tell us what it is about. Something like `tts_enabled_objects` and `tts_enabled_speech` would be better.\r\n\r\nThe description string seems also a bit long and might not fit on some platforms with low resolution. Using only `Enable Text to Speech for Subtitles` might be sufficient. You can indicate that it overrides the original voice overs in the tooltip.\r\n\r\nAnd the tooltip seems to be a copy paste from somewhere else and is not really adapted to this option."", 'comment_created': datetime.datetime(2021, 7, 18, 21, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 671902975, 'comment_body': ""Why is this in this file and not in cge2.cpp?\r\n\r\nThe `meta engine.cpp` file contains the implementation for the `CGE2MetaEngine` class, and it doesn't really seem to be the right place to implement a function from the `CGE2Engine` class."", 'comment_created': datetime.datetime(2021, 7, 18, 21, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 671903470, 'comment_body': 'Is that correct?\r\nI am guessing this line is to play the original voice over?\r\n\r\nMy understanding is that you want the original voice over either when playing in Polish, **or** when playing in english if the option to override it with TTS is not enabled. But here the condition you have is an `and` and not an `or`. Which means we only get the original voice over when playing in Polish.', 'comment_created': datetime.datetime(2021, 7, 18, 21, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 671904233, 'comment_body': 'Is the `lastText` check needed?\r\nI would think that the default action, which is `INTERRUPT_NO_REPEAT`, would take care of not repeating the text.\r\n\r\nAlso could you not use `_oldText` instead of `lastText`?\r\nActually it seems to me you could move the whole block after the\r\n```c++\r\nif (!_realTime && (text == _oldText))\r\n \t\treturn;\r\n```\r\nyou have just a few lines below and remove the strcmp check as a result.', 'comment_created': datetime.datetime(2021, 7, 18, 22, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 671904504, 'comment_body': ""This does not comply with our naming conventions for class member variables (missing leading `_`).\r\nAlso this engine does not use c++11, so the initialisation of the variable should be in the constructor initialisation list and not here.\r\nAnd finally, as noted in my previous comment, it seems to me you don't need to add this variable since we already have an `_oldText` variable in `InfoLine`."", 'comment_created': datetime.datetime(2021, 7, 18, 22, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 671907519, 'comment_body': 'Those are not class member variables, and thus should not start with an underscore.', 'comment_created': datetime.datetime(2021, 7, 18, 22, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 671907636, 'comment_body': ""I don't understand why you need the `_iWantToStopPlayingAlready` and `_thisIsAMistakeKeepPlaying` variables.\r\nCould you not use `_menu[n]->_text`?"", 'comment_created': datetime.datetime(2021, 7, 18, 22, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 671907689, 'comment_body': ""Also as I noted below I don't think you actually need those variables."", 'comment_created': datetime.datetime(2021, 7, 18, 22, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 671907788, 'comment_body': 'All variables, and I added a comment regarding another variable with the same issue.\r\nAlso the variable name should start with an underscore since it is a class member variable.', 'comment_created': datetime.datetime(2021, 7, 18, 22, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 671908056, 'comment_body': ""One more comment: I don't think you need to make this a class member variable. It seems to be used in a single place (in `CGE2Engine::run()` to set the language), so it would be simpler to just call `g_system->getTextToSpeechManager()` there rather than store it as a class variable."", 'comment_created': datetime.datetime(2021, 7, 18, 22, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 672403623, 'comment_body': 'ok, moved.', 'comment_created': datetime.datetime(2021, 7, 19, 15, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 672405968, 'comment_body': 'fixed. sorry for this!', 'comment_created': datetime.datetime(2021, 7, 19, 15, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 672408212, 'comment_body': ""It's there because it was also in `metaengine.cpp` for dreamweb, and moving it into the cge2 file throws this error\r\n\r\n```\r\nengines/cge2/cge2.cpp:203:25: error: member access into incomplete type\r\n      'const ADGameDescription'\r\n        return _gameDescription->language;\r\n                               ^\r\n```"", 'comment_created': datetime.datetime(2021, 7, 19, 15, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 672413940, 'comment_body': 'I just tried both `INTERRUPT_NO_REPEAT` and moving it after `_oldText`. What happens is the object get repeatedly said over when the cursor remains on the same object. ', 'comment_created': datetime.datetime(2021, 7, 19, 15, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 672437264, 'comment_body': ""This makes sense. I tried to do it but my compiler complained. I'll try to see again if I did anything wrong. \r\n```\r\nengines/cge2/vmenu.cpp:164:12: error: no matching member function for\r\n      call to 'say'\r\n                        ttsMan->say(_menu[0], Common::TextToSpe...\r\n                        ~~~~~~~~^~~\r\n```"", 'comment_created': datetime.datetime(2021, 7, 19, 16, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 672590638, 'comment_body': 'Indeed Dreamweb implements several `DreamWebEngine` functions in meta engine.cpp.\r\nThis seems a bit strange to me, but different developers would organise their code in slightly different ways. In the CGE2 engines it was not done this way, so I think it might be better not to introduce engine functions in the metaengine.cpp file.\r\n\r\nAny idea why you are getting this error?\r\nWhere the the `ADGameDescription` struct declared?', 'comment_created': datetime.datetime(2021, 7, 19, 20, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 672593585, 'comment_body': 'Indentation seems incorrect. Did you maybe use spaces instead of tabs on some of these lines? Line 186 seems to be the incorrect one.', 'comment_created': datetime.datetime(2021, 7, 19, 20, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 672595811, 'comment_body': 'You don\'t need to convert the language code to a string here. You can directly check the code:\r\n```c++\r\nif (!ConfMan.getBool(""tts_enabled_speech"") || getLanguage() == Common::PL_POL)\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 20, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 672601354, 'comment_body': ""Ah indeed. Using INTERRUPT_NO_REPEAT would prevent to interrupt and start again the string that it is currently speaking, but once it has finished speaking it, it can say it again.\r\n\r\nI would still expect the `text == _oldText` check to do the job, but I might be wrong there. It's possible that the pointers are different but the text value is the same. You should still be able to use the _oldText variable without having to add a `lastText` variable."", 'comment_created': datetime.datetime(2021, 7, 19, 20, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 672602601, 'comment_body': 'You need to pass the text of the menu, not the menu itself:\r\n```c++\r\nttsMan->say(_menu[n]->_text, Common::TextToSpeechManager::INTERRUPT)\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 20, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 673096450, 'comment_body': ""it's in engines/advancedDetector.h line 108\r\n```\r\n/**\r\n * Data table describing a game variant.\r\n */\r\nstruct ADGameDescription {\r\n\t/**\r\n\t * The gameid that identifies the game.\r\n\t *\r\n\t * Mainly used for taking the game description from the @ref PlainGameDescriptor table.\r\n\t */\r\n\tconst char *gameId;\r\n\r\n\t/**\r\n\t * Field that is used to distinguish between different variants of a game.\r\n\t *\r\n\t * The content of this field is inserted in the generated description for the config file game entry.\r\n\t * If the @ref kADFlagUseExtraAsHint ADFlag is set, the contents of this field are stored\r\n\t * in the config file, and are used to additionally distinguish between game variants.\r\n\t * Also, if the ADGF_USEEXTRAASTITLE game flag is set, the contents of this field\r\n\t * will be used as a description instead the one extracted from the @ref PlainGameDescriptor table.\r\n\t */\r\n\tconst char *extra;\r\n\r\n\t/**\r\n\t * A list of individual file entries used for detection.\r\n\t *\r\n\t * 13 files (last is zero-terminated) is the maximum number of files currently used in ScummVM.\r\n\t * A hardcoded number is used here due to a C++ limitation for defining const arrays.\r\n\t */\r\n\tADGameFileDescription filesDescriptions[14];\r\n\r\n\t/**\r\n\t * Language of the game variant.\r\n\t */\r\n\tCommon::Language language;\r\n\r\n\t/**\r\n\t * Platform of the game variant.\r\n\t */\r\n\tCommon::Platform platform;\r\n\r\n\t/**\r\n\t * A bitmask of extra flags.\r\n\t *\r\n\t * The top 16 bits are reserved for generic flags defined in @ref ADGameFlags.\r\n\t * This leaves 16 bits to be used by the client code.\r\n\t */\r\n\tuint32 flags;\r\n\r\n\t/**\r\n\t * Game features that are user-controllable.\r\n\t *\r\n\t * This list reflects which features of the GUI should be turned on or off in order to minimize user confusion.\r\n\t * For instance, there is no point in changing game language in single-language games\r\n\t * or have MIDI controls in a game that only supports digital music.\r\n\t */\r\n\tconst char *guiOptions;\r\n};\r\n```"", 'comment_created': datetime.datetime(2021, 7, 20, 12, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 673107366, 'comment_body': 'It is indeed.\r\nSo do you understand what the error means and how you can solve it?', 'comment_created': datetime.datetime(2021, 7, 20, 13, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 673184499, 'comment_body': 'Ah HA!', 'comment_created': datetime.datetime(2021, 7, 20, 14, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 673185834, 'comment_body': ""I think I also tried that and it didn't work as we would like it to "", 'comment_created': datetime.datetime(2021, 7, 20, 14, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 673186551, 'comment_body': 'ok', 'comment_created': datetime.datetime(2021, 7, 20, 14, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 673187271, 'comment_body': 'Fixed. I would really like to know what I did to make sporadic spaces appear in my code.....', 'comment_created': datetime.datetime(2021, 7, 20, 14, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 673555378, 'comment_body': 'This variable is still not initialized in the correct place. This should be done in the `VMenu` constructor implementation (in the menu.cpp file).', 'comment_created': datetime.datetime(2021, 7, 20, 23, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 673556572, 'comment_body': 'This variable can be moved to the `InfoLine` class.\r\nAlso it should be initialized in the talk.cpp file and not here. And it can probably be initialized to a null pointer and not an empty string (see the `_oldText` variable in the InfoLine class).', 'comment_created': datetime.datetime(2021, 7, 20, 23, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 673557331, 'comment_body': ""I will try to get you branch in the next few days to play a bit with this as I don't know why it would not work."", 'comment_created': datetime.datetime(2021, 7, 20, 23, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 674369277, 'comment_body': 'It would be better to do this initialisation in the constructor initializer list.', 'comment_created': datetime.datetime(2021, 7, 21, 21, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 674369745, 'comment_body': ""It would be better to do this initialisation in the constructor initializer list.\r\n\r\nIf you don't know what this means, see for example https://www.learncpp.com/cpp-tutorial/constructor-member-initializer-lists/"", 'comment_created': datetime.datetime(2021, 7, 21, 21, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 674375218, 'comment_body': 'I have verified that you don\'t need the `_lastText` check to prevent repeating the name of objects when the cursor is over an object.\r\n\r\nActually your current implementation is not ideal as when you move the cursor over an object it will speak its name, but then if you move the cursor away from the object, and then a bit later back on the object (without moving it on another object in between) it will not speak the name again. And I think it is wrong. Relying on the check already there with `_oldText` fixes this.\r\n\r\nSince you may not have understood properly what I suggested, here is the code I just tested and seems to work properly for me:\r\n```c++\r\nvoid InfoLine::update(const char *text) {\r\n\tif (!_realTime && (text == _oldText))\r\n\t\treturn;\r\n\r\n\t_oldText = text;\r\n\r\n\tCommon::TextToSpeechManager *ttsMan = g_system->getTextToSpeechManager();\r\n\tif (text && ttsMan != nullptr && ConfMan.getBool(""tts_enabled_objects""))\r\n\t\tttsMan->say(text);\r\n```', 'comment_created': datetime.datetime(2021, 7, 21, 22, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 675535743, 'comment_body': 'It now works for me. Thanks for the suggestion and code!', 'comment_created': datetime.datetime(2021, 7, 23, 12, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}, {'comment_id': 675536129, 'comment_body': 'Indeed. Deleting.', 'comment_created': datetime.datetime(2021, 7, 23, 12, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'taylorzhancher', 'type': 'User'}]","[{'commit_sha': '54eaedb9161e0eb58d3cc95b9771450ab2ab7184', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acabe3beeca99e89417bce85b04cf0b9cc2521a7', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45bd5d7eaf27bf1f800de3760c2ed400b8297d16', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb9a83168497ceba3b93f7032ddc2ec4f50370fb', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4141e6a3acee68de9226ed6e63a9a9dbcdb36de8', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a6ff38c190e1bd45984f75824da038dcd2ccf50', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b4917a9400400b7149052d62ecfd01a9c2b7afe', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c44539e95873006242102d61694602f11b7da6cc', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00b4be1cc60971e80a4cae525bae1640f4191bc3', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}]",,77198777,,User,,7,,1,1
710868275,SUPERNOVA: Text To Speech (TTS) for the game,"Tentatively adding TTS to the game
This includes
- Speech for opening intro story
- Speech for dialogue trees
- GUI option for TTS
<!---
Thank you for contributing to ScummVM. Please read the following carefully before submitting your Pull Request.

Make sure your individual commits follow the guidelines found in the ScummVM Wiki: https://wiki.scummvm.org/index.php?title=Commit_Guidelines. If they're not please edit them before submitting the Pull Request.

Proper documentation must also be included for common code and changes impacting user facing elements.

Commits and Pull Requests should use the following template:

```
SUBSYSTEM: Short (50 chars or less) summary of changes

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Write your commit message in the present tense: ""Fix bug"" and not ""Fixed
bug.""  This convention matches up with commit messages generated by
commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, preceded by a
 single space, with blank lines in between, but conventions vary here

- Use a hanging indent
```
--->
",True,3267,https://api.github.com/repos/scummvm/scummvm/pulls/3267,https://github.com/scummvm/scummvm/pull/3267,closed,53,9,5,5,6,16,1,0,[{'name': 'GSoC'}],2021-08-12 12:56:16+00:00,2021-09-04 18:24:13+00:00,2006877.0,"23 days, 5:27:57","[{'comment_id': 688136613, 'comment_body': 'You are missing the text for the `if (_texts[_rowsStart[number]] == kStringDialogSeparator)` case.\r\nThe following should do it:\r\n```c++\r\nif (_texts[_rowsStart[number]] == kStringDialogSeparator) {\r\n    _vm->renderText(kStringConversationEnd, 1, 142 + _rowsStart[number] * 10, brightness ? kColorRed : kColorDarkRed);\r\n    string = _vm->getGameString(kStringConversationEnd);\r\n} else {\r\n```\r\nAlso have you tested this code?\r\nAs it is, it will speak the text whenever drawn. In particular when you move the cursor from one dialog option to another it will speak both (maybe even all of them if it redraws everything). It is probably better to only speak the option onto which you moved the cursor. This can be achieved by only using the TTS if `brightness` is true.\r\n\r\nAnd you are also missing a check that `ttsMan` is not a nullptr and that TTS is enabled in the options.', 'comment_created': datetime.datetime(2021, 8, 12, 22, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 688137151, 'comment_body': 'There is no need to create those two variables if number is negative since they will not be used. So it would be better to create them after the `if (number < 0) return;`.', 'comment_created': datetime.datetime(2021, 8, 12, 22, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 688139796, 'comment_body': 'To test this, here is a savegame for the first game (you will need to unzip it). After loading this, just talk to the doorman.\r\n[msn_save.006.zip](https://github.com/scummvm/scummvm/files/6978973/msn_save.006.zip)\r\n', 'comment_created': datetime.datetime(2021, 8, 12, 23, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 688147605, 'comment_body': 'You forgot to add it for the msn2 detection entries as well.', 'comment_created': datetime.datetime(2021, 8, 12, 23, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 688148173, 'comment_body': 'Why did you add the TTS here and not in `Screen::renderMessage(const char *text, MessagePosition position, int positionX, int positionY)`?\r\n\r\nThat other render message is called from here, but it is also sometimes called directly. And when called directly it will be missing the TTS. So it would be better to move the TTS to that other one.\r\n\r\nI am also wondering if queuing might not be better than interrupt here.', 'comment_created': datetime.datetime(2021, 8, 12, 23, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 688149074, 'comment_body': 'Here is a savegame for Mission Supernova 2 that will show the issue. You will need to unzip it. After loading the savegame, go to the Entrance (top right) and then click through the dialog. You will see that you are missing the reaction of the audience, but if you move the TTS to the place I suggest it should work.\r\n[ms2_save.014.zip](https://github.com/scummvm/scummvm/files/6979064/ms2_save.014.zip)\r\n', 'comment_created': datetime.datetime(2021, 8, 12, 23, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 689066743, 'comment_body': ""If you are going to make this a member variable for the `GameManager` class, don't set it every time  `processInput()` gets called. Instead it should be set in the `GameManager` constructor.\r\n\r\nBut I don't see the benefit of having it as a member variable here."", 'comment_created': datetime.datetime(2021, 8, 15, 10, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 689066814, 'comment_body': ""Don't forget to test that the `_ttsMan` is not a nullptr and that tts is enabled."", 'comment_created': datetime.datetime(2021, 8, 15, 10, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 689067048, 'comment_body': ""Also see my comments in the pull request. Quick summary as a reminder:\r\n * You don't need to specify the `Common::TextToSpeechManager::INTERRUPT_NO_REPEAT` since this is the default.\r\n * I am not sur the inventory arrow text can actually be spoken.\r\n * For the case below I think you need to get the text from the `_currentInputObject` and not from the `_guiInventory` as the later may not be set."", 'comment_created': datetime.datetime(2021, 8, 15, 10, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 689067735, 'comment_body': 'Same remark as above. Either set the `_ttsMan` in the `GameManager` constructor, or change it to a local variable.', 'comment_created': datetime.datetime(2021, 8, 15, 10, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 689068569, 'comment_body': ""Either set `_ttsMan` in the `Screen` constructor, or change it to a local variable.\r\nBut again I don't see the benefit of having this as a class member variable, so I would suggest making it a local variable."", 'comment_created': datetime.datetime(2021, 8, 15, 10, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 689068752, 'comment_body': ""I don't see the benefit of having it as a class member variable since it is only used once in one place. I would suggest to use a local variable in `SupernovaEngine::run()` instead."", 'comment_created': datetime.datetime(2021, 8, 15, 10, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 689149395, 'comment_body': 'I think you added that file by mistake here. Please remove it.', 'comment_created': datetime.datetime(2021, 8, 15, 22, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 689149453, 'comment_body': 'And this one as well.', 'comment_created': datetime.datetime(2021, 8, 15, 22, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 689149674, 'comment_body': '```suggestion\r\n\t\t\t\tif (ttsMan != nullptr && ConfMan.getBool(""tts_enabled"") && !isNullObject(_currentInputObject))\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 22, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}, {'comment_id': 689149736, 'comment_body': '```suggestion\r\n\t\t\t\tif (ttsMan != nullptr && ConfMan.getBool(""tts_enabled"") && !isNullObject(_currentInputObject))\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 22, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'criezy', 'type': 'User'}]","[{'commit_sha': '97733b6f27c938b8bec72e0d840394dcca7339dc', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc11f6acd8afdd1d600f80f9088b1e7e310148de', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e2b0c691368323aca56d8892411266303f0048d', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8656f14d084c2b90c9b8acef2c492ec4d0c65777', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e56ab82ba24fc8147a45aaef801a73e160ab59eb', 'committer_username': 'taylorzhancher', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 9, 13, 45, 50, tzinfo=datetime.timezone.utc)}]",,77198777,,User,,7,,1,1

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
1358940,scummvm,scummvm/scummvm,C++,1016,2264,136,789,154881,44,39,44,"[{'id': 710868275, 'number': 3267, 'closed': datetime.datetime(2021, 9, 4, 18, 24, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 12, 56, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2006877.0, 'time_delta': '23 days, 5:27:57', 'additions': 53, 'deletions': 9, 'state': 'closed'}, {'id': 707328180, 'number': 3256, 'closed': datetime.datetime(2021, 12, 19, 20, 13, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 12, 55, 26, tzinfo=datetime.timezone.utc), 'time_taken': 11344655.0, 'time_delta': '131 days, 7:17:35', 'additions': 166, 'deletions': 21, 'state': 'closed'}, {'id': 693492804, 'number': 3177, 'closed': datetime.datetime(2021, 7, 21, 20, 36, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 14, 0, 57, tzinfo=datetime.timezone.utc), 'time_taken': 110104.0, 'time_delta': '1 day, 6:35:04', 'additions': 11, 'deletions': 15, 'state': 'closed'}, {'id': 693424473, 'number': 3176, 'closed': datetime.datetime(2021, 7, 20, 13, 23, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 12, 27, 59, tzinfo=datetime.timezone.utc), 'time_taken': 3358.0, 'time_delta': '0:55:58', 'additions': 41, 'deletions': 8, 'state': 'closed'}, {'id': 689869604, 'number': 3156, 'closed': datetime.datetime(2021, 7, 26, 11, 35, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 14, 12, 26, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1033733.0, 'time_delta': '11 days, 23:08:53', 'additions': 64, 'deletions': 8, 'state': 'closed'}, {'id': 689863845, 'number': 3155, 'closed': datetime.datetime(2021, 7, 17, 6, 27, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 14, 12, 17, 59, tzinfo=datetime.timezone.utc), 'time_taken': 238183.0, 'time_delta': '2 days, 18:09:43', 'additions': 41, 'deletions': 8, 'state': 'closed'}, {'id': 673950599, 'number': 3077, 'closed': datetime.datetime(2021, 6, 20, 0, 12, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 20, 0, 5, 7, tzinfo=datetime.timezone.utc), 'time_taken': 460.0, 'time_delta': '0:07:40', 'additions': 31, 'deletions': 2, 'state': 'closed'}, {'id': 663189813, 'number': 3048, 'closed': datetime.datetime(2021, 9, 4, 18, 27, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 7, 5, 38, 30, tzinfo=datetime.timezone.utc), 'time_taken': 7735756.0, 'time_delta': '89 days, 12:49:16', 'additions': 184, 'deletions': 3, 'state': 'closed'}, {'id': 608539682, 'number': 2912, 'closed': datetime.datetime(2021, 6, 8, 17, 23, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 4, 12, 38, 43, tzinfo=datetime.timezone.utc), 'time_taken': 5633101.0, 'time_delta': '65 days, 4:45:01', 'additions': 203, 'deletions': 31, 'state': 'closed'}, {'id': 607980574, 'number': 2908, 'closed': datetime.datetime(2021, 4, 5, 5, 54, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 2, 11, 17, 19, tzinfo=datetime.timezone.utc), 'time_taken': 239835.0, 'time_delta': '2 days, 18:37:15', 'additions': 42, 'deletions': 0, 'state': 'closed'}, {'id': 607974928, 'number': 2907, 'closed': datetime.datetime(2021, 4, 2, 11, 2, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 2, 11, 2, 18, tzinfo=datetime.timezone.utc), 'time_taken': 28.0, 'time_delta': '0:00:28', 'additions': 56, 'deletions': 2, 'state': 'closed'}, {'id': 607963207, 'number': 2906, 'closed': datetime.datetime(2021, 4, 2, 11, 17, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 2, 10, 31, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2789.0, 'time_delta': '0:46:29', 'additions': 56, 'deletions': 2, 'state': 'closed'}]"
