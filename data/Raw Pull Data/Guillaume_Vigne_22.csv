pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1033831372,Make LOBPCG GPU-compatible,"This draft PR implements GPU compatibility for LOBPCG. 
At the highest level, the goal is to be able to call LOBPCG with either Arrays or any type of GPU Arrays. This means the user should be able to make the following calls (A is a Hermitian matrix and X is vector)
`LOBPCG(A,X) #CPU`
`LOBPCG(CuArray(A),CuArray(X)) #GPU`
`LOBPCG(ROCArray(A),ROCArray(X)) #GPU`
LOBPCG returns a named tuple. One of the field is an array of the eigenvalues found, and another is the corresponding eigenvectors. These two fields have the same array type as the input: if the user calls LOBPCG with CuArrays, then the eigenvalues and eigenvectors will be stored in a CuArray.

I tried to make the code as abstract as possible so as not to rely on a hardware-specific library. The only part where I needed to call specific CUDA functions (I am using an NVIDIA GPU) is when computing eigenvalues. If I am not mistaken, there is no generic `eigen` function in CUDA.jl, so I had to manually call the eigendecomposition functions (CUDA.syevd! and CUDA.heevd!). ",True,711,https://api.github.com/repos/JuliaMolSim/DFTK.jl/pulls/711,https://github.com/JuliaMolSim/DFTK.jl/pull/711,closed,153,36,6,19,4,67,0,0,[],2022-08-23 08:26:49+00:00,2022-09-28 13:05:38+00:00,3127129.0,"36 days, 4:38:49","[{'comment_id': 967816690, 'comment_body': 'That looks like an unintentional whitespace commit.', 'comment_created': datetime.datetime(2022, 9, 11, 12, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 967816881, 'comment_body': 'Use multiple dispatch on element type of CuArray.', 'comment_created': datetime.datetime(2022, 9, 11, 12, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 967817030, 'comment_body': 'You should in each case add a comment with the issue numbers in GpuArrays, CUDA etc. where you track these missing functionalities.', 'comment_created': datetime.datetime(2022, 9, 11, 12, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 967817207, 'comment_body': 'Why is this function not covered by tests? Did you check you end up dispatching correctly?', 'comment_created': datetime.datetime(2022, 9, 11, 12, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 967817418, 'comment_body': 'Just make this a constructor?', 'comment_created': datetime.datetime(2022, 9, 11, 12, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 967817475, 'comment_body': 'You can also nuke BlockArrays from our dependencies.', 'comment_created': datetime.datetime(2022, 9, 11, 12, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 967818785, 'comment_body': 'This is not type stable, which matters here because of performance. You have to make `Tuple` a concrete type.', 'comment_created': datetime.datetime(2022, 9, 11, 12, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 967818971, 'comment_body': 'Also not too big a fan of having this function. Why not define\r\n```julia\r\nBase.:*(A::Adjoint{T, <: BlockMatrix}, B::BlockMatrix) where {T})\r\n```\r\ninstead?', 'comment_created': datetime.datetime(2022, 9, 11, 12, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 969443450, 'comment_body': ""Yes, I thought this would also be an issue. The thing is, we sometimes build a BlockMatrix with arrays which are views of other arrays. And taking the view of an array builds a `SubArray` which derives from AbstractArray.\r\nSo mixed in BlockMatrix we can have either arrays or subarrays which do not have a concrete type in common: the only thing they have in common is that they derive from AbstractArray. I may be wrong, but I can't think of an easy way to make this field concrete by keeping the code the way it is: maybe we shouldn't give a BlockMatrix views?"", 'comment_created': datetime.datetime(2022, 9, 13, 10, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 969443907, 'comment_body': ""You're right: no need for a function with a weird name."", 'comment_created': datetime.datetime(2022, 9, 13, 10, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 969528354, 'comment_body': 'Like this?\r\n```julia\r\nstruct BlockMatrix{T <: AbstractFloat, D <: Tuple} <: AbstractMatrix{T}\r\n    blocks::D\r\nend\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 11, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 969529091, 'comment_body': ""btw. Not sure we should have the `size` as a member. It's easily computed on the fly from the constituents of `blocks`."", 'comment_created': datetime.datetime(2022, 9, 13, 11, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 970554036, 'comment_body': ""You're right: I was trying to describe more precisely what was hidden behind the Tuple, but doing `D <: Tuple` will work.\r\nAs for the size, I created this member so we don't have to recompute every time the size of the BlockMatrix. As it turns out, we are not using it much and it can be computed very easily, so we can drop it."", 'comment_created': datetime.datetime(2022, 9, 14, 9, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 970557692, 'comment_body': ""At first I thought defining it this way would be clearer: as it turns out, it's just weird and confusing. I re-wrote the `block_overlap` functions, now we only overload `Base.*`."", 'comment_created': datetime.datetime(2022, 9, 14, 9, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 977548714, 'comment_body': ""I think that's fine, why would it be an issue?"", 'comment_created': datetime.datetime(2022, 9, 22, 11, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977550476, 'comment_body': 'Document it here instead of at the constructor', 'comment_created': datetime.datetime(2022, 9, 22, 11, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977778532, 'comment_body': ""In particular it would be nice if it was more clear that it is column blocks, but I don't find a good name, so just make it clear from a comment that it is a horizontal concatenation of blocks"", 'comment_created': datetime.datetime(2022, 9, 22, 15, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977779147, 'comment_body': "" You're beginning an enumeration with one item"", 'comment_created': datetime.datetime(2022, 9, 22, 15, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977779402, 'comment_body': 'height -> number of rows', 'comment_created': datetime.datetime(2022, 9, 22, 15, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977780076, 'comment_body': 'this is very internal, no need to have a nice error message, just say @assert n_ref == n_i', 'comment_created': datetime.datetime(2022, 9, 22, 15, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977780836, 'comment_body': 'or just @assert all(size.(arrays, 1) .== n_ref)', 'comment_created': datetime.datetime(2022, 9, 22, 15, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977783696, 'comment_body': 'note that these are relatively simple wrappers only supporting some multiplication routines, and in particular operations with them materialize to plain arrays', 'comment_created': datetime.datetime(2022, 9, 22, 15, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977784524, 'comment_body': 'remove docstring (* does what * does)', 'comment_created': datetime.datetime(2022, 9, 22, 15, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977785529, 'comment_body': '.= for this type of stuff (possibly equivalent here, but better practice for this type of operaitons)', 'comment_created': datetime.datetime(2022, 9, 22, 15, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977786839, 'comment_body': 'remove docstring (see above)', 'comment_created': datetime.datetime(2022, 9, 22, 15, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977788000, 'comment_body': 'really? even with dots? I find that surprising', 'comment_created': datetime.datetime(2022, 9, 22, 15, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977788462, 'comment_body': 'remove comment, remove typing of variables', 'comment_created': datetime.datetime(2022, 9, 22, 15, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977789549, 'comment_body': 'you can just use 1 here now, right?', 'comment_created': datetime.datetime(2022, 9, 22, 15, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977789831, 'comment_body': 'remove comment', 'comment_created': datetime.datetime(2022, 9, 22, 15, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977790596, 'comment_body': 'technically here we should probably do as above, but who cares', 'comment_created': datetime.datetime(2022, 9, 22, 15, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977793213, 'comment_body': '`zero(similar(` allocates twice. Should we have a `zeros_like` function or something, that could fallback to `zero(similar(` but be better optimized in specific cases?', 'comment_created': datetime.datetime(2022, 9, 22, 15, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977793632, 'comment_body': 'ping @vchuravy who might have an opinion', 'comment_created': datetime.datetime(2022, 9, 22, 15, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977795631, 'comment_body': ""also explain relationship to BlockArrays (it's a lightweight subset of functionality, it materializes to plain arrays, it supports GPU)"", 'comment_created': datetime.datetime(2022, 9, 22, 15, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977796865, 'comment_body': ""Re name : LazyHcat? (because it's basically equivalent to `hcat` but better optimized)"", 'comment_created': datetime.datetime(2022, 9, 22, 15, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 977848993, 'comment_body': ""I don't really know how type conversion can affect the computations. The way I see it, we can either code the struct like a  Tuple (can hold different types of arrays, possibly with different types of elements in them) or like a Vector (everything gets converted to a common type). I was wondering if mixing all the types together (ie coding the struct like a Tuple) wouldn't induce computational errors, as we keep converting things back and forth."", 'comment_created': datetime.datetime(2022, 9, 22, 16, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 978303400, 'comment_body': ""There's no conversion at all here. You just use the tuple elements in `mul!` functions, which dispatches to the correct function. I don't think there's any need to change what you have now"", 'comment_created': datetime.datetime(2022, 9, 23, 6, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 978344439, 'comment_body': 'I think LazyHcat is not too bad: it\'s clearer to have ""hcat"" than to just have the generic ""block"" which doesn\'t give a lot of information. And we probably never will have to implement a true block-matrix structure for LOBPCG.', 'comment_created': datetime.datetime(2022, 9, 23, 7, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 978366016, 'comment_body': 'I did some more testing, and you are right: it is indeed the same when using dots. I removed the comment.', 'comment_created': datetime.datetime(2022, 9, 23, 8, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 978366992, 'comment_body': 'Yes, 1 works fine now.', 'comment_created': datetime.datetime(2022, 9, 23, 8, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 978376313, 'comment_body': 'I rewrote the documentation, all of this has been summed up when defining the struct. ', 'comment_created': datetime.datetime(2022, 9, 23, 8, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 980184864, 'comment_body': ""```\r\ne = similar(X, size(cX, 1), M - prev_nlocked)\r\ne .= 0\r\n```\r\n\r\nBut yeah it's annoying that there is no `similar(....; init=0)`"", 'comment_created': datetime.datetime(2022, 9, 26, 15, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vchuravy', 'type': 'User'}, {'comment_id': 980188320, 'comment_body': 'Would be good if we can avoid this direct dependency', 'comment_created': datetime.datetime(2022, 9, 26, 15, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vchuravy', 'type': 'User'}, {'comment_id': 980188670, 'comment_body': 'Is `GPUArraysCore` sufficient?', 'comment_created': datetime.datetime(2022, 9, 26, 15, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vchuravy', 'type': 'User'}, {'comment_id': 980190016, 'comment_body': 'We should open a PR to CUDA.jl to implement this there.', 'comment_created': datetime.datetime(2022, 9, 26, 15, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vchuravy', 'type': 'User'}, {'comment_id': 980223203, 'comment_body': 'one space before `=`', 'comment_created': datetime.datetime(2022, 9, 26, 15, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 980223656, 'comment_body': 'space after `,`', 'comment_created': datetime.datetime(2022, 9, 26, 15, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 980225576, 'comment_body': 'Any reason you are removing the NaN check again?', 'comment_created': datetime.datetime(2022, 9, 26, 15, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 980227123, 'comment_body': ""We don't put spaces around the `:`."", 'comment_created': datetime.datetime(2022, 9, 26, 15, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 980227401, 'comment_body': 'spaces after `,`.', 'comment_created': datetime.datetime(2022, 9, 26, 15, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 980394101, 'comment_body': ""Hm. OK then let's just have our own `zeros_like` function that does this, and later as we figure out the patterns we use we can design our own mini-API (eg something to replace comprehensions). Sucks there's no standard way to do this."", 'comment_created': datetime.datetime(2022, 9, 26, 18, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 980876079, 'comment_body': ""Don't we need it because of the functions in `workaround/gpu_arrays.jl`? For the `eigen` workaround for example, we explicitly use CUDA functions, so if I understand correcly, we need to have CUDA as a dependency for DFTK. As soon as the workarounds are implemented in CUDA, we could remove this."", 'comment_created': datetime.datetime(2022, 9, 27, 7, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 980876849, 'comment_body': 'Absolutely no reason: this is a mistake I made when merging the master branch into this one. Sorry!', 'comment_created': datetime.datetime(2022, 9, 27, 7, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 980913916, 'comment_body': ""I made a few tests, and it is sufficient. This is the same problem as with the dependency with CUDA: we only really need functionalities from GPUArrays for our workarounds. They shouldn't be in DFTK, but rather merged into the GPU packages: when they'll be implemented, we can remove GPUArrays and CUDA from the dependencies."", 'comment_created': datetime.datetime(2022, 9, 27, 8, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 981056531, 'comment_body': ""Not really GPU-specific. I'd move it to src/common.\r\n\r\nBut to be completely honest: I don't think we even need it at all, because `Z = similar(X, n, m) .= 0` does exactly the same thing, is more general (as other forms of similar could be used) and is also just one line.\r\n\r\n@antoine-levitt Don't you think that's sufficient for now?"", 'comment_created': datetime.datetime(2022, 9, 27, 10, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 981057096, 'comment_body': 'No space before `,`', 'comment_created': datetime.datetime(2022, 9, 27, 10, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 981078307, 'comment_body': 'The reason I put it in the GPU workarounds is that I had to use `zeros(similar())` to distinguish between the cases where `X` is a GPU array and `X` a CPU array. For the CPU version, there is no need for this, as we can directly call `zeros`: but when mixing CPU and GPU, what we really want to do is call Base.zeros, or CUDA.zeros (or AMDGPU.zeros...) depending on the input type of `X`. The only way I found to have this type of behavior is to first use similar.', 'comment_created': datetime.datetime(2022, 9, 27, 10, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 981085872, 'comment_body': ""> But to be completely honest: I don't think we even need it at all, because Z = similar(X, n, m) .= 0 does exactly the same thing, is more general (as other forms of similar could be used) and is also just one line.\r\n\r\nThis is a bit ugly, and also it's possible that this can be optimized in the future (eg for arrays `zeros` does exactly this right now, but could conceivably use `calloc` in future versions of julia), so having a function in src/common makes it easier. You can have this version in src/common, then overload for X::CuArray in the workarounds if you want"", 'comment_created': datetime.datetime(2022, 9, 27, 10, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 981179240, 'comment_body': ""ok, let's have a `zeros_like` which works like `similar` but allocates zeros and put it in common. If we want to avoid direct dependency on CUDA (which we should!) we have no other option than avoiding the use of CUDA.zeros. But of course we could still specialise for `<: Array` arguments."", 'comment_created': datetime.datetime(2022, 9, 27, 12, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 981334892, 'comment_body': 'Should not be needed.', 'comment_created': datetime.datetime(2022, 9, 27, 14, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 981349761, 'comment_body': 'I would make this more general directly:\r\n```suggestion\r\nfunction zeros_like(X::AbstractArray, T::Type=eltype(X), dims::Integer...=size(X)...)\r\n    Z = similar(X, T, dims...)\r\n    Z .= 0\r\n    Z\r\nend\r\nzeros_like(X::AbstractArray, dims::Integer...) = zeros_like(X, eltype(X), dims...)\r\nzeros_like(X::Array, T::Type=eltype(X), dims::Integer...=size(X)...) = zeros(T, dims...)\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 982117271, 'comment_body': ""This doesn't seem to work because of  the default value for `dims`.\r\nI'm a bit confused by the slurping operator. I understand it's purpose, but I don't find the syntax very clear. From what I understand by reading the docs, writing `dims::Integer...` means we want n integers to be merged into a tuple called dims: so implicitly, `dims` is here a Tuple of Integers. Is this correct? If it is, then it would explain why we can't write `dims::Integer=size(X)` as `size(X)` is a Tuple, not an Integer.\r\nWhat syntax can use to explicitly say that we want `dims` (the tuple) to be `size(X)` (a tuple) by default? Or is there a way to flatten `size(X)`?"", 'comment_created': datetime.datetime(2022, 9, 28, 8, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 982128246, 'comment_body': ""> This doesn't seem to work because of the default value for dims.\r\n\r\nIndeed, I had some typos in my code, corrected now.\r\n\r\n> so implicitly, dims is here a Tuple of Integers. Is this correct?\r\n\r\nyes\r\n\r\n> Or is there a way to flatten size(X)?\r\n\r\nYes, more `...` ;), see the updated code snippet."", 'comment_created': datetime.datetime(2022, 9, 28, 8, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 982129992, 'comment_body': ""Hum, you are right. But now I'm confused as to why this type of import is required in the tests (such as [here](https://github.com/JuliaMolSim/DFTK.jl/blob/a96f551ed78a47f6cbd5280fedf08f6a7443d31e/test/adaptive_damping.jl#L3)). Is this because the file `lobpcg_hyper_imp` is under `src`, which is also where we define all the functions which be accessed through the DFTK package (in the [DFTK.jl file](https://github.com/JuliaMolSim/DFTK.jl/blob/a96f551ed78a47f6cbd5280fedf08f6a7443d31e/src/DFTK.jl)), whereas the tests are in an other, possibly independent directory?"", 'comment_created': datetime.datetime(2022, 9, 28, 8, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 982133041, 'comment_body': 'The tests run the code ""from the outside"" in a new environment to emulate how DFTK would be used. That\'s why you need to import not exported functions, but inside DFTK itself you don\'t need to import module-internal stuff.', 'comment_created': datetime.datetime(2022, 9, 28, 8, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 982133517, 'comment_body': 'The directory is just for us humans. Julia does not care about this.', 'comment_created': datetime.datetime(2022, 9, 28, 8, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 982151522, 'comment_body': 'Oh, ok, makes sense!', 'comment_created': datetime.datetime(2022, 9, 28, 9, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 982153560, 'comment_body': 'Alright, I see now. I think I was expecting some sort of internal imports inside DFTK, but they are not needed. Thanks!', 'comment_created': datetime.datetime(2022, 9, 28, 9, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}]","[{'commit_sha': '947f4a89c9622872d135d087c93bf297da7e3e2b', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8efb25945cafb4589355cc244a813ca13ba3dcb', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26e226be7a67f4da8bd5726acf97473dfa0052e2', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48bb4be975a39ecab97186f04517a77135e68a46', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91a8b09221fd44c685b2628b1421333da244d329', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2a874c2e1b0ba7b42e03dff4ca99766cf653e3f', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9268d68a40f7fc6ae3e82d8e756af842facc41c0', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd882b913e07dc47f628031209926e412aa00a3bd', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38eae101738e8e994b2bd9280fde0f61eae59693', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8926568300d4ecfb493fb5fb82cdccfce2da6e62', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da2cb59bd89892b34e1927e6351bc2066608db51', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26b760b2dc79f4e12f0eb1560c3ae742ec604fbe', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d424e1bf425caecde3bf8600873d232be44128e', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce5da66009440bd8552429eb8cfe96944da16564', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0e3b8ea5ecf4159208b333ff27be47e29a9c514', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '380f3cf708b138e2ac193325d2e223f39e78ab75', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22784329c43103f9802224b8c8b092e255e01a81', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba75d40ae199b5ca6f833cd351d82022340e184', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0406d6ab11a7933695d6ede3cc6e0b545d5658cf', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}]",,72138169,,User,,14,,1,3
1035096505,Make some computations in DFTK GPU-compatible,"This PR is a followup of [this one](https://github.com/JuliaMolSim/DFTK.jl/pull/711), which implements GPU compatibility for LOBPCG. If you have any questions/remarks as to how LOBPCG works, please refer to this other PR. 

The goal of the following PR is to implement GPU compatibility for some computations made by DFTK. This mainly means modifying the PlaneWaveBasis so it can store GPUArrays, and extending the `apply!` functions to allow the Hamiltonian and its operators to be applied to GPUArrays.

From an end user perspective, the only thing that changes is when he builds the basis. There is now an optional argument `array_type` which tells the code which type of array structure should be used. For example :
   ```
 basis = PlaneWaveBasis(model; Ecut=30, kgrid=(1, 1, 1)) # Computations will happen on CPU
 basis_gpu = PlaneWaveBasis(model; Ecut=30, kgrid=(1, 1, 1), array_type = CuArray) #Computations will happen on GPU using CUDA
```
The end-user can then call the SCF with either `basis` or `basis_gpu`.

I used CUDA since I have an NVIDIA GPU, but this part of the code should also work with other GPUs, since I did not use any CUDA-specific function.
    

Things that I already know could be greatly improved:

-   The preconditionners. For now they work, but two things could be done. The first one is offload `mean_kin` to the GPU. That would require some work, as it means we would have to rewrite `ldiv!` and `mul!` (which right now does a lot of scalar indexing). ~~The other thing would be to build `kin` directly on the GPU instead of building it on CPU then offloading it (which is currently being done). In order to do this, we would need `Gplusk_vectors_cart` to return a GPUArray: this means that `G_vectors(basis, kpoint)` should return a GPUArray, ie that `kpt.G_vectors` should be on GPU. And this is going to be quite hard, as it means that we would have to rewrite every function calling `G_vectors(basis, kpoint)` to be GPU-compatible.~~
-  The solvers. I didn't manage to make the NLSolve solvers work, so I had to use the ones implementend in DFTK. `scf_damping_solver` works fine, but not `scf_anderson_solver` as I didn't manage to write it in a GPU-compatible way.
-  The terms. I have implemented the ""easy"" terms (Kinetic, AtomicLocal, AtomicNonlocal and Hartree), but we could add the Magnetic, PairWisePotential, Anyonic and XC terms. These terms will be much harder to implement, as they either vastly use scalar indexing or rely on other librairies (libxc).

**Edit:**  Two big changes:
- The G_vectors for each kpoint and the occupation have been offloaded to the GPU. However, to do this, some functions (like `compute_density`) have to bring those arrays back on the CPU, as they do scalar indexing. This could be improved if it is performance-critical.
- The Anderson solver will work in CUDA once [this bug](https://github.com/JuliaGPU/CUDA.jl/pull/1584) has been solved. We will only have to allow scalar indexing on `βs`, which should really be fine as it isn't a big vector.",True,712,https://api.github.com/repos/JuliaMolSim/DFTK.jl/pulls/712,https://github.com/JuliaMolSim/DFTK.jl/pull/712,closed,324,145,38,98,17,134,0,0,[],2022-08-24 07:39:00+00:00,2022-11-22 14:48:36+00:00,7801776.0,"90 days, 7:09:36","[{'comment_id': 995426091, 'comment_body': 'This should not be here', 'comment_created': datetime.datetime(2022, 10, 14, 7, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 995500983, 'comment_body': 'Not sure about removing these ... sorry I was only talking about the `using CUDA`.', 'comment_created': datetime.datetime(2022, 10, 14, 8, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 995665532, 'comment_body': 'You can actually use this in the middle of a function. This saves you from duplicating 3 lines of code.', 'comment_created': datetime.datetime(2022, 10, 14, 11, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 995718481, 'comment_body': 'Oh, neat! I underestimated the `@static` macro.', 'comment_created': datetime.datetime(2022, 10, 14, 12, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 1003270017, 'comment_body': 'We dropped pymatgen support in the tests/examples some time ago. Just replace by doing the same thing in ASE (see https://docs.dftk.org/stable/examples/supercells/):\r\n```suggestion\r\nsupercell = ase_atoms(lattice, atoms, positions) * (repeat, 1, 1)\r\nlattice   = load_lattice(supercell)\r\npositions = load_positions(supercell)\r\natoms     = fill(Si, length(positions))\r\n```', 'comment_created': datetime.datetime(2022, 10, 24, 12, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1017588295, 'comment_body': 'did you check the compiler was smart enough to get rid of the closure and inline it directly?', 'comment_created': datetime.datetime(2022, 11, 9, 8, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017589627, 'comment_body': '_gen_matmul?', 'comment_created': datetime.datetime(2022, 11, 9, 8, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017590364, 'comment_body': 'or matvec here and matmat for the matrix case', 'comment_created': datetime.datetime(2022, 11, 9, 8, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017591902, 'comment_body': 'hm no because the matrix case is not just a matmul but a conjugation', 'comment_created': datetime.datetime(2022, 11, 9, 8, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017594373, 'comment_body': ""honestly you're better off writing these explicitly rather than with the auxiliary `_closure` functions (here and in the vec case)"", 'comment_created': datetime.datetime(2022, 11, 9, 8, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017594992, 'comment_body': ""Is this formatting @mfherbst - approved? (personally I don't care)"", 'comment_created': datetime.datetime(2022, 11, 9, 8, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017603317, 'comment_body': ""Can't we do `{GT <: AbstractVector{Vec3{Int}}}`? Also call it `T_G_vectors`?"", 'comment_created': datetime.datetime(2022, 11, 9, 8, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017605468, 'comment_body': 'Note \r\n```\r\njulia> Vector{Float64} <: AbstractVector{Float64}\r\ntrue\r\n```\r\nThis also works for `Vector{Real} <: AbstractVector{Real}`', 'comment_created': datetime.datetime(2022, 11, 9, 8, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017607244, 'comment_body': 'same as above, you should be able to precise the types, and also call them more distinctive names', 'comment_created': datetime.datetime(2022, 11, 9, 8, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017609063, 'comment_body': ""Hm, it's a bit annoying that you can pass either a concrete instance or the type; I'd just pick one"", 'comment_created': datetime.datetime(2022, 11, 9, 8, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017616710, 'comment_body': 'Needs to be documented', 'comment_created': datetime.datetime(2022, 11, 9, 8, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017622437, 'comment_body': ""In particular should make clear it's not specified whether the resulting array shares its memory with `src` or not"", 'comment_created': datetime.datetime(2022, 11, 9, 8, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017625870, 'comment_body': ""And can't you use `convert`/`oftype` directly for this? Eg this works:\r\n```\r\njulia> a = @SVector [1,2]\r\n2-element SVector{2, Int64} with indices SOneTo(2):\r\n 1\r\n 2\r\n\r\njulia> convert(Array, a)\r\n2-element Vector{Int64}:\r\n 1\r\n 2\r\n```"", 'comment_created': datetime.datetime(2022, 11, 9, 8, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017637377, 'comment_body': 'have this as second argument instead?', 'comment_created': datetime.datetime(2022, 11, 9, 8, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017637456, 'comment_body': '(or kwarg)', 'comment_created': datetime.datetime(2022, 11, 9, 8, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017639080, 'comment_body': 'why this style here and not below?', 'comment_created': datetime.datetime(2022, 11, 9, 8, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017640784, 'comment_body': 'ah, tricky point!', 'comment_created': datetime.datetime(2022, 11, 9, 8, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017641592, 'comment_body': ""I don't mind it but be careful to do it everywhere"", 'comment_created': datetime.datetime(2022, 11, 9, 8, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017642440, 'comment_body': 'keep the comment?', 'comment_created': datetime.datetime(2022, 11, 9, 8, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017643218, 'comment_body': 'open an issue in the CUDA repo, and link to it', 'comment_created': datetime.datetime(2022, 11, 9, 8, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017647063, 'comment_body': ""and if it's only necessary in the CUDA case, add a fast path for CPU that avoids the copy"", 'comment_created': datetime.datetime(2022, 11, 9, 8, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017647471, 'comment_body': 'make a comment saying false is the ""generic zero""', 'comment_created': datetime.datetime(2022, 11, 9, 8, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017648031, 'comment_body': 'Although, really, are we really planning to use this for booleans?', 'comment_created': datetime.datetime(2022, 11, 9, 8, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017648399, 'comment_body': 'You can also do `zero(T)` for more clarity', 'comment_created': datetime.datetime(2022, 11, 9, 9, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017650894, 'comment_body': 'sentence unclear?', 'comment_created': datetime.datetime(2022, 11, 9, 9, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017654266, 'comment_body': 'why did you remove the previous method with the _fftw_flags?', 'comment_created': datetime.datetime(2022, 11, 9, 9, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017659176, 'comment_body': 'such that -> so that', 'comment_created': datetime.datetime(2022, 11, 9, 9, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017659463, 'comment_body': 'gaussians -> `gaussians`', 'comment_created': datetime.datetime(2022, 11, 9, 9, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1017660663, 'comment_body': ""Hm indeed not great... can't GPU handle arrays of arrays?"", 'comment_created': datetime.datetime(2022, 11, 9, 9, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1018711839, 'comment_body': '@vchuravy Are you aware of a more wide-spread solution for this type of ""device / computing architecture selection"" problem. It seems currently everyone is rolling their own ... including naming conflicts for `GPU`, `CPU` etc. I would like to avoid this, but this leads to a pretty powerful and extensible interface to specify hardware setup.', 'comment_created': datetime.datetime(2022, 11, 10, 6, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1018746867, 'comment_body': 'Do we want to just overload `zeros(::PlaneWaveBasis, T)`? @mfherbst ', 'comment_created': datetime.datetime(2022, 11, 10, 7, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1018747272, 'comment_body': 'keep comment above (and add ""to ensure rho is real"")', 'comment_created': datetime.datetime(2022, 11, 10, 7, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1018747794, 'comment_body': 'this comment is kind of obvious, remove it?', 'comment_created': datetime.datetime(2022, 11, 10, 7, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1018748787, 'comment_body': 'Move to a `randn_like` function?', 'comment_created': datetime.datetime(2022, 11, 10, 7, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1018749847, 'comment_body': '```\r\nantoine@lambda:~/.julia/dev/DFTK/src$ grep -ir ""sum(abs2"" * | wc -l \r\n15\r\n```\r\nShould we just have a `norm2` in common/? @mfherbst ', 'comment_created': datetime.datetime(2022, 11, 10, 7, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1018750692, 'comment_body': ""two times on the CPU ? Also can't it be made to work, eg by getting occupation_threshold out?"", 'comment_created': datetime.datetime(2022, 11, 10, 7, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1018751484, 'comment_body': 'move to workarounds/?', 'comment_created': datetime.datetime(2022, 11, 10, 7, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1018753016, 'comment_body': 'Hm, I kind of preferred the old version. Isn\'t there a way to say ""yes, I know it\'s a scalar op, it\'s fine""?', 'comment_created': datetime.datetime(2022, 11, 10, 7, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1018754858, 'comment_body': 'move this to a function `kinetic_energy(q, scaling_factor, blowup, Ecut)` that sits outside this one, and remove the inner function', 'comment_created': datetime.datetime(2022, 11, 10, 7, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1018755872, 'comment_body': ""maybe on all these comments move them to something like `# GPU: move to the CPU` so that it's clear these are GPU code paths."", 'comment_created': datetime.datetime(2022, 11, 10, 7, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1018756132, 'comment_body': ""This doesn't need to be a copy on the CPU, you can have a helper function `to_cpu` maybe?"", 'comment_created': datetime.datetime(2022, 11, 10, 7, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1018813999, 'comment_body': 'and `to_gpu`', 'comment_created': datetime.datetime(2022, 11, 10, 8, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1019646483, 'comment_body': 'Yeah, I have some of that in KA, https://github.com/JuliaGPU/KernelAbstractions.jl/pull/320 and there is https://docs.juliahub.com/GPUArraysCore/qiYUe/0.1.2/autodocs/#GPUArraysCore.backend-Tuple{Type}\r\n\r\n@oschulz was working on something https://github.com/JuliaGPU/KernelAbstractions.jl/pull/297\r\n\r\ncc: @maleadt @jpsamaroo We do need some sort of ""Query compute backend for <:AbstractArray"" and ""allocate array for backend (similar is not always enough)""', 'comment_created': datetime.datetime(2022, 11, 10, 21, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vchuravy', 'type': 'User'}, {'comment_id': 1019873997, 'comment_body': 'I made it :smile:.', 'comment_created': datetime.datetime(2022, 11, 11, 6, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1019874386, 'comment_body': 'No does not work because of avoiding closure on the model.', 'comment_created': datetime.datetime(2022, 11, 11, 6, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1019875628, 'comment_body': ""I explicitly suggested to have this be the first because usually it's done like this in julia (see similar, ones, zeros etc)."", 'comment_created': datetime.datetime(2022, 11, 11, 6, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1019876173, 'comment_body': ""Because it's not needed ... just creates another layer of indirection."", 'comment_created': datetime.datetime(2022, 11, 11, 6, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1019877613, 'comment_body': 'Not sure ... not super clear which size that should be. But something to keep in mind ... these whole array functions right now become a bit of a zoo. We have to be a bit careful to not overdo it', 'comment_created': datetime.datetime(2022, 11, 11, 6, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1019878840, 'comment_body': ""This `_like` stuff is used nowhere in julia. I'm not sure we should buy into it so much."", 'comment_created': datetime.datetime(2022, 11, 11, 6, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1019879187, 'comment_body': 'Yeah, why not', 'comment_created': datetime.datetime(2022, 11, 11, 6, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1019879396, 'comment_body': 'yes my bad', 'comment_created': datetime.datetime(2022, 11, 11, 6, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1019879623, 'comment_body': 'yes there is. You can temporary disable the warning for scalar indexing with a `do ... end` style syntax', 'comment_created': datetime.datetime(2022, 11, 11, 6, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1019880875, 'comment_body': ""> maybe on all these comments move them to something like # GPU: move to the CPU so that it's clear these are GPU code paths.\r\n\r\nHmm. It's not just for GPUs (well for now it is ... but this comment would become outdated if we implement other architectures). That's why I removed it.\r\n\r\nWe really should buy into one of the helper infrastructures Valentin linked above for this `to_cpu` / `to_gpu` stuff before building yet our own."", 'comment_created': datetime.datetime(2022, 11, 11, 6, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1020212563, 'comment_body': ""> @oschulz was working on something JuliaGPU/KernelAbstractions.jl#297\r\n\r\nThat's not abanoned, I promise, just have been swamped. But I still very much want to move forward with that."", 'comment_created': datetime.datetime(2022, 11, 11, 13, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'oschulz', 'type': 'User'}, {'comment_id': 1026512548, 'comment_body': 'This comment is out of date.', 'comment_created': datetime.datetime(2022, 11, 18, 14, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1026515478, 'comment_body': 'Why just array? What about other iterables ... I would completely leave of the the type here.', 'comment_created': datetime.datetime(2022, 11, 18, 14, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1026517816, 'comment_body': 'keep the space', 'comment_created': datetime.datetime(2022, 11, 18, 14, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1026541238, 'comment_body': 'duplication', 'comment_created': datetime.datetime(2022, 11, 18, 15, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1026547455, 'comment_body': 'I think a `map` makes this clearer', 'comment_created': datetime.datetime(2022, 11, 18, 15, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1026548602, 'comment_body': 'just `map(norm2, G_vectors_cart(basis))` and spacing', 'comment_created': datetime.datetime(2022, 11, 18, 15, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1026554388, 'comment_body': 'I would move this to the general DFTK.jl\r\n\r\nMy rule of thumb for the `using`s is:\r\n- Is it a package that I only use in this (or a few selected) files or where the functionality of the package is closely coupled to one file in DFTK, then I put the `using` into that file.\r\n- If it\'s more ""global"" and affects everyone (like the `allowscalar`) that the package should be in the `DFTK.jl` file.\r\n\r\nWe don\'t follow this rule thoroughly, though.', 'comment_created': datetime.datetime(2022, 11, 18, 15, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1026557483, 'comment_body': 'use `kinetic_energy` function.', 'comment_created': datetime.datetime(2022, 11, 18, 15, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1026561692, 'comment_body': 'Get rid of the last argument and infer from the eltype of q, also I would reorder the arguments to\r\n`(blowup, scaling_factor, Ecut, q)`. That allows you to also have a version `kinetic_energy(kin::Kinetic, Ecut, q)`, which simplifies the preconditioner.', 'comment_created': datetime.datetime(2022, 11, 18, 15, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1026562260, 'comment_body': 'I think this comment is now obvious.', 'comment_created': datetime.datetime(2022, 11, 18, 15, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1026563158, 'comment_body': 'I would move this to the calling side (and have the function always return on the CPU).', 'comment_created': datetime.datetime(2022, 11, 18, 15, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1026565161, 'comment_body': 'When this is merged, can you open an issue @GVigne to indicate that we should reduce the transfer to CPU of the occupation array.\r\n', 'comment_created': datetime.datetime(2022, 11, 18, 15, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1026570132, 'comment_body': 'No need for the `architecture = `', 'comment_created': datetime.datetime(2022, 11, 18, 15, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1026570769, 'comment_body': 'I think I would make the `architecture` a non-optional kwarg (i.e. remove the `=CPU()`).', 'comment_created': datetime.datetime(2022, 11, 18, 15, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1026572025, 'comment_body': 'if `architecture isa GPU && ...`', 'comment_created': datetime.datetime(2022, 11, 18, 15, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1026580620, 'comment_body': 'Again unless you see any major issues with this I would make the calling party responsable to do the transfer.', 'comment_created': datetime.datetime(2022, 11, 18, 15, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1027927573, 'comment_body': 'also `@inline` this', 'comment_created': datetime.datetime(2022, 11, 21, 12, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1029014027, 'comment_body': ""can't this be typed as AbstractArray{Vec3{Int}}?"", 'comment_created': datetime.datetime(2022, 11, 22, 8, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1029016433, 'comment_body': 'split lines', 'comment_created': datetime.datetime(2022, 11, 22, 8, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1029016986, 'comment_body': ""can't T_r_vectors be typed more concretely?"", 'comment_created': datetime.datetime(2022, 11, 22, 8, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1029017497, 'comment_body': ""btw you can also add the `3` in there, can't you?"", 'comment_created': datetime.datetime(2022, 11, 22, 8, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1029017772, 'comment_body': 'AbstractVector, even', 'comment_created': datetime.datetime(2022, 11, 22, 8, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1029028042, 'comment_body': 'do you really need this? Usually it just gets inferred', 'comment_created': datetime.datetime(2022, 11, 22, 8, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1029030615, 'comment_body': 'prefix with GPU: someone reading this has no idea why not being isbits is a problem', 'comment_created': datetime.datetime(2022, 11, 22, 8, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1029031645, 'comment_body': 'is there really a need for an explicit inline?', 'comment_created': datetime.datetime(2022, 11, 22, 8, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1029035011, 'comment_body': 'norm2.()', 'comment_created': datetime.datetime(2022, 11, 22, 8, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1029035349, 'comment_body': 'only enclose this one in allowscalar? also is there no macro that avoids the explicit closure?', 'comment_created': datetime.datetime(2022, 11, 22, 8, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1029036224, 'comment_body': 'norm2.()', 'comment_created': datetime.datetime(2022, 11, 22, 8, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1029036305, 'comment_body': 'norm2.()', 'comment_created': datetime.datetime(2022, 11, 22, 8, 53, 58, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1029036323, 'comment_body': 'norm2.()', 'comment_created': datetime.datetime(2022, 11, 22, 8, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1029159124, 'comment_body': 'Rather accelerator (to be more general)', 'comment_created': datetime.datetime(2022, 11, 22, 10, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1029160931, 'comment_body': 'Also here `map(norm2, G_vectors_cart(basis)`', 'comment_created': datetime.datetime(2022, 11, 22, 10, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1029162177, 'comment_body': 'or even shorter `norm2.()` actually.', 'comment_created': datetime.datetime(2022, 11, 22, 10, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1029165345, 'comment_body': ""You know how I feel about being general before we actually know what we're generalizing to, but OK :-p"", 'comment_created': datetime.datetime(2022, 11, 22, 10, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1029328008, 'comment_body': ""Can't this be AbstractArray{Vec3{T}, 3}?\r\nSorry for the bother, but it does help readers to know what is what\r\n(also skip lines)"", 'comment_created': datetime.datetime(2022, 11, 22, 13, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 1029330432, 'comment_body': 'Getting the `T` in is tricky (we tried sth like this and it caused trouble in Julias type resolution), but we can try the 3', 'comment_created': datetime.datetime(2022, 11, 22, 13, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 1029339607, 'comment_body': 'no this seems to work', 'comment_created': datetime.datetime(2022, 11, 22, 13, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}]","[{'commit_sha': 'e17fb59e541fa9fffc7860bf6eea9e36d147ef2f', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e80f5b6434b11024e785a190bf5a78e6b6091a3c', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed15b324a6f104fc1fa3498846d9939917689af3', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19bfa6981e0e36c85e6f5d644e37f17624f2df46', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4748ac401c774683daf48da92046ce462879ad2', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94f1d2ab1bb77e20972a44e17fef41cfcb0abe6c', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60d80418801e071b2e11ffccefd4fa6ac02d78d6', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb6484a34b761293b873610a21712a9d8a59ada1', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf1dc3c1a0ca82f92d7f4a1f6d5115b34a1a4288', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11b85f0acc304b4e276937ff9a5bee98470dd25c', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb99f433ddd559459d6b8f4f0d806c9f642b5ac', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a89171a275379fbac3e835cb4c65ae854c1c5e5b', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44bcb6183fd0b1bcd77bed7fa361ec12b8dcea95', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '646b44c5fbb78575b526b634d2a0cf26a9cba295', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76c697d11b120debefad1c62b57165fe68c413b7', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd684d754ca06240805903c81834bfeab952fb4c', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f02c95425a6813257dad47fd8f3d2b01fe421314', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15d1324cd7311727f7ba91cb0a2697406e5fb16c', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62d9f79aeeaba0a45e82c6b5e5eda00f618fa3c8', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19100cfdb500c4c074987d72d9e1f7fad92eb00b', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1184ec1e017a506b1711ccab58370f72aaab22e0', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '833928b2c76ee71cfafdc5866daf24fe74788ec4', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e12f35be94c0ef904c2b918db7454351884d75ac', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0c40669bffc8e6685cdfbd5be51982c7724c65f', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cdff931d80d3fd6d543c340dfc33b2a3909e67c', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20b7b109130660ac8122b304208d7028d1afcd8b', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2d811b16b13f17ab90ece10a08906fc3f2b137d', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ee55a45ca48e1ca34582fbfc87fa37c64b5cf3b', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7909720d14ebc48794e4d08ce026cb836c419bcc', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b700d1c723fbeca6f9130aaf1181845d8d46a48b', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '981e7a1a5d9356de7b3f513c5ae7ad4b29cc5893', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '272ff85b1637e982c0fefed1648b7a6717d9d36b', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8af93d15a9a0ab2a58aae5517ca3db2ae13de29', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acd4bef6c1a5e957cd27f4ebeb2533fa9b5fef87', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06b07cc08fa38d1425fc95461fd42d5bfe6bc27d', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b294da0ca34d7fbc01e85acd7617086ce1ba3a1', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5b0d090648fb581a6101a96403b2b32fb5e0923', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9177e8b70a30c38234a6c004a2bb8b80e11786d4', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c3b620150580ae85580fa83752bc77a411b90a1', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf77db27d63e53c1e96bcb032faf3dcef0e72c16', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce05d66bd34b5ffd6d2bd72b4e5476142aa9f794', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c8067e82a3979f4aecbaf8eaa6d8d04f117a61c', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95fe043a4ea62efae91195c9b8631dd4bc7ad541', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5112257dab173cc2ac6fcf46560ea4e991b6ebb', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28e05e74a04d6349e3ce6568e757f6a158d77ff1', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c5a5b506147f9b342948e7a05766c8c47af2f9f', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06eb5b6dcfa3c2e66394eff5e87ced827046e1ac', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de28ac46d1709b651fcd26d51960121c8a0ae746', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '866d6bf35075d834608468e846c03648c46552c4', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20081993ceb26ff1957a06e065157c74c3242b26', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ad1744d41e88bd897e786834a38764db2b1baba', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '278a0014eec78ae97e68a367098834c445298051', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3e9acc01d918780894699bcad15b5bac7c806bd', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '682dbde3d3140bbac26a90196140ba44c91ae176', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca75332067e0b55c90001c55e65aa711ad57c0a6', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e45b9eac9f053d97d560979b989428883d36a5', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd4e315b062b7b7b126da7db282e70c5cf485463', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a339a4dfd5a599b4b8b4060b942cb8ee0e07d421', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '695263a34abb45f066550b2d776d68e1983c85af', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7afc5fd293b852c9f63a5db0b2de0838045b549c', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2563c58ec83ec3f8404fa9533e32896dca5cbcd6', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d17ebc074b393c5b04f361c59e5563a61a9d260', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8088d6788d8cfd11cfe256485f09c4049b8d2f97', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9d9da1d20a5460a0679af4b9e59e71f465a3fab', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a69e2c3b298db18ecf088128cc8256f98b8dfaa', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4e6fd54dde9e52892f3da4a2da30bfbc77b23ad', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecfd306d01237b95e5e846550bd24e60ff76a856', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3401d791ac501f63abe04cb494175ef7df574545', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c459773a3545e64263e0652007920ae6b52eab3', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e4d37a7ba97ce842b51f10dae9db0a14653deb9', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dc6c82090dc397634f311690f38fce9d60c3837', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6fe22b93512d24f0cc19d6e68de96bbe4eb50e8', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e12d3a129a9eba0b3b0a722881e04ddf11ee972', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '866598c60d1187ee92409aaf06685f3348afe5e9', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bcd3d13625670f1a29df19767384531e2bcf217', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd13fa568303777c9832517f632051130c16edfa8', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '085ca99deedb301d1c695134a625dad93e63859a', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d72ba044011911450120d06548f66f607b790d4', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c6ac54cf8b4f4935f73680729f32919ee30bf51', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a02cd21c39612ec7a49fa194b4674e6cd17d42de', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d845fc337d250c573d425a667e7c58860d656a6', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '349b8f1ed042ebaba9b10c310a9bcb0e44f8dc94', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '778712d5e9b957d59171d00a1205d2994a6e4cf0', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c39ee19e9786c1efdd0f9a3b5fbef79679eaf9fc', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4501bd94ff53a96d8d7ed57c6f2d9c2131d4724f', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60506b92a5e6c5562a83abc1207a19c0d1e38aac', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '147c81dfe143460604ea3c8d76cf1b8d3e77e22b', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da1ac0979f060e10d7865c8a81a456ea4bb8b466', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a40af5c97404b0e47f078e04afff949222a658e', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ee546bd87658ba98c0675a35bb7b0d13c68e4b2', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7b611a279383330ce61131c61b00dc0e89710fd', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbe675dced21c31eb90119e25f1924646899d6ad', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7be3a67a4fdd8e23ea525d583928f7a2c39a3da', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '482d3b2df5f798977f1f7531006ef629dc16d2d7', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70704871a782e36271afe88b63cee88149a5fa6a', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf3fbf8ad76e4d2bfca5c776678ffde66815abff', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dec0653b06900eb531eb5e91f9d9b02aef8f389e', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff0d9b08105cf63b7bbfa6b85e226cc965ba2d10', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}]",,72138169,,User,,14,,1,3
1007278414,Bringing GPU programming to DFTK,"This is a work in progress and probably shouldn't be merged immediately into DFTK.
As part of my GSoC (you can see some additional information [here](https://summerofcode.withgoogle.com/programs/2022/projects/GSUS0kxC) ), I am working on a GPU version of DFTK. One of the goal is to keep overall code changes as low as possible (I do not aim to build an other DFTK package using GPUs).
This is the first step in my project: so far I managed to implement the Kinetic, Local and NonLocal terms and am running computations through the `self_consistent_field` function. I have not yet managed to make the SCF solvers work, so I disabled them for now.

Here is a MWE:
```
using DFTK
using CUDA
a = 10.263141334305942  # Lattice constant in Bohr
lattice = a / 2 .* [[0 1 1.]; [1 0 1.]; [1 1 0.]]
Si = ElementPsp(:Si, psp=load_psp(""hgh/lda/Si-q4""))
atoms     = [Si, Si]
positions = [ones(3)/8, -ones(3)/8];
terms_LDA = [Kinetic(), AtomicLocal(), AtomicNonlocal()]

# Setup an LDA model and discretize using
# a single k-point and a small `Ecut` of 5 Hartree.
mod = Model(lattice, atoms, positions; terms=terms_LDA,symmetries=false)
basis = PlaneWaveBasis(mod; Ecut=30, kgrid=(1, 1, 1))
basis_gpu = PlaneWaveBasis(mod; Ecut=30, kgrid=(1, 1, 1), array_type = CuArray)

scfres = self_consistent_field(basis; tol=1e-3, solver=scf_damping_solver(1.0))
scfres_gpu = self_consistent_field(basis_gpu; tol=1e-3, solver=scf_damping_solver(1.0))
```
Any feedback is appreciated, be it on the code in itself or the implementation of new features!",False,697,https://api.github.com/repos/JuliaMolSim/DFTK.jl/pulls/697,https://github.com/JuliaMolSim/DFTK.jl/pull/697,closed,287,96,21,19,2,71,0,0,[],2022-07-25 12:58:47+00:00,2022-08-23 12:27:26+00:00,2503719.0,"28 days, 23:28:39","[{'comment_id': 929210604, 'comment_body': ""That's bad, as the actual type will be dynamic. pwbasis should be parametric on this type"", 'comment_created': datetime.datetime(2022, 7, 25, 19, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929211331, 'comment_body': 'we usually use vec instead of vect when we need abbrevations (or just Gs)', 'comment_created': datetime.datetime(2022, 7, 25, 19, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929211684, 'comment_body': 'this array type should be deduced from the basis array type', 'comment_created': datetime.datetime(2022, 7, 25, 19, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929213012, 'comment_body': ""UnionAll is an implementation detail I think. Type it as ::Type if you really want to type it (ie if you need it for dispatch or for clarity) or just don't type it at all"", 'comment_created': datetime.datetime(2022, 7, 25, 19, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929215223, 'comment_body': ""I think you can just leave the code as it is and just have the chunklocal array be of the correct type? threads+GPU is a fun interaction but let's assume people don't mix those for now"", 'comment_created': datetime.datetime(2022, 7, 25, 19, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929215676, 'comment_body': ""Can't you just do the full thing on the GPU?"", 'comment_created': datetime.datetime(2022, 7, 25, 19, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929217500, 'comment_body': 'that\'s a bit too generic I think. For our purposes you can get by with a simplified version. Check out the history of this file, we used to have a ""bmul"" thing that did the job reasonably well and was a bit simpler', 'comment_created': datetime.datetime(2022, 7, 25, 19, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929218431, 'comment_body': 'Is this really needed? Did you open an issue over at CUDA.jl?', 'comment_created': datetime.datetime(2022, 7, 25, 19, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929219237, 'comment_body': 'Also for this you can just type pirate it (at least for now...) and add it to workarounds/', 'comment_created': datetime.datetime(2022, 7, 25, 19, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929220410, 'comment_body': 'this is a bit less efficient than the previous version. Maybe have the custom type override `mul!(a,b,c,alpha,beta)`?', 'comment_created': datetime.datetime(2022, 7, 25, 19, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929220999, 'comment_body': 'No reference to DFTK from inside LOBPCG (see https://github.com/JuliaMolSim/DFTK.jl/issues/690)', 'comment_created': datetime.datetime(2022, 7, 25, 19, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929221603, 'comment_body': 'LOBPCG should just return lambda on the GPU if everything is provided there. If you want to get it to an array, do it outside of LOBPCG', 'comment_created': datetime.datetime(2022, 7, 25, 19, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929221750, 'comment_body': 'you use array_type above', 'comment_created': datetime.datetime(2022, 7, 25, 19, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929222161, 'comment_body': ""We need a good solution for this type of array construction. Let's discuss it"", 'comment_created': datetime.datetime(2022, 7, 25, 19, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929222587, 'comment_body': 'Also from this you get the specific array type I believe, like Array{T,N}', 'comment_created': datetime.datetime(2022, 7, 25, 19, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929223698, 'comment_body': ""We need newlines at the end of files, otherwise many tools panic. It's generally accepted practice I believe. I've setup my editor (emacs) to enforce it automatically long ago and never had trouble."", 'comment_created': datetime.datetime(2022, 7, 25, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929224045, 'comment_body': 'this incurs dynamic dispatch', 'comment_created': datetime.datetime(2022, 7, 25, 19, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929224299, 'comment_body': 'this builds a new array just for the type computation', 'comment_created': datetime.datetime(2022, 7, 25, 19, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929224868, 'comment_body': '`map` over Gplusk_vectors_cart (which should be on the GPU)?', 'comment_created': datetime.datetime(2022, 7, 25, 19, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929225603, 'comment_body': 'Interesting, what do you get if you map over eachcol(::GPUArray)? An Array or a GPUArray?', 'comment_created': datetime.datetime(2022, 7, 25, 19, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929226374, 'comment_body': ""🏴\u200d☠️! Put that in workarounds/ so we at least isolate places where we're bad"", 'comment_created': datetime.datetime(2022, 7, 25, 19, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929226955, 'comment_body': ""Ooof that's very bad for performance. Is this really needed?"", 'comment_created': datetime.datetime(2022, 7, 25, 19, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929227584, 'comment_body': 'to be discussed', 'comment_created': datetime.datetime(2022, 7, 25, 19, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929227852, 'comment_body': 'you removed the nice comment :(', 'comment_created': datetime.datetime(2022, 7, 25, 19, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929228221, 'comment_body': 'This is not a copy?', 'comment_created': datetime.datetime(2022, 7, 25, 19, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929228793, 'comment_body': 'You might be running into the big bad ""captured variable in closure"" performance bug', 'comment_created': datetime.datetime(2022, 7, 25, 19, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929230671, 'comment_body': 'Interesting and a bit annoying. Make a note to discuss it with Valentin?', 'comment_created': datetime.datetime(2022, 7, 25, 19, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 929232581, 'comment_body': ""that's a bit wasteful (the copy)"", 'comment_created': datetime.datetime(2022, 7, 25, 19, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 930085274, 'comment_body': ""I don't think it's bad for performance, as it is actually what is recommended by the [AbstractFFT documentation](https://juliamath.github.io/AbstractFFTs.jl/stable/api/#AbstractFFTs.plan_fft). We should either use `*` or use the `mul! `function: the thing is there are a few restrictions to use `mul!` (the input array must be a complex floating-point array like the output). \r\nInitially I hadn't understood that, so that's why there is this weird workaround. But now I fixed the code, this is no longer useful, and I am removing it. Thanks for pointing that out!"", 'comment_created': datetime.datetime(2022, 7, 26, 15, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 930128818, 'comment_body': ""Great! Basically any time there's a `!` it should mean it's a place where performance and allocations matter (otherwise, people should just use the non-mutating version, as it's clearer, easier to reason with and hides fewer bugs), so what you do here (which allocates a new array for p*X) breaks that implicit contract"", 'comment_created': datetime.datetime(2022, 7, 26, 15, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 930152777, 'comment_body': ""I think I'm going to change it to ::Type just for code clarity purpose."", 'comment_created': datetime.datetime(2022, 7, 26, 16, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 930154671, 'comment_body': 'I had never heard of this convention before, but after some reading it does make sense, and there is also an option in VSCode for it to do automatically. Thanks!', 'comment_created': datetime.datetime(2022, 7, 26, 16, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 930162882, 'comment_body': 'So far this type of workaround happens twice (for `dot` and for the equality test `B!=I` in LOBPCG), but it should really go in CUDA or GPUArrays. I put it in workarounds/ for now but it should soon go away.', 'comment_created': datetime.datetime(2022, 7, 26, 16, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 930171234, 'comment_body': 'Oh no!', 'comment_created': datetime.datetime(2022, 7, 26, 16, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 930183577, 'comment_body': ""Yes, that was one of the part of the code which was functional but I must admit that I didn't understand everything that was happening. It was a good first shot though.\r\nIf I understand correctly, you suggest I make an other function which does not rely on threads, so that it can be immediately GPU compatible?"", 'comment_created': datetime.datetime(2022, 7, 26, 16, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 930194188, 'comment_body': 'The function allocates per-thread buffers, then each thread does its stuff, and the result is accumulated. You can assume that the code is single-threaded, and put the buffer on the GPU. Just add an assert that GPU code is run single-threaded to be safe.', 'comment_created': datetime.datetime(2022, 7, 26, 16, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 931049599, 'comment_body': 'Ok, that makes sense. Done!', 'comment_created': datetime.datetime(2022, 7, 27, 13, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 931059347, 'comment_body': 'Indeed: this was fixed following the conversation about multithreading/CUDA (it came down to the same issue).', 'comment_created': datetime.datetime(2022, 7, 27, 13, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 932403624, 'comment_body': 'I think we usually call these ""Gs"" in other places.', 'comment_created': datetime.datetime(2022, 7, 28, 15, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932404351, 'comment_body': 'Not sure they should be here (and a hard dependency of DFTK) long-term.', 'comment_created': datetime.datetime(2022, 7, 28, 15, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932405306, 'comment_body': 'Agree. Just have\r\n```julia\r\nstruct PlaneWaveBasis{T, VT, AT} <: AbstractBasis{T} where {VT <: Real, AT <: AbstractArray}\r\n```', 'comment_created': datetime.datetime(2022, 7, 28, 15, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932405868, 'comment_body': 'I think for this constructure the `array_type` should be deduced from `basis`.', 'comment_created': datetime.datetime(2022, 7, 28, 15, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932406309, 'comment_body': 'General note: We put a space after `#` and keep an eye on the line length.', 'comment_created': datetime.datetime(2022, 7, 28, 15, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932408228, 'comment_body': 'Also I think I would directly merge this function with the one below and have as a default `array_type=Vector` (the `convert` is a noop if the type is already the correct one).', 'comment_created': datetime.datetime(2022, 7, 28, 15, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932410255, 'comment_body': 'I wonder if this should be `::Array` instead. Also it somehow feels wrong to need to put `CuArray` explicitly here. We should think of a way to generalise this (perhaps also with some ""stripping off type arguments"" construct as discussed on slack.', 'comment_created': datetime.datetime(2022, 7, 28, 15, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932411285, 'comment_body': 'This is not the right place to assert that. We do such checks in the `PlaneWaveBasis` setup for MPI. I think we should do the same thing for GPU.\r\n\r\nAlso the line is too long and spaces around `!=`.', 'comment_created': datetime.datetime(2022, 7, 28, 15, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932412275, 'comment_body': 'Ok surely this is ugly. But whatever version we settle on to juggle this, it should probably be made a function, such that we can change it easily once some more clever julia tooling for this becomes available.', 'comment_created': datetime.datetime(2022, 7, 28, 15, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932412789, 'comment_body': 'Keep an eye on the alginment of the indention ;).', 'comment_created': datetime.datetime(2022, 7, 28, 15, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932414470, 'comment_body': 'I see why you do this, but I think the place to do the transfer is either in the SCF or in the occupation function. Here I feel if GPU stuff goes in GPU stuff should come out. Also the result.X is still on the GPU in either case.', 'comment_created': datetime.datetime(2022, 7, 28, 15, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932415168, 'comment_body': 'Better not rewrite the code. What we had before had a few iterations of performance engineering, so probably best to not try to redo that.', 'comment_created': datetime.datetime(2022, 7, 28, 15, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932419171, 'comment_body': 'Yeah this might become an issue if done like this.', 'comment_created': datetime.datetime(2022, 7, 28, 15, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932420205, 'comment_body': ""I think I'd just make T an array type and use that directly."", 'comment_created': datetime.datetime(2022, 7, 28, 15, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932421279, 'comment_body': 'Maybe this allows us to kill the FFTW dependency completely? Or at least remove it from this file?', 'comment_created': datetime.datetime(2022, 7, 28, 15, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932422840, 'comment_body': 'Get it from the basis directly in the `TermKinetic` function below.', 'comment_created': datetime.datetime(2022, 7, 28, 15, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932423492, 'comment_body': 'I think the modifications here should be a separate PR that we merge in first.', 'comment_created': datetime.datetime(2022, 7, 28, 16, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 932424492, 'comment_body': 'Just call the file gpu_arrays.jl ?', 'comment_created': datetime.datetime(2022, 7, 28, 16, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 933115915, 'comment_body': 'Ok, but if I am not mistaken, we are going to loose some information about the G_vectors and r_vectors.\r\nDoing \r\n```\r\nG_vectors::AT\r\nr_vectors::AT\r\n```\r\nwill work, but not something like this\r\n```\r\nG_vectors::AT{Vec3{Int}, 3}\r\nr_vectors::AT{Vec3{VT }, 3}\r\n```', 'comment_created': datetime.datetime(2022, 7, 29, 10, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 933122886, 'comment_body': ""Yes, that's true. In that case you would need two type arguments (one for `G_vectors::Garray` and one for `r_vectors::Rarray`) and then the `AT` could be implicitly obtained from the `G_vectors`."", 'comment_created': datetime.datetime(2022, 7, 29, 11, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 933123240, 'comment_body': ""I'm not sure we want the two type arguments, however. @antoine-levitt thoughts?"", 'comment_created': datetime.datetime(2022, 7, 29, 11, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 933204958, 'comment_body': ""you can do {GT, RT, AT} where {GT <: AT, RT <: AT}. But yeah not great. OTOH we do want gvecs and rvecs to be statically typed, so yeah I don't think there's a way around it. What you can do is push the not interesting types further down the list, so you can do function f(basis::pwbasis{T, AT})"", 'comment_created': datetime.datetime(2022, 7, 29, 12, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 933341430, 'comment_body': ""Actually, I realised we don't need that copy at all. Later on, I am forced to use `map` instead of `map!` (we can't use the inplace version as we are converting an Array of Vec3 to an Array of Complex), so a new array is build there. So I can just remove this line and put  `ρ = map(build_ρ, basis.G_vectors)` instead of  `ρ = map(build_ρ, ρ)`."", 'comment_created': datetime.datetime(2022, 7, 29, 14, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 933348750, 'comment_body': ""As I tried to explain in the comment, either we use directly the G_vectors and then the entire map function needs to be a kernel, or we do it on CPU (it's only going to happen once, when we build the PlaneWaveBasis). If we don't want to make a copy, then all the element in the map need to be isbits, so we have to convert the pseudopotentials to a isbits structure. \r\nI agree it's a bit ugly, but for performance purposes it only happens once so I thought it was ok."", 'comment_created': datetime.datetime(2022, 7, 29, 14, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 933353176, 'comment_body': ""I think we will need to discuss dependencies (especially if we want to move LOBPCG out of DFTK, that can take some work): I also didn't really know where to put my imports and how they were managed in a big package, so there is room for improvement."", 'comment_created': datetime.datetime(2022, 7, 29, 14, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 933406280, 'comment_body': 'Thanks for the note on `#`: I have my IDE configured to write on multiple lines if a piece of code would be bigger than my screen size, so I tend to forget this.', 'comment_created': datetime.datetime(2022, 7, 29, 15, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 933419502, 'comment_body': 'Couldn\'t we simply do this?\r\n```\r\northo_qr(φk::Array) = Matrix(qr(φk).Q) \r\northo_qr(φk::T) where T <: AbstractGPUArray = T(qr(φk).Q) \r\n```\r\nAnother way to do it would be to have only one function and to get the the ""base type"" of `φk`, then convert `qr(φk).Q` to this type: this can be done by calling T.name.wrapper (or maybe one day a dedicated function in Base). We would then have the following code:\r\n`ortho_qr(φk::T) where T <: AbstractArray = T.name.wrapper(qr(φk).Q)`', 'comment_created': datetime.datetime(2022, 7, 29, 16, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 933436332, 'comment_body': 'For all of these array_type questions, I found out I could call `typeof(...).name.wrapper`, and it works in our case. I am trying to get this to be [added to Base](https://github.com/JuliaLang/julia/pull/46213), seeing that I am clearly not the first to have this problem: worst case scenario we can define our own function.', 'comment_created': datetime.datetime(2022, 7, 29, 16, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 933438902, 'comment_body': 'Oops, fixing that!', 'comment_created': datetime.datetime(2022, 7, 29, 16, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 933451115, 'comment_body': 'We still might need FFTW when doing multi-threading. But for the fft file, I guess we could remove the dependency, although it would have to be replaced by AbstractFFTs.', 'comment_created': datetime.datetime(2022, 7, 29, 16, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 935104703, 'comment_body': ""Can't we just add this at the end of `diagonalize_all_kblocks`? High level objects go in and a tuple goes out with all necessary fields: we simply transfer to CPU when all blocks have been diagonalized.\r\nOr we could say we want `λ` to be on the GPU but I'm not sure it's necessary, and it will require quite some work as this means that `occupation` will be on the GPU as well (so no scalar indexing, which is something done a lot for this array)."", 'comment_created': datetime.datetime(2022, 8, 2, 4, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 935119643, 'comment_body': ""We get a GPUArray. The is the same type of problem as the issue you raised [here](https://github.com/JuliaMolSim/DFTK.jl/pull/697#discussion_r929222161). List comprehension is really handy for CPU but sometimes can't be directly used when building GPU Arrays."", 'comment_created': datetime.datetime(2022, 8, 2, 5, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 935147604, 'comment_body': ""I'm having some trouble writing `Gplusk_vectors_cart ` as a GPU-compatible function.\r\nCurrently, we are broadcasting functions such as `vector_red_to_cart(model::Model, rred)` onto the `G_vectors`. However:\r\n-it is not possible to change these functions to have the signature (recip_lattice::Mat3, rred) as broadcast fails to find common dimensions\r\n-we shouldn't change the function's signature, as sometimes we need the `recip_lattice`, sometimes we need the inverse, and sometimes we need to compute their adjoint\r\n-for GPUs, we can't map or broadcast using a function taking model as an argument as it is not `isbits` (and many of its fields shouldn't be on the GPU anyway).\r\n\r\nSo far, the best thing I can think of is to replace the functions such as `vector_red_to_cart` into functions returning a static matrix `A` (basically extracting the model's lattice and maybe computing the adjoint) and then mapping the `A*G` operation onto the `G_vectors`, but it's not very satisfying. "", 'comment_created': datetime.datetime(2022, 8, 2, 6, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}]","[{'commit_sha': 'e17fb59e541fa9fffc7860bf6eea9e36d147ef2f', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e80f5b6434b11024e785a190bf5a78e6b6091a3c', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed15b324a6f104fc1fa3498846d9939917689af3', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19bfa6981e0e36c85e6f5d644e37f17624f2df46', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4748ac401c774683daf48da92046ce462879ad2', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94f1d2ab1bb77e20972a44e17fef41cfcb0abe6c', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60d80418801e071b2e11ffccefd4fa6ac02d78d6', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb6484a34b761293b873610a21712a9d8a59ada1', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf1dc3c1a0ca82f92d7f4a1f6d5115b34a1a4288', 'committer_username': 'mfherbst', 'committer_name': 'Michael F. Herbst', 'committer_email': 'michael.herbst@epfl.ch', 'commit_date': datetime.datetime(2015, 2, 23, 10, 36, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11b85f0acc304b4e276937ff9a5bee98470dd25c', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb99f433ddd559459d6b8f4f0d806c9f642b5ac', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a89171a275379fbac3e835cb4c65ae854c1c5e5b', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44bcb6183fd0b1bcd77bed7fa361ec12b8dcea95', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '646b44c5fbb78575b526b634d2a0cf26a9cba295', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76c697d11b120debefad1c62b57165fe68c413b7', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd684d754ca06240805903c81834bfeab952fb4c', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f02c95425a6813257dad47fd8f3d2b01fe421314', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15d1324cd7311727f7ba91cb0a2697406e5fb16c', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62d9f79aeeaba0a45e82c6b5e5eda00f618fa3c8', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}]",,72138169,,User,,14,,1,3
1032456464,Add a few NaN checks in LOBPCG,"This PR adds a few NaN checks in LOBPCG. So far, I have mostly seen issues with NaNs around the cholesky decomposition, so this is where I focused most of the checks. Whenever we do a cholesky decomposition, we now make sure that the result does not have any NaNs in it.
On a side note, I run the tests on `R` (ie the result of the cholesky decomposition) instead of `O` (the input) as `O` is Hermitian: somehow, running `any(isnan,O)` when `O` is the Hermitian view of a GPU array fails due to scalar indexing. This is probably a bug/missed implementation. It doesn't change much in our case: if `O` has NaNs, then `R` also has NaNs.",True,710,https://api.github.com/repos/JuliaMolSim/DFTK.jl/pulls/710,https://github.com/JuliaMolSim/DFTK.jl/pull/710,closed,5,1,1,5,10,4,0,0,[],2022-08-22 07:59:22+00:00,2022-09-11 12:06:07+00:00,1742805.0,"20 days, 4:06:45","[{'comment_id': 951135504, 'comment_body': 'condR is a scalar', 'comment_created': datetime.datetime(2022, 8, 22, 8, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'antoine-levitt', 'type': 'User'}, {'comment_id': 954511190, 'comment_body': 'space before comma', 'comment_created': datetime.datetime(2022, 8, 25, 5, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 954511373, 'comment_body': 'two spaces before comment', 'comment_created': datetime.datetime(2022, 8, 25, 5, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}, {'comment_id': 956557478, 'comment_body': 'I would completely inline this function. It is basically no shorter if you make it explicit (which is clearer).', 'comment_created': datetime.datetime(2022, 8, 27, 8, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mfherbst', 'type': 'User'}]","[{'commit_sha': 'da7b2a18f2d235471d38f001033a6575d2925da5', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8a26f42c0cf62d2d6e1f40dd7b0bc00609f5ca8', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50db92eeff3e100540d0250dab6aba858dd364fa', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f46d27b43a6e3599e03fed00e521e79dbf81f0e1', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79c235b30b9d8fee3281e64ac737db6316a3a1b9', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}]",,72138169,,User,,14,,1,3
999442782,Add an iszero and isone methodfor AbstractGPUMatrix,"This is a followup of [this issue](https://github.com/JuliaGPU/CUDA.jl/issues/1557) I raised in CUDA.jl. This issue essentially comes to the fact that there is no specialization for `isone` for CuArrays, so the default method from LinearAlgebra is called, which does scalar indexing. Therefore, it not possible to do for example `A==I` where `A` is a CuArray and `I` is LinearAlgebra's identity matrix.

A quick fix is to use `all` which is implemented in the GPUArrays package, and this is what I did. It is quite slow, but I couldn't manage to write a kernel for this, so I have no better solution right now. If anyone has hints as to how to do it, I'd gladly code a real kernel which does the job faster.",True,419,https://api.github.com/repos/JuliaGPU/GPUArrays.jl/pulls/419,https://github.com/JuliaGPU/GPUArrays.jl/pull/419,closed,28,0,2,4,6,9,0,0,[],2022-07-18 14:03:35+00:00,2022-08-12 10:31:13+00:00,2147258.0,"24 days, 20:27:38","[{'comment_id': 923482581, 'comment_body': ""I think this will fail for non-square matrices:\r\n```\r\njulia> iszero([1 0 0; 0 1 0])\r\nfalse\r\n\r\njulia> all(iszero, [1 0 0; 0 1 0] - I)\r\nERROR: DimensionMismatch: matrix is not square: dimensions are (2, 3)\r\nStacktrace:\r\n [1] checksquare\r\n   @ ~/.julia/dev/julia/usr/share/julia/stdlib/v1.9/LinearAlgebra/src/LinearAlgebra.jl:237 [inlined]\r\n [2] +(A::Matrix{Int64}, J::UniformScaling{Int64})\r\n   @ LinearAlgebra ~/.julia/dev/julia/usr/share/julia/stdlib/v1.9/LinearAlgebra/src/uniformscaling.jl:215\r\n```\r\nBut also, ideally it would not allocate a copy? Or perhaps that's OK as a fallback definition?"", 'comment_created': datetime.datetime(2022, 7, 18, 15, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 924152759, 'comment_body': ""There is no identity matrix for rectangular matrices, so I did expect it to crash for non-square matrices. I took  a look at LinearAlgebra's `isone` and, unlike what I thought, the convention is to return false for non-square matrices, so we could just do:\r\n```\r\nfunction Base.isone(x::AbstractGPUMatrix{T}) where {T}\r\n        n,m = size(x)\r\n        m != n && return false\r\n        all(iszero, x-I)\r\nend\r\n```\r\nI do agree this should be a fallback definition as it allocates a copy, but I couldn't code a kernel to do it the proper way. I am quite new to GPU programming, and still haven't understood how to stop the entire kernel should one thread meet a requirement (in this case, a non-diagonal term is not 0, or a diagonal term is not 1)."", 'comment_created': datetime.datetime(2022, 7, 19, 7, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 924339068, 'comment_body': ""I don't immediately see a better way. I doubt that stopping early is going to work well, but not an expert. Trying to save memory doesn't seem to save time:\r\n```\r\njulia> _isone_sub(x) = iszero(x - I);\r\njulia> _isone_bc(x) = all(x .== (axes(x,1) .== axes(x,2)'));\r\njulia> _isone_lazy(x) = 0 == sum(broadcasted(!=, x, broadcasted(==, axes(x,1), axes(x,2)')))\r\njulia> using Base.Broadcast: broadcasted\r\n\r\njulia> @btime _isone_sub($((rand(100,100))));\r\n  min 1.736 μs, mean 10.188 μs (2 allocations, 78.17 KiB)\r\n\r\njulia> @btime _isone_bc($((rand(100,100))));\r\n  min 11.958 μs, mean 12.655 μs (3 allocations, 5.56 KiB)\r\n\r\njulia> @btime _isone_lazy($((rand(100,100))));\r\n  min 41.958 μs, mean 42.221 μs (0 allocations)\r\n```"", 'comment_created': datetime.datetime(2022, 7, 19, 10, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 926308901, 'comment_body': ""There's no real way to stop an entire kernel if one thread encounters a specific condition. You can only synchronize threads within a block, so other blocks might have completed already. There's solutions (like using a single-element flag array you check in the CPU), but I doubt those are valuable here."", 'comment_created': datetime.datetime(2022, 7, 21, 6, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'maleadt', 'type': 'User'}, {'comment_id': 927642271, 'comment_body': ""I'm a bit surprised, as I expected this type of operation to be easy to make in parrallel. If I understand correctly, it's the asynchronous part that makes it difficult, right? In this case, each block is independent, so there is no real way to stop a block if an other one has finished its part."", 'comment_created': datetime.datetime(2022, 7, 22, 13, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 928644210, 'comment_body': ""I'm not sure what you mean by 'the asynchronous part'. Blocks are pretty much independent indeed, launched on separate processors in the GPU, so you don't want to have those depend on one another.\r\n\r\nYou can do this kind of operation using a reduction though, see https://github.com/JuliaGPU/GPUArrays.jl/pull/410. Maybe you can just reuse ==/isequal, relaxing it a bit so that you can pass `I` to it? Or duplicate the parts of that kernel you need here."", 'comment_created': datetime.datetime(2022, 7, 25, 9, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'maleadt', 'type': 'User'}, {'comment_id': 937478063, 'comment_body': ""There must be something I haven't understood, as I can't get it to work. The problem I see with a reduction is that `_mapreduce` expects its arguments to have a size, length, to be able to use `LinearIndices` and so on. This is not the case for LinearAlgebra's `I`, so I didn't manage to use a reduction to do what I want."", 'comment_created': datetime.datetime(2022, 8, 4, 8, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'GVigne', 'type': 'User'}, {'comment_id': 943739772, 'comment_body': 'This is clever. May I ask why `Array(y)[]` not something like `@allow_scalar y[]`? ', 'comment_created': datetime.datetime(2022, 8, 11, 17, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 943814936, 'comment_body': ""No reason, it should perform the same. BenchmarkTools reveals that it allocates less, but I'm not sure why, it's supposed to be identical (performance-wise it is, the bottleneck is the memcpy API call, not the CPU allocation)."", 'comment_created': datetime.datetime(2022, 8, 11, 18, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'maleadt', 'type': 'User'}]","[{'commit_sha': 'e75ce8a08d36b8f62746f134043ca502dd2d039c', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96abac8bc2f3da861bc06293b2b2ab8bd19f7e4f', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9eacab9bc2a17fb1d4ac15e6bec100e89173075', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64c7cecfac7709ad143923232d38ff800ae337e9', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}]",,72138169,,User,,14,,1,3
1046212021,Bugfixes when using \ operator with non square matrices,"Hi,
I was experiencing issues with the `\` operator and QR decomposition in CUDA. I checked the issues and saw #138, but it is quite old and outdated. Currently, here is the bug I am facing
```
julia> A = CUDA.rand(4);
julia> B = CUDA.rand(4);
julia> M = qr(A);
julia> M \ B
ERROR: DimensionMismatch(""trsm!"")
Stacktrace:
 [1] trsm!
   @ ~/.julia/packages/CUDA/DfvRa/lib/cublas/wrappers.jl:1375 [inlined]
 [2] ldiv!
   @ ~/.julia/packages/CUDA/DfvRa/lib/cublas/linalg.jl:359 [inlined]
 [3] \(A::UpperTriangular{Float32, CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}}, B::CuArray{Float32, 2, CUDA.Mem.DeviceBuffer})
   @ LinearAlgebra /opt/julia-1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/triangular.jl:1661
 [4] ldiv!(_qr::CUDA.CUSOLVER.CuQR{Float32, CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}}, b::CuArray{Float32, 1, CUDA.Mem.DeviceBuffer})
   @ CUDA.CUSOLVER ~/.julia/packages/CUDA/DfvRa/lib/cusolver/linalg.jl:213
 [5] \(F::CUDA.CUSOLVER.CuQR{Float32, CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}}, B::CuArray{Float32, 1, CUDA.Mem.DeviceBuffer})
   @ LinearAlgebra /opt/julia-1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:107
 [6] top-level scope
   @ REPL[14]:1
 [7] top-level scope
   @ ~/.julia/packages/CUDA/DfvRa/src/initialization.jl:52
```
This also fails if `A` is a rectangular matrix, or if it is a square matrix and `B` is a rectangular matrix.
I took a look at how it's done in LinearAlgebra and it seems that there are two specialized versions of `ldiv!`, one for vectors and one for matrices. These two `ldiv!` functions select only the relevant part of the input elements by using a view, and this is how it avoids dimension mismatch.

I tried to reproduce this in CUDA by breaking down `ldiv!` into two functions. With this, I can run the code above and it gives the correct result.
```
julia> A = CUDA.rand(4);
julia> B = CUDA.rand(4);
julia> M = qr(A);
julia> M \ B
4-element CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}:
  0.64181817
  0.905216
 -3.1400292
  0.83969826
julia> qr(Array(A)) \ Array(B)
4-element Vector{Float32}:
  0.64181787
  0.90521634
 -3.1400278
  0.83969784
```

Fixes https://github.com/JuliaGPU/CUDA.jl/pull/1584",True,1584,https://api.github.com/repos/JuliaGPU/CUDA.jl/pulls/1584,https://github.com/JuliaGPU/CUDA.jl/pull/1584,closed,49,10,2,3,5,0,3,0,"[{'name': 'cuda array'}, {'name': 'needs tests'}, {'name': 'bugfix'}]",2022-09-05 10:56:27+00:00,2022-09-13 11:28:55+00:00,693148.0,"8 days, 0:32:28",[],"[{'commit_sha': '980878b835e2cd4c8a15a16f5803c105c24b051e', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9842aebeb96bc38eb67d78dfaa08bf13f21c3596', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45684fd46fee207ef34f651e32a8e49a523e2e65', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}]",,72138169,,User,,14,,1,3
1011717983,Add basetype to strip type parameters from type,"This is a followup of [this issue](https://github.com/JuliaLang/julia/issues/35543).
Recently I have had the need to get the ""base type"" of a type, ie to strip type parameters from type. It seems that I am far from being the first to have such a problem, and having to call `T.name.wrapper` every single time is a bit tedious. Following what I read in the different issues which have been opened, I created the `basetype` function which does just this. 
I just didn't know exactly where to put this script: I saw that `typename` was already defined in essentials, so that's why I put it there, but maybe it needs to go elsewhere.",False,46213,https://api.github.com/repos/JuliaLang/julia/pulls/46213,https://github.com/JuliaLang/julia/pull/46213,closed,17,0,1,1,7,0,0,0,[],2022-07-29 08:53:26+00:00,2023-02-13 10:12:32+00:00,17198346.0,"199 days, 1:19:06",[],"[{'commit_sha': 'b5eb4efcc8be6998800f3d43f7ddeed8c82a7f03', 'committer_username': 'GVigne', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 30, 11, 55, 21, tzinfo=datetime.timezone.utc)}]",,72138169,,User,,14,,1,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
181734238,DFTK.jl,JuliaMolSim/DFTK.jl,Julia,87,425,18,40,1261,102,32,27,"[{'id': 1155793176, 'number': 797, 'closed': datetime.datetime(2023, 2, 14, 7, 35, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 9, 10, 9, 56, tzinfo=datetime.timezone.utc), 'time_taken': 5779537.0, 'time_delta': '66 days, 21:25:37', 'additions': 88, 'deletions': 0, 'state': 'closed'}, {'id': 1142950685, 'number': 793, 'closed': datetime.datetime(2022, 12, 6, 10, 13, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 2, 9, 13, 1, tzinfo=datetime.timezone.utc), 'time_taken': 349224.0, 'time_delta': '4 days, 1:00:24', 'additions': 92, 'deletions': 0, 'state': 'closed'}, {'id': 1133075614, 'number': 788, 'closed': datetime.datetime(2022, 11, 23, 10, 1, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 23, 8, 37, 37, tzinfo=datetime.timezone.utc), 'time_taken': 5015.0, 'time_delta': '1:23:35', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1035096505, 'number': 712, 'closed': datetime.datetime(2022, 11, 22, 14, 48, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 24, 7, 39, tzinfo=datetime.timezone.utc), 'time_taken': 7801776.0, 'time_delta': '90 days, 7:09:36', 'additions': 324, 'deletions': 145, 'state': 'closed'}, {'id': 1033831372, 'number': 711, 'closed': datetime.datetime(2022, 9, 28, 13, 5, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 23, 8, 26, 49, tzinfo=datetime.timezone.utc), 'time_taken': 3127129.0, 'time_delta': '36 days, 4:38:49', 'additions': 153, 'deletions': 36, 'state': 'closed'}, {'id': 1032456464, 'number': 710, 'closed': datetime.datetime(2022, 9, 11, 12, 6, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 22, 7, 59, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1742805.0, 'time_delta': '20 days, 4:06:45', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 1007278414, 'number': 697, 'closed': datetime.datetime(2022, 8, 23, 12, 27, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 12, 58, 47, tzinfo=datetime.timezone.utc), 'time_taken': 2503719.0, 'time_delta': '28 days, 23:28:39', 'additions': 287, 'deletions': 96, 'state': 'closed'}]"
63423582,GPUArrays.jl,JuliaGPU/GPUArrays.jl,Julia,75,316,15,59,1277,50,32,17,"[{'id': 1146430550, 'number': 441, 'closed': datetime.datetime(2022, 12, 5, 22, 5, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 5, 11, 49, 44, tzinfo=datetime.timezone.utc), 'time_taken': 36966.0, 'time_delta': '10:16:06', 'additions': 24, 'deletions': 22, 'state': 'closed'}, {'id': 999442782, 'number': 419, 'closed': datetime.datetime(2022, 8, 12, 10, 31, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 18, 14, 3, 35, tzinfo=datetime.timezone.utc), 'time_taken': 2147258.0, 'time_delta': '24 days, 20:27:38', 'additions': 28, 'deletions': 0, 'state': 'closed'}]"
206801089,CUDA.jl,JuliaGPU/CUDA.jl,Julia,211,1187,20,200,7930,274,83,48,"[{'id': 1140608645, 'number': 1683, 'closed': datetime.datetime(2022, 12, 14, 13, 0, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 30, 16, 33, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1196784.0, 'time_delta': '13 days, 20:26:24', 'additions': 41, 'deletions': 1, 'state': 'closed'}, {'id': 1130325381, 'number': 1677, 'closed': datetime.datetime(2022, 11, 22, 11, 7, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 21, 16, 42, 58, tzinfo=datetime.timezone.utc), 'time_taken': 66266.0, 'time_delta': '18:24:26', 'additions': 24, 'deletions': 3, 'state': 'closed'}, {'id': 1108470179, 'number': 1662, 'closed': datetime.datetime(2022, 11, 7, 16, 11, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 2, 15, 49, 33, tzinfo=datetime.timezone.utc), 'time_taken': 433292.0, 'time_delta': '5 days, 0:21:32', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 1046212021, 'number': 1584, 'closed': datetime.datetime(2022, 9, 13, 11, 28, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 5, 10, 56, 27, tzinfo=datetime.timezone.utc), 'time_taken': 693148.0, 'time_delta': '8 days, 0:32:28', 'additions': 49, 'deletions': 10, 'state': 'closed'}]"
1644196,julia,JuliaLang/julia,Julia,5452,45309,930,1762,57451,5076,926,1022,"[{'id': 1011717983, 'number': 46213, 'closed': datetime.datetime(2023, 2, 13, 10, 12, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 8, 53, 26, tzinfo=datetime.timezone.utc), 'time_taken': 17198346.0, 'time_delta': '199 days, 1:19:06', 'additions': 17, 'deletions': 0, 'state': 'closed'}]"
