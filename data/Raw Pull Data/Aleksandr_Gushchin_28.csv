pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
700505641,Scene detection improvement,"Adjusting values of thresholds for both versions of the scene detection algorithm.

Improved metric for the fast version. The peaks of the metric are now more distinguishable from the other values, so the threshold cuts off only relevent values.",True,2765,https://api.github.com/repos/xiph/rav1e/pulls/2765,https://github.com/xiph/rav1e/pull/2765,closed,218,45,6,6,13,17,0,0,[],2021-07-30 19:03:02+00:00,2021-08-30 06:41:14+00:00,2633892.0,"30 days, 11:38:12","[{'comment_id': 680203394, 'comment_body': 'I might like a bit more analysis of this. In particular, this effectively limits us to a scene cut only every other frame, correct?', 'comment_created': datetime.datetime(2021, 7, 30, 20, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tdaede', 'type': 'User'}, {'comment_id': 681237983, 'comment_body': 'The visualization you can see at the end of this [post](https://dev.to/aleksandrgushchin/threshold-experiments-for-scene-change-detector-2hbp). The new metric can be interpreted as the rate of change in dissimilarity metric between successive frames. Since the action inside the scene is usually monotonous, the dissimilarity metric stays about the same or changes at a small rate. However, there are scenes whose movement within a frame causes the dissimilarity metric to have high values, even exceeding the values of some scene changes.\r\nThe new metric solves this problem by decreasing the values on such scenes. At the same time dissimilarity metric peaks on frames with scene change remain high enough for detection with the threshold.', 'comment_created': datetime.datetime(2021, 8, 2, 20, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'AleksandrGushchin', 'type': 'User'}, {'comment_id': 681314929, 'comment_body': ""Great, OK it does look like a big improvement.\r\n\r\nHave you done a run on AWCY with vimeo-corpus-10s? I can help you do this if you like.\r\n\r\nWhat is the intended behavior for the second frame in a scene, when the previous scene's score isn't available? This looks like it treats the previous frame as having a delta of 0. This seems like it'd effectively make a scenecut here more likely than average always.\r\n\r\nHave you considered doing a delta of an average of x previous frames?"", 'comment_created': datetime.datetime(2021, 8, 2, 22, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tdaede', 'type': 'User'}, {'comment_id': 681321099, 'comment_body': 'You should be able to change THRESH_MAX rather than adding another constant here.', 'comment_created': datetime.datetime(2021, 8, 2, 23, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tdaede', 'type': 'User'}, {'comment_id': 682932266, 'comment_body': ""> Have you done a run on AWCY with vimeo-corpus-10s? I can help you do this if you like.\r\n\r\nNot yet, it would be helpful!\r\n\r\n> What is the intended behavior for the second frame in a scene, when the previous scene's score isn't available? \r\n\r\nOn the first few frames of the video the previous metric has low values, so subtracting one frame metric value from the other should not exceed the threshold. \r\n\r\n> Have you considered doing a delta of an average of x previous frames?\r\n\r\nNot yet, because this new metric solved my problem, but I'll do experiments with it."", 'comment_created': datetime.datetime(2021, 8, 4, 20, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'AleksandrGushchin', 'type': 'User'}, {'comment_id': 691992714, 'comment_body': 'Can we expose this option to CLI also, like users could explicitly set different speed detection mode irrespective of default modes? I think that might be a good addition', 'comment_created': datetime.datetime(2021, 8, 19, 10, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vibhoothi', 'type': 'User'}, {'comment_id': 692146585, 'comment_body': 'Might be good if we can say current state in a nice and concise way, \r\nOne idea I had was like this, feel free to edit and modify:) \r\n```suggestion\r\n        .help(""Specify Speed of scene-change detection, 0: best, 1: medium, 2: Fastest mode[default:  0 for s0-s6, 1 for s7-s9, 2 for s10]"")\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 14, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vibhoothi', 'type': 'User'}, {'comment_id': 692149037, 'comment_body': 'Do we need to go to upperbound of u32, if doing that might be better to alert user by a warning that it is going to be fast mode(which is 2)? Or just restrict to 0,1,2. and throw error.\r\n', 'comment_created': datetime.datetime(2021, 8, 19, 14, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vibhoothi', 'type': 'User'}, {'comment_id': 692150217, 'comment_body': ""This needs to be set to an actual version (at least a semver-compatible major version). The reason is that crates can't be published to crates.io if they depend on a * version."", 'comment_created': datetime.datetime(2021, 8, 19, 14, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shssoichiro', 'type': 'User'}, {'comment_id': 692150515, 'comment_body': 'Would be safer to have explicit version :)\r\n```suggestion\r\nhistogram = ""0.6.9""\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 14, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vibhoothi', 'type': 'User'}, {'comment_id': 695182640, 'comment_body': 'Think this is extra whitespace added? \r\n```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2021, 8, 24, 20, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vibhoothi', 'type': 'User'}, {'comment_id': 697699195, 'comment_body': 'This is not really new to your patch but I realized that this is basically a roundabout way to calculate pixel area...', 'comment_created': datetime.datetime(2021, 8, 27, 20, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tdaede', 'type': 'User'}, {'comment_id': 697699636, 'comment_body': 'You can backsolve SCALE_FACTOR into THRESH_MIN and THRESH_MAX and avoid an extra constant. Alternately, you could go the other way around and get rid of THRESH_MAX and THRESH_MIN. Not absolutely necessary for landing but it would be nice.', 'comment_created': datetime.datetime(2021, 8, 27, 20, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tdaede', 'type': 'User'}, {'comment_id': 698061320, 'comment_body': 'I think we want to remove the default value here, because by default we want it set according to the speed level.', 'comment_created': datetime.datetime(2021, 8, 29, 19, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shssoichiro', 'type': 'User'}, {'comment_id': 698063834, 'comment_body': 'It is set according to the speed level by default on line 607.\r\n`cfg.speed_settings.fast_scene_detection` changes on lines 609-617 only when the user specifies a value of scene detection speed.\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 29, 20, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AleksandrGushchin', 'type': 'User'}, {'comment_id': 698066065, 'comment_body': 'Have we tested that? My concern was that `matches.occurrences_of(""SCENE_CHANGE_DETECTION_SPEED"")` would pick up the default value of ""2"" specified here. I\'d like to verify that\'s not the case.', 'comment_created': datetime.datetime(2021, 8, 29, 20, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shssoichiro', 'type': 'User'}, {'comment_id': 698068005, 'comment_body': 'matches.occurrences_of(""SCENE_CHANGE_DETECTION_SPEED"") is 0 if no flags are passed. If that\'s your concern.', 'comment_created': datetime.datetime(2021, 8, 29, 20, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lu-zero', 'type': 'User'}]","[{'commit_sha': 'bad22f19eb2c5edc4168b5bb8c31ef516d77ac27', 'committer_username': 'alexlqrs', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 8, 5, 9, 43, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f2e4710f194122a77aaa142e154a690fb7de5b9', 'committer_username': 'alexlqrs', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 8, 5, 9, 43, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afb0e0b74e03ddd19bc8b38b94bf8ac2b1ff6a4f', 'committer_username': 'alexlqrs', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 8, 5, 9, 43, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd35b7856b22514a64684fff8d9b0c2622d04bba0', 'committer_username': 'alexlqrs', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 8, 5, 9, 43, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7006acaf1216ad6be6cdf752a1cc3dd8fde9e72c', 'committer_username': 'alexlqrs', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 8, 5, 9, 43, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f064a94bca6bdc868543521c3ee7ad7d76d888b', 'committer_username': 'alexlqrs', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 8, 5, 9, 43, 14, tzinfo=datetime.timezone.utc)}]",Aleksandr Gushchin,36573139,,User,,11,,2,2
700505641,Scene detection improvement,"Adjusting values of thresholds for both versions of the scene detection algorithm.

Improved metric for the fast version. The peaks of the metric are now more distinguishable from the other values, so the threshold cuts off only relevent values.",True,2765,https://api.github.com/repos/xiph/rav1e/pulls/2765,https://github.com/xiph/rav1e/pull/2765,closed,218,45,6,6,13,17,0,0,[],2021-07-30 19:03:02+00:00,2021-08-30 06:41:14+00:00,2633892.0,"30 days, 11:38:12","[{'comment_id': 680203394, 'comment_body': 'I might like a bit more analysis of this. In particular, this effectively limits us to a scene cut only every other frame, correct?', 'comment_created': datetime.datetime(2021, 7, 30, 20, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tdaede', 'type': 'User'}, {'comment_id': 681237983, 'comment_body': 'The visualization you can see at the end of this [post](https://dev.to/aleksandrgushchin/threshold-experiments-for-scene-change-detector-2hbp). The new metric can be interpreted as the rate of change in dissimilarity metric between successive frames. Since the action inside the scene is usually monotonous, the dissimilarity metric stays about the same or changes at a small rate. However, there are scenes whose movement within a frame causes the dissimilarity metric to have high values, even exceeding the values of some scene changes.\r\nThe new metric solves this problem by decreasing the values on such scenes. At the same time dissimilarity metric peaks on frames with scene change remain high enough for detection with the threshold.', 'comment_created': datetime.datetime(2021, 8, 2, 20, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'AleksandrGushchin', 'type': 'User'}, {'comment_id': 681314929, 'comment_body': ""Great, OK it does look like a big improvement.\r\n\r\nHave you done a run on AWCY with vimeo-corpus-10s? I can help you do this if you like.\r\n\r\nWhat is the intended behavior for the second frame in a scene, when the previous scene's score isn't available? This looks like it treats the previous frame as having a delta of 0. This seems like it'd effectively make a scenecut here more likely than average always.\r\n\r\nHave you considered doing a delta of an average of x previous frames?"", 'comment_created': datetime.datetime(2021, 8, 2, 22, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tdaede', 'type': 'User'}, {'comment_id': 681321099, 'comment_body': 'You should be able to change THRESH_MAX rather than adding another constant here.', 'comment_created': datetime.datetime(2021, 8, 2, 23, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tdaede', 'type': 'User'}, {'comment_id': 682932266, 'comment_body': ""> Have you done a run on AWCY with vimeo-corpus-10s? I can help you do this if you like.\r\n\r\nNot yet, it would be helpful!\r\n\r\n> What is the intended behavior for the second frame in a scene, when the previous scene's score isn't available? \r\n\r\nOn the first few frames of the video the previous metric has low values, so subtracting one frame metric value from the other should not exceed the threshold. \r\n\r\n> Have you considered doing a delta of an average of x previous frames?\r\n\r\nNot yet, because this new metric solved my problem, but I'll do experiments with it."", 'comment_created': datetime.datetime(2021, 8, 4, 20, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'AleksandrGushchin', 'type': 'User'}, {'comment_id': 691992714, 'comment_body': 'Can we expose this option to CLI also, like users could explicitly set different speed detection mode irrespective of default modes? I think that might be a good addition', 'comment_created': datetime.datetime(2021, 8, 19, 10, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vibhoothi', 'type': 'User'}, {'comment_id': 692146585, 'comment_body': 'Might be good if we can say current state in a nice and concise way, \r\nOne idea I had was like this, feel free to edit and modify:) \r\n```suggestion\r\n        .help(""Specify Speed of scene-change detection, 0: best, 1: medium, 2: Fastest mode[default:  0 for s0-s6, 1 for s7-s9, 2 for s10]"")\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 14, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vibhoothi', 'type': 'User'}, {'comment_id': 692149037, 'comment_body': 'Do we need to go to upperbound of u32, if doing that might be better to alert user by a warning that it is going to be fast mode(which is 2)? Or just restrict to 0,1,2. and throw error.\r\n', 'comment_created': datetime.datetime(2021, 8, 19, 14, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vibhoothi', 'type': 'User'}, {'comment_id': 692150217, 'comment_body': ""This needs to be set to an actual version (at least a semver-compatible major version). The reason is that crates can't be published to crates.io if they depend on a * version."", 'comment_created': datetime.datetime(2021, 8, 19, 14, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shssoichiro', 'type': 'User'}, {'comment_id': 692150515, 'comment_body': 'Would be safer to have explicit version :)\r\n```suggestion\r\nhistogram = ""0.6.9""\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 14, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vibhoothi', 'type': 'User'}, {'comment_id': 695182640, 'comment_body': 'Think this is extra whitespace added? \r\n```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2021, 8, 24, 20, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vibhoothi', 'type': 'User'}, {'comment_id': 697699195, 'comment_body': 'This is not really new to your patch but I realized that this is basically a roundabout way to calculate pixel area...', 'comment_created': datetime.datetime(2021, 8, 27, 20, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tdaede', 'type': 'User'}, {'comment_id': 697699636, 'comment_body': 'You can backsolve SCALE_FACTOR into THRESH_MIN and THRESH_MAX and avoid an extra constant. Alternately, you could go the other way around and get rid of THRESH_MAX and THRESH_MIN. Not absolutely necessary for landing but it would be nice.', 'comment_created': datetime.datetime(2021, 8, 27, 20, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tdaede', 'type': 'User'}, {'comment_id': 698061320, 'comment_body': 'I think we want to remove the default value here, because by default we want it set according to the speed level.', 'comment_created': datetime.datetime(2021, 8, 29, 19, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shssoichiro', 'type': 'User'}, {'comment_id': 698063834, 'comment_body': 'It is set according to the speed level by default on line 607.\r\n`cfg.speed_settings.fast_scene_detection` changes on lines 609-617 only when the user specifies a value of scene detection speed.\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 29, 20, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AleksandrGushchin', 'type': 'User'}, {'comment_id': 698066065, 'comment_body': 'Have we tested that? My concern was that `matches.occurrences_of(""SCENE_CHANGE_DETECTION_SPEED"")` would pick up the default value of ""2"" specified here. I\'d like to verify that\'s not the case.', 'comment_created': datetime.datetime(2021, 8, 29, 20, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shssoichiro', 'type': 'User'}, {'comment_id': 698068005, 'comment_body': 'matches.occurrences_of(""SCENE_CHANGE_DETECTION_SPEED"") is 0 if no flags are passed. If that\'s your concern.', 'comment_created': datetime.datetime(2021, 8, 29, 20, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lu-zero', 'type': 'User'}]","[{'commit_sha': 'bad22f19eb2c5edc4168b5bb8c31ef516d77ac27', 'committer_username': 'alexlqrs', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 8, 5, 9, 43, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f2e4710f194122a77aaa142e154a690fb7de5b9', 'committer_username': 'alexlqrs', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 8, 5, 9, 43, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afb0e0b74e03ddd19bc8b38b94bf8ac2b1ff6a4f', 'committer_username': 'alexlqrs', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 8, 5, 9, 43, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd35b7856b22514a64684fff8d9b0c2622d04bba0', 'committer_username': 'alexlqrs', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 8, 5, 9, 43, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7006acaf1216ad6be6cdf752a1cc3dd8fde9e72c', 'committer_username': 'alexlqrs', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 8, 5, 9, 43, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f064a94bca6bdc868543521c3ee7ad7d76d888b', 'committer_username': 'alexlqrs', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 8, 5, 9, 43, 14, tzinfo=datetime.timezone.utc)}]",Aleksandr Gushchin,36573139,,User,,11,,2,2
717296894,Update according to new version of rav1e scene detection algorithm,"Change log:
	CLI option to choose one of three version of scene detection
	CLI option for file to write results in
	Added speed measurment",True,162,https://api.github.com/repos/rust-av/av-scenechange/pulls/162,https://github.com/rust-av/av-scenechange/pull/162,closed,80,29,4,3,2,6,0,0,[],2021-08-22 11:51:57+00:00,2021-09-14 20:45:08+00:00,2019191.0,"23 days, 8:53:11","[{'comment_id': 693554483, 'comment_body': ""I don't think this needs to be commented and duplicated, right?"", 'comment_created': datetime.datetime(2021, 8, 22, 20, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shssoichiro', 'type': 'User'}, {'comment_id': 693554628, 'comment_body': ""Currently the default is to use slow analysis, so I'd prefer to keep that as the default."", 'comment_created': datetime.datetime(2021, 8, 22, 20, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shssoichiro', 'type': 'User'}, {'comment_id': 693554692, 'comment_body': ""What is the use case for having av-scenechange itself measure this? It doesn't seem like the CLI prints this info. There's also the progress callback that's intended to allow calling apps to create their own progress meters, etc. Is there a benefit to doing this here rather than having whatever library is using av-scenechange calculate this?"", 'comment_created': datetime.datetime(2021, 8, 22, 20, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shssoichiro', 'type': 'User'}, {'comment_id': 693554725, 'comment_body': 'As mentioned earlier, would prefer ""0"" to be the default here.', 'comment_created': datetime.datetime(2021, 8, 22, 20, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shssoichiro', 'type': 'User'}, {'comment_id': 693554831, 'comment_body': 'You can use `matches.is_present` instead of `occurrences_of`, it avoids the need to compare against 0. (Same with line 90 below.)', 'comment_created': datetime.datetime(2021, 8, 22, 20, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shssoichiro', 'type': 'User'}, {'comment_id': 694852474, 'comment_body': 'I think the name of this argument is incorrect, and should be `SPEED_MODE`.\r\n\r\nI\'d actually go a little further in cleaning it up to be something like this (from lines 66-79):\r\n\r\n```rust\r\nif let Some(speed_mode) = matches.value_of(""SPEED_MODE"") {\r\n    opts.fast_analysis = match speed_mode {\r\n        ""0"" => SceneDetectionSpeed::Slow,\r\n        ""1"" => SceneDetectionSpeed::Medium,\r\n        ""2"" => SceneDetectionSpeed::Fast,\r\n        _ => panic!(""Speed mode must be in range [0; 2]""),\r\n    };\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 8, 24, 13, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shssoichiro', 'type': 'User'}]","[{'commit_sha': 'fcb225242f3c983deafca42875d6c211e8d147fc', 'committer_username': 'alexlqrs', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 8, 5, 9, 43, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '218be256b53bdab94aa1637345be7c29601ed26f', 'committer_username': 'alexlqrs', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 8, 5, 9, 43, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77b889aafe431cffb0a59e3a25a28d78d2dced49', 'committer_username': 'shssoichiro', 'committer_name': 'Josh Holmer', 'committer_email': None, 'commit_date': datetime.datetime(2013, 11, 15, 21, 12, 17, tzinfo=datetime.timezone.utc)}]",Aleksandr Gushchin,36573139,,User,,11,,2,2

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
104629023,rav1e,xiph/rav1e,Assembly,249,3670,90,118,4231,237,38,40,"[{'id': 700505641, 'number': 2765, 'closed': datetime.datetime(2021, 8, 30, 6, 41, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 19, 3, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2633892.0, 'time_delta': '30 days, 11:38:12', 'additions': 218, 'deletions': 45, 'state': 'closed'}]"
221598838,av-scenechange,rust-av/av-scenechange,Rust,10,13,5,6,230,5,1,0,"[{'id': 717296894, 'number': 162, 'closed': datetime.datetime(2021, 9, 14, 20, 45, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 22, 11, 51, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2019191.0, 'time_delta': '23 days, 8:53:11', 'additions': 80, 'deletions': 29, 'state': 'closed'}]"
