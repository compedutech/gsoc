pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
999948724,Fixes for L1 cache parameterization to 1KB,"## Summary
This PR covers the changes done for the parameterized caches to 1KB.

## Issue Fixed
This Fix tends to achieve parameterized/heterogeneous sizes for I$ and D$.

## Area
Module/tool/makefile/script in question.

## Reasoning (outdated, confusing, verbose, etc.)
This parameterization is required for TinyParrot to make the caches ultra-tiny

## Additional Changes Required (if any)
Make changes inside the code for heterogeneous cache sizes

## Analysis
Potential impact of the change.

## Verification
RISC-V tests and Beebs from BlackParrot SDK were passing 

## Additional Context
It is a GSoC'22 project's deliverable.

",True,1101,https://api.github.com/repos/black-parrot/black-parrot/pulls/1101,https://github.com/black-parrot/black-parrot/pull/1101,closed,109,70,26,47,1,22,0,0,[],2022-07-18 20:39:57+00:00,2022-10-10 03:31:13+00:00,7195876.0,"83 days, 6:51:16","[{'comment_id': 941889130, 'comment_body': 'Can you double check that the memory bypass logic is using the correct bits? I cannot see it in this changeset, but I believe it may be using the block and set bits rather than the full page offset', 'comment_created': datetime.datetime(2022, 8, 9, 23, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 941889368, 'comment_body': ""Noting that we'll need a ctag per cache type"", 'comment_created': datetime.datetime(2022, 8, 9, 23, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 941890639, 'comment_body': 'Let me suggest a little cleaner implementation with a neat Verilog trick ""zero-width concatenation"".\r\n\r\nlocalparam ctag_vbits_lp = page_offset_width_gp - block_offset_width_lp - sindex_width_lp;\r\nwire [ctag_offset_bits_lp-1:0] ctag_vbits = page_offset_tl_r[page_offset_width_gp-1:block_offset_width_lp+sindex_width_lp];\r\nwire [ctag_width_p-1:0] ctag_li = {ptag_i, {ctag_vbits_lp>0{ctag_vbits}}};\r\n\r\nThis will only do the concatenation if ctag_vbits_lp is greater than 0, otherwise it will use ptag_i directly. Additionally, it\'s nice to have the ctag_vbits_lp as its own variable as a sanity check in the waveform dump', 'comment_created': datetime.datetime(2022, 8, 9, 23, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 941890864, 'comment_body': 'Same comment as D$', 'comment_created': datetime.datetime(2022, 8, 9, 23, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 942753694, 'comment_body': 'Which signal is using full page offset? Can you point toward it?  Here is the memory bypass logic: https://github.com/KinzaQamar/black-parrot/blob/a10efba489a09883798531313089e32db2b740f2/bp_fe/src/v/bp_fe_icache.sv#L589\r\nWhich I believe is using the correct bits inside the comparison.', 'comment_created': datetime.datetime(2022, 8, 10, 18, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 945869506, 'comment_body': ""we can get rid of this generic ctag since we shouldn't be using it anywhere"", 'comment_created': datetime.datetime(2022, 8, 15, 15, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950151859, 'comment_body': ""call this 'ctag_width_lp' to fully genericize it"", 'comment_created': datetime.datetime(2022, 8, 19, 12, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950152896, 'comment_body': ""call this 'ctag_width_lp' to fully genericize it"", 'comment_created': datetime.datetime(2022, 8, 19, 12, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950154611, 'comment_body': 'line 108 needs to change to use ctag_width_lp', 'comment_created': datetime.datetime(2022, 8, 19, 12, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950154868, 'comment_body': 'L199 needs to change to use ctag_width_lp', 'comment_created': datetime.datetime(2022, 8, 19, 12, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950155790, 'comment_body': 'calculate parameter ctag_width_lp (name change) above, cannot declare localparam after usage in most tools', 'comment_created': datetime.datetime(2022, 8, 19, 12, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950155869, 'comment_body': 'calculate parameter ctag_width_lp (name change) above, cannot declare localparam after usage in most tools', 'comment_created': datetime.datetime(2022, 8, 19, 12, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950155985, 'comment_body': 'calculate parameter ctag_width_lp (name change) above, cannot declare localparam after usage in most tools', 'comment_created': datetime.datetime(2022, 8, 19, 12, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950156066, 'comment_body': 'calculate parameter ctag_width_lp (name change) above, cannot declare localparam after usage in most tools', 'comment_created': datetime.datetime(2022, 8, 19, 12, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950156235, 'comment_body': 'calculate parameter ctag_width_lp above, cannot declare localparam after usage in most tools', 'comment_created': datetime.datetime(2022, 8, 19, 12, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950367255, 'comment_body': ""> line 108 needs to change to use ctag_width_lp\r\n\r\nI see. Yeah, I didn't copy the change everywhere. My bad!"", 'comment_created': datetime.datetime(2022, 8, 19, 16, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 958065915, 'comment_body': ""This needs to be moved to before L116, can't declare parameters after usage"", 'comment_created': datetime.datetime(2022, 8, 30, 6, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 958066921, 'comment_body': ""This needs to be moved before L45, can't declare parameter after usage"", 'comment_created': datetime.datetime(2022, 8, 30, 6, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 958068510, 'comment_body': 'must be declared before L15, cannot declare parameter after usage', 'comment_created': datetime.datetime(2022, 8, 30, 6, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 958068967, 'comment_body': ""don't need this assertion, page offset will never change"", 'comment_created': datetime.datetime(2022, 8, 30, 6, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 958070116, 'comment_body': ""We're not trying to check the page offset constant itself here; instead, we're testing if block_size*index_size > 4kB"", 'comment_created': datetime.datetime(2022, 8, 30, 6, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 958070463, 'comment_body': 'Need to declare before L15, cannot declare parameter after usage', 'comment_created': datetime.datetime(2022, 8, 30, 6, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}]","[{'commit_sha': 'd196dfc69e06b9908ec97e212f45af8162df1cfc', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5afce4b97cbccd87163d6d1d82815c3761e9c15e', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ba7ff4883012ef16da103f701a9b90cf5222d7a', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf5563bcbde092c050e716a40e42d5dc7d890d6f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e3f969dec6549de5a7fdd81dc716100b7775d61', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ee23953b1f844122a7bcdedf9ddf600d66c46af', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d38f3be751c80a9a05408b93973eae9c24b0430', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f167ddf56d66430630c75a4363b9395e6e058404', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59a465a0788e7d32ecc19f808320053d45974725', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1344d72dd769f8a39325baee8ecb5cb00f9ad9', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a016861d4b5eb6b137a696b5f730ce361e43cda', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbe5baf01a4fec6b34c3b0c6186692c5e157b45a', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f37a139fb991d995d7dbdfdf5706b7858edb9f38', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aa51eb56b034b4710352e4a1875f1beb20a9b9a', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6f2e770ff11a7256bc7a985165fb3c44cb44aee', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87fb155bde3faf208e00696550582b5340825344', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd66263d1d13d9e5ba7905d0039eda0ecfdce7ff6', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c191381d35577593967d00882bb88da669427e7', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34a40133aea82c507f3fda94b351b938fb26b25d', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f49c2c6e556d5fb2955f26a54db21002e4e058f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '801209c2fb8a0235cf72c966a0e8ae97f9881dc6', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a270faac05c2ca35d0f35f74a4a9cd933c59109', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b885f4f6892f5c4bd4e16a183b30e845b85ef88', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a8a8bd44d7441c373b472d30e6e64ff5bf0fb6d', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de4996bc196260e72f1e91b27bcca652b337565e', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c2ea191886a6fe85e952c52fd2fd2d4ce5f314c', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03c750d2f25f0c17a203381d528fda925c2eab61', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '521b732122766f4c365690d395f67fe8b94e9eb7', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e42ea330ca152dae382041c39fb8e7a92315647', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8906ef0928ba2f96f765c17543d17442ddad207c', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ec9145610403a003b35d7a03edc5068cc13bbe6', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b6a504c29bacc071b33d505787cd77ca689b4dd', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9954485ccac4ef11ae4b1b16e7056b2499c8104', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25712e574023e266ce76ea29ce82adc003b39e2c', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc8dbe40074238e79f1f25ac85fc44f620f2d820', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a89652717e93d8effe17c9bf8a74e1572597d3e', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b17fd0b130954c5cd4ce20e912581569f84ebf0', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0422f5b5397558b2b0c275e5b533ef49b5bb9d3d', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69a10f3837d77f894f8c202848670e3e1dbd1ea0', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26d9a8a6aee47f404e8b4a4d4e223473948cc66e', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c5a60cce0f3aea572c9fd81bae77166d7856208', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7074086cf58dbbb0f00af21dcbb91ed94f3ccab', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8688c99e157f175805856218270e83cca4021a8b', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '230d3514628138d43c93beee544374a3c54136cb', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95efe11a9848a5e88348323c10cfce5a5beff410', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e781ea062ef8b28547a94c241b1e8e197bafd97b', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '541694b48319b9f0941e2ea9b22afba87e9a0735', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}]",Kinza Qamar Zaman,66952091,,User,,51,,41,12
1064197340,Code for bsg_mem_1rw_sync_subbanked SRAM,"This PR covers code that can convert small logical SRAMs to large SRAM. There are three variants of the code:
1) No mask 
2) Bit mask
3) Byte mask

Since, it is a 1rw SRAM reads and writes from small SRAMs would not happen simultaneously. The future work would be to add 1r1w sync backing SRAM to read and write simultaneously from small SRAMs .
The code is up and running on Verilator.",True,585,https://api.github.com/repos/bespoke-silicon-group/basejump_stl/pulls/585,https://github.com/bespoke-silicon-group/basejump_stl/pull/585,closed,1250,1,13,55,4,29,0,0,[],2022-09-22 13:44:55+00:00,2022-10-10 03:29:48+00:00,1518293.0,"17 days, 13:44:53","[{'comment_id': 981102955, 'comment_body': ""I think this is incorrect, it's just taking the first bit of the mask and using it for all bits in the mask. You should just directly assign w_mask_i to the RAM\r\n\r\nCan you check why this bug is not detected in your testbench?\r\nThe sequence\r\n```\r\nv_i = 1 w_i = 0 -> data_o = 0\r\nv_i = 1 w_i = 1 w_mask_i = 111110 data_i = 1\r\nv_i = 1 w_i = 0 -> data_o = 1\r\n```\r\nshould fail with the current code"", 'comment_created': datetime.datetime(2022, 9, 27, 11, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 981175684, 'comment_body': ""Since the width_p is 1. I was getting a warning while assigning the whole mask. Then it shouldn't be 1"", 'comment_created': datetime.datetime(2022, 9, 27, 12, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 985099954, 'comment_body': '@KinzaQamar try with subbank = 2, the current code will fail as well', 'comment_created': datetime.datetime(2022, 10, 1, 13, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986289150, 'comment_body': 'use BSG_INV_PARAM here as well', 'comment_created': datetime.datetime(2022, 10, 3, 22, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986290234, 'comment_body': 'Please add this comment\r\n\r\n// For subbanked SRAMs, all subbanks must either read or write from the same address at once. There could be an implementation\r\n//   to support independent subbank r/w by using a 1r1w backing SRAM. This may make sense in an FPGA\r\n//   environment, but we leave this to future work', 'comment_created': datetime.datetime(2022, 10, 3, 22, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986291547, 'comment_body': 'Rather than simulation time, this should be an elaboration time assertion.\r\n\r\nif (`BSG_IS_POW2)...\r\n  $error()\r\n\r\nnot in an always block. This will cause the build to fail, which is the desired behavior. Please add a descriptive $error message as well', 'comment_created': datetime.datetime(2022, 10, 3, 22, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986291851, 'comment_body': 'applies to other modules as well', 'comment_created': datetime.datetime(2022, 10, 3, 22, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986291917, 'comment_body': 'applies to other modules as well', 'comment_created': datetime.datetime(2022, 10, 3, 22, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986291933, 'comment_body': 'applies to other modules as well\r\n', 'comment_created': datetime.datetime(2022, 10, 3, 22, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986292276, 'comment_body': 'This breaks for subbank > 1, try writing to only 1 subbank and reading from it', 'comment_created': datetime.datetime(2022, 10, 3, 22, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986292437, 'comment_body': 'The solution is to instantiate a byte-mask RAM for subbank > 1', 'comment_created': datetime.datetime(2022, 10, 3, 22, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986741712, 'comment_body': ""Since this is a no mask SRAM, it works only for sub bank == 1. There is an assertion below which would fail if the subbank_p is other than 1.\r\n\r\nWe already have a byte-mask RAM. You're saying to instantiate it inside this module ?"", 'comment_created': datetime.datetime(2022, 10, 4, 11, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 986908693, 'comment_body': 'Yes. There is an overhead to supporting byte-mask on a hardened SRAM. For designs which do not need it (subbank == 1), we do not wish to incur the overhead. When subbank > 1, we have no choice but to use a byte mask RAM unless we want to instantiate multiple hardened RAMs', 'comment_created': datetime.datetime(2022, 10, 4, 14, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 990274970, 'comment_body': 'els_lp -> lg_els_lp', 'comment_created': datetime.datetime(2022, 10, 7, 16, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990278580, 'comment_body': 'for-block should be labeled if there are module instantiations inside.', 'comment_created': datetime.datetime(2022, 10, 7, 16, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990279869, 'comment_body': 'bsg_mem_1rw_sync_mask_write_bit_synth already has bsg_dff_en_bypass for latch_last_read_p, and there is another one here?', 'comment_created': datetime.datetime(2022, 10, 7, 16, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990281565, 'comment_body': 'Looks very similar to bsg_mem_1rw_sync_mask_write_byte_banked, except v_i are independent for width banks, there is no depth banks.', 'comment_created': datetime.datetime(2022, 10, 7, 16, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990299807, 'comment_body': 'This is because we are ORing the v_i bits and will end up reading a subbank for which v_i would be loww.', 'comment_created': datetime.datetime(2022, 10, 7, 16, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 990326207, 'comment_body': 'instead of ""if (num_subbank_p > 1)"", ""else"" should be enough?', 'comment_created': datetime.datetime(2022, 10, 7, 17, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990334671, 'comment_body': ""What if  width_p=15, and num_subbank_p=3? Couldn't it support that by using bsg_mem_1rw_sync_mask_write_bit instead?"", 'comment_created': datetime.datetime(2022, 10, 7, 17, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990345717, 'comment_body': 'Okay I see.', 'comment_created': datetime.datetime(2022, 10, 7, 17, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990347586, 'comment_body': 'Does width_p have to be power of 2? num_subbank_p can be non power of 2.', 'comment_created': datetime.datetime(2022, 10, 7, 17, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990352256, 'comment_body': 'I see. A check is missing for a byte size sub bank (minimum)', 'comment_created': datetime.datetime(2022, 10, 7, 17, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 990537308, 'comment_body': 'If num_subbank_p is a non-power of 2, it will break the check below (width_p% num_subbank_p==0)', 'comment_created': datetime.datetime(2022, 10, 7, 22, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 990538676, 'comment_body': 'Yeah, it would work but then we have to implement a check for num_subbank_p!=0. Otherwise our code will break.', 'comment_created': datetime.datetime(2022, 10, 7, 22, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 990664308, 'comment_body': 'This is the opposite of bsg_mem_1rw_sync_mask_write_bit_banked, where we are breaking the big SRAM into N small banks based on width and depth. Here, we want a big SRAM as a result of N logical banks.', 'comment_created': datetime.datetime(2022, 10, 8, 16, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 990698366, 'comment_body': ""Well, right now, if num_subbank_p is set to 0, wouldn't it just silently fail?"", 'comment_created': datetime.datetime(2022, 10, 8, 21, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990701199, 'comment_body': 'Yes, it would be failing on 0.', 'comment_created': datetime.datetime(2022, 10, 8, 22, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 990822919, 'comment_body': 'Can you put that info on the comments? where this module should be used, etc.', 'comment_created': datetime.datetime(2022, 10, 9, 18, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}]","[{'commit_sha': 'e1f67ff298d616ed1ffe07e60feaaa0d5c14b241', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4e597e74a700dd550af83f5cc17617fc7d13367', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd17f01ecae1dd137341da0fa7326045d151ab74f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97da69dc00b2e680e8cab1e6bbfa8633a441d165', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a9f88dc04e2226eedf2d7df05a1fd884b49a917', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00f2e5e9532f858028ecbfafc15abb312c8603bd', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '441af3f37db4f3fdcdf19143cdeb60e002f0b529', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4df000c9491578a14efe7cb277cccb98348f7ddd', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ffa9197dadba760d4c8be390618ad3bb58d5bf9', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04836afad10ed53cae153278fbb88eeadfd8111d', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c795b88a692f7edf539c12c8026840a605b8df6', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76c4d4c0b4fcfa04d0287f39e174850d4bf0186d', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8947c5859b18ad5dc9ef5e6556381df6edb28752', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf28d1f4b6989755139c85477404fc913cffe6ba', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89e28f53e877594bd70aa39fbf39197d807e4417', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2dbab0475cfbcf4c0d4195deeea4fc484be5179', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4439010388ce3b2481ff4fcb69771db5cb186e42', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6527822bf054e46f8e46ca1a15f3c9aa9708be03', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97afa365ad689625fa8878fc4cfd65cbc8104d04', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50298d439db99635ccdc0692a0b817a0e32bf0a7', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5594cabbc0ce767932f5705ed740b5f7ca606f5c', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0996c5c0f5ef444bfd216aea1faa24bf206b2a76', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '171665e13c5df62c177d2a420218b72af18db454', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9366d09f4e2fa82b7f1945758b20b24c5fe3de8', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fec7e10dfb6084a284e15d8fbbd37902f88574a', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a98af808c85f44f3dacc954960d439f55cd628f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '642131e8d5367a2e0fbb1da493386a0570f957c8', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e85779e295c7551ebcdb6d3237884cc22305c74', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ed9afcf54d4a12415a6092bd56e3b248816368c', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff8093c9e49756981fe147b8e7b5cdf9c6ca8c7f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15a8ae30e610c8a1cc854a9c28c1f7e68c5de2fe', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2706f7141334a4313ee2a44d44f47fcfd088f36f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cc8b3ef7bbc9257705477ad8c66b0b3b21feebe', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd147a705a1302ec95b5128fba4306effc8d5a02', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '059038e107cb94cd3ab3de239349d5796d2dc723', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f84843d6570d7cf65960ce8a08df2de8e6a1046a', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fbd02964b3e3df1c73038a9caf97bf54624502a', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fde03909008ed44e10b3e024d212fcb0ee3cf5da', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3afaf0e91cd0c46fb4b69c6adaf065e728aa9db7', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18e1ba9af523a6c1be26609a184397f206acbaf9', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee326c5459fc86792388b46b3582d45c29a092cc', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '170952ec1157b547f889c2e83559bf0e6bb05840', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8de2a2be564dd604890e21035685edd8c796139', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e6cbddf1c04c330ffb7b60e1178d21f1fcd30a5', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8db5359745b0f7b9dbcb825e4230f64899c9b400', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fea04f97bd17bd59023a440d6c46578cafa5c39', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '862c5660de5522412f53a96b9997688a4854d94a', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06b6b389cd75874b07093a329579d3dab3dd0744', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb5ff49f3cc27a58de82932266cbe901d7b9449c', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '097229ff9d276fd9068c80d08e4fa9216073066f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12a297f009f03889c06796695d07a85ab2a66c1e', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22b9323c29aa1b6855c3c8955c0340ec093dccc', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaf4f990e6af3d9bd98b724d3bc254c0b767ad1f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6fb579b56807e4ce6e0b85ad1180fb61b79c7a2', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36bfcdf2248362848feaff78db50805a6044a20c', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}]",Kinza Qamar Zaman,66952091,,User,,51,,41,12
999948724,Fixes for L1 cache parameterization to 1KB,"## Summary
This PR covers the changes done for the parameterized caches to 1KB.

## Issue Fixed
This Fix tends to achieve parameterized/heterogeneous sizes for I$ and D$.

## Area
Module/tool/makefile/script in question.

## Reasoning (outdated, confusing, verbose, etc.)
This parameterization is required for TinyParrot to make the caches ultra-tiny

## Additional Changes Required (if any)
Make changes inside the code for heterogeneous cache sizes

## Analysis
Potential impact of the change.

## Verification
RISC-V tests and Beebs from BlackParrot SDK were passing 

## Additional Context
It is a GSoC'22 project's deliverable.

",True,1101,https://api.github.com/repos/black-parrot/black-parrot/pulls/1101,https://github.com/black-parrot/black-parrot/pull/1101,closed,109,70,26,47,1,22,0,0,[],2022-07-18 20:39:57+00:00,2022-10-10 03:31:13+00:00,7195876.0,"83 days, 6:51:16","[{'comment_id': 941889130, 'comment_body': 'Can you double check that the memory bypass logic is using the correct bits? I cannot see it in this changeset, but I believe it may be using the block and set bits rather than the full page offset', 'comment_created': datetime.datetime(2022, 8, 9, 23, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 941889368, 'comment_body': ""Noting that we'll need a ctag per cache type"", 'comment_created': datetime.datetime(2022, 8, 9, 23, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 941890639, 'comment_body': 'Let me suggest a little cleaner implementation with a neat Verilog trick ""zero-width concatenation"".\r\n\r\nlocalparam ctag_vbits_lp = page_offset_width_gp - block_offset_width_lp - sindex_width_lp;\r\nwire [ctag_offset_bits_lp-1:0] ctag_vbits = page_offset_tl_r[page_offset_width_gp-1:block_offset_width_lp+sindex_width_lp];\r\nwire [ctag_width_p-1:0] ctag_li = {ptag_i, {ctag_vbits_lp>0{ctag_vbits}}};\r\n\r\nThis will only do the concatenation if ctag_vbits_lp is greater than 0, otherwise it will use ptag_i directly. Additionally, it\'s nice to have the ctag_vbits_lp as its own variable as a sanity check in the waveform dump', 'comment_created': datetime.datetime(2022, 8, 9, 23, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 941890864, 'comment_body': 'Same comment as D$', 'comment_created': datetime.datetime(2022, 8, 9, 23, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 942753694, 'comment_body': 'Which signal is using full page offset? Can you point toward it?  Here is the memory bypass logic: https://github.com/KinzaQamar/black-parrot/blob/a10efba489a09883798531313089e32db2b740f2/bp_fe/src/v/bp_fe_icache.sv#L589\r\nWhich I believe is using the correct bits inside the comparison.', 'comment_created': datetime.datetime(2022, 8, 10, 18, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 945869506, 'comment_body': ""we can get rid of this generic ctag since we shouldn't be using it anywhere"", 'comment_created': datetime.datetime(2022, 8, 15, 15, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950151859, 'comment_body': ""call this 'ctag_width_lp' to fully genericize it"", 'comment_created': datetime.datetime(2022, 8, 19, 12, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950152896, 'comment_body': ""call this 'ctag_width_lp' to fully genericize it"", 'comment_created': datetime.datetime(2022, 8, 19, 12, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950154611, 'comment_body': 'line 108 needs to change to use ctag_width_lp', 'comment_created': datetime.datetime(2022, 8, 19, 12, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950154868, 'comment_body': 'L199 needs to change to use ctag_width_lp', 'comment_created': datetime.datetime(2022, 8, 19, 12, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950155790, 'comment_body': 'calculate parameter ctag_width_lp (name change) above, cannot declare localparam after usage in most tools', 'comment_created': datetime.datetime(2022, 8, 19, 12, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950155869, 'comment_body': 'calculate parameter ctag_width_lp (name change) above, cannot declare localparam after usage in most tools', 'comment_created': datetime.datetime(2022, 8, 19, 12, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950155985, 'comment_body': 'calculate parameter ctag_width_lp (name change) above, cannot declare localparam after usage in most tools', 'comment_created': datetime.datetime(2022, 8, 19, 12, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950156066, 'comment_body': 'calculate parameter ctag_width_lp (name change) above, cannot declare localparam after usage in most tools', 'comment_created': datetime.datetime(2022, 8, 19, 12, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950156235, 'comment_body': 'calculate parameter ctag_width_lp above, cannot declare localparam after usage in most tools', 'comment_created': datetime.datetime(2022, 8, 19, 12, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 950367255, 'comment_body': ""> line 108 needs to change to use ctag_width_lp\r\n\r\nI see. Yeah, I didn't copy the change everywhere. My bad!"", 'comment_created': datetime.datetime(2022, 8, 19, 16, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 958065915, 'comment_body': ""This needs to be moved to before L116, can't declare parameters after usage"", 'comment_created': datetime.datetime(2022, 8, 30, 6, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 958066921, 'comment_body': ""This needs to be moved before L45, can't declare parameter after usage"", 'comment_created': datetime.datetime(2022, 8, 30, 6, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 958068510, 'comment_body': 'must be declared before L15, cannot declare parameter after usage', 'comment_created': datetime.datetime(2022, 8, 30, 6, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 958068967, 'comment_body': ""don't need this assertion, page offset will never change"", 'comment_created': datetime.datetime(2022, 8, 30, 6, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 958070116, 'comment_body': ""We're not trying to check the page offset constant itself here; instead, we're testing if block_size*index_size > 4kB"", 'comment_created': datetime.datetime(2022, 8, 30, 6, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 958070463, 'comment_body': 'Need to declare before L15, cannot declare parameter after usage', 'comment_created': datetime.datetime(2022, 8, 30, 6, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}]","[{'commit_sha': 'd196dfc69e06b9908ec97e212f45af8162df1cfc', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5afce4b97cbccd87163d6d1d82815c3761e9c15e', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ba7ff4883012ef16da103f701a9b90cf5222d7a', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf5563bcbde092c050e716a40e42d5dc7d890d6f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e3f969dec6549de5a7fdd81dc716100b7775d61', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ee23953b1f844122a7bcdedf9ddf600d66c46af', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d38f3be751c80a9a05408b93973eae9c24b0430', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f167ddf56d66430630c75a4363b9395e6e058404', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59a465a0788e7d32ecc19f808320053d45974725', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1344d72dd769f8a39325baee8ecb5cb00f9ad9', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a016861d4b5eb6b137a696b5f730ce361e43cda', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbe5baf01a4fec6b34c3b0c6186692c5e157b45a', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f37a139fb991d995d7dbdfdf5706b7858edb9f38', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aa51eb56b034b4710352e4a1875f1beb20a9b9a', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6f2e770ff11a7256bc7a985165fb3c44cb44aee', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87fb155bde3faf208e00696550582b5340825344', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd66263d1d13d9e5ba7905d0039eda0ecfdce7ff6', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c191381d35577593967d00882bb88da669427e7', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34a40133aea82c507f3fda94b351b938fb26b25d', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f49c2c6e556d5fb2955f26a54db21002e4e058f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '801209c2fb8a0235cf72c966a0e8ae97f9881dc6', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a270faac05c2ca35d0f35f74a4a9cd933c59109', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b885f4f6892f5c4bd4e16a183b30e845b85ef88', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a8a8bd44d7441c373b472d30e6e64ff5bf0fb6d', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de4996bc196260e72f1e91b27bcca652b337565e', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c2ea191886a6fe85e952c52fd2fd2d4ce5f314c', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03c750d2f25f0c17a203381d528fda925c2eab61', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '521b732122766f4c365690d395f67fe8b94e9eb7', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e42ea330ca152dae382041c39fb8e7a92315647', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8906ef0928ba2f96f765c17543d17442ddad207c', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ec9145610403a003b35d7a03edc5068cc13bbe6', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b6a504c29bacc071b33d505787cd77ca689b4dd', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9954485ccac4ef11ae4b1b16e7056b2499c8104', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25712e574023e266ce76ea29ce82adc003b39e2c', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc8dbe40074238e79f1f25ac85fc44f620f2d820', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a89652717e93d8effe17c9bf8a74e1572597d3e', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b17fd0b130954c5cd4ce20e912581569f84ebf0', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0422f5b5397558b2b0c275e5b533ef49b5bb9d3d', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69a10f3837d77f894f8c202848670e3e1dbd1ea0', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26d9a8a6aee47f404e8b4a4d4e223473948cc66e', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c5a60cce0f3aea572c9fd81bae77166d7856208', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7074086cf58dbbb0f00af21dcbb91ed94f3ccab', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8688c99e157f175805856218270e83cca4021a8b', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '230d3514628138d43c93beee544374a3c54136cb', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95efe11a9848a5e88348323c10cfce5a5beff410', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e781ea062ef8b28547a94c241b1e8e197bafd97b', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '541694b48319b9f0941e2ea9b22afba87e9a0735', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}]",Kinza Qamar Zaman,66952091,,User,,51,,41,12
1064197340,Code for bsg_mem_1rw_sync_subbanked SRAM,"This PR covers code that can convert small logical SRAMs to large SRAM. There are three variants of the code:
1) No mask 
2) Bit mask
3) Byte mask

Since, it is a 1rw SRAM reads and writes from small SRAMs would not happen simultaneously. The future work would be to add 1r1w sync backing SRAM to read and write simultaneously from small SRAMs .
The code is up and running on Verilator.",True,585,https://api.github.com/repos/bespoke-silicon-group/basejump_stl/pulls/585,https://github.com/bespoke-silicon-group/basejump_stl/pull/585,closed,1250,1,13,55,4,29,0,0,[],2022-09-22 13:44:55+00:00,2022-10-10 03:29:48+00:00,1518293.0,"17 days, 13:44:53","[{'comment_id': 981102955, 'comment_body': ""I think this is incorrect, it's just taking the first bit of the mask and using it for all bits in the mask. You should just directly assign w_mask_i to the RAM\r\n\r\nCan you check why this bug is not detected in your testbench?\r\nThe sequence\r\n```\r\nv_i = 1 w_i = 0 -> data_o = 0\r\nv_i = 1 w_i = 1 w_mask_i = 111110 data_i = 1\r\nv_i = 1 w_i = 0 -> data_o = 1\r\n```\r\nshould fail with the current code"", 'comment_created': datetime.datetime(2022, 9, 27, 11, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 981175684, 'comment_body': ""Since the width_p is 1. I was getting a warning while assigning the whole mask. Then it shouldn't be 1"", 'comment_created': datetime.datetime(2022, 9, 27, 12, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 985099954, 'comment_body': '@KinzaQamar try with subbank = 2, the current code will fail as well', 'comment_created': datetime.datetime(2022, 10, 1, 13, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986289150, 'comment_body': 'use BSG_INV_PARAM here as well', 'comment_created': datetime.datetime(2022, 10, 3, 22, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986290234, 'comment_body': 'Please add this comment\r\n\r\n// For subbanked SRAMs, all subbanks must either read or write from the same address at once. There could be an implementation\r\n//   to support independent subbank r/w by using a 1r1w backing SRAM. This may make sense in an FPGA\r\n//   environment, but we leave this to future work', 'comment_created': datetime.datetime(2022, 10, 3, 22, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986291547, 'comment_body': 'Rather than simulation time, this should be an elaboration time assertion.\r\n\r\nif (`BSG_IS_POW2)...\r\n  $error()\r\n\r\nnot in an always block. This will cause the build to fail, which is the desired behavior. Please add a descriptive $error message as well', 'comment_created': datetime.datetime(2022, 10, 3, 22, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986291851, 'comment_body': 'applies to other modules as well', 'comment_created': datetime.datetime(2022, 10, 3, 22, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986291917, 'comment_body': 'applies to other modules as well', 'comment_created': datetime.datetime(2022, 10, 3, 22, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986291933, 'comment_body': 'applies to other modules as well\r\n', 'comment_created': datetime.datetime(2022, 10, 3, 22, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986292276, 'comment_body': 'This breaks for subbank > 1, try writing to only 1 subbank and reading from it', 'comment_created': datetime.datetime(2022, 10, 3, 22, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986292437, 'comment_body': 'The solution is to instantiate a byte-mask RAM for subbank > 1', 'comment_created': datetime.datetime(2022, 10, 3, 22, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 986741712, 'comment_body': ""Since this is a no mask SRAM, it works only for sub bank == 1. There is an assertion below which would fail if the subbank_p is other than 1.\r\n\r\nWe already have a byte-mask RAM. You're saying to instantiate it inside this module ?"", 'comment_created': datetime.datetime(2022, 10, 4, 11, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 986908693, 'comment_body': 'Yes. There is an overhead to supporting byte-mask on a hardened SRAM. For designs which do not need it (subbank == 1), we do not wish to incur the overhead. When subbank > 1, we have no choice but to use a byte mask RAM unless we want to instantiate multiple hardened RAMs', 'comment_created': datetime.datetime(2022, 10, 4, 14, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'dpetrisko', 'type': 'User'}, {'comment_id': 990274970, 'comment_body': 'els_lp -> lg_els_lp', 'comment_created': datetime.datetime(2022, 10, 7, 16, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990278580, 'comment_body': 'for-block should be labeled if there are module instantiations inside.', 'comment_created': datetime.datetime(2022, 10, 7, 16, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990279869, 'comment_body': 'bsg_mem_1rw_sync_mask_write_bit_synth already has bsg_dff_en_bypass for latch_last_read_p, and there is another one here?', 'comment_created': datetime.datetime(2022, 10, 7, 16, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990281565, 'comment_body': 'Looks very similar to bsg_mem_1rw_sync_mask_write_byte_banked, except v_i are independent for width banks, there is no depth banks.', 'comment_created': datetime.datetime(2022, 10, 7, 16, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990299807, 'comment_body': 'This is because we are ORing the v_i bits and will end up reading a subbank for which v_i would be loww.', 'comment_created': datetime.datetime(2022, 10, 7, 16, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 990326207, 'comment_body': 'instead of ""if (num_subbank_p > 1)"", ""else"" should be enough?', 'comment_created': datetime.datetime(2022, 10, 7, 17, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990334671, 'comment_body': ""What if  width_p=15, and num_subbank_p=3? Couldn't it support that by using bsg_mem_1rw_sync_mask_write_bit instead?"", 'comment_created': datetime.datetime(2022, 10, 7, 17, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990345717, 'comment_body': 'Okay I see.', 'comment_created': datetime.datetime(2022, 10, 7, 17, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990347586, 'comment_body': 'Does width_p have to be power of 2? num_subbank_p can be non power of 2.', 'comment_created': datetime.datetime(2022, 10, 7, 17, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990352256, 'comment_body': 'I see. A check is missing for a byte size sub bank (minimum)', 'comment_created': datetime.datetime(2022, 10, 7, 17, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 990537308, 'comment_body': 'If num_subbank_p is a non-power of 2, it will break the check below (width_p% num_subbank_p==0)', 'comment_created': datetime.datetime(2022, 10, 7, 22, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 990538676, 'comment_body': 'Yeah, it would work but then we have to implement a check for num_subbank_p!=0. Otherwise our code will break.', 'comment_created': datetime.datetime(2022, 10, 7, 22, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 990664308, 'comment_body': 'This is the opposite of bsg_mem_1rw_sync_mask_write_bit_banked, where we are breaking the big SRAM into N small banks based on width and depth. Here, we want a big SRAM as a result of N logical banks.', 'comment_created': datetime.datetime(2022, 10, 8, 16, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 990698366, 'comment_body': ""Well, right now, if num_subbank_p is set to 0, wouldn't it just silently fail?"", 'comment_created': datetime.datetime(2022, 10, 8, 21, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}, {'comment_id': 990701199, 'comment_body': 'Yes, it would be failing on 0.', 'comment_created': datetime.datetime(2022, 10, 8, 22, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'KinzaQamar', 'type': 'User'}, {'comment_id': 990822919, 'comment_body': 'Can you put that info on the comments? where this module should be used, etc.', 'comment_created': datetime.datetime(2022, 10, 9, 18, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tommydcjung', 'type': 'User'}]","[{'commit_sha': 'e1f67ff298d616ed1ffe07e60feaaa0d5c14b241', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4e597e74a700dd550af83f5cc17617fc7d13367', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd17f01ecae1dd137341da0fa7326045d151ab74f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97da69dc00b2e680e8cab1e6bbfa8633a441d165', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a9f88dc04e2226eedf2d7df05a1fd884b49a917', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00f2e5e9532f858028ecbfafc15abb312c8603bd', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '441af3f37db4f3fdcdf19143cdeb60e002f0b529', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4df000c9491578a14efe7cb277cccb98348f7ddd', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ffa9197dadba760d4c8be390618ad3bb58d5bf9', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04836afad10ed53cae153278fbb88eeadfd8111d', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c795b88a692f7edf539c12c8026840a605b8df6', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76c4d4c0b4fcfa04d0287f39e174850d4bf0186d', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8947c5859b18ad5dc9ef5e6556381df6edb28752', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf28d1f4b6989755139c85477404fc913cffe6ba', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89e28f53e877594bd70aa39fbf39197d807e4417', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2dbab0475cfbcf4c0d4195deeea4fc484be5179', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4439010388ce3b2481ff4fcb69771db5cb186e42', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6527822bf054e46f8e46ca1a15f3c9aa9708be03', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97afa365ad689625fa8878fc4cfd65cbc8104d04', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50298d439db99635ccdc0692a0b817a0e32bf0a7', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5594cabbc0ce767932f5705ed740b5f7ca606f5c', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0996c5c0f5ef444bfd216aea1faa24bf206b2a76', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '171665e13c5df62c177d2a420218b72af18db454', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9366d09f4e2fa82b7f1945758b20b24c5fe3de8', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fec7e10dfb6084a284e15d8fbbd37902f88574a', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a98af808c85f44f3dacc954960d439f55cd628f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '642131e8d5367a2e0fbb1da493386a0570f957c8', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e85779e295c7551ebcdb6d3237884cc22305c74', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ed9afcf54d4a12415a6092bd56e3b248816368c', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff8093c9e49756981fe147b8e7b5cdf9c6ca8c7f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15a8ae30e610c8a1cc854a9c28c1f7e68c5de2fe', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2706f7141334a4313ee2a44d44f47fcfd088f36f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cc8b3ef7bbc9257705477ad8c66b0b3b21feebe', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd147a705a1302ec95b5128fba4306effc8d5a02', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '059038e107cb94cd3ab3de239349d5796d2dc723', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f84843d6570d7cf65960ce8a08df2de8e6a1046a', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fbd02964b3e3df1c73038a9caf97bf54624502a', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fde03909008ed44e10b3e024d212fcb0ee3cf5da', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3afaf0e91cd0c46fb4b69c6adaf065e728aa9db7', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18e1ba9af523a6c1be26609a184397f206acbaf9', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee326c5459fc86792388b46b3582d45c29a092cc', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '170952ec1157b547f889c2e83559bf0e6bb05840', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8de2a2be564dd604890e21035685edd8c796139', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e6cbddf1c04c330ffb7b60e1178d21f1fcd30a5', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8db5359745b0f7b9dbcb825e4230f64899c9b400', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fea04f97bd17bd59023a440d6c46578cafa5c39', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '862c5660de5522412f53a96b9997688a4854d94a', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06b6b389cd75874b07093a329579d3dab3dd0744', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb5ff49f3cc27a58de82932266cbe901d7b9449c', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '097229ff9d276fd9068c80d08e4fa9216073066f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12a297f009f03889c06796695d07a85ab2a66c1e', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22b9323c29aa1b6855c3c8955c0340ec093dccc', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaf4f990e6af3d9bd98b724d3bc254c0b767ad1f', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6fb579b56807e4ce6e0b85ad1180fb61b79c7a2', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36bfcdf2248362848feaff78db50805a6044a20c', 'committer_username': 'KinzaQamar', 'committer_name': 'Kinza Qamar Zaman', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 15, 12, 5, tzinfo=datetime.timezone.utc)}]",Kinza Qamar Zaman,66952091,,User,,51,,41,12

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
149226772,black-parrot,black-parrot/black-parrot,SystemVerilog,180,585,24,41,3929,73,15,6,"[{'id': 999948724, 'number': 1101, 'closed': datetime.datetime(2022, 10, 10, 3, 31, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 18, 20, 39, 57, tzinfo=datetime.timezone.utc), 'time_taken': 7195876.0, 'time_delta': '83 days, 6:51:16', 'additions': 109, 'deletions': 70, 'state': 'closed'}]"
179529893,basejump_stl,bespoke-silicon-group/basejump_stl,SystemVerilog,96,487,30,47,1559,167,287,68,"[{'id': 1096702327, 'number': 603, 'closed': datetime.datetime(2022, 12, 14, 20, 43, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 23, 21, 53, 47, tzinfo=datetime.timezone.utc), 'time_taken': 4488583.0, 'time_delta': '51 days, 22:49:43', 'additions': 459, 'deletions': 444, 'state': 'closed'}, {'id': 1064197340, 'number': 585, 'closed': datetime.datetime(2022, 10, 10, 3, 29, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 22, 13, 44, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1518293.0, 'time_delta': '17 days, 13:44:53', 'additions': 1250, 'deletions': 1, 'state': 'closed'}]"
