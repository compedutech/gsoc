pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
422738621,Fixes part of #1095 : Addition of Firebase SDKs ,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixes part of #1095 
- Added classpath dependencies to the project level build.gradle 
- Added Crashlytics plugin to the app-level build.gradle
- Added dependencies to app and domain level build.gradle

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1122,https://api.github.com/repos/oppia/oppia-android/pulls/1122,https://github.com/oppia/oppia-android/pull/1122,closed,10,3,3,3,1,6,0,1,[],2020-05-25 12:57:22+00:00,2020-05-26 11:04:46+00:00,79644.0,22:07:24,"[{'comment_id': 430150892, 'comment_body': 'Nit: We are actually following alphabetical order here.', 'comment_created': datetime.datetime(2020, 5, 26, 4, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 430150917, 'comment_body': 'Nit: We are actually following alphabetical order here.', 'comment_created': datetime.datetime(2020, 5, 26, 4, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 430217854, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 26, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 430217909, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 26, 7, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 430221431, 'comment_body': ""While you are at this PR, please fix this also `'androidx.exifinterface:exifinterface:1.0.0-rc01'`"", 'comment_created': datetime.datetime(2020, 5, 26, 7, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 430230564, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 26, 8, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}]","[{'commit_sha': 'fb1cd84fcec873d4ebd5d2993d03755a71c0dc2d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb8c0817570d1305a64ead89b8204338ee4bde2e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e568422c577ae21b2b196511c0da47f4630e0277', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60
427189948,Fixes part of #1095: Addition of config file ,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixes part of #1095 
- Addition of the Firebase's `google-services.json` config file

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1241,https://api.github.com/repos/oppia/oppia-android/pulls/1241,https://github.com/oppia/oppia-android/pull/1241,closed,40,0,1,12,5,13,0,1,[],2020-06-03 13:07:28+00:00,2020-06-12 10:06:52+00:00,766764.0,"8 days, 20:59:24","[{'comment_id': 434922538, 'comment_body': 'How many of these values need to be real? Can we check in fake values for now, then fill in the correct values once we have a shared developer-only Firebase project to reference? I plan to create both a developer and production project to make this simpler.', 'comment_created': datetime.datetime(2020, 6, 4, 0, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 435116670, 'comment_body': 'From what I have seen, the package name should be the same and others can be changed. The only downside I see is that it will throw a lot of errors in the logcat when we use the dummy values, will that be okay ? ', 'comment_created': datetime.datetime(2020, 6, 4, 9, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435213505, 'comment_body': 'I think we should make it obvious that this is fake data..something like ""1:1234...:android:fakestring"" or something\r\nFrom this it doesn\'t look very obvious', 'comment_created': datetime.datetime(2020, 6, 4, 12, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 435593066, 'comment_body': 'Ditto here--can we clearly indicate that this is a fake string?', 'comment_created': datetime.datetime(2020, 6, 4, 22, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 435593165, 'comment_body': 'And for this key.', 'comment_created': datetime.datetime(2020, 6, 4, 22, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 435593965, 'comment_body': ""Are these errors just at startup, or repeated? It's not ideal, and we should move to a debug project soon but some short-term errors just on app startup would be fine.\r\n\r\nCan you file issues for creating the developer & production projects, and assign them to me? I defer to @vinitamurthi when these should be done by, but I'll make sure my part is done within whatever milestone we bucket them into."", 'comment_created': datetime.datetime(2020, 6, 4, 22, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 435595768, 'comment_body': ""They are repeated errors, not just at the startup. Okay, I'll create those issues."", 'comment_created': datetime.datetime(2020, 6, 4, 22, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435603351, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 4, 23, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435603372, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 4, 23, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435603384, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 4, 23, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435744469, 'comment_body': '@BenHenning I think we should allow this PR to go in with the fake data because all of the other PRs that @Sarthak2601 is going to create for this milestone is dependent on this PR (the build fails without this json so there has to be a json in for any of the firebase work to begin). So either we get the development project with the proper data ready ASAP, or we let this PR go in and then you can get the development project ready by maybe 1 week before milestone 1 ends.', 'comment_created': datetime.datetime(2020, 6, 5, 7, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 436205770, 'comment_body': '@vinitamurthi will it be fine to get this checked in early next week? I can get the development project created next Monday to unblock this PR. The alternative seems to be pretty bad: repeated errors in logcat.', 'comment_created': datetime.datetime(2020, 6, 5, 23, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 438748299, 'comment_body': 'Resolving this since we the new project has been created', 'comment_created': datetime.datetime(2020, 6, 11, 12, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}]","[{'commit_sha': '3ef23995bef55d635685e1f4b5b9cdc413dfea5f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7da889f02d4bb0829dceb2d6031ce359b460cc0', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6fa5027bf9a3b849ba0b279cc6e90afc21a6344', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9782c0f7a4038ac2ad99c3d4e7f4f1a4f12fbd8c', 'committer_username': 'vinitamurthi', 'committer_name': 'Vinita Murthi', 'committer_email': 'murthi.vinita@gmail.com', 'commit_date': datetime.datetime(2015, 4, 3, 3, 30, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3e94db14bfb0074981593a9dcbda254fb50f6d1', 'committer_username': 'MohamedMedhat1998', 'committer_name': 'Mohamed Medhat', 'committer_email': 'mohamed.medhat0298@gmail.com', 'commit_date': datetime.datetime(2014, 8, 23, 20, 49, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80be5e00187857388781b82b9b3c5d803e6bb4e8', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4361e540b04f4b06406b6ec5307056105d53bdf', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff10646d0c0a561fe3775520e185f2c019257b81', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '786a216e21363019685dd37dccf222932400c95c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abeec2c97392c97152f1a6cbd4f0a3c4dae4e391', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ee54416b929cec50eb9d59987953ac5b7c3b81e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f12c3babbd66c621ff372bfc17dd25400060a64', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60
426088265,Fixes part of #1096 : CrashLogger [Blocked on #1241] ,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->
## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixes part of #1096 
- Added Crashlytics Wrapper for custom logging of exceptions 
- Implemented custom logging in the Utility module's DataProviders
- Tested implementation in DataProvidersTest
- Added google-services.json files of a test project to the app and utility modules
- Added Firebase related dependencies. 

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1230,https://api.github.com/repos/oppia/oppia-android/pulls/1230,https://github.com/oppia/oppia-android/pull/1230,closed,515,48,48,34,4,122,0,0,[],2020-06-01 16:27:35+00:00,2020-06-13 11:41:00+00:00,1019605.0,"11 days, 19:13:25","[{'comment_id': 433631205, 'comment_body': 'Just to confirm, this is for testing purposes only right? Maybe its worth adding a comment to mention this is our test project (@BenHenning FYI when we actually release, we would want to change these IDs to the project you are creating)', 'comment_created': datetime.datetime(2020, 6, 2, 5, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 433631416, 'comment_body': 'Also, @Sarthak2601 can you comment on all parts of this json file that would need an update when we have to release (I know we would have to change project_id, and maybe storage_bucket..what about the client params below?)', 'comment_created': datetime.datetime(2020, 6, 2, 5, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 433631689, 'comment_body': 'These are test keys as far as I understand so it should be safe to include them in our github repo correct? @BenHenning FYI again here we would probably have to change them to the actual release keys before releasing\r\n@Sarthak2601 this is another param we should comment above mentioning that it needs a change on release', 'comment_created': datetime.datetime(2020, 6, 2, 5, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 433631742, 'comment_body': 'Add a new line at the EOF', 'comment_created': datetime.datetime(2020, 6, 2, 5, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 433631848, 'comment_body': 'Same comments that were in the app module json apply here. Also add a comment above explaining why we need two json files.', 'comment_created': datetime.datetime(2020, 6, 2, 5, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 433631893, 'comment_body': 'Add a new line at the EOF', 'comment_created': datetime.datetime(2020, 6, 2, 5, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 433632115, 'comment_body': 'Can you format this file using https://jsonformatter.org/ ? ', 'comment_created': datetime.datetime(2020, 6, 2, 5, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 433632161, 'comment_body': 'Can you format this file using https://jsonformatter.org/ ? ', 'comment_created': datetime.datetime(2020, 6, 2, 5, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 433632322, 'comment_body': 'As we discussed earlier, rename this to FirebaseModule not crashlytics. Also change the directory name to firebase', 'comment_created': datetime.datetime(2020, 6, 2, 5, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 433632986, 'comment_body': 'Can you create an issue mentioning that we need to move these functions into a helper class? You can assign that to me, and add a comment with the issue here in the following format:\r\n`TODO(<issue number>): Add a MockitoHelper class to handle nullable versions of all mockito matchers`', 'comment_created': datetime.datetime(2020, 6, 2, 5, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 433633486, 'comment_body': ""I don't think we need this anymore since we are manually mocking the class below (i.e. doing `Mockito.mock(CrashlyticsWrapper::class` below)"", 'comment_created': datetime.datetime(2020, 6, 2, 5, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 433650849, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 2, 6, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 433651017, 'comment_body': 'Done \r\nIssue created - #1233 ', 'comment_created': datetime.datetime(2020, 6, 2, 6, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 433651053, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 2, 6, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 433733961, 'comment_body': 'File deleted because of no usage.', 'comment_created': datetime.datetime(2020, 6, 2, 9, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 433734095, 'comment_body': 'Format returned same version.', 'comment_created': datetime.datetime(2020, 6, 2, 9, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 433778906, 'comment_body': 'File deleted because of no usage.', 'comment_created': datetime.datetime(2020, 6, 2, 10, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 433779006, 'comment_body': 'File deleted because of no usage.', 'comment_created': datetime.datetime(2020, 6, 2, 10, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 433788050, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 2, 10, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 433882848, 'comment_body': ""@vinitamurthi can't comment as json doesn't allow that. "", 'comment_created': datetime.datetime(2020, 6, 2, 13, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 433884262, 'comment_body': 'I think we should replace the whole json file at the time of release because almost everything will change.', 'comment_created': datetime.datetime(2020, 6, 2, 13, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 434254217, 'comment_body': ""This is a new behavior being tested (that we log an exception for failing data providers. Can you add these as distinct tests? Otherwise, it slightly muddles the behaviors being tested here.\r\n\r\nAlso, I don't think we need to test in every single place. Just having a single failure test for each interesting DataProvider case is probably sufficient."", 'comment_created': datetime.datetime(2020, 6, 3, 1, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 434254637, 'comment_body': 'We should generally discourage inheritance. Could we make this an interface, instead, and mock that? Then, we could provide an implementation of the wrapper that actually associates with the FirebaseCrashlytics implementation, and another that provides a fake implementation. You could use Mockito for the latter, but it might be cleaner to build an actual fake from which you can retrieve the logged exceptions & messages.', 'comment_created': datetime.datetime(2020, 6, 3, 1, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 434254930, 'comment_body': ""We probably shouldn't check this in until it's associated with our actual project.\r\n\r\nFurther, is there anything we need to be worried about regarding exposing the information here to the world? Ie, does any of this need to be private? If so, we probably need to create two different projects: one that developers use, and one that's used by the shipped app."", 'comment_created': datetime.datetime(2020, 6, 3, 1, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 434255397, 'comment_body': 'To keep this PR simpler, can we move the JSON file to its own, dedicated PR that this one is blocked on? I feel like this PR is doing a couple different things. Keeping it separate will make the review a bit easier, and let us focus on the individual aspects of each PR.', 'comment_created': datetime.datetime(2020, 6, 3, 1, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 434255872, 'comment_body': ""A note on naming: while it a wrapper, if you change this to be an interface (per a later comment of mine) it may be clearer to name it based on its anticipated functionality, rather than its implementation. It seems to be a CrashLogger, and right now we're using Crashlytics as the implementation for that logger. I suggest naming it based on its usage rather than its implementation."", 'comment_created': datetime.datetime(2020, 6, 3, 1, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 434256068, 'comment_body': ""Regarding the documentation, this isn't really a controller. Maybe 'logger' would be clearer (per my comment above re: 'CrashLogger')."", 'comment_created': datetime.datetime(2020, 6, 3, 1, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 434256312, 'comment_body': ""Maybe instead provide an implementation of the wrapper/logger class and pass in FirebaseCrashlytics (I'm not sure if we actually want the crashlytics object in the DI graph--we probably want to hide it within one of our implementations to keep future migrations/refactors a bit simpler)."", 'comment_created': datetime.datetime(2020, 6, 3, 1, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 434256352, 'comment_body': ""When will this be used? It doesn't seem to be in this PR."", 'comment_created': datetime.datetime(2020, 6, 3, 1, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 434256454, 'comment_body': 'One of the intents of this project was to not associate logs with an individual user--how is this meant to be used?', 'comment_created': datetime.datetime(2020, 6, 3, 1, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 434326961, 'comment_body': ""Nit: Rearrange them in alphabetical order:\r\n```\r\n      'com.google.firebase:firebase-core:17.4.2',\r\n      'com.google.firebase:firebase-crashlytics:17.0.0',\r\n```"", 'comment_created': datetime.datetime(2020, 6, 3, 6, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 434327035, 'comment_body': ""Nit: Rearrange them in alphabetical order:\r\n```\r\n      'com.google.firebase:firebase-core:17.4.2',\r\n      'com.google.firebase:firebase-crashlytics:17.0.0',\r\n```"", 'comment_created': datetime.datetime(2020, 6, 3, 6, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 434330160, 'comment_body': 'Few nits:\r\n```\r\n // TODO(#1233): Add a MockitoHelper class to handle nullable versions of all mockito matchers.\r\n  /**\r\n   * Returns Mockito.any() as nullable type to avoid java.lang.IllegalStateException when\r\n   * null is returned.\r\n   */\r\n  fun <T> any(): T = Mockito.any<T>()\r\n```\r\n1. The TODO should comment on top instead of bottom.\r\n2. There should no space between `TODO` and `(`\r\n3. Full stop (.) at the end of sentence.', 'comment_created': datetime.datetime(2020, 6, 3, 6, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 434331295, 'comment_body': 'In general each comment statement should have `.` at the end. Ditto elsewhere in this file.', 'comment_created': datetime.datetime(2020, 6, 3, 6, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 434343690, 'comment_body': ""The problem is that the app won't build if this file doesn't exist. These params are dummy for the test world, what we could do is just keep an empty or minimal json file just so that the app builds"", 'comment_created': datetime.datetime(2020, 6, 3, 6, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 434419558, 'comment_body': ""Actually they are added only in those test cases which were going into the try-catch block and actually hitting our function i.e the three dataProvider cases. The reason behind this is now the test case can test the error handling in totality. \r\n\r\nIf we create separate test cases just for those three data providers and remove this from here, we'll not be able to verify if our failure test cases actually do all the functionalities that its required to do. "", 'comment_created': datetime.datetime(2020, 6, 3, 9, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 434432649, 'comment_body': ""Okay so in terms of the security thing, the risk is that if we put up the config file our api key will be exposed. However, that API key can only be used to fiddle with our backend (if any) on our firebase console. \r\nSince we don't have any, it won't be an issue.  \r\n\r\nThe reason I am keen on merging it together is, without the config file the app won't build thereby creating a halt in everyone's work. Also it's a config of a test project, we'll have to change it whenever we decide to release. \r\n\r\nOther alternative - We can tell our developers to add their own config files as a part of setting up the project. The downside to this is, all of them will have to additionally go to Firebase, create a project, register the app and put the config file to be able to run it. It might be okay for the existing devs, but I don't think that will be the case for the new contributors. "", 'comment_created': datetime.datetime(2020, 6, 3, 9, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 434466806, 'comment_body': 'Made for future usage (if any). We can probably use it to provide a better insight in our crash reports. ', 'comment_created': datetime.datetime(2020, 6, 3, 10, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 434467981, 'comment_body': 'Okay, so both the logMessage and setUserIdentifier are kept for future usages. \r\nOne use case of setUserIdentifier can be providing the countries of our users. We can then possibly see if our app is crashing in a particular region. ', 'comment_created': datetime.datetime(2020, 6, 3, 10, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 434474355, 'comment_body': 'Done both the things ', 'comment_created': datetime.datetime(2020, 6, 3, 10, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 434480572, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 3, 10, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 434480619, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 3, 10, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 434532284, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 3, 12, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 434532566, 'comment_body': 'Renamed to crashLogger', 'comment_created': datetime.datetime(2020, 6, 3, 12, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435227596, 'comment_body': ""Let's remove this for now"", 'comment_created': datetime.datetime(2020, 6, 4, 12, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 435582307, 'comment_body': 'Done\r\n', 'comment_created': datetime.datetime(2020, 6, 4, 22, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435589263, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 4, 22, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435589887, 'comment_body': 'Done, PTAL ', 'comment_created': datetime.datetime(2020, 6, 4, 22, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435589992, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 4, 22, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435674381, 'comment_body': 'You probably want to check if size is > 0 here before returning', 'comment_created': datetime.datetime(2020, 6, 5, 3, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 435674479, 'comment_body': 'Call this clearAllExceptions instead', 'comment_created': datetime.datetime(2020, 6, 5, 3, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 435674902, 'comment_body': ""Let's not call this FirebaseModule, maybe LogReportingModule?  (I am generally bad with names so @rt4914 @BenHenning do you have any suggestions )"", 'comment_created': datetime.datetime(2020, 6, 5, 3, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 435674963, 'comment_body': ""I think you don't need this any() function anymore"", 'comment_created': datetime.datetime(2020, 6, 5, 3, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 435675087, 'comment_body': 'TestLogReportingModule maybe? (Depends on the name you use for the module below)', 'comment_created': datetime.datetime(2020, 6, 5, 3, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 435675343, 'comment_body': 'This has been moved to another PR, resolving this', 'comment_created': datetime.datetime(2020, 6, 5, 3, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 435676122, 'comment_body': 'This has moved to another PR so I am resolving this ', 'comment_created': datetime.datetime(2020, 6, 5, 3, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 435727438, 'comment_body': 'Even I am not good with naming but `LogReportingModule` sounds better than `FirebaseModule`.\r\n\r\nAlso @Sarthak2601 Please add KDoc for every new class or public functions.', 'comment_created': datetime.datetime(2020, 6, 5, 7, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 435796687, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 5, 9, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435797049, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 5, 9, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435797119, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 5, 9, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435797181, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 5, 9, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435797259, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 5, 9, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435977464, 'comment_body': 'Need a java doc comment for this function', 'comment_created': datetime.datetime(2020, 6, 5, 14, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 435978396, 'comment_body': 'Assert the message of the exception as well to ensure that we are logging the IllegalStateException properly. Looks like the message is ""Base failure"" so you can add a statement verifying that `fakeCrashLogger.getMostRecentException().message` is equal to ""Base Failure""', 'comment_created': datetime.datetime(2020, 6, 5, 14, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 435980829, 'comment_body': 'This would return -1 if the size = 0, you should check if size > 0', 'comment_created': datetime.datetime(2020, 6, 5, 15, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 435981907, 'comment_body': ""This will return an ArrayIndexOutOfBoundsException , your size is 0 so it will try to return the 0th element which doesn't exist. You should throw an error here not send exceptionList[size]"", 'comment_created': datetime.datetime(2020, 6, 5, 15, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 435990057, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 5, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435990114, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 5, 15, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 435991081, 'comment_body': 'Yes, my bad :( \r\nModified it to throw `NullPointerException(""No element present"")`, will it be good enough ?', 'comment_created': datetime.datetime(2020, 6, 5, 15, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 436073971, 'comment_body': 'This looks fine', 'comment_created': datetime.datetime(2020, 6, 5, 17, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 437862376, 'comment_body': 'A more Kotlin idiomatic way to do this would be:\r\n\r\n```kotlin\r\nfun getMostRecentException(): Exception = exceptionList.last()\r\n```\r\n\r\nSee documentation: https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/last.html.', 'comment_created': datetime.datetime(2020, 6, 10, 5, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437862745, 'comment_body': 'Method KDocs should be written as a truncated verb phrase to complete the statement: ""This method ___"", e.g.: ``Clears all the exceptions currently logged.``\r\n\r\nDitto elsewhere.\r\n\r\nNote that I also removed \'the list\' since that\'s an implementation detail. Documentation comments should focus on external users of the object. They want to know what functionality is available & what it does, not how it\'s implemented since that doesn\'t help solve whatever problem they\'re trying to use the component to solve.', 'comment_created': datetime.datetime(2020, 6, 10, 5, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437863005, 'comment_body': ""This is one implementation of crash logger, the fake is another. In this case, this isn't a fake logger and instead relies on a real backing implementation (Firebase). I suggest naming this accordingly, e.g. ``FirebaseCrashLogger.``"", 'comment_created': datetime.datetime(2020, 6, 10, 5, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437863383, 'comment_body': ""We should never use static mutable state. If you want to share state across multiple components that are injecting this logger, you can define the exception list as a field of the class and mark the class as ``@Singleton`` so that its instance is retained across injections. You'll need to make this an injectable class for that to work, e.g.:\r\n\r\n```kotlin\r\n@Singleton\r\nclass FakeCrashLogger @Inject constructor() : CrashLogger {\r\n```"", 'comment_created': datetime.datetime(2020, 6, 10, 5, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437864023, 'comment_body': ""The 'Interface that' is unnecessary, and slightly distracting (calling out details in a documentation comment emphasizes their importance--is it actually important that this is an interface?). Also, this doesn't describe what the logger is meant to do. Consider an alernative:\r\n\r\n```Logger for tracking caught exceptions. Note that this utility may later upload the exceptions to remote services, or log the exception to a file on disk.```"", 'comment_created': datetime.datetime(2020, 6, 10, 5, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437864114, 'comment_body': ""Is this really a crash logger, or just an exception logger? A crash logger suggest it's specific to fatal crashes."", 'comment_created': datetime.datetime(2020, 6, 10, 5, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437864313, 'comment_body': ""This KDoc is formatted incorrectly (see https://developer.android.com/kotlin/style-guide#formatting_2), and it's missing a summary."", 'comment_created': datetime.datetime(2020, 6, 10, 5, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437864523, 'comment_body': ""Similar to other comments--Crashlytics isn't relevant to this component from a user's perspective. Users just want to log exceptions. You can note like I suggested in an earlier comment that exceptions may be logged to remote services or locally on disk, but _how_ it does that should be left up to the implementation (consider that the fake can't actually satisfy this requirement since it doesn't use Crashlytics)."", 'comment_created': datetime.datetime(2020, 6, 10, 5, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437864680, 'comment_body': ""Since this class isn't injected, this scope won't do anything. It can be removed."", 'comment_created': datetime.datetime(2020, 6, 10, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437864757, 'comment_body': ""This class isn't actually being extended, so suggest removing the ``open`` property to prefer the default state of immutability."", 'comment_created': datetime.datetime(2020, 6, 10, 5, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437865056, 'comment_body': 'The slightly more Truth idiomatic way to do this would be:\r\n\r\n```kotlin\r\nassertThat(fakeCrashLogger.getMostRecentException()).hasMessageThat().contains(""Base failure"")\r\n```\r\n\r\nAlso, it\'s completely fine to extract the exception to a local variable to shorten these assertion lines.', 'comment_created': datetime.datetime(2020, 6, 10, 5, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437865271, 'comment_body': 'Perhaps: ``Provides Firebase-specific logging implementations.``\r\n\r\nThat sets up the module for later Firebase logging work. Also, this KDoc can fit on one line, so prefer that, e.g.:\r\n\r\n```kotlin\r\n/** Doc comment is short and on one line. */\r\n```', 'comment_created': datetime.datetime(2020, 6, 10, 5, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437866275, 'comment_body': ""If you make the fake crash logger an injectable ``@Singleton``, you don't need to redo that here since calling the provider at each injection site for ``CrashLogger`` will reuse the same fake crash logger. Instead, you can bind it to keep it simple:\r\n\r\n```kotlin\r\n@Module\r\ninterface TestLogReportingModule {\r\n  @Binds\r\n  fun bindFakeCrashLogger(FakeCrashLogger impl): CrashLogger\r\n}\r\n```"", 'comment_created': datetime.datetime(2020, 6, 10, 5, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437866594, 'comment_body': ""Although it's trivial, I suggest adding a very basic test suite to verify the contract of the fake crash logger itself."", 'comment_created': datetime.datetime(2020, 6, 10, 5, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437867000, 'comment_body': 'I see you added one new test per my feedback, but what I meant was one test for each of the data provider methods being affected (rather than changing all of the failing tests).', 'comment_created': datetime.datetime(2020, 6, 10, 5, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437867294, 'comment_body': ""Sorry, I left a comment recently suggesting we use ExceptionLogger instead. I should have thought about this a bit more. It occurred to me now that this isn't actually meant for logging crashes, but instead cases when the app doesn't crash. Even if we add fatal exception logging later, 'ExceptionLogger' still seems a bit more generic."", 'comment_created': datetime.datetime(2020, 6, 10, 5, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437867617, 'comment_body': ""In general, we should only implement what we specifically need for a particular piece of the project or in anticipation of work soon-to-be done. We can always add new functionality later once it's determined to be needed."", 'comment_created': datetime.datetime(2020, 6, 10, 5, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437868506, 'comment_body': ""Suggest moving this to a non-Firebase specific project since the interface isn't part of the implementation. Maybe org.oppia.util.logging?"", 'comment_created': datetime.datetime(2020, 6, 10, 5, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437868683, 'comment_body': 'Similarly, a Firebase-specific implementation might go under ``org.oppia.util.logging.firebase``.', 'comment_created': datetime.datetime(2020, 6, 10, 5, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 438325745, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 18, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438325841, 'comment_body': 'Done, PTAL', 'comment_created': datetime.datetime(2020, 6, 10, 18, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438325964, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 6, 10, 18, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438326215, 'comment_body': 'Done, PTAL', 'comment_created': datetime.datetime(2020, 6, 10, 18, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438326412, 'comment_body': 'Renamed to ExceptionLogger', 'comment_created': datetime.datetime(2020, 6, 10, 18, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438326501, 'comment_body': 'Done, PTAL.', 'comment_created': datetime.datetime(2020, 6, 10, 18, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438326945, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 18, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438327189, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 10, 18, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438327268, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 18, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438328159, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 18, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438328433, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 18, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438328501, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 18, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438357044, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 6, 10, 19, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438357136, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 19, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438357364, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 19, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438483099, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 11, 0, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438483248, 'comment_body': 'Done, PTAL.', 'comment_created': datetime.datetime(2020, 6, 11, 0, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 439122888, 'comment_body': 'Optional, but I think you could make the class an interface instead since it only contains abstract methods.', 'comment_created': datetime.datetime(2020, 6, 11, 23, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 439123020, 'comment_body': 'Nit: ``bindFakeExceptionLogger``', 'comment_created': datetime.datetime(2020, 6, 11, 23, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 439123134, 'comment_body': ""Please update the KDoc to match the class's purpose. In this case, it seems to be for fake log reporting dependencies."", 'comment_created': datetime.datetime(2020, 6, 11, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 439123661, 'comment_body': ""This is technically an implementation detail of Kotlin we can probably omit. It's a good idea to check the message of the failure, but in this case the context and exception is pretty specific, so maybe just keep the check for ``NoSuchElementException`` type."", 'comment_created': datetime.datetime(2020, 6, 11, 23, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 439123992, 'comment_body': 'A more Kotlin-idiomatic structure to use is a mutable list, e.g.:\r\n\r\n```kotlin\r\nprivate val exceptionList = mutableListOf<Exception>()\r\n```\r\n\r\nAlso, prefer using ``val`` for read-only fields, and prefer to minimize access to members.', 'comment_created': datetime.datetime(2020, 6, 11, 23, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 439124361, 'comment_body': ""We shouldn't access the implementations of the class (prefer to test the API of a class, not its implementation details). If you think it's useful for tests to be able to query whether an exception has been logged, you could introduce a method like ``hasExceptionsLogged()`` and test that. Or, you could infer that the exception list is inferred through other methods (like how ``getMostRecentException`` throws if called after ``clearAllExceptions`` is called).\r\n\r\nThe purpose of tests should be to verify that a method of the public API behaves correctly under certain conditions, not that it has a particular implementation. We should be able to switch the full implementation of a class and not change any tests if they are correctly only testing the API of the class.\r\n\r\nDitto elsewhere here."", 'comment_created': datetime.datetime(2020, 6, 11, 23, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 439124836, 'comment_body': 'Nit: please add EOF newline.', 'comment_created': datetime.datetime(2020, 6, 11, 23, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 439125274, 'comment_body': ""Here & elsewhere: do we actually need to clear the exceptions? There should be a new fake logger test/test since you're scoping the state of the fake to singleton, and we create a new application component for each test."", 'comment_created': datetime.datetime(2020, 6, 11, 23, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 439475339, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 12, 15, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 439475426, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 12, 15, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 439475486, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 12, 15, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 439475565, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 12, 15, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 439475637, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 12, 15, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 439476032, 'comment_body': 'Okay, done :) ', 'comment_created': datetime.datetime(2020, 6, 12, 15, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 439476112, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 12, 15, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 439476789, 'comment_body': ""Yes I realised we don't need it, so modified accordingly. "", 'comment_created': datetime.datetime(2020, 6, 12, 15, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}]","[{'commit_sha': '8d506195d3ff2863fc76c360b76aa32c5dbd3f8a', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b97eb57513099c38e12b54058dd5ee90d03156', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc73449c754f5f0b441170c4e389b65d7e19a1cb', 'committer_username': 'vinitamurthi', 'committer_name': 'Vinita Murthi', 'committer_email': 'murthi.vinita@gmail.com', 'commit_date': datetime.datetime(2015, 4, 3, 3, 30, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eee6a5b10f24218513a251f2b21725cec14c051', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b71d8eb9044e7f3504c092b5876fb4343a0c2bb4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce39c92770c31646e7d9b9de95584ca576511c4b', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '682c5a717ff3129135a08472a9d9ba40fbd32bce', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96b3fe5dcb8e278dad9a82031c7778b86d40b48d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af362b8099c872b83adb226a535d33c82b053b86', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1291c042c46d329c8b2ed1ccc9ff9d1264a110df', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e50e5eeba351ce3480f934e55dc9ae0d5ec59fb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef941b45e0c509fd36c1e138d53b2d646dfc64f1', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26b5afd7362e584f9a851fe3d72a025b550c36d8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00866d4e5d6f7f3a64b454b3ae64e5d2f1dbd83c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7097fa1fa413c2b404f4d98383e661a3f87035aa', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e02be670df49647cc814da178969b7076e21e2e8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ab53f208d7dadb5877f9f853fe8c0df926937cb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfbc7469ac341537c32d7c46132586deb9012972', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcd8bf8f8711c535fafa45f95c9a741fce20bff4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62a1e7ff39dd4c6dad2f0a2a9f3b214d9d9b4b4f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84517a8a6f7fbada1f42a85da79ebbc1ea841575', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd8737e2502acc9bb290ff04cf9254c39043e716', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0033e7a66ded60ef9c7fca7fffba03bbc8ad49de', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db9a32ee67262f0401b0e9e784e7e69d2d5d37ba', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ef8dd49e1fae02b9d873661d92e423ef16929fb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be040f15a9c4bd0aa8ba8c98b089c08002529afe', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baf0d00a885df83ee93e8240bcb6392ceef666ee', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11556117ba1f8116fb49f4af84581db15226f29e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7473795259ad84584e402a141d366fab088a8e5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fecd09976521ab5305e7e2ad8a5d734928ccdc3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b773b650dceb104594ea0b771c2968eff568e6c7', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc94de52fd7181a78290e1cc91be99c691aa873f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd609f07e981d8c4bf6ad3618a0f0b9279bd1671d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff221009a5ccc30c371fbb44cf4def80e446ff1f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60
434079502,Fixes part of #1096: Crashlytics in Domain layer.,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixes part of #1096 
- Added crashlytics implementation in domain module
- Added tests for the implementation. 

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1319,https://api.github.com/repos/oppia/oppia-android/pulls/1319,https://github.com/oppia/oppia-android/pull/1319,closed,255,8,15,40,1,6,0,1,[],2020-06-14 01:10:26+00:00,2020-06-15 09:24:09+00:00,116023.0,"1 day, 8:13:43","[{'comment_id': 439972803, 'comment_body': 'This is not needed now right?', 'comment_created': datetime.datetime(2020, 6, 15, 7, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 439973977, 'comment_body': 'Check if you still need this after removing the import from AnswerClassificationController.kt', 'comment_created': datetime.datetime(2020, 6, 15, 7, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 439975012, 'comment_body': 'Can we rename the function to be a bit clearer? maybe testGetRevisionCard_noTopicAndSubtopicId_returnsFailure_logsException ? ', 'comment_created': datetime.datetime(2020, 6, 15, 7, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440033290, 'comment_body': 'Yep, removed. ', 'comment_created': datetime.datetime(2020, 6, 15, 9, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440033342, 'comment_body': ""We don't, made amends :) "", 'comment_created': datetime.datetime(2020, 6, 15, 9, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440033370, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 15, 9, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}]","[{'commit_sha': '8d506195d3ff2863fc76c360b76aa32c5dbd3f8a', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b97eb57513099c38e12b54058dd5ee90d03156', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc73449c754f5f0b441170c4e389b65d7e19a1cb', 'committer_username': 'vinitamurthi', 'committer_name': 'Vinita Murthi', 'committer_email': 'murthi.vinita@gmail.com', 'commit_date': datetime.datetime(2015, 4, 3, 3, 30, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eee6a5b10f24218513a251f2b21725cec14c051', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b71d8eb9044e7f3504c092b5876fb4343a0c2bb4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce39c92770c31646e7d9b9de95584ca576511c4b', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '682c5a717ff3129135a08472a9d9ba40fbd32bce', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96b3fe5dcb8e278dad9a82031c7778b86d40b48d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af362b8099c872b83adb226a535d33c82b053b86', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1291c042c46d329c8b2ed1ccc9ff9d1264a110df', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e50e5eeba351ce3480f934e55dc9ae0d5ec59fb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef941b45e0c509fd36c1e138d53b2d646dfc64f1', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26b5afd7362e584f9a851fe3d72a025b550c36d8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00866d4e5d6f7f3a64b454b3ae64e5d2f1dbd83c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7097fa1fa413c2b404f4d98383e661a3f87035aa', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e02be670df49647cc814da178969b7076e21e2e8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ab53f208d7dadb5877f9f853fe8c0df926937cb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfbc7469ac341537c32d7c46132586deb9012972', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcd8bf8f8711c535fafa45f95c9a741fce20bff4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62a1e7ff39dd4c6dad2f0a2a9f3b214d9d9b4b4f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84517a8a6f7fbada1f42a85da79ebbc1ea841575', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd8737e2502acc9bb290ff04cf9254c39043e716', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0033e7a66ded60ef9c7fca7fffba03bbc8ad49de', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db9a32ee67262f0401b0e9e784e7e69d2d5d37ba', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ef8dd49e1fae02b9d873661d92e423ef16929fb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be040f15a9c4bd0aa8ba8c98b089c08002529afe', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baf0d00a885df83ee93e8240bcb6392ceef666ee', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11556117ba1f8116fb49f4af84581db15226f29e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7473795259ad84584e402a141d366fab088a8e5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fecd09976521ab5305e7e2ad8a5d734928ccdc3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b773b650dceb104594ea0b771c2968eff568e6c7', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc94de52fd7181a78290e1cc91be99c691aa873f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd609f07e981d8c4bf6ad3618a0f0b9279bd1671d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67c436afb2e9e1cdd1b105611e65f0dce0da292d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9ac0805ece44454d889e34c5365e6db0ddb0b77', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e896e1cf5be582949089bff0929096b4ba4487e7', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4735e71137d3fe2595974a91a46f2f9bac86a6a6', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5001babd9eb935092ecde177459da5cd50322f74', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40c952bc35e222a22a914b1edcfb48fc28db4d75', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c72849f045cb0421fdfdf810aff5befb285622b8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60
428632177,Fix #1097: Addition of Analytics for event Logging ,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fix #1097 
- Added analytics wrapper and its interface for logging to console.
- Added Analytics controller for collecting information from presenters and passing it on to the wrapper. 
- Added fakeEventLogger in the Testing module.
- Modified both TestLogReportingModule and LogReportingModule for Analytics as well.
- Added tests for Analytics Controller using fakes. 
- Added an interface for code logic related to event logging bundles. 
- Added test file for FirebaseEventLogger and implemented tests using the fake. 

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1260,https://api.github.com/repos/oppia/oppia-android/pulls/1260,https://github.com/oppia/oppia-android/pull/1260,closed,1020,1,14,60,1,109,0,1,[],2020-06-05 18:04:37+00:00,2020-06-18 04:39:39+00:00,1074902.0,"12 days, 10:35:02","[{'comment_id': 436454151, 'comment_body': 'You can directly call eventBundleMaker here instead of storing it in bundle and then passing bundle to the function', 'comment_created': datetime.datetime(2020, 6, 8, 4, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 436454178, 'comment_body': 'Same comment here', 'comment_created': datetime.datetime(2020, 6, 8, 4, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 436454231, 'comment_body': ""I think we should change the name of the function, I think we should call it 'makeEventBundle' or 'createEventBundle'"", 'comment_created': datetime.datetime(2020, 6, 8, 4, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 436454421, 'comment_body': ""Why 'clearList'? That seems more related to the fake and we dont need to add it to the test name"", 'comment_created': datetime.datetime(2020, 6, 8, 4, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 436454533, 'comment_body': 'Assert the other fields as well (i.e. Timestamp, topic id, story id, exploration id, question id, and especially priority)', 'comment_created': datetime.datetime(2020, 6, 8, 4, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 436454578, 'comment_body': ""I dont think we need to mention 'clearList' here "", 'comment_created': datetime.datetime(2020, 6, 8, 4, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 436454649, 'comment_body': 'Assert the other fields as well (Especially priority)', 'comment_created': datetime.datetime(2020, 6, 8, 4, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 436454870, 'comment_body': 'Why are we importing these? Wont this get handled by the crashlytics controller PRs?', 'comment_created': datetime.datetime(2020, 6, 8, 4, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 436455089, 'comment_body': 'I think you should return the entire event and not just the title because we would want to verify other parts of the event as well', 'comment_created': datetime.datetime(2020, 6, 8, 4, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 436695336, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 436695528, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 436697148, 'comment_body': 'Okay, done.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 436697319, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 436697528, 'comment_body': 'Okay, done.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 436698118, 'comment_body': 'Changed to `createEventBundle`', 'comment_created': datetime.datetime(2020, 6, 8, 13, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 436698454, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 436698615, 'comment_body': 'Okay, done.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 436706015, 'comment_body': 'Yes, it can be handled in the crashlytics implementation PR as well but that PR is based on this branch only. But as these test files have dependency over `TestLogReportingModule`, so had to import in this PR only. ', 'comment_created': datetime.datetime(2020, 6, 8, 13, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 437154299, 'comment_body': 'Got it, thanks!', 'comment_created': datetime.datetime(2020, 6, 9, 5, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 437868175, 'comment_body': ""Similar to my other comment--this probably shouldn't be in firebase since it's not necessarily backed by a firebase implementation. Maybe instead: org.oppia.util.logging?"", 'comment_created': datetime.datetime(2020, 6, 10, 5, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 437868333, 'comment_body': 'Could we take a proto in here instead of a Bundle? Prefer keeping type safety except at the boundaries where you need to convert to/from a bundle. I think that will also significantly simplify upstream function contracts (no need to pass in so many parameters when you can just pass in a proto object, instead).', 'comment_created': datetime.datetime(2020, 6, 10, 5, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 438938909, 'comment_body': 'Yep, done. ', 'comment_created': datetime.datetime(2020, 6, 11, 17, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 438942775, 'comment_body': ""Okay so I feel that `EventLogger` is just meant to be a wrapper for the firebase logger (its only job is to call the corresponding Firebase methods) so we should avoid adding any creation logic to it. Also, just to be clear Analytics' event logging is done via bundles, so we'll have to send it as that. "", 'comment_created': datetime.datetime(2020, 6, 11, 17, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 439122048, 'comment_body': ""I think about this a bit differently. I consider ``EventLogger``'s purpose to log events. The fact that it uses Firebase is an implementation detail that could, hypothetically, change in the future. We should optimize the API of the logger to make using it safer/easier/more extensible, etc., rather than designing based on the needs of the implementation. If we use a proto here, we can always translate that to a bundle within the implementation before sending the data off to Firebase.\r\n\r\nI do think there are advantages to proto in this case specifically:\r\n1. It introduces a clear contract on what's required when logging an event (Bundle can contain any number of elements since it's a tuple data structure).\r\n2. It introduces type safety; Bundles don't contain typing information and rely on the caller to do the right hing. It's easy to mess this up and cause unintentional crashes.\r\n3. Protos have clearly defined behavior for what to do when values are missing. Bundles will default to a value decided by the user of the Bundle; this can be inconsistent at each place the Bundle is used/read."", 'comment_created': datetime.datetime(2020, 6, 11, 23, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 439981239, 'comment_body': 'Based on this, we are creating question context even in cases where the questionId, explorationId, storyId, and topicId are set. \r\nMaybe we want to separate this function into two:\r\n`createExplorationContext` and `createQuestionContext` , each having different parameters. We can make these functions public so callers can create the correct context and pass the context into logTransition or logClick. What do you think?', 'comment_created': datetime.datetime(2020, 6, 15, 7, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 439981825, 'comment_body': 'What is the purpose of this bundle exactly? ', 'comment_created': datetime.datetime(2020, 6, 15, 7, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 439982035, 'comment_body': 'Add new line at EOF', 'comment_created': datetime.datetime(2020, 6, 15, 7, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 439983349, 'comment_body': 'Add new line at EOF', 'comment_created': datetime.datetime(2020, 6, 15, 7, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 439983427, 'comment_body': 'Add new line at EOF', 'comment_created': datetime.datetime(2020, 6, 15, 7, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 439984052, 'comment_body': 'You can directly make this a utility class instead of creating an interface and having others implement it . Both your fake and your real event loggers can depend on the utility class', 'comment_created': datetime.datetime(2020, 6, 15, 7, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440037861, 'comment_body': 'I think we can make amends to our existing logTransition and logClickEvent functions by splitting them into a total of 4 functions. Like - \r\n1. `logTransitionWithExplorationContext`\r\n2. `logTransitionWithQuestionContext`\r\n3. `logClickWithExplorationContext`\r\n4. `logClickWithQuestionContext`\r\n\r\nand then control their parameters to fulfil the context requirements. Thoughts?', 'comment_created': datetime.datetime(2020, 6, 15, 9, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440039355, 'comment_body': ""It's basically a default value, but yes if we implement the approach in my earlier comment, we'll not need it as there will always be a context. \r\nThis was basically made to log events where all the info such as topicId, storyId, etc. wasn't present. For eg - Home. \r\nHowever, we can accommodate a `logEventWithNoContext` as well. Thoughts? "", 'comment_created': datetime.datetime(2020, 6, 15, 9, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440065546, 'comment_body': 'Okay yeah I like that idea too, makes sense', 'comment_created': datetime.datetime(2020, 6, 15, 10, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440065787, 'comment_body': 'Yes we would need a logEventWithNoContext as well', 'comment_created': datetime.datetime(2020, 6, 15, 10, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440066060, 'comment_body': 'Add new line at EOF', 'comment_created': datetime.datetime(2020, 6, 15, 10, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440066808, 'comment_body': ""Actually on second thought, lets not do this. Because: We need a 'no context' scenario and we may add newer contexts in the future. If we add a new context we would need to add 2 more log functions. That's a lot of duplicate code just to change context so lets have a create exploration / create question / create no context situations."", 'comment_created': datetime.datetime(2020, 6, 15, 10, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440072112, 'comment_body': 'Okay, makes sense.', 'comment_created': datetime.datetime(2020, 6, 15, 10, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440109857, 'comment_body': 'Done. PTAL :) ', 'comment_created': datetime.datetime(2020, 6, 15, 11, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440109984, 'comment_body': 'Done, PTAL :) ', 'comment_created': datetime.datetime(2020, 6, 15, 11, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440110118, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 15, 11, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440110164, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 15, 11, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440110229, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 15, 11, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440110343, 'comment_body': 'Yep, done !', 'comment_created': datetime.datetime(2020, 6, 15, 11, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440110405, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 15, 11, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440150658, 'comment_body': 'Okay, got it ! \r\nPTAL. ', 'comment_created': datetime.datetime(2020, 6, 15, 12, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440674987, 'comment_body': 'Instead of creating 4 separate fields, lets just pass one field of type context. Callers can create the appropriate context and pass it here.', 'comment_created': datetime.datetime(2020, 6, 16, 8, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440676025, 'comment_body': 'Same comment here', 'comment_created': datetime.datetime(2020, 6, 16, 8, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440676130, 'comment_body': 'Same comment here', 'comment_created': datetime.datetime(2020, 6, 16, 8, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440676213, 'comment_body': 'Same comment here', 'comment_created': datetime.datetime(2020, 6, 16, 8, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440676330, 'comment_body': 'Same comment here', 'comment_created': datetime.datetime(2020, 6, 16, 8, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440676889, 'comment_body': 'We should allow callers to create this and then pass the Context field to the respective functions. Also in general its better to name the functions as createContext rather than contextCreation', 'comment_created': datetime.datetime(2020, 6, 16, 8, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440677337, 'comment_body': 'Should be createExplorationContext', 'comment_created': datetime.datetime(2020, 6, 16, 8, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440677501, 'comment_body': 'Should be createQuestionContext', 'comment_created': datetime.datetime(2020, 6, 16, 8, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440677582, 'comment_body': 'Should be createTopicContext', 'comment_created': datetime.datetime(2020, 6, 16, 8, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440677661, 'comment_body': 'Should be createStoryContext', 'comment_created': datetime.datetime(2020, 6, 16, 8, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440678258, 'comment_body': 'We are still keeping the bundle though? What is the purpose of it?', 'comment_created': datetime.datetime(2020, 6, 16, 8, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440678739, 'comment_body': 'Please add tests for these functions!', 'comment_created': datetime.datetime(2020, 6, 16, 8, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440679284, 'comment_body': 'This interface is not meant to store them to a file, thats what the controller is supposed to do right?', 'comment_created': datetime.datetime(2020, 6, 16, 8, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440680747, 'comment_body': ""To me this entire test file isn't really making sense. The name suggests that they are tests for the firebaseEventLogger. But we are not actually testing the actual firebaseEventLogger, we are testing the fake. Which is already done in the FakeEventLoggerTest\r\nSo what is the goal of this test class? If you want to test the actual FIrebaseEventLogger, you would have to initialize it with a mock of the Firebase instance."", 'comment_created': datetime.datetime(2020, 6, 16, 8, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440689561, 'comment_body': ""From what I think, this test file was to check if the bundles are being successfully created using the proto objects or not. Taking the example of the FirebaseExceptionLogger, we weren't testing it as it was just a wrapper, is there a need to do this here then ? "", 'comment_created': datetime.datetime(2020, 6, 16, 8, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440692049, 'comment_body': 'Yeah, will change that. Actually this was suggested to me by Ben in the CrashLogger PR, so I just placed it here as well. ', 'comment_created': datetime.datetime(2020, 6, 16, 8, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440692575, 'comment_body': 'Relating this to my comment on the FirebaseEventLoggerTest, should I move those tests here and empty the wrapper tests ? ', 'comment_created': datetime.datetime(2020, 6, 16, 8, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440692885, 'comment_body': 'Okay, will do. ', 'comment_created': datetime.datetime(2020, 6, 16, 8, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440693066, 'comment_body': 'Okay, will do. ', 'comment_created': datetime.datetime(2020, 6, 16, 8, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440811515, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 12, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440811798, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 12, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440811881, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 12, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440811944, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 12, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440811988, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 12, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440812393, 'comment_body': 'Removed this function and modified the others to provide the functionality. ', 'comment_created': datetime.datetime(2020, 6, 16, 12, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440812491, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 12, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440812682, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 12, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440812876, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 12, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440813384, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 12, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440919347, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 14, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 440988743, 'comment_body': 'The L in LogTransition should be small. So the name would be `testController_logTransitionEvent_withQuestionContext_checkLogsEvent `', 'comment_created': datetime.datetime(2020, 6, 16, 16, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440989231, 'comment_body': 'Same here (LogTransition -> logTransition)', 'comment_created': datetime.datetime(2020, 6, 16, 16, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440989861, 'comment_body': 'Here and below, make the L in Log in small case', 'comment_created': datetime.datetime(2020, 6, 16, 16, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440990370, 'comment_body': 'Can you add tests for the createExplorationContext/ createQuestionContext/ createTopicContext/ createStoryContext methods as well?', 'comment_created': datetime.datetime(2020, 6, 16, 16, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440991306, 'comment_body': ""I believe we don't need this anymore right? Since bundle related tests are all handled in the EventBundleCreator tests?"", 'comment_created': datetime.datetime(2020, 6, 16, 16, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440991508, 'comment_body': 'I dont think we need this test anymore', 'comment_created': datetime.datetime(2020, 6, 16, 16, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440992026, 'comment_body': 'This was discussed offline, resolving ', 'comment_created': datetime.datetime(2020, 6, 16, 16, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440992772, 'comment_body': 'Why do we need an open class and open functions below? Thats usually only needed if we need to mock something.', 'comment_created': datetime.datetime(2020, 6, 16, 16, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440993165, 'comment_body': 'Can we call this createEventBundle() instead?', 'comment_created': datetime.datetime(2020, 6, 16, 16, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 440993962, 'comment_body': ""You do not need to create a fake logger. You can directly create an instance of the EventBundleCreator and call its functions. Same comment here and below for all tests. These tests shouldn't have anything to do with the event logger"", 'comment_created': datetime.datetime(2020, 6, 16, 16, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 441007490, 'comment_body': 'Okay, will do. ', 'comment_created': datetime.datetime(2020, 6, 16, 17, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441067441, 'comment_body': 'Modified, PTAL. ', 'comment_created': datetime.datetime(2020, 6, 16, 18, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441067931, 'comment_body': 'Discussion done offline. ', 'comment_created': datetime.datetime(2020, 6, 16, 18, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441068002, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 18, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441068058, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 18, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441068107, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 18, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441068207, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 18, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441068453, 'comment_body': ""Yes, we don't. Modified accordingly. "", 'comment_created': datetime.datetime(2020, 6, 16, 18, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441068550, 'comment_body': ""Yes, we don't. Modified."", 'comment_created': datetime.datetime(2020, 6, 16, 18, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441068913, 'comment_body': 'Oops, my bad. Modified accordingly. ', 'comment_created': datetime.datetime(2020, 6, 16, 18, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441068998, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 18, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441069205, 'comment_body': 'Yes, makes sense. Modified accordingly. ', 'comment_created': datetime.datetime(2020, 6, 16, 18, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441288901, 'comment_body': ""Why are these constants here? We shouldn't keep test ids in the main file, they should be in the test file"", 'comment_created': datetime.datetime(2020, 6, 17, 5, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 441291566, 'comment_body': 'Instead of `isSuccessful`, lets make it more specific like `testController_createExplorationContext_returnsCorrectExplorationContext()`. Here and below', 'comment_created': datetime.datetime(2020, 6, 17, 5, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 441292239, 'comment_body': 'Creates a bundle from ... -> Returns a bundle from ...\r\nHere and below', 'comment_created': datetime.datetime(2020, 6, 17, 5, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 441292732, 'comment_body': 'Inject EventBundleCreator like how you have done for firebaseAnalytics instead', 'comment_created': datetime.datetime(2020, 6, 17, 5, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 441456128, 'comment_body': 'Okay, got it. Done. ', 'comment_created': datetime.datetime(2020, 6, 17, 10, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441456291, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 17, 10, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441456510, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 17, 10, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441456582, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 17, 10, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441521075, 'comment_body': 'I dont think you need to add this here', 'comment_created': datetime.datetime(2020, 6, 17, 12, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 441522956, 'comment_body': 'This is not done yet? ', 'comment_created': datetime.datetime(2020, 6, 17, 12, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 441542503, 'comment_body': 'Okay, removed.', 'comment_created': datetime.datetime(2020, 6, 17, 13, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 441542657, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 17, 13, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}]","[{'commit_sha': '8d506195d3ff2863fc76c360b76aa32c5dbd3f8a', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b97eb57513099c38e12b54058dd5ee90d03156', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc73449c754f5f0b441170c4e389b65d7e19a1cb', 'committer_username': 'vinitamurthi', 'committer_name': 'Vinita Murthi', 'committer_email': 'murthi.vinita@gmail.com', 'commit_date': datetime.datetime(2015, 4, 3, 3, 30, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eee6a5b10f24218513a251f2b21725cec14c051', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b71d8eb9044e7f3504c092b5876fb4343a0c2bb4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce39c92770c31646e7d9b9de95584ca576511c4b', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '682c5a717ff3129135a08472a9d9ba40fbd32bce', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96b3fe5dcb8e278dad9a82031c7778b86d40b48d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af362b8099c872b83adb226a535d33c82b053b86', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1291c042c46d329c8b2ed1ccc9ff9d1264a110df', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e50e5eeba351ce3480f934e55dc9ae0d5ec59fb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef941b45e0c509fd36c1e138d53b2d646dfc64f1', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26b5afd7362e584f9a851fe3d72a025b550c36d8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00866d4e5d6f7f3a64b454b3ae64e5d2f1dbd83c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7097fa1fa413c2b404f4d98383e661a3f87035aa', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e02be670df49647cc814da178969b7076e21e2e8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ab53f208d7dadb5877f9f853fe8c0df926937cb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfbc7469ac341537c32d7c46132586deb9012972', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02a4783a1051d5ab83c29c9d147fdc270c8a84c9', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eaf10b89b6a2db310da533968dd14a4ec94565e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76a2b51536c90d5f2304eed87a46b204096f6441', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4569bb9a9d6506c194ed4bf20a54889959174e32', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcd8bf8f8711c535fafa45f95c9a741fce20bff4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62a1e7ff39dd4c6dad2f0a2a9f3b214d9d9b4b4f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84517a8a6f7fbada1f42a85da79ebbc1ea841575', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd8737e2502acc9bb290ff04cf9254c39043e716', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0033e7a66ded60ef9c7fca7fffba03bbc8ad49de', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a5cb5043f73e5316a5d05a471d3c06410eeb832', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11d6a44953a3620b27739f01e56d642b19d8d313', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db4d6259c9bad4442b3ed3d789f737b9a2dcf25a', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db9a32ee67262f0401b0e9e784e7e69d2d5d37ba', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ef8dd49e1fae02b9d873661d92e423ef16929fb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd70a629e0a9dbe0a77583fb4563795e7f251bb1d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be040f15a9c4bd0aa8ba8c98b089c08002529afe', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baf0d00a885df83ee93e8240bcb6392ceef666ee', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11556117ba1f8116fb49f4af84581db15226f29e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7473795259ad84584e402a141d366fab088a8e5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fecd09976521ab5305e7e2ad8a5d734928ccdc3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b773b650dceb104594ea0b771c2968eff568e6c7', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc94de52fd7181a78290e1cc91be99c691aa873f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd609f07e981d8c4bf6ad3618a0f0b9279bd1671d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0382a19e6737f3e2cc4c9a56860c9010997ac50', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e42df55280bc8d8fa4d3b90a6eff99fe56043ab', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd37476f6463bd713ae10a447d8416a3978e5d5d7', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e19a2a7a04941fb01f2ba0311f89c8f188c8a8f7', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14a5bfed16df61922e070b661d6198bf95e91670', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66248b4a02d1ed5dc8529f22b959186b7307bb31', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e34dda37650e8583463bcfbd527a80f7124e45c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c3f4d1e2b8d64c90f012d3d4bf1affe2f83e26f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '447ef8c5437046f0523bcdae2d100a7a6a635ff4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbb955e09e3cb1c8274fa98bc1a4caffb3c991b3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '173767701f2f57d51cffcc38fae6df361a8c85d6', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '735d93d91789f9a131d0a30d8a451614f2aeeb8f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3045e01563a27ee77accee0f276424ea837721d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c04466a7b70bcb35abe240175ba7967b68f78109', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b9e962608e23f27353516f1116ab1e9bb14be5f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd73333036e81664b1932425c7b7c37237d12cc90', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3cfa578a557defbcbf96810e3596184ed756828', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78436079f6904ab4a88ecdcb80e5224c902468ae', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65d21056ed0f7b675e152bb3defd55194c603382', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60
436074454,Fix #1099: Linking UI Components with Analytics code,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fix #1099 

This PR adds custom event logging at the following places -
- Home Activity
- Exploration Activity 
- Story Activity 
- Lessons tab [Topic]
- Info tab [Topic]
- Practice tab [Topic]
- Revision tab [Topic] 

It also initialises FirebaseApp in test files. 

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1343,https://api.github.com/repos/oppia/oppia-android/pulls/1343,https://github.com/oppia/oppia-android/pull/1343,closed,469,34,23,73,2,0,0,2,[],2020-06-17 20:20:15+00:00,2020-06-19 15:17:42+00:00,154647.0,"1 day, 18:57:27",[],"[{'commit_sha': '8d506195d3ff2863fc76c360b76aa32c5dbd3f8a', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b97eb57513099c38e12b54058dd5ee90d03156', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc73449c754f5f0b441170c4e389b65d7e19a1cb', 'committer_username': 'vinitamurthi', 'committer_name': 'Vinita Murthi', 'committer_email': 'murthi.vinita@gmail.com', 'commit_date': datetime.datetime(2015, 4, 3, 3, 30, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eee6a5b10f24218513a251f2b21725cec14c051', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b71d8eb9044e7f3504c092b5876fb4343a0c2bb4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce39c92770c31646e7d9b9de95584ca576511c4b', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '682c5a717ff3129135a08472a9d9ba40fbd32bce', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96b3fe5dcb8e278dad9a82031c7778b86d40b48d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af362b8099c872b83adb226a535d33c82b053b86', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1291c042c46d329c8b2ed1ccc9ff9d1264a110df', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e50e5eeba351ce3480f934e55dc9ae0d5ec59fb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef941b45e0c509fd36c1e138d53b2d646dfc64f1', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26b5afd7362e584f9a851fe3d72a025b550c36d8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00866d4e5d6f7f3a64b454b3ae64e5d2f1dbd83c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7097fa1fa413c2b404f4d98383e661a3f87035aa', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e02be670df49647cc814da178969b7076e21e2e8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ab53f208d7dadb5877f9f853fe8c0df926937cb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfbc7469ac341537c32d7c46132586deb9012972', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02a4783a1051d5ab83c29c9d147fdc270c8a84c9', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eaf10b89b6a2db310da533968dd14a4ec94565e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76a2b51536c90d5f2304eed87a46b204096f6441', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4569bb9a9d6506c194ed4bf20a54889959174e32', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcd8bf8f8711c535fafa45f95c9a741fce20bff4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62a1e7ff39dd4c6dad2f0a2a9f3b214d9d9b4b4f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84517a8a6f7fbada1f42a85da79ebbc1ea841575', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd8737e2502acc9bb290ff04cf9254c39043e716', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0033e7a66ded60ef9c7fca7fffba03bbc8ad49de', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a5cb5043f73e5316a5d05a471d3c06410eeb832', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11d6a44953a3620b27739f01e56d642b19d8d313', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db4d6259c9bad4442b3ed3d789f737b9a2dcf25a', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db9a32ee67262f0401b0e9e784e7e69d2d5d37ba', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ef8dd49e1fae02b9d873661d92e423ef16929fb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd70a629e0a9dbe0a77583fb4563795e7f251bb1d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be040f15a9c4bd0aa8ba8c98b089c08002529afe', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baf0d00a885df83ee93e8240bcb6392ceef666ee', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11556117ba1f8116fb49f4af84581db15226f29e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7473795259ad84584e402a141d366fab088a8e5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fecd09976521ab5305e7e2ad8a5d734928ccdc3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b773b650dceb104594ea0b771c2968eff568e6c7', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc94de52fd7181a78290e1cc91be99c691aa873f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd609f07e981d8c4bf6ad3618a0f0b9279bd1671d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0382a19e6737f3e2cc4c9a56860c9010997ac50', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e42df55280bc8d8fa4d3b90a6eff99fe56043ab', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd37476f6463bd713ae10a447d8416a3978e5d5d7', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e19a2a7a04941fb01f2ba0311f89c8f188c8a8f7', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14a5bfed16df61922e070b661d6198bf95e91670', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66248b4a02d1ed5dc8529f22b959186b7307bb31', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e34dda37650e8583463bcfbd527a80f7124e45c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c3f4d1e2b8d64c90f012d3d4bf1affe2f83e26f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '447ef8c5437046f0523bcdae2d100a7a6a635ff4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbb955e09e3cb1c8274fa98bc1a4caffb3c991b3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '173767701f2f57d51cffcc38fae6df361a8c85d6', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52f9d946a76e26be4cfbd54d2ec427f6be6e743a', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '735d93d91789f9a131d0a30d8a451614f2aeeb8f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3045e01563a27ee77accee0f276424ea837721d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c04466a7b70bcb35abe240175ba7967b68f78109', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83fedc859e6d09361a7aa9cfda9d8203266b95ad', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a91234ff32bbded12a57482ad65b1e8458dfd9b3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b9e962608e23f27353516f1116ab1e9bb14be5f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd73333036e81664b1932425c7b7c37237d12cc90', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3cfa578a557defbcbf96810e3596184ed756828', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ca245e0db8a31a7ed993f2f4ba839d70b9d5fc6', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e25dcdd8560820465c69339c25a937d063059e5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78436079f6904ab4a88ecdcb80e5224c902468ae', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65d21056ed0f7b675e152bb3defd55194c603382', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea8f48f954cafc47a1da0d43cbfaf0d80337eca9', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a74c8c1845baa1a8d5213cf2816d6702ff584dd', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a750c91dfc528b86ba1f08bd31f3166727ea577e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e4c74ea9e393c4fae4ffa36a6ae10978607ad70', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cbb06ee84165ece6063c175b51a032f5272795b', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e78dc5007236ccc78ba3a366fbf69bbe4f26ca5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0c609238840284818ba76d5e7b9bc161e45d3da', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fdea76fd6c481690a9d0b6fdb4a3b56351c8eb8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60
437411614,Fix #1368: Disabling data collection via Manifest,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fix #1368 
- This PR follows implementation pattern of this [link](https://firebase.google.com/docs/analytics/configure-data-collection?platform=android).
- Added meta data to the manifest to disable data collection. 
- Verified (via DebugView) that no data gets logged.

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1369,https://api.github.com/repos/oppia/oppia-android/pulls/1369,https://github.com/oppia/oppia-android/pull/1369,closed,2,0,1,2,3,0,0,1,[],2020-06-20 13:20:27+00:00,2020-06-25 13:09:36+00:00,431349.0,"4 days, 23:49:09",[],"[{'commit_sha': '7f0e39f1378794e82fd3144af31fce97e946b8fd', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15b83d4ea8d01959269f13ee501cf521cf79ef13', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60
433919767,Fix #1101: Proto definition for event logging,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixes #1101 
- Renaming from analytics.proto to event_logger.proto
- Modification of proto definition in accordance with the pre-decided convention for event logging.

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [ ] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1318,https://api.github.com/repos/oppia/oppia-android/pulls/1318,https://github.com/oppia/oppia-android/pull/1318,closed,68,23,2,4,0,0,0,1,[],2020-06-12 23:18:21+00:00,2020-06-13 20:05:40+00:00,74839.0,20:47:19,[],"[{'commit_sha': '025092d18918996f792c5c508e6d9a3e4bdc8e95', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '879375cf06f782e776cf5aa21872698271eb38e0', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ee82446a291a61065d1815bdb55b31b101ee28f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46f77597d97eeea9b45a1d2315827e528556b68', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60
441172583,Fix #1102: Offline Event Logging ,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fix #1102 
- Addition of offline event storage functionality in Analytics Controller. 
- Addition of tests for the same. 

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1423,https://api.github.com/repos/oppia/oppia-android/pulls/1423,https://github.com/oppia/oppia-android/pull/1423,closed,658,184,27,46,8,111,0,1,[],2020-06-29 03:22:02+00:00,2020-07-21 05:37:02+00:00,1908900.0,"22 days, 2:15:00","[{'comment_id': 446803278, 'comment_body': 'You can do this in a more optimized way by using collection filters. See https://kotlinlang.org/docs/reference/collection-filtering.html', 'comment_created': datetime.datetime(2020, 6, 29, 6, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 446803552, 'comment_body': 'Take a look at stream/map/filter operations in kotlin for a more efficient way to do this', 'comment_created': datetime.datetime(2020, 6, 29, 6, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 446804262, 'comment_body': ""I am wondering if we should merge this and the above function. As far as I understand they both will be used primarily to figure out which event to delete right? \r\nSo maybe just getLeastRecentEvent which does the following:\r\n\r\n- If there are optional events available, returns the least recent optional event, else\r\n- Returns the least recent essential event.\r\n\r\nDoes that make sense? That way the logic is abstracted away and callers of the function don't need to think too much about it (But make the comment very clear)\r\n\r\nThis totally depends on how you are planning to use the storage helper:\r\nIf these two functions are meant to be used publicly, then abstract it . Callers shouldn't have to think about optional/essential events while trying to get rid of old events.\r\nif these are helper functions to be used within the storage helper itself , then it makes sense to keep them separate"", 'comment_created': datetime.datetime(2020, 6, 29, 6, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 446804380, 'comment_body': 'Add new line at EOF (Run ktlint / organize imports/ reformat code on these files)', 'comment_created': datetime.datetime(2020, 6, 29, 6, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 446805117, 'comment_body': 'Can we make this work for all types of logs rather than just event logs ? Since we need to store crash logs too', 'comment_created': datetime.datetime(2020, 6, 29, 6, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 446805391, 'comment_body': 'Can we check for the storage limit here itself before storing a new record? i.e. check storage, if its greater than the limit then delete a log. Then add this log', 'comment_created': datetime.datetime(2020, 6, 29, 6, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 447324030, 'comment_body': 'Done, PTAL', 'comment_created': datetime.datetime(2020, 6, 29, 23, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 447324068, 'comment_body': 'Done, PTAL.', 'comment_created': datetime.datetime(2020, 6, 29, 23, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 447324232, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 29, 23, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 447324258, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 29, 23, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 447324419, 'comment_body': 'Done, PTAL.', 'comment_created': datetime.datetime(2020, 6, 29, 23, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 447327224, 'comment_body': ""I am planning to use it in the following way - \r\n- The interaction outside this class is purely done by the addEvent and the getAllEvents functions. \r\n- Rest of the functions remain helper functions for internal usage -- book keeping \r\n\r\nI am planning to do this this way because when these functions are called from the controller, we either have to save them (no connectivity) or get all the event logs (in case of presence of network). I don't think that there is any need for the controller to call specific events (optional or leastRecent). \r\n\r\nDoes that help? \r\n"", 'comment_created': datetime.datetime(2020, 6, 30, 0, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 447412818, 'comment_body': 'I think we should pass these as dagger constants. See https://github.com/oppia/oppia-android/blob/develop/domain/src/main/java/org/oppia/domain/question/QuestionTrainingConstantsProvider.kt for an example', 'comment_created': datetime.datetime(2020, 6, 30, 5, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 447413031, 'comment_body': ""As we had discussed, please make this a generic addLog method that works for crash or event logs. Or if that's too difficult, please add addCrashLogs here as well"", 'comment_created': datetime.datetime(2020, 6, 30, 5, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 447413127, 'comment_body': 'This should be a generic method that should work for event or crash logs', 'comment_created': datetime.datetime(2020, 6, 30, 5, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 447413259, 'comment_body': 'Please remember that we need to make this work for crash/exception logs too, All of these methods need to support exception logs', 'comment_created': datetime.datetime(2020, 6, 30, 5, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 447413549, 'comment_body': 'This is not working for crash logs', 'comment_created': datetime.datetime(2020, 6, 30, 5, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 447413615, 'comment_body': 'Sounds good', 'comment_created': datetime.datetime(2020, 6, 30, 5, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 448081703, 'comment_body': 'Done, PTAL :) ', 'comment_created': datetime.datetime(2020, 7, 1, 2, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448081744, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 2, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448081918, 'comment_body': 'Yes, I tried adding a generic add log method. But I feel having two separate functions for event and exception logging will be better.', 'comment_created': datetime.datetime(2020, 7, 1, 2, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448081952, 'comment_body': 'Yes, done. ', 'comment_created': datetime.datetime(2020, 7, 1, 2, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448082013, 'comment_body': 'Yes, modified. ', 'comment_created': datetime.datetime(2020, 7, 1, 2, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448115777, 'comment_body': 'I thought we discussed keeping a single store but separate size limits?', 'comment_created': datetime.datetime(2020, 7, 1, 4, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 448115984, 'comment_body': 'I dont think this would be an int64 type, have you tried serializing the exception? it would most likely be either a string or a byte array (more likely the latter)', 'comment_created': datetime.datetime(2020, 7, 1, 5, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 448116256, 'comment_body': 'I am not entirely sure what is happening here. WE are making a list of OppiaEventLogs which has only a repeated list of event log..and OppiaLog is not being used anywhere? Please recheck the entire storage solution. There are a lot of semantic issues here', 'comment_created': datetime.datetime(2020, 7, 1, 5, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 448440823, 'comment_body': 'Ya, I was a bit confused about it too. I have added a new message for that now. The stack trace element consists of 4 things-- declaring class, method name, file name and line number which make up the whole stack trace. So I have just used that thing here. I think it will work. PTAL :) ', 'comment_created': datetime.datetime(2020, 7, 1, 15, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448442294, 'comment_body': 'Modified, PTAL. ', 'comment_created': datetime.datetime(2020, 7, 1, 15, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448459381, 'comment_body': 'Discussion done offline. ', 'comment_created': datetime.datetime(2020, 7, 1, 15, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448857955, 'comment_body': 'Please put this file into its own folder as discussed..i.e. domain/oppialogger/logstorage(or any other appropriate name)/LogReportStorageHelper.kt', 'comment_created': datetime.datetime(2020, 7, 2, 9, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 448861043, 'comment_body': ""Why exactly are we doing recursive method calls here? I am not sure if that's a good idea. Instead we can pass in how much of data in bytes needs to be removed (N = currentSize - cacheSize) and take the leastRecentEventsUptoSizeN and remove it in one shot. \r\nAlternatively, you can keep the cache value as number of records instead of bytes, and then you can remove leastRecentNEvents if the size of the cache becomes greater than the total number of entries allowed by N"", 'comment_created': datetime.datetime(2020, 7, 2, 9, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 448861867, 'comment_body': 'You are checking the status with the current store, but not with the store + the size of the new event that we want to add. So it will only delete an entry from the store after it has already gone above the cache limit', 'comment_created': datetime.datetime(2020, 7, 2, 9, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 448862257, 'comment_body': 'Add comments explaining the order in which we decide the min event', 'comment_created': datetime.datetime(2020, 7, 2, 9, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 448863207, 'comment_body': 'Comments explaining what the size is measured by, 10 bytes?KB?MB?GB ?  (or if you look at my above comment about records, then this would be 10 records)', 'comment_created': datetime.datetime(2020, 7, 2, 9, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 448864478, 'comment_body': 'The entire stack trace would be a stack of multiple StackTraceElements right? Please try serializing and deserializing a stacktrace once to figure out the right way to store it ', 'comment_created': datetime.datetime(2020, 7, 2, 9, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 449364785, 'comment_body': 'Yes, I did that in the Pseudo project earlier as well. Modified, PTAL. ', 'comment_created': datetime.datetime(2020, 7, 3, 4, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 449365474, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 3, 4, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 449365493, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 3, 4, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 449365522, 'comment_body': 'Yes, modified. PTAL.', 'comment_created': datetime.datetime(2020, 7, 3, 4, 7, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 449365630, 'comment_body': 'Yes, the records method seems like a better approach. Modified, PTAL. ', 'comment_created': datetime.datetime(2020, 7, 3, 4, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 449365674, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 3, 4, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 449983084, 'comment_body': 'You probably want to store more than 10 records, 10 is very small', 'comment_created': datetime.datetime(2020, 7, 6, 4, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 449983484, 'comment_body': 'Instead of adding the 1 here, its better to pass in the data as eventCacheList.size + 1 to this function', 'comment_created': datetime.datetime(2020, 7, 6, 4, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 449983657, 'comment_body': ""You shouldn't just remove one event. This is going on the assumption that there will never be more than 1 extra record in the cache, which is not something we should do . We should remove leastRecentNEvents where N = storeSize - cacheStorageLimit"", 'comment_created': datetime.datetime(2020, 7, 6, 4, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 449983967, 'comment_body': 'rename to getExceptionLogs()', 'comment_created': datetime.datetime(2020, 7, 6, 4, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 449984136, 'comment_body': 'Have you tried serializing and deserializing this? Its not enough to create a repeated element, you would need to be able to create an exception out of this element', 'comment_created': datetime.datetime(2020, 7, 6, 5, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 450945399, 'comment_body': 'Removed in accordance with our discussion. ', 'comment_created': datetime.datetime(2020, 7, 7, 15, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 450945473, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 7, 15, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 450945682, 'comment_body': 'Modified, PTAL. ', 'comment_created': datetime.datetime(2020, 7, 7, 15, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 450945757, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 7, 15, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 451472247, 'comment_body': 'Add a TODO with a bug specifying to put the right number of records and the size calculation for exceptions', 'comment_created': datetime.datetime(2020, 7, 8, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 451514558, 'comment_body': 'LogReportType maybe?', 'comment_created': datetime.datetime(2020, 7, 8, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 451515283, 'comment_body': 'Can we instead remove all N events in one shot rather than running it in a for loop ', 'comment_created': datetime.datetime(2020, 7, 8, 12, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 451515687, 'comment_body': 'Actually to keep it simple lets just do one event for now (i.e. remove the for loop). If we find it to be a problem we can do remove N records', 'comment_created': datetime.datetime(2020, 7, 8, 12, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 451635489, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 8, 15, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 451635542, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 8, 15, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 451636584, 'comment_body': 'Okay, done.', 'comment_created': datetime.datetime(2020, 7, 8, 15, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 454049238, 'comment_body': ""Based on my top-level PR comment, I do wonder whether we can just split this helper into two and merge the offline caching functionality into the corresponding controller that needs it. There doesn't seem to be any logical overlap here, and the current implementation seems to be doing a bit too much trying manage both the event and exception log (it feels a bit like a violation of the [Single Responsibility Principle](https://en.wikipedia.org/wiki/Single-responsibility_principle))."", 'comment_created': datetime.datetime(2020, 7, 14, 1, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 454049776, 'comment_body': ""These comments aren't very useful. I suggest adding more context to provide help to the reader. E.g.:\r\n\r\n- `` The UTC timestamp in millis at which point the exception was thrown.`` (or caught if it's that; be specified).\r\n- ``The message explaining what failed at the site the exception was thrown.``\r\n\r\netc."", 'comment_created': datetime.datetime(2020, 7, 14, 1, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 454049869, 'comment_body': 'What is this, exactly? Exception causes are other exceptions; how is it being converted to a string?', 'comment_created': datetime.datetime(2020, 7, 14, 1, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 454049902, 'comment_body': ""Do we also need to log the exception's stack trace?"", 'comment_created': datetime.datetime(2020, 7, 14, 1, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 454049986, 'comment_body': '``Indicates an exception that caused the application to close.``', 'comment_created': datetime.datetime(2020, 7, 14, 1, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 454050066, 'comment_body': 'Similarly, ``Indicates an exception that was not fatal to the application and could be recovered from.``', 'comment_created': datetime.datetime(2020, 7, 14, 1, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 454050234, 'comment_body': 'Please add EOF newlines in all new files.', 'comment_created': datetime.datetime(2020, 7, 14, 1, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 454051084, 'comment_body': ""Performing operations that need to be synchronized on the internal state of a cache should be done within that cache's class, if possible. Otherwise you're risking introducing complex race conditions (in this case, I think it's possible for logs to exceed the maximum number expected in an accumulating manner)."", 'comment_created': datetime.datetime(2020, 7, 14, 1, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 454074460, 'comment_body': ""The exception offline logging functionality is going to be part of M3. Stack trace is something that Sarthak needs to figure how to serialize. So I said that he can figure that out while actually implementing M3 and for now he doesn't need to add it.\r\nIf we do separate out the logic for both then we can completely remove these proto files and keep only the event ones for now"", 'comment_created': datetime.datetime(2020, 7, 14, 3, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 454247749, 'comment_body': ""It's basically throwable to string and then string to throwable. "", 'comment_created': datetime.datetime(2020, 7, 14, 10, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456115701, 'comment_body': 'Agreed and modified accordingly. PTAL :) ', 'comment_created': datetime.datetime(2020, 7, 16, 22, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456116337, 'comment_body': 'As we are not implementing addExceptionLog() right now, I have removed these proto files. Will keep these suggestions in mind when I implement the same during M3. ', 'comment_created': datetime.datetime(2020, 7, 16, 22, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456116505, 'comment_body': 'Removed ExceptionLog related proto files. ', 'comment_created': datetime.datetime(2020, 7, 16, 22, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456116785, 'comment_body': 'Will keep these suggestions in mind when I implement the same during M3 :) ', 'comment_created': datetime.datetime(2020, 7, 16, 22, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456116810, 'comment_body': 'Will keep these suggestions in mind when I implement the same during M3 :) ', 'comment_created': datetime.datetime(2020, 7, 16, 22, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456116910, 'comment_body': 'File removed. ', 'comment_created': datetime.datetime(2020, 7, 16, 22, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456117062, 'comment_body': 'Modified accordingly, PTAL :) ', 'comment_created': datetime.datetime(2020, 7, 16, 22, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456207946, 'comment_body': ""If you add the mockito junit rule, you shouldn't require this. I have had issues with it before though so in case that doesn't work then I guess this is okay. But let's first try using the mockito rule to avoid having this line at set up in all our tests!"", 'comment_created': datetime.datetime(2020, 7, 17, 4, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 456208200, 'comment_body': 'logClickEvent_withNoNetwork instead of None maybe? (Here and elsewhere)', 'comment_created': datetime.datetime(2020, 7, 17, 4, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 456285894, 'comment_body': 'Yes, it worked. Thanks ! ', 'comment_created': datetime.datetime(2020, 7, 17, 8, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456286012, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 17, 8, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456746741, 'comment_body': 'Do we verify that this is a click vs. a transition event is logged & cached for this & the test above? That seems like an important distinction to verify.', 'comment_created': datetime.datetime(2020, 7, 18, 4, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 456746830, 'comment_body': ""Rather than logging a really large number, can we override the limit itself? If you use a Dagger constant for this variable, you can use a test module to limit it to something small (like 2), which then lets you avoid needing a control structure of the test. This in turn simplifies the test, makes it more performant, avoids a dependency on an implementation detail, and makes it easier to verify as correct since there isn't logic in the test that also needs to be verified as correct."", 'comment_created': datetime.datetime(2020, 7, 18, 4, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 456746950, 'comment_body': 'Other tests that might be useful to verify:\r\n- Uploading the events clears the queue\r\n- Exceeding the clear, then uploading some, allows more events to be logged\r\n- Both click and transition events can be logged at the same time\r\n- The correct old event is evicted from the queue\r\n- The logs are uploaded in the correct order', 'comment_created': datetime.datetime(2020, 7, 18, 4, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 456747009, 'comment_body': ""Related to a later comment, but I think it's important to make sure that in both the internet and non-internet cases that the logs are eventually uploaded."", 'comment_created': datetime.datetime(2020, 7, 18, 4, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 456747120, 'comment_body': 'Suggested alternative name: ``maybeLogEvent`` or ``uploadOrCacheEventLog``', 'comment_created': datetime.datetime(2020, 7, 18, 4, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 456747141, 'comment_body': ""Here & elsewhere: either combine these sentences into a single paragraph, or use empty lines to denote different parts of the summary. It's a bit hard to read, as-is."", 'comment_created': datetime.datetime(2020, 7, 18, 4, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 456747182, 'comment_body': ""Perhaps: ``cacheEventLog`` or ``saveEventLog``. 'add' is a bit ambiguous; we should be specific where the event log is going to provide context at the callsite."", 'comment_created': datetime.datetime(2020, 7, 18, 4, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 456747307, 'comment_body': 'Do you think we should always log exceptions passed to the console logger? If so, maybe you could just have a ``consoleLogger.e()`` call with a new ``NullPointerException`` to simplify this & log to both logcat and the logger.', 'comment_created': datetime.datetime(2020, 7, 18, 4, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 456747363, 'comment_body': 'Why use ``Analytics Controller`` above but ``DOMAIN`` here? Prefer to keep all of the error tags in a single file consistent.', 'comment_created': datetime.datetime(2020, 7, 18, 4, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 456764267, 'comment_body': ""Yes, we do that by checking the priority of the logged event. If it's `OPTIONAL` then it points to a click event and if it's `ESSENTIAL` then it points to a transition event. "", 'comment_created': datetime.datetime(2020, 7, 18, 8, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456764441, 'comment_body': 'Yes, will do. ', 'comment_created': datetime.datetime(2020, 7, 18, 8, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456764680, 'comment_body': 'We were making sure that the logs are eventually uploaded using the fake implementation of the eventLogger. We can probably use that here as well. However, the functionality for uploading stored events is a part of M3. So will do that then. Is that fine ? ', 'comment_created': datetime.datetime(2020, 7, 18, 8, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456765274, 'comment_body': 'Okay, got it. ', 'comment_created': datetime.datetime(2020, 7, 18, 8, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456767542, 'comment_body': 'Actually, the functionality for uploading events from the store to the remote service is a part of M3. So I will add tests related to uploading of events then. Does that make sense ? ', 'comment_created': datetime.datetime(2020, 7, 18, 8, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456775174, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 18, 10, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456775215, 'comment_body': 'Added 3 test cases to increase test thoroughness as per the comment. ', 'comment_created': datetime.datetime(2020, 7, 18, 10, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456775239, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 18, 10, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456775262, 'comment_body': 'Used empty lines to denote different parts. ', 'comment_created': datetime.datetime(2020, 7, 18, 10, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456775270, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 18, 10, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456775290, 'comment_body': 'Modified, PTAL.', 'comment_created': datetime.datetime(2020, 7, 18, 10, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456775304, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 18, 10, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 457173179, 'comment_body': 'Resolving on behalf of Ben', 'comment_created': datetime.datetime(2020, 7, 20, 8, 29, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 457174086, 'comment_body': 'Maybe its worth specifying that in a comment here', 'comment_created': datetime.datetime(2020, 7, 20, 8, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 457174290, 'comment_body': '(Sarthak you can resolve this after adding a comment)', 'comment_created': datetime.datetime(2020, 7, 20, 8, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 457181499, 'comment_body': 'Just to clarify that tests 1 & 2 mentioned above will be part of M3 (@Sarthak2601 can you add a TODO with a bug here?) Verified that the other 3 are tested. Resolving this ', 'comment_created': datetime.datetime(2020, 7, 20, 8, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 457183176, 'comment_body': 'Do you need to specify the full name? I think you can import this and only specify EventLogStorageCacheSize right?', 'comment_created': datetime.datetime(2020, 7, 20, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 457186091, 'comment_body': 'The OppiaLogger will solve this case. So I am resolving this, this will be refactored', 'comment_created': datetime.datetime(2020, 7, 20, 8, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 457186893, 'comment_body': 'Actually before I resolve, @Sarthak2601 can you add a todo with #1433 as the bug number?', 'comment_created': datetime.datetime(2020, 7, 20, 8, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 457338575, 'comment_body': 'Yep, done. ', 'comment_created': datetime.datetime(2020, 7, 20, 12, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 457338713, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 457338886, 'comment_body': 'Added comments. Resolving.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 457411612, 'comment_body': '@BenHenning @vinitamurthi Can we resolve this as well ? ', 'comment_created': datetime.datetime(2020, 7, 20, 14, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 457845455, 'comment_body': 'Ah yes sorry, this is part of M3 we can resolve this', 'comment_created': datetime.datetime(2020, 7, 21, 5, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}]","[{'commit_sha': '88d62e76493b07a557f2093cd6ef11adf3236de5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2ddf1cdeceae3a627a0c9d7ccb49f0d5fdfbd55', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74bc99b4732a2fa50965efb9446b287dbcd467f5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a87cd0ff48977d066c042681dca5bb024affec29', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76d94a1107ef2746ff6e884e78b8dd2e2b5d15bd', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b64a45a7c3b63c6362aaad238a8e48a924c387b3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4571880140f9ad2a9e3e4b105f41d866bbca058c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b55de6dd46e40b76edc304d435bdca0b681f13c9', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f55eb93bce905c4cb0f32ead1bad6cc3e2e4307f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d830161f5b12030c004e6705be1ea8a9cc529a5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13e8263f477ed7f3d419dc1c8e20525e0994f6ff', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '706e09d01daa25fa6697a2b05b9e8ca0bb5c6e4a', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '449e3ba93413d3ba245b55e050c8800c9e6a19e8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61adfcd1514b915400a4368a4285f63d06c3ce52', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ef6cc80e39d91a07258589520b51d9ea926ca9', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76975a595149e2a90e03c9235894c3841f51b2a5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0bb85bcbd51eb4cb8c20a4b6bafa8dc59dc1e5d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c71250e7f185937414f006efc4a293460dd0ab9c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f13f2ece1fdf9442debe28dd5e8e89bbb6304ab4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8be4df451a7467c4530ca422645e60379a8d6819', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dde24e6992ee7be87756fec9a9866931ec9dc820', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '677c0dbcf2b89cf170a17d3d9548ade63125ebd2', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdd5371e945b79dde20c30c93f58a298151de3fb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9774c8640f299a726bf7c7135a83b05d7ffdd669', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb83e46a402b647d084205c9ab5020ec2f937759', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1be2db0fac1112984efe3254662c032eabde1fbb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd8306f6576a0131396551bcea185dbf62386029', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa53df371ffe9992873676ec52ef70f6c925dea6', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f271a3f3204c0d3e80f4c952e5d2e48807b5d918', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e35f8e58b1fe424ec07f9ad9ee3b0449809e2b1a', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ae9650ae31fb1db23acbf8a5a8bcf2d1699d58f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db8ef90233a32695462c115ec34c52a273ef6feb', 'committer_username': 'BenHenning', 'committer_name': 'Ben Henning', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 21, 2, 28, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb24b3c9790eab07338586074d1395b12628ccc', 'committer_username': 'BenHenning', 'committer_name': 'Ben Henning', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 21, 2, 28, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51c7848f64f2fa7e15d4efd839a7143bf92dcb14', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cefbd772a06165a4b26d4bcfef3da9c82e09f8d6', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0d3ae86c51d03b0cf30927bf2e59fefaaee7fa8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b494e5bacf62736fbee0b2bdbfd9a4f52c57cfa', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21493daa53ca30b6898b60015a248a178b547a20', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb7e793087ebf5938f9b24f68ebee0c5841c954e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5e494e1fe347de4ff3e8027f14fecc260f3c25', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8915b9ea46562faf5c746a977c1f1bcd36d2d5b1', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ffa5b274b849b60cf780dc2c5d0890714470cba', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b0cbb62bb3754771a791f12522b8639e6792576', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '297429d315a8a87e7d78931de3ccae6ac89ae0fd', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '646d422699cf41cfa9404d75e1ceeb7df9d10fda', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5952c52961503cbd446f576390a97d4f6f22c9a7', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60
441087696,Fix #1420 : Event logging in Profile and Tests in app module,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fix #1420 
- Addition of event logging in profile. [verified from firebase console] 
- Addition of following test files for Home, Info (topic), Lessons (topic), Story, Exploration and Revision Card. 

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1422,https://api.github.com/repos/oppia/oppia-android/pulls/1422,https://github.com/oppia/oppia-android/pull/1422,closed,1094,46,15,15,2,49,0,1,[],2020-06-28 17:23:25+00:00,2020-07-02 13:07:08+00:00,330223.0,"3 days, 19:43:43","[{'comment_id': 446802142, 'comment_body': 'Add new line at EOF. Maybe run `ktlint --android -F app/src/test/java/org/oppia/app/profile/ProfileChooserFragmentLocalTest.kt` once on this file (As well as organize imports and reformat code  commands of Android Studio on this file)', 'comment_created': datetime.datetime(2020, 6, 29, 6, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 446802321, 'comment_body': 'OPEN_PROFILE_CHOOSER maybe? This is not getting invoked when you open a profile but more when you are on the profile chooser page right? ', 'comment_created': datetime.datetime(2020, 6, 29, 6, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 446817312, 'comment_body': 'single space will come before `{`. Also, there is 2 unused import on line number 4 and 17, best to remove those as they don\'t need in the file. \r\nTry running ` ktlint --android ""app/src/main/java/org/oppia/app/profile/ProfileChooserFragmentPresenter.kt""` and fix these 3 small issue in this file. \r\nLet me know if you find any difficulty in ktlint. We are using ktlint version 0.37. ', 'comment_created': datetime.datetime(2020, 6, 29, 7, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 446818100, 'comment_body': 'This line is going out of 100 char per line limit, how about if we put 3-3 or 2-2 class in a line, it will bring some consistency and looks good I think. ', 'comment_created': datetime.datetime(2020, 6, 29, 7, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 447951130, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 20, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 447951197, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 20, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 447951362, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 20, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 447951557, 'comment_body': 'Yes, I think 3-3 will be better. Done :) ', 'comment_created': datetime.datetime(2020, 6, 30, 20, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448111966, 'comment_body': 'space before `{`, If you try doing `reformat code` from the menu toolbar such issues resolves automatically. \r\n', 'comment_created': datetime.datetime(2020, 7, 1, 4, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448112048, 'comment_body': 'space after `when` and before `{`, If you try doing `reformat code` from the menu toolbar such issues resolves automatically. \r\n', 'comment_created': datetime.datetime(2020, 7, 1, 4, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448112144, 'comment_body': 'space before `{`, If you try doing `reformat code` from the menu toolbar such issues resolves automatically. \r\n', 'comment_created': datetime.datetime(2020, 7, 1, 4, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448112191, 'comment_body': 'space before `{`, If you try doing `reformat code` from the menu toolbar such issues resolves automatically. ', 'comment_created': datetime.datetime(2020, 7, 1, 4, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448112213, 'comment_body': 'space before `{`, If you try doing `reformat code` from the menu toolbar such issues resolves automatically. \r\n', 'comment_created': datetime.datetime(2020, 7, 1, 4, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448112273, 'comment_body': 'space before `{`, If you try doing `reformat code` from the menu toolbar such issues resolves automatically. \r\n', 'comment_created': datetime.datetime(2020, 7, 1, 4, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448112748, 'comment_body': 'Not able to comment on that particular line but writing here. \r\nThere is an unused import at line number 13 `import org.oppia.app.model.EventLog`', 'comment_created': datetime.datetime(2020, 7, 1, 4, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448112975, 'comment_body': 'Not able to comment on that particular line but writing here. \r\nThere is an unused import at line number 15 `import org.oppia.app.model.EventLog`', 'comment_created': datetime.datetime(2020, 7, 1, 4, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448113256, 'comment_body': 'Not able to comment on that particular line but writing here. \r\nThere is an unused import at line number 14 `import org.oppia.app.model.EventLog`', 'comment_created': datetime.datetime(2020, 7, 1, 4, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448113398, 'comment_body': 'Not able to comment on that particular line but writing here. \r\nThere is an unused import at line number 13 `import org.oppia.app.model.EventLog`', 'comment_created': datetime.datetime(2020, 7, 1, 4, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448114428, 'comment_body': ""imports which are of `java, javax, kotlin` will come at the end of the import list. \r\n\r\n```\r\nimport javax.inject.Inject\r\nimport javax.inject.Singleton\r\n```\r\n\r\nThis can be achieved with the `optimise imports` in the menu toolbar. The only thing we have to care about while using `optimise imports` is that after doing it some imports might get wildcard imports and we don't want wildcard imports. \r\n\r\nTo achieve `reformat code and optimise imports` together with one shortcut you can have a look [here](https://github.com/oppia/oppia-android/wiki/Ktlint-Guide#macros). Let me know if you find any difficulty in this, happy to help. "", 'comment_created': datetime.datetime(2020, 7, 1, 4, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448114668, 'comment_body': 'The file must end with a new line', 'comment_created': datetime.datetime(2020, 7, 1, 4, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448114782, 'comment_body': 'Unexpected blank line(s) before `}`', 'comment_created': datetime.datetime(2020, 7, 1, 4, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448115000, 'comment_body': 'Unexpected blank line(s) before `}`. Also if this method is not in use, can we remove it?', 'comment_created': datetime.datetime(2020, 7, 1, 4, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448115199, 'comment_body': ""imports which are of `java, javax, kotlin` will come at the end of the import list. \r\n\r\n```\r\nimport javax.inject.Inject\r\nimport javax.inject.Singleton\r\n```\r\n\r\nThis can be achieved with the `optimise imports` in the menu toolbar. The only thing we have to care about while using `optimise imports` is that after doing it some imports might get wildcard imports and we don't want wildcard imports. \r\n\r\nTo achieve `reformat code and optimise imports` together with one shortcut you can have a look [here](https://github.com/oppia/oppia-android/wiki/Ktlint-Guide#macros). Let me know if you find any difficulty in this, happy to help. "", 'comment_created': datetime.datetime(2020, 7, 1, 4, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448115351, 'comment_body': 'Ths file must end with a new line', 'comment_created': datetime.datetime(2020, 7, 1, 4, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448115547, 'comment_body': 'The file must end with a new line.', 'comment_created': datetime.datetime(2020, 7, 1, 4, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448115612, 'comment_body': 'The file must end with a new line.', 'comment_created': datetime.datetime(2020, 7, 1, 4, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448115859, 'comment_body': ""imports which are of `java, javax, kotlin` will come at the end of the import list. \r\n\r\n```\r\nimport javax.inject.Inject\r\nimport javax.inject.Singleton\r\n```\r\n\r\nThis can be achieved with the `optimise imports` in the menu toolbar. The only thing we have to care about while using `optimise imports` is that after doing it some imports might get wildcard imports and we don't want wildcard imports. \r\n\r\nTo achieve `reformat code and optimise imports` together with one shortcut you can have a look [here](https://github.com/oppia/oppia-android/wiki/Ktlint-Guide#macros). Let me know if you find any difficulty in this, happy to help. "", 'comment_created': datetime.datetime(2020, 7, 1, 4, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 448116482, 'comment_body': ""Please add a comment with the variable name here before the null i.e. `/* variableName= */ null` Also, didn't we create a defaultcontext for these kind of situations? "", 'comment_created': datetime.datetime(2020, 7, 1, 5, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 448556175, 'comment_body': 'No, the default context case was in handling the `EventBundleCreator`. As far as app module is concerned, we gave them functions to create different contexts but not for creating a null context. Should we also provide that function ? I think null here works fine in cases like these as we are handling this when it comes to actual event logging. ', 'comment_created': datetime.datetime(2020, 7, 1, 18, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448629849, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 1, 21, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448629893, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448629928, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448629964, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448630010, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448630080, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448630103, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448630121, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448630163, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448630200, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448630384, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448630419, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448630470, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448630539, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448630597, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 40, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448630624, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448630665, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448630720, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448630807, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 448632565, 'comment_body': 'Added a comment highlighting the variable name. ', 'comment_created': datetime.datetime(2020, 7, 1, 21, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}]","[{'commit_sha': '7c4b3c8f4f41606f05f29a931ad537a356ed2f7f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8185d68fcf75915e1cec76aa684c39af7b673ccb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '196a551ee6324d09c0d43ed98347b02142edbdd9', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '464b24723d2c4e0be79b772ca11226c831adae02', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87f50876dabeddc4aba8a5a67327a650a11f54e0', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fb570fbec71578c5654103b6292224ce011d7de', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe058ac04e507659dac3c49a6389ff7aec089cb4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0dc9055efc140e82c1a2c9a05a70bdf1d043268', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '895f530598623a59adff524612d6c212202ee977', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60632bea59d6511dcb7868e1e9570bdb02b63128', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '783c4c70b0fd63603779d55849d044f1ce17dbdc', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f85b26b90cc43319a0daa2ce0c8d65742340ee73', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e41dc9030a13e50fea0c25c1d47a18097985ac', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54e3ac3dd5f98e6b2eba809676e80b51097b290e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a67c9bcbbe2194f4a90d8c39ce6aa7d92f7a78aa', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60
444930392,Fix #1441: Fixes in current event logging scenario,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fix #1441 
- Removal of Context parameter from everywhere. 
- Fixes in Question Player event logging. 

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1445,https://api.github.com/repos/oppia/oppia-android/pulls/1445,https://github.com/oppia/oppia-android/pull/1445,closed,25,61,16,11,2,6,0,1,[],2020-07-06 18:17:13+00:00,2020-07-17 12:17:46+00:00,928833.0,"10 days, 18:00:33","[{'comment_id': 452096660, 'comment_body': 'This should be /* eventContext= */', 'comment_created': datetime.datetime(2020, 7, 9, 9, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 452097532, 'comment_body': 'I thought we discussed that we would convert the array to a string and put it once, instead of keeping separate keys..\r\ni.e. \r\n```\r\nbundle.putString(SKILL_ID_KEY, skillIdList.joinToString())\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 9, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 456297899, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 17, 8, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456297961, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 17, 8, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 456312528, 'comment_body': ""Add an '=' , i.e. `/* eventContext= */ null`"", 'comment_created': datetime.datetime(2020, 7, 17, 8, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 456402040, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 17, 12, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}]","[{'commit_sha': 'e909f9749d55f06ef263eb9afb370f9f18667561', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb94160501202647ed4951546f6b4f16e4ad92ce', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e5be0d7747091bf250f58a9b828060dc94d457', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c085650d7f435de995b6d7bd8fb8c3f97df2b6f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7392f067169be86ad9e3d8f32144bee416cd9893', 'committer_username': 'BenHenning', 'committer_name': 'Ben Henning', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 21, 2, 28, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f59bb364147582c1d67c441b9cdf3a107ecf829', 'committer_username': 'BenHenning', 'committer_name': 'Ben Henning', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 21, 2, 28, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fda6f6e5991b6cd8b219a283103f003f62c5ad3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6af20f2577d55f94a10e97d4958ceb6bfa35eca5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7efaf67c8b8022305cfa0bdbd0de412a3dd97d22', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41f33b96cbf7fbfbe6d72e56c09e73ae06185d61', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c93343789a4d8b3fdddeef21425ce26d863ec1b9', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60
455047598,Fix #1104: Offline Exception Logging,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixes #1104 
Fixes part of #1105 
- Adds the proto structure for exception logs 
- Adds exception controller for storing/uploading of exception logs on the basis of network connectivity. 

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1500,https://api.github.com/repos/oppia/oppia-android/pulls/1500,https://github.com/oppia/oppia-android/pull/1500,closed,751,67,41,34,3,109,0,1,[],2020-07-22 11:06:48+00:00,2020-08-11 10:16:42+00:00,1724994.0,"19 days, 23:09:54","[{'comment_id': 459227216, 'comment_body': 'Add a KDoc for this function', 'comment_created': datetime.datetime(2020, 7, 23, 5, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 459227355, 'comment_body': ""Let's rename this a bit. Maybe parseExceptionToExceptionLog or something?"", 'comment_created': datetime.datetime(2020, 7, 23, 5, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 459227449, 'comment_body': ""As discussed, do we need this right now? If not, let's remove it. "", 'comment_created': datetime.datetime(2020, 7, 23, 5, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 459227831, 'comment_body': ""I'm wondering if it makes sense to log an exception here if the problem lies in logging exceptions "", 'comment_created': datetime.datetime(2020, 7, 23, 5, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 459228315, 'comment_body': 'Please add tests for this file', 'comment_created': datetime.datetime(2020, 7, 23, 5, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 459793098, 'comment_body': 'Please ensure all new classes & public API methods have KDocs.', 'comment_created': datetime.datetime(2020, 7, 24, 0, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459793288, 'comment_body': ""Why not always log this from within our ``Logger``class? I don't think callsites should be deciding whether to care about caching/uploading exception logs. Instead, callsites just care about noting to developers that something went wrong, and after that it's up to the logging system to decide what to do with the exception."", 'comment_created': datetime.datetime(2020, 7, 24, 0, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459793589, 'comment_body': ""Is this timestamp's unit millis? Prefer being specific in the name."", 'comment_created': datetime.datetime(2020, 7, 24, 0, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459793802, 'comment_body': ""Prefer: ``stack_trace_element`` to be consistent, and produce slightly more readable generated code (e.g. we'll now have ``addStackTraceElement`` rather than ``addStacktrace``)."", 'comment_created': datetime.datetime(2020, 7, 24, 0, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459793878, 'comment_body': 'Should this be ``EXCEPTION_TYPE_UNSPECIFIED`` per Buf?', 'comment_created': datetime.datetime(2020, 7, 24, 0, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459793967, 'comment_body': 'Please add tests for this class.', 'comment_created': datetime.datetime(2020, 7, 24, 0, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459794188, 'comment_body': 'It seems to be a conversion function, perhaps: ``convertExceptionToExceptionLog``, ``createExceptionLog``, or ``createLogFromException``.', 'comment_created': datetime.datetime(2020, 7, 24, 0, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459795219, 'comment_body': ""Why not recurse a call to the same function, instead? E.g.\r\n\r\n```kotlin\r\nexception.cause?.let {\r\n  exceptionLogBuilder.cause = exceptionToExceptionLog(it, timestamp)\r\n}\r\n```\r\n\r\nIt seems like that would reduce a lot of the construction that's needed here."", 'comment_created': datetime.datetime(2020, 7, 24, 0, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459796352, 'comment_body': ""This might cause a crash/fail loop, so we probably shouldn't try this and instead fail in the console logger."", 'comment_created': datetime.datetime(2020, 7, 24, 0, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459797068, 'comment_body': 'You might be able to simplify the stack trace construction slightly:\r\n\r\n```kotlin\r\nexceptionLogBuilder.addAllStackTraceElement(exception.stackTrace.map(this::convertStackTraceElementToLog))\r\n\r\n...\r\n\r\nfun convertStackTraceElementToLog(stackTraceElement: StackTraceElement): ExceptionLog.StackTraceElement {\r\n  return ExceptionLog.StackTraceElement.newBuilder()\r\n      .setFileName(stackTraceElement.fileName)\r\n      .setMethodName(stackTraceElement.methodName)\r\n      .setLineNumber(stackTraceElement.lineNumber)\r\n      .setDeclaringClass(stackTraceElement.className)\r\n      .build()\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 7, 24, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459889218, 'comment_body': 'I think this will be done during restructuring as the `oppiaLogger` will become the call site for the developers. Please correct me if I am wrong @vinitamurthi. ', 'comment_created': datetime.datetime(2020, 7, 24, 7, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432607, 'comment_body': 'Yes, it helped. Thanks :) ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432633, 'comment_body': 'Yep, done. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432641, 'comment_body': 'Added, PTAL. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432738, 'comment_body': 'Not sure. @vinitamurthi thoughts ? ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432756, 'comment_body': 'Yes, done. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432758, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432777, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432795, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432804, 'comment_body': 'Removed. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432827, 'comment_body': 'Removed. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432863, 'comment_body': 'Changed to `convertExceptionToExceptionLog`. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432889, 'comment_body': 'Modified, PTAL :) ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460474912, 'comment_body': 'Can we import ExceptionLog.ExceptionType and directly use ExceptionType.NON_FATAL/FATAL', 'comment_created': datetime.datetime(2020, 7, 26, 4, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 460474959, 'comment_body': 'Can we put this into a constant and use it in the file?', 'comment_created': datetime.datetime(2020, 7, 26, 4, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 460475059, 'comment_body': 'Yep It should be EXCEPTION_TYPE_UNSPECIFIED', 'comment_created': datetime.datetime(2020, 7, 26, 4, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 460475118, 'comment_body': 'Resolving this', 'comment_created': datetime.datetime(2020, 7, 26, 4, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 460475165, 'comment_body': 'Yeah we will do this in the OppiaLogger', 'comment_created': datetime.datetime(2020, 7, 26, 4, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 460559935, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 26, 18, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460559942, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 26, 18, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460560029, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 26, 18, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 461281966, 'comment_body': ""I'd expect the line break to happen at the ``(`` first except when chaining multiple method calls together.\r\n\r\nFeel free to resolve this comment after addressing it."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461282178, 'comment_body': ""Prefer to make this ``private`` if it isn't being accessed outside of this class."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461282310, 'comment_body': ""Doesn't appear done--this still looks like ``ExceptionLog.ExceptionType.NON_FATAL``."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461282430, 'comment_body': ""How is the timestamp used? That detail seems missing in this & the next method's KDoc. Please update."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461282624, 'comment_body': 'Nit: ``from a [throwable].``', 'comment_created': datetime.datetime(2020, 7, 28, 2, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461283205, 'comment_body': ""Prefer ``private`` if it's not accessed outside of this class. That's generally true for all members & classes."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461283431, 'comment_body': 'Nit: ``testController_logException_nonFatal_logsToRemoteService``\r\n\r\nThe subsequent words in the test name should consistently follow lowerCamelCase. Ditto for all other test names in this class.', 'comment_created': datetime.datetime(2020, 7, 28, 2, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461283813, 'comment_body': 'Out of curiosity, will ``getExceptionLogs`` be used by anything other than tests?', 'comment_created': datetime.datetime(2020, 7, 28, 2, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461284098, 'comment_body': 'Nit: ``3 fatal and 1 non-fatal exceptions were logged.``', 'comment_created': datetime.datetime(2020, 7, 28, 2, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461284204, 'comment_body': ""Here & everywhere else in this PR: please refer to 'fatal' and 'non-fatal' as standard words rather than specifically capitalizing them. We don't do this for any other terms in the codebase, and it's throwing me a bit off."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461284428, 'comment_body': ""Also regarding the actual eviction strategy, shouldn't we prune non-fatal logs in favor of keeping fatal ones? Those seem more important to log to me."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461284587, 'comment_body': 'Please save these & other timestamps to distinct constants to help provide quick cross-reference checking for methods like this.', 'comment_created': datetime.datetime(2020, 7, 28, 2, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461284661, 'comment_body': 'Can we also check the cause messages against TEST1/2/3/4 to verify the correct ones were logged?', 'comment_created': datetime.datetime(2020, 7, 28, 2, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461284936, 'comment_body': ""``checkSizeOfCache``is not an expected outcome. Might this be: cacheSizeDoesNotExceedLimit or similar?\r\n\r\nAlso, isn't this tested in the test above? I suggest keeping this test & removing the size check in the test above to keep the different behaviors clearly distinct between the two tests."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461285195, 'comment_body': 'Here & below: what is the actual desired outcome? ``checkManagement`` and ``checkOrderInCache`` describe what the test is doing, not what we expect it to verify. Please update both test names.', 'comment_created': datetime.datetime(2020, 7, 28, 2, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461285674, 'comment_body': ""This & below: these are a bit too much logic for a test. Could we maybe have a few assertion helpers that verify a few aspects of the exception rather than trying to do an exact comparison between the two? Or, factor out the prod conversion code into a helper that both the controller & its test can use, and have a few dedicated tests for that helper utility to verify it's correct.\r\n\r\nThe latter is probably the cleaner solution, but it's up to you which approach you want to go with."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461285831, 'comment_body': 'What about a test verifying that network reconnection triggers an upload of all past cached exceptions?', 'comment_created': datetime.datetime(2020, 7, 28, 2, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 462451079, 'comment_body': 'All tests related to the uploading of event/exception reports will be written when we implement the final upload functionality via Work Manager. So, I will add all the tests related to upload in that PR. ', 'comment_created': datetime.datetime(2020, 7, 29, 17, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462484928, 'comment_body': 'Yes, when we implement the uploading functionality. ', 'comment_created': datetime.datetime(2020, 7, 29, 17, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462489794, 'comment_body': ""Yes, that is what's happening. We prune non-fatal exceptions in favour of the fatal ones. "", 'comment_created': datetime.datetime(2020, 7, 29, 18, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462505168, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 29, 18, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462505263, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462505322, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 29, 18, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462505940, 'comment_body': ""I kept them as numbers because it would've been easier to cross-verify pruning. Changed to constants now. "", 'comment_created': datetime.datetime(2020, 7, 29, 18, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462506029, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462506093, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462507629, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462507708, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 29, 18, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462507794, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462507862, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462507922, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462507962, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462508241, 'comment_body': 'Oh my bad, I did it in the test file. Done now. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462508558, 'comment_body': 'Working on it. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463072593, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 30, 15, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463378869, 'comment_body': 'Hmm I am not able to see this change', 'comment_created': datetime.datetime(2020, 7, 31, 2, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463378924, 'comment_body': 'I think you have done it below but not here', 'comment_created': datetime.datetime(2020, 7, 31, 2, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463379337, 'comment_body': 'Maybe ExceptionParsingUtil or something on those lines ? ExceptionsHelper sounds a bit vague (But I am bad with names !)', 'comment_created': datetime.datetime(2020, 7, 31, 2, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463379707, 'comment_body': 'This is a bit obscure. Maybe something like the following would be clearer:\r\n\r\n```kotlin\r\n/**\r\n * Logs a non-fatal [exception]. Note that exceptions may not actually be logged depending on the network status of the device. Older exceptions will be pruned to make room for newer exceptions.\r\n *\r\n * @param timestamp the time, in milliseconds, when the exception occurred\r\n *\r\n```\r\n\r\nDitto elsewhere, and the suggestion above may require line wrapping.', 'comment_created': datetime.datetime(2020, 7, 31, 2, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463379770, 'comment_body': 'Missed this the first time, but all times should always be qualified based on their time unit (e.g. ``timestampMillis``).', 'comment_created': datetime.datetime(2020, 7, 31, 2, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463379858, 'comment_body': 'Ditto here & everywhere else (please qualify times based on their units).', 'comment_created': datetime.datetime(2020, 7, 31, 2, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463379977, 'comment_body': 'Makes sense, but will that actually be using LiveData? How will uploading functionality utilize this function?', 'comment_created': datetime.datetime(2020, 7, 31, 2, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463380144, 'comment_body': '```suggestion\r\n/** Helper class for conversion of [ExceptionLog] object to an [Exception]. */\r\n```', 'comment_created': datetime.datetime(2020, 7, 31, 2, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463380388, 'comment_body': 'I think you can reduce this into a single line like this:\r\n`val exceptionMessage = if (exceptionLog.message.isEmpty()) null else exceptionLog.message`', 'comment_created': datetime.datetime(2020, 7, 31, 2, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463380634, 'comment_body': 'Can we extract this into a separate function and call it here like \r\n`val exceptionCause: Throwable? = extractExceptionCause(exception)` to make it more readable?', 'comment_created': datetime.datetime(2020, 7, 31, 3, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463380933, 'comment_body': 'Can you add tests for the different if conditions you have written above? \r\ne.g.\r\n* When cause is empty and stack trace is 0\r\n* When cause is empty and stark trace is > 0\r\n* When exception message is null', 'comment_created': datetime.datetime(2020, 7, 31, 3, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463387365, 'comment_body': '```suggestion\r\n    val exceptionCause: Throwable? =\r\n      if (exceptionLog.hasCause()) convertExceptionLogToException(exceptionLog.cause)\r\n      else null\r\n```\r\n\r\nThis seems simplifiable.', 'comment_created': datetime.datetime(2020, 7, 31, 3, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463387554, 'comment_body': 'Could we create an extension function on ``ExceptionLog``, instead? E.g. ``ExceptionLog.toException``? That might be cleaner than having a generic helper/utility for random exception things.', 'comment_created': datetime.datetime(2020, 7, 31, 3, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463541958, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463542234, 'comment_body': 'File removed.', 'comment_created': datetime.datetime(2020, 7, 31, 10, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463542393, 'comment_body': 'It worked but file removed due to addition of extension function in the controller itself. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463542883, 'comment_body': ""Yes, it would've been more readable but Ben's suggestion below simplified all of this. So modified accordingly. "", 'comment_created': datetime.datetime(2020, 7, 31, 10, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463542971, 'comment_body': 'File removed. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463543044, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463543079, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463543158, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463543226, 'comment_body': 'File removed. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463543822, 'comment_body': 'Yes, done. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463543988, 'comment_body': ""Yes, it's a lot cleaner now. Thanks ! "", 'comment_created': datetime.datetime(2020, 7, 31, 10, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463549936, 'comment_body': ""So my basic motive of using this method was to get the logs without going into threading. Data Providers does that but it's usage around the codebase for retrieval of cache was typically using LiveData only. You're right that the work manager (uploading functionality) won't be using any of the LiveData things. It would simply like to read from the store and upload. "", 'comment_created': datetime.datetime(2020, 7, 31, 11, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463859486, 'comment_body': 'Every place that requires background or async processing goes through DataProviders. We convert DataProviders to LiveData only for when we want to observe the DataProvider from a UI. If this needs to be a DataProvider, instead, you can still test it by adding listeners to it (see DataProvidersTest fro an example).', 'comment_created': datetime.datetime(2020, 7, 31, 21, 42, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463898969, 'comment_body': 'Thanks for additional context. ', 'comment_created': datetime.datetime(2020, 8, 1, 0, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463899174, 'comment_body': 'The test suggests otherwise though. Isn’t it showing that an older fatal exception is being pruned in favor of a newer non fatal exception?', 'comment_created': datetime.datetime(2020, 8, 1, 0, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 464945301, 'comment_body': ""No, the order of logging is fatal->non-fatal->fatal->fatal. So it prunes the non-fatal exception when it adds the third log (which is fatal). I've updated the comment to make it clearer. "", 'comment_created': datetime.datetime(2020, 8, 4, 10, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 465465832, 'comment_body': 'Is it worth making this an extension function as well?', 'comment_created': datetime.datetime(2020, 8, 5, 4, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 465637077, 'comment_body': ""We'd still have to pass two arguments but yes it looks better. Done. "", 'comment_created': datetime.datetime(2020, 8, 5, 10, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 468048189, 'comment_body': 'PTAL', 'comment_created': datetime.datetime(2020, 8, 10, 17, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 468315405, 'comment_body': 'Please don’t do this. You should include the test dispatcher module, instead. ', 'comment_created': datetime.datetime(2020, 8, 11, 4, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 468316151, 'comment_body': 'Sorry, I think I’m confused. The test is verifying that one of the pending exceptions is non-fatal—how does that correspond to the exception being pruned? How exactly is this test verifying the pruning strategy?', 'comment_created': datetime.datetime(2020, 8, 11, 4, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 468319467, 'comment_body': 'The test is verifying that the exception type of any of the stored exception logs is not equal to non-fatal. It verifies the pruning strategy as - \r\n- Non-fatal exceptions are pruned in favour of the fatal ones. \r\n- The least recent exception gets pruned in favour of the most recent one. ', 'comment_created': datetime.datetime(2020, 8, 11, 4, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 468319554, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 11, 4, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 468323471, 'comment_body': ""The test is verifying that both the exceptions that were retained are not non-fatal (see the isNotEqualTo checks) . If I understand correctly, there were 4 total exceptions - 3 fatal, and one non-fatal.\r\nWhat this test is doing is verifying that the non-fatal exception was pruned and the least recent fatal exception was pruned. Correct me if I'm wrong @Sarthak2601 ;"", 'comment_created': datetime.datetime(2020, 8, 11, 4, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 468342653, 'comment_body': 'Ah, I see where my confusion was. I actually kept reading ``isEqualTo``--thanks for the additional clarification!', 'comment_created': datetime.datetime(2020, 8, 11, 5, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}]","[{'commit_sha': '3a5134ab284fb96a543b8b1a60bb068800a1c373', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1ff8d3b341caacee23dc5d47573489198aa9e7e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df0d2562578567c26eb12531e3a353b80c8d34eb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2059c90cd28491fc63574996225c2b60a7c6fe3e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f01174edbb69f4a823e00a345c06adff90a6481', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b8174dad16279e8ce8d9b8082543da013ef9601', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a745d5c642521e4d0da54f0b82dbf48867f84b5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4fc38184816624c6046d2666d7562df147bb61c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb7424e0bbd77b10deab83274da5c880a46ecd58', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48de325bccfb5a2a3a71ffc09814cbbab35114ba', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6b9d7352d6706d8b0ae982c172c7291260b47a6', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8c09da88b825e2ee00f01d375c7fa980b9cf475', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06c60a5b374a6945880237dec953affef118a86c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36237d888c4fc7e6d53c2039043cdfc9c8842036', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8af1f11114a97166fd30d99cbfbf1c5cc5f92ca8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c284d594c01830799eeb6a4b459f727564d439e6', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5698f8e30df5f3ea0dd2f40965b815b472bcea5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34f1b9f3285e4a5060f5e57b6fd17277a042887a', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e1a7585192a197565551f5acdbaffcf98e18b63', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '509d306ec462dc674c7422fa9667e2f9ad0252a3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99d0a234bab06359f47e989ba8a3a7e237207484', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07119de17b5aa2692dcb344d788e998645da4823', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3ee04f5a728cece573e8107c8f79c554fbe1c29', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ce4ebf1be5ae757927b7251981c14546cc8dd05', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd1371d246bec67bc6d2975fef731d5a115b9281', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b675a154c8f80c2dcf4dd5fa64a1fe11b6c13f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '713546f73ff570ea97ede3e07fa59a25d937fcb4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5b1b5afca1dc118f9f2b47df257dca8af34afeb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9646b51ea0a7d6e9926622d17fe68d1d9e750129', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd31adcccff2ea70efd14fb8896b02cf6f9cd0be3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50ade6b36a27517f91322e97a3968b8f509f4019', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4cab1386ca32638f42ab064ccdbceec9f595038', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b51f78787a5fb1f79864773a33607db036dd0636', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc74a1c40292b5486d01c58474a10483d02aad6d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60
455047598,Fix #1104: Offline Exception Logging,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixes #1104 
Fixes part of #1105 
- Adds the proto structure for exception logs 
- Adds exception controller for storing/uploading of exception logs on the basis of network connectivity. 

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1500,https://api.github.com/repos/oppia/oppia-android/pulls/1500,https://github.com/oppia/oppia-android/pull/1500,closed,751,67,41,34,3,109,0,1,[],2020-07-22 11:06:48+00:00,2020-08-11 10:16:42+00:00,1724994.0,"19 days, 23:09:54","[{'comment_id': 459227216, 'comment_body': 'Add a KDoc for this function', 'comment_created': datetime.datetime(2020, 7, 23, 5, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 459227355, 'comment_body': ""Let's rename this a bit. Maybe parseExceptionToExceptionLog or something?"", 'comment_created': datetime.datetime(2020, 7, 23, 5, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 459227449, 'comment_body': ""As discussed, do we need this right now? If not, let's remove it. "", 'comment_created': datetime.datetime(2020, 7, 23, 5, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 459227831, 'comment_body': ""I'm wondering if it makes sense to log an exception here if the problem lies in logging exceptions "", 'comment_created': datetime.datetime(2020, 7, 23, 5, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 459228315, 'comment_body': 'Please add tests for this file', 'comment_created': datetime.datetime(2020, 7, 23, 5, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 459793098, 'comment_body': 'Please ensure all new classes & public API methods have KDocs.', 'comment_created': datetime.datetime(2020, 7, 24, 0, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459793288, 'comment_body': ""Why not always log this from within our ``Logger``class? I don't think callsites should be deciding whether to care about caching/uploading exception logs. Instead, callsites just care about noting to developers that something went wrong, and after that it's up to the logging system to decide what to do with the exception."", 'comment_created': datetime.datetime(2020, 7, 24, 0, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459793589, 'comment_body': ""Is this timestamp's unit millis? Prefer being specific in the name."", 'comment_created': datetime.datetime(2020, 7, 24, 0, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459793802, 'comment_body': ""Prefer: ``stack_trace_element`` to be consistent, and produce slightly more readable generated code (e.g. we'll now have ``addStackTraceElement`` rather than ``addStacktrace``)."", 'comment_created': datetime.datetime(2020, 7, 24, 0, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459793878, 'comment_body': 'Should this be ``EXCEPTION_TYPE_UNSPECIFIED`` per Buf?', 'comment_created': datetime.datetime(2020, 7, 24, 0, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459793967, 'comment_body': 'Please add tests for this class.', 'comment_created': datetime.datetime(2020, 7, 24, 0, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459794188, 'comment_body': 'It seems to be a conversion function, perhaps: ``convertExceptionToExceptionLog``, ``createExceptionLog``, or ``createLogFromException``.', 'comment_created': datetime.datetime(2020, 7, 24, 0, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459795219, 'comment_body': ""Why not recurse a call to the same function, instead? E.g.\r\n\r\n```kotlin\r\nexception.cause?.let {\r\n  exceptionLogBuilder.cause = exceptionToExceptionLog(it, timestamp)\r\n}\r\n```\r\n\r\nIt seems like that would reduce a lot of the construction that's needed here."", 'comment_created': datetime.datetime(2020, 7, 24, 0, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459796352, 'comment_body': ""This might cause a crash/fail loop, so we probably shouldn't try this and instead fail in the console logger."", 'comment_created': datetime.datetime(2020, 7, 24, 0, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459797068, 'comment_body': 'You might be able to simplify the stack trace construction slightly:\r\n\r\n```kotlin\r\nexceptionLogBuilder.addAllStackTraceElement(exception.stackTrace.map(this::convertStackTraceElementToLog))\r\n\r\n...\r\n\r\nfun convertStackTraceElementToLog(stackTraceElement: StackTraceElement): ExceptionLog.StackTraceElement {\r\n  return ExceptionLog.StackTraceElement.newBuilder()\r\n      .setFileName(stackTraceElement.fileName)\r\n      .setMethodName(stackTraceElement.methodName)\r\n      .setLineNumber(stackTraceElement.lineNumber)\r\n      .setDeclaringClass(stackTraceElement.className)\r\n      .build()\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 7, 24, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 459889218, 'comment_body': 'I think this will be done during restructuring as the `oppiaLogger` will become the call site for the developers. Please correct me if I am wrong @vinitamurthi. ', 'comment_created': datetime.datetime(2020, 7, 24, 7, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432607, 'comment_body': 'Yes, it helped. Thanks :) ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432633, 'comment_body': 'Yep, done. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432641, 'comment_body': 'Added, PTAL. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432738, 'comment_body': 'Not sure. @vinitamurthi thoughts ? ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432756, 'comment_body': 'Yes, done. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432758, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432777, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432795, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432804, 'comment_body': 'Removed. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432827, 'comment_body': 'Removed. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432863, 'comment_body': 'Changed to `convertExceptionToExceptionLog`. ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460432889, 'comment_body': 'Modified, PTAL :) ', 'comment_created': datetime.datetime(2020, 7, 25, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460474912, 'comment_body': 'Can we import ExceptionLog.ExceptionType and directly use ExceptionType.NON_FATAL/FATAL', 'comment_created': datetime.datetime(2020, 7, 26, 4, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 460474959, 'comment_body': 'Can we put this into a constant and use it in the file?', 'comment_created': datetime.datetime(2020, 7, 26, 4, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 460475059, 'comment_body': 'Yep It should be EXCEPTION_TYPE_UNSPECIFIED', 'comment_created': datetime.datetime(2020, 7, 26, 4, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 460475118, 'comment_body': 'Resolving this', 'comment_created': datetime.datetime(2020, 7, 26, 4, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 460475165, 'comment_body': 'Yeah we will do this in the OppiaLogger', 'comment_created': datetime.datetime(2020, 7, 26, 4, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 460559935, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 26, 18, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460559942, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 26, 18, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 460560029, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 26, 18, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 461281966, 'comment_body': ""I'd expect the line break to happen at the ``(`` first except when chaining multiple method calls together.\r\n\r\nFeel free to resolve this comment after addressing it."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461282178, 'comment_body': ""Prefer to make this ``private`` if it isn't being accessed outside of this class."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461282310, 'comment_body': ""Doesn't appear done--this still looks like ``ExceptionLog.ExceptionType.NON_FATAL``."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461282430, 'comment_body': ""How is the timestamp used? That detail seems missing in this & the next method's KDoc. Please update."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461282624, 'comment_body': 'Nit: ``from a [throwable].``', 'comment_created': datetime.datetime(2020, 7, 28, 2, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461283205, 'comment_body': ""Prefer ``private`` if it's not accessed outside of this class. That's generally true for all members & classes."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461283431, 'comment_body': 'Nit: ``testController_logException_nonFatal_logsToRemoteService``\r\n\r\nThe subsequent words in the test name should consistently follow lowerCamelCase. Ditto for all other test names in this class.', 'comment_created': datetime.datetime(2020, 7, 28, 2, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461283813, 'comment_body': 'Out of curiosity, will ``getExceptionLogs`` be used by anything other than tests?', 'comment_created': datetime.datetime(2020, 7, 28, 2, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461284098, 'comment_body': 'Nit: ``3 fatal and 1 non-fatal exceptions were logged.``', 'comment_created': datetime.datetime(2020, 7, 28, 2, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461284204, 'comment_body': ""Here & everywhere else in this PR: please refer to 'fatal' and 'non-fatal' as standard words rather than specifically capitalizing them. We don't do this for any other terms in the codebase, and it's throwing me a bit off."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461284428, 'comment_body': ""Also regarding the actual eviction strategy, shouldn't we prune non-fatal logs in favor of keeping fatal ones? Those seem more important to log to me."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461284587, 'comment_body': 'Please save these & other timestamps to distinct constants to help provide quick cross-reference checking for methods like this.', 'comment_created': datetime.datetime(2020, 7, 28, 2, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461284661, 'comment_body': 'Can we also check the cause messages against TEST1/2/3/4 to verify the correct ones were logged?', 'comment_created': datetime.datetime(2020, 7, 28, 2, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461284936, 'comment_body': ""``checkSizeOfCache``is not an expected outcome. Might this be: cacheSizeDoesNotExceedLimit or similar?\r\n\r\nAlso, isn't this tested in the test above? I suggest keeping this test & removing the size check in the test above to keep the different behaviors clearly distinct between the two tests."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461285195, 'comment_body': 'Here & below: what is the actual desired outcome? ``checkManagement`` and ``checkOrderInCache`` describe what the test is doing, not what we expect it to verify. Please update both test names.', 'comment_created': datetime.datetime(2020, 7, 28, 2, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461285674, 'comment_body': ""This & below: these are a bit too much logic for a test. Could we maybe have a few assertion helpers that verify a few aspects of the exception rather than trying to do an exact comparison between the two? Or, factor out the prod conversion code into a helper that both the controller & its test can use, and have a few dedicated tests for that helper utility to verify it's correct.\r\n\r\nThe latter is probably the cleaner solution, but it's up to you which approach you want to go with."", 'comment_created': datetime.datetime(2020, 7, 28, 2, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 461285831, 'comment_body': 'What about a test verifying that network reconnection triggers an upload of all past cached exceptions?', 'comment_created': datetime.datetime(2020, 7, 28, 2, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 462451079, 'comment_body': 'All tests related to the uploading of event/exception reports will be written when we implement the final upload functionality via Work Manager. So, I will add all the tests related to upload in that PR. ', 'comment_created': datetime.datetime(2020, 7, 29, 17, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462484928, 'comment_body': 'Yes, when we implement the uploading functionality. ', 'comment_created': datetime.datetime(2020, 7, 29, 17, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462489794, 'comment_body': ""Yes, that is what's happening. We prune non-fatal exceptions in favour of the fatal ones. "", 'comment_created': datetime.datetime(2020, 7, 29, 18, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462505168, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 29, 18, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462505263, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462505322, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 29, 18, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462505940, 'comment_body': ""I kept them as numbers because it would've been easier to cross-verify pruning. Changed to constants now. "", 'comment_created': datetime.datetime(2020, 7, 29, 18, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462506029, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462506093, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462507629, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462507708, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 29, 18, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462507794, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462507862, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462507922, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462507962, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462508241, 'comment_body': 'Oh my bad, I did it in the test file. Done now. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 462508558, 'comment_body': 'Working on it. ', 'comment_created': datetime.datetime(2020, 7, 29, 18, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463072593, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 30, 15, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463378869, 'comment_body': 'Hmm I am not able to see this change', 'comment_created': datetime.datetime(2020, 7, 31, 2, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463378924, 'comment_body': 'I think you have done it below but not here', 'comment_created': datetime.datetime(2020, 7, 31, 2, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463379337, 'comment_body': 'Maybe ExceptionParsingUtil or something on those lines ? ExceptionsHelper sounds a bit vague (But I am bad with names !)', 'comment_created': datetime.datetime(2020, 7, 31, 2, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463379707, 'comment_body': 'This is a bit obscure. Maybe something like the following would be clearer:\r\n\r\n```kotlin\r\n/**\r\n * Logs a non-fatal [exception]. Note that exceptions may not actually be logged depending on the network status of the device. Older exceptions will be pruned to make room for newer exceptions.\r\n *\r\n * @param timestamp the time, in milliseconds, when the exception occurred\r\n *\r\n```\r\n\r\nDitto elsewhere, and the suggestion above may require line wrapping.', 'comment_created': datetime.datetime(2020, 7, 31, 2, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463379770, 'comment_body': 'Missed this the first time, but all times should always be qualified based on their time unit (e.g. ``timestampMillis``).', 'comment_created': datetime.datetime(2020, 7, 31, 2, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463379858, 'comment_body': 'Ditto here & everywhere else (please qualify times based on their units).', 'comment_created': datetime.datetime(2020, 7, 31, 2, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463379977, 'comment_body': 'Makes sense, but will that actually be using LiveData? How will uploading functionality utilize this function?', 'comment_created': datetime.datetime(2020, 7, 31, 2, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463380144, 'comment_body': '```suggestion\r\n/** Helper class for conversion of [ExceptionLog] object to an [Exception]. */\r\n```', 'comment_created': datetime.datetime(2020, 7, 31, 2, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463380388, 'comment_body': 'I think you can reduce this into a single line like this:\r\n`val exceptionMessage = if (exceptionLog.message.isEmpty()) null else exceptionLog.message`', 'comment_created': datetime.datetime(2020, 7, 31, 2, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463380634, 'comment_body': 'Can we extract this into a separate function and call it here like \r\n`val exceptionCause: Throwable? = extractExceptionCause(exception)` to make it more readable?', 'comment_created': datetime.datetime(2020, 7, 31, 3, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463380933, 'comment_body': 'Can you add tests for the different if conditions you have written above? \r\ne.g.\r\n* When cause is empty and stack trace is 0\r\n* When cause is empty and stark trace is > 0\r\n* When exception message is null', 'comment_created': datetime.datetime(2020, 7, 31, 3, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463387365, 'comment_body': '```suggestion\r\n    val exceptionCause: Throwable? =\r\n      if (exceptionLog.hasCause()) convertExceptionLogToException(exceptionLog.cause)\r\n      else null\r\n```\r\n\r\nThis seems simplifiable.', 'comment_created': datetime.datetime(2020, 7, 31, 3, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463387554, 'comment_body': 'Could we create an extension function on ``ExceptionLog``, instead? E.g. ``ExceptionLog.toException``? That might be cleaner than having a generic helper/utility for random exception things.', 'comment_created': datetime.datetime(2020, 7, 31, 3, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463541958, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463542234, 'comment_body': 'File removed.', 'comment_created': datetime.datetime(2020, 7, 31, 10, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463542393, 'comment_body': 'It worked but file removed due to addition of extension function in the controller itself. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463542883, 'comment_body': ""Yes, it would've been more readable but Ben's suggestion below simplified all of this. So modified accordingly. "", 'comment_created': datetime.datetime(2020, 7, 31, 10, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463542971, 'comment_body': 'File removed. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463543044, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463543079, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463543158, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463543226, 'comment_body': 'File removed. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463543822, 'comment_body': 'Yes, done. ', 'comment_created': datetime.datetime(2020, 7, 31, 10, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463543988, 'comment_body': ""Yes, it's a lot cleaner now. Thanks ! "", 'comment_created': datetime.datetime(2020, 7, 31, 10, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463549936, 'comment_body': ""So my basic motive of using this method was to get the logs without going into threading. Data Providers does that but it's usage around the codebase for retrieval of cache was typically using LiveData only. You're right that the work manager (uploading functionality) won't be using any of the LiveData things. It would simply like to read from the store and upload. "", 'comment_created': datetime.datetime(2020, 7, 31, 11, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 463859486, 'comment_body': 'Every place that requires background or async processing goes through DataProviders. We convert DataProviders to LiveData only for when we want to observe the DataProvider from a UI. If this needs to be a DataProvider, instead, you can still test it by adding listeners to it (see DataProvidersTest fro an example).', 'comment_created': datetime.datetime(2020, 7, 31, 21, 42, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463898969, 'comment_body': 'Thanks for additional context. ', 'comment_created': datetime.datetime(2020, 8, 1, 0, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 463899174, 'comment_body': 'The test suggests otherwise though. Isn’t it showing that an older fatal exception is being pruned in favor of a newer non fatal exception?', 'comment_created': datetime.datetime(2020, 8, 1, 0, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 464945301, 'comment_body': ""No, the order of logging is fatal->non-fatal->fatal->fatal. So it prunes the non-fatal exception when it adds the third log (which is fatal). I've updated the comment to make it clearer. "", 'comment_created': datetime.datetime(2020, 8, 4, 10, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 465465832, 'comment_body': 'Is it worth making this an extension function as well?', 'comment_created': datetime.datetime(2020, 8, 5, 4, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 465637077, 'comment_body': ""We'd still have to pass two arguments but yes it looks better. Done. "", 'comment_created': datetime.datetime(2020, 8, 5, 10, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 468048189, 'comment_body': 'PTAL', 'comment_created': datetime.datetime(2020, 8, 10, 17, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 468315405, 'comment_body': 'Please don’t do this. You should include the test dispatcher module, instead. ', 'comment_created': datetime.datetime(2020, 8, 11, 4, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 468316151, 'comment_body': 'Sorry, I think I’m confused. The test is verifying that one of the pending exceptions is non-fatal—how does that correspond to the exception being pruned? How exactly is this test verifying the pruning strategy?', 'comment_created': datetime.datetime(2020, 8, 11, 4, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 468319467, 'comment_body': 'The test is verifying that the exception type of any of the stored exception logs is not equal to non-fatal. It verifies the pruning strategy as - \r\n- Non-fatal exceptions are pruned in favour of the fatal ones. \r\n- The least recent exception gets pruned in favour of the most recent one. ', 'comment_created': datetime.datetime(2020, 8, 11, 4, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 468319554, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 11, 4, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 468323471, 'comment_body': ""The test is verifying that both the exceptions that were retained are not non-fatal (see the isNotEqualTo checks) . If I understand correctly, there were 4 total exceptions - 3 fatal, and one non-fatal.\r\nWhat this test is doing is verifying that the non-fatal exception was pruned and the least recent fatal exception was pruned. Correct me if I'm wrong @Sarthak2601 ;"", 'comment_created': datetime.datetime(2020, 8, 11, 4, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 468342653, 'comment_body': 'Ah, I see where my confusion was. I actually kept reading ``isEqualTo``--thanks for the additional clarification!', 'comment_created': datetime.datetime(2020, 8, 11, 5, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}]","[{'commit_sha': '3a5134ab284fb96a543b8b1a60bb068800a1c373', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1ff8d3b341caacee23dc5d47573489198aa9e7e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df0d2562578567c26eb12531e3a353b80c8d34eb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2059c90cd28491fc63574996225c2b60a7c6fe3e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f01174edbb69f4a823e00a345c06adff90a6481', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b8174dad16279e8ce8d9b8082543da013ef9601', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a745d5c642521e4d0da54f0b82dbf48867f84b5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4fc38184816624c6046d2666d7562df147bb61c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb7424e0bbd77b10deab83274da5c880a46ecd58', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48de325bccfb5a2a3a71ffc09814cbbab35114ba', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6b9d7352d6706d8b0ae982c172c7291260b47a6', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8c09da88b825e2ee00f01d375c7fa980b9cf475', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06c60a5b374a6945880237dec953affef118a86c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36237d888c4fc7e6d53c2039043cdfc9c8842036', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8af1f11114a97166fd30d99cbfbf1c5cc5f92ca8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c284d594c01830799eeb6a4b459f727564d439e6', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5698f8e30df5f3ea0dd2f40965b815b472bcea5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34f1b9f3285e4a5060f5e57b6fd17277a042887a', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e1a7585192a197565551f5acdbaffcf98e18b63', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '509d306ec462dc674c7422fa9667e2f9ad0252a3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99d0a234bab06359f47e989ba8a3a7e237207484', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07119de17b5aa2692dcb344d788e998645da4823', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3ee04f5a728cece573e8107c8f79c554fbe1c29', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ce4ebf1be5ae757927b7251981c14546cc8dd05', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd1371d246bec67bc6d2975fef731d5a115b9281', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b675a154c8f80c2dcf4dd5fa64a1fe11b6c13f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '713546f73ff570ea97ede3e07fa59a25d937fcb4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5b1b5afca1dc118f9f2b47df257dca8af34afeb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9646b51ea0a7d6e9926622d17fe68d1d9e750129', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd31adcccff2ea70efd14fb8896b02cf6f9cd0be3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50ade6b36a27517f91322e97a3968b8f509f4019', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4cab1386ca32638f42ab064ccdbceec9f595038', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b51f78787a5fb1f79864773a33607db036dd0636', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc74a1c40292b5486d01c58474a10483d02aad6d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60
459359488,Fix #1105: Addition for OppiaUncaughtExceptionHandler,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fix #1105 
- Addition of an uncaught exception handler for handling the fatal exceptions. 

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1546,https://api.github.com/repos/oppia/oppia-android/pulls/1546,https://github.com/oppia/oppia-android/pull/1546,closed,290,12,18,63,3,51,0,1,[],2020-07-30 16:18:31+00:00,2020-08-26 07:53:31+00:00,2302500.0,"26 days, 15:35:00","[{'comment_id': 463381254, 'comment_body': 'Can we not inject OppiaUncaughtExceptionHandler directly instead of injecting its dependencies and creating it below?', 'comment_created': datetime.datetime(2020, 7, 31, 3, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463381351, 'comment_body': 'Log this exception with the console log', 'comment_created': datetime.datetime(2020, 7, 31, 3, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463381511, 'comment_body': 'Can we add tests for this class?', 'comment_created': datetime.datetime(2020, 7, 31, 3, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463381654, 'comment_body': 'Have you verified that this properly redirects the exception to the default handler (i.e. crashlytics in our case?)', 'comment_created': datetime.datetime(2020, 7, 31, 3, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 463381801, 'comment_body': 'Dont we need to throw an exception here too? Since the caller is catching it? ', 'comment_created': datetime.datetime(2020, 7, 31, 3, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 471018095, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 15, 17, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 471018129, 'comment_body': ""Would printing stack trace work ? Otherwise we'd have to inject console logger as well. "", 'comment_created': datetime.datetime(2020, 8, 15, 17, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 471018138, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 15, 17, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 471018218, 'comment_body': ""No, I don't think so. This function is called whenever the exception handler is invoked so I think the throwable will go forward. But yes, please correct me if I am wrong about this. "", 'comment_created': datetime.datetime(2020, 8, 15, 17, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 471018243, 'comment_body': 'Yes, verified. It redirects to crashlytics. ', 'comment_created': datetime.datetime(2020, 8, 15, 17, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 471885594, 'comment_body': 'testHandler_throwException_withNetwork_verifyLogToRemoteService', 'comment_created': datetime.datetime(2020, 8, 18, 3, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 471885995, 'comment_body': 'Can we do the try {} catch logic in the OppiaApplication here instead? That way if we want to register the handler anywhere else it would have all the try catch logic set up.', 'comment_created': datetime.datetime(2020, 8, 18, 3, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 471886192, 'comment_body': 'Once you move the try catch logic here, also add a test to verify that the default handler is also invoked (You can create a fake default handler and verify that it was called with the correct data)', 'comment_created': datetime.datetime(2020, 8, 18, 3, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 473933942, 'comment_body': 'Yes, done. ', 'comment_created': datetime.datetime(2020, 8, 20, 12, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 473934049, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 20, 12, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 473934154, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 20, 12, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 474007531, 'comment_body': 'Should we be logging this to the console?', 'comment_created': datetime.datetime(2020, 8, 20, 14, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 474008209, 'comment_body': 'Add new line at EOF', 'comment_created': datetime.datetime(2020, 8, 20, 14, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 474008760, 'comment_body': 'Why do we need to do Exception(exceptionThrown) here? Can we not just do exceptionThrown.cause? ', 'comment_created': datetime.datetime(2020, 8, 20, 14, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 474255336, 'comment_body': ""We need to do Exception(exceptionThrown) because we're doing Exception(throwable) in our handler while logging to our controller. Our controller needs an exception, so we transform the throwable into an exception."", 'comment_created': datetime.datetime(2020, 8, 20, 20, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 474255621, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 20, 20, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 474255653, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 20, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 474408941, 'comment_body': 'Is there any issue injecting the console logger?', 'comment_created': datetime.datetime(2020, 8, 21, 4, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 475033725, 'comment_body': 'Please add a KDoc. ', 'comment_created': datetime.datetime(2020, 8, 22, 2, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 475033880, 'comment_body': 'You can use Binds, instead:\r\n\r\n```kotlin\r\n@Binds \r\nfun bindUncaughtExceptionHandler(impl: OppiaUncaughtExceptionHandler): Thread.UncaughtExceptionHandler\r\n```\r\n\r\nRequires also making the module an interface. ', 'comment_created': datetime.datetime(2020, 8, 22, 2, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 475033977, 'comment_body': 'Suggest qualifying this, or retrieving OppiaUncaughtExceptionHandler directly in the component to avoid binding a value for a type outside the codebase. ', 'comment_created': datetime.datetime(2020, 8, 22, 2, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 475034059, 'comment_body': 'Prefer naming this for what it’s doing, not ‘Oppia’', 'comment_created': datetime.datetime(2020, 8, 22, 2, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 475034204, 'comment_body': 'This isn’t correct. You need to pass in the original uncaught exception handler that you’re replacing and call that.\r\n\r\nIt’s partly this reason why I suggested that you instead bind a new ApplicationCreationListener set whose onCreate calls are called in OppiaApplication, then have this handler self register itself. ', 'comment_created': datetime.datetime(2020, 8, 22, 2, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 475034288, 'comment_body': 'Is this field being used for anything?', 'comment_created': datetime.datetime(2020, 8, 22, 2, 18, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 475034370, 'comment_body': 'This and next annotations are no longer needed. Please remove. ', 'comment_created': datetime.datetime(2020, 8, 22, 2, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 475034551, 'comment_body': 'Move this up. Test methods should be consecutively next to each other before helpers. ', 'comment_created': datetime.datetime(2020, 8, 22, 2, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 475232259, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 23, 15, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 475232270, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 23, 15, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 475232296, 'comment_body': 'Removed. ', 'comment_created': datetime.datetime(2020, 8, 23, 15, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 475232414, 'comment_body': ""Actually I named it the way Crashlytics names its custom exception handler. Do you have something better in mind ? I think the name's alright since it's our custom uncaught exception handler. "", 'comment_created': datetime.datetime(2020, 8, 23, 15, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 475232456, 'comment_body': 'I modified this file to return `OppiaUncaughtExceptionHandler` instead. So i think we have to use `@Provides` here. PTAL. ', 'comment_created': datetime.datetime(2020, 8, 23, 15, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 475234388, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 23, 15, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 475457879, 'comment_body': 'Modified, PTAL. ', 'comment_created': datetime.datetime(2020, 8, 24, 9, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 475458144, 'comment_body': 'Modified, PTAL. ', 'comment_created': datetime.datetime(2020, 8, 24, 9, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 476269101, 'comment_body': 'This seems like a misuse of lateinit var. From what I understand, lateinit var is meant to only be used when we guarantee initialization, just after construction of the class. In this case, you want to use a sentinel value to represent presence on whether the handler was correctly initialized by the calling API. Nullability is probably a better fit for this:\r\n\r\n```kotlin\r\nprivate var chainedUncaughtExceptionHandler: Thread.UncaughtExceptionHandler? = null\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 8, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476277563, 'comment_body': ""I'm still not keen on changing the OppiaApplication class, especially since it's going to make later migrations (such as the one to Dagger Hilt) more difficult. The current solution also won't correctly integrate with test applications which will make testing in the app module more difficult. See this gist for an idea on how to solve this using Dagger listeners as I suggested earlier:\r\n\r\nhttps://gist.github.com/BenHenning/93efec191657b72667a476c456a0de5f"", 'comment_created': datetime.datetime(2020, 8, 25, 8, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476279078, 'comment_body': 'We should generally try to avoid classes having generic names. What if we wanted to add more functionality to the uncaught exception handler chain? We could either have an omni OppiaUncaughtExceptionHandler that does lots of things, or a compositional approach where we have multiple exception handlers with specific responsibilities. The latter tends to be more flexible & has other maintenance benefits. Naming this class specific helps move toward that pattern. See the gist in my latest comment for a suggested alternate name.', 'comment_created': datetime.datetime(2020, 8, 25, 8, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476938666, 'comment_body': 'Got it. Done. ', 'comment_created': datetime.datetime(2020, 8, 26, 1, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 476939501, 'comment_body': ""Okay, I got your point and upon thinking I also feel that it'll be a lot better if we do things this way. Thanks a lot for the gist. It really helped me understand the setup. "", 'comment_created': datetime.datetime(2020, 8, 26, 1, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 476939777, 'comment_body': 'Okay, got it. Name changed to the one suggested. ', 'comment_created': datetime.datetime(2020, 8, 26, 1, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 477021858, 'comment_body': ""This should be in org.oppia.app.application since it's part of the application component setup."", 'comment_created': datetime.datetime(2020, 8, 26, 4, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 477022140, 'comment_body': '```suggestion\r\n/** Binds [UncaughtExceptionLoggerStartupListener] as an [ApplicationStartupListener]. */\r\n```\r\n\r\nThis is slightly more correct: module classes bind & provide things, not return them.', 'comment_created': datetime.datetime(2020, 8, 26, 4, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 477078203, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 7, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 477078313, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 7, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 477090027, 'comment_body': 'Verified that this has been done, resolving the comment', 'comment_created': datetime.datetime(2020, 8, 26, 7, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 477090730, 'comment_body': 'Verified that this file has been moved. Resolving the comment', 'comment_created': datetime.datetime(2020, 8, 26, 7, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}]","[{'commit_sha': '3a5134ab284fb96a543b8b1a60bb068800a1c373', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1ff8d3b341caacee23dc5d47573489198aa9e7e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df0d2562578567c26eb12531e3a353b80c8d34eb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2059c90cd28491fc63574996225c2b60a7c6fe3e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f01174edbb69f4a823e00a345c06adff90a6481', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b8174dad16279e8ce8d9b8082543da013ef9601', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a745d5c642521e4d0da54f0b82dbf48867f84b5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4fc38184816624c6046d2666d7562df147bb61c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb7424e0bbd77b10deab83274da5c880a46ecd58', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48de325bccfb5a2a3a71ffc09814cbbab35114ba', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6b9d7352d6706d8b0ae982c172c7291260b47a6', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8c09da88b825e2ee00f01d375c7fa980b9cf475', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06c60a5b374a6945880237dec953affef118a86c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36237d888c4fc7e6d53c2039043cdfc9c8842036', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8af1f11114a97166fd30d99cbfbf1c5cc5f92ca8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c284d594c01830799eeb6a4b459f727564d439e6', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5698f8e30df5f3ea0dd2f40965b815b472bcea5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34f1b9f3285e4a5060f5e57b6fd17277a042887a', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7924d55e5451e31fd868835c767e39fe9951f39', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2750f1b0bfc8be671465f86bf327494dad35ff4b', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb23244af7ff2eb2c3c6f8943e2508169fbc299b', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7d13c4e586c385cc3227ff9437444313f86b7c4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e1a7585192a197565551f5acdbaffcf98e18b63', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '509d306ec462dc674c7422fa9667e2f9ad0252a3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cc1f9f732ce528fc729d0e8f90864a09fb83247', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c68981ffe8d60a3421a7026a05661a0d84d9e125', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99d0a234bab06359f47e989ba8a3a7e237207484', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07119de17b5aa2692dcb344d788e998645da4823', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3ee04f5a728cece573e8107c8f79c554fbe1c29', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ce4ebf1be5ae757927b7251981c14546cc8dd05', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7d5f2c835418835c27b3144071377f66876de93', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd1371d246bec67bc6d2975fef731d5a115b9281', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b675a154c8f80c2dcf4dd5fa64a1fe11b6c13f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '713546f73ff570ea97ede3e07fa59a25d937fcb4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5b1b5afca1dc118f9f2b47df257dca8af34afeb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9646b51ea0a7d6e9926622d17fe68d1d9e750129', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd31adcccff2ea70efd14fb8896b02cf6f9cd0be3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50ade6b36a27517f91322e97a3968b8f509f4019', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4cab1386ca32638f42ab064ccdbceec9f595038', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b51f78787a5fb1f79864773a33607db036dd0636', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc74a1c40292b5486d01c58474a10483d02aad6d', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '819d683a9267689d85789f740012199d2dc56351', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7050a612ee22d28f99db1379c137390d3584ffd9', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8d3505504480a2f2fbb181ae0d54683fedcdf58', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bf0778fcc334ec553beab4cdb8eeaf85616c6de', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ed430371d1f4c0b3b8ea81f9a7204978cc18f9', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb92f53d52f13c55993d9a61e599a78ae48cac7', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41cad7a9d1b212323078169e365fab2ba42caf72', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60c96870094733915d9a9b610320d231e91ae9e6', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5cd5d38920fcf6434c3fb501c3ff585b1ecb976', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71be8e405183d3f34acf5850e3c633f6a4d2a536', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '165ebb4ec29d277cd9c2e98d506ef80506d4addb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94d65d60ce3aa6199c3eec85f7af8f40fcc145fa', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d285d694606c46a04d5fe03b485f50b13c44f33', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28e92faba02d74778ce23f3b7fc1739937383f1f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5caa025bf79e3a1387d95a5aa333f6e7afb8907', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7dc92aef62211c3fdcee76eddeabdc47383d687', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dd12918771c9c3b861837a733de5eef923f87b6', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad0fd478ffffb226ce1499f3d97e43706c3f2db5', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e541c5b2f29ecedf49d18e8e20a604b8556777fc', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1faff2ff9532a2da9d2177ebed38fb5d9dc82990', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9532177a661ec5b8209684f971d8da2c64ab81de', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19d38abd813b920308c80c260a0ea44b3ee05f56', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60
470335890,Fix #1106: Addition of Work Manager for uploading logs,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixes #1106 - Implements work manager for uploading events and exceptions to Firebase in presence of network connection. 

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1680,https://api.github.com/repos/oppia/oppia-android/pulls/1680,https://github.com/oppia/oppia-android/pull/1680,closed,2044,438,54,51,8,130,0,3,[],2020-08-19 18:24:06+00:00,2020-09-04 20:48:28+00:00,1391062.0,"16 days, 2:24:22","[{'comment_id': 474410018, 'comment_body': 'Please use the console logger here', 'comment_created': datetime.datetime(2020, 8, 21, 5, 3, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 474410062, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 8, 21, 5, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 474410328, 'comment_body': 'I am a bit unsure what the purpose of this class is. This is not an uploader since its not doing any uploading. It looks like its only creating the worker requests right? Can we rename this class accordingly?', 'comment_created': datetime.datetime(2020, 8, 21, 5, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 475240805, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 23, 16, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 475240815, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 23, 16, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 475241139, 'comment_body': 'Aah, I named it so because the work requests are after all the ones that will start the process of uploading. Changed it to `OppiaLogUploadWorkRequest`, is that fine now ? ', 'comment_created': datetime.datetime(2020, 8, 23, 16, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 478811800, 'comment_body': 'This should be done via modules not directly in components. ', 'comment_created': datetime.datetime(2020, 8, 28, 3, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478812040, 'comment_body': 'We don’t use instrumentation tests for domain layer tests. ', 'comment_created': datetime.datetime(2020, 8, 28, 3, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478812617, 'comment_body': 'Why this constraint? Won’t this prevent uploading logs in cases when storage is low and could be freed by uploading logs?', 'comment_created': datetime.datetime(2020, 8, 28, 3, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478812690, 'comment_body': 'Please add tests to ensure these constraints don’t change accidentally. ', 'comment_created': datetime.datetime(2020, 8, 28, 3, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478813813, 'comment_body': 'I wouldn’t expect to be using a singleton injectable class with a factory pattern. Shouldn’t the factory return a new instance for each call?', 'comment_created': datetime.datetime(2020, 8, 28, 3, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478814050, 'comment_body': 'What purpose does this enum to string conversion serve? In general that’s not a great practice since we can’t rely on enum constants to be a particular value (at least in Java). ', 'comment_created': datetime.datetime(2020, 8, 28, 3, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478814189, 'comment_body': 'Name: method names should be verbs or verb phrases. Please revise. Ditto below. ', 'comment_created': datetime.datetime(2020, 8, 28, 3, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478814453, 'comment_body': 'Is this being called on the main thread? If not, we shouldn’t be interacting directly with LiveData like this. ', 'comment_created': datetime.datetime(2020, 8, 28, 3, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478814801, 'comment_body': 'Why use a map if it only has one element?', 'comment_created': datetime.datetime(2020, 8, 28, 3, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478815146, 'comment_body': 'Suggest: LogUploadWorkManagerInitializer\r\n\r\nThe current name confused me slightly—this class isn’t representing a request. ', 'comment_created': datetime.datetime(2020, 8, 28, 3, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478815737, 'comment_body': 'This and the above test can’t happen in prod: onCreate will always be called before we can actually log anything. Please update both tests to match. ', 'comment_created': datetime.datetime(2020, 8, 28, 3, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 479248000, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 28, 12, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 479263611, 'comment_body': ""I did this because in the future we might want to add other workers as well. Like in Sajal's original project, there was a situation where he had to sync the profiles to the Oppia backend. "", 'comment_created': datetime.datetime(2020, 8, 28, 13, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 479275684, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 28, 13, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 479279177, 'comment_body': 'But then there will be previous logs right? Like across different app sessions.  ', 'comment_created': datetime.datetime(2020, 8, 28, 13, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 479283347, 'comment_body': ""Okay, was the way of interaction correct in case of the exceptions ? I've modified this to make the two implementations similar. PTAL."", 'comment_created': datetime.datetime(2020, 8, 28, 13, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 479283947, 'comment_body': ""Yes, you're right. Modified. "", 'comment_created': datetime.datetime(2020, 8, 28, 13, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 479463846, 'comment_body': 'Okay, done.', 'comment_created': datetime.datetime(2020, 8, 28, 18, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 479463885, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 28, 18, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 479519901, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 28, 20, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 479520089, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 8, 28, 20, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 479524423, 'comment_body': ""Okay so the input data for the worker works as a bundle. It only deals in int, string, float, double, etc. values. Now I need  to handle two cases(event and exception) inside the doWork() of the worker. So to handle both these things I'm doing this way. Should I go for something else? "", 'comment_created': datetime.datetime(2020, 8, 28, 20, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 479590176, 'comment_body': ""I tried implementing this via the module and here's what I did - \r\nImplemented the `Configuration.Provider` in the WorkManagerInitialiser and then initialised the work manager in its on create and then bound them in the module. I had to remove the default work manager initialisation using a content provider in the manifest. All of this worked perfectly in production but didn't seem to work in tests as the work manager was getting initialised again and again. \r\n\r\nSo I changed the implementation to just providing the configuration via module and then returning that configuration in the `getWorkManagerConfiguration()`. This way production worked, tests worked and we didn't need to alter the default initialisation of the work manager. Is this fine ? "", 'comment_created': datetime.datetime(2020, 8, 29, 1, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 479647410, 'comment_body': 'Nit: I think we can follow the alphabetical order here too.', 'comment_created': datetime.datetime(2020, 8, 29, 12, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 479647601, 'comment_body': 'Suggestion: \r\n`const val TAG = ""LogUploadWorker.tag""`\r\n\r\nShift this to companion object and use it like this:\r\n`LogUploadWorker.TAG ` everywhere outside this file. \r\n', 'comment_created': datetime.datetime(2020, 8, 29, 13, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 479662555, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 8, 29, 15, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 479662771, 'comment_body': ""I don't actually need it anywhere outside this file as of now but moved it to companion object as we may use it in the future while logging work requests.  "", 'comment_created': datetime.datetime(2020, 8, 29, 15, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 479662832, 'comment_body': 'Modified, PTAL. ', 'comment_created': datetime.datetime(2020, 8, 29, 15, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 479688098, 'comment_body': ""I'm slightly confused. I actually would expect the work manager to be initialized repeatedly in tests since each test recreates the test application.\r\n\r\nWith this solution, don't we need to update all test applications to also be a Configuration.Provider? How does it actually get hooked up?"", 'comment_created': datetime.datetime(2020, 8, 29, 20, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 479688331, 'comment_body': ""```suggestion\r\n  /** Returns a data provider for log reports that have been recorded for upload. */\r\n```\r\n\r\nPrevious wording caused some confusion for me:\r\n1) Readers don't know what eventLogStore is--that's an implementation detail\r\n2) It's implied DataProviders can be turned into LiveData since that's more or less its purpose"", 'comment_created': datetime.datetime(2020, 8, 29, 20, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 479688595, 'comment_body': ""Sorry, this wasn't a comment about consistency. If this function is not being called on the main thread, we cannot retrieve LiveData's value: it's designed to be used only on the main thread. How does AndroidX's WorkManager behave when doWork() is called?"", 'comment_created': datetime.datetime(2020, 8, 29, 20, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 479688957, 'comment_body': ""I see that you removed the scope, but the class is still injectable. As mentioned, constructed classes do not need injection constructors.\r\n\r\nAlso, this constructor should be private since it's only called from its factory."", 'comment_created': datetime.datetime(2020, 8, 29, 20, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 479689137, 'comment_body': ""I see. I actually suggest not generalizing this right now because it's not clear if the constraints the system is currently run under will also work for other applications of WorkManager. Generalizing may take a bit more thought based on the exact needs of the different workers, and possibly more abstraction since the current solution is heavily dependent on WorkManager, making any future work to be able to switch to another delivery work manager API difficult."", 'comment_created': datetime.datetime(2020, 8, 29, 20, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 479689187, 'comment_body': 'Here & elsewhere: rename tests & suites to match their production counterparts.', 'comment_created': datetime.datetime(2020, 8, 29, 20, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 479689264, 'comment_body': 'That\'s a good point. In that case, we should fully simulate the situation & the test names should reflect it. To simulate app restart, you need to recreate the test component since the actual objects will be different in the new application.\r\n\r\nPlease update this & other tests that are testing ""pre-app"" behavior.', 'comment_created': datetime.datetime(2020, 8, 29, 20, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 481379140, 'comment_body': 'Modified, PTAL. ', 'comment_created': datetime.datetime(2020, 9, 1, 19, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 481379281, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 1, 19, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 481379490, 'comment_body': 'Okay, done. ', 'comment_created': datetime.datetime(2020, 9, 1, 19, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 481379846, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 1, 19, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 481401930, 'comment_body': ""I also expected the same but once it's initialised, it gives error when we re-initialise it again. Also, it got hooked up to the tests as is. Whenever we want to use their functionality, we can initialise the testWorkManager via the api provided by the testing dependency. "", 'comment_created': datetime.datetime(2020, 9, 1, 20, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483271962, 'comment_body': 'Changed the implementation to a coroutine worker and handled cache retrieval via the original controller. PTAL.', 'comment_created': datetime.datetime(2020, 9, 3, 21, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483272245, 'comment_body': ""Due to work manager testing issue, couldn't apply these test cases. However, tests verifying the call of this function and its contents have been put. PTAL. "", 'comment_created': datetime.datetime(2020, 9, 3, 21, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483361008, 'comment_body': ""This seems a bit odd to me--why don't we just ask the controller to remove all of the events that were successfully logged? Ditto for removeFirstExceptionLogFromStore above."", 'comment_created': datetime.datetime(2020, 9, 4, 3, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483361308, 'comment_body': 'For this & AnalyticsController, please qualify the ``true`` by using a named argument to provide context to readers.', 'comment_created': datetime.datetime(2020, 9, 4, 3, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483361438, 'comment_body': ""Readers don't know what ``eventLogStore`` is. Try phrasing this based on the public API, not the implementation. Ditto for ``ExceptionsController``."", 'comment_created': datetime.datetime(2020, 9, 4, 3, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483362178, 'comment_body': 'Perhaps: FirebaseLogUploaderModule', 'comment_created': datetime.datetime(2020, 9, 4, 3, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483362202, 'comment_body': 'Suggest putting this with the other Firebase impls to keep them together.', 'comment_created': datetime.datetime(2020, 9, 4, 3, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483362321, 'comment_body': 'Suggest putting this with the other Firebase deps to keep them together.', 'comment_created': datetime.datetime(2020, 9, 4, 3, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483362390, 'comment_body': ""This is overscoping--we don't actually have any state to scope. I suggest removing this."", 'comment_created': datetime.datetime(2020, 9, 4, 3, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483362516, 'comment_body': ""Documentation doesn't seem needed here & below since it's overriding behavior defined in ``LogUploader``."", 'comment_created': datetime.datetime(2020, 9, 4, 3, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483363975, 'comment_body': '```suggestion\r\n      TestModule::class, TestLogReportingModule::class, TestLogStorageModule::class, TestDispatcherModule::class, LogUploadWorkerModule::class, TestLogUploaderModule::class\r\n```\r\n\r\nPrefer tightly packing these (my suggested edit probably will need to be slightly broken up, though).', 'comment_created': datetime.datetime(2020, 9, 4, 3, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483364091, 'comment_body': '```suggestion\r\n  private val eventRequestIdList = mutableListOf<UUID>()\r\n```\r\n\r\nPrefer ``mutableListOf``. Ditto below.', 'comment_created': datetime.datetime(2020, 9, 4, 3, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483364317, 'comment_body': 'Prefer just ``Factory``. Then you can inject ``LogUploadWorker.Factory`` where needed.', 'comment_created': datetime.datetime(2020, 9, 4, 3, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483366687, 'comment_body': 'What if the log operation fails? Should we track it & return a failure in that case, then retry later?', 'comment_created': datetime.datetime(2020, 9, 4, 3, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483366815, 'comment_body': 'Here & above: prefer logging context. Adding the exception will provide sufficient context to the exception, e,g:\r\n\r\n```kotlin\r\nconsoleLogger.e(TAG, ""Failed to upload events"", e)\r\n```', 'comment_created': datetime.datetime(2020, 9, 4, 3, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483367119, 'comment_body': ""Why is this needed? Can't we just inject the factory where we need to?"", 'comment_created': datetime.datetime(2020, 9, 4, 3, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483367378, 'comment_body': 'Or perhaps: ``Returns a new [LogUploadWorker] for the given context and parameters.``', 'comment_created': datetime.datetime(2020, 9, 4, 3, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483367406, 'comment_body': 'Is it okay to ignore this?', 'comment_created': datetime.datetime(2020, 9, 4, 3, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483368129, 'comment_body': 'Why do we need this? Why not just inject LogUploadWorker.Factory directly where needed?', 'comment_created': datetime.datetime(2020, 9, 4, 3, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483368286, 'comment_body': 'Ditto for these modules (prefer tightly formatting them).', 'comment_created': datetime.datetime(2020, 9, 4, 3, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483368416, 'comment_body': ""Doesn't seem needed--you're not using captors or mocks. Ditto for LogUploadWorkManagerInitializerTest."", 'comment_created': datetime.datetime(2020, 9, 4, 3, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483370321, 'comment_body': ""It seems also worthwhile to test that when there is network that it doesn't enqueue the request (since it should log it directly)."", 'comment_created': datetime.datetime(2020, 9, 4, 3, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483371645, 'comment_body': 'Looks like this is resolved now.', 'comment_created': datetime.datetime(2020, 9, 4, 3, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483371697, 'comment_body': 'Looks good--thanks!', 'comment_created': datetime.datetime(2020, 9, 4, 3, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483371855, 'comment_body': 'This seems reasonable--thanks!', 'comment_created': datetime.datetime(2020, 9, 4, 3, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483478881, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 4, 8, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483478940, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 4, 8, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483478966, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 4, 8, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483479350, 'comment_body': ""I've basically done a one by one transaction here so that none of the logs get misplaced in the interim. This seemed reasonable to me. We can keep track of exceptions in a better way here I think. "", 'comment_created': datetime.datetime(2020, 9, 4, 8, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483479423, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 4, 8, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483479679, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 4, 8, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483480480, 'comment_body': ""I've done it in a 2-2 configuration. "", 'comment_created': datetime.datetime(2020, 9, 4, 8, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483480736, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 4, 8, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483481886, 'comment_body': ""If any of the operation fails, it'll throw an error which will be caught and the result will be failed. All of the un-uploaded logs will then be taken up in the next work manager cycle. Does that make sense? "", 'comment_created': datetime.datetime(2020, 9, 4, 8, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483482255, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 4, 8, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483482856, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 4, 8, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483483873, 'comment_body': ""Actually that's worker factory that provides context and worker params to the child factory which then injects the other dependencies and clubs all these together to make the worker class. This is done because we can't inject the worker params directly. "", 'comment_created': datetime.datetime(2020, 9, 4, 8, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483484690, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 4, 8, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483484856, 'comment_body': ""Yes, it's okay. I've verified. "", 'comment_created': datetime.datetime(2020, 9, 4, 8, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483485633, 'comment_body': ""LogUploadWorker.Factory is an implementation of this interface. This interface's instance is then used by the worker factory to inject the context and worker params into. "", 'comment_created': datetime.datetime(2020, 9, 4, 8, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483485691, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 4, 8, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483485912, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 4, 8, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483487647, 'comment_body': 'Actually that `withoutNetwork` is basically for putting the exceptions inside the store and the work request will perform its function in presence of network only (in background, when the app instance is closed).', 'comment_created': datetime.datetime(2020, 9, 4, 9, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483491475, 'comment_body': ""Won't that mean adding additional dependencies (work manager) in the utility module of both gradle and bazel just for the sake of this file ?"", 'comment_created': datetime.datetime(2020, 9, 4, 9, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483491666, 'comment_body': 'Ditto as above. ', 'comment_created': datetime.datetime(2020, 9, 4, 9, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483508694, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 4, 9, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483508738, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 4, 9, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483518295, 'comment_body': '```suggestion\r\n    eventLogStore.storeDataAsync(updateInMemoryCache = true) { oppiaEventLogs ->\r\n```\r\n\r\nOptional. Yours is completely acceptable (though you should add a space after the ``/``), though Kotlin gives us this syntax for Kotlin APIs for free & it includes automatic validation.', 'comment_created': datetime.datetime(2020, 9, 4, 10, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483518547, 'comment_body': 'Ditto here.', 'comment_created': datetime.datetime(2020, 9, 4, 10, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483519950, 'comment_body': 'You\'re correct, but one advantage of keeping all ""Firebase"" things together is that it lets us easily switch out implementations in the future (if we ever moved off Firebase).', 'comment_created': datetime.datetime(2020, 9, 4, 10, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483521080, 'comment_body': ""I don't think that's quite right, unless I'm missing something. The suspend function you're calling on the DataProvider (retrieveData()) won't throw an exception, it'll return an AsyncResult with the failure. Don't we need to check all of these results for potential failures?"", 'comment_created': datetime.datetime(2020, 9, 4, 10, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483522087, 'comment_body': ""I understand why the factory is needed, but I don't quite understand why we can't inject LogUploadWorkerFactory where we're currently injecting WorkerFactory (though I don't actually see this injected anywhere--are you sure this binding is being used?)"", 'comment_created': datetime.datetime(2020, 9, 4, 10, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483522452, 'comment_body': ""That part is clear to me, but what isn't clear to me is why can't we inject LogUploadWorker.Factory where we are currently injecting this factory? Why do we need this interface & why can't we use the only implementation of it directly?"", 'comment_created': datetime.datetime(2020, 9, 4, 10, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483523402, 'comment_body': ""Doesn't seem removed in the latest changes--am I missing something?"", 'comment_created': datetime.datetime(2020, 9, 4, 10, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483524096, 'comment_body': ""To be clear: I'm actually suggesting that we verify that we _don't_ enqueue the request if we log with internet connectivity on (since it should just log as normal). Am I maybe misunderstanding why we shouldn't do that?"", 'comment_created': datetime.datetime(2020, 9, 4, 10, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483532239, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 4, 10, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483532278, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 4, 10, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483535726, 'comment_body': ""Okay, so work manager will work in the background only. It'll get enqueued at its specified time interval only and will fetch logs from the cache store. Now when the app is running and there is network, it'll not store in the cache store and will log directly itself. If there are no cached log reports in the store, it'll just complete the process of the request. Does that help ?"", 'comment_created': datetime.datetime(2020, 9, 4, 10, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483535856, 'comment_body': ""Have you refreshed ? I think it's removed. "", 'comment_created': datetime.datetime(2020, 9, 4, 10, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483537540, 'comment_body': 'The interface is basically to link the appContext and workParams that we receive from the WorkerFactory and relay it in such a form so that we can inject other dependencies as well. \r\nNote - WorkerFactory gets the `appContext` and `workParams` from the `WorkManagerConfiguration` at application start. ', 'comment_created': datetime.datetime(2020, 9, 4, 10, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483539060, 'comment_body': ""Umm..I'm actually using the readDataAsync from the Analytics/Exceptions Controller. Will that not throw an error ? I believe I faced an error while testing. "", 'comment_created': datetime.datetime(2020, 9, 4, 10, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483539306, 'comment_body': ""Yes, it's getting set up as the default worker factory using the WorkManagerConfiguration at app start up. "", 'comment_created': datetime.datetime(2020, 9, 4, 10, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483541427, 'comment_body': ""No, it won't. See the implementation: https://github.com/oppia/oppia-android/blob/2ca2397/data/src/main/java/org/oppia/data/persistence/PersistentCacheStore.kt#L75. Or, at least, it won't under normal operations. Normal failures will be propagated via AsyncResult--that's actually why we have it."", 'comment_created': datetime.datetime(2020, 9, 4, 10, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483542096, 'comment_body': ""That's injecting LogUploadWorkerFactory, not WorkerFactory (which is what this binding is providing). This still seems unnecessary--you should be able to remove it."", 'comment_created': datetime.datetime(2020, 9, 4, 10, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483542949, 'comment_body': ""I don't think I'm being really clear here: I'm not suggesting that you stop passing those things. I'm suggesting you delete this interface and in ``LogUploadWorkerFactory`` inject ``LogUploadWorker.Factory``, instead. It still does all of the things you mentioned above, but it avoids needing this class (you should move the documentation to the Factory class, though)."", 'comment_created': datetime.datetime(2020, 9, 4, 10, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483543521, 'comment_body': 'Remove the version--having it defined in WORKSPACE should be sufficient.', 'comment_created': datetime.datetime(2020, 9, 4, 10, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483543858, 'comment_body': ""I still see this in LogUploadWorkManagerInitializerTest. Please make sure to keep an eye on 'ditto' in comments since it means it applies broadly."", 'comment_created': datetime.datetime(2020, 9, 4, 10, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483544164, 'comment_body': ""Yep, I'm actually asking that you verify everything you just said actually works like we expect it to via tests here."", 'comment_created': datetime.datetime(2020, 9, 4, 10, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 483660455, 'comment_body': ""To be clear on this : The enqueuing of work requests doesn't depend on if we have network connectivity or not. Even if we have internet connection, work requests will be enqueued and the worker will work as is. However, during that time no logs will be saved as all of them will be uploaded directly to the remote service. "", 'comment_created': datetime.datetime(2020, 9, 4, 14, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483660530, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 4, 14, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483660785, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 4, 14, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483743256, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 4, 16, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483743724, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 4, 16, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483743810, 'comment_body': 'Yes, done. ', 'comment_created': datetime.datetime(2020, 9, 4, 16, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483744814, 'comment_body': ""It seems like there's a misunderstanding here. I am not using retrieveData function anymore as the implementation has been shifted to readDataAsync which returns a deferrable instead of an asyncResult. According to already existing implementations of readDataAsync, we don't need to check for failure cases here. Please correct me if I am wrong here. "", 'comment_created': datetime.datetime(2020, 9, 4, 16, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483746651, 'comment_body': ""Work manager and event logging are completely separate things here. Request enqueue and dequeue will work regardless of how we are logging our events. The work manager's task is to enqueue a request, fetch the logs from the store and upload them on Firebase. Even if there is network connection, work request will get enqueued to fetch data from the cache store. Logging of an event/exception is a part of the Analytics/Exception controller and not the work manager. "", 'comment_created': datetime.datetime(2020, 9, 4, 16, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}, {'comment_id': 483835587, 'comment_body': 'Resolving this now.', 'comment_created': datetime.datetime(2020, 9, 4, 20, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 483835623, 'comment_body': 'Resolving this now.', 'comment_created': datetime.datetime(2020, 9, 4, 20, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 483835743, 'comment_body': 'Keeping this open, for further communication in future.', 'comment_created': datetime.datetime(2020, 9, 4, 20, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 483835798, 'comment_body': 'Resolving this now', 'comment_created': datetime.datetime(2020, 9, 4, 20, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 483835882, 'comment_body': 'Okat', 'comment_created': datetime.datetime(2020, 9, 4, 20, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 483836022, 'comment_body': 'Resolving this now.', 'comment_created': datetime.datetime(2020, 9, 4, 20, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 483836129, 'comment_body': 'Keeping this open, for further communication in future.', 'comment_created': datetime.datetime(2020, 9, 4, 20, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 483836199, 'comment_body': 'Resolving this now.', 'comment_created': datetime.datetime(2020, 9, 4, 20, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}]","[{'commit_sha': '0cce19abaab7b4794c9ab70c0e9cb4b8ec68ee47', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42e2b2f515c3b88bdc45f0214f7a98efa82d00db', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bac1257337a8cd7cf121a1b9233923e9d5452615', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a376f482afab4c8a13c4d09788d54af93472bd9', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14faf44cbb96e7dd0450c01cf45b7e3f942109fb', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5dc49c045c4f2ba495a96b525299ea6fb7858ff', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dece7ec610dc1abdceb00b7ba4e7017f9286c751', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8b7639d7cc1da0bdc38751796b2d9439b3c3a44', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa19e781402051c95793400c99ae4648230eafc9', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '453d924b5bcd30dca2099b90b7aebd130aafae16', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ffd367ce4b001f0322d3d88b9a0d059ed72767e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20c40e624eb25c21926e0b622ab505ffa5360611', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45ecff6b24592a51472bfa44f53c26dc341a303b', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0710419f3ddef8313af9af1fd794d13c4769a1c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5b7c4b184551b9a3ac6648711e5e00e753735ca', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c08f6fb1177c6f073702dc1c0be61f4ca4e95be', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88fec689fafc14167dcbf88940942dff0419157a', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9f24a7678fbb97261d38a70a2f61291c5e8899a', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e10d7b7b80a00689cb9af875004ef281717d39d1', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '302904980f16bd94bdbef0d6d98e96477e8faacf', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef0c4cae0e751a00b7783a11963d7a20d638cd0b', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6717b2b093dd32ca50108968cab876b5d86c6c4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '081f815c6abd2a4710cce1b8c3f069cb0505791f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fee2be41af8d05a6b01d7d2d6e86e338e705edae', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb8a919d94253f958ed51638d66e6e78aece97f7', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aee56fc29627c24a713a2053443e0afc4fd2ce93', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ab1059caee81afa7471be4fd2fc3c909f890495', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c064a5cd0c0049d99bf7ecae84786fc7f8e0f348', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3597c0f6ef8c270d948e0d61d7d20093c08375f9', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cab1b4e2b733b49b0aadee25ea98d83211d01064', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cb92ef2e523c47b3c2588171aa513ac38bcff6c', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb4115419eb8ec47d4c2978a2544781d7c09a793', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '352ad5298b0d2192009db51007ad5757b52f6748', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c625f0e7b468529f8ea9da9a75b0d30d9c2c3a8', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54027b2bb5ddc1eca51833d109b3df12b2378ab3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65732e343564acc7902cb700e0ef92c7c2d82b5b', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '386a21c7aad88fd2b7e67e8b3958ca7b31103b93', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b22db88d723e752d152d140752adfcfba194b399', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67869376db0696401b61228ab610c8a5ef9c1288', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57ab92e6093bbf3bc9a83a4d44d266bac0c7e768', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a70b3aebe6c37dc177d585cfea8454dd80c6899', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '431731ffdde37d057876c13dc456005c1063e564', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612b4f64f446e0ceaf79bca9b91aee536f403f4e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3e0e2e4db48114a5522e8c8b2b93c82cd855c9b', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ac891c78c2ac552a53b7a6c876309a48d805699', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54da0ceb6e1c30e90421d3b9a127fd00dbbf1b40', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aea6601fb1066cad94cd7056ca773e85dca3aba4', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd35f49622e24932d09953fd8f247a2750b106e53', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8150b6e0e446300becc98762ccdb1b833116b458', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4729d551b86282ce617e1d53f2762416758785a1', 'committer_username': 'BenHenning', 'committer_name': 'Ben Henning', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 21, 2, 28, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37eb43f916bb55d0e56441ab77964aa9a82d494f', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60
477328869,Fixes #1107 : Addition of user properties ,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixes #1107
- Adds network type and country names as user properties while logging any event. 
## Screenshot 
![Screenshot 2020-09-02 at 2 21 26 AM](https://user-images.githubusercontent.com/53938155/91904826-375f6d00-ecc3-11ea-94c4-73db8230f7d2.png)

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,1759,https://api.github.com/repos/oppia/oppia-android/pulls/1759,https://github.com/oppia/oppia-android/pull/1759,closed,19,4,2,6,0,2,0,1,[],2020-09-01 20:53:27+00:00,2020-09-02 19:14:43+00:00,80476.0,22:21:16,"[{'comment_id': 482037847, 'comment_body': 'Make them private ', 'comment_created': datetime.datetime(2020, 9, 2, 12, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 482306111, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2020, 9, 2, 18, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sarthak2601', 'type': 'User'}]","[{'commit_sha': '45e34b5a1603ad71f10436bafb707edc97c478bf', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e7fecb5056a724f08027a7e93deb657944d8a0', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62ada09d92083d40713e458a629065432b0dfd9e', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '734dbc0cd21d6a4635ee4e9d5e9ae42d839997d3', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef1083d1674fd161b57eb6b582dd4a3a6b2a0c96', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '483818d3d6e1208280c6ce2fc2d837a4b3a42081', 'committer_username': 'Sarthak2601', 'committer_name': 'Sarthak Agarwal', 'committer_email': 'agarwal.sarthak262012@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 10, 22, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Agarwal,53938155,agarwal.sarthak262012@gmail.com,User,,59,,4,60

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
148093817,oppia-android,oppia/oppia-android,Kotlin,506,306,21,172,2038,506,150,25,"[{'id': 1066588076, 'number': 4623, 'closed': datetime.datetime(2022, 11, 1, 3, 43, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 26, 4, 46, 36, tzinfo=datetime.timezone.utc), 'time_taken': 3106626.0, 'time_delta': '35 days, 22:57:06', 'additions': 2283, 'deletions': 841, 'state': 'closed'}, {'id': 1006418010, 'number': 4462, 'closed': datetime.datetime(2022, 9, 20, 13, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 23, 20, 44, 4, tzinfo=datetime.timezone.utc), 'time_taken': 5070056.0, 'time_delta': '58 days, 16:20:56', 'additions': 2170, 'deletions': 274, 'state': 'closed'}, {'id': 974105408, 'number': 4399, 'closed': datetime.datetime(2022, 9, 5, 16, 5, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 21, 20, 38, 10, tzinfo=datetime.timezone.utc), 'time_taken': 6550052.0, 'time_delta': '75 days, 19:27:32', 'additions': 871, 'deletions': 2, 'state': 'closed'}, {'id': 962249598, 'number': 4388, 'closed': datetime.datetime(2022, 9, 2, 6, 32, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 8, 23, 18, 13, tzinfo=datetime.timezone.utc), 'time_taken': 7370065.0, 'time_delta': '85 days, 7:14:25', 'additions': 5579, 'deletions': 540, 'state': 'closed'}, {'id': 924568733, 'number': 4336, 'closed': datetime.datetime(2022, 7, 26, 7, 10, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 30, 3, 55, 19, tzinfo=datetime.timezone.utc), 'time_taken': 7528491.0, 'time_delta': '87 days, 3:14:51', 'additions': 187, 'deletions': 0, 'state': 'closed'}, {'id': 920990499, 'number': 4327, 'closed': datetime.datetime(2022, 6, 9, 2, 48, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 27, 18, 45, 13, tzinfo=datetime.timezone.utc), 'time_taken': 3657792.0, 'time_delta': '42 days, 8:03:12', 'additions': 132, 'deletions': 0, 'state': 'closed'}, {'id': 827940466, 'number': 4118, 'closed': datetime.datetime(2022, 3, 17, 11, 34, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 20, 21, 26, 42, tzinfo=datetime.timezone.utc), 'time_taken': 4802881.0, 'time_delta': '55 days, 14:08:01', 'additions': 142, 'deletions': 232, 'state': 'closed'}, {'id': 827012509, 'number': 4116, 'closed': datetime.datetime(2022, 3, 14, 22, 26, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 20, 0, 13, 6, tzinfo=datetime.timezone.utc), 'time_taken': 4659181.0, 'time_delta': '53 days, 22:13:01', 'additions': 586, 'deletions': 457, 'state': 'closed'}, {'id': 826994175, 'number': 4115, 'closed': datetime.datetime(2022, 1, 25, 4, 54, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 19, 23, 36, 7, tzinfo=datetime.timezone.utc), 'time_taken': 451092.0, 'time_delta': '5 days, 5:18:12', 'additions': 31, 'deletions': 0, 'state': 'closed'}, {'id': 826984456, 'number': 4114, 'closed': datetime.datetime(2022, 1, 22, 6, 10, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 19, 23, 17, 34, tzinfo=datetime.timezone.utc), 'time_taken': 197577.0, 'time_delta': '2 days, 6:52:57', 'additions': 16, 'deletions': 0, 'state': 'closed'}, {'id': 477328869, 'number': 1759, 'closed': datetime.datetime(2020, 9, 2, 19, 14, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 1, 20, 53, 27, tzinfo=datetime.timezone.utc), 'time_taken': 80476.0, 'time_delta': '22:21:16', 'additions': 19, 'deletions': 4, 'state': 'closed'}, {'id': 470335890, 'number': 1680, 'closed': datetime.datetime(2020, 9, 4, 20, 48, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 18, 24, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1391062.0, 'time_delta': '16 days, 2:24:22', 'additions': 2044, 'deletions': 438, 'state': 'closed'}, {'id': 459359488, 'number': 1546, 'closed': datetime.datetime(2020, 8, 26, 7, 53, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 16, 18, 31, tzinfo=datetime.timezone.utc), 'time_taken': 2302500.0, 'time_delta': '26 days, 15:35:00', 'additions': 290, 'deletions': 12, 'state': 'closed'}, {'id': 455047598, 'number': 1500, 'closed': datetime.datetime(2020, 8, 11, 10, 16, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 11, 6, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1724994.0, 'time_delta': '19 days, 23:09:54', 'additions': 751, 'deletions': 67, 'state': 'closed'}, {'id': 444930392, 'number': 1445, 'closed': datetime.datetime(2020, 7, 17, 12, 17, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 18, 17, 13, tzinfo=datetime.timezone.utc), 'time_taken': 928833.0, 'time_delta': '10 days, 18:00:33', 'additions': 25, 'deletions': 61, 'state': 'closed'}, {'id': 441172583, 'number': 1423, 'closed': datetime.datetime(2020, 7, 21, 5, 37, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 3, 22, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1908900.0, 'time_delta': '22 days, 2:15:00', 'additions': 658, 'deletions': 184, 'state': 'closed'}, {'id': 441087696, 'number': 1422, 'closed': datetime.datetime(2020, 7, 2, 13, 7, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 28, 17, 23, 25, tzinfo=datetime.timezone.utc), 'time_taken': 330223.0, 'time_delta': '3 days, 19:43:43', 'additions': 1094, 'deletions': 46, 'state': 'closed'}, {'id': 437415867, 'number': 1370, 'closed': datetime.datetime(2020, 6, 23, 1, 43, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 14, 2, 17, tzinfo=datetime.timezone.utc), 'time_taken': 214848.0, 'time_delta': '2 days, 11:40:48', 'additions': 36, 'deletions': 49, 'state': 'closed'}, {'id': 437411614, 'number': 1369, 'closed': datetime.datetime(2020, 6, 25, 13, 9, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 13, 20, 27, tzinfo=datetime.timezone.utc), 'time_taken': 431349.0, 'time_delta': '4 days, 23:49:09', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 436074454, 'number': 1343, 'closed': datetime.datetime(2020, 6, 19, 15, 17, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 20, 20, 15, tzinfo=datetime.timezone.utc), 'time_taken': 154647.0, 'time_delta': '1 day, 18:57:27', 'additions': 469, 'deletions': 34, 'state': 'closed'}, {'id': 434079502, 'number': 1319, 'closed': datetime.datetime(2020, 6, 15, 9, 24, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 14, 1, 10, 26, tzinfo=datetime.timezone.utc), 'time_taken': 116023.0, 'time_delta': '1 day, 8:13:43', 'additions': 255, 'deletions': 8, 'state': 'closed'}, {'id': 433919767, 'number': 1318, 'closed': datetime.datetime(2020, 6, 13, 20, 5, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 23, 18, 21, tzinfo=datetime.timezone.utc), 'time_taken': 74839.0, 'time_delta': '20:47:19', 'additions': 68, 'deletions': 23, 'state': 'closed'}, {'id': 430372975, 'number': 1265, 'closed': datetime.datetime(2020, 6, 13, 23, 53, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 7, 20, 52, 5, tzinfo=datetime.timezone.utc), 'time_taken': 529293.0, 'time_delta': '6 days, 3:01:33', 'additions': 148, 'deletions': 35, 'state': 'closed'}, {'id': 428632177, 'number': 1260, 'closed': datetime.datetime(2020, 6, 18, 4, 39, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 18, 4, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1074902.0, 'time_delta': '12 days, 10:35:02', 'additions': 1020, 'deletions': 1, 'state': 'closed'}, {'id': 427189948, 'number': 1241, 'closed': datetime.datetime(2020, 6, 12, 10, 6, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 3, 13, 7, 28, tzinfo=datetime.timezone.utc), 'time_taken': 766764.0, 'time_delta': '8 days, 20:59:24', 'additions': 40, 'deletions': 0, 'state': 'closed'}, {'id': 426742663, 'number': 1237, 'closed': datetime.datetime(2020, 6, 7, 20, 48, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 17, 56, 14, tzinfo=datetime.timezone.utc), 'time_taken': 442314.0, 'time_delta': '5 days, 2:51:54', 'additions': 465, 'deletions': 298, 'state': 'closed'}, {'id': 426088265, 'number': 1230, 'closed': datetime.datetime(2020, 6, 13, 11, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 16, 27, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1019605.0, 'time_delta': '11 days, 19:13:25', 'additions': 515, 'deletions': 48, 'state': 'closed'}, {'id': 422738621, 'number': 1122, 'closed': datetime.datetime(2020, 5, 26, 11, 4, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 12, 57, 22, tzinfo=datetime.timezone.utc), 'time_taken': 79644.0, 'time_delta': '22:07:24', 'additions': 10, 'deletions': 3, 'state': 'closed'}, {'id': 422039931, 'number': 1118, 'closed': datetime.datetime(2020, 5, 27, 4, 4, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 22, 16, 51, 47, tzinfo=datetime.timezone.utc), 'time_taken': 385992.0, 'time_delta': '4 days, 11:13:12', 'additions': 23, 'deletions': 0, 'state': 'closed'}, {'id': 412439975, 'number': 1036, 'closed': datetime.datetime(2020, 5, 27, 6, 10, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 2, 11, 48, tzinfo=datetime.timezone.utc), 'time_taken': 2139740.0, 'time_delta': '24 days, 18:22:20', 'additions': 85, 'deletions': 38, 'state': 'closed'}, {'id': 403096971, 'number': 982, 'closed': datetime.datetime(2020, 4, 16, 7, 3, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 14, 10, 21, 16, tzinfo=datetime.timezone.utc), 'time_taken': 160918.0, 'time_delta': '1 day, 20:41:58', 'additions': 107, 'deletions': 131, 'state': 'closed'}, {'id': 400796398, 'number': 955, 'closed': datetime.datetime(2020, 4, 9, 10, 27, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 8, 11, 40, 10, tzinfo=datetime.timezone.utc), 'time_taken': 82021.0, 'time_delta': '22:47:01', 'additions': 141, 'deletions': 108, 'state': 'closed'}, {'id': 391748535, 'number': 845, 'closed': datetime.datetime(2020, 3, 31, 12, 55, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 20, 21, 28, 38, tzinfo=datetime.timezone.utc), 'time_taken': 919617.0, 'time_delta': '10 days, 15:26:57', 'additions': 51, 'deletions': 19, 'state': 'closed'}, {'id': 390925445, 'number': 831, 'closed': datetime.datetime(2020, 3, 20, 10, 45, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 19, 10, 40, 31, tzinfo=datetime.timezone.utc), 'time_taken': 86706.0, 'time_delta': '1 day, 0:05:06', 'additions': 72, 'deletions': 2, 'state': 'closed'}, {'id': 382536169, 'number': 732, 'closed': datetime.datetime(2020, 3, 19, 4, 44, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 2, 18, 21, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1419809.0, 'time_delta': '16 days, 10:23:29', 'additions': 280, 'deletions': 65, 'state': 'closed'}, {'id': 380469709, 'number': 719, 'closed': datetime.datetime(2020, 2, 27, 10, 1, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 26, 19, 46, 25, tzinfo=datetime.timezone.utc), 'time_taken': 51287.0, 'time_delta': '14:14:47', 'additions': 283, 'deletions': 40, 'state': 'closed'}, {'id': 379670214, 'number': 716, 'closed': datetime.datetime(2020, 2, 26, 19, 42, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 25, 16, 0, 33, tzinfo=datetime.timezone.utc), 'time_taken': 99746.0, 'time_delta': '1 day, 3:42:26', 'additions': 191, 'deletions': 21, 'state': 'closed'}, {'id': 378620577, 'number': 698, 'closed': datetime.datetime(2020, 2, 24, 18, 49, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 22, 18, 58, 40, tzinfo=datetime.timezone.utc), 'time_taken': 172273.0, 'time_delta': '1 day, 23:51:13', 'additions': 722, 'deletions': 5, 'state': 'closed'}, {'id': 378412145, 'number': 685, 'closed': datetime.datetime(2020, 2, 22, 12, 21, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 21, 18, 24, 32, tzinfo=datetime.timezone.utc), 'time_taken': 64627.0, 'time_delta': '17:57:07', 'additions': 21, 'deletions': 396, 'state': 'closed'}, {'id': 378127889, 'number': 681, 'closed': datetime.datetime(2020, 2, 21, 8, 5, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 21, 6, 41, 19, tzinfo=datetime.timezone.utc), 'time_taken': 5049.0, 'time_delta': '1:24:09', 'additions': 9, 'deletions': 1, 'state': 'closed'}]"
