pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1385990463,GSoC 2023: Unified Measurement Facility,"This aims to implement a global measurement tool that is extendable by workbenches. Existing discussion on the topic can be found on the [forum](https://forum.freecad.org/viewtopic.php?t=78147) and in the corresponding issue #8561 .


Supported MeasureTypes:
- MeasureLength
- MeasureDistance
- MeasureAngle
- MeasureRadius
- MeasureArea
- MeasurePosition
- MeasureCOM (Python example) 

Supported Functionality:
- Temporary or persistent Measurements
- Dragable Measurements
- Multiple selection paradigms (selection->command, command->selection)
- Python defined MeasureTypes
- Display preferences

Demo:

https://github.com/FreeCAD/FreeCAD/assets/64740362/f8ae9787-d8d5-4c5d-a21b-f2d001e2443f


Primary mentor: @WandererFan ",True,9750,https://api.github.com/repos/FreeCAD/FreeCAD/pulls/9750,https://github.com/FreeCAD/FreeCAD/pull/9750,closed,7894,4541,99,11,72,36,2,1,"[{'name': 'Mod: Core'}, {'name': 'Mod: Part'}]",2023-06-09 10:58:55+00:00,2024-04-29 16:41:55+00:00,28100580.0,"325 days, 5:43:00","[{'comment_id': 1487168414, 'comment_body': ""These shouldn't be present in a CPP file"", 'comment_created': datetime.datetime(2024, 2, 13, 4, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'chennes', 'type': 'User'}, {'comment_id': 1487169550, 'comment_body': 'Missing `#include ""PreCompiled.h""`', 'comment_created': datetime.datetime(2024, 2, 13, 4, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'chennes', 'type': 'User'}, {'comment_id': 1487170743, 'comment_body': 'Do you mean\r\n```suggestion\r\n#include <string>\r\n```\r\n?', 'comment_created': datetime.datetime(2024, 2, 13, 4, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'chennes', 'type': 'User'}, {'comment_id': 1487172594, 'comment_body': 'Are these not precompiled?', 'comment_created': datetime.datetime(2024, 2, 13, 4, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chennes', 'type': 'User'}, {'comment_id': 1487809552, 'comment_body': ""I've removed some of these redundant includes in 20424409256ab640ebbc9fe67d23c904a5419db6. Not sure if  more includes should be moved to the precompiled header tho..."", 'comment_created': datetime.datetime(2024, 2, 13, 13, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hlorus', 'type': 'User'}, {'comment_id': 1540585296, 'comment_body': ""The main responsibility of Application is the handling with documents and it should be avoided to add further logic to it. So, all this code should be moved to a separate class e.g. MeasureManager. Since there aren't more instances needed of this class all methods could be static.\r\n\r\nOr it can be a class member of Application which only has a method to access the manager. In this case it should be a std::unique_ptr to avoid to include its header in Application.h This is to considerably reduce build time in case the MeasureManager class will be extended later."", 'comment_created': datetime.datetime(2024, 3, 27, 7, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540594355, 'comment_body': ""All the functions depend on the active document which reduces its reliability and flexibility a lot. FreeCAD is designed to have a MDI and thus all the functions still must work if their owner document is not active.\r\n\r\nIn many cases it's not even checked that the accessed object exists and then a segfault occurs. As an example I used the radius handler pointing to the circular edge of a cone. When switching to another document after changing the radius of the cone a crash occurs:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n#0  /lib/x86_64-linux-gnu/libc.so.6(+0x42520) [0x7ff58c71e520]\r\n#1  0x7ff566c97cba in getLocatedShape(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) from /home/werner/Projects/build_worktree/build3/Mod/Part/Part.so+0x117\r\n#2  0x7ff566c98ff8 in MeasureRadiusHandler(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) from /home/werner/Projects/build_worktree/build3/Mod/Part/Part.so+0x88\r\n#3  0x7ff566caa27d in std::shared_ptr<Part::MeasureRadiusInfo> std::__invoke_impl<std::shared_ptr<Part::MeasureRadiusInfo>, std::shared_ptr<Part::MeasureRadiusInfo> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__invoke_other, std::shared_ptr<Part::MeasureRadiusInfo> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&&) from /home/werner/Projects/build_worktree/build3/Mod/Part/Part.so+0x6b\r\n#4  0x7ff566ca8e58 in std::enable_if<is_invocable_r_v<std::shared_ptr<Part::MeasureInfo>, std::shared_ptr<Part::MeasureRadiusInfo> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>, std::shared_ptr<Part::MeasureInfo> >::type std::__invoke_r<std::shared_ptr<Part::MeasureInfo>, std::shared_ptr<Part::MeasureRadiusInfo> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::shared_ptr<Part::MeasureRadiusInfo> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&&) from /home/werner/Projects/build_worktree/build3/Mod/Part/Part.so+0x6d\r\n#5  0x7ff566ca6d19 in std::_Function_handler<std::shared_ptr<Part::MeasureInfo> (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*), std::shared_ptr<Part::MeasureRadiusInfo> (*)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>::_M_invoke(std::_Any_data const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&&) from /home/werner/Projects/build_worktree/build3/Mod/Part/Part.so+0x6d\r\n#6  0x7ff566fcf233 in std::function<std::shared_ptr<Part::MeasureInfo> (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) const from /home/werner/Projects/build_worktree/build3/Mod/Measure/Measure.so+0x79\r\n#7  0x7ff566fd8b35 in Measure::MeasureRadius::getMeasureInfoFirst() const from /home/werner/Projects/build_worktree/build3/Mod/Measure/Measure.so+0x22f\r\n#8  0x7ff566fd86fe in Measure::MeasureRadius::recalculateRadius() from /home/werner/Projects/build_worktree/build3/Mod/Measure/Measure.so+0x3e\r\n#9  0x7ff566fd86b4 in Measure::MeasureRadius::execute() from /home/werner/Projects/build_worktree/build3/Mod/Measure/Measure.so+0x1c\r\n```\r\nInstead of the two strings (for object and sub-name) you should consider using SubObjectT or PropertyLinkT from App/DocumentObserver.h\r\n\r\nThe whole PR must be checked for accessing the active document as it's wrong in almost all cases."", 'comment_created': datetime.datetime(2024, 3, 27, 7, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540595803, 'comment_body': ""Shouldn't be included as it's not used anywhere."", 'comment_created': datetime.datetime(2024, 3, 27, 7, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540597811, 'comment_body': ""That's a weird use of getModuleName(). It's a static method of the class Type sou you can directly use it  as Type::getModuleName()"", 'comment_created': datetime.datetime(2024, 3, 27, 7, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540599840, 'comment_body': ""Don't use NULL but nullptr."", 'comment_created': datetime.datetime(2024, 3, 27, 7, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540601701, 'comment_body': ""Why does this return a pointer? In the code below it's used like this:\r\n`gp_Lin lin1 = *getLine(vector1, loc1);` that causes a memory leak."", 'comment_created': datetime.datetime(2024, 3, 27, 7, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540603256, 'comment_body': ""I think the (UMF) from the tooltip should be removed as for a user it's not clear what it means and for future translators it will cause some confusion, too."", 'comment_created': datetime.datetime(2024, 3, 27, 7, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540954892, 'comment_body': 'This causes a memory leak. There is no need to create the action on the heap.', 'comment_created': datetime.datetime(2024, 3, 27, 11, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540963014, 'comment_body': 'Several issues:\r\n* Avoid using the active document but instead use the document this view provider is part of. E.g. use ViewProviderDocumentObject::getActiveView()\r\n* If the active view is not a 3d view then `view` is null and will segfault', 'comment_created': datetime.datetime(2024, 3, 27, 11, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540963975, 'comment_body': 'https://github.com/FreeCAD/FreeCAD/pull/9750/files#r1540963014', 'comment_created': datetime.datetime(2024, 3, 27, 11, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540965373, 'comment_body': 'A view provider has a direct access to its GUI document.', 'comment_created': datetime.datetime(2024, 3, 27, 11, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540965595, 'comment_body': 'https://github.com/FreeCAD/FreeCAD/pull/9750/files#r1540963014', 'comment_created': datetime.datetime(2024, 3, 27, 11, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540966836, 'comment_body': ""In new code don't use boost::bind any more but std::bind"", 'comment_created': datetime.datetime(2024, 3, 27, 11, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540970089, 'comment_body': 'Memory leak', 'comment_created': datetime.datetime(2024, 3, 27, 11, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540970543, 'comment_body': 'Memory leak', 'comment_created': datetime.datetime(2024, 3, 27, 11, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540973375, 'comment_body': 'Causes a memory leak because the reference counter will never be decremented to 0.', 'comment_created': datetime.datetime(2024, 3, 27, 12, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540973994, 'comment_body': 'Check possible memory leak', 'comment_created': datetime.datetime(2024, 3, 27, 12, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540974216, 'comment_body': 'Check possible memory leak', 'comment_created': datetime.datetime(2024, 3, 27, 12, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540974488, 'comment_body': 'Check possible memory leak', 'comment_created': datetime.datetime(2024, 3, 27, 12, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540975432, 'comment_body': 'Check possible memory leak', 'comment_created': datetime.datetime(2024, 3, 27, 12, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540975762, 'comment_body': 'Memory leak.', 'comment_created': datetime.datetime(2024, 3, 27, 12, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540976157, 'comment_body': 'Check possible memory leak', 'comment_created': datetime.datetime(2024, 3, 27, 12, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540986442, 'comment_body': 'Strange identation', 'comment_created': datetime.datetime(2024, 3, 27, 12, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540989582, 'comment_body': 'Hmm, the function prints a lot of output messages in error case. Maybe consider to throw an exception instead.', 'comment_created': datetime.datetime(2024, 3, 27, 12, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1540991630, 'comment_body': 'Why does it have to save and restore settings when changing the language?', 'comment_created': datetime.datetime(2024, 3, 27, 12, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1541445874, 'comment_body': 'But then of course `gma.apply(pDraggerOrientation);`\r\nand `auto mat = gma.getMatrix();`', 'comment_created': datetime.datetime(2024, 3, 27, 16, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1541559267, 'comment_body': 'cut & paste code.  save/restore removed.  will look for original source, that probably needs changing as well.', 'comment_created': datetime.datetime(2024, 3, 27, 17, 35, 40, tzinfo=datetime.timezone.utc), 'commenter': 'WandererFan', 'type': 'User'}, {'comment_id': 1543302647, 'comment_body': ""Not quite sure here, shouldn't openinventor's reference counting take care of this? The [documentation](http://www-evasion.imag.fr/Membres/Francois.Faure/doc/inventorMentor/sgi_html/ch13.html#id5493141) says that the reference count of an engine is increased if an output is connected to another field. Therefor the lifetime of matrixEngine should follow pLabelTranslation, am i missing something?"", 'comment_created': datetime.datetime(2024, 3, 28, 16, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hlorus', 'type': 'User'}, {'comment_id': 1543794443, 'comment_body': ""I'm not sure either but you are probably right. I never worked a lot with engines and thus don't know its details."", 'comment_created': datetime.datetime(2024, 3, 28, 22, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wwmayer', 'type': 'User'}, {'comment_id': 1572142516, 'comment_body': ""The selection is passed around with the SubObjectT type. However SubObjectT doesn't seem to have a corresponding python type, therefore a DocumentObjectPy is passed here which might not be ideal."", 'comment_created': datetime.datetime(2024, 4, 19, 10, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hlorus', 'type': 'User'}, {'comment_id': 1572145160, 'comment_body': ""This has been addressed. There's one remaining place where this might be an issue, see: https://github.com/FreeCAD/FreeCAD/pull/9750/files#r1572142516"", 'comment_created': datetime.datetime(2024, 4, 19, 10, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hlorus', 'type': 'User'}]","[{'commit_sha': 'cb0e5b6f9c691d749e5a1f6f65f8e447b250620e', 'committer_username': 'hlorus', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 3, 14, 50, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c054fe64b31b6a8f019bfc7ceeb8961fffc22f48', 'committer_username': 'hlorus', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 3, 14, 50, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce36dcc379b030eeb08640a43f852007673edd96', 'committer_username': 'hlorus', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 3, 14, 50, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2acf5ccab081629d5ae7c396ec6563430c0e71b1', 'committer_username': 'hlorus', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 3, 14, 50, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4c90c07f1c0061fe8ca067f51c39c4e5e56592f', 'committer_username': 'hlorus', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 3, 14, 50, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f5dd40fa727548f9eac5c30fb0444307b22c8a7', 'committer_username': 'hlorus', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 3, 14, 50, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '832a0653fabfdbabc7158bdab76b0d94731cf0fb', 'committer_username': 'hlorus', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 3, 14, 50, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36d16b22430e14351147e2666faf4d58130bfe8e', 'committer_username': 'hlorus', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 3, 14, 50, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47fd87af511cc99cf0b10bb7b97169a727a5ce09', 'committer_username': 'hlorus', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 3, 14, 50, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e070b61cdc036e14fc51406cd045c5f8f237da72', 'committer_username': 'WandererFan', 'committer_name': 'WandererFan', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 13, 18, 58, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ff4da5a274212ac7bb4b8ae4e02f5d5c13ded8e', 'committer_username': 'hlorus', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 3, 14, 50, 42, tzinfo=datetime.timezone.utc)}]",,64740362,,User,,3,,7,105

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
5736080,FreeCAD,FreeCAD/FreeCAD,C++,3931,18634,543,698,38495,2009,17,151,"[{'id': 2023920687, 'number': 15907, 'closed': datetime.datetime(2024, 8, 19, 16, 25, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 8, 17, 7, 20, 6, tzinfo=datetime.timezone.utc), 'time_taken': 205499.0, 'time_delta': '2 days, 9:04:59', 'additions': 14, 'deletions': 6, 'state': 'closed'}, {'id': 2017034472, 'number': 15874, 'closed': datetime.datetime(2024, 8, 19, 16, 16, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 8, 13, 12, 7, 31, tzinfo=datetime.timezone.utc), 'time_taken': 533329.0, 'time_delta': '6 days, 4:08:49', 'additions': 15, 'deletions': 11, 'state': 'closed'}, {'id': 1953614810, 'number': 15190, 'closed': datetime.datetime(2024, 7, 14, 0, 56, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 4, 13, 6, 38, tzinfo=datetime.timezone.utc), 'time_taken': 820185.0, 'time_delta': '9 days, 11:49:45', 'additions': 152, 'deletions': 51, 'state': 'closed'}, {'id': 1949734793, 'number': 15122, 'closed': None, 'created': datetime.datetime(2024, 7, 2, 15, 6, 12, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 132, 'deletions': 36, 'state': 'open'}, {'id': 1944273104, 'number': 15010, 'closed': datetime.datetime(2024, 7, 15, 4, 46, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 28, 12, 37, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1440489.0, 'time_delta': '16 days, 16:08:09', 'additions': 381, 'deletions': 19, 'state': 'closed'}, {'id': 1940398240, 'number': 14962, 'closed': datetime.datetime(2024, 7, 8, 15, 42, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 26, 16, 13, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1034969.0, 'time_delta': '11 days, 23:29:29', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 1935887676, 'number': 14918, 'closed': datetime.datetime(2024, 7, 21, 4, 6, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 24, 16, 13, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2289191.0, 'time_delta': '26 days, 11:53:11', 'additions': 122, 'deletions': 217, 'state': 'closed'}, {'id': 1912458537, 'number': 14591, 'closed': datetime.datetime(2024, 6, 17, 15, 52, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 10, 15, 11, 3, tzinfo=datetime.timezone.utc), 'time_taken': 607296.0, 'time_delta': '7 days, 0:41:36', 'additions': 1, 'deletions': 11, 'state': 'closed'}, {'id': 1900366895, 'number': 14470, 'closed': datetime.datetime(2024, 7, 1, 15, 51, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 3, 9, 12, 45, tzinfo=datetime.timezone.utc), 'time_taken': 2443146.0, 'time_delta': '28 days, 6:39:06', 'additions': 14, 'deletions': 3, 'state': 'closed'}, {'id': 1899551108, 'number': 14454, 'closed': datetime.datetime(2024, 6, 7, 3, 24, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 2, 13, 56, 38, tzinfo=datetime.timezone.utc), 'time_taken': 394072.0, 'time_delta': '4 days, 13:27:52', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1873180806, 'number': 14050, 'closed': datetime.datetime(2024, 5, 20, 15, 56, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 16, 11, 3, 20, tzinfo=datetime.timezone.utc), 'time_taken': 363204.0, 'time_delta': '4 days, 4:53:24', 'additions': 2, 'deletions': 70, 'state': 'closed'}, {'id': 1869363755, 'number': 14011, 'closed': datetime.datetime(2024, 5, 20, 15, 54, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 14, 16, 4, 2, tzinfo=datetime.timezone.utc), 'time_taken': 517804.0, 'time_delta': '5 days, 23:50:04', 'additions': 1293, 'deletions': 19, 'state': 'closed'}, {'id': 1857781712, 'number': 13859, 'closed': datetime.datetime(2024, 5, 13, 15, 47, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 7, 9, 1, 26, tzinfo=datetime.timezone.utc), 'time_taken': 542744.0, 'time_delta': '6 days, 6:45:44', 'additions': 9, 'deletions': 0, 'state': 'closed'}, {'id': 1857682052, 'number': 13857, 'closed': datetime.datetime(2024, 5, 13, 15, 45, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 7, 8, 5, 3, tzinfo=datetime.timezone.utc), 'time_taken': 546006.0, 'time_delta': '6 days, 7:40:06', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 1856484646, 'number': 13848, 'closed': datetime.datetime(2024, 5, 27, 16, 7, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 6, 16, 3, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1814658.0, 'time_delta': '21 days, 0:04:18', 'additions': 38, 'deletions': 7, 'state': 'closed'}, {'id': 1853063413, 'number': 13811, 'closed': datetime.datetime(2024, 5, 13, 15, 39, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 3, 9, 11, 1, tzinfo=datetime.timezone.utc), 'time_taken': 887297.0, 'time_delta': '10 days, 6:28:17', 'additions': 37, 'deletions': 99, 'state': 'closed'}, {'id': 1853025252, 'number': 13810, 'closed': datetime.datetime(2024, 6, 17, 15, 55, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 3, 8, 43, 18, tzinfo=datetime.timezone.utc), 'time_taken': 3913943.0, 'time_delta': '45 days, 7:12:23', 'additions': 204, 'deletions': 776, 'state': 'closed'}, {'id': 1833827745, 'number': 13588, 'closed': datetime.datetime(2024, 4, 24, 13, 15, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 22, 6, 13, 58, tzinfo=datetime.timezone.utc), 'time_taken': 198096.0, 'time_delta': '2 days, 7:01:36', 'additions': 0, 'deletions': 4546, 'state': 'closed'}, {'id': 1626046316, 'number': 11602, 'closed': datetime.datetime(2023, 12, 11, 19, 18, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 1, 17, 8, 37, tzinfo=datetime.timezone.utc), 'time_taken': 871791.0, 'time_delta': '10 days, 2:09:51', 'additions': 24, 'deletions': 61, 'state': 'closed'}, {'id': 1385990463, 'number': 9750, 'closed': datetime.datetime(2024, 4, 29, 16, 41, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 9, 10, 58, 55, tzinfo=datetime.timezone.utc), 'time_taken': 28100580.0, 'time_delta': '325 days, 5:43:00', 'additions': 7894, 'deletions': 4541, 'state': 'closed'}]"
