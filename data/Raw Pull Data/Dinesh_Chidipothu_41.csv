pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
431897303,auth: Add Sign in with Apple support. (Browser flow),"This implementation overrides some of PSA's internal backend
functions to handle `state` value with redis as the standard
way doesn't work because of apple sending required details
in the form of POST request.

Includes a mixin test class that'll be useful for testing
Native auth flow.

**Testing Plan:** <!-- How have you tested? -->
Automated tests and manual testing of webflow to check if everything works well
CI: https://circleci.com/gh/chdinesh1089/zulip

**GIFs or Screenshots:** <!-- If a UI change.  See:
  https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
  -->


<!-- Also be sure to make clear, coherent commits:
  https://zulip.readthedocs.io/en/latest/contributing/version-control.html
  -->
",False,15274,https://api.github.com/repos/zulip/zulip/pulls/15274,https://github.com/zulip/zulip/pull/15274,closed,492,11,21,1,2,4,1,0,[{'name': 'size: XL'}],2020-06-09 15:46:06+00:00,2020-06-10 00:31:42+00:00,31536.0,8:45:36,"[{'comment_id': 437636619, 'comment_body': 'this comment probably becomes irrelevant now and should be deleted?', 'comment_created': datetime.datetime(2020, 6, 9, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 437638626, 'comment_body': ""We need to include `decode_id_token` override, with the native-flow logic stripped away from it. It's important, because we fix some flaws from upstream there - not catching some exception, and raising an exception incorrectly. We should have those fixes in this PR."", 'comment_created': datetime.datetime(2020, 6, 9, 18, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 437757734, 'comment_body': ""or maybe we should keep this, I'm not sure"", 'comment_created': datetime.datetime(2020, 6, 9, 22, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 437797820, 'comment_body': 'I think we could still move this conditional to live in `zerver/views/portico.py` to edit the `display_icon` for the Apple backend for the two situations.', 'comment_created': datetime.datetime(2020, 6, 10, 0, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': '70751f16023abe1328d010dd4e1c4171857ea803', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}]",Dinesh Ch,44665669,,User,,29,,19,20
390346282,auth: Add apple auth support.,"<!-- What's this PR for?  (Just a link to an issue is fine.) -->
Add support for Sign In with Apple.

**Testing Plan:** <!-- How have you tested? -->
Added test class for apple auth.

closes: #14168 ",False,14235,https://api.github.com/repos/zulip/zulip/pulls/14235,https://github.com/zulip/zulip/pull/14235,closed,200,11,2,1,29,147,1,0,[{'name': 'size: XL'}],2020-03-18 10:20:38+00:00,2020-06-14 23:21:10+00:00,7650032.0,"88 days, 13:00:32","[{'comment_id': 394707360, 'comment_body': 'Let\'s be sure to consistently use the same terminology as Apple\'s docs do. The thing created through these instructions is a ""private key"", or a ""Sign in with Apple private key"", not a ""certificate"".\r\n\r\n(This particular distinction is actually a very important one, beyond matching Apple\'s terminology. Certificates generally are not secret -- they are public things that you might share widely, showing them to anyone you want to talk to. Private keys are, well, private -- it\'s essential not to let anyone else see a copy of one.)\r\n', 'comment_created': datetime.datetime(2020, 3, 19, 0, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 394707546, 'comment_body': 'similarly, this is a ""Services ID"", I think', 'comment_created': datetime.datetime(2020, 3, 19, 0, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 394707634, 'comment_body': 'and I see ""key identifier"" in the docs, but not ""Key ID""', 'comment_created': datetime.datetime(2020, 3, 19, 0, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 394707930, 'comment_body': 'And is there something in particular that the name ""client_id"" refers to, or can we just say ""Services ID"" here again?\r\n', 'comment_created': datetime.datetime(2020, 3, 19, 0, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 394708829, 'comment_body': ""Let's use a colon in the argument to `chown`, not a dot -- so write `zulip:zulip`, not `zulip.zulip`.\r\n\r\nTIL that a dot seems to work here! But that's undocumented (in at least the manpage I get with `man chown`, for GNU `chown`), and I suspect nonstandard. The conventional thing is a colon.\r\n"", 'comment_created': datetime.datetime(2020, 3, 19, 0, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 394709169, 'comment_body': 'Same comments apply as to the other, prod version of these instructions.', 'comment_created': datetime.datetime(2020, 3, 19, 0, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 394775592, 'comment_body': 'One other comment:\r\n\r\nDoes this produce a button that follows the guidelines Apple provides specifically for ""Sign in with Apple"" buttons? See here:\r\nhttps://developer.apple.com/design/human-interface-guidelines/sign-in-with-apple/overview/buttons/\r\n\r\nThere is provision there for making a custom button. But there are a number of details if so.', 'comment_created': datetime.datetime(2020, 3, 19, 3, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 394775923, 'comment_body': 'Alternatively, Apple provides on a CDN complete buttons in a range of styles:\r\nhttps://developer.apple.com/documentation/signinwithapplejs/incorporating_sign_in_with_apple_into_other_platforms\r\n\r\nNote in particular the `locale` parameter, for controlling the language of the text.', 'comment_created': datetime.datetime(2020, 3, 19, 3, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 394985761, 'comment_body': 'we can just say ""service ID"" but the `python-social-auth` has it named `SOCIAL_AUTH_APPLE_ID_CLIENT`. so thought using `client_id` is good.\r\nI referred the doc in this [PR](https://github.com/python-social-auth/social-docs/pull/68/files#diff-956fdef252a7f17b6e232fe3c182ce05) for writing those instructions, which is why I used the name `client_id`. I think changing it and having just ""service ID"" is fine as we\'ll have the instruction clearly to set that `SOCIAL_AUTH_APPLE_ID_CLIENT`. ', 'comment_created': datetime.datetime(2020, 3, 19, 12, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 394998914, 'comment_body': '> Does this produce a button that follows the guidelines Apple provides specifically for ""Sign in with Apple"" buttons?\r\n\r\nDidn\'t know much about `locale` parameter, So thought we\'ll have problem with translations.\r\nwill try to using CDN complete buttons provided by apple.', 'comment_created': datetime.datetime(2020, 3, 19, 12, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 395073840, 'comment_body': 'The buttons provided by apple have the logo centre aligned meaning it was just infront of ""Sign in with Apple"" text. If we use that it makes that look very odd from other ""Log in with X"" buttons. May be should create a custom one with their guidelines. If we are doing it we might want to adjust other buttons also( like changing ""Log in"" to ""Sign in"", maintaining the ratio of font-size to button size suggested by apple), so this would blend in the page well like the other buttons.', 'comment_created': datetime.datetime(2020, 3, 19, 14, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 395416009, 'comment_body': 'Sounds good. Note though that it\'s ""Services ID"" -- Apple\'s docs consistently spell and capitalize it that way, and to avoid confusion we should do the same.', 'comment_created': datetime.datetime(2020, 3, 20, 2, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 395417674, 'comment_body': ""Hmm, I see.\r\n\r\nI'd like to avoid blocking this on any broader design changes to our auth buttons. So for getting this merged, what I'd like to prioritize is\r\n* Have the Apple button compatible with Apple's guidelines.\r\n* Keep the work simple, to focus on the rest of it and getting it to something we can merge and deploy.\r\n\r\nI think it's OK to push to a followup, for after this is merged, the task of:\r\n* Make the design of the Apple auth button in line with our other auth buttons.\r\n\r\nHow's that sound?\r\n\r\nFor that set of priorities, I think the simplest way will most likely be to use a button from the CDN, and accept that the logo is placed differently from the other buttons' logos. But a custom button following the guidelines would also be good if that's easier.\r\n"", 'comment_created': datetime.datetime(2020, 3, 20, 2, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 395478025, 'comment_body': ""Okay, for now, we'll use the button from CDN."", 'comment_created': datetime.datetime(2020, 3, 20, 7, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 395587677, 'comment_body': 'Why do we need this conversion?', 'comment_created': datetime.datetime(2020, 3, 20, 11, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 395587803, 'comment_body': 'It would be best if we can avoid this kind of thing', 'comment_created': datetime.datetime(2020, 3, 20, 11, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 395589022, 'comment_body': ""What's the reason for using `get_secret` for  the id_client? "", 'comment_created': datetime.datetime(2020, 3, 20, 11, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 395610096, 'comment_body': 'It\'s because we are doing `backend.upper()` below to get `key_setting`. \r\nshould I change it and add a new line with `if backend == ""apple-id""`?', 'comment_created': datetime.datetime(2020, 3, 20, 12, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 395611664, 'comment_body': ""I'm thinking we'll have id_client in `dev_secrets.conf` or `zulip_secrets.conf`."", 'comment_created': datetime.datetime(2020, 3, 20, 12, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 395876208, 'comment_body': 'Do you want a key *identifier* here, or an actual key?\r\n\r\nSome of the other code in this PR looks like it wants to interpret this as an actual key. (Or in other words: a secret.) But these instructions say to put the mere key identifier here, which is just a kind of name for a key.\r\n\r\nIf the instructions are right, the name should agree with it. If not, vice versa :slightly_smiling_face: ', 'comment_created': datetime.datetime(2020, 3, 20, 20, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 395879404, 'comment_body': '... Oof, I see, the confusion is there in the [upstream code we\'re using](https://github.com/python-social-auth/social-core/pull/409/files):\r\n```python\r\n    def generate_client_secret(self):\r\n￼        now = int(time.time())\r\n￼        client_id = self.setting(""CLIENT"")\r\n￼        team_id = self.setting(""TEAM"")\r\n￼        key_id = self.setting(""KEY"")\r\n￼        private_key = self.get_private_key()\r\n```\r\n\r\nSo be it, then.', 'comment_created': datetime.datetime(2020, 3, 20, 20, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 395884189, 'comment_body': 'How about we make the backend name just `""apple""`, and the setting names just `SOCIAL_AUTH_APPLE_TEAM` and so on?\r\n\r\nThat would resolve the need for any wrinkle in this logic.\r\n\r\nIt\'d also make the settings names rather easier to understand, I think -- it\'s kind of confusing that e.g. the setting for the ""Team ID"" has a name that ends in `ID_TEAM`. Which is happening because of this collision, or coincidence, that the word ""ID"" is being used for two different things there in quick succession.\r\n\r\nI see that upstream sets `name = ""apple-id""`, but we\'re subclassing it and overriding that anyway already.\r\n', 'comment_created': datetime.datetime(2020, 3, 20, 20, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 395885155, 'comment_body': '(This is another example of where it\'s confusing that there\'s an extra ""id"" here before ""client"" :smile: -- the name is trying to say ""social auth / Apple ID / client"", but as you can see, it\'s very natural to read it instead as ""social auth / Apple / id_client"". Even though ""id_client"" is a bit of a mysterious name in itself.)\r\n', 'comment_created': datetime.datetime(2020, 3, 20, 20, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 395887094, 'comment_body': 'Alternatively, ""appleid"". That\'s what Apple uses in the URLs that appear in this system -- like https://appleid.apple.com/auth/authorize and https://appleid.cdn-apple.com/appleid/button . And it avoids the confusion of reading e.g. ""APPLE_ID_TEAM"" like ""Apple / ID team"", as well as any need to juggle hyphens vs. underscores.\r\n\r\n', 'comment_created': datetime.datetime(2020, 3, 20, 20, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 396089083, 'comment_body': 'Shouldnt this be `{% elif backend.display_icon %}`? Could you also show a screenshot of the button?', 'comment_created': datetime.datetime(2020, 3, 22, 12, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 396089323, 'comment_body': '`/apple` now that we changed backend name', 'comment_created': datetime.datetime(2020, 3, 22, 12, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 396089412, 'comment_body': 'we dont have the `_ID_` part anymore', 'comment_created': datetime.datetime(2020, 3, 22, 12, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 396089442, 'comment_body': '`/etc`/, typo :slightly_smiling_face: ', 'comment_created': datetime.datetime(2020, 3, 22, 12, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 396089556, 'comment_body': 'attempt - typo :slightly_smiling_face: ', 'comment_created': datetime.datetime(2020, 3, 22, 12, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 396089605, 'comment_body': '`attempt the ""Sign in with Apple"" flow` would perhaps be a nicer phrasing?', 'comment_created': datetime.datetime(2020, 3, 22, 12, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 396089946, 'comment_body': 'missing whitespace after {{', 'comment_created': datetime.datetime(2020, 3, 22, 12, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 396090121, 'comment_body': 'we fill want `full_name_validated = True` on this backend I think, for a smoother sign up experience', 'comment_created': datetime.datetime(2020, 3, 22, 12, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 396090294, 'comment_body': 'Ah, this reminds me - we will also want the same for the Sign up button, with the button rendering adjustment in `accounts_home.html` (analogical to `login.html`)', 'comment_created': datetime.datetime(2020, 3, 22, 12, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 396126063, 'comment_body': 'I think using `get_secret` should be right here, because during development to this when we want to set this value to something, it becomes an obstacle while pushing to github. In production we ask the user to set this value in `prod_settings_template.py`.', 'comment_created': datetime.datetime(2020, 3, 22, 18, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 396128142, 'comment_body': ""ah, I messed it up because I was having linting issues as `<button` closing tag`>` wasn't set properly. Now I've edited it, but had to set `font-size: 0px;` in css for apple button."", 'comment_created': datetime.datetime(2020, 3, 22, 18, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 396130926, 'comment_body': ""Okay! added that. also it wouldn't be any problem as the user can change the name later in settings."", 'comment_created': datetime.datetime(2020, 3, 22, 19, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 396130933, 'comment_body': 'Oh, I missed it. Apple has only two buttons. One saying ""Continue with Apple"" and other ""Sign in with Apple"". set both login and register with ""Sign in with apple"".', 'comment_created': datetime.datetime(2020, 3, 22, 19, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 396802672, 'comment_body': 'Please ctrl+F for ""service id"" and fix all occurrences :-) (these, and there\'s one remaining in another file too)', 'comment_created': datetime.datetime(2020, 3, 23, 22, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 396805165, 'comment_body': 'Some of the same edits as Mateusz mentioned previously for the prod instructions:\r\n* update URL\r\n* no `_id_`\r\n', 'comment_created': datetime.datetime(2020, 3, 23, 22, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 396805359, 'comment_body': '> Key Identity\r\n', 'comment_created': datetime.datetime(2020, 3, 23, 22, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 396807997, 'comment_body': 'URL, not URI.\r\n\r\n[The standard term is ""URL""](https://chat.zulip.org/#narrow/stream/92-learning/topic/URLs/near/794826). Sometimes an existing API says ""URI"" and it makes sense to match it; but here, all the Apple docs say ""URL"" too.\r\n\r\nThis also applies to the prod instructions.\r\n', 'comment_created': datetime.datetime(2020, 3, 23, 23, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 396808673, 'comment_body': 'For the ""sign *up*"" case, let\'s use the ""Continue with ..."" button. That\'s actually a more accurate meaning for that case than ""sign in"" is, even though the latter has a word in common.\r\n', 'comment_created': datetime.datetime(2020, 3, 23, 23, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 396809402, 'comment_body': ""Missing comma gives this the wrong meaning -- there's an element `'vi_VIzh_CN'` :stuck_out_tongue: \r\n"", 'comment_created': datetime.datetime(2020, 3, 23, 23, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 396810420, 'comment_body': ""This should get a comment saying where it comes from -- in particular a link to https://developer.apple.com/documentation/signinwithapplejs/incorporating_sign_in_with_apple_into_other_platforms .\r\n\r\nI'm also kind of confused by how it's mostly, but not quite, in order. How about putting it in the same order it appears in on that docs page? That'll make it easier to scan with the eye to see they match."", 'comment_created': datetime.datetime(2020, 3, 23, 23, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 396812129, 'comment_body': ""This function would be great to have a few tests for.\r\n\r\nTo make that clean, one way is to pull it out as a top-level function, which can take `request.LANGUAGE_CODE` as an argument. Like this:\r\n```py3\r\ndef get_apple_locale(django_language_code: str) -> str:\r\n  # ...\r\n```\r\n\r\nThere are also some changes I'm tempted to suggest to the algorithm. But that will be much easier to play with once the function is extracted and has some tests.\r\n"", 'comment_created': datetime.datetime(2020, 3, 23, 23, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 397104468, 'comment_body': 'Looking at this [picture](https://d33wubrfki0l68.cloudfront.net/c56583180a9951cfb2dc091c0f87a68498df50bb/d0fd5/assets-jekyll/blog/sign-in-with-apple/find-your-key-id-860ac5b63469f699f3c389908d934abf4622c87bccca8c1e178a597c7038cc42.png) from https://developer.okta.com/blog/2019/06/04/what-the-heck-is-sign-in-with-apple, changing that to Key ID.', 'comment_created': datetime.datetime(2020, 3, 24, 12, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 397105142, 'comment_body': 'Ohh, Thanks for pointing to czo topic', 'comment_created': datetime.datetime(2020, 3, 24, 12, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 397344962, 'comment_body': ""> I'm also kind of confused by how it's mostly, but not quite, in order. \r\n\r\nThat's because I shuffled just some at end of each line to have equal line length for all the lines.\r\n\r\nI've put them in order and removed these values `'en_GB', 'fr_CA', 'es_MX', 'pt_BR', 'zh_HK',zh_TW'` as they have same language code, thinking these are less popular than those left in the list\r\n\r\n"", 'comment_created': datetime.datetime(2020, 3, 24, 17, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 397345023, 'comment_body': 'Added one test which contains list of possible language codes and its corresponding locale, then asserts locale equal to the  return value  `get_apple_locale(language_code)`', 'comment_created': datetime.datetime(2020, 3, 24, 17, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 405424267, 'comment_body': ""as we've noticed this actually needs `/` at the end."", 'comment_created': datetime.datetime(2020, 4, 8, 10, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 405433312, 'comment_body': ""wouldn't `apple_locale` be a better name?"", 'comment_created': datetime.datetime(2020, 4, 8, 10, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 411771519, 'comment_body': 'This link text should agree with the title of the doc it links to:\r\n> Create a Sign in with Apple private key\r\n\r\nA ""certificate"" is a very different kind of object from a private key.\r\n', 'comment_created': datetime.datetime(2020, 4, 20, 23, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 411772615, 'comment_body': ""This comes before creating the private key.\r\n\r\nHere's a handy banner Apple shows when you do any one of these steps (as they apparently realize that the process is too complicated and underdocumented):\r\n![image](https://user-images.githubusercontent.com/28173/79810647-62ef4580-8328-11ea-8c6f-04fb343df40e.png)\r\n"", 'comment_created': datetime.datetime(2020, 4, 21, 0, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 411774005, 'comment_body': '```suggestion\r\n* [Create a Services ID](https://help.apple.com/developer-account/?lang=en#/dev1c0e25352). When prompted for a ""Return URL"", enter\r\n  `http://zulipdev.com:9991/complete/apple/` .\r\n```\r\n\r\nBased on the text in their UI here:\r\n![image](https://user-images.githubusercontent.com/28173/79810838-e3ae4180-8328-11ea-9bc7-17239138a502.png)\r\n', 'comment_created': datetime.datetime(2020, 4, 21, 0, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 411779091, 'comment_body': '(Same comments as above, modified as appropriate.)\r\n', 'comment_created': datetime.datetime(2020, 4, 21, 0, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 412433993, 'comment_body': 'made the changes. do we want to make ""Services ID"", ""Service ID""? In the apple banner screenshot they\'ve written ""Service ID""', 'comment_created': datetime.datetime(2020, 4, 21, 19, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 412505056, 'comment_body': 'Well spotted! :smile: \r\n\r\nThey seem to be not quite consistent about it. The docs we\'re linking to all say ""Services ID"" with the plural, though -- or at least all the places I remember spotting did. They also say it that way in the part of the UI where you actually go to create one:\r\n![image](https://user-images.githubusercontent.com/28173/79915773-6e03ad80-83dc-11ea-98de-ec2dc538be00.png)\r\nSo I think that\'s the version to stick to, for the least possible amount of inconsistency.\r\n', 'comment_created': datetime.datetime(2020, 4, 21, 21, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 415838946, 'comment_body': 'okay, thanks for clarifying. I really like that you share screenshots for most things to make it clear.', 'comment_created': datetime.datetime(2020, 4, 27, 14, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 415838956, 'comment_body': ""```suggestion\r\n        state = self.state_token()\r\n        put_dict_in_redis(redis_client, 'apple_auth_{token}',\r\n                          data_to_store, self.REDIS_EXPIRATION_SECONDS,\r\n                          token=state)\r\n\r\n        return state\r\n```\r\n\r\nthat's simpler i think?"", 'comment_created': datetime.datetime(2020, 4, 27, 14, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 415843290, 'comment_body': 'why this exception specifically?', 'comment_created': datetime.datetime(2020, 4, 27, 14, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 415844402, 'comment_body': 'I think we should avoid this import and just use `settings.SOCIAL_...` the way we always do :thinking: ', 'comment_created': datetime.datetime(2020, 4, 27, 14, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 415847466, 'comment_body': 'the original `validate_state` function had that when both states do not match. So, It is similar here if we do not get redis_data as it means we get a wrong state value.', 'comment_created': datetime.datetime(2020, 4, 27, 14, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 415848199, 'comment_body': ""yes, it's much simpler thanks!\r\n"", 'comment_created': datetime.datetime(2020, 4, 27, 14, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 415860483, 'comment_body': 'changed.\r\n', 'comment_created': datetime.datetime(2020, 4, 27, 14, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 418693979, 'comment_body': ""`token=state`, we don't do the whitespaces when specifying kwargs, as a convention\r\n```suggestion\r\n                          token=state)\r\n```"", 'comment_created': datetime.datetime(2020, 5, 1, 19, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 418694349, 'comment_body': '```suggestion\r\n        formatted_request_state = ""apple_auth_"" + request_state\r\n```\r\n\r\n(whitespaces around arithmetic operations as a convention)', 'comment_created': datetime.datetime(2020, 5, 1, 19, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 418694595, 'comment_body': 'Makes sense!', 'comment_created': datetime.datetime(2020, 5, 1, 19, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 418694917, 'comment_body': ""This will be more readable without the `else` and it's redundant as the `if` above `raises` anyway"", 'comment_created': datetime.datetime(2020, 5, 1, 19, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 418695971, 'comment_body': 'debugprint got lost here :slightly_smiling_face: ', 'comment_created': datetime.datetime(2020, 5, 1, 19, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 418696813, 'comment_body': 'we should put this function definition above the test cases, like in other classes', 'comment_created': datetime.datetime(2020, 5, 1, 19, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 418699319, 'comment_body': ""This + the `decode_id_token` mock do the job, though it would be nicer if we managed to actually make a valid `id_token` here. If it's difficult, then probably not worth it, but look at how the PSA apple backend implementation creates some data:\r\n```\r\n    def generate_client_secret(self):\r\n        now = int(time.time())\r\n        client_id = self.setting('CLIENT')\r\n        team_id = self.setting('TEAM')\r\n        key_id = self.setting('KEY')\r\n        private_key = self.get_private_key()\r\n\r\n        headers = {'kid': key_id}\r\n        payload = {\r\n            'iss': team_id,\r\n            'iat': now,\r\n            'exp': now + self.TOKEN_TTL_SEC,\r\n            'aud': self.TOKEN_AUDIENCE,\r\n            'sub': client_id,\r\n        }\r\n\r\n        return jwt.encode(payload, key=private_key, algorithm='ES256',\r\n                          headers=headers)\r\n```\r\n\r\nperhaps we can use the same method to generate `id_token` with the same data structure that the real Apple-generated `id_token` use? We have the private key in test fixtures already."", 'comment_created': datetime.datetime(2020, 5, 1, 19, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 418699493, 'comment_body': ""```suggestion\r\n                                       'Full Name', skip_registration_form=False)\r\n```"", 'comment_created': datetime.datetime(2020, 5, 1, 19, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 418701503, 'comment_body': ""Makes sense, though unfortunate we have to do that :cry: What we can do to avoid polluting this helper function with this apple-specific logic, I think we can do a different trick and override `stage_two_of_registration` in the apple backend to simply call `super().stage_two_of_registration(...)` with `expected_final_name=''`? Same effect, though more hacky - but we manage to keep this helper cleaner at least, so might be worth it"", 'comment_created': datetime.datetime(2020, 5, 1, 19, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 418706204, 'comment_body': ""the actual `decode_id_token` gets public key from https://appleid.apple.com/auth/keys and decodes `id_token`. so, we'll have to make a different private key(we could use the one we have too), encode it, use the public key that is pair of private key.\r\n\r\nThe reason behind mocking it was that I was thinking testing `decode_id_token` is already done by PSA and we wouldn't need it.\r\n\r\nShall I try doing it? We would probably have to add some extra code there to encode `account_data_dict` to get `id_token` there\r\n"", 'comment_created': datetime.datetime(2020, 5, 1, 19, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 418715751, 'comment_body': ""I'm not sure if I understood the right way about override, you'e saying that we'll just make the content of the overriden function this?\r\n``` \r\nsuper().stage_two_of_registration(......,expected_final_name='')\r\n```\r\nIf we do that it'd fail the test because we cannot have full name here to be empty string I guess.\r\n```\r\n# Click confirm registration button.\r\n            result = self.client_post(\r\n                '/accounts/register/',\r\n                {'full_name': expected_final_name,\r\n                 'key': confirmation_key,\r\n                 'terms': True})\r\n```\r\nNow I see that that change is only for one test `test_auth_registration_with_no_name_sent_from_apple`. so, I'll copy the contents of `stage_two_of registration` to only have relevant parts."", 'comment_created': datetime.datetime(2020, 5, 1, 20, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 418723480, 'comment_body': 'changed', 'comment_created': datetime.datetime(2020, 5, 1, 20, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 418724953, 'comment_body': ""Didn't knew. Thanks! changed it."", 'comment_created': datetime.datetime(2020, 5, 1, 20, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 422224410, 'comment_body': 'Could this be replaced with a simple RequestsMock of the apple url to return the JWK as http response?', 'comment_created': datetime.datetime(2020, 5, 8, 15, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 422227262, 'comment_body': '```suggestion\r\n# enter `https://zulip.example.com/complete/apple/`.\r\n```', 'comment_created': datetime.datetime(2020, 5, 8, 16, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 422227720, 'comment_body': '```suggestion\r\n# (3) You\'ll now have a ""Services ID"" (eg: com.application.your), a ""Key ID""\r\n```', 'comment_created': datetime.datetime(2020, 5, 8, 16, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 422693951, 'comment_body': 'yes, replaced it.', 'comment_created': datetime.datetime(2020, 5, 10, 20, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 427305194, 'comment_body': 'I think we need to do LOGIN_URL as well?', 'comment_created': datetime.datetime(2020, 5, 19, 13, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 427306044, 'comment_body': ""I'm a bit confused about why this is even working without overriding LOGIN_URL"", 'comment_created': datetime.datetime(2020, 5, 19, 13, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 427306941, 'comment_body': ""This should subclass SocialAuthBase because `AppleIdAuthBackendTest` has some tests that don't make sense to run in the native flow context"", 'comment_created': datetime.datetime(2020, 5, 19, 13, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 427307182, 'comment_body': 'The helper functions from AppleIdAuthBackendTest that we need here can be extracted into a mixin class.', 'comment_created': datetime.datetime(2020, 5, 19, 13, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 427308519, 'comment_body': ""I think we should just override `prepare_login_url_and_headers` to do `super().prepare_login_url_and_headers` and then this logic above - because that's where the url construction naturally belongs."", 'comment_created': datetime.datetime(2020, 5, 19, 13, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 427309059, 'comment_body': ""Can you add comments on these two disabled tests explaining why we're doing that for the native flow?"", 'comment_created': datetime.datetime(2020, 5, 19, 13, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 427441901, 'comment_body': ""It works because we set ` alternative_start_url=self.AUTH_FINISH_URL` in `prepare_login_url_and_headers` call.\r\nwe cannot use it for signup case because even if we give an `alternative_start_url` it's gets  changed to `SIGNUP_URL`. (I guess it makes sense to have it like that for other backends)"", 'comment_created': datetime.datetime(2020, 5, 19, 16, 36, 16, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 427595519, 'comment_body': 'added.', 'comment_created': datetime.datetime(2020, 5, 19, 20, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 427596034, 'comment_body': 'created a mixin class `AppleAuthMixin`', 'comment_created': datetime.datetime(2020, 5, 19, 20, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 427597673, 'comment_body': 'I think we do not need to change `LOGIN_URL` and we will not be having a `LOGIN_URL` for native test class as we do not include that in the mixin. The tests should work perfectly as we do not go to `LOGIN_URL` at any point in native flow afaik.', 'comment_created': datetime.datetime(2020, 5, 19, 21, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 427613660, 'comment_body': 'Tests coverage isn’t full because __unittest_skip = False isn’t set here. Will fix it.', 'comment_created': datetime.datetime(2020, 5, 19, 21, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 428113675, 'comment_body': ""There's this test `test_social_auth_session_fields_cleared_correctly` that uses actual `prepare_login_url_and_headers` which uses actual `LOGIN_URL` and doesn't make use of `social_auth_test`. \r\nIf we're using the actual `LOGIN_URL` there's no difference with running this test in `AppleIdAuthBackendTest` and `AppleAuthBackendNativeFlowTest`.\r\n\r\nI added a test overriding this doing it right way for this flow. "", 'comment_created': datetime.datetime(2020, 5, 20, 15, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 428239626, 'comment_body': 'Fixed it! could you review again @mateuszmandera :slightly_smiling_face: \r\n', 'comment_created': datetime.datetime(2020, 5, 20, 18, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 428291084, 'comment_body': '@mateuszmandera should we just be moving `next` into the setting and using the setting here?', 'comment_created': datetime.datetime(2020, 5, 20, 20, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 428629872, 'comment_body': 'We have our own plumbing of the `next` parameter throughout the auth process, so adding it to `SOCIAL_AUTH_FIELDS_STORED_IN_SESSION` seems error prone. Would be nice to clean it up if possible though, as a follow-up perhaps', 'comment_created': datetime.datetime(2020, 5, 21, 12, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 428633578, 'comment_body': ""Shouldn't this be `App ID`, not `Services ID`? At least that's what seems right based on @chrisbobbe testing"", 'comment_created': datetime.datetime(2020, 5, 21, 12, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 436229160, 'comment_body': ""A few requests:\r\n* Let's move most of this documentation to `docs/production/authentication-methods.md`; that's HTML, so we can do links and things, and is easier to update (`prod_settings_template.py` gets copied at installation and never updated).\r\n* Let's order the comment block for Apple auth just before `AzureAD` in this file; it's not something individual self-hosted installations are likely to use often.  Google OAuth, the one the most people configure, should still be first.\r\n* Let's put quotes around the example strings, since it's not obvious to a sysadmin who may not know Python what format this file is and that you need to quote strings."", 'comment_created': datetime.datetime(2020, 6, 6, 2, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436229252, 'comment_body': ""Let's remove this change from the PR."", 'comment_created': datetime.datetime(2020, 6, 6, 2, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436229294, 'comment_body': 'We should fix `zerver/tests/fixtures/apple/jwk` not having a newline at end-of-file, and same for the other fixtures.', 'comment_created': datetime.datetime(2020, 6, 6, 2, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436229371, 'comment_body': ""Can we add a comment, ideally in the file itself, but worst case here, making clear how this private key was generated and why it's safe to have it checked into version control?"", 'comment_created': datetime.datetime(2020, 6, 6, 2, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436229500, 'comment_body': ""Can you rebase?  This hunk will disappear from the diff as we've already merged this commit."", 'comment_created': datetime.datetime(2020, 6, 6, 2, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436229776, 'comment_body': ""Let's use CSS classes rather than IDs for these.  \r\n\r\nAlso, please add a comment explaining why this requires different geometry from our default social buttons."", 'comment_created': datetime.datetime(2020, 6, 6, 2, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436229842, 'comment_body': ""Why can't this computation be done in the called and used to populate `backend.display_icon`?  I think that'd be preferable for this bit of code at least (haven't thought about the impact for mobile)."", 'comment_created': datetime.datetime(2020, 6, 6, 2, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436229974, 'comment_body': ""I don't understand this comment at all."", 'comment_created': datetime.datetime(2020, 6, 6, 2, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436230035, 'comment_body': 'Add this newline back; it was intentional.', 'comment_created': datetime.datetime(2020, 6, 6, 2, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436230139, 'comment_body': ""This probably deserves a comment that full_name isn't available on repeat logins, but when it is, it is validated."", 'comment_created': datetime.datetime(2020, 6, 6, 2, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436230247, 'comment_body': 'Should we be calling `validate_state` from the superclass rather than reimplementing parts of it?', 'comment_created': datetime.datetime(2020, 6, 6, 2, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436230373, 'comment_body': ""Can you use the early return pattern to handle this case first, and deindent the rest of the function?  I think that'd be more readable.  We should also add a comment explaining that the `python-social-auth` default implementation is the web flow, so we can just delegate to them for that; and we just need custom code for the native flow."", 'comment_created': datetime.datetime(2020, 6, 6, 2, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436230484, 'comment_body': ""Can you add a comment here explaining what format `state_token` has and what assumptions we can make about it (E.g. is it a unique random string generated by us, or is it under Apple or the user's control?)"", 'comment_created': datetime.datetime(2020, 6, 6, 2, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436230585, 'comment_body': ""Can you add a block comment here explaining the basic flow of `AppleIdAuth`?  I'm not particularly familiar with JWT, and in any case we need this to be readable be someone working on Zulip's authentication code who isn't even if I am."", 'comment_created': datetime.datetime(2020, 6, 6, 2, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436230628, 'comment_body': ""Please clarify clearly any methods from the upstream backend that we're overriding."", 'comment_created': datetime.datetime(2020, 6, 6, 2, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436230781, 'comment_body': ""seeing this code makes it clear  I think.\r\n```\r\ndef prepare_login_url_and_headers(\r\n        self,\r\n        subdomain: Optional[str]=None,\r\n        mobile_flow_otp: Optional[str]=None,\r\n        desktop_flow_otp: Optional[str]=None,\r\n        is_signup: bool=False,\r\n        next: str='',\r\n        multiuse_object_key: str='',\r\n        alternative_start_url: Optional[str]=None,\r\n        *,\r\n        user_agent: Optional[str]=None,\r\n    ) -> Tuple[str, Dict[str, Any]]:\r\n        url = self.LOGIN_URL\r\n        if alternative_start_url is not None:\r\n            url = alternative_start_url\r\n\r\n        params = {}\r\n        headers = {}\r\n        if subdomain is not None:\r\n....\r\n...\r\n```\r\nthere's `url = self.LOGIN_URL` before url gets assigned to `alternative_start_url` in the `if` block. If `LOGIN_URL` is missed, that functions fails since it cannot find `LOGIN_URL`. \r\nAs url is getting changed every time to `alternative_url` replacing `LOGIN_URL`, we say `LOGIN_URL` has no role in tests.\r\nI'll try to make it a bit clear."", 'comment_created': datetime.datetime(2020, 6, 6, 2, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 436230782, 'comment_body': ""What is the difference between `AuthCanceled` and `AuthFailed`?  That seems to be a change we made here.\r\n\r\nFor functions like this that we've forked just one line of, we should have a clear comment explaining what we changed and why.  (We may want to submit upstream PRs for those changes to help clean up our implementation; e.g. I would think we'd try to submit upstream a change for this one to accept an optional `audience` argument)."", 'comment_created': datetime.datetime(2020, 6, 6, 2, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436230830, 'comment_body': ""Why is AuthFailed more correct than AuthCanceled?  The comment may not need to change, but I'd like to have a clear understanding of why this comment is accurate, since it seems like an important detail."", 'comment_created': datetime.datetime(2020, 6, 6, 2, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436230890, 'comment_body': ""I don't understand why that means we can't / shouldn't run these tests; can you explain?"", 'comment_created': datetime.datetime(2020, 6, 6, 2, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436231032, 'comment_body': ""Why is this here, rather than in `prepare_login_url_and_headers`?  I'm also a little puzzled why this seems to not actually call the upstream `social_auth_test` method -- if intentional, it certainly deserves a big comment, because it means we're not running most of our test code."", 'comment_created': datetime.datetime(2020, 6, 6, 2, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436231245, 'comment_body': ""Do we need to copy all of `social_auth_test`?  That function is designed to be extensible, with e.g. `self.register_extra_endpoints` (which handles at least one of the issues here), and I'd really like to avoid making a bunch of almost-copies of it as that's bad for maintainability.\r\n\r\nI think you can achieve what you're trying to do by just using its existing pluggable features and maybe adding a new argument to pass the extra `token_data_dict` data."", 'comment_created': datetime.datetime(2020, 6, 6, 2, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436232366, 'comment_body': 'Because we want to test the native flow code, which is just sending `GET` request with `native_flow=true` and the other parts of upstream `social_auth_test` are already tested, we start the flow directly with `result = self.client_get(url, **headers)`. We have it there instead of `prepare_login_url_headers` as we need to mock the request requiring internet that this auth flow makes to get apple public JWK from `https://appleid.apple.com/auth/keys.`.', 'comment_created': datetime.datetime(2020, 6, 6, 3, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 436260347, 'comment_body': ""We need to use different button url on login and signup page, plus the `{{ apple_locale }}` thing needs to be here and it's generated based on the request (based on language of the browser). Doesn't seem to be any good way to have this code anywhere in the backend class, and of all other places to put this Apple-specific code this is probably the least awful one. In an ideal world Apple would restrain themselves from forcing absurd rules on people at least when it comes to buttons, and we would be to use our regular buttons with a simple Apple logo..."", 'comment_created': datetime.datetime(2020, 6, 6, 11, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 436260635, 'comment_body': ""Not really, we're re-doing the whole method. The upstream one compares the `state` in the request with the `state` saved in user's session. But Apple sends the user here with a POST request, so we don't have the session. Upstream code is broken with `Lax` session cookie."", 'comment_created': datetime.datetime(2020, 6, 6, 11, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 436261296, 'comment_body': 'From upstream:\r\n```\r\nclass AuthCanceled(AuthException):\r\n    """"""Auth process was canceled by user.""""""\r\n```\r\n```\r\nclass AuthFailed(AuthException):\r\n    """"""Auth process failed for some reason.""""""\r\n```\r\n\r\nClearly should be Authfailed here. On top of that, upstream does `raise AuthCanceled(""Token validation failed"")` which is wrong, because the first argument is the backend, the second arg is the message. Upstream exceptions from here convert to the empty string when doing `str(e)` because of that. I didn\'t submit a PR upstream, because the maintainer was gone for a couple of months again - but seems to have returned recently, so we should submit these fixes.\r\n\r\nThey also merged this https://github.com/python-social-auth/social-core/commit/7d3daf501a16cb152298617fa73ecbbf4e129414 which allows configuring a setting `AUDIENCE` list of allowed audiences. But I\'m not sure if we like that, because we discussed with Greg a bit in https://chat.zulip.org/#narrow/stream/107-kandra/topic/Apple.20auth/near/886762 and at that point decided to be more strict in the validation - BUNDLE_ID in native flow, SERVICE_id in browser flow. So we might want to keep our custom code here anyway...\r\n', 'comment_created': datetime.datetime(2020, 6, 6, 11, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 436261372, 'comment_body': 'From upstream:\r\n```\r\nclass AuthCanceled(AuthException):\r\n    """"""Auth process was canceled by user.""""""\r\n```\r\n```\r\nclass AuthFailed(AuthException):\r\n    """"""Auth process failed for some reason.""""""\r\n```\r\n', 'comment_created': datetime.datetime(2020, 6, 6, 11, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 436636857, 'comment_body': 'The IDs were generated like this `<button id=""register_{{ backend.button_id_suffix }}"" class=""login-social-button full-width""`. Using IDs lets us require fewer changes in the HTML pages. Is it okay to add a conditional for that to have a class for this particular one?\r\n\r\n(Added a comment. Also changed the `height: 46px` to 50px to make those have the same height as other buttons.)', 'comment_created': datetime.datetime(2020, 6, 8, 11, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 436637146, 'comment_body': 'That looks to be the best way. made use of `social_auth_test_finish` and `register_extra_endpoins` and removed `social_auth_test`', 'comment_created': datetime.datetime(2020, 6, 8, 11, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 436637489, 'comment_body': ""Modified the comment. Hope it's clear now :slightly_smiling_face: "", 'comment_created': datetime.datetime(2020, 6, 8, 11, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 436637550, 'comment_body': ""Added a comment explaining a bit about native flow and why we start with `self.client_get(url, **headers)`.\r\nWe can have the remaining code also but we don't really focus on that in testing native flow and it's tested already in `AppleIdAuthBackendTest`."", 'comment_created': datetime.datetime(2020, 6, 8, 11, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 436637613, 'comment_body': 'These tests get the `result` from the following `if` in `social_auth_test` and do not reach the end where `AUTH_FINISH_URL` is called\r\n```\r\nif result.status_code != 302 or not result.url.startswith(expected_result_url_prefix):\r\n            return result\r\n```\r\nSince we skip all of that code here in the native flow test, we cannot expect those tests to work.', 'comment_created': datetime.datetime(2020, 6, 8, 11, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 436637679, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2020, 6, 8, 11, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 436637739, 'comment_body': 'Added a comment.\r\nAlso added another comment above that saying all the functions below are the function that we had to override.', 'comment_created': datetime.datetime(2020, 6, 8, 11, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 436637770, 'comment_body': ""Added a comment. \r\n(It's a random string generated using PSA's internal function `state_token`)"", 'comment_created': datetime.datetime(2020, 6, 8, 11, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 436637943, 'comment_body': ""Removed the `else` and deindented. Added a comment explaing we use `auth_complete` of `python-social-auth` when it's not native flow."", 'comment_created': datetime.datetime(2020, 6, 8, 11, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 436638089, 'comment_body': ""Added a comment in the file with the command used to generate the file, the reason we needed it and saying it's safe to have it checked into version control."", 'comment_created': datetime.datetime(2020, 6, 8, 11, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 436638120, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 6, 8, 11, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 436638196, 'comment_body': 'Added that line back.', 'comment_created': datetime.datetime(2020, 6, 8, 11, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 436654635, 'comment_body': ""Moved and reordered. Added quotes for those.\r\n(I've seen that other's don't have these quotes. Do we want to change it for them too?)"", 'comment_created': datetime.datetime(2020, 6, 8, 12, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 437779421, 'comment_body': 'Or submit a PR upstream to make it better.', 'comment_created': datetime.datetime(2020, 6, 9, 23, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 437779727, 'comment_body': 'Yeah, I guess this is OK.', 'comment_created': datetime.datetime(2020, 6, 9, 23, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 439210727, 'comment_body': ""What is `aud`?  We should expand it if it's an abbreviation."", 'comment_created': datetime.datetime(2020, 6, 12, 5, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 439210876, 'comment_body': ""Oh, `audience`; yeah, let's make the parameter to the function `audience`, at least, even if we need to put it into a dict as `aud`.  More readable that way."", 'comment_created': datetime.datetime(2020, 6, 12, 5, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 439211163, 'comment_body': ""Do we need to do our own `social_auth_test`?  It was really nice to avoid that with the non-native version, and I'd like to do so here as well if we can."", 'comment_created': datetime.datetime(2020, 6, 12, 5, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 439211407, 'comment_body': 'Can you expand this to give more discussion of the high-level strategy.  I see we go towards calling `do_auth`, like the original python-social-auth code does ... what is the intent of our changes from the base logic here?', 'comment_created': datetime.datetime(2020, 6, 12, 5, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 439211478, 'comment_body': 'spell python-social-auth; abbreviations make for hard to understand code.', 'comment_created': datetime.datetime(2020, 6, 12, 5, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 439633323, 'comment_body': 'Posted a larger block comment detailing things', 'comment_created': datetime.datetime(2020, 6, 12, 20, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 439634988, 'comment_body': 'I think we really do need our own. Normal social_auth_test is designed for Oauth-like flows. Our native flow has nothing to do with Oauth, it is super straightforward - the app sends us `native_flow=true&id_token=<what the app got from Apple>` to `/complete/apple/` and that\'s the end of the story. Normal social_auth_test cannot be adapted to something so simple :slightly_smiling_face: \r\n\r\nWhich might raise the question ""should we even be subclassing SocialAuthBase in this case?"". I think the answer is yes, because while the flow is different, we just do some basic things in auth_complete and then hand things over back to PSA, and then they go through the social pipeline, where most of our magic happens anyway, all the validation, mobile flow handling etc. So it\'s important to test that what we did plays well with the social pipeline - by running the SocialAuthBase test suite.', 'comment_created': datetime.datetime(2020, 6, 12, 20, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 439812235, 'comment_body': 'Yeah. I submitted the error handling fixes for now at https://github.com/python-social-auth/social-core/pull/476', 'comment_created': datetime.datetime(2020, 6, 14, 9, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 439877088, 'comment_body': 'OK.  Maybe worth also adding a commit to make `audience` an option argument, which would let us more fully unfork this?  ', 'comment_created': datetime.datetime(2020, 6, 14, 23, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': 'e6815ab106806b2924e3dc9ed0b37622e77b0779', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}]",Dinesh Ch,44665669,,User,,29,,19,20
426796848,logging: Set up a different logger for each backend.,"<!-- What's this PR for?  (Just a link to an issue is fine.) -->
    Adds a top-level logger in `settings.LOGGING` `zulip.auth`
    with the default handlers `DEFAULT_ZULIP_HANDLERS` and
    an extra hanlder that writes to `/var/log/zulip/auth.log`.
    
    Each auth backend uses it's own logger, `self.logger` which
    is in form 'zulip.auth.<backend name>'.
    
    This way it's clear which auth backend generated the log
    and is easier to look for all authentication logs in one file.
(https://chat.zulip.org/#narrow/stream/3-backend/topic/auth.20backend.20loggers/near/882092)

**Testing Plan:** <!-- How have you tested? -->
Automated tests passed.
",True,15183,https://api.github.com/repos/zulip/zulip/pulls/15183,https://github.com/zulip/zulip/pull/15183,closed,133,99,3,3,6,17,1,0,[{'name': 'size: XL'}],2020-06-02 19:53:24+00:00,2020-06-09 00:42:08+00:00,535724.0,"6 days, 4:48:44","[{'comment_id': 434163832, 'comment_body': ""I don't think all backends have `name` attribute, let's just use `self.__class__.__name__` here instead perhaps?"", 'comment_created': datetime.datetime(2020, 6, 2, 20, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 434165131, 'comment_body': ""how does this work? When we mock this `self.logger`, does that result in the loggers inside the actual backend instances to be mocked too? That's kind of neat if it works this, but I want to check if I understand correctly"", 'comment_created': datetime.datetime(2020, 6, 2, 20, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 434225734, 'comment_body': ""I think it'd be nicer to use the shorter `name` attributes.  Maybe worth migrating to have that be the case; it might also allow us to clean up things like this:\r\n```\r\nAUTH_BACKEND_NAME_MAP: Dict[str, Any] = {                                                            \r\n    'Dev': DevAuthBackend,                                                                           \r\n    'Email': EmailAuthBackend,                                                                       \r\n    'LDAP': ZulipLDAPAuthBackend,                                                                    \r\n}                                                                                                    \r\n```\r\n\r\n(Those should be the `name` attributes for those backends, right?)."", 'comment_created': datetime.datetime(2020, 6, 2, 23, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 434465534, 'comment_body': ""@mateuszmandera from the code I see that only backends like github, google, gitlab, saml. LDAP have logging calls. LDAP seems to have a different logger. So, I haven't touched anything related to LDAP. And those backends that have logging calls have `name` too.\r\n\r\n@timabbott yes, but we usually have `name` in lowercase and the normal one with mix of upper and lowercase letters is named `auth_backend_name` which is used as display name in login and sign up pages. I do not see any of those having logging calls except `LDAP`, so I'm not sure if it's useful to have a name attribute for `dev` and `Email` auth backends.\r\n"", 'comment_created': datetime.datetime(2020, 6, 3, 10, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 434470374, 'comment_body': ""Hmm, it might make sense to make `name` and `auth_backend_name` be class attributes on all backends, not just the `@external_auth_method` ones, even if only for consistency. And there's no reason to expect we won't ever want to add logging in those other backends :thinking: "", 'comment_created': datetime.datetime(2020, 6, 3, 10, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 434473299, 'comment_body': 'Yes, mocking that results in the actual backend instances to be also be mocked. This verification I did might make this clear. :slightly_smiling_face: \r\n```\r\n>>> import logging\r\n>>> logger1 = logging.getLogger(\'zulip.auth.asdf\')\r\n>>> logger2 = logging.getLogger(\'zulip.auth.asdf\')\r\n>>> logger1 == logger2\r\nTrue\r\n>>> def test():\r\n...     logger1.info(""logged"")\r\n... \r\n>>> import mock\r\n>>> with mock.patch.object(logger2, \'info\') as m:\r\n...     test()\r\n...     m.assert_called_once_with(""logged"")\r\n... \r\n>>> with mock.patch.object(logger2, \'info\') as m:\r\n...     test()\r\n...     m.assert_called_once_with(""not logged"")\r\n... \r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 3, in <module>\r\n  File ""/srv/zulip-py3-venv/lib/python3.6/site-packages/mock/mock.py"", line 957, in assert_called_once_with\r\n    return self.assert_called_with(*args, **kwargs)\r\n  File ""/srv/zulip-py3-venv/lib/python3.6/site-packages/mock/mock.py"", line 944, in assert_called_with\r\n    six.raise_from(AssertionError(_error_message(cause)), cause)\r\n  File ""<string>"", line 3, in raise_from\r\nAssertionError: expected call not found.\r\nExpected: info(\'not logged\')\r\nActual: info(\'logged\')\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 10, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 434497115, 'comment_body': 'Okay, added a commit adding `name` and `auth_backend_name` for the those three too.', 'comment_created': datetime.datetime(2020, 6, 3, 11, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 434633850, 'comment_body': 'This commit besides settings the attrs on these backends, should probably also move the ""undeclared"" ones into `ZulipAuthMixin`from `ExternalAuthMethod`. And could we use this to clean up what Tim posted\r\n```\r\nAUTH_BACKEND_NAME_MAP: Dict[str, Any] = {\r\n    \'Dev\': DevAuthBackend,\r\n    \'Email\': EmailAuthBackend,\r\n    \'LDAP\': ZulipLDAPAuthBackend,\r\n}\r\n```\r\nsomehow?', 'comment_created': datetime.datetime(2020, 6, 3, 14, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 434717656, 'comment_body': 'Okay, it\'s probably better to move the ""undeclared"" ones to `ZulipAuthMixin`.\r\n(just to mention `ZulipRemoteUserBackend` subclasses `ExternalAuthMethod` and do not subclass `ZulipAuthMixin`, and it has those attributes we\'re moving, I do not think this would be problem, but if we want to add a logger to it later we might want to do `logger = logging.getLogger(\'f\'zulip.auth.{name}\')` to it. I\'m confused why we\'re not subclassing it to `SocialAuthMixin` :thinking:)\r\n\r\n\r\n> And could we use this to clean up what Tim posted\r\n\r\nI could think of two ways but I feel like that is simpler/ better than what we could do. \r\nwe could use some decorator like `external_auth_method` that\'d add them to `AUTH_BACKEND_NAME_MAP` or we could try [getting subclasses of ZulipAuthMixin](https://stackoverflow.com/questions/3862310/how-to-find-all-the-subclasses-of-a-class-given-its-name) to create the `AUTH_BACKEND_NAME_MAP` and remove irrelevant ones like `SocialAuthMixin`.', 'comment_created': datetime.datetime(2020, 6, 3, 16, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 434729808, 'comment_body': 'Force pushed the last commit to move the two attrs with ""undeclared"" to `ZulipAuthMixin`.', 'comment_created': datetime.datetime(2020, 6, 3, 17, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 435564187, 'comment_body': ""I suppose this works, but maybe it's worth looking at whether there's a better interface for mocking a logger during tests?"", 'comment_created': datetime.datetime(2020, 6, 4, 21, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 435885675, 'comment_body': 'https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLogs this seems like an interesting option to explore. If it works well, perhaps we should even consider using it to replace all of the ugly logger mocks we have been doing across our tests?', 'comment_created': datetime.datetime(2020, 6, 5, 12, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 435885826, 'comment_body': 'FYI @chdinesh1089 ', 'comment_created': datetime.datetime(2020, 6, 5, 12, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 436075966, 'comment_body': 'Yeah, that seems like the right way to do this.  \r\n\r\n@chdinesh1089 would you be up for redoing the testing part of this using that feature?  If we like the outcome, we can then do it to the whole codebase.', 'comment_created': datetime.datetime(2020, 6, 5, 17, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436969976, 'comment_body': 'Yes, did the testing part again.', 'comment_created': datetime.datetime(2020, 6, 8, 20, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 436973265, 'comment_body': 'The `m.output` of all `assertLogs` is a list containing a string with a format like the following string.\r\n` WARN:zulip.auth.saml:SAML got invalid email argument.`. Instead of repeatedly writing the long `WARN:zulip.auth.saml:`, having a function felt better.', 'comment_created': datetime.datetime(2020, 6, 8, 20, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 437074500, 'comment_body': 'OK, makes sense.', 'comment_created': datetime.datetime(2020, 6, 9, 0, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': '866c424f8fb10b7f922e081c2a82ceb4b04f1833', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50330efc9c5db8b85210e967e7cf6a158377c810', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f72405c8a995f60d02856c0510883926449d23a7', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}]",Dinesh Ch,44665669,,User,,29,,19,20
424690785,realm_domains: Move realm domains table to organization permissions.,"<!-- What's this PR for?  (Just a link to an issue is fine.) -->
The Realm domains table used to be in a modal. This PR moves that table to be in organization permissions of organization settings

**Testing Plan:** <!-- How have you tested? -->
Ran automated tests.
Manually tested UI to cover everything possible in that area.

**GIFs or Screenshots:** <!-- If a UI change.  See:
  https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
  -->
![realm-add](https://user-images.githubusercontent.com/44665669/83185088-10cfea00-a148-11ea-9534-d11bd9219926.png)
![2](https://user-images.githubusercontent.com/44665669/83185386-82a83380-a148-11ea-9e0f-65c6844c7794.png)


<!-- Also be sure to make clear, coherent commits:
  https://zulip.readthedocs.io/en/latest/contributing/version-control.html
  -->
",False,15129,https://api.github.com/repos/zulip/zulip/pulls/15129,https://github.com/zulip/zulip/pull/15129,open,174,192,11,6,5,19,2,0,"[{'name': 'size: XL'}, {'name': 'has conflicts'}]",2020-05-28 19:33:32+00:00,,0.0,,"[{'comment_id': 432074949, 'comment_body': 'Made this change because when a normal user logins `#realm_domains_table` is not expected to be present. ', 'comment_created': datetime.datetime(2020, 5, 28, 19, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 440226527, 'comment_body': 'Good catch! We should have a better fix than this, as this removes a sanity check from the code. Maybe `if(!is_admin) return;` somewhere above this line.', 'comment_created': datetime.datetime(2020, 6, 15, 14, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aero31aero', 'type': 'User'}, {'comment_id': 440227531, 'comment_body': 'Can we not make this new warning reuse that show/hide scheme that `change_element_block_display_property` provides?', 'comment_created': datetime.datetime(2020, 6, 15, 14, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aero31aero', 'type': 'User'}, {'comment_id': 440229724, 'comment_body': ""This is the third time I'm seeing this check for showing/hiding the warning. Maybe this can be extracted to a small `show_hide_domain_warning(org_join_restrictions);`.\r\n\r\nThis should be a separate commit, maybe at the end of this series of changes."", 'comment_created': datetime.datetime(2020, 6, 15, 14, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aero31aero', 'type': 'User'}, {'comment_id': 440232491, 'comment_body': ""That function hides the block in which `#zero_domains_warning` is present. so, it's hiding the whole table."", 'comment_created': datetime.datetime(2020, 6, 15, 14, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 440232767, 'comment_body': ""Shouldn't we just hide the whole table for non-admins, instead of showing a blank table?"", 'comment_created': datetime.datetime(2020, 6, 15, 14, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aero31aero', 'type': 'User'}, {'comment_id': 440235172, 'comment_body': 'I think `Restrict to the domains listed below` flows better.', 'comment_created': datetime.datetime(2020, 6, 15, 14, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aero31aero', 'type': 'User'}, {'comment_id': 440235390, 'comment_body': 'Intentional whitespace?', 'comment_created': datetime.datetime(2020, 6, 15, 14, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aero31aero', 'type': 'User'}, {'comment_id': 440236634, 'comment_body': ""We do not show the whole of organization permissions for normal users. I think it's redundant here.(I renamed file from realm_domains_modal.hbs and removed some code. That `if` was from earlier code. Thought it's probably needed)\r\nCan I remove that?"", 'comment_created': datetime.datetime(2020, 6, 15, 14, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 440237840, 'comment_body': ""Ohh, no that was unintentional. I'll remove it."", 'comment_created': datetime.datetime(2020, 6, 15, 14, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 440251994, 'comment_body': 'I removed this whole block in the next commit introducing ""Domain restrictions"" section, it\'s still good to have a function for this, will add a function then.', 'comment_created': datetime.datetime(2020, 6, 15, 15, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 440252131, 'comment_body': 'Lets remove this then. We should strive to keep templates free of logic where possible.', 'comment_created': datetime.datetime(2020, 6, 15, 15, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aero31aero', 'type': 'User'}, {'comment_id': 440266708, 'comment_body': ""Sorry, I was reviewing this commit by commit. For 2 cases, it doesn't seem that important."", 'comment_created': datetime.datetime(2020, 6, 15, 15, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aero31aero', 'type': 'User'}, {'comment_id': 440354734, 'comment_body': 'Removed it.', 'comment_created': datetime.datetime(2020, 6, 15, 18, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 440354778, 'comment_body': 'changed it.', 'comment_created': datetime.datetime(2020, 6, 15, 18, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 440354820, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 6, 15, 18, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 440354924, 'comment_body': ""Okay, didn't change it."", 'comment_created': datetime.datetime(2020, 6, 15, 18, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 440354963, 'comment_body': 'Added that `if` in the top like this because we do not  want to populate realm domains table for normal users\r\n```\r\nexports.populate_realm_domains = function (realm_domains) {\r\n    if (!meta.loaded || !page_params.is_admin) {\r\n        return;\r\n    }', 'comment_created': datetime.datetime(2020, 6, 15, 18, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 460844589, 'comment_body': 'Not sure if it is right to say this as this is just below the ""Joining the organization"" section and will be clearly visible but I think we should make it clear that ""Restrict email domains of new users?"" is in different section. Is it fine or do we need to rephrase this or consider not adding this line?', 'comment_created': datetime.datetime(2020, 7, 27, 12, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}]","[{'commit_sha': '9680d63ca7390f06ad9a7ca92fc83ae3ba77ad14', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d5e55b209080f748f8e33c3e3b2454a480b67b6', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ab18bcb2137185438b3898e3f470525d1c8268e', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29997234a65c86e1fb7ce95e9383eec08f6bd3d1', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75460ba6c95900f080e4a8738c3f53f87b384f42', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e34f2fdff1003f85ea11363db234089722268528', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}]",Dinesh Ch,44665669,,User,,29,,19,20
405543666,Enhance onboarding mechanics.,"<!-- What's this PR for?  (Just a link to an issue is fine.) -->
https://github.com/zulip/zulip/issues/14469
discussed in https://chat.zulip.org/#narrow/stream/92-learning/topic/On.20boarding.20mechanics
**Testing Plan:** <!-- How have you tested? -->
manually tested for the following:
case1:
`email_restricted_to_domains=True`
`default_invite_required = True or False`
* domains with `invite_required = False` will be allowed to join without invite.
* Others in allowed domains with `invite_required = True` will only be allowed to join with an invite
* all others not in allowed domains will be restricted from joining no matter how they try to join.

case2:
`email_restricted_to_domains=False`
`default_invite_required = True`
* domains with `invite_required = False` will be allowed to join without invite.
* All other if in allowed domains(with `invite_required = True`) or not will be allowed to join only through an invite.

case3:
`email_restricted_to_domains=False`
`default_invite_required = False`
* Only domains with `invite_required = True` require invite to join the realm.

I think the above covers all cases, all requirements to close the issue. If I  miss something I'd be happy to implement that.

Didn't write automated tests. Will write once it's confirmed the code changes are right and is how it's expected to be.
",False,14636,https://api.github.com/repos/zulip/zulip/pulls/14636,https://github.com/zulip/zulip/pull/14636,open,188,78,23,4,2,1,3,0,"[{'name': 'area: settings (admin/org)'}, {'name': 'size: XL'}, {'name': 'has conflicts'}]",2020-04-18 18:53:20+00:00,,0.0,,"[{'comment_id': 414090850, 'comment_body': ""So, one problem with this model is it'll break everything when we apply this migration.\r\n\r\nMy proposal had been to make this a `BooleanField(null=True, default=None)`, with the semantics being that if it is unspecified/Null, we inherit the organization-level setting.  This makes it possible to make changes to the organization-level setting and have that adjust the setting for every domain where the user hasn't explicitly overridden that setting in the past.\r\n\r\nThe other way we could do this is to include a migration that changes the initial values for existing realms to match the previous model.  "", 'comment_created': datetime.datetime(2020, 4, 23, 20, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': '2240135729d66da83f35f6798ce59f1dbdb3a456', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b52286db3c71135f98c9037cfc54de0985049b81', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25dbda764b45dd7391678be4a0b5a3d4d76cdccb', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d751d883bbdcc27b7e493758025e2afb7c56348', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}]",Dinesh Ch,44665669,,User,,29,,19,20
435925894,auth: Render config error page on configuration error,"

<!-- What's this PR for?  (Just a link to an issue is fine.) -->
https://chat.zulip.org/#narrow/stream/49-development-help/topic/Remote.20SSO/near/876644

**Testing Plan:** <!-- How have you tested? -->
https://circleci.com/gh/chdinesh1089/zulip/tree/config_error

**GIFs or Screenshots:** <!-- If a UI change.  See:
  https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
  -->


<!-- Also be sure to make clear, coherent commits:
  https://zulip.readthedocs.io/en/latest/contributing/version-control.html
  -->
",True,15423,https://api.github.com/repos/zulip/zulip/pulls/15423,https://github.com/zulip/zulip/pull/15423,closed,69,79,7,1,5,5,1,0,[{'name': 'size: XL'}],2020-06-17 15:23:35+00:00,2020-09-25 23:16:18+00:00,8668363.0,"100 days, 7:52:43","[{'comment_id': 441632227, 'comment_body': ""I'm not sure if this sounds good. We might want to change it to have better wording."", 'comment_created': datetime.datetime(2020, 6, 17, 15, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 443127426, 'comment_body': '\r\n```suggestion\r\n                    <p><a href=""""> Refresh</a> to try again or <a href=""/login/"">click here</a> to go back to the login page.</p>\r\n```', 'comment_created': datetime.datetime(2020, 6, 20, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 443127658, 'comment_body': '```suggestion\r\n        The content of these pages is tested separately.\r\n        Here we simply sanity-check that all the URLs load\r\n        correctly.\r\n```\r\n\r\nmight sound better?', 'comment_created': datetime.datetime(2020, 6, 20, 12, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 443127751, 'comment_body': 'I think we might need to figure out a way to automatically generate this list. Needing to manually keep this list in this test updated will not be fun.', 'comment_created': datetime.datetime(2020, 6, 20, 12, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 443144640, 'comment_body': 'used the `Realm.AUTHENTICATION_FLAGS` here', 'comment_created': datetime.datetime(2020, 6, 20, 16, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}]","[{'commit_sha': '81aaa7190f4740b4ec90aac243801841c30346e2', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}]",Dinesh Ch,44665669,,User,,29,,19,20
436666473,Force users to change password when it's weak,"<!-- What's this PR for?  (Just a link to an issue is fine.) -->


**Testing Plan:** <!-- How have you tested? -->


**GIFs or Screenshots:** <!-- If a UI change.  See:
  https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
  -->


<!-- Also be sure to make clear, coherent commits:
  https://zulip.readthedocs.io/en/latest/contributing/version-control.html
  -->
",False,15449,https://api.github.com/repos/zulip/zulip/pulls/15449,https://github.com/zulip/zulip/pull/15449,open,55,6,3,1,10,34,2,0,"[{'name': 'size: L'}, {'name': 'has conflicts'}]",2020-06-18 17:36:43+00:00,,0.0,,"[{'comment_id': 442459019, 'comment_body': 'I think we should rather go with the approach of redirecting in `home_real`, so that we just refuse to even load the app and force the user to change. Perhaps we can\r\n1. If password correct, check its strength in EmailAuthBackend.authenticate and set `.needs_to _change_password`  to True on the `UserProfile`.\r\n2. In home_real, check `user_profile.needs_to _change_password` and if True, redirect to the password reset?\r\n3. Clear that flag when the user changes the password.\r\n\r\nPerhaps @timabbott can comment if this sounds reasonable.', 'comment_created': datetime.datetime(2020, 6, 18, 19, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 443648622, 'comment_body': ""I'm not sure if this is right way to check if the user isn't getting redirected to reset page. Could you confirm @mateuszmandera ?"", 'comment_created': datetime.datetime(2020, 6, 22, 15, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 448304866, 'comment_body': ""Hmm, since `session` doesn't make much sense in some contexts, such as clients that operate purely on API requests and their session is useless (perhaps we might actually have requests without a session actually occutrrings at some point in the future?), I wonder if it wouldn't be better to do a conditional `if hasattr(request, 'session'`) here. And if there's no session and password is weak, raise an appropriate json error. Perhaps @timabbott will have some thoughts on this, but this would be my approach.  With this, we wouldn't need the weird `request.sessoin = self.client.session` things in tests."", 'comment_created': datetime.datetime(2020, 7, 1, 11, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 448308614, 'comment_body': 'There\'s also one more weird scenario that we need to handle here. I though I talked about it in the topic in #backend, but I checked and apparently no :disappointed: So, if you dive into the `check_password` codepath in Django, there\'s a somewhat obscure situation that can happen behind the scenes - iirc, it\'ll be triggered if the password hashing algorithm is changed - in that case, when the user is logging in, Django first checks the password, if it\'s correct, Django checks the hash algorithm of the password hash in the database, and if it\'s the old algorithm, django will run `set_password` for this user, to update the hash to the new algorithm. Something like that. Here\'s a traceback this can generate if the password is also weak:\r\n```\r\nTraceback (most recent call last):\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/core/handlers/exception.py"", line 34, in inner\r\n    response = get_response(request)\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/core/handlers/base.py"", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/core/handlers/base.py"", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File ""./zerver/views/auth.py"", line 777, in login_page\r\n    extra_context=extra_context, **kwargs)(request)\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/views/generic/base.py"", line 71, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/utils/decorators.py"", line 45, in _wrapper\r\n    return bound_method(*args, **kwargs)\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/views/decorators/debug.py"", line 76, in sensitive_post_parameters_wrapper\r\n    return view(request, *args, **kwargs)\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/utils/decorators.py"", line 45, in _wrapper\r\n    return bound_method(*args, **kwargs)\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/utils/decorators.py"", line 142, in _wrapped_view\r\n    response = view_func(request, *args, **kwargs)\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/utils/decorators.py"", line 45, in _wrapper\r\n    return bound_method(*args, **kwargs)\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/views/decorators/cache.py"", line 44, in _wrapped_view_func\r\n    response = view_func(request, *args, **kwargs)\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/contrib/auth/views.py"", line 61, in dispatch\r\n    return super().dispatch(request, *args, **kwargs)\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/views/generic/base.py"", line 97, in dispatch\r\n    return handler(request, *args, **kwargs)\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/views/generic/edit.py"", line 141, in post\r\n    if form.is_valid():\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/forms/forms.py"", line 185, in is_valid\r\n    return self.is_bound and not self.errors\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/forms/forms.py"", line 180, in errors\r\n    self.full_clean()\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/forms/forms.py"", line 382, in full_clean\r\n    self._clean_form()\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/forms/forms.py"", line 409, in _clean_form\r\n    cleaned_data = self.clean()\r\n  File ""./zerver/forms.py"", line 341, in clean\r\n    realm=realm, return_data=return_data)\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/contrib/auth/__init__.py"", line 73, in authenticate\r\n    user = backend.authenticate(request, **credentials)\r\n  File ""</srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/decorator.py:decorator-gen-2>"", line 2, in authenticate\r\n  File ""./zproject/backends.py"", line 222, in rate_limit_auth\r\n    result = auth_func(*args, **kwargs)\r\n  File ""./zproject/backends.py"", line 308, in authenticate\r\n    if user_profile.check_password(password):\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/contrib/auth/base_user.py"", line 111, in check_password\r\n    return check_password(raw_password, self.password, setter)\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/contrib/auth/hashers.py"", line 61, in check_password\r\n    setter(password)\r\n  File ""/srv/zulip-venv-cache/4eb7d45882f447b847282956553e9f58eeaeb69e/zulip-py3-venv/lib/python3.5/site-packages/django/contrib/auth/base_user.py"", line 107, in setter\r\n    self.set_password(raw_password)\r\n  File ""./zerver/models.py"", line 1210, in set_password\r\n    raise PasswordTooWeakError\r\nzerver.models.PasswordTooWeakError\r\n```\r\n\r\nLong story short, `user_profile.check_password(password)` can raise `PasswordTooWeakError`. We need to handle that gracefully here somehow - since this is such a weird and rare scenario, perhaps an appropriate json error would be good enough? Not sure.', 'comment_created': datetime.datetime(2020, 7, 1, 11, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 448310477, 'comment_body': 'Can we just submit data like the form would rather than manually calling set_password?', 'comment_created': datetime.datetime(2020, 7, 1, 11, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 448311277, 'comment_body': ""Let's assert what the status_code should be, rather than what it isn't. If the server returned `500` here, the test would pass in its current form, but we wouldn't be happy with that status code. Let's also assert what the url is (`/` I think?)"", 'comment_created': datetime.datetime(2020, 7, 1, 11, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 448312452, 'comment_body': 'I think a comment explaining this is important. This block will be very confusing for someone reading `home_realm` code without knowing the story.', 'comment_created': datetime.datetime(2020, 7, 1, 11, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 449866701, 'comment_body': ""Since the `client` has nothing to do with what we're doing in this function, I think this should be set to a newly made instance of session rather than `client.session`."", 'comment_created': datetime.datetime(2020, 7, 5, 11, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 450392736, 'comment_body': 'Used `Client().session` as that felt like the only better way. We cannot make `request=mock.MagicMock` as some rate limit code requires it to be a proper request. So, having a proper session felt better rather than using mock just for the session.', 'comment_created': datetime.datetime(2020, 7, 6, 18, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 450392754, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2020, 7, 6, 18, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 450392784, 'comment_body': ""Okay, changed it. (I did it this way thinking we're not testing the reset password page.)"", 'comment_created': datetime.datetime(2020, 7, 6, 18, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 450393042, 'comment_body': 'Added a new commit for this case. ', 'comment_created': datetime.datetime(2020, 7, 6, 18, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 450732802, 'comment_body': 'this can be made nicer by starting with `is_password_correct = user_profile.check_password(password)` - then you only need to have that in the `try/except PasswordTooweak` block, rather than the entire session etc. logic', 'comment_created': datetime.datetime(2020, 7, 7, 9, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 450733752, 'comment_body': ""hmm I might be confused at this point, but didn't we end up deciding in a chat to get rid of the `hasattr` check and just assume `request` has a session? (as that is currently always true)"", 'comment_created': datetime.datetime(2020, 7, 7, 9, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 450734949, 'comment_body': ""We can use  a `MagicMock` for `request.session`, I think that'll be much less confusing than assigning `client.session` to it. A proper session object is better than a mock, but not at the cost of grabbing the session object from the insides of another object just because we don't know how to correctly instantiate it.\r\n\r\nTo figure out how to instantiate a session object correctly we simply have to look at how django does it:\r\n```\r\nclass SessionMiddleware(MiddlewareMixin):\r\n    def __init__(self, get_response=None):\r\n        self.get_response = get_response\r\n        engine = import_module(settings.SESSION_ENGINE)\r\n        self.SessionStore = engine.SessionStore\r\n\r\n    def process_request(self, request):\r\n        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)\r\n        request.session = self.SessionStore(session_key)\r\n```\r\n\r\nso it'd be just a matter of getting the right `engine` for our situation (probably by looking at how django puts the session attribute on the test `client`) and calling `engine.SessionStore(None)`? But idk if it's worth digging into that, might as well save time and use the mock. Just wanted to post this to demonstrate how to figure out how to do this if we really wanted :slightly_smiling_face: "", 'comment_created': datetime.datetime(2020, 7, 7, 9, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 451015840, 'comment_body': 'That looks great. Changed it. Thanks!', 'comment_created': datetime.datetime(2020, 7, 7, 17, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 451024058, 'comment_body': ""Thanks for demonstrating this @mateuszmandera \r\nI was looking [this file](https://github.com/django/django/blob/master/django/test/testcases.py#L155) and ended up concluding that's the better way. I should've had a good look into `django/tests/client.py`.\r\n\r\n(changed to use `MagicMock`)"", 'comment_created': datetime.datetime(2020, 7, 7, 17, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 451024158, 'comment_body': ""Oops, sorry. I thought I haven't committed that change. Changed it."", 'comment_created': datetime.datetime(2020, 7, 7, 17, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 463521996, 'comment_body': ""Hmm, let's not set a session variable unless necessary - so only if the password is too weak, because it will be very rare - and doing this might generate an additional database, or at least cache, write."", 'comment_created': datetime.datetime(2020, 7, 31, 10, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 463530847, 'comment_body': 'makes sense to me. Changed.', 'comment_created': datetime.datetime(2020, 7, 31, 10, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 495317621, 'comment_body': 'I applied this change to clean up the interface; we should never use `.replace()` on URLs as it can lead to security bugs:\r\n```\r\ndiff --git a/zerver/forms.py b/zerver/forms.py\r\nindex 77b8925772..df5a6764bb 100644\r\n--- a/zerver/forms.py\r\n+++ b/zerver/forms.py\r\n@@ -225,10 +225,11 @@ class LoggingSetPasswordForm(SetPasswordForm):\r\n         return self.user\r\n \r\n def generate_password_reset_url(user_profile: UserProfile,\r\n-                                token_generator: PasswordResetTokenGenerator) -> str:\r\n+                                token_generator: PasswordResetTokenGenerator,\r\n+                                url_name=""password_reset_confirm"") -> str:\r\n     token = token_generator.make_token(user_profile)\r\n     uid = urlsafe_base64_encode(force_bytes(user_profile.id))\r\n-    endpoint = reverse(\'password_reset_confirm\',\r\n+    endpoint = reverse(url_name,\r\n                        kwargs=dict(uidb64=uid, token=token))\r\n     return f""{user_profile.realm.uri}{endpoint}""\r\n \r\ndiff --git a/zerver/views/home.py b/zerver/views/home.py\r\nindex 916a6a3fa6..d7e77bcc21 100644\r\n--- a/zerver/views/home.py\r\n+++ b/zerver/views/home.py\r\n@@ -167,8 +167,13 @@ def home_real(request: HttpRequest) -> HttpResponse:\r\n     # with the code in `authenticate` of EmailAuthBackend. Here, we redirect them\r\n     # to password reset form stating that the user\'s password is too weak.\r\n     if request.session.get(\'needs_to_change_password\', False):\r\n-        return HttpResponseRedirect(generate_password_reset_url(user_profile,\r\n-                                    default_token_generator).replace(\'password\', \'weak_password\'))\r\n+        return HttpResponseRedirect(\r\n+            generate_password_reset_url(\r\n+                user_profile,\r\n+                default_token_generator,\r\n+                url_name=""change_weak_password""\r\n+            )\r\n+        )\r\n \r\n     narrow, narrow_stream, narrow_topic = detect_narrowed_window(request, user_profile)\r\n \r\n```', 'comment_created': datetime.datetime(2020, 9, 25, 23, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 495317974, 'comment_body': ""We need to clear the session variable if it's set, though, right?"", 'comment_created': datetime.datetime(2020, 9, 25, 23, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 628954151, 'comment_body': '@chdinesh1089 can you post a screenshot to help verify the visual styling?', 'comment_created': datetime.datetime(2021, 5, 9, 22, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 628954156, 'comment_body': 'This should be tagged for translation.', 'comment_created': datetime.datetime(2021, 5, 9, 22, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 628954250, 'comment_body': 'Why do we need a separate URL, rather than just an extra parameter `?weak_password=True`, for example?', 'comment_created': datetime.datetime(2021, 5, 9, 22, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 628954350, 'comment_body': ""What happens if someone is attempting authentication to return an API key, rather than a session, e.g. for the mobile app?  It seems like modifying the session wouldn't work as intended here.  "", 'comment_created': datetime.datetime(2021, 5, 9, 22, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 629523970, 'comment_body': 'sure:\r\n![image](https://user-images.githubusercontent.com/44665669/117696284-c0c62800-b1de-11eb-973a-6b4d52abc4a3.png)\r\n(we also had some discussion regarding this [here](https://chat.zulip.org/#narrow/stream/3-backend/topic/Checking.20password.20strength.20on.20login/near/911399) :)', 'comment_created': datetime.datetime(2021, 5, 10, 17, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 629542581, 'comment_body': 'We cannot use GET parameters for `PasswordResetConfirmView` because of how it was written.\r\n\r\nThis is how it works along with the what\'s restricting us from using `?weak_password=True`:\r\n* When the browser requests `accounts/weak_password/reset/<uidb64>/<token>/`, django saves the `token` in URL to session and then redirects to `accounts/weak_password/reset/<uidb64>/set-password`.*(this is where our GET params get lost as [django uses `request.path`](https://github.com/django/django/blob/HEAD/django/contrib/auth/views.py#L284) to get our orignal URL(`accounts/weak_password/reset/`), but `request.path` doesn\'t include GET params)*\r\n* Now, our ""set a new password"" template is rendered. (This is where we need that `weak_password: True` to tell the user their password is weak). On entering a new password and sending a post request, django validates the `token` from session and then resets the user\'s password.', 'comment_created': datetime.datetime(2021, 5, 10, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 629639236, 'comment_body': ""We wanted to raise a JSON error saying 'You need to reset your password.' for those cases. (Seeing commit message, we probably had code for that in earlier versions but was removed accidentally)\r\n\r\nMade that change and added a test at `test_auth_backends.AuthBackendTest.test_email_auth_backend_weak_password_no_session`"", 'comment_created': datetime.datetime(2021, 5, 10, 19, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 629639634, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2021, 5, 10, 19, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 630420345, 'comment_body': ""Let's replace this with an end-to-end test of actually attempting mobile authentication, not just calling the auth backend."", 'comment_created': datetime.datetime(2021, 5, 11, 18, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 630422199, 'comment_body': ""I kinda feel like it'd be better for this to share its code path with `PasswordTooWeakError`; it's not worth having two different mechanisms for what happens when you're trying to login and your password is too weak.\r\n\r\nI think we can just do\r\n```\r\nif is_password_correct and not check_password_strength(password):\r\n     raise PasswordTooWeakError()\r\n```\r\n\r\nin the above block, and remove most of the other new code in this pull request.\r\n\r\nThe UX will be a little less friendly, in requiring a reset rather than letting the user change their password without the reset link flow, but it'll also be more secure, and avoid extra duplicated code paths here."", 'comment_created': datetime.datetime(2021, 5, 11, 18, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 632002947, 'comment_body': 'Okay, but that will leave us unable to figure out if the `PasswordTooWeakError` was from the rehashing issue for us to be able to log that. Ended up using nested try, except blocks to be able to log that corner case.', 'comment_created': datetime.datetime(2021, 5, 13, 18, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 632024428, 'comment_body': ""Added two tests similar to the existing `AuthBackendTest.test_email_auth_backend_password_hasher_change` and `FetchAPIKeyTest.test_old_weak_password_after_hasher_change`.\r\n\r\nNot quite sure how to write a test for email auth with mobile. Do we have anything similar doing email auth for mobile for me to use as reference or any other pointers that'd help? Wasn't able to find any tests for mobile flow other than the ones in social auth tests."", 'comment_created': datetime.datetime(2021, 5, 13, 18, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}]","[{'commit_sha': 'e0eb73c8cbf848e835e9d9407b0ae0f853b5c29c', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}]",Dinesh Ch,44665669,,User,,29,,19,20
449515447,Re-authentication for stronger validation to change email address.,"<!-- What's this PR for?  (Just a link to an issue is fine.) -->
https://chat.zulip.org/#narrow/stream/3-backend/topic/Re-authentication.20for.20changing.20email

**Testing Plan:** <!-- How have you tested? -->


**GIFs or Screenshots:** <!-- If a UI change.  See:
  https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
  -->


<!-- Also be sure to make clear, coherent commits:
  https://zulip.readthedocs.io/en/latest/contributing/version-control.html
  -->
",False,15805,https://api.github.com/repos/zulip/zulip/pulls/15805,https://github.com/zulip/zulip/pull/15805,open,416,125,13,4,8,87,2,0,"[{'name': 'size: XL'}, {'name': 'has conflicts'}]",2020-07-15 14:24:04+00:00,,0.0,,"[{'comment_id': 455099163, 'comment_body': 'I moved this here because of some import errors caused due to importing `auth.py` functions in `user_settings.py` and vice versa.', 'comment_created': datetime.datetime(2020, 7, 15, 14, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 455150580, 'comment_body': ""I don't think we want to log out the user just for clicking the link, that might be pretty annoying to them. We should figure out how to run the re-auth flow even if they already have a logged in session."", 'comment_created': datetime.datetime(2020, 7, 15, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 455670447, 'comment_body': ""Didn't notice earlier that we have an `is_preview` that we could use to not redirect the user to home. Added a commit for that particular change.\r\n\r\n(We'll squash the commits at the end.)"", 'comment_created': datetime.datetime(2020, 7, 16, 9, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 455963212, 'comment_body': ""This is giving the raw html content to be like this containing spaces and `\\n`'s\r\n```\r\nLog in\\n                \\n                to Zulip\\n  \r\n```\r\nwhich inturn is causing a test(`login_login_preview` in `test_auth_backends.py`) fail that asserts that `Login in to Zulip` is present.\r\n\r\n(It looks normal in the rendered HTML. Here's a screenshot to help us decide we actually want it there\r\n![image](https://user-images.githubusercontent.com/44665669/87704704-69237f80-c7ba-11ea-8ff9-3663de4837ef.png)\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 16, 17, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 455965949, 'comment_body': ""I'm confused if we should assert if  `Log in\\n                \\n                to Zulip\\n  ` is present or check if `Log in` and `to Zulip` are present or think of a different place to have that text in?"", 'comment_created': datetime.datetime(2020, 7, 16, 17, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 456375153, 'comment_body': 'In a normal flow, this should not occur as we redirect the user to appropriate error page on clicking confirmation link with this code https://github.com/zulip/zulip/pull/15805/commits/8b5450c534d443474a4377f306d883e807bff0fa#diff-2a3f35796feeb6b0ded8f5b2eb2a58f0R78-R81\r\n\r\nSo, I thought just saying ""Invalid key"" would be enough.', 'comment_created': datetime.datetime(2020, 7, 17, 11, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 456376584, 'comment_body': 'This code is for a special case i.e If the user is logged in, and clicks the link to re-authenticate then if for some reason the user gets a validation error we generally redirect to \\login with some form error. The redirect takes user to home page as the user is already loggeed in. So, this code takes care of restricting that redirect to home page ', 'comment_created': datetime.datetime(2020, 7, 17, 11, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 456881385, 'comment_body': 'Changed it to have two complete sentences rather than breaking the sentence just to save two words.', 'comment_created': datetime.datetime(2020, 7, 19, 8, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 458138682, 'comment_body': ""This is to improve the user experience, so they don't have auth again right after they just authed, right? I think that makes sense, so we might want to give it more extra thought about how safe this will be, inside a function like this. Can you move this change to its own commit, as the last commit?"", 'comment_created': datetime.datetime(2020, 7, 21, 14, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 458139160, 'comment_body': 'should we name this `acting_user` instead?', 'comment_created': datetime.datetime(2020, 7, 21, 14, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 458140129, 'comment_body': 'this block is basically duplicating what happens inside confirm_email_change I think? We should clean this up somehow.', 'comment_created': datetime.datetime(2020, 7, 21, 14, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 458140985, 'comment_body': ""this isn't returning a response if the type is not `EMAIL_CHANGE`. Is mypy not catching this?"", 'comment_created': datetime.datetime(2020, 7, 21, 14, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 458142222, 'comment_body': ""do we need this? Can't action_key simply be absent in the dictionary?"", 'comment_created': datetime.datetime(2020, 7, 21, 14, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 458144509, 'comment_body': 'This seems redundant, all we need is\r\n```suggestion\r\n    if action_key_from_post:\r\n```\r\nsince it does exactly thhe same', 'comment_created': datetime.datetime(2020, 7, 21, 14, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 458148151, 'comment_body': ""A simple `else` here seems extremely unsafe. You're assuming anything else than `SimpleTemplateResponse` means the user authenticated successfully. Even if that's true right now, it might not be so for example if Django just change the base class to something else. Or if there's possibility of something else being returned in certain cases of the user failing to auth. We need to find out what exactly the expected `template_response` is in case of success and verify it here."", 'comment_created': datetime.datetime(2020, 7, 21, 14, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 458185054, 'comment_body': ""Not exactly. In `confirm_email_change`, we knew what `type` the confirmation object was so we were using a very similar function `get_object_from_key` which requires us to pass the object type which in `confirm_email_change`'s case was `EMAIL_CHANGE` but here we cannot know what type of object is stored in the key before we get it once we start using action key for other purposes. So, I added this function just for the sake of knowing what type the object is.\r\n\r\nI think we should instead define a `get_confirmation_object_type`. will change it so that the code will be more readable."", 'comment_created': datetime.datetime(2020, 7, 21, 15, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 458190698, 'comment_body': ""mypy isn't catching it.(Not sure why but I guess all current code paths either give an invalid key or one that is of type EMAIL_CHANGE). Will add a `else` here and render `'confirmation/link_does_not_exist.html'`. Would it be fine or shall I make a new page for this case explaining what's the issue? (That should generally not happen I think but we should handle that case too)"", 'comment_created': datetime.datetime(2020, 7, 21, 15, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 458223465, 'comment_body': 'I initially tried it without this but the template render is skipping it without rendering i.e without this the HTML looks like `value = ""{{ action_key}}""`. I think Jinja2 should render it as an empty string but I\'m not sure why this is being skipped. So, as a kind of workaround, I added this code.', 'comment_created': datetime.datetime(2020, 7, 21, 16, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 458334457, 'comment_body': ""Yes, (though it is unnecessary if the user is already logged in.) I do not see any security issue as we call this function at two places where user is confirmed to have been authed.\r\n* We can be sure with social auth and remote sso flows because this is being called in `login_or_register_remote_user` which is only called after successful auth afaik.\r\n* I'm not 100% sure about the email auth case as you pointed out that not having `SimpleTemplateResponse` isn't a better check to assert that the user is authenticated which I'm convinced that it could be unsafe.\r\n\r\nIf we're convinced to change a user's email(which I think, is a stronger action than logging in) we can log them in at the same time i.e just after changing email.\r\nMade it a separate commit."", 'comment_created': datetime.datetime(2020, 7, 21, 19, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 458334629, 'comment_body': 'Not sure. But better than `user_profile` as it could be confusing sometimes. So changed it. ', 'comment_created': datetime.datetime(2020, 7, 21, 19, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 458334882, 'comment_body': ""Ohh, yes, it's redundant. I was a bit confused here when puppeteer test failed and ended up doing this. changed it."", 'comment_created': datetime.datetime(2020, 7, 21, 19, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 458335393, 'comment_body': ""It is just a `HttpResponseRedirect`(added a print, also verified [here](https://github.com/django/django/blob/3f2821af6bc48fa8e7970c1ce27bc54c3172545e/django/contrib/auth/views.py#L93)) not sure if it'd be safer but it's better than the current code. So added that check too."", 'comment_created': datetime.datetime(2020, 7, 21, 19, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 459288564, 'comment_body': 'A stronger check here would be `request.user.is_authenticated`. So changed it check for that and continue to `confirm_email_change`.', 'comment_created': datetime.datetime(2020, 7, 23, 8, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 459290025, 'comment_body': ""For email+password auth case, now I've changed it to check `request.user.is_authenticated` before proceeding to `confirm_email_change` so I think we are on a safe side to log user in or take to `confirm_email_change`."", 'comment_created': datetime.datetime(2020, 7, 23, 8, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 460412686, 'comment_body': 'Will be cleaner to add a conditional in the template to just skip this thing from the form if not action_key and avoid adding this snippet here.', 'comment_created': datetime.datetime(2020, 7, 25, 14, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 460413020, 'comment_body': '```suggestion\r\n            <p><a href=""/"">Click here</a> to go to homepage.</p>\r\n```', 'comment_created': datetime.datetime(2020, 7, 25, 15, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 460413504, 'comment_body': ""Can't we simply solve this weird duplicate fetching and validation of the key in both function by making `confirm_email_change` take the already fetched `Confirmation` object as argument rather than the key string?"", 'comment_created': datetime.datetime(2020, 7, 25, 15, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 460413702, 'comment_body': ""Great, `request.user.is_authenticated` seems like exactly the kind of thing we want. Mere fact of returning `HttpResponseRedirect` wouldn't inspire me with confidence that the user successfully authenticated."", 'comment_created': datetime.datetime(2020, 7, 25, 15, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 460424197, 'comment_body': ""That'd be nice but the existing `get_object_from_key`(used in `confirm_email_change`) requires `confirmation_type` to be sent to get the object. If we change it to not require `confirmation_type`, we need to change it in 9 places(excluding settings) it's used. We can define another similar function but it'd be same as the existing `get_object_from_key`.\r\n\r\nWhat would be a better thing to do here? I'm inclined to changing `get_object_from_key` to not require `confirmation_type` but not sure if there would be an issue doing that."", 'comment_created': datetime.datetime(2020, 7, 25, 17, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 460529877, 'comment_body': ""As discussed, I changed `handle_action_key` to just get the object specifying the confirmation key type to be email change as it's the only type of action key this flow supports since we can extend the `handle_action_key` later when we add other types of confirmation keys to be `action_key`."", 'comment_created': datetime.datetime(2020, 7, 26, 13, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 463492215, 'comment_body': 'if you put this block a few lines below, it would get much simpler, as whether user needs to register is checked and handled right below (and it handles the mirror dummy case too, which also requires registering and was missed here.', 'comment_created': datetime.datetime(2020, 7, 31, 9, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 463497252, 'comment_body': '```suggestion\r\n    extra_context = kwargs.pop(\'extra_context\', {})\r\n    extra_context[""next""] = next\r\n\r\n    action_key = request.POST.get(\'action_key\')\r\n    extra_context[\'action_key\'] = action_key\r\n    if action_key:\r\n        # We want to authenticate user while letting the user to be logged in.\r\n        is_preview = True\r\n```\r\n\r\nreads simpler and cleaner. Detailing that the key comes from POST in the variable name seems rather unnecessary too.', 'comment_created': datetime.datetime(2020, 7, 31, 9, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 463499557, 'comment_body': ""let's just set `user_profile = email_change_object.user_profile` here after the validation annd keep using that vairable below."", 'comment_created': datetime.datetime(2020, 7, 31, 9, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 463503824, 'comment_body': ""A function named like this shouldn't sneakily change realm properties. If tests need email visibility changed (why btw?) they should do it explicitly. Also, seems like `create_email_change_confirmation_key` is the kind of code that should be shared between tests and the production code that does the same thing, rather than having two places in the code that aim to do the same thing."", 'comment_created': datetime.datetime(2020, 7, 31, 9, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 463505945, 'comment_body': ""With the previous test helper, this is now adding the 3rd place in the code with the same aim of creating email change confirmation url, we don't want that. `email_address_visibility` seems like a redundant arg here?"", 'comment_created': datetime.datetime(2020, 7, 31, 9, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 463508243, 'comment_body': ""This ratjer repetetive logic across the tests should probably be in some kind of `verify_user_email_changed` helper. I see that this is how the old email change tests were already done, but I don't understand why this validation is done in such a roundabout way - wouldn't it be sufficient to check `user_profile.delivery_email` is the correct new value, and that `status` of the email change object is changed and that's all? :thinking: "", 'comment_created': datetime.datetime(2020, 7, 31, 9, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 463509516, 'comment_body': ""```suggestion\r\n        # No exception should be raised.\r\n```\r\n\r\nThough I'm not sure if that kind of comment isn't rather redundant :thinking: We can clearly see from the code that exceptions aren't expected to happen here :grinning: "", 'comment_created': datetime.datetime(2020, 7, 31, 9, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 463535516, 'comment_body': ""The key only comes from POST only during email+password once the user clicks login button otherwise we send action key in through `extra_context` in the `start_email_change` view that's run on clicking confirmation link.\r\n\r\nDoing that would replace the `action_key` with `None`.\r\n\r\nCan we do something in the code to make this clear? 🤔 "", 'comment_created': datetime.datetime(2020, 7, 31, 10, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 463741059, 'comment_body': ""Do we want to raise a JSON error or just take the user to registration page? Raising an error seems right to me as it could avoid some confusion if the user accidentally logs in with some other account. So, for now I made it raise json error. we can change it if you think it's not ideal."", 'comment_created': datetime.datetime(2020, 7, 31, 17, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 463742220, 'comment_body': ""> why btw?\r\n\r\nThere's a test in the previous tests called `test_change_delivery_email_end_to_end_with_admins_visibility`. It is for that and the very few similar tests. Changed it to have it in the actual test's code.\r\n\r\nI think we cannot really use the production code. We create the URL and mail it to the user in a single function  `do_start_email_change_process`. So we cannot directly get the URL/key from production code. and another issue would be us setting the required date to test expired key."", 'comment_created': datetime.datetime(2020, 7, 31, 17, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 463742376, 'comment_body': ""Agreed. And all the checks which were that the login page was loaded were also redundant as they are already tested in `EmailChangeTestCase`. So, I've imported `create_email_change_confirmation_key` and just used the key to send POST requests.\r\n\r\nYes, `email_address_visibility ` is redundant. Seems like I forgot to add code specific to that. I'm surprised lint didn't complain. (removed that function now.)"", 'comment_created': datetime.datetime(2020, 7, 31, 17, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 463744068, 'comment_body': ""Hmm, I guess checking if there's no account exists with the old email is worthy. The assertion to the non-delivery email is only done in `test_social_auth_email_change_delivery_email_with_admins_visibility` which I think is the whole point of the test. \r\n\r\n`verify_user_email_changed` sounds like a good idea. But I'm confused where to put that function in as it needs to be in a test subclassing `TestCase` for us to be able to use `self.assertEqual` and similar functions and we have 3 places(3 different test classes) we want to use it. I don't think it's a good idea to put it in `ZulipTestCase`. \r\n\r\nWhat do you think would be a good solution for this so that we can avoid duplication?"", 'comment_created': datetime.datetime(2020, 7, 31, 17, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 463744119, 'comment_body': ""Thought no one should wonder why's there `get_user_by_delivery_email(old_email, user_profile.realm)` that isn't being used in any way. But yes, it seems to be a bit obvious seeing the two lines just above this and in the context of tests it is expected as far as I can see. So, removed the comments 😀 "", 'comment_created': datetime.datetime(2020, 7, 31, 17, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 463771368, 'comment_body': 'Ahh, we default to `EMAIL_ADDRESS_VISIBILITY_ADMINS`, now removing that is causing the coverage issue 😬 ', 'comment_created': datetime.datetime(2020, 7, 31, 18, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 463812527, 'comment_body': ""Changed `test_social_auth_email_change_with_admins_visibility` to `test_social_auth_email_change_delivery_email_public` and moved the assertion that checks if `email` isn't changed and remained as user id to the `test_social_auth_email_change_success` test.\r\n[Here](https://pastebin.com/kUQrz9Uz)'s the diff for that fix.\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 20, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 463962656, 'comment_body': 'Hmm, why would it be bad to put it in zuliptestcase?', 'comment_created': datetime.datetime(2020, 8, 1, 13, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 463962929, 'comment_body': '> I think we cannot really use the production code. We create the URL and mail it to the user in a single function do_start_email_change_process. So we cannot directly get the URL/key from production code. and another issue would be us setting the required date to test expired key.\r\n\r\nI\'d say we should extract the common ""create the link"" logic into a function, so that it can used in both `start_email_change_process` and in tests, it can take `date_sent` as an argument.', 'comment_created': datetime.datetime(2020, 8, 1, 13, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 463963651, 'comment_body': 'Ah I see. Hmm well either way, the natural role `extra_context`  is to simply affect how the template will be rendered. What you\'re doing with \r\n```\r\n    if extra_context.get(""action_key"") is not None:\r\n        # We want to authenticate user while letting the user to be logged in.\r\n        is_preview = True\r\n```\r\n\r\nis altering the behavior of the login_page function with what\'s supposed to only affect the template. That\'s not a great way of conveying ""don\'t redirect the user to home"" to the function. One option is to not call `login_page` with extra_context in start_email_change, but rather redirect the user to `/login/` with `action_key` param in the `GET` and grab it from there.', 'comment_created': datetime.datetime(2020, 8, 1, 13, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 463964168, 'comment_body': ""Hmm okay I think you're right, the user might get confused and log in with the new email rather than old, taking them to registration would be weird and an error is better. Json error is not ideal, it's be better experience to take the user to the login page again with the action key and an appropriate message - but doing that is more work so let's keep just the json error for now and make error handling nicer in followups. \r\n\r\nBut `user_profile.is_mirror` needs to be accounted for, and probably you can make this login join with that block below that has the same `if` in a way that'll read nicer."", 'comment_created': datetime.datetime(2020, 8, 1, 13, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 464080513, 'comment_body': ""I like the idea of redirecting the user to `/login/` with `action_key` as a `GET` param and grabbing it from there. This also resolves the circular import error we had as we now do not want to import `login_page` from `auth.py`. So, I've removed that commit."", 'comment_created': datetime.datetime(2020, 8, 2, 13, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 464080517, 'comment_body': 'Yes, I added an `if` inside `if user_profile is None or user_profile.is_mirror_dummy:` to check for action key and raise error.  Now looking at it again, I felt like keeping `action_key` related code as one block in the code would look clean. So thought I\'d modify like this, but `mypy` doesn\'t let me(see [this post](https://chat.zulip.org/#narrow/stream/92-learning/topic/mypy.20error/near/968696) in chat.zulip.org)\r\n```python\r\n....\r\n    user_needs_to_register = user_profile is None or user_profile.is_mirror_dummy\r\n\r\n    action_key = result.data_dict.get(\'action_key\')\r\n    if action_key:\r\n        if user_needs_to_register:\r\n            raise JsonableError(_(""Incorrect login. Login with your old email to change your email address""))\r\n        return handle_action_key(request, user_profile, action_key)\r\n\r\n    if user_needs_to_register:\r\n        return register_remote_user(request, result)\r\n    # Otherwise, the user has successfully authenticated to an\r\n...\r\n```', 'comment_created': datetime.datetime(2020, 8, 2, 13, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 464080571, 'comment_body': '""create the link"" is already a different function(`create_confirmation_link`) which generates the key and returns URL with key in it. \r\nFor quick reference here\'s the production code\r\n```python\r\ndef do_start_email_change_process(user_profile: UserProfile, new_email: str) -> None:\r\n    old_email = user_profile.delivery_email\r\n    obj = EmailChangeStatus.objects.create(new_email=new_email, old_email=old_email,\r\n                                           user_profile=user_profile, realm=user_profile.realm)\r\n\r\n    activation_url = create_confirmation_link(obj, Confirmation.EMAIL_CHANGE)\r\n    from zerver.context_processors import common_context\r\n    context = common_context(user_profile)\r\n    context.update({\r\n        \'old_email\': old_email,\r\n        \'new_email\': new_email,\r\n        \'activate_url\': activation_url,\r\n    })\r\n    language = user_profile.default_language\r\n    send_email(\'zerver/emails/confirm_new_email\', to_emails=[new_email],\r\n               from_name=FromAddress.security_email_from_name(language=language),\r\n               from_address=FromAddress.tokenized_no_reply_address(),\r\n               language=language, context=context,\r\n               realm=user_profile.realm)\r\n```\r\nI\'m unable to see a way to break that so we could use it for test code which would let us set our own `date_sent`. :disappointed:  ', 'comment_created': datetime.datetime(2020, 8, 2, 13, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 464080635, 'comment_body': ""We would use `verify_user_email_changed` for just a very few tests cases and `ZulipTestCase` is being subclassed for every test class in our test code and most of them do not need it. It didn't feel like a good idea to me to put a function that has no use in most of the subclasses it stays hidden.\r\n- - -\r\nNow I re-wrote all these tests into mixin class and only the part that differs in each flow is extracted into a different function(`do_email_change`) which needs to be defined in the classes implementing this mixin. This reduced the amount of test code to one-third of what we had earlier."", 'comment_created': datetime.datetime(2020, 8, 2, 13, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 465895181, 'comment_body': 'Call `create_confirmation_link` in the test helper, and change `date_sent` field on the created object to the intended one? :thinking: ', 'comment_created': datetime.datetime(2020, 8, 5, 17, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 465899827, 'comment_body': ""Hmm, that way we'd just save this statement \r\n```\r\n    Confirmation.objects.create(content_object=obj,\r\n                                date_sent=date_sent,\r\n                                confirmation_key=key,\r\n                                type=Confirmation.EMAIL_CHANGE)\r\n```\r\nin(just for reference)\r\n```python\r\ndef create_email_change_confirmation_key(user_profile: UserProfile, new_email: str,\r\n                                         date_sent: Optional[datetime.datetime]=None) -> str:\r\n    old_email = user_profile.delivery_email\r\n    new_email = new_email\r\n    obj = EmailChangeStatus.objects.create(new_email=new_email,\r\n                                           old_email=old_email,\r\n                                           user_profile=user_profile,\r\n                                           realm=user_profile.realm)\r\n    key = generate_key()\r\n    if date_sent is None:\r\n        date_sent = timezone_now()\r\n    Confirmation.objects.create(content_object=obj,\r\n                                date_sent=date_sent,\r\n                                confirmation_key=key,\r\n                                type=Confirmation.EMAIL_CHANGE)\r\n    return key\r\n```\r\nand will have to add a line to retrieve `action_key` from the link to send it in as GET/POST's for auth flows along with adding the code for changing `date_sent`."", 'comment_created': datetime.datetime(2020, 8, 5, 17, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 465911665, 'comment_body': 'ohh, this is really cool, kinda like the social auth flow test base class. I didn\'t expect this would generalize into a base class so nicely. Though  I think this should go to `test_classes.py`, we have some other general ""library"" classes there.', 'comment_created': datetime.datetime(2020, 8, 5, 18, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 465913461, 'comment_body': ""```suggestion\r\n        if different_account:\r\n            assert user_profile != self.example_user('cordelia')\r\n            user_profile = self.example_user('cordelia')\r\n```\r\n\r\nto avoid weird bugs if somebody passes cordelia as the user_profile argument"", 'comment_created': datetime.datetime(2020, 8, 5, 18, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 465913654, 'comment_body': 'sure, glad you liked it, moving it now. Does the name sound good? or do we want to go for something like `EmailChangeTestBase` or `EmailChangeBase`?', 'comment_created': datetime.datetime(2020, 8, 5, 18, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 465914906, 'comment_body': ""is it not possible to write the `do_email_change` function in such a way that this override won't be needed?"", 'comment_created': datetime.datetime(2020, 8, 5, 18, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 465926015, 'comment_body': ""We'd need to have conditionals to check if is github auth and add some code to check that the user doesn't exist which means that it most probably is this particular test for unregistered user, then we need to set `expect_choose_email_screen`. I think this would clutter up `do_email_change`. One other thing we could do is send some param `unregistered_user=True` to avoid some code and add an `if backend == GitHubAuthBackend and unregistered` in the `do_email_change` and then set `expect_choose_email_screen` to True. But this param would remain useless for other auth flows and become confusing to someone reading the code if we introduce an argument for `do_change_email` for the purpose of a single test.\r\n\r\nBoth of those options seemed not optimal to me and had to write this overridden function."", 'comment_created': datetime.datetime(2020, 8, 5, 18, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 465936515, 'comment_body': ""what's the story behind this change?"", 'comment_created': datetime.datetime(2020, 8, 5, 18, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 465941893, 'comment_body': ""We decided to redirect user to login page with a GET param but this is expecting a status code of 200 and with this change in email change flow, the email won't change just on sending a request to that link. So, removed the `do_change_user_delivery_email` too.\r\nMentioned this in commit message too\r\n```\r\nIn zerver/views/development/email_log.py, changed the\r\nassertion of status to 302 as we redirect to login page\r\nwith this commit on clicking email change confirmation link.\r\nAlso removed the change of delivery email as it's no longer\r\nneeded since the email won't be changed on clicking the link.\r\n```"", 'comment_created': datetime.datetime(2020, 8, 5, 19, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 465947791, 'comment_body': ""```\r\n    obj = EmailChangeStatus.objects.create(new_email=new_email, old_email=old_email,\r\n                                           user_profile=user_profile, realm=user_profile.realm)\r\n\r\n    activation_url = create_confirmation_link(obj, Confirmation.EMAIL_CHANGE)\r\n```\r\n\r\nthis can be extracted from the prduction code into a `create_email_change_confirmation_link`  helper, and then the test will call that create_email_change_confirmation_link helper and alter the date_sent and grab the key :thinking:  It might not save many, or any, actual lines of code but the point is to encapsulate the details of the procedure of creating this object, so I think it's worth it nonetheless"", 'comment_created': datetime.datetime(2020, 8, 5, 19, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 466322086, 'comment_body': ""Didn't think about that, interesting, Thanks! Added the suggestion."", 'comment_created': datetime.datetime(2020, 8, 6, 10, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 466322151, 'comment_body': 'Moved it to `test_classes.py`.', 'comment_created': datetime.datetime(2020, 8, 6, 10, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 466322974, 'comment_body': ""> It might not save many, or any, actual lines of code but the point is to encapsulate the details of the procedure of creating this object, so I think it's worth it nonetheless\r\n\r\n\r\nNow, it very clear to me why we wanted to use the production code. Thanks, made the changes as a prep commit."", 'comment_created': datetime.datetime(2020, 8, 6, 10, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 469272677, 'comment_body': 'one whitespace too much ', 'comment_created': datetime.datetime(2020, 8, 12, 13, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 469277559, 'comment_body': 'this class should have a dummy `do_Change` function definition, to show the intended function signature, with a docstring quickly explaining its intent, and doing `raise NotImplementedError` because overriding it is obligatory', 'comment_created': datetime.datetime(2020, 8, 12, 13, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 469279523, 'comment_body': 'Why do we need the `different_account` argument, rather than the caller passing a different user in the `user_profile` argument instead?', 'comment_created': datetime.datetime(2020, 8, 12, 13, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 469281798, 'comment_body': 'Where in the code is it determined that an email change key is expired? I see other types of keys have  constants such as `INVITATION_LINK_VALIDITY_DAYS` but i dont see it for email change :thinking: ', 'comment_created': datetime.datetime(2020, 8, 12, 14, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 469282378, 'comment_body': ""a `social_auth_...` test case shouldn't be in this general mixin"", 'comment_created': datetime.datetime(2020, 8, 12, 14, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 469286036, 'comment_body': '> then we need to set expect_choose_email_screen. I think this would clutter up do_email_change\r\n\r\nThat sounds like simply an extra argument and a 2-liner `if` case in `do_change` though I think? Or would it be more clutter than that', 'comment_created': datetime.datetime(2020, 8, 12, 14, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 470035394, 'comment_body': ""> That sounds like simply an extra argument and a 2-liner `if` case in `do_change` though I think?\r\n\r\nYes, if we send an argument it's just a simple `if`, but not sure if it's fine to send it as an arg from the test only for purpose of a single case in GIthub auth where the test is being run in 2 other test classes too. Is it fine?"", 'comment_created': datetime.datetime(2020, 8, 13, 15, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 470035460, 'comment_body': ""we could do this in `do_email_change` to avoid sending an arg, what is your opinion on this. (This seems like clutter to me but maybe not)\r\n```diff\r\n    def do_email_change(self, user_profile: UserProfile, action_key: str) -> HttpResponse:\r\n         email = user_profile.delivery_email\r\n         name = user_profile.full_name\r\n \r\n+        expect_choose_email_screen = False\r\n+        if self.backend == GitHubAuthBackend:\r\n+            try:\r\n+                get_user_by_delivery_email(email, user_profile.realm)\r\n+            except UserProfile.DoesNotExist:\r\n+                # The test is testing unregistered user logging in\r\n+                # to change email. In such case, github auth takes to\r\n+                # choose email screen.\r\n+                expect_choose_email_screen = True\r\n+\r\n         account_data_dict = self.get_account_data_dict(email=email,\r\n                                                        name=name)\r\n \r\n         result = self.social_auth_test(account_data_dict, subdomain='zulip',\r\n-                                       action_key=action_key)\r\n+                                       action_key=action_key,\r\n+                                       expect_choose_email_screen=True)\r\n```\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 13, 15, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 470144715, 'comment_body': 'It has the default validity set by this in `default_settings.py` `CONFIRMATION_LINK_DEFAULT_VALIDITY_DAYS = 1`.\r\n\r\n>Where in the code is it determined that an email change key is expired? \r\n\r\nAll sorts of checks(in general for all confirmation keys) including this are done by `get_object_from_key`. we use it to get the email change object twice in this PR, once in `handle_action_key` and `start_email_change`(we do it in this only to validate)', 'comment_created': datetime.datetime(2020, 8, 13, 17, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 470146670, 'comment_body': 'Changed it to authenticate using email+password.', 'comment_created': datetime.datetime(2020, 8, 13, 18, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 470147436, 'comment_body': ""Added, didn't know what the right thing to do to convey that overriding is obligatory so I initially just added a comment."", 'comment_created': datetime.datetime(2020, 8, 13, 18, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 470147626, 'comment_body': ""Ohh, right, that argument doesn't make sense. Thanks, removed."", 'comment_created': datetime.datetime(2020, 8, 13, 18, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 472080566, 'comment_body': ""Okay, thanks for checking! I think it'd be better to use `CONFIRMATION_LINK_DEFAULT_VALIDITY_DAYS + 1` here, as that's clearer, rather than a magical value of 2 that will make folks puzzle over the same question i asked above :grinning: "", 'comment_created': datetime.datetime(2020, 8, 18, 10, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 472081597, 'comment_body': 'Ohh, makes sense. Thanks, will change to use `CONFIRMATION_LINK_DEFAULT_VALIDITY_DAYS + 1`', 'comment_created': datetime.datetime(2020, 8, 18, 10, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 472082007, 'comment_body': 'would we be able to get rid of this hackiness if `do_change_email` took an email address (and realm?) rather than a userprofile?', 'comment_created': datetime.datetime(2020, 8, 18, 10, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 472083828, 'comment_body': 'Have you tested manually whether this works? It looks right, but worth checking.', 'comment_created': datetime.datetime(2020, 8, 18, 10, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 472085994, 'comment_body': ""Ahh, yes, that sounds like a great idea. email and action key would be sufficient for remote sso and email+password. We'd just need name for social auth but that becomes obsolete for the other two auth flows."", 'comment_created': datetime.datetime(2020, 8, 18, 10, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 472088011, 'comment_body': 'yes, tested manually before pushing. it works :)', 'comment_created': datetime.datetime(2020, 8, 18, 10, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 472162870, 'comment_body': 'Okay, changed to just send email and action key. This let us ~not~ get rid of the step of getting `email` from `user_profile` but since `name` was needed in social auth flow tests, made a `try` `except` block like this\r\n```\r\n    def do_email_change(self, email: str, action_key: str) -> HttpResponse:\r\n        try:\r\n            user_profile = get_user_by_delivery_email(email, get_realm(""zulip""))\r\n            name = user_profile.full_name\r\n        except UserProfile.DoesNotExist:\r\n            name = ""Nonexistent User""\r\n```', 'comment_created': datetime.datetime(2020, 8, 18, 12, 54, 59, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 472163231, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2020, 8, 18, 12, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 474622062, 'comment_body': 'Great!', 'comment_created': datetime.datetime(2020, 8, 21, 10, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}]","[{'commit_sha': '0db8d1974af57d7b80ff9ead4ed448187761c668', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2490be14ff9078a306cb3156b7fb221e4240780', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0284f541f6f4a01eda50300ea57e47653220bef', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a36a0d97165e4303b0360b8d6620c9e335501228', 'committer_username': 'chdinesh1089', 'committer_name': 'Dinesh Ch', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 1, 8, 9, 32, tzinfo=datetime.timezone.utc)}]",Dinesh Ch,44665669,,User,,29,,19,20

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
43160685,zulip,zulip/zulip,Python,7619,21040,375,1134,60352,2464,28,799,"[{'id': 898269551, 'number': 21668, 'closed': None, 'created': datetime.datetime(2022, 4, 3, 11, 35, 49, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 141, 'deletions': 6, 'state': 'open'}, {'id': 877652378, 'number': 21394, 'closed': None, 'created': datetime.datetime(2022, 3, 11, 17, 15, 36, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 368, 'deletions': 33, 'state': 'open'}, {'id': 873321513, 'number': 21338, 'closed': datetime.datetime(2022, 3, 7, 20, 44, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 7, 16, 35, 56, tzinfo=datetime.timezone.utc), 'time_taken': 14920.0, 'time_delta': '4:08:40', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 871369267, 'number': 21317, 'closed': datetime.datetime(2022, 3, 4, 9, 48, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 4, 6, 41, 21, tzinfo=datetime.timezone.utc), 'time_taken': 11202.0, 'time_delta': '3:06:42', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 870765589, 'number': 21305, 'closed': datetime.datetime(2022, 3, 3, 18, 17, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 3, 16, 17, 5, tzinfo=datetime.timezone.utc), 'time_taken': 7226.0, 'time_delta': '2:00:26', 'additions': 22, 'deletions': 1, 'state': 'closed'}, {'id': 868872102, 'number': 21286, 'closed': datetime.datetime(2022, 3, 2, 17, 57, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 2, 5, 34, tzinfo=datetime.timezone.utc), 'time_taken': 44590.0, 'time_delta': '12:23:10', 'additions': 50, 'deletions': 33, 'state': 'closed'}, {'id': 824513524, 'number': 20815, 'closed': datetime.datetime(2022, 1, 17, 14, 46, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 17, 12, 2, 15, tzinfo=datetime.timezone.utc), 'time_taken': 9828.0, 'time_delta': '2:43:48', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 803015655, 'number': 20572, 'closed': datetime.datetime(2021, 12, 15, 6, 25, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 15, 3, 25, 38, tzinfo=datetime.timezone.utc), 'time_taken': 10796.0, 'time_delta': '2:59:56', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 757125311, 'number': 19957, 'closed': datetime.datetime(2021, 10, 13, 16, 49, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 13, 7, 56, 21, tzinfo=datetime.timezone.utc), 'time_taken': 31992.0, 'time_delta': '8:53:12', 'additions': 6, 'deletions': 5, 'state': 'closed'}, {'id': 748091470, 'number': 19892, 'closed': datetime.datetime(2021, 10, 4, 1, 47, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 2, 9, 33, 34, tzinfo=datetime.timezone.utc), 'time_taken': 144848.0, 'time_delta': '1 day, 16:14:08', 'additions': 5, 'deletions': 7, 'state': 'closed'}, {'id': 731369250, 'number': 19707, 'closed': datetime.datetime(2021, 9, 10, 17, 25, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 10, 11, 16, 14, tzinfo=datetime.timezone.utc), 'time_taken': 22174.0, 'time_delta': '6:09:34', 'additions': 0, 'deletions': 16, 'state': 'closed'}, {'id': 715166558, 'number': 19590, 'closed': datetime.datetime(2022, 4, 28, 19, 59, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 14, 54, 21, tzinfo=datetime.timezone.utc), 'time_taken': 21877525.0, 'time_delta': '253 days, 5:05:25', 'additions': 148, 'deletions': 0, 'state': 'closed'}, {'id': 708983727, 'number': 19561, 'closed': datetime.datetime(2021, 9, 7, 17, 19, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 13, 52, 49, tzinfo=datetime.timezone.utc), 'time_taken': 2345178.0, 'time_delta': '27 days, 3:26:18', 'additions': 79, 'deletions': 66, 'state': 'closed'}, {'id': 701689545, 'number': 19462, 'closed': datetime.datetime(2022, 2, 18, 22, 48, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 18, 27, tzinfo=datetime.timezone.utc), 'time_taken': 17295692.0, 'time_delta': '200 days, 4:21:32', 'additions': 104, 'deletions': 15, 'state': 'closed'}, {'id': 698992497, 'number': 19421, 'closed': datetime.datetime(2021, 10, 7, 23, 33, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 28, 20, 26, 53, tzinfo=datetime.timezone.utc), 'time_taken': 6145577.0, 'time_delta': '71 days, 3:06:17', 'additions': 184, 'deletions': 53, 'state': 'closed'}, {'id': 697237161, 'number': 19392, 'closed': datetime.datetime(2021, 7, 26, 21, 46, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 26, 18, 1, 52, tzinfo=datetime.timezone.utc), 'time_taken': 13449.0, 'time_delta': '3:44:09', 'additions': 143, 'deletions': 143, 'state': 'closed'}, {'id': 692821617, 'number': 19316, 'closed': datetime.datetime(2021, 7, 22, 13, 47, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 19, 18, 15, 29, tzinfo=datetime.timezone.utc), 'time_taken': 243138.0, 'time_delta': '2 days, 19:32:18', 'additions': 92, 'deletions': 2, 'state': 'closed'}, {'id': 692384900, 'number': 19305, 'closed': datetime.datetime(2021, 7, 19, 16, 34, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 19, 8, 20, 3, tzinfo=datetime.timezone.utc), 'time_taken': 29689.0, 'time_delta': '8:14:49', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 687010337, 'number': 19200, 'closed': datetime.datetime(2021, 10, 8, 0, 42, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 9, 19, 59, 51, tzinfo=datetime.timezone.utc), 'time_taken': 7792963.0, 'time_delta': '90 days, 4:42:43', 'additions': 357, 'deletions': 12, 'state': 'closed'}, {'id': 685729370, 'number': 19168, 'closed': datetime.datetime(2021, 7, 8, 14, 10, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 6, 36, 43, tzinfo=datetime.timezone.utc), 'time_taken': 27209.0, 'time_delta': '7:33:29', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 684435735, 'number': 19139, 'closed': datetime.datetime(2021, 7, 8, 14, 4, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 14, 37, 46, tzinfo=datetime.timezone.utc), 'time_taken': 170794.0, 'time_delta': '1 day, 23:26:34', 'additions': 95, 'deletions': 0, 'state': 'closed'}, {'id': 682980191, 'number': 19108, 'closed': datetime.datetime(2021, 7, 3, 10, 59, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 3, 6, 58, 40, tzinfo=datetime.timezone.utc), 'time_taken': 14476.0, 'time_delta': '4:01:16', 'additions': 3, 'deletions': 6, 'state': 'closed'}, {'id': 682054838, 'number': 19086, 'closed': datetime.datetime(2021, 7, 6, 1, 11, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 17, 49, 35, tzinfo=datetime.timezone.utc), 'time_taken': 372090.0, 'time_delta': '4 days, 7:21:30', 'additions': 80, 'deletions': 21, 'state': 'closed'}, {'id': 678556004, 'number': 19026, 'closed': datetime.datetime(2021, 7, 1, 18, 46, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 27, 17, 49, 9, tzinfo=datetime.timezone.utc), 'time_taken': 349036.0, 'time_delta': '4 days, 0:57:16', 'additions': 33, 'deletions': 40, 'state': 'closed'}, {'id': 674857228, 'number': 18935, 'closed': datetime.datetime(2022, 8, 12, 20, 16, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 21, 20, 28, 20, tzinfo=datetime.timezone.utc), 'time_taken': 36028095.0, 'time_delta': '416 days, 23:48:15', 'additions': 690, 'deletions': 11, 'state': 'closed'}, {'id': 673924304, 'number': 18921, 'closed': datetime.datetime(2021, 6, 20, 11, 16, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 19, 19, 36, 26, tzinfo=datetime.timezone.utc), 'time_taken': 56409.0, 'time_delta': '15:40:09', 'additions': 51, 'deletions': 2, 'state': 'closed'}, {'id': 670717597, 'number': 18856, 'closed': datetime.datetime(2021, 6, 26, 1, 11, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 15, 20, 17, 36, tzinfo=datetime.timezone.utc), 'time_taken': 881663.0, 'time_delta': '10 days, 4:54:23', 'additions': 75, 'deletions': 49, 'state': 'closed'}, {'id': 669104705, 'number': 18824, 'closed': datetime.datetime(2021, 6, 14, 5, 31, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 13, 19, 39, 47, tzinfo=datetime.timezone.utc), 'time_taken': 35530.0, 'time_delta': '9:52:10', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 668497646, 'number': 18807, 'closed': datetime.datetime(2022, 2, 11, 23, 18, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 11, 19, 43, 12, tzinfo=datetime.timezone.utc), 'time_taken': 21180941.0, 'time_delta': '245 days, 3:35:41', 'additions': 137, 'deletions': 84, 'state': 'closed'}, {'id': 638350650, 'number': 18429, 'closed': datetime.datetime(2021, 5, 10, 20, 56, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 10, 20, 7, 21, tzinfo=datetime.timezone.utc), 'time_taken': 2926.0, 'time_delta': '0:48:46', 'additions': 0, 'deletions': 32, 'state': 'closed'}, {'id': 552906892, 'number': 17040, 'closed': datetime.datetime(2023, 9, 28, 21, 40, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 11, 17, 41, 2, tzinfo=datetime.timezone.utc), 'time_taken': 85550358.0, 'time_delta': '990 days, 3:59:18', 'additions': 302, 'deletions': 79, 'state': 'closed'}, {'id': 528994490, 'number': 16801, 'closed': datetime.datetime(2020, 11, 30, 2, 8, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 28, 18, 53, 23, tzinfo=datetime.timezone.utc), 'time_taken': 112498.0, 'time_delta': '1 day, 7:14:58', 'additions': 7, 'deletions': 2, 'state': 'closed'}, {'id': 493764459, 'number': 16424, 'closed': datetime.datetime(2020, 9, 28, 17, 54, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 27, 19, 16, 26, tzinfo=datetime.timezone.utc), 'time_taken': 81508.0, 'time_delta': '22:38:28', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 488827701, 'number': 16369, 'closed': datetime.datetime(2020, 9, 17, 20, 41, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 17, 17, 38, 17, tzinfo=datetime.timezone.utc), 'time_taken': 11005.0, 'time_delta': '3:03:25', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 481116391, 'number': 16312, 'closed': datetime.datetime(2020, 9, 9, 17, 14, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 7, 7, 11, 11, tzinfo=datetime.timezone.utc), 'time_taken': 208986.0, 'time_delta': '2 days, 10:03:06', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 480530514, 'number': 16305, 'closed': datetime.datetime(2020, 9, 9, 17, 38, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 5, 14, 49, 26, tzinfo=datetime.timezone.utc), 'time_taken': 355754.0, 'time_delta': '4 days, 2:49:14', 'additions': 23, 'deletions': 22, 'state': 'closed'}, {'id': 475907181, 'number': 16236, 'closed': datetime.datetime(2020, 8, 31, 1, 44, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 30, 12, 48, 23, tzinfo=datetime.timezone.utc), 'time_taken': 46585.0, 'time_delta': '12:56:25', 'additions': 21, 'deletions': 780, 'state': 'closed'}, {'id': 470315547, 'number': 16166, 'closed': datetime.datetime(2020, 8, 21, 11, 41, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 17, 37, 45, tzinfo=datetime.timezone.utc), 'time_taken': 151424.0, 'time_delta': '1 day, 18:03:44', 'additions': 6, 'deletions': 3, 'state': 'closed'}, {'id': 468339497, 'number': 16145, 'closed': datetime.datetime(2020, 8, 27, 18, 45, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 16, 35, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1044602.0, 'time_delta': '12 days, 2:10:02', 'additions': 632, 'deletions': 752, 'state': 'closed'}, {'id': 467405463, 'number': 16130, 'closed': datetime.datetime(2020, 8, 13, 23, 24, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 14, 1, 4, tzinfo=datetime.timezone.utc), 'time_taken': 33792.0, 'time_delta': '9:23:12', 'additions': 70, 'deletions': 72, 'state': 'closed'}, {'id': 464577706, 'number': 16065, 'closed': datetime.datetime(2020, 8, 11, 17, 44, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 12, 28, 56, tzinfo=datetime.timezone.utc), 'time_taken': 364522.0, 'time_delta': '4 days, 5:15:22', 'additions': 575, 'deletions': 1962, 'state': 'closed'}, {'id': 461134920, 'number': 16011, 'closed': datetime.datetime(2020, 8, 4, 21, 42, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 1, 13, 57, 27, tzinfo=datetime.timezone.utc), 'time_taken': 287086.0, 'time_delta': '3 days, 7:44:46', 'additions': 149, 'deletions': 9, 'state': 'closed'}, {'id': 458475855, 'number': 15976, 'closed': datetime.datetime(2020, 7, 30, 23, 44, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 14, 26, 23, tzinfo=datetime.timezone.utc), 'time_taken': 119882.0, 'time_delta': '1 day, 9:18:02', 'additions': 349, 'deletions': 0, 'state': 'closed'}, {'id': 450861237, 'number': 15834, 'closed': datetime.datetime(2020, 7, 17, 12, 50, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 7, 23, 27, tzinfo=datetime.timezone.utc), 'time_taken': 19638.0, 'time_delta': '5:27:18', 'additions': 3, 'deletions': 4, 'state': 'closed'}, {'id': 449515447, 'number': 15805, 'closed': None, 'created': datetime.datetime(2020, 7, 15, 14, 24, 4, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 416, 'deletions': 125, 'state': 'open'}, {'id': 439322497, 'number': 15553, 'closed': datetime.datetime(2020, 7, 29, 0, 17, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 16, 39, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2965091.0, 'time_delta': '34 days, 7:38:11', 'additions': 59, 'deletions': 77, 'state': 'closed'}, {'id': 438441087, 'number': 15535, 'closed': datetime.datetime(2020, 7, 27, 0, 10, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 9, 26, 53, tzinfo=datetime.timezone.utc), 'time_taken': 2904244.0, 'time_delta': '33 days, 14:44:04', 'additions': 529, 'deletions': 6, 'state': 'closed'}, {'id': 437268967, 'number': 15473, 'closed': datetime.datetime(2020, 6, 19, 19, 55, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 19, 45, 16, tzinfo=datetime.timezone.utc), 'time_taken': 609.0, 'time_delta': '0:10:09', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 436709158, 'number': 15452, 'closed': datetime.datetime(2020, 6, 18, 20, 6, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 19, 8, 16, tzinfo=datetime.timezone.utc), 'time_taken': 3504.0, 'time_delta': '0:58:24', 'additions': 10, 'deletions': 71, 'state': 'closed'}, {'id': 436666473, 'number': 15449, 'closed': None, 'created': datetime.datetime(2020, 6, 18, 17, 36, 43, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 55, 'deletions': 6, 'state': 'open'}, {'id': 436038412, 'number': 15429, 'closed': datetime.datetime(2020, 6, 17, 22, 24, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 19, 1, 16, tzinfo=datetime.timezone.utc), 'time_taken': 12179.0, 'time_delta': '3:22:59', 'additions': 11, 'deletions': 8, 'state': 'closed'}, {'id': 435925894, 'number': 15423, 'closed': datetime.datetime(2020, 9, 25, 23, 16, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 15, 23, 35, tzinfo=datetime.timezone.utc), 'time_taken': 8668363.0, 'time_delta': '100 days, 7:52:43', 'additions': 69, 'deletions': 79, 'state': 'closed'}, {'id': 434563873, 'number': 15386, 'closed': datetime.datetime(2020, 6, 16, 1, 6, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 14, 5, 39, tzinfo=datetime.timezone.utc), 'time_taken': 39647.0, 'time_delta': '11:00:47', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 433991995, 'number': 15357, 'closed': datetime.datetime(2020, 6, 13, 11, 20, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 13, 11, 0, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1189.0, 'time_delta': '0:19:49', 'additions': 8, 'deletions': 3, 'state': 'closed'}, {'id': 433886327, 'number': 15339, 'closed': datetime.datetime(2020, 6, 12, 23, 20, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 21, 11, 16, tzinfo=datetime.timezone.utc), 'time_taken': 7771.0, 'time_delta': '2:09:31', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 432554585, 'number': 15294, 'closed': datetime.datetime(2020, 6, 10, 21, 38, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 16, 1, 25, tzinfo=datetime.timezone.utc), 'time_taken': 20246.0, 'time_delta': '5:37:26', 'additions': 12, 'deletions': 27, 'state': 'closed'}, {'id': 431897303, 'number': 15274, 'closed': datetime.datetime(2020, 6, 10, 0, 31, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 15, 46, 6, tzinfo=datetime.timezone.utc), 'time_taken': 31536.0, 'time_delta': '8:45:36', 'additions': 492, 'deletions': 11, 'state': 'closed'}, {'id': 430242248, 'number': 15250, 'closed': datetime.datetime(2020, 6, 14, 20, 19, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 7, 17, 41, 9, tzinfo=datetime.timezone.utc), 'time_taken': 614308.0, 'time_delta': '7 days, 2:38:28', 'additions': 224, 'deletions': 0, 'state': 'closed'}, {'id': 426796848, 'number': 15183, 'closed': datetime.datetime(2020, 6, 9, 0, 42, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 19, 53, 24, tzinfo=datetime.timezone.utc), 'time_taken': 535724.0, 'time_delta': '6 days, 4:48:44', 'additions': 133, 'deletions': 99, 'state': 'closed'}, {'id': 424690785, 'number': 15129, 'closed': None, 'created': datetime.datetime(2020, 5, 28, 19, 33, 32, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 174, 'deletions': 192, 'state': 'open'}, {'id': 420360371, 'number': 15031, 'closed': datetime.datetime(2020, 5, 25, 0, 27, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 20, 55, 2, tzinfo=datetime.timezone.utc), 'time_taken': 444738.0, 'time_delta': '5 days, 3:32:18', 'additions': 12, 'deletions': 5, 'state': 'closed'}, {'id': 406047709, 'number': 14662, 'closed': datetime.datetime(2020, 4, 24, 0, 50, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 20, 12, 58, 8, tzinfo=datetime.timezone.utc), 'time_taken': 301941.0, 'time_delta': '3 days, 11:52:21', 'additions': 77, 'deletions': 2, 'state': 'closed'}, {'id': 405543666, 'number': 14636, 'closed': None, 'created': datetime.datetime(2020, 4, 18, 18, 53, 20, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 188, 'deletions': 78, 'state': 'open'}, {'id': 395096581, 'number': 14386, 'closed': datetime.datetime(2020, 5, 2, 21, 34, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 28, 13, 33, 32, tzinfo=datetime.timezone.utc), 'time_taken': 3052831.0, 'time_delta': '35 days, 8:00:31', 'additions': 115, 'deletions': 39, 'state': 'closed'}, {'id': 393181683, 'number': 14323, 'closed': datetime.datetime(2020, 3, 25, 22, 59, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 24, 18, 22, 8, tzinfo=datetime.timezone.utc), 'time_taken': 103050.0, 'time_delta': '1 day, 4:37:30', 'additions': 18, 'deletions': 18, 'state': 'closed'}, {'id': 392623883, 'number': 14308, 'closed': datetime.datetime(2020, 6, 4, 0, 44, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 23, 20, 31, 59, tzinfo=datetime.timezone.utc), 'time_taken': 6235934.0, 'time_delta': '72 days, 4:12:14', 'additions': 97, 'deletions': 37, 'state': 'closed'}, {'id': 392403802, 'number': 14301, 'closed': datetime.datetime(2020, 3, 23, 23, 3, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 23, 14, 0, 24, tzinfo=datetime.timezone.utc), 'time_taken': 32569.0, 'time_delta': '9:02:49', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 390346282, 'number': 14235, 'closed': datetime.datetime(2020, 6, 14, 23, 21, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 18, 10, 20, 38, tzinfo=datetime.timezone.utc), 'time_taken': 7650032.0, 'time_delta': '88 days, 13:00:32', 'additions': 200, 'deletions': 11, 'state': 'closed'}, {'id': 389644452, 'number': 14221, 'closed': datetime.datetime(2020, 3, 22, 18, 43, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 17, 6, 11, 53, tzinfo=datetime.timezone.utc), 'time_taken': 477086.0, 'time_delta': '5 days, 12:31:26', 'additions': 168, 'deletions': 14, 'state': 'closed'}, {'id': 378614590, 'number': 13999, 'closed': datetime.datetime(2020, 3, 23, 0, 15, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 22, 17, 53, 33, tzinfo=datetime.timezone.utc), 'time_taken': 2528506.0, 'time_delta': '29 days, 6:21:46', 'additions': 33, 'deletions': 44, 'state': 'closed'}, {'id': 372798852, 'number': 13861, 'closed': datetime.datetime(2020, 2, 11, 22, 4, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 9, 7, 4, 57, tzinfo=datetime.timezone.utc), 'time_taken': 226759.0, 'time_delta': '2 days, 14:59:19', 'additions': 158, 'deletions': 6, 'state': 'closed'}, {'id': 359240008, 'number': 13610, 'closed': datetime.datetime(2020, 3, 23, 0, 31, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 4, 19, 23, 2, tzinfo=datetime.timezone.utc), 'time_taken': 6757680.0, 'time_delta': '78 days, 5:08:00', 'additions': 179, 'deletions': 18, 'state': 'closed'}, {'id': 340479049, 'number': 13397, 'closed': datetime.datetime(2019, 11, 20, 19, 3, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 13, 14, 2, 59, tzinfo=datetime.timezone.utc), 'time_taken': 622816.0, 'time_delta': '7 days, 5:00:16', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 336380187, 'number': 13366, 'closed': None, 'created': datetime.datetime(2019, 11, 4, 16, 56, 11, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 47, 'deletions': 48, 'state': 'open'}, {'id': 322918233, 'number': 13231, 'closed': datetime.datetime(2019, 10, 7, 3, 44, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 9, 30, 18, 38, 56, tzinfo=datetime.timezone.utc), 'time_taken': 551143.0, 'time_delta': '6 days, 9:05:43', 'additions': 4, 'deletions': 0, 'state': 'closed'}]"
