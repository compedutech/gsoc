pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
654742503,Make reason and score optional for report_event,"Implements MSC2414: https://github.com/matrix-org/matrix-doc/pull/2414
See #8551 

Signed-off-by: Callum Brown <callum@calcuode.com>",True,10077,https://api.github.com/repos/matrix-org/synapse/pulls/10077,https://github.com/matrix-org/synapse/pull/10077,closed,105,13,6,2,1,6,0,0,[],2021-05-27 09:57:14+00:00,2021-05-27 17:42:24+00:00,27910.0,7:45:10,"[{'comment_id': 640496515, 'comment_body': 'Note that this will fail if it\'s `None`, so you probably want to do `body.get(""reason"") or """"` instead. Same comment for `score` a few lines down.', 'comment_created': datetime.datetime(2021, 5, 27, 10, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'babolivier', 'type': 'User'}, {'comment_id': 640497976, 'comment_body': 'Can you link to the MSC in there? Changelog files will be compiled into a markdown document on release so feel free to make it a markdown link.', 'comment_created': datetime.datetime(2021, 5, 27, 10, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'babolivier', 'type': 'User'}, {'comment_id': 640506818, 'comment_body': 'Ah ok. So this is an acceptable request?\r\n```\r\n{\r\n    ""reason"": null,\r\n    ""score"": -100\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 5, 27, 10, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 640507079, 'comment_body': ""Sure, didn't realise it was markdown."", 'comment_created': datetime.datetime(2021, 5, 27, 10, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 640507988, 'comment_body': 'Sorry, I got things mixed up. Your solution is correct.', 'comment_created': datetime.datetime(2021, 5, 27, 10, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'babolivier', 'type': 'User'}, {'comment_id': 640508199, 'comment_body': 'To be fair we should probably spell it out better.', 'comment_created': datetime.datetime(2021, 5, 27, 10, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'babolivier', 'type': 'User'}]","[{'commit_sha': '7eb25436cba1170381c8db62697cdd333da18999', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e65cee562cfd63fb39e798d1f580d33213a47404', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}]",Callum Brown,40113543,callum@calcuode.com,User,,15,,0,4
660928534,Registration well known,Would close #570 ,True,600,https://api.github.com/repos/Nheko-Reborn/nheko/pulls/600,https://github.com/Nheko-Reborn/nheko/pull/600,closed,119,31,2,2,3,0,0,0,[],2021-06-03 13:55:51+00:00,2021-06-03 18:12:34+00:00,15403.0,4:16:43,[],"[{'commit_sha': 'b8b0b5c618b2c4251902cda91bee53eef11c4f3f', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78607a7e59b15edc6b203d7f9226bedfa5dfcf3b', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}]",Callum Brown,40113543,callum@calcuode.com,User,,15,,0,4
661671163,MSC3231: Token authenticated registration,"[Rendered](https://github.com/govynnus/matrix-doc/blob/token-registration/proposals/3231-token-authenticated-registration.md)

Signed-off-by: Callum Brown <callum@calcuode.com>

A couple questions:

* ~~All the other UIAA auth types start `m.login`, so should I stick with that even though it's registration rather than login?~~ [yes]
* ~~Is the unstable prefix bit right?~~ [yes]

- [Synapse implementation](https://github.com/matrix-org/synapse/pull/10142)
- [Nheko implementation](https://github.com/Nheko-Reborn/nheko/pull/680) using [registration token support in mtxclient](https://github.com/Nheko-Reborn/mtxclient/pull/60)
- [Partial ruma implementation](https://github.com/ruma/ruma/pull/722)
- [Other part of ruma implementation](https://github.com/ruma/ruma/pull/757)",True,3231,https://api.github.com/repos/matrix-org/matrix-spec-proposals/pulls/3231,https://github.com/matrix-org/matrix-spec-proposals/pull/3231,closed,138,0,1,15,16,77,4,1,"[{'name': 'merged'}, {'name': 'proposal'}, {'name': 'client-server'}, {'name': 'kind:feature'}]",2021-06-04 11:01:49+00:00,2021-09-27 17:01:10+00:00,9957561.0,"115 days, 5:59:21","[{'comment_id': 645607865, 'comment_body': 'Please wrap your lines', 'comment_created': datetime.datetime(2021, 6, 4, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'uhoreg', 'type': 'User'}, {'comment_id': 645613629, 'comment_body': '(to around ~120 characters per line)', 'comment_created': datetime.datetime(2021, 6, 4, 14, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ShadowJonathan', 'type': 'User'}, {'comment_id': 645620078, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2021, 6, 4, 14, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 645680834, 'comment_body': ""Although I do love the new spec website, unfortunately it's best to link to released versions of the spec wherever possible, so that a future unstable spec version doesn't cause these links to break.\r\n\r\nSo https://matrix.org/docs/spec/client_server/r0.6.1#post-matrix-client-r0-register and https://matrix.org/docs/spec/client_server/r0.6.1#user-interactive-authentication-api."", 'comment_created': datetime.datetime(2021, 6, 4, 15, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 645693604, 'comment_body': 'We actually recently modified the process to allow for implementations to move forward without waiting for a new spec release cycle. Unstable prefixes can now be dropped once a proposal document has passed FCP and been merged.\r\n\r\nhttps://spec.matrix.org/unstable/proposals/#early-release-of-an-mscidea', 'comment_created': datetime.datetime(2021, 6, 4, 16, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 645700992, 'comment_body': 'I wonder if there is a potential usecase for allowing the client to check the validity of a registration token without actually using it to register an account...', 'comment_created': datetime.datetime(2021, 6, 4, 16, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 645701625, 'comment_body': 'Implementation should probably be careful to only invalidate/use up a token once registration of a user has completed. Otherwise, I could see an edge case where a user got halfway through UIAA before forgetting to finish/their app randomly crashes and they can no longer use that token to register.', 'comment_created': datetime.datetime(2021, 6, 4, 16, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 645701828, 'comment_body': ""Should the username and password be required in the token stage?\r\n\r\nIt feels like nicer UX to ask for one thing at a time.  For example in Circles, we don't ask for username/password until we've cleared the (Midnight) token validation stage."", 'comment_created': datetime.datetime(2021, 6, 4, 16, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cvwright', 'type': 'User'}, {'comment_id': 645706395, 'comment_body': ""Oops, didn't realise that :-)"", 'comment_created': datetime.datetime(2021, 6, 4, 16, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 645707192, 'comment_body': 'I kind of prefer the old site actually', 'comment_created': datetime.datetime(2021, 6, 4, 16, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 645708632, 'comment_body': 'I did read that, but obviously not carefully enough :-)', 'comment_created': datetime.datetime(2021, 6, 4, 16, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 645713233, 'comment_body': 'So do like @cvwright suggests [here](https://github.com/matrix-org/matrix-doc/pull/3231#discussion_r645701828)?', 'comment_created': datetime.datetime(2021, 6, 4, 16, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 645716373, 'comment_body': ""I agree that would be nice. Username and password aren't required by the spec, but maybe they are auto generated if omitted? I'll have to check.\r\n\r\n(Hi by the way, thanks for taking a look)"", 'comment_created': datetime.datetime(2021, 6, 4, 16, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 645717035, 'comment_body': ""Yep, I'll fix that wording to make it clear"", 'comment_created': datetime.datetime(2021, 6, 4, 16, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 645718166, 'comment_body': 'Yes, definitely this is important.  In Midnight, we have a 2nd database of ""pending"" registrations.  It does complicate things, because now when a client wants to register, the server needs to verify that the total number of completed registrations plus the total number of pending registrations isn\'t more than what the token allows.\r\n\r\nTo account for clients crashing (or losing interest, or whatever...) the pending registrations have an automatic expiration time, something like 30 minutes from when they\'re created.', 'comment_created': datetime.datetime(2021, 6, 4, 16, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cvwright', 'type': 'User'}, {'comment_id': 645723493, 'comment_body': ""I'll try to remember the pending idea.\r\n\r\nHow does it read now?"", 'comment_created': datetime.datetime(2021, 6, 4, 17, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 645741437, 'comment_body': 'Maybe having a dummy stage after the token stage would allow this?\r\nSee my rambling [here](https://github.com/matrix-org/matrix-doc/pull/3231#issuecomment-854890976)\r\n\r\nThe client can submit the token, get a 401 response with the token stage in `completed` and then submit the username and password along with the dummy auth.', 'comment_created': datetime.datetime(2021, 6, 4, 17, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 645910123, 'comment_body': 'This seems like a gap in the spec. Maybe we could standardize submitting a registration with no username or password as a way to query the requirements? Current homeservers may response with a bad request which is indication to fall back to asking for username and password first.\r\n\r\nPossibly a request with `auth` but still no username and password could be further used to validate the auth without actually registering.', 'comment_created': datetime.datetime(2021, 6, 5, 0, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kevincox', 'type': 'User'}, {'comment_id': 645985550, 'comment_body': 'The current approach to query availability of the username uses an extra endpoint: https://matrix.org/docs/spec/client_server/r0.6.1#get-matrix-client-r0-register-available\r\n\r\nThis was presumably done to sidestep the UIA you need to clear on registration otherwise. So checking the validity of the token could be an additional endpoint too. Requiring dummy to be used with token registration just to check, if the token is still valid, feels weird.\r\n\r\n`POST /_matrix/client/r0/register/org.matrix.msc3231.registration.token/validity` or info feels more natural and could return richer information, if the server wants to expose it, like the number of uses left or the time until expiration, etc.\r\n\r\nIn general clients usually query the available flows ahead of time and adjust their UI appropriately, then clear all the stages one after the other in the background. This is used to accept terms and conditions and select a free username ahead of time for example.', 'comment_created': datetime.datetime(2021, 6, 5, 12, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 645988621, 'comment_body': ""I don't like the idea of a new endpoint just for checking validity of tokens. It feels to me like a lot of extra complexity for little or no benifit.\r\n\r\nI might be wrong here and I'm not a client author, so please correct me, but what would  a client actually do with information about number of uses left or expiry time?\r\n\r\nI would think the dummy method would be simpler to implement in both client and server, and if the dummy stage is present anyway to allow clients to choose a flow with more than just the token stage, then it doesn't seem that weird.\r\n\r\nI should probably check a few different implementations though.\r\n\r\nAnother thing I need to check is if servers try and store username, password, device_id, etc. in the session before UIA is complete."", 'comment_created': datetime.datetime(2021, 6, 5, 13, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 645988964, 'comment_body': ""Oh, maybe it's tricky to pause UIA to wait for username and registration to be input."", 'comment_created': datetime.datetime(2021, 6, 5, 13, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 646008596, 'comment_body': ""Note that the client would still need to know that they should ask for an auth token in the first place. That is why I was thinking that reusing the existing registration endpoint may make sense. It already has a way to explain the requirements to the client so it would make sense to explain the requirements *before* actually attempting to register. I wouldn't mind an extra auth token validation endpoint as well but it doesn't solve initial issue."", 'comment_created': datetime.datetime(2021, 6, 5, 16, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kevincox', 'type': 'User'}, {'comment_id': 646009661, 'comment_body': ""Usually with UIA you make one request, to get all the flows you need. That works to know, the token is required, but does not tell you if the token is still valid without adding a dummy stage and breaking existing assumptions about UIA. I guess info about the token isn't needed, but an endpoint to test its validity would probably solve that in the most reasonable way?"", 'comment_created': datetime.datetime(2021, 6, 5, 16, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 646027554, 'comment_body': ""> I might be wrong here and I'm not a client author, so please correct me, but what would a client actually do with information about number of uses left or expiry time?\r\n\r\nIMO nothing good.  Maybe I'm just paranoid.  But I personally would prefer for the recipient of a token *not* to know anything else about it.  As a user, maybe I want to be lazy and create a single token for 10 of my friends.  I'd rather not have one friend pass it along to 9 of their other friends, denying my other 9 friends the chance to register.  Granted, this can happen regardless, but I'd prefer not to make it easy.\r\n\r\nOTOH, I think a token management API would be great for the token creator / owner to check validity, expiration, etc."", 'comment_created': datetime.datetime(2021, 6, 5, 19, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'cvwright', 'type': 'User'}, {'comment_id': 646037017, 'comment_body': ""For the moment at least the token management interface will be up to the server, so for the Synapse implementation I'll be adding a couple endpoints to the admin API.  Maybe in the future someone will come up with an MSC to standardise it....\r\n\r\nTesting with Synapse, no errors about missing username/password are thrown until UIA is complete. That makes sense to me, but it's not exactly clear in the spec.\r\n\r\nReading the specification more carefully, the bit on [dummy auth](https://matrix.org/docs/spec/client_server/r0.6.1#dummy-auth) says:\r\n> [Dummy authentication] can also be used to differentiate flows where otherwise one flow would be a subset of another flow. eg. if a server offers flows m.login.recaptcha and m.login.recaptcha, m.login.email.identity and the client completes the recaptcha stage first, the auth would succeed with the former flow, even if the client was intending to then complete the email auth stage. A server can instead send flows m.login.recaptcha, m.login.dummy and m.login.recaptcha, m.login.email.identity to fix the ambiguity.\r\n\r\nSo probably servers will have a dummy stage anyway, but clients won't want to rely on that for verification that the token is valid. That leaves clients sending authentication without username/password and seeing if authentication succeeds, the problem being that they'll get a 400 response because username/password is missing. Then they'd have to compare error codes, etc. and it all gets complex and fragile. Hmm. A separate endpoint looks alright now.\r\n\r\nI might have more thoughts on this in the morning."", 'comment_created': datetime.datetime(2021, 6, 5, 21, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 646873784, 'comment_body': ""I've added a bit on [checking the validity of a token](https://github.com/govynnus/matrix-doc/blob/token-registration/proposals/3231-token-authenticated-registration.md#checking-the-validity-of-a-token). Thoughts?"", 'comment_created': datetime.datetime(2021, 6, 7, 19, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 646883419, 'comment_body': 'In regards to the original question,\r\n> Should the username and password be required in the token stage?\r\n\r\nI believe that with the UIAA they are not required, but this might just be how Synapse handles it:\r\n\r\n```\r\nPOST /_matrix/client/r0/register\r\n\r\n{)\r\n```\r\n```\r\nHTTP/1.1 401 Unauthorized\r\n\r\n{\r\n    ""flows"": [\r\n        {\r\n            ""stages"": [ ""m.login.registration_token"" ]\r\n        }\r\n    ],\r\n    ""params"": {},\r\n    ""session"": ""xxxxx""\r\n}\r\n```\r\n```\r\nPOST /_matrix/client/r0/register\r\n\r\n{\r\n    ""auth"": {\r\n        ""type"": ""m.login.registration_token"",\r\n        ""token"": ""abcd"",\r\n        ""session"": ""xxxxx""\r\n    }\r\n)\r\n```\r\n```\r\nHTTP/1.1 400 Bad Request\r\n\r\n{\r\n    ""errcode"":""M_MISSING_PARAM"",\r\n    ""error"":""Missing params: password""\r\n}\r\n```\r\n```\r\nPOST /_matrix/client/r0/register\r\n\r\n{\r\n    ""auth"": {\r\n        ""session"": ""xxxxx""\r\n    }\r\n    ""username"": ""alice"",\r\n    ""password"": ""1234""\r\n)\r\n```\r\n```\r\nHTTP/1.1 200 OK\r\n\r\n{\r\n    ""user_id"":""@alice:example.org"",\r\n    ""home_server"":""example.org"",\r\n    ""access_token"":""987654321"",\r\n    ""device_id"":""XYZ""\r\n}\r\n```\r\n\r\nI\'m going to move the discussion about validity over to [this thread](https://github.com/matrix-org/matrix-doc/pull/3231#discussion_r645700992).', 'comment_created': datetime.datetime(2021, 6, 7, 19, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 649351027, 'comment_body': 'Apologies for taking a while to get to this - I\'ve been a bit buried in github notifications recently.\r\n\r\nThe issue of whether a user credentials must be submitted during each stage of user-interactive authentication is a [known problem](https://github.com/matrix-org/matrix-doc/issues/2907), and the core team has agreed that it\'s a problem with the spec needing to be updated.\r\n\r\nSynapse remembers session parameters (including `password`) between requests, however **these parameters are required initially** before completing a UIAA stage will work. For instance, you can do:\r\n\r\n```\r\nPOST http://localhost:8008/_matrix/client/r0/register\r\n\r\n{\r\n    ""username"": ""some_user""\r\n    ""password"": ""some_pass""\r\n}\r\n```\r\n\r\n```\r\nHTTP/1.1 200 OK\r\n\r\n{\r\n  ""session"": ""gBUAYZvnzZCGJfjsrVIXMMPa"",\r\n  ""flows"": [{\r\n    ""stages"": [""m.login.dummy""]\r\n  }],\r\n  ""params"": {}\r\n}\r\n```\r\n\r\n```\r\n{\r\n  ""auth"": {\r\n      ""type"": ""m.login.dummy"",\r\n      ""session"": ""gBUAYZvnzZCGJfjsrVIXMMPa""\r\n  }\r\n}\r\n```\r\n\r\n```\r\nHTTP/1.1 200 OK\r\n\r\n{\r\n    ""user_id"": ""@some_user:example.org"",\r\n    ""home_server"": ""example.org"",\r\n    ""access_token"": ""123"",\r\n    ""device_id"": ""xyz""\r\n}\r\n```\r\n\r\nSynapse also allows *modifying* those parameters after they\'ve been set, though discourages doing so (and only does so for backwards compatibility reasons).\r\n\r\nUnfortunately, as you\'ve seen above, this does not work the other way around (yet). What this means is that clients are unable to query for token validity without also submitting a username and password first or simultaneously. However... I don\'t really see a reason that the server would *need* the parameters of `/register` provided *before* sending back stages (other than the `kind` query parameter).\r\n\r\nI think a separate endpoint is fine for now. One could write a separate MSC that states that the behaviour of clients supplying parameters only once during UIAA is fine, using the justifications provided in the above issue. They could then also note on top that additionally allowing clients to set these parameters at any point during the process gives clients the ability to check that a stage is valid without needing to ask for a username and password as well. Referencing this MSC would be one usecase.', 'comment_created': datetime.datetime(2021, 6, 10, 16, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 649358721, 'comment_body': ""Heads up that as part of the spec's new [Global Versioning Scheme](https://github.com/matrix-org/matrix-doc/blob/master/proposals/2844-global-versioning.md#endpoint-versioning), this endpoint would be `/_matrix/client/v1/...` instead of `/_matrix/client/r0/...`."", 'comment_created': datetime.datetime(2021, 6, 10, 16, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 649362372, 'comment_body': ""Heads up that if we're putting the token in a query parameter, it's probably a good idea to limit the possible character's that can be used for one. For instance, [we had to switch](https://spec.matrix.org/unstable/rooms/v4/#server-implementation-components) to URL-safe, base64-encoded Event IDs in room version 4 after some issues with room v3 event IDs."", 'comment_created': datetime.datetime(2021, 6, 10, 16, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 649363702, 'comment_body': ""It's empirically implied, but saying this query parameter is required is helpful when we eventually get to writing the spec."", 'comment_created': datetime.datetime(2021, 6, 10, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 649365254, 'comment_body': ""I think an endpoint is a good solution prior to changing up `/register` to be more flexible. I also like the structure of `/register/<auth type>/<action>` :)\r\n\r\nI've left some additional comments on the endpoint in their own threads."", 'comment_created': datetime.datetime(2021, 6, 10, 16, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 649366821, 'comment_body': ""```suggestion\r\nSimilarly, `/_matrix/client/unstable/register/org.matrix.msc3231.login.registration_token/validity`\r\n```\r\n\r\nAdditionally, the common format would probably be more along the lines of:\r\n\r\n`/_matrix/client/unstable/org.matrix.msc3231/register/login.registration_token/validity`\r\n\r\nor\r\n\r\n`/_matrix/client/unstable/org.matrix.msc3231/register/org.matrix.msc3231.login.registration_token/validity`\r\n\r\nBut it's completely up to you. The process only [requires](https://spec.matrix.org/unstable/proposals/#early-release-of-an-mscidea) `/unstable` and then a namespace to be *somewhere* else in the path :slightly_smiling_face: "", 'comment_created': datetime.datetime(2021, 6, 10, 16, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 649370620, 'comment_body': 'Looks good to me.', 'comment_created': datetime.datetime(2021, 6, 10, 17, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 649460659, 'comment_body': '@anoadragon453 What about querying the required UIA stages? Can a client submit an empty /register, adapt the UI to the required UIA stages and then send /register with password, username and the UIA stages as necessary?', 'comment_created': datetime.datetime(2021, 6, 10, 19, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 649497660, 'comment_body': 'Ok. Should I change all instances of `/_matrix/client/r0/register` to `/_matrix/client/v1/register` too?', 'comment_created': datetime.datetime(2021, 6, 10, 20, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 649504643, 'comment_body': ""That structure was @deepbluev7's idea :smile: "", 'comment_created': datetime.datetime(2021, 6, 10, 20, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 649512720, 'comment_body': ""I've gone with the long, fully namespaced one :slightly_smiling_face: "", 'comment_created': datetime.datetime(2021, 6, 10, 20, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 649541199, 'comment_body': 'Ah yes. Does [this](https://github.com/govynnus/matrix-doc/blob/token-registration/proposals/3231-token-authenticated-registration.md#proposal) look ok?', 'comment_created': datetime.datetime(2021, 6, 10, 21, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 650522990, 'comment_body': ""`/register` is fine to leave as `/r0` for now I think, as that's currently how it appears in the spec. Once we release a new spec version it'll be bumped to `/_matrix/client/v3/register` as per [MSC2844](https://github.com/matrix-org/matrix-doc/blob/master/proposals/2844-global-versioning.md#endpoint-versioning)."", 'comment_created': datetime.datetime(2021, 6, 13, 12, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652799168, 'comment_body': 'That looks pretty reasonable, yes :slightly_smiling_face: ', 'comment_created': datetime.datetime(2021, 6, 16, 15, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652821859, 'comment_body': 'Oh, however just mentioning that the reason for the restriction is partially to prevent DoS from large token lengths, as well as to not run into URL encoding issues with `m.login.registration_token/validity` would be useful.', 'comment_created': datetime.datetime(2021, 6, 16, 15, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652823846, 'comment_body': 'Ok, will do', 'comment_created': datetime.datetime(2021, 6, 16, 15, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 652860841, 'comment_body': '```suggestion\r\nIf the server verifies that `fBVFdqVE` is a valid token then the account is\r\nregistered as normal assuming all other required auth stages have been completed, otherwise a `401` status is returned. Once registration of\r\n```\r\n\r\nminor nit', 'comment_created': datetime.datetime(2021, 6, 16, 16, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652862560, 'comment_body': ""Not with Synapse's current implementation of UIAA, and the spec is [currently unclear](https://github.com/matrix-org/matrix-doc/issues/2907) about when those need to be provided (either initially, or just at some point during the registration process).\r\n\r\nBut I think we've reached consensus in that's where we'd like to be in the future."", 'comment_created': datetime.datetime(2021, 6, 16, 16, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 685272562, 'comment_body': ""I don't want to resubmit the same request with username and password later, I want to submit a new request with username and password. I just want to send a request first with no data, so that I can query the UIA flows. The spec doesn't say anything about if the server should return 401 or 400 in that case, but in practice Element uses that and synapse returns 401. Otherwise registration wouldn't work in Element today. There is #3105 to spec a different approach to do this though, since none seems to know about that synapse feature."", 'comment_created': datetime.datetime(2021, 8, 9, 15, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 685849063, 'comment_body': 'Presumably getting a token is currently an implementation detail? It would be quite cool to be able to click a button from within your Matrix client to invite someone into your server (and land into your current room?) but that may be difficult without a standard API to fetch a new token.', 'comment_created': datetime.datetime(2021, 8, 10, 9, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Half-Shot', 'type': 'User'}, {'comment_id': 685935609, 'comment_body': ""This would be part of an admin API, since not all users should have the possibility to invite other users to the HS (presumably). And since no admin endpoint is in the spec so far, I'd say this would be out of scope for this particular MSC. I agree that this would be nice to have in the future though. (There might be other ways to do this, but it has a completely separate set of concerns so I'd rather have this as a separate MSC)"", 'comment_created': datetime.datetime(2021, 8, 10, 11, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 686798824, 'comment_body': 'Seems reasonable to me. And yeah, I would hope at some point we could standardize.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Half-Shot', 'type': 'User'}, {'comment_id': 694990023, 'comment_body': 'We should note that using the same token again for the same session should be allowed (for idempotency)?', 'comment_created': datetime.datetime(2021, 8, 24, 15, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'erikjohnston', 'type': 'User'}, {'comment_id': 694991278, 'comment_body': "" Can't clients do this by starting a new registration flow and doing the validity check first? Or is the problem that you need to username/password as the first step in `/register`? If feels a bit odd if the latter is the case (can we not have accounts without passwords?)\r\n\r\nI'm just wondering if allowing people to check if a token works without using it will somehow encourage people to share tokens or something?"", 'comment_created': datetime.datetime(2021, 8, 24, 16, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'erikjohnston', 'type': 'User'}, {'comment_id': 695003415, 'comment_body': ""This point [came up earlier](https://github.com/matrix-org/matrix-doc/pull/3231#discussion_r649351027), and at least in Synapse it appears that `username` / `password` are required initially. The spec in the area is currently a bit vague, hence why it hasn't been fixed yet.\r\n\r\nBut yes, this is a convincing usecase to do so, and I think generally we've agreed that the spec should be updated, and Synapse as well."", 'comment_created': datetime.datetime(2021, 8, 24, 16, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 695123358, 'comment_body': 'Except for where few clients actually implement this :)', 'comment_created': datetime.datetime(2021, 8, 24, 19, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'turt2live', 'type': 'User'}, {'comment_id': 695124513, 'comment_body': 'Where did v1 come from?', 'comment_created': datetime.datetime(2021, 8, 24, 19, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'turt2live', 'type': 'User'}, {'comment_id': 695125170, 'comment_body': 'This should get words to say it can be rate limited in order to prevent dictionary attacks.', 'comment_created': datetime.datetime(2021, 8, 24, 19, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'turt2live', 'type': 'User'}, {'comment_id': 695129829, 'comment_body': ""You can't change the content of a UIA flow, once you started it. You would need to start a new UIA flow to add username and password, but in that the token may not be valid anymore then."", 'comment_created': datetime.datetime(2021, 8, 24, 19, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 695137278, 'comment_body': 'I think it would be neat if we could define something with the `matrix:` URI scheme for this, so that it can be sent as a link to someone or even displayed as a QR code.  So someone could, in theory, scan the QR code, have their device launch a Matrix client, and then register with the server.\r\n\r\nThough this is probably best left to a separate MSC.', 'comment_created': datetime.datetime(2021, 8, 24, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'uhoreg', 'type': 'User'}, {'comment_id': 695143758, 'comment_body': 'Agreed, having matrix: uri support for this would be awesome!', 'comment_created': datetime.datetime(2021, 8, 24, 19, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 697592226, 'comment_body': ""I think from here https://github.com/matrix-org/matrix-doc/pull/3231#discussion_r649358721, but now I look back I don't think @anoadragon453 actually said to change it. Should it be `r0`?"", 'comment_created': datetime.datetime(2021, 8, 27, 17, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 697594977, 'comment_body': ""Yep, I definitely want that. I'll probably write an MSC at some point :-)"", 'comment_created': datetime.datetime(2021, 8, 27, 17, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 697595553, 'comment_body': 'Few clients will implement the new type, or few clients implement the fallback mechanism?', 'comment_created': datetime.datetime(2021, 8, 27, 17, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 697720458, 'comment_body': 'Maybe also add valid_until or invalid_since to show that the token was valid in the past but is not valid anymore', 'comment_created': datetime.datetime(2021, 8, 27, 21, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'timokoesters', 'type': 'User'}, {'comment_id': 698596819, 'comment_body': ""Yeah, that's probably good to note. Is UIA supposed to be idempotent?"", 'comment_created': datetime.datetime(2021, 8, 30, 15, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 698600109, 'comment_body': 'Yep, thanks.', 'comment_created': datetime.datetime(2021, 8, 30, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 698609683, 'comment_body': 'Whether tokens expire or not is up to the server, so some tokens might not expire, and it may not be easy for servers to store when a token becomes invalid.\r\n\r\nThe response could be changed so that the client can distinguish between tokens which are:\r\n- unknown to the server\r\n- known but invalid (were valid in the past)\r\n- valid', 'comment_created': datetime.datetime(2021, 8, 30, 15, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 703640865, 'comment_body': 'It should be r0 for now, until we actually land/merge the endpoint versioning. The intent is more or less the important part.', 'comment_created': datetime.datetime(2021, 9, 7, 15, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'turt2live', 'type': 'User'}, {'comment_id': 703641030, 'comment_body': 'Few clients implement the fallback mechanism. ', 'comment_created': datetime.datetime(2021, 9, 7, 16, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'turt2live', 'type': 'User'}, {'comment_id': 703645847, 'comment_body': 'I think the new wording is good. I think each request should be idempotent for UIA, and generally in Matrix (there are a few exceptions)', 'comment_created': datetime.datetime(2021, 9, 7, 16, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'erikjohnston', 'type': 'User'}, {'comment_id': 703646922, 'comment_body': 'In which case I think this is fine as it stands and we can clean it up if we get around to cleaning up `/register`?', 'comment_created': datetime.datetime(2021, 9, 7, 16, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'erikjohnston', 'type': 'User'}, {'comment_id': 704575248, 'comment_body': 'What is the usecase for distinguishing between ""unknown to the server"" and ""known but invalid (were valid in the past)"".\r\n\r\nAlso note that doing so consistently would require homeserver implementations to keep a record of all tokens ever created.', 'comment_created': datetime.datetime(2021, 9, 8, 16, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 713174421, 'comment_body': ""this isn't strictly valid, as written.\r\n\r\nAlso, please can we include `.` and `~` for consistency with the unreserved URL characters in [RFC3986](https://www.ietf.org/rfc/rfc3986.html#section-2.3) (and the proposal in https://github.com/matrix-org/matrix-doc/pull/1597, which I should really get around to doing something with, and sundry other places in the matrix protocol) ?\r\n\r\n```suggestion\r\nregex `[A-Za-z0-9._~-]`.\r\n```"", 'comment_created': datetime.datetime(2021, 9, 21, 15, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'richvdh', 'type': 'User'}, {'comment_id': 714082657, 'comment_body': ""I'm not sure about the usecase. I don't think servers would be required to keep a record because if the token is unknown (maybe it was valid but is now deleted) then it can say so."", 'comment_created': datetime.datetime(2021, 9, 22, 15, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 714091359, 'comment_body': ""What isn't strictly valid?"", 'comment_created': datetime.datetime(2021, 9, 22, 16, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 714122333, 'comment_body': ""This seems spurious: making something against the spec doesn't stop it from being a viable attack (if only...)"", 'comment_created': datetime.datetime(2021, 9, 22, 16, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dbkr', 'type': 'User'}, {'comment_id': 714127566, 'comment_body': ""This is also simple enough to add in a future extension so it shouldn't necessarily block the MSC. It does seem like it could be useful: servers presumably wouldn't be obliged to be 100% correct about what tokens are were valid and have never been valid."", 'comment_created': datetime.datetime(2021, 9, 22, 16, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dbkr', 'type': 'User'}, {'comment_id': 714135826, 'comment_body': ""> What isn't strictly valid?\r\n\r\n`-` has to be at the start or end.\r\n\r\n```\r\n$ grep '[A-Za-z0-9-_]'\r\ngrep: Invalid range end\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 9, 22, 16, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'richvdh', 'type': 'User'}, {'comment_id': 714142593, 'comment_body': 'Oh, right. Thanks.', 'comment_created': datetime.datetime(2021, 9, 22, 17, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}]","[{'commit_sha': '79c74c29270d8dcd54a530d0d1470e07bc9cb954', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a93e43f30caabdac2306b067f07058c94fea4a8', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b93cfde173260deb4dea0b8bd04c6175514875c', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1606dc48365c3e4f694123fd91963e73da9b6139', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ba0996418c7cfc0c47dfce4a1acab2150ab517d', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa8e89634a624ddf3c35268850a9a9a1393ebb23', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84b9976eb3800bbef2f2273a745decea79e9e6a3', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e7352589a75afbc679255fe209174b0cdc304f4', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22f1f93ed7a5ea97259a33b1f14787edb13bf119', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32a9c01b6bbe7e9b810d09618ecf74a505a17ed3', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80fc0ed27c90becae7f2d596c9bb64f45611156e', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88edde669fb7d352cd8039e99c4f2d95136051e7', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2433c9fa7a4fb80a0f41691cbcf261f9e8e26ab5', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eb8a8b2991a34083ce9803c054e27ba443ff551', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79939f955b34113404b5d363a981f790aa7ec0e7', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}]",Callum Brown,40113543,callum@calcuode.com,User,,15,,0,4
664874094,Implement MSC3231: Token authenticated registration,"Signed-off-by: Callum Brown <callum@calcuode.com>

This is part of my GSoC project implementing [MSC3231](https://github.com/matrix-org/matrix-doc/pull/3231).

Status:
- [X] Works with a list of hard-coded tokens
- [x] Checks against tokens stored in the database
- [x] Validity checking endpoint
- [x] Fallback
- [x] Admin API for managing tokens
",True,10142,https://api.github.com/repos/matrix-org/synapse/pulls/10142,https://github.com/matrix-org/synapse/pull/10142,closed,2389,1,21,54,0,128,0,0,[],2021-06-08 12:49:04+00:00,2021-08-21 21:14:43+00:00,6423939.0,"74 days, 8:25:39","[{'comment_id': 652805372, 'comment_body': ""One thing to consider is how this will interact with the `enable_registration` option. Since people have typically used that option to disable wide-open registration, we'd now need to inform them that an alternative may be to enable `enable_registration` *and* `registrations_require_token`.\r\n\r\nSo concretely, I'd suggest placing some text in the description of this option to state that `enable_registration` must be set to `true` for this feature to be meaningful.\r\n\r\nIt may also be useful to state that new tokens can be added through the Admin API, and that disabling the option will not delete existing tokens. Just for peace of mind."", 'comment_created': datetime.datetime(2021, 6, 16, 15, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652806546, 'comment_body': '`registration_requires_token` might be slightly clearer.', 'comment_created': datetime.datetime(2021, 6, 16, 15, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652809269, 'comment_body': 'Check out the [config file format guide](https://matrix-org.github.io/synapse/develop/code_style.html#configuration-file-format). Typically for boolean options we have the commented out value be the *non-default* value, and then state ""Uncomment this option to require tokens upon registration of an account"" or similar.', 'comment_created': datetime.datetime(2021, 6, 16, 15, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652818184, 'comment_body': 'Some of this code can just be replaced by `AuthHandler.get_session_data`:\r\n\r\nhttps://github.com/matrix-org/synapse/blob/7562d887e159f404c8d752271310f4432f246656/synapse/handlers/auth.py#L676-L691\r\n\r\nNote that you can get access to the `AuthHandler` object through `hs` (the `HomeServer` object passed through in `__init__`) then doing `hs.get_auth_handler()`.', 'comment_created': datetime.datetime(2021, 6, 16, 15, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652822770, 'comment_body': 'Putting in some newlines between logical sections would help a bit with readability here I think.', 'comment_created': datetime.datetime(2021, 6, 16, 15, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652828900, 'comment_body': ""While unlikely, it's good practice to place both of these database operations in the same transaction lest there be a race condition somewhere. The same applies to `use_registration_token`.\r\n\r\nTo do so, one would simply wrap these calls in a call to `self.db_pool.runInteraction`, and use the `_txn` variants of each function. See the following for an example:\r\n\r\nhttps://github.com/matrix-org/synapse/blob/4b965c862dc66c0da5d3240add70e9b5f0aa720b/synapse/storage/databases/main/group_server.py#L386-L432"", 'comment_created': datetime.datetime(2021, 6, 16, 15, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652831990, 'comment_body': 'I would also state what makes a token ""invalid"". Looks like that means that it\'s either expired, or all uses have been exhausted.', 'comment_created': datetime.datetime(2021, 6, 16, 15, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652840973, 'comment_body': ""Looks like we already have a class for session data keys:\r\n\r\nhttps://github.com/matrix-org/synapse/blob/4b965c862dc66c0da5d3240add70e9b5f0aa720b/synapse/handlers/ui_auth/__init__.py#L24-L36\r\n\r\nI'd also probably name this `org.matrix.msc3231.login.registration_token` or similar for now as the feature is still unstable (and while unlikely, we could potentially have two registration token implementations going at once ¯\\\\\\_(ツ)_/¯)."", 'comment_created': datetime.datetime(2021, 6, 16, 16, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652852350, 'comment_body': 'Hmm, thinking from the perspective of someone writing an admin dashboard for Synapse, I wonder if it\'d be nice to keep expired tokens around until they\'re explicitly removed by the admin.\r\n\r\nAs in, if I set up a few tokens and set an expiry time, then come back after a bit after the tokens have expired, it may be a bit confusing to be presented with an empty page. Rather I might want to come back to a list of my tokens, but each marked as ""expired"". I could then have options to delete all expired tokens, or remove them one by one.\r\n\r\nThe tradeoff is that tokens will stack up in the db if they\'re never removed manually, but that may be a worth tradeoff for more flexibility when using the Admin API. What do you think?', 'comment_created': datetime.datetime(2021, 6, 16, 16, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652853400, 'comment_body': 'Was this extra indentation intended?', 'comment_created': datetime.datetime(2021, 6, 16, 16, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652856338, 'comment_body': '```suggestion\r\n    @override_config({""registrations_require_token"": True})\r\n```\r\n\r\nAnd below, since we already import `override_config` directly.', 'comment_created': datetime.datetime(2021, 6, 16, 16, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652867279, 'comment_body': ""```suggestion\r\n        # Repeat request to make sure pending isn't increased again\r\n```"", 'comment_created': datetime.datetime(2021, 6, 16, 16, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652869643, 'comment_body': ""Wouldn't you get a 401 UNAUTHORIZED whether the token has succeeded or not, since you still need to complete dummy registration for session2? I think you'll want to complete dummy registration for session2 before doing this test to make sure (or just check whether `LoginType.REGISTRATION_TOKEN` is in the `completed` list)."", 'comment_created': datetime.datetime(2021, 6, 16, 16, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652882292, 'comment_body': ""I think it'd be confusing if a client presented two different tokens, both with a successful result, and upon completing registration finding that the first token was taken.\r\n\r\nErroring on switching tokens (or overwriting the old token, though this requires some extra book-keeping) is probably clearer from the client's perspective."", 'comment_created': datetime.datetime(2021, 6, 16, 17, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652883588, 'comment_body': ""We'll need to do something about expiring UIAA sessions at some point, though I don't think there's currently a method of doing so in Synapse..."", 'comment_created': datetime.datetime(2021, 6, 16, 17, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652884165, 'comment_body': 'I assume the `999` in the filename is just a placeholder for now? :P', 'comment_created': datetime.datetime(2021, 6, 16, 17, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 652952762, 'comment_body': ""Yep, good point. I'll link to the admin API docs once they exist :-)"", 'comment_created': datetime.datetime(2021, 6, 16, 18, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 652961768, 'comment_body': ""I agree. I was copying `registrations_require_3pid`, but I'll change it."", 'comment_created': datetime.datetime(2021, 6, 16, 18, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 652962225, 'comment_body': 'I realised that, but forgot to fix it :slightly_smiling_face: ', 'comment_created': datetime.datetime(2021, 6, 16, 18, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 652973396, 'comment_body': 'I get a circular dependency when I do that, because `synapse/handlers/auth.py` (where `AuthHandler` is defined), imports `synapse.handlers.ui_auth.checkers`. Am I missing something?', 'comment_created': datetime.datetime(2021, 6, 16, 19, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 652975448, 'comment_body': 'yep :grimacing: ', 'comment_created': datetime.datetime(2021, 6, 16, 19, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 652976339, 'comment_body': 'I did wonder about that, thanks.', 'comment_created': datetime.datetime(2021, 6, 16, 19, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 652988240, 'comment_body': ""Just checking, running in the same transaction isn't needed for `registration_token_is_valid`?\r\n\r\nEdit: If tokens aren't deleted there's only one operation there anyway."", 'comment_created': datetime.datetime(2021, 6, 16, 19, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 653381732, 'comment_body': ""That was what I thought, but then you said to delete them in the Matrix room :grin: \r\n\r\nI've stopped tokens being automatically deleted now"", 'comment_created': datetime.datetime(2021, 6, 17, 9, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 653409022, 'comment_body': 'Oops, that was tabs and spaces problem', 'comment_created': datetime.datetime(2021, 6, 17, 9, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 653425354, 'comment_body': 'yep :-)', 'comment_created': datetime.datetime(2021, 6, 17, 10, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 653428764, 'comment_body': 'Yep, I blindly copied that from below...', 'comment_created': datetime.datetime(2021, 6, 17, 10, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 653433192, 'comment_body': 'mypy is giving me `error: Value of type ""Optional[Dict[str, Any]]"" is not indexable  [index]` here and I have no idea what that means :upside_down_face: \r\n\r\nhttps://github.com/matrix-org/synapse/pull/10142/checks?check_run_id=2847878288#step:5:14', 'comment_created': datetime.datetime(2021, 6, 17, 10, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 653434350, 'comment_body': ""I've stopped deleting tokens now, so the comment has changed"", 'comment_created': datetime.datetime(2021, 6, 17, 10, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 653438792, 'comment_body': 'I completely forgot about that...\r\nI think UIA sessions expire after 2 days, but that might be a bit long.\r\n\r\nhttps://github.com/matrix-org/synapse/blob/52c60bd0a96cd61583209a9ef6d8270425e8a902/synapse/handlers/auth.py#L187', 'comment_created': datetime.datetime(2021, 6, 17, 10, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 653442694, 'comment_body': 'Ah, because `res` is `Optional[Dict[str, Any]]`, which may be either `Dict[str, Any]` or `None`, and you can\'t do `None[...]`.\r\n\r\nAccording to `simple_select_one_txn`s docstring, this is a known bug:\r\n\r\nhttps://github.com/matrix-org/synapse/blob/1092718cac3800080bb766b251ae472282aef751/synapse/storage/database.py#L1711-L1714\r\n\r\nSo I would just override `res`s type to be `Dict[str, Any]` and leave a comment explaining why doing so is necessary.\r\n\r\n```python\r\n            res: Dict[str, Any] = self.db_pool.simple_select_one_txn(\r\n                txn,\r\n                ""registration_tokens"",\r\n                keyvalues={""token"": token},\r\n                retcols=[""pending"", ""completed""],\r\n            )  # type: ignore\r\n```\r\n\r\nThe `: Dict[str, Any]` overrides the type of `res`, and `type: ignore` tells mypy to ignore the otherwise dangerous type re-assignment.', 'comment_created': datetime.datetime(2021, 6, 17, 10, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 653444868, 'comment_body': ""Yeah, but shouldn't the error code check tell you it's failed?\r\nI'll check that `completed` is empty too."", 'comment_created': datetime.datetime(2021, 6, 17, 10, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 653451275, 'comment_body': 'Ok, thanks.', 'comment_created': datetime.datetime(2021, 6, 17, 10, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 653466631, 'comment_body': 'So `REGISTRATION_TOKEN = ""org.matrix.msc3231.login.registration_token""`?\r\nBut then there\'s another circular import problem when you want to use that constant in `checkers.py`...', 'comment_created': datetime.datetime(2021, 6, 17, 11, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 653476965, 'comment_body': ""Yep, I've now got it raising a `400` if the token changes. I think it's probably not worth overwriting old tokens (involving changing pending) given that clients are (hopefully) unlikely to retry a stage they have already successfully completed."", 'comment_created': datetime.datetime(2021, 6, 17, 11, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 654620340, 'comment_body': ""Aha I see, that is a pain. Well, in that case it's probably fine to use the storage methods directly (it'd be tricky to get around a 2-node import cycle).\r\n\r\nBut best to leave a comment stating that a cyclic dependency prevents us from using `AuthHandler.get_session_data`, so that a later refactor doesn't fall into the same trap :)"", 'comment_created': datetime.datetime(2021, 6, 18, 18, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 654625680, 'comment_body': 'Aha, indeed... We can get around this though by simply doing:\r\n\r\n```\r\nfrom synapse.handlers.ui_auth import UIAuthSessionDataConstants\r\n```\r\n\r\ninside of `check_auth`. Another comment as to why the buried import is necessary would be good to add though.', 'comment_created': datetime.datetime(2021, 6, 18, 18, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 654625918, 'comment_body': 'Actually, a buried import may work here as well (see https://github.com/matrix-org/synapse/pull/10142#discussion_r654625680). As an example elsewhere: https://github.com/matrix-org/synapse/blob/a0cd8ae8cbe14d2821cbe8fd6b011c4ddc729344/synapse/handlers/federation.py#L1531-L1532', 'comment_created': datetime.datetime(2021, 6, 18, 18, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 654932884, 'comment_body': 'Yep, that works', 'comment_created': datetime.datetime(2021, 6, 20, 13, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 654932970, 'comment_body': 'Done, thanks :-)', 'comment_created': datetime.datetime(2021, 6, 20, 13, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 654933335, 'comment_body': ""I'm a bit confused by all the rate limiting stuff, do I need to add that here somewhere? "", 'comment_created': datetime.datetime(2021, 6, 20, 13, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 655490874, 'comment_body': ""Yep, you'll want to do so (otherwise people may be tempted to try and brute force a token).\r\n\r\nThe `Ratelimiter` class is indeed a bit complicated, but calling it should be fairly straight-forward. Since we don't have a user account to rate-limit on yet, we'll probably need to rate-limit by IP address. Thus, we just need to grab the IP address of the requester and use that as the ratelimit key:\r\n\r\n```python\r\n        # Somewhere in __init__()\r\n        self._my_ratelimiter = Ratelimiter(\r\n            store=hs.get_datastore(),\r\n            clock=hs.get_clock(),\r\n            rate_hz=hs.config.ratelimiting.rc_your_ratelimiter.per_second,\r\n            burst_count=hs.config.ratelimiting.rc_your_ratelimiter.burst_count,\r\n        )\r\n\r\n        # In your on_GET\r\n        await self._my_ratelimier.ratelimit(\r\n            None, (request.getClientIP(),)\r\n        )\r\n```\r\n\r\n`ratelimit` will raise a `LimitExceededError` if the limit has been reached, and will inform the client on the `ms` they need to wait before they can try again.\r\n\r\nThe other question is whether to create a new ratelimiting config option for this endpoint, or to just reuse `rc_registration`. Personally I think it's always best to separate config options out in case people want to tweak them individually (plus, it would be annoying to get your token wrong a few times before eventually coming to hit `/register` and being denied because of the previous token checks).\r\n\r\nRatelimiting configs are managed by the [RatelimitConfig](https://github.com/matrix-org/synapse/blob/2ca4e349e9d0c606d802ae15c06089080fa4f27e/synapse/config/ratelimiting.py#L46) class."", 'comment_created': datetime.datetime(2021, 6, 21, 15, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 655523768, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2021, 6, 21, 16, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 660625384, 'comment_body': ""Ok, I've added that. Not sure if I got the defaults right.\r\nhttps://github.com/matrix-org/synapse/pull/10142/commits/003e67d1ab5d64ea54f3c125ccd2b7a03e18cddc"", 'comment_created': datetime.datetime(2021, 6, 29, 13, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 661346851, 'comment_body': ""I think the current defaults are fine, and the commit looks good otherwise as well!\r\n\r\nIt's good to leave a little bit of a burst count on IP rate-limiting, in case you have a situation where a school tries to sign up a whole class at once or something."", 'comment_created': datetime.datetime(2021, 6, 30, 10, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 661350427, 'comment_body': 'I wonder how problematic it would be to expire a UIAA stage before expiring the whole session.\r\n\r\nWe check for expired sessions every 5 minutes here:\r\n\r\nhttps://github.com/matrix-org/synapse/blob/bd4919fb72b2a75f1c0a7f0c78bd619fd2ae30e8/synapse/handlers/auth.py#L264-L271\r\n\r\nThe registration flow on clients may become a bit confused if they note a completed token stage, only for it to be no longer completed later on...\r\n\r\nDefinitely not a problem we need to first in the first pass anyhow.', 'comment_created': datetime.datetime(2021, 6, 30, 10, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 661353814, 'comment_body': 'Yeah, it looks a bit tricky...\r\nI guess first thing is to make sure pending is actually decreased when the whole session expires at least', 'comment_created': datetime.datetime(2021, 6, 30, 11, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 661613726, 'comment_body': ""The auth checker in `synapse/handlers/ui_auth/checkers.py` either returns `True` or raises a `LoginError`, so this `else:` is never executed.\r\n\r\nBasically if you put in an invalid token you get shown some JSON rather than a pretty message and an option to try again. This could maybe be fixed by capturing `LoginError`s in `add_oob_auth` like the normal authentication code does just above it.\r\n\r\nThe other fallbacks don't really get this problem because terms always succeeds and the recaptcha just needs to be filled out (not tested). Although if you go to https://example.org/_matrix/client/r0/auth/m.login.recaptcha/fallback/web?session=xxxxx and disable javascript, then you get a similar thing."", 'comment_created': datetime.datetime(2021, 6, 30, 16, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 661623894, 'comment_body': ""This hasn't got an unstable prefix or anything, but I don't think it can because clients use a standard form and just insert the auth type?"", 'comment_created': datetime.datetime(2021, 6, 30, 16, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 661689384, 'comment_body': ""I think that's fine yeah. The unstable prefix lies in the auth type anyhow."", 'comment_created': datetime.datetime(2021, 6, 30, 17, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 661691369, 'comment_body': ""Should we not just raise a `LoginError` only when the POST request is malformed (in which case returning JSON potentially makes sense) and even if the token has changed mid-session, and instead simply return `False` when the token doesn't match a known token?\r\n\r\nThe `else:` would then run, and you'd return some HTML. Perhaps we could even pass in an `error` variable to the template which would inform the user that the token was unknown?"", 'comment_created': datetime.datetime(2021, 6, 30, 17, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 668622342, 'comment_body': ""That would work fine for the fallback, but then if you get an unknown token during UIAA no error messages will be returned.\r\n\r\nThe docstring for check_auth():\r\n\r\nhttps://github.com/matrix-org/synapse/blob/c2c364f27f61bece85dc7fd17cdedc4b60b9f7af/synapse/handlers/ui_auth/checkers.py#L45\r\n\r\nAlthough I think `SynapseError` should be `LoginError` as that is what's excepted here:\r\n\r\nhttps://github.com/matrix-org/synapse/blob/c2c364f27f61bece85dc7fd17cdedc4b60b9f7af/synapse/handlers/auth.py#L600\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 13, 10, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 671439259, 'comment_body': 'I think the location of new docs should be there.\r\n\r\n```suggestion\r\n      - [Registration Tokens](usage/administration/admin_api/registration_tokens.md)\r\n```\r\n\r\nSee there: https://github.com/matrix-org/synapse/blob/develop/docs/admin_api/README.rst', 'comment_created': datetime.datetime(2021, 7, 16, 18, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dklimpel', 'type': 'User'}, {'comment_id': 672269220, 'comment_body': 'Thanks', 'comment_created': datetime.datetime(2021, 7, 19, 12, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 672291403, 'comment_body': 'Servelet -> Servlet. Likewise elsewhere.', 'comment_created': datetime.datetime(2021, 7, 19, 13, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672293331, 'comment_body': 'It can be useful to include the general API shape in the docstring of a servlet for easier understanding. Something like:\r\n\r\nhttps://github.com/matrix-org/synapse/blob/4b965c862dc66c0da5d3240add70e9b5f0aa720b/synapse/replication/http/federation.py#L27-L54', 'comment_created': datetime.datetime(2021, 7, 19, 13, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672304357, 'comment_body': 'We probably also want to disallow tokens from being empty strings, simply to reduce confusion.', 'comment_created': datetime.datetime(2021, 7, 19, 13, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672305060, 'comment_body': '```suggestion\r\n                    ""token must not be longer than 64 characters"",\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 13, 38, 2, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672308752, 'comment_body': ""It probably only matters for `length`, but we should do non-negative checks for each.\r\n\r\nZero checks as well for `length` and `uses_allowed`.\r\n\r\n(isn't number validation fun?)"", 'comment_created': datetime.datetime(2021, 7, 19, 13, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672310701, 'comment_body': 'Note that since Synapse supports Python 3.6+, using f-strings for placeholder variables is supported (and encouraged).', 'comment_created': datetime.datetime(2021, 7, 19, 13, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672311515, 'comment_body': '```suggestion\r\n  When the person completes registration the pending counter is decremented,\r\n  and the completed counter is incremented.\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 13, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672312835, 'comment_body': '`update_values`?', 'comment_created': datetime.datetime(2021, 7, 19, 13, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672314439, 'comment_body': 'negative checks', 'comment_created': datetime.datetime(2021, 7, 19, 13, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672320192, 'comment_body': ""It may be better to return a 200 OK here, as then accidentally submitting the same update request twice won't result in a 400 on the second attempt."", 'comment_created': datetime.datetime(2021, 7, 19, 13, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672321089, 'comment_body': 'This can just be:\r\n\r\n```suggestion\r\n        raise NotFoundError(""No such registration token: {}"".format(token))\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 13, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672374811, 'comment_body': '```suggestion\r\n                    ""(uses_allowed > pending + completed OR uses_allowed IS NULL) ""\r\n```\r\n\r\nThe query surprisingly still works even without the space. But nicer for the logs etc.', 'comment_created': datetime.datetime(2021, 7, 19, 14, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672377230, 'comment_body': '```suggestion\r\n                    ""uses_allowed <= pending + completed OR expiry_time <= ?""\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 14, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672398908, 'comment_body': ""We should probably validate that this time isn't in the past?"", 'comment_created': datetime.datetime(2021, 7, 19, 15, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672399798, 'comment_body': ""If we do, then we'll need to update the value used in the tests, presumably using `self.clock.time_msec() + X`."", 'comment_created': datetime.datetime(2021, 7, 19, 15, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672441022, 'comment_body': 'And also manually insert an expired token into the DB via a storage method instead of using the Admin API to do so.', 'comment_created': datetime.datetime(2021, 7, 19, 16, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672446346, 'comment_body': ""You may wish to extract this bit to a helper function as it's duplicated below."", 'comment_created': datetime.datetime(2021, 7, 19, 16, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 672449093, 'comment_body': 'Going forward if you plan to return this information to something other than just the admin API, you may want to create a `RegistrationToken` class where you can have typed arguments.\r\n\r\nFor the moment this is fine though.', 'comment_created': datetime.datetime(2021, 7, 19, 16, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 673109195, 'comment_body': ""Ok, I've copied a couple examples over from the docs, is that alright?"", 'comment_created': datetime.datetime(2021, 7, 20, 13, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 673112906, 'comment_body': 'For `uses_allowed` it could be useful to allow zero as a way of invalidating a token without deleting it, but otherwise yes :-)', 'comment_created': datetime.datetime(2021, 7, 20, 13, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 673221660, 'comment_body': ""Yep I've added some extra checks and tests for them"", 'comment_created': datetime.datetime(2021, 7, 20, 15, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 673221909, 'comment_body': ""Just want to check what I've done here is acceptable?"", 'comment_created': datetime.datetime(2021, 7, 20, 15, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 673225164, 'comment_body': ""I don't really understand..."", 'comment_created': datetime.datetime(2021, 7, 20, 15, 22, 47, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 674850394, 'comment_body': ""Your code handles it fine, but it may be worth adding a test for:\r\n\r\n1. Start but never complete a session.\r\n2. Delete the token from the db.\r\n3. Expire the session.\r\n\r\nJust as that may be an edge case that's easy to miss and could break in the future."", 'comment_created': datetime.datetime(2021, 7, 22, 14, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 674874280, 'comment_body': 'So we\'re returning a dict here, and if we wanted to access a value in this dict later then we\'d need to do `returned_dict[""value_name""]`. We don\'t currently as we\'re just sending this dict over the wire (up to where I\'ve reviewed), but if we start using this method in other bits of the codebase it can be a good idea to make an object type that encapsulates the data instead. Both for convenience (auto-completion, type-checking) and flexibility (attaching methods).\r\n\r\nAnd if you set `__slots__` for the object, you\'ll have essentially no performance difference vs. just the bare dictionary.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 674883906, 'comment_body': '```suggestion\r\n    def _test_list_query_parameter(self, valid: str):\r\n```\r\n\r\nespecially as one might look at the docstring and think to use a bool.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 674893369, 'comment_body': ""I'd say so, thanks!"", 'comment_created': datetime.datetime(2021, 7, 22, 15, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 675585553, 'comment_body': ""Ah ok. I think I'll leave it for now, but if I add the token's validity as a new field at some point a class would be good."", 'comment_created': datetime.datetime(2021, 7, 23, 13, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 675596915, 'comment_body': 'Have done', 'comment_created': datetime.datetime(2021, 7, 23, 14, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 675598298, 'comment_body': 'Pending is decreased when uncompleted sessions expire in e7495e61a9a50ee49ac9e8259094444b1bf05b55, but that does take 2 days.', 'comment_created': datetime.datetime(2021, 7, 23, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 677288264, 'comment_body': ""Yep, that's fine!"", 'comment_created': datetime.datetime(2021, 7, 27, 9, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 677295380, 'comment_body': ""Ah, this is just because we're passing to the `updatevalues` arg eventually.\r\n\r\nStill, I'd suggest using something like `token_attributes` which may be a bit more descriptive."", 'comment_created': datetime.datetime(2021, 7, 27, 9, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 677468182, 'comment_body': 'Makes sense', 'comment_created': datetime.datetime(2021, 7, 27, 13, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 682757228, 'comment_body': ""> Although I think `SynapseError` should be `LoginError` as that is what's excepted here.\r\n\r\nI think you're right. The [PR that docstring was introduced with](https://github.com/matrix-org/synapse/pull/6105/files) also extracts the each UIAA checker into a separate class, where `check_auth` routinely raises `LoginError`.\r\n\r\nI think I understand then. So the problem is that when calling `AuthHandler.check_ui_auth`, which in turn calls `RegistrationTokenAuthChecker.check_auth` during UIAA, we expect a `LoginError` if an invalid token was passed.\r\n\r\nConversely, when we hit `POST /_matrix/client/r0/auth/org.matrix.msc3231.login.registration_token/fallback/web` with an invalid token, we call `AuthHandler.add_oob_auth`, which in turn calls `RegistrationTokenAuthChecker.check_auth`. The call in `add_oob_auth` is  expecting either *something* or `None` from `check_auth`. Taking a look, it doesn't look like any auth checkers ever return `None` - so perhaps this is an invalid assumption, and `add_oob_auth` should be refactored to either return a result or raise `LoginError` / `SynapseError`, rather than `True` / `False`.\r\n\r\nThen we can just wrap calls to `add_oob_auth` in `AuthRestServlet` in a try/catch for `LoginError`s that have a `401` error code. If so, return the respective template to the client indicating that the auth credentials provided (i.e a token) was invalid. Otherwise, just let the error get raised - and thus the client will receive JSON (which is expected as the request was malformed).\r\n\r\nAs an aside; it doesn't appear that [the spec](https://spec.matrix.org/unstable/client-server-api/#fallback) specifies what `POST /_matrix/client/r0/auth/<auth type>/fallback/web` needs to return - or even that that endpoint needs to be called. It looks to me as if Synapse just chose that as a sensible path - though it probably shouldn't as the `POST` variant isn't specced."", 'comment_created': datetime.datetime(2021, 8, 4, 16, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 683618059, 'comment_body': 'Should I fix that up in a separate PR then, or just bundle it in here?\r\n\r\nI think that POST endpoint is just used by synapse internally when submitting UIA creds from the web fallback page.', 'comment_created': datetime.datetime(2021, 8, 5, 16, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 685352889, 'comment_body': '> Should I fix that up in a separate PR then, or just bundle it in here?\r\n\r\nA separate PR sounds good as it seems like a reasonably encapsulated bit of work. Simply merge `develop` into this branch once that PR lands.\r\n\r\n> I think that POST endpoint is just used by synapse internally when submitting UIA creds from the web fallback page.\r\n\r\nYeah, it should just live on the `/_synapse/client` resource rather than `/_matrix/client` is all.', 'comment_created': datetime.datetime(2021, 8, 9, 16, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 685367124, 'comment_body': '> A separate PR sounds good as it seems like a reasonably encapsulated bit of work. Simply merge `develop` into this branch once that PR lands.\r\n\r\nHow does #10561 look?\r\n\r\n> Yeah, it should just live on the `/_synapse/client` resource rather than `/_matrix/client` is all.\r\n\r\nOh ok\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 9, 17, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 687019109, 'comment_body': 'Looking good, thanks!', 'comment_created': datetime.datetime(2021, 8, 11, 17, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 687022265, 'comment_body': 'Should include `uses_allowed` here as well.', 'comment_created': datetime.datetime(2021, 8, 11, 17, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 687030416, 'comment_body': ""I was musing on the attack vectors of being able to start multiple registration sessions without completing them, thus exhausting all uses of a potentially pubicly-posted token. While this would be relatively easy to do (assuming you have multiple IPs to dance around `/register` rate-limits with), the attack isn't really that different from just going ahead and registering all of those accounts, and using up the token's uses that way.\r\n\r\nThe only way it would be different is that the token would be stuck with a high pending count. But in that case, the sysadmin could simply just recreate the token to reset the pending count.\r\n\r\nSo while the 2 day timer might be a bit annoying if people fail to complete registration accidentally - I don't think there's much on the security side to worry about."", 'comment_created': datetime.datetime(2021, 8, 11, 17, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 687036111, 'comment_body': ""You'll need to set `releases=()` to prevent this endpoint from being available on `/_matrix/client/r0/...`, as the default for `releases` is `(0,)`."", 'comment_created': datetime.datetime(2021, 8, 11, 17, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 687039236, 'comment_body': '```suggestion\r\n        Args:\r\n            token: The registration token to be checked\r\n        Returns:\r\n            True if the token is valid, False otherwise.\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 17, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 687060982, 'comment_body': 'Also, could you add a docstring with an example request/response to this servlet as well?', 'comment_created': datetime.datetime(2021, 8, 11, 18, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 687078470, 'comment_body': ""Note that these methods being in `RegistrationStore` rather than `RegistrationWorkerStore` will mean that worker processes cannot call them. Since `^/_matrix/client/(r0|unstable)/register$` is already supported by workers - we should make sure that this change doesn't drop that support.\r\n\r\nAll that's necessary should be just moving these methods into `RegistrationWorkerStore` instead - which worker processes make use of, rather than `RegistrationStore` (which inherits from `RegistrationWorkerStore` and is used by the main process only)."", 'comment_created': datetime.datetime(2021, 8, 11, 18, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 687937447, 'comment_body': ""Ok, I'll leave it like it is then and if it turns out to be a problem I can try figure something else out."", 'comment_created': datetime.datetime(2021, 8, 12, 17, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 687960206, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 8, 12, 17, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 688030146, 'comment_body': ""Ok, I've moved them but haven't tested with workers at all"", 'comment_created': datetime.datetime(2021, 8, 12, 19, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 692141675, 'comment_body': ""That's alright. That would be done in Complement CI sometime in the future when Complement worker infrastructure is up and running."", 'comment_created': datetime.datetime(2021, 8, 19, 14, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 692364674, 'comment_body': ""Note that raising integrity errors will still appear in postgres' logs, so it's best to avoid them where we can. See https://github.com/matrix-org/synapse/pull/10442.\r\n\r\nWhile it would cost another database query, it may be a good idea to check for existing tokens with a `simple_select` first instead."", 'comment_created': datetime.datetime(2021, 8, 19, 18, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 692842151, 'comment_body': 'I would probably also just include something along the lines of:\r\n\r\n```suggestion\r\nNote that this API is still experimental; not all clients may support it yet.\r\n```', 'comment_created': datetime.datetime(2021, 8, 20, 10, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 692847398, 'comment_body': '```suggestion\r\n                    ""uses_allowed must be a positive integer or null"",\r\n```', 'comment_created': datetime.datetime(2021, 8, 20, 10, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 692847519, 'comment_body': '```suggestion\r\n                ""uses_allowed must be a positive integer or null"",\r\n```\r\n\r\nJust to avoid double negatives.\r\n', 'comment_created': datetime.datetime(2021, 8, 20, 10, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 692850006, 'comment_body': 'We actually probably want to date parsing as a job for UIs that build on top of the admin API.', 'comment_created': datetime.datetime(2021, 8, 20, 10, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 692862232, 'comment_body': 'While not likely, it is possible for this to generate a token that already exists. The user will then be presented with:\r\n\r\n```\r\n{\r\n  ""errcode"": ""M_INVALID_PARAM"",\r\n  ""error"": ""Token already exists: L""\r\n}\r\n```\r\n\r\nlater on when we call `create_registration_token`. Perhaps we should check whether the token already exists, and try generating a new one if so, before continuing on?\r\n\r\nWe can bail out with an exception after a few unsuccessful tries.', 'comment_created': datetime.datetime(2021, 8, 20, 11, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 692873895, 'comment_body': ""I've realised that to allow this endpoint to be mounted on a client worker, you simply need to register it here:\r\n\r\nhttps://github.com/matrix-org/synapse/blob/84469bdac773ddb79cfc99f31bbac78d27450682/synapse/app/generic_worker.py#L282-L285\r\n\r\nLet's do that (and update the worker docs) afterwards in a separate PR though, in order to land this one quicker. :slightly_smiling_face: "", 'comment_created': datetime.datetime(2021, 8, 20, 11, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 692875148, 'comment_body': '```suggestion\r\n    # used during registration to store the registration token used (if required) so that:\r\n```', 'comment_created': datetime.datetime(2021, 8, 20, 11, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 692876992, 'comment_body': 'We can probably combine these two comments.', 'comment_created': datetime.datetime(2021, 8, 20, 11, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 692879585, 'comment_body': '```suggestion\r\n    The optional query parameter `valid` can used to filter the response to contain only\r\n    valid or invalid tokens. It can be `true` or `false`.\r\n```', 'comment_created': datetime.datetime(2021, 8, 20, 11, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 692879977, 'comment_body': 'What is defined as an invalid token here? Perhaps instead we should say ""tokens that have expired or exhausted all uses""?', 'comment_created': datetime.datetime(2021, 8, 20, 11, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 692881225, 'comment_body': ""It's usually clearer to write out words in variable names rather than abbreviating them. Same for `et` below."", 'comment_created': datetime.datetime(2021, 8, 20, 11, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 692892315, 'comment_body': 'Done in 01a74da6f7b42a1b146210c51aa0928602d4e85f', 'comment_created': datetime.datetime(2021, 8, 20, 12, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 692897780, 'comment_body': 'I think it could be useful to let uses_allowed be zero as a way of making the token invalid without deleting it.', 'comment_created': datetime.datetime(2021, 8, 20, 12, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 692908504, 'comment_body': ""Makes sense. I started adding support in synadm actually, so I'll try something there."", 'comment_created': datetime.datetime(2021, 8, 20, 12, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 692908899, 'comment_body': ""Yep, I've made that clearer in the comment and the docs"", 'comment_created': datetime.datetime(2021, 8, 20, 12, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 692958468, 'comment_body': ""How does b5608c37944ef69d2a63288a97718b72880206a7 look?\r\nI've tested it manually, but not sure how a unit test for that case would work."", 'comment_created': datetime.datetime(2021, 8, 20, 13, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 693025238, 'comment_body': 'Tested with a generic worker and it works :-)', 'comment_created': datetime.datetime(2021, 8, 20, 15, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 693025759, 'comment_body': 'Done in bf28876f6764e9ac820ae61cf0f7436b413cb19c', 'comment_created': datetime.datetime(2021, 8, 20, 15, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 693087972, 'comment_body': 'Oh, great idea actually. I would probably start with throwing that as an idea into the MSC, and then modify the API shape in a separate PR?', 'comment_created': datetime.datetime(2021, 8, 20, 16, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 693089670, 'comment_body': ""Well token management is up to the server implementation so it doesn't matter to the MSC?\r\nThe admin API currently does allow uses_allowed to be zero, that's why the message says non-negative rather than positive :D"", 'comment_created': datetime.datetime(2021, 8, 20, 16, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 693092991, 'comment_body': 'Thanks - I left some comments.\r\n\r\nAs for a unit test, I would probably just mock the suggested `generate_registration_token` to return `None`.', 'comment_created': datetime.datetime(2021, 8, 20, 17, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 693094573, 'comment_body': 'Oh, I was just commenting on the ""A more human friendly format will be provided"". I would still keep the `date` example though. That was handy!  :smiley: ', 'comment_created': datetime.datetime(2021, 8, 20, 17, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 693099243, 'comment_body': 'Oh! Sorry, I got confused with the `if not`. This is currently only disallowing `<`, rather than `<=`.\r\n\r\nIn that case - cool! I suppose we should just drop a line in the documentation to suggest disabling tokens in that manner? Otherwise no more qualms from me here!', 'comment_created': datetime.datetime(2021, 8, 20, 17, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 693341030, 'comment_body': 'Ok. I think 54867efb3a404042140f88bbba1c73055d4787b8 looks better?', 'comment_created': datetime.datetime(2021, 8, 21, 11, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 693398788, 'comment_body': '\r\n```suggestion\r\n            ""Unable to generate a unique registration token. Try again with a greater length"",\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 20, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}]","[{'commit_sha': '5856f815471625170d67df83b1f02b913e8bf7e5', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f21580da154307ee93672c21db929cd189a4676', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b8726cf18a0a8510c68da902edd760f2651862c', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b1ec0bf28659241c5acfd94fbc75f078e8c0a6b', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15e576923ef8b130ec667aeebaf24dafae55e4d2', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c502b0762297de9c3335d87eef61addd428b6f2', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7754a9e075e4e6f7e31e13cdb5f592eea51d438', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef05a6d11580df54cccdf392c1424547fed3ad2a', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53f0e050bf8915989f046378e55fe27d353aebe9', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78831914f780ce53937ee1e68511da254312832f', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1debc22a5f8f08b8f918e5b0c5dc55605906e7b8', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ac376d9d3da92908e2575799d38cb4357529326', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfa8feccdeafb61ec0cb5470554d5eccdd3fcdd3', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c89d786f82c111f6b50de46851e8db4549820478', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7bd00a1cd150d5ae1568455b298cbf6cc3d8aea', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6704fd496dfaab6e01db7e50228bd3c273feece', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '003e67d1ab5d64ea54f3c125ccd2b7a03e18cddc', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c51680c6450713a2fc3212ae81732c17ca78476', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af90be7db3fa7f2a045278946aaf7dce599c124d', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1552b70b29e07b8f539913881591fd29a4b95f35', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4df4a6e66303bd67fdcc83a989c9541aeb052ccb', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6901eee9a766d6d7d07eaecaec57784ddfd22625', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93f752d017dc76b1a154d50ad9954590c7ad7389', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2bf3acc496556a19722fd5bfe3a8d24a6fe1b4e', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d5bdef8d73881ba5b466c876737d446a026a19a', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b61c7f697284d0860b8a1c1eabe1c130c5b81c9e', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7495e61a9a50ee49ac9e8259094444b1bf05b55', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39d24d267a786f4f7db03cb92b2ba4dfa7eead37', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70cc9d23674988e8b8cad0d0e73711e688e464a4', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09f65726a9fffdd501f40cce81bcccddea1d1b85', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36adec4969b4f033c26804bffa5e626874474e91', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e539f51eeff90fd4a72891ca7ec308a2803eb83', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf29c941b54468f2501714c2c969547e245b69b', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f9efcd6e3e2db83335e7bd77cec1d33732e40fd', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9435f8f6c9ba1497f689e3963c9c005c1d71dfc', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e483157fafa202df762ea3bf91e5018532ae8b', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7208760c808693f3255a0452d72fa67924eedcf5', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47b883721afef93238293a7351684bb194f2ca59', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b76099e682de74e0526f9d0cc41e44067c266797', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86bbc243f53050e6f1d9718ecdb70c94d22610f0', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6cb80bd3ca0501a3eea410d4b85e419632b62c0', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba22ffd160841e56ff9bee2309144557513e32fc', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c775dcee43ebf1974f5ca04f074b454e178f25df', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f327b293b8af0c6f07ae5a7ed44af03f8f85f87d', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6bcae2e926be94cdad4eb40d22397dbf4e65179', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01a74da6f7b42a1b146210c51aa0928602d4e85f', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bfc707da4e59f5d692b9fcd6c592cc82ecaf5b7', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5608c37944ef69d2a63288a97718b72880206a7', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf28876f6764e9ac820ae61cf0f7436b413cb19c', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e59dda0502cc8076af1cff406f1584379f45c81', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df0077d44be27abe8725a3d483cf3f8d12fb869b', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54867efb3a404042140f88bbba1c73055d4787b8', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20b566cca63be707cad4383c2aa3af6f35cba9eb', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04b237aa42db6b1f7130b3b9e693f028fd8c5519', 'committer_username': 'anoadragon453', 'committer_name': 'Andrew Morgan', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 18, 2, 40, 1, tzinfo=datetime.timezone.utc)}]",Callum Brown,40113543,callum@calcuode.com,User,,15,,0,4
706685838,Display an error during failure of fallback UIA,"Signed-off-by: Callum Brown <callum@calcuode.com>

See discussion in https://github.com/matrix-org/synapse/pull/10142#discussion_r661613726
This doesn't fix anything existing because none of the current fallbacks really fail, but is required for decent UX with the registration token fallback in #10142",True,10561,https://api.github.com/repos/matrix-org/synapse/pulls/10561,https://github.com/matrix-org/synapse/pull/10561,closed,65,28,8,9,5,21,0,0,[],2021-08-09 16:59:42+00:00,2021-08-18 12:13:36+00:00,760434.0,"8 days, 19:13:54","[{'comment_id': 685378136, 'comment_body': ""It looks like the result of this isn't even used anymore after this?\r\n\r\nIf it is, I'd like to see a more specific type here than `Any`. If it isn't, we should have it return `None` and properly document what it raises."", 'comment_created': datetime.datetime(2021, 8, 9, 17, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'clokep', 'type': 'User'}, {'comment_id': 685380066, 'comment_body': ""Yep, I'll do that"", 'comment_created': datetime.datetime(2021, 8, 9, 17, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 686755578, 'comment_body': ""How's that?"", 'comment_created': datetime.datetime(2021, 8, 11, 11, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 686762679, 'comment_body': '```suggestion\r\n        # If authentication fails a LoginError is raised. Otherwise, store\r\n        # the successful result.\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 12, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'clokep', 'type': 'User'}, {'comment_id': 686762948, 'comment_body': ""I don't suppose we can clarify this comment while we're looking at all of this!"", 'comment_created': datetime.datetime(2021, 8, 11, 12, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'clokep', 'type': 'User'}, {'comment_id': 686765097, 'comment_body': 'Are we sure that these error messages are suitable for displaying to the user? Looking through the checkers I see a few that raise `LoginError` with a blank message.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'clokep', 'type': 'User'}, {'comment_id': 686771506, 'comment_body': 'Clarify in what way? Say why/how LoginError is used?', 'comment_created': datetime.datetime(2021, 8, 11, 12, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 686775310, 'comment_body': ""> (to pass back to the client?)\r\n\r\nIt seems whoever wrote this comment wasn't sure why we care about this. If you've groked this and know the answer it would be great to say *why* we care about the result of the authentication."", 'comment_created': datetime.datetime(2021, 8, 11, 12, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'clokep', 'type': 'User'}, {'comment_id': 686907690, 'comment_body': ""The only checkers that return something other than just `True` are the threepid ones:\r\nhttps://github.com/matrix-org/synapse/blob/8c654b73095a594b36101aa81cf91a8e1bebc29f/synapse/handlers/ui_auth/checkers.py#L206\r\n\r\nAnd the only place I can see the result is accessed is here, ~~but I have no clue where the user ID would get into the result field of a UIA stage.~~ It looks like the [password provider docs](https://matrix-org.github.io/synapse/latest/password_auth_providers.html#optional-methods) (which you wrote?) mention that \r\nhttps://github.com/matrix-org/synapse/blob/8c654b73095a594b36101aa81cf91a8e1bebc29f/synapse/handlers/auth.py#L377-L405\r\n\r\nWhere `result` comes from the only ever use of `get_completed_ui_auth_stages`:\r\nhttps://github.com/matrix-org/synapse/blob/8c654b73095a594b36101aa81cf91a8e1bebc29f/synapse/handlers/auth.py#L605\r\n\r\nThere's also a section in the SSO handler which sets the result field, but I'm not sure if that's ever looked at later:\r\nhttps://github.com/matrix-org/synapse/blob/8c654b73095a594b36101aa81cf91a8e1bebc29f/synapse/handlers/sso.py#L690-L704\r\n\r\nI am currently using the fact that the result is stored for expiring registration tokens, but I think I could use the UIA session data instead.\r\nhttps://github.com/govynnus/synapse/blob/e9435f8f6c9ba1497f689e3963c9c005c1d71dfc/synapse/handlers/ui_auth/checkers.py#L294\r\nhttps://github.com/govynnus/synapse/blob/e9435f8f6c9ba1497f689e3963c9c005c1d71dfc/synapse/storage/databases/main/ui_auth.py#L333-L373\r\n\r\nSo basically no, I don't grok it.\r\nAlthough I'm pretty sure it's not passed back to the client :-)"", 'comment_created': datetime.datetime(2021, 8, 11, 14, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 686920756, 'comment_body': 'Hah, thanks for taking another look! We can just leave it as is then!', 'comment_created': datetime.datetime(2021, 8, 11, 15, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'clokep', 'type': 'User'}, {'comment_id': 686929663, 'comment_body': ""Yeah you're right, the errors are more for devs and people troubleshooting than users I think. From what I can tell the errors would be caused by a broken client rather than the user."", 'comment_created': datetime.datetime(2021, 8, 11, 15, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 686995941, 'comment_body': 'I think we should at least give some string back for those cases so that people can ask a server admin about it. Right now some of them will end up just saying `Error: `.', 'comment_created': datetime.datetime(2021, 8, 11, 16, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'clokep', 'type': 'User'}, {'comment_id': 687012868, 'comment_body': ""Note that you'll need to inform those who've created their own templates that a new template variable, `error`, is available for them to use. We usually do so in https://github.com/matrix-org/synapse/blob/fab352ac2cb6a9d69a74be6d4255a9b71e0f7945/docs/upgrade.md#upgrading-to-v1xx0.\r\n\r\nA previous example: https://github.com/matrix-org/synapse/blob/fab352ac2cb6a9d69a74be6d4255a9b71e0f7945/docs/upgrade.md#account-validity-html-templates-can-now-display-a-users-expiration-date"", 'comment_created': datetime.datetime(2021, 8, 11, 16, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'anoadragon453', 'type': 'User'}, {'comment_id': 688568399, 'comment_body': 'I added a message to the couple LoginErrors that were missing one https://github.com/matrix-org/synapse/pull/10561/commits/8d6a469a43e276a40862eb8a1f2993717572320e', 'comment_created': datetime.datetime(2021, 8, 13, 14, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 688597746, 'comment_body': ""How's https://github.com/matrix-org/synapse/pull/10561/commits/91a6b9ac47297bffafc49282204727896889679b ?"", 'comment_created': datetime.datetime(2021, 8, 13, 15, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 688694593, 'comment_body': ""Let's be explicit:\r\n\r\n```suggestion\r\n## User-interactive authentication fallback templates can now display errors\r\n```"", 'comment_created': datetime.datetime(2021, 8, 13, 18, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'clokep', 'type': 'User'}, {'comment_id': 688694897, 'comment_body': 'Is this handling the failure or displaying an error? It seems it was previously ""handled"", but by displaying a JSON error message to the user?', 'comment_created': datetime.datetime(2021, 8, 13, 18, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'clokep', 'type': 'User'}, {'comment_id': 688695499, 'comment_body': '```suggestion\r\nThe template is now provided an `error` variable if the authentication \r\nprocess failed. See the default templates linked above for an example.\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 18, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'clokep', 'type': 'User'}, {'comment_id': 688695581, 'comment_body': '```suggestion\r\nThis may affect you if you make use of custom HTML templates for the\r\n[reCAPTCHA](../synapse/res/templates/recaptcha.html) or\r\n[terms](../synapse/res/templates/terms.html) fallback pages.\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 18, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'clokep', 'type': 'User'}, {'comment_id': 688695695, 'comment_body': ""I'm not sure what this means -- what would the configuration option do?"", 'comment_created': datetime.datetime(2021, 8, 13, 18, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'clokep', 'type': 'User'}, {'comment_id': 689101677, 'comment_body': ""Well for other templates (e.g. account validity) there are configuration options so you can give a path to custom templates. I'll just remove that line though because it's probably just confusing."", 'comment_created': datetime.datetime(2021, 8, 15, 14, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}]","[{'commit_sha': '8e48ab23b2f5b43858a10e8f36b874192ef2e963', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dad55c0a88337a899388270f857de108a47c991', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30e8c776c75d3cfe6e9f0e5dcfb0fbe84fcaea0b', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d6a469a43e276a40862eb8a1f2993717572320e', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b12cd1d36ffb36bafbb4f1238b6b981df69a36db', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91a6b9ac47297bffafc49282204727896889679b', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2995b513c33393aca6c3f114c36a9266251cc35', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70e653e0827ee563420e57c9f821c2a397da950f', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '200d4c689c18d21459da2a6671d4586785be4a3a', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}]",Callum Brown,40113543,callum@calcuode.com,User,,15,,0,4
701722151,Reorganise src/RegisterPage.cpp,"Hopefully this is a bit easier to follow now?

One thing I noticed is that sometimes the full error gets cut off when it's displayed. E.g. if you try to register with a user id that's already taken. Or maybe that's just me.",True,664,https://api.github.com/repos/Nheko-Reborn/nheko/pulls/664,https://github.com/Nheko-Reborn/nheko/pull/664,closed,283,301,2,3,1,10,0,0,[],2021-08-02 19:21:46+00:00,2021-08-07 00:27:40+00:00,363954.0,"4 days, 5:05:54","[{'comment_id': 682193700, 'comment_body': ""I think this will actually lead to issues with idn domains, i.e. ones ending in emoji. But we don't handle those correctly right now anyway..."", 'comment_created': datetime.datetime(2021, 8, 4, 0, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 682195000, 'comment_body': 'I think all of these should be private slots (i.e. move the private after this block).', 'comment_created': datetime.datetime(2021, 8, 4, 0, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 682197375, 'comment_body': 'Do you actually need this include?', 'comment_created': datetime.datetime(2021, 8, 4, 0, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 683545823, 'comment_body': ""That's for the definition of  mtx::http::Callback<mtx::responses::Register>`, which I think is needed to separate the callback for registration."", 'comment_created': datetime.datetime(2021, 8, 5, 15, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 683548063, 'comment_body': 'Ah, right, I missed that, I guess that is fine.', 'comment_created': datetime.datetime(2021, 8, 5, 15, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 683548475, 'comment_body': 'ok', 'comment_created': datetime.datetime(2021, 8, 5, 15, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 683598078, 'comment_body': ""Ok, shall I just check it's not empty? I think that's what was done before, and if the server isn't reachable errors will be shown later :-)"", 'comment_created': datetime.datetime(2021, 8, 5, 16, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 683632937, 'comment_body': 'Yeah, that sounds reasonable', 'comment_created': datetime.datetime(2021, 8, 5, 17, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 683644408, 'comment_body': 'That all good now?', 'comment_created': datetime.datetime(2021, 8, 5, 17, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}, {'comment_id': 683739410, 'comment_body': 'Yep, looks good. I need to test it manually still, then I think I can merge it :3', 'comment_created': datetime.datetime(2021, 8, 5, 19, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}]","[{'commit_sha': '041d8fb56c435a3a5f5af9ff304f54deb5883c9b', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb6a57644c46dec6d4fc9f8e30839677ae278fb2', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd31726f2ff103dda7c84b8a6e801d15404ac96b', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}]",Callum Brown,40113543,callum@calcuode.com,User,,15,,0,4
695982128,Support registration token UIA type,MSC3231: https://github.com/matrix-org/matrix-doc/pull/3231,True,60,https://api.github.com/repos/Nheko-Reborn/mtxclient/pulls/60,https://github.com/Nheko-Reborn/mtxclient/pull/60,closed,21,0,3,1,5,0,0,0,[],2021-07-23 14:23:54+00:00,2021-07-23 16:57:00+00:00,9186.0,2:33:06,[],"[{'commit_sha': 'f785a41528b284c547d1ec5609ce1f8bd825d8ca', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}]",Callum Brown,40113543,callum@calcuode.com,User,,15,,0,4
709012472,Support token authenticated registration,"Using a dialog after username and password have been provided.

Not yet qml-ified.
In the future it would be nice to have the token input as part of the registration form, but the UIA flows would have to be known first.",True,680,https://api.github.com/repos/Nheko-Reborn/nheko/pulls/680,https://github.com/Nheko-Reborn/nheko/pull/680,closed,18,0,1,4,2,2,0,0,[],2021-08-11 14:10:07+00:00,2021-08-15 18:22:02+00:00,360715.0,"4 days, 4:11:55","[{'comment_id': 687110506, 'comment_body': ""Do you think this could be replaced with https://doc.qt.io/qt-5/qinputdialog.html#getText ? That would make the extra dialog redundant, but I'm not sure if you have any plans for the dialog do more that QInputDialog::getText? (Also the label might be slightly different)"", 'comment_created': datetime.datetime(2021, 8, 11, 19, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'deepbluev7', 'type': 'User'}, {'comment_id': 687857315, 'comment_body': ""That's pretty neat :-)"", 'comment_created': datetime.datetime(2021, 8, 12, 15, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'govynnus', 'type': 'User'}]","[{'commit_sha': 'b56a1be0bd3085680fd572bb31f17007bce53494', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d484a8228886f942f62ca9cf23920b7fab2c602', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fa644f2b7d0e95f8f917dc6d4d030153c0da73e', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0da58c476c05c3ec52fe69609b741d06938c9521', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}]",Callum Brown,40113543,callum@calcuode.com,User,,15,,0,4
712969991,Support registration token validity checking,"As in MSC3231: https://github.com/matrix-org/matrix-doc/pull/3231

Seems a bit much just to get a boolean, but that's how it's done for all the other endpoints?

Proof it works: https://github.com/govynnus/nheko/blob/9fda611e060323384bc0ddf6bb011687e99a1315/src/RegisterPage.cpp#L496-L509",True,61,https://api.github.com/repos/Nheko-Reborn/mtxclient/pulls/61,https://github.com/Nheko-Reborn/mtxclient/pull/61,closed,46,0,5,1,1,0,0,0,[],2021-08-15 17:04:59+00:00,2021-08-15 18:21:23+00:00,4584.0,1:16:24,[],"[{'commit_sha': 'b3f0ce0afc7ea55e76877e781606020c1e37c921', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}]",Callum Brown,40113543,callum@calcuode.com,User,,15,,0,4
717137702,Add support for registration token management,"This adds support for managing registration tokens using the admin API introduced by https://github.com/matrix-org/synapse/pull/10142 which implements [MSC3231 - Token Authenticated Registration](https://github.com/matrix-org/matrix-doc/pull/3231).

That synapse PR has been merged but isn't part of a release yet, so you probably won't want this until it is.
I'm happy to change names of commands/options/anything if you want.",True,42,https://api.github.com/repos/JOJ0/synadm/pulls/42,https://github.com/JOJ0/synadm/pull/42,closed,323,2,6,5,19,5,0,0,[],2021-08-21 11:20:54+00:00,2021-09-21 06:11:38+00:00,2659844.0,"30 days, 18:50:44","[{'comment_id': 708855068, 'comment_body': 'I think the show_default should be false here since you hardcoded it already.', 'comment_created': datetime.datetime(2021, 9, 15, 5, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'JOJ0', 'type': 'User'}, {'comment_id': 708855307, 'comment_body': 'same here. hardcoded default already.', 'comment_created': datetime.datetime(2021, 9, 15, 5, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JOJ0', 'type': 'User'}, {'comment_id': 708855403, 'comment_body': 'and here.', 'comment_created': datetime.datetime(2021, 9, 15, 5, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JOJ0', 'type': 'User'}, {'comment_id': 708860361, 'comment_body': 'or maybe you just get rid of the show_default flag everywhere you already hardcoded it? not sure but actually the default is False anyway.', 'comment_created': datetime.datetime(2021, 9, 15, 5, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'JOJ0', 'type': 'User'}, {'comment_id': 708860610, 'comment_body': 'and those two are the last ones :-)', 'comment_created': datetime.datetime(2021, 9, 15, 5, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JOJ0', 'type': 'User'}]","[{'commit_sha': 'c1402229b64d90836a39744888be387a4296bcbf', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcd2f1d7bd110bc8cd82e5de2d7992d9d1356e34', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0b6e0087180ec9bdde9ddfdfed54d16cca3ff09', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '323c33d50c2a2a4cf38cd7503519f5450ac7895d', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebc22a307d0310c6672ed53949e78f9319e43926', 'committer_username': 'govynnus', 'committer_name': 'Callum Brown', 'committer_email': 'callum@calcuode.com', 'commit_date': datetime.datetime(2018, 6, 9, 11, 2, 10, tzinfo=datetime.timezone.utc)}]",Callum Brown,40113543,callum@calcuode.com,User,,15,,0,4

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
22844864,synapse,matrix-org/synapse,Python,2127,11790,245,545,23441,1531,842,66,"[{'id': 740627769, 'number': 10887, 'closed': datetime.datetime(2021, 9, 23, 17, 58, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 22, 16, 23, 18, tzinfo=datetime.timezone.utc), 'time_taken': 92094.0, 'time_delta': '1 day, 1:34:54', 'additions': 7, 'deletions': 4, 'state': 'closed'}, {'id': 706685838, 'number': 10561, 'closed': datetime.datetime(2021, 8, 18, 12, 13, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 9, 16, 59, 42, tzinfo=datetime.timezone.utc), 'time_taken': 760434.0, 'time_delta': '8 days, 19:13:54', 'additions': 65, 'deletions': 28, 'state': 'closed'}, {'id': 664874094, 'number': 10142, 'closed': datetime.datetime(2021, 8, 21, 21, 14, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 12, 49, 4, tzinfo=datetime.timezone.utc), 'time_taken': 6423939.0, 'time_delta': '74 days, 8:25:39', 'additions': 2389, 'deletions': 1, 'state': 'closed'}, {'id': 654742503, 'number': 10077, 'closed': datetime.datetime(2021, 5, 27, 17, 42, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 27, 9, 57, 14, tzinfo=datetime.timezone.utc), 'time_taken': 27910.0, 'time_delta': '7:45:10', 'additions': 105, 'deletions': 13, 'state': 'closed'}]"
165144850,nheko,Nheko-Reborn/nheko,C++,199,1867,36,179,5828,373,62,19,"[{'id': 709012472, 'number': 680, 'closed': datetime.datetime(2021, 8, 15, 18, 22, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 14, 10, 7, tzinfo=datetime.timezone.utc), 'time_taken': 360715.0, 'time_delta': '4 days, 4:11:55', 'additions': 18, 'deletions': 0, 'state': 'closed'}, {'id': 701722151, 'number': 664, 'closed': datetime.datetime(2021, 8, 7, 0, 27, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 19, 21, 46, tzinfo=datetime.timezone.utc), 'time_taken': 363954.0, 'time_delta': '4 days, 5:05:54', 'additions': 283, 'deletions': 301, 'state': 'closed'}, {'id': 660928534, 'number': 600, 'closed': datetime.datetime(2021, 6, 3, 18, 12, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 3, 13, 55, 51, tzinfo=datetime.timezone.utc), 'time_taken': 15403.0, 'time_delta': '4:16:43', 'additions': 119, 'deletions': 31, 'state': 'closed'}]"
24998719,matrix-spec-proposals,matrix-org/matrix-spec-proposals,,373,976,97,190,6365,473,641,458,"[{'id': 661671163, 'number': 3231, 'closed': datetime.datetime(2021, 9, 27, 17, 1, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 4, 11, 1, 49, tzinfo=datetime.timezone.utc), 'time_taken': 9957561.0, 'time_delta': '115 days, 5:59:21', 'additions': 138, 'deletions': 0, 'state': 'closed'}]"
165948265,mtxclient,Nheko-Reborn/mtxclient,C++,25,37,9,25,946,12,15,1,"[{'id': 839456749, 'number': 71, 'closed': datetime.datetime(2022, 2, 4, 18, 31, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 3, 16, 4, 44, tzinfo=datetime.timezone.utc), 'time_taken': 95216.0, 'time_delta': '1 day, 2:26:56', 'additions': 4, 'deletions': 5, 'state': 'closed'}, {'id': 712969991, 'number': 61, 'closed': datetime.datetime(2021, 8, 15, 18, 21, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 15, 17, 4, 59, tzinfo=datetime.timezone.utc), 'time_taken': 4584.0, 'time_delta': '1:16:24', 'additions': 46, 'deletions': 0, 'state': 'closed'}, {'id': 695982128, 'number': 60, 'closed': datetime.datetime(2021, 7, 23, 16, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 23, 14, 23, 54, tzinfo=datetime.timezone.utc), 'time_taken': 9186.0, 'time_delta': '2:33:06', 'additions': 21, 'deletions': 0, 'state': 'closed'}]"
306554592,synadm,JOJ0/synadm,Python,25,180,7,23,728,12,28,3,"[{'id': 717137702, 'number': 42, 'closed': datetime.datetime(2021, 9, 21, 6, 11, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 21, 11, 20, 54, tzinfo=datetime.timezone.utc), 'time_taken': 2659844.0, 'time_delta': '30 days, 18:50:44', 'additions': 323, 'deletions': 2, 'state': 'closed'}]"
