pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
666847407,examples: notebooks: Add use-case example for 'evaluating model performance' and script to create tests.,"# The Use-case Notebook
Changed name to `evaluating_model_performance` so in the future we can squash `tuning_models` into this one.
I think `moving_between_models` should stay as it is since it also has to do with getting predictions of models interchangeably so it cannot be highlighted if squashed.
On the other hand, comparing model performance and tuning models will go hand in hand.

# The `test_notebooks` script 

My concern is that the current assertions are dependant upon variables in the notebook. It won't blow up but it won't be helpful if someone goes ahead and names variables different.
I could go ahead and collect all the cell stdouts (which would require handling errors if the cell isn't a code cell) into one output of the notebook, but then again, the stdout could also vary in the sense that maybe someone doesn't bother printing out ""Accuracy:"" before the accuracy which would mean that there is no way to find it in the output. So the stdouts wouldn't really be a solution.

### A solution that comes to mind
We could maybe keep a template notebook, to maintain a standard and keep things uniform, in which we don't fill in the specifics but leave it for the user/contributor. like having the load() function empty to let the user fill in which model he wants and similarly with data and imports and everything. And at the end we have this Accuracy variable with our desired name or something like that and similarly with preds.



Other than that, the script seems to be working alright. Got the following log from some debugging statements showing which files the tests are created for and the directory they run in:

```
(base) hash1m@hash1m-ThinkPad-W520:~/dffml$ python3 -m unittest tests.test_notebooks
/home/hash1m/dffml
/home/hash1m/dffml/examples/notebooks/compare_model_performance.ipynb
/home/hash1m/dffml/examples/notebooks/moving_between_models.ipynb
/home/hash1m/dffml/tests/notebooks/data
./home/hash1m/dffml/tests/notebooks/data
.
----------------------------------------------------------------------
Ran 2 tests in 12.222s

OK
```
ping @pdxjohnny ",True,1127,https://api.github.com/repos/intel/dffml/pulls/1127,https://github.com/intel/dffml/pull/1127,closed,427,56,11,3,1,2,0,0,[],2021-06-10 12:35:15+00:00,2021-07-06 17:58:40+00:00,2265805.0,"26 days, 5:23:25","[{'comment_id': 652014486, 'comment_body': '```suggestion\r\n        with chdir(pathlib.Path(__file__).parent.joinpath(""notebooks"", ""data"")):\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 17, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 652021312, 'comment_body': '```suggestion\r\nnb_path = pathlib.Path(__file__).parent.parent / ""examples"" / ""notebooks""\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 17, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}]","[{'commit_sha': 'c12fc89e1f34d7d45268161241c9a2700a915c71', 'committer_username': 'mhash1m', 'committer_name': 'Hashim', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 11, 16, 27, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b5dabe405d9b3f8dc7462aa382816542b02d792', 'committer_username': 'mhash1m', 'committer_name': 'Hashim', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 11, 16, 27, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7b690a5cb06b12c6d0c4acce9ef44732269460', 'committer_username': 'pdxjohnny', 'committer_name': 'John Andersen', 'committer_email': 'john.s.andersen@intel.com', 'commit_date': datetime.datetime(2013, 11, 15, 18, 35, 37, tzinfo=datetime.timezone.utc)}]",Hashim,58783659,,User,,15,,32,21
712846585,"examples: notebooks: Add usecase example, for 'Tuning Models', and Optimizer ParameterGrid.",- [x] READY FOR REVIEW,True,1192,https://api.github.com/repos/intel/dffml/pulls/1192,https://github.com/intel/dffml/pull/1192,closed,820,11,12,3,2,1,0,0,[],2021-08-14 22:57:55+00:00,2021-08-17 16:03:07+00:00,234312.0,"2 days, 17:05:12","[{'comment_id': 690045791, 'comment_body': ""```suggestion\r\n        # TODO Remove no_enforce_immutableonce we've corrected\r\n        # model configs to make them accurately describe which\r\n        # properties are mutable\r\n        with model.config.no_enforce_immutable():\r\n```"", 'comment_created': datetime.datetime(2021, 8, 17, 5, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}]","[{'commit_sha': 'dce739624f75ef87e795718590b8c0b0a5bea34a', 'committer_username': 'mhash1m', 'committer_name': 'Hashim', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 11, 16, 27, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ab929868764f5278658513122e2bd8e0f4536f1', 'committer_username': 'mhash1m', 'committer_name': 'Hashim', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 11, 16, 27, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f298521e4863686627ce007cbb4987704e3afa4', 'committer_username': 'mhash1m', 'committer_name': 'Hashim', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 11, 16, 27, 48, tzinfo=datetime.timezone.utc)}]",Hashim,58783659,,User,,15,,32,21
679225873,examples: notebooks: Create usecase example notebook 'Saving and loading models',"

Signed-off-by: mHash1m <hashimchaudry23@gmail.com>",True,1140,https://api.github.com/repos/intel/dffml/pulls/1140,https://github.com/intel/dffml/pull/1140,closed,575,1,4,1,2,0,0,0,[],2021-06-28 17:13:21+00:00,2021-07-27 16:15:39+00:00,2502138.0,"28 days, 23:02:18",[],"[{'commit_sha': '378a71dadc0aaa766cf50d56b509f5488171251e', 'committer_username': 'mhash1m', 'committer_name': 'Hashim', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 11, 16, 27, 48, tzinfo=datetime.timezone.utc)}]",Hashim,58783659,,User,,15,,32,21
674469590,examples: notebooks: Create usecase example notebook 'Ensemble by stacking',"- Using 2 models instead of 4.
- Accuracy for ensembling 2 models as suggested didn't turn out great.
- Removed the accuracies part to keep the notebook precise.
- Showing final predictions instead of ensemble accuracy comparison, requires `stacked_test_predictions` either way.

**Update**
- Fixed Accuracy
- Added Visualizations

Signed-off-by: mHash1m <hashimchaudry23@gmail.com>",True,1134,https://api.github.com/repos/intel/dffml/pulls/1134,https://github.com/intel/dffml/pull/1134,closed,727,0,4,1,3,0,0,0,[],2021-06-21 11:27:54+00:00,2021-07-27 16:29:24+00:00,3128490.0,"36 days, 5:01:30",[],"[{'commit_sha': '1f8d220729c0102892966fbf48594307b6931935', 'committer_username': 'mhash1m', 'committer_name': 'Hashim', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 11, 16, 27, 48, tzinfo=datetime.timezone.utc)}]",Hashim,58783659,,User,,15,,32,21
684569638,examples: notebooks: Create use-case example notebook for 'Transfer Learning',"**Progress :**
- [x] Squashed unnecessary part.
- [x] Fixed timeout during training.
- [x] Fixed macos error by installing and enabling `ipywidgets`.
- [x] Enhance code descriptions.
- [x] Fix features.
- [x] Remove the finetuning approach
- [x] Add links to documentation for cached_download, source.dir, and model entry points
- [x] move `ipywidgets` to dev `extra_require`
- [x] ignore warnings in jupyter notebook
- [x] set logging to `INFO` and stream to `stdout` to avoid the red background.
- [x] Hide the logging cell from docs
- [x] Remove the personal user handle from paths in JSON so it doesn't show on docs",True,1151,https://api.github.com/repos/intel/dffml/pulls/1151,https://github.com/intel/dffml/pull/1151,closed,430,1,6,3,6,0,0,0,[],2021-07-06 17:53:54+00:00,2021-07-27 16:25:57+00:00,1809123.0,"20 days, 22:32:03",[],"[{'commit_sha': '59773d56e25538617d65fc7a2ea82f9cc952ad32', 'committer_username': 'mhash1m', 'committer_name': 'Hashim', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 11, 16, 27, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a58f4ade3e124d00e203150dcdcf16308714d6b9', 'committer_username': 'mhash1m', 'committer_name': 'Hashim', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 11, 16, 27, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daed11b32d28a3ae7087c0139ecaceaacc62671e', 'committer_username': 'mhash1m', 'committer_name': 'Hashim', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 11, 16, 27, 48, tzinfo=datetime.timezone.utc)}]",Hashim,58783659,,User,,15,,32,21
682832518,model: pytorch: pretrained: Add support for additional layers Python API,"fixes: #1147 

* This PR is a dependency for the usecase example notebook I'm currently working on, ie. ""Transferlearning"".

* I ended up setting `layers: Any`in the `PyTorchPreTrainedModelConfig` and also skipping `convert_value()` in `base.py` if field type is `Any` since it tries to create an instance of the type. 

* Seems to be working as I handle the formatting of the parameter in `pytorch_pretrained` itself, but what could be the implications of this? 

* It appears we don't have `Any` type fields, even if we add in future and want to by-pass the checks in `base.py`, we can simply provide multiple arguments to `isinstance()` to check against along with `dict`, to allow the `convert_value()` process.

* Alternatively, I could also create a `.yaml` inside the notebook (for the time being)  if this approach doesn't seem right.

* Using `Pillow==8.2.0` to temporarily fix the pytorch errors. Seems like there's a pending fix python-pillow/Pillow#5572 so should be okay soon",True,1148,https://api.github.com/repos/intel/dffml/pulls/1148,https://github.com/intel/dffml/pull/1148,closed,21,6,3,2,3,0,0,0,[],2021-07-02 19:04:14+00:00,2021-07-07 17:47:05+00:00,427371.0,"4 days, 22:42:51",[],"[{'commit_sha': 'ac181a0e5fb80878439b87296f13a0332eba8806', 'committer_username': 'pdxjohnny', 'committer_name': 'John Andersen', 'committer_email': 'john.s.andersen@intel.com', 'commit_date': datetime.datetime(2013, 11, 15, 18, 35, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '024941d96b1812babf948c7ae19ae51f281e7315', 'committer_username': 'mhash1m', 'committer_name': 'Hashim', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 11, 16, 27, 48, tzinfo=datetime.timezone.utc)}]",Hashim,58783659,,User,,15,,32,21
697957597,model: scikit: Add support and usecase examples for MultiOutput models,"- Remove last commit(d7ef74d07368450d33f0923afb77fef87d4d118c)? i.e native accuracy scorer multi-output support. 
    - Currently, we are trying to get mean of accuracies for the multiple labels which yields different output than the scikit scorer with same name. 
    - I have 3 approaches, the other two commented in the file, and all of them give different scores. Probably the math is off with the other 2.
- test (., 3.7), test (., 3.8) and examples/dataflows.rst take forever.
    - [x] fixed by removing the numpy import.
- [x] Add exceptions of scorers for multioutput support in docs.
- [x] Make high-level accuracy() take predict features.
- [x] Add docs if changes are finalized.
- [x] READY FOR REVIEW
- [ ] READY TO MERGE",True,1175,https://api.github.com/repos/intel/dffml/pulls/1175,https://github.com/intel/dffml/pull/1175,closed,1371,436,103,3,5,18,0,0,[],2021-07-27 15:19:01+00:00,2021-08-17 05:14:37+00:00,1778136.0,"20 days, 13:55:36","[{'comment_id': 677661680, 'comment_body': ""Let's revert the change in record.prediected for array support, move the for loop to these lines"", 'comment_created': datetime.datetime(2021, 7, 27, 17, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 684233731, 'comment_body': 'alternative for this (`mctx.config.predict`)?\r\nAdding this fixed test_cli but test_routes failing now', 'comment_created': datetime.datetime(2021, 8, 6, 13, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mhash1m', 'type': 'User'}, {'comment_id': 687879593, 'comment_body': ""Isn't this the same as `list_a + [arg_b]`?\r\n\r\n```python\r\n>>> a = [1]\r\n>>> id(a)\r\n140385771636928\r\n>>> b = a + [2]\r\n>>> id(b)\r\n140385748642624\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2021, 8, 12, 16, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 688054154, 'comment_body': 'We need to modify this command to take the features to assess accuracy from the command line (via `AccuracyCMDConfig`)', 'comment_created': datetime.datetime(2021, 8, 12, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 688239329, 'comment_body': 'Instead of checking if features is in locals, it is more Pythonic to set features to None, and then check `if features is not None`', 'comment_created': datetime.datetime(2021, 8, 13, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 688240146, 'comment_body': ""The main module really shouldn't have to know anything about plugins, let's remove `NO_PREDICT_FEATURE_SCORERS`."", 'comment_created': datetime.datetime(2021, 8, 13, 4, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 688241564, 'comment_body': ""But let's remove this, we should always be passing features via expansion."", 'comment_created': datetime.datetime(2021, 8, 13, 4, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 688241808, 'comment_body': '```suggestion\r\n        return await actx.score(mctx, sctx, *features)\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 4, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 688242963, 'comment_body': 'We have overloaded the possible types of the variable length arguments too far with this implementation. The existing logic is not very clean.\r\n\r\nLet us instead modify the function signature of `accuracy()` to accept either a `Feature`, or `Features` as the third argument.\r\n\r\n```python\r\nasync def accuracy(\r\n    model,\r\n    accuracy_scorer: Union[AccuracyScorer, AccuracyContext],\r\n    features: Union[Feature, Features],\r\n    *args: Union[BaseSource, Record, Dict[str, Any], Feature, Features],\r\n) -> float:\r\n```\r\n\r\n```suggestion\r\n    # TODO Use this to ensure that we\'re always passing features before records\r\n    # We can remove it eventually once we know we\'ve updated everywhere\r\n    # appropriately\r\n    if not isinstance(features, Feature):\r\n        raise TypeError(f""features was {type(features)}: {features!r}. Should have been Feature or Features"")\r\n    if isinstance(features, Feature):\r\n        features = Features(features)\r\n    async with contextlib.AsyncExitStack() as astack:\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 4, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 688243701, 'comment_body': 'Why was `NO_PREDICT_FEATURE_SCORERS` added?', 'comment_created': datetime.datetime(2021, 8, 13, 5, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 688243952, 'comment_body': '```suggestion\r\n        self, mctx: ModelContext, sources: SourcesContext, *args: Feature\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 5, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 688244409, 'comment_body': ""We really don't need this check logic if we call with list argument expansion (`*features`) from `high_level.ml:accuracy()`."", 'comment_created': datetime.datetime(2021, 8, 13, 5, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 688244539, 'comment_body': 'Same as clf with no need to do this check', 'comment_created': datetime.datetime(2021, 8, 13, 5, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 688244937, 'comment_body': 'Once we do that we should only have one possible call to `accuracy()` here.\r\n\r\n```python\r\n        return await accuracy(self.model, self.scorer, self.features, self.sources)\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 13, 5, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 688532538, 'comment_body': ""To accommodate spacy ner but it seems like it doesn't have python api."", 'comment_created': datetime.datetime(2021, 8, 13, 13, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mhash1m', 'type': 'User'}, {'comment_id': 688533657, 'comment_body': 'True lol :facepalm: ', 'comment_created': datetime.datetime(2021, 8, 13, 13, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mhash1m', 'type': 'User'}, {'comment_id': 688535372, 'comment_body': ""```\r\n        $ dffml accuracy \\\r\n            -model slr \\\r\n            -model-features f1:float:1 \\\r\n            -model-predict ans:int:1 \\\r\n            -model-location tempdir \\\r\n            -sources f=csv \\\r\n            -source-filename dataset.csv \\\r\n            -scorer mse \\\r\n```\r\nI suppose we dont want the cli to take predict twice, I think we should use the '-model-predict' arg for features but I'm not sure where to look in the arg parsers for that, can you point me?"", 'comment_created': datetime.datetime(2021, 8, 13, 13, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mhash1m', 'type': 'User'}, {'comment_id': 688571290, 'comment_body': 'Hmmm, we really should do it twice, we had a lot of issues when we inferred the directory to save things in. We need to make sure that everything is explicate rather than implicit ', 'comment_created': datetime.datetime(2021, 8, 13, 14, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}]","[{'commit_sha': '9196a1c0661607e43a6d01ff586fcf2cc1709391', 'committer_username': 'mhash1m', 'committer_name': 'Hashim', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 11, 16, 27, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '673ea6d958e729f9b4649fd8f71386bc37adc2e4', 'committer_username': 'mhash1m', 'committer_name': 'Hashim', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 11, 16, 27, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e39b58d87dc6c96ff54558aabe40e49e24d9c68', 'committer_username': 'mhash1m', 'committer_name': 'Hashim', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 11, 16, 27, 48, tzinfo=datetime.timezone.utc)}]",Hashim,58783659,,User,,15,,32,21
581370639,record: Separate confidence from prediction,Fixes: #868,False,1020,https://api.github.com/repos/intel/dffml/pulls/1020,https://github.com/intel/dffml/pull/1020,closed,460,491,88,1,2,6,0,0,[],2021-02-27 17:21:09+00:00,2022-03-12 22:22:37+00:00,32677288.0,"378 days, 5:01:28","[{'comment_id': 588925422, 'comment_body': 'I know I just posted the recording, but I want to confirm with you that the plan here is to have the following output when this PR is not WIP:\r\n\r\n```\r\n                ""predictions"": {\r\n                    ""ans"": 1\r\n                }\r\n                ""confidences"": {\r\n                    ""ans"": 0.9355670103092784\r\n                }\r\n```', 'comment_created': datetime.datetime(2021, 3, 6, 20, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 588928319, 'comment_body': ""@pdxjohnny Ah! Tbh I thought we wanted to keep it so I made the whole PR around keeping the format :facepalm: . And I had actually completed the PR lol. But yeah this makes sense. I'll fix this asap.\r\nAlso about the recording, I made the csv work with the headers, or so it seems. Please review that part as well and let me know if we still need to have that property with predictions and confidences which you mentioned in the recording."", 'comment_created': datetime.datetime(2021, 3, 6, 20, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mhash1m', 'type': 'User'}, {'comment_id': 589042249, 'comment_body': ""Also, we don't need the dicts inside `confidences` and `predictions` right? we could just store single values as in the above expected output you shared."", 'comment_created': datetime.datetime(2021, 3, 7, 14, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mhash1m', 'type': 'User'}, {'comment_id': 590553765, 'comment_body': 'Also would we want to have the `record.predictions()` output something similar to whats stored inside records? As there are two different outputs, one of the actual record and the other of `record.predictions()` which also gets called from other files. So that would mean `record.predictions()` output:\r\n\r\n> I know I just posted the recording, but I want to confirm with you that the plan here is to have the following output when this PR is not WIP:\r\n> \r\n> ```\r\n>                 ""predictions"": {\r\n>                     ""ans"": 1\r\n>                 }\r\n>                 ""confidences"": {\r\n>                     ""ans"": 0.9355670103092784\r\n>                 }\r\n> ```\r\n\r\n', 'comment_created': datetime.datetime(2021, 3, 9, 17, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mhash1m', 'type': 'User'}, {'comment_id': 592822697, 'comment_body': ""> Also, we don't need the dicts inside `confidence` and `predictions` right? we could just store single values as in the above expected output you shared.\r\n\r\nYes"", 'comment_created': datetime.datetime(2021, 3, 12, 0, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}, {'comment_id': 592825919, 'comment_body': '> Also would we want to have the `record.predictions()` output something similar to whats stored inside records? As there are two different outputs, one of the actual record and the other of `record.predictions()` which also gets called from other files. So that would mean `record.predictions()` output:\r\n> \r\n> > I know I just posted the recording, but I want to confirm with you that the plan here is to have the following output when this PR is not WIP:\r\n> > ```\r\n> >                 ""predictions"": {\r\n> >                     ""ans"": 1\r\n> >                 }\r\n> >                 ""confidences"": {\r\n> >                     ""ans"": 0.9355670103092784\r\n> >                 }\r\n> > ```\r\n\r\n\r\nHere\'s what it should look like from a REPL when the PR is over\r\n\r\n```python\r\n>>> record.predictions()\r\n{\'ans\': 1}\r\n```\r\n\r\n\r\n```python\r\n>>> record.confidences()\r\n{\'ans\': 0.9355670103092784}\r\n```\r\n\r\n> >                 }\r\n> >                 ""confidences"": {\r\n> >                     ""ans"": 0.9355670103092784\r\n> >                 }\r\n', 'comment_created': datetime.datetime(2021, 3, 12, 0, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pdxjohnny', 'type': 'User'}]","[{'commit_sha': 'dc81cf2cf2834c40395e2b896f61653f41e680ce', 'committer_username': 'mhash1m', 'committer_name': 'Hashim', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 11, 16, 27, 48, tzinfo=datetime.timezone.utc)}]",Hashim,58783659,,User,,15,,32,21

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
149512216,dffml,intel/dffml,Python,138,250,18,64,4168,412,39,27,"[{'id': 762592091, 'number': 1263, 'closed': datetime.datetime(2022, 1, 26, 15, 21, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 20, 18, 10, 23, tzinfo=datetime.timezone.utc), 'time_taken': 8457082.0, 'time_delta': '97 days, 21:11:22', 'additions': 80, 'deletions': 5, 'state': 'closed'}, {'id': 719530471, 'number': 1210, 'closed': datetime.datetime(2022, 3, 12, 22, 22, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 25, 11, 57, 10, tzinfo=datetime.timezone.utc), 'time_taken': 17231133.0, 'time_delta': '199 days, 10:25:33', 'additions': 915, 'deletions': 877, 'state': 'closed'}, {'id': 712846585, 'number': 1192, 'closed': datetime.datetime(2021, 8, 17, 16, 3, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 14, 22, 57, 55, tzinfo=datetime.timezone.utc), 'time_taken': 234312.0, 'time_delta': '2 days, 17:05:12', 'additions': 820, 'deletions': 11, 'state': 'closed'}, {'id': 697957597, 'number': 1175, 'closed': datetime.datetime(2021, 8, 17, 5, 14, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 15, 19, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1778136.0, 'time_delta': '20 days, 13:55:36', 'additions': 1371, 'deletions': 436, 'state': 'closed'}, {'id': 684569638, 'number': 1151, 'closed': datetime.datetime(2021, 7, 27, 16, 25, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 17, 53, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1809123.0, 'time_delta': '20 days, 22:32:03', 'additions': 430, 'deletions': 1, 'state': 'closed'}, {'id': 682832518, 'number': 1148, 'closed': datetime.datetime(2021, 7, 7, 17, 47, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 2, 19, 4, 14, tzinfo=datetime.timezone.utc), 'time_taken': 427371.0, 'time_delta': '4 days, 22:42:51', 'additions': 21, 'deletions': 6, 'state': 'closed'}, {'id': 679225873, 'number': 1140, 'closed': datetime.datetime(2021, 7, 27, 16, 15, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 17, 13, 21, tzinfo=datetime.timezone.utc), 'time_taken': 2502138.0, 'time_delta': '28 days, 23:02:18', 'additions': 575, 'deletions': 1, 'state': 'closed'}, {'id': 674469590, 'number': 1134, 'closed': datetime.datetime(2021, 7, 27, 16, 29, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 21, 11, 27, 54, tzinfo=datetime.timezone.utc), 'time_taken': 3128490.0, 'time_delta': '36 days, 5:01:30', 'additions': 727, 'deletions': 0, 'state': 'closed'}, {'id': 666847407, 'number': 1127, 'closed': datetime.datetime(2021, 7, 6, 17, 58, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 12, 35, 15, tzinfo=datetime.timezone.utc), 'time_taken': 2265805.0, 'time_delta': '26 days, 5:23:25', 'additions': 427, 'deletions': 56, 'state': 'closed'}, {'id': 653934638, 'number': 1123, 'closed': datetime.datetime(2021, 5, 26, 19, 1, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 26, 15, 40, 8, tzinfo=datetime.timezone.utc), 'time_taken': 12074.0, 'time_delta': '3:21:14', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 649776418, 'number': 1118, 'closed': datetime.datetime(2021, 5, 25, 17, 21, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 21, 8, 35, 28, tzinfo=datetime.timezone.utc), 'time_taken': 377154.0, 'time_delta': '4 days, 8:45:54', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 645313998, 'number': 1116, 'closed': datetime.datetime(2021, 5, 19, 19, 17, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 16, 13, 11, 20, tzinfo=datetime.timezone.utc), 'time_taken': 281197.0, 'time_delta': '3 days, 6:06:37', 'additions': 58, 'deletions': 0, 'state': 'closed'}, {'id': 613065218, 'number': 1092, 'closed': datetime.datetime(2021, 4, 27, 17, 10, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 11, 12, 27, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1399403.0, 'time_delta': '16 days, 4:43:23', 'additions': 228, 'deletions': 359, 'state': 'closed'}, {'id': 611699764, 'number': 1085, 'closed': datetime.datetime(2021, 4, 27, 16, 21, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 8, 16, 24, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1641400.0, 'time_delta': '18 days, 23:56:40', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 605954790, 'number': 1057, 'closed': datetime.datetime(2021, 5, 7, 0, 22, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 31, 15, 55, 2, tzinfo=datetime.timezone.utc), 'time_taken': 3140838.0, 'time_delta': '36 days, 8:27:18', 'additions': 431, 'deletions': 3, 'state': 'closed'}, {'id': 581370639, 'number': 1020, 'closed': datetime.datetime(2022, 3, 12, 22, 22, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 27, 17, 21, 9, tzinfo=datetime.timezone.utc), 'time_taken': 32677288.0, 'time_delta': '378 days, 5:01:28', 'additions': 460, 'deletions': 491, 'state': 'closed'}, {'id': 578392445, 'number': 1013, 'closed': datetime.datetime(2021, 2, 24, 23, 7, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 23, 11, 59, 41, tzinfo=datetime.timezone.utc), 'time_taken': 126469.0, 'time_delta': '1 day, 11:07:49', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 451661296, 'number': 788, 'closed': datetime.datetime(2020, 7, 23, 16, 2, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 18, 3, 18, 33, tzinfo=datetime.timezone.utc), 'time_taken': 477821.0, 'time_delta': '5 days, 12:43:41', 'additions': 205, 'deletions': 8, 'state': 'closed'}, {'id': 419287243, 'number': 646, 'closed': datetime.datetime(2020, 6, 4, 19, 24, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 18, 6, 28, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1515365.0, 'time_delta': '17 days, 12:56:05', 'additions': 516, 'deletions': 13, 'state': 'closed'}, {'id': 417566034, 'number': 634, 'closed': datetime.datetime(2020, 5, 15, 1, 40, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 19, 28, 44, tzinfo=datetime.timezone.utc), 'time_taken': 108701.0, 'time_delta': '1 day, 6:11:41', 'additions': 182, 'deletions': 56, 'state': 'closed'}, {'id': 414030615, 'number': 614, 'closed': datetime.datetime(2020, 5, 6, 16, 45, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 6, 11, 13, 35, tzinfo=datetime.timezone.utc), 'time_taken': 19893.0, 'time_delta': '5:31:33', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 412563947, 'number': 609, 'closed': datetime.datetime(2020, 5, 3, 22, 15, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 3, 7, 40, 17, tzinfo=datetime.timezone.utc), 'time_taken': 52511.0, 'time_delta': '14:35:11', 'additions': 201, 'deletions': 153, 'state': 'closed'}, {'id': 410110914, 'number': 589, 'closed': datetime.datetime(2020, 4, 28, 17, 6, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 28, 13, 15, 33, tzinfo=datetime.timezone.utc), 'time_taken': 13839.0, 'time_delta': '3:50:39', 'additions': 59, 'deletions': 1, 'state': 'closed'}, {'id': 409953198, 'number': 587, 'closed': datetime.datetime(2020, 4, 30, 18, 35, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 28, 8, 7, 47, tzinfo=datetime.timezone.utc), 'time_taken': 210464.0, 'time_delta': '2 days, 10:27:44', 'additions': 67, 'deletions': 11, 'state': 'closed'}, {'id': 409459692, 'number': 586, 'closed': datetime.datetime(2020, 4, 27, 23, 0, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 27, 12, 10, 32, tzinfo=datetime.timezone.utc), 'time_taken': 39016.0, 'time_delta': '10:50:16', 'additions': 75, 'deletions': 0, 'state': 'closed'}, {'id': 405805308, 'number': 580, 'closed': datetime.datetime(2020, 4, 21, 17, 47, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 20, 3, 41, 37, tzinfo=datetime.timezone.utc), 'time_taken': 137174.0, 'time_delta': '1 day, 14:06:14', 'additions': 434, 'deletions': 9, 'state': 'closed'}, {'id': 401917879, 'number': 549, 'closed': datetime.datetime(2020, 4, 15, 16, 21, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 10, 13, 53, 34, tzinfo=datetime.timezone.utc), 'time_taken': 440869.0, 'time_delta': '5 days, 2:27:49', 'additions': 89, 'deletions': 1, 'state': 'closed'}, {'id': 398488417, 'number': 523, 'closed': datetime.datetime(2020, 4, 4, 20, 52, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 4, 8, 17, 46, tzinfo=datetime.timezone.utc), 'time_taken': 45311.0, 'time_delta': '12:35:11', 'additions': 8, 'deletions': 7, 'state': 'closed'}, {'id': 395543563, 'number': 505, 'closed': datetime.datetime(2020, 3, 31, 20, 6, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 30, 10, 4, 8, tzinfo=datetime.timezone.utc), 'time_taken': 122523.0, 'time_delta': '1 day, 10:02:03', 'additions': 130, 'deletions': 193, 'state': 'closed'}, {'id': 395071753, 'number': 496, 'closed': datetime.datetime(2020, 4, 1, 15, 27, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 28, 9, 45, 14, tzinfo=datetime.timezone.utc), 'time_taken': 366136.0, 'time_delta': '4 days, 5:42:16', 'additions': 48, 'deletions': 2, 'state': 'closed'}, {'id': 386835707, 'number': 466, 'closed': datetime.datetime(2020, 3, 14, 2, 59, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 11, 17, 51, 50, tzinfo=datetime.timezone.utc), 'time_taken': 205657.0, 'time_delta': '2 days, 9:07:37', 'additions': 73, 'deletions': 3, 'state': 'closed'}, {'id': 382549305, 'number': 448, 'closed': datetime.datetime(2020, 3, 2, 21, 35, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 2, 18, 52, 36, tzinfo=datetime.timezone.utc), 'time_taken': 9798.0, 'time_delta': '2:43:18', 'additions': 40, 'deletions': 1, 'state': 'closed'}, {'id': 382046913, 'number': 442, 'closed': datetime.datetime(2020, 3, 1, 20, 35, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 1, 13, 52, 9, tzinfo=datetime.timezone.utc), 'time_taken': 24187.0, 'time_delta': '6:43:07', 'additions': 49, 'deletions': 0, 'state': 'closed'}, {'id': 380127381, 'number': 411, 'closed': datetime.datetime(2020, 2, 26, 16, 44, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 26, 10, 8, 24, tzinfo=datetime.timezone.utc), 'time_taken': 23782.0, 'time_delta': '6:36:22', 'additions': 2, 'deletions': 1, 'state': 'closed'}]"
