pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
438728733,Add describe() and describeElement()," Changes:

- create folder in source for accessibility features
- src/accessibility/describe.js adds two functions describe() and describeElement() to the p5.js library that make adding fallback descriptions of the canvas easy for p5.js users. Descriptions generated with these functions can be useful for screen reader users and for search engines.
  - [describe() function](https://www.dsk.lm-n.xyz/p5-describe/describe/index.html)
  - [describeElement() function](https://www.dsk.lm-n.xyz/p5-describe/describeElement/index.html)
- in app.js import './accessibility/describe.js'
- in constants adds constants for functions describe() and describeElement()

#### PR Checklist
<!--
  To check any option, replace the ""[ ]"" with a ""[x]"". Be sure to check out how it looks in the Preview tab! Feel free to remove any portion of the template that is not relevant for your issue.
-->

- [x] `npm run lint` passes
- [x] [Inline documentation] is included / updated
- [x] [Unit tests] are included / updated

Pending: 
- Styling of examples in reference. Currently the examples look ugly. @kjhollen and I looked into it but unsure of how to proceed/fix them. @lmccart perhaps you have some ideas of how we could approach this.
<img width=""754"" alt=""Examples of how to use describe()"" src=""https://user-images.githubusercontent.com/16418450/85438005-b9574b00-b548-11ea-8b4c-4ffda9fd2a16.png"">",True,4654,https://api.github.com/repos/processing/p5.js/pulls/4654,https://github.com/processing/p5.js/pull/4654,closed,634,0,5,42,7,31,2,1,"[{'name': 'Feature Request'}, {'name': 'Area:Accessibility'}]",2020-06-23 17:54:01+00:00,2020-08-16 00:15:38+00:00,4602097.0,"53 days, 6:21:37","[{'comment_id': 445780121, 'comment_body': 'It seems safe to just assign without checking, but does this keep it from notifying the screen reader that the value has been updated? (asking for clarity, for me) :)', 'comment_created': datetime.datetime(2020, 6, 25, 19, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 445781443, 'comment_body': 'use p5 constant LABEL here', 'comment_created': datetime.datetime(2020, 6, 25, 19, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 445782481, 'comment_body': ""should _Description, _dsc, and other suffixes you've defined here be constants? Might prevent errors in the future if other features are added that depend on these ids."", 'comment_created': datetime.datetime(2020, 6, 25, 19, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 445783779, 'comment_body': 'I can never remember regex syntax, so a comment here would be helpful :)', 'comment_created': datetime.datetime(2020, 6, 25, 19, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 445785202, 'comment_body': ""Thinking of a new coder learning about this function. Maybe the part about the DOM can go at the end? I think a new programmer could still use this function without knowing about the DOM and the acronym might be intimidating. I think it's important enough to mention here, but maybe it can go at the end, like it's supplemental info."", 'comment_created': datetime.datetime(2020, 6, 25, 19, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 445785472, 'comment_body': 'same comment here as above: suggest moving detail about the canvas sub DOM to the end of the description.', 'comment_created': datetime.datetime(2020, 6, 25, 19, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 445786314, 'comment_body': ""this is a nitpick, but I think it's ok to just round these numbers for simplicity"", 'comment_created': datetime.datetime(2020, 6, 25, 19, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 445787032, 'comment_body': 'use p5 constant here', 'comment_created': datetime.datetime(2020, 6, 25, 19, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 445787508, 'comment_body': 'a short description of what updates are being made to the text would be helpful here', 'comment_created': datetime.datetime(2020, 6, 25, 19, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 458326784, 'comment_body': 'great! one small typo in this comment (Lable)', 'comment_created': datetime.datetime(2020, 7, 21, 19, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 458333910, 'comment_body': ""the describe tests all looks great! another good test to add would be to make sure a period isn't added if the supplied string already has one. additionally, what should the outcome be if the user supplies a string that ends in ! or ?"", 'comment_created': datetime.datetime(2020, 7, 21, 19, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 458334787, 'comment_body': 'Great! as above: add a test case where the : and . are already present, and any other edge cases that matter.', 'comment_created': datetime.datetime(2020, 7, 21, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 461015186, 'comment_body': ""I've added an exception for ! and ? in regex function"", 'comment_created': datetime.datetime(2020, 7, 27, 16, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 464200640, 'comment_body': ""these can be simplified to `!t.endsWith('.')` etc"", 'comment_created': datetime.datetime(2020, 8, 3, 5, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464200845, 'comment_body': 'simplify to:\r\n`if (!document.getElementById(cnvId + ds)) {`', 'comment_created': datetime.datetime(2020, 8, 3, 5, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464201254, 'comment_body': ""i'm not sure this test is necessary. could you just set the `innerHTML`? or is there a performance advantage to not reseting if it's already set?"", 'comment_created': datetime.datetime(2020, 8, 3, 5, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464201501, 'comment_body': ""if this is only used internally, it doesn't need to be attached to `p5.prototype`"", 'comment_created': datetime.datetime(2020, 8, 3, 5, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464201590, 'comment_body': 'for readability, i would suggest spelling out name, text, and display', 'comment_created': datetime.datetime(2020, 8, 3, 5, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464201828, 'comment_body': 'for readability, i would suggest spelling out `elementName` ', 'comment_created': datetime.datetime(2020, 8, 3, 5, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464201955, 'comment_body': 'not sure this check is necessary', 'comment_created': datetime.datetime(2020, 8, 3, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464202145, 'comment_body': 'for readability it may help to write these out', 'comment_created': datetime.datetime(2020, 8, 3, 5, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464202724, 'comment_body': 'does capitalization matter if this is for screen reader? pardon my lack of knowledge about this ', 'comment_created': datetime.datetime(2020, 8, 3, 5, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464202938, 'comment_body': ""if this is only used internally, it doesn't need to be attached to `p5.prototype`"", 'comment_created': datetime.datetime(2020, 8, 3, 5, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464565353, 'comment_body': 'If an html element is constantly being reset some screenreaders will read the html element as empty and will not be able to access its content. This why we are reseting only when the content is different.', 'comment_created': datetime.datetime(2020, 8, 3, 17, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 464570663, 'comment_body': 'ah! interesting, makes sense. thanks for explaining', 'comment_created': datetime.datetime(2020, 8, 3, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464755240, 'comment_body': ""it doesn't really matter for something like this. after thinking about it I've decided to leave it up to the user and deleted these regex lines."", 'comment_created': datetime.datetime(2020, 8, 4, 2, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 464757907, 'comment_body': ""@kjhollen this is one of the tests that are not working. I've commented out for now. when I try doing what the test does on a p5 sketch it doesn't give me any errors so I have to think through it a bit and figure out what's going on. There are 3 more tests that I've commented out because, like this one, they keep giving me unexpected errors. If you have any thoughts lmk ðŸ˜… "", 'comment_created': datetime.datetime(2020, 8, 4, 2, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 466621101, 'comment_body': ""ah shoot! ok, I'm checking out the code now and will let you know if the behavior is the same for me."", 'comment_created': datetime.datetime(2020, 8, 6, 18, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 466658213, 'comment_body': ""Ok, I've got a theory. I think it has to do with the way the template strings are being compiled down to ES5 with babel: it's including the indents and linebreaks. I think this is causing a mismatch sometimes.\r\n\r\nMore here: https://medium.com/dailyjs/how-to-create-multi-line-string-with-template-literals-in-javascript-a3a140d0b0f6\r\n\r\nI think you can use a back slash to fix it at the end of each line: https://stackoverflow.com/questions/37321047/wrap-long-template-literal-line-to-multiline-without-creating-a-new-line-in-the\r\n\r\n(trying this out now on my end!)"", 'comment_created': datetime.datetime(2020, 8, 6, 20, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 466666176, 'comment_body': ""ok, more complex than it looks! I can't get it to work with the minified p5.js file, but the regular one works fine. hmm. any thoughts @lmccart?"", 'comment_created': datetime.datetime(2020, 8, 6, 20, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 468264683, 'comment_body': ""I'm curious why this method is attached to the prototype but not the fallback elements or label elements. Wondering if it makes sense for fallbackElements and labelElements to be attached to a p5 instance? (I recall that this got added to fix the tests, am wondering if attaching to the instance would also fix that or if there are other possible advantages)"", 'comment_created': datetime.datetime(2020, 8, 11, 0, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}]","[{'commit_sha': 'c2ce19ecdcb892b2203004162d41a7555ca6ee8e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a684c019d09ec4598614411f150782ec4125cf14', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6bf8657e7e3d68e5d049e2d96eebb22a21d01e34', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a1980ed0a622490b83fab54108da9162842082bf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2565a0ff7449cca93baf867685120d610320dfac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b62d2627091e1b65ea71f553bd71d8096243840c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '412985e9285373b25f027760d7d1e747e3a457f1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'be7792176c0d9c18a1bf8062f94ad4e3fc1bb817', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '50ee933e85de9875955b4129c5331e46a412b8c4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd40b7dba35542ebafea9991ff77252de1e8a77ee', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '52e4d6ff5757d98fa10a74cbbcbf84a3f19d0ce6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8bee297d02152682642a6de6ec782bda12514d4e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6c030313f5881f94fd08912a03787dac38bb73e1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9748310987ac446c44c1816e716adc5fc044ecfb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cfa50bcb465a3abdba1cd2978b385ef1f4abb9ab', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ea7215016eb5bc5ece1b6c78f9b59ad7031f99d3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ef8f7862c83fea0782eb931fe0e716a70ca07d42', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '397c9a6a2dd5d55ead3427b78ecbb3d4769c05f5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9bdbf6096a86d884e7a33f4c34fb918fcae97997', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b8f4065436458ea090a3a7844877d840ffcafbbf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b992cc94f3f0667560afcd18d567c0d3fe590e14', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c0e97e66c57dd437637a409edca837a4788833fa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd28392c3ff73a085ccfb6e2daf2cedc550ff61f1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '156b0f6c03d8d3bad83506f5ef6bcfbace347445', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e1fb0443e886ed06a657646568249c3d5aa9f8a2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'af377beb3276590178b490dc8b65e52ccb8aa16c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '49691a39732149b240bcde7039f190f003108945', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '95631a330f2801a68475f9d113a1aa053f2d0f87', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd64db7563cbade25ba7dcff0dba597c75a8b90a0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '144b6dc0a35c56427b288ea2696f4f9b5d538461', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7bd6ea8b3d58eb735987b2a60cc5abdf829f3a09', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7d29c42f32e97a99a70a782b6c4fbc0451ffdbae', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4419259adcb53a4ea41a573c240b14daddaffb2e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '16a56e236dbeffaabc3913149cd0192efe085710', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '538abf005db9a679fe295d873780ef31aeeae24b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '311f7a1423ae817910bd37a64afcbd6d48a4010a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '096cbc584c020552218c3db3bb0a7483e39ecc7d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b83d6e3efa5ce94240da38f9c735b058527976d3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ba87ef635358c48b375c0730bc112fbed39f6bfc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cb2490671578fb604683e0aecba2f05acaa02ae0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6464da3ecbc4c3f42fbefc50b717d3883907d6ca', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2ca1f72026fd7b83f85d9edfe00b402ed08ab516', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Luis Morales-Navarro,16418450,,User,,34,,25,39
454784870,Merge Accessibility Add-On into p5.js,"This PR merges the text output and table output functionalities of [p5.accessibility](https://github.com/processing/p5.accessibility) into p5.js by creating two functions:

-`textOutput()`
`textOutput()` creates a screenreader accessible output that describes the shapes present on the canvas. The general description of the canvas includes canvas size, canvas color, and number of basic shapes in the canvas example: 'Your output is a, 400 by 400 pixels, lavender blue canvas containing the following 4 shapes:'). This description is followed by a list of shapes where the color, position, and area of each shape are described (example: ""orange ellipse at top left covering 1% of the canvas""). Each element can be selected to get more details. A table of elements is also provided. In this table, shape, color, location, coordinates and area are described (example: ""orange ellipse location=top left area=2"").

-`gridOutput()` 
`gridOutput()`, formerly called table output, lays out the content of the canvas in the form of a grid (html table) based on the spatial location of each shape. A brief description of the canvas is available before the table output. This description includes: color of the background, size of the canvas, number of objects, and object types (example: ""lavender blue canvas is 200 by 200 and contains 4 objects - 3 ellipses 1 rectangle""). The grid describes the content spatially, each element is placed on a cell of the table depending on its position. Within each cell an element the color and type of shape of that element are available (example: ""orange ellipse""). These descriptions can be selected individually to get more details. A list of elements where shape, color, location, and area are described (example: ""orange ellipse location=top left area=1%"") is also available.

#### PR Checklist
<!--
  To check any option, replace the ""[ ]"" with a ""[x]"". Be sure to check out how it looks in the Preview tab! Feel free to remove any portion of the template that is not relevant for your issue.
-->

- [x] `npm run lint` passes
- [x] [Inline documentation] is included / updated
- [x] [Unit tests] are included / updated

[paging @lmccart 4 the ðŸ‘€  ]",True,4703,https://api.github.com/repos/processing/p5.js/pulls/4703,https://github.com/processing/p5.js/pull/4703,closed,2339,319,22,74,6,58,2,1,"[{'name': 'Feature Request'}, {'name': 'Area:Accessibility'}]",2020-07-21 22:46:39+00:00,2020-08-26 16:43:08+00:00,3088589.0,"35 days, 17:56:29","[{'comment_id': 464191896, 'comment_body': 'we generally try to avoid throwing errors unless a silent failure would be likely to cause confusion. in this case, it seems like a do nothing response to calling before canvas is created would be fine.\r\n\r\non a different point, a default canvas is created as soon at the beginning of setup, so is there actually a scenario where this error case could happen? or could the check be removed completely?', 'comment_created': datetime.datetime(2020, 8, 3, 4, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464192121, 'comment_body': 'same questions as above here', 'comment_created': datetime.datetime(2020, 8, 3, 4, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464192325, 'comment_body': 'this could be simplified to `if (this._pInst._addAccsOutput()) {` throughout', 'comment_created': datetime.datetime(2020, 8, 3, 4, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464192500, 'comment_body': 'this could be simplified to:\r\n```js\r\np5.prototype._addAccsOutput = function() {\r\n  return (txtOut || grOut);\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 8, 3, 4, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464192696, 'comment_body': 'this could be simplified to:\r\n```js\r\nif (!document.getElementById(cIdT)) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 3, 4, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464192797, 'comment_body': '`else if`', 'comment_created': datetime.datetime(2020, 8, 3, 4, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464193039, 'comment_body': 'each `document.getElementById(cIdT)` call requires another document search. so it would improve performance to save this element in a variable and then use that variable name below instead of doing another document search.', 'comment_created': datetime.datetime(2020, 8, 3, 4, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464193153, 'comment_body': 'can simplify to:\r\n`if (textOut) {`', 'comment_created': datetime.datetime(2020, 8, 3, 4, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464193174, 'comment_body': '`} else if (grOut) {`', 'comment_created': datetime.datetime(2020, 8, 3, 4, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464193501, 'comment_body': 'rather than saving in a variable and returning the variable, you can just replace `const lineLength =` with `return`', 'comment_created': datetime.datetime(2020, 8, 3, 4, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464193715, 'comment_body': '`if (!ingredients[f]) {`', 'comment_created': datetime.datetime(2020, 8, 3, 4, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464193982, 'comment_body': 'what is the `Math.round()` needed for?', 'comment_created': datetime.datetime(2020, 8, 3, 4, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464194134, 'comment_body': 'remove this line, and add `let` before the two lines below', 'comment_created': datetime.datetime(2020, 8, 3, 4, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464194948, 'comment_body': 'seems a little counterintuitive to increment `el` at the start of the loop, meaning the first id starts with 1 instead of 0, which differs from code logic of counting starting at 0. but I might be missing something here?', 'comment_created': datetime.datetime(2020, 8, 3, 5, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464195452, 'comment_body': 'maybe this should be `accsCnvCongig`?\r\nalso might make the code more readable to spell out canvas (ie `accsCanvasConfig`, `canvasConfig`)', 'comment_created': datetime.datetime(2020, 8, 3, 5, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464195809, 'comment_body': ""I wonder if it's more performant to store key DOM elements internally rather than needing to use `getElementById` lookups for each update?"", 'comment_created': datetime.datetime(2020, 8, 3, 5, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464196108, 'comment_body': ""if this is only used internally in this file, it doesn't need to be attached to the p5 prototype"", 'comment_created': datetime.datetime(2020, 8, 3, 5, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464196362, 'comment_body': 'to make this more readable and align with the naming of other functions (ie `_updateGridOutput`), I would suggest writing out `Grid`', 'comment_created': datetime.datetime(2020, 8, 3, 5, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464196493, 'comment_body': 'similar here, to make this more readable, you could write out `_buildGridShapeDetails`', 'comment_created': datetime.datetime(2020, 8, 3, 5, 7, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464196739, 'comment_body': 'consider `_getLineLength` for readability.\r\nbut, does the existing `[dist](https://p5js.org/reference/#/p5/dist)` function work for this?', 'comment_created': datetime.datetime(2020, 8, 3, 5, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464557819, 'comment_body': ""thinking of Lauren's comment about the developer docs, it's probably worth a note there (with a short note here) about where these names come from, and whether or not someone can add colors."", 'comment_created': datetime.datetime(2020, 8, 3, 17, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 464564627, 'comment_body': ""It looks like ES6 has some support for [template strings](https://developers.google.com/web/updates/2015/01/ES6-Template-Strings), which would probably make this kind of block easier to read. I can't remember if we're only supporting ES6 compatible browsers at this time or if we're trying to preserve backwards compatibility. @lmccart is it ok to use ES6 features like this?"", 'comment_created': datetime.datetime(2020, 8, 3, 17, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 464566001, 'comment_body': 'seeing your comment here. updating at the end makes sense (otherwise will the reader be notified of changes multiple times?)', 'comment_created': datetime.datetime(2020, 8, 3, 17, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 464570358, 'comment_body': ""yes we can use ES6! right now it compiles down to ES5 to support all modern browsers, but it's good to write in ES6 so we are future ready"", 'comment_created': datetime.datetime(2020, 8, 3, 17, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lmccart', 'type': 'User'}, {'comment_id': 464646873, 'comment_body': 'rad! thank you!', 'comment_created': datetime.datetime(2020, 8, 3, 20, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 468266423, 'comment_body': 'the linter might force you to linebreak here. when I was debugging last week I think that the linter added some extra whitespace to string literals that messed things up a bitâ€”sharing in case this is helpful info!', 'comment_created': datetime.datetime(2020, 8, 11, 0, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 468267237, 'comment_body': 'if this is same as above maybe it can be a variable? before the if/else', 'comment_created': datetime.datetime(2020, 8, 11, 1, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 468267556, 'comment_body': 'yeah! this is so much more legible!', 'comment_created': datetime.datetime(2020, 8, 11, 1, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 468268042, 'comment_body': 'thinking about this more since we last discussed, this requires:\r\n- updating items that are a match\r\n- removing items that are no longer present\r\n- adding new items', 'comment_created': datetime.datetime(2020, 8, 11, 1, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 468268402, 'comment_body': 'gridOutput()?', 'comment_created': datetime.datetime(2020, 8, 11, 1, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 468268642, 'comment_body': 'extra quote here, between container & role?', 'comment_created': datetime.datetime(2020, 8, 11, 1, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 469582035, 'comment_body': 'Tried breaking them but then linter would put them back together!', 'comment_created': datetime.datetime(2020, 8, 12, 22, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 473218047, 'comment_body': 'Just added this to the contributor docs!', 'comment_created': datetime.datetime(2020, 8, 19, 17, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 474057565, 'comment_body': '""formerly"" - I think this is a note for people who would have used the p5.accessibility library? suggest removing this or explaining a little clearer.', 'comment_created': datetime.datetime(2020, 8, 20, 15, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 474061281, 'comment_body': 'worth a note here that this is only called once per draw/setup so as not to overwhelm the screen reader', 'comment_created': datetime.datetime(2020, 8, 20, 15, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 474062318, 'comment_body': 'remove underscore in `_describeElement()`', 'comment_created': datetime.datetime(2020, 8, 20, 15, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 474062592, 'comment_body': 'here too (remove underscore)', 'comment_created': datetime.datetime(2020, 8, 20, 15, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 474064054, 'comment_body': 'suggest a longer, more descriptive variable name here', 'comment_created': datetime.datetime(2020, 8, 20, 15, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 474066388, 'comment_body': ""seeing this queries makes me wonder if we gain a little performance by having separate variables for each, like:\r\n\r\nthis.fallbackDescElement\r\nthis.labelDescElement\r\n\r\netc. so the check can just be if the appropriate element exists, and if it doesn't, it gets injected into the DOM. hope that makes sense."", 'comment_created': datetime.datetime(2020, 8, 20, 15, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 474068776, 'comment_body': 'does this mean that we always expect the element to be the first item appended to the body? what if the user has specified a different/custom place for the canvas?', 'comment_created': datetime.datetime(2020, 8, 20, 15, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 474853084, 'comment_body': ""Now I'm getting the parentNode of the canvas:\r\n`this.dummyDOM = document.getElementById(cnvId).parentNode;`"", 'comment_created': datetime.datetime(2020, 8, 21, 18, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 475758714, 'comment_body': ""a short description of what's happening here to process hue, saturation and brightness here would be helpful!"", 'comment_created': datetime.datetime(2020, 8, 24, 16, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 475765092, 'comment_body': 'why does this overwrite the `this.dummyDOM` assignment above on line 83?', 'comment_created': datetime.datetime(2020, 8, 24, 17, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 475765761, 'comment_body': 'same question here as above -- why does this overwrite setting `this.dummyDOM` on line 83?', 'comment_created': datetime.datetime(2020, 8, 24, 17, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 475767312, 'comment_body': 'overwrites assignment of `this.dummyDOM` on line 182?', 'comment_created': datetime.datetime(2020, 8, 24, 17, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 475767579, 'comment_body': 'this is looking much clearer to me â€” nice work!', 'comment_created': datetime.datetime(2020, 8, 24, 17, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 475767740, 'comment_body': 'overwrites assignment of `this.dummyDOM` on line 182?', 'comment_created': datetime.datetime(2020, 8, 24, 17, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 475776171, 'comment_body': 'before this inner if/else, maybe (on line 258):\r\n\r\n``let descContainer = `<div id=""${cnvId + descContainer}"" role=""region"" aria-label=""Canvas Description""><p id=""${cnvId + fallbackDescId}""></p></div>`; ``\r\n\r\nthen use variable in if/else (unless I missed something when I read this, it looks like the HTML is the same, just how it gets inserted changes in the condition)', 'comment_created': datetime.datetime(2020, 8, 24, 17, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 475781216, 'comment_body': ""is the if statement here necessary? looks like it gets inserted in lines 257-273. there is also not an else clause that returns something if the function was not successful (and it seems other places in the code assume success).\r\n\r\nI had to look this up because I wasn't sure how Javascript handles this, but I think it's safe not to pass dummyDOM back. It looks like the dot operator will change the object and its changes will hold outside of the function, if I'm understanding this stack overflow post correctly: https://stackoverflow.com/questions/518000/is-javascript-a-pass-by-reference-or-pass-by-value-language"", 'comment_created': datetime.datetime(2020, 8, 24, 17, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 475782223, 'comment_body': 'similar questions/comments here as for _describeFallbackHTML with this return clause and the insertion of the HTML earlier on', 'comment_created': datetime.datetime(2020, 8, 24, 17, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 475783090, 'comment_body': 'similar questions/comments here as for _describeFallbackHTML with this return clause and the insertion of the HTML earlier on', 'comment_created': datetime.datetime(2020, 8, 24, 17, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 475784335, 'comment_body': 'similar questions/comments here as for _describeFallbackHTML with this return clause and the insertion of the HTML earlier on', 'comment_created': datetime.datetime(2020, 8, 24, 17, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 476862660, 'comment_body': 'the write-up is great :)', 'comment_created': datetime.datetime(2020, 8, 25, 23, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 476865024, 'comment_body': 'should be describeElement(), without underscore', 'comment_created': datetime.datetime(2020, 8, 25, 23, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 476970385, 'comment_body': 'these conditional comments are so helpful, nice work!', 'comment_created': datetime.datetime(2020, 8, 26, 1, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 476975203, 'comment_body': ""at first, I didn't read this as going with the `else` below because the indentation matched above"", 'comment_created': datetime.datetime(2020, 8, 26, 2, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kjhollen', 'type': 'User'}, {'comment_id': 476999691, 'comment_body': 'thanks for catching this!', 'comment_created': datetime.datetime(2020, 8, 26, 2, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 477000453, 'comment_body': ""umm that's a good point, that's the way lint makes it look. I'll move the comment after the else!"", 'comment_created': datetime.datetime(2020, 8, 26, 2, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}]","[{'commit_sha': 'd46134a3fb86108085b78ed362ec8cc5ba26dd7d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8be1f90f525e6d20214fc0846d6d81d49cc09c44', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3a379af9a425fe8911db6629ee0569b83de36f71', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '39ebabcb930c4dc60b07ef809f31211ba1d9b1a7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e29343ceb16ca763b5aac667d8c748a633e82c9d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1f89f515267cf0deb0cb45ce689a421ccb0dffb6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '29f16d0e889eb7f867f63e7a9c7dfc2b88e8a24e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '938c0a443b397bc822f58ce8baf60553ce372eee', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c7358799aae32e25c24e976ad4ef05e5908ff27f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9d87a30ff14f883825848130769b8bde642515d5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bcf5aa62e573a7d01e40d01d5744f4ea54ca4ca6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '72c8d24d681283e1c9bb51a9da4bbcf33e950280', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3489ea489c254f453bcc51dd847027d55b1b0fe6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dc16e544794c1478aa71a9df0cac8c3552093844', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9b6fc9ba567e713a0a8b2b8189920335ca49a43c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '89a54a700b41e8de28e50c78115f5cb8fff31de0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ca2b0993242145d560d0875300f0b98f5955131c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c833d5efc9ba484c4396d02b4e93dcad00169399', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5686c54d390bd04a057920170fe206ebd8b355e4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5c91d36297e14ef802a3f782e8bae1fae44922f3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3804540478bdc196e3672fceb381ee82b31f5792', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2159ac2088b91e1c875b6099f8cbb1e41ab84f1e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b746af819e70ce8e3523f57c9f4ad8ce3f431eb7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '958217714edefe476101561e240e8823a26603cb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '622c8f09d1eec2c5eae4a80d5d0a5c764a332755', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '66da3c6c7d2cc723c8a5941e28ba15f58928b9fb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ce8570fe743900fd061dc079df54f07b35d79c54', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4336fb2a3e7131ee5d0e55a2ef7d6dec540f7022', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '252503cad8d982543e857ffa01172a88477f8442', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7dc0938aa6c1d1850b5350b7ac0b7d709545117a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '256933ff7478fe9f6fff09b71af2b91dd40eba09', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0245d68ff8712c1860250b067c7be5a6d9967b63', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c400ac706e54b8458223d3a3c62a3e1765d3361a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0a68f6e372afe98b636d42fca8584dcab555d82f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2e9de5dfaf6e2ad180dc002897746372920afd79', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '033b1c72fcfc8deb85b70185b0bc9d9c957db1cb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ef8df67d1197ab2b87e820db112f6cc40d67ca3a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '31b423f9ca9b3540781496dbe12e94bbd52705b6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '714b5a0bb7bad0474b4054b8470843c10ad18f08', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f5a6fcdbb5118352c4193af5ee8423577fe424b7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c7dca37d7050d8b222548520a972609ba5fb22e5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '387de01e3ea56668a3af567829c12fc11b92bb6a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '843511f8645520650f0e4aea602f3b3dc36d994e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3d824f53a462ebd8220fd0e520fa36debc767a7a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7a0243bd6e5961106955de83d351ded991ed580a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '10a0e8025ad01bd6e7e578764e6c153076d9307e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ae4cb0924b4928dacd3774ce66a70f1c4e450a3a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3b872f8e607f16db493e4a9282932c22613a6a8d', 'committer_username': 'lm-n', 'committer_name': 'Luis Morales-Navarro', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 23, 20, 23, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bf2972dad35afc6a47b4c058fe1e655207f710e', 'committer_username': 'lm-n', 'committer_name': 'Luis Morales-Navarro', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 23, 20, 23, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fd9744ba3c10430ed31a861d4818910d6183449', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f605391b6d37659bf9c941f94ba0f40b7fe14e33', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a8d69dff8b34207043c3c6ddc55efc5fdb860ab9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f8f074f2b595832f17948248a855e47504106ec2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ba951e8d355029755415eb57a9d80317fa991b63', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9ad5e0bfd192b829ec9bac17a4306bf0f3c0eff2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2aef0151d009bbbb1d1c358210976a03b1f1e10b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c78f0f75b452e7ad674d51b32ab5ac039061a817', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6bae71c5a475f2c6fa6daf32064c7a1dfb684686', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '08854785c81991235b01762d12be3bfc14ed68d8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dd94fb001feff20101b1ed42272b289435267ded', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '99401c28fc04cd663195baa036284225118b9339', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0eed3bc6536145ec07e580e3eda993e203465e4b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1bcbf7a1b5b5bbdbd069d6944823b493da27e153', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f9096282eed92a27131660f5c2703e099060fab7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'eb56f3aeef854aabf177e12edf824e505edd0642', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '291691aa3f8010953ed3bcd108c4766741b629cd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '51f7dba52fbdb2cc1f1d1d9449b56cf850a47ba7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '86a54fc6d8ad331fa0b9a368eedc069a3f6e446c', 'committer_username': 'lm-n', 'committer_name': 'Luis Morales-Navarro', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 23, 20, 23, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f67786f6eb7750a0db28b5257b44b49a7ef63c77', 'committer_username': 'lm-n', 'committer_name': 'Luis Morales-Navarro', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 23, 20, 23, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '172773414885b4a303ec213b9c9e0bcfd031e61a', 'committer_username': 'lm-n', 'committer_name': 'Luis Morales-Navarro', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 23, 20, 23, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9d9ab0940cf94d7bcb737a2620fe2c5bab9873e', 'committer_username': 'lm-n', 'committer_name': 'Luis Morales-Navarro', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 23, 20, 23, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e6d83a0e7f85877a2959f101f29bec10af516d1', 'committer_username': 'lm-n', 'committer_name': 'Luis Morales-Navarro', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 23, 20, 23, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5158d3f2ee48703d77cd0fb5249ca0396f4e4b00', 'committer_username': 'lm-n', 'committer_name': 'Luis Morales-Navarro', 'committer_email': None, 'commit_date': datetime.datetime(2015, 12, 23, 20, 23, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9e7debe4d2470cd402b2365d66c22bd349647ae', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Luis Morales-Navarro,16418450,,User,,34,,25,39

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
8424040,p5.js,processing/p5.js,JavaScript,3255,21319,498,753,13058,313,7,40,"[{'id': 678413148, 'number': 5336, 'closed': datetime.datetime(2021, 6, 27, 22, 29, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 20, 58, 25, tzinfo=datetime.timezone.utc), 'time_taken': 91886.0, 'time_delta': '1 day, 1:31:26', 'additions': 6, 'deletions': 8, 'state': 'closed'}, {'id': 678409243, 'number': 5335, 'closed': datetime.datetime(2021, 6, 26, 21, 6, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 20, 22, 18, tzinfo=datetime.timezone.utc), 'time_taken': 2648.0, 'time_delta': '0:44:08', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 602730955, 'number': 5140, 'closed': datetime.datetime(2022, 1, 30, 17, 15, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 29, 12, 44, 14, tzinfo=datetime.timezone.utc), 'time_taken': 26541068.0, 'time_delta': '307 days, 4:31:08', 'additions': 146, 'deletions': 89, 'state': 'closed'}, {'id': 602299582, 'number': 5135, 'closed': datetime.datetime(2021, 3, 28, 20, 21, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 28, 19, 55, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1597.0, 'time_delta': '0:26:37', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 454784870, 'number': 4703, 'closed': datetime.datetime(2020, 8, 26, 16, 43, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 22, 46, 39, tzinfo=datetime.timezone.utc), 'time_taken': 3088589.0, 'time_delta': '35 days, 17:56:29', 'additions': 2339, 'deletions': 319, 'state': 'closed'}, {'id': 438728733, 'number': 4654, 'closed': datetime.datetime(2020, 8, 16, 0, 15, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 17, 54, 1, tzinfo=datetime.timezone.utc), 'time_taken': 4602097.0, 'time_delta': '53 days, 6:21:37', 'additions': 634, 'deletions': 0, 'state': 'closed'}, {'id': 436801206, 'number': 4644, 'closed': datetime.datetime(2020, 6, 25, 20, 14, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 22, 55, 18, tzinfo=datetime.timezone.utc), 'time_taken': 595172.0, 'time_delta': '6 days, 21:19:32', 'additions': 9, 'deletions': 1, 'state': 'closed'}]"
