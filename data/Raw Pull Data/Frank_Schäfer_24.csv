pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
404593247,[WIP] added the inplace version of #182,"These are the timings and the slope of the convergence plots that I get from a running srk_weak_final.jl:
665.292848 seconds (7.48 G allocations: 738.382 GiB, 42.10% gc time)
2.4826563100491574
655.745028 seconds (8.20 G allocations: 749.978 GiB, 34.87% gc time)
2.9407305307490668
606.728451 seconds (4.94 G allocations: 389.939 GiB, 20.85% gc time)
2.2916109738974826
210.693557 seconds (1.48 G allocations: 88.670 GiB, 8.64% gc time)
2.175404732290122
107.502602 seconds (789.22 M allocations: 76.930 GiB, 13.38% gc time)
2.3828798450826385

As the slope is >2, I removed for the moment the abs() in the test.. I am still playing around with the dts to get it closer to 2.. Any ideas how to do this better are highly appreciated.. the main problem is that the run time is quite long when I put the number of trajectories > 1e7 ..

[DRI1-CPU-final-5.0e6.pdf](https://github.com/SciML/StochasticDiffEq.jl/files/4489079/DRI1-CPU-final-5.0e6.pdf)
[RI1-CPU-final-5.0e6.pdf](https://github.com/SciML/StochasticDiffEq.jl/files/4489080/RI1-CPU-final-5.0e6.pdf)
[D-DRI1-CPU-final-1.0e6.pdf](https://github.com/SciML/StochasticDiffEq.jl/files/4489082/D-DRI1-CPU-final-1.0e6.pdf)
[ND-DRI1-CPU-final-1.0e6.pdf](https://github.com/SciML/StochasticDiffEq.jl/files/4489083/ND-DRI1-CPU-final-1.0e6.pdf)
[Scalar-DRI1-CPU-final-5.0e6.pdf](https://github.com/SciML/StochasticDiffEq.jl/files/4489084/Scalar-DRI1-CPU-final-5.0e6.pdf)

For the inplace version, the part associated with 
if typeof(W.dW) <: Union{SArray,Number} 
is missing. I will add that next :)",True,285,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/285,https://github.com/SciML/StochasticDiffEq.jl/pull/285,closed,374,22,4,1,0,0,0,0,[],2020-04-16 18:29:24+00:00,2020-04-24 16:12:38+00:00,682994.0,"7 days, 21:43:14",[],"[{'commit_sha': '10e1113386eeadce4175c15650d48e872b4d931e', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
416141194,iip for RI1 with tests,"I added `alg_cache()` and further tests such that now also `RI1()` works for the inplace problem.
(I realized that` @test m-2 < 0.3 `from before didn't make sense because this would be true also for m < 1.7 but I wanted it to be true for m> 2.3 .. so I added the minus signs.)",False,289,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/289,https://github.com/SciML/StochasticDiffEq.jl/pull/289,closed,220,70,5,7,4,0,0,0,[],2020-05-11 14:28:14+00:00,2020-05-21 22:01:07+00:00,891173.0,"10 days, 7:32:53",[],"[{'commit_sha': 'fca30a822e0e67610fa9a924e5c7b389897d1d7c', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbec6858ac1109c56b996d3fe0fd0c40695b3d36', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faf486365880da94c2dd47190bb73c52b4b59c20', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5601dfd2adca5fe3ccb15a52e1ebf15b4011de1b', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd59ac6e894366dfaa24a7b08edb431f3b114f85c', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '982dbc0e67fcf6df2260c3eb00f1ace64e308c8e', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5874f6c791b3cc8825bcbc83fbe7c825ac0c7d26', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
419378883,tstop checks for reverse time propagation,"Fixes an error which I got for SDE adjoints where propagation from (tend, tstart) with tend>tstart is used, see https://github.com/SciML/DiffEqSensitivity.jl/pull/242.",True,305,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/305,https://github.com/SciML/StochasticDiffEq.jl/pull/305,closed,18,1,2,1,1,0,0,0,[],2020-05-18 09:35:37+00:00,2020-05-18 14:54:11+00:00,19114.0,5:18:34,[],"[{'commit_sha': '21d1d5d5cb44ffd8c9b3b3833d82963c1decca5b', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
419974054,[WIP] Euler Heun fixes,"Euler Heun seems to have a too good convergence. It has a 1.0 strong order instead of 0.5.
But this (order 1.0 check) was also already used in: https://github.com/SciML/StochasticDiffEq.jl/blob/cec5fc965b938164cc3eaf71efbe1f4d2b961807/test/stratonovich_convergence_tests.jl#L9 

`RKMil_General()` has order 1.0 on the first problem but only order 0.5 on the second one.

```
sim3 = test_convergence(dts,prob,RKMil_General(),trajectories=Int(1e2))
@test abs(sim3.ùí™est[:final] - 1) < 0.2
```

The two broken tests for EM() and EulerHeun() return NaN. This traces back to all solutions staying constant at u0 in the convergence_simulation. Therefore, the associated errors are zero which ultimately yields the NaN.",True,317,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/317,https://github.com/SciML/StochasticDiffEq.jl/pull/317,closed,28,12,1,3,0,0,0,0,[],2020-05-19 08:52:38+00:00,2020-05-19 19:33:03+00:00,38425.0,10:40:25,[],"[{'commit_sha': 'e832b0c3a2c0283f6e278e1e7b159d64677e2720', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6deb2e631d2a1940317c4f554a91cbbcdecd81cf', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67925224ed1fe35e1f4d517ac19366a4bc25eba6', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
432032357,refine DRI1 and RI1 tests,"I adjusted the number of trajectories, included a `prob_func` for better reproducibility, and replaced the list comprehensions by a loop.",True,327,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/327,https://github.com/SciML/StochasticDiffEq.jl/pull/327,closed,88,102,2,1,0,0,0,0,[],2020-06-09 19:59:00+00:00,2020-06-09 20:09:17+00:00,617.0,0:10:17,[],"[{'commit_sha': '265604d248ffaa5ea149d5e7c467daeddf4708cf', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
432451951,"RI3, RI5, RI6, and RDI[2-4]WM","This adds the remaining SRK methods due to Roessler (in the Ito sense) with three stages from issue:
https://github.com/SciML/StochasticDiffEq.jl/issues/182

RI6, RDI2WM have slight problems for the diagonal noise test -- I had to relax the error checks a bit. They mainly differ from the other approaches in the deterministic order. While RI3, RI5, RDI3WM, and RDI4WM all have a third order *deterministic* convergence, RI6 + RDI2WM are of second order. ",True,328,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/328,https://github.com/SciML/StochasticDiffEq.jl/pull/328,closed,1148,9,10,4,0,0,0,0,[],2020-06-10 13:22:03+00:00,2020-06-10 20:03:49+00:00,24106.0,6:41:46,[],"[{'commit_sha': '8ff6c930503ac03283b76d857909285f822473f8', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5777d2d93567911efb13090a8a4f2db59fc00c0d', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '057f57139c525debb50225417863148e6aef93a7', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82aaceb2722464909fc076ac3452a4aecb755201', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
432683664,RDI1WM,"This PR adds the missing `RDI1WM` method from  #182 . It has two stages and first order weak convergence. Since actually many coefficients are zero, it has its own `perform_step!()` function to avoid overhead.",True,329,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/329,https://github.com/SciML/StochasticDiffEq.jl/pull/329,closed,409,56,9,1,0,0,0,0,[],2020-06-10 20:30:24+00:00,2020-06-11 07:46:03+00:00,40539.0,11:15:39,[],"[{'commit_sha': '283b398a60cfce5f54ff2122b5232c6ebd52692c', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
435809455,Adaptive srk,Continues PR #331 from another branch that is not from my fork. Adaptive scheme for stochastic Runge-Kutta methods due to Roessler #182 .,True,332,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/332,https://github.com/SciML/StochasticDiffEq.jl/pull/332,closed,952,323,18,40,30,1,0,0,[],2020-06-17 12:11:13+00:00,2020-07-13 05:30:42+00:00,2222369.0,"25 days, 17:19:29","[{'comment_id': 442257496, 'comment_body': '```suggestion\r\n  if !is_APPVEYOR && GROUP == ""WeakAdaptive""\r\n```\r\n\r\n? Also, need to add the Gitlab group', 'comment_created': datetime.datetime(2020, 6, 18, 14, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '045bb2c6f5877561bcba43e02f873efd53f6e143', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3350aed7371d0b9241cd333eed231f26cf7fbe1', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8af9f4565187b7a3431b95d83d219bb0eb04000f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '876ce7003873bb28019db58425863f038b57f98c', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55e3f3c6273f00df78fbe537f8a1b6e03f2de6a7', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29074338ca6a20ad04acf958fdd9982df1afec8c', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6226f7263372e172d4ea530f9e778f2a63e23549', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbe13fa2b3ad3f0453c2311252e357b05c53f100', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db9031115015df93d80acf075f4337022dec2cb4', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad6fea00bde17cc14bf44d03ced917a0fe95a89e', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0310e0a0760fb0bc0e341774ffec542fd467e408', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '266807b35dbdbde8576141cdfd27cb7b0a9dd302', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33129d8e36c7277c1e9e02f02d523c59c472b44d', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9237b8cdad98597ea1b182744dda148e2702655', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a78aa8374024ea3475b0d4c28edd321bb87d446', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c1865fe3ac2b484356c70c938cffa859d527035', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf4bfdc1d635a068509340d89bcf1ab889ea841e', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30e17ba847b301796f99ebe2e3ed77cbc5742532', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3603fa2d1704e97979f353ccd6633661d42c5e50', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7da5092365c3e3e768d7d74be264c9a150f3a14', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98484a476fbe9a92c6d004dced780d94c8dd5a31', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '500f77a22fb1d08d1907d3ed566257a1bc320724', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb9b1fe1f0093d408af5f454ccfe4760911943cd', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b739762275047d45c1eedc591c9a1a36b21bad0', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '421395d9f0a15f8c9c0a3945e26b725e8f3e0af9', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e6cdbab01da87abfd3796c0e1c1b0edf0519634', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad217536ccf43fbe60bb1a906a3eaa04c8c5381d', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72ad0b7605f4308571b3ccdb61bc1f64a1d3eba1', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2480cd5d423ac5ac7fe7e0c7ab9912d50047cc5', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efc6dca17d22bbe48d68d719d973533fdbd1585d', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bfec1adbb0870f3f6a2e9103b0dfd25b46da5a1', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0209ce24d29a326ea26bed352a02b87d9b28eca1', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5aaf6cb41dc217f5755606c5cfe0aff812a86fe', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41161a3331ecf03335f7c602f6858568c54382b5', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0def60e8a78fba944622458f4540ed6935ade5ec', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd21ce94e2ecad4cce7ecb427155fa2cb67d84b53', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a1af2403554fcb06403e767506fcbaa0132aad1', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fdb542dbc74aed3ea35f114fc17e0755cc48372', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2de9938eb5b6d17d5736eda63044f2b52ae53a8', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61949d3ae073582ba1fae723dd811d38c8a3ea44', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
436123583,Stratonovich SRK methods due to Roessler,"Adds RS1 and RS2 [1]  for the weak approximation in the Stratonovich sense from issue #182 .
Tests for  diagonal and non-commuting noise are taken from [1]. 

[[1]Roessler's paper]( https://link.springer.com/content/pdf/10.1007/s10543-007-0130-3.pdf)",True,333,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/333,https://github.com/SciML/StochasticDiffEq.jl/pull/333,closed,1178,4,11,9,3,2,0,0,[],2020-06-17 22:14:25+00:00,2020-06-18 11:56:26+00:00,49321.0,13:42:01,"[{'comment_id': 441878886, 'comment_body': 'whatta line', 'comment_created': datetime.datetime(2020, 6, 17, 23, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 442011130, 'comment_body': 'I added some line breaks üëç ', 'comment_created': datetime.datetime(2020, 6, 18, 7, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}]","[{'commit_sha': '03c2028bc58ba40adb4753812b2db6cd7ddaa8a2', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8993a5396b910db9538282264dfd57335150a291', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec14722c19bfc25e7e2049aa900676c28f4cc58a', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25141c6256fbd84eed8ad78bca6f830baa047135', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc49c6cb9dfaf494c5d236a5b36407f4285542fd', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c27daf89f4e9049b9a44ccd1640f2b9e5c9b772e', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a68489edff80fb2f4069b9d244621de4884d557', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcb55de618884c6b9bda05827a3d577624884076', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0576dd5c7632e669c217014e7f2797e80ccf5e82', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
438832964,Pl1WM scheme,"This PR adds the PL1WM method due to Platen from issue #182  for the general noise case, i.e., Eq.~(15.1.3).",True,334,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/334,https://github.com/SciML/StochasticDiffEq.jl/pull/334,closed,700,5,10,10,3,0,0,0,[],2020-06-23 21:31:31+00:00,2020-06-24 21:17:00+00:00,85529.0,23:45:29,[],"[{'commit_sha': 'f4cc1c264a6159ea01a8b3718b673badbd80599c', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a03b17f24626c8bde4ff50e3ac1d26bbee7ce917', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0c4eb20236b22eaa02e02527c4b984d1b44516b', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4663b0f5db56fedc63cf563fba861676b8bca97d', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89dd067cbbd672c217482296c301a412ea3363a9', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8ebf9c24c1df9371b4f671a31b6b1cd34a04f51', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3e35f72fffe441d4cacbb1d056fc3aef262ad7b', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ea7fde0e067a4bd962018076899f3603be233f2', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0d48a3cba65d6bc3bfb4520270eb39c896c5fc1', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '817b1023ebe788433ab1d777424503d929ccefcc', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
441080531,NON,"The scalar noise tests are passing for the inplace and out-of-place version of NON from issue #182 . 
Also ODE tests are passing (4th order, basically standard RK4).
I have checked that all coefficients in the paper satisfy the order conditions. 

The diagonal noise `perform_step`  actually does in one step what I expect it to do, i.e.,  for the SDE
```
using StochasticDiffEq
using Random
u‚ÇÄ = [0.1,0.1]
function f3!(du,u,p,t)
  du[1] = p[1]*u[1]
  du[2] = p[1]*u[2]
end
function g3!(du,u,p,t)
  du[1] = p[2]*u[1]
  du[2] = p[2]*u[1]
end
tspan = (0.0,1.0)
p = [299//200, 1//10]

prob = SDEProblem(f3!,g3!,u‚ÇÄ,tspan,p)
ensemble_prob = EnsembleProblem(prob;
        prob_func = prob_func
        )
sol = solve(ensemble_prob, NON(); dt=1., trajectories=numtraj, ensemblealg=EnsembleThreads())
# [0.469606, 0.409286]
```
So my expectation is that I misunderstand something in the stage values (Y^{j,l}) in the paper (or something else is odd..)

The convergence plot for diagonal noise is shown in the attached figure. The slope is ~ 0.8.  Other solvers in the Stratonovich sense such as `RS1` or `EulerHeun`  are passing the test. Therefore, the example should be ok. 

![NON_diagonal_noise](https://user-images.githubusercontent.com/42201748/85952924-e6eb2c80-b96c-11ea-8cde-6f9080b8bd44.png)
",True,337,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/337,https://github.com/SciML/StochasticDiffEq.jl/pull/337,closed,883,47,9,17,4,4,0,0,[],2020-06-28 16:28:05+00:00,2020-07-15 11:36:41+00:00,1451316.0,"16 days, 19:08:36","[{'comment_id': 446672513, 'comment_body': 'these tests should really be on the absolute value', 'comment_created': datetime.datetime(2020, 6, 28, 16, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 446681032, 'comment_body': ""Isn't norm the same as the absolute value for scalars/1d arrays https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/#LinearAlgebra.norm ?"", 'comment_created': datetime.datetime(2020, 6, 28, 18, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 446682384, 'comment_body': ""First though, is there a reason why this file doesn't use the standard convergence simulation? It's doing the same calculation. But specifically right here, this doesn't capture both directions, i.e. `abs(m-2) < 0.3`. We can probably finish up all of the weak methods first and then turn around and make this use the standard tools. It's not a big deal, but it does make maintenance easier down the road."", 'comment_created': datetime.datetime(2020, 6, 28, 18, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 446687429, 'comment_body': 'IIRC the problem was that much more memory was used in the standard tools (potentially because more than the weak final error was tested?) and then it always filled up my swap. \r\n\r\nYes  (by tweaking the used random seed or using more trajectories) we could use  `abs(m-2) < 0.3` ..  at the moment because of the smallest dt value, we sometimes get a slightly better convergence.', 'comment_created': datetime.datetime(2020, 6, 28, 19, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}]","[{'commit_sha': '8cd5af66eb213049fad585adf3226b4b48c4e100', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72dbead5baf1b97a60fe65f913249520b3a8f800', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '623e222d93956aed204f6e032692ca8fb75fa159', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '151470d621efb5294ea1df9de0e259e29c474ea2', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e82ef2e6e9fbf8a06d0193332dd9c21e0bbb5483', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3fd958c1cd6eca67a7f0be07842cd398fed2d57', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efd1d7f23c258f59a44b8032f4ea98152f21cdeb', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '992e280aced06a77535c7922c799d557eac1d5d5', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a233383d754cf5977cc7f1d043fc3502de272d2', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e0fee133903639aa645dc40a35c5e8da3ad42e4', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fe664bdc85d21c1bc350b9cc9f216dbc85264ff', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7faa93bda1f71e4570ba955e5b28a3dc7852bab2', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7424b04539fba1d2a0e4029b8b4497598a47e819', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62c92c5613225569064e089ed386c45bbd9e83b0', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5c49c1d861c88cf302c0deb3ee0e4b822234953', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62d200c8535ea7259a660ff7ba6adf5f72f78fb1', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc1a6647cef9589452f745421565fe4b6c128fa6', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
447653817,add citations for weak methods,.. from issue #182 + simplified EM scheme,True,338,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/338,https://github.com/SciML/StochasticDiffEq.jl/pull/338,closed,82,0,1,2,0,1,0,0,[],2020-07-10 21:34:59+00:00,2020-07-11 02:07:39+00:00,16360.0,4:32:40,"[{'comment_id': 453142236, 'comment_body': '```suggestion\r\n""""""\r\nKloeden, P.E., Platen, E., Numerical Solution of Stochastic Differential Equations.\r\nSpringer. Berlin Heidelberg (2011)\r\n""""""\r\nstruct PL1WM <: StochasticDiffEqAlgorithm end\r\n\r\n""""""\r\nKloeden, P.E., Platen, E., Numerical Solution of Stochastic Differential Equations.\r\nSpringer. Berlin Heidelberg (2011)\r\n""""""\r\nstruct PL1WMA <: StochasticDiffEqAlgorithm end\r\n```', 'comment_created': datetime.datetime(2020, 7, 11, 2, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '8d2c4afb124250d47cd121fd90021fe99bd7ba86', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a8922c82079cc1c4b6bf8eb6da7f8e1d406f91e', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
456227229,Stochastic improved and modified Euler methods," SIEA denotes Stochastic improved Euler, family A (for example) from https://epubs.siam.org/doi/pdf/10.1137/S1064827501387814 in issue #182 .

The only multi-dimensional Tableau is identical to `PL1WM`.
",True,342,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/342,https://github.com/SciML/StochasticDiffEq.jl/pull/342,closed,662,0,8,5,0,0,0,0,[],2020-07-24 11:09:37+00:00,2020-07-25 00:13:28+00:00,47031.0,13:03:51,[],"[{'commit_sha': '570c56cc0e43b8ce64a4e5249ae71033fda7a310', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47a789a6e675476f6972d3aa7054317de4531ba9', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7877b5131e2bea7b8022e53c1849558174c4d392', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9aee4ceb2aef30a1a47793ee775d0656dfe4b873', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2edf09ffca819179b9c407ebad237a7b6e05b02', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
457292058,Com,"This adds the `COM` scheme which is the commutative noise version of the NON scheme due to Komori (Refs are in issue #182 ).
A bit odd is that `COM` passes our non-commuting noise tests -- there is a related plot in their paper showing that one has to use  small values of dt to see a saturation. However, this would mean that we'd have to significantly increase the number of trajectories in the tests.

",True,343,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/343,https://github.com/SciML/StochasticDiffEq.jl/pull/343,closed,503,4,6,2,4,0,0,0,[],2020-07-27 17:10:24+00:00,2020-07-28 18:14:36+00:00,90252.0,"1 day, 1:04:12",[],"[{'commit_sha': 'cee462b010c4a4964320e257896afcf24e71a8fb', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bac334c6bc82e6e76aebad6f33d7653b80428b29', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
466361754,NON2,"This adds the remaining solver NON2 due to Komori from issue https://github.com/SciML/StochasticDiffEq.jl/issues/182.

The diagonal stages are identical to COM. However, NON2 has two random processes and for non-diagonal noise processes the stage values Y3^(k(j),j) and Y4^(k(j),j) need to be computed.",True,348,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/348,https://github.com/SciML/StochasticDiffEq.jl/pull/348,closed,776,92,10,2,0,0,0,0,[],2020-08-11 21:20:58+00:00,2020-08-11 22:18:14+00:00,3436.0,0:57:16,[],"[{'commit_sha': '69793f68a35b206542988d8c48022ca7a2da5472', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0728a456d817908f1ccbc74ac74506c26422ec9e', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
415756991,[WIP] static array tests,"I think that there is a problem with the static array tests.  ""ode"" instead of ""prob"" was used, so SVector didn't actually work yet.

Should this be fixed by modifying `calculate_step!(W::NoiseProcess,dt)` in` DiffEqNoiseProcess`?

Here is the stack trace:

```
sol = solve(prob, DRI1(), dt=1.e-2)
ERROR: setindex!(::SArray{Tuple{2},Float64,1,2}, value, ::Int) is not defined.
Stacktrace:
 [1] error(::String) at ./error.jl:33
 [2] setindex!(::SArray{Tuple{2},Float64,1,2}, ::Float64, ::Int64) at /Users/frank/.julia/packages/StaticArrays/mlIi1/src/indexing.jl:3
 [3] macro expansion at ./broadcast.jl:910 [inlined]
 [4] macro expansion at ./simdloop.jl:77 [inlined]
 [5] copyto! at ./broadcast.jl:909 [inlined]
 [6] copyto! at ./broadcast.jl:875 [inlined]
 [7] materialize! at ./broadcast.jl:823 [inlined]
 [8] wiener_randn! at /Users/frank/.julia/packages/DiffEqNoiseProcess/GWKRQ/src/wiener.jl:12 [inlined]
 [9] INPLACE_WHITE_NOISE_DIST(::SArray{Tuple{2},Float64,1,2}, ::DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,SArray{Tuple{2},Float64,1,2},SArray{Tuple{2},Float64,1,2},Array{SArray{Tuple{2},Float64,1,2},1},typeof(DiffEqNoiseProcess.INPLACE_WHITE_NOISE_DIST),typeof(DiffEqNoiseProcess.INPLACE_WHITE_NOISE_BRIDGE),true,DataStructures.Stack{Tuple{Float64,SArray{Tuple{2},Float64,1,2},SArray{Tuple{2},Float64,1,2}}},ResettableStacks.ResettableStack{Tuple{Float64,SArray{Tuple{2},Float64,1,2},SArray{Tuple{2},Float64,1,2}},true},DiffEqNoiseProcess.RSWM{:RSwM1,Float64},RandomNumbers.Xorshifts.Xoroshiro128Plus}, ::Float64, ::RandomNumbers.Xorshifts.Xoroshiro128Plus) at /Users/frank/.julia/packages/DiffEqNoiseProcess/GWKRQ/src/wiener.jl:41
 [10] calculate_step! at /Users/frank/.julia/packages/DiffEqNoiseProcess/GWKRQ/src/noise_interfaces/noise_process_interface.jl:177 [inlined]
 [11] setup_next_step!(::DiffEqNoiseProcess.NoiseProcess{Float64,2,Float64,SArray{Tuple{2},Float64,1,2},SArray{Tuple{2},Float64,1,2},Array{SArray{Tuple{2},Float64,1,2},1},typeof(DiffEqNoiseProcess.INPLACE_WHITE_NOISE_DIST),typeof(DiffEqNoiseProcess.INPLACE_WHITE_NOISE_BRIDGE),true,DataStructures.Stack{Tuple{Float64,SArray{Tuple{2},Float64,1,2},SArray{Tuple{2},Float64,1,2}}},ResettableStacks.ResettableStack{Tuple{Float64,SArray{Tuple{2},Float64,1,2},SArray{Tuple{2},Float64,1,2}},true},DiffEqNoiseProcess.RSWM{:RSwM1,Float64},RandomNumbers.Xorshifts.Xoroshiro128Plus}) at /Users/frank/.julia/packages/DiffEqNoiseProcess/GWKRQ/src/noise_interfaces/noise_process_interface.jl:51
 [12] __init(::SDEProblem{SArray{Tuple{2},Float64,1,2},Tuple{Float64,Float64},true,DiffEqBase.NullParameters,Nothing,SDEFunction{true,typeof(f),typeof(f),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},typeof(f),Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},Nothing}, ::DRI1, ::Array{Any,1}, ::Array{Any,1}, ::Type{T} where T, ::Type{Val{true}}; saveat::Array{Float64,1}, tstops::Array{Float64,1}, d_discontinuities::Array{Float64,1}, save_idxs::Nothing, save_everystep::Bool, save_noise::Bool, save_on::Bool, save_start::Bool, save_end::Bool, callback::Nothing, dense::Bool, calck::Bool, dt::Float64, adaptive::Bool, gamma::Rational{Int64}, abstol::Nothing, reltol::Nothing, qmax::Rational{Int64}, qmin::Rational{Int64}, qoldinit::Rational{Int64}, fullnormalize::Bool, failfactor::Int64, beta2::Rational{Int64}, beta1::Rational{Int64}, delta::Rational{Int64}, maxiters::Int64, dtmax::Float64, dtmin::Float64, internalnorm::typeof(DiffEqBase.ODE_DEFAULT_NORM), isoutofdomain::typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), unstable_check::typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), verbose::Bool, force_dtmin::Bool, timeseries_errors::Bool, dense_errors::Bool, advance_to_tstop::Bool, stop_at_next_tstop::Bool, initialize_save::Bool, progress::Bool, progress_steps::Int64, progress_name::String, progress_message::typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), userdata::Nothing, initialize_integrator::Bool, seed::UInt64, alias_u0::Bool, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /Users/frank/.julia/dev/StochasticDiffEq/src/solve.jl:389
 [13] __solve(::SDEProblem{SArray{Tuple{2},Float64,1,2},Tuple{Float64,Float64},true,DiffEqBase.NullParameters,Nothing,SDEFunction{true,typeof(f),typeof(f),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},typeof(f),Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},Nothing}, ::DRI1, ::Array{Any,1}, ::Array{Any,1}, ::Nothing, ::Type{Val{true}}; kwargs::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol},NamedTuple{(:dt,),Tuple{Float64}}}) at /Users/frank/.julia/dev/StochasticDiffEq/src/solve.jl:6
 [14] (::DiffEqBase.var""#442#443""{SDEProblem{SArray{Tuple{2},Float64,1,2},Tuple{Float64,Float64},true,DiffEqBase.NullParameters,Nothing,SDEFunction{true,typeof(f),typeof(f),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},typeof(f),Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},Nothing},Tuple{DRI1}})() at /Users/frank/.julia/dev/DiffEqBase/src/solve.jl:49
 [15] maybe_with_logger at /Users/frank/.julia/dev/DiffEqBase/src/utils.jl:259 [inlined]
 [16] solve_call(::SDEProblem{SArray{Tuple{2},Float64,1,2},Tuple{Float64,Float64},true,DiffEqBase.NullParameters,Nothing,SDEFunction{true,typeof(f),typeof(f),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},typeof(f),Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},Nothing}, ::DRI1; merge_callbacks::Bool, kwargs::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol},NamedTuple{(:dt,),Tuple{Float64}}}) at /Users/frank/.julia/dev/DiffEqBase/src/solve.jl:48
 [17] #solve#444 at /Users/frank/.julia/dev/DiffEqBase/src/solve.jl:66 [inlined]
 [18] top-level scope at none:0
 
```",False,288,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/288,https://github.com/SciML/StochasticDiffEq.jl/pull/288,open,38,16,2,2,2,2,0,0,[],2020-05-10 17:57:34+00:00,,0.0,,"[{'comment_id': 422810139, 'comment_body': ""it's calling the wrong `f`."", 'comment_created': datetime.datetime(2020, 5, 11, 6, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 422810205, 'comment_body': '```suggestion\r\nprob = SDEProblem{false}(f, f, u0, (0.,1.))\r\n```', 'comment_created': datetime.datetime(2020, 5, 11, 6, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': 'd65c4a5c23fb4c3e4c8aa86715fbccc827001707', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02b5c79730e369528ab41f7febcf5681adf54e46', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
465534973, [WIP] Levy area for non-commutative noise processes,"I added tests for the iterated stochastic integrals (originally from https://github.com/SciML/StochasticDiffEq.jl/pull/209) and I also added the scheme by Kloeden, Platen, and Wright.

It's not yet passing the following test from https://github.com/SciML/StochasticDiffEq.jl/pull/268 :
```
sim6 = analyticless_test_convergence(dts,prob2,RKMil_General(),test_dt,trajectories=300, use_noise_grid=false)
@test abs(sim6.ùí™est[:final] - 0.5) < 0.2
@test_broken abs(sim6.ùí™est[:final] - 1.0) < 0.2
```

is there a good way of testing the iterated integrals directly, i.e., without reference to an algorithm like Milstein (for example maybe some moments)? ",True,347,https://api.github.com/repos/SciML/StochasticDiffEq.jl/pulls/347,https://github.com/SciML/StochasticDiffEq.jl/pull/347,closed,760,240,9,27,12,1,0,0,[],2020-08-10 14:25:51+00:00,2020-09-04 17:28:04+00:00,2170933.0,"25 days, 3:02:13","[{'comment_id': 483751414, 'comment_body': 'This whole thing is very messy and not general: it should definitely get a generalized form.', 'comment_created': datetime.datetime(2020, 9, 4, 17, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': 'f296262a8f472cffb11c53c694cdad8e939ee762', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '566bf64b8385537edd8192b39b46ff5e47536dd8', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a1a672905db03691e2683e761b1a93d8c0dd4c8', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd537a1c1c03e3698f9f510eda87c87766947b2a2', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4c8adcb5b1f3a03ee3ac4de6270810fcaca563f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34e7b232abe09170e386714c60dcc0da7ae24f49', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66b6e2345241fd5aa36f32afe71ed87bd95ba3d3', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd96213c37cbee66e37061ed386fb1d1c2993d6b4', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f97ea31b5463b4db854d9e616c34f2c69d61182e', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '572bcfb99babb7080339d0e1db48d31eb4748306', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cf3b0452345762f1e7ef0f360d520480bf65804', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '480ea3fbd9db6db93e9335cec999f06cda216c83', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2c196e998148454937c9071c3df87452d951054', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb0a82b7e117d969ed4212fe54f9b9ff86a54735', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d3007e0e85ea08ee2a6006635ec4171c2d1e27d', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51d4fb0c1406e3f6d150bc3c2ffbb5dcea493c81', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd56aab7fe92653b0f4c906f59fcb4b6ab958cc77', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aac871c694c12bed1dfc6e67833ff027939e1d6', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67d45605d2bc2c346eae51951095991dfc53a268', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '798b9acc6e3812a3989f9c328920e8db97021a9a', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '410e76167b383978885818fb853f11a454f6e282', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dff792b096b22c81030b99d7f2b0bde8fa04210f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07e4a944f5eaf3d56e58a733c3cb6371026ba98f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ab184ea3bb63e9d8747fdd8c6f0f4361477be3', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93beb89a0cf0a478df4b707efcb1dedc42ba70e1', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7db7fc6af1099053976cb8f15ff32911ecd15037', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4483bd90c12769a58aab9d3874a04af346342c5', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
408638490,[WIP] adjoint for steady state solution,"I tried to implement the adjoint sensitivity function for the steady state solution #182 . I didn't manage to make the linsolve work, yet .. but I assumed we'd want that a user can choose the linear solver, too.. 

Also, I was not sure if del g/ del p in (3) of https://math.mit.edu/~stevenj/18.336/adjoint.pdf should be added automatically by AD/FD or by a user input. (For the tests in adjoint.jl I chose a loss function that doesn't explicitly depend on p so far. )
",True,235,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/235,https://github.com/SciML/SciMLSensitivity.jl/pull/235,closed,358,28,10,4,2,4,0,0,[],2020-04-24 16:07:12+00:00,2020-05-05 20:50:25+00:00,967393.0,"11 days, 4:43:13","[{'comment_id': 414694560, 'comment_body': 'lets make this a different file.', 'comment_created': datetime.datetime(2020, 4, 24, 16, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 414709224, 'comment_body': ""yeah only the discrete form really works here so we should be taking dg/dp. Concrete solve might even be easier since that's the dy value from the backpass."", 'comment_created': datetime.datetime(2020, 4, 24, 16, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 414711498, 'comment_body': ""all that should we need to do is compute the vector'*Jacobian, which is the vecjacobian! stuff of the other adjoints. Copy that general workflow, since we want to use backprop on f for that. You might want to read some of the 18.337 notes, specifically https://mitmath.github.io/18337/lecture10/estimation_identification on vjps"", 'comment_created': datetime.datetime(2020, 4, 24, 16, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 414760149, 'comment_body': ""Thanks for the remarks and the link to the notes! I'll read them and try to update the files accordingly."", 'comment_created': datetime.datetime(2020, 4, 24, 17, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}]","[{'commit_sha': '7f65f54524c1ffa034b89aaa02cab9caac2d8eb5', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc44825d7f307534eeeda2989495ea6c7f4abbef', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2157bbd362a2dac9fd66844a531b38117e8afaa6', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd42ff562bfdadd85a4ef6fa89f3581c67dc25e59', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
414100437,[WIP] concrete_solve for steady state problem,"I tried to do it by using directly `Zygote.pullback `on `_concrete_solve`.. However, I get the following error:

```
Assertion failed: (token.V->getType()->isTokenTy()), function emit_expr, file /Users/julia/buildbot/worker/package_macos64/build/src/codegen.cpp, line 4357.

signal (6): Abort trap: 6
in expression starting at /Users/frank/.julia/dev/DiffEqSensitivity/test/local_sensitivity/steady_state.jl:187
__pthread_kill at /usr/lib/system/libsystem_kernel.dylib (unknown line)
Allocations: 352338571 (Pool: 352277152; Big: 61419); GC: 207
```",True,237,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/237,https://github.com/SciML/SciMLSensitivity.jl/pull/237,closed,98,8,4,3,0,0,0,0,[],2020-05-06 13:34:44+00:00,2020-05-12 18:55:28+00:00,537644.0,"6 days, 5:20:44",[],"[{'commit_sha': '1c501e70c316a5fddeee36eaf6a52cf31443616b', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1e8cda637c9d5eb3e60cdcac23047b1624546dc', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39acc2d1c2ae523c98bb33fa27d24d8c2398d372', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
419028018,[WIP] Backsolve SDE,"I got stuck with the backsolve adjoint for SDEs.. 
The main problem is that  `NoiseGrid` didn't work for the solution of SDEs in reverse time. So I switched to the forward version (-t_end, -t_start).  Apparently I am missing some minus signs somewhere..
",True,242,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/242,https://github.com/SciML/SciMLSensitivity.jl/pull/242,closed,358,37,12,31,0,28,0,0,[],2020-05-16 21:56:45+00:00,2020-05-24 08:05:27+00:00,641322.0,"7 days, 10:08:42","[{'comment_id': 426208183, 'comment_body': ""isn't this the same as the ODE one? Why not just reuse the code?"", 'comment_created': datetime.datetime(2020, 5, 17, 1, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 426291878, 'comment_body': 'Isnt that the place to deal with on Ito vs Stratonovich issues. ', 'comment_created': datetime.datetime(2020, 5, 17, 18, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mschauer', 'type': 'User'}, {'comment_id': 426292988, 'comment_body': 'Currently I think it would be best to add the correction already here:\r\nhttps://github.com/SciML/DiffEqSensitivity.jl/pull/242/files#diff-99f3ec143121f5ddfb78d5cc3e62ca35R101-R105', 'comment_created': datetime.datetime(2020, 5, 17, 18, 56, 41, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 426293147, 'comment_body': '(I left them out for the moment, as not all the `tdir` related issues are solved)', 'comment_created': datetime.datetime(2020, 5, 17, 18, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 426723543, 'comment_body': ""you shouldn't have to do that?"", 'comment_created': datetime.datetime(2020, 5, 18, 15, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 426723903, 'comment_body': 'You should be able to just reverse the array of array IIUC. If not, we need to just create a new dispatch to reverse.', 'comment_created': datetime.datetime(2020, 5, 18, 15, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 426724467, 'comment_body': ""that's a little awkward. How come this is required?"", 'comment_created': datetime.datetime(2020, 5, 18, 15, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 426724948, 'comment_body': 'the goal should probably be to make the other SensitivityFunctions all have the `f` in there, but this works for now.', 'comment_created': datetime.datetime(2020, 5, 18, 15, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 426726836, 'comment_body': "" I'd just remove ReverseDiff from here"", 'comment_created': datetime.datetime(2020, 5, 18, 15, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 426774103, 'comment_body': 'Although the tests are passing now for ReverseDiff?', 'comment_created': datetime.datetime(2020, 5, 18, 17, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 426775176, 'comment_body': 'I needed it for the diffusion.. to get it through the Jacobian checks and thought it might be better to have it symmetric with respect to the drift  (though there it is indeed not required)', 'comment_created': datetime.datetime(2020, 5, 18, 17, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 426775890, 'comment_body': 'the reverse was actually not the issue. I could construct the NoiseGrid and the SDEProblem but when calling solve on the inplace function I got a broadcasting error in perform_step! ', 'comment_created': datetime.datetime(2020, 5, 18, 17, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 426778217, 'comment_body': 'This will only work on length 1 SDEs though, which is somewhat odd. This is the next thing to fix.', 'comment_created': datetime.datetime(2020, 5, 18, 17, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 426778392, 'comment_body': '`sol.prob.f` is already an ODEFunction though?', 'comment_created': datetime.datetime(2020, 5, 18, 17, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 426778703, 'comment_body': 'oh cool, nevermind then', 'comment_created': datetime.datetime(2020, 5, 18, 17, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 426778924, 'comment_body': 'We could merge without this, but open an issue on it.', 'comment_created': datetime.datetime(2020, 5, 18, 17, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 429564294, 'comment_body': 'why change from `p`?\r\n', 'comment_created': datetime.datetime(2020, 5, 23, 17, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 429564377, 'comment_body': ""you'll need to check for nothing before you check for its length"", 'comment_created': datetime.datetime(2020, 5, 23, 17, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 429564489, 'comment_body': ""you should be able to just output the whole thing and then pullback lambda transpose. In fact, do you need a separate computation for this? I don't think you do."", 'comment_created': datetime.datetime(2020, 5, 23, 17, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 429564715, 'comment_body': 'oh this was accidentally..', 'comment_created': datetime.datetime(2020, 5, 23, 17, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 429565707, 'comment_body': ""Do you mean like:\r\n```\r\n_, back = Zygote.pullback(y, prob.p) do u, p\r\n\t\tvec(f(u,p,t))\r\nend\r\n_,tmp2 = back(Œª')\r\n```\r\nthen I only get one vector, which doesn't seem to agree with the lines above.\r\n"", 'comment_created': datetime.datetime(2020, 5, 23, 17, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 429586329, 'comment_body': ""don't add bounds when they aren't necessary, and don't make them too tight. This was changed to ODEFunction,SDEFunction in this PR, which is what broke SecondOrderODEFunction."", 'comment_created': datetime.datetime(2020, 5, 23, 23, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 429593487, 'comment_body': 'we probably need to add `reverse!(::AbstractNoiseProcess)` to generalize this. Open an issue on DiffEqNoiseProcess to track that.', 'comment_created': datetime.datetime(2020, 5, 24, 2, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 429593569, 'comment_body': ""this use of zeros here isn't GPU-safe. `similar(z0,length(z0),numstates)` followed by `x.=false` would be better."", 'comment_created': datetime.datetime(2020, 5, 24, 2, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 429594187, 'comment_body': ""let's do this for now, but I think what we'll need to do is essentially revert it and in the SDE pass `dgrad = nothing`, and do this part separately. It can be much more efficient to calculate the Jacobian via forward mode in many cases, so we probably want options for how to build this Jacobian rather than hardcoding it. Then, that would keep the focus of `vecjacobian!` just on vector-Jacobian products. Since this loop doesn't share code with what's above it, it just doesn't make all that much sense in this spot."", 'comment_created': datetime.datetime(2020, 5, 24, 2, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 429594212, 'comment_body': ""Let's open an issue to track this."", 'comment_created': datetime.datetime(2020, 5, 24, 2, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 429609734, 'comment_body': 'what does `x.=false` mean?', 'comment_created': datetime.datetime(2020, 5, 24, 7, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 429610000, 'comment_body': 'overwrites all of the values to 0', 'comment_created': datetime.datetime(2020, 5, 24, 7, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '8ccbf0387c9f6ca86bf5f181c9ba0dc43f9b1a4f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdd798319a7e836b6ab57c035278422d69958501', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b0636c50c2b786dd180b8911a4406d9b93c90b5', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2abc499934af126cb38d8536c4c757e9da2c379', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d73bbb0c1a13ee3ce7c74101d6719c707235f3f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0655d1186a6dc592c38fe899b85fdc654354c7df', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b65344e378b4fe1a20d77c7839cf47666a23ab71', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a136b621cd9232bb67a97426f426a6ff3284c559', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb3ed11f808c46787bb664acdbc8e9f98f4a0c04', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaa38f0281b83e33b3ec68773df0fd3b879cab1f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62231ac6ce239d1d5e33ef754220ab7607836191', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '666513791f6d4fd9a04a5727d82eb574284016a9', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ede02b4f5c35c3d96cf1311504ea68b2ad95120d', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44af092bec9d4ec56cf9eeab85772908bf650ec3', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c79b68d365b2371f5b2c34a32bfe9b7420695894', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c1aafff30d388c119b1cbcc4ac9b426bd074f01', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9d7f8151e118b85da9edfed0c601a03c479abca', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c634e858767a75f3e34e75dd81d9f668a83abb76', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b5934a52263ccc9c3d6213431b9e63f42f8a938', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f6fe6bfa3fee3749ae7991a31001cd4b72841e', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0c371dda266b047311eb2b6531f4e5caf5da8d1', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0973c2641378d57cf82dfc72de47e251f2e80b7', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '226d75b4930a729b658bb79e9ab43975157e9ed9', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14441f63224e6c0578df6a6e413b96a3a60b138c', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f3b58243a5eb371acb3b6729fb50692f0453ff2', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6289497568df8cd2ab4f6429cd35e3b2a7e50dcd', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '236cb1ba0ca147a55edf0b968d3d7a08415cce88', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4717873db66da0c0e7a6fa30cdb02359c32f4b7c', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7741260bbe00160d30c8988d001c1b68c0faeeee', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdd016a6b907a500f3b0215134e5ec8b65ce5643', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30df6e70ed67f7939da19b78db6aef14c13640be', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
422393698,gpu savety for SDE BacksolveAdjoint,to fix https://github.com/SciML/DiffEqSensitivity.jl/issues/250,True,256,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/256,https://github.com/SciML/SciMLSensitivity.jl/pull/256,closed,4,1,1,1,0,0,0,0,[],2020-05-24 10:33:51+00:00,2020-05-24 15:28:00+00:00,17649.0,4:54:09,[],"[{'commit_sha': 'e670e31eefbdc7191cf883ee90766773f51c574a', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
422451778,some tests to check concrete_solve use,"@ChrisRackauckas  do you have an idea why `ReverseDiff` below doesn't work? Here is the stacktrace:

```
julia> ReverseDiff.gradient((u0,p)->sum(concrete_solve(proboop,EulerHeun(),u0,p,dt=1e-2,adaptive=false,save_noise=true,saveat=0.01)),u0,p)
ERROR: MethodError: no method matching gradient(::var""#57#58"", ::Array{Float64,1}, ::Array{Float64,1})
Closest candidates are:
  gradient(::Any, ::Any) at /Users/frank/.julia/packages/ReverseDiff/uy0uk/src/api/gradients.jl:22
  gradient(::Any, ::Any, ::ReverseDiff.GradientConfig) at /Users/frank/.julia/packages/ReverseDiff/uy0uk/src/api/gradients.jl:22
Stacktrace:
 [1] top-level scope at none:0
```

I also realized that inplace versions don't work yet and opened an issue. Will solve that tomorrow.",True,258,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/258,https://github.com/SciML/SciMLSensitivity.jl/pull/258,closed,72,0,1,4,1,7,0,0,[],2020-05-24 18:33:00+00:00,2020-05-25 12:37:43+00:00,65083.0,18:04:43,"[{'comment_id': 429667329, 'comment_body': '```suggestion\r\ndu01,dp1 = ReverseDiff.gradient((u0,p)->sum(concrete_solve(proboop,EulerHeun(),u0,p,dt=1e-2,adaptive=false,save_noise=true,saveat=0.01)),(u0,p))\r\n\r\n```', 'comment_created': datetime.datetime(2020, 5, 24, 19, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 429717530, 'comment_body': 'fixed dt methods ignore the tolerances.', 'comment_created': datetime.datetime(2020, 5, 25, 3, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 429766396, 'comment_body': 'yep, I thought the error from CI points in this direction: https://travis-ci.org/github/SciML/DiffEqSensitivity.jl/jobs/690732450 ""got unsupported keyword arguments ""checkpoints"", ""abstol"", ""reltol""""\r\n\r\nA bit strange is that in my local environment with the same tracker version the tracker one at least runs without any error.', 'comment_created': datetime.datetime(2020, 5, 25, 7, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 429774517, 'comment_body': 'oh updated my DiffEqBase master and I now get the same error..  seems to be related to this change:\r\nhttps://github.com/SciML/DiffEqBase.jl/pull/517/commits/562205d6e5f3522c42b0c11971dc860329aae8c5', 'comment_created': datetime.datetime(2020, 5, 25, 7, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 429775904, 'comment_body': '```suggestion\r\ndu03,dp3 = Tracker.gradient((u0,p)->sum(concrete_solve(proboop,EulerHeun(),u0,p,dt=1e-2,adaptive=false,save_noise=true,abstol=1e-14,reltol=1e-14,saveat=0.01,sensealg=BacksolveAdjoint())),u0,p)\r\n\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 7, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 429777989, 'comment_body': 'Thanks a lot! Also just saw it from the nicer looking stacktrace in Juno.. but I think I misunderstood then `Tracker.gradient ` so this also always uses the adjoints? I thought this will simply backprop through the operations.', 'comment_created': datetime.datetime(2020, 5, 25, 7, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 429912784, 'comment_body': 'They got adjoint definitions to call into this now.', 'comment_created': datetime.datetime(2020, 5, 25, 12, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '7910b5bb97e7a3b98d1a3c4e335d4fe322f2ba19', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55edeed1db9f60e3ab63a6744b1edcb6a1fcdede', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f79b1b4f67aa4a6a92881ca873a030d2c87ea1e7', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7ad4e3f83ae6f38f6282b3b2d3c9866b34e5de8', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
422905722,[WIP] alternative differentiation choices for noise Jacobian,"I started to implement more differentiation possibilities for the noise Jacobian. 
https://github.com/SciML/DiffEqSensitivity.jl/issues/259 and https://github.com/SciML/DiffEqSensitivity.jl/issues/249
I am still testing only the oop version and I would add tests for inplace next.

The current solution creates a `tape` using `ReverseDiff` for the full Jacobian (`pJ`). The main problem I faced here was the initialization of the D tapes (one for each column).
I would have preferred something along the lines of 

```
function tape(indx)
	ReverseDiff.JacobianTape((y, p, [tspan[2]])) do u,p,t
		f(u,p,first(t))[indx]
	end
end
paramjac_noise_config = [ReverseDiff.compile(tape(i)) for i in 1:length(D) ]
```
but couldn't make it working yet.. I guess based on this issue https://github.com/JuliaDiff/ReverseDiff.jl/issues/36 that passing `indx` directly in the tape to generalize the version written for the `vecjacobian! `stuff won't work..
Recreating the tape every time in the call to `jacNoise` also seems to be costly.
What is currently missing is a way to pass a paramjac function of the diffusion term to the `SDEAdjointProblem` which could be beneficial, e.g., if `pJ` is constant.",True,260,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/260,https://github.com/SciML/SciMLSensitivity.jl/pull/260,closed,190,21,5,3,1,6,0,0,[],2020-05-25 21:46:03+00:00,2020-05-28 20:30:23+00:00,254660.0,"2 days, 22:44:20","[{'comment_id': 430417962, 'comment_body': 'can you also make it a function of the idx here?', 'comment_created': datetime.datetime(2020, 5, 26, 13, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 430647912, 'comment_body': 'I initially tried something like:\r\n```\r\nindx = 1\r\ntape = ReverseDiff.JacobianTape((y, prob.p, [tspan[2]], [indx])) do u,p,t,i\r\n \t\tf(u,p,first(t))[i] (and also f(u,p,first(t))[first(i)] )\r\nend\r\n```\r\nto be as close as possible to the Zygote version. But this fails already at creating the tape:\r\n ```\r\nArgumentError: invalid index: TrackedReal<1wd>(1, 0.0, E6S, 1, 3Qw) of type ReverseDiff.TrackedReal{Int64,Float64,ReverseDiff.TrackedArray{Int64,Float64,1,Array{Int64,1},Array{Float64,1}}}\r\nStacktrace:\r\n [1] to_index(::ReverseDiff.TrackedReal{Int64,Float64,ReverseDiff.TrackedArray{Int64,Float64,1,Array{Int64,1},Array{Float64,1}}}) at ./indices.jl:297\r\n [2] to_index(::Array{ReverseDiff.TrackedReal{Float64,Float64,Nothing},1}, ::ReverseDiff.TrackedReal{Int64,Float64,ReverseDiff.TrackedArray{Int64,Float64,1,Array{Int64,1},Array{Float64,1}}}) at ./indices.jl:274\r\n [3] to_indices at ./indices.jl:325 [inlined]\r\n [4] to_indices at ./indices.jl:322 [inlined]\r\n [5] getindex at ./abstractarray.jl:980 [inlined]\r\n [6] (::var""#39#40"")(::ReverseDiff.TrackedArray{Float64,Float64,1,Array{Float64,1},Array{Float64,1}}, ::ReverseDiff.TrackedArray{Float64,Float64,1,Array{Float64,1},Array{Float64,1}}, ::ReverseDiff.TrackedArray{Float64,Float64,1,Array{Float64,1},Array{Float64,1}}, ::ReverseDiff.TrackedArray{Int64,Float64,1,Array{Int64,1},Array{Float64,1}}) at ./none:2\r\n [7] ReverseDiff.JacobianTape(::Function, ::Tuple{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Int64,1}}, ::ReverseDiff.JacobianConfig{Tuple{ReverseDiff.TrackedArray{Float64,Float64,1,Array{Float64,1},Array{Float64,1}},ReverseDiff.TrackedArray{Float64,Float64,1,Array{Float64,1},Array{Float64,1}},ReverseDiff.TrackedArray{Float64,Float64,1,Array{Float64,1},Array{Float64,1}},ReverseDiff.TrackedArray{Int64,Float64,1,Array{Int64,1},Array{Float64,1}}},Nothing}) at /Users/frank/.julia/packages/ReverseDiff/uy0uk/src/api/tape.jl:237\r\n [8] ReverseDiff.JacobianTape(::Function, ::Tuple{Array{Float64,1},Array{Float64,1},Array{Float64,1},Array{Int64,1}}) at /Users/frank/.julia/packages/ReverseDiff/uy0uk/src/api/tape.jl:234\r\n [9] top-level scope at none:0\r\n\r\n```\r\nSo including the indx directly in the tape didn\'t work. Alternatively, I could try to make the D tape version from the code snipped in the first comment work. ', 'comment_created': datetime.datetime(2020, 5, 26, 19, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 430847494, 'comment_body': ""I see, yeah it tries to differentiate through it which isn't good behavior, so yeah it does need separate tapes and the strategy above makes sense."", 'comment_created': datetime.datetime(2020, 5, 27, 4, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 432102608, 'comment_body': '```suggestion\r\n        if compile_tape(sensealg.noise)\r\n```', 'comment_created': datetime.datetime(2020, 5, 28, 20, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 432103977, 'comment_body': '```suggestion\r\n        if compile_tape(sensealg.noise)\r\n```', 'comment_created': datetime.datetime(2020, 5, 28, 20, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 432104024, 'comment_body': '```suggestion\r\n        end\r\n```', 'comment_created': datetime.datetime(2020, 5, 28, 20, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '56d4b351425940178694af9d706dd8a9c63e17db', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '684b3f6e09932df05e8d86f20ed64ef75bc01b8d', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd5298b940df243b3fc660fe0c887cf87f285922', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
425607958,iip tests,"These are the inplace tests for the SDE adjoints (see issue https://github.com/SciML/DiffEqSensitivity.jl/issues/257). Only slight modifications in the src files had to be made. 

There is a somewhat strange behavior (not directly related to the Adjoints) because of that behavior it took some time to see that the tests are actually ok.


```
Random.seed!(seed)
prob_sde = SDEProblem(f!,œÉ!,u‚ÇÄ,trange,p2)
sol_sde = solve(prob_sde,RKMil(interpretation=:Stratonovich),dt=tend/1e6,adaptive=false, save_noise=true)
# at first evaluation this part is correct, if evaluated a second time,  the second last noise value changes and the result is wrong
noise = [sol_sde.W(t)[1][1] for t in tarray]
resp1 = sum(tarray.*u‚ÇÄ.^2 .*exp.(2*p2[1].*tarray+2*p2[2].*noise))
resp2 = sum(noise.*u‚ÇÄ.^2 .*exp.(2*p2[1].*tarray+2*p2[2].*noise))
resp = [resp1, resp2]
resu0 = sum(u‚ÇÄ.* exp.(2*p2[1].*tarray+2*p2[2].*noise))
```

If running the lines starting from 'noise = '  a second time, the second last noise value gets the same value as the last one, such that the final result is off. ",True,265,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/265,https://github.com/SciML/SciMLSensitivity.jl/pull/265,closed,342,193,4,2,1,0,0,0,[],2020-05-31 12:56:21+00:00,2020-05-31 14:24:21+00:00,5280.0,1:28:00,[],"[{'commit_sha': '4a6158707d0d1c957f18c01e3494e462d7a20a65', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48b1ef395e707c43ccfe3f55470c3b0338a1e70a', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
426237696,SDE Adjoint for scalar noise,"This adds a switch for scalar noise (associated issue: https://github.com/SciML/DiffEqSensitivity.jl/issues/254).

For scalar noise, we don't have to consider the full noise Jacobian broadcasted against lambda. Since all dWs are equal for scalar noise, the computation simplifies to another vjp, and can be calculated using `vecjacobian! `with `dgrad=dgrad`. Thus in case of scalar noise, also the choice of the solver is less restrictive. 



",True,268,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/268,https://github.com/SciML/SciMLSensitivity.jl/pull/268,closed,55,8,2,2,0,2,0,0,[],2020-06-01 22:00:53+00:00,2020-06-02 13:23:47+00:00,55374.0,15:22:54,"[{'comment_id': 433557047, 'comment_body': 'then delete them?', 'comment_created': datetime.datetime(2020, 6, 2, 0, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 433557850, 'comment_body': ""Looks to me like it's still a useful test though. It's stressing a different part of the adjoint method. Technically it no user should be using this here because it is a scalar SDE, but it's hitting a code path that would be used on larger examples."", 'comment_created': datetime.datetime(2020, 6, 2, 0, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': 'a3475c0384bc423d85c203376bd9e657823f06a4', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '213103f79e7fbdb34443521f2800077dc72c9f7d', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
431752050,SDE Adjoint for non-diagonal noise and diagonal noise with mixing terms,"I have added one branch for non-diagonal noise processes and one for diagonal noise processes where the noise is more general than du[I] = f(u[I]).

The second one is controlled by 
`isnoisemixing(S.sensealg)`.
By default it currently assumes that the noise is not mixing the terms.

For the ForwardDiff version, I have some problems when using the JacobianConfig option. Therefore, in this part of  `_jacNoise!()` I am currently using directly:
`ForwardDiff.jacobian!(J,uf,dy,y)`
(instead of `jacobian!(J,uf, dy, f_cache, sensealg, jac_config)` )
",True,275,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/275,https://github.com/SciML/SciMLSensitivity.jl/pull/275,closed,619,102,8,4,1,2,0,0,[],2020-06-09 12:18:20+00:00,2020-06-10 20:49:53+00:00,117093.0,"1 day, 8:31:33","[{'comment_id': 437836343, 'comment_body': 'assume these will never be called directly. These would need to be added to the `SDEFunction` to be used.', 'comment_created': datetime.datetime(2020, 6, 10, 3, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 437918793, 'comment_body': 'to the `SDEFunction` or `ODEFunction`? \r\nThey are indeed not yet tested (or used and could be left out for the moment) -- I thought that something like this might be a nice way to encode if one of the two Jacobians dsigma/dx or dsigma/dp is zero or constant (to speed up the computation).', 'comment_created': datetime.datetime(2020, 6, 10, 7, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}]","[{'commit_sha': 'e93c91a514f23c095f6a9984bc94fbb2b86a2c08', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bb65efcc2b721a5e464246e9816d13f680bfbb9', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb2174c83b6cc697f7e0e38e32fa0ee4fcc503fa', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '865c267813f6b11e627c192b81409a4fded2cc57', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
446193341,Interpolating adjoint,"This PR adds the `InterpolatingAdjoint` method for SDEs from issue #251. It is (like BacksolveAdjoint) based on  `NoiseGrid` at the moment. 

The tests cover scalar, diagonal, diagonal mixing, and non-diagonal noise processes for all possible options of the noise process. I didn't include all possibilities for the vjps so far . For `noise=false ` I had to put some tests_broken/ relax the testing case quite a bit in a few cases.  

It currently handles floating point issues by checking if the checkpoints are unique:
```Julia
if length(unique(round.(checkpoints, digits=13))) != length(checkpoints)
    @warn ""The given checkpoints are not unique. To avoid issues in the interpolation the checkpoints were redefined. You may want to check sol.t if default checkpoints were used.""
    checkpoints = unique(round.(checkpoints, digits=13))
  end
```",True,295,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/295,https://github.com/SciML/SciMLSensitivity.jl/pull/295,closed,699,230,10,11,1,3,0,0,[],2020-07-08 11:54:56+00:00,2020-07-10 11:44:40+00:00,172184.0,"1 day, 23:49:44","[{'comment_id': 451948412, 'comment_body': '10000 is a bit high. Is 100 not sufficient?', 'comment_created': datetime.datetime(2020, 7, 9, 3, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 452136805, 'comment_body': '100 doesn\'t change dt in the test case. 1000 seems to work..  It is not yet optimal.. the unique check is also sensitive to the discretization.. for 1e-9 for example, the current version would need a different number of digits when checking the uniqueness ..\r\n\r\n```Julia\r\nusing DiffEqSensitivity, StochasticDiffEq\r\nusing Random\r\nseed = 100\r\nRandom.seed!(seed)\r\nu‚ÇÄ = [0.5]\r\ntstart = 0.0\r\ntend = 0.1\r\ndt = 0.005\r\ntrange = (tstart, tend)\r\nt = tstart:dt:tend\r\ntarray = collect(t)\r\n\r\nfunction g(u,p,t)\r\n  sum(u.^2.0/2.0)\r\nend\r\n\r\nfunction dg!(out,u,p,t,i)\r\n  (out.=-u)\r\nend\r\n\r\np2 = [1.01,0.87]\r\n\r\n\r\nf_oop_linear(u,p,t) = p[1]*u\r\nœÉ_oop_linear(u,p,t) = p[2]*u\r\n\r\ndt1 = tend/1e4\r\n\r\nRandom.seed!(seed)\r\nprob_oop = SDEProblem(f_oop_linear,œÉ_oop_linear,u‚ÇÄ,trange,p2)\r\nsol_oop = solve(prob_oop,EulerHeun(),dt=dt1,adaptive=false,save_noise=true)\r\n\r\n@show length(sol_oop)\r\n\r\ncheckpoints=sol_oop.t\r\n\r\nif length(unique(round.(checkpoints, digits=13))) != length(checkpoints)\r\n  @warn ""The given checkpoints are not unique. To avoid issues in the interpolation the checkpoints were redefined. You may want to check sol.t if default checkpoints were used.""\r\n  checkpoints = unique(round.(checkpoints, digits=13))\r\nend\r\n@show length(checkpoints)\r\n\r\nintervals = map(tuple, @view(checkpoints[1:end-1]), @view(checkpoints[2:end]))\r\ninterval_end = intervals[end][end]\r\nprob_oop.tspan[1] > interval_end && push!(intervals, (interval_end, prob_oop.tspan[1]))\r\ncursor = lastindex(intervals)\r\ninterval = intervals[cursor]\r\n\r\n\r\n_sol = deepcopy(sol_oop)\r\nidx1 = searchsortedfirst(_sol.t, interval[1]-1000eps(interval[1]))\r\nidx2 = searchsortedfirst(_sol.t, interval[2])\r\ndt = abs(_sol.W.dt)\r\nif dt < 1000eps(_sol.t[end])\r\n  dt = interval[2] - interval[1]\r\nend\r\n@show dt\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 11, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 452792653, 'comment_body': ""let's make sure to generalize this soon"", 'comment_created': datetime.datetime(2020, 7, 10, 11, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '5bb5b084c146749d9c73db42ac000b4d2ec3df2e', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45185ea5e4cf5f09600518168d088d81ae35ed8f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a07a416c745c480f04f2c9e440661842e5daa0b', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81ac9d46de97c9aafaad0191e743f473e6324a04', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd120b3c236056a32db0ec2064c38489324d5bb3', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdca7d2fd53a65be85ed1acf321d81cee93e339e', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa3f2103042b70b72c6ad050443e3ca80b39927f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43e5d1fc679798e8953cd6f4517853d8ca5bc4ce', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05891b4d9d3069a7068c31a38bb028aa8040043c', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dda9885c1338053bdb2f30d5f80bd043ebced4c', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67caf4e61727062ae8d4268bf425bd77010a1189', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
447673925,"added citations for backsolve, steadystate and interpolation adjoint","Is this: 
Lev Semenovich Pontryagin, EF Mishchenko, VG Boltyanskii, and RV Gamkrelidze. The mathematical theory of optimal processes. 1962.

the old reference you mentioned earlier, @ChrisRackauckas  ? This was cited in the Neural ODE paper http://papers.nips.cc/paper/7892-neural-ordinary-differential-equations.pdf",True,298,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/298,https://github.com/SciML/SciMLSensitivity.jl/pull/298,closed,56,0,1,1,1,0,0,0,[],2020-07-10 22:50:40+00:00,2020-07-11 02:05:14+00:00,11674.0,3:14:34,[],"[{'commit_sha': '1fab6bbe097d7e50e498e5bde68bb41f6e4ed020', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
448217044,replace NoiseGrid by NoiseWrapper,"Replaces all calls to `NoiseGrid` by `NoiseWrapper`, see https://github.com/SciML/DiffEqSensitivity.jl/issues/253 + https://github.com/SciML/DiffEqSensitivity.jl/issues/253",False,299,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/299,https://github.com/SciML/SciMLSensitivity.jl/pull/299,closed,5,6,2,2,5,0,0,0,[],2020-07-13 12:15:19+00:00,2020-07-15 15:32:12+00:00,184613.0,"2 days, 3:16:53",[],"[{'commit_sha': '0eeaaa5f3fc0a3b4b932dfa813712088413ee298', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54a4c9086d2bb8f583072aa5b3f0decbe02a5ea2', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
449525348,fix checkpointing for BacksolveAdjoint,"Replaces `DiscreteCallback` by  `PresetTimeCallback`. 

Tests on (a simplified version of) the example from issue #300 . With checkpointing enabled the gradients from `BacksolveAdjoint` and `InterpolatingAdjoint` agree. ",True,303,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/303,https://github.com/SciML/SciMLSensitivity.jl/pull/303,closed,56,6,3,1,7,0,0,0,[],2020-07-15 14:37:06+00:00,2020-07-15 15:18:34+00:00,2488.0,0:41:28,[],"[{'commit_sha': 'b5d6087ce78b26a7c8e57a7d7da35428f7af701c', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
449773339, cheaper non-diagonal noise tests,This should make the non-diagonal and mixing noise tests faster. There seems to be a slight problem for the inplace `InterpolatingAdjoint` in case of the mixing noise tests. I'll check if there is a `deepcopy()` somewhere missing -- I think it might be again the case that some noise values are not properly reconstructed or are changed inplace.,True,305,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/305,https://github.com/SciML/SciMLSensitivity.jl/pull/305,closed,386,99,10,15,12,2,0,0,[],2020-07-15 22:25:46+00:00,2020-07-25 21:50:22+00:00,861876.0,"9 days, 23:24:36","[{'comment_id': 455407025, 'comment_body': ""I'd rather have it default to NoiseGrid and have an option for other, and then just have a few tests on the NoiseWrapper form. Tests marked as broken will be bound to break in the future.\r\n"", 'comment_created': datetime.datetime(2020, 7, 15, 22, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 455421134, 'comment_body': ""I'll have to look tomorrow what goes wrong with the `noise=false` case. Maybe something in `_jacNoise ` needs to be adjusted -- but I don't see why `BacksolveAdjoint` should work while `InterpolatingAdjoint` doesn't."", 'comment_created': datetime.datetime(2020, 7, 15, 23, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}]","[{'commit_sha': '5566fd9ccddd0a103715819be30ede6852b8013c', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc1272bdff34cb3a97a085227fe2813839e85c4c', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6d7e10b785416e5983ba5848d897fe678d3a46b', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd71b6a1bdbcdaacf0bdd3b84fc53cb34f345140a', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f937dcc02def6e0394ffe151559f2102c64f0fde', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91f60812f098bd36527bcf4ec4ac017b93a9449d', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c45509dada9bc1de12e4465000e80645c16662b3', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efb9ff4b6b9a42b21469290e94ab2d4b7b5160fb', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a00942ff0ec41dd23447065f689b13da506ad9c8', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e83c0d6873d9f08a908e003b414388441c744011', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b44ebb0a5cb472d059d5b7e2b441aeb58875a0e', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf146217f83de16355c968f2089f119b9ce690f6', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08d0b9c195b4411df61eafe03b2e8105c997af37', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e22f49e4846fb0620d574c07c3f7417390905179', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b4dfb9eadb709ad24deb5ad482c090495af8011', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
458714783,Ito sense for SDE adjoints,"@ChrisRackauckas  Could you check if the way to add the Ito sense goes in the right direction? 

I thought an additional type for the transformed function with its own vips are the best way to do it. However, I couldn't resolve up to now all errors in the vjps from the SensitivityFunction. (ReverseDiff is the only one which I could make running through the code but also there the gradients look slightly off.. )",True,317,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/317,https://github.com/SciML/SciMLSensitivity.jl/pull/317,closed,800,8,11,21,3,0,0,0,[],2020-07-29 21:30:05+00:00,2020-11-17 12:37:27+00:00,9558442.0,"110 days, 15:07:22",[],"[{'commit_sha': '1c3996aab1866c968f435a1a8b88ca8e786d6c5a', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf2902818dfdba160091862445ab3cebfccfaf6f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ed05d58a14763f7e68582cd1fd9873543d4f180', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb2828a52ad4f6656a31a6386ed2320c3e214c95', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0049db225ba536ba9c58f3635ab9d0e4e4d25571', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff06823a0451f44b6eae551b3b13cb41f25117c4', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '760b4cecdcb3b96be45dd39f1a109b008c544061', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e10599060a8640fc546398cc63379636fee8e0e', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ab41c20f931029fc5a964131b4c5ba7cb86aa9c', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0b4972d3bbe09fab99e00a4268e7761cd6a4540', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72357cff54e62f844c3cabf2587cd604c73fd49d', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c6256790f9834d1be1c6a639a85fb9ae9e79ea3', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3b8bb1979e85d3eb9dff2c2bc36925c87ddc9f9', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e5d4e16bd75f85e551891a479ef1e7a64c0f9e6', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c95ac14bd9179208f357077871cb931380c98a44', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '059e159e2ab1565b26989d85e8300e42634b773f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4c2cf2fd53220dcab39f5bed507fb5526f087dd', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '873b4180756260cc077daa1d82002e1b38850dcf', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2877f9ad24c8ae9accd6c3ea61544245f170ef7f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8efb939a9c2965c334eecb9961d6c716248d75c', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3929a17eacb50695d9a2e8fc8bb842f12cf6d86e', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
420241392,multi-dim brownian motion example,"From discussion in 

https://github.com/SciML/DiffEqDevTools.jl/pull/62",True,48,https://api.github.com/repos/SciML/DiffEqNoiseProcess.jl/pulls/48,https://github.com/SciML/DiffEqNoiseProcess.jl/pull/48,closed,37,31,1,1,0,0,0,0,[],2020-05-19 16:48:23+00:00,2020-05-19 17:04:54+00:00,991.0,0:16:31,[],"[{'commit_sha': '3b7ae8fa1abe15650d21905654b70f5a87e790c0', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
420369297,Fix for Noise Grid with inplace operations,"In the old version the computation actually ""skipped"" the line  `W(W.dW,W.dZ,t)`.  `W.dW` was not updated and hence the solution was wrong. The` if isinplace(W) == False `Block already worked before.

With this change, the code below now produces a nice forward-backward solution. 
![v1](https://user-images.githubusercontent.com/42201748/82378796-192c7480-9a26-11ea-8bd2-e4824e84e444.png)


```
using StochasticDiffEq, DiffEqNoiseProcess, Plots
Œ±=1
Œ≤=1
u‚ÇÄ=1/2
f(u,p,t) = Œ±*u
g(u,p,t) = Œ≤*u
f!(du,u,p,t) = @. du=Œ±*u
dt = 1//2^(8)
tspan = (0.0,1.0)
prob1 = SDEProblem(f,g,[u‚ÇÄ],tspan)
sol1 = solve(prob1,EulerHeun(),dt=dt,save_noise=true)
_sol1 = deepcopy(sol1) # to make sure the plot is correct
W1 = NoiseGrid(
	reverse!(_sol1.t),
	reverse!(_sol1.W.W))
#W2 = NoiseWrapper(_sol1.W)
function gback(du,u,p,t)
	du[1,1] = 0
	du[2,1] = 0
	# Would be du[:,3]
	du[3,1] = g(u[3],p,t)
end
prob1r = SDEProblem(f!,gback,[0,0,sol1[end][1]],reverse(tspan),noise=W1,noise_rate_prototype = zeros(3,1))
sol1r = solve(prob1r,EulerHeun(),dt=dt)

plt = plot(sol1)
plot!(reverse!(sol1r.t),reverse!(sol1r[3,:]))

savefig(plt, ""v1.png"")
```",True,49,https://api.github.com/repos/SciML/DiffEqNoiseProcess.jl/pulls/49,https://github.com/SciML/DiffEqNoiseProcess.jl/pull/49,closed,1,1,1,1,1,0,0,0,[],2020-05-19 21:14:44+00:00,2020-05-20 01:32:49+00:00,15485.0,4:18:05,[],"[{'commit_sha': '7b83b3b6c508395116afcb16cf3f0b11c968a946', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
423197048,making noise wrapper reversible,"I added an option ""reverse"" to `NoiseWrapper` that allows us to change indexing if a reverse time evolution should be computed.

https://github.com/SciML/DiffEqNoiseProcess.jl/issues/50
https://github.com/SciML/DiffEqSensitivity.jl/issues/253

What is a bit odd is that the difference between forward and backward pass is not very good (~ 1e-1). The uploaded figure shows the difference between `sol` (forward) and `sol1` (`NoiseGrid`) for the first test. `NoiseGrid` and `NoiseWrapper` nearly coincide (1e-5).

[error.pdf](https://github.com/SciML/DiffEqNoiseProcess.jl/files/4682371/error.pdf)
",True,51,https://api.github.com/repos/SciML/DiffEqNoiseProcess.jl/pulls/51,https://github.com/SciML/DiffEqNoiseProcess.jl/pull/51,closed,235,39,4,4,3,8,0,0,[],2020-05-26 13:12:28+00:00,2020-05-31 14:40:37+00:00,437289.0,"5 days, 1:28:09","[{'comment_id': 431265077, 'comment_body': ""if W.reverse and don't need the keyword argument?"", 'comment_created': datetime.datetime(2020, 5, 27, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 431273155, 'comment_body': ""but W is the `NoiseProcess` and not the `NoiseWrapper`.. so it doesn't have the keyword reverse."", 'comment_created': datetime.datetime(2020, 5, 27, 16, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 431275458, 'comment_body': 'oh makes sense\r\n', 'comment_created': datetime.datetime(2020, 5, 27, 16, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 432039970, 'comment_body': 'this should probably bee something like `100eps(t)`', 'comment_created': datetime.datetime(2020, 5, 28, 18, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 432040030, 'comment_body': 'but also careful of zero\r\n', 'comment_created': datetime.datetime(2020, 5, 28, 18, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 432047562, 'comment_body': ""awesome. Wanted to ask you about this anyway. How should we handle the case close to 0.0?\r\n` eps(0.0) = 5.0e-324` doesn't seems to be appropriate. Should this include some atol then as well?"", 'comment_created': datetime.datetime(2020, 5, 28, 18, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 432048411, 'comment_body': 'yeah, do an `atol` based on `100eps(typeof(t))`.', 'comment_created': datetime.datetime(2020, 5, 28, 18, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 432944599, 'comment_body': 'are those updated ones fine? ', 'comment_created': datetime.datetime(2020, 5, 31, 12, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}]","[{'commit_sha': '8a52f51629935fdb1e52fe507ba51b6bae1acece', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81df9ef54b9f4fa3774bb7a13f70da23fdc7d04f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bf119a53e0a63a4f3b6de6b55f2a9a226a569ce', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33b6e9ee130792a98bea864ed8cb4a838f7c01b3', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
438173253,Generalization of second noise process for different sizes,"In weak schemes like PL1WM, we would like to have different sizes of the Noise processes. While the first noise process should have the usual size of m independent Processes, the second one should have m*(m-1)/2.  

I added a dispatch for the distribution and bridges of the Wiener processes which takes dW as an input.  Thus the proper number of random variables can be drawn.",True,53,https://api.github.com/repos/SciML/DiffEqNoiseProcess.jl/pulls/53,https://github.com/SciML/DiffEqNoiseProcess.jl/pull/53,closed,71,43,7,3,2,1,0,0,[],2020-06-22 20:56:40+00:00,2020-06-23 21:33:34+00:00,88614.0,"1 day, 0:36:54","[{'comment_id': 443897933, 'comment_body': 'why not make this form required and deprecate the other?', 'comment_created': datetime.datetime(2020, 6, 23, 0, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': 'a402388312b789e3632a996ef41c2e76cc2353a0', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '030a775cf0dffe7b859a8db7afaa5884c1fe75a8', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd83c5ff655e275f574f83239ac7851e558196334', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
439300262,change also real white noise process to new style,"Bug fix after change of input types for noise distribution and bridges in #53 .


Test error came from: 
https://github.com/SciML/StochasticDiffEq.jl/blob/9f63310b4ffc15b457079a69c1d87266690e63c6/test/adaptive/sde_complex_adaptive_mean_test.jl#L40

Adaptive Complex Mean Test: Error During Test at /home/travis/.julia/packages/SafeTestsets/A83XK/src/SafeTestsets.jl:25
 LoadError: MethodError: no method matching REAL_WHITE_NOISE_DIST(::Float64, ",True,54,https://api.github.com/repos/SciML/DiffEqNoiseProcess.jl/pulls/54,https://github.com/SciML/DiffEqNoiseProcess.jl/pull/54,closed,6,6,1,1,0,0,0,0,[],2020-06-24 15:56:53+00:00,2020-06-24 16:00:56+00:00,243.0,0:04:03,[],"[{'commit_sha': 'abadcae826252e82a37a7653664b4ef66960296a', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
444047270,extraction tests for noise values,"This solves the issue for extracting noise values as mentioned in https://github.com/SciML/StochasticDiffEq.jl/issues/324

There seems to be no further error when t is decreased by floating point error. To keep the length of the solution object the same it is still necessary to set `save_everystep = false` before extraction.",True,55,https://api.github.com/repos/SciML/DiffEqNoiseProcess.jl/pulls/55,https://github.com/SciML/DiffEqNoiseProcess.jl/pull/55,closed,63,1,3,4,1,11,0,0,[],2020-07-03 13:02:45+00:00,2020-07-04 09:27:14+00:00,73469.0,20:24:29,"[{'comment_id': 449698562, 'comment_body': 'ranges correct for this error, so instead of doing this, manually add', 'comment_created': datetime.datetime(2020, 7, 3, 20, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 449698623, 'comment_body': 'is this robust to errors in the other direction?\r\n', 'comment_created': datetime.datetime(2020, 7, 3, 20, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 449712699, 'comment_body': ""I think it should be. I added some tests which I hope would capture errors if wouldn't be robust. If we would reverse the source of NoiseWrapper for the reverse process then it would need an extra fix -- but since we keep the source in the forward time and use searchsortedfirst instead of searchsortedlast here, one basically always wants to decrease t slightly. "", 'comment_created': datetime.datetime(2020, 7, 3, 22, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 449713665, 'comment_body': ""Do you mean that the t range doesn't have the floating point error from  SciML/StochasticDiffEq.jl#324? I thought this is even necessary for the check. The time series in sol.t hosts the slightly off floating point numbers with the errors, so I am using the  t range  only for extracting the noise values at those times, and therefore I thought they should have this form. "", 'comment_created': datetime.datetime(2020, 7, 3, 22, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 449723147, 'comment_body': ""Ranges are specifically handled to do `t = tstart + i*dt` to avoid extra accumulation, so this isn't the best test"", 'comment_created': datetime.datetime(2020, 7, 4, 0, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 449723180, 'comment_body': ""On tests that aren't ranges, this might need to be relaxed more, i.e. 10eps(t) or 100eps(t)"", 'comment_created': datetime.datetime(2020, 7, 4, 0, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 449754331, 'comment_body': 'oh I got it now. ', 'comment_created': datetime.datetime(2020, 7, 4, 8, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 449755645, 'comment_body': ""yeah indeed,  a good point.. I decreased dt and checked if there are any issues.  For `dt=0.001` (as on the current commit) all tests are passing. When using `dt=0.0001` the solution array actually has size 10002, so the length checks will fail then. [ However, the important more one `@test _sol == sol` will still pass. ]\r\n\r\nI also don't find any singularity in the t values for `dt=0.0001`:\r\n```julia\r\nfindmin(sol.t[2:end]-sol.t[1:end-1]) # (9.999999999998899e-5, 1251)\r\nfindmax(sol.t[2:end]-sol.t[1:end-1]) # (0.00010000000000010001, 10001)\r\n```"", 'comment_created': datetime.datetime(2020, 7, 4, 9, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 449756713, 'comment_body': "">When using dt=0.0001 the solution array actually has size 10002, so the length checks will fail then\r\n\r\nThat's odd. Any indication as to why?"", 'comment_created': datetime.datetime(2020, 7, 4, 9, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 449756720, 'comment_body': 'probably similar floating point handling at the end of the integration', 'comment_created': datetime.datetime(2020, 7, 4, 9, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 449759866, 'comment_body': ""Yes.. I also have the endpoint from https://github.com/SciML/StochasticDiffEq.jl/blob/master/src/integrators/integrator_utils.jl#L198-L214 under suspicion, I'll check later if I can fix it. Here is the associated dt plot: \r\n![plot](https://user-images.githubusercontent.com/42201748/86510373-5f2f7300-bdef-11ea-8c08-e33e38ddff58.png)\r\n(because those are just floating point differences plot prints: `‚îå Warning: No strict ticks found\r\n‚îî @ PlotUtils ~/.julia/packages/PlotUtils/nCtbM/src/ticks.jl:283`)"", 'comment_created': datetime.datetime(2020, 7, 4, 10, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}]","[{'commit_sha': 'c5f7844800096afe002ed115ca892a9bbaf81ebf', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d5fd4c8fb3f80afc29b8b0d89e264fc38cb3c8', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ceb9eb3dc042e904779137faad079288c632b2b', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7dcc5f1a5e30b12011f169a6d7cbaaaebb9f34b', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
448146870,allow noise wrapper to start at an indx different from zero,"Adds an optional indx from which `NoiseWrapper` starts. 

This should allow us to replace `NoiseGrid` in `InterpolatingAdjoint`.
https://github.com/SciML/DiffEqSensitivity.jl/issues/253",True,56,https://api.github.com/repos/SciML/DiffEqNoiseProcess.jl/pulls/56,https://github.com/SciML/DiffEqNoiseProcess.jl/pull/56,closed,50,5,3,1,0,0,0,0,[],2020-07-13 09:56:19+00:00,2020-07-13 10:27:04+00:00,1845.0,0:30:45,[],"[{'commit_sha': '9b8bcd1f6d61b298c8280d232e7362ef9c9afdc6', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
448146870,allow noise wrapper to start at an indx different from zero,"Adds an optional indx from which `NoiseWrapper` starts. 

This should allow us to replace `NoiseGrid` in `InterpolatingAdjoint`.
https://github.com/SciML/DiffEqSensitivity.jl/issues/253",True,56,https://api.github.com/repos/SciML/DiffEqNoiseProcess.jl/pulls/56,https://github.com/SciML/DiffEqNoiseProcess.jl/pull/56,closed,50,5,3,1,0,0,0,0,[],2020-07-13 09:56:19+00:00,2020-07-13 10:27:04+00:00,1845.0,0:30:45,[],"[{'commit_sha': '9b8bcd1f6d61b298c8280d232e7362ef9c9afdc6', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
471843782,Ito SDE reversal,"Cleans two (small) index errors in NoiseGrid and adds reversal tests for Ito SDEs (useful for https://github.com/SciML/DiffEqSensitivity.jl/pull/317 and https://github.com/SciML/DiffEqSensitivity.jl/issues/279)

I'd like to note that I had problems with the reversal of the Ito SDE using `SOSRI()` (which is also a Stochastic Runge Kutta solver for Ito SDEs). While for `EM()` the tests show that the proper correction factor for the reverse Ito SDEs is  given upon subtraction of 2 times the  standard Ito-Stratonovich factor, for `SOSRI()` the tests were actually passing if I omit the correction.
(Maybe @mschauer has an idea here?)

Otherwise it should be fine if all other tests are passing",True,62,https://api.github.com/repos/SciML/DiffEqNoiseProcess.jl/pulls/62,https://github.com/SciML/DiffEqNoiseProcess.jl/pull/62,closed,301,108,3,6,0,0,0,0,[],2020-08-21 20:34:12+00:00,2020-08-24 15:50:15+00:00,242163.0,"2 days, 19:16:03",[],"[{'commit_sha': 'b3e7beb7987898a5ebf74693d89f77d21b513902', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd59f7a5e7f4133a5c2a596b448c9e41e9e39f6a9', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6070e06a9e27c2d0c3cf41ffd743e1834e9c0ac', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f77dfea0984a9f7876abc10e9e8cc3cf8563540', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '593fd53691738bf8e91029275e85d6d8962d7873', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06b67fc355343a466c4b9c47bcdf2012c8dca2a0', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
437317832,reduction for EnsembleCPUArray(),This adds some switches to support the reduction mechanism from [the docs](https://docs.sciml.ai/dev/features/ensemble/) also for ` EnsembleCPUArray()/  EnsembleGPUArray()` . ,True,59,https://api.github.com/repos/SciML/DiffEqGPU.jl/pulls/59,https://github.com/SciML/DiffEqGPU.jl/pull/59,closed,75,4,3,2,1,1,0,0,[],2020-06-19 22:25:53+00:00,2020-06-19 22:55:05+00:00,1752.0,0:29:12,"[{'comment_id': 443070660, 'comment_body': '```suggestion\r\n@time @testset ""Reduction"" begin include(""reduction.jl"") end\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 22, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '238898c16b14b25d168a71767eaf6a5491c2b930', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a798a479a7f281ca8b915cb1499aa792bb64896c', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
458714783,Ito sense for SDE adjoints,"@ChrisRackauckas  Could you check if the way to add the Ito sense goes in the right direction? 

I thought an additional type for the transformed function with its own vips are the best way to do it. However, I couldn't resolve up to now all errors in the vjps from the SensitivityFunction. (ReverseDiff is the only one which I could make running through the code but also there the gradients look slightly off.. )",True,317,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/317,https://github.com/SciML/SciMLSensitivity.jl/pull/317,closed,800,8,11,21,3,0,0,0,[],2020-07-29 21:30:05+00:00,2020-11-17 12:37:27+00:00,9558442.0,"110 days, 15:07:22",[],"[{'commit_sha': '1c3996aab1866c968f435a1a8b88ca8e786d6c5a', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf2902818dfdba160091862445ab3cebfccfaf6f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ed05d58a14763f7e68582cd1fd9873543d4f180', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb2828a52ad4f6656a31a6386ed2320c3e214c95', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0049db225ba536ba9c58f3635ab9d0e4e4d25571', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff06823a0451f44b6eae551b3b13cb41f25117c4', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '760b4cecdcb3b96be45dd39f1a109b008c544061', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e10599060a8640fc546398cc63379636fee8e0e', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ab41c20f931029fc5a964131b4c5ba7cb86aa9c', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0b4972d3bbe09fab99e00a4268e7761cd6a4540', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72357cff54e62f844c3cabf2587cd604c73fd49d', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c6256790f9834d1be1c6a639a85fb9ae9e79ea3', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3b8bb1979e85d3eb9dff2c2bc36925c87ddc9f9', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e5d4e16bd75f85e551891a479ef1e7a64c0f9e6', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c95ac14bd9179208f357077871cb931380c98a44', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '059e159e2ab1565b26989d85e8300e42634b773f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4c2cf2fd53220dcab39f5bed507fb5526f087dd', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '873b4180756260cc077daa1d82002e1b38850dcf', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2877f9ad24c8ae9accd6c3ea61544245f170ef7f', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8efb939a9c2965c334eecb9961d6c716248d75c', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3929a17eacb50695d9a2e8fc8bb842f12cf6d86e', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
420105286,noise wrapper alternative,"Without the NoiseWrapper alternative the convergence simulations look like case1.pdf.
The final slope is then a bad estimate and basically just depend on how much dts are used. 

The lines in this PR which actually solve the problems are:
```
for i in 1:length(dts)
        W1 = NoiseWrapper(_sol.W)
        _prob = remake(prob,u0=prob.u0,p=prob.p,tspan=prob.tspan,noise=W1,noise_rate_prototype = prob.noise_rate_prototype)
```
which repeat the noise for each dt.
Then the plots look like case2.pdf .

This also fixes the NaN values obtained in:
https://github.com/SciML/StochasticDiffEq.jl/pull/317/
for `EM()` and `EulerHeun()`.

[case1.pdf](https://github.com/SciML/DiffEqDevTools.jl/files/4650575/case1.pdf)
[case2.pdf](https://github.com/SciML/DiffEqDevTools.jl/files/4650577/case2.pdf)
",True,62,https://api.github.com/repos/SciML/DiffEqDevTools.jl/pulls/62,https://github.com/SciML/DiffEqDevTools.jl/pull/62,closed,47,22,2,1,6,0,0,0,[],2020-05-19 13:03:14+00:00,2020-05-19 18:27:41+00:00,19467.0,5:24:27,[],"[{'commit_sha': 'a65c1790237a996b05583f7299847a6727157315', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
468426583,test_convergence() for ensemble simulations,"Should allow us to replace the current workflow

```julia

function generate_weak_solutions(prob, alg, dts, numtraj; ensemblealg=EnsembleThreads())
  sols = []
  for i in 1:length(dts)
    sol = solve(prob,alg;ensemblealg=ensemblealg,dt=dts[i],save_start=false,save_everystep=false,weak_timeseries_errors=false,weak_dense_errors=false,trajectories=Int(numtraj))
    println(i)
    push!(sols,sol)
  end
  return sols
end

_solutions = @time generate_weak_solutions(ensemble_prob, PL1WM(), dts, numtraj, ensemblealg=EnsembleThreads())

errors =  [LinearAlgebra.norm(Statistics.mean(sol.u) .- u‚ÇÄ.*exp(1.0*(p[1]))) for sol in _solutions]
m = log(errors[end]/errors[1])/log(dts[end]/dts[1])
@test -(m-2) < 0.3

```
by

``` julia 
sim = test_convergence(dts,ensemble_prob,DRI1(),save_everystep=false,trajectories=numtraj,save_start=false,adaptive=false,weak_timeseries_errors=false,weak_dense_errors=false,
  expected_value=exp(-3.0)
  )

such that also `plot(sim)` can be used

```",True,74,https://api.github.com/repos/SciML/DiffEqDevTools.jl/pulls/74,https://github.com/SciML/DiffEqDevTools.jl/pull/74,closed,53,21,2,4,1,0,0,0,[],2020-08-16 10:27:04+00:00,2020-08-16 14:00:33+00:00,12809.0,3:33:29,[],"[{'commit_sha': 'bfdb18df9d0c60088b17e79c7b48d9bd0fc0e0a3', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be178490c7867fb91bc591b65acf13ec1c41a5c0', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc78b2e63613d7a6cf0db9b8c013a97c96e33ffe', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93a8db95642611ceb419da4dbd004ba9fc41402b', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
468776017,Work Precision Set for EnsembleProblem,"This PR adds the dispatch to compute a WorkPrecisionSet for weak errors for an ensemble problem. 
For the sake of completeness, I also added a test for test_convergence from PR #74 .

The work precision plot for the test in  test/analyticless_stochastic_wp.jl looks as follows:
![WorkPrecision](https://user-images.githubusercontent.com/42201748/90391969-512b6e00-e08e-11ea-9723-67b28921bca6.png)
",True,75,https://api.github.com/repos/SciML/DiffEqDevTools.jl/pulls/75,https://github.com/SciML/DiffEqDevTools.jl/pull/75,closed,220,4,4,2,0,0,0,0,[],2020-08-17 11:38:31+00:00,2020-08-17 15:01:48+00:00,12197.0,3:23:17,[],"[{'commit_sha': '96aa1b4c8ab01db2e45aea4ee184e2b8769104ad', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a0cfb6ab884bca527d3a40d175c548d93d20344', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71
413935339,adjusted tests,,True,503,https://api.github.com/repos/SciML/DiffEqBase.jl/pulls/503,https://github.com/SciML/DiffEqBase.jl/pull/503,closed,2,2,1,1,0,0,0,0,[],2020-05-06 07:54:47+00:00,2020-05-06 11:53:09+00:00,14302.0,3:58:22,[],"[{'commit_sha': '0c17113f0bc489899ce1805eedd53e1a8f4e063a', 'committer_username': 'frankschae', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 7, 53, 23, tzinfo=datetime.timezone.utc)}]",,42201748,,User,,32,,37,71

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
71645359,StochasticDiffEq.jl,SciML/StochasticDiffEq.jl,Julia,65,242,15,54,2279,100,15,10,"[{'id': 1940729078, 'number': 571, 'closed': None, 'created': datetime.datetime(2024, 6, 26, 19, 27, 44, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 693, 'deletions': 2, 'state': 'open'}, {'id': 1262665164, 'number': 522, 'closed': None, 'created': datetime.datetime(2023, 3, 3, 21, 58, 7, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 6, 'deletions': 1, 'state': 'open'}, {'id': 1012336148, 'number': 489, 'closed': datetime.datetime(2022, 8, 5, 19, 21, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 20, 43, 5, tzinfo=datetime.timezone.utc), 'time_taken': 599914.0, 'time_delta': '6 days, 22:38:34', 'additions': 246, 'deletions': 111, 'state': 'closed'}, {'id': 1000231138, 'number': 483, 'closed': datetime.datetime(2022, 7, 20, 19, 54, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 19, 2, 27, 40, tzinfo=datetime.timezone.utc), 'time_taken': 149223.0, 'time_delta': '1 day, 17:27:03', 'additions': 178, 'deletions': 139, 'state': 'closed'}, {'id': 841676576, 'number': 459, 'closed': datetime.datetime(2022, 2, 20, 23, 21, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 7, 12, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1162178.0, 'time_delta': '13 days, 10:49:38', 'additions': 262, 'deletions': 798, 'state': 'closed'}, {'id': 697753297, 'number': 428, 'closed': datetime.datetime(2021, 7, 27, 16, 48, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 10, 56, 30, tzinfo=datetime.timezone.utc), 'time_taken': 21131.0, 'time_delta': '5:52:11', 'additions': 163, 'deletions': 204, 'state': 'closed'}, {'id': 602655991, 'number': 409, 'closed': datetime.datetime(2021, 3, 30, 19, 31, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 29, 10, 45, 46, tzinfo=datetime.timezone.utc), 'time_taken': 117921.0, 'time_delta': '1 day, 8:45:21', 'additions': 292, 'deletions': 185, 'state': 'closed'}, {'id': 552742941, 'number': 383, 'closed': datetime.datetime(2021, 1, 19, 19, 16, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 11, 13, 30, 8, tzinfo=datetime.timezone.utc), 'time_taken': 711986.0, 'time_delta': '8 days, 5:46:26', 'additions': 228, 'deletions': 57, 'state': 'closed'}, {'id': 488583276, 'number': 360, 'closed': datetime.datetime(2020, 9, 17, 14, 52, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 17, 10, 58, tzinfo=datetime.timezone.utc), 'time_taken': 14044.0, 'time_delta': '3:54:04', 'additions': 599, 'deletions': 727, 'state': 'closed'}, {'id': 466361754, 'number': 348, 'closed': datetime.datetime(2020, 8, 11, 22, 18, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 21, 20, 58, tzinfo=datetime.timezone.utc), 'time_taken': 3436.0, 'time_delta': '0:57:16', 'additions': 776, 'deletions': 92, 'state': 'closed'}, {'id': 465534973, 'number': 347, 'closed': datetime.datetime(2020, 9, 4, 17, 28, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 10, 14, 25, 51, tzinfo=datetime.timezone.utc), 'time_taken': 2170933.0, 'time_delta': '25 days, 3:02:13', 'additions': 760, 'deletions': 240, 'state': 'closed'}, {'id': 457292058, 'number': 343, 'closed': datetime.datetime(2020, 7, 28, 18, 14, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 17, 10, 24, tzinfo=datetime.timezone.utc), 'time_taken': 90252.0, 'time_delta': '1 day, 1:04:12', 'additions': 503, 'deletions': 4, 'state': 'closed'}, {'id': 456227229, 'number': 342, 'closed': datetime.datetime(2020, 7, 25, 0, 13, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 11, 9, 37, tzinfo=datetime.timezone.utc), 'time_taken': 47031.0, 'time_delta': '13:03:51', 'additions': 662, 'deletions': 0, 'state': 'closed'}, {'id': 452060988, 'number': 340, 'closed': datetime.datetime(2020, 7, 22, 12, 58, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 18, 18, 7, 18, tzinfo=datetime.timezone.utc), 'time_taken': 327062.0, 'time_delta': '3 days, 18:51:02', 'additions': 18, 'deletions': 5, 'state': 'closed'}, {'id': 447653817, 'number': 338, 'closed': datetime.datetime(2020, 7, 11, 2, 7, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 21, 34, 59, tzinfo=datetime.timezone.utc), 'time_taken': 16360.0, 'time_delta': '4:32:40', 'additions': 82, 'deletions': 0, 'state': 'closed'}, {'id': 441080531, 'number': 337, 'closed': datetime.datetime(2020, 7, 15, 11, 36, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 28, 16, 28, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1451316.0, 'time_delta': '16 days, 19:08:36', 'additions': 883, 'deletions': 47, 'state': 'closed'}, {'id': 438832964, 'number': 334, 'closed': datetime.datetime(2020, 6, 24, 21, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 21, 31, 31, tzinfo=datetime.timezone.utc), 'time_taken': 85529.0, 'time_delta': '23:45:29', 'additions': 700, 'deletions': 5, 'state': 'closed'}, {'id': 436123583, 'number': 333, 'closed': datetime.datetime(2020, 6, 18, 11, 56, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 22, 14, 25, tzinfo=datetime.timezone.utc), 'time_taken': 49321.0, 'time_delta': '13:42:01', 'additions': 1178, 'deletions': 4, 'state': 'closed'}, {'id': 435809455, 'number': 332, 'closed': datetime.datetime(2020, 7, 13, 5, 30, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 12, 11, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2222369.0, 'time_delta': '25 days, 17:19:29', 'additions': 952, 'deletions': 323, 'state': 'closed'}, {'id': 435482467, 'number': 331, 'closed': datetime.datetime(2020, 6, 17, 12, 8, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 21, 43, 57, tzinfo=datetime.timezone.utc), 'time_taken': 51862.0, 'time_delta': '14:24:22', 'additions': 337, 'deletions': 20, 'state': 'closed'}, {'id': 432683664, 'number': 329, 'closed': datetime.datetime(2020, 6, 11, 7, 46, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 20, 30, 24, tzinfo=datetime.timezone.utc), 'time_taken': 40539.0, 'time_delta': '11:15:39', 'additions': 409, 'deletions': 56, 'state': 'closed'}, {'id': 432451951, 'number': 328, 'closed': datetime.datetime(2020, 6, 10, 20, 3, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 13, 22, 3, tzinfo=datetime.timezone.utc), 'time_taken': 24106.0, 'time_delta': '6:41:46', 'additions': 1148, 'deletions': 9, 'state': 'closed'}, {'id': 432032357, 'number': 327, 'closed': datetime.datetime(2020, 6, 9, 20, 9, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 19, 59, tzinfo=datetime.timezone.utc), 'time_taken': 617.0, 'time_delta': '0:10:17', 'additions': 88, 'deletions': 102, 'state': 'closed'}, {'id': 419974054, 'number': 317, 'closed': datetime.datetime(2020, 5, 19, 19, 33, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 8, 52, 38, tzinfo=datetime.timezone.utc), 'time_taken': 38425.0, 'time_delta': '10:40:25', 'additions': 28, 'deletions': 12, 'state': 'closed'}, {'id': 419378883, 'number': 305, 'closed': datetime.datetime(2020, 5, 18, 14, 54, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 18, 9, 35, 37, tzinfo=datetime.timezone.utc), 'time_taken': 19114.0, 'time_delta': '5:18:34', 'additions': 18, 'deletions': 1, 'state': 'closed'}, {'id': 416141194, 'number': 289, 'closed': datetime.datetime(2020, 5, 21, 22, 1, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 11, 14, 28, 14, tzinfo=datetime.timezone.utc), 'time_taken': 891173.0, 'time_delta': '10 days, 7:32:53', 'additions': 220, 'deletions': 70, 'state': 'closed'}, {'id': 415756991, 'number': 288, 'closed': None, 'created': datetime.datetime(2020, 5, 10, 17, 57, 34, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 38, 'deletions': 16, 'state': 'open'}, {'id': 404593247, 'number': 285, 'closed': datetime.datetime(2020, 4, 24, 16, 12, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 16, 18, 29, 24, tzinfo=datetime.timezone.utc), 'time_taken': 682994.0, 'time_delta': '7 days, 21:43:14', 'additions': 374, 'deletions': 22, 'state': 'closed'}, {'id': 399711208, 'number': 281, 'closed': datetime.datetime(2020, 4, 6, 15, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 6, 15, 5, 51, tzinfo=datetime.timezone.utc), 'time_taken': 849.0, 'time_delta': '0:14:09', 'additions': 1404, 'deletions': 42, 'state': 'closed'}, {'id': 382452120, 'number': 273, 'closed': datetime.datetime(2020, 3, 2, 19, 16, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 2, 15, 35, 33, tzinfo=datetime.timezone.utc), 'time_taken': 13244.0, 'time_delta': '3:40:44', 'additions': 27, 'deletions': 6, 'state': 'closed'}, {'id': 382026018, 'number': 272, 'closed': datetime.datetime(2020, 3, 1, 13, 10, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 1, 10, 27, 58, tzinfo=datetime.timezone.utc), 'time_taken': 9763.0, 'time_delta': '2:42:43', 'additions': 6, 'deletions': 3, 'state': 'closed'}, {'id': 381862576, 'number': 270, 'closed': datetime.datetime(2020, 2, 29, 17, 12, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 29, 14, 58, 23, tzinfo=datetime.timezone.utc), 'time_taken': 8022.0, 'time_delta': '2:13:42', 'additions': 76, 'deletions': 0, 'state': 'closed'}, {'id': 380992488, 'number': 269, 'closed': datetime.datetime(2020, 4, 3, 2, 2, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 27, 18, 0, 9, tzinfo=datetime.timezone.utc), 'time_taken': 3052963.0, 'time_delta': '35 days, 8:02:43', 'additions': 659, 'deletions': 6, 'state': 'closed'}]"
72665210,SciMLSensitivity.jl,SciML/SciMLSensitivity.jl,Julia,71,329,19,53,3298,105,30,10,"[{'id': 1492542855, 'number': 887, 'closed': datetime.datetime(2023, 9, 16, 1, 44, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 28, 18, 47, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1580239.0, 'time_delta': '18 days, 6:57:19', 'additions': 44, 'deletions': 9, 'state': 'closed'}, {'id': 1460618635, 'number': 857, 'closed': datetime.datetime(2023, 8, 8, 15, 42, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 3, 0, 59, 44, tzinfo=datetime.timezone.utc), 'time_taken': 484972.0, 'time_delta': '5 days, 14:42:52', 'additions': 27, 'deletions': 15, 'state': 'closed'}, {'id': 1444778133, 'number': 853, 'closed': datetime.datetime(2023, 7, 31, 6, 19, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 21, 17, 11, 29, tzinfo=datetime.timezone.utc), 'time_taken': 824886.0, 'time_delta': '9 days, 13:08:06', 'additions': 3629, 'deletions': 3421, 'state': 'closed'}, {'id': 1189834370, 'number': 763, 'closed': datetime.datetime(2023, 1, 9, 15, 51, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 8, 14, 2, 39, tzinfo=datetime.timezone.utc), 'time_taken': 92949.0, 'time_delta': '1 day, 1:49:09', 'additions': 3, 'deletions': 4, 'state': 'closed'}, {'id': 1189411673, 'number': 762, 'closed': datetime.datetime(2023, 1, 10, 21, 39, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 7, 17, 35, 28, tzinfo=datetime.timezone.utc), 'time_taken': 273829.0, 'time_delta': '3 days, 4:03:49', 'additions': 324, 'deletions': 200, 'state': 'closed'}, {'id': 1101924969, 'number': 747, 'closed': datetime.datetime(2022, 11, 16, 19, 33, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 27, 16, 7, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1740358.0, 'time_delta': '20 days, 3:25:58', 'additions': 197, 'deletions': 100, 'state': 'closed'}, {'id': 1061924591, 'number': 732, 'closed': datetime.datetime(2023, 1, 6, 13, 20, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 20, 18, 14, 40, tzinfo=datetime.timezone.utc), 'time_taken': 9313532.0, 'time_delta': '107 days, 19:05:32', 'additions': 96, 'deletions': 39, 'state': 'closed'}, {'id': 1055145870, 'number': 731, 'closed': datetime.datetime(2022, 9, 15, 3, 33, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 13, 20, 18, 51, tzinfo=datetime.timezone.utc), 'time_taken': 112494.0, 'time_delta': '1 day, 7:14:54', 'additions': 107, 'deletions': 22, 'state': 'closed'}, {'id': 1053741475, 'number': 730, 'closed': datetime.datetime(2022, 9, 14, 4, 42, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 12, 18, 39, 4, tzinfo=datetime.timezone.utc), 'time_taken': 122621.0, 'time_delta': '1 day, 10:03:41', 'additions': 58, 'deletions': 2, 'state': 'closed'}, {'id': 1016774823, 'number': 703, 'closed': datetime.datetime(2022, 8, 5, 4, 14, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 3, 20, 23, 55, tzinfo=datetime.timezone.utc), 'time_taken': 114612.0, 'time_delta': '1 day, 7:50:12', 'additions': 67, 'deletions': 12, 'state': 'closed'}, {'id': 1002858472, 'number': 692, 'closed': datetime.datetime(2022, 7, 21, 1, 10, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 20, 19, 58, 40, tzinfo=datetime.timezone.utc), 'time_taken': 18727.0, 'time_delta': '5:12:07', 'additions': 249, 'deletions': 86, 'state': 'closed'}, {'id': 999739091, 'number': 690, 'closed': datetime.datetime(2022, 7, 19, 4, 38, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 18, 18, 16, 32, tzinfo=datetime.timezone.utc), 'time_taken': 37330.0, 'time_delta': '10:22:10', 'additions': 197, 'deletions': 45, 'state': 'closed'}, {'id': 993338804, 'number': 687, 'closed': datetime.datetime(2022, 7, 12, 0, 23, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 11, 16, 56, 3, tzinfo=datetime.timezone.utc), 'time_taken': 26845.0, 'time_delta': '7:27:25', 'additions': 63, 'deletions': 3, 'state': 'closed'}, {'id': 992028546, 'number': 684, 'closed': datetime.datetime(2022, 7, 10, 4, 30, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 8, 20, 46, 32, tzinfo=datetime.timezone.utc), 'time_taken': 114228.0, 'time_delta': '1 day, 7:43:48', 'additions': 61, 'deletions': 13, 'state': 'closed'}, {'id': 980491078, 'number': 675, 'closed': datetime.datetime(2022, 7, 6, 20, 26, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 27, 20, 13, 20, tzinfo=datetime.timezone.utc), 'time_taken': 778400.0, 'time_delta': '9 days, 0:13:20', 'additions': 996, 'deletions': 698, 'state': 'closed'}, {'id': 977418672, 'number': 662, 'closed': datetime.datetime(2022, 6, 25, 8, 51, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 23, 16, 59, 20, tzinfo=datetime.timezone.utc), 'time_taken': 143559.0, 'time_delta': '1 day, 15:52:39', 'additions': 126, 'deletions': 147, 'state': 'closed'}, {'id': 975747255, 'number': 657, 'closed': datetime.datetime(2022, 6, 25, 8, 41, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 22, 20, 36, 12, tzinfo=datetime.timezone.utc), 'time_taken': 216327.0, 'time_delta': '2 days, 12:05:27', 'additions': 688, 'deletions': 570, 'state': 'closed'}, {'id': 966112477, 'number': 621, 'closed': datetime.datetime(2022, 6, 13, 19, 57, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 13, 19, 34, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1370.0, 'time_delta': '0:22:50', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 964307272, 'number': 606, 'closed': datetime.datetime(2022, 6, 11, 2, 40, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 10, 16, 3, 10, tzinfo=datetime.timezone.utc), 'time_taken': 38220.0, 'time_delta': '10:37:00', 'additions': 54, 'deletions': 0, 'state': 'closed'}, {'id': 960930866, 'number': 602, 'closed': datetime.datetime(2022, 6, 9, 21, 59, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 7, 21, 37, 55, tzinfo=datetime.timezone.utc), 'time_taken': 174086.0, 'time_delta': '2 days, 0:21:26', 'additions': 198, 'deletions': 69, 'state': 'closed'}, {'id': 959332705, 'number': 600, 'closed': datetime.datetime(2022, 6, 7, 0, 59, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 6, 16, 57, 4, tzinfo=datetime.timezone.utc), 'time_taken': 28935.0, 'time_delta': '8:02:15', 'additions': 716, 'deletions': 677, 'state': 'closed'}, {'id': 954162210, 'number': 589, 'closed': datetime.datetime(2022, 6, 1, 16, 17, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 1, 15, 22, 53, tzinfo=datetime.timezone.utc), 'time_taken': 3282.0, 'time_delta': '0:54:42', 'additions': 119, 'deletions': 32, 'state': 'closed'}, {'id': 952502423, 'number': 588, 'closed': datetime.datetime(2022, 6, 1, 13, 11, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 31, 22, 59, 33, tzinfo=datetime.timezone.utc), 'time_taken': 51137.0, 'time_delta': '14:12:17', 'additions': 189, 'deletions': 112, 'state': 'closed'}, {'id': 951282590, 'number': 587, 'closed': datetime.datetime(2022, 5, 30, 21, 33, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 30, 19, 43, 24, tzinfo=datetime.timezone.utc), 'time_taken': 6599.0, 'time_delta': '1:49:59', 'additions': 48, 'deletions': 14, 'state': 'closed'}, {'id': 949608422, 'number': 580, 'closed': datetime.datetime(2022, 6, 5, 11, 0, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 27, 18, 13, 2, tzinfo=datetime.timezone.utc), 'time_taken': 751648.0, 'time_delta': '8 days, 16:47:28', 'additions': 24, 'deletions': 11, 'state': 'closed'}, {'id': 908824096, 'number': 570, 'closed': datetime.datetime(2022, 5, 10, 6, 27, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 13, 11, 34, 17, tzinfo=datetime.timezone.utc), 'time_taken': 2314421.0, 'time_delta': '26 days, 18:53:41', 'additions': 156, 'deletions': 117, 'state': 'closed'}, {'id': 898703775, 'number': 565, 'closed': datetime.datetime(2022, 6, 7, 13, 12, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 4, 8, 14, 21, tzinfo=datetime.timezone.utc), 'time_taken': 5547476.0, 'time_delta': '64 days, 4:57:56', 'additions': 28, 'deletions': 17, 'state': 'closed'}, {'id': 861213032, 'number': 557, 'closed': datetime.datetime(2022, 3, 1, 14, 39, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 23, 9, 39, 53, tzinfo=datetime.timezone.utc), 'time_taken': 536381.0, 'time_delta': '6 days, 4:59:41', 'additions': 201, 'deletions': 162, 'state': 'closed'}, {'id': 817068848, 'number': 536, 'closed': datetime.datetime(2022, 1, 10, 3, 35, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 9, 16, 36, 31, tzinfo=datetime.timezone.utc), 'time_taken': 39524.0, 'time_delta': '10:58:44', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 770937857, 'number': 507, 'closed': datetime.datetime(2022, 2, 3, 22, 58, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 1, 22, 41, 33, tzinfo=datetime.timezone.utc), 'time_taken': 8122615.0, 'time_delta': '94 days, 0:16:55', 'additions': 204, 'deletions': 59, 'state': 'closed'}, {'id': 764874528, 'number': 505, 'closed': datetime.datetime(2021, 10, 26, 16, 48, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 24, 13, 31, 42, tzinfo=datetime.timezone.utc), 'time_taken': 184623.0, 'time_delta': '2 days, 3:17:03', 'additions': 26, 'deletions': 5, 'state': 'closed'}, {'id': 743635710, 'number': 496, 'closed': datetime.datetime(2021, 10, 12, 11, 42, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 27, 16, 34, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1278505.0, 'time_delta': '14 days, 19:08:25', 'additions': 76, 'deletions': 2, 'state': 'closed'}, {'id': 726759245, 'number': 488, 'closed': datetime.datetime(2021, 9, 12, 11, 55, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 3, 12, 15, 36, tzinfo=datetime.timezone.utc), 'time_taken': 776415.0, 'time_delta': '8 days, 23:40:15', 'additions': 670, 'deletions': 17, 'state': 'closed'}, {'id': 722453959, 'number': 486, 'closed': datetime.datetime(2021, 8, 30, 23, 5, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 30, 12, 39, 46, tzinfo=datetime.timezone.utc), 'time_taken': 37562.0, 'time_delta': '10:26:02', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 715760124, 'number': 476, 'closed': datetime.datetime(2021, 8, 19, 15, 41, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 19, 9, 24, 19, tzinfo=datetime.timezone.utc), 'time_taken': 22638.0, 'time_delta': '6:17:18', 'additions': 99, 'deletions': 6, 'state': 'closed'}, {'id': 714078835, 'number': 475, 'closed': datetime.datetime(2021, 8, 17, 18, 40, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 17, 9, 38, 22, tzinfo=datetime.timezone.utc), 'time_taken': 32503.0, 'time_delta': '9:01:43', 'additions': 55, 'deletions': 0, 'state': 'closed'}, {'id': 713390838, 'number': 474, 'closed': datetime.datetime(2021, 8, 16, 22, 0, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 16, 12, 23, 8, tzinfo=datetime.timezone.utc), 'time_taken': 34656.0, 'time_delta': '9:37:36', 'additions': 53, 'deletions': 33, 'state': 'closed'}, {'id': 688204227, 'number': 445, 'closed': datetime.datetime(2021, 8, 13, 18, 44, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 12, 21, 52, 5, tzinfo=datetime.timezone.utc), 'time_taken': 2753538.0, 'time_delta': '31 days, 20:52:18', 'additions': 528, 'deletions': 111, 'state': 'closed'}, {'id': 687190701, 'number': 444, 'closed': datetime.datetime(2021, 7, 10, 22, 44, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 10, 14, 25, 42, tzinfo=datetime.timezone.utc), 'time_taken': 29920.0, 'time_delta': '8:18:40', 'additions': 38, 'deletions': 8, 'state': 'closed'}, {'id': 687188524, 'number': 443, 'closed': datetime.datetime(2021, 7, 10, 18, 33, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 10, 14, 8, 34, tzinfo=datetime.timezone.utc), 'time_taken': 15890.0, 'time_delta': '4:24:50', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 684476791, 'number': 442, 'closed': datetime.datetime(2021, 7, 10, 12, 24, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 15, 27, 46, tzinfo=datetime.timezone.utc), 'time_taken': 334603.0, 'time_delta': '3 days, 20:56:43', 'additions': 38, 'deletions': 13, 'state': 'closed'}, {'id': 681950970, 'number': 437, 'closed': datetime.datetime(2021, 7, 1, 16, 38, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 15, 14, 2, tzinfo=datetime.timezone.utc), 'time_taken': 5057.0, 'time_delta': '1:24:17', 'additions': 608, 'deletions': 5, 'state': 'closed'}, {'id': 669891874, 'number': 423, 'closed': datetime.datetime(2021, 6, 16, 8, 41, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 21, 34, 28, tzinfo=datetime.timezone.utc), 'time_taken': 126419.0, 'time_delta': '1 day, 11:06:59', 'additions': 403, 'deletions': 59, 'state': 'closed'}, {'id': 669442671, 'number': 422, 'closed': datetime.datetime(2021, 6, 14, 12, 57, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 10, 23, 58, tzinfo=datetime.timezone.utc), 'time_taken': 9232.0, 'time_delta': '2:33:52', 'additions': 218, 'deletions': 30, 'state': 'closed'}, {'id': 667382269, 'number': 420, 'closed': datetime.datetime(2021, 6, 12, 2, 28, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 20, 41, 21, tzinfo=datetime.timezone.utc), 'time_taken': 107246.0, 'time_delta': '1 day, 5:47:26', 'additions': 497, 'deletions': 3, 'state': 'closed'}, {'id': 663902516, 'number': 419, 'closed': datetime.datetime(2021, 6, 8, 16, 30, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 7, 20, 46, 59, tzinfo=datetime.timezone.utc), 'time_taken': 71024.0, 'time_delta': '19:43:44', 'additions': 1, 'deletions': 2, 'state': 'closed'}, {'id': 663525183, 'number': 418, 'closed': datetime.datetime(2021, 6, 7, 14, 18, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 7, 12, 38, 13, tzinfo=datetime.timezone.utc), 'time_taken': 5998.0, 'time_delta': '1:39:58', 'additions': 56, 'deletions': 27, 'state': 'closed'}, {'id': 661798382, 'number': 417, 'closed': datetime.datetime(2021, 6, 6, 17, 48, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 4, 14, 7, 56, tzinfo=datetime.timezone.utc), 'time_taken': 186057.0, 'time_delta': '2 days, 3:40:57', 'additions': 134, 'deletions': 36, 'state': 'closed'}, {'id': 656792632, 'number': 416, 'closed': datetime.datetime(2021, 5, 28, 19, 35, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 28, 16, 52, 56, tzinfo=datetime.timezone.utc), 'time_taken': 9744.0, 'time_delta': '2:42:24', 'additions': 610, 'deletions': 578, 'state': 'closed'}, {'id': 650146126, 'number': 415, 'closed': datetime.datetime(2021, 5, 22, 12, 33, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 21, 16, 58, 44, tzinfo=datetime.timezone.utc), 'time_taken': 70459.0, 'time_delta': '19:34:19', 'additions': 194, 'deletions': 123, 'state': 'closed'}, {'id': 602660454, 'number': 401, 'closed': datetime.datetime(2021, 3, 30, 23, 44, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 29, 10, 52, 51, tzinfo=datetime.timezone.utc), 'time_taken': 132678.0, 'time_delta': '1 day, 12:51:18', 'additions': 1057, 'deletions': 145, 'state': 'closed'}, {'id': 559073598, 'number': 381, 'closed': datetime.datetime(2021, 1, 21, 13, 15, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 21, 10, 53, tzinfo=datetime.timezone.utc), 'time_taken': 8573.0, 'time_delta': '2:22:53', 'additions': 180, 'deletions': 6, 'state': 'closed'}, {'id': 458714783, 'number': 317, 'closed': datetime.datetime(2020, 11, 17, 12, 37, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 21, 30, 5, tzinfo=datetime.timezone.utc), 'time_taken': 9558442.0, 'time_delta': '110 days, 15:07:22', 'additions': 800, 'deletions': 8, 'state': 'closed'}, {'id': 449773339, 'number': 305, 'closed': datetime.datetime(2020, 7, 25, 21, 50, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 22, 25, 46, tzinfo=datetime.timezone.utc), 'time_taken': 861876.0, 'time_delta': '9 days, 23:24:36', 'additions': 386, 'deletions': 99, 'state': 'closed'}, {'id': 449525348, 'number': 303, 'closed': datetime.datetime(2020, 7, 15, 15, 18, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 14, 37, 6, tzinfo=datetime.timezone.utc), 'time_taken': 2488.0, 'time_delta': '0:41:28', 'additions': 56, 'deletions': 6, 'state': 'closed'}, {'id': 448217044, 'number': 299, 'closed': datetime.datetime(2020, 7, 15, 15, 32, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 12, 15, 19, tzinfo=datetime.timezone.utc), 'time_taken': 184613.0, 'time_delta': '2 days, 3:16:53', 'additions': 5, 'deletions': 6, 'state': 'closed'}, {'id': 447673925, 'number': 298, 'closed': datetime.datetime(2020, 7, 11, 2, 5, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 22, 50, 40, tzinfo=datetime.timezone.utc), 'time_taken': 11674.0, 'time_delta': '3:14:34', 'additions': 56, 'deletions': 0, 'state': 'closed'}, {'id': 446193341, 'number': 295, 'closed': datetime.datetime(2020, 7, 10, 11, 44, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 11, 54, 56, tzinfo=datetime.timezone.utc), 'time_taken': 172184.0, 'time_delta': '1 day, 23:49:44', 'additions': 699, 'deletions': 230, 'state': 'closed'}, {'id': 431752050, 'number': 275, 'closed': datetime.datetime(2020, 6, 10, 20, 49, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 12, 18, 20, tzinfo=datetime.timezone.utc), 'time_taken': 117093.0, 'time_delta': '1 day, 8:31:33', 'additions': 619, 'deletions': 102, 'state': 'closed'}, {'id': 426237696, 'number': 268, 'closed': datetime.datetime(2020, 6, 2, 13, 23, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 22, 0, 53, tzinfo=datetime.timezone.utc), 'time_taken': 55374.0, 'time_delta': '15:22:54', 'additions': 55, 'deletions': 8, 'state': 'closed'}, {'id': 425607958, 'number': 265, 'closed': datetime.datetime(2020, 5, 31, 14, 24, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 31, 12, 56, 21, tzinfo=datetime.timezone.utc), 'time_taken': 5280.0, 'time_delta': '1:28:00', 'additions': 342, 'deletions': 193, 'state': 'closed'}, {'id': 422905722, 'number': 260, 'closed': datetime.datetime(2020, 5, 28, 20, 30, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 21, 46, 3, tzinfo=datetime.timezone.utc), 'time_taken': 254660.0, 'time_delta': '2 days, 22:44:20', 'additions': 190, 'deletions': 21, 'state': 'closed'}, {'id': 422451778, 'number': 258, 'closed': datetime.datetime(2020, 5, 25, 12, 37, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 24, 18, 33, tzinfo=datetime.timezone.utc), 'time_taken': 65083.0, 'time_delta': '18:04:43', 'additions': 72, 'deletions': 0, 'state': 'closed'}, {'id': 422393698, 'number': 256, 'closed': datetime.datetime(2020, 5, 24, 15, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 24, 10, 33, 51, tzinfo=datetime.timezone.utc), 'time_taken': 17649.0, 'time_delta': '4:54:09', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 419028018, 'number': 242, 'closed': datetime.datetime(2020, 5, 24, 8, 5, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 16, 21, 56, 45, tzinfo=datetime.timezone.utc), 'time_taken': 641322.0, 'time_delta': '7 days, 10:08:42', 'additions': 358, 'deletions': 37, 'state': 'closed'}, {'id': 414100437, 'number': 237, 'closed': datetime.datetime(2020, 5, 12, 18, 55, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 6, 13, 34, 44, tzinfo=datetime.timezone.utc), 'time_taken': 537644.0, 'time_delta': '6 days, 5:20:44', 'additions': 98, 'deletions': 8, 'state': 'closed'}, {'id': 408638490, 'number': 235, 'closed': datetime.datetime(2020, 5, 5, 20, 50, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 24, 16, 7, 12, tzinfo=datetime.timezone.utc), 'time_taken': 967393.0, 'time_delta': '11 days, 4:43:13', 'additions': 358, 'deletions': 28, 'state': 'closed'}]"
88799203,DiffEqNoiseProcess.jl,SciML/DiffEqNoiseProcess.jl,Julia,29,63,7,35,676,17,8,5,"[{'id': 1773097970, 'number': 198, 'closed': None, 'created': datetime.datetime(2024, 3, 14, 22, 18, 31, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 9, 'deletions': 0, 'state': 'open'}, {'id': 1715931320, 'number': 192, 'closed': datetime.datetime(2024, 2, 8, 7, 28, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 7, 15, 40, 59, tzinfo=datetime.timezone.utc), 'time_taken': 56854.0, 'time_delta': '15:47:34', 'additions': 34, 'deletions': 8, 'state': 'closed'}, {'id': 1374412822, 'number': 153, 'closed': datetime.datetime(2023, 6, 2, 0, 26, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 1, 16, 23, 22, tzinfo=datetime.timezone.utc), 'time_taken': 29016.0, 'time_delta': '8:03:36', 'additions': 13, 'deletions': 11, 'state': 'closed'}, {'id': 1191523277, 'number': 141, 'closed': datetime.datetime(2023, 1, 10, 22, 45, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 9, 22, 11, 41, tzinfo=datetime.timezone.utc), 'time_taken': 88445.0, 'time_delta': '1 day, 0:34:05', 'additions': 101, 'deletions': 53, 'state': 'closed'}, {'id': 1189651829, 'number': 139, 'closed': datetime.datetime(2023, 1, 8, 16, 6, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 8, 2, 55, 17, tzinfo=datetime.timezone.utc), 'time_taken': 47451.0, 'time_delta': '13:10:51', 'additions': 159, 'deletions': 159, 'state': 'closed'}, {'id': 1019133440, 'number': 111, 'closed': datetime.datetime(2022, 8, 6, 1, 25, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 5, 21, 58, 18, tzinfo=datetime.timezone.utc), 'time_taken': 12403.0, 'time_delta': '3:26:43', 'additions': 29, 'deletions': 18, 'state': 'closed'}, {'id': 1017871929, 'number': 109, 'closed': datetime.datetime(2022, 8, 5, 15, 38, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 18, 3, 34, tzinfo=datetime.timezone.utc), 'time_taken': 77725.0, 'time_delta': '21:35:25', 'additions': 17, 'deletions': 31, 'state': 'closed'}, {'id': 1012046768, 'number': 108, 'closed': datetime.datetime(2022, 7, 30, 20, 8, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 14, 31, 40, tzinfo=datetime.timezone.utc), 'time_taken': 106611.0, 'time_delta': '1 day, 5:36:51', 'additions': 4845, 'deletions': 4643, 'state': 'closed'}, {'id': 799212629, 'number': 98, 'closed': datetime.datetime(2021, 12, 9, 21, 47, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 9, 21, 8, 58, tzinfo=datetime.timezone.utc), 'time_taken': 2338.0, 'time_delta': '0:38:58', 'additions': 9, 'deletions': 6, 'state': 'closed'}, {'id': 677278876, 'number': 94, 'closed': datetime.datetime(2021, 6, 24, 20, 31, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 16, 50, 6, tzinfo=datetime.timezone.utc), 'time_taken': 13296.0, 'time_delta': '3:41:36', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 649406074, 'number': 93, 'closed': datetime.datetime(2021, 5, 21, 13, 0, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 20, 20, 15, 20, tzinfo=datetime.timezone.utc), 'time_taken': 60294.0, 'time_delta': '16:44:54', 'additions': 136, 'deletions': 31, 'state': 'closed'}, {'id': 633402207, 'number': 92, 'closed': datetime.datetime(2021, 5, 8, 19, 18, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 7, 20, 35, 19, tzinfo=datetime.timezone.utc), 'time_taken': 81818.0, 'time_delta': '22:43:38', 'additions': 64, 'deletions': 17, 'state': 'closed'}, {'id': 604538095, 'number': 89, 'closed': datetime.datetime(2021, 3, 30, 22, 29, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 30, 22, 18, 16, tzinfo=datetime.timezone.utc), 'time_taken': 695.0, 'time_delta': '0:11:35', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 602657105, 'number': 88, 'closed': datetime.datetime(2021, 3, 29, 11, 11, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 29, 10, 47, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1415.0, 'time_delta': '0:23:35', 'additions': 13, 'deletions': 5, 'state': 'closed'}, {'id': 601676013, 'number': 87, 'closed': datetime.datetime(2021, 3, 29, 11, 11, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 26, 14, 53, 25, tzinfo=datetime.timezone.utc), 'time_taken': 245890.0, 'time_delta': '2 days, 20:18:10', 'additions': 198, 'deletions': 0, 'state': 'closed'}, {'id': 572592539, 'number': 86, 'closed': datetime.datetime(2021, 2, 12, 18, 18, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 12, 15, 26, 23, tzinfo=datetime.timezone.utc), 'time_taken': 10348.0, 'time_delta': '2:52:28', 'additions': 1216, 'deletions': 2, 'state': 'closed'}, {'id': 569558449, 'number': 84, 'closed': datetime.datetime(2021, 2, 8, 17, 36, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 8, 15, 29, 33, tzinfo=datetime.timezone.utc), 'time_taken': 7645.0, 'time_delta': '2:07:25', 'additions': 70, 'deletions': 12, 'state': 'closed'}, {'id': 509473239, 'number': 65, 'closed': datetime.datetime(2020, 10, 25, 20, 7, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 24, 18, 22, 30, tzinfo=datetime.timezone.utc), 'time_taken': 92671.0, 'time_delta': '1 day, 1:44:31', 'additions': 568, 'deletions': 22, 'state': 'closed'}, {'id': 489246260, 'number': 63, 'closed': datetime.datetime(2020, 9, 25, 10, 46, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 18, 11, 10, 35, tzinfo=datetime.timezone.utc), 'time_taken': 603334.0, 'time_delta': '6 days, 23:35:34', 'additions': 83, 'deletions': 11, 'state': 'closed'}, {'id': 471843782, 'number': 62, 'closed': datetime.datetime(2020, 8, 24, 15, 50, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 20, 34, 12, tzinfo=datetime.timezone.utc), 'time_taken': 242163.0, 'time_delta': '2 days, 19:16:03', 'additions': 301, 'deletions': 108, 'state': 'closed'}, {'id': 451395730, 'number': 57, 'closed': datetime.datetime(2020, 7, 22, 12, 53, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 19, 34, 13, tzinfo=datetime.timezone.utc), 'time_taken': 407975.0, 'time_delta': '4 days, 17:19:35', 'additions': 250, 'deletions': 57, 'state': 'closed'}, {'id': 448146870, 'number': 56, 'closed': datetime.datetime(2020, 7, 13, 10, 27, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 9, 56, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1845.0, 'time_delta': '0:30:45', 'additions': 50, 'deletions': 5, 'state': 'closed'}, {'id': 444047270, 'number': 55, 'closed': datetime.datetime(2020, 7, 4, 9, 27, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 13, 2, 45, tzinfo=datetime.timezone.utc), 'time_taken': 73469.0, 'time_delta': '20:24:29', 'additions': 63, 'deletions': 1, 'state': 'closed'}, {'id': 439300262, 'number': 54, 'closed': datetime.datetime(2020, 6, 24, 16, 0, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 15, 56, 53, tzinfo=datetime.timezone.utc), 'time_taken': 243.0, 'time_delta': '0:04:03', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 438173253, 'number': 53, 'closed': datetime.datetime(2020, 6, 23, 21, 33, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 20, 56, 40, tzinfo=datetime.timezone.utc), 'time_taken': 88614.0, 'time_delta': '1 day, 0:36:54', 'additions': 71, 'deletions': 43, 'state': 'closed'}, {'id': 423197048, 'number': 51, 'closed': datetime.datetime(2020, 5, 31, 14, 40, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 26, 13, 12, 28, tzinfo=datetime.timezone.utc), 'time_taken': 437289.0, 'time_delta': '5 days, 1:28:09', 'additions': 235, 'deletions': 39, 'state': 'closed'}, {'id': 420369297, 'number': 49, 'closed': datetime.datetime(2020, 5, 20, 1, 32, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 21, 14, 44, tzinfo=datetime.timezone.utc), 'time_taken': 15485.0, 'time_delta': '4:18:05', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 420241392, 'number': 48, 'closed': datetime.datetime(2020, 5, 19, 17, 4, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 16, 48, 23, tzinfo=datetime.timezone.utc), 'time_taken': 991.0, 'time_delta': '0:16:31', 'additions': 37, 'deletions': 31, 'state': 'closed'}]"
193565525,DiffEqGPU.jl,SciML/DiffEqGPU.jl,Julia,29,280,11,24,907,32,17,4,"[{'id': 437317832, 'number': 59, 'closed': datetime.datetime(2020, 6, 19, 22, 55, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 22, 25, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1752.0, 'time_delta': '0:29:12', 'additions': 75, 'deletions': 4, 'state': 'closed'}]"
71629608,DiffEqDevTools.jl,SciML/DiffEqDevTools.jl,Julia,34,46,5,30,563,3,8,0,"[{'id': 515559971, 'number': 77, 'closed': datetime.datetime(2020, 11, 4, 19, 43, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 4, 18, 17, 53, tzinfo=datetime.timezone.utc), 'time_taken': 5134.0, 'time_delta': '1:25:34', 'additions': 22, 'deletions': 5, 'state': 'closed'}, {'id': 468776017, 'number': 75, 'closed': datetime.datetime(2020, 8, 17, 15, 1, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 11, 38, 31, tzinfo=datetime.timezone.utc), 'time_taken': 12197.0, 'time_delta': '3:23:17', 'additions': 220, 'deletions': 4, 'state': 'closed'}, {'id': 468426583, 'number': 74, 'closed': datetime.datetime(2020, 8, 16, 14, 0, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 16, 10, 27, 4, tzinfo=datetime.timezone.utc), 'time_taken': 12809.0, 'time_delta': '3:33:29', 'additions': 53, 'deletions': 21, 'state': 'closed'}, {'id': 420105286, 'number': 62, 'closed': datetime.datetime(2020, 5, 19, 18, 27, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 13, 3, 14, tzinfo=datetime.timezone.utc), 'time_taken': 19467.0, 'time_delta': '5:24:27', 'additions': 47, 'deletions': 22, 'state': 'closed'}, {'id': 372724967, 'number': 58, 'closed': datetime.datetime(2020, 2, 8, 17, 48, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 8, 15, 16, 59, tzinfo=datetime.timezone.utc), 'time_taken': 9064.0, 'time_delta': '2:31:04', 'additions': 67, 'deletions': 1, 'state': 'closed'}]"
71509444,DiffEqBase.jl,SciML/DiffEqBase.jl,Julia,108,306,20,100,3361,67,26,13,"[{'id': 1020772735, 'number': 800, 'closed': datetime.datetime(2022, 8, 9, 10, 13, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 8, 21, 20, 59, tzinfo=datetime.timezone.utc), 'time_taken': 46331.0, 'time_delta': '12:52:11', 'additions': 16, 'deletions': 0, 'state': 'closed'}, {'id': 1004549555, 'number': 797, 'closed': datetime.datetime(2022, 7, 26, 21, 15, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 21, 18, 38, 47, tzinfo=datetime.timezone.utc), 'time_taken': 441391.0, 'time_delta': '5 days, 2:36:31', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 992026401, 'number': 793, 'closed': datetime.datetime(2022, 7, 8, 21, 19, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 8, 20, 42, 49, tzinfo=datetime.timezone.utc), 'time_taken': 2230.0, 'time_delta': '0:37:10', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 413935339, 'number': 503, 'closed': datetime.datetime(2020, 5, 6, 11, 53, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 6, 7, 54, 47, tzinfo=datetime.timezone.utc), 'time_taken': 14302.0, 'time_delta': '3:58:22', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 407288122, 'number': 488, 'closed': datetime.datetime(2020, 4, 22, 20, 18, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 22, 13, 23, 58, tzinfo=datetime.timezone.utc), 'time_taken': 24886.0, 'time_delta': '6:54:46', 'additions': 26, 'deletions': 0, 'state': 'closed'}]"
