pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
446533634,[ntuple] advertise RNTuple implements hadd MergeFile interface,"Declares a new method `RNTuple::Merge` to conform to the `hadd` merger interface, namely: 
https://github.com/root-project/root/blob/331efa4c00fefc38980eaaf7b41b8e95fcd1a23b/io/doc/v530/index.html#L43-L53

I originally thought about to adding this method `RNTupleReader`, but think this is the right choice since it's the `RNTuple` blob that's stored on disk, and we have to parse it into a `RNTupleReader` to do any useful work. 

Actually running it segfaults, and I'm not sure whether I've made a mistake in linking or elsewhere. 
~~**Edit:** segfault fixed by #6016~~
**Edit**: I believe the segfault is fixed by 12fef499c109da4c2454d9cca2e60e88a883aa1c, where I avoid assuming that mergeable objects are derived from `TObject`. ",True,6008,https://api.github.com/repos/root-project/root/pulls/6008,https://github.com/root-project/root/pull/6008,closed,53,3,3,8,17,3,0,1,[],2020-07-08 23:23:39+00:00,2020-07-28 15:00:06+00:00,1697787.0,"19 days, 15:36:27","[{'comment_id': 454352416, 'comment_body': ""Let's define the method in a new compilation unit (e.g. `RNTupleMerge`).  This should make it easier to separate the mini RNTuple library from the full version."", 'comment_created': datetime.datetime(2020, 7, 14, 13, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 454352903, 'comment_body': 'The whitespace seems odd', 'comment_created': datetime.datetime(2020, 7, 14, 13, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 457744853, 'comment_body': 'Fixed in fef9e17732a2a87a6d22b57e60d8db1cd9eaf43f', 'comment_created': datetime.datetime(2020, 7, 20, 23, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}]","[{'commit_sha': '41eda08d62d19f560c4ca5e8438e6b37e6821815', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4379980dac93076590722eff6764e6525f59497', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46e09422125a3bb968b4eb7f7a954e4c5a953ca5', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '984986ab30ff749e0382c93815a747bb76bf00a6', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a20d86a4d07854d7b17c733e8b2ea37d585a9b84', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75ca1a5845faad9c75369e6bd6886c3a76835474', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ccd1d301b6e1b611c0c4cfb5bd8034b3b35d75e', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dffd54c99afb3cdc02caf810aad4e11502e577da', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}]",Max Orok,40000585,,User,,70,,8,26
458756601,"[ntuple, io] pass paths, names of ntuples for merging to RNTuple side","We construct a vector of string pairs and pass it through to the
RNTuple::Merge function for merging. This implements a ""legacy bridge""
between hadd/TFileMerger and the new RNTuple library.

We adhere to the Merge(TCollection*, TFileMergeInfo*) interface without
using either class in the implementation by carefully casting the
RNTuple information vector and output file string pointers.

An example of this technique is shown here, which passes UBSan, ASan,
and strict aliasing checks on gcc 10 and clang 10: https://godbolt.org/z/7ff3e8

For demonstration, the `hadd` output for merging two `ntuple` files looks like: 
```shell
$ ./bin/hadd -f dir/merged.root ntuple1.root ntuple2.root
hadd Target file: dir/merged.root
hadd compression setting for all output: 1
hadd Source file 1: ntuple1.root
hadd Source file 2: ntuple2.root
hadd Sources and Target have different compression levels
hadd merging will be slower
hadd Target path: dir/merged.root:/
Warning in <TFileMerger::MergeRecursive>: merging RNTuples is experimental

# note: TFileMerger debug output begins 
examining ntuple1.root:/
        got key for type ROOT::Experimental::RNTuple with name ntuple
examining ntuple2.root:/
        got key for type ROOT::Experimental::RNTuple with name ntuple
got ntuple from file 'ntuple1.root:/' named 'ntuple'
got ntuple from file 'ntuple2.root:/' named 'ntuple'

# note: RNTuple::Merge debug output begins
RNTuple merger output file is dir/merged.root:/
merging ntuple from file 'ntuple1.root:/ named 'ntuple'
merging ntuple from file 'ntuple2.root:/ named 'ntuple'
RNTuple merging is unimplemented

# control is passed back to TFileMerger::MergeRecursive
Error in <TFileMerger::MergeRecursive>: error merging RNTuples
Error in <TFileMerger::Merge>: error during merge of your ROOT files
```

",False,6101,https://api.github.com/repos/root-project/root/pulls/6101,https://github.com/root-project/root/pull/6101,closed,116,8,2,1,3,0,2,1,"[{'name': 'in:I/O'}, {'name': 'in:RNTuple'}]",2020-07-29 23:00:32+00:00,2024-05-30 12:57:42+00:00,121010230.0,"1400 days, 13:57:10",[],"[{'commit_sha': '5d2dc1f8223fea8c5ee10f936b6187508c56b2f4', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}]",Max Orok,40000585,,User,,70,,8,26
459582703,[ntuple] page-storage level RNTuple merging,WIP merge implementation for RNTuples (somewhat related to the `hadd`-level merging PR https://github.com/root-project/root/pull/6101),False,6105,https://api.github.com/repos/root-project/root/pulls/6105,https://github.com/root-project/root/pull/6105,closed,458,33,16,20,37,3,1,1,[{'name': 'in:RNTuple'}],2020-07-30 20:36:55+00:00,2023-12-07 13:13:26+00:00,105813391.0,"1224 days, 16:36:31","[{'comment_id': 471754842, 'comment_body': ""Here I make a copy of the first RNTuple source header and use it as the merged RNTuple header. This is a bit hacky, but I think it's OK, as long as we override the RNTuple `uuid` at a later point (not implemented yet).  It is a workaround for not having `RColumn` objects to use with `RPageSink::AddColumn(DescriptorId_t fieldId, const RColumn &column)`"", 'comment_created': datetime.datetime(2020, 8, 17, 20, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 471756057, 'comment_body': ""I would like to double-check this behaviour is OK (setting `packedBytes` to a possibly incorrect value). At this point we have no way of finding packedBytes without uncompressing the page. `packedBytes` doesn't seem to be used during page reads but I would like to flag this for special consideration during review."", 'comment_created': datetime.datetime(2020, 8, 17, 20, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 472217282, 'comment_body': ""Hm, zipped and unzipped bytes (packed bytes) should be used during reading in order to figure out whether or not the page is compressed. If and only if compression doesn't make the page smaller, than the uncompressed page is stored and `packedBytes == zippedBytes`."", 'comment_created': datetime.datetime(2020, 8, 18, 13, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}]","[{'commit_sha': '8c923d60a4b0888be13e5a493ada2838428906ab', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6eb68e6feaa7bcdc329206922ef591e8d5d5278', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae79538dedb832cf20d49978d2ec5cc812ffe4b1', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35e8d0282201986ddf8a6e795a7b57e390070ef8', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4acf33f2b24ba982e4b300a9b946fdcbf0c0cffb', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abe91555080fbaabce085923c107bf5167134a87', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51188478b0de255aaef8588d6fb1bafcca5733d2', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02c3c5ba7519272a8e7a6e2ee8d42420df6a4986', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '423715d0b020da66c08d8b813f2b6fadce0ffc5e', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79763e96c05b2aacc79178f6e3042c49dc3ef9bb', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12d783b71cfbdd46bd711f26ef14e2d50d8f8dd4', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2e29e9456f1e5a3782932e0d9c7c107af1bd370', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97275351e1c04fa1a8cbc5ecbb34ce7b4633a8dc', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85885be62b1dc8103f2d71d73140b5ec87d50f8b', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20c856cf986eb8ebaecda38d2c7d350b2e183cfe', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b6bf05489cd792a2dbad731e59e87f31b425528', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68768de1ae68e8f4a70c78dd00a0a15e32a7b641', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c77751c34c5f8752d96a9d4e9c97e8cc723d9b2f', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38d5b659998926926ca0cf4c969883e9210f2624', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5224e743c1ea354f6b776193b671b920d88c0da8', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}]",Max Orok,40000585,,User,,70,,8,26
466240229,[io] io_uring ReadV implementation,"Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend.  
Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`

Basic means: 
* simple error-handling  
* no interrupt considerations
* ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 

The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. 

I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",True,6162,https://api.github.com/repos/root-project/root/pulls/6162,https://github.com/root-project/root/pull/6162,closed,289,49,7,20,66,18,0,1,[],2020-08-11 17:13:12+00:00,2020-08-25 13:00:17+00:00,1194425.0,"13 days, 19:47:05","[{'comment_id': 469887672, 'comment_body': '`GetRing()`?', 'comment_created': datetime.datetime(2020, 8, 13, 11, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 469890844, 'comment_body': 'I think we want to use the uring in several places eventually.  So we should build a light API in the `RIoUring` class that lets us drop in a vector (span) of requests and wait for completion.  The request type would probably look similar to the `RRawFile::RIOVec` struct, perhaps with the addition of a file descriptor (and later more if we also support writing).', 'comment_created': datetime.datetime(2020, 8, 13, 11, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 470102416, 'comment_body': '@jblomer what do you think about `GetRawRing`? https://github.com/root-project/root/pull/6162/commits/02b3ccf12a8721363a2e7fdd867e0707ede16e30', 'comment_created': datetime.datetime(2020, 8, 13, 17, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 470275684, 'comment_body': 'Thank you Jakob, I made a new struct `RReadEvent` for this purpose: \r\n```cpp\r\nstruct RReadEvent { \r\n   RRawFile::RIOVec fIoVec; \r\n   int fFileDes; \r\n}; \r\n```\r\nand added a new `SubmitReadsAndWait(std::vector<RReadEvent>& readEvents)` method in 464f7f5 \r\n\r\nIt might be the case that `RReadEvent` can do double duty as a `WriteEvent` too, `RIOVec` is pretty versatile. ', 'comment_created': datetime.datetime(2020, 8, 13, 22, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 472208268, 'comment_body': 'The dead code should be removed', 'comment_created': datetime.datetime(2020, 8, 18, 13, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 472209611, 'comment_body': ""With this we have a circular dependency between `RRawFile` and `RIoUring`.  I think I'd prefer to `RReadEvent` to have it's own version of the offset, size, outsize, and buffer members."", 'comment_created': datetime.datetime(2020, 8, 18, 13, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 472211089, 'comment_body': 'Perhaps better to use an `std::span<ReadEvent>` (include `ROOT/RSpan.hxx`)', 'comment_created': datetime.datetime(2020, 8, 18, 13, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 472212331, 'comment_body': ""Let's make batching part of it from the start, so that we easily can throw in many hundreds of requests"", 'comment_created': datetime.datetime(2020, 8, 18, 13, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 473245058, 'comment_body': 'Thank you, done in 592ef14 ', 'comment_created': datetime.datetime(2020, 8, 19, 18, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 473245486, 'comment_body': 'I changed this to a pointer and length in 592ef14 following our discussion', 'comment_created': datetime.datetime(2020, 8, 19, 18, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 473246367, 'comment_body': ""Snuck this in to help with the registered fd test case, I can remove it if you think it merits another PR (or maybe shouldn't be exposed at all!)"", 'comment_created': datetime.datetime(2020, 8, 19, 18, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 473390972, 'comment_body': 'Good idea, I tried to implement batching in 8c8a841 \r\nWe will see if the CI likes it! ', 'comment_created': datetime.datetime(2020, 8, 19, 22, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 474018173, 'comment_body': ""I think it doesn't hurt."", 'comment_created': datetime.datetime(2020, 8, 20, 14, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 474019488, 'comment_body': ""Let's make the `RIoUring` class responsible for choosing a ring size."", 'comment_created': datetime.datetime(2020, 8, 20, 14, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 474027625, 'comment_body': ""Let's select `fSize` in the constructor"", 'comment_created': datetime.datetime(2020, 8, 20, 14, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 474030200, 'comment_body': 'comment fix -> set by the ring', 'comment_created': datetime.datetime(2020, 8, 20, 14, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 474030426, 'comment_body': 'remove empty line', 'comment_created': datetime.datetime(2020, 8, 20, 14, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 474167608, 'comment_body': 'This is done in 72e3936. The ring default is 1024 and will step down by powers of 2 if memory allocation fails. I left the constructor that takes a queue depth, in case users would like to specify that themselves.', 'comment_created': datetime.datetime(2020, 8, 20, 17, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}]","[{'commit_sha': '1ad2fb4a01ca4fed5c9f344c8d23115b57afd7ad', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62e6cb9b12d6ee2890f449318c947c2a25f8cdc6', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7758db8620e9f7cdfc48642c71f9950a11ecfd7', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a6350cbcd5b497275afc524ecc8a41df578ee87', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c777dbd7e8b1825aff3d237831c24c8205e47cac', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02b3ccf12a8721363a2e7fdd867e0707ede16e30', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '464f7f52dedda046a87cc948f84914ca89c126ed', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '592ef1431959d843e3f5255040cf30d4829374d3', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c9daf21a9a1251e200c69f3351f36f1c48e50da', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7241453279783e028f24489f2a6985a98c4e3575', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c8a8413be8e75c81fffb72f91d6a1cbfadd05bd', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32a0f7a32a6d6f2c735f053ad6a10af0e3f831a4', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72e39369851bc95d39c2ab1ee952287351f1346d', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccce4d793de1bfa1773bd18883a133361993f04b', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c1867f66ceb82e2d1c4a3a8b4903e19c82909f5', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ef329e617d6b9d3cfaf0d0a57074270135ed8e9', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f719dda7c8cd5cfac101333351f07b290f668eac', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05057b71bcdacbe4cc41a12044b67c0ad3763b96', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '297a25ba9c6c08362389743056bd4b3ef9663d65', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c49514a93a1da5bfcafc984fbccfedb0aba83bd', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}]",Max Orok,40000585,,User,,70,,8,26
438863663,[CMake] add liburing build option,"This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface.
`liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`.

`io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager.

The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. 

I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely 

* `#include ""liburing.h""`
* `#include ""liburing/io_uring.h""`
* `liburing.so`",True,5919,https://api.github.com/repos/root-project/root/pulls/5919,https://github.com/root-project/root/pull/5919,closed,195,2,11,32,94,51,0,1,[],2020-06-23 22:49:03+00:00,2020-08-11 14:53:50+00:00,4205087.0,"48 days, 16:04:47","[{'comment_id': 446090629, 'comment_body': 'I found other nice example https://github.com/tkowalcz/io_uring_tutorial/blob/master/FindLibUring.cmake', 'comment_created': datetime.datetime(2020, 6, 26, 10, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oshadura', 'type': 'User'}, {'comment_id': 446091925, 'comment_body': 'Can you add please fail-on-missing in account as well? Here is a nice example:\r\nhttps://github.com/root-project/root/blob/2d2bc4ef56f68b707a0b918b1087241b4ffcf7e1/cmake/modules/SearchInstalledSoftware.cmake#L561-L572', 'comment_created': datetime.datetime(2020, 6, 26, 10, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oshadura', 'type': 'User'}, {'comment_id': 446092796, 'comment_body': 'Can you silently disable option, and print a message that ""liburing was disabled because it is available only on Linux""?', 'comment_created': datetime.datetime(2020, 6, 26, 10, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oshadura', 'type': 'User'}, {'comment_id': 446093575, 'comment_body': 'Maybe the name ```uring``` for option is better? (consistent with all other, e.g. such as jemalloc)  ', 'comment_created': datetime.datetime(2020, 6, 26, 10, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oshadura', 'type': 'User'}, {'comment_id': 446288484, 'comment_body': 'Thank you, done in 6f1efa8967efe0071847f2d5abe0681219f7291f', 'comment_created': datetime.datetime(2020, 6, 26, 16, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 446288704, 'comment_body': 'Thank you, done in 6f1efa8967efe0071847f2d5abe0681219f7291f', 'comment_created': datetime.datetime(2020, 6, 26, 16, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 446289501, 'comment_body': 'Thank you, done in 10999c0', 'comment_created': datetime.datetime(2020, 6, 26, 16, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 450362647, 'comment_body': 'Instead of using ``` HAVE_LIBURING ``` lets try to add it as `R__HAS_URING`:  https://github.com/root-project/root/blob/master/config/RConfigure.in#L64 and https://github.com/root-project/root/blob/fdc718926ac5bedc82829128a781db0bd67c0c00/cmake/modules/RootConfiguration.cmake#L479 (use tmva-cpu CMake option as an example)', 'comment_created': datetime.datetime(2020, 7, 6, 17, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'oshadura', 'type': 'User'}, {'comment_id': 450447207, 'comment_body': 'Thank you @oshadura, done in 548199a :)', 'comment_created': datetime.datetime(2020, 7, 6, 19, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 455030816, 'comment_body': 'I think we should make this its own if block.  The enclosing if block distinguishes Win32 <--> Unix but that has only a weak relationship as to whether or not uring support is available.', 'comment_created': datetime.datetime(2020, 7, 15, 12, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 455032575, 'comment_body': 'Simply `catch (const Experimental::RException&)` ?', 'comment_created': datetime.datetime(2020, 7, 15, 13, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 455034396, 'comment_body': ""Let's add an `R__DEBUG_HERE` statement to let us know that we cannot use io_uring"", 'comment_created': datetime.datetime(2020, 7, 15, 13, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 455140056, 'comment_body': 'This throws an `RError`, or does it somehow gets converted into an `RException`?', 'comment_created': datetime.datetime(2020, 7, 15, 15, 26, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 455179387, 'comment_body': 'Uh-oh, good `catch`. I thought I remembered the catch block working but I will fix it.', 'comment_created': datetime.datetime(2020, 7, 15, 16, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 455211545, 'comment_body': 'Fixed in e47774f ', 'comment_created': datetime.datetime(2020, 7, 15, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 455212501, 'comment_body': 'Thanks, done in 44c546f ', 'comment_created': datetime.datetime(2020, 7, 15, 17, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 455212737, 'comment_body': 'Thank you, see e63ffc1 ', 'comment_created': datetime.datetime(2020, 7, 15, 17, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 457408856, 'comment_body': 'I think I should probably print the error code & message here ', 'comment_created': datetime.datetime(2020, 7, 20, 13, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 457409389, 'comment_body': '@jblomer maybe I should log the exception message here? ', 'comment_created': datetime.datetime(2020, 7, 20, 13, 57, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 457984579, 'comment_body': 'Perhaps a debug log (see `RLogger`) would help, yes.  We could also use the trick of a function-static bool to remember in a thread-safe way whether or not uring is available.', 'comment_created': datetime.datetime(2020, 7, 21, 10, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 461590986, 'comment_body': 'Ah, I think the problem is that RError and RLogger are ROOT7 facilities.', 'comment_created': datetime.datetime(2020, 7, 28, 13, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 461591894, 'comment_body': ""Let's throw an `std::runtime_error` and use the facilities from `TError` for the time being."", 'comment_created': datetime.datetime(2020, 7, 28, 13, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 461594333, 'comment_body': 'We could do something like\r\n\r\n    static bool result = CheckIfAvailable();\r\n    return result;\r\n\r\nCheckIfAvailable will be called at most once and in a thread-safe manner.', 'comment_created': datetime.datetime(2020, 7, 28, 13, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 461595254, 'comment_body': 'Also here we need to use TError for the time being', 'comment_created': datetime.datetime(2020, 7, 28, 13, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 461596020, 'comment_body': ""Let's instead use `RRawFile::ReadVImpl(ioVec, nReq);` and add a `TODO` in order to not generate unexpected failures where liburing is available (RRawFile is already used in the sqlite RDataFrame data source)"", 'comment_created': datetime.datetime(2020, 7, 28, 13, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 461713329, 'comment_body': 'Thank you, this way is much nicer :) (41858029cba8cc7c55d4bf9ae1440f8269fe091a)', 'comment_created': datetime.datetime(2020, 7, 28, 16, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 461713460, 'comment_body': 'Resolved by 41858029cba8cc7c55d4bf9ae1440f8269fe091a', 'comment_created': datetime.datetime(2020, 7, 28, 16, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 461713629, 'comment_body': 'Done in 41858029cba8cc7c55d4bf9ae1440f8269fe091a', 'comment_created': datetime.datetime(2020, 7, 28, 16, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 462180493, 'comment_body': 'Why do we build `RIoUring` with ROOT7 disabled?', 'comment_created': datetime.datetime(2020, 7, 29, 9, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Axel-Naumann', 'type': 'User'}, {'comment_id': 462182841, 'comment_body': 'No need for a local var I guess:\r\n```suggestion\r\n   static bool CheckIsAvailable() {\r\n      try {\r\n         RIoUring(1);\r\n         return true;\r\n      }\r\n      catch (const std::runtime_error& err) {\r\n         Warning(""RIoUring"", ""io_uring is not available\\n%s"", err.what());\r\n      }\r\n      return false;\r\n   }\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 9, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Axel-Naumann', 'type': 'User'}, {'comment_id': 462183825, 'comment_body': '```suggestion\r\n      static const bool available = RIoUring::CheckIsAvailable();\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 10, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Axel-Naumann', 'type': 'User'}, {'comment_id': 462185629, 'comment_body': 'I find the logic flow a bit convoluted. Consider:\r\n\r\n```suggestion\r\n#ifdef R__HAS_URING\r\n   if (RIoUring::IsAvailable()) {\r\n      // todo(max) actually use the ring\r\n      RRawFile::ReadVImpl(ioVec, nReq);\r\n      return;\r\n   }\r\n   Warning(""RRawFileUnix"",\r\n           ""io_uring setup failed, falling back to default ReadV implementation"");\r\n#endif\r\n   RRawFile::ReadVImpl(ioVec, nReq);\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 10, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Axel-Naumann', 'type': 'User'}, {'comment_id': 462186345, 'comment_body': 'Isn\'t this test going to fail on any platform without iouring? Or does ""it compiles"" automatically mean ""it is available""? But then why do we need `IsAvailable()`?', 'comment_created': datetime.datetime(2020, 7, 29, 10, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Axel-Naumann', 'type': 'User'}, {'comment_id': 462187331, 'comment_body': 'Is this actually used somewhere?', 'comment_created': datetime.datetime(2020, 7, 29, 10, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Axel-Naumann', 'type': 'User'}, {'comment_id': 462316194, 'comment_body': 'I think the idea here is that any ROOT IO class (`TTree` etc) could use `RIoUring` if they choose. ', 'comment_created': datetime.datetime(2020, 7, 29, 13, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 462317878, 'comment_body': 'Good catch, this is a remnant of when I was checking `io_uring` error messages.', 'comment_created': datetime.datetime(2020, 7, 29, 13, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 462321547, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 7, 29, 14, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Axel-Naumann', 'type': 'User'}, {'comment_id': 462339536, 'comment_body': ""This is sort of an interesting situation where we can really only detect at runtime if `io_uring` works.\r\nWe try hard at the cmake level to avoid compiling any `io_uring` stuff if the userspace library `liburing` isn't installed.  \r\n```cmake\r\nif(uring)\r\n  ROOT_ADD_GTEST(RIoUring RIoUring.cxx LIBRARIES RIO uring)\r\nendif()\r\n```\r\n\r\nIt is possible to imagine a situation where someone installs liburing but doesn't have the right kernel, so it compiles but fails at runtime with `ENOSYS` etc. It's hard to go off kernel versions themselves (maybe there's a backport). \r\n\r\nThe test itself was intended to be a warning to the developer that `uring` doesn't work on your machine.\r\n\r\n`IsAvailable` is also interesting because right now, all it does it check whether it can open a ring once and caches the result. It is technically possible that this value changes over time (i.e. a number of threads open a ring, exhausting the `memlocked` pool.) I think this different behaviour (checking for each thread) is what's done in the `folly` wrapper. \r\n\r\nhttps://github.com/facebook/folly/blob/edec54f4d5eac315a278a73d960e97c0de74c503/folly/experimental/io/IoUring.cpp#L193-L203"", 'comment_created': datetime.datetime(2020, 7, 29, 14, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 462839851, 'comment_body': ""Isn't it more common to have `-Lpath -llibrary` instead of the other way around? After all, `-L` adds to the search path needed to find the `-l`'ed library, also in this case, IIUC?"", 'comment_created': datetime.datetime(2020, 7, 30, 8, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Axel-Naumann', 'type': 'User'}, {'comment_id': 462840924, 'comment_body': 'Can we not add this to the library flags of `RIO` as the one containing `RIoUring`, instead of putting it everywhere, whether the binary links against `RIO` or not?', 'comment_created': datetime.datetime(2020, 7, 30, 8, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Axel-Naumann', 'type': 'User'}, {'comment_id': 462842017, 'comment_body': 'This versus [that](https://github.com/root-project/root/pull/5919/files#diff-af3b638bc2a3e6c650974192a53c7291R229) should probably be rationalized?', 'comment_created': datetime.datetime(2020, 7, 30, 8, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Axel-Naumann', 'type': 'User'}, {'comment_id': 462842326, 'comment_body': 'Where is `RLogger` used?', 'comment_created': datetime.datetime(2020, 7, 30, 8, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Axel-Naumann', 'type': 'User'}, {'comment_id': 462843922, 'comment_body': ""OK but as is, roottest might fail just because uring isn't available in the kernel. I don't think that's a situation we want - I haven't broken my ROOT yet roottest fails, and I cannot fix anything in ROOT to make my roottest work again. Shall we discuss what to do here tomorrow during the I/O meeting?"", 'comment_created': datetime.datetime(2020, 7, 30, 8, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Axel-Naumann', 'type': 'User'}, {'comment_id': 462931153, 'comment_body': 'I think by default we should just skip the test if `!IsAvailable()`.  If we want to be very careful, we can set and check an environment variable that indicates that we really expect uring to be there, e.g. `ROOTTEST_HAS_URING`.  On test nodes with a recent enough kernel, we can then fail if this variable is set and `!IsAvailable()`.  To be more safe, we can also revert the default and set `ROOTTEST_NO_URING` where the kernel is too old.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 463018052, 'comment_body': ""I think either approach makes sense and I am OK skipping all the RIoUring tests if it isn't available (and taking out the IsAvailable test entirely).\r\n\r\n> I haven't broken my ROOT yet roottest fails\r\n\r\nAs implemented, people have to opt in to `uring` when they build ROOT. It's their responsibility to have `liburing` installed and have a relatively recent kernel. If they were to then run the `RIoUring` test suite I think it would be strange to have them pass if `uring` isn't working. I feel the way to fix ROOT in this case is to build it again after turning off `uring`."", 'comment_created': datetime.datetime(2020, 7, 30, 14, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 463025981, 'comment_body': 'Another remnant from the past, thank you. Resolved by 6644375 ', 'comment_created': datetime.datetime(2020, 7, 30, 14, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 463038940, 'comment_body': 'I kept this one and removed the other linker directives with 015977dfea', 'comment_created': datetime.datetime(2020, 7, 30, 14, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 463043711, 'comment_body': 'Thank you, I took this out in 015977dfea', 'comment_created': datetime.datetime(2020, 7, 30, 14, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 463722019, 'comment_body': ""I opened a PR to only test on the dedicated Fedora 32 node here https://github.com/root-project/rootspi/pull/82. This PR then requires changes to make sure we're properly handling the `ROOTTEST_ENABLE_URING` environment variable in `io/io/test/CMakeLists.txt`. "", 'comment_created': datetime.datetime(2020, 7, 31, 16, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 465661909, 'comment_body': ""Isn't `uring` inherited through `RIO`? I'd hope that you don't need to spell out `LIBRARIES uring` here:\r\n```suggestion\r\n  ROOT_ADD_GTEST(RIoUring RIoUring.cxx LIBRARIES RIO)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 5, 11, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Axel-Naumann', 'type': 'User'}, {'comment_id': 465695538, 'comment_body': ""The missing piece here is that I didn't make `target_link_libraries` `PUBLIC` instead of `PRIVATE`. I think it is fixed in 23d2a9f4d0bba8f4e87541d0baaf8e9e930aa3c1 "", 'comment_created': datetime.datetime(2020, 8, 5, 12, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}]","[{'commit_sha': 'cfd104279c865ce3f2e6ea1e505f8bc7c2ccf2be', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a71769bad1bdf219540b069e2964d2565b190f3', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe89891a529e0e173efb4ba66bf0c4afe35d5354', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6c864aaf59509721c00bf496913c5eb70f127ea', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd52365bfef6eab4c4ec923ccbcf15af92c713f5c', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0c0b4e4fa8fe83a154e3a5d1384db808bf1c16c', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2a9ed8ead9e4a24ccf649a040316cea736d1ee2', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fe0a748b7f9ab752e482f309d8216d83c1c3388', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5886f65deebfb04648a03d918763fc9219751e48', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac61e1e428a94f83da459f01dc2094834a348448', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd65a86a0b4c62bc4f5b5056a669c9dcba311d174', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50b1a49c17f25fabeb06cbb55e6b06e6abd615d8', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78dcd208f20eabd047029ff7ce7b4185a2b4a21f', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b9e34c750f62c4c725a7de7e3fab4a306f055ef', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b20ce48b58de14cc247602450991f3bdfd34edb8', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9548ce5302f317da36ad7c844b8e6c7124197e6', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b4299891785db3d37dd63ae4cabe2b9ba7ca187', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13d8d9d52d1322085009f3056beb169e85f54655', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79cff86097a31e9fe4d8e039404337e357cd73e4', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b499194ff76bf48081962f352bd16f263a92222', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5547f763ac461451646b6ae56b2b7cbdddc21ec8', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1916d13c83902a3481c6c6aaab55204018d2dd96', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41858029cba8cc7c55d4bf9ae1440f8269fe091a', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab0bc58cc7e6bc0ffb8acaaff250be671a728dab', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2e4669386ee3aa54c12dbae5245f5561a9af6eb', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b360ce8b5ac7e10c35858dc659cab8a1fe9bec80', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c914b0a6153291de66199830dfbb734d61cce66c', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66443750cad3922455601e3dd864b3c35eec8510', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '015977dfeae88a930032df7433c6e71b246a8dbb', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa177c9ff6dc6bb1b9ee3689ea2609b926c7054d', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63eb63e5a74a6d9f7402f9daa02da3d223f27a49', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23d2a9f4d0bba8f4e87541d0baaf8e9e930aa3c1', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}]",Max Orok,40000585,,User,,70,,8,26
447663796,[ntuple] add debug output for low-level RNTuple structs,"Lets us quickly check `NTuple` and `RTFNTuple` values during development.

Example output with dummy values: 
```cpp
RNTuple ntpl;
ntpl.fVersion = 1;                                                                      
ntpl.fSeekHeader = 100;                                                                               
std::cout << ntpl << ""\n"";                                                                        
```
```text
RNTuple {
    fVersion: 1,
    fSize: 48,
    fSeekHeader: 100,
    fNBytesHeader: 0,
    fLenHeader: 0,
    fSeekFooter: 0,
    fNBytesFooter: 0,
    fLenFooter: 0,
    fReserved: 0,
}
```

RTFNTuple is a little weird because of it's representation, maybe I could tweak it to be more readable? 
```cpp
RTFNTuple ntpl;
std::cout << ntpl; 
```
```text
RTFNTuple {
    fByteCount: 1073741878,
    fVersionClass: 0,
    fChecksum: 1700499286,
    fVersionInternal: 0,
    fSize: 48,
    fSeekHeader: 0,
    fNBytesHeader: 0,
    fLenHeader: 0,
    fSeekFooter: 0,
    fNBytesFooter: 0,
    fLenFooter: 0,
    fReserved: 0,
}
```
",True,6025,https://api.github.com/repos/root-project/root/pulls/6025,https://github.com/root-project/root/pull/6025,closed,66,1,4,3,7,0,0,1,[],2020-07-10 22:08:50+00:00,2020-07-15 10:33:11+00:00,390261.0,"4 days, 12:24:21",[],"[{'commit_sha': '9301cb2c4498e434b7bd5a7aa4e58651fe81a8ff', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fcab0a53510597e7f264f28d3c876a7e75c648d', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '028b72ad4623f8368f2998f5d0259a85de5990e2', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}]",Max Orok,40000585,,User,,70,,8,26
440309597,[ntuple] Add FieldDescriptor builders ,"This PR makes it easier to construct valid `RFieldDescriptors`.

**Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. 

<details>
<summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>
<br>
We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. 
I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412)

It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. 

For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). 
With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. 
This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain.
  * If we ever add fields to the class, Clone could be buggy (missing the added field)
  In contrast, the copy constructor will never miss any fields. 
* Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. 

Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). 

The high-level changes are: 
* define default values for a field descriptor
* remove move-only restriction on `RFieldDescriptor`
* implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. 
</details>

We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. 
```c++
RFieldDescriptor fieldDesc = RDanglingFieldDescriptor()
    .FieldId(1)
    .FieldName(""some_field"")
    .Structure(ENTupleStructure::kCollection)
    .UnwrapDescriptor(); 
```

Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or children). They are meant to be used for building new `RNTuples` through `RNTupleDescriptorBuilder` or during a merge operation. ",True,5934,https://api.github.com/repos/root-project/root/pulls/5934,https://github.com/root-project/root/pull/5934,closed,226,39,7,16,43,23,0,1,[],2020-06-25 23:41:19+00:00,2020-07-21 14:23:24+00:00,2212925.0,"25 days, 14:42:05","[{'comment_id': 447042420, 'comment_body': 'I like the idea but I wonder if it is acceptable to ignore the field <--> subfield relationship.  We should at least mention this in the comment, perhaps even in the method name.', 'comment_created': datetime.datetime(2020, 6, 29, 15, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 447042836, 'comment_body': 'The `std::string` is anyway default constructed to the empty string', 'comment_created': datetime.datetime(2020, 6, 29, 15, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 447043516, 'comment_body': 'Is it intended to make the field descriptor copyable?', 'comment_created': datetime.datetime(2020, 6, 29, 15, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 447051213, 'comment_body': 'Gets default constructed anyway', 'comment_created': datetime.datetime(2020, 6, 29, 15, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 447055006, 'comment_body': ""Can't we just use RFieldBase` here instead of the template?"", 'comment_created': datetime.datetime(2020, 6, 29, 15, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 447056114, 'comment_body': 'It might be surprising that we cut the relationship to other field descriptors', 'comment_created': datetime.datetime(2020, 6, 29, 15, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 447085611, 'comment_body': ""Yes, that is the intent here. I think making the descriptors copyable makes them easier to use (making new ones for a merge, etc.). It also reinforces that they're only metadata so people don't have worry about ownership, lifetime issues (unlike the field itself). "", 'comment_created': datetime.datetime(2020, 6, 29, 16, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 447086037, 'comment_body': 'Yes, perhaps I went a bit overboard here :)', 'comment_created': datetime.datetime(2020, 6, 29, 16, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 447090058, 'comment_body': ""I definitely agree. I do think we should cut the links (it's very easy to imagine a malformed NTuple otherwise) and leave it up to callers to arrange things with `AddFieldLink`, but am not completely satisfied with the implementation as is. "", 'comment_created': datetime.datetime(2020, 6, 29, 16, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 448574273, 'comment_body': 'The name check is a placeholder for this PR and I will change it to use `RFieldBase::EnsureValidFieldName` after #5967 lands. ', 'comment_created': datetime.datetime(2020, 7, 1, 19, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 448782416, 'comment_body': 'Tricky problem.  The issue with this is that you can call `Get()` at most once.  That might be ok but in this case I think\r\n\r\n- we should test if fValue has been moved before (and fail if that was the case)\r\n- Rename the method, perhaps to `Move`?', 'comment_created': datetime.datetime(2020, 7, 2, 6, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 449238669, 'comment_body': ""Yes, maybe it's better to provide `Move` with the safety checks you mentioned in addition to `Get`\r\n\r\nEdit: Mozilla does this for their `RResult`-like class (`Move -> unwrap; Get -> inspect`): \r\n```cpp\r\nV unwrap() { return std::move(mStorage.template as<V>()); }\r\nconst V& inspect() const { return mStorage.template as<V>(); }\r\n```\r\nhttps://searchfox.org/mozilla-central/source/mfbt/Result.h#90-91"", 'comment_created': datetime.datetime(2020, 7, 2, 20, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 449469960, 'comment_body': ""I like these names, let's rename our methods to `Unwrap` and `Inspect`"", 'comment_created': datetime.datetime(2020, 7, 3, 9, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 450327059, 'comment_body': 'I opened a PR for these changes only here: #5985', 'comment_created': datetime.datetime(2020, 7, 6, 16, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 453897823, 'comment_body': 'Tried to address this with the new `RDanglingFieldDescriptor` type. ', 'comment_created': datetime.datetime(2020, 7, 13, 20, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 453898749, 'comment_body': 'Thank you, done in 9e8f0f2e78d8cb1883a873e3b8aeea731517cca6', 'comment_created': datetime.datetime(2020, 7, 13, 20, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 454378089, 'comment_body': 'Perhaps not worth it, one can directly call `MakeDescriptor().Unwrap()`', 'comment_created': datetime.datetime(2020, 7, 14, 14, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 454410527, 'comment_body': 'Should be passed with `R__FORWARD_RESULT`', 'comment_created': datetime.datetime(2020, 7, 14, 14, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 454438211, 'comment_body': ""@jblomer I was having a little trouble forwarding here because the Result type mismatch\r\n`outer: RResult<RFieldDescriptor>` vs `inner: RResult<void>` and wasn't really sure how to convert between the two properly. "", 'comment_created': datetime.datetime(2020, 7, 14, 15, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 454444507, 'comment_body': ""Good call, let's keep the API terse :) see 4140012 "", 'comment_created': datetime.datetime(2020, 7, 14, 15, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 455025133, 'comment_body': ""That's true.  Here's an attempt to address it with a new `R__FORWARD_ERROR` macro: #6039"", 'comment_created': datetime.datetime(2020, 7, 15, 12, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 455082238, 'comment_body': 'Awesome :) 👍 ', 'comment_created': datetime.datetime(2020, 7, 15, 14, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 457603314, 'comment_body': '@jblomer just rebased on #6039, thank you for the new feature :)', 'comment_created': datetime.datetime(2020, 7, 20, 18, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}]","[{'commit_sha': '0ff1a9732ce9d18ebc019141417f3226a4a05e57', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a508021357ee8b50e15bdf59d68c430b7a197f9', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eae2e7b989c5fd9c187512bae8a99279b731552', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6574e7a6f89ad1e3c244988057f9470a721eec30', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7075e590fcc288ff87e9227762e60fb4f2e2a85e', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cd3db06393c3dd6361c012bb282b31d669404cf', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75a14b568043cdedacd2d8199ce24c43c846eb62', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9320f2cea05bb5d26d981af4fc86830a0a660fb8', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b1f89c4ac212eef455aae18ea5548b7c156097f', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab25283629a211868246010d7f9b702522f2e3ee', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '823f71126d9058d9cdbc442cfbace07eeca4cc95', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c93908a59b8ee8618104b8523748038bcd9243a', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5762f023a95a02d7de3212d2b90e50dba950eead', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '080fa5776436827322e01744953541a4ff2381c1', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16fc8291c06627c8222f647a8cb1a4c124802fcc', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78c9f16d4a3683ff9031aab4d83ca401675abb2e', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}]",Max Orok,40000585,,User,,70,,8,26
434845445,[ntuple] check for valid NTuple top-level field names (ROOT-10856),"Fixes ROOT-10856 by keeping track of field names and throwing an exception if there's a name conflict. 

Edit: expanded PR scope to ensure field names are valid as well as unique (e.g. no empty string).  

~~**todo**~~ **done:** add unit test per method to ensure technique works:
- [x] `std::shared_ptr<T> MakeField(std::string_view fieldName, ArgsT&&... args)`
- [x] `void AddField(std::string_view fieldName, T* fromWhere)`
- [x] `void AddField(std::unique_ptr<Detail::RFieldBase> field)`
- [x] `std::shared_ptr<RCollectionNTuple> MakeCollection(std::string_view fieldName, std::unique_ptr<RNTupleModel> collectionModel)`

",True,5879,https://api.github.com/repos/root-project/root/pulls/5879,https://github.com/root-project/root/pull/5879,closed,84,2,4,8,22,13,0,1,[],2020-06-15 22:10:53+00:00,2020-06-19 07:36:29+00:00,293136.0,"3 days, 9:25:36","[{'comment_id': 440624109, 'comment_body': ""Let's throw a ROOT specific `RException`"", 'comment_created': datetime.datetime(2020, 6, 16, 6, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 440624551, 'comment_body': 'use `std::string_view`', 'comment_created': datetime.datetime(2020, 6, 16, 6, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 440626558, 'comment_body': 'The `RException` might surround the original error message with more text', 'comment_created': datetime.datetime(2020, 6, 16, 6, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 440626984, 'comment_body': 'That should not be possible, either, I think.  Field names must not be empty.', 'comment_created': datetime.datetime(2020, 6, 16, 6, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 441188280, 'comment_body': 'Thanks, done in eea9c7c74fdeb2119d9b2949cd5b9fe6e6d13edc. ', 'comment_created': datetime.datetime(2020, 6, 16, 23, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 441188605, 'comment_body': 'Done in 49624995939ab0ee78c73384c5d65e83b343ce49.', 'comment_created': datetime.datetime(2020, 6, 16, 23, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 441189401, 'comment_body': 'I added a check in  03ddbb3384e4378358304a4bcf121866', 'comment_created': datetime.datetime(2020, 6, 16, 23, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 441189730, 'comment_body': 'Is period OK here? Maybe dot instead? ', 'comment_created': datetime.datetime(2020, 6, 16, 23, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 441190157, 'comment_body': 'I brought in gmock (part of googletest) to help with substring checking.', 'comment_created': datetime.datetime(2020, 6, 16, 23, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 441306057, 'comment_body': ""I'd prefer 'dot'"", 'comment_created': datetime.datetime(2020, 6, 17, 6, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 442243599, 'comment_body': 'On my first attempt, I checked for duplicate sub-field names but this failed when repeated collection fields were added: \r\n```shell\r\nC++ exception with description ""field name \'std::vector<float>\' already exists\r\n```\r\nI now think this the right approach to only check the collection field name and not the subfield names because their full names are different anyway: `otherModel.pt` when `otherModel` is added to the NTuple. ', 'comment_created': datetime.datetime(2020, 6, 18, 13, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 442244694, 'comment_body': 'Done in 6372ea9 ', 'comment_created': datetime.datetime(2020, 6, 18, 13, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 442354520, 'comment_body': 'Yes, I agree with ought to only check the top level field name.', 'comment_created': datetime.datetime(2020, 6, 18, 16, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pcanal', 'type': 'User'}]","[{'commit_sha': 'f5f8a964c938ba0a95336df1bc50c48388aa3c16', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eea9c7c74fdeb2119d9b2949cd5b9fe6e6d13edc', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49624995939ab0ee78c73384c5d65e83b343ce49', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ddbb3384e4378358304a4bcf121866c70cc828', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21dd23d915ff7271fb1210490673c4626d868bb9', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '363d79c534f21325351cba53864a8a8cb0078e86', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a1e5157f4a04084ac70620ea584d50802f8bceb', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6372ea9981d29e61447cf5f50f6910be44777770', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}]",Max Orok,40000585,,User,,70,,8,26
432758559,[ntuple] Implement RFieldDescriptor range,"This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. 

**Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). 

<details>
<summary>Notes on previous sort approach</summary>
<br>
We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. 
I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412)

</details>",True,5848,https://api.github.com/repos/root-project/root/pulls/5848,https://github.com/root-project/root/pull/5848,closed,210,5,3,10,30,34,0,1,[],2020-06-10 23:49:20+00:00,2020-06-22 12:45:03+00:00,996943.0,"11 days, 12:55:43","[{'comment_id': 438467981, 'comment_body': 'Will fix when #5805 lands. ', 'comment_created': datetime.datetime(2020, 6, 10, 23, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 438469761, 'comment_body': 'On second glance, this is possibly UB (see Temporary range expression section of https://en.cppreference.com/w/cpp/language/range-for)', 'comment_created': datetime.datetime(2020, 6, 10, 23, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 438933384, 'comment_body': 'I am now reasonably sure this is not UB, since `ntuple` is always a valid reference, and a simplified example on Compiler Explorer was clean (https://godbolt.org/z/nvkvKL).  I think the warning on cppreference would apply if `ntuple` was also a temporary, i.e. \r\n```cpp\r\nfor (auto& f: GetNTuple().GetDescriptor().GetTopLevelFields().SortByNames())\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 16, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 439431354, 'comment_body': 'This does not add up with the fact that `RFieldDescriptorRange` is a sub class of `RNTupleDescriptor`, I think', 'comment_created': datetime.datetime(2020, 6, 12, 13, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 439431613, 'comment_body': 'Missing class comment', 'comment_created': datetime.datetime(2020, 6, 12, 13, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 439431882, 'comment_body': 'Add comments to the member variables', 'comment_created': datetime.datetime(2020, 6, 12, 13, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 439812175, 'comment_body': 'I believe this is UB as `GetTopLevelFields()` returns a temporary; this is not lifetime-extended. Only the temporary returned by `SortByNames()` is lifetime-extended. See e.g. https://abseil.io/tips/107 on how lifetime-extension works, and why it works for the final expression.\r\n\r\nThe UB sanitizer cannot check for all UB - though this would indeed be a good thing to have diagnosed.\r\n\r\nGiven that we have at least some concern about this being UB: could you simply assign `ntuple.GetDescriptor().GetTopLevelFields()` to a local variable before the `for`-loop?', 'comment_created': datetime.datetime(2020, 6, 14, 9, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Axel-Naumann', 'type': 'User'}, {'comment_id': 439831385, 'comment_body': 'Since .SortByNames() returns by value is that really a problem that the return value of GetTopLevelFields() is destructed?', 'comment_created': datetime.datetime(2020, 6, 14, 13, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pcanal', 'type': 'User'}, {'comment_id': 439835678, 'comment_body': 'Not sure.. should this be `const auto &left` (and right)?', 'comment_created': datetime.datetime(2020, 6, 14, 14, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 439836000, 'comment_body': 'I\'m surprised that this works.  I think it shouldn\'t because the name ""jets"" is already taken.', 'comment_created': datetime.datetime(2020, 6, 14, 14, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 439836300, 'comment_body': 'Perhaps more natural as `EXPECT_TRUE(... == ...)`', 'comment_created': datetime.datetime(2020, 6, 14, 14, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 439836409, 'comment_body': 'Like above, we should actually prevent name clashes.', 'comment_created': datetime.datetime(2020, 6, 14, 14, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 439864246, 'comment_body': ""Do you want the test to survive a change in the implementation of the classes invilved? I would say that's a definitive plus :-) I.e. it really depends on how exactly these objects look like - whether they have any references between them or not, and that might well change at some point in the future.\r\n\r\nI believe an extra variable is a fair price for avoiding UB, guaranteed."", 'comment_created': datetime.datetime(2020, 6, 14, 20, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Axel-Naumann', 'type': 'User'}, {'comment_id': 439869542, 'comment_body': 'Adding a local variable solves the problem here, but this is still a footgun for user code (the test demonstrates the public API of the NTuple). Maybe there is an alternative implementation that works? (e.g. mutating the class in place) ', 'comment_created': datetime.datetime(2020, 6, 14, 21, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 440274958, 'comment_body': ""I definitely agree, I'll check and see what we can do to prevent this (tracking issue here: https://sft.its.cern.ch/jira/browse/ROOT-10856)"", 'comment_created': datetime.datetime(2020, 6, 15, 15, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 441414167, 'comment_body': 'Or even better: `EXPECT_EQ(begin(), end())`', 'comment_created': datetime.datetime(2020, 6, 17, 9, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 442493097, 'comment_body': 'Good catch, I took it out in 0f66d2d and nothing changed. ', 'comment_created': datetime.datetime(2020, 6, 18, 20, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 442493518, 'comment_body': 'Added in 0f66d2d.', 'comment_created': datetime.datetime(2020, 6, 18, 20, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 442493718, 'comment_body': 'Added in 0f66d2d.', 'comment_created': datetime.datetime(2020, 6, 18, 20, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 442495099, 'comment_body': 'Thank you, was missing `operator==` in the iterator impl (e3c1666 )', 'comment_created': datetime.datetime(2020, 6, 18, 20, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 442495955, 'comment_body': 'Demo of reworked field descriptor sorting. ', 'comment_created': datetime.datetime(2020, 6, 18, 20, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 442496444, 'comment_body': ""The sort function is now taking `DescriptorId_t` so I don't think it makes a difference (and is nicer to type for people writing their own lambdas)."", 'comment_created': datetime.datetime(2020, 6, 18, 20, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 442497009, 'comment_body': 'PR for this issue is: #5879 ', 'comment_created': datetime.datetime(2020, 6, 18, 20, 54, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 442498689, 'comment_body': 'I believe we are able to sidestep this issue altogether with the new sorting method in e05a85b37988b', 'comment_created': datetime.datetime(2020, 6, 18, 20, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 442692393, 'comment_body': 'I think we should use the simpler construction here, without `modelRead` and an explicit page source but simply with the path name', 'comment_created': datetime.datetime(2020, 6, 19, 7, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 442712349, 'comment_body': '--> `ASSERT_EQ`', 'comment_created': datetime.datetime(2020, 6, 19, 8, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 442712565, 'comment_body': '--> `ASSERT_EQ`', 'comment_created': datetime.datetime(2020, 6, 19, 8, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 442712747, 'comment_body': '--> `ASSERT_EQ`', 'comment_created': datetime.datetime(2020, 6, 19, 8, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 442713113, 'comment_body': 'Here as well: the simpler construction should do the job', 'comment_created': datetime.datetime(2020, 6, 19, 8, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 442713270, 'comment_body': '`ASSERT_EQ`', 'comment_created': datetime.datetime(2020, 6, 19, 8, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 442713343, 'comment_body': '`ASSERT_EQ`', 'comment_created': datetime.datetime(2020, 6, 19, 8, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 442713457, 'comment_body': 'ASSERT_EQ', 'comment_created': datetime.datetime(2020, 6, 19, 8, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 443256014, 'comment_body': 'Done in b19fdd9 ', 'comment_created': datetime.datetime(2020, 6, 21, 20, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}, {'comment_id': 443256023, 'comment_body': 'Thank you, done in b19fdd9 ', 'comment_created': datetime.datetime(2020, 6, 21, 20, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mxxo', 'type': 'User'}]","[{'commit_sha': '02c5ccaf2f92fb8b8e8e102f0bf7edabb8068792', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2618a4c3e0a1314d32b9d20d84c149537afdf1d0', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9b153dac35f5a002489928b884c05d8070ca072', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67c9483e67a1e1ef6997b891198e49bcb170e909', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a03c0d028a53e600aca283a33ef3c4483669944', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42427160f00ab21aa70876d36d2eed0523ee83f3', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '320cfcb02c1230b776d8770119c7afda1a1ce009', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e5810e89539d4f254a8e74044898059fde38d11', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aba1a277dd738c6896374439e0f3f2d38c8bc5e1', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b19fdd98320717004499c0bc57577718b4650663', 'committer_username': 'mxxo', 'committer_name': 'Max Orok', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 6, 16, 19, 43, tzinfo=datetime.timezone.utc)}]",Max Orok,40000585,,User,,70,,8,26

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
10994345,root,root-project/root,C++,1247,2609,123,533,82429,801,17,272,"[{'id': 686235799, 'number': 8634, 'closed': datetime.datetime(2023, 2, 9, 21, 14, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 18, 28, 20, tzinfo=datetime.timezone.utc), 'time_taken': 50208390.0, 'time_delta': '581 days, 2:46:30', 'additions': 122, 'deletions': 10, 'state': 'closed'}, {'id': 676368262, 'number': 8525, 'closed': None, 'created': datetime.datetime(2021, 6, 23, 14, 56, 48, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 660, 'deletions': 1, 'state': 'open'}, {'id': 675566787, 'number': 8511, 'closed': datetime.datetime(2021, 6, 24, 8, 7, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 22, 16, 3, 44, tzinfo=datetime.timezone.utc), 'time_taken': 144215.0, 'time_delta': '1 day, 16:03:35', 'additions': 45, 'deletions': 0, 'state': 'closed'}, {'id': 667028972, 'number': 8404, 'closed': datetime.datetime(2021, 6, 11, 12, 27, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 15, 52, 22, tzinfo=datetime.timezone.utc), 'time_taken': 74114.0, 'time_delta': '20:35:14', 'additions': 146, 'deletions': 1, 'state': 'closed'}, {'id': 661260075, 'number': 8334, 'closed': datetime.datetime(2024, 6, 10, 11, 46, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 3, 22, 29, 58, tzinfo=datetime.timezone.utc), 'time_taken': 95260571.0, 'time_delta': '1102 days, 13:16:11', 'additions': 78, 'deletions': 3, 'state': 'closed'}, {'id': 658310612, 'number': 8285, 'closed': datetime.datetime(2021, 6, 2, 20, 13, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 31, 13, 20, 54, tzinfo=datetime.timezone.utc), 'time_taken': 197568.0, 'time_delta': '2 days, 6:52:48', 'additions': 39, 'deletions': 0, 'state': 'closed'}, {'id': 650047669, 'number': 8227, 'closed': datetime.datetime(2021, 5, 22, 5, 36, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 21, 15, 10, 47, tzinfo=datetime.timezone.utc), 'time_taken': 51929.0, 'time_delta': '14:25:29', 'additions': 29, 'deletions': 18, 'state': 'closed'}, {'id': 648086808, 'number': 8210, 'closed': datetime.datetime(2021, 5, 24, 20, 20, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 19, 21, 30, 34, tzinfo=datetime.timezone.utc), 'time_taken': 427788.0, 'time_delta': '4 days, 22:49:48', 'additions': 187, 'deletions': 2, 'state': 'closed'}, {'id': 647976403, 'number': 8209, 'closed': datetime.datetime(2021, 5, 20, 7, 21, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 19, 19, 24, 14, tzinfo=datetime.timezone.utc), 'time_taken': 43012.0, 'time_delta': '11:56:52', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 643415303, 'number': 8172, 'closed': datetime.datetime(2021, 5, 13, 17, 15, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 12, 18, 46, 34, tzinfo=datetime.timezone.utc), 'time_taken': 80938.0, 'time_delta': '22:28:58', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 631837132, 'number': 8113, 'closed': datetime.datetime(2021, 5, 11, 7, 3, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 6, 20, 1, 3, tzinfo=datetime.timezone.utc), 'time_taken': 385318.0, 'time_delta': '4 days, 11:01:58', 'additions': 71, 'deletions': 26, 'state': 'closed'}, {'id': 630987447, 'number': 8103, 'closed': datetime.datetime(2022, 5, 24, 9, 31, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 5, 23, 23, tzinfo=datetime.timezone.utc), 'time_taken': 33127703.0, 'time_delta': '383 days, 10:08:23', 'additions': 106, 'deletions': 21, 'state': 'closed'}, {'id': 629246666, 'number': 8077, 'closed': datetime.datetime(2021, 5, 26, 14, 14, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 3, 17, 22, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1975900.0, 'time_delta': '22 days, 20:51:40', 'additions': 227, 'deletions': 29, 'state': 'closed'}, {'id': 619509192, 'number': 7942, 'closed': datetime.datetime(2021, 5, 11, 13, 52, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 20, 17, 12, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1802397.0, 'time_delta': '20 days, 20:39:57', 'additions': 25, 'deletions': 35, 'state': 'closed'}, {'id': 616932493, 'number': 7902, 'closed': datetime.datetime(2021, 4, 26, 21, 41, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 16, 15, 41, 39, tzinfo=datetime.timezone.utc), 'time_taken': 885590.0, 'time_delta': '10 days, 5:59:50', 'additions': 408, 'deletions': 0, 'state': 'closed'}, {'id': 615375834, 'number': 7879, 'closed': datetime.datetime(2021, 6, 22, 20, 39, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 14, 16, 21, 31, tzinfo=datetime.timezone.utc), 'time_taken': 5977061.0, 'time_delta': '69 days, 4:17:41', 'additions': 36, 'deletions': 0, 'state': 'closed'}, {'id': 614810639, 'number': 7862, 'closed': datetime.datetime(2021, 12, 16, 14, 47, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 13, 22, 57, 3, tzinfo=datetime.timezone.utc), 'time_taken': 21311456.0, 'time_delta': '246 days, 15:50:56', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 613816285, 'number': 7842, 'closed': datetime.datetime(2021, 4, 21, 15, 56, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 12, 17, 38, 9, tzinfo=datetime.timezone.utc), 'time_taken': 771475.0, 'time_delta': '8 days, 22:17:55', 'additions': 32, 'deletions': 0, 'state': 'closed'}, {'id': 609355671, 'number': 7784, 'closed': datetime.datetime(2021, 7, 2, 17, 18, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 5, 23, 54, 44, tzinfo=datetime.timezone.utc), 'time_taken': 7579440.0, 'time_delta': '87 days, 17:24:00', 'additions': 80, 'deletions': 2, 'state': 'closed'}, {'id': 609303039, 'number': 7783, 'closed': datetime.datetime(2021, 4, 24, 10, 48, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 5, 22, 52, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1598109.0, 'time_delta': '18 days, 11:55:09', 'additions': 266, 'deletions': 0, 'state': 'closed'}, {'id': 604301965, 'number': 7751, 'closed': datetime.datetime(2021, 4, 1, 6, 45, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 30, 19, 26, 30, tzinfo=datetime.timezone.utc), 'time_taken': 127113.0, 'time_delta': '1 day, 11:18:33', 'additions': 119, 'deletions': 1, 'state': 'closed'}, {'id': 604010528, 'number': 7749, 'closed': None, 'created': datetime.datetime(2021, 3, 30, 16, 6, 26, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 178, 'deletions': 5, 'state': 'open'}, {'id': 603153569, 'number': 7736, 'closed': datetime.datetime(2021, 3, 30, 15, 12, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 29, 21, 20, 52, tzinfo=datetime.timezone.utc), 'time_taken': 64326.0, 'time_delta': '17:52:06', 'additions': 67, 'deletions': 1, 'state': 'closed'}, {'id': 599768379, 'number': 7667, 'closed': datetime.datetime(2021, 3, 24, 17, 30, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 24, 14, 59, 35, tzinfo=datetime.timezone.utc), 'time_taken': 9057.0, 'time_delta': '2:30:57', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 591229981, 'number': 7480, 'closed': None, 'created': datetime.datetime(2021, 3, 11, 22, 57, 45, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 77, 'deletions': 6, 'state': 'open'}, {'id': 589868546, 'number': 7447, 'closed': datetime.datetime(2021, 3, 10, 17, 41, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 10, 16, 38, 31, tzinfo=datetime.timezone.utc), 'time_taken': 3785.0, 'time_delta': '1:03:05', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 586136211, 'number': 7399, 'closed': datetime.datetime(2021, 3, 12, 13, 45, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 6, 21, 18, 12, tzinfo=datetime.timezone.utc), 'time_taken': 491222.0, 'time_delta': '5 days, 16:27:02', 'additions': 78, 'deletions': 5, 'state': 'closed'}, {'id': 575298237, 'number': 7235, 'closed': datetime.datetime(2021, 3, 8, 9, 30, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 18, 0, 28, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1587683.0, 'time_delta': '18 days, 9:01:23', 'additions': 48, 'deletions': 13, 'state': 'closed'}, {'id': 548502494, 'number': 6983, 'closed': datetime.datetime(2021, 1, 7, 18, 45, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 4, 22, 16, 31, tzinfo=datetime.timezone.utc), 'time_taken': 246554.0, 'time_delta': '2 days, 20:29:14', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 466240229, 'number': 6162, 'closed': datetime.datetime(2020, 8, 25, 13, 0, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 17, 13, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1194425.0, 'time_delta': '13 days, 19:47:05', 'additions': 289, 'deletions': 49, 'state': 'closed'}, {'id': 459582703, 'number': 6105, 'closed': datetime.datetime(2023, 12, 7, 13, 13, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 20, 36, 55, tzinfo=datetime.timezone.utc), 'time_taken': 105813391.0, 'time_delta': '1224 days, 16:36:31', 'additions': 458, 'deletions': 33, 'state': 'closed'}, {'id': 458756601, 'number': 6101, 'closed': datetime.datetime(2024, 5, 30, 12, 57, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 23, 0, 32, tzinfo=datetime.timezone.utc), 'time_taken': 121010230.0, 'time_delta': '1400 days, 13:57:10', 'additions': 116, 'deletions': 8, 'state': 'closed'}, {'id': 455851528, 'number': 6073, 'closed': datetime.datetime(2020, 8, 14, 18, 37, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 17, 21, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1905366.0, 'time_delta': '22 days, 1:16:06', 'additions': 59, 'deletions': 119, 'state': 'closed'}, {'id': 447663796, 'number': 6025, 'closed': datetime.datetime(2020, 7, 15, 10, 33, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 22, 8, 50, tzinfo=datetime.timezone.utc), 'time_taken': 390261.0, 'time_delta': '4 days, 12:24:21', 'additions': 66, 'deletions': 1, 'state': 'closed'}, {'id': 447001508, 'number': 6016, 'closed': datetime.datetime(2020, 7, 10, 21, 44, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 17, 39, 51, tzinfo=datetime.timezone.utc), 'time_taken': 101093.0, 'time_delta': '1 day, 4:04:53', 'additions': 8, 'deletions': 3, 'state': 'closed'}, {'id': 446533634, 'number': 6008, 'closed': datetime.datetime(2020, 7, 28, 15, 0, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 23, 23, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1697787.0, 'time_delta': '19 days, 15:36:27', 'additions': 53, 'deletions': 3, 'state': 'closed'}, {'id': 446324100, 'number': 6003, 'closed': datetime.datetime(2020, 7, 14, 13, 28, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 15, 36, 5, tzinfo=datetime.timezone.utc), 'time_taken': 510738.0, 'time_delta': '5 days, 21:52:18', 'additions': 85, 'deletions': 1, 'state': 'closed'}, {'id': 445791058, 'number': 5989, 'closed': datetime.datetime(2020, 7, 28, 13, 38, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 0, 18, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1775955.0, 'time_delta': '20 days, 13:19:15', 'additions': 100, 'deletions': 11, 'state': 'closed'}, {'id': 444868593, 'number': 5985, 'closed': datetime.datetime(2020, 7, 10, 13, 51, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 16, 6, 5, tzinfo=datetime.timezone.utc), 'time_taken': 337545.0, 'time_delta': '3 days, 21:45:45', 'additions': 67, 'deletions': 25, 'state': 'closed'}, {'id': 443731325, 'number': 5976, 'closed': datetime.datetime(2020, 7, 3, 9, 2, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 20, 37, 48, tzinfo=datetime.timezone.utc), 'time_taken': 44694.0, 'time_delta': '12:24:54', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 443686929, 'number': 5975, 'closed': datetime.datetime(2020, 7, 5, 9, 46, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 18, 48, 7, tzinfo=datetime.timezone.utc), 'time_taken': 226696.0, 'time_delta': '2 days, 14:58:16', 'additions': 15, 'deletions': 1, 'state': 'closed'}, {'id': 442934142, 'number': 5967, 'closed': datetime.datetime(2020, 7, 3, 9, 3, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 19, 32, 36, tzinfo=datetime.timezone.utc), 'time_taken': 135066.0, 'time_delta': '1 day, 13:31:06', 'additions': 22, 'deletions': 10, 'state': 'closed'}, {'id': 441552104, 'number': 5947, 'closed': datetime.datetime(2020, 6, 30, 14, 4, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 17, 29, 26, tzinfo=datetime.timezone.utc), 'time_taken': 74095.0, 'time_delta': '20:34:55', 'additions': 40, 'deletions': 0, 'state': 'closed'}, {'id': 440309597, 'number': 5934, 'closed': datetime.datetime(2020, 7, 21, 14, 23, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 23, 41, 19, tzinfo=datetime.timezone.utc), 'time_taken': 2212925.0, 'time_delta': '25 days, 14:42:05', 'additions': 226, 'deletions': 39, 'state': 'closed'}, {'id': 438863663, 'number': 5919, 'closed': datetime.datetime(2020, 8, 11, 14, 53, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 22, 49, 3, tzinfo=datetime.timezone.utc), 'time_taken': 4205087.0, 'time_delta': '48 days, 16:04:47', 'additions': 195, 'deletions': 2, 'state': 'closed'}, {'id': 438145715, 'number': 5911, 'closed': datetime.datetime(2020, 6, 24, 11, 18, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 19, 54, 54, tzinfo=datetime.timezone.utc), 'time_taken': 141841.0, 'time_delta': '1 day, 15:24:01', 'additions': 51, 'deletions': 23, 'state': 'closed'}, {'id': 438095327, 'number': 5910, 'closed': datetime.datetime(2020, 6, 24, 11, 15, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 17, 58, 11, tzinfo=datetime.timezone.utc), 'time_taken': 148667.0, 'time_delta': '1 day, 17:17:47', 'additions': 64, 'deletions': 7, 'state': 'closed'}, {'id': 436085704, 'number': 5890, 'closed': datetime.datetime(2020, 6, 19, 6, 46, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 20, 42, 51, tzinfo=datetime.timezone.utc), 'time_taken': 122610.0, 'time_delta': '1 day, 10:03:30', 'additions': 34, 'deletions': 10, 'state': 'closed'}, {'id': 434845445, 'number': 5879, 'closed': datetime.datetime(2020, 6, 19, 7, 36, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 22, 10, 53, tzinfo=datetime.timezone.utc), 'time_taken': 293136.0, 'time_delta': '3 days, 9:25:36', 'additions': 84, 'deletions': 2, 'state': 'closed'}, {'id': 432758559, 'number': 5848, 'closed': datetime.datetime(2020, 6, 22, 12, 45, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 23, 49, 20, tzinfo=datetime.timezone.utc), 'time_taken': 996943.0, 'time_delta': '11 days, 12:55:43', 'additions': 210, 'deletions': 5, 'state': 'closed'}, {'id': 431447483, 'number': 5831, 'closed': datetime.datetime(2020, 6, 12, 13, 39, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 23, 23, 38, tzinfo=datetime.timezone.utc), 'time_taken': 310558.0, 'time_delta': '3 days, 14:15:58', 'additions': 108, 'deletions': 108, 'state': 'closed'}, {'id': 428653181, 'number': 5807, 'closed': datetime.datetime(2020, 6, 8, 13, 34, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 18, 35, 51, tzinfo=datetime.timezone.utc), 'time_taken': 241102.0, 'time_delta': '2 days, 18:58:22', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 428609690, 'number': 5805, 'closed': datetime.datetime(2020, 6, 16, 7, 16, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 17, 36, 17, tzinfo=datetime.timezone.utc), 'time_taken': 913191.0, 'time_delta': '10 days, 13:39:51', 'additions': 56, 'deletions': 46, 'state': 'closed'}, {'id': 426810940, 'number': 5768, 'closed': datetime.datetime(2020, 6, 10, 23, 52, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 20, 24, 44, tzinfo=datetime.timezone.utc), 'time_taken': 703659.0, 'time_delta': '8 days, 3:27:39', 'additions': 217, 'deletions': 8, 'state': 'closed'}, {'id': 423570145, 'number': 5714, 'closed': datetime.datetime(2020, 5, 29, 15, 53, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 27, 2, 37, 22, tzinfo=datetime.timezone.utc), 'time_taken': 220574.0, 'time_delta': '2 days, 13:16:14', 'additions': 40, 'deletions': 17, 'state': 'closed'}, {'id': 418182498, 'number': 5619, 'closed': datetime.datetime(2020, 5, 29, 14, 1, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 18, 46, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1278866.0, 'time_delta': '14 days, 19:14:26', 'additions': 1226, 'deletions': 1371, 'state': 'closed'}]"
