pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
474248366,Neural Tangents Migration from JAX to TensorFlow,"A list of dependencies:
* Trax extensions 
* TF-nightly NumPy
* TF-nightly `stateless_random_ops`
* TF-nightly NumPy bitwise operations",True,61,https://api.github.com/repos/google/neural-tangents/pulls/61,https://github.com/google/neural-tangents/pull/61,closed,2431,303,19,43,4,43,0,0,[],2020-08-26 22:46:36+00:00,2020-08-29 04:50:55+00:00,194659.0,"2 days, 6:04:19","[{'comment_id': 477693701, 'comment_body': ""Should we remove the respective function from `lax.py` since it's now here?"", 'comment_created': datetime.datetime(2020, 8, 26, 23, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477705005, 'comment_body': 'Yeah, we can remove it. In that case, we will call `extensions.tf_dot_general` rather than `lax...`, so maybe better keep it?', 'comment_created': datetime.datetime(2020, 8, 26, 23, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477709418, 'comment_body': ""Sure, but in that case I'd recommend just calling tf_dot_general from inside the lax `dot_general` method, to avoid code duplication."", 'comment_created': datetime.datetime(2020, 8, 26, 23, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477717783, 'comment_body': 'Yeah, I will keep everywhere as `lax.dot_general` to make things consistent. Do you mean we should remove `tf_dot_general` inside `extensions`? Thanks!', 'comment_created': datetime.datetime(2020, 8, 26, 23, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477721827, 'comment_body': 'I meant keeping both functions, but removing the function body and helper functions from `lax` and just having there something like `def dot_general(...): return extensions.tf_dot_general(...)`. What do you think?', 'comment_created': datetime.datetime(2020, 8, 27, 0, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477729580, 'comment_body': 'I see, good idea!', 'comment_created': datetime.datetime(2020, 8, 27, 0, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478596335, 'comment_body': ""Include this if you want, but NT doesn't follow pylint at the moment anyway."", 'comment_created': datetime.datetime(2020, 8, 27, 17, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sschoenholz', 'type': 'User'}, {'comment_id': 478597220, 'comment_body': ""Eventually, of course, we'd have to think of a nicer way to do this."", 'comment_created': datetime.datetime(2020, 8, 27, 17, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sschoenholz', 'type': 'User'}, {'comment_id': 478597635, 'comment_body': 'Does the LRU caching work with tf.function? ', 'comment_created': datetime.datetime(2020, 8, 27, 17, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sschoenholz', 'type': 'User'}, {'comment_id': 478598619, 'comment_body': 'Is there really no problem here? dataclasses.dataclass registers Kernel as a JAX PyTree node, which is required to get desired behavior around static functions / jit. ', 'comment_created': datetime.datetime(2020, 8, 27, 17, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sschoenholz', 'type': 'User'}, {'comment_id': 478604124, 'comment_body': 'Oh, yeah, the `pylint` comment is from the original TF repo.', 'comment_created': datetime.datetime(2020, 8, 27, 18, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478608214, 'comment_body': 'This is a point that I do not know...What I did is just getting rid of the `jax.core` dependency @wangpengmit, @allenlavoie, @akshaym Would you mind elaborating on this point that Sam mentioned? Thanks!', 'comment_created': datetime.datetime(2020, 8, 27, 18, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478790420, 'comment_body': 'Sorry, Sam, a nicer way to ... ?', 'comment_created': datetime.datetime(2020, 8, 28, 2, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478808663, 'comment_body': 'Great point, Sam! Thanks for bringing this up!', 'comment_created': datetime.datetime(2020, 8, 28, 3, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479543857, 'comment_body': 'By the way, Sam @sschoenholz , if I remove the `dataclasses` wrapper, it seems that the `Kernel` object initialization does not require any parameters at all? \r\n', 'comment_created': datetime.datetime(2020, 8, 28, 21, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479555566, 'comment_body': ""FYI, I'm still quite confused wrt to why we need `pygame`, `matplotlib` and `more-itertools` since none of these appear to be used anywhere"", 'comment_created': datetime.datetime(2020, 8, 28, 22, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479555846, 'comment_body': ""1) In these kind of places, perhaps add a TODO comment above + quick note on what's failing and why, to be able to find them later?\r\n\r\n2) Do you know if all tests are failing, or just some subset of them? I.e. you could, optionally call the passing test files individually here."", 'comment_created': datetime.datetime(2020, 8, 28, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479557390, 'comment_body': 'Why switch from division to multiplication here?', 'comment_created': datetime.datetime(2020, 8, 28, 22, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479558141, 'comment_body': 'I noticed you removed `out` from `mean` arguments, but not here - should it be removed from here (and perhaps from the `_mean_and_var` at all)?', 'comment_created': datetime.datetime(2020, 8, 28, 22, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479560540, 'comment_body': 'Would it be possible to make the `Kernel` class a `@dataclasses.dataclass` (i.e. https://docs.python.org/3/library/dataclasses.html; vs `@nt.utils.dataclasses.dataclasss`, as it was before), and avoid this kind of changes?', 'comment_created': datetime.datetime(2020, 8, 28, 22, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479560800, 'comment_body': 'dictionary (typo)', 'comment_created': datetime.datetime(2020, 8, 28, 22, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479567338, 'comment_body': 'For TensorFlow `pool`, it only has average pooling, so when doing sum pooling, the output needs to be multiplied by the window size, which is opposite from JAX `reduce_window`.', 'comment_created': datetime.datetime(2020, 8, 28, 22, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479571502, 'comment_body': 'Roman, thanks for pointing this out! I removed the `out` argument in `np.var` in the latest commit. Maybe it is better to keep the `_mean_and_var` interface as its origin form (in order to avoid many changes in the places where `_mean_and_var` are called)?', 'comment_created': datetime.datetime(2020, 8, 28, 23, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479575525, 'comment_body': ""I think it's not being used anywhere (and perhaps shouldn't have been introduced in the first place), so I would just remove it everywhere, but I'm ok either way here"", 'comment_created': datetime.datetime(2020, 8, 28, 23, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479577237, 'comment_body': ""1) Great point! I believe in that case it's best to have the multiplication inside the `lax.reduce_window`, for the purpose of matching the original `lax.reduce_window` behavior (I believe it's called in other places too, that way you don't need to adjust the computation in such places)\r\n\r\n2) I also think this branch is when `pool_type == Pooling.AVG`, so in that case, you would want to have no rescaling here, correct (instead, it currently behaves as a sum pool, not average)."", 'comment_created': datetime.datetime(2020, 8, 28, 23, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479578978, 'comment_body': 'I see. Thanks!', 'comment_created': datetime.datetime(2020, 8, 28, 23, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479579896, 'comment_body': '@romanngg Roman, for test files except `infinite_fcn_test`, `function_space_test`, `weight_space_test` and `stax_test`, I have not replaced the JAX support with TF support (a lot of workload, and probably not be able to do it before the deadline). I will add TODO comments in Travis CI.', 'comment_created': datetime.datetime(2020, 8, 29, 0, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479581829, 'comment_body': ""> Great point! I believe in that case it's best to have the multiplication inside the lax.reduce_window, for the \r\n> purpose of matching the original lax.reduce_window behavior (I believe it's called in other places too, that way \r\n> you don't need to adjust the computation in such places)\r\n\r\nThanks for bringing this up, Roman! Do you have an idea on how to embed sum pooling inside `reduce_window`? The only parameter related to pooling type that `reduce_window` receives is the third parameter, which is a callable (that is, either `np.add` or `np.max`). For both sum pooling and average pooling, `np.add` is the representation for them, and I think this is also the same case for JAX? That is the reason that in `ostax`, an extra rescaler function is used to normalize the output when it is average pooling (JAX `reduce_window` does not automatically support average pooling, while TF `reduce_window` does not automatically support sum pooling).\r\n\r\nPlease correct me if I am wrong."", 'comment_created': datetime.datetime(2020, 8, 29, 0, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479582112, 'comment_body': '> I also think this branch is when pool_type == Pooling.AVG, so in that case, you would want to have no rescaling here, \r\n> correct (instead, it currently behaves as a sum pool, not average).\r\n\r\nYes, I think you are right!\r\n', 'comment_created': datetime.datetime(2020, 8, 29, 0, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479582334, 'comment_body': 'Great! In that case I suggest to just call the tests that pass here individually. ', 'comment_created': datetime.datetime(2020, 8, 29, 0, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479582710, 'comment_body': ""Yes your understanding is correct, and we just want your version of `lax.reduce_window` to return sum pooling result. So you can just have `* np.prod(window_shape)` inside your `lax.reduce_window`, and all other places, like this one, wouldn't need to be changed."", 'comment_created': datetime.datetime(2020, 8, 29, 0, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479582888, 'comment_body': 'I.e. the decision to normalize or not is made in other places around the code, by just using a rescaler; `lax.reduce_window` just needs to return the sum.', 'comment_created': datetime.datetime(2020, 8, 29, 0, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479583079, 'comment_body': 'Oh, I see what you mean, Roman! Sorry I misunderstood you. @romanngg  Great idea! I will make the revision.', 'comment_created': datetime.datetime(2020, 8, 29, 0, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479584581, 'comment_body': 'Sure!', 'comment_created': datetime.datetime(2020, 8, 29, 0, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479584825, 'comment_body': '@romanngg Just to make sure, call the test files individually rather than test cases individually, if I understand correctly?', 'comment_created': datetime.datetime(2020, 8, 29, 0, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479586220, 'comment_body': 'So the problem here is not about `dataclasses`. It is that `dataclasses.asdict` method will trigger deepcopy of the objects, where TF Tensor does not allow being deep-copied. That was the reason I switched to construct the dictionary directly in July.', 'comment_created': datetime.datetime(2020, 8, 29, 0, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479588554, 'comment_body': 'Yes, I think test cases would be too much hassle', 'comment_created': datetime.datetime(2020, 8, 29, 1, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479589600, 'comment_body': 'Got it! Thanks, Roman!', 'comment_created': datetime.datetime(2020, 8, 29, 1, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479590064, 'comment_body': ""Yes, that's unfortunately a problem, since the `dataclass` decorator gave it the necessary initialization method (i.e. just filling all the fields with passed values). So without it you'd need to create your own `__init__` for the code to work I think. But see my other comment, I think we can keep it as a dataclass"", 'comment_created': datetime.datetime(2020, 8, 29, 1, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479590171, 'comment_body': 'Ok, but perhaps then still you can keep it a `dataclasses.dataclass`, and provide it with a custom `Kernel._asdict()` method that would do wha you are doing here?', 'comment_created': datetime.datetime(2020, 8, 29, 1, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479591912, 'comment_body': 'Sounds good!', 'comment_created': datetime.datetime(2020, 8, 29, 1, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479605802, 'comment_body': ""I think another option would be to use Python's dataclasses.dataclass rather than the NT version."", 'comment_created': datetime.datetime(2020, 8, 29, 4, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sschoenholz', 'type': 'User'}, {'comment_id': 479606777, 'comment_body': 'Yes, Sam, I did add Python’s native dataclasses!', 'comment_created': datetime.datetime(2020, 8, 29, 4, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}]","[{'commit_sha': '5b87f044302f1712805bd6f8066458b34a37d47d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1ebaf7d9e76b295479a16113ebcf86c9af2e8173', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f0a02a00c807c96d3f5de03465754ea72c598b07', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'abd160d9cdaef5add81e3fa0afff263696b0abdc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5e4b6faa6281b827bf99118d5593755454725f57', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9d4913d0b5721691a23fbc239cff019e9a43c7a1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '41c3689a934d27c2691149dca97f8b6ae50eff25', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ad2b99b536c527a52172f37d5eef016e0e0cea04', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'acbfd7ca6a7fda72a1cb8dc4238cf40bde8037ea', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '869ce3ff8911f69a56568e64c007e44a814c1f82', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2724744ed446d96399d9038ac84d49323a0f1af7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8d3e56d26f703d0deb9bf4e3fd50215478aef84f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5eeaade8a3456d23db2ebfafbcdbb0e342647d60', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '177df74c54c15c54c7703ea1987802da19661dfd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a47dd2541352593c5ebbe042f3ea3bef4b983f62', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '02ec8c09d1130922f80b4a77606a16ba09baf85e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3e50ecab240fcb666cf69cc846a1d011cea2fb4c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0488abe536d251071de38077d70ac20441c249a0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '49ea94d0bdd48b34b2a4a12c9a5b274f35477ad9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9d75b76dc981188ff765febf789230a890621312', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dc7d67530f88fb1eb7e8d7726e166df84d24900d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a9174d0094205d413d779ab2c9db2b7634cbd114', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fc626be34db285d5417713985d6695755000bb40', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6da3cc47631f1d5fb504f8e422deeb32b3869cd9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '43529725550f84e43cffb9072c702945b9307a3e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '82466f78cbed3ff689529297f286e5a24a534884', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'da13220652e4f3aac59140c55aac4129bf7f3809', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'eafefa4bbe4a0d432e12579baccc5e81abc165d9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b22718797ab2a881294bee8b319853527da38fb7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '304487219795ca2f5726742fe20dd5caae89558b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '348d14668783f6feffc9a6af588a30268d181c0b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '975af2602f8b0223c54be25f24f68af2da6ccc54', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b0cb0cb8cc163cc8df461e0f41c05447543e44ee', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ac26953412a1d2beca905b7a619c1fca6042fe12', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5acb150a10cda8e061ffb314b23c6969bcca24cf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b47195553f59efea79d06fd21754cd058f366dff', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '83b8a449ffb993e7c6d3b5d26334378dda85f9a5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cede73262d7a3d128b639172133118f47301b76b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '78fbb5bcdf52b1ec06c0dca90b13439a5ddce302', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '72894b6a1094ed965a64f49e7e09868802eafbd9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'deb133c1d85e7dd085ddf8c7a980e72735f6b973', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0aeb7c80f715e9dd73c830a625451ef47fa961ed', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '12ea5cdc3d11c26f266b8ad62cb51bcae9c5f2af', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Zhibo Zhang ,29133834,zhibozhang@cs.toronto.edu,User,,97,,9,15
472726735,Add the TensorFlow version of some JAX utilities,"As titled, this Pull Request contains some necessary TF-based helper APIs for Neural Tangents, and they will be served as the main support.",True,59,https://api.github.com/repos/google/neural-tangents/pulls/59,https://github.com/google/neural-tangents/pull/59,closed,904,0,4,28,4,71,0,0,[],2020-08-24 19:42:46+00:00,2020-08-26 21:54:04+00:00,180678.0,"2 days, 2:11:18","[{'comment_id': 475864976, 'comment_body': ""Thanks again for this awesome effort to make NT work with TF!\r\n\r\nInitial question: if we're trying to mirror the necessary lax functionality in TF, for the purpose of easier import / invocation swapping, should this method\r\n\r\n1) be in a file called `lax.py` like this one https://github.com/DarrenZhang01/Neural_Tangents_TensorFlow/blob/master/tf_jax_stax/tf_lax.py\r\n2) be called `dot_general`, similarly, for the purpose of matching `lax.py`?\r\n3) Have the `precision` argument, to fully match the signature (even if it goes unused - not sure if TF has a straightforward analog)."", 'comment_created': datetime.datetime(2020, 8, 24, 20, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475865805, 'comment_body': 'Here and elsewhere, if a method is not used outside of the file (except tests), suggest marking them as private with underscores `_`.', 'comment_created': datetime.datetime(2020, 8, 24, 20, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475866379, 'comment_body': 'Yes, great insight! Thanks, Roman! I will make the changes.', 'comment_created': datetime.datetime(2020, 8, 24, 20, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 475867605, 'comment_body': ""Here and elsewhere, I'd suggest using type annotations (e.g. as in https://jax.readthedocs.io/en/latest/_modules/jax/lax/lax.html) instead of specifying types in the docstring. Feel free to postpone this until later if we're short on time."", 'comment_created': datetime.datetime(2020, 8, 24, 20, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475867867, 'comment_body': 'By the way, do you think I should add `reduce_window`, `dot_general`, `conv_general_dilated` all together into `lax` and make one single Pull Request or I should do them one by one? I am not sure which one is more convenient for you. Thanks, Roman @romanngg !', 'comment_created': datetime.datetime(2020, 8, 24, 20, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 475868814, 'comment_body': 'I would suggest submitting all `lax.py` file together with all the methods that you need there + also the respective tests!', 'comment_created': datetime.datetime(2020, 8, 24, 20, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475870028, 'comment_body': 'Just curious, why?', 'comment_created': datetime.datetime(2020, 8, 24, 20, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475871583, 'comment_body': 'very minor nit: in NT and it appears in lax.py, we have a convention of having public methods at the top and private helpers at the bottom of the file, would be very nice if you could arrange your files similarly!', 'comment_created': datetime.datetime(2020, 8, 24, 20, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475872309, 'comment_body': ""IMO this doesn't need to be a separate method instead of just calling tensordot"", 'comment_created': datetime.datetime(2020, 8, 24, 20, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475877561, 'comment_body': 'Minor nit: in NT we usually use single quotes `\'` vs `""` for strings, and python 3.6 literal string interpolation for brevity, so here and elsewhere I\'d suggest something like\r\n```\r\nraise ValueError(\'The input matrices are required to have the same number \'\r\n                 \'of contraction dimensions, but got: \'\r\n                 f\'lhs {len(lhs_contraction)}, rhs: {len(rhs_contraction)}.\')\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 20, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475884974, 'comment_body': 'Sounds good!', 'comment_created': datetime.datetime(2020, 8, 24, 20, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 475889559, 'comment_body': 'Oh yeah, great question! I think Ashish mentioned that we want the newly constructed APIs - general conv, etc to be able to inter-op with the rest of the TF ecosystem, but I guess TF XLA is too low-level and independent. @wangpengmit Would you mind verifying this? ', 'comment_created': datetime.datetime(2020, 8, 24, 20, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476739437, 'comment_body': 'Here and elsewhere, please remove unused commented code. If applicable, replace it with TODOs/text to be more specific regarding the purpose of the comment.', 'comment_created': datetime.datetime(2020, 8, 25, 21, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476739575, 'comment_body': 'redundant ()', 'comment_created': datetime.datetime(2020, 8, 25, 21, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476742412, 'comment_body': ""I still feel like this call doesn't justify a whole separate function, as opposed to e.g. the `linalg.matmul` call below. Unless it's gonna be used a lot elsewhere. Lmk if you think otherwise!"", 'comment_created': datetime.datetime(2020, 8, 25, 21, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476752661, 'comment_body': ""Is this referring to your upcoming modification of `stax.py` pooling layers? If so, I believe it may be cleaner to have the adjustments be done here, to match the `lax.reduce_window` API precisely, and not have to prepare the inputs to each function call. (IIUC, you'd need to reshape `inputs` to `(1, 1) + inputs.shape` (https://www.tensorflow.org/api_docs/python/tf/nn/pool). But lmk if I'm missing something here!"", 'comment_created': datetime.datetime(2020, 8, 25, 21, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476759632, 'comment_body': ""Nit: please use two empty lines between top level defs, and one between class methods (https://www.python.org/dev/peps/pep-0008/#blank-lines; here it's the opposite)."", 'comment_created': datetime.datetime(2020, 8, 25, 21, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476762176, 'comment_body': 'To follow the NT convention, could you rename this file to `lax_test.py`, and put it into the `tests/` folder?', 'comment_created': datetime.datetime(2020, 8, 25, 21, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476763308, 'comment_body': ""Did you intend to copy the test file here? If not, I'm not sure why the cp, and how does the new test get tested? \r\n\r\nCould any copying be avoided by e.g. putting the file on the tests folder in the first place?"", 'comment_created': datetime.datetime(2020, 8, 25, 21, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476764446, 'comment_body': ""Just to double-check, are all the packages here needed? I don't see them used yet, and not sure if we need the nightly build either. Lmk!"", 'comment_created': datetime.datetime(2020, 8, 25, 21, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476774176, 'comment_body': 'Hi Roman, as you mentioned, I will put the `lax_test.py` file under tests folder. In terms of `lax` and `tf_jax_stax` (`ostax`) that I am going to commit later on, what do you think is a good place to put them? Actually only the test files will directly access them so it definitely will work if directly putting them under the tests folder. However, this does not look like a good structure. If we keep it under `tf_helpers`, maybe there is a need to integrate them as part of Neural Tangents in order to import them? (I am not sure doing something like `from ...tf_helpers import lax` will work). I need your insight here. Thanks!', 'comment_created': datetime.datetime(2020, 8, 25, 21, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476778148, 'comment_body': 'Yeah, a little bit of story here. Actually the above is the combination that I have figured out after many Travis CI build errors, as you can see - https://github.com/DarrenZhang01/Neural_Tangents_TensorFlow/commits/master/.travis.yml\r\n\r\nBy the way, is there anything I can do about the `jax.core` error in the latest commit?', 'comment_created': datetime.datetime(2020, 8, 25, 21, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476789420, 'comment_body': 'Re `jax.core` - make sure to remove `jax` from the install list in line 8, it is copied from github head below (because jax on pypi is not updated frequently enough)', 'comment_created': datetime.datetime(2020, 8, 25, 22, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476792184, 'comment_body': 'Hi Roman, I did not quite get what you mean here. Would you mind elaborating on it?\r\n\r\nActually this functionality has already been merged into Google Trax repo - https://github.com/google/trax/pull/956.\r\n\r\nLet me know!', 'comment_created': datetime.datetime(2020, 8, 25, 22, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476792540, 'comment_body': 'Got it! Thanks!', 'comment_created': datetime.datetime(2020, 8, 25, 22, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476793363, 'comment_body': ""And sure, feel free to import what you need, but If the current PR can pass tests without modifying the `.travis.yml` (I think it should be able to, or no?), then I'd postpone editing this file so that it's more clear what needs what additional packages at what point."", 'comment_created': datetime.datetime(2020, 8, 25, 22, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476798497, 'comment_body': ""I meant that function `_non_batched_matmul` doesn't seem to do much but just calls `tf.tensordot`, so I'm not sure if this needs to be a separate functions instead of just calling `tf.tensordot`, like you do below when you call `tf.linalg.matmul`. But it's a minor point, OK either way!"", 'comment_created': datetime.datetime(2020, 8, 25, 22, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476799028, 'comment_body': 'OK, I see what you mean. I will postpone doing the installation changes after replacing the APIs in the core files of Neural Tangents. But we still need a place to put `lax` and `ostax`, maybe directly under tests folder?', 'comment_created': datetime.datetime(2020, 8, 25, 22, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476802616, 'comment_body': 'Oh yes, you are right! At the beginning this helper did not look like this, and this is the one after many iterations of editing.\r\n\r\nI will remove this helper as you suggested.', 'comment_created': datetime.datetime(2020, 8, 25, 22, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476811420, 'comment_body': ""I believe having a top-level folder (same level as neural_tangents and tests) `tf_helpers`, and then in tests calling something like `from tf_helpers import lax` would work, or not? You may need an empty `__init__.py` file inside the `tf_helpers` folder, not an expert in module organization tbh. Re structure, I would be OK with either a separate top-level `tf_tests` / have files inside `tests` with `tf_` suffixes / or just have them in `tests`, and rename/move around if we run into naming conflicts / confusion. Since I don't see the whole structure very clearly yet, it may be best for you to decide! But I just find copying files a bit awkward and would instead try to call them from their original location."", 'comment_created': datetime.datetime(2020, 8, 25, 22, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476812244, 'comment_body': 'Please see my reply above - I believe they can be in `tf_helpers` and called from `[tf_]lax_test` and `[tf_]ostax_test` files in `tests` or `tf_tests`, but I may be wrong.', 'comment_created': datetime.datetime(2020, 8, 25, 22, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476851503, 'comment_body': 'extra blank line', 'comment_created': datetime.datetime(2020, 8, 25, 23, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476898417, 'comment_body': 'Yes, Roman, you pointed out the right direction! But things are a bit complex here and it really depends on cases. The above that you mentioned fits the case where the inputs do not contain batch and channel dimensions, but there are also cases where only batch dimension is there, the window dimensions contain unnecessary batch and channel dimensions where we need to remove them, etc., if I remember correctly. So I guess it would be more flexible to keep it in the current form?', 'comment_created': datetime.datetime(2020, 8, 26, 0, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476910919, 'comment_body': '> Please see my reply above - I believe they can be in `tf_helpers` and called from `[tf_]lax_test` and `[tf_]ostax_test` files in `tests` or `tf_tests`, but I may be wrong.\r\n\r\nYes, Roman, your strategy works! - https://travis-ci.org/github/google/neural-tangents/builds/721174208', 'comment_created': datetime.datetime(2020, 8, 26, 0, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476932387, 'comment_body': ""Since it's already in the `tf_helpers` folder, should we perhaps call it just `stax`, just like `lax`?"", 'comment_created': datetime.datetime(2020, 8, 26, 0, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476933853, 'comment_body': ""I believe this part should be adjusted to how it was done in https://jax.readthedocs.io/en/latest/_modules/jax/experimental/stax.html,\r\nand it would be better to instead make `lax.reduce_window` match the default API: https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.reduce_window.html#jax.lax.reduce_window\r\nSee my comment in the `reduce_window` discussion (either way, lines 131 and 132 aren't doing anything now)"", 'comment_created': datetime.datetime(2020, 8, 26, 1, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476997554, 'comment_body': ""I'm still a bit confused here.\r\n\r\n1) Your docstring mentions `N...C` layout (which is also the default layout of `stax/ostax`, so this is good), but the TF doc mentions `NC...` order by default - https://www.tensorflow.org/api_docs/python/tf/nn/pool. Is there is mistake here?\r\n\r\n2) I don't quite see how this method can be flexible enough to handle presence/absence of batch or channel axes, instead I see that it requires them to always be present, and always be at given indices. So to me this method appears _less_ flexible than the default API https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.reduce_window.html#jax.lax.reduce_window, where the user can construct the window shape and strides according to the situation. E.g. in the finite-width case, they insert `1` for the batch and channel axes (https://jax.readthedocs.io/en/latest/_modules/jax/experimental/stax.html); in the infinite-width case, we insert one(s) along the batch axis / axes https://github.com/google/neural-tangents/blob/e69b43c51be2c4d4c07f7748fa2060932ed7603e/neural_tangents/stax.py#L3666\r\n\r\nI believe it is also possible to adjust inputs to your API as well to get the behavior we want for arbitrary batch axes / channel axes / etc, but\r\n1) I think in your approach, you would always need to reshape/transpose the input tensor, before calling it and perhaps afterwards too, but with the default API we just need to specify the window_shape and strides, and no operations on the input tensor is needed.\r\n2) It breaks the correspondence to `jax.lax.reduce_window`.\r\n\r\nSo I would lean in favor of following the `lax` API convention, but again, please exercise your best judgement in case if I'm missing something!"", 'comment_created': datetime.datetime(2020, 8, 26, 2, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476999536, 'comment_body': ""Nit: revert this change since we don't need to touch this file now at all"", 'comment_created': datetime.datetime(2020, 8, 26, 2, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477000028, 'comment_body': 'Unused?  Here and elsewhere, please make sure to remove unused imports', 'comment_created': datetime.datetime(2020, 8, 26, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477001385, 'comment_body': ""[Tf]LaxTest? since it's not just conv"", 'comment_created': datetime.datetime(2020, 8, 26, 2, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477001672, 'comment_body': 'please use consistent test method naming (camelcase here vs underscrores above; NT uses underscores)', 'comment_created': datetime.datetime(2020, 8, 26, 2, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477003661, 'comment_body': ""To preserve the API, I would make this argument be the last one with default value of `None`, and when it's needed (IIUC only in quite advanced cases), have it raise a `NotImplementedError` + add a TODO comment to get rid of it later."", 'comment_created': datetime.datetime(2020, 8, 26, 3, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477005384, 'comment_body': 'not needed vs just using `max`?', 'comment_created': datetime.datetime(2020, 8, 26, 3, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477006145, 'comment_body': 'It appears that this and several other pure python functions are the same as in `lax` - should we prefer to just import and use them instead, especially if our goal is to mirror the lax API and stay up to date if it changes?', 'comment_created': datetime.datetime(2020, 8, 26, 3, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477006371, 'comment_body': 'Here and elsewhere, please remove unused commented code', 'comment_created': datetime.datetime(2020, 8, 26, 3, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477006790, 'comment_body': 'Here and elsewhere, please align hanging indentation', 'comment_created': datetime.datetime(2020, 8, 26, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477007456, 'comment_body': 'Please add a top-level description of the file, like you do in stax', 'comment_created': datetime.datetime(2020, 8, 26, 3, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477007840, 'comment_body': 'Please update description to your specific project', 'comment_created': datetime.datetime(2020, 8, 26, 3, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477010366, 'comment_body': 'Would the use of `onp` here transfer `inputs` from GPU/TPU to CPU? Should we try to avoid this?\r\n\r\nAlso, I believe this is the kind of transposition that can be avoided by using the default `lax` API.', 'comment_created': datetime.datetime(2020, 8, 26, 3, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477010836, 'comment_body': 'If we use TF transposition (or use the default `lax` API and no transposition, can we get rid of casting here?', 'comment_created': datetime.datetime(2020, 8, 26, 3, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477011460, 'comment_body': ""See my other comment about `onp` transposition - I'm afraid it might trigger redundant GPU -> CPU -> GPU data transfer, which can be avoided by using native TF transposition ops. But not a TF expert so I might be missing something here!"", 'comment_created': datetime.datetime(2020, 8, 26, 3, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477011807, 'comment_body': ""Here and elsewhere, is this for debugging? If so, I'd remove all such print statements."", 'comment_created': datetime.datetime(2020, 8, 26, 3, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477507162, 'comment_body': 'Hi, Roman, thanks for paying attention to the details here! Below is some elaboration, please correct me if I am wrong!\r\n\r\nIn terms of point one you mentioned, `N...C` is the default format if you look at the parameter requirements in the link that you provided. The original texts on official documents are: \r\n""""""\r\nA string or None. Specifies whether the channel dimension of the input and output is the last dimension (default, or if data_format does not start with ""NC""), or the second dimension (if data_format starts with ""NC""). For N=1, the valid values are ""NWC"" (default) and ""NCW"". For N=2, the valid values are ""NHWC"" (default) and ""NCHW"". For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".\r\n""""""\r\n\r\nIn terms of the second point that you mentioned, there is key design difference between TensorFlow `pool` and JAX `reduce_window`: In TF `pool`, <b>the window shapes only require spatial dimensions</b>, so no matter whether there are batch and channel dimensions, no matter how many batch and channel dimensions are there, the filters are assumed to be the same across batches by default. So for example, if the input matrix is of form `N...C` of rank `n+2`, then the window shape is required to be of rank `n`. <b>However, in JAX, the window shapes are of same rank as the input matrix, and this is much more powerful because it allows much more possibilities in terms of batch and channel dimensions</b>. In TensorFlow, if I want to build `reduce_window` on top of `pool`, it is going to be super hard to recognize which specific situation it is, unless some more parameters are sent in. \r\n\r\nAgain, please correct me if I am wrong.', 'comment_created': datetime.datetime(2020, 8, 26, 18, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477515882, 'comment_body': ""I feel as though the JAX folks might not be too keen on us importing private functions (they already don't like the partial evaluation code we're importing) and it will likely make this layer more fragile to breakages. I think I would support copying for now. I guess there is some philosophical question about whether we want this code to be robust to internal changes in JAX or whether we just want it to be stable enough to use in `nt.stax`. I think probably the latter, right? However, where functions are the same, we should probably note it and have a link to the original stax function for when thing do break."", 'comment_created': datetime.datetime(2020, 8, 26, 18, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sschoenholz', 'type': 'User'}, {'comment_id': 477527660, 'comment_body': 'Besides, in TensorFlow, there is an underlying checker that checks `rank(window_shape) + 2 == rank(input)`, so it is like a hard (restrictive) requirement.', 'comment_created': datetime.datetime(2020, 8, 26, 19, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477532415, 'comment_body': ""I am happy to defer this until later / after the initial commit and I haven't thought about this nearly as much as either of you, but eventually if the goal is to have a TF pathway in master I do think there should be no special case code in `nt.stax` to avoid extra maintenance / unexpected costs."", 'comment_created': datetime.datetime(2020, 8, 26, 19, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sschoenholz', 'type': 'User'}, {'comment_id': 477558895, 'comment_body': 'Here and elsewhere (in conv and potentially other tests) - please use random arrays instead of `ones` to test correctness more thoroughly at no extra compute cost.', 'comment_created': datetime.datetime(2020, 8, 26, 20, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477564830, 'comment_body': 'Solved in https://github.com/google/neural-tangents/pull/59/commits/9357a243ec8d3c685cee47faee2bd6c94dc3a0fa; Thanks to Roman for bringing this up.', 'comment_created': datetime.datetime(2020, 8, 26, 20, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477572148, 'comment_body': 'Solved in https://github.com/google/neural-tangents/pull/59/commits/27a69822ca02a21f5f809f585e1d6f30b1364947', 'comment_created': datetime.datetime(2020, 8, 26, 20, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477578039, 'comment_body': 'Sorry, by casting, you mean rescaling the output?', 'comment_created': datetime.datetime(2020, 8, 26, 20, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477580423, 'comment_body': 'unused lines', 'comment_created': datetime.datetime(2020, 8, 26, 20, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477580892, 'comment_body': ""I don't think you need these after the changes to lax.reduce_window"", 'comment_created': datetime.datetime(2020, 8, 26, 20, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477581343, 'comment_body': 'I meant lines 156 and 157 in your latest revision. Should not be needed after changes to lax.reduce_window', 'comment_created': datetime.datetime(2020, 8, 26, 20, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477584214, 'comment_body': 'Thanks for pointing this out!', 'comment_created': datetime.datetime(2020, 8, 26, 20, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477585937, 'comment_body': 'I think you also need to remove (see e.g. https://numpy.org/doc/stable/reference/generated/numpy.squeeze.html) the leading and training dimensions when you return the array too (so that you return the array of rank `N+2` and not `N+4`.', 'comment_created': datetime.datetime(2020, 8, 26, 20, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477588510, 'comment_body': 'My bad. I am really sorry about this.', 'comment_created': datetime.datetime(2020, 8, 26, 21, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 480562018, 'comment_body': '@romanngg Hi Roman, I am testing the new TF `reduce_window`, and sadly I find a flaw that is due to TF `pool` limitation. TF `pool` currently only supports 1 <= # spatial dimensions <=3, and this is going to be very limited for our inputs...which means we can only have 3 dimensional inputs (including batch and channel), not going to handle the most common 4 dimensional cases.', 'comment_created': datetime.datetime(2020, 9, 1, 1, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 482290451, 'comment_body': 'Solved in https://github.com/google/neural-tangents/pull/63/commits/bee716ff436936f93473f7df971920e043b53065', 'comment_created': datetime.datetime(2020, 9, 2, 18, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 482291045, 'comment_body': 'Solved in https://github.com/google/neural-tangents/pull/63/commits/b45f975929b3121a9c6dcb20274fcb097b4e4337', 'comment_created': datetime.datetime(2020, 9, 2, 18, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 482698430, 'comment_body': ""Ah, that's a bummer! Did you find a solution to it / perhaps the TF team could suggest something here? (maybe we could call the XLA method here?)\r\n\r\nIn NT pooling over 4 spatial dimensions is a common operation if average pooling layers are used in the network (https://github.com/google/neural-tangents/blob/8b79dbeb32e9df7a6323df43ede898b6897eea01/neural_tangents/stax.py#L1291), and I guess we also would have the issue of breaking the lax correspondence which I imagine will cause us a fair amount of headache. Further, in general, NT currently is dimensionality-agnostic, so this would also break the TF interface at inputs having more than 4 spatial dimensions.\r\n\r\nWorkarounds that I see are:\r\n1) implement ND-pooling as a sequence of lower-dimensional poolings, like separable convolutions;\r\n2) Implement ND-pooling as a convolution, if by any chance it's supported in higher dimensions in TF.\r\nBut ofc both would be slower and not particularly nice, so I'm not sure here. Lmk what you think!"", 'comment_created': datetime.datetime(2020, 9, 3, 4, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 482986258, 'comment_body': ""Hi Roman, thanks for the thoughts here! TF convolution also only supports 1 to 3 number of spatial dimensions. I will send an email and let's see what my mentors at TF team say about this."", 'comment_created': datetime.datetime(2020, 9, 3, 13, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}]","[{'commit_sha': 'd49ffb7b61755fb47ccd53dc782d5d352c6323b4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c57503fa68daf13db33ad78c18d5784417800eb9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7f5135073aeced7a14aa3f2c2db5bdd815046895', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '36ae0a355444ef9da67297bfabe7270f2423efa3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '70924d09c6115b424ad8bfd80c87ba4e29ebfe1e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd20c45ff336a1fd304ff919a967cde9e47d13132', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2fee307a67c7c35bba991bb0ec17a35d8a359f17', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '34787ba670e75528f4fedf793757e938e2ca45e0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6aa01546356b7a90ed9dd4b74fb9d0f5bc84d9d2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '42e5b545edc6cae91af1a80a95c2dc896b477042', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7dc72d6993fd415dcdc977214a206a515364542c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e0fabe395f568a50292cbd550fae49c31e65121d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4dbc0b33103e6bd694085adb7a298a18836487e8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '412eedccb1675daf5d83016157195e6948b3e855', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '96c0ff1ce3939408baecd6a47b0aab80e640133a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '23d998d6880e1bb898e2fad74ab18d3176aa84ef', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c04e7b83667f80790fe177b5e8b7aab80299ef99', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '70257b9fb4c713244d92a78d108bcb96edf073c1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd92e0fc9c8955ccc015dbb9deae2a5d5aca0faf2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '94322960386205b43bc69a8dd741ce3993bebe8f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '51f78a4a268684aef7dbc2fdf62e9f7603f33c74', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9357a243ec8d3c685cee47faee2bd6c94dc3a0fa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '27a69822ca02a21f5f809f585e1d6f30b1364947', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a020275318c30824a51973c8327acb2a8ebde3c4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7df8a230d272d338d61f9b5c22eb271d1436ff14', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd7304566dee1edf33a49ccbba40afae4e741e9df', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '588b7483caf9b84deaa8467e365738c98eb81618', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ab173740afbde13aeba19e61ad3fc4d84e8dbe0b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Zhibo Zhang ,29133834,zhibozhang@cs.toronto.edu,User,,97,,9,15
470321020,Add the general dot operation to Trax NumPy extensions,"An equivalent general dot operation as that in JAX - <https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.dot_general.html>

Although there is an implementation in TF XLA, avoid directly using XLA when possible.

e.g., non-batched: ij,jk->ik
        batched: ijk,ikl->ijl",True,956,https://api.github.com/repos/google/trax/pulls/956,https://github.com/google/trax/pull/956,closed,154,0,2,9,8,25,2,0,"[{'name': 'cla: yes'}, {'name': 'ready to pull'}]",2020-08-19 17:50:18+00:00,2020-08-24 22:48:32+00:00,449894.0,"5 days, 4:58:14","[{'comment_id': 473312131, 'comment_body': 'Please use the docstring format like `conv` in this file.', 'comment_created': datetime.datetime(2020, 8, 19, 20, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473345070, 'comment_body': 'lhs_rank is a better name.', 'comment_created': datetime.datetime(2020, 8, 19, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473368610, 'comment_body': 'Nitpick: replace `lhs_dim - 1` with 2.', 'comment_created': datetime.datetime(2020, 8, 19, 22, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473369957, 'comment_body': 'I would inline cond_a/b/c because then cond_b and cond_c may not need to be evaluated because of short-circuiting.', 'comment_created': datetime.datetime(2020, 8, 19, 22, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473373796, 'comment_body': 'Check that len(lhs_contraction) == len(rhs_contraction) and len(lhs_batch) == len(rhs_batch).', 'comment_created': datetime.datetime(2020, 8, 19, 22, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473374882, 'comment_body': '`if` is not needed once you checked lengths as suggested above.', 'comment_created': datetime.datetime(2020, 8, 19, 22, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473376294, 'comment_body': 'Add a leading ""_"" to internal functions like compose_output_rep and non_batched_matmul.', 'comment_created': datetime.datetime(2020, 8, 19, 22, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473382037, 'comment_body': ""We don't need the second loop since lhs_batch should be enough to insert all batch dims to output_rep."", 'comment_created': datetime.datetime(2020, 8, 19, 22, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473384702, 'comment_body': 'Nitpick: \r\n```\r\nchar_list = list(string.ascii_lowercase)\r\nchar_list = char_list[8:] + char_list[:8]\r\n```\r\nto have 8 more slots.', 'comment_created': datetime.datetime(2020, 8, 19, 22, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473393182, 'comment_body': 'You can define a list subtraction function:\r\n```\r\ndef minus(a, b):\r\n  return [x for x in a if x not in b]\r\n```\r\nthen these two lines become `for i in minus(range(len(lhs_rep)), lhs_batch + lhs_contraction):`. Same below.', 'comment_created': datetime.datetime(2020, 8, 19, 22, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473451418, 'comment_body': '```suggestion\r\n    self.assertAllClose(result, np.array(ans))\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 23, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473452890, 'comment_body': '`tf.constant` can be omitted. `jnp.array` perhaps also.', 'comment_created': datetime.datetime(2020, 8, 19, 23, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473486166, 'comment_body': '> Check that len(lhs_contraction) == len(rhs_contraction) and len(lhs_batch) == len(rhs_batch).\r\n\r\nI think the numbers of contraction dimensions of two input matrices may not necessarily be equal, for example, (5, 2, 2) * (4, 3) -> (5,3). The contraction dimensions in the first input matrix is (1, 2) and the second (0,). Batch dimensions are similar. `einsum` at the end is used to handle the irregular cases.', 'comment_created': datetime.datetime(2020, 8, 20, 0, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 473489180, 'comment_body': 'Thanks for the information! But there may be some irregular cases as mentioned in https://github.com/google/trax/pull/956#discussion_r473486166.', 'comment_created': datetime.datetime(2020, 8, 20, 0, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 473512174, 'comment_body': '> I would inline cond_a/b/c because then cond_b and cond_c may not need to be evaluated because of short-circuiting.\r\n\r\nThat is a good idea! However, I tried several ways to write them inline into `if` statements but there seemed to be `SyntaxError` all the time:\r\n```\r\n    if ((lhs_rank == rhs_rank == 3) and (lhs_batch == (0,) and rhs_batch == (0,))) and\xa0(lhs_contraction == (2,) and rhs_contraction == (1,)):\r\n                                                                                      ^\r\nSyntaxError: invalid character in identifier\r\n```\r\nI am not sure if it is because the complex statements confuse the Python compiler.', 'comment_created': datetime.datetime(2020, 8, 20, 1, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 473513346, 'comment_body': 'If I do some simple example like `if True and True and True`, then there is no such syntax error.', 'comment_created': datetime.datetime(2020, 8, 20, 1, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 473519390, 'comment_body': 'https://github.com/google/trax/pull/956#discussion_r473486166', 'comment_created': datetime.datetime(2020, 8, 20, 1, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 474244895, 'comment_body': 'I tried `jax.lax.dot_general(np.zeros([5, 2, 2]), np.zeros([4, 3]), (([1, 2], [0]), ([], [])))` and it doesn\'t work: ""TypeError: dot_general requires contracting dimensions to have the same shape, got [2 2] and [4]"". My understanding is that `len(lhs_contraction) == len(rhs_contraction) and len(lhs_batch) == len(rhs_batch)` is required. (Also, `einsum` can\'t match dimensions of size [2, 2] to [4].)', 'comment_created': datetime.datetime(2020, 8, 20, 20, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 474246997, 'comment_body': 'It works on my machine. Which Python version are you using? And perhaps you typoed an invalid UNICODE whitespace there.', 'comment_created': datetime.datetime(2020, 8, 20, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 474253450, 'comment_body': 'The docstring format is:\r\n```\r\n""""""One-liner summary ended with \'.\' .\r\n\r\nDescription (optional).\r\n\r\nArgs:\r\n  arg1: ...\r\n    ...\r\n  arg2: ...\r\n    ...\r\n\r\nReturns:\r\n  ...\r\n""""""\r\n```\r\nSee `conv` or other existing functions in this file for examples.', 'comment_created': datetime.datetime(2020, 8, 20, 20, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 474258014, 'comment_body': 'Sorry about this.', 'comment_created': datetime.datetime(2020, 8, 20, 20, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 474325100, 'comment_body': '```suggestion\r\n  if len(lhs_contraction) != len(rhs_contraction):\r\n```', 'comment_created': datetime.datetime(2020, 8, 20, 23, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 474325179, 'comment_body': 'And below.', 'comment_created': datetime.datetime(2020, 8, 20, 23, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 474326434, 'comment_body': 'Nitpick: Some unnecessary parentheses here. Also using \\ to break line is discouraged. You can use parentheses to wrap the whole condition then line-break freely.', 'comment_created': datetime.datetime(2020, 8, 20, 23, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 474327242, 'comment_body': ""It's still good to test the internal function `_compose_output_rep`. Accessing internal symbols in an accompanying test file is acceptable."", 'comment_created': datetime.datetime(2020, 8, 20, 23, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}]","[{'commit_sha': 'a82fbcabecac01c195104780e16888c12bc2ffd9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '08ad9f0a06e84c175dd9a5cb3902296eb84f3ff4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd31355a8bbd3167cc3f98f616f706af364c046ac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f41b2c81eb6882e8655688b444998c7c253d2a9a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9dff2f7204d5f4e8921131bd95e5ff6cff17672e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2e2c614f4876180f0e59ce04c39747f458665a1a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8a07811561d6c82c24eb6ddb042e8938221071e4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fef84d5ce0bf3f5ba89acb6cd4402c76fb323ff7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c880f86c39ac1b8372d610cba8118e7eb0fc0cc3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Zhibo Zhang ,29133834,zhibozhang@cs.toronto.edu,User,,97,,9,15
469739695,Add the general convolution operation to extensions,"TF XLA version:
https://www.tensorflow.org/xla/operation_semantics?hl=en#conv_convolution;
JAX version: https://jax.readthedocs.io/en/stable/_autosummary/jax.lax.conv_general_dilated.html",True,954,https://api.github.com/repos/google/trax/pulls/954,https://github.com/google/trax/pull/954,closed,177,0,2,8,9,24,2,0,"[{'name': 'cla: yes'}, {'name': 'ready to pull'}]",2020-08-18 20:49:22+00:00,2020-08-28 22:58:24+00:00,871742.0,"10 days, 2:09:02","[{'comment_id': 478730855, 'comment_body': 'Where is dim coming from? \r\n\r\nAlternatively you can define an inner function and just use it on each:\r\n```suggestion\r\ndef _as_list_of_size(item, size):\r\n  if item is None:\r\n    return None\r\n  return [item] * size if isinstance(item, int) else list(item)\r\n  \r\n  return _as_list_of_size(window_strides), _as_list_of_size(lhs_dilation), _as_list_of_size(rhs_dilation)\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 22, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478731012, 'comment_body': 'nit: can remove this line?', 'comment_created': datetime.datetime(2020, 8, 27, 22, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478732963, 'comment_body': 'These and the below all feel like ValueErrors to me - not TypeErrors. ', 'comment_created': datetime.datetime(2020, 8, 27, 22, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478733521, 'comment_body': 'Lets make this a module-level constant instead? ', 'comment_created': datetime.datetime(2020, 8, 27, 22, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478734765, 'comment_body': 'I think this and below should be using tf_np.moveaxis and tf_np.asarray. \r\n\r\nIt\'d be good to document the input output expectations. Perhaps similar to dot_general, the name for this function should be ""tf_conv_general_dilated"", so inputs and outputs are expected to be tf.Tensors, and the tf_np.asarray should not be required. ', 'comment_created': datetime.datetime(2020, 8, 27, 22, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478735435, 'comment_body': ""Instead of these, don't conv_general_dilated from JAX and TF both accept numpy arrays? "", 'comment_created': datetime.datetime(2020, 8, 27, 22, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478735488, 'comment_body': 'Remove debug print?', 'comment_created': datetime.datetime(2020, 8, 27, 22, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478735615, 'comment_body': 'extensions.conv_general_dilated?', 'comment_created': datetime.datetime(2020, 8, 27, 22, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478735787, 'comment_body': 'nit spelling TOTO -> TODO', 'comment_created': datetime.datetime(2020, 8, 27, 22, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478735944, 'comment_body': 'nit: can remove this line?', 'comment_created': datetime.datetime(2020, 8, 27, 22, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478737132, 'comment_body': 'Lets do both pylint/docstring changes for both functions this and below before submission. \r\n\r\nAlso, I think its better to put the TODOs under your github username instead of your full name (so ""DarrenZhang01"" instead of ""Zhibo Zhang""). ', 'comment_created': datetime.datetime(2020, 8, 27, 22, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478763980, 'comment_body': 'Hi, Akshay, could you elaborate on how to make this ""module-level constant""?', 'comment_created': datetime.datetime(2020, 8, 28, 0, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478764570, 'comment_body': 'OK, I will do something similar to `_int_dtypes`.', 'comment_created': datetime.datetime(2020, 8, 28, 0, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478765177, 'comment_body': 'Yeah, I think vanilla NumPy arrays should not affect function execution here.', 'comment_created': datetime.datetime(2020, 8, 28, 0, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478766935, 'comment_body': ' I will send this as parameters for the helper function.', 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478775333, 'comment_body': 'nit just use tf.nn.conv1d etc and remove the additional import.', 'comment_created': datetime.datetime(2020, 8, 28, 1, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478775495, 'comment_body': 'Setting dim = None is still not required though right? Line 633 below sets dim anyway? ', 'comment_created': datetime.datetime(2020, 8, 28, 1, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478776127, 'comment_body': 'Can you add a Returns section specifying that a tf_np.ndarray is returned?', 'comment_created': datetime.datetime(2020, 8, 28, 1, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478776218, 'comment_body': 'Add comments for things that are currently not supported. \r\nFor example:\r\n```suggestion\r\n    feature_group_count:  integer, default 1. Changing this is currently not supported. \r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 1, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478777147, 'comment_body': 'Lets also check that feature_group_count, batch_group_count and precision are equal to their defaults. If they are not, we should raise a NotImplementedError. ', 'comment_created': datetime.datetime(2020, 8, 28, 1, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478777911, 'comment_body': 'lax.conv_general_dilated and remove the import jax statement from above. ', 'comment_created': datetime.datetime(2020, 8, 28, 1, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478778305, 'comment_body': 'Can you make this just be a None instead of jax_conv.shape? Looks like we are not testing lhs_dilation in any case?', 'comment_created': datetime.datetime(2020, 8, 28, 1, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478778738, 'comment_body': 'Point out that its only required for transposed convolution?', 'comment_created': datetime.datetime(2020, 8, 28, 1, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 479493152, 'comment_body': 'Check precision also?', 'comment_created': datetime.datetime(2020, 8, 28, 19, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}]","[{'commit_sha': '083ba340a4c513a7ac58647d22341accc07323d1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'acd76cc1e57bbbd36fad55cd134e8acc4d6e2637', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8c5a7b948d54e9d61d7dd7ffc033f60b9bd56560', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e169591adb24d506b26bfe94e1c02a959bf1e49d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ea29343f9af70d7d20f0a1ab3cf56e40d993a074', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a13a238041d5fa760b13c9c0c72f9c9db9c0eeb5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5887a7ac29a8420139bc2f09bc5e38848b9b4821', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9943cf0c38b2cb91df74940bd0afcaaad9a8bef2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Zhibo Zhang ,29133834,zhibozhang@cs.toronto.edu,User,,97,,9,15
472872536,Allows eval_on_shapes to return Python values.,"Allows eval_on_shapes to return Python values.
",True,970,https://api.github.com/repos/google/trax/pulls/970,https://github.com/google/trax/pull/970,closed,141,50,2,1,0,0,1,0,[{'name': 'cla: yes'}],2020-08-25 01:42:05+00:00,2020-09-23 05:47:02+00:00,2520297.0,"29 days, 4:04:57",[],"[{'commit_sha': '3838bbea832fda6b0f103003b69f63fee2f4ece7', 'committer_username': 'wangpengmit', 'committer_name': 'Peng Wang', 'committer_email': None, 'commit_date': datetime.datetime(2014, 6, 6, 16, 12, 23, tzinfo=datetime.timezone.utc)}]",,56280837,,User,,0,,0,3
470321020,Add the general dot operation to Trax NumPy extensions,"An equivalent general dot operation as that in JAX - <https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.dot_general.html>

Although there is an implementation in TF XLA, avoid directly using XLA when possible.

e.g., non-batched: ij,jk->ik
        batched: ijk,ikl->ijl",True,956,https://api.github.com/repos/google/trax/pulls/956,https://github.com/google/trax/pull/956,closed,154,0,2,9,8,25,2,0,"[{'name': 'cla: yes'}, {'name': 'ready to pull'}]",2020-08-19 17:50:18+00:00,2020-08-24 22:48:32+00:00,449894.0,"5 days, 4:58:14","[{'comment_id': 473312131, 'comment_body': 'Please use the docstring format like `conv` in this file.', 'comment_created': datetime.datetime(2020, 8, 19, 20, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473345070, 'comment_body': 'lhs_rank is a better name.', 'comment_created': datetime.datetime(2020, 8, 19, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473368610, 'comment_body': 'Nitpick: replace `lhs_dim - 1` with 2.', 'comment_created': datetime.datetime(2020, 8, 19, 22, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473369957, 'comment_body': 'I would inline cond_a/b/c because then cond_b and cond_c may not need to be evaluated because of short-circuiting.', 'comment_created': datetime.datetime(2020, 8, 19, 22, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473373796, 'comment_body': 'Check that len(lhs_contraction) == len(rhs_contraction) and len(lhs_batch) == len(rhs_batch).', 'comment_created': datetime.datetime(2020, 8, 19, 22, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473374882, 'comment_body': '`if` is not needed once you checked lengths as suggested above.', 'comment_created': datetime.datetime(2020, 8, 19, 22, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473376294, 'comment_body': 'Add a leading ""_"" to internal functions like compose_output_rep and non_batched_matmul.', 'comment_created': datetime.datetime(2020, 8, 19, 22, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473382037, 'comment_body': ""We don't need the second loop since lhs_batch should be enough to insert all batch dims to output_rep."", 'comment_created': datetime.datetime(2020, 8, 19, 22, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473384702, 'comment_body': 'Nitpick: \r\n```\r\nchar_list = list(string.ascii_lowercase)\r\nchar_list = char_list[8:] + char_list[:8]\r\n```\r\nto have 8 more slots.', 'comment_created': datetime.datetime(2020, 8, 19, 22, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473393182, 'comment_body': 'You can define a list subtraction function:\r\n```\r\ndef minus(a, b):\r\n  return [x for x in a if x not in b]\r\n```\r\nthen these two lines become `for i in minus(range(len(lhs_rep)), lhs_batch + lhs_contraction):`. Same below.', 'comment_created': datetime.datetime(2020, 8, 19, 22, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473451418, 'comment_body': '```suggestion\r\n    self.assertAllClose(result, np.array(ans))\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 23, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473452890, 'comment_body': '`tf.constant` can be omitted. `jnp.array` perhaps also.', 'comment_created': datetime.datetime(2020, 8, 19, 23, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 473486166, 'comment_body': '> Check that len(lhs_contraction) == len(rhs_contraction) and len(lhs_batch) == len(rhs_batch).\r\n\r\nI think the numbers of contraction dimensions of two input matrices may not necessarily be equal, for example, (5, 2, 2) * (4, 3) -> (5,3). The contraction dimensions in the first input matrix is (1, 2) and the second (0,). Batch dimensions are similar. `einsum` at the end is used to handle the irregular cases.', 'comment_created': datetime.datetime(2020, 8, 20, 0, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 473489180, 'comment_body': 'Thanks for the information! But there may be some irregular cases as mentioned in https://github.com/google/trax/pull/956#discussion_r473486166.', 'comment_created': datetime.datetime(2020, 8, 20, 0, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 473512174, 'comment_body': '> I would inline cond_a/b/c because then cond_b and cond_c may not need to be evaluated because of short-circuiting.\r\n\r\nThat is a good idea! However, I tried several ways to write them inline into `if` statements but there seemed to be `SyntaxError` all the time:\r\n```\r\n    if ((lhs_rank == rhs_rank == 3) and (lhs_batch == (0,) and rhs_batch == (0,))) and\xa0(lhs_contraction == (2,) and rhs_contraction == (1,)):\r\n                                                                                      ^\r\nSyntaxError: invalid character in identifier\r\n```\r\nI am not sure if it is because the complex statements confuse the Python compiler.', 'comment_created': datetime.datetime(2020, 8, 20, 1, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 473513346, 'comment_body': 'If I do some simple example like `if True and True and True`, then there is no such syntax error.', 'comment_created': datetime.datetime(2020, 8, 20, 1, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 473519390, 'comment_body': 'https://github.com/google/trax/pull/956#discussion_r473486166', 'comment_created': datetime.datetime(2020, 8, 20, 1, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 474244895, 'comment_body': 'I tried `jax.lax.dot_general(np.zeros([5, 2, 2]), np.zeros([4, 3]), (([1, 2], [0]), ([], [])))` and it doesn\'t work: ""TypeError: dot_general requires contracting dimensions to have the same shape, got [2 2] and [4]"". My understanding is that `len(lhs_contraction) == len(rhs_contraction) and len(lhs_batch) == len(rhs_batch)` is required. (Also, `einsum` can\'t match dimensions of size [2, 2] to [4].)', 'comment_created': datetime.datetime(2020, 8, 20, 20, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 474246997, 'comment_body': 'It works on my machine. Which Python version are you using? And perhaps you typoed an invalid UNICODE whitespace there.', 'comment_created': datetime.datetime(2020, 8, 20, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 474253450, 'comment_body': 'The docstring format is:\r\n```\r\n""""""One-liner summary ended with \'.\' .\r\n\r\nDescription (optional).\r\n\r\nArgs:\r\n  arg1: ...\r\n    ...\r\n  arg2: ...\r\n    ...\r\n\r\nReturns:\r\n  ...\r\n""""""\r\n```\r\nSee `conv` or other existing functions in this file for examples.', 'comment_created': datetime.datetime(2020, 8, 20, 20, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 474258014, 'comment_body': 'Sorry about this.', 'comment_created': datetime.datetime(2020, 8, 20, 20, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 474325100, 'comment_body': '```suggestion\r\n  if len(lhs_contraction) != len(rhs_contraction):\r\n```', 'comment_created': datetime.datetime(2020, 8, 20, 23, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 474325179, 'comment_body': 'And below.', 'comment_created': datetime.datetime(2020, 8, 20, 23, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 474326434, 'comment_body': 'Nitpick: Some unnecessary parentheses here. Also using \\ to break line is discouraged. You can use parentheses to wrap the whole condition then line-break freely.', 'comment_created': datetime.datetime(2020, 8, 20, 23, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}, {'comment_id': 474327242, 'comment_body': ""It's still good to test the internal function `_compose_output_rep`. Accessing internal symbols in an accompanying test file is acceptable."", 'comment_created': datetime.datetime(2020, 8, 20, 23, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wangpengmit', 'type': 'User'}]","[{'commit_sha': 'a82fbcabecac01c195104780e16888c12bc2ffd9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '08ad9f0a06e84c175dd9a5cb3902296eb84f3ff4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd31355a8bbd3167cc3f98f616f706af364c046ac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f41b2c81eb6882e8655688b444998c7c253d2a9a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9dff2f7204d5f4e8921131bd95e5ff6cff17672e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2e2c614f4876180f0e59ce04c39747f458665a1a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8a07811561d6c82c24eb6ddb042e8938221071e4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fef84d5ce0bf3f5ba89acb6cd4402c76fb323ff7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c880f86c39ac1b8372d610cba8118e7eb0fc0cc3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Zhibo Zhang ,29133834,zhibozhang@cs.toronto.edu,User,,97,,9,15
469739695,Add the general convolution operation to extensions,"TF XLA version:
https://www.tensorflow.org/xla/operation_semantics?hl=en#conv_convolution;
JAX version: https://jax.readthedocs.io/en/stable/_autosummary/jax.lax.conv_general_dilated.html",True,954,https://api.github.com/repos/google/trax/pulls/954,https://github.com/google/trax/pull/954,closed,177,0,2,8,9,24,2,0,"[{'name': 'cla: yes'}, {'name': 'ready to pull'}]",2020-08-18 20:49:22+00:00,2020-08-28 22:58:24+00:00,871742.0,"10 days, 2:09:02","[{'comment_id': 478730855, 'comment_body': 'Where is dim coming from? \r\n\r\nAlternatively you can define an inner function and just use it on each:\r\n```suggestion\r\ndef _as_list_of_size(item, size):\r\n  if item is None:\r\n    return None\r\n  return [item] * size if isinstance(item, int) else list(item)\r\n  \r\n  return _as_list_of_size(window_strides), _as_list_of_size(lhs_dilation), _as_list_of_size(rhs_dilation)\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 22, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478731012, 'comment_body': 'nit: can remove this line?', 'comment_created': datetime.datetime(2020, 8, 27, 22, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478732963, 'comment_body': 'These and the below all feel like ValueErrors to me - not TypeErrors. ', 'comment_created': datetime.datetime(2020, 8, 27, 22, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478733521, 'comment_body': 'Lets make this a module-level constant instead? ', 'comment_created': datetime.datetime(2020, 8, 27, 22, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478734765, 'comment_body': 'I think this and below should be using tf_np.moveaxis and tf_np.asarray. \r\n\r\nIt\'d be good to document the input output expectations. Perhaps similar to dot_general, the name for this function should be ""tf_conv_general_dilated"", so inputs and outputs are expected to be tf.Tensors, and the tf_np.asarray should not be required. ', 'comment_created': datetime.datetime(2020, 8, 27, 22, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478735435, 'comment_body': ""Instead of these, don't conv_general_dilated from JAX and TF both accept numpy arrays? "", 'comment_created': datetime.datetime(2020, 8, 27, 22, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478735488, 'comment_body': 'Remove debug print?', 'comment_created': datetime.datetime(2020, 8, 27, 22, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478735615, 'comment_body': 'extensions.conv_general_dilated?', 'comment_created': datetime.datetime(2020, 8, 27, 22, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478735787, 'comment_body': 'nit spelling TOTO -> TODO', 'comment_created': datetime.datetime(2020, 8, 27, 22, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478735944, 'comment_body': 'nit: can remove this line?', 'comment_created': datetime.datetime(2020, 8, 27, 22, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478737132, 'comment_body': 'Lets do both pylint/docstring changes for both functions this and below before submission. \r\n\r\nAlso, I think its better to put the TODOs under your github username instead of your full name (so ""DarrenZhang01"" instead of ""Zhibo Zhang""). ', 'comment_created': datetime.datetime(2020, 8, 27, 22, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478763980, 'comment_body': 'Hi, Akshay, could you elaborate on how to make this ""module-level constant""?', 'comment_created': datetime.datetime(2020, 8, 28, 0, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478764570, 'comment_body': 'OK, I will do something similar to `_int_dtypes`.', 'comment_created': datetime.datetime(2020, 8, 28, 0, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478765177, 'comment_body': 'Yeah, I think vanilla NumPy arrays should not affect function execution here.', 'comment_created': datetime.datetime(2020, 8, 28, 0, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478766935, 'comment_body': ' I will send this as parameters for the helper function.', 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478775333, 'comment_body': 'nit just use tf.nn.conv1d etc and remove the additional import.', 'comment_created': datetime.datetime(2020, 8, 28, 1, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478775495, 'comment_body': 'Setting dim = None is still not required though right? Line 633 below sets dim anyway? ', 'comment_created': datetime.datetime(2020, 8, 28, 1, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478776127, 'comment_body': 'Can you add a Returns section specifying that a tf_np.ndarray is returned?', 'comment_created': datetime.datetime(2020, 8, 28, 1, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478776218, 'comment_body': 'Add comments for things that are currently not supported. \r\nFor example:\r\n```suggestion\r\n    feature_group_count:  integer, default 1. Changing this is currently not supported. \r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 1, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478777147, 'comment_body': 'Lets also check that feature_group_count, batch_group_count and precision are equal to their defaults. If they are not, we should raise a NotImplementedError. ', 'comment_created': datetime.datetime(2020, 8, 28, 1, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478777911, 'comment_body': 'lax.conv_general_dilated and remove the import jax statement from above. ', 'comment_created': datetime.datetime(2020, 8, 28, 1, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478778305, 'comment_body': 'Can you make this just be a None instead of jax_conv.shape? Looks like we are not testing lhs_dilation in any case?', 'comment_created': datetime.datetime(2020, 8, 28, 1, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478778738, 'comment_body': 'Point out that its only required for transposed convolution?', 'comment_created': datetime.datetime(2020, 8, 28, 1, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 479493152, 'comment_body': 'Check precision also?', 'comment_created': datetime.datetime(2020, 8, 28, 19, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}]","[{'commit_sha': '083ba340a4c513a7ac58647d22341accc07323d1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'acd76cc1e57bbbd36fad55cd134e8acc4d6e2637', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8c5a7b948d54e9d61d7dd7ffc033f60b9bd56560', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e169591adb24d506b26bfe94e1c02a959bf1e49d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ea29343f9af70d7d20f0a1ab3cf56e40d993a074', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a13a238041d5fa760b13c9c0c72f9c9db9c0eeb5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5887a7ac29a8420139bc2f09bc5e38848b9b4821', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9943cf0c38b2cb91df74940bd0afcaaad9a8bef2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Zhibo Zhang ,29133834,zhibozhang@cs.toronto.edu,User,,97,,9,15
474248366,Neural Tangents Migration from JAX to TensorFlow,"A list of dependencies:
* Trax extensions 
* TF-nightly NumPy
* TF-nightly `stateless_random_ops`
* TF-nightly NumPy bitwise operations",True,61,https://api.github.com/repos/google/neural-tangents/pulls/61,https://github.com/google/neural-tangents/pull/61,closed,2431,303,19,43,4,43,0,0,[],2020-08-26 22:46:36+00:00,2020-08-29 04:50:55+00:00,194659.0,"2 days, 6:04:19","[{'comment_id': 477693701, 'comment_body': ""Should we remove the respective function from `lax.py` since it's now here?"", 'comment_created': datetime.datetime(2020, 8, 26, 23, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477705005, 'comment_body': 'Yeah, we can remove it. In that case, we will call `extensions.tf_dot_general` rather than `lax...`, so maybe better keep it?', 'comment_created': datetime.datetime(2020, 8, 26, 23, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477709418, 'comment_body': ""Sure, but in that case I'd recommend just calling tf_dot_general from inside the lax `dot_general` method, to avoid code duplication."", 'comment_created': datetime.datetime(2020, 8, 26, 23, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477717783, 'comment_body': 'Yeah, I will keep everywhere as `lax.dot_general` to make things consistent. Do you mean we should remove `tf_dot_general` inside `extensions`? Thanks!', 'comment_created': datetime.datetime(2020, 8, 26, 23, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477721827, 'comment_body': 'I meant keeping both functions, but removing the function body and helper functions from `lax` and just having there something like `def dot_general(...): return extensions.tf_dot_general(...)`. What do you think?', 'comment_created': datetime.datetime(2020, 8, 27, 0, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477729580, 'comment_body': 'I see, good idea!', 'comment_created': datetime.datetime(2020, 8, 27, 0, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478596335, 'comment_body': ""Include this if you want, but NT doesn't follow pylint at the moment anyway."", 'comment_created': datetime.datetime(2020, 8, 27, 17, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sschoenholz', 'type': 'User'}, {'comment_id': 478597220, 'comment_body': ""Eventually, of course, we'd have to think of a nicer way to do this."", 'comment_created': datetime.datetime(2020, 8, 27, 17, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sschoenholz', 'type': 'User'}, {'comment_id': 478597635, 'comment_body': 'Does the LRU caching work with tf.function? ', 'comment_created': datetime.datetime(2020, 8, 27, 17, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sschoenholz', 'type': 'User'}, {'comment_id': 478598619, 'comment_body': 'Is there really no problem here? dataclasses.dataclass registers Kernel as a JAX PyTree node, which is required to get desired behavior around static functions / jit. ', 'comment_created': datetime.datetime(2020, 8, 27, 17, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sschoenholz', 'type': 'User'}, {'comment_id': 478604124, 'comment_body': 'Oh, yeah, the `pylint` comment is from the original TF repo.', 'comment_created': datetime.datetime(2020, 8, 27, 18, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478608214, 'comment_body': 'This is a point that I do not know...What I did is just getting rid of the `jax.core` dependency @wangpengmit, @allenlavoie, @akshaym Would you mind elaborating on this point that Sam mentioned? Thanks!', 'comment_created': datetime.datetime(2020, 8, 27, 18, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478790420, 'comment_body': 'Sorry, Sam, a nicer way to ... ?', 'comment_created': datetime.datetime(2020, 8, 28, 2, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478808663, 'comment_body': 'Great point, Sam! Thanks for bringing this up!', 'comment_created': datetime.datetime(2020, 8, 28, 3, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479543857, 'comment_body': 'By the way, Sam @sschoenholz , if I remove the `dataclasses` wrapper, it seems that the `Kernel` object initialization does not require any parameters at all? \r\n', 'comment_created': datetime.datetime(2020, 8, 28, 21, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479555566, 'comment_body': ""FYI, I'm still quite confused wrt to why we need `pygame`, `matplotlib` and `more-itertools` since none of these appear to be used anywhere"", 'comment_created': datetime.datetime(2020, 8, 28, 22, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479555846, 'comment_body': ""1) In these kind of places, perhaps add a TODO comment above + quick note on what's failing and why, to be able to find them later?\r\n\r\n2) Do you know if all tests are failing, or just some subset of them? I.e. you could, optionally call the passing test files individually here."", 'comment_created': datetime.datetime(2020, 8, 28, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479557390, 'comment_body': 'Why switch from division to multiplication here?', 'comment_created': datetime.datetime(2020, 8, 28, 22, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479558141, 'comment_body': 'I noticed you removed `out` from `mean` arguments, but not here - should it be removed from here (and perhaps from the `_mean_and_var` at all)?', 'comment_created': datetime.datetime(2020, 8, 28, 22, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479560540, 'comment_body': 'Would it be possible to make the `Kernel` class a `@dataclasses.dataclass` (i.e. https://docs.python.org/3/library/dataclasses.html; vs `@nt.utils.dataclasses.dataclasss`, as it was before), and avoid this kind of changes?', 'comment_created': datetime.datetime(2020, 8, 28, 22, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479560800, 'comment_body': 'dictionary (typo)', 'comment_created': datetime.datetime(2020, 8, 28, 22, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479567338, 'comment_body': 'For TensorFlow `pool`, it only has average pooling, so when doing sum pooling, the output needs to be multiplied by the window size, which is opposite from JAX `reduce_window`.', 'comment_created': datetime.datetime(2020, 8, 28, 22, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479571502, 'comment_body': 'Roman, thanks for pointing this out! I removed the `out` argument in `np.var` in the latest commit. Maybe it is better to keep the `_mean_and_var` interface as its origin form (in order to avoid many changes in the places where `_mean_and_var` are called)?', 'comment_created': datetime.datetime(2020, 8, 28, 23, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479575525, 'comment_body': ""I think it's not being used anywhere (and perhaps shouldn't have been introduced in the first place), so I would just remove it everywhere, but I'm ok either way here"", 'comment_created': datetime.datetime(2020, 8, 28, 23, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479577237, 'comment_body': ""1) Great point! I believe in that case it's best to have the multiplication inside the `lax.reduce_window`, for the purpose of matching the original `lax.reduce_window` behavior (I believe it's called in other places too, that way you don't need to adjust the computation in such places)\r\n\r\n2) I also think this branch is when `pool_type == Pooling.AVG`, so in that case, you would want to have no rescaling here, correct (instead, it currently behaves as a sum pool, not average)."", 'comment_created': datetime.datetime(2020, 8, 28, 23, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479578978, 'comment_body': 'I see. Thanks!', 'comment_created': datetime.datetime(2020, 8, 28, 23, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479579896, 'comment_body': '@romanngg Roman, for test files except `infinite_fcn_test`, `function_space_test`, `weight_space_test` and `stax_test`, I have not replaced the JAX support with TF support (a lot of workload, and probably not be able to do it before the deadline). I will add TODO comments in Travis CI.', 'comment_created': datetime.datetime(2020, 8, 29, 0, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479581829, 'comment_body': ""> Great point! I believe in that case it's best to have the multiplication inside the lax.reduce_window, for the \r\n> purpose of matching the original lax.reduce_window behavior (I believe it's called in other places too, that way \r\n> you don't need to adjust the computation in such places)\r\n\r\nThanks for bringing this up, Roman! Do you have an idea on how to embed sum pooling inside `reduce_window`? The only parameter related to pooling type that `reduce_window` receives is the third parameter, which is a callable (that is, either `np.add` or `np.max`). For both sum pooling and average pooling, `np.add` is the representation for them, and I think this is also the same case for JAX? That is the reason that in `ostax`, an extra rescaler function is used to normalize the output when it is average pooling (JAX `reduce_window` does not automatically support average pooling, while TF `reduce_window` does not automatically support sum pooling).\r\n\r\nPlease correct me if I am wrong."", 'comment_created': datetime.datetime(2020, 8, 29, 0, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479582112, 'comment_body': '> I also think this branch is when pool_type == Pooling.AVG, so in that case, you would want to have no rescaling here, \r\n> correct (instead, it currently behaves as a sum pool, not average).\r\n\r\nYes, I think you are right!\r\n', 'comment_created': datetime.datetime(2020, 8, 29, 0, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479582334, 'comment_body': 'Great! In that case I suggest to just call the tests that pass here individually. ', 'comment_created': datetime.datetime(2020, 8, 29, 0, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479582710, 'comment_body': ""Yes your understanding is correct, and we just want your version of `lax.reduce_window` to return sum pooling result. So you can just have `* np.prod(window_shape)` inside your `lax.reduce_window`, and all other places, like this one, wouldn't need to be changed."", 'comment_created': datetime.datetime(2020, 8, 29, 0, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479582888, 'comment_body': 'I.e. the decision to normalize or not is made in other places around the code, by just using a rescaler; `lax.reduce_window` just needs to return the sum.', 'comment_created': datetime.datetime(2020, 8, 29, 0, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479583079, 'comment_body': 'Oh, I see what you mean, Roman! Sorry I misunderstood you. @romanngg  Great idea! I will make the revision.', 'comment_created': datetime.datetime(2020, 8, 29, 0, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479584581, 'comment_body': 'Sure!', 'comment_created': datetime.datetime(2020, 8, 29, 0, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479584825, 'comment_body': '@romanngg Just to make sure, call the test files individually rather than test cases individually, if I understand correctly?', 'comment_created': datetime.datetime(2020, 8, 29, 0, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479586220, 'comment_body': 'So the problem here is not about `dataclasses`. It is that `dataclasses.asdict` method will trigger deepcopy of the objects, where TF Tensor does not allow being deep-copied. That was the reason I switched to construct the dictionary directly in July.', 'comment_created': datetime.datetime(2020, 8, 29, 0, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479588554, 'comment_body': 'Yes, I think test cases would be too much hassle', 'comment_created': datetime.datetime(2020, 8, 29, 1, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479589600, 'comment_body': 'Got it! Thanks, Roman!', 'comment_created': datetime.datetime(2020, 8, 29, 1, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479590064, 'comment_body': ""Yes, that's unfortunately a problem, since the `dataclass` decorator gave it the necessary initialization method (i.e. just filling all the fields with passed values). So without it you'd need to create your own `__init__` for the code to work I think. But see my other comment, I think we can keep it as a dataclass"", 'comment_created': datetime.datetime(2020, 8, 29, 1, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479590171, 'comment_body': 'Ok, but perhaps then still you can keep it a `dataclasses.dataclass`, and provide it with a custom `Kernel._asdict()` method that would do wha you are doing here?', 'comment_created': datetime.datetime(2020, 8, 29, 1, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 479591912, 'comment_body': 'Sounds good!', 'comment_created': datetime.datetime(2020, 8, 29, 1, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479605802, 'comment_body': ""I think another option would be to use Python's dataclasses.dataclass rather than the NT version."", 'comment_created': datetime.datetime(2020, 8, 29, 4, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sschoenholz', 'type': 'User'}, {'comment_id': 479606777, 'comment_body': 'Yes, Sam, I did add Python’s native dataclasses!', 'comment_created': datetime.datetime(2020, 8, 29, 4, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}]","[{'commit_sha': '5b87f044302f1712805bd6f8066458b34a37d47d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1ebaf7d9e76b295479a16113ebcf86c9af2e8173', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f0a02a00c807c96d3f5de03465754ea72c598b07', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'abd160d9cdaef5add81e3fa0afff263696b0abdc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5e4b6faa6281b827bf99118d5593755454725f57', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9d4913d0b5721691a23fbc239cff019e9a43c7a1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '41c3689a934d27c2691149dca97f8b6ae50eff25', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ad2b99b536c527a52172f37d5eef016e0e0cea04', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'acbfd7ca6a7fda72a1cb8dc4238cf40bde8037ea', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '869ce3ff8911f69a56568e64c007e44a814c1f82', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2724744ed446d96399d9038ac84d49323a0f1af7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8d3e56d26f703d0deb9bf4e3fd50215478aef84f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5eeaade8a3456d23db2ebfafbcdbb0e342647d60', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '177df74c54c15c54c7703ea1987802da19661dfd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a47dd2541352593c5ebbe042f3ea3bef4b983f62', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '02ec8c09d1130922f80b4a77606a16ba09baf85e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3e50ecab240fcb666cf69cc846a1d011cea2fb4c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0488abe536d251071de38077d70ac20441c249a0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '49ea94d0bdd48b34b2a4a12c9a5b274f35477ad9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9d75b76dc981188ff765febf789230a890621312', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dc7d67530f88fb1eb7e8d7726e166df84d24900d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a9174d0094205d413d779ab2c9db2b7634cbd114', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fc626be34db285d5417713985d6695755000bb40', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6da3cc47631f1d5fb504f8e422deeb32b3869cd9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '43529725550f84e43cffb9072c702945b9307a3e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '82466f78cbed3ff689529297f286e5a24a534884', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'da13220652e4f3aac59140c55aac4129bf7f3809', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'eafefa4bbe4a0d432e12579baccc5e81abc165d9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b22718797ab2a881294bee8b319853527da38fb7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '304487219795ca2f5726742fe20dd5caae89558b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '348d14668783f6feffc9a6af588a30268d181c0b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '975af2602f8b0223c54be25f24f68af2da6ccc54', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b0cb0cb8cc163cc8df461e0f41c05447543e44ee', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ac26953412a1d2beca905b7a619c1fca6042fe12', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5acb150a10cda8e061ffb314b23c6969bcca24cf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b47195553f59efea79d06fd21754cd058f366dff', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '83b8a449ffb993e7c6d3b5d26334378dda85f9a5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cede73262d7a3d128b639172133118f47301b76b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '78fbb5bcdf52b1ec06c0dca90b13439a5ddce302', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '72894b6a1094ed965a64f49e7e09868802eafbd9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'deb133c1d85e7dd085ddf8c7a980e72735f6b973', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0aeb7c80f715e9dd73c830a625451ef47fa961ed', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '12ea5cdc3d11c26f266b8ad62cb51bcae9c5f2af', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Zhibo Zhang ,29133834,zhibozhang@cs.toronto.edu,User,,97,,9,15
472726735,Add the TensorFlow version of some JAX utilities,"As titled, this Pull Request contains some necessary TF-based helper APIs for Neural Tangents, and they will be served as the main support.",True,59,https://api.github.com/repos/google/neural-tangents/pulls/59,https://github.com/google/neural-tangents/pull/59,closed,904,0,4,28,4,71,0,0,[],2020-08-24 19:42:46+00:00,2020-08-26 21:54:04+00:00,180678.0,"2 days, 2:11:18","[{'comment_id': 475864976, 'comment_body': ""Thanks again for this awesome effort to make NT work with TF!\r\n\r\nInitial question: if we're trying to mirror the necessary lax functionality in TF, for the purpose of easier import / invocation swapping, should this method\r\n\r\n1) be in a file called `lax.py` like this one https://github.com/DarrenZhang01/Neural_Tangents_TensorFlow/blob/master/tf_jax_stax/tf_lax.py\r\n2) be called `dot_general`, similarly, for the purpose of matching `lax.py`?\r\n3) Have the `precision` argument, to fully match the signature (even if it goes unused - not sure if TF has a straightforward analog)."", 'comment_created': datetime.datetime(2020, 8, 24, 20, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475865805, 'comment_body': 'Here and elsewhere, if a method is not used outside of the file (except tests), suggest marking them as private with underscores `_`.', 'comment_created': datetime.datetime(2020, 8, 24, 20, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475866379, 'comment_body': 'Yes, great insight! Thanks, Roman! I will make the changes.', 'comment_created': datetime.datetime(2020, 8, 24, 20, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 475867605, 'comment_body': ""Here and elsewhere, I'd suggest using type annotations (e.g. as in https://jax.readthedocs.io/en/latest/_modules/jax/lax/lax.html) instead of specifying types in the docstring. Feel free to postpone this until later if we're short on time."", 'comment_created': datetime.datetime(2020, 8, 24, 20, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475867867, 'comment_body': 'By the way, do you think I should add `reduce_window`, `dot_general`, `conv_general_dilated` all together into `lax` and make one single Pull Request or I should do them one by one? I am not sure which one is more convenient for you. Thanks, Roman @romanngg !', 'comment_created': datetime.datetime(2020, 8, 24, 20, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 475868814, 'comment_body': 'I would suggest submitting all `lax.py` file together with all the methods that you need there + also the respective tests!', 'comment_created': datetime.datetime(2020, 8, 24, 20, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475870028, 'comment_body': 'Just curious, why?', 'comment_created': datetime.datetime(2020, 8, 24, 20, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475871583, 'comment_body': 'very minor nit: in NT and it appears in lax.py, we have a convention of having public methods at the top and private helpers at the bottom of the file, would be very nice if you could arrange your files similarly!', 'comment_created': datetime.datetime(2020, 8, 24, 20, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475872309, 'comment_body': ""IMO this doesn't need to be a separate method instead of just calling tensordot"", 'comment_created': datetime.datetime(2020, 8, 24, 20, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475877561, 'comment_body': 'Minor nit: in NT we usually use single quotes `\'` vs `""` for strings, and python 3.6 literal string interpolation for brevity, so here and elsewhere I\'d suggest something like\r\n```\r\nraise ValueError(\'The input matrices are required to have the same number \'\r\n                 \'of contraction dimensions, but got: \'\r\n                 f\'lhs {len(lhs_contraction)}, rhs: {len(rhs_contraction)}.\')\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 20, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 475884974, 'comment_body': 'Sounds good!', 'comment_created': datetime.datetime(2020, 8, 24, 20, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 475889559, 'comment_body': 'Oh yeah, great question! I think Ashish mentioned that we want the newly constructed APIs - general conv, etc to be able to inter-op with the rest of the TF ecosystem, but I guess TF XLA is too low-level and independent. @wangpengmit Would you mind verifying this? ', 'comment_created': datetime.datetime(2020, 8, 24, 20, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476739437, 'comment_body': 'Here and elsewhere, please remove unused commented code. If applicable, replace it with TODOs/text to be more specific regarding the purpose of the comment.', 'comment_created': datetime.datetime(2020, 8, 25, 21, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476739575, 'comment_body': 'redundant ()', 'comment_created': datetime.datetime(2020, 8, 25, 21, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476742412, 'comment_body': ""I still feel like this call doesn't justify a whole separate function, as opposed to e.g. the `linalg.matmul` call below. Unless it's gonna be used a lot elsewhere. Lmk if you think otherwise!"", 'comment_created': datetime.datetime(2020, 8, 25, 21, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476752661, 'comment_body': ""Is this referring to your upcoming modification of `stax.py` pooling layers? If so, I believe it may be cleaner to have the adjustments be done here, to match the `lax.reduce_window` API precisely, and not have to prepare the inputs to each function call. (IIUC, you'd need to reshape `inputs` to `(1, 1) + inputs.shape` (https://www.tensorflow.org/api_docs/python/tf/nn/pool). But lmk if I'm missing something here!"", 'comment_created': datetime.datetime(2020, 8, 25, 21, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476759632, 'comment_body': ""Nit: please use two empty lines between top level defs, and one between class methods (https://www.python.org/dev/peps/pep-0008/#blank-lines; here it's the opposite)."", 'comment_created': datetime.datetime(2020, 8, 25, 21, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476762176, 'comment_body': 'To follow the NT convention, could you rename this file to `lax_test.py`, and put it into the `tests/` folder?', 'comment_created': datetime.datetime(2020, 8, 25, 21, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476763308, 'comment_body': ""Did you intend to copy the test file here? If not, I'm not sure why the cp, and how does the new test get tested? \r\n\r\nCould any copying be avoided by e.g. putting the file on the tests folder in the first place?"", 'comment_created': datetime.datetime(2020, 8, 25, 21, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476764446, 'comment_body': ""Just to double-check, are all the packages here needed? I don't see them used yet, and not sure if we need the nightly build either. Lmk!"", 'comment_created': datetime.datetime(2020, 8, 25, 21, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476774176, 'comment_body': 'Hi Roman, as you mentioned, I will put the `lax_test.py` file under tests folder. In terms of `lax` and `tf_jax_stax` (`ostax`) that I am going to commit later on, what do you think is a good place to put them? Actually only the test files will directly access them so it definitely will work if directly putting them under the tests folder. However, this does not look like a good structure. If we keep it under `tf_helpers`, maybe there is a need to integrate them as part of Neural Tangents in order to import them? (I am not sure doing something like `from ...tf_helpers import lax` will work). I need your insight here. Thanks!', 'comment_created': datetime.datetime(2020, 8, 25, 21, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476778148, 'comment_body': 'Yeah, a little bit of story here. Actually the above is the combination that I have figured out after many Travis CI build errors, as you can see - https://github.com/DarrenZhang01/Neural_Tangents_TensorFlow/commits/master/.travis.yml\r\n\r\nBy the way, is there anything I can do about the `jax.core` error in the latest commit?', 'comment_created': datetime.datetime(2020, 8, 25, 21, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476789420, 'comment_body': 'Re `jax.core` - make sure to remove `jax` from the install list in line 8, it is copied from github head below (because jax on pypi is not updated frequently enough)', 'comment_created': datetime.datetime(2020, 8, 25, 22, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476792184, 'comment_body': 'Hi Roman, I did not quite get what you mean here. Would you mind elaborating on it?\r\n\r\nActually this functionality has already been merged into Google Trax repo - https://github.com/google/trax/pull/956.\r\n\r\nLet me know!', 'comment_created': datetime.datetime(2020, 8, 25, 22, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476792540, 'comment_body': 'Got it! Thanks!', 'comment_created': datetime.datetime(2020, 8, 25, 22, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476793363, 'comment_body': ""And sure, feel free to import what you need, but If the current PR can pass tests without modifying the `.travis.yml` (I think it should be able to, or no?), then I'd postpone editing this file so that it's more clear what needs what additional packages at what point."", 'comment_created': datetime.datetime(2020, 8, 25, 22, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476798497, 'comment_body': ""I meant that function `_non_batched_matmul` doesn't seem to do much but just calls `tf.tensordot`, so I'm not sure if this needs to be a separate functions instead of just calling `tf.tensordot`, like you do below when you call `tf.linalg.matmul`. But it's a minor point, OK either way!"", 'comment_created': datetime.datetime(2020, 8, 25, 22, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476799028, 'comment_body': 'OK, I see what you mean. I will postpone doing the installation changes after replacing the APIs in the core files of Neural Tangents. But we still need a place to put `lax` and `ostax`, maybe directly under tests folder?', 'comment_created': datetime.datetime(2020, 8, 25, 22, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476802616, 'comment_body': 'Oh yes, you are right! At the beginning this helper did not look like this, and this is the one after many iterations of editing.\r\n\r\nI will remove this helper as you suggested.', 'comment_created': datetime.datetime(2020, 8, 25, 22, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476811420, 'comment_body': ""I believe having a top-level folder (same level as neural_tangents and tests) `tf_helpers`, and then in tests calling something like `from tf_helpers import lax` would work, or not? You may need an empty `__init__.py` file inside the `tf_helpers` folder, not an expert in module organization tbh. Re structure, I would be OK with either a separate top-level `tf_tests` / have files inside `tests` with `tf_` suffixes / or just have them in `tests`, and rename/move around if we run into naming conflicts / confusion. Since I don't see the whole structure very clearly yet, it may be best for you to decide! But I just find copying files a bit awkward and would instead try to call them from their original location."", 'comment_created': datetime.datetime(2020, 8, 25, 22, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476812244, 'comment_body': 'Please see my reply above - I believe they can be in `tf_helpers` and called from `[tf_]lax_test` and `[tf_]ostax_test` files in `tests` or `tf_tests`, but I may be wrong.', 'comment_created': datetime.datetime(2020, 8, 25, 22, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476851503, 'comment_body': 'extra blank line', 'comment_created': datetime.datetime(2020, 8, 25, 23, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476898417, 'comment_body': 'Yes, Roman, you pointed out the right direction! But things are a bit complex here and it really depends on cases. The above that you mentioned fits the case where the inputs do not contain batch and channel dimensions, but there are also cases where only batch dimension is there, the window dimensions contain unnecessary batch and channel dimensions where we need to remove them, etc., if I remember correctly. So I guess it would be more flexible to keep it in the current form?', 'comment_created': datetime.datetime(2020, 8, 26, 0, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476910919, 'comment_body': '> Please see my reply above - I believe they can be in `tf_helpers` and called from `[tf_]lax_test` and `[tf_]ostax_test` files in `tests` or `tf_tests`, but I may be wrong.\r\n\r\nYes, Roman, your strategy works! - https://travis-ci.org/github/google/neural-tangents/builds/721174208', 'comment_created': datetime.datetime(2020, 8, 26, 0, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 476932387, 'comment_body': ""Since it's already in the `tf_helpers` folder, should we perhaps call it just `stax`, just like `lax`?"", 'comment_created': datetime.datetime(2020, 8, 26, 0, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476933853, 'comment_body': ""I believe this part should be adjusted to how it was done in https://jax.readthedocs.io/en/latest/_modules/jax/experimental/stax.html,\r\nand it would be better to instead make `lax.reduce_window` match the default API: https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.reduce_window.html#jax.lax.reduce_window\r\nSee my comment in the `reduce_window` discussion (either way, lines 131 and 132 aren't doing anything now)"", 'comment_created': datetime.datetime(2020, 8, 26, 1, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476997554, 'comment_body': ""I'm still a bit confused here.\r\n\r\n1) Your docstring mentions `N...C` layout (which is also the default layout of `stax/ostax`, so this is good), but the TF doc mentions `NC...` order by default - https://www.tensorflow.org/api_docs/python/tf/nn/pool. Is there is mistake here?\r\n\r\n2) I don't quite see how this method can be flexible enough to handle presence/absence of batch or channel axes, instead I see that it requires them to always be present, and always be at given indices. So to me this method appears _less_ flexible than the default API https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.reduce_window.html#jax.lax.reduce_window, where the user can construct the window shape and strides according to the situation. E.g. in the finite-width case, they insert `1` for the batch and channel axes (https://jax.readthedocs.io/en/latest/_modules/jax/experimental/stax.html); in the infinite-width case, we insert one(s) along the batch axis / axes https://github.com/google/neural-tangents/blob/e69b43c51be2c4d4c07f7748fa2060932ed7603e/neural_tangents/stax.py#L3666\r\n\r\nI believe it is also possible to adjust inputs to your API as well to get the behavior we want for arbitrary batch axes / channel axes / etc, but\r\n1) I think in your approach, you would always need to reshape/transpose the input tensor, before calling it and perhaps afterwards too, but with the default API we just need to specify the window_shape and strides, and no operations on the input tensor is needed.\r\n2) It breaks the correspondence to `jax.lax.reduce_window`.\r\n\r\nSo I would lean in favor of following the `lax` API convention, but again, please exercise your best judgement in case if I'm missing something!"", 'comment_created': datetime.datetime(2020, 8, 26, 2, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 476999536, 'comment_body': ""Nit: revert this change since we don't need to touch this file now at all"", 'comment_created': datetime.datetime(2020, 8, 26, 2, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477000028, 'comment_body': 'Unused?  Here and elsewhere, please make sure to remove unused imports', 'comment_created': datetime.datetime(2020, 8, 26, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477001385, 'comment_body': ""[Tf]LaxTest? since it's not just conv"", 'comment_created': datetime.datetime(2020, 8, 26, 2, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477001672, 'comment_body': 'please use consistent test method naming (camelcase here vs underscrores above; NT uses underscores)', 'comment_created': datetime.datetime(2020, 8, 26, 2, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477003661, 'comment_body': ""To preserve the API, I would make this argument be the last one with default value of `None`, and when it's needed (IIUC only in quite advanced cases), have it raise a `NotImplementedError` + add a TODO comment to get rid of it later."", 'comment_created': datetime.datetime(2020, 8, 26, 3, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477005384, 'comment_body': 'not needed vs just using `max`?', 'comment_created': datetime.datetime(2020, 8, 26, 3, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477006145, 'comment_body': 'It appears that this and several other pure python functions are the same as in `lax` - should we prefer to just import and use them instead, especially if our goal is to mirror the lax API and stay up to date if it changes?', 'comment_created': datetime.datetime(2020, 8, 26, 3, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477006371, 'comment_body': 'Here and elsewhere, please remove unused commented code', 'comment_created': datetime.datetime(2020, 8, 26, 3, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477006790, 'comment_body': 'Here and elsewhere, please align hanging indentation', 'comment_created': datetime.datetime(2020, 8, 26, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477007456, 'comment_body': 'Please add a top-level description of the file, like you do in stax', 'comment_created': datetime.datetime(2020, 8, 26, 3, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477007840, 'comment_body': 'Please update description to your specific project', 'comment_created': datetime.datetime(2020, 8, 26, 3, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477010366, 'comment_body': 'Would the use of `onp` here transfer `inputs` from GPU/TPU to CPU? Should we try to avoid this?\r\n\r\nAlso, I believe this is the kind of transposition that can be avoided by using the default `lax` API.', 'comment_created': datetime.datetime(2020, 8, 26, 3, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477010836, 'comment_body': 'If we use TF transposition (or use the default `lax` API and no transposition, can we get rid of casting here?', 'comment_created': datetime.datetime(2020, 8, 26, 3, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477011460, 'comment_body': ""See my other comment about `onp` transposition - I'm afraid it might trigger redundant GPU -> CPU -> GPU data transfer, which can be avoided by using native TF transposition ops. But not a TF expert so I might be missing something here!"", 'comment_created': datetime.datetime(2020, 8, 26, 3, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477011807, 'comment_body': ""Here and elsewhere, is this for debugging? If so, I'd remove all such print statements."", 'comment_created': datetime.datetime(2020, 8, 26, 3, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477507162, 'comment_body': 'Hi, Roman, thanks for paying attention to the details here! Below is some elaboration, please correct me if I am wrong!\r\n\r\nIn terms of point one you mentioned, `N...C` is the default format if you look at the parameter requirements in the link that you provided. The original texts on official documents are: \r\n""""""\r\nA string or None. Specifies whether the channel dimension of the input and output is the last dimension (default, or if data_format does not start with ""NC""), or the second dimension (if data_format starts with ""NC""). For N=1, the valid values are ""NWC"" (default) and ""NCW"". For N=2, the valid values are ""NHWC"" (default) and ""NCHW"". For N=3, the valid values are ""NDHWC"" (default) and ""NCDHW"".\r\n""""""\r\n\r\nIn terms of the second point that you mentioned, there is key design difference between TensorFlow `pool` and JAX `reduce_window`: In TF `pool`, <b>the window shapes only require spatial dimensions</b>, so no matter whether there are batch and channel dimensions, no matter how many batch and channel dimensions are there, the filters are assumed to be the same across batches by default. So for example, if the input matrix is of form `N...C` of rank `n+2`, then the window shape is required to be of rank `n`. <b>However, in JAX, the window shapes are of same rank as the input matrix, and this is much more powerful because it allows much more possibilities in terms of batch and channel dimensions</b>. In TensorFlow, if I want to build `reduce_window` on top of `pool`, it is going to be super hard to recognize which specific situation it is, unless some more parameters are sent in. \r\n\r\nAgain, please correct me if I am wrong.', 'comment_created': datetime.datetime(2020, 8, 26, 18, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477515882, 'comment_body': ""I feel as though the JAX folks might not be too keen on us importing private functions (they already don't like the partial evaluation code we're importing) and it will likely make this layer more fragile to breakages. I think I would support copying for now. I guess there is some philosophical question about whether we want this code to be robust to internal changes in JAX or whether we just want it to be stable enough to use in `nt.stax`. I think probably the latter, right? However, where functions are the same, we should probably note it and have a link to the original stax function for when thing do break."", 'comment_created': datetime.datetime(2020, 8, 26, 18, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sschoenholz', 'type': 'User'}, {'comment_id': 477527660, 'comment_body': 'Besides, in TensorFlow, there is an underlying checker that checks `rank(window_shape) + 2 == rank(input)`, so it is like a hard (restrictive) requirement.', 'comment_created': datetime.datetime(2020, 8, 26, 19, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477532415, 'comment_body': ""I am happy to defer this until later / after the initial commit and I haven't thought about this nearly as much as either of you, but eventually if the goal is to have a TF pathway in master I do think there should be no special case code in `nt.stax` to avoid extra maintenance / unexpected costs."", 'comment_created': datetime.datetime(2020, 8, 26, 19, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sschoenholz', 'type': 'User'}, {'comment_id': 477558895, 'comment_body': 'Here and elsewhere (in conv and potentially other tests) - please use random arrays instead of `ones` to test correctness more thoroughly at no extra compute cost.', 'comment_created': datetime.datetime(2020, 8, 26, 20, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477564830, 'comment_body': 'Solved in https://github.com/google/neural-tangents/pull/59/commits/9357a243ec8d3c685cee47faee2bd6c94dc3a0fa; Thanks to Roman for bringing this up.', 'comment_created': datetime.datetime(2020, 8, 26, 20, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477572148, 'comment_body': 'Solved in https://github.com/google/neural-tangents/pull/59/commits/27a69822ca02a21f5f809f585e1d6f30b1364947', 'comment_created': datetime.datetime(2020, 8, 26, 20, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477578039, 'comment_body': 'Sorry, by casting, you mean rescaling the output?', 'comment_created': datetime.datetime(2020, 8, 26, 20, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477580423, 'comment_body': 'unused lines', 'comment_created': datetime.datetime(2020, 8, 26, 20, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477580892, 'comment_body': ""I don't think you need these after the changes to lax.reduce_window"", 'comment_created': datetime.datetime(2020, 8, 26, 20, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477581343, 'comment_body': 'I meant lines 156 and 157 in your latest revision. Should not be needed after changes to lax.reduce_window', 'comment_created': datetime.datetime(2020, 8, 26, 20, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477584214, 'comment_body': 'Thanks for pointing this out!', 'comment_created': datetime.datetime(2020, 8, 26, 20, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 477585937, 'comment_body': 'I think you also need to remove (see e.g. https://numpy.org/doc/stable/reference/generated/numpy.squeeze.html) the leading and training dimensions when you return the array too (so that you return the array of rank `N+2` and not `N+4`.', 'comment_created': datetime.datetime(2020, 8, 26, 20, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 477588510, 'comment_body': 'My bad. I am really sorry about this.', 'comment_created': datetime.datetime(2020, 8, 26, 21, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 480562018, 'comment_body': '@romanngg Hi Roman, I am testing the new TF `reduce_window`, and sadly I find a flaw that is due to TF `pool` limitation. TF `pool` currently only supports 1 <= # spatial dimensions <=3, and this is going to be very limited for our inputs...which means we can only have 3 dimensional inputs (including batch and channel), not going to handle the most common 4 dimensional cases.', 'comment_created': datetime.datetime(2020, 9, 1, 1, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 482290451, 'comment_body': 'Solved in https://github.com/google/neural-tangents/pull/63/commits/bee716ff436936f93473f7df971920e043b53065', 'comment_created': datetime.datetime(2020, 9, 2, 18, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 482291045, 'comment_body': 'Solved in https://github.com/google/neural-tangents/pull/63/commits/b45f975929b3121a9c6dcb20274fcb097b4e4337', 'comment_created': datetime.datetime(2020, 9, 2, 18, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 482698430, 'comment_body': ""Ah, that's a bummer! Did you find a solution to it / perhaps the TF team could suggest something here? (maybe we could call the XLA method here?)\r\n\r\nIn NT pooling over 4 spatial dimensions is a common operation if average pooling layers are used in the network (https://github.com/google/neural-tangents/blob/8b79dbeb32e9df7a6323df43ede898b6897eea01/neural_tangents/stax.py#L1291), and I guess we also would have the issue of breaking the lax correspondence which I imagine will cause us a fair amount of headache. Further, in general, NT currently is dimensionality-agnostic, so this would also break the TF interface at inputs having more than 4 spatial dimensions.\r\n\r\nWorkarounds that I see are:\r\n1) implement ND-pooling as a sequence of lower-dimensional poolings, like separable convolutions;\r\n2) Implement ND-pooling as a convolution, if by any chance it's supported in higher dimensions in TF.\r\nBut ofc both would be slower and not particularly nice, so I'm not sure here. Lmk what you think!"", 'comment_created': datetime.datetime(2020, 9, 3, 4, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'romanngg', 'type': 'User'}, {'comment_id': 482986258, 'comment_body': ""Hi Roman, thanks for the thoughts here! TF convolution also only supports 1 to 3 number of spatial dimensions. I will send an email and let's see what my mentors at TF team say about this."", 'comment_created': datetime.datetime(2020, 9, 3, 13, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}]","[{'commit_sha': 'd49ffb7b61755fb47ccd53dc782d5d352c6323b4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c57503fa68daf13db33ad78c18d5784417800eb9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7f5135073aeced7a14aa3f2c2db5bdd815046895', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '36ae0a355444ef9da67297bfabe7270f2423efa3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '70924d09c6115b424ad8bfd80c87ba4e29ebfe1e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd20c45ff336a1fd304ff919a967cde9e47d13132', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2fee307a67c7c35bba991bb0ec17a35d8a359f17', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '34787ba670e75528f4fedf793757e938e2ca45e0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6aa01546356b7a90ed9dd4b74fb9d0f5bc84d9d2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '42e5b545edc6cae91af1a80a95c2dc896b477042', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7dc72d6993fd415dcdc977214a206a515364542c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e0fabe395f568a50292cbd550fae49c31e65121d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4dbc0b33103e6bd694085adb7a298a18836487e8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '412eedccb1675daf5d83016157195e6948b3e855', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '96c0ff1ce3939408baecd6a47b0aab80e640133a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '23d998d6880e1bb898e2fad74ab18d3176aa84ef', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c04e7b83667f80790fe177b5e8b7aab80299ef99', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '70257b9fb4c713244d92a78d108bcb96edf073c1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd92e0fc9c8955ccc015dbb9deae2a5d5aca0faf2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '94322960386205b43bc69a8dd741ce3993bebe8f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '51f78a4a268684aef7dbc2fdf62e9f7603f33c74', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9357a243ec8d3c685cee47faee2bd6c94dc3a0fa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '27a69822ca02a21f5f809f585e1d6f30b1364947', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a020275318c30824a51973c8327acb2a8ebde3c4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7df8a230d272d338d61f9b5c22eb271d1436ff14', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd7304566dee1edf33a49ccbba40afae4e741e9df', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '588b7483caf9b84deaa8467e365738c98eb81618', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ab173740afbde13aeba19e61ad3fc4d84e8dbe0b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Zhibo Zhang ,29133834,zhibozhang@cs.toronto.edu,User,,97,,9,15
441568217,Revise the typo from `dot_general_dilated` to `conv_general_dilated`.,,True,39,https://api.github.com/repos/google/neural-tangents/pulls/39,https://github.com/google/neural-tangents/pull/39,closed,1,1,1,2,1,0,0,0,[],2020-06-29 18:05:28+00:00,2020-06-29 18:31:00+00:00,1532.0,0:25:32,[],"[{'commit_sha': 'f1bedf1ee7d3cbf4511d31ac3b8cedd499de5544', 'committer_username': 'DarrenZhang01', 'committer_name': 'Zhibo Zhang ', 'committer_email': 'zhibozhang@cs.toronto.edu', 'commit_date': datetime.datetime(2017, 6, 2, 0, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2c69a0d8056b87b5acb18b9406425ce141fe433', 'committer_username': 'DarrenZhang01', 'committer_name': 'Zhibo Zhang ', 'committer_email': 'zhibozhang@cs.toronto.edu', 'commit_date': datetime.datetime(2017, 6, 2, 0, 3, 37, tzinfo=datetime.timezone.utc)}]",Zhibo Zhang ,29133834,zhibozhang@cs.toronto.edu,User,,97,,9,15
475618606,Revise `dot_general_dilated` to `conv_general_dilated`.,,True,62,https://api.github.com/repos/google/neural-tangents/pulls/62,https://github.com/google/neural-tangents/pull/62,closed,2,2,1,1,0,0,0,0,[],2020-08-28 20:04:58+00:00,2020-08-28 20:12:46+00:00,468.0,0:07:48,[],"[{'commit_sha': '5415231b4dd5f8cf1c2713cd7ca94b00f91959a9', 'committer_username': 'DarrenZhang01', 'committer_name': 'Zhibo Zhang ', 'committer_email': 'zhibozhang@cs.toronto.edu', 'commit_date': datetime.datetime(2017, 6, 2, 0, 3, 37, tzinfo=datetime.timezone.utc)}]",Zhibo Zhang ,29133834,zhibozhang@cs.toronto.edu,User,,97,,9,15
471314097,Add the `size` API for TensorFlow NumPy operations.,The equivalent vanilla NumPy operation: https://numpy.org/doc/stable/reference/generated/numpy.ndarray.size.html,True,42539,https://api.github.com/repos/tensorflow/tensorflow/pulls/42539,https://github.com/tensorflow/tensorflow/pull/42539,closed,47,0,3,15,10,27,4,1,"[{'name': 'cla: yes'}, {'name': 'ready to pull'}, {'name': 'comp:ops'}, {'name': 'size:S'}]",2020-08-21 00:54:54+00:00,2020-09-10 01:27:56+00:00,1729982.0,"20 days, 0:33:02","[{'comment_id': 478594565, 'comment_body': ""This currently won't handle graph tensors. How about something similar to below to handle those as well?\r\n\r\n```suggestion\r\n  x = asarray(x).data\r\n  sz_tensor = array_ops.size(x)\r\n  sz_value = np_utils.get_static_value(sz_tensor)\r\n  if sz_value is not None:\r\n    return int(sz_value)\r\n  return np_utils.tensor_to_ndarray(sz_tensor)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 27, 17, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478596566, 'comment_body': 'Should this be np_array_ops.size(arr)? ', 'comment_created': datetime.datetime(2020, 8, 27, 17, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478597850, 'comment_body': ""Looking at the documentation for np.size, it seems to have an axis argument as well. Can you add that as well? (We don't have to support the code for now, we can simply raise an error if the 'axis' argument is something other None)\r\n\r\nPlease add a test for that as well. "", 'comment_created': datetime.datetime(2020, 8, 27, 17, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478629057, 'comment_body': 'Yeah, sorry, `np_size` is my local version when testing.', 'comment_created': datetime.datetime(2020, 8, 27, 18, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478630058, 'comment_body': 'Thanks for the insight! Just to make sure, can we turn a graph Tensor directly into TF NumPy array?', 'comment_created': datetime.datetime(2020, 8, 27, 18, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 478636646, 'comment_body': 'Yes! The ndarray class can wrap either graph or eager tensors.', 'comment_created': datetime.datetime(2020, 8, 27, 19, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 478648132, 'comment_body': 'Thanks Akshay! I will commit this a bit later since I am currently dealing with some Neural Tangents issues.', 'comment_created': datetime.datetime(2020, 8, 27, 19, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479712113, 'comment_body': 'Hi, Akshay! Should I also include tests for raising errors?', 'comment_created': datetime.datetime(2020, 8, 30, 2, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479713636, 'comment_body': 'Never mind. I included the according tests.', 'comment_created': datetime.datetime(2020, 8, 30, 2, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 479890932, 'comment_body': ""Unresolving this since it looks like the code still doesn't handle graph tensors. "", 'comment_created': datetime.datetime(2020, 8, 31, 5, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 480336189, 'comment_body': 'Hi Akshay @akshaym , thanks for pointing this out! I further revised the code in https://github.com/tensorflow/tensorflow/pull/42539/commits/fc5de5045086933fa7a657f0133b353a80b5d04a and now it should work fine.', 'comment_created': datetime.datetime(2020, 8, 31, 19, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 481230471, 'comment_body': 'Hi Zhibo, the code as written still doesn\'t handle graph tensors. \r\n\r\nGraph tensors can have undefined shapes during graph construction (so for example the tensor can have a shape of ""[None, None]"")\r\n\r\nIn this situation [tnp.ndarray.shape](https://github.com/tensorflow/tensorflow/blob/a067c6723019ea08d3b4a1acf2cb1dbd42e33e09/tensorflow/python/ops/numpy_ops/np_arrays.py#L197) will return a tf.Tensor, which you cannot pass to np.prod. ', 'comment_created': datetime.datetime(2020, 9, 1, 15, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 481247933, 'comment_body': 'Thanks for mentioning this, Akshay. In your opinion, how should we handle undefined shapes ... raise `ValueError`?', 'comment_created': datetime.datetime(2020, 9, 1, 15, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 481256027, 'comment_body': 'By the way, would you mind providing a concrete example on what a `None` shape Tensor construction is like? Thanks.', 'comment_created': datetime.datetime(2020, 9, 1, 16, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 481263199, 'comment_body': 'The suggestion I gave above (in the first comment on this thread) should handle both graph and eager tensors. \r\n\r\nHere is a contrived example:\r\n```\r\n@tf.function(input_signature=[tf.TensorSpec(shape=None, dtype=tf.float32)])\r\ndef f(x):\r\n  x = tnp.asarray(x)  # Wraps a graph tensor into a tnp.ndarray\r\n  return tnp.size(x)  # This should fail since the shape is ""None""\r\n```', 'comment_created': datetime.datetime(2020, 9, 1, 16, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 481317078, 'comment_body': 'Hi Akshay, thanks for the insight! I tried wrapping the `tf.TensorSpec(shape=None, dtype=tf.float32)` using `np.asarray`, but got the error `TypeError: data type not understood`.', 'comment_created': datetime.datetime(2020, 9, 1, 17, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 481344819, 'comment_body': 'Hi @akshaym , I revised the code in https://github.com/tensorflow/tensorflow/pull/42539/commits/d70b16b8a54d15afc9b0fc33f0bbe93ba22ba456 based on your suggestion.', 'comment_created': datetime.datetime(2020, 9, 1, 18, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 483161104, 'comment_body': 'After your change above, this should not happen. `x` will **always** be a Tensor. You can move this above the `asarray` call, since I think it makes sense as an optimization. ', 'comment_created': datetime.datetime(2020, 9, 3, 18, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 483163033, 'comment_body': ""This still doesn't handle Tensors with partially defined shapes. \r\n\r\nx.shape returns a [TensorShape](https://www.tensorflow.org/api_docs/python/tf/TensorShape). If the shape [is_fully_defined](https://www.tensorflow.org/api_docs/python/tf/TensorShape#is_fully_defined), then the code as written works OK, but that is not guaranteed. If the shape isn't fully defined, you'll have to call the corresponding TensorFlow [size](https://www.tensorflow.org/api_docs/python/tf/size) function, and return that as a result. "", 'comment_created': datetime.datetime(2020, 9, 3, 18, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 483163714, 'comment_body': ""We never `import tensorflow as tf` from within the TensorFlow codebase. We should be importing the files that define the functions we want (looks like you want `from tensorflow.python.framework import tensor_util`), and use them directly like other imports in this file (specifically here `tensor_util.is_tensor`). \r\n\r\nYou'll probably want to remove it from the test file as well. "", 'comment_created': datetime.datetime(2020, 9, 3, 18, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 483183028, 'comment_body': 'Great idea!', 'comment_created': datetime.datetime(2020, 9, 3, 18, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}, {'comment_id': 483274296, 'comment_body': ""I think we should delete this comment. \r\n\r\nThis is not what is happening here. We're just converting non-Tensor arguments into tensor arguments in the `asarray` call - existing tensors (whether graph or eager) are mostly left unchanged. "", 'comment_created': datetime.datetime(2020, 9, 3, 21, 53, 58, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 483274321, 'comment_body': 'This conditional should not be required. `x` will always be a tensor, since `asarray` always returns an `np_arrays.ndarray`. ', 'comment_created': datetime.datetime(2020, 9, 3, 21, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 483274598, 'comment_body': 'I think this `else` can be removed - `asarray` will raise an error if something not-compatible is passed in. ', 'comment_created': datetime.datetime(2020, 9, 3, 21, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 483274737, 'comment_body': 'Lets wrap this in an ndarray using `np_utils.tensor_to_ndarray`. ', 'comment_created': datetime.datetime(2020, 9, 3, 21, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 485189850, 'comment_body': 'Hey @DarrenZhang01 I think this needs to be removed since its no longer used.', 'comment_created': datetime.datetime(2020, 9, 8, 20, 53, 18, tzinfo=datetime.timezone.utc), 'commenter': 'akshaym', 'type': 'User'}, {'comment_id': 485255511, 'comment_body': 'Thanks for pointing this out, Akshay!', 'comment_created': datetime.datetime(2020, 9, 8, 23, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DarrenZhang01', 'type': 'User'}]","[{'commit_sha': '3406ee7ca7d15f89189585b07e0c6a280c6a2c88', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '776227e60279d53ed1dea42da2f8f1bb8589978e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9c4d5ff8fbc94f9d8317584473ebd0c45ddebaf0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '706552aa1c9876cf08bca90262865f10b3bf59d2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9a9bec8fc7b971c7d8454f214b5b98d3e26cb3ce', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1f87eacbbf66c19e1a864c4b4623db4bcaf2fe9e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2adfcfc8f23cb5e35b47a23e9ecf7aabda1659c8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fc5de5045086933fa7a657f0133b353a80b5d04a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd70b16b8a54d15afc9b0fc33f0bbe93ba22ba456', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e514f7c96099f22ea96988417f5f93ba2aabc98d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c65af0222977d70660761e664eebb2dd5664e7e7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4e9c20d05d2651dc02ad0377547ee24e9551d35a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'feb0a771284df62a5162f24cb1eefde7134186c7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'df04b17d6fb1c2b60ada1bb11c8864519e44213e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fcfe64be4ca16c98b6e4a480c3207a3d9c3648e5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Zhibo Zhang ,29133834,zhibozhang@cs.toronto.edu,User,,97,,9,15

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
180192894,neural-tangents,google/neural-tangents,Jupyter Notebook,227,2256,63,29,650,66,5,6,"[{'id': 477369018, 'number': 63, 'closed': None, 'created': datetime.datetime(2020, 9, 1, 22, 21, 53, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 331, 'deletions': 79, 'state': 'open'}, {'id': 475618606, 'number': 62, 'closed': datetime.datetime(2020, 8, 28, 20, 12, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 20, 4, 58, tzinfo=datetime.timezone.utc), 'time_taken': 468.0, 'time_delta': '0:07:48', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 474248366, 'number': 61, 'closed': datetime.datetime(2020, 8, 29, 4, 50, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 22, 46, 36, tzinfo=datetime.timezone.utc), 'time_taken': 194659.0, 'time_delta': '2 days, 6:04:19', 'additions': 2431, 'deletions': 303, 'state': 'closed'}, {'id': 472726735, 'number': 59, 'closed': datetime.datetime(2020, 8, 26, 21, 54, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 19, 42, 46, tzinfo=datetime.timezone.utc), 'time_taken': 180678.0, 'time_delta': '2 days, 2:11:18', 'additions': 904, 'deletions': 0, 'state': 'closed'}, {'id': 441568217, 'number': 39, 'closed': datetime.datetime(2020, 6, 29, 18, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 18, 5, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1532.0, 'time_delta': '0:25:32', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
213020264,trax,google/trax,Python,814,8027,145,79,1623,122,93,15,"[{'id': 470321020, 'number': 956, 'closed': datetime.datetime(2020, 8, 24, 22, 48, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 17, 50, 18, tzinfo=datetime.timezone.utc), 'time_taken': 449894.0, 'time_delta': '5 days, 4:58:14', 'additions': 154, 'deletions': 0, 'state': 'closed'}, {'id': 469739695, 'number': 954, 'closed': datetime.datetime(2020, 8, 28, 22, 58, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 20, 49, 22, tzinfo=datetime.timezone.utc), 'time_taken': 871742.0, 'time_delta': '10 days, 2:09:02', 'additions': 177, 'deletions': 0, 'state': 'closed'}, {'id': 421525344, 'number': 656, 'closed': datetime.datetime(2020, 5, 29, 4, 44, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 21, 19, 4, 40, tzinfo=datetime.timezone.utc), 'time_taken': 639590.0, 'time_delta': '7 days, 9:39:50', 'additions': 84, 'deletions': 0, 'state': 'closed'}]"
45717250,tensorflow,tensorflow/tensorflow,C++,74124,184821,7608,4660,168658,4360,2544,2582,"[{'id': 471314097, 'number': 42539, 'closed': datetime.datetime(2020, 9, 10, 1, 27, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 0, 54, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1729982.0, 'time_delta': '20 days, 0:33:02', 'additions': 47, 'deletions': 0, 'state': 'closed'}]"
