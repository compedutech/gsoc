pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1006841881,AlexNet Implementation,Implemented AlexNet using the new ann-vtable structure as a Layer for more straightforward serialization and use.,True,76,https://api.github.com/repos/mlpack/models/pulls/76,https://github.com/mlpack/models/pull/76,closed,409,0,5,9,1,14,0,0,[],2022-07-25 05:51:30+00:00,2022-09-08 16:09:25+00:00,3925075.0,"45 days, 10:17:55","[{'comment_id': 938147863, 'comment_body': 'nit: Can be moved to same line IG', 'comment_created': datetime.datetime(2022, 8, 4, 18, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 938151670, 'comment_body': 'We can create a function that does this, and call that repeatedly like for example, addConvBlock(inputParams) {\r\n  // Add Conv Block, Relu and MaxPooling if needed\r\n}', 'comment_created': datetime.datetime(2022, 8, 4, 18, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 953141619, 'comment_body': 'The same comment from VGG applies here: https://github.com/mlpack/models/pull/78/#discussion_r953138760', 'comment_created': datetime.datetime(2022, 8, 23, 21, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 953143636, 'comment_body': ""Oh, I also overlooked in the VGG PR that this inherits from `MultiLayer`.  What is the intended use here?  Is it so that you can use `AlexNet` as a part of another network?  If that's the case, we should add a note to the documentation too.\r\n\r\nBy the way, it would be a good test to add to use `AlexNetType` in exactly that way, and just make sure the forward and backward passes and the gradient pass work."", 'comment_created': datetime.datetime(2022, 8, 23, 21, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 953144439, 'comment_body': 'We should document that the caller is responsible for deleting the returned network.', 'comment_created': datetime.datetime(2022, 8, 23, 22, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 953145146, 'comment_body': ""I think it's possible to use defaults to combine these two constructors, and then if you wanted you could inline `MakeModel()` directly into the constructor for simplicity, since I think it isn't used anywhere else."", 'comment_created': datetime.datetime(2022, 8, 23, 22, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 953145926, 'comment_body': ""Shouldn't this use `GroupedConvolution` with two groups here?"", 'comment_created': datetime.datetime(2022, 8, 23, 22, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 953147961, 'comment_body': 'Are these the right number of filters for each layer?  I am looking at https://proceedings.neurips.cc/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf, Figure 2, and it seems off to me.  For instance, I believe the first layer should be a grouped convolution (with 2 groups), with 96 kernels (48 in each group), not 64.  Correct me if I overlooked something, or if I am looking in the wrong place.', 'comment_created': datetime.datetime(2022, 8, 23, 22, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 956675134, 'comment_body': ""Idk why torchvision has a different architecture\r\nhttps://github.com/pytorch/vision/blob/main/torchvision/models/alexnet.py\r\nI don't think anybody is using Grouped Conv for AlexNet for some reason."", 'comment_created': datetime.datetime(2022, 8, 28, 6, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 956675480, 'comment_body': 'No need for a Gradient check as we have performed gradient checks for every layer beforehand.', 'comment_created': datetime.datetime(2022, 8, 28, 6, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 956675840, 'comment_body': 'Use here is to use these networks as a layer. So if you just want architecture with no classifier and add something on your own', 'comment_created': datetime.datetime(2022, 8, 28, 6, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 962323809, 'comment_body': 'Thanks for the clarification; that makes sense to me.', 'comment_created': datetime.datetime(2022, 9, 4, 14, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 962324215, 'comment_body': ""Fair enough, if this matches the torchvision reference implementation that's good enough for me. :+1: I guess maybe that was done because I think grouped convolution was only used in AlexNet as a way to distribute across two GPUs."", 'comment_created': datetime.datetime(2022, 9, 4, 14, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 962324317, 'comment_body': 'There are some tabbing issues here, can you fix those please? :)', 'comment_created': datetime.datetime(2022, 9, 4, 14, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': '64b30ac8b0efadeb8a65237a7b0947adcd2a0e12', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17f663d0b7234c5493c0ce5a5abbfb17f4bd0aaa', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '901be4d242b777b5059457357bdbb32c1b9e25fd', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '675ebc71604f55fed46769d8870ea6dc7c4abcac', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c50707d16b4712bfd476dd4665cf7a59009a9ee5', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeae056ed06ba65a293b6defb4252aa16ef3bf30', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '887c7cf8702db5db50676a55f6c9861be342378e', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e82fce243f712dfac1fc50b749ce645ee18e4b03', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f72c5125e6cc8ebdc749ca5e5f96b7e0ab57a84d', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
1006842535,SqueezeNet Implentation,Implemented SqueezeNet using the new ann-vtable structure as a Layer for more straightforward serialization and use.,True,77,https://api.github.com/repos/mlpack/models/pulls/77,https://github.com/mlpack/models/pull/77,closed,535,0,5,11,0,3,0,0,[],2022-07-25 05:52:38+00:00,2022-09-09 19:14:47+00:00,4022529.0,"46 days, 13:22:09","[{'comment_id': 962349442, 'comment_body': ""Don't forget to document here that the caller is responsible for deleting the layer---unless they call `Add()` to add the network directly to an `FFN` (where the FFN will handle deleting the layer)."", 'comment_created': datetime.datetime(2022, 9, 4, 18, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 962349456, 'comment_body': '`Unsupported`', 'comment_created': datetime.datetime(2022, 9, 4, 18, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 962349461, 'comment_body': 'Here and some other places there are style issues---be sure to use spaces and not tabs. :+1:', 'comment_created': datetime.datetime(2022, 9, 4, 18, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': '3ff46225ac072edd8faf658317167b5b6448845e', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6a30b96c6d0853e15b6fd9341d86e757b22fdd7', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2cd855ac2db0a965f034bb64babc4471f497172', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20a2a816795040560f3e5a112f65b9b229ee52a3', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ec3e489b7064abfb923376a36f0a3563ce27687', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5666b66840c8b279b21a2337ae2be761960587d', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf51203849ade8697ba7c1a8df1f51ba363dfcca', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea03716ec1a633f7bced8cb0e63d867d97669ac7', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bb22f41e1aee8f1093470a23787979950b945de', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22fa3de009df533dee016aa2a801815bc0cbcd70', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3555b7e4881ad525a3249ca9e20c30ec9bca2c0', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
1006843427,VGG Implementation,Implemented VGG using the new ann-vtable structure as a Layer for more straightforward serialization and use.,True,78,https://api.github.com/repos/mlpack/models/pulls/78,https://github.com/mlpack/models/pull/78,closed,806,0,5,14,2,21,0,0,[],2022-07-25 05:54:12+00:00,2022-09-08 16:10:07+00:00,3924955.0,"45 days, 10:15:55","[{'comment_id': 945194061, 'comment_body': 'Do you mean that we will return a `Cube` for each prediction?  It seems like we should be able to return a length-`N` vector for each input point.', 'comment_created': datetime.datetime(2022, 8, 13, 22, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 945194099, 'comment_body': ""I might suggest either `UsesBatchNorm` or `IsBatchNormalized` (since `BatchNorm` is the name of a layer).  That's a small comment though."", 'comment_created': datetime.datetime(2022, 8, 13, 22, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 945194122, 'comment_body': '```suggestion\r\n  VGGType(const size_t numClasses,\r\n          const bool includeTop = true);\r\n```', 'comment_created': datetime.datetime(2022, 8, 13, 22, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 945194132, 'comment_body': ""I don't think that I understand what `includeTop` does; can you clarify that in the documentation?"", 'comment_created': datetime.datetime(2022, 8, 13, 22, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 945194154, 'comment_body': 'I would write `Get the FFN object representing the network` just for clarity.', 'comment_created': datetime.datetime(2022, 8, 13, 22, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 945194199, 'comment_body': '```suggestion\r\n  void MakeModel()\r\n```\r\nJust a stylistic convention. :)  Also I would move the implementation into `vgg_impl.hpp` to keep the header file shorter.', 'comment_created': datetime.datetime(2022, 8, 13, 22, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 945194260, 'comment_body': 'Can you add a comment indicating what this represents?  I believe it is the network structure of each version (A, A-LRN, B, C, D, E) but I am not quite sure what the `std::vector<size_t>` associated with each model is.', 'comment_created': datetime.datetime(2022, 8, 13, 22, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 945194323, 'comment_body': 'I guess that `0` indicates a `MaxPooling` layer.  Anyway, it would be helpful to describe that in a comment.', 'comment_created': datetime.datetime(2022, 8, 13, 22, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 945194559, 'comment_body': 'It would probably be a good idea to write which versions are valid here.  I guess it must be `11`, `13`, `16`, and `19`; but how would the user get `A-LRN` or `C`?  Is that done by setting the batch normalization parameter to true?', 'comment_created': datetime.datetime(2022, 8, 13, 22, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 945194829, 'comment_body': 'Is the user supposed to call `GetModel()` and then use `Train()` and `Predict()`?  Or should we provide a `Train()` and `Predict()` function here that simply call the internal model?\r\n\r\n(I am not 100% familiar with the models repository, so maybe all the models are like this, I am not sure.)', 'comment_created': datetime.datetime(2022, 8, 13, 22, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 950695181, 'comment_body': 'I left that comment by mistake.', 'comment_created': datetime.datetime(2022, 8, 20, 13, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 950696088, 'comment_body': 'Idts I have implemented `A-LRN`.', 'comment_created': datetime.datetime(2022, 8, 20, 13, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 950696189, 'comment_body': 'No need as it is contained inside FFN generated by `GetModel()`.', 'comment_created': datetime.datetime(2022, 8, 20, 13, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 953138760, 'comment_body': ""There's no default, so is this optional?  Maybe it makes sense to have `includeTop` before `numClasses`."", 'comment_created': datetime.datetime(2022, 8, 23, 21, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 953138870, 'comment_body': 'Understood, thanks!', 'comment_created': datetime.datetime(2022, 8, 23, 21, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 953139618, 'comment_body': ""Actually it's probably better to put the paper reference here with the class, since users probably will look for documentation for the class and not necessarily the header file.\r\n\r\nDo you think you can add a note on how `VGGVersion` relates to Table 1 in the paper?  i.e. `11` is equivalent to the `A` network, etc., etc."", 'comment_created': datetime.datetime(2022, 8, 23, 21, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 956675670, 'comment_body': 'Writing error :)', 'comment_created': datetime.datetime(2022, 8, 28, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 956676462, 'comment_body': 'Idts they will look for paper here.', 'comment_created': datetime.datetime(2022, 8, 28, 6, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 959074244, 'comment_body': ""It depends on the tool they are using; if they are just looking through files, I agree, but if they are using some IDE that points them to the class documentation, they will end up looking at this particular comment.  It is a minor issue, so if you feel strongly about it, it's okay to leave it how it is, but in my opinion it would be better placed here. :+1:"", 'comment_created': datetime.datetime(2022, 8, 31, 2, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 962190156, 'comment_body': 'Looks like there are some style issues, with tab characters appearing here and in the later tests.  Can you fix those?', 'comment_created': datetime.datetime(2022, 9, 3, 18, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 962190226, 'comment_body': 'Might be nice to add a comment that this only takes one pass over the data (so it does not take super long).', 'comment_created': datetime.datetime(2022, 9, 3, 18, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': '3cd706661d45027e4d7b7e3a6aa7d63c597f9950', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebba966e82329fbb51d99fa5af5c652c5e3f3dbb', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a56154a780d8062847d0e9f8325ce4945b3dadf2', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfe80090186ec317efdbc20c0322733c38b21c0a', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04f889c261e987c6ed3ea3a57ccfa50ae5538773', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e1b3d69615c698803ba09d6228ef80f8f09ec56', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f191b6027fefc83c9b0aceff60a10cea9b33035a', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0888c6a004b5eeb3b3bb5d24495c72a051e74a1', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f13f46d42f06e6c206d4c5ac730a00e8f3815b1', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a43da32d1339ab3f5ac8efe79d129213e484a2af', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93e04483dfba3a1e85317ba16c34d4c7812d7807', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb554a8d97d1a8ca1a5291a1e55d931f1244f1d5', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b45cf7766ab446fbac70a623a0ca8f0efca13587', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbee7ad0c4761bd2eaee479fd169a9ae15aa1dfa', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
1006855564,Xception Implementation,Implemented Xception using the new ann-vtable structure as a Layer for more straightforward serialization and use.,True,79,https://api.github.com/repos/mlpack/models/pulls/79,https://github.com/mlpack/models/pull/79,closed,560,0,5,14,2,7,0,0,[],2022-07-25 06:11:49+00:00,2022-09-11 13:40:17+00:00,4174108.0,"48 days, 7:28:28","[{'comment_id': 962349713, 'comment_body': ""Just like the other PRs, let's document that the caller is responsible for deleting the returned network."", 'comment_created': datetime.datetime(2022, 9, 4, 18, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 962349807, 'comment_body': '```suggestion\r\n   * Adds Separable Convolution to the given block.\r\n```', 'comment_created': datetime.datetime(2022, 9, 4, 18, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 962349828, 'comment_body': '```suggestion\r\n```\r\nOnly one blank line is enough.', 'comment_created': datetime.datetime(2022, 9, 4, 18, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 962350098, 'comment_body': 'There are some tab/space issues in this PR too, just like the other ones. :+1:', 'comment_created': datetime.datetime(2022, 9, 4, 18, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 962350143, 'comment_body': 'Can you add a newline to the end of the file? Sorry for the pedantic comment.', 'comment_created': datetime.datetime(2022, 9, 4, 18, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 966161312, 'comment_body': '```suggestion\r\n      inMaps, stride, stride, padding, padding, ""none"", useBias);\r\n  block->template Add<ann::Convolution>(outMaps, 1, 1, 1, 1, 0, 0, ""none"",\r\n      useBias);\r\n```\r\nTiny style fixes, wrapped lines should be indented twice. :+1:', 'comment_created': datetime.datetime(2022, 9, 8, 16, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 966161658, 'comment_body': '```suggestion\r\n        0, 0, ""none"", false);\r\n```\r\nI might have missed some of these, but here\'s another one I saw.', 'comment_created': datetime.datetime(2022, 9, 8, 16, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': '508e2657bc72e2f67273c2e4626bb5a0904bc143', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2fcad60f6f0066edf60d9c22dfb9cec92e9f2d', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d50c23b5356fdfbeb8a95b72409f3486be5b196', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4c4c21548923b059fe5d4d4345bcad27fa093c4', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7890de6aef891c7f592e18a2977023ad305371de', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75d0e79e2cfc9f9531a29c0e32aafccf34935ff9', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf8e56669c189aa09dded236b64c28f9b1f6abbf', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d48175e55627ff691168e93bad6b96102e7f73a', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c5ae576ad788257b08265a7f3f92c220ccc7cb9', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c16b54a5efe694253a9d426a49f4576bd72292d', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd30ffc1a0f39cae6d96a9f3e208cb2982883043', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f60e7637ff34e8cb9872b9d4f6813774f40a594', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8118c15e63a25928144d99fc6b1d79827930782a', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c30f957a96c3c206977b09c931722b6ffc975d5', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
1038885400,Catch Update,Added files related to serialization and updated catch files,True,80,https://api.github.com/repos/mlpack/models/pulls/80,https://github.com/mlpack/models/pull/80,closed,871,240,6,2,0,0,2,0,"[{'name': 's: unlabeled'}, {'name': 's: unanswered'}]",2022-08-28 14:01:19+00:00,2022-08-31 12:30:39+00:00,253760.0,"2 days, 22:29:20",[],"[{'commit_sha': 'f30d1d4b8a212042aacb89cfb329f8bc766c4806', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9739466617f94ee6f4e7eb68c0bf601cfe123341', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
963641635,AddMerge Layer Implementation,Implementation of AddMerge Layer.,True,3224,https://api.github.com/repos/mlpack/mlpack/pulls/3224,https://github.com/mlpack/mlpack/pull/3224,closed,442,306,10,18,2,36,0,0,[],2022-06-10 04:03:37+00:00,2022-07-02 14:23:16+00:00,1937979.0,"22 days, 10:19:39","[{'comment_id': 894907599, 'comment_body': ""At least for simple reductions like add or product, couldn't you always just pass `input` to the `Backward()` call of each of the reduced layers?"", 'comment_created': datetime.datetime(2022, 6, 10, 21, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 894908015, 'comment_body': ""Why is the `Lambda` part of the name?  I don't get that part."", 'comment_created': datetime.datetime(2022, 6, 10, 21, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 894908194, 'comment_body': ""Hmm, probably you could inherit from `MultiLayer` here instead, and use the functions there that allocate memory for each layer's outputs, etc."", 'comment_created': datetime.datetime(2022, 6, 10, 21, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 894908782, 'comment_body': 'Technically another more memory-efficient way to do this would be to only have one temporary `layerOutput` (since they should all be the same size), and overwrite it in each call to `network[i]->Forward()`, and then add that to `output`.  I think that should work for all reduction types.', 'comment_created': datetime.datetime(2022, 6, 10, 21, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 894909025, 'comment_body': 'You could also avoid implementing this overload if you liked---I think it is only used by `FFN::Forward()`, which specifically calls it on its held `MultiLayer`.', 'comment_created': datetime.datetime(2022, 6, 10, 21, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 894979932, 'comment_body': ""No, I think I need to override the private memory allocation method. That's why I inherited Layer instead of MultiLayer."", 'comment_created': datetime.datetime(2022, 6, 11, 5, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 894980010, 'comment_body': 'That will be true for add or product. But I need to make this generalized to adapt Concat fn too.', 'comment_created': datetime.datetime(2022, 6, 11, 5, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 894980013, 'comment_body': 'Ok.', 'comment_created': datetime.datetime(2022, 6, 11, 5, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 894980063, 'comment_body': 'I think I can remove lambda here as I am not using any lambda fn to specify layers.', 'comment_created': datetime.datetime(2022, 6, 11, 5, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 894980121, 'comment_body': ""Yes, but for concat I can't do that."", 'comment_created': datetime.datetime(2022, 6, 11, 5, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 895031708, 'comment_body': ""I'll open the PR for `Concat` shortly (I hit a few more bugs than I thought I would...) but maybe it is better to keep the two separate.  For `Concat` there is also the functionality that you can concatenate along any axis.  I think the implementation here is limited to the last axis.  Or are you planning on adding axis-specific support here too?\r\n\r\nIn any case, I'll open the PR for `Concat` later today (whether or not it's all debugged :smile: ) and maybe you can take some inspiration from there.  If you want this to do the same functionality `Concat` does that's just fine and we can remove `Concat` and use this instead, I'm not picky. :)"", 'comment_created': datetime.datetime(2022, 6, 11, 14, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 895031759, 'comment_body': ""I thought so too for `Concat` but it turned out to not be fully necessary.  I'll post a link to the relevant bits of the PR that I open later today."", 'comment_created': datetime.datetime(2022, 6, 11, 14, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 895031829, 'comment_body': 'Ah, good point, each individual layer to be concatenated could have different dimensions along the axis of concatenation.', 'comment_created': datetime.datetime(2022, 6, 11, 14, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 897434491, 'comment_body': 'Thanks, nice catch!', 'comment_created': datetime.datetime(2022, 6, 15, 1, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 897434621, 'comment_body': 'Ah, another nice catch!', 'comment_created': datetime.datetime(2022, 6, 15, 1, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 897434819, 'comment_body': 'Are you sure that `Residual` is the right name here?  Not `Reduction`?', 'comment_created': datetime.datetime(2022, 6, 15, 1, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 897435145, 'comment_body': 'Looks like the indentation here is off.', 'comment_created': datetime.datetime(2022, 6, 15, 1, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 897435300, 'comment_body': 'It would be a good idea here to add a comment about the general strategy here: we are passing the input through each of the layers separately, and then reducing the output.', 'comment_created': datetime.datetime(2022, 6, 15, 1, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 897435506, 'comment_body': 'If you\'re hardcoding the add reduction here, perhaps a better name is `AddMerge` (that is the name of another old layer), but I\'m not too picky.  In any case though it does seem like ""residual"" is not the right word, unless this is a residual in some sense I\'m not familiar with.', 'comment_created': datetime.datetime(2022, 6, 15, 1, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 897435667, 'comment_body': 'Looks like the style is off here too.  Opening braces should be on a new line, for instance.', 'comment_created': datetime.datetime(2022, 6, 15, 1, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 897436104, 'comment_body': 'I think this comment needs to be updated.  Also it would be a good idea to be clear about precisely how the output is reduced (i.e. along which axis, etc.) so that a user can reason about what the output dimensions of one of these layers is.', 'comment_created': datetime.datetime(2022, 6, 15, 1, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 897436328, 'comment_body': ""I can't tell in the Github diff view here, but is this a tab character here?  It would be worth going through the PR and making sure it uses two-space indentation with spaces, not tabs, to match the style guide. :+1:"", 'comment_created': datetime.datetime(2022, 6, 15, 1, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 897436667, 'comment_body': ""Ok, I see, so I guess the output is not reduced on a single axis, it's reduced on all axes simultaneously?  So e.g. if I have two layers whose output dimensions are 2x2x2, the output of this layer is also 2x2x2."", 'comment_created': datetime.datetime(2022, 6, 15, 1, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 897437538, 'comment_body': ""It might be clearer to use a network that is simpler to reason about.  For instance, instead of a MeanPooling layer, maybe it makes more sense to have a Linear layer with weights equal to 2, and a Linear layer with weights equal to -1, and then ensure that the output is identical (for forward and backward passes) to a single Linear layer with weights equal to 1, and also ensure that the 'merged' gradient of the two linear layers is also identical to the gradient of the single Linear layer.\r\n\r\nI think a lot of the other tests for layers in the past have not been very comprehensive, so it is not a bad idea to go a bit above and beyond here. :)"", 'comment_created': datetime.datetime(2022, 6, 15, 1, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 897593592, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2022, 6, 15, 6, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 898059122, 'comment_body': 'Can you give me example please?', 'comment_created': datetime.datetime(2022, 6, 15, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 899683065, 'comment_body': ""Sorry for the slow response! I somehow did not see the email notification for this.  What I mean is to use two networks like this:\r\n\r\n```\r\n// A bit tedious, we have to manage the memory ourselves...\r\nResidual r;\r\nr.Add<Linear>(5);\r\nr.Add<Linear>(5);\r\nr.InputDimensions() = std::vector<size_t>({ 5 });\r\nr.ComputeOutputDimensions();\r\narma::mat rParams(r.WeightSize(), 1);\r\nr.SetWeights((double*) rParams.memptr());\r\nr.Network()[0].Parameters().fill(2.0);\r\nr.Network()[1].Parameters().fill(-1.0);\r\n\r\nLinear l(5);\r\nl.InputDimensions() = std::vector<size_t>({ 5 });\r\nl.ComputeOutputDimensions();\r\narma::mat lParams(l.WeightSize(), 1);\r\nl.SetWeights((double*) lParams.memptr());\r\nl.Parameters().fill(1.0);\r\n```\r\n\r\nNow, if I pass data through `r` and `l`, the forward and backward passes should produce the same results.  For the gradient the check is a little more tricky---you'll have to add the gradients from both residual layers together, but they should be equal to the gradient from `l`.\r\n\r\nOr, if you are asking for some other test ideas, here are a few:\r\n\r\n * Make a Residual layer with only one child layer (here you can use a different layer type with random weights), and ensure that the output for forward/backward/gradient is exactly the same as if you have the child layer on its own.\r\n * Make sure that Residual works with batch size greater than one (to do this, just pass an input with multiple columns).\r\n * If you are feeling tricky, make sure that Residual acts as expected when there are no child layers at all.\r\n * If you create a Residual layer with child layers that do not have the same output dimensions, ensure that an exception is thrown.\r\n\r\nThose are just a couple ideas, maybe you can come up with others?  Hopefully I answered your question well, if not, let me know and I can try again. :)"", 'comment_created': datetime.datetime(2022, 6, 17, 1, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 899998287, 'comment_body': ""By seeing this test case, I have a question that is it necessary to provide method `Parameters()` inside layers as I haven't given this in the AddMerge layer?"", 'comment_created': datetime.datetime(2022, 6, 17, 10, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 900166828, 'comment_body': ""The `AddMerge` layer itself has no parameters, so there isn't a need for the `Parameters()` function.  `Parameters()` is defined in the base `Layer` class, but it throws an exception if you try to call it for a layer that hasn't overloaded it."", 'comment_created': datetime.datetime(2022, 6, 17, 14, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 905395966, 'comment_body': '```suggestion\r\n        // Reduce the outputs to single output by adding element-wise.\r\n```\r\nBe sure that your editor is using spaces instead of tabs to conform with the style guidelines for mlpack: https://github.com/mlpack/mlpack/wiki/DesignGuidelines#style-guidelines', 'comment_created': datetime.datetime(2022, 6, 23, 19, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 905396446, 'comment_body': 'It is a really minor optimization, but you could do `output = this->layerOutputs[0]` and then add from there, thus avoiding the `zeros` call.', 'comment_created': datetime.datetime(2022, 6, 23, 19, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 905397863, 'comment_body': ""Actually, I thought about it more---do we even need to initialize forward pass memory?  We could initialize just one result matrix, and have each layer output its forward pass into that matrix, and then add that to the output.  This would reduce the memory footprint of `AddMerge`.  This could also be done for the backwards pass.\r\n\r\nIt's up to you if you want to do anything here, since we are intending this implementation to be somewhat temporary anyway; we'll get it right when we do the DAG network for sure. :)"", 'comment_created': datetime.datetime(2022, 6, 23, 19, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 905398432, 'comment_body': '```suggestion\r\n          << networkSize[1] << "") != (""\r\n          << this->network[i]->OutputDimensions()[0] << "", "" << this->network[i]->OutputDimensions()[1]\r\n          << "")."" << std::endl;\r\n```\r\n\r\nWrapped lines should be indented twice; also, I think the middle line there is over 80 columns.', 'comment_created': datetime.datetime(2022, 6, 23, 19, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 905399313, 'comment_body': '```suggestion\r\n  const std::vector<size_t>& networkSize = this->network[0]->OutputDimensions();\r\n```\r\nYou can avoid a copy of the vector here.', 'comment_created': datetime.datetime(2022, 6, 23, 19, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 905399841, 'comment_body': 'No need for this shortcut---the `for` loop below will simply be skipped if this condition is true, and the resulting execution path will be the same. :)', 'comment_created': datetime.datetime(2022, 6, 23, 19, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 905400332, 'comment_body': 'Can you add some comments indicating what you are meaning to test here?', 'comment_created': datetime.datetime(2022, 6, 23, 19, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': '05cf69c5ee725e7dbde43d3725ff424a15edeae5', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59b487f2213fa9b390ab1ae0c857de67b55a53ad', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cf0a0eb7c566aaee3fe4b0d90e3d14619970268', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdf2912074456773d02c4f6ca082c0fca63f6e4b', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7aad8b81f039b6dc9f431b4a74e429734cd22cb6', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '481dd67a1ebd34e8521b20e690fd1c2c62a7a563', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0832bb75c28a039faebc931b950662d09b5ca9bb', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd24cc652f2a0ce3388c0231f057d5730e5aba67', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee52187afd7ffd8c91df3e2feaefd2c9debb1e1b', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97dbe1a914e33227b40554d3c976fa4e13848232', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07bbc016bb775904d11a2ec7a152e368fc46c4c4', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '865af5d80909940ece81667c5861d73c6d623515', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '588099bb2e2f637a6b489a08fb35cc560cbc36f9', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a03be5bf6a1f58f1ed20407664bafaf832dc36f', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62ae5c6407836ace0648d050635e9d22b2ca4542', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88760022ae3f92c69ef73321819e9c8ed93ffd3b', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d2c9264e2b7192f75430daf3393236fada7cae2', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89cc6ab303575903b82707cb13887e8c77c12d88', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
970566238,Correction in ANN layers,"- Added `Layer<MatType>()` in the constructor wherever it is missing.
- Added copy and move constructor in PaddingType layer.
- Fixed SoftmaxType move constructor.",True,3229,https://api.github.com/repos/mlpack/mlpack/pulls/3229,https://github.com/mlpack/mlpack/pull/3229,closed,83,6,10,2,1,3,0,0,[],2022-06-17 12:26:38+00:00,2022-06-20 17:02:41+00:00,275763.0,"3 days, 4:36:03","[{'comment_id': 900529202, 'comment_body': '```suggestion\r\n  if (this != &other)\r\n  {\r\n    Layer<MatType>::operator=(other);\r\n    padWLeft = other.padWLeft;\r\n    padWRight = other.padWRight;\r\n    padHTop = other.padHTop;\r\n    padHBottom = other.padHBottom;\r\n    totalInMaps = other.totalInMaps;\r\n  }\r\n```\r\nMaybe too much Python? :smile: ', 'comment_created': datetime.datetime(2022, 6, 17, 22, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 900529278, 'comment_body': '```suggestion\r\n  if (this != &other)\r\n  {\r\n    Layer<MatType>::operator=(std::move(other));\r\n    padWLeft = std::move(other.padWLeft);\r\n    padWRight = std::move(other.padWRight);\r\n    padHTop = std::move(other.padHTop);\r\n    padHBottom = std::move(other.padHBottom);\r\n    totalInMaps = std::move(other.totalInMaps);\r\n  }\r\n```', 'comment_created': datetime.datetime(2022, 6, 17, 22, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 900529357, 'comment_body': 'Ahh, nice catch. :+1:', 'comment_created': datetime.datetime(2022, 6, 17, 22, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': 'df591b290f3544bc81a8da42b1681dc2cfecbee0', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34c50e8109764ca2fb5c6dda72b94d503814e52a', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
971759410,Batch Norm Implementation,"Implemented BatchNorm layer using newer ann::vtable approach.

Modified the initialization, which enables custom weight initialization.",True,3231,https://api.github.com/repos/mlpack/mlpack/pulls/3231,https://github.com/mlpack/mlpack/pull/3231,closed,1024,851,12,31,8,82,0,0,[],2022-06-20 05:33:14+00:00,2022-07-29 20:36:53+00:00,3423819.0,"39 days, 15:03:39","[{'comment_id': 901979515, 'comment_body': 'Can you use upper casing for the header guard?', 'comment_created': datetime.datetime(2022, 6, 20, 20, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 901980117, 'comment_body': 'Should be tabbed twice (4 spaces) -- https://github.com/mlpack/mlpack/wiki/DesignGuidelines#line-length-and-wrapping', 'comment_created': datetime.datetime(2022, 6, 20, 20, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 901980408, 'comment_body': 'The indentations is off.', 'comment_created': datetime.datetime(2022, 6, 20, 20, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 901980493, 'comment_body': 'Can you camel casing for all names.', 'comment_created': datetime.datetime(2022, 6, 20, 20, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 901981134, 'comment_body': ""I'm not sure I get the idea behind the custom weights initialization method, can you clarify."", 'comment_created': datetime.datetime(2022, 6, 20, 20, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 902150701, 'comment_body': 'https://github.com/mlpack/mlpack/issues/3228', 'comment_created': datetime.datetime(2022, 6, 21, 4, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 904311451, 'comment_body': ""You don't need these parameters here---you can just call this after `SetWeights` has been called, and then the layer's job will be to initialize its own internally-held weights.  I think that would be a simpler API."", 'comment_created': datetime.datetime(2022, 6, 22, 22, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 904316121, 'comment_body': 'Why do you need these?  Why not just use `this->inputDimensions[0]` and `this->inputDimensions[1]`?', 'comment_created': datetime.datetime(2022, 6, 22, 22, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 904326210, 'comment_body': ""`size` shouldn't be necessary anymore---we can infer that from `this->inputDimensions` in `ComputeOutputDimensions()`.  So we should remove this parameter, and delay any member initialization that depends on it until we know its value in `ComputeOutputDimensions()`."", 'comment_created': datetime.datetime(2022, 6, 22, 22, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 904332022, 'comment_body': 'No need for this, just have an empty implementation, and then you can remove the `customWeights` member too.  So the network will always call `CustomInitialize()` for every layer, just, most of those will be the base implementation (which does nothing).', 'comment_created': datetime.datetime(2022, 6, 22, 22, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 904335143, 'comment_body': ""This is the documentation that a developer (or user writing a custom layer!) will encounter when they try to write their layer.  I don't think it's very clear on what the method should do, when it should be overloaded, why it is needed, etc., etc.; take a look at the documentation for other layers, and I'd appreciate it if you adapted this too.  A library is only as good as its documentation."", 'comment_created': datetime.datetime(2022, 6, 22, 22, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 904336320, 'comment_body': 'Nice catch, this constructor call is necessary here.', 'comment_created': datetime.datetime(2022, 6, 22, 22, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 904336721, 'comment_body': 'This can be much simpler too if you call it after `SetWeights()`.  Then, here, you just need to pass over all child layers and call `CustomInitialize()`.', 'comment_created': datetime.datetime(2022, 6, 22, 22, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 904338449, 'comment_body': ""I don't follow the implementation below.  Why aren't the input dimensions equal to the output dimensions?  I would have imagined that we would learn a mean and variance parameter for every input variable (regardless of dimension), and apply normalization like that. "", 'comment_created': datetime.datetime(2022, 6, 22, 22, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 904504738, 'comment_body': 'Ok.', 'comment_created': datetime.datetime(2022, 6, 23, 4, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 904506763, 'comment_body': 'I have tried to merge BatchNorm2D and BatchNorm1D into a single class. As you can see in `ComputeOutputDimensions()`, I have set the values of these parameters based on the dimension of inputs.', 'comment_created': datetime.datetime(2022, 6, 23, 4, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 904507680, 'comment_body': 'Input dimensions are still equal to the output dimensions. I have just used the method to cache the values of dimensions based on cases.\r\nSee this.\r\nhttps://github.com/mlpack/mlpack/pull/3231#discussion_r904506763', 'comment_created': datetime.datetime(2022, 6, 23, 4, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 905343464, 'comment_body': ""Are the 1D and 2D versions really necessary though anymore?  Would anyone want to apply the same normalization across, say, all rows of an image?\r\n\r\nPersonally I think it's fine to just make batch normalization apply to every element, but if you want to preserve this functionality, I would suggest instead using a `size_t maxAxis` parameter, that defines the maximum axis that we will apply batch normalization to.  So, e.g., if the input is 3-dimensional, but `maxAxis` is `2`, then we will use the same normalization for every axis above `2` (in this case just `3`).  That should also simplify the code quite a bit."", 'comment_created': datetime.datetime(2022, 6, 23, 18, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 916915620, 'comment_body': 'Can you explain it a bit more?\r\n`we will use the same normalization for every axis above 2 (in this case just 3)`\r\nI am confused around here.', 'comment_created': datetime.datetime(2022, 7, 8, 15, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 917230955, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 9, 6, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 917231022, 'comment_body': ""Idk when SetWeights is called. So I haven't done this."", 'comment_created': datetime.datetime(2022, 7, 9, 6, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 917357964, 'comment_body': '```suggestion\r\n  // Override the weight matrix if necessary.\r\n```\r\nThis may not actually do anything, so, it would be good to point that out in the comments. :+1:', 'comment_created': datetime.datetime(2022, 7, 10, 8, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917358285, 'comment_body': ""```suggestion\r\n  //! Locally-stored number of input dimensions that we are applying batch normalization over.  (This is the product of this->inputDimensions from index 0 to (maxAxis - 1)).\r\n```\r\n\r\nI know that line is too long, but I can't reflow it correctly on my phone (sorry about that)."", 'comment_created': datetime.datetime(2022, 7, 10, 8, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917358418, 'comment_body': '```suggestion\r\n  //! Locally-stored number of higher dimension we are not applying batch normalization to.  This is the product of this->inputDimension for all dimensions greater than or equal to maxAxis.\r\n```', 'comment_created': datetime.datetime(2022, 7, 10, 8, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917358566, 'comment_body': 'What about `mean`, `variance`, and other members? Should we copy those too?', 'comment_created': datetime.datetime(2022, 7, 10, 8, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917358601, 'comment_body': 'Looks like maybe tab characters are used here instead of spaces?', 'comment_created': datetime.datetime(2022, 7, 10, 8, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917358904, 'comment_body': '```suggestion\r\n  if (rows != 2 * size)\r\n  {\r\n```\r\nQuick style fix :)', 'comment_created': datetime.datetime(2022, 7, 10, 8, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917359050, 'comment_body': ""I can't do multiline suggestions on a phone (or maybe I just haven't figured out how) but we can probably just remove these two lines, since `output`'s size should already be set right."", 'comment_created': datetime.datetime(2022, 7, 10, 8, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917359079, 'comment_body': '```suggestion\r\n          "" will be set to 0.0 for training. Use a batch-size"" <<\r\n```', 'comment_created': datetime.datetime(2022, 7, 10, 8, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917359156, 'comment_body': ""I don't understand the reference to the convolution layer?  Do you just mean the previous layer?"", 'comment_created': datetime.datetime(2022, 7, 10, 8, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917359361, 'comment_body': ""Hmm, maybe this is a good place to use OpenMP? If you want to do that in some other PR that's ok too. :)"", 'comment_created': datetime.datetime(2022, 7, 10, 8, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917362887, 'comment_body': 'We should document that this will default `maxAxis` to `2` (or effectively `1` or `0` if there are fewer inputndimensions than `3`).', 'comment_created': datetime.datetime(2022, 7, 10, 8, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917363030, 'comment_body': ""So if we set `maxAxis = 2`, won't this mean that we apply batch normalization to the first *three* dimensions?  Correct me if I misunderstood."", 'comment_created': datetime.datetime(2022, 7, 10, 8, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917363435, 'comment_body': 'By reshaping into a cube here, we are basically saying that we will apply the same batch normalization over every slice.  But we actually never use the row/column structure of the matrix.  So in fact it would be equivalent to reshape the input into a *matrix* with number of rows equal to `inputSize * size`, and then apply the same batch normalization over every *column* instead of slice.  As a bonus, this simplifies the code and allows you to merge the `inputSize` and `size` variables.  Let me know if I overlooked something with that suggestion.', 'comment_created': datetime.datetime(2022, 7, 10, 8, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917363643, 'comment_body': 'Is the transpose necessary here?  I am not sure I follow why.', 'comment_created': datetime.datetime(2022, 7, 10, 8, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917633190, 'comment_body': 'Just noticed mean and averageFactor are only used during forward prop.\r\n\r\nNow removed from the object and will be declared inside the Forward method.', 'comment_created': datetime.datetime(2022, 7, 11, 7, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 917637049, 'comment_body': 'Actually, we are using it during the computation of mean and variance.', 'comment_created': datetime.datetime(2022, 7, 11, 7, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 917637697, 'comment_body': 'Mean shape is (1, size). But runningMean shape is (size, 1).', 'comment_created': datetime.datetime(2022, 7, 11, 7, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 917638179, 'comment_body': 'Lets do this in openMP one only.', 'comment_created': datetime.datetime(2022, 7, 11, 7, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 917751031, 'comment_body': ""Do you mean that you'll do it in this PR, or in another one?   (Sorry if I did not understand right)"", 'comment_created': datetime.datetime(2022, 7, 11, 9, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917806740, 'comment_body': 'Another PR', 'comment_created': datetime.datetime(2022, 7, 11, 11, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 922282981, 'comment_body': ""It's ok to keep the members---actually it can be helpful, because forward passes over the same network will not need to reallocate memory. But either way is fine; I don't suspect the difference will be huge."", 'comment_created': datetime.datetime(2022, 7, 15, 15, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 922321907, 'comment_body': ""I think there won't be too much extra overhead. That's why I removed it."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 922519068, 'comment_body': 'What I am saying is that fundamentally, the batch normalization computation does not depend on whether the input is a vector, a 2-d image, or a 3-d cube; any dimension (lower than `maxAxis`) is treated the same.  So even if the code uses `mean` and `variance` and those have a 2-d shape right now, I am saying that we can adapt the code so that we never need these temporary `Cube`s, and it will be cleaner, more maintainable, and easier to understand.\r\n\r\nIf I have missed something, which is always possible, please point me to the equations in the batch normalization paper so I can understand better.', 'comment_created': datetime.datetime(2022, 7, 15, 21, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 922519364, 'comment_body': 'Just to check, is my statement correct here?  I want to make sure I understand correctly, since this makes a difference for the other suggestions I have left about documentation.', 'comment_created': datetime.datetime(2022, 7, 15, 21, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 922523507, 'comment_body': '```suggestion\r\n  /**\r\n   * Create the BatchNorm object.  This sets the maximum axis for batch\r\n   * normalization to 2; so, e.g., we apply batch normalization to the first 2\r\n   * dimensions, and higher dimensions are left untouched.  As an example, \r\n   * if we have a 3-dimensional input (call the three dimensions rows, columns,\r\n   * and slices), and `maxAxis` is 2, then we apply the same normalization\r\n   * across different slices.\r\n   */\r\n```\r\nI think we can do much better with this comment; I had a hard time writing it, but I want to make sure that a user can actually clearly understand what `maxAxis` does, without digging into the code.', 'comment_created': datetime.datetime(2022, 7, 15, 21, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 922525865, 'comment_body': '```suggestion\r\n   * Create the BatchNorm layer object for a specified number of input units.\r\n   * The `maxAxis` parameter sets the maximum axis to apply batch\r\n   * normalization to; dimensions higher than this dimension are left\r\n   * untouched.  As an example, if we have a 3-dimensional input (call the\r\n   * three dimensions rows, columns, and slices), and `maxAxis` is 2, then we\r\n   * apply the same normalization across different slices.\r\n```\r\nI adapted the comment above for here too.', 'comment_created': datetime.datetime(2022, 7, 15, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 922526644, 'comment_body': 'Yep, sounds good to me. :+1:', 'comment_created': datetime.datetime(2022, 7, 15, 21, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924905208, 'comment_body': '```suggestion\r\n   * channels.  With batch normalization, the same exact normalization is\r\n   * applied to every element in an individual channel.  To control what axes\r\n   * normalization is applied to, set the `minAxis` and `maxAxis` parameters.\r\n```', 'comment_created': datetime.datetime(2022, 7, 19, 19, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924910426, 'comment_body': 'There is a slight disadvantage to this approach: a user could specify `5` for `minAxis` (so it is not the default), then pass an input with only 3 dimensions.  So in this case the user has done something wrong, and we should issue an error, but here we will silently accept the input, and just take the 3rd dimension as the channel axis.  One way to fix this could be to use `size_t(-1)` for the ""automatic"" `minAxis` and `maxAxis` in the empty constructor.  In fact, you could simply overwrite `minAxis` and `maxAxis` with their \'automatic\' values here, if `size_t(-1)` was passed in.', 'comment_created': datetime.datetime(2022, 7, 19, 20, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924915154, 'comment_body': '```suggestion\r\n   *\r\n   * With batch normalization, the same exact normalization is applied to every\r\n   * element in an individual channel.  To control what axes normalization is\r\n   * applied to, set the `minAxis` and `maxAxis` parameters.\r\n   *\r\n   * The last axis of the input data will be chosen as channels.  So, if the\r\n   * input is 3-dimensional or higher, this constructor will set the minimum\r\n   * and maximum axes to 2; this will take only the 3rd axis of the input as\r\n   * channels. If the input is 1-dimensional, then the minimum and maximum axis\r\n   * will be 0, and thus every element of the input will have a different\r\n   * normalization applied to it.\r\n   *\r\n   * As an example, if we have a 3-dimensional input (call the \r\n   * three dimensions rows, columns and slices), and `minAxis` & `maxAxis` is \r\n   * 2, then we apply the same normalization across different slices.\r\n```\r\nI tried to make this match the wording of the other constructor a little better (so it talks about channels now).  Hopefully this helps. :+1:', 'comment_created': datetime.datetime(2022, 7, 19, 20, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924915545, 'comment_body': '```suggestion\r\n      MatType& W,\r\n      const size_t rows, \r\n      const size_t /* cols */);\r\n```\r\nJust a little style fix. :+1:', 'comment_created': datetime.datetime(2022, 7, 19, 20, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924915831, 'comment_body': '```suggestion\r\n  //! from index 0 to (minAxis - 1)).\r\n```\r\nI think this is `minAxis` now?', 'comment_created': datetime.datetime(2022, 7, 19, 20, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924916160, 'comment_body': '```suggestion\r\n  //! Locally-stored number of input units.  (This is the product of all\r\n  //! dimensions between minAxis and maxAxis, inclusive.)\r\n```', 'comment_created': datetime.datetime(2022, 7, 19, 20, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924916498, 'comment_body': 'Should this just be ""greater than""?  I think so, if I understand right.', 'comment_created': datetime.datetime(2022, 7, 19, 20, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924916589, 'comment_body': '```suggestion\r\n  //! batch normalization to.  This is the product of this->inputDimensions\r\n```\r\nTiny fix :)', 'comment_created': datetime.datetime(2022, 7, 19, 20, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924917191, 'comment_body': 'Now that minAxis and maxAxis are both parameters, I think we can call this fixed.  Thanks for the hard work with the fix. :+1:', 'comment_created': datetime.datetime(2022, 7, 19, 20, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924917953, 'comment_body': ""I am not 100% sure, but could you use `outputTemp.each_col()` here, and then avoid the `repmat` call?  I *think* that's right, but if it's not, ignore my comment. :)"", 'comment_created': datetime.datetime(2022, 7, 19, 20, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924918940, 'comment_body': '```suggestion\r\n\r\n  size = this->inputDimensions[mainMinAxis];\r\n  for (size_t i = mainMinAxis + 1; i <= mainMaxAxis; i++)\r\n    size *= this->inputDimensions[i];\r\n\r\n```\r\nI think a little space here can help the readability (and feel free to add a comment too), but up to you if you want to take the suggestion. :+1:', 'comment_created': datetime.datetime(2022, 7, 19, 20, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924919449, 'comment_body': ""```suggestion\r\n      validOutputDimensions(false),\r\n      training(false)\r\n```\r\nWe should indent doubly for a wrapped line, but I think actually maybe this change isn't needed since we didn't add any parameters.  Up to you what you want to do. :+1:"", 'comment_created': datetime.datetime(2022, 7, 19, 20, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924919621, 'comment_body': '```suggestion\r\n      MatType& /* W */,\r\n      const size_t /* rows */, \r\n      const size_t /* cols */)\r\n```', 'comment_created': datetime.datetime(2022, 7, 19, 20, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924919802, 'comment_body': '```suggestion\r\n      MatType& W,\r\n      const size_t rows, \r\n      const size_t /* cols */);\r\n```', 'comment_created': datetime.datetime(2022, 7, 19, 20, 17, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924922621, 'comment_body': ""I think we could actually make the API simpler and remove all the parameters here if we reworked the `FFN` class a little bit to call `CustomInitialize` *after* `SetLayerMemory` is called.  Then, each layer can simply use its own internal memory (an alias of `parameters`).  It's up to you if you want to make that change, but at the very least I think it would be a good thing to remove the unused `cols` parameter, and rename the `rows` parameter to `elements` (or something), since it simply represents the number of elements that the layer holds.  In fact, since `MultiLayer` uses aliases, you could even remove the `elements`/`rows` parameters, since it is implicit in the matrix parameter anyway."", 'comment_created': datetime.datetime(2022, 7, 19, 20, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 924924647, 'comment_body': 'Do you think we can uncomment this test?  Or is something wrong with it?', 'comment_created': datetime.datetime(2022, 7, 19, 20, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 925166977, 'comment_body': 'I think I will put Warn here so users can know about it.', 'comment_created': datetime.datetime(2022, 7, 20, 4, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 925167327, 'comment_body': ""And size_t don't accept -ve values :)"", 'comment_created': datetime.datetime(2022, 7, 20, 4, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 925178149, 'comment_body': 'No, we cannot cause they changed the size here. And BatchNorm will not work here.', 'comment_created': datetime.datetime(2022, 7, 20, 5, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 925314398, 'comment_body': ""`size_t(-1)` will just give you `SIZE_MAX`, which is just fine. It's used all over the codebase, so that would be fine here too."", 'comment_created': datetime.datetime(2022, 7, 20, 8, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 925315033, 'comment_body': '(In any case a warning is fine if you prefer that.)', 'comment_created': datetime.datetime(2022, 7, 20, 8, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 925315356, 'comment_body': 'Okay, should we remove the test then?', 'comment_created': datetime.datetime(2022, 7, 20, 8, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 925408946, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2022, 7, 20, 9, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 925617983, 'comment_body': ""Shouldn't be `each_row()` instead?"", 'comment_created': datetime.datetime(2022, 7, 20, 13, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 925621695, 'comment_body': 'And can it be applied on Cube?', 'comment_created': datetime.datetime(2022, 7, 20, 13, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 927319602, 'comment_body': ""Ahh, it looks like we cannot do `each_col()` here; `Cube` does not support it.  I think it should be `each_col()` since we want to apply the same normalization to each row element.  But in any case it doesn't matter because we can't do it :)"", 'comment_created': datetime.datetime(2022, 7, 22, 6, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 927325087, 'comment_body': ""This line shouldn't be necessary, but I doubt it is the source of the bug."", 'comment_created': datetime.datetime(2022, 7, 22, 6, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 927326051, 'comment_body': ""Do you need to multiply by `higherDimension` here? This seems to be a bug, but I don't think this is why the test is failing."", 'comment_created': datetime.datetime(2022, 7, 22, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 927334094, 'comment_body': 'This line happens implicitly in the `=` below, but also this is not the source of any bug. :)', 'comment_created': datetime.datetime(2022, 7, 22, 6, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 927343738, 'comment_body': ""Did a negative sign get dropped here? Shouldn't it be `-2` not `2`? (according to the paper) "", 'comment_created': datetime.datetime(2022, 7, 22, 6, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 927352219, 'comment_body': 'Yeah, I am confused by steps 3 and 4 here. I suspect this may be where the bug is. I would have expected us to compute `dl/dmu` in step 3, then `dl/dx` in step 4, just like in the paper.  But instead step 3 kind of looks like the equation for `dl/dx`, and step 4 looks like half the equation for `dl/dmu`.  It seems like this line uses `(inputMean.each_slice() % vars * 2)) / (batchSize * higherDimension)` for `dl/dmu`, but as far as I can tell that is not correct.  Maybe it makes sense to just try and rewrite these two steps according directly to the paper?', 'comment_created': datetime.datetime(2022, 7, 22, 7, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 927353612, 'comment_body': ""You could inline this into one line, but I don't see any correctness issue here (or in step 6). :+1:"", 'comment_created': datetime.datetime(2022, 7, 22, 7, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 929270174, 'comment_body': 'These lines are too long, do you mind wrapping them to 80 columns before merge?', 'comment_created': datetime.datetime(2022, 7, 25, 20, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 929270486, 'comment_body': ""```suggestion\r\n```\r\nWe can probably remove this debugging output, if you're happy with how things are now."", 'comment_created': datetime.datetime(2022, 7, 25, 20, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': '6778c577088bbd2f862d297ccc1f4f81097fa60e', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a176bf5ac72cf533189d3121a96dddfa9f0ff6fd', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35de553841daca90e2d6c8e7ddb042740594117b', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3bc40e77514fcb49d72542d4a87f41f920a2880', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3634b67209b58c417b244715123f11d86f423825', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33d344514907ae5f86f78aba1572f7fd8c82653d', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba40cf9bf53d2920dc1ae61fa51a73e751c500d0', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b51de1b0ec324e2d8977bf401a3d80068b769ba8', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3e4710e632a24873ddad42ad8229af24091131b', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd16c16d5180dad7d27db8b96c3f831d93a1955ba', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57c46415cf891506842048fa0c276a5cb72c3587', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3412a7955ce676eb42d43bff2ded8cfafc3ed82', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fc69bb38e36a09cf6405421fd22669e9a789d07', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c6b3b3439e44505f9a3b02c02df21c9d2e1fd07', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0860c6eb75beb40ef1f5a21ecae9772cf2c995e', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdd5e4dd6db2f2cb9f8b96a42f516310b4c43315', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a19a17f4d15165a2317aa20e6e7a2db812076af4', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1ea0b9384aa56c95489a39d852111c0c440cb03', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e2fd53034834934c97234a22c0a70ba222f82bd', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12700d8361d05a39a518cb095cd26a81e1f991c1', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adb04433924d136c05c8dc8320a89909669fa2e5', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74cd732ee1bbadd98070a7b28dd53beec600a066', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f757f0e3c9aaa0f98d6d93666b54361e2dfbc795', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '529036dcda4f318eba93cd9cc47114e3a7b7e2f0', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3e95744ec7144e768ec89864f909adeedb291df', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04ac23fbc9846da54c37718248b3b83ccb59264', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb84d99d7be05a71a04d6bf97142b6a989cbea9e', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '604ddad0607327cafb3721b1669469f6048e9994', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9960f6589a58ab4304f0ba65949f81094693e718', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '432f8dd9d3507d5a238184e5b934c6f2966df098', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d1dd81c299befefeaff15edfb53be7a41d7f3e6', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
973684755,FFN Hotfix,"Removed extra call to SetNetworkMode, which is unintentionally setting the training variable to false. Thus, making it to testing mode by mistake.",True,3232,https://api.github.com/repos/mlpack/mlpack/pulls/3232,https://github.com/mlpack/mlpack/pull/3232,closed,0,3,1,1,0,0,2,0,"[{'name': 'c: methods'}, {'name': 't: bugfix'}]",2022-06-21 14:52:37+00:00,2022-06-21 20:36:50+00:00,20653.0,5:44:13,[],"[{'commit_sha': 'a0212869699748a9078033576828dd10683b0c0e', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
979282284,Adaptive Pooling Hotfix,"Fixed serialization issue. This issue first appeared when trying the serialization test on SqueezeNet.
Gives `[FATAL] Given output shape (94556213170576, 94556213170192) is not possible for given input shape (13, 13).`

On gdb
```cpp
$1 = {<mlpack::ann::Layer<arma::Mat<double> >> = {_vptr.Layer = 0x55ff936de0e8 <vtable for mlpack::ann::AdaptiveMeanPoolingType<arma::Mat<double> >+16>,
    inputDimensions = std::vector of length 3, capacity 3 = {13, 13, 5}, outputDimensions = std::vector of length 3, capacity 3 = {94556213170576, 94556213170192, 5},
    validOutputDimensions = false, training = false}, poolingLayer = {<mlpack::ann::Layer<arma::Mat<double> >> = {
      _vptr.Layer = 0x55ff936de190 <vtable for mlpack::ann::MeanPoolingType<arma::Mat<double> >+16>, inputDimensions = std::vector of length 3, capacity 3 = {13, 13, 5},
      outputDimensions = std::vector of length 3, capacity 3 = {1, 1, 5}, validOutputDimensions = false, training = false}, kernelWidth = 13, kernelHeight = 13,
    strideWidth = 13, strideHeight = 13, floor = true, channels = 5}, outputWidth = 94556213170576, outputHeight = 94556213170192}
```
",True,3234,https://api.github.com/repos/mlpack/mlpack/pulls/3234,https://github.com/mlpack/mlpack/pull/3234,closed,4,0,2,2,0,0,0,0,[],2022-06-26 11:57:34+00:00,2022-06-27 22:13:39+00:00,123365.0,"1 day, 10:16:05",[],"[{'commit_sha': '5fd7fc35958ec9b710daac65f05baf79ed3e2aaf', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a09b3612fa89dd6cb69e90bbbcf5016a8df991ac', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
981434764,Convolution Hotfix,Correction to weight slice access,True,3236,https://api.github.com/repos/mlpack/mlpack/pulls/3236,https://github.com/mlpack/mlpack/pull/3236,closed,7,7,2,5,6,0,0,0,[],2022-06-28 13:44:11+00:00,2022-07-03 17:29:56+00:00,445545.0,"5 days, 3:45:45",[],"[{'commit_sha': '4959e7c5edb3871f9c881c977cf8e40a4d7f05d1', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e7bddf8cefbf121b7ee4e7fff5a390624e30773', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3ade109fc9e308a3249847f80f82cde054b856c', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd160c0e9cdc7ef6295801a1bd43696940564b1d', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11be05258a763987cd3f5b5a56f7915a141c6908', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
985914122,Parallelize ANN with OpenMP,"Prev PR: https://github.com/mlpack/mlpack/pull/2341
Used OpenMP to parallelize Convolution and Pooling layers.",True,3240,https://api.github.com/repos/mlpack/mlpack/pulls/3240,https://github.com/mlpack/mlpack/pull/3240,closed,515,282,20,18,7,21,0,0,[],2022-07-04 02:32:18+00:00,2022-09-04 15:26:24+00:00,5403246.0,"62 days, 12:54:06","[{'comment_id': 914173554, 'comment_body': 'Can you add a parameter description for `appending`?', 'comment_created': datetime.datetime(2022, 7, 5, 20, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 915289823, 'comment_body': 'Maybe we can push this into `UnpoolingOperation()`?', 'comment_created': datetime.datetime(2022, 7, 6, 22, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 918536043, 'comment_body': ""I think let's not do that as I have to always determine the size which has been already done in this."", 'comment_created': datetime.datetime(2022, 7, 12, 4, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 918590637, 'comment_body': 'I think it is giving some issues.', 'comment_created': datetime.datetime(2022, 7, 12, 6, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 918591160, 'comment_body': ""Let me leave it as it is for now.\r\nAs it's not worth it to change."", 'comment_created': datetime.datetime(2022, 7, 12, 6, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 918744076, 'comment_body': 'What are the issues that it is giving?  I think it is worth the time to debug.', 'comment_created': datetime.datetime(2022, 7, 12, 9, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 918773946, 'comment_body': 'https://github.com/mlpack/mlpack/pull/3240/commits/1bf89fc9653e518a4d924e886c1151cc040b26ba', 'comment_created': datetime.datetime(2022, 7, 12, 9, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 918800868, 'comment_body': 'Yes, I see that is the code you wrote, but what is the error it gives and what have you tried to debug it?', 'comment_created': datetime.datetime(2022, 7, 12, 10, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 918806506, 'comment_body': '-------------------------------------------------------------------------------\r\nAdaptiveMaxPoolingTestCase\r\n-------------------------------------------------------------------------------\r\n/home/runner/work/mlpack/mlpack/src/mlpack/tests/ann_layer_test.cpp:5208\r\n...............................................................................\r\n/home/runner/work/mlpack/mlpack/src/mlpack/tests/ann_layer_test.cpp:5239: FAILED:\r\n  REQUIRE( arma::accu(delta) == 28.0 )\r\nwith expansion:\r\n  0.0 == 28.0', 'comment_created': datetime.datetime(2022, 7, 12, 10, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 918809027, 'comment_body': ""I don't have any explanation for this as acc. to this code, nothing should have been changed in logic.\r\n\r\nMp its issue for private vs public variable in openMP."", 'comment_created': datetime.datetime(2022, 7, 12, 10, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 918809672, 'comment_body': ""I haven't debugged it cause it will take some time."", 'comment_created': datetime.datetime(2022, 7, 12, 10, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 949141047, 'comment_body': 'Do you think we can just remove the `appending` parameter and always assume that it is true?  We cpuld update the documentation to note that the convolution is *added* to the output matrix always.  I think nearly everywhere we are using `appending = true` now anyway, and if not, we can just call `.zeros()` first.', 'comment_created': datetime.datetime(2022, 8, 18, 13, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 949145870, 'comment_body': 'I would suggest making `dilatedMappedError` an alias here, instead of copying.', 'comment_created': datetime.datetime(2022, 8, 18, 13, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 949146485, 'comment_body': 'Maybe it is better to make this a standalone function?', 'comment_created': datetime.datetime(2022, 8, 18, 13, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 949147621, 'comment_body': 'It seems like this comment is no longer accurate?', 'comment_created': datetime.datetime(2022, 8, 18, 13, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 949148375, 'comment_body': 'Okay, so I guess the bug was that I was inserting zeros for dilation *after* convolution, but it should instead be *before* convolution.  Correct me if I misunderstood. :+1:', 'comment_created': datetime.datetime(2022, 8, 18, 13, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 949150589, 'comment_body': ""It's possible that an extra optimization could be to use `gTemp` directly when `usingPadding` is false, but we can leave that for later."", 'comment_created': datetime.datetime(2022, 8, 18, 13, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 949151079, 'comment_body': ""Ok, let's not worry about it then."", 'comment_created': datetime.datetime(2022, 8, 18, 13, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 949152724, 'comment_body': 'Maybe we can make that an auxiliary function somewhere else?  I am a big fan of removing the `appending` parameter to simplify the function.', 'comment_created': datetime.datetime(2022, 8, 18, 13, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 949154082, 'comment_body': 'Oops, I just realized there is an open thread for this already.  Sorry about that...', 'comment_created': datetime.datetime(2022, 8, 18, 13, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 959071517, 'comment_body': 'These lines are too long, can you wrap them to 80 characters please?', 'comment_created': datetime.datetime(2022, 8, 31, 1, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': 'c31affa7082b477dc79aa25ceb4788dff701831c', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70a877273fa2241a4fd7c3f16449fb539d2d8cc1', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bf89fc9653e518a4d924e886c1151cc040b26ba', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '632fbe6060606ac0a28a6c323d199942bb1a880e', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '715d8509925f0f7e4c9e206dc5ff6dd04ffd8123', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '750438aaf91f13b2df315fc6aaa0e6366132b4d1', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '229fa6ece3ab367a8c1024c2fce7905c117f0de5', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f98e5dacee071dedb20a956c149a8ab953f8aac', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ac594e495281a3f4b690349551d81b71793009e', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83f718c23897946066c7c3d339151a7eec97b8a8', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea7fcdb2cdb7d68412316f4474b93992c54ff56a', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d6c08253b2278a24780d6c8c422183090fdee2f', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2173817a738b4fc8695df26414ed9d752578c668', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36da227d2640e915e8fc92cd4ea0bb13ff1927cf', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e77d9e298ca0b050f283d6b87a4fffa45a9a09d6', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2940a69f9126175fcc65eb5b91ea6c05a6151ef', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68fd7128e9e7a78ed15ff5ca976cf7aec3b27c3d', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e42fc0a513dad793076a9be75cb4022de4056579', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
992234946,Identity Layer implementation,Implemented Identity Layer,True,3242,https://api.github.com/repos/mlpack/mlpack/pulls/3242,https://github.com/mlpack/mlpack/pull/3242,closed,227,0,6,4,4,5,0,0,[],2022-07-09 12:53:51+00:00,2022-07-22 06:02:22+00:00,1098511.0,"12 days, 17:08:31","[{'comment_id': 917282280, 'comment_body': ""It would be nice to add a little bit of documentation on where or why you would use this.  If you want, I can propose some documentation, but I don't remember exactly what the use case is. :smile: \r\n\r\nAlso, it may also be nice to point out that this is *not* required before an LSTM or other recurrent layer (it used to be).  @zoq what do you think?  Do you think that's worth it to add, or do you think it's not necessary?  I'm on the fence about it, I don't have a strong opinion."", 'comment_created': datetime.datetime(2022, 7, 9, 15, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917618913, 'comment_body': '?', 'comment_created': datetime.datetime(2022, 7, 11, 7, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 917622317, 'comment_body': ""I don't understand what the question is?"", 'comment_created': datetime.datetime(2022, 7, 11, 7, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 917666338, 'comment_body': 'What should I do here?', 'comment_created': datetime.datetime(2022, 7, 11, 8, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 917742788, 'comment_body': ""You should add documentation on why you would use this layer, at the very least.  For the comment about the LSTM, let's see what @zoq thinks, and if we do not include any documentation about that, I think it's ok. :+1:"", 'comment_created': datetime.datetime(2022, 7, 11, 9, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': 'fa43d9f951a5c9188a47d6865f3218439bd731d8', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12c8d2da8b82001f48aa26d218709dd488d96617', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6af0edc8c64922f95fce54058b746cd52b4a79a', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbf6edfe85259a3a248b27e01a1e52e32c8100b6', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
993826082,Bias Boolean in Convolution layer,Added boolean to disable bias addition in Convolution layer.,True,3244,https://api.github.com/repos/mlpack/mlpack/pulls/3244,https://github.com/mlpack/mlpack/pull/3244,closed,76,12,3,3,3,1,0,0,[],2022-07-12 04:45:34+00:00,2022-07-23 18:14:38+00:00,998944.0,"11 days, 13:29:04","[{'comment_id': 927355237, 'comment_body': 'It could also be useful to check that the size of the bias is 0 (i.e. `layer.Bias().n_elem == 0`).', 'comment_created': datetime.datetime(2022, 7, 22, 7, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': '060733244f7bf7a127fd76025da214f60898d0ac', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fad482c85f1edcfa731447c2de5ae43dc8887532', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '995431d7f7311e4f1ec85cd7886997aaa90151f5', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
1005229355,Grouped Convolution,Implements grouped convolution with ann-vtable code as a separate layer.,True,3247,https://api.github.com/repos/mlpack/mlpack/pulls/3247,https://github.com/mlpack/mlpack/pull/3247,closed,1382,0,8,18,4,25,0,0,[],2022-07-22 06:18:52+00:00,2022-08-12 00:51:27+00:00,1794755.0,"20 days, 18:32:35","[{'comment_id': 933973230, 'comment_body': 'I think it would be okay to simply reference the `Convolution` documentation, and then have the discussion in this documentation focus on the difference between `Convolution` and `GroupedConvolution`.', 'comment_created': datetime.datetime(2022, 7, 31, 11, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 933973258, 'comment_body': 'Thanks, this is a nice description.  Do you maybe have a link to a reference for this, a paper or something?  That could also be useful.', 'comment_created': datetime.datetime(2022, 7, 31, 11, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 933973284, 'comment_body': '```suggestion\r\n * The `groups` parameter controls the connections between inputs and outputs. \r\n```\r\nMaybe this is clearer?', 'comment_created': datetime.datetime(2022, 7, 31, 11, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 933975074, 'comment_body': '```suggestion\r\n  //! Locally-stored number of groups of maps.\r\n```', 'comment_created': datetime.datetime(2022, 7, 31, 11, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 933975136, 'comment_body': '```suggestion\r\n  //! Locally-stored variable to indicate whether biases should be added.\r\n```', 'comment_created': datetime.datetime(2022, 7, 31, 11, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 933976027, 'comment_body': ""What happens if `inMaps` is not divisible by `groups`?  e.g., if `groups` is `3` but `inMaps` is `7`, then we get `inGroupSize` as `2` (since integer division will effectively floor any result), and the seventh input mapping that the user asked for gets ignored.  Should we instead take the ceiling of the integer division, and then have the last group potentially be smaller than the first groups?  In my view that would be how I would expect this layer to behave, but I'm open to other possibilities too, so long as it is consistent behavior. :+1:"", 'comment_created': datetime.datetime(2022, 7, 31, 12, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 933976710, 'comment_body': ""It'll be a little tedious, but when I merge #3194, the thing to do will be to make a new file `src/mlpack/tests/ann/layer/grouped_convolution.cpp`, add the tests there, then add that file to `src/mlpack/tests/ann/layer.cpp`.  Sorry for the inconvenience with that merge..."", 'comment_created': datetime.datetime(2022, 7, 31, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 933977397, 'comment_body': ""I think this one only uses one group?  It would be worth adding that as a comment here---since C++ doesn't have keyword arguments (yet?), it can be a little tricky to tell these things just from the code."", 'comment_created': datetime.datetime(2022, 7, 31, 12, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 933977439, 'comment_body': 'Another option here, if this really is just one group, would be to test that regular `Convolution<>` gets the same result.', 'comment_created': datetime.datetime(2022, 7, 31, 12, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 933977490, 'comment_body': 'It could be worth running this test for a few groups.', 'comment_created': datetime.datetime(2022, 7, 31, 12, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 933977695, 'comment_body': 'One other worthwhile test to run would be from the documentation you provided: when there are `n` groups, this is equivalent to `n` convolution layers that see `1/n`th of the input channels, then are concatenated to make the output.  It would be straightforward to construct a test that tried this, and I think it would be worthwhile. :+1:', 'comment_created': datetime.datetime(2022, 7, 31, 12, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 933990114, 'comment_body': 'https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html', 'comment_created': datetime.datetime(2022, 7, 31, 13, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 933990265, 'comment_body': 'Nope. It uses 2 groups.', 'comment_created': datetime.datetime(2022, 7, 31, 13, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 933990290, 'comment_body': 'Nope. It uses 2 groups.', 'comment_created': datetime.datetime(2022, 7, 31, 13, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 933991120, 'comment_body': 'You can see `ComputeOutputDimensions()`. It will throw an error there.', 'comment_created': datetime.datetime(2022, 7, 31, 13, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 933992359, 'comment_body': 'This test will go to the Convolution layer test only. Other test will move to GroupedConvolution tests.', 'comment_created': datetime.datetime(2022, 7, 31, 14, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shubham1206agra', 'type': 'User'}, {'comment_id': 935188456, 'comment_body': ""I don't think linking to the PyTorch documentation for something that's not specifically a grouped convolution is a great idea.  There are differences between PyTorch and mlpack, and because of that it's not a great idea to make users believe that mlpack is a reimplementation of PyTorch.  Also, the idea of referencing a paper is to get the mathematical idea of what we are implementing across.  For instance, I think that [this paper](https://openaccess.thecvf.com/content_cvpr_2018/papers/Huang_CondenseNet_An_Efficient_CVPR_2018_paper.pdf) has a nice description of grouped convolutions, in Section 2.3 and Figure 2.  Maybe you can add a reference to this paper to the documentation, in BibTeX format like we do with the rest of the algorithms?  Or another paper is fine too if you can find a better one.  (The original AlexNet paper doesn't specifically describe the technique, even if it was the first to use grouped convolutions.)"", 'comment_created': datetime.datetime(2022, 8, 2, 7, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 935189525, 'comment_body': 'Consider printing the incorrect values here:\r\n\r\n```\r\nLog::Fatal << ""The number of input maps ("" << inMaps << "") must be divisible by the number of groups ("" << groups << "")!"" << std::endl;\r\n```\r\n\r\nThat can help the user understand exactly what is wrong so they can quickly fix their program.', 'comment_created': datetime.datetime(2022, 8, 2, 7, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 935189690, 'comment_body': 'Ahh, thank you for pointing that out.', 'comment_created': datetime.datetime(2022, 8, 2, 7, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 935191049, 'comment_body': 'Thanks for adding the clarifying comment here.  I still think it would be useful to add a test ensuring that `GroupedConvolution` with `groups = 1` is equivalent to `Convolution`, and perhaps another test for a larger value of `groups` (perhaps a handful of values for `groups`, up to you).', 'comment_created': datetime.datetime(2022, 8, 2, 7, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 941941186, 'comment_body': '```suggestion\r\n```\r\nThis line seems superfluous. :+1:', 'comment_created': datetime.datetime(2022, 8, 10, 2, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 941941273, 'comment_body': 'Can you fix the indentation here (and other places)?', 'comment_created': datetime.datetime(2022, 8, 10, 2, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 941941812, 'comment_body': '```suggestion\r\n  if (useBias)\r\n```\r\nOops, accidental extra indentation.', 'comment_created': datetime.datetime(2022, 8, 10, 2, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 941942232, 'comment_body': '```suggestion\r\n    Log::Fatal << ""GroupedConvolution::ComputeOutputDimensions(): groups must ""\r\n        << ""be greater than 0."" << std::endl;\r\n```\r\nIt\'s probably good to prepend the name of the class to the error message, since a user may not actually get a backtrace of any sort.', 'comment_created': datetime.datetime(2022, 8, 10, 2, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 941942547, 'comment_body': '```suggestion\r\n    Log::Fatal << ""GroupedConvolution::ComputeOutputDimensions(): both input ""\r\n        << ""maps ("" << inMaps << "") and output maps ("" << maps << "") should be ""\r\n        << ""divisible by groups ("" << groups << "")!"" << std::endl;\r\n```\r\n(same here)', 'comment_created': datetime.datetime(2022, 8, 10, 2, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': '62705a044b7a9504e460619e044d5c666cd32a41', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '836f732e05318a7424faa8fab02a42982aa5b56c', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75eeb709a5de9dbae174299e3b823084cda1f6f3', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd668f99d40250395dd53aaef4542e2906d7cb1ef', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7af05ab086708a19c1db539b0413a608e28b8eca', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aa0fd9f0e37b5bfc68c868034d637837c2ae79c', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06c4728ff377fcc1411a08e448ba0c5b91c46e87', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f7b7edde68a79ea27e26379a00e593d439e9c4', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65bf5f7e9915098fbcd7359a7fc59ab5732a7100', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '758b63497d2e538e98683c92eac8c5cbd08e42b8', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9775f55b2335f184b89c7513f4ff851f84103f5', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66488952366b44e3545b77353307bb20d4b6703d', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d3a189714de0f7d5947a680c8382a2dbb49e5a2', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c14b1146ad8f73985d437652271469c486007215', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3190ec0be23bb5d3a3dd692f11fffdc9de00d8f8', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f6cb602a3009fd6cf44f12ae43b6de40f9c95eb', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f5bfc9eebd6a5a8210293bcdc48d63512abed3', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50dcde0b8613de9b39939ce6732f8fa05ce4283a', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
1024538896,Serialization Hotfix,"Forgot to serialize `useBias` and `paddingType`, which is setting `useBias` to false, causing unexpected problems while using serialized models.",True,3252,https://api.github.com/repos/mlpack/mlpack/pulls/3252,https://github.com/mlpack/mlpack/pull/3252,closed,3,0,2,1,0,0,1,0,[{'name': 't: bugfix'}],2022-08-12 04:40:02+00:00,2022-08-12 16:43:09+00:00,43387.0,12:03:07,[],"[{'commit_sha': '296a5bc2d0fa32397ad51fed4c2c1a1c1c0e146c', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0
1027168511,Make Install BugFix,Corrects copying of `core` and `methods` folder.,True,3257,https://api.github.com/repos/mlpack/mlpack/pulls/3257,https://github.com/mlpack/mlpack/pull/3257,closed,2,2,1,1,0,0,1,0,[{'name': 'c: build system'}],2022-08-16 05:31:25+00:00,2022-08-17 12:19:31+00:00,110886.0,"1 day, 6:48:06",[],"[{'commit_sha': '52088e23bb51ed2566fac0361a1a4510563faa14', 'committer_username': 'shubham1206agra', 'committer_name': 'Shubham Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 2, 5, 23, 7, tzinfo=datetime.timezone.utc)}]",Shubham Agrawal,58412969,,User,,21,,0,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
248572894,models,mlpack/models,C++,41,35,24,25,456,17,1,12,"[{'id': 1038885400, 'number': 80, 'closed': datetime.datetime(2022, 8, 31, 12, 30, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 28, 14, 1, 19, tzinfo=datetime.timezone.utc), 'time_taken': 253760.0, 'time_delta': '2 days, 22:29:20', 'additions': 871, 'deletions': 240, 'state': 'closed'}, {'id': 1006855564, 'number': 79, 'closed': datetime.datetime(2022, 9, 11, 13, 40, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 6, 11, 49, tzinfo=datetime.timezone.utc), 'time_taken': 4174108.0, 'time_delta': '48 days, 7:28:28', 'additions': 560, 'deletions': 0, 'state': 'closed'}, {'id': 1006843427, 'number': 78, 'closed': datetime.datetime(2022, 9, 8, 16, 10, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 5, 54, 12, tzinfo=datetime.timezone.utc), 'time_taken': 3924955.0, 'time_delta': '45 days, 10:15:55', 'additions': 806, 'deletions': 0, 'state': 'closed'}, {'id': 1006842535, 'number': 77, 'closed': datetime.datetime(2022, 9, 9, 19, 14, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 5, 52, 38, tzinfo=datetime.timezone.utc), 'time_taken': 4022529.0, 'time_delta': '46 days, 13:22:09', 'additions': 535, 'deletions': 0, 'state': 'closed'}, {'id': 1006841881, 'number': 76, 'closed': datetime.datetime(2022, 9, 8, 16, 9, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 5, 51, 30, tzinfo=datetime.timezone.utc), 'time_taken': 3925075.0, 'time_delta': '45 days, 10:17:55', 'additions': 409, 'deletions': 0, 'state': 'closed'}]"
28149409,mlpack,mlpack/mlpack,C++,1592,4984,183,321,30199,27,11,16,"[{'id': 1027168511, 'number': 3257, 'closed': datetime.datetime(2022, 8, 17, 12, 19, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 16, 5, 31, 25, tzinfo=datetime.timezone.utc), 'time_taken': 110886.0, 'time_delta': '1 day, 6:48:06', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1024538896, 'number': 3252, 'closed': datetime.datetime(2022, 8, 12, 16, 43, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 12, 4, 40, 2, tzinfo=datetime.timezone.utc), 'time_taken': 43387.0, 'time_delta': '12:03:07', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 1005229355, 'number': 3247, 'closed': datetime.datetime(2022, 8, 12, 0, 51, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 6, 18, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1794755.0, 'time_delta': '20 days, 18:32:35', 'additions': 1382, 'deletions': 0, 'state': 'closed'}, {'id': 993826082, 'number': 3244, 'closed': datetime.datetime(2022, 7, 23, 18, 14, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 12, 4, 45, 34, tzinfo=datetime.timezone.utc), 'time_taken': 998944.0, 'time_delta': '11 days, 13:29:04', 'additions': 76, 'deletions': 12, 'state': 'closed'}, {'id': 992234946, 'number': 3242, 'closed': datetime.datetime(2022, 7, 22, 6, 2, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 9, 12, 53, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1098511.0, 'time_delta': '12 days, 17:08:31', 'additions': 227, 'deletions': 0, 'state': 'closed'}, {'id': 985914122, 'number': 3240, 'closed': datetime.datetime(2022, 9, 4, 15, 26, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 4, 2, 32, 18, tzinfo=datetime.timezone.utc), 'time_taken': 5403246.0, 'time_delta': '62 days, 12:54:06', 'additions': 515, 'deletions': 282, 'state': 'closed'}, {'id': 981434764, 'number': 3236, 'closed': datetime.datetime(2022, 7, 3, 17, 29, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 28, 13, 44, 11, tzinfo=datetime.timezone.utc), 'time_taken': 445545.0, 'time_delta': '5 days, 3:45:45', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 979282284, 'number': 3234, 'closed': datetime.datetime(2022, 6, 27, 22, 13, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 26, 11, 57, 34, tzinfo=datetime.timezone.utc), 'time_taken': 123365.0, 'time_delta': '1 day, 10:16:05', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 973684755, 'number': 3232, 'closed': datetime.datetime(2022, 6, 21, 20, 36, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 21, 14, 52, 37, tzinfo=datetime.timezone.utc), 'time_taken': 20653.0, 'time_delta': '5:44:13', 'additions': 0, 'deletions': 3, 'state': 'closed'}, {'id': 971759410, 'number': 3231, 'closed': datetime.datetime(2022, 7, 29, 20, 36, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 20, 5, 33, 14, tzinfo=datetime.timezone.utc), 'time_taken': 3423819.0, 'time_delta': '39 days, 15:03:39', 'additions': 1024, 'deletions': 851, 'state': 'closed'}, {'id': 970566238, 'number': 3229, 'closed': datetime.datetime(2022, 6, 20, 17, 2, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 17, 12, 26, 38, tzinfo=datetime.timezone.utc), 'time_taken': 275763.0, 'time_delta': '3 days, 4:36:03', 'additions': 83, 'deletions': 6, 'state': 'closed'}, {'id': 963641635, 'number': 3224, 'closed': datetime.datetime(2022, 7, 2, 14, 23, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 10, 4, 3, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1937979.0, 'time_delta': '22 days, 10:19:39', 'additions': 442, 'deletions': 306, 'state': 'closed'}, {'id': 933375769, 'number': 3206, 'closed': datetime.datetime(2022, 6, 10, 3, 56, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 11, 9, 14, 33, tzinfo=datetime.timezone.utc), 'time_taken': 2572937.0, 'time_delta': '29 days, 18:42:17', 'additions': 1140, 'deletions': 877, 'state': 'closed'}, {'id': 921841205, 'number': 3200, 'closed': datetime.datetime(2022, 5, 1, 17, 24, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 28, 13, 18, 51, tzinfo=datetime.timezone.utc), 'time_taken': 273934.0, 'time_delta': '3 days, 4:05:34', 'additions': 10, 'deletions': 7, 'state': 'closed'}, {'id': 921479972, 'number': 3199, 'closed': datetime.datetime(2022, 4, 30, 14, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 28, 7, 17, 1, tzinfo=datetime.timezone.utc), 'time_taken': 199439.0, 'time_delta': '2 days, 7:23:59', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 920672761, 'number': 3198, 'closed': datetime.datetime(2022, 4, 30, 14, 41, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 27, 13, 42, 1, tzinfo=datetime.timezone.utc), 'time_taken': 262784.0, 'time_delta': '3 days, 0:59:44', 'additions': 4, 'deletions': 8, 'state': 'closed'}, {'id': 920404601, 'number': 3197, 'closed': datetime.datetime(2022, 4, 28, 14, 23, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 27, 9, 30, 16, tzinfo=datetime.timezone.utc), 'time_taken': 104000.0, 'time_delta': '1 day, 4:53:20', 'additions': 12, 'deletions': 12, 'state': 'closed'}, {'id': 920312859, 'number': 3196, 'closed': datetime.datetime(2022, 4, 27, 9, 24, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 27, 8, 11, 49, tzinfo=datetime.timezone.utc), 'time_taken': 4349.0, 'time_delta': '1:12:29', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 920263460, 'number': 3195, 'closed': datetime.datetime(2022, 6, 9, 13, 45, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 27, 7, 25, 52, tzinfo=datetime.timezone.utc), 'time_taken': 3737997.0, 'time_delta': '43 days, 6:19:57', 'additions': 3875, 'deletions': 3913, 'state': 'closed'}, {'id': 823671398, 'number': 3132, 'closed': datetime.datetime(2022, 3, 27, 15, 4, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 15, 15, 40, 45, tzinfo=datetime.timezone.utc), 'time_taken': 6132237.0, 'time_delta': '70 days, 23:23:57', 'additions': 149, 'deletions': 47, 'state': 'closed'}, {'id': 814101817, 'number': 3126, 'closed': datetime.datetime(2022, 1, 18, 21, 52, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 4, 18, 17, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1222490.0, 'time_delta': '14 days, 3:34:50', 'additions': 59, 'deletions': 33, 'state': 'closed'}, {'id': 814081783, 'number': 3125, 'closed': datetime.datetime(2022, 1, 13, 16, 47, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 4, 17, 44, 8, tzinfo=datetime.timezone.utc), 'time_taken': 774219.0, 'time_delta': '8 days, 23:03:39', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 814079043, 'number': 3124, 'closed': datetime.datetime(2022, 1, 7, 13, 48, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 4, 17, 39, 38, tzinfo=datetime.timezone.utc), 'time_taken': 245356.0, 'time_delta': '2 days, 20:09:16', 'additions': 9, 'deletions': 4, 'state': 'closed'}, {'id': 812613533, 'number': 3119, 'closed': datetime.datetime(2022, 4, 12, 8, 1, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 1, 18, 6, 51, tzinfo=datetime.timezone.utc), 'time_taken': 8690080.0, 'time_delta': '100 days, 13:54:40', 'additions': 303, 'deletions': 0, 'state': 'closed'}, {'id': 811877910, 'number': 3116, 'closed': datetime.datetime(2022, 1, 5, 16, 31, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 30, 9, 43, 2, tzinfo=datetime.timezone.utc), 'time_taken': 542891.0, 'time_delta': '6 days, 6:48:11', 'additions': 55, 'deletions': 33, 'state': 'closed'}, {'id': 811311022, 'number': 3115, 'closed': datetime.datetime(2022, 1, 1, 17, 22, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 29, 7, 26, 13, tzinfo=datetime.timezone.utc), 'time_taken': 294968.0, 'time_delta': '3 days, 9:56:08', 'additions': 54, 'deletions': 4, 'state': 'closed'}, {'id': 811298439, 'number': 3114, 'closed': datetime.datetime(2022, 4, 10, 10, 1, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 29, 6, 51, 19, tzinfo=datetime.timezone.utc), 'time_taken': 8824210.0, 'time_delta': '102 days, 3:10:10', 'additions': 251, 'deletions': 0, 'state': 'closed'}, {'id': 800492581, 'number': 3107, 'closed': datetime.datetime(2021, 12, 15, 6, 18, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 11, 16, 17, 1, tzinfo=datetime.timezone.utc), 'time_taken': 309660.0, 'time_delta': '3 days, 14:01:00', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 800164763, 'number': 3105, 'closed': datetime.datetime(2022, 1, 18, 19, 1, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 10, 18, 53, 45, tzinfo=datetime.timezone.utc), 'time_taken': 3370083.0, 'time_delta': '39 days, 0:08:03', 'additions': 151, 'deletions': 0, 'state': 'closed'}]"
