pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
419673243,[JENKINS-62345] Introduce FingerprintStorage API in core,"<!-- Comment: 
A great PR typically begins with the line below.
Replace XXXXX with the numeric part of the issue's id you created on JIRA.
Please note that if you want your changes backported into LTS, you will need to create a JIRA ticket for it. Read https://jenkins.io/download/lts/#backporting-process for more.
-->
See [JENKINS-62345](https://issues.jenkins-ci.org/browse/JENKINS-62345).
See [JEP-226](https://github.com/jenkinsci/jep/tree/master/jep/226)

<!-- Comment: 
If the issue is not fully described in the ticket, add more information here (justification, pull request links, etc.).

 * We do not require JIRA issues for minor improvements.
 * Bugfixes should have a JIRA issue (backporting process).
 * Major new features should have a JIRA issue reference.
-->

### Proposed changelog entries

<!-- Comment: 
The changelogs will be integrated by the core maintainers after the merge.  See the changelog examples here: https://jenkins.io/changelog/ -->

* Developer: Introduce new Fingerprint API methods: `Fingerprint#getPersistedFacets()`, `Fingerprint#delete(String)`. Deprecated methods: `Fingerprint#save(File)`. This API expects usage of standard CRUD operations like `Fingerprint#save()`, `Fingerprint#load(String)` and `Fingerprint#delete(String)`
* Developer: Add experimental External Fingerprint Storage API
  * JEP-226 - https://github.com/jenkinsci/jep/tree/master/jep/226
  * Reference Implementation - https://github.com/jenkinsci/redis-fingerprint-storage-plugin

### Proposed upgrade guidelines

N/A

<!-- Comment: 
The changelogs will be integrated by the core maintainers after the merge.  See the changelog examples here: https://jenkins.io/changelog/ -->

### Submitter checklist

- [x] (If applicable) Jira issue is well described
- [x] Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). [Examples](https://github.com/jenkins-infra/jenkins.io/blob/master/content/_data/changelogs/weekly.yml)
  * Fill-in the `Proposed changelog entries` section only if there are breaking changes or other changes which may require extra steps from users during the upgrade
- [x] Appropriate autotests or explanation to why this change has no tests
- [x] For dependency updates: links to external changelogs and, if possible, full diffs

<!-- For new API and extension points: Link to the reference implementation in open-source (or example in Javadoc) -->

### Desired reviewers

@mention

<!-- Comment:
If you need an accelerated review process by the community (e.g., for critical bugs), mention @jenkinsci/code-reviewers
-->

### Maintainer checklist

Before the changes are marked as `ready-for-merge`: 

- [ ] There are at least 2 approvals for the pull request and no outstanding requests for change
- [ ] Conversations in the pull request are over OR it is explicit that a reviewer does not block the change
- [ ] Changelog entries in the PR title and/or `Proposed changelog entries` are correct
- [ ] Proper changelog labels are set so that the changelog can be generated automatically
- [ ] If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set and there is a `Proposed upgrade guidelines` section in the PR title. ([example](https://github.com/jenkinsci/jenkins/pull/4387))
- [ ] If it would make sense to backport the change to LTS, a Jira issue must exist, be a _Bug_ or _Improvement_, and be labeled as `lts-candidate` to be considered (see [query](https://issues.jenkins-ci.org/issues/?filter=12146)).
",True,4731,https://api.github.com/repos/jenkinsci/jenkins/pulls/4731,https://github.com/jenkinsci/jenkins/pull/4731,closed,507,173,8,100,14,95,3,0,"[{'name': 'ready-for-merge'}, {'name': 'squash-merge-me'}, {'name': 'developer'}]",2020-05-18 18:37:42+00:00,2020-06-22 07:42:09+00:00,2984667.0,"34 days, 13:04:27","[{'comment_id': 426911268, 'comment_body': 'Please rather get used to setters./getters in the code. Public fields are nightmare in Java when it comes to maintaining binary compatibility', 'comment_created': datetime.datetime(2020, 5, 18, 21, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 427142595, 'comment_body': 'Unless there are startup sequence related issues, this should be fairly straightforward to do in a ""Jenkins"" way:\r\n\r\n* Remove the field in `Fingerprint`.\r\n* Annotate this class `@Extension(ordinal=100)` after making sure it has a no-arg constructor.\r\n* Add an abstract superclass `FingerprintStorage implements ExtensionPoint` and extend it here.\r\n* Have a `static FingerprintStorage get()` in the superclass that returns `ExtensionList.lookup(FingerprintStorage.class).get(0)`.\r\n\r\nAny `@Extension WhateverFingerprintStorage extends FingerprintStorage` will take precedence.\r\n\r\nEven if the final PR looks nothing like I write above, looking into these Jenkins-isms if you don\'t know them yet will prepare you for writing code ""the Jenkins way"" 😃', 'comment_created': datetime.datetime(2020, 5, 19, 8, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'daniel-beck', 'type': 'User'}, {'comment_id': 427144228, 'comment_body': '@oleg-nenashev Got it :) Made the requested changes!', 'comment_created': datetime.datetime(2020, 5, 19, 9, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 427148096, 'comment_body': 'Hi @daniel-beck Thanks a lot for the review :) Implementing the Extension point is my next step, but you gave me such good precise and clear direction! Thanks a ton!\r\n\r\nPreparing for ""the Jenkins way"" is indeed what I am here to learn! :)', 'comment_created': datetime.datetime(2020, 5, 19, 9, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 427152558, 'comment_body': ""Would also recommend looking into https://javadoc.jenkins.io/jenkins/model/ArtifactManagerConfiguration.html and implementations of https://www.jenkins.io/doc/developer/extensions/jenkins-core/#artifactmanagerfactory -- seems they are fairly similar to what you're doing here."", 'comment_created': datetime.datetime(2020, 5, 19, 9, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'daniel-beck', 'type': 'User'}, {'comment_id': 429474323, 'comment_body': 'Maybe something to leave within the abstraction. It is hard to expect the implementations to handle it correctly ', 'comment_created': datetime.datetime(2020, 5, 22, 22, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 429474525, 'comment_body': 'Something to leave in the abstraction as well?', 'comment_created': datetime.datetime(2020, 5, 22, 22, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 429654376, 'comment_body': 'Been a while for such conversions for me, but do you need to watch for any overflows or anything?', 'comment_created': datetime.datetime(2020, 5, 24, 16, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 430000732, 'comment_body': 'Hi @afalko, Actually this piece of code I ported from the tests because it has use with other classes too. Ill comment back after having properly investigated it', 'comment_created': datetime.datetime(2020, 5, 25, 15, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 433076120, 'comment_body': '+1 to what @StefanSpieker proposed. Please put all new code within the `jenkins.*` namespace. `FileFingerprintStorage ` is not actually a part of the Data Model, so I would rather suggest creating a new `jenkins.fingerprints` package for the implementations. No strong opinion. \r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 1, 7, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 433076175, 'comment_body': '```suggestion\r\n@Extension\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 7, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 433076403, 'comment_body': 'It would make sense to at least restrict the API as Beta.\r\nhttps://www.jenkins.io/blog/2018/04/30/using-the-beta-annotation/', 'comment_created': datetime.datetime(2020, 6, 1, 7, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 433077201, 'comment_body': 'What does block you from using `string.getBytes()` with a 8-bit encoding? Why would it need a manual implementation?|', 'comment_created': datetime.datetime(2020, 6, 1, 7, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 433077615, 'comment_body': 'It still needs some kind of fingerprint identifier in the message, e.g. just its ID/hash', 'comment_created': datetime.datetime(2020, 6, 1, 7, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 433078235, 'comment_body': 'It is not a public method though it can be accessed from the same package in plugins. Do you see examples of that? \r\n\r\n* If yes, then it makes sense to deprecate the method\r\n* If not, we could consider removing it entirely\r\n', 'comment_created': datetime.datetime(2020, 6, 1, 7, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 433078842, 'comment_body': 'It does not look to be a good public API. Why would you need it here? Could it be just moved to the storage?', 'comment_created': datetime.datetime(2020, 6, 1, 7, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 433078871, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 6, 1, 7, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 433079162, 'comment_body': '```suggestion\r\n     * Performs Initialization of facets on a newly loaded Fingerprint.\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 7, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 433079871, 'comment_body': 'As discussed on Thursday, I suggest to avoid using explicit MD5 references in the API. We would rather need a variable-length key with a transformation on the storage level. E.g. we already have an issue with Docker image/container fingerprints which much longer IDs than md5', 'comment_created': datetime.datetime(2020, 6, 1, 7, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 433080276, 'comment_body': 'make it final? I doubt there is a need to override them.\r\nAlso, for such new APIs it makes sense to explicitly document nullness via FindBugs annotations', 'comment_created': datetime.datetime(2020, 6, 1, 7, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 433363541, 'comment_body': '@oleg-nenashev I can see examples of it being used in the tests. Marking it as deprecated.', 'comment_created': datetime.datetime(2020, 6, 1, 16, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 433689844, 'comment_body': 'Please also move the test to the jenkins package.', 'comment_created': datetime.datetime(2020, 6, 2, 7, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'StefanSpieker', 'type': 'User'}, {'comment_id': 433701210, 'comment_body': 'Hi @StefanSpieker thanks for reviewing :)\r\nFingerprintTest is for Fingerprint class, which resides in hudson.model . Should it also be moved to Jenkins package?', 'comment_created': datetime.datetime(2020, 6, 2, 8, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 434509686, 'comment_body': 'If you make an API public, it needs to be documented. ', 'comment_created': datetime.datetime(2020, 6, 3, 11, 53, 14, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 434514416, 'comment_body': 'I would say that it is a Jenkins API issue. `SaveableListener` is equipped to work only with the Filesystem storage. It might be out of the scope for this project, so I raised https://issues.jenkins-ci.org/browse/JENKINS-62543 . It would be great to add a TODO comment to the code so that visitors\r\n\r\n```suggestion\r\n        // Implementations are expected to invoke SaveableListener on their own if relevant\r\n        // TODO: Consider improving Saveable Listener API: https://issues.jenkins-ci.org/browse/JENKINS-62543\r\n        FingerprintStorage.get().save(this);\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 12, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 434514781, 'comment_body': '```suggestion\r\n        // TODO(oleg_nenashev): Consider generalizing SaveableListener and invoking it for all storage implementations. https://issues.jenkins-ci.org/browse/JENKINS-62543 \r\n        SaveableListener.fireOnChange(fp, getConfigFile(file));\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 12, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 434515704, 'comment_body': '```suggestion\r\n    private static void initFacets(@CheckForNull Fingerprint fingerprint){\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 12, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 434516130, 'comment_body': 'This method was prvate before. No need to deprecate it, you can just remove it', 'comment_created': datetime.datetime(2020, 6, 3, 12, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 434518321, 'comment_body': 'This tag might become a source of confusion later if the fingerprint size is expanded. Anyway, we can worry about it when we get there.\r\n\r\n```suggestion\r\n                // TODO(oleg_nenashev): Consider renaming the field: https://issues.jenkins-ci.org/browse/JENKINS-25808\r\n                w.print(""  <md5sum>"");\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 12, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 434520230, 'comment_body': 'Do we need to introduce methods which iterate fingerprints without loading them?\r\nAFAICT they are required for effective implementations of  https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/FingerprintMap.java . Same might be needed for bulk loading which is a common use-case for Jenkins Web UI\r\n\r\nCan be done later from what I can dell', 'comment_created': datetime.datetime(2020, 6, 3, 12, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 434658147, 'comment_body': 'I absolutely agree :) TODO added', 'comment_created': datetime.datetime(2020, 6, 3, 15, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 434695911, 'comment_body': ""I'll investigate this properly, and then comment back"", 'comment_created': datetime.datetime(2020, 6, 3, 16, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 435276437, 'comment_body': 'Use curlies on split-line ifs', 'comment_created': datetime.datetime(2020, 6, 4, 13, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 435276702, 'comment_body': 'Curlies on split-line ifs please', 'comment_created': datetime.datetime(2020, 6, 4, 13, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 435279207, 'comment_body': 'Please add curlies here', 'comment_created': datetime.datetime(2020, 6, 4, 13, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 435279384, 'comment_body': 'Curlies', 'comment_created': datetime.datetime(2020, 6, 4, 13, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 435283255, 'comment_body': 'Do we need to valid that delete was successful?', 'comment_created': datetime.datetime(2020, 6, 4, 14, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 435284106, 'comment_body': ""Can we use Paths.get to put the path together? What you are doing right now won't be portable to Windows systems. "", 'comment_created': datetime.datetime(2020, 6, 4, 14, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 435284646, 'comment_body': 'Same comment here: non-portable path concatenation ', 'comment_created': datetime.datetime(2020, 6, 4, 14, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 435285058, 'comment_body': 'Improve the variable names `t` and `t2`', 'comment_created': datetime.datetime(2020, 6, 4, 14, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 435285728, 'comment_body': 'In the comment can you give an example input and output?', 'comment_created': datetime.datetime(2020, 6, 4, 14, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 435286279, 'comment_body': 'nit: space between `get()` and `{`', 'comment_created': datetime.datetime(2020, 6, 4, 14, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 435532564, 'comment_body': '@afalko I agree with you, but interestingly, in the Jenkins core codebase, I can mostly find non-portable path concatenation being used.\r\nCC @oleg-nenashev some insights would helpful :)', 'comment_created': datetime.datetime(2020, 6, 4, 20, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 435703941, 'comment_body': '@afalko Thanks, I have added created some exceptions for the same, on the same pattern as the other methods of this class, and delete of the FingerprintCleanupThread class.\r\nLet me know what you think :)', 'comment_created': datetime.datetime(2020, 6, 5, 5, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 436023971, 'comment_body': ""This is mostly as-is I guess. I think as a user, I'll see an exception in the logs for this. This is probably fine for now :)"", 'comment_created': datetime.datetime(2020, 6, 5, 16, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 436245257, 'comment_body': '@oleg-nenashev I am understanding the concept, but it would be very helpful if you could point me exactly where such implementation has been made, because I was unable to find it.\r\nFrom what I can understand, `FingerprintMap` is ensuring no two Fingerprint objects for the same ID in memory, and that also memory conservation by making these Fingerprints SoftReference.', 'comment_created': datetime.datetime(2020, 6, 6, 6, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 436555051, 'comment_body': 'Sorry, my bad, then please keep it there.', 'comment_created': datetime.datetime(2020, 6, 8, 9, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'StefanSpieker', 'type': 'User'}, {'comment_id': 436557928, 'comment_body': 'please stick to the same format: \r\nstart = 0;', 'comment_created': datetime.datetime(2020, 6, 8, 9, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'StefanSpieker', 'type': 'User'}, {'comment_id': 436563006, 'comment_body': '@StefanSpieker Thanks for pointing it out :) Fixed!', 'comment_created': datetime.datetime(2020, 6, 8, 9, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 436563952, 'comment_body': 'No worries, thanks for reviewing :)', 'comment_created': datetime.datetime(2020, 6, 8, 9, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 437368226, 'comment_body': 'BTW please avoid gratuitous reformatting of otherwise untouched code.', 'comment_created': datetime.datetime(2020, 6, 9, 12, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jglick', 'type': 'User'}, {'comment_id': 437370623, 'comment_body': 'This whole task should be suppressed if not using `FileFingerprintStorage`.', 'comment_created': datetime.datetime(2020, 6, 9, 12, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jglick', 'type': 'User'}, {'comment_id': 437370967, 'comment_body': '```suggestion\r\n@Restricted(NoExternalUse.class)\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 12, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jglick', 'type': 'User'}, {'comment_id': 437374308, 'comment_body': 'At any rate, seems that at least `FingerprintMap.isReady` needs to be amended.', 'comment_created': datetime.datetime(2020, 6, 9, 12, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jglick', 'type': 'User'}, {'comment_id': 437375080, 'comment_body': '```suggestion\r\n                FileFingerprintStorage.class.getName());\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 12, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jglick', 'type': 'User'}, {'comment_id': 437376457, 'comment_body': 'Unsafe, this will return null rather than fall back to `FileFingerprintStorage`. I would suggest simply\r\n\r\n```suggestion\r\n        return ExtensionList.lookup(FingerprintStorage.class).get(0);\r\n```\r\n\r\nand let `Extension.ordinal` be used to control which implementation is used. If you want users to select a storage system beyond merely installing a plugin, then introduce a `GlobalConfiguration`.', 'comment_created': datetime.datetime(2020, 6, 9, 12, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jglick', 'type': 'User'}, {'comment_id': 437376743, 'comment_body': 'Define the ID. `@link` etc.', 'comment_created': datetime.datetime(2020, 6, 9, 12, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jglick', 'type': 'User'}, {'comment_id': 437377020, 'comment_body': 'Can this return null?', 'comment_created': datetime.datetime(2020, 6, 9, 12, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jglick', 'type': 'User'}, {'comment_id': 437377333, 'comment_body': 'Is this a blocking operation—does it really need to throw `IOException` or can we just assume it is queued for save?', 'comment_created': datetime.datetime(2020, 6, 9, 12, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jglick', 'type': 'User'}, {'comment_id': 437403153, 'comment_body': '@jglick Thank you so much for reviewing! https://github.com/jenkinsci/jenkins/pull/4731#discussion_r436557928\r\nI changed it because of feedback, Ill change it back, no worries :)', 'comment_created': datetime.datetime(2020, 6, 9, 13, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 437411132, 'comment_body': 'To be clear, the new format is closer to typical styleguides, I just advise keeping PR diffs as small as practical; if there is a desire to clean up formatting of code, better to do that in dedicated PRs.', 'comment_created': datetime.datetime(2020, 6, 9, 13, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jglick', 'type': 'User'}, {'comment_id': 437671329, 'comment_body': ""IIUC it doesn't seem to get queued for saving. In the old implementation also it throws `IOException`"", 'comment_created': datetime.datetime(2020, 6, 9, 19, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 437671481, 'comment_body': 'Yes, added annotation', 'comment_created': datetime.datetime(2020, 6, 9, 19, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 439478651, 'comment_body': 'Still todo? This seems like a simple getter :)', 'comment_created': datetime.datetime(2020, 6, 12, 15, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 439478936, 'comment_body': 'Curlies around this if please', 'comment_created': datetime.datetime(2020, 6, 12, 15, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 439480201, 'comment_body': 'I think the style is to add spaces around the `==`', 'comment_created': datetime.datetime(2020, 6, 12, 15, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 439480968, 'comment_body': 'Do we need to check for null lookup?', 'comment_created': datetime.datetime(2020, 6, 12, 15, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 439481817, 'comment_body': 'better to name `jenkinsRule`', 'comment_created': datetime.datetime(2020, 6, 12, 15, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 439484247, 'comment_body': 'Hi @afalko, this method is not TODO, this is just a new public API that is being offered, so when it gets released it will automatically be replaced by the Jenkins version (kind of an annotation)', 'comment_created': datetime.datetime(2020, 6, 12, 15, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 439486889, 'comment_body': '@afalko I would agree with naming it jenkinsRule, but it seems like this is pretty common (standard-ish) in the codebase [[src](https://www.jenkins.io/doc/developer/testing/#providing-environment-variables)] . \r\nLet me know your thoughts, I have no issues in changing :)', 'comment_created': datetime.datetime(2020, 6, 12, 15, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 439491185, 'comment_body': 'Sheep will follow other sheep off a cliff :p. Its not a big deal in this case, and is a non-blocking suggestion.', 'comment_created': datetime.datetime(2020, 6, 12, 15, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 439491692, 'comment_body': ""AFAICT, we should not need to because `FileFingerprintStorage` will get loaded before due to it's ordinality unconditionally, and it should get returned."", 'comment_created': datetime.datetime(2020, 6, 12, 15, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 439493349, 'comment_body': 'I have tended to use `r` FWIW.', 'comment_created': datetime.datetime(2020, 6, 12, 15, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jglick', 'type': 'User'}, {'comment_id': 439494046, 'comment_body': 'Why is that? Could the reference implementation simply escape such a character if it is ever used?', 'comment_created': datetime.datetime(2020, 6, 12, 15, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jglick', 'type': 'User'}, {'comment_id': 439496618, 'comment_body': 'Suggest documenting expectations around the behavior of this method. Is it required to flush data to durable storage, or can it just add the fingerprint to a save queue?', 'comment_created': datetime.datetime(2020, 6, 12, 15, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jglick', 'type': 'User'}, {'comment_id': 439498235, 'comment_body': '@afalko thanks for reviewing :)\r\nI want to avoid this because of https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437368226. \r\nBut I am happy to add them if you feel', 'comment_created': datetime.datetime(2020, 6, 12, 15, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 439565320, 'comment_body': ""So long as you do it a follow up PR, I'm fine with it "", 'comment_created': datetime.datetime(2020, 6, 12, 17, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 439713844, 'comment_body': '`FingerprintMap.isReady` has now been updated', 'comment_created': datetime.datetime(2020, 6, 13, 6, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 439714345, 'comment_body': 'Thanks @afalko I have updated it to `jenkinsRule` :)', 'comment_created': datetime.datetime(2020, 6, 13, 6, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 439720560, 'comment_body': 'The reason is that I need a safe delimeter for combining instance ID with the fingerprint ID. \r\nIIUC, if I escape all `|` I could do something like\r\n```\r\nString id= ""004|034556""; // Fingerprint\'s ID\r\nString instanceID = ""abcdef""; // safe\r\nString identifier = id.replace(""|"",""\\\\|"") + ""|"" + instanceID; // Escaped the character |\r\n\r\n// store identifier\r\n// ...\r\n// fetch identifier\r\n\r\nString parts = identifier.split(""(?<!\\\\\\\\)\\\\|""); // Split on unescaped |\r\nString id = parts[0].replace(""\\\\|"", ""|""); // Unescape\r\nString identifier = parts[1];\r\n```\r\nCC @oleg-nenashev @afalko @mikecirioli ', 'comment_created': datetime.datetime(2020, 6, 13, 8, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 439996077, 'comment_body': '@oleg-nenashev https://github.com/jenkinsci/jenkins/pull/4731#discussion_r437370967 was changed accordingly', 'comment_created': datetime.datetime(2020, 6, 15, 8, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 440683112, 'comment_body': 'It is rather important to provide guidelines what to do here.', 'comment_created': datetime.datetime(2020, 6, 16, 8, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 440683310, 'comment_body': '```suggestion\r\n     * @return Loaded {@link Fingerprint}. {@code null} if the config file does not exist or\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 8, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 440684000, 'comment_body': 'Same as above, guidelines are needed. I would also keep the existing API documentation even if it is deprecated\r\n\r\n```suggestion\r\n     * Determines the file name from md5sum.\r\n     * @deprecated as of TODO\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 8, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 440684118, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 6, 16, 8, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 442299882, 'comment_body': 'is there no API for this in external or just not needed?', 'comment_created': datetime.datetime(2020, 6, 18, 15, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 442300856, 'comment_body': ""could update this reference while moving it\r\n```suggestion\r\n                // but if the file size is 0, which is what's reported in JENKINS-2012, then it seems\r\n```"", 'comment_created': datetime.datetime(2020, 6, 18, 15, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 442302126, 'comment_body': ""there's certainly nicer ways to print this, but not worth doing in this PR 👍 "", 'comment_created': datetime.datetime(2020, 6, 18, 15, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 442302502, 'comment_body': 'could rename this var to follow java naming standards\r\n```suggestion\r\n        String[] innerFiles = inner.list();\r\n```', 'comment_created': datetime.datetime(2020, 6, 18, 15, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 442303764, 'comment_body': ""This doesn't seem to be the configured one? afaict it's the first one and you've set the file one to have low priority so that an external one gets picked up first\r\n```suggestion\r\n     * Returns the first implementation of FingerprintStorage for the instance.\r\n     * Implementation ordering is done via the ordinal attribute on the Extension\r\n```"", 'comment_created': datetime.datetime(2020, 6, 18, 15, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 442400945, 'comment_body': '@timja thanks for reviewing :) We currently do not have an API that can support fingerprint cleanup in external storages, something we will be tackling in the next few weeks :) \r\nAs of now, we limit the execution of fingerprint cleanup only when the default file based storage is configured', 'comment_created': datetime.datetime(2020, 6, 18, 17, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 442402756, 'comment_body': ""I agree, this is just code that has been moved to a new class, so don't want to break what works :P"", 'comment_created': datetime.datetime(2020, 6, 18, 17, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 442404699, 'comment_body': 'Thanks for pointing that out @timja! ', 'comment_created': datetime.datetime(2020, 6, 18, 17, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 460724745, 'comment_body': 'This entire class needs an `@since TODO`, same with `FileFingerprintStorage`.', 'comment_created': datetime.datetime(2020, 7, 27, 8, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'daniel-beck', 'type': 'User'}, {'comment_id': 460726187, 'comment_body': '`@since`?', 'comment_created': datetime.datetime(2020, 7, 27, 8, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'daniel-beck', 'type': 'User'}]","[{'commit_sha': '8801887d2fbabc2d9eef8ea0ea657564d55f7d16', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cab3222063b5b2bc68bfce05f87d426f74f8b18', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baddacd1780837ad75d02d870c67878ecef13b91', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5dfcf32865ae12c26177414fb3be4cc0ced33d5', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22ceaab9ac147e65ebfb0e7dcb9ee734eb57c68e', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a98412fd0c81974986bf4288dbad5c646ef2a1ed', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92b10ec9218e83ed372f36517b8fe711dc87e399', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61dbf95009596cb922068b4a622c61772b573cb8', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9ca3b8fd5c9f9acaf7672311cdab6fccbc42c36', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dfa5369253fde8baf0adbd54acce047a25551db', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '563c280a55881be4a5637dafc3c91b8794bf5131', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afaa0eb6a3a7e54c8243fd211e087d3756ac87c9', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ef152b652405f78a0098fb77bddc1beab2d4731', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34559a937753b4c8cb4c4c8fd03f4b7955869f79', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c9dd59f0096e1e1edee2799fd929dbe593b8d87', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dffa0e5e4bb308b7c6d50541e361cdd2d7e5fede', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37bb27ceaadbab448bb7beab0191ae491cc51b35', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19d37c9031cf055dfb933cbe6b854e66886bbeae', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a454a6513f1df1cb9762c7c6822e4266a709d261', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac199863e8af51bf97bf07bdc60d2bb50d81c466', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9e0e60d3a7946631780031096fd260388a0d870', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f404266f82545cd865c53036a33c926914c6c9a', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b75a3b85c5d1c09b60ee077888b9ce719a1a925e', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b73a56821050651229d8d483f9968e1b8f7fa62', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '984b8fb41b61c6139d959e489576c61d249c37e1', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '544476c34a3ae0cc75616875aef879469abf864b', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39b42fd80428cc902cc771f25c51208600bbc44c', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf4b124aa40bf09df8c81f30970ef4200485a2ae', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c1f9e7741d0fd2987cee12678bc17eb75d82cb9', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2d84a0be68ceb14153f20121d373e7a2920dbfa', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '441b848459447f254b18e5bf78a9c1b587b5e452', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3024f798d52f6dcd22a04e12a27c9d18b0c7b76c', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3e26efce47dad9385a60129ae14944f502e65b', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82fe6973cb48f32384e9803f8d6312921c4909bc', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38be5bf6d4b332dcdabb9ad6cc321a54d0b3dfa1', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60df0b865126924fc039b3fe2ebb178847b9805d', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58f77a6edafc4a8d53a646582d9d25595aa962c6', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dfd288ef9f79f18e93a4160a7b274dea393a5e8', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b05d292008f949d0dcacbfff4169511e9b709bd', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '217310c998d75c305253f5459be903b0f2969aaa', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b2d3a0600534a665cba742b59299f63da78c24e', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beba5cb64caac0de8e5cfd215b6acdf771507260', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f12fb8ba78ec42600ae1571185bd23aef8351c1e', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a099808f55a9f82b1e4d93c9b3d33a02a336b98', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8758fc5ddafc7eb4451b72d42981034f44be9d09', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99722d6d5a036c0efef7e69c2ebbea4ec91c1cbb', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b8ec4b16e5be0224093e5a478f12039b6701c53', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e18c45fc589c8e9794b70531400cb6774dcf4143', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a728fb12c9759478373ebe6c532278186efcfe7', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28df37bf16699049bb8cf7e2be67afb07d096449', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa3bcac940b993c00b81b2c0d1926510df407d0c', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c743d539363f6a727543327703232528f46c56a', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f74d7a0139cc9398526158899ccf87999ee918f0', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d6cd230202529277c004c335183f5f59b0bdcbb', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e620e5156485916c221b3ec22da9087cc77a62e', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7576931c2afd98729cb0de412086899079bcf2c4', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fc92c6950c14bc33f507fcc1d6fbe4c87f8b7dc', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b911586bc9c729487c5ae137119d073124004857', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3770b3739d7efa0ad25cb2a6b2f702fd51df151d', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '387b2491bbe8e7486c5de9834cc9c81d4e327d6a', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd27f46cb3a27ee538fa90042786d600ea08c50d8', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd81767f7e06876cbdc3864d7ffa991ae4d4fd0f7', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e3c7a8a878a4245549001b69ac2847225012b2', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccf31bb21b0fc2cb8d31d7d3fb21473a2e6f94d8', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51664e011730eb97a5cecdf666776be2da4cc4a9', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dfc22fd0537b8402664081e0f7982aa1e17bc03', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4e5c6a37256b2c2feed64d7a20a3e0db87fa572', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e759ffff07e7c07fd4818139b95523035c2cb71', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5e973b183481900b47ec0c2533de9efa138a270', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d30cf15c0bf3626ec06de2c04fa9a50bf4071ed', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '542e8614ae4c26244f7fc9b29b561b74fa415532', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd82300e17452ecc8c6b35e73d29abd4b0930e625', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1de00d183e7bc6d3a4c5c58ce372ee18d7dc30e', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19c4bc1aaec858086265373fba6a8667078008b4', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ba36ebc6a037c4295c12565c69dd950c7dd2700', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17bb8a73b539bb5f93df206e15e1d6aa86313e7f', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f8266d7b05a9ee5b0f07b9cb34a2a83569189aa', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faa89b3756fc00a2c06361b6dae6e5cdeed2960d', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6e6cba58c4493be3ba2b3a8c7d655d06a8f1d9e', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '815f3d7ee1281da2f32250096469cd771ebaaead', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09f594f8d1adddeecf634b0d400736b44177363f', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2463bcdaa03f8ce16f007ea8bbad6db3041fba88', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70da6e9398629eda41d8a169965b58d2686929a8', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc7670c98b313c1f9da6b682aca956369e791648', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '472883515e96b7436f19b87a24c3dcc79f4b79f3', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de7a107343f9f67da4ff22863c76ae71109a1af6', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e713c9215a102d075f22c913354228d36cd07e1', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db532e9c174e1cbf2b32a00040a809f7c33e36ae', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e35c664db263ef1ee41f999daa79b29b110d2efa', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae82e0e14ba29a829b0edec46bbce2468ca7adbb', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b4bc56ce9536aa47ca90f71f1b1ba309737d822', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36ab9b326954df2f9e0d2c3c24ad17402b941701', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7923ce298718a663628fbba731e1735fc1553be8', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9aa86ef29991ce56b19a1eb95fa24df33ed91e81', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d44bce44008b4f275da4c9bf74292a313c03a0', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16e9d6560104b2068ad4879d1ec24aa81083f9ea', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1fbc87eeca1920d9a0c5d5cd4887e30ed25a67a', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2306ff578289cb9e1ce75c69bba9202b55c93af', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67db5b1f00e9658dd8cd4035876c86c7d84b8cc3', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b40ecd1844fc5a250fb1f0a3e0c71ebc5dfd22c4', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}]",Sumit Sarin,27735438,,User,,86,,25,17
438143161,[JENKINS-62755] Introduce Fingerprint Cleanup in External Storage API,"<!-- Comment: 
A great PR typically begins with the line below.
Replace XXXXX with the numeric part of the issue's id you created on JIRA.
Please note that if you want your changes backported into LTS, you will need to create a JIRA ticket for it. Read https://jenkins.io/download/lts/#backporting-process for more.
-->
See [JENKINS-62755](https://issues.jenkins-ci.org/browse/JENKINS-62755).
See [JEP-226](https://github.com/jenkinsci/jep/tree/master/jep/226).

<!-- Comment: 
If the issue is not fully described in the ticket, add more information here (justification, pull request links, etc.).

 * We do not require JIRA issues for minor improvements.
 * Bugfixes should have a JIRA issue (backporting process).
 * Major new features should have a JIRA issue reference.
-->

### Proposed changelog entries

* Developer: Introduce new `FingerprintStorage` methods: `iterateAndCleanupFingerprints`, `cleanFingerprint` to allow external fingerprint storages to configure fingerprint cleanup.
* User: Creates a Fingerprint cleanup configuration page which allows enabling/disabling fingerprint cleanup.

<!-- Comment: 
The changelogs will be integrated by the core maintainers after the merge.  See the changelog examples here: https://jenkins.io/changelog/ -->

### Proposed upgrade guidelines

N/A

### Submitter checklist

- [ ] (If applicable) Jira issue is well described
- [x] Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). [Examples](https://github.com/jenkins-infra/jenkins.io/blob/master/content/_data/changelogs/weekly.yml)
  * Fill-in the `Proposed changelog entries` section only if there are breaking changes or other changes which may require extra steps from users during the upgrade
- [x] Appropriate autotests or explanation to why this change has no tests
- [x] For dependency updates: links to external changelogs and, if possible, full diffs

<!-- For new API and extension points: Link to the reference implementation in open-source (or example in Javadoc) -->

### Desired reviewers

@mention

<!-- Comment:
If you need an accelerated review process by the community (e.g., for critical bugs), mention @jenkinsci/code-reviewers
-->

### Maintainer checklist

Before the changes are marked as `ready-for-merge`: 

- [ ] There are at least 2 approvals for the pull request and no outstanding requests for change
- [ ] Conversations in the pull request are over OR it is explicit that a reviewer does not block the change
- [ ] Changelog entries in the PR title and/or `Proposed changelog entries` are correct
- [ ] Proper changelog labels are set so that the changelog can be generated automatically
- [ ] If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set and there is a `Proposed upgrade guidelines` section in the PR title. ([example](https://github.com/jenkinsci/jenkins/pull/4387))
- [ ] If it would make sense to backport the change to LTS, a Jira issue must exist, be a _Bug_ or _Improvement_, and be labeled as `lts-candidate` to be considered (see [query](https://issues.jenkins-ci.org/issues/?filter=12146)).
",True,4817,https://api.github.com/repos/jenkinsci/jenkins/pulls/4817,https://github.com/jenkinsci/jenkins/pull/4817,closed,322,113,6,38,13,27,2,0,"[{'name': 'ready-for-merge'}, {'name': 'developer'}]",2020-06-22 19:48:58+00:00,2020-07-21 04:20:48+00:00,2449910.0,"28 days, 8:31:50","[{'comment_id': 445043943, 'comment_body': 'It used to be a public APi before accmod was introduced. Should be safe enough, I cannot find or imagine an external usage. ', 'comment_created': datetime.datetime(2020, 6, 24, 17, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 445044655, 'comment_body': '```suggestion\r\n * @since TODO\r\n */\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 17, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 445045089, 'comment_body': 'Could lead to funny results if 2+ plugins are installed, e.g. in the case of migrating from one storage to another', 'comment_created': datetime.datetime(2020, 6, 24, 17, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 445046574, 'comment_body': 'Please document what the implementations are expected to do there.\r\nMaybe a better name like `iterateAndCleanupFingerprints()` is better\r\n', 'comment_created': datetime.datetime(2020, 6, 24, 17, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 445315477, 'comment_body': 'It is only for tests, right? If the test is applicable to File Fingerprint storage, it makes sense to relocate the dependent test to a new class and use the package scope. Option B is to use `@Restricted(NoExternalUse.class)` to prevent external usages', 'comment_created': datetime.datetime(2020, 6, 25, 5, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 445621866, 'comment_body': 'Why == 2?', 'comment_created': datetime.datetime(2020, 6, 25, 14, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 445622662, 'comment_body': '```suggestion\r\n        taskListener.getLogger().println(String.format(""Cleaned up %d records"", records));\r\n```', 'comment_created': datetime.datetime(2020, 6, 25, 14, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 445623491, 'comment_body': '```suggestion\r\n                    listener.getLogger().println(String.format(""%s created on %s blocked deletion of %s"", deletionBlockerFacet.getClass().getName(), new Date(deletionBlockerFacet.getTimestamp()), fingerprintFile));\r\n```', 'comment_created': datetime.datetime(2020, 6, 25, 14, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 445623877, 'comment_body': 'curlies', 'comment_created': datetime.datetime(2020, 6, 25, 14, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 445624611, 'comment_body': 'Hmmm...this seems duplicate of https://github.com/jenkinsci/jenkins/pull/4817/files#r445623491', 'comment_created': datetime.datetime(2020, 6, 25, 14, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 445624858, 'comment_body': 'Also below as well', 'comment_created': datetime.datetime(2020, 6, 25, 14, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 445825832, 'comment_body': 'this code is just moved', 'comment_created': datetime.datetime(2020, 6, 25, 20, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 445827639, 'comment_body': ""It's called in different places,\r\nFileFingerprint has it's own implementation, the redis plugin is calling this method"", 'comment_created': datetime.datetime(2020, 6, 25, 20, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 445938203, 'comment_body': 'Yes, this is ported code. The reason is because of the structure in which fingerprints are stored on file system storage. Say the fingerprint md5 is `abc123456789` then it gets saved inside `ab`/`c1`/`23456789.xml`', 'comment_created': datetime.datetime(2020, 6, 26, 2, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 445938861, 'comment_body': 'Yes, that is correct. This is not duplicate, it has slight changes. The one in `FingerprintStorage` lays out a basic implementation for plugin developers. File system storage overrides it and uses a slightly different implementation instead which can delete files directly.', 'comment_created': datetime.datetime(2020, 6, 26, 2, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 445938966, 'comment_body': 'This is moved code, so will make this change in separate PR.', 'comment_created': datetime.datetime(2020, 6, 26, 2, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 445939060, 'comment_body': 'This is moved code, so will make this change in separate PR.', 'comment_created': datetime.datetime(2020, 6, 26, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 445939671, 'comment_body': '@oleg-nenashev Do I need to add `@Restricted(NoExternalUse.class)` if the entire class itself is using that annotation?', 'comment_created': datetime.datetime(2020, 6, 26, 2, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 456508291, 'comment_body': '```suggestion\r\n    @Override\r\n    public void iterateAndCleanupFingerprints(TaskListener taskListener) {\r\n```', 'comment_created': datetime.datetime(2020, 7, 17, 15, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 456508555, 'comment_body': '```suggestion\r\n     * This method performs the cleanup of the given fingerprint.\r\n     *\r\n     * @since TODO\r\n```', 'comment_created': datetime.datetime(2020, 7, 17, 15, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 456508767, 'comment_body': '```suggestion\r\n     * @since TODO\r\n     */\r\n```', 'comment_created': datetime.datetime(2020, 7, 17, 15, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 456510557, 'comment_body': 'It will not work for configurations deserialized from the disk', 'comment_created': datetime.datetime(2020, 7, 17, 15, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 456511278, 'comment_body': 'If it is private, it does not override the implementation in upper class.  Looks like a 🐛 for API users', 'comment_created': datetime.datetime(2020, 7, 17, 15, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 456520961, 'comment_body': ""So this isn't supposed to override the method of the upper class(signature is different). The method in the upper class isn't called by itself, it is -used- by plugin implementations."", 'comment_created': datetime.datetime(2020, 7, 17, 15, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 456586948, 'comment_body': ""Usually Java APIs use 'isSomething()' for boolean getters"", 'comment_created': datetime.datetime(2020, 7, 17, 17, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 456816601, 'comment_body': 'Is there any reason to disable this if there isn’t an external plugin for fingerprints?', 'comment_created': datetime.datetime(2020, 7, 18, 18, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 456820580, 'comment_body': ""It might be a good feature to have in case the disk storage is cheaper for a user than having a periodically running process. Or say Jenkins is configured on a distributed disk storage. I don't have any strong opinions though :)"", 'comment_created': datetime.datetime(2020, 7, 18, 19, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}]","[{'commit_sha': '287f8dfe0e452fbf1533db3941c5205e639f5281', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59bdf8d51c35bfea8450e74eaed892799bfa5700', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f954d10557ff02cc6a7ce0b75f74a7cc5b834bb8', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7950fab3927f7288b7993076457c72a491558878', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c54aeb729e84153696cf6305cb7955000799db8e', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82d65b97e8f2a08906b8900939dcd0be06c87669', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c274871133bb68d7a18493f27611dfdcc344c764', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f6d00ebd799667a2797b4469ff916e643c457d9', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5bb69dd0abc9e0edd88ba0559f0c60064370dc0', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b198246c9e949491914b930ade47771c3dc71251', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5daa43c86ca2aea6078de2176485e98cd049c5a3', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da9664fab4883bcc28dbc5552dc28853500892bb', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '383c47121586f5d772ae506f017778d0b1be2b2f', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a20c73e8757955a43899e7204e7071f0f98ae640', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83aa71aa5faa60407d9e9a103c1f68a8736d1076', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8589392e30af000fde32988cb56c697da558552', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f237c7f26f70aaa0efefdea63fe7c8abcdc2145', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec5ff5ac0735c5b9f7fa78b590007124418e0948', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac6dfd795dc479475187c5d03f23e39a366ed856', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bc7fea9988d4a48657384cd06facf0ec3288bdc', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '383cbe835e94d39141651d8d9369c38f720de453', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f51b48ae5744903bcaa49218f03f198eca2c6b9', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99d1ab16c772d34fd8012054323f176bd57fb481', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '294d20b7632cf1a40f57204f96a2f26ecf09dd4b', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c9d4da030a02462a28e72d57e6d3c7009cbe30', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18bc44ced97c29d3703706076af75989ec98fb06', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64a826628cd335ea94bcb4d1524eb4a620d89aac', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1870552433b016a6f7aa2f9591994b82ec56800e', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d72d0c17ed6c28ed34dd480fc15dd5a54984617', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7157e3c0b04d75233fde20204b7379ce1f5c9ee4', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd15db74c20158e43cf33e93522cd41ca49d7fc2', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8552cc48865afd53ff92f7b8e4e0da4daa830d4', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb95e9290a2d402ff5f4696a747a7578fce7331f', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '342bea66e312a7d67be28b97d51d18b46e0d765e', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9e5a3b15066e68122268632a2c304a084b38827', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a3896db12fa57ffd112fca217cdf464991ebdce', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '512f086609f3a83edd568a792148f52ed2c9c510', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '578b46f2a5ccc034d9bd4c93178f3eafa8bb3083', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}]",Sumit Sarin,27735438,,User,,86,,25,17
441575902,[JENKINS-62757] Introduce fingerprint migration in External Storage API,"<!-- Comment: 
A great PR typically begins with the line below.
Replace XXXXX with the numeric part of the issue's id you created on JIRA.
Please note that if you want your changes backported into LTS, you will need to create a JIRA ticket for it. Read https://jenkins.io/download/lts/#backporting-process for more.
-->
See [JENKINS-62757](https://issues.jenkins-ci.org/browse/JENKINS-62757).
See [JEP-226](https://github.com/jenkinsci/jep/tree/master/jep/226).

<!-- Comment: 
If the issue is not fully described in the ticket, add more information here (justification, pull request links, etc.).

 * We do not require JIRA issues for minor improvements.
 * Bugfixes should have a JIRA issue (backporting process).
 * Major new features should have a JIRA issue reference.
-->

### Proposed changelog entries

* Developer: Migration of fingerprints from local file based storage to configured external storage is introduced.

<!-- Comment: 
The changelogs will be integrated by the core maintainers after the merge.  See the changelog examples here: https://jenkins.io/changelog/ -->

### Proposed upgrade guidelines

N/A

### Submitter checklist

- [ ] (If applicable) Jira issue is well described
- [ ] Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). [Examples](https://github.com/jenkins-infra/jenkins.io/blob/master/content/_data/changelogs/weekly.yml)
  * Fill-in the `Proposed changelog entries` section only if there are breaking changes or other changes which may require extra steps from users during the upgrade
- [ ] Appropriate autotests or explanation to why this change has no tests
- [ ] For dependency updates: links to external changelogs and, if possible, full diffs

<!-- For new API and extension points: Link to the reference implementation in open-source (or example in Javadoc) -->

### Desired reviewers

@mention

<!-- Comment:
If you need an accelerated review process by the community (e.g., for critical bugs), mention @jenkinsci/code-reviewers
-->

### Maintainer checklist

Before the changes are marked as `ready-for-merge`: 

- [ ] There are at least 2 approvals for the pull request and no outstanding requests for change
- [ ] Conversations in the pull request are over OR it is explicit that a reviewer does not block the change
- [ ] Changelog entries in the PR title and/or `Proposed changelog entries` are correct
- [ ] Proper changelog labels are set so that the changelog can be generated automatically
- [ ] If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set and there is a `Proposed upgrade guidelines` section in the PR title. ([example](https://github.com/jenkinsci/jenkins/pull/4387))
- [ ] If it would make sense to backport the change to LTS, a Jira issue must exist, be a _Bug_ or _Improvement_, and be labeled as `lts-candidate` to be considered (see [query](https://issues.jenkins-ci.org/issues/?filter=12146)).
",True,4825,https://api.github.com/repos/jenkinsci/jenkins/pulls/4825,https://github.com/jenkinsci/jenkins/pull/4825,closed,172,5,2,18,3,8,2,0,"[{'name': 'ready-for-merge'}, {'name': 'rfe'}]",2020-06-29 18:23:05+00:00,2020-08-01 07:34:45+00:00,2812300.0,"32 days, 13:11:40","[{'comment_id': 453738153, 'comment_body': ""Shouldn't this be private? I'm curious why not have a mock for this object."", 'comment_created': datetime.datetime(2020, 7, 13, 15, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 453739832, 'comment_body': ""```suggestion\r\n     * In case an external storage is configured on top of a file system based storage: \r\n\r\n     1) External storage is...\r\n     2) If not found and fingerprint is present...\r\n```\r\n\r\nThis description is difficult to read, see above suggestion on how to refactor it (basically don't have one long run-on sentence here :))"", 'comment_created': datetime.datetime(2020, 7, 13, 15, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 453829775, 'comment_body': 'I want to re-use this class in another test also. Would you suggest creating this in a separate file? I think that would be better.\r\nSo would you suggest using something like Mockito for this?', 'comment_created': datetime.datetime(2020, 7, 13, 17, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 453836332, 'comment_body': 'I think using Mockito might be better (you get coverage on the actual class instead of your test class) and lighter-weight, no? ', 'comment_created': datetime.datetime(2020, 7, 13, 18, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 457784771, 'comment_body': 'The only problem I think is that I want to test the functionality too. IIUC Mockito will give me a placeholder, but it cannot act as an external storage, which I want to test if it is working or not.', 'comment_created': datetime.datetime(2020, 7, 21, 1, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 459694980, 'comment_body': 'Would be better to cache the storage implementations as local variables (current storage and then the Filesystem one). Apart from performance benefits, it reduces the chance of the logic exploding in unlikely case when the Storage gets reconfigured in the middle of the `load()` operation. Multi-threading 🤷 ', 'comment_created': datetime.datetime(2020, 7, 23, 20, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 459695544, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2020, 7, 23, 20, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 459840102, 'comment_body': 'I agree, thanks for pointing it out :) Done!', 'comment_created': datetime.datetime(2020, 7, 24, 3, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}]","[{'commit_sha': 'b2b1b27d37ca2f8761f85a42492d840d2570e99d', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c81dfb3904529dee26e2f11c1ca284d58ad1e682', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6080a6ea4beee3ca8a1fbbb61f601126ea5b463e', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d60c60938aae11b752878c6ead1016d489e260c', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bceec85d3976ab6d0d82179fca72d7d4afdb3db', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37482c80a1eda5c08486c681e4a0921b3c835aab', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf6089752af196a3f93d4c22cac6a7a61d4d1c58', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7a4e30d15dd0297bb7f2bb8f6860931d48b6063', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38dbfa81e9862b3ef93b521f0f6c4f1d4cbc6dd3', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6565ef747078648567091789b429b820bde0ce7d', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1cc4c91cf32382fdae027523fba4acad243b269', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a724fa3da2ed7a21e2fa2df4ae9e66016f319e47', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1a70243ee8f56ec90b28139fb7c14e4aac0d4ee', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0fdca2b4ecf3c293010712b0e497a005722f7da', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad67c33749895994d242c80a9410a554618b8a8', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '314f7bae9a1ae7dae4e3d840f640d33c319d1227', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2293db3130f5e1dc38fcb9d71f5f3b34fc21743', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b1e8ee17969a72dcc206b6f21f80dfb065a37ef', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}]",Sumit Sarin,27735438,,User,,86,,25,17
445913033,[JENKINS-63022] Make Fingerprint Storage Engine configurable from the config page,"<!-- Comment: 
A great PR typically begins with the line below.
Replace XXXXX with the numeric part of the issue's id you created on JIRA.
Please note that if you want your changes backported into LTS, you will need to create a JIRA ticket for it. Read https://jenkins.io/download/lts/#backporting-process for more.
-->
See [JENKINS-63022](https://issues.jenkins-ci.org/browse/JENKINS-63022).

<!-- Comment: 
If the issue is not fully described in the ticket, add more information here (justification, pull request links, etc.).

 * We do not require JIRA issues for minor improvements.
 * Bugfixes should have a JIRA issue (backporting process).
 * Major new features should have a JIRA issue reference.
-->

### Proposed changelog entries

* Developer: FingerprintStorage should now implemement descriptors, to make it configurable from the config page.
* User: User can choose the fingerprint storage engine from the config page.

<!-- Comment: 
The changelogs will be integrated by the core maintainers after the merge.  See the changelog examples here: https://jenkins.io/changelog/ -->

### Proposed upgrade guidelines

N/A

### Submitter checklist

- [x] (If applicable) Jira issue is well described
- [x] Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). [Examples](https://github.com/jenkins-infra/jenkins.io/blob/master/content/_data/changelogs/weekly.yml)
  * Fill-in the `Proposed changelog entries` section only if there are breaking changes or other changes which may require extra steps from users during the upgrade
- [ ] Appropriate autotests or explanation to why this change has no tests
- [ ] For dependency updates: links to external changelogs and, if possible, full diffs

<!-- For new API and extension points: Link to the reference implementation in open-source (or example in Javadoc) -->

### Desired reviewers

@mention

<!-- Comment:
If you need an accelerated review process by the community (e.g., for critical bugs), mention @jenkinsci/code-reviewers
-->

### Maintainer checklist

Before the changes are marked as `ready-for-merge`: 

- [ ] There are at least 2 approvals for the pull request and no outstanding requests for change
- [ ] Conversations in the pull request are over OR it is explicit that a reviewer does not block the change
- [ ] Changelog entries in the PR title and/or `Proposed changelog entries` are correct
- [ ] Proper changelog labels are set so that the changelog can be generated automatically
- [ ] If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set and there is a `Proposed upgrade guidelines` section in the PR title. ([example](https://github.com/jenkinsci/jenkins/pull/4387))
- [ ] If it would make sense to backport the change to LTS, a Jira issue must exist, be a _Bug_ or _Improvement_, and be labeled as `lts-candidate` to be considered (see [query](https://issues.jenkins-ci.org/issues/?filter=12146)).
",True,4834,https://api.github.com/repos/jenkinsci/jenkins/pulls/4834,https://github.com/jenkinsci/jenkins/pull/4834,closed,192,4,6,34,7,22,4,0,"[{'name': 'ready-for-merge'}, {'name': 'rfe'}, {'name': 'squash-merge-me'}, {'name': 'developer'}]",2020-07-08 03:43:24+00:00,2020-07-17 14:14:09+00:00,815445.0,"9 days, 10:30:45","[{'comment_id': 451860190, 'comment_body': 'This part does not seem right. IIRC usage of section does not lead to JSON groouping IIRC. Likely you would get null in this conversion', 'comment_created': datetime.datetime(2020, 7, 8, 22, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 451860635, 'comment_body': 'Dropdown describable selector might be more convenient from the UI standpoint. No strong opinio ', 'comment_created': datetime.datetime(2020, 7, 8, 22, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 451947798, 'comment_body': 'That seems to be working fine', 'comment_created': datetime.datetime(2020, 7, 9, 3, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 452658020, 'comment_body': ""Something's not right here if you have to do this, the configure method should only contain: https://www.jenkins.io/doc/developer/forms/structured-form-submission/#databinding"", 'comment_created': datetime.datetime(2020, 7, 10, 7, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 452658309, 'comment_body': 'I don\'t think you need name and it\'s probably why the json is getting nested\r\n```suggestion\r\n    <f:section title=""${%Fingerprints}"">\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 7, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 452854363, 'comment_body': 'Thanks @timja!', 'comment_created': datetime.datetime(2020, 7, 10, 13, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 452872888, 'comment_body': ""should this be shown at all if there's only the built in fingerprint storage available?"", 'comment_created': datetime.datetime(2020, 7, 10, 14, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 452873645, 'comment_body': 'I had the same thing in mind, I think we should not', 'comment_created': datetime.datetime(2020, 7, 10, 14, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 452877217, 'comment_body': ""it would be the best UX imo, no need to show data to the user that they can't do anything with"", 'comment_created': datetime.datetime(2020, 7, 10, 14, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453350671, 'comment_body': 'Disabled Fingerprint storage impl is a great idea IMHO, but not sure it is a good default here', 'comment_created': datetime.datetime(2020, 7, 12, 18, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 453350769, 'comment_body': 'I doubt this is needed for an abstract class. Am I missing something?', 'comment_created': datetime.datetime(2020, 7, 12, 18, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 453352001, 'comment_body': 'Better to use ""LOGGER"" for static final fields', 'comment_created': datetime.datetime(2020, 7, 12, 19, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'oleg-nenashev', 'type': 'User'}, {'comment_id': 453390050, 'comment_body': 'What would you suggest? `Local Disk Storage`, `File Fingerprint Storage` seem like other few options. ', 'comment_created': datetime.datetime(2020, 7, 13, 1, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 453390141, 'comment_body': 'https://github.com/jenkinsci/redis-fingerprint-storage-plugin/pull/36#discussion_r453000145', 'comment_created': datetime.datetime(2020, 7, 13, 1, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 453427139, 'comment_body': '`LocalFileStorage` would be my vote', 'comment_created': datetime.datetime(2020, 7, 13, 4, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'afalko', 'type': 'User'}, {'comment_id': 453454117, 'comment_body': 'This is the line you would need to change to be ‘storage’ not the symbol you added above', 'comment_created': datetime.datetime(2020, 7, 13, 6, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453690458, 'comment_body': 'Fixed :)\r\n', 'comment_created': datetime.datetime(2020, 7, 13, 14, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 453724289, 'comment_body': 'did you mean to commit this?', 'comment_created': datetime.datetime(2020, 7, 13, 15, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 453740049, 'comment_body': 'woah no, my apologies.', 'comment_created': datetime.datetime(2020, 7, 13, 15, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 453780547, 'comment_body': '@oleg-nenashev would be great to hear your vote too :)', 'comment_created': datetime.datetime(2020, 7, 13, 16, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}, {'comment_id': 454514495, 'comment_body': 'Local fingerprint storage?', 'comment_created': datetime.datetime(2020, 7, 14, 17, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'timja', 'type': 'User'}, {'comment_id': 455050130, 'comment_body': 'I am changing it to `Local Fingerprint Storage`, mainly due to the face that it goes along with the plugin being called `Redis Fingerprint Storage`. But I am happy to change it if there are other strong opinions.', 'comment_created': datetime.datetime(2020, 7, 15, 13, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'stellargo', 'type': 'User'}]","[{'commit_sha': '3580e0e004568c0bf2f1bc686ad472cfbad6ee81', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba3788ce7aee895183b1e2a96cfb2a4123dc63f6', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1474ad9c8e9d458da1d3a6a3bb318d1cf2c58771', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71729790e42f01455b0a0c195a2548c2f9ba45c0', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf0726690210477c0782b6f863fbfaa113eb2aab', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c99b0e58e8a7c4899cead5054f347f3c3e25db0', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a50bb967f5bca40722f8960b7dab3de97bcd4f3', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7de94e75f51db01249810d07d6514b169c17aa35', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29cb97ba047efbc39bdab8e2cf664fdfe36541f5', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16453738f31ff83bf61129f3606be6170317582a', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf7828c7a3c531c84608db80f39e43b4e174dac3', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4bcd650d9fc4a38b09e39c2d8d390a41de19a68', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74d9e027bcd571939c2eb28cdb8d5da0c07a0d04', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b855c9d75ba2d82c735d7183ff19e7e9db20dbf', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3839a1bd5b24996f5ce947af133c0aaa0bbc548', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adc4ab40009c775aac601d7c33ca20aa0dcb0a0c', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6883f61cf382dc89547c5162992a21da41f98bb', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1158b47a2ab896c3ba3522902910b39ade8fb38', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '622ed303f50fdb3ae3e1c6f74a7636b34575a9d0', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dce32c9cd627ecc739b4cb30cf6fbaa8d4bdb41c', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e90a59061cd4779738e144957d53dc6846f65334', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da209e21e5d6950f116f558482575b376f0dbba1', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd232695f53b37a4e33b37873925b0aaccb6beb47', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ed391051584cf0e5eb06a7c8d02e662e9dd86b2', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '748b7477a3140771347acd3caae7024e7c2cbb92', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0db94ecc44d625fd85990b1dcfe64dfb0bdc695', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc10ff80d301bbe1aff7427d9028b79e138586d7', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9f1acfdc11ad56529c8bf3908e8d0e1532171ee', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a0baa26f8a257641ebdc8eda3ffb131288d3b21', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40dba11c77cc272818db609f35cd67500d0c0168', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '106dd78a1b10e16f40a85566350295ef7142ce6d', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dee952d9648ed61e9c5090e32589e587def929b', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b25938ec9723df438cf0bcf0966abad2fd71c689', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e91381eb5ae63cb64e22a18fe98f318c36458a62', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}]",Sumit Sarin,27735438,,User,,86,,25,17
460231404,Expose fingerprint methods for plugins,"<!-- Comment: 
A great PR typically begins with the line below.
Replace XXXXX with the numeric part of the issue's id you created on JIRA.
Please note that if you want your changes backported into LTS, you will need to create a JIRA ticket for it. Read https://jenkins.io/download/lts/#backporting-process for more.
-->

<!-- Comment: 
If the issue is not fully described in the ticket, add more information here (justification, pull request links, etc.).

 * We do not require JIRA issues for minor improvements.
 * Bugfixes should have a JIRA issue (backporting process).
 * Major new features should have a JIRA issue reference.
-->

### Proposed changelog entries

* Developer: Expose fingerprint range set serialization methods for plugins

<!-- Comment: 
The changelogs will be integrated by the core maintainers after the merge.  See the changelog examples here: https://jenkins.io/changelog/ -->

### Proposed upgrade guidelines

N/A

### Submitter checklist

- [ ] (If applicable) Jira issue is well described
- [ ] Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). [Examples](https://github.com/jenkins-infra/jenkins.io/blob/master/content/_data/changelogs/weekly.yml)
  * Fill-in the `Proposed changelog entries` section only if there are breaking changes or other changes which may require extra steps from users during the upgrade
- [ ] Appropriate autotests or explanation to why this change has no tests
- [ ] For dependency updates: links to external changelogs and, if possible, full diffs

<!-- For new API and extension points: Link to the reference implementation in open-source (or example in Javadoc) -->

### Desired reviewers

@mention

<!-- Comment:
If you need an accelerated review process by the community (e.g., for critical bugs), mention @jenkinsci/code-reviewers
-->

### Maintainer checklist

Before the changes are marked as `ready-for-merge`: 

- [ ] There are at least 2 approvals for the pull request and no outstanding requests for change
- [ ] Conversations in the pull request are over OR it is explicit that a reviewer does not block the change
- [ ] Changelog entries in the PR title and/or `Proposed changelog entries` are correct
- [ ] Proper changelog labels are set so that the changelog can be generated automatically
- [ ] If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set and there is a `Proposed upgrade guidelines` section in the PR title. ([example](https://github.com/jenkinsci/jenkins/pull/4387))
- [ ] If it would make sense to backport the change to LTS, a Jira issue must exist, be a _Bug_ or _Improvement_, and be labeled as `lts-candidate` to be considered (see [query](https://issues.jenkins-ci.org/issues/?filter=12146)).
",True,4888,https://api.github.com/repos/jenkinsci/jenkins/pulls/4888,https://github.com/jenkinsci/jenkins/pull/4888,closed,15,22,2,17,9,0,3,0,"[{'name': 'ready-for-merge'}, {'name': 'squash-merge-me'}, {'name': 'developer'}]",2020-07-31 15:07:47+00:00,2020-08-12 15:09:22+00:00,1036895.0,"12 days, 0:01:35",[],"[{'commit_sha': '2f87fe77ff1fbd236acc3f0cfc69922de3788f88', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd59b24eccc17b46561f2ca03a495d2613932f5e3', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00afb2e34a916c5d792095ec804b4093235ba3e5', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb0bdd06de9690684613b2b407bcf0ebf5eb822', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33488646e4a3ea6f8a3b14859d69aa195083c11d', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '286ba99a8ab86f151f8bc2bf914179cf26b254b2', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e0864e96e70e7a42e90d5e3acd82ee901e5e3f8', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08e3de5895d7c4c4377720be0f26cf94e8fddd7c', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1682ce787a2c1aeefe9eb54b8679c64dfb4d169', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48de38b73e44b012fa40034249137e4151cb2a31', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bf24c3dec73a572a22e4006cb3dbe03d5812179', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37621cf9b424706da44161d45eea2fda0f457b62', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c40b9d08b347295690664659891dbb6b11d4eb3e', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0c55e4abcfe6d54fd35840aaf082c896e28083e', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6bb2b62e7ab818a7bf76f7207aebed00cae8985', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25ff27ef52ac0fbca89ded063c04cd490375c918', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec30cbc07a184dabc5384c0691455d5d1101bf9e', 'committer_username': 'stellargo', 'committer_name': 'Sumit Sarin', 'committer_email': None, 'commit_date': datetime.datetime(2017, 4, 18, 16, 48, 1, tzinfo=datetime.timezone.utc)}]",Sumit Sarin,27735438,,User,,86,,25,17

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
1103607,jenkins,jenkinsci/jenkins,Java,8654,22843,859,1116,35245,77,43,77,"[{'id': 464788454, 'number': 4903, 'closed': datetime.datetime(2020, 8, 11, 16, 40, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 19, 48, 3, tzinfo=datetime.timezone.utc), 'time_taken': 334337.0, 'time_delta': '3 days, 20:52:17', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 464773559, 'number': 4902, 'closed': datetime.datetime(2020, 8, 8, 11, 26, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 19, 7, 17, tzinfo=datetime.timezone.utc), 'time_taken': 58780.0, 'time_delta': '16:19:40', 'additions': 6, 'deletions': 3, 'state': 'closed'}, {'id': 460231404, 'number': 4888, 'closed': datetime.datetime(2020, 8, 12, 15, 9, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 15, 7, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1036895.0, 'time_delta': '12 days, 0:01:35', 'additions': 15, 'deletions': 22, 'state': 'closed'}, {'id': 456592673, 'number': 4875, 'closed': datetime.datetime(2020, 7, 25, 18, 41, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 25, 9, 30, 49, tzinfo=datetime.timezone.utc), 'time_taken': 33021.0, 'time_delta': '9:10:21', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 445913033, 'number': 4834, 'closed': datetime.datetime(2020, 7, 17, 14, 14, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 3, 43, 24, tzinfo=datetime.timezone.utc), 'time_taken': 815445.0, 'time_delta': '9 days, 10:30:45', 'additions': 192, 'deletions': 4, 'state': 'closed'}, {'id': 441575902, 'number': 4825, 'closed': datetime.datetime(2020, 8, 1, 7, 34, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 18, 23, 5, tzinfo=datetime.timezone.utc), 'time_taken': 2812300.0, 'time_delta': '32 days, 13:11:40', 'additions': 172, 'deletions': 5, 'state': 'closed'}, {'id': 438143161, 'number': 4817, 'closed': datetime.datetime(2020, 7, 21, 4, 20, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 19, 48, 58, tzinfo=datetime.timezone.utc), 'time_taken': 2449910.0, 'time_delta': '28 days, 8:31:50', 'additions': 322, 'deletions': 113, 'state': 'closed'}, {'id': 423683186, 'number': 4749, 'closed': datetime.datetime(2020, 5, 29, 8, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 27, 8, 11, 52, tzinfo=datetime.timezone.utc), 'time_taken': 172328.0, 'time_delta': '1 day, 23:52:08', 'additions': 4, 'deletions': 8, 'state': 'closed'}, {'id': 419673243, 'number': 4731, 'closed': datetime.datetime(2020, 6, 22, 7, 42, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 18, 18, 37, 42, tzinfo=datetime.timezone.utc), 'time_taken': 2984667.0, 'time_delta': '34 days, 13:04:27', 'additions': 507, 'deletions': 173, 'state': 'closed'}, {'id': 388469120, 'number': 4579, 'closed': datetime.datetime(2022, 4, 7, 3, 30, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 14, 22, 47, 57, tzinfo=datetime.timezone.utc), 'time_taken': 65076176.0, 'time_delta': '753 days, 4:42:56', 'additions': 178, 'deletions': 8, 'state': 'closed'}, {'id': 388298799, 'number': 4577, 'closed': datetime.datetime(2020, 4, 4, 9, 27, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 14, 13, 7, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1801209.0, 'time_delta': '20 days, 20:20:09', 'additions': 60, 'deletions': 5, 'state': 'closed'}, {'id': 372101393, 'number': 4478, 'closed': datetime.datetime(2020, 3, 1, 6, 26, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 6, 20, 39, 12, tzinfo=datetime.timezone.utc), 'time_taken': 2022422.0, 'time_delta': '23 days, 9:47:02', 'additions': 31, 'deletions': 1, 'state': 'closed'}]"
