pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
430995084,Prototype for notebook generator,"## Contributor Checklist:

* [x] I have added or updated my entry in [the creators.json file](https://github.com/LiberTEM/LiberTEM/blob/master/packaging/creators.json)
* [x] I have added [a changelog entry](https://github.com/LiberTEM/LiberTEM/tree/master/docs/source/changelog) for my contribution
* [x] I have added/updated documentation for all user-facing changes
* [x] I have added/updated test cases
* [x] I have included the [rebuilt production build of the client](https://libertem.github.io/LiberTEM/contributing.html?#building-the-client) (only if
changes were made to the GUI)

",True,801,https://api.github.com/repos/LiberTEM/LiberTEM/pulls/801,https://github.com/LiberTEM/LiberTEM/pull/801,closed,9684,84,69,27,69,69,2,0,"[{'name': 'enhancement'}, {'name': 'GSOC'}]",2020-06-08 09:33:08+00:00,2020-07-24 13:21:44+00:00,3988116.0,"46 days, 3:48:36","[{'comment_id': 440124903, 'comment_body': ""Using the metaclass argument deserves a detailed comment since it is not clear what it does and why one would use it for most Python programmers, including me. Even after reading documentation on it, I don't fully understand this rather arcane feature of Python. That doesn't mean one shouldn't use it, it just has to be explained well to keep the code readable!"", 'comment_created': datetime.datetime(2020, 6, 15, 11, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 440126604, 'comment_body': 'Where is the return value of this used? I can only find a deleted code portion.', 'comment_created': datetime.datetime(2020, 6, 15, 12, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 440128093, 'comment_body': '...as soon as it is clear what this does and why, we should discuss if there is maybe a way to achieve the same goal with more common programming patterns, CC @sk1p .', 'comment_created': datetime.datetime(2020, 6, 15, 12, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 440132541, 'comment_body': ""The alternative is not as elegant, that would be explicit registration (`Aanlysis.register('SOME_NAME', SomeAnalysisClass)`), or a central list of all available analyses, like we have for the `DataSet`s. This registry pattern is actually one of the most common metaclass uses, and is often used as an example in tutorials and books. I also use it for the registry of download formats, for example."", 'comment_created': datetime.datetime(2020, 6, 15, 12, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 440133711, 'comment_body': 'Ok, in that case a comment pointing to a concise explanation would be good! :-)', 'comment_created': datetime.datetime(2020, 6, 15, 12, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 440269526, 'comment_body': 'There is actually a new feature available since Python 3.6, which is the `__init_subclass__` method. That can be used as a shorter alternative, and we can skip the metaclass explanations: https://stackoverflow.com/a/50099920/540644\r\n\r\nStill not a very well known feature, but a bit less code needed, and possibly more straight-forward to understand. If we decide on that version, the download format registry should also be changed, so we have some consistency.', 'comment_created': datetime.datetime(2020, 6, 15, 15, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 440301107, 'comment_body': '> (...) `__init_subclass__` method (...)\r\n\r\nOh, *that* looks neat and straight to the point. Much more intuitive. :+1:', 'comment_created': datetime.datetime(2020, 6, 15, 16, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 440310671, 'comment_body': 'So I will change it :)', 'comment_created': datetime.datetime(2020, 6, 15, 16, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 440764991, 'comment_body': ""I have not tried your prototype yet, but doesn't this mean `roi_params` also contains all other analysis parameters?"", 'comment_created': datetime.datetime(2020, 6, 16, 10, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 440766229, 'comment_body': 'Hmm, can we rename `type_`? Like this, there are two ""types"" for an analysis, this one and the UDF/JOB one. Maybe `id_` or `name` also fits?', 'comment_created': datetime.datetime(2020, 6, 16, 11, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 440766301, 'comment_body': 'Empty parens can be removed here', 'comment_created': datetime.datetime(2020, 6, 16, 11, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 440792755, 'comment_body': ""It's the parameters for `get_roi()`, example [notebook](https://github.com/LiberTEM/LiberTEM/blob/01f3569f9166c60550f1a20ddb32a2e2cb890dfe/prototypes/notebook-generator/comp_analysis_notebook.ipynb)."", 'comment_created': datetime.datetime(2020, 6, 16, 11, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 440798396, 'comment_body': 'will go with `id_`', 'comment_created': datetime.datetime(2020, 6, 16, 12, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 440842586, 'comment_body': 'Ok, but if the analysis has more parameters than just the `roi`, how is that handled? I think this may be the case for one of the FFT analyses? `SumfftAnalysis`?', 'comment_created': datetime.datetime(2020, 6, 16, 13, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 440896360, 'comment_body': 'does the `sumfftAnalysis` have `roi` as parameter?', 'comment_created': datetime.datetime(2020, 6, 16, 14, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 440952422, 'comment_body': 'Yes, as it is a subclass of the `SumAnalysis`. IIRC all analyses that have a `sig`-shaped result support ROIs, and you can check by using the ROI dropdown in the GUI', 'comment_created': datetime.datetime(2020, 6, 16, 15, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 441046583, 'comment_body': '![fft_analysis](https://user-images.githubusercontent.com/59721339/84811400-6e11d980-b02a-11ea-8063-9fa20d714e37.png)\r\nROI dropdown is missing ', 'comment_created': datetime.datetime(2020, 6, 16, 18, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 441076652, 'comment_body': 'Ah, so it was never added to the FFT analysis in the GUI. But you can use your imagination: \r\n\r\n![image](https://user-images.githubusercontent.com/5778/84815933-0a7cb180-b014-11ea-8586-f00a0088af99.png)\r\n\r\nThese are the analysis parameters; if there was a `roi`, there would also be a `roi` key under parameters, in addition to the `real_*` ones here:\r\n\r\n![image](https://user-images.githubusercontent.com/5778/84816144-5596c480-b014-11ea-9e4b-45d98fb12b82.png)', 'comment_created': datetime.datetime(2020, 6, 16, 19, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 441468163, 'comment_body': 'need help for plotting :)', 'comment_created': datetime.datetime(2020, 6, 17, 11, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 441745503, 'comment_body': '\r\n![rad_to_upload](https://user-images.githubusercontent.com/59721339/84935303-1fca0c80-b0f6-11ea-9aee-db57f0642cd0.png)\r\n\r\nWhich one should I choose `ctx.run()` or `ctx.run_udf()`\r\n', 'comment_created': datetime.datetime(2020, 6, 17, 18, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 443444882, 'comment_body': 'The UDF is just an `ApplyMasksUDF`. The ""magic"" is in creating a suitable sparse mask stack and interpreting the result. For that reason I\'d first go with the Analysis in the notebook and maybe adding a comment to have a look at `RadialFourierAnalysis.get_mask_factories()` and `RadialFourierAnalysis.get_results()` if someone is interested in the inner workings of this analysis.', 'comment_created': datetime.datetime(2020, 6, 22, 9, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 443446946, 'comment_body': ""...ah, and for all questions regarding plotting for a specific Analysis, `get_results()` always contains the appropriate plotting functions. `visualize_simple()` is mostly `imshow()`, and anything that doesn't fit that pattern will be implemented or imported there."", 'comment_created': datetime.datetime(2020, 6, 22, 9, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 443492923, 'comment_body': ""Why is this needed? Shouldn't the registry be used for this?"", 'comment_created': datetime.datetime(2020, 6, 22, 11, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 443493710, 'comment_body': 'Is this division necessary? `imshow` should already normalize, right? For center of mass, there are a few more interesting plots you can do for the results, like `curl`, `divergence` and a field visualization; possibly could add some of them here, too.', 'comment_created': datetime.datetime(2020, 6, 22, 11, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 443510873, 'comment_body': 'Oops! Download feature was a different branch merged into this. I must have done something wrong while merging.', 'comment_created': datetime.datetime(2020, 6, 22, 12, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 443519972, 'comment_body': '![no_image](https://user-images.githubusercontent.com/59721339/85286859-05ef4780-b4b1-11ea-95d7-6db29e8d7441.png)\r\n\r\n>\r\n>possibly could add some of them here, too.\r\n\r\nOkay, then I have to switch to `ctx.run()`', 'comment_created': datetime.datetime(2020, 6, 22, 12, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 444196343, 'comment_body': '> then I have to switch to ctx.run()\r\n\r\nOr use the appropriate post-processing functions', 'comment_created': datetime.datetime(2020, 6, 23, 12, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 444196851, 'comment_body': ""Regarding the plot, what shape does `com_result['intensity']` have? And what dtype?"", 'comment_created': datetime.datetime(2020, 6, 23, 12, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 444197191, 'comment_body': 'Ah, yeah, that happens :)', 'comment_created': datetime.datetime(2020, 6, 23, 12, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 444199840, 'comment_body': 'Style nitpick: class names should start with an upper case letter', 'comment_created': datetime.datetime(2020, 6, 23, 12, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 444201887, 'comment_body': 'The content-type should be [a valid mime type](https://jupyter.readthedocs.io/en/latest/reference/mimetype.html)', 'comment_created': datetime.datetime(2020, 6, 23, 12, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 444202514, 'comment_body': 'For the final version, it would be very nice to have a more descriptive name, possibly referencing the data set and the chosen analysis. This could be fixed in the result download code at the same time, once a naming scheme has been decided on.', 'comment_created': datetime.datetime(2020, 6, 23, 12, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 444204900, 'comment_body': 'These should all be already ignored by the main gitignore, right? This probably comes from the move from your own repository to here', 'comment_created': datetime.datetime(2020, 6, 23, 13, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 444207639, 'comment_body': 'If you are adding helpful descriptions for each analysis, maybe it would be good to also display those in the GUI, maybe available as an ""about analysis"" button as very short online help? That would be very nice!', 'comment_created': datetime.datetime(2020, 6, 23, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 444273119, 'comment_body': 'Yes, there is no need for this `.gitignore`', 'comment_created': datetime.datetime(2020, 6, 23, 14, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 444276751, 'comment_body': '`<BufferWrapper kind=nav dtype=float32 extra_shape=(3,)>`', 'comment_created': datetime.datetime(2020, 6, 23, 14, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 444292573, 'comment_body': 'This function is repeated, what would be the best practice.', 'comment_created': datetime.datetime(2020, 6, 23, 14, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 444299508, 'comment_body': ""I was trying to get docs as @uellue suggested, from `Context`. I will add descriptions for analysis which doesn't have right now."", 'comment_created': datetime.datetime(2020, 6, 23, 15, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 444300712, 'comment_body': ""That's good! I mean where the description comes from doesn't really matter - what I'm saying is that it would be very cool to **also** display it in the GUI, if we already have it available for generating the notebooks"", 'comment_created': datetime.datetime(2020, 6, 23, 15, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 444302522, 'comment_body': 'Okay, that means you have something like `(256, 256, 3)` (assuming a signal shape of `(256, 256)` - if you just put that unchanged into `imshow`, it will be interpreted as RGB data, which is not correct (and the reason for the strange error message). There needs to be some post-processing code here!', 'comment_created': datetime.datetime(2020, 6, 23, 15, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 444303225, 'comment_body': '> There needs to be some post-processing code here!\r\n\r\n... or work towards the `get_results` UDF method: #628 ', 'comment_created': datetime.datetime(2020, 6, 23, 15, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 445391306, 'comment_body': 'One possibility would be to make `template` a class instead of a list of strings, and put `format` on it as a method. Then it will be available everywhere you have a template instance.\r\n\r\nOr you could extract it as a module-level function you import from wherever you need it', 'comment_created': datetime.datetime(2020, 6, 25, 8, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 447087234, 'comment_body': 'Why is this here? It looks like something specific to the cluster analysis? In that case it should be close to there and not in a general part of the code.\r\n\r\nGenerally, as already mentioned above, would it perhaps be possible to refactor this ""temp_cluster_controller"" and the actual controller in clust.py in such a way that they share most of the code and that the source code is pulled from the actual implementation by introspection instead of duplicating it?', 'comment_created': datetime.datetime(2020, 6, 29, 16, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 447589156, 'comment_body': 'Is this what you are suggesting @uellue , we have to care about template when changing the `controller`.', 'comment_created': datetime.datetime(2020, 6, 30, 10, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 447649656, 'comment_body': ""That's already an improvement since it is more likely to break if `controller()` is changed without synchronizing with `temp_cluster_controller()` as soon as the generated notebooks are run in CI.\r\n\r\nEven better would be to refactor `controller()`. The text replacement is already a good start.\r\n\r\nPossible ideas:\r\n\r\n* Move as much functionality as reasonably possible from `controller()` to individual helper methods of the analysis.\r\n  * Instantiating UDFs\r\n  * Interpreting parameters\r\n  * Interpreting UDF results\r\n* Parametrize aspects that are different, such as `self` vs. a variable for the analysis object\r\n* Turn `controller()` into a wrapper that mostly calls a function that looks similar to the current `temp_cluster_controller()` output, i.e. with `self` as a parameter for the analysis, same for dataset etc.\r\n\r\nThe main points where the controller and the notebook script contents are inherently different is the method for running UDFs: sync vs. async. It seems that the analysis doesn't do too much interesting stuff here, apparently just running the UDF and getting the result in the end. @sk1p can that perhaps be parametrized or abstracted away somehow, ideally that there is just a `ctx.run_udf(...)` in the source code and we somehow mock what `ctx` is in this case so that it works when we call from `controller()` in the async case?\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 30, 12, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 447655056, 'comment_body': ""Anyway, that's a bit fiddly and better left for the second iteration. From my gut feeling this will be solvable in the current framework of your code one way or another, which is the main point: Changes here will not affect the notebook implementation in the other analyses."", 'comment_created': datetime.datetime(2020, 6, 30, 12, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 450178689, 'comment_body': 'Just a small wording suggestion. ""Compound analysis"" is a term used internally in the LiberTEM code base, but not in the GUI.\r\n\r\n```suggestion\r\nYou can also download a Jupyter notebook corresponding to the analysis and\r\ncontinue working with the same parameters using scripting.\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 12, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 450193953, 'comment_body': 'How do you make sure that these defaults are always correct, also in the future in case something changes in the LiberTEM API?\r\n\r\nOne reason for CI is to catch the impact of changes on other subsystems so that the code base stays consistent with itself. For that reason the notebook tests should trigger an error in case the LiberTEM API changes without changing the corresponding notebook generation code. Right now, these tests have the _opposite_ behavior, if I understand correctly: They pass if the LiberTEM API changes without adapting the notebook generation (broken state), and they fail if you change the LiberTEM API and the notebook generation together (correct state). For that reason it is essential to actually run the generated notebooks and verify that they pass without errors.\r\n\r\nIf possible, tests should also verify that the notebook generates the intended result, i.e. generate the same figure or numerical output as the corresponding analysis in the GUI. Perhaps this can be combined with something in `tests/server/test_download.py`? Just as an idea, one could add code to the notebook that generates a validation output from the previous commands, such as saving a figure and/or data to file. This can then be compared with the results download from the analysis.\r\n\r\nDid you have a look at https://deeplearning.lipingyang.org/2018/03/28/run-jupyter-notebook-script-from-terminal/ already?', 'comment_created': datetime.datetime(2020, 7, 6, 12, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 450194351, 'comment_body': 'See previous comment!', 'comment_created': datetime.datetime(2020, 7, 6, 12, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 450194419, 'comment_body': 'See previous comment!', 'comment_created': datetime.datetime(2020, 7, 6, 12, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 450194460, 'comment_body': 'See previous comment!', 'comment_created': datetime.datetime(2020, 7, 6, 12, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 450194573, 'comment_body': 'See previous comment!', 'comment_created': datetime.datetime(2020, 7, 6, 12, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 450194835, 'comment_body': 'See previous comment!', 'comment_created': datetime.datetime(2020, 7, 6, 12, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 450194956, 'comment_body': 'See previous comment!', 'comment_created': datetime.datetime(2020, 7, 6, 12, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 450194994, 'comment_body': 'See previous comment!', 'comment_created': datetime.datetime(2020, 7, 6, 12, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 450195028, 'comment_body': 'See previous comment!', 'comment_created': datetime.datetime(2020, 7, 6, 12, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 450195071, 'comment_body': 'See previous comment!', 'comment_created': datetime.datetime(2020, 7, 6, 12, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 450260317, 'comment_body': '> For that reason it is essential to actually run the generated notebooks and verify that they pass without errors.\r\n\r\nThank you, Now I have a better understanding of the testing.\r\n\r\n>Did you have a look at https://deeplearning.lipingyang.org/2018/03/28/run-jupyter-notebook-script-from-terminal/ already?\r\n\r\nI think `nbconvert` would be good :+1: ', 'comment_created': datetime.datetime(2020, 7, 6, 14, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 451430549, 'comment_body': ""> If possible, tests should also verify that the notebook generates the intended result\r\n\r\nFor implementing this, as you suggested an extra cell for saving the result would makes this easy. `nbconvert` doesn't offer a way to access the result from notebook. If there is no other problem I will add this in the next iteration."", 'comment_created': datetime.datetime(2020, 7, 8, 10, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 452088292, 'comment_body': ""> `nbconvert` doesn't offer a way to access the result from notebook.\r\n\r\nIn the test environment you can use the fixture `tmpdir_factory` to generate temporary directories. In `conftest.py` you can see it in action, for example. One can then generate a directory from that fixture and add a cell to the notebook that explicitly saves relevant results to files in that directory, for example using [numpy.save()](https://numpy.org/doc/stable/reference/generated/numpy.save.html#numpy.save). In the test routine you can then just load the file contents from that location and compare them with the result of the analysis. That way you don't have to access variables within the notebook.\r\n\r\nSince that is (hopefully) not too difficult and at the same time very important to verify the correctness of the generated notebooks, perhaps you can give it a try for this iteration?"", 'comment_created': datetime.datetime(2020, 7, 9, 9, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 453600214, 'comment_body': '```\r\n# FIXME write and include documentation\r\n```\r\n\r\nJust as a reminder for later we can add a FIXME here.', 'comment_created': datetime.datetime(2020, 7, 13, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 453622879, 'comment_body': 'Is there a specific reason for catching the `CellExecutionError` and then causing an `AssertionError` instead? Perhaps you can just let the exception ""fall through""? That would improve the error reporting in pytest as well since it can report on the original exception instead of a generic assert fail.\r\n\r\nSame applies for all other template tests, of course.', 'comment_created': datetime.datetime(2020, 7, 13, 12, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 453764340, 'comment_body': 'Yes, No need for the exception.', 'comment_created': datetime.datetime(2020, 7, 13, 16, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 455742745, 'comment_body': 'Instead of using the internal `get_roi()` method you can use `masks.circular()` or `masks.rectangular()` to draw the masks. Those two methods are included in the reference, so you can import and use them. At the time you are generating the notebook you know if it is a rectangle or a circle, so you can include the appropriate code.', 'comment_created': datetime.datetime(2020, 7, 16, 12, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 458129236, 'comment_body': 'This is the last remaining instance that should plot the data instead of the visualized result. :-)\r\n\r\nFor the field you can use the Cubehelix plot from `empyre` like for Radial Fourier Analysis, and the two other ones are just `imshow()`.', 'comment_created': datetime.datetime(2020, 7, 21, 14, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 458679726, 'comment_body': ""Using `--user` here means running the tests will change the user's ipython configuration, and may conflict with an existing ipython kernel called `libertem-kernel` (it creates a directory under `~/.local/share/jupyter/kernels`). Is it maybe possible to use `ipykernel install --sys-prefix` instead? That would only modify the tox environment and put the kernel configuration into `$VIRTUAL_ENV/share/jupyter/kernels`, which would not conflict with the user's configuration.\r\n\r\nRunning the tests outside of tox (with plain pytest) seems to work for me, too, without having the jupyter kernel installed, or is that just coincidence? Also, you have `kernel='libertem-env'` in the tests, and create `libertem-kernel` here, so there seems to be some mismatch. As a note, when running via tox, I get the following in the logs:\r\n\r\n```\r\n2020-07-22 11:56:11 INFO Executing notebook with kernel: python\r\n```"", 'comment_created': datetime.datetime(2020, 7, 22, 10, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 458973020, 'comment_body': '> Running the tests outside of tox (with plain pytest) seems to work for me, too, without having the jupyter kernel installed, or is that just coincidence?\r\n\r\nI already had a jupyter kernel `libertem-env`, so I was able to run plain pytest without any problem. When I tried to run the test using tox, it was failing because of the missing kernel. So I added the instruction to set up a new jupyter kernel and all tests were working fine.', 'comment_created': datetime.datetime(2020, 7, 22, 17, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 458980829, 'comment_body': '> 2020-07-22 11:56:11 INFO Executing notebook with kernel: python\r\n\r\nI too get this log message, even after matching the kernel name. I have no idea how this happens.', 'comment_created': datetime.datetime(2020, 7, 22, 17, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 458997702, 'comment_body': ""I also get the following warning:\r\n\r\n\r\n```\r\ntests/template/test_sd_template.py::test_sd_default\r\ntests/template/test_sd_template.py::test_sd_roi\r\n  /home/alex/.virtualenvs/notebook-generator/lib/python3.8/site-packages/traitlets/config/configurable.py:73: DeprecationWarning: Passing unrecoginized arguments to super(ExecutePreprocessor).__init__(kernel='libertem-env').\r\n  object.__init__() takes exactly one argument (the instance to initialize)\r\n  This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.\r\n    super(Configurable, self).__init__(**kwargs)\r\n```\r\n\r\nFrom [this example](https://nbconvert.readthedocs.io/en/latest/execute_api.html#example), the parameter should be called `kernel_name`, but then I wonder how installing the kernel in tox.ini fixed things for you. Can you maybe try to remove the kernel installation from tox.ini, remove the kernel from your jupyter config (`~/.local/share/jupyter/kernels` or similar), remove the `kernel='...'` from the `ExecutePreprocessor` instantiation and see what happens, inside of tox and outside? Maybe something unrelated changed and made things work for you."", 'comment_created': datetime.datetime(2020, 7, 22, 18, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}]","[{'commit_sha': 'c9ef2c079e54913ad44be62886e838c4084c49d6', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7f1e2516905bac904b4e01d7c712e606cc0ff8a', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d6d2bfdb3691dbe9db3f05d527ac2f20443569a', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '404a052f2eccbb788304811d86ec10ecaf73b732', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9ca9ddd1587f357c95e2ce8883f28eb8dbf1f5b', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '831ef39612767dd14dfc5692d6552166cf71d52f', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1ce97c57fce1801b0e064dbe0d3798da9c7c56d', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '819588039da5e54e5f9eba4374d8f7cc020d67c1', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa2fc2e896d9262c912e38648e24cc869ba61f6', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b381d649b7fc3c534c8fa3b06153fcfd62c4f43c', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f847b9d28d096f2a4f77f63baae67a541b7f16f4', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c86dbe33e6a4c53eab3e0b98bfa035d663ee08b', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69f5ef319f6fb3acdb09d9521cad0960ab242ad9', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dec2c7c7ac4d52d1c35405997f8685db3162bee3', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ab7dd97d5985a61f661fc82249edaea2b1aed9', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ffb3943f442102bab6b4779910ede9b57176822', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '531f791a6fd5cfaf804fa0dc7b0aa6a85184176a', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a1c2933e7559a7138378fed6ea3ab90a91f11cf', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7219d3f847995085aabfe5483eb35b98eaa1d44', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '997c809c2458ec591f7c1330e4a158204e27df02', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb5c49c6e7e2d240f20a94a69ae8fb1ee629d6cf', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f80cce51324480b7ede83d50bdc46700f5e65eb', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffed7f5001ea509cb3de9ad9c92c90befff313c5', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93a95ecc5be3518ae6118e42a262d91f4f39a731', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eb141bb6afcaaeebe72b1090906f631c347ffa3', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb9f1e1b750018252c9f16208fcc1436334de8a8', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd591261357d86105c8b2581e8e4bd8cd91809acb', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}]",Abijith,59721339,,User,,46,,143,26
457704447,Add the missing tests for Template,"Added the tests for `SumSigAnalysis` and `PickFFTFrameAnalysis`
notebook generation.

## Contributor Checklist:

* [ ] I have added or updated my entry in [the creators.json file](https://github.com/LiberTEM/LiberTEM/blob/master/packaging/creators.json)
* [ ] I have added [a changelog entry](https://github.com/LiberTEM/LiberTEM/tree/master/docs/source/changelog) for my contribution
* [ ] I have added/updated documentation for all user-facing changes
* [ ] I have added/updated test cases
* [ ] I have included the [rebuilt production build of the client](https://libertem.github.io/LiberTEM/contributing.html?#building-the-client) (only if
changes were made to the GUI)",True,858,https://api.github.com/repos/LiberTEM/LiberTEM/pulls/858,https://github.com/LiberTEM/LiberTEM/pull/858,closed,82,2,3,1,2,0,2,0,"[{'name': 'GSOC'}, {'name': 'QA'}]",2020-07-28 10:03:30+00:00,2020-07-28 11:05:58+00:00,3748.0,1:02:28,[],"[{'commit_sha': '4ad0013d1782e479300a2284e70abc77634a3c88', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}]",Abijith,59721339,,User,,46,,143,26
457264261,Fix COM plotting and ROI in SD analysis,"Fix issue #854 , #855 

Also, notebook naming is fixed.

## Contributor Checklist:

* [x] I have added or updated my entry in [the creators.json file](https://github.com/LiberTEM/LiberTEM/blob/master/packaging/creators.json)
* [ ] I have added [a changelog entry](https://github.com/LiberTEM/LiberTEM/tree/master/docs/source/changelog) for my contribution
* [ ] I have added/updated documentation for all user-facing changes
* [ ] I have added/updated test cases
* [ ] I have included the [rebuilt production build of the client](https://libertem.github.io/LiberTEM/contributing.html?#building-the-client) (only if
changes were made to the GUI)

",True,857,https://api.github.com/repos/LiberTEM/LiberTEM/pulls/857,https://github.com/LiberTEM/LiberTEM/pull/857,closed,45,45,14,1,1,0,3,0,"[{'name': 'bug'}, {'name': 'GSOC'}, {'name': 'notebooks'}]",2020-07-27 16:15:44+00:00,2020-07-27 17:15:01+00:00,3557.0,0:59:17,[],"[{'commit_sha': '847492f557c762ad6492e8eefe2480f7017bd45c', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}]",Abijith,59721339,,User,,46,,143,26
461093984,Copy notebook,"Copy notebook cells directly from GUI.

## Contributor Checklist:

* [x] I have added or updated my entry in [the creators.json file](https://github.com/LiberTEM/LiberTEM/blob/master/packaging/creators.json)
* [x] I have added [a changelog entry](https://github.com/LiberTEM/LiberTEM/tree/master/docs/source/changelog) for my contribution
* [ ] I have added/updated documentation for all user-facing changes
* [x] I have added/updated test cases
* [ ] I have included the [rebuilt production build of the client](https://libertem.github.io/LiberTEM/contributing.html?#building-the-client) (only if
changes were made to the GUI)
",True,862,https://api.github.com/repos/LiberTEM/LiberTEM/pulls/862,https://github.com/LiberTEM/LiberTEM/pull/862,closed,356,55,26,6,14,3,4,0,"[{'name': 'GUI'}, {'name': 'Web API'}, {'name': 'GSOC'}, {'name': 'notebooks'}]",2020-08-01 12:59:21+00:00,2020-08-07 18:16:51+00:00,537450.0,"6 days, 5:17:30","[{'comment_id': 466369819, 'comment_body': 'Nitpick: function name should follow pep8 naming rules (`copy_notebook`)', 'comment_created': datetime.datetime(2020, 8, 6, 12, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 466370190, 'comment_body': 'This may need a slash at the end of the URL', 'comment_created': datetime.datetime(2020, 8, 6, 12, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 466385966, 'comment_body': 'May need a slash at the end', 'comment_created': datetime.datetime(2020, 8, 6, 12, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}]","[{'commit_sha': 'dc9518363da254856a43f99883be92cf788b4cb3', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da104c642906c0088e985e0ebc824031b87effd5', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7c19780f195279d03efa4a90dd4c0c43d440350', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f27e5331ea6adbf95395da6bcca25588254f368', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99a86112154de9ccb6d38bb53e0adbb500b6e259', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bf27517988967c47983600c8caca591ce2a82db', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}]",Abijith,59721339,,User,,46,,143,26
465322225,Improve the cluster template,"## Contributor Checklist:

* [x] I have added or updated my entry in [the creators.json file](https://github.com/LiberTEM/LiberTEM/blob/master/packaging/creators.json)
* [ ] I have added [a changelog entry](https://github.com/LiberTEM/LiberTEM/tree/master/docs/source/changelog) for my contribution
* [ ] I have added/updated documentation for all user-facing changes
* [x] I have added/updated test cases
* [x] I have included the [rebuilt production build of the client](https://libertem.github.io/LiberTEM/contributing.html?#building-the-client) (only if
changes were made to the GUI)
",True,864,https://api.github.com/repos/LiberTEM/LiberTEM/pulls/864,https://github.com/LiberTEM/LiberTEM/pull/864,closed,226,147,15,3,24,14,3,0,"[{'name': 'GUI'}, {'name': 'GSOC'}, {'name': 'notebooks'}]",2020-08-10 07:09:45+00:00,2020-08-26 12:20:54+00:00,1401069.0,"16 days, 5:11:09","[{'comment_id': 468674190, 'comment_body': 'Should probably also add `progress=True` here.', 'comment_created': datetime.datetime(2020, 8, 11, 15, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 470957779, 'comment_body': 'Hmm, maybe `get_sd_roi` could be replaced by a call to `libertem.analysis.getroi.get_roi()`? That should reduce the amount of code a bit. Could also be changed in the analysis itself.', 'comment_created': datetime.datetime(2020, 8, 15, 9, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 470958094, 'comment_body': 'There should be vertical white space between the function definitions, ideally following PEP8 (two empty lines between top-level functions)', 'comment_created': datetime.datetime(2020, 8, 15, 9, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 470959506, 'comment_body': 'I would prefer if this tested against the ""real"" `ClusterAnalysis`. I guess the challenge was the `async` methods? It should be possible to use a `Context` with an `async_executor` instead, mark the test as an `asyncio` test and use the original class here. For ""faking"" `send_results`, you could do something like this:\r\n\r\n```python\r\nclass ResultContainer:\r\n    def __call__(self, results, finished):\r\n        self.results = results\r\n        self.finished = finished\r\n\r\nres_container = ResultContainer()\r\n# ...\r\nawait analysis.controller(..., send_results=res_container)\r\n```\r\n\r\nThen you can grab the results from `res_container.results`. Or you can use a `unittest.mock.Mock` object and assert on the `call_args_list`. What do you think?', 'comment_created': datetime.datetime(2020, 8, 15, 9, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 470959513, 'comment_body': ':+1:', 'comment_created': datetime.datetime(2020, 8, 15, 9, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 470959712, 'comment_body': 'There is actually a function available for this in the standard library, as part of the `textwrap` package: [dedent](https://docs.python.org/3/library/textwrap.html#textwrap.dedent) - maybe that can be used instead?', 'comment_created': datetime.datetime(2020, 8, 15, 9, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 470960068, 'comment_body': 'I think here it would be better to `imshow` the raw results, such that the user can inspect the underlying values when plotting interactively.', 'comment_created': datetime.datetime(2020, 8, 15, 9, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 470961606, 'comment_body': 'Yes in principle. However, the analysis currently has an inconsistency where the raw data is not available. Maybe we can make that a FIXME for now?', 'comment_created': datetime.datetime(2020, 8, 15, 10, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}, {'comment_id': 470968495, 'comment_body': 'Sounds good! I was a little confused earlier.', 'comment_created': datetime.datetime(2020, 8, 15, 11, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 470968727, 'comment_body': ""> the analysis currently has an inconsistency where the raw data is not available.\r\n\r\nI didn't get it, what is the inconsistency here?"", 'comment_created': datetime.datetime(2020, 8, 15, 11, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 470972687, 'comment_body': 'There are currently two blank lines between the functions.\r\n\r\n![image](https://user-images.githubusercontent.com/59721339/90312231-3d61f980-df20-11ea-927c-d1d2cea2a5ad.png)\r\n', 'comment_created': datetime.datetime(2020, 8, 15, 12, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 470973711, 'comment_body': 'Hm, I didn\'t see the blank lines in the ""copy notebook"" view - maybe it is just an issue with the presentation in that view?', 'comment_created': datetime.datetime(2020, 8, 15, 12, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 470973986, 'comment_body': ""> Yes in principle. However, the analysis currently has an inconsistency where the raw data is not available. Maybe we can make that a FIXME for now?\r\n\r\nHm, as far as I can see, the `AnalysisResultSet` returned from the clustering analysis was changed here to return the labels as `raw_data` - wouldn't that work for visualization in the notebook?"", 'comment_created': datetime.datetime(2020, 8, 15, 12, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 473850812, 'comment_body': ""Ah I see, I didn't notice that it was changed already. :-) Yes, that will work!"", 'comment_created': datetime.datetime(2020, 8, 20, 10, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'uellue', 'type': 'User'}]","[{'commit_sha': 'a9fa9034881ea39de30658a688c6222dcfd587b0', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b70c33371bb3a29053cfd04fe44dd962770811d', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3915edbd72881b916a27117ecfc71c2699a21638', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}]",Abijith,59721339,,User,,46,,143,26
462723153,Display cluster conn details,"If GUI is successfully connected to a remote cluster, the connection code will be
generated and an option to copy the code.  Fixes #845 

## Contributor Checklist:

* [x] I have added or updated my entry in [the creators.json file](https://github.com/LiberTEM/LiberTEM/blob/master/packaging/creators.json)
* [x] I have added [a changelog entry](https://github.com/LiberTEM/LiberTEM/tree/master/docs/source/changelog) for my contribution
* [x] I have added/updated documentation for all user-facing changes
* [ ] I have added/updated test cases
* [x] I have included the [rebuilt production build of the client](https://libertem.github.io/LiberTEM/contributing.html?#building-the-client) (only if
changes were made to the GUI)",True,863,https://api.github.com/repos/LiberTEM/LiberTEM/pulls/863,https://github.com/LiberTEM/LiberTEM/pull/863,closed,542,51,31,13,66,22,2,0,"[{'name': 'GUI'}, {'name': 'GSOC'}]",2020-08-04 12:05:06+00:00,2020-11-06 10:32:31+00:00,8116045.0,"93 days, 22:27:25","[{'comment_id': 479662878, 'comment_body': 'status will be `unknown` and the button will be disabled.', 'comment_created': datetime.datetime(2020, 8, 29, 15, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 479663024, 'comment_body': 'should we add something more like a help/ link to docs? ', 'comment_created': datetime.datetime(2020, 8, 29, 15, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 480999274, 'comment_body': ':+1:', 'comment_created': datetime.datetime(2020, 9, 1, 9, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 480999672, 'comment_body': 'Not sure, when we are in the ""not connected"" state, the only thing shown is the ""connect to cluster"" / ""create cluster"" dialog anyways, right?', 'comment_created': datetime.datetime(2020, 9, 1, 9, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 492523981, 'comment_body': 'Why does this need to be a state? Is it not possible to just use a local variable that is set depending on the values of `cudas`?', 'comment_created': datetime.datetime(2020, 9, 22, 7, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 492524946, 'comment_body': ""What happens if the host name contains a `'-'`?"", 'comment_created': datetime.datetime(2020, 9, 22, 7, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 492525840, 'comment_body': 'What do you think about putting the host name / resource split into the worker class?', 'comment_created': datetime.datetime(2020, 9, 22, 7, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 492931908, 'comment_body': '`get_resource_details` is redundant.', 'comment_created': datetime.datetime(2020, 9, 22, 18, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 492933732, 'comment_body': 'should I keep `get_resource_details` and remove the duplicate code from `ClusterDetailHandler` ?', 'comment_created': datetime.datetime(2020, 9, 22, 18, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 492938500, 'comment_body': 'That would be more meaningful. Is there any particular reason for using the current format ?', 'comment_created': datetime.datetime(2020, 9, 22, 18, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 492938895, 'comment_body': 'I will check that out :+1:', 'comment_created': datetime.datetime(2020, 9, 22, 18, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 499148328, 'comment_body': ""I haven't changed this yet."", 'comment_created': datetime.datetime(2020, 10, 3, 13, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 509991682, 'comment_body': 'What happens if a `libertem-worker` is started with GPU worker processes? Like if you start `libertem-worker` on a system with a GPU, it will automatically start a worker process for that GPU. That should be handled here, too.', 'comment_created': datetime.datetime(2020, 10, 22, 8, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 510107709, 'comment_body': 'The `Worker` class should have access to `host` and the `resources` list directly - is there a reason this is not used here?', 'comment_created': datetime.datetime(2020, 10, 22, 12, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 510338747, 'comment_body': ""It's for the `dask-worker`, it doesn't support CUDA right?"", 'comment_created': datetime.datetime(2020, 10, 22, 17, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 510341411, 'comment_body': 'Well, since we support CUDA, in addition to just starting a plain `dask-worker`, we also have the `libertem-worker` command that allows to bring up worker processes with resource tags attached. See [the docker-compose config](https://github.com/LiberTEM/LiberTEM/blob/master/packaging/docker/docker-compose.yml) for an example (although that disables CUDA explicitly)', 'comment_created': datetime.datetime(2020, 10, 22, 17, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 510343829, 'comment_body': '`host` is IP address, should I add an extra attribute to worker class for `host_name`?', 'comment_created': datetime.datetime(2020, 10, 22, 17, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 510348261, 'comment_body': '`dask-worker` is handled in the `else` part. I will add comments if this is confusing.', 'comment_created': datetime.datetime(2020, 10, 22, 17, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 510592920, 'comment_body': ""![image](https://user-images.githubusercontent.com/59721339/96957761-3277a680-1519-11eb-914f-310824b2076e.png)\r\n\r\nI think it's better to use host IP address instead of host name, in the above example both `dask-worker` and `libertem-worker` is running on same device. But currently, it's showing as 2 hosts."", 'comment_created': datetime.datetime(2020, 10, 23, 4, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'twentyse7en', 'type': 'User'}, {'comment_id': 511902504, 'comment_body': 'Yeah - the critical part is that for a reader, it is not clear at all that a `name` starting with `tcp://...` means that we are dealing with `dask-worker`, I think that needs to be detailed in the comment.', 'comment_created': datetime.datetime(2020, 10, 26, 11, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 511903090, 'comment_body': 'Agreed, consistency is important! :+1:', 'comment_created': datetime.datetime(2020, 10, 26, 11, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}, {'comment_id': 511922780, 'comment_body': ""> I think it's better to use host IP address\r\n\r\nNeeds updated test case (maybe just check all other fields than `host`, as that will vary across runs)"", 'comment_created': datetime.datetime(2020, 10, 26, 12, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sk1p', 'type': 'User'}]","[{'commit_sha': 'f7999de2ee5b43df659bc5b53a4086d7e98891ff', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd03d58796524ea4aad517283a484092d3f55d9d4', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32a9da2f9b0059ed2aa4e4f0662c379444edab39', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13dd7ca6924eea1d593e5e449b50909d2c8fdb03', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bea23bf3419440866ed488a176907a619786daba', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3019f3158785df40a31ca2675f9278ee82ce6d8a', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '761f14e4de55bc867562afac7c6e8be1c895f4d6', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d5476f42900fc60589dd10e2c93b60a86340e2a', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31c4b7506f2c3a8969450ce1ff3528586354ceae', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e52512a9189bcb8368cec8f1bb86f49271ce876', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7052cfbfbb9c3fae82d8f8f8fbbe97a8ebf43ce1', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d08a8f8605add34aece728c776c664218c5b476', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b440318224e2b0a12189bb3e64cac1b0dcd59ca1', 'committer_username': 'twentyse7en', 'committer_name': 'Abijith', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 5, 35, 47, tzinfo=datetime.timezone.utc)}]",Abijith,59721339,,User,,46,,143,26

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
116963730,LiberTEM,LiberTEM/LiberTEM,Python,66,109,13,29,4361,192,10,17,"[{'id': 521562191, 'number': 901, 'closed': datetime.datetime(2020, 11, 16, 11, 0, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 16, 10, 19, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2502.0, 'time_delta': '0:41:42', 'additions': 1, 'deletions': 3, 'state': 'closed'}, {'id': 517898252, 'number': 899, 'closed': datetime.datetime(2020, 11, 9, 17, 38, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 9, 16, 49, 21, tzinfo=datetime.timezone.utc), 'time_taken': 2966.0, 'time_delta': '0:49:26', 'additions': 10, 'deletions': 9, 'state': 'closed'}, {'id': 499875944, 'number': 885, 'closed': datetime.datetime(2020, 11, 6, 11, 26, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 8, 12, 11, 47, tzinfo=datetime.timezone.utc), 'time_taken': 2502887.0, 'time_delta': '28 days, 23:14:47', 'additions': 101, 'deletions': 8, 'state': 'closed'}, {'id': 483015364, 'number': 876, 'closed': datetime.datetime(2020, 9, 10, 7, 5, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 9, 17, 36, 15, tzinfo=datetime.timezone.utc), 'time_taken': 48548.0, 'time_delta': '13:29:08', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 474023419, 'number': 870, 'closed': datetime.datetime(2021, 12, 8, 14, 3, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 16, 33, 36, tzinfo=datetime.timezone.utc), 'time_taken': 40512576.0, 'time_delta': '468 days, 21:29:36', 'additions': 143, 'deletions': 46, 'state': 'closed'}, {'id': 465322225, 'number': 864, 'closed': datetime.datetime(2020, 8, 26, 12, 20, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 10, 7, 9, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1401069.0, 'time_delta': '16 days, 5:11:09', 'additions': 226, 'deletions': 147, 'state': 'closed'}, {'id': 462723153, 'number': 863, 'closed': datetime.datetime(2020, 11, 6, 10, 32, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 12, 5, 6, tzinfo=datetime.timezone.utc), 'time_taken': 8116045.0, 'time_delta': '93 days, 22:27:25', 'additions': 542, 'deletions': 51, 'state': 'closed'}, {'id': 461093984, 'number': 862, 'closed': datetime.datetime(2020, 8, 7, 18, 16, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 1, 12, 59, 21, tzinfo=datetime.timezone.utc), 'time_taken': 537450.0, 'time_delta': '6 days, 5:17:30', 'additions': 356, 'deletions': 55, 'state': 'closed'}, {'id': 457704447, 'number': 858, 'closed': datetime.datetime(2020, 7, 28, 11, 5, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 10, 3, 30, tzinfo=datetime.timezone.utc), 'time_taken': 3748.0, 'time_delta': '1:02:28', 'additions': 82, 'deletions': 2, 'state': 'closed'}, {'id': 457264261, 'number': 857, 'closed': datetime.datetime(2020, 7, 27, 17, 15, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 16, 15, 44, tzinfo=datetime.timezone.utc), 'time_taken': 3557.0, 'time_delta': '0:59:17', 'additions': 45, 'deletions': 45, 'state': 'closed'}, {'id': 430995084, 'number': 801, 'closed': datetime.datetime(2020, 7, 24, 13, 21, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 9, 33, 8, tzinfo=datetime.timezone.utc), 'time_taken': 3988116.0, 'time_delta': '46 days, 3:48:36', 'additions': 9684, 'deletions': 84, 'state': 'closed'}, {'id': 417964884, 'number': 786, 'closed': datetime.datetime(2020, 6, 3, 10, 45, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 12, 31, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1721636.0, 'time_delta': '19 days, 22:13:56', 'additions': 305, 'deletions': 105, 'state': 'closed'}, {'id': 415167471, 'number': 781, 'closed': datetime.datetime(2020, 5, 12, 14, 42, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 8, 10, 34, 1, tzinfo=datetime.timezone.utc), 'time_taken': 360536.0, 'time_delta': '4 days, 4:08:56', 'additions': 83, 'deletions': 2, 'state': 'closed'}, {'id': 409667803, 'number': 758, 'closed': datetime.datetime(2020, 4, 29, 18, 47, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 27, 18, 24, 45, tzinfo=datetime.timezone.utc), 'time_taken': 174152.0, 'time_delta': '2 days, 0:22:32', 'additions': 23, 'deletions': 12, 'state': 'closed'}, {'id': 409614004, 'number': 757, 'closed': datetime.datetime(2020, 4, 28, 7, 19, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 27, 16, 37, 7, tzinfo=datetime.timezone.utc), 'time_taken': 52914.0, 'time_delta': '14:41:54', 'additions': 11, 'deletions': 6, 'state': 'closed'}, {'id': 405645413, 'number': 735, 'closed': datetime.datetime(2020, 4, 25, 9, 27, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 19, 11, 4, 3, tzinfo=datetime.timezone.utc), 'time_taken': 512612.0, 'time_delta': '5 days, 22:23:32', 'additions': 3239, 'deletions': 3230, 'state': 'closed'}, {'id': 397648632, 'number': 699, 'closed': datetime.datetime(2020, 4, 12, 13, 23, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 2, 15, 23, 57, tzinfo=datetime.timezone.utc), 'time_taken': 856757.0, 'time_delta': '9 days, 21:59:17', 'additions': 3261, 'deletions': 3225, 'state': 'closed'}, {'id': 385185142, 'number': 669, 'closed': datetime.datetime(2020, 3, 9, 18, 22, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 7, 19, 37, 48, tzinfo=datetime.timezone.utc), 'time_taken': 168282.0, 'time_delta': '1 day, 22:44:42', 'additions': 18, 'deletions': 1, 'state': 'closed'}, {'id': 383820984, 'number': 664, 'closed': datetime.datetime(2020, 3, 5, 17, 34, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 4, 19, 40, 31, tzinfo=datetime.timezone.utc), 'time_taken': 78810.0, 'time_delta': '21:53:30', 'additions': 17, 'deletions': 7, 'state': 'closed'}, {'id': 381778267, 'number': 655, 'closed': datetime.datetime(2020, 2, 29, 11, 42, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 29, 6, 26, 39, tzinfo=datetime.timezone.utc), 'time_taken': 18955.0, 'time_delta': '5:15:55', 'additions': 15, 'deletions': 4, 'state': 'closed'}, {'id': 380147207, 'number': 653, 'closed': datetime.datetime(2020, 2, 26, 13, 52, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 26, 10, 42, 21, tzinfo=datetime.timezone.utc), 'time_taken': 11422.0, 'time_delta': '3:10:22', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 380139241, 'number': 652, 'closed': datetime.datetime(2020, 2, 26, 10, 36, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 26, 10, 27, 47, tzinfo=datetime.timezone.utc), 'time_taken': 515.0, 'time_delta': '0:08:35', 'additions': 8, 'deletions': 4, 'state': 'closed'}, {'id': 379599735, 'number': 650, 'closed': datetime.datetime(2020, 3, 12, 9, 46, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 25, 14, 0, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1367200.0, 'time_delta': '15 days, 19:46:40', 'additions': 31, 'deletions': 1, 'state': 'closed'}, {'id': 378617084, 'number': 641, 'closed': datetime.datetime(2020, 2, 24, 16, 27, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 22, 18, 19, 48, tzinfo=datetime.timezone.utc), 'time_taken': 166049.0, 'time_delta': '1 day, 22:07:29', 'additions': 41, 'deletions': 0, 'state': 'closed'}, {'id': 378379106, 'number': 636, 'closed': datetime.datetime(2020, 2, 22, 7, 50, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 21, 16, 58, 14, tzinfo=datetime.timezone.utc), 'time_taken': 53556.0, 'time_delta': '14:52:36', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 376287252, 'number': 605, 'closed': datetime.datetime(2020, 2, 19, 9, 23, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 17, 19, 33, 59, tzinfo=datetime.timezone.utc), 'time_taken': 136170.0, 'time_delta': '1 day, 13:49:30', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 376283121, 'number': 604, 'closed': datetime.datetime(2020, 2, 17, 19, 20, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 17, 19, 19, 42, tzinfo=datetime.timezone.utc), 'time_taken': 44.0, 'time_delta': '0:00:44', 'additions': 36, 'deletions': 12, 'state': 'closed'}, {'id': 374919205, 'number': 598, 'closed': datetime.datetime(2020, 2, 21, 10, 57, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 13, 15, 5, 34, tzinfo=datetime.timezone.utc), 'time_taken': 676344.0, 'time_delta': '7 days, 19:52:24', 'additions': 4104, 'deletions': 4265, 'state': 'closed'}, {'id': 373036696, 'number': 580, 'closed': datetime.datetime(2020, 2, 12, 9, 43, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 10, 9, 50, 29, tzinfo=datetime.timezone.utc), 'time_taken': 172398.0, 'time_delta': '1 day, 23:53:18', 'additions': 34, 'deletions': 12, 'state': 'closed'}]"
