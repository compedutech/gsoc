pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1029306422,Cleanlab + Skorch Integration,"## ðŸš€ ðŸš€ Pull Request

### Checklist:

- [ ]  [My code follows the style guidelines of this project](https://www.notion.so/activeloop/Engineering-Guidelines-d6e502306d0e4133a8ca507516d1baab) and the [Contributing document](https://github.com/activeloopai/Hub/blob/release/2.0/CONTRIBUTING.md)
- [x]  I have commented my code, particularly in hard-to-understand areas
- [ ]  I have kept the `coverage-rate` up
- [ ]  I have performed a self-review of my own code and resolved any problems
- [ ]  I have checked to ensure there aren't any other open [Pull Requests](https://github.com/activeloopai/Hub/pulls) for the same change
- [x]  I have described and made corresponding changes to the relevant documentation
- [ ]  New and existing unit tests pass locally with my changes


### Changes

This PR is an integration of [`cleanlab` open-source library](https://github.com/cleanlab/cleanlab) to Hub. This is a quick snippet of the API:

```
from hub.integrations.cleanlab import clean_labels, create_tensors, clean_view
from hub.integrations import skorch

ds = hub.load(""hub://ds"")

tform = transforms.Compose(
    [
        transforms.ToPILImage(),
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,)),
    ]
)

transform = {""images"": tform, ""labels"": None}

# Get scikit-learn compatible PyTorch module to pass into clean_labels
model = skorch(dataset=ds, epochs=5, batch_size=16, transform=transform)

# Obtain a DataFrame with columns is_label_issue, label_quality and predicted_label 
label_issues = clean_labels(
    dataset=ds,
    model=model,
    folds=3,
)


# Create label_issues tensor
create_tensors(
    dataset=ds,
    label_issues=label_issues,
    branch=""main""
)

# Get dataset view where only clean labels are present, and the rest are filtered out.
ds_clean = clean_view(ds)
```

### To-do

- [x] Create custom config for `pip install` (e.g. `pip install hub[â€™cleanlabâ€™]`)
- [x] Add support for validation set
- [ ] Add prune support to delete samples with where `is_label_issue = True`
- [x] Try to use a pre-trained model to compute out-of-sample probabilities to skip cross-validation and speed up the training.
- [x] Add tests for the functions
- [x] Add types for the class arguments
- [x] Create a tensor `guessed_label` to add labels guessed by the classifier after pruning.
- [x] Add optional `cleanlab` kwargs to pass down 
- [x] Add optional `skorch` kwargs to pass down
- [ ] Add support for TensorFlow modules
- [x] Add flag `branch` to move to a different branch instead of making a commit on a current branch.
",False,1821,https://api.github.com/repos/activeloopai/deeplake/pulls/1821,https://github.com/activeloopai/deeplake/pull/1821,closed,796,0,14,100,3,27,0,0,[],2022-08-17 21:09:01+00:00,2023-03-30 13:18:15+00:00,19411754.0,"224 days, 16:09:14","[{'comment_id': 948458470, 'comment_body': ""I would probably need to add some checks here to ensure the tensors were written correctly. However, it seems that without the flag `skip_ok` you can't skip any tensors anyways, and if any append operation fails for an individual tensor, nothing will be appended at all."", 'comment_created': datetime.datetime(2022, 8, 17, 21, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 948461794, 'comment_body': ""I'm curious if there can be any other htypes that I haven't covered here. What would be some edge cases I should look into more?"", 'comment_created': datetime.datetime(2022, 8, 17, 21, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 948462042, 'comment_body': 'Instead of doing this, I could also remove this code block and use `overwrite = True` when appending the tensors in `append_label_issues_tensors()`. What would be the most preferable way?', 'comment_created': datetime.datetime(2022, 8, 17, 21, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 948462288, 'comment_body': ""Not sure if this would be the best way to pass the parameters for the Hub's PyTorch Dataloader. Are there any other approaches that could make sense? Maybe pass them as normal parameters like in `ds.pytorch()` instead? However, this might be too many parameters to pass and would not be ideal for using the API."", 'comment_created': datetime.datetime(2022, 8, 17, 21, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 948462931, 'comment_body': 'Not sure if this would be the optimal way to check if an image tensor is RGB or Grayscale. Maybe I should try to fetch one sample (e.g., `dataset[image_tensor][0].data()`) and check the dimensions instead? However, some datasets have both RGB and Grayscale images so this could create an issue. Maybe I should instead add a default transform `transforms.Lambda(lambda x: x.repeat(int(3/x.shape[0]), 1, 1))`  to make the training work with both color and grayscale images?', 'comment_created': datetime.datetime(2022, 8, 17, 21, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 948463650, 'comment_body': ""I think that I'd need to use `Type[Class]` to specify the class that should be passed. However, I don't want to import the classes (e.g. `torch.nn.Module module`) into the `dataset.py` file to avoid dependency issues (e.g., users should be able to interact with the `Dataset` class without installing `torch`). What can be a way to ensure type checking without importing these modules?"", 'comment_created': datetime.datetime(2022, 8, 17, 21, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 948470903, 'comment_body': 'I would be happy if someone could help me prioritize these TODOs ðŸ˜…', 'comment_created': datetime.datetime(2022, 8, 17, 22, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 948477644, 'comment_body': ""I've spent a few hours thinking about the name but can't think of any better one ðŸ˜…. I think `cleanlab` should be there as we're using a third-party library. Maybe `clean_labels_with_cleanlab()` or something like `ds.integrations.cleanlab()`? "", 'comment_created': datetime.datetime(2022, 8, 17, 22, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 948966368, 'comment_body': 'I\'m thinking of making the `device` an optional parameter and doing a check like `device = torch.device(""cuda:0"" if torch.cuda.is_available() else ""cpu"")` in `pytorch_module_to_skorch()`. Also can add `""mps"" if torch.backends.mps.is_available()` since they\'ve recently introduced Apple Silicon GPU support. Would this approach be sound? ', 'comment_created': datetime.datetime(2022, 8, 18, 10, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 948976570, 'comment_body': 'Should I add `@hub_reporter.record_call` decorator here?', 'comment_created': datetime.datetime(2022, 8, 18, 10, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 949121610, 'comment_body': ""I think that some sort of `append` boolean flag would be useful here to confirm if a user wants to append new `label_issues` tensor. It'll also help to deal with some issues related to access rights. For example, if `append = True` but a user doesn't have write access to the dataset, raise an error. I think `cleanlab()` method should by default return `is_label_issues` and `label_quality_scores` as np array. So if the flag `append` is `False`, then it would return the arrays anyways."", 'comment_created': datetime.datetime(2022, 8, 18, 13, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 949178059, 'comment_body': 'Moved them to the PR instead', 'comment_created': datetime.datetime(2022, 8, 18, 14, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 949510688, 'comment_body': 'This could be a place where you could potentially integrate some Auto ML to select the best model, but this should do it for now. Can also be some ensemble model that would be trained on folds.', 'comment_created': datetime.datetime(2022, 8, 18, 19, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 959540994, 'comment_body': 'I think this can be a simple is instance check', 'comment_created': datetime.datetime(2022, 8, 31, 12, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'farizrahman4u', 'type': 'User'}, {'comment_id': 959541899, 'comment_body': 'Not sure if this location for the shared utils would work?', 'comment_created': datetime.datetime(2022, 8, 31, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 959542371, 'comment_body': 'Would these `htypes` be exhaustive for image classification tasks?', 'comment_created': datetime.datetime(2022, 8, 31, 12, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 959542730, 'comment_body': 'Are there any other `htypes` that I might have missed here?', 'comment_created': datetime.datetime(2022, 8, 31, 12, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 959542867, 'comment_body': ""Error message should be different if ds._locked_out is True. This means user wanted to open the dataset with write access but it's already locked for writing by someone else. "", 'comment_created': datetime.datetime(2022, 8, 31, 12, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'farizrahman4u', 'type': 'User'}, {'comment_id': 959568740, 'comment_body': 'For some reason, if the `dtype` is `float64`, the tensor would still be created with `None` `dtype`. ', 'comment_created': datetime.datetime(2022, 8, 31, 13, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 959583650, 'comment_body': ""Initially, that's how I implemented it, but I'm getting `cannot import name 'Dataset' from partially initialized module 'hub.core.dataset'` when I try to `from hub.core.dataset import Dataset` in `skorch.py`. It's a bit weird since when I try to import in `cleanlab.py` I don't have this error. The modules' names are also different, so I couldn't debug it yet. Do you have any idea on why it might be happening?"", 'comment_created': datetime.datetime(2022, 8, 31, 13, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lowlypalace', 'type': 'User'}, {'comment_id': 1033466254, 'comment_body': 'key error would be better', 'comment_created': datetime.datetime(2022, 11, 28, 12, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AbhinavTuli', 'type': 'User'}, {'comment_id': 1033467455, 'comment_body': 'exceptions not documented', 'comment_created': datetime.datetime(2022, 11, 28, 12, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AbhinavTuli', 'type': 'User'}, {'comment_id': 1033471305, 'comment_body': 'better way would be to check branch existence in set(ds.branches)', 'comment_created': datetime.datetime(2022, 11, 28, 12, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AbhinavTuli', 'type': 'User'}, {'comment_id': 1033471979, 'comment_body': 'should be fine', 'comment_created': datetime.datetime(2022, 11, 28, 12, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'AbhinavTuli', 'type': 'User'}, {'comment_id': 1033475257, 'comment_body': 'not a good way to assign these The order could easily get reversed, htype/sample compression check would be better', 'comment_created': datetime.datetime(2022, 11, 28, 12, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'AbhinavTuli', 'type': 'User'}, {'comment_id': 1033476016, 'comment_body': ""let's call this validation_dataset, this seems like a boolean variable name"", 'comment_created': datetime.datetime(2022, 11, 28, 12, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'AbhinavTuli', 'type': 'User'}]","[{'commit_sha': 'b59e2b57f730a71c5427a74619fe7d557e35f62e', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a16b04ba49974ed97361c9e94faa640e8547eff4', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e573bc5d9dda3d0a21689b95fe60f0085c0b1196', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a89b10a2bcfe1cc680bd48c5a4749842ca9dc58', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7298d4b7c0e1125d161da1d23d9f9a8c435a662f', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da03c0f60d72b2868b085c203b6421ec78db7272', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '713f4ea8b53f21d3012443cad6217b8c713e3e2e', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60069adf0f12aa88f72d53b3c5b8317a5156fa66', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10fb141fd57ba54a0708c4e0a4077222b89d5efd', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3626dcdfcd6e39c20302b6adfb255a8bfefc68c9', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeab04001568e7ee84b64359f2e70dec6b3a5de4', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1634e1c419c8976ce1a6e9ab9619104e9caf105e', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54c49bcf94fc2ea9edfb8ec2e7e5361b5fb8c10b', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93d3baee38849fafd9e5e0177968bd8d086363b4', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2462b4e2d2236d9d871a575e86a7e852cff897a1', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c9d4786a58d110f45523214d44bf5e8e080455f', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8f6a7c1daeff780126365a0c8372d11670f56f8', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86a1f4de6989aba827ff0a9bb957630b1848b3c8', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6137603c6a16b7cd8b86986ea40225edd1dfc547', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc428e35b84159b869b2018235fe03be368d29a1', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dec28eee322f6eb666439445a99a383394ad7f57', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9807ac620b94e74eb0f9fd377204c18e4aacdc99', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef15a38b20df735063ce440a737a5e87a5ef2ac5', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f604efde42113f01c419b910ad7f1cfa3f876d4', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3d0c5fbbeabe9f76a7dc9f7def318ab62df5f4e', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b61c429bee85291ed9232255ab6148d8cd04298', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08d10ef947805ba6b6f0af23cf0df7212f46547e', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f25ec49b6eaad89de236b40475c6fb62a81bcfd5', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53698d3002762baca611e95a8a81d30eec33918f', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb06bfbced188f4bb26cd4822a54229abb0c3f9a', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d6ff0d5780e704e72a14d5a882f5311c1e6ebe5', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbfd0656bcd161f7e74d07e2fadb6d5e1faf0c57', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06114e522cc4b6f083e9bbc023fb841446fc520b', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '624dacd7775711ef309efdf9d5201e26e856eb05', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d810dd2731c75e780d36dff29b699b0dd8a8dcc', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b008885495a267b12fa818289481e5f014bd4aa', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d781e9eeb07ba8daa9f41dfef823b6d7b61cc02', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70f81d18ebc698b60bed973a17faebf086e137ae', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85ef592ff0ee8e79f86374e5445cd915b4a3839a', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '171568016e9977198ea4501a7d3e509f52cccd6c', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3371fb9620dcfdcab68672aba04dbfe3f3d8daf', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de0d9727732aa7e85d44accfa68114d14d2124a', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f0380ce5c6677d49cb42ad8195ea258360ff9b', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1546cc6a4356e6d84b0686340a9290a9b6af81d4', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27d9395658920fef4966014b9868c98ac0bc7ec3', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6f440b1d766660c2162e1c68965efb4659c6aec', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9c5b7c1c03032355f6131f302b91f7e94a46e88', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bceb6bd4ec69441f8512b791580c03790ea11d3', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e27f329989ed99cb3e4ae888c474db53d24e03f9', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ae420c91a3aed2bf2645e996f6cd767026d1924', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '781a2824f27743325f54ccf2bd073522a3bb7791', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeaaf09e062ab2cd4564b981bf4048be3b785fff', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a68e4045153b9817f6bb3931083985c28ad0b81c', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cbfc22c1ecb48aee6b8dd1949f85a97e8a2ca2b', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36a1ab56314aac3df6b5b876e49af86b073a8321', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64e3f4938568be499a91564c6e0997b8f4356dff', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cb28ae42a7660949232011862c4d237db0622c6', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac4a00770a260d7b58711fe7be229613f308b624', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1503314d676eb568f6512aa4dc9fd6a9705452f', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1d5ea3d46a7b28f85bb812ae5c47b3b830ad11f', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7dc3637a5558a6da1ae0d88a99b65bc7b142f19', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dac52c581e9fde14859de8c4bf396f960c840b75', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf40669610e22fef14cf49ce8ea01a549f1e9e29', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4a9b2d14bddb8415c0df88361c818d31759cdf7', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b0d00a7b068f916b8e72bb0550b597bd618504', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3783e95c916bb5163fde18c911f2bd56c2938464', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee074e11a90e4dab9572405848dd7128db524f2d', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'badf6a4f69715275bc3b60131c69cc90f608c28e', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '264354a55c6a042c48b6999baec4049915463f4b', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d79fb03b56fde8df12200fb127853602a953248', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f15c44a61a66eabb0014b495e137e7a69d5669', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '845ce3055c6e15dcdc2218d1ef4d625715288f94', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7e4a4eb52a656cdc0b832482bb1243adcf5ae2b', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27f58036008f34676d1aa9d0ac7435c94ca4498e', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5995a1b1682bd7720fa5c6125fa4d918184c0a8c', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec0240e2946a8df36994230b27f243c5d10febb4', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8948a2b31028374f85ffd954c717129a616dc214', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86044465ddaa1fc9a31df69c806a262d7e8bf69a', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9bc55766e9c2afb27ac90b447d6b11effd093c1', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd25ec575390da262a727ac8cd34c841e00a71ef', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe45477fa71848e03ca30bb524cf5032307bf0ff', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94604a23696b17fad9f42877ba35360cdea1595', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bd3ad54dec98441f0d5c80ff5ebbdfef23b7685', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '132d2f7e551503b92a3bbb039856377c95d2e656', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b5f355f82af2864690173f7f89f7935edce7688', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '493bf15695a412e2a98c6bb9341d059c318b0ead', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ac510d71a1d7c4843af0365dc7b6ebaebc8b7dd', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '091b5fde47b4851bd90bf232722380c172c6fb44', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8400516c20a29f18b9a23804b68f6e06a69cbf4', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b289210217831425d34ad3e52477eb16cbac6cba', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b87987bd27a0bb583559ecef6424e7d712fff136', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01b083ff37eca248f7348a9bff9acbf98ede598e', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c742ecdb3f3b4f16521d88fc65e5b2ff3adacc07', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd58fdc9bad455f9b34bd899ae66a47e22aa68a38', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21d367dabfe1baded1859d511984da1e9e97a4e5', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07b4d2466e06518c9c458bc7b7f73f3422c9dab5', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580158f48bb16c5891dd82d5738f6c32c846478e', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ecc2eb048919b791e683a8e8ee93d322256f1aa', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93f7cbbc8aeea470a20b2e42a17c7e510cc84968', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76edd2c8a25954783a26f541c80e62f8db93dd87', 'committer_username': 'lowlypalace', 'committer_name': 'Daniel Gareev', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 7, 13, 18, 51, tzinfo=datetime.timezone.utc)}]",Daniel Gareev,46447920,,User,,34,,2,9

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
201403923,deeplake,activeloopai/deeplake,Python,609,7991,88,132,9079,72,284,18,"[{'id': 1029306422, 'number': 1821, 'closed': datetime.datetime(2023, 3, 30, 13, 18, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 17, 21, 9, 1, tzinfo=datetime.timezone.utc), 'time_taken': 19411754.0, 'time_delta': '224 days, 16:09:14', 'additions': 796, 'deletions': 0, 'state': 'closed'}]"
