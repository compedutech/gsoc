pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
707092106,REVAMP BINDINGS FRAMEWORK,"cc @coatless @rcurtin @Yashwants19 
**(This PR should be merged after #2995)**

This PR sets the framework for revamping the mlpack python bindings and changes the bindings for `adaboost` and `linear_regression`.

Things to be added:
- [ ] Add documentation for new macros and utlities.
- [ ] Minor changes in documentation.
- [ ] Think about more tests to add for `linear_regression` and `adaboost`.",True,3030,https://api.github.com/repos/mlpack/mlpack/pulls/3030,https://github.com/mlpack/mlpack/pull/3030,closed,3449,401,78,58,9,126,2,0,"[{'name': 'c: automatic bindings'}, {'name': 't: added feature'}]",2021-08-10 07:16:39+00:00,2022-01-20 20:39:18+00:00,14131359.0,"163 days, 13:22:39","[{'comment_id': 686309747, 'comment_body': 'If you are using these variables in other later macros (like `add_python_class()`), it might make more sense to use the convention we use for CMake which is capital letters... e.g., `${name}_METHOD_NAME_FILES`. :+1:', 'comment_created': datetime.datetime(2021, 8, 10, 20, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686310530, 'comment_body': ""Same comment here, I'd suggest `${name}_CATEGORY`. :+1:"", 'comment_created': datetime.datetime(2021, 8, 10, 20, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686335665, 'comment_body': 'I think you might already be planning to do this, but it would be great if you could add some information on what each of these variables will be used for. :+1:', 'comment_created': datetime.datetime(2021, 8, 10, 21, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686336905, 'comment_body': 'It could also be useful to add a little documentation here on what each of these are for and how we will use them.', 'comment_created': datetime.datetime(2021, 8, 10, 21, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686337168, 'comment_body': '```suggestion\r\n * IMPORT_THIS() returns a string that imports the current method.\r\n```\r\nTiny little fix. :)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686337745, 'comment_body': ""I guess these are all new macros that can all be used from any binding documentation.  We should probably collect some documentation for these in one place, but perhaps that is something we can open an issue for later---I don't think that cleanup needs to be a part of this PR.  I think the existing documentation for these macros is unfortunately a little scattered."", 'comment_created': datetime.datetime(2021, 8, 10, 21, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686338180, 'comment_body': 'We should add some quick documentation here too, even if it is the same as the macro definitions.', 'comment_created': datetime.datetime(2021, 8, 10, 21, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686338741, 'comment_body': ""It might be better to throw a `std::invalid_argument` here---as we implement wrappers for more languages, it's probably good to get an exception when printing the markdown bindings, instead of getting a random `Not supported` somewhere in the text.  (That's a minor comment though.)"", 'comment_created': datetime.datetime(2021, 8, 10, 21, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686339047, 'comment_body': '```suggestion\r\n        ""BindingInfo::Language(): "" + BindingInfo::Language() + ""!"");\r\n```\r\nTiny style fix. :)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686339141, 'comment_body': '```suggestion\r\n        ""BindingInfo::Language(): "" + BindingInfo::Language() + ""!"");\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686339179, 'comment_body': '```suggestion\r\n        ""BindingInfo::Language(): "" + BindingInfo::Language() + ""!"");\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686339235, 'comment_body': '```suggestion\r\n        ""BindingInfo::Language(): "" + BindingInfo::Language() + ""!"");\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686339948, 'comment_body': ""Does this mean the anchor name will be, e.g., `adaboost_predict`?  I'm a little confused by the difference between `GetWrapperName()` and `GetBindingName()` for the Python wrapper case."", 'comment_created': datetime.datetime(2021, 8, 10, 21, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686340203, 'comment_body': '```suggestion\r\n  for (size_t i = 0; i < validMethods.size(); ++i)\r\n```\r\nAnother style fix. :)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686341532, 'comment_body': 'Is it better to print nothing here?  This looks like it will print an empty link for the wrappers.', 'comment_created': datetime.datetime(2021, 8, 10, 21, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686341743, 'comment_body': 'Feel free to split into separate functions if you think that makes the code structure cleaner.\r\n```suggestion\r\n    if (!addWrapperDocs[i]) // different structure for wrappers.\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686342251, 'comment_body': ""Would it be easy to avoid using `boost` here?  I don't want to make @shrit's life harder as he tries to remove it all. :smile:"", 'comment_created': datetime.datetime(2021, 8, 10, 21, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686342798, 'comment_body': ""```suggestion\r\n      for(auto mainItr = paramMethods.begin(); mainItr != paramMethods.end();\r\n```\r\nI probably missed a couple style issues, but I'm trying to point them out as I go. :)"", 'comment_created': datetime.datetime(2021, 8, 10, 21, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686342906, 'comment_body': '```suggestion\r\n      for(auto itr = paramMethods.begin(); itr != paramMethods.end();\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686343032, 'comment_body': '```suggestion\r\n      cout << example.substr(0, example.size() - 1) << endl; // do not want the last ""\\n"".\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686343186, 'comment_body': '```suggestion\r\n      for(size_t j = 0; j < validMethods.size(); j++)\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686343264, 'comment_body': '```suggestion\r\n      for(size_t j = 0; j < validMethods.size(); j++)\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686343646, 'comment_body': ""```suggestion\r\n        map<string, ParamData>& parameters = paramMethods[validMethods[i]].Parameters();\r\n```\r\nThis may be true in other places too; there's no need to copy the map here---we can just use a reference to the one inside `paramMethods[validMethods[i]]`.  Of course this will not really make any computational difference since we are just printing documentation, but still. :)"", 'comment_created': datetime.datetime(2021, 8, 10, 21, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686343823, 'comment_body': 'Can you add a header to this file including the license too?', 'comment_created': datetime.datetime(2021, 8, 10, 21, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686344028, 'comment_body': '```suggestion\r\n          it->second, NULL, (void*) &isSerial);\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686344359, 'comment_body': ""It might be nice to add a comment here indicating what we do and don't print, so that a reader can know at a glance instead of having to look through the various cases."", 'comment_created': datetime.datetime(2021, 8, 10, 21, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686345235, 'comment_body': ""Another style comment, I think in general it's just fine to put the statement after the `if` on a new indented line, like you did above."", 'comment_created': datetime.datetime(2021, 8, 10, 21, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686345625, 'comment_body': 'I think you are already planning to do this, but I just wanted to call it out in a comment---if you can add documentation too here I think it would be really nice. :+1:', 'comment_created': datetime.datetime(2021, 8, 10, 21, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686345913, 'comment_body': 'We should avoid using `using` declarations in header files, because then those declarations will apply to any code that includes this header file.  `using` declarations should only be in `.cpp` files.  (I know that makes things more verbose in header files, unfortunately...)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686346017, 'comment_body': 'This file needs a license too. :)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686347076, 'comment_body': 'It could also be useful to expand this comment to add a bit about what `add_python_wrapper()` does. :+1:', 'comment_created': datetime.datetime(2021, 8, 10, 21, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686347498, 'comment_body': 'I am not sure if this is the same as the previous macro, but can you just call `add_python_binding()` here?', 'comment_created': datetime.datetime(2021, 8, 10, 21, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686347665, 'comment_body': '```suggestion\r\n        ""#include <${loc}>\\n"")\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686347712, 'comment_body': '```suggestion\r\n      ""from .${group_name} import *\\n"")\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686348025, 'comment_body': 'Is this comment still accurate?  I thought we only generate one binding now, that can work differently depending on whether the user has included scikit first.  (I have not read far enough in the PR to consider this comment carefully yet...)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686348171, 'comment_body': '```suggestion\r\n      ${CMAKE_BINARY_DIR}/src/mlpack/bindings/python/generate_py_wrapper_${group_name}.cpp\r\n      ${CMAKE_SOURCE_DIR}/src/mlpack/bindings/python/print_wrapper_py.hpp\r\n      ${CMAKE_SOURCE_DIR}/src/mlpack/bindings/python/print_wrapper_py.cpp)\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686348490, 'comment_body': ""This should have a license too.  (I'll stop pointing this out in other new files, but basically we should have the license and a comment about the file in every new file in the PR.)"", 'comment_created': datetime.datetime(2021, 8, 10, 21, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686348808, 'comment_body': 'I think this is debugging output and can be removed?', 'comment_created': datetime.datetime(2021, 8, 10, 21, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686349617, 'comment_body': ""Here is another place we shouldn't use a `using` declaration.  (I know it will pollute the code below with lots of `std::`...)"", 'comment_created': datetime.datetime(2021, 8, 10, 21, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686349729, 'comment_body': 'In most places you can probably just do `#include <mlpack/prereqs.hpp>` and that should be sufficient.', 'comment_created': datetime.datetime(2021, 8, 10, 21, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686349945, 'comment_body': 'I think the indentation here is off---looks like tabs instead of spaces?', 'comment_created': datetime.datetime(2021, 8, 10, 21, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686350692, 'comment_body': ""Nice, it's good to split this support into a unified place."", 'comment_created': datetime.datetime(2021, 8, 10, 22, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686351138, 'comment_body': 'Just an overall structural comment---each of these utility functions is pretty short, and so it might make sense to make a file called, e.g., `wrapper_functions.hpp` or similar that can hold all of these utilities.  There, it might make sense to put the definitions in the `.hpp` file and either put the (inlined) definitions in an `_impl.hpp` file, or a `.cpp` file.', 'comment_created': datetime.datetime(2021, 8, 10, 22, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686351468, 'comment_body': ""Any non-inlined non-templated function's definition should go into a `.cpp` file---otherwise, if multiple translation units include this header, we will get a duplicate definition error at link time.  If you want to keep it in a header file, you can just mark it `inline`. :+1:"", 'comment_created': datetime.datetime(2021, 8, 10, 22, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686352499, 'comment_body': 'Nice cleanup!', 'comment_created': datetime.datetime(2021, 8, 10, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686353152, 'comment_body': ""Isn't this the same as `GetClassName()`?  If the name isn't descriptive here, maybe it makes more sense to make the name `GetClassName()` more generic?"", 'comment_created': datetime.datetime(2021, 8, 10, 22, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686353430, 'comment_body': '```suggestion\r\n        d, NULL, (void*) &isSerial);\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 22, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686353684, 'comment_body': ""It could be useful to add a few descriptive comment lines here on when we do and don't print (and why)."", 'comment_created': datetime.datetime(2021, 8, 10, 22, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686353992, 'comment_body': '```suggestion\r\n  return "">>> import pandas as pd"";\r\n```\r\nThis could be a little simpler. :)', 'comment_created': datetime.datetime(2021, 8, 10, 22, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686354258, 'comment_body': '```suggestion\r\n  return "">>> from mlpack import preprocess_split"";\r\n```\r\nAnother quick simplification. :)', 'comment_created': datetime.datetime(2021, 8, 10, 22, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686354468, 'comment_body': '```suggestion\r\n  return "">>> from mlpack import "" + GetClassName(groupName);\r\n```\r\nHere\'s another one. :)  Up to you if you want to take any of them. :+1:', 'comment_created': datetime.datetime(2021, 8, 10, 22, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686354962, 'comment_body': ""I see this snippet in a few places, where we detect whether or not something should be printed or whether it's a hyperparameter.  Maybe it makes sense to split that into a separate utility function?"", 'comment_created': datetime.datetime(2021, 8, 10, 22, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686355062, 'comment_body': '```suggestion\r\n  if (callMethod != """")\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 22, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686356075, 'comment_body': '```suggestion\r\n    if (extraDefnSet.find(d.tname) == extraDefnSet.end())\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 22, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686356983, 'comment_body': 'It can be a lot clearer to read here if you use `endl` for the newlines, and then just print each line separately. :+1:', 'comment_created': datetime.datetime(2021, 8, 10, 22, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686357288, 'comment_body': ""Also, should we print a warning here of scikit isn't present?  Or, if we do, we should probably print a bit more detail about whether that actually makes a difference."", 'comment_created': datetime.datetime(2021, 8, 10, 22, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686357595, 'comment_body': 'Do we need to import this for every class?  Or should this be in the `__init__.py` for mlpack?', 'comment_created': datetime.datetime(2021, 8, 10, 22, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686357819, 'comment_body': 'It would be really great to add some details about what this block of code does.  It is a bit intimidating to look at right now :smile:', 'comment_created': datetime.datetime(2021, 8, 10, 22, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686358027, 'comment_body': '```suggestion\r\n  cout << string(indent, \' \') << ""def __init__(self,"" << endl;\r\n```\r\nLooks like a tab character was here I think?', 'comment_created': datetime.datetime(2021, 8, 10, 22, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686358352, 'comment_body': ""It might make the code a bit clearer to use the exact type instead of `auto`---that's just a readability comment. :+1:"", 'comment_created': datetime.datetime(2021, 8, 10, 22, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686358638, 'comment_body': 'Maybe you are already planning this, but I think this file could benefit from a cleanup/commenting/style pass. :+1:  What the code *does* looks great though!', 'comment_created': datetime.datetime(2021, 8, 10, 22, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686360461, 'comment_body': '```suggestion\r\n```\r\nI guess we can remove the TODO now. :)', 'comment_created': datetime.datetime(2021, 8, 10, 22, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686880474, 'comment_body': 'You had mentioned that we can remove this macro eventually entirely---maybe before we merge this PR we should be sure to write down that intention somewhere?  Perhaps in a separate issue or something?', 'comment_created': datetime.datetime(2021, 8, 11, 14, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686882652, 'comment_body': ""Do you think it's worth adding a little bit of extra text here to describe what the example is doing?  Or maybe we should print comments in the generated code (e.g. inside of `CALL_METHOD()` or something)?  Or, perhaps, it's self-explanatory enough as-is?  I'm not sure, I'm just tossing ideas out there. :smile:"", 'comment_created': datetime.datetime(2021, 8, 11, 14, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686883115, 'comment_body': '```suggestion\r\n// Allow saving the model.\r\n```\r\nI think we can update this comment now. :+1:', 'comment_created': datetime.datetime(2021, 8, 11, 14, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686883670, 'comment_body': '```suggestion\r\n  AdaBoostModel* m = new AdaBoostModel();\r\n```\r\nMinor simplification (goes with the comment above). :)', 'comment_created': datetime.datetime(2021, 8, 11, 14, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686883785, 'comment_body': '```suggestion\r\n```\r\n(goes with the comment below)', 'comment_created': datetime.datetime(2021, 8, 11, 14, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686884716, 'comment_body': ""I didn't mean to commit this to #2995, but, I guess it is true and is a good comment to leave in..."", 'comment_created': datetime.datetime(2021, 8, 11, 14, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686885331, 'comment_body': ""It's really nice how simple this binding is. :)"", 'comment_created': datetime.datetime(2021, 8, 11, 14, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686886787, 'comment_body': 'I think `RequireOnlyOnePassed` is not necessary here, since it checks that only one option in the given set of options was passed.  So, what this does is just ensure that `test` and `input_model` were passed---but another way you could handle that is just to use `PARAM_MATRIX_IN_REQ()` and `PARAM_MODEL_IN_REQ()` to achieve the same result.  (This applies to `adaboost_predict_main.cpp` too.)  :+1:', 'comment_created': datetime.datetime(2021, 8, 11, 14, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686889379, 'comment_body': 'The name `fit()` here matches the Python/scikit API, but maybe we should consider calling it `_train` internally to match the `Train()` function that mlpack provides?  Then, in the Python bindings, we could have a mapping from names like `_train` to `fit()`.  What do you think?', 'comment_created': datetime.datetime(2021, 8, 11, 14, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686890455, 'comment_body': '```suggestion\r\n  LinearRegression* lr = params.Get<LinearRegression*>(""input_model"");\r\n```\r\nThis happens a couple times in the adapted bindings, but you could often declare and set the value of a model in the same line for simplicity. :+1:', 'comment_created': datetime.datetime(2021, 8, 11, 14, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686892521, 'comment_body': 'Since these programs are already split, do you think we could make a wrapper for them as they are?  Or would it need more modification?  (We can do that in a different PR of course, I am just curious. :))', 'comment_created': datetime.datetime(2021, 8, 11, 14, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686895782, 'comment_body': 'It might be worth also testing to see that an exception is thrown when test data is passed that has a different shape than the input data. :+1:', 'comment_created': datetime.datetime(2021, 8, 11, 14, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686897832, 'comment_body': ""It could also be useful to check that an exception is thrown when negative regularization is passed.  I can't quickly think of anything else to add though.  Perhaps it's worth checking that when passing a 2-d matrix and no responses, everything succeeds?  (That is, the responses are taken to be the second row of data.)"", 'comment_created': datetime.datetime(2021, 8, 11, 14, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 688667848, 'comment_body': 'Yes, that is correct, GetBindingName does not give the ""class"" name, I just created a new function GetWrapperName because GetBindingName will still be used for bindings that are not yet refactored.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 688668143, 'comment_body': 'However, there is still some issue with the link, I will change that too.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 688713856, 'comment_body': 'yeah you are right, I forgot to remove this.', 'comment_created': datetime.datetime(2021, 8, 13, 18, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 688732185, 'comment_body': 'agreed, this was actually used only while generating the markdown docs and the only difference is that it appends a ""class"" in front of the class name. I have removed this function.', 'comment_created': datetime.datetime(2021, 8, 13, 19, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 688991723, 'comment_body': ""I have a small doubt here. PrintInputProcessing output for a required matrix parameter is:\r\n\r\n```cython\r\n  # Detect if the parameter was passed; set if so.\r\n  training_tuple = to_matrix(training, dtype=np.double, copy=p.Has('copy_all_inputs'))\r\n  if len(training_tuple[0].shape) > 2:\r\n    training_tuple[0].shape = (training_tuple[0].shape[0], 1)\r\n  training_mat = arma_numpy.numpy_to_mat_d(training_tuple[0], training_tuple[1])\r\n  SetParam[arma.Mat[double]](p, <const string> 'training', dereference(training_mat))\r\n  p.SetPassed(<const string> 'training')\r\n  del training_mat\r\n```\r\n\r\nand for a non-required parameter is:\r\n\r\n```cython\r\n  if training is not None:\r\n    training_tuple = to_matrix(training, dtype=np.double, copy=p.Has('copy_all_inputs'))\r\n    if len(training_tuple[0].shape) < 2:\r\n      training_tuple[0].shape = (training_tuple[0].shape[0], 1)\r\n    training_mat = arma_numpy.numpy_to_mat_d(training_tuple[0], training_tuple[1])\r\n    SetParam[arma.Mat[double]](p, <const string> 'training', dereference(training_mat))\r\n    p.SetPassed(<const string> 'training')\r\n    del training_mat\r\n```\r\n\r\napart from the first if condition (that just checks of the parameter is passed or not) shouldn't the entire code be the same?\r\nwhy is there a ` > 2` for required and ` < 2` for a required parameter here?"", 'comment_created': datetime.datetime(2021, 8, 14, 21, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 689125340, 'comment_body': 'I think you are right!  This seems to be a bug.  The intention of that code, if I remember right, was to make it so that if a user passed a vector, we would automatically cast it to a matrix.  So, the correct one is `< 2`, not `> 2`.  Want to also make a change to fix this for the required parameter case?\r\n\r\nNice catch!', 'comment_created': datetime.datetime(2021, 8, 15, 18, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689135146, 'comment_body': 'Actually, I think we can use that for now. We can use short description as the one-liners we are planning to print and the long description as the description that is printed just above the example. Take a look at `adaboost_train_main.cpp`', 'comment_created': datetime.datetime(2021, 8, 15, 19, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 689660281, 'comment_body': ""I'll leave this conversation open for now, and we can just decide how we want to handle it before we merge this. :)"", 'comment_created': datetime.datetime(2021, 8, 16, 15, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689662790, 'comment_body': '```suggestion\r\n          << languages[i] << "" }."";\r\n```\r\nLittle style fix. :)', 'comment_created': datetime.datetime(2021, 8, 16, 15, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689663859, 'comment_body': 'Awesome, thanks for the custom implementation here.  I know it is nitpicky, but can you change the names to match the mlpack naming schemes?  `ReplaceAllCopy()`, `strCopy`, `startPos`, etc. :+1:', 'comment_created': datetime.datetime(2021, 8, 16, 16, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689829338, 'comment_body': ""Let me know if I missed it, but I think this comment is still outstanding so I won't resolve it yet. :+1:"", 'comment_created': datetime.datetime(2021, 8, 16, 20, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689829923, 'comment_body': '```suggestion\r\n      if (it->second.input && foundArma == string::npos && !isSerial)\r\n```\r\nI think this could all fit on one line. :+1:', 'comment_created': datetime.datetime(2021, 8, 16, 20, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689834242, 'comment_body': 'Thanks for the update here.  Personally I\'m not sure the new warning is all that descriptive:\r\n```\r\n    cout << ""  this mlpack method supports scikit utils, install scikit-learn\\\\n"";\r\n    cout << ""  if you wish to use them!\\"", category=ImportWarning)"" << endl;\r\n```\r\nBut, this doesn\'t make it clear to a user what exactly the scikit utilities that are supported are.  Do you think there\'s an easy way to express that in a sentence or two?\r\n\r\nAlso, as I think about it more, maybe we don\'t even need to print a warning?  If the user wants to use scikit utilities, then they will necessarily have scikit installed anyway, I think. :)', 'comment_created': datetime.datetime(2021, 8, 16, 20, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689835039, 'comment_body': '```suggestion\r\n      if (isSerial)\r\n        serializable.insert(itr->second.cppType);\r\n```\r\nAnother little style issue I found. :)', 'comment_created': datetime.datetime(2021, 8, 16, 20, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689835218, 'comment_body': '```suggestion\r\n      if (itr->second.input && foundArma == string::npos && !isSerial)\r\n```\r\nI think this will fit on one line too. :+1:', 'comment_created': datetime.datetime(2021, 8, 16, 20, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689836848, 'comment_body': ""Right, that makes sense, but how do we know in the binding code which binding to use the `LONG_DESCRIPTION()` from?  I guess you are just looking for the name `train`?  (I guess that's ok for now, but we should probably document that in the `LONG_DESCRIPTION()` documentation.)"", 'comment_created': datetime.datetime(2021, 8, 16, 20, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689877074, 'comment_body': 'I think we might need another `endl` here before the `</div>`.  The scripts expect a `</div>` on its own line (it makes finding it way easier...).\r\n\r\nYou can see the `</div>` ends up in the text for every language:\r\n\r\nhttp://mlpack2.ratml.org/doc/mlpack-git/python_documentation.html#adaboost\r\nhttp://mlpack2.ratml.org/doc/mlpack-git/cli_documentation.html#adaboost', 'comment_created': datetime.datetime(2021, 8, 16, 21, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689878384, 'comment_body': 'Actually, there are no tags here for me to move around the `Example` section with.  I think maybe it would be easier if we chose to print the example earlier in `print_docs.cpp` if this is a wrapper.  Let me know what you think. :+1:', 'comment_created': datetime.datetime(2021, 8, 16, 21, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689880192, 'comment_body': 'I think this part may not be working right; these specific options still show up in the `Parameters` table:\r\n\r\nhttp://mlpack2.ratml.org/doc/mlpack-git/python_documentation.html#adaboost\r\nhttp://mlpack2.ratml.org/doc/mlpack-git/python_documentation.html#adaboost\r\n\r\n(However, the Julia bindings seem to omit these parameters successfully?)', 'comment_created': datetime.datetime(2021, 8, 16, 21, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689881069, 'comment_body': 'Alternately, maybe it makes sense to keep the example where it is, but add an additional section that shows the constructor arguments right above the `Parameters` table.', 'comment_created': datetime.datetime(2021, 8, 16, 21, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689995829, 'comment_body': 'this is changed [here](https://github.com/NippunSharma/mlpack/blob/e3df534edab5ec59374ab042f9bd4dfb26b58065/src/mlpack/bindings/python/print_wrapper_py.cpp#L185)', 'comment_created': datetime.datetime(2021, 8, 17, 2, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 689997835, 'comment_body': 'actually, whatever method is passed first in the group_bindings() macro is expected to have a long description, but I agree, this should be documented. done :+1: ', 'comment_created': datetime.datetime(2021, 8, 17, 2, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 689998413, 'comment_body': 'We can definitely add a small text line here, but for python, I think that the example is pretty straightforward and self-explanatory. Do you have something specific in mind that you wish should be added?', 'comment_created': datetime.datetime(2021, 8, 17, 3, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 689998863, 'comment_body': 'changed [here](https://github.com/NippunSharma/mlpack/blob/e3df534edab5ec59374ab042f9bd4dfb26b58065/src/mlpack/bindings/python/print_input_processing.hpp#L356)', 'comment_created': datetime.datetime(2021, 8, 17, 3, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690000405, 'comment_body': 'Some changes would be required in the `BINDING_*` macros, other than that there should not be any changes, but if we combine these now then documentation for other languages might get skewed because it does not already have a single file that can be used for rest of the languages. To tackle this, we will have to copy each `_main.cpp` file and create a new file that we will use for python. ', 'comment_created': datetime.datetime(2021, 8, 17, 3, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690001343, 'comment_body': 'maybe [this](https://mlpack.org/doc/mlpack-git/doxygen/bindings.html) can be a good place for the documentation?', 'comment_created': datetime.datetime(2021, 8, 17, 3, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690003883, 'comment_body': 'this was changed [here](https://github.com/NippunSharma/mlpack/blob/e3df534edab5ec59374ab042f9bd4dfb26b58065/src/mlpack/bindings/markdown/print_param_table.cpp#L41) do you want me to add something else here?', 'comment_created': datetime.datetime(2021, 8, 17, 3, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690004466, 'comment_body': 'this was changed [here](https://github.com/NippunSharma/mlpack/blob/e3df534edab5ec59374ab042f9bd4dfb26b58065/src/mlpack/bindings/markdown/print_param_table.cpp#L80)', 'comment_created': datetime.datetime(2021, 8, 17, 3, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690004770, 'comment_body': 'already added it [here](https://github.com/NippunSharma/mlpack/blob/e3df534edab5ec59374ab042f9bd4dfb26b58065/src/mlpack/bindings/markdown/print_param_table.hpp#L18)', 'comment_created': datetime.datetime(2021, 8, 17, 3, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690005223, 'comment_body': 'added it [here](https://github.com/NippunSharma/mlpack/blob/e3df534edab5ec59374ab042f9bd4dfb26b58065/src/mlpack/bindings/python/CMakeLists.txt#L315) :+1: ', 'comment_created': datetime.datetime(2021, 8, 17, 3, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690013170, 'comment_body': 'I changed the link of the sidebar to class-adaboost. In mlpack.md it looks like this:\r\n\r\n```markdown\r\n<div class=""language-title"" id=""python"" markdown=""1"">\r\n## class Adaboost\r\n{: #python_class-adaboost }\r\n</div>\r\n```\r\n\r\nshouldn\'t this be linking [here](http://mlpack2.ratml.org/doc/mlpack-git/python_documentation.html#class-adaboost) ?\r\nLet me know if I am missing something?', 'comment_created': datetime.datetime(2021, 8, 17, 3, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690015122, 'comment_body': 'maybe we can get away with this by just changing `class Adaboost()` to `Adaboost()` ?', 'comment_created': datetime.datetime(2021, 8, 17, 3, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690019595, 'comment_body': 'Nice catch! this was due to clashing for loop variable names, fixed this :+1: ', 'comment_created': datetime.datetime(2021, 8, 17, 4, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 691262998, 'comment_body': ""Ahh, good point.  Let's handle that in another PR in the future. :)"", 'comment_created': datetime.datetime(2021, 8, 18, 13, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 691264486, 'comment_body': ""Yeah, you are right.  Let's perhaps revisit this another time, if there ever arises an example that's non-trivial. :+1:"", 'comment_created': datetime.datetime(2021, 8, 18, 13, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 691264985, 'comment_body': ""Yep, that's just fine.  I think eventually we will end up cleaning things up a bit once all the bindings are grouped, but using the long description from the first binding is just fine for now. :+1:"", 'comment_created': datetime.datetime(2021, 8, 18, 13, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 691265778, 'comment_body': ""Ahh, agreed, that would probably be a good place.  Up to you if you want to handle that in this PR---if not, we should at least open an issue so we don't forget. :+1:"", 'comment_created': datetime.datetime(2021, 8, 18, 13, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 691268288, 'comment_body': ""I'm not sure I understand fully.  When I take a look at `mlpack.md` as generated in commit 9d4d4ba7, I see the `language-title` block just like you posted, but the sidebar code is still pointing at the wrong anchor:\r\n\r\n```\r\n - [class Adaboost](#python_adaboost){: .language-link #python }\r\n```\r\n\r\nIt seems to me like the issue will be fixed if we can emit `#python_class-adaboost` for that link.\r\n\r\nBut, maybe I have misunderstood a deeper point here?"", 'comment_created': datetime.datetime(2021, 8, 18, 14, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 691269066, 'comment_body': ""Oh, sure, that's fine, maybe I was looking at the wrong thing.  I think I expected just a block at the top that collected all the information in one place, but how you did it is fine too. :+1:  Sorry about the confusion!"", 'comment_created': datetime.datetime(2021, 8, 18, 14, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 691278083, 'comment_body': 'Awesome :rocket: ', 'comment_created': datetime.datetime(2021, 8, 18, 14, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697794889, 'comment_body': ""I think we need to add dependencies for the `python` target here:\r\n\r\n```suggestion\r\n    add_dependencies(python generate_py_wrapper_${name})\r\n    add_dependencies(generate_py_wrapper_${group_name} python_configured)\r\n```\r\n\r\nI think that's right---I don't think there is a build step here, we just need to make `generate_py_wrapper_${group_name}` and run it."", 'comment_created': datetime.datetime(2021, 8, 28, 2, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697796562, 'comment_body': '```suggestion\r\n    cout << ""(self, "" << endl;\r\n```\r\nI noticed there are a lot of style issues in this file.  Do you mind taking a pass and fixing them?  Alternately, I can provide a patch commit.', 'comment_created': datetime.datetime(2021, 8, 28, 3, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697796645, 'comment_body': '```suggestion\r\n```\r\nWe already added an empty newline above, so, no need for another one here.', 'comment_created': datetime.datetime(2021, 8, 28, 3, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697798167, 'comment_body': 'I think if we rename this `adaboost_train_test` and adapt the includes/other bits to use `train` instead of `fit` (and do the same for the linear regression test), then the build will pass. :+1:', 'comment_created': datetime.datetime(2021, 8, 28, 3, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 710962766, 'comment_body': 'yeah, maybe we should just remove the warning altogether ', 'comment_created': datetime.datetime(2021, 9, 17, 11, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 710970691, 'comment_body': 'I took a pass through the file and fixed some issues. If some are still persisting feel free to point them out', 'comment_created': datetime.datetime(2021, 9, 17, 11, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 730289378, 'comment_body': ""```suggestion\r\n    if (addWrapperDocs[i])\r\n```\r\nIt looks like the Markdown build is failing because of this---I'm pretty sure this is the right solution.  Let me know what you think, and once you merge this then the build should pass.  (I made this change locally so I could rebuild the documentation for the test website.)"", 'comment_created': datetime.datetime(2021, 10, 16, 17, 18, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 730289534, 'comment_body': '```suggestion\r\n      cout << GetWrapperLink(bindingName);\r\n```\r\nQuick style fix. :)', 'comment_created': datetime.datetime(2021, 10, 16, 17, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 730290089, 'comment_body': ""The filename changed, so I think Github didn't transfer the comment right, so just so it doesn't get lost here's a comment I left elsewhere that we probably should address before merge:\r\n\r\n> It might be worth also testing to see that an exception is thrown when test data is passed that has a different shape than the input data. +1"", 'comment_created': datetime.datetime(2021, 10, 16, 17, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 730290181, 'comment_body': ""This is also a copy-pasted comment from elsewhere where the original filename changed so the comment is no longer attached to code:\r\n\r\n> It could also be useful to check that an exception is thrown when negative regularization is passed. I can't quickly think of anything else to add though. Perhaps it's worth checking that when passing a 2-d matrix and no responses, everything succeeds? (That is, the responses are taken to be the second row of data.)"", 'comment_created': datetime.datetime(2021, 10, 16, 17, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 730290920, 'comment_body': '```suggestion\r\n        string eg = ReplaceAllCopy(doc.example[j](), ""|"", ""\\\\|"");\r\n```\r\nI think this will all fit on one line within 80 characters. :+1:', 'comment_created': datetime.datetime(2021, 10, 16, 17, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': 'b42e00b97480db921ea96e57d0222f929b490ffd', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '125959c10a6d15a2ffcec79868842f85ac1e58e5', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4aba9601caedbc4f9d96fa31aed0f076f0be0fa', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dbf40e4a96fb52221733025bf4bdf0994a9a97f', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '271d7da4229391c75011159fe4faba0b92e1d4a2', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9387a0329ad0dc2cfdf2b1f8f50063c4a4a7e950', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f67e631af602a704efb9368c2cb424647ac8374', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29813653193dd62db9019c9fd243ff38205358fb', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6ae9d88291093ae3136e8511f1a98352c50fdee', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba5b88f0f11047fde78817e8f9edb0d790cdcf61', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'babd7aacc52757010c5d89ae6343e30f6d023f9a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c0fd8bf1bb83abe96afd08a7aff4772d6df4cb87', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5d02312b3e231e70ddfa74ca6f5ec2553225ca51', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '211ce0425be5056ff17ed2adf2404188b2264e80', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '06592dc1fe1ec95ad3655a3aa6dfe1794085842c', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33bfae8af77b29e9bdf279009d0e1af8c1408210', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '124617d94d65c14114cc0e429e20eef752c43a86', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04272270325dacb300104e8d6201a9b9638b578c', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1be7946cbe9c27b275002ce14c7c05c4d5d5762', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f91f4baaf4183c6d79d42bffd616556534abd6b', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b48f9053884db1bab481615f2b0a379622c374ef', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ce3a15c5f8470a0bb2b21c2fd619398bc9dd6bd', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da94a36cdf7ab0146681f22eb77d641d420c8cfe', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9758e802b39509682252f10258458708ccc14310', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07ba32f37678bc4b22fb00027ece5b1cfb807304', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6da62bdba04717b7cc21b81e9feb8f72bdef7667', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20d9cf5cc3d576a40995813d02d0ee30e535de45', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '542e515aaf0ee7feb3a96997fd23389a46424edd', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2871b3578ed2e98fcc8d05519e8403c5bc2a6609', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '420239711294255436d276c73d5ddf4e4b930764', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec3a6bde87c7390debebaa2f712f73eb8e1b7197', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87b3fb34613667f49469c5e30798e2ffb01b9b17', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd06abbe248310477318e21c1f4447f06fd5dccc', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49d3c4525c7eebd0cafbaef37a62c26c3841cc65', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99835a53cb6f9201aad3faf089c33428b44d2b63', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27988ec7c42cd8232f98fc2b5ef5029089c2db32', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '186f8c7b483afdb0e42058b0727584ea98d86dd4', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a312f306ccb19d4118bb09439cdc8951943edc0e', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0371a5e451c8bf4bd0f6d57c5a0c4a3d3f67789c', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '485acfc274bd78ca801f92fc509f9457d11b34bc', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f21dea3cfa592abba87fc479dc0556647cec43b0', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3df534edab5ec59374ab042f9bd4dfb26b58065', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d4d4ba7335822856407ec07782a08c4f807cc08', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4a519b4f953e806b9a1754682c0929b8298359f', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45ed5c4545675eb1c2a845b5d6d751c7272c3678', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea2ddddd2964b32a19fc44ce688e58e718d37b25', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83a7e21ee07c0018c7ddce2074eb982107bee3c1', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bbb6c7dd01efcf3cdf910be5ca4df8ccf8039e3', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2c2a518b5fa34e9f9eb9a6897d8295e9a76ace3', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd17841576032003a085361bbf8729762cd0ef05', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4609fac75c2711145cfd66cedde3b3b556cdb038', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c08ba722a93cd925b3d1f4225e44967c506b667', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd32225f08313276a77c0be69dfb43a3b0a606428', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6ce672560fa7fa0b48d589a6a75ea14c68e0b76', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24e84042b7e349c20d99e7507fe3934fecd60b8e', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55c68933e16696ec986842864db10d55980ab506', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6323ac3382fc00b3bd49083ee067e10dfba01be', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e15b7bce58375ca9cd115b89da150f9e7b8a63bc', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}]",Nippun Sharma,53967069,,User,,27,,62,53
675818934,Threadsafe parameter handling for bindings,"This is an overhaul of the `IO` infrastructure to fix the thread-safety issue of #2832 and other issues that @NippunSharma is encountering in his GSoC work.  So far, it is just a proof of concept, and the only binding that works is `linear_regression_main.cpp` compiled as a CLI binding.  As the work here progresses, we'll adapt other bindings and languages.

There are just a couple of high-level implications of these changes:

1. *`mlpackMain()` will be replaced with `$BINDING_NAME(util::Params&, util::Timers&)`*.  That is, every call to a binding will receive a populated `util::Params&` argument and a `util::Timers&` argument as input.  The `util::Params&` argument is meant to be used instead of `IO::HasParam()` and `IO::GetParam<>()` (and other functions), and the `util::Timers&` argument is meant to be used instead of `Timer::Start()` and `Timer::Stop()`.  This means that a binding should internally *never* access any global singleton*, so we should have no thread safety issues anymore.

2. *Defining the name of a binding is now done through the `BINDING_NAME` macro*, which must be set at the top of every binding's `_main.cpp` file (even before including `mlpack_main.hpp`).  Note that is it possible to compile multiple bindings into the same translation unit now, since `BINDING_NAME` can be unset and reset as the preprocessor parses the binding implementations.  This solves @NippunSharma's need to include multiple bindings in one file.

3. *`PARAM_*()` calls do not need to change.*  Specifically, the `PARAM_*()` macros are refactored to use whatever the setting of `BINDING_NAME` is to set the binding name right; so, this code does not need to change.  This is also true for `BINDING_NAME()` (which is now called `BINDING_USER_NAME()`), `BINDING_SHORT_DESC()`, `BINDING_LONG_DESC()`, `BINDING_EXAMPLE()`, and `BINDING_SEE_ALSO()`.

@NippunSharma take a look and let me know what you think, and whether or not you think this will solve the issues you are encountering too.  Basically the things remaining to be done are adapt the rest of the bindings (should be relatively easy), and apply the same types of changes to the other languages too (that might be a little less easy).  We can split up the work if you like, or I can keep plodding through it as I'm able to. :+1:

CC: @Yashwants19 @coatless 

* Well, technically, there are still some calls to `Timer::Start()` and `Timer::Stop()` that will use a ""global"" timer singleton, but, that is already threadsafe, so I am not going to worry about it too much here...",True,2995,https://api.github.com/repos/mlpack/mlpack/pulls/2995,https://github.com/mlpack/mlpack/pull/2995,closed,10381,9790,270,77,19,14,3,0,"[{'name': 'c: automatic bindings'}, {'name': 'c: core'}, {'name': 't: bugfix'}]",2021-06-22 23:18:47+00:00,2021-08-14 14:48:45+00:00,4548598.0,"52 days, 15:29:58","[{'comment_id': 656645027, 'comment_body': 'The changes to the binding itself are not too intrusive.  We now just need to set `BINDING_NAME` appropriately in the beginning, and all calls like `IO::HasParam()` are now `params.Has()`, etc.  I think it could be possible to just regex the rest of the bindings and get good results.', 'comment_created': datetime.datetime(2021, 6, 22, 23, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 656646254, 'comment_body': 'Here are the changes to how `main()` works in the command-line bindings now.  You can see instead of calling `mlpackMain()`, we call `BINDING_NAME()`.  This also means we can have more than one binding defined in a single translation unit---previously, we required that each binding was in its own translation unit because they were all called `mlpackMain()`.\r\n\r\nThis also means that we could now generate *one* `.so` file for *all* bindings (though it might be large), instead of one `.so` file for *each* binding.  We can apply this same set of changes for any language, including R and Python, and I think we will also see compilation time improvements for the bindings (which is probably something @eddelbuettel will rejoice about :smile:).', 'comment_created': datetime.datetime(2021, 6, 22, 23, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 656646616, 'comment_body': ""I am not sure yet, but I think this functionality is specific to the command-line bindings and likely could be removed from this class, simplifying the code somewhat.  I'll keep looking into this in the upcoming days."", 'comment_created': datetime.datetime(2021, 6, 22, 23, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 656976731, 'comment_body': 'that would be much better, `IO` is needed for the bindings only. ', 'comment_created': datetime.datetime(2021, 6, 23, 10, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 657015535, 'comment_body': 'A single `.so` would be nice to have. One problem I think (I am not sure) that can arise is that whenever I do some changes to a single binding then will it rebuild all the other bindings also?', 'comment_created': datetime.datetime(2021, 6, 23, 11, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 657016578, 'comment_body': ""wouldn't writing `BINDING_NAME(util::Params& params, util::Timers& timer)` be better here? just a suggestion, it is completely up to you."", 'comment_created': datetime.datetime(2021, 6, 23, 11, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 657017788, 'comment_body': 'It will simplify the code, but according to me using aliases through the command line is a lot easier instead of writing complete parameter names.', 'comment_created': datetime.datetime(2021, 6, 23, 11, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 657336845, 'comment_body': ""Actually CMake should be able to avoid doing that---while we are combining each binding's `_main.cpp` into the final `.so`, each individual file will produce its own `.o` file, which can be cached for future compilations.  So if you only modify one, then that one binding's `.o` will be recompiled, and then combined with all the other `.o`s whose compilation is cached.  At least, I *think* that's what will happen. :smile:"", 'comment_created': datetime.datetime(2021, 6, 23, 17, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 657337907, 'comment_body': 'Absolutely, I agree---but when looking through the code, it seems like CLI11 handles all the aliases and maps them back to the original parameter names.  So we may need to keep the `alias` field in `util::ParamData`, but I don\'t think we need this map in `util::Params`.  In fact, the `aliases` map here is only used in `Has()` and `Get()`, so that you could define a parameter `training` with alias `t`, and then call `Has(""t"")` in the binding.  I don\'t think we access parameters by their alias anywhere in the existing bindings, so we can probably remove this member.  But, if I do it, I\'ll do it in a follow-up PR.', 'comment_created': datetime.datetime(2021, 6, 23, 17, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 657338647, 'comment_body': 'I agree---changed to `BINDING_NAME` in 08f9f2e33.', 'comment_created': datetime.datetime(2021, 6, 23, 17, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 657339415, 'comment_body': ""Definitely, the only trickiness is that `Timer::Start()` and `Timer::Stop()` are used in various places in the codebase, not necessarily in the binding functions.  But the `Timer::` functions end up accessing a `util::Timers` object that's stored in `IO`, so we would just need to split into a separate `Timer` singleton.  (That isn't hard, but again to try and keep this one simple, maybe that should be a separate PR.)"", 'comment_created': datetime.datetime(2021, 6, 23, 17, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 682227294, 'comment_body': 'Just a bookmark, to remember where I stopped.', 'comment_created': datetime.datetime(2021, 8, 4, 1, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 684798770, 'comment_body': 'Not needed anymore?', 'comment_created': datetime.datetime(2021, 8, 8, 16, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 687939609, 'comment_body': 'Nice point---I think I can remove all of the code related to this function.  I tried in 0bc423c1', 'comment_created': datetime.datetime(2021, 8, 12, 17, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': '312553af1b018ab0dc5d8e0498ee1815886090e1', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '541c62c148b39b43bc816b787eed3769c27b517f', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf6b0dcb6facac72f6c9fe4bd015067496b2ab2', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cf377063d5c047ec9aa9e04b25deba4be93c366', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fbdcd7968a17564bf3ee18c103c97529f431179', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eae2b39b7ab310c8608631d274f12a16dcfb2d9', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10cfa634634c1c5d9fd8d2d30d5649f04aabc999', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '519152d68b45c86986313fe4ec0bf1b1a32c66b6', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39322708338a7dd17bbad37c376b4c8cbf4a5682', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6b76c25d8cca5cf508fcc804f50b01304c92865', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20d42a08436b37cc6f17186de7332c45acd13844', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08f9f2e33e1c266f5406c680e5d78600181a2ced', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1b5ae05334945ae8ecdb35f70bc2fbe5e5e838f', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce913710dec2b973953e3366a79a760d14b4bb74', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bff82395b2e1b8059d6ff7c15532b9ab533bdec3', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33adf02ed880c76d3df2adea5f1c713e841de3c6', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9eb26c8f8d48678fc99919c064732efeb3c333e8', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99b812a7a8e31a904d86124a4faba99a132ba635', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e8eeb5c7e26dc2a11d7a284bab0aebfd9ad3a3f', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f751dbea53665e4bd4f02a56b74722a4ce70e4f4', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '007530d285c9ecc831f6b33d1fa72f8a25dd71a1', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '096abf598653ef22996e4ba801d06e9fe5697f02', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2be89a32785c8944b2459c113cf487cab176bcfb', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fd6d5e7d3ba679c6022596ccda6a28589211d51', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6572780785d5e7cb3ebabcaf449a9b6b95fe5b97', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b340bcd34473185d176f70ca3f1b5186024f91e', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5486b096897718d6517c8ef92836a916e6084f31', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b38690f84b7b88cc18c6e46c02c08fd18d59dec1', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb39ec52a955be38961a4c17e4be3ab14319087', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d032eb92f2ae474f14200a53026e594060ed810', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fac256a861f9ce73911a174e4fa04f004b85f3fc', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40ff57871df101b38e115b4eef53ee81420807cc', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cca8493235661764dc53da0ea6ccf2b0430dde50', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd28763560e4c7f6a4d72966018dad473227e639d', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a609a6412c9f0194ccc9b4fdfd5d959ec9d9ec63', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bebd49c4a38396165ca6ed831acde40a9477347d', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8b12f50112bda1c8968498f83aabc2a69b51703', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0bb4dda14e18d94318f9ecf3de8fe066e05de21', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c09e82f245ae818a612f06537ad3cfd8f75e448b', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f729f551a85f73b0634dfa8e93b2d6a24bc25d2', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d4bb895a734beb60d987fe97aeb938f5b8452e6', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aad6e626862bf344b48129fa9f61839acdfcf60e', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a74b925950e9b720755c86dccf3d737c67332aa8', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1479b23a3bb545b97456e2bd178bfa705359ff8', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43d9c633c177e39101c626e7f07ed80d81149fef', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6db1f6059b1ea80ad44060e8cc50ad15401a7c3a', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49542147407d4f6b4ef1a1126ab282f3be33e220', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff6a1000ee432c799101f0c10d36c4d7b1a766b2', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30e22ded89e114c3400728f17ed21a620e7150fe', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51597fb49ff5b99898fdd6a815f46aef69e9402c', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac6b653f31c2387cf542f7cf242a5e21ec8d479e', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68ba3c3baafd98c2c835eff71f51f4f32942b91d', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04da87bf42bcb27c2106b055f6bd67e6dd33dff', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33d83e4db8b53d5407c79d423155b47b3cef7a2c', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f63a13f643278efbc6e67953761fbefa5c1577a0', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c47b5fed397217d73c17aa8c46f6715ac0f091f0', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1bc920028929a730b05fa3f827c0ed478a2cde9', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16d63517a2525eeb845e22dee9a2b19ecd438c09', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '905faca153474f54576005cac6589660ae22905b', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea811e493a9874af91d837208194dfa6f71af816', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b35345901ba5aaf9239fa2350fd62709b5579f5', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeb90c03ef4cdd340561c3f19cf43597fa25cbf4', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7689f450ffba22b60464934602ac1f79a8d35a4', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7289e9e4a6dbd9c810a66c2ba2eb6e7d0966f20', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f824ff4fc2dee9cab41b4dd410abc4c7696ff055', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8df493bd710e09597a3c4da2b90859a7a608af91', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68f5d45ea4e1f8b0fcba67ff94a5f29c4b1c4f29', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bebfea59cc2b6c6145c1aaf72e042eae8c7354c', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba9377646722c816e1b00efc9709f927db951d0b', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0e63927e6bc25e3de4e941c9a3c92368428c3af', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e6f80f1f35b08f9c05f1f81ce4dc920a8591cdc', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bd6afc1c3a3064c5146f4c9b7840351f4aa7f8d', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b87708729256dc4e2ddd1f8272cb58717be88524', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c76947bafeee29c40cd9c324ea3b8333f37fde86', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f387a6d7084a1b7a92001b52ef58767ae5637c91', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7176ce8d624acf6cd83b1798a3a37ce92d86bbe1', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc423c1c9db6af9713be46628a842effea6edb8', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}]",Ryan Curtin,1845039,ryan@ratml.org,User,,49,,8,221
678392889,Threadsafe io python,"Okay, so I was able to compile and use the `linear_regression.pyx` successfully now. 
The changes are not so different than what @rcurtin has already done for the CLI. Some key changes are:
1) Adding cython wrappers for `Params` and `Timers`.
2) Replacing `IO` with `Params` in the python codebase (I have not yet made changes in the `python/tests` directory)
3) A small yet significant change was to change the name of the python function. So, `linear_regression` is now `linear_regression_py`, this is done to prevent clashing names with the `linear_regression` actually defined in the `linear_regression_main.cpp` file.

Also, please ignore all the commented methods in `CMakeLists.txt`, I did that because I only wanted to build the `linear_regression` program. This will be changed before final merge.",True,2,https://api.github.com/repos/rcurtin/mlpack/pulls/2,https://github.com/rcurtin/mlpack/pull/2,closed,417,392,31,18,2,21,0,0,[],2021-06-26 18:13:38+00:00,2021-06-30 19:15:41+00:00,349323.0,"4 days, 1:02:03","[{'comment_id': 659421562, 'comment_body': ""What do you mean to change here?  We don't have to fix it yet, I'm just curious. :+1:"", 'comment_created': datetime.datetime(2021, 6, 28, 2, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659421707, 'comment_body': '```suggestion\r\ntimers.pxd: Cython wrapper for Timers.\r\n```\r\n:)', 'comment_created': datetime.datetime(2021, 6, 28, 2, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659421741, 'comment_body': 'Might be worth updating this comment too. :+1:', 'comment_created': datetime.datetime(2021, 6, 28, 2, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659421884, 'comment_body': '```suggestion\r\n                                const std::string& paramName);\r\n```\r\nNot sure what happened here. :)', 'comment_created': datetime.datetime(2021, 6, 28, 2, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659421994, 'comment_body': '```suggestion\r\n                          const std::string& paramName);\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 2, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659422044, 'comment_body': '```suggestion\r\n                          const std::vector<std::string>& constraints);\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 2, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659422112, 'comment_body': '```suggestion\r\n    const std::string& bindingName,\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 2, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659422268, 'comment_body': 'Right, if you wanted, you could change `programName` to `bindingName` and it should be fine. :+1:', 'comment_created': datetime.datetime(2021, 6, 28, 2, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659422525, 'comment_body': '```suggestion\r\n    const bool onlyOutput,\r\n```\r\nNo need for an extra space. :smiel:', 'comment_created': datetime.datetime(2021, 6, 28, 2, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659422793, 'comment_body': '```suggestion\r\n    TupleType tWithParams = std::make_tuple(p, t);\r\n```\r\nTiny style fix. :)', 'comment_created': datetime.datetime(2021, 6, 28, 2, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659423293, 'comment_body': 'Ah, nice, good to make this change for now---it will be easier to test if the build works. :+1:', 'comment_created': datetime.datetime(2021, 6, 28, 2, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659423358, 'comment_body': ""This is already done above---is it necessary here?  I think it won't do anything. :+1:"", 'comment_created': datetime.datetime(2021, 6, 28, 2, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659431139, 'comment_body': 'oops, forgot to remove this TODO here, will do that in a commit', 'comment_created': datetime.datetime(2021, 6, 28, 2, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 659435670, 'comment_body': 'In mlpack_main.hpp I undefined BINDING_NAME because all persistent params have to be stored under `""""`, so I guess BINDING_NAME should be redefined over here (after importing mlpack_main.hpp) ', 'comment_created': datetime.datetime(2021, 6, 28, 2, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 659449216, 'comment_body': 'Sorry for so many style issues :(, surprisingly they do not show up in my editor. I use VSCode, maybe it is time to change it and use something else.', 'comment_created': datetime.datetime(2021, 6, 28, 3, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 659985636, 'comment_body': 'Ah, ok.  Maybe it would be better to just, in `mlpack_main.hpp`, do something like this?\r\n\r\n```\r\n#ifdef BINDING_NAME\r\n  #define OLD_BINDING_NAME BINDING_NAME\r\n  #undef BINDING_NAME\r\n#endif\r\n#define BINDING_NAME\r\n\r\n// Now define parameters like `verbose` and others...\r\n\r\n#ifdef OLD_BINDING_NAME\r\n  #undef BINDING_NAME\r\n  #define BINDING_NAME OLD_BINDING_NAME\r\n  #undef OLD_BINDING_NAME\r\n#endif\r\n```\r\n\r\nLet me know what you think.', 'comment_created': datetime.datetime(2021, 6, 28, 17, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 660120325, 'comment_body': 'No worries!  Maybe it is a spaces vs. tabs setting or something.', 'comment_created': datetime.datetime(2021, 6, 28, 21, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 660681322, 'comment_body': 'I did this, but I am getting an error. I have pushed the changes, can you take a look?', 'comment_created': datetime.datetime(2021, 6, 29, 14, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 661090952, 'comment_body': 'I did some debugging and I found that in the code above after BINDING_NAME is undefined the value of OLD_BINDING_NAME also changes, it then becomes BINDING_NAME literally and is not linear_regression. Similarly, in the second block of code after OLD_BINDING_NAME is undefined then BINDING_NAME becomes OLD_BINDING_NAME literally and is not linear_regression. Due to this, all the parameters are registered under the name OLD_BINDING_NAME and I am getting an error related to unknown parameters. It is just weird that the BINDING_NAME is not just replaced by linear_regression while defining OLD_BINDING_NAME in the first place. \r\nI think that this is the reason for the error, let me know what you think? ', 'comment_created': datetime.datetime(2021, 6, 30, 2, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 661125098, 'comment_body': 'Did some more research and found that their is no direct way of ""saving"" a `#define`\'s value and then redefining to the saved value. There is however `#pragma push_macro` and `#pragma pop_macro` which are generally used for such tasks but these are not standard and might not be available in every compiler. I guess we would need to think of something else over here.', 'comment_created': datetime.datetime(2021, 6, 30, 4, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 661551342, 'comment_body': 'I see what you mean.  I think that I had written the code above, but not actually compiled it in a situation where that makes a difference.  Why don\'t we work around the issue by making some macro like `PARAM_GLOBAL()` like this:\r\n\r\n```\r\n#define PARAM_GLOBAL(T, ID, DESC,  ALIAS, NAME, REQ, IN, TRANS, DEF) \\\r\n      static mlpack::util::Option<T> \\\r\n      JOIN(io_option_dummy_object_in_, __COUNTER__) \\\r\n      (DEF, ID, DESC, ALIAS, NAME, REQ, IN, !TRANS, """");\r\n```\r\nNote that the big difference there is that I hardcoded `""""` instead of `STRINGIFY(BINDING_NAME)`.\r\n\r\nNow there should be no situation where we need to ""save"" a setting of `BINDING_NAME`; we can just `#undef` it and then `#define` it again if we need to add options for different bindings (this would happen when we are including multiple `_main.cpp` files).', 'comment_created': datetime.datetime(2021, 6, 30, 14, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': 'bff82395b2e1b8059d6ff7c15532b9ab533bdec3', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e8eeb5c7e26dc2a11d7a284bab0aebfd9ad3a3f', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f751dbea53665e4bd4f02a56b74722a4ce70e4f4', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '007530d285c9ecc831f6b33d1fa72f8a25dd71a1', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '096abf598653ef22996e4ba801d06e9fe5697f02', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2be89a32785c8944b2459c113cf487cab176bcfb', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fd6d5e7d3ba679c6022596ccda6a28589211d51', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6572780785d5e7cb3ebabcaf449a9b6b95fe5b97', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b340bcd34473185d176f70ca3f1b5186024f91e', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5486b096897718d6517c8ef92836a916e6084f31', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b38690f84b7b88cc18c6e46c02c08fd18d59dec1', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb39ec52a955be38961a4c17e4be3ab14319087', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d032eb92f2ae474f14200a53026e594060ed810', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cca8493235661764dc53da0ea6ccf2b0430dde50', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd28763560e4c7f6a4d72966018dad473227e639d', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a609a6412c9f0194ccc9b4fdfd5d959ec9d9ec63', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bebd49c4a38396165ca6ed831acde40a9477347d', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8b12f50112bda1c8968498f83aabc2a69b51703', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}]",Nippun Sharma,53967069,,User,,27,,62,53
678392889,Threadsafe io python,"Okay, so I was able to compile and use the `linear_regression.pyx` successfully now. 
The changes are not so different than what @rcurtin has already done for the CLI. Some key changes are:
1) Adding cython wrappers for `Params` and `Timers`.
2) Replacing `IO` with `Params` in the python codebase (I have not yet made changes in the `python/tests` directory)
3) A small yet significant change was to change the name of the python function. So, `linear_regression` is now `linear_regression_py`, this is done to prevent clashing names with the `linear_regression` actually defined in the `linear_regression_main.cpp` file.

Also, please ignore all the commented methods in `CMakeLists.txt`, I did that because I only wanted to build the `linear_regression` program. This will be changed before final merge.",True,2,https://api.github.com/repos/rcurtin/mlpack/pulls/2,https://github.com/rcurtin/mlpack/pull/2,closed,417,392,31,18,2,21,0,0,[],2021-06-26 18:13:38+00:00,2021-06-30 19:15:41+00:00,349323.0,"4 days, 1:02:03","[{'comment_id': 659421562, 'comment_body': ""What do you mean to change here?  We don't have to fix it yet, I'm just curious. :+1:"", 'comment_created': datetime.datetime(2021, 6, 28, 2, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659421707, 'comment_body': '```suggestion\r\ntimers.pxd: Cython wrapper for Timers.\r\n```\r\n:)', 'comment_created': datetime.datetime(2021, 6, 28, 2, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659421741, 'comment_body': 'Might be worth updating this comment too. :+1:', 'comment_created': datetime.datetime(2021, 6, 28, 2, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659421884, 'comment_body': '```suggestion\r\n                                const std::string& paramName);\r\n```\r\nNot sure what happened here. :)', 'comment_created': datetime.datetime(2021, 6, 28, 2, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659421994, 'comment_body': '```suggestion\r\n                          const std::string& paramName);\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 2, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659422044, 'comment_body': '```suggestion\r\n                          const std::vector<std::string>& constraints);\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 2, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659422112, 'comment_body': '```suggestion\r\n    const std::string& bindingName,\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 2, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659422268, 'comment_body': 'Right, if you wanted, you could change `programName` to `bindingName` and it should be fine. :+1:', 'comment_created': datetime.datetime(2021, 6, 28, 2, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659422525, 'comment_body': '```suggestion\r\n    const bool onlyOutput,\r\n```\r\nNo need for an extra space. :smiel:', 'comment_created': datetime.datetime(2021, 6, 28, 2, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659422793, 'comment_body': '```suggestion\r\n    TupleType tWithParams = std::make_tuple(p, t);\r\n```\r\nTiny style fix. :)', 'comment_created': datetime.datetime(2021, 6, 28, 2, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659423293, 'comment_body': 'Ah, nice, good to make this change for now---it will be easier to test if the build works. :+1:', 'comment_created': datetime.datetime(2021, 6, 28, 2, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659423358, 'comment_body': ""This is already done above---is it necessary here?  I think it won't do anything. :+1:"", 'comment_created': datetime.datetime(2021, 6, 28, 2, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659431139, 'comment_body': 'oops, forgot to remove this TODO here, will do that in a commit', 'comment_created': datetime.datetime(2021, 6, 28, 2, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 659435670, 'comment_body': 'In mlpack_main.hpp I undefined BINDING_NAME because all persistent params have to be stored under `""""`, so I guess BINDING_NAME should be redefined over here (after importing mlpack_main.hpp) ', 'comment_created': datetime.datetime(2021, 6, 28, 2, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 659449216, 'comment_body': 'Sorry for so many style issues :(, surprisingly they do not show up in my editor. I use VSCode, maybe it is time to change it and use something else.', 'comment_created': datetime.datetime(2021, 6, 28, 3, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 659985636, 'comment_body': 'Ah, ok.  Maybe it would be better to just, in `mlpack_main.hpp`, do something like this?\r\n\r\n```\r\n#ifdef BINDING_NAME\r\n  #define OLD_BINDING_NAME BINDING_NAME\r\n  #undef BINDING_NAME\r\n#endif\r\n#define BINDING_NAME\r\n\r\n// Now define parameters like `verbose` and others...\r\n\r\n#ifdef OLD_BINDING_NAME\r\n  #undef BINDING_NAME\r\n  #define BINDING_NAME OLD_BINDING_NAME\r\n  #undef OLD_BINDING_NAME\r\n#endif\r\n```\r\n\r\nLet me know what you think.', 'comment_created': datetime.datetime(2021, 6, 28, 17, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 660120325, 'comment_body': 'No worries!  Maybe it is a spaces vs. tabs setting or something.', 'comment_created': datetime.datetime(2021, 6, 28, 21, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 660681322, 'comment_body': 'I did this, but I am getting an error. I have pushed the changes, can you take a look?', 'comment_created': datetime.datetime(2021, 6, 29, 14, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 661090952, 'comment_body': 'I did some debugging and I found that in the code above after BINDING_NAME is undefined the value of OLD_BINDING_NAME also changes, it then becomes BINDING_NAME literally and is not linear_regression. Similarly, in the second block of code after OLD_BINDING_NAME is undefined then BINDING_NAME becomes OLD_BINDING_NAME literally and is not linear_regression. Due to this, all the parameters are registered under the name OLD_BINDING_NAME and I am getting an error related to unknown parameters. It is just weird that the BINDING_NAME is not just replaced by linear_regression while defining OLD_BINDING_NAME in the first place. \r\nI think that this is the reason for the error, let me know what you think? ', 'comment_created': datetime.datetime(2021, 6, 30, 2, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 661125098, 'comment_body': 'Did some more research and found that their is no direct way of ""saving"" a `#define`\'s value and then redefining to the saved value. There is however `#pragma push_macro` and `#pragma pop_macro` which are generally used for such tasks but these are not standard and might not be available in every compiler. I guess we would need to think of something else over here.', 'comment_created': datetime.datetime(2021, 6, 30, 4, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 661551342, 'comment_body': 'I see what you mean.  I think that I had written the code above, but not actually compiled it in a situation where that makes a difference.  Why don\'t we work around the issue by making some macro like `PARAM_GLOBAL()` like this:\r\n\r\n```\r\n#define PARAM_GLOBAL(T, ID, DESC,  ALIAS, NAME, REQ, IN, TRANS, DEF) \\\r\n      static mlpack::util::Option<T> \\\r\n      JOIN(io_option_dummy_object_in_, __COUNTER__) \\\r\n      (DEF, ID, DESC, ALIAS, NAME, REQ, IN, !TRANS, """");\r\n```\r\nNote that the big difference there is that I hardcoded `""""` instead of `STRINGIFY(BINDING_NAME)`.\r\n\r\nNow there should be no situation where we need to ""save"" a setting of `BINDING_NAME`; we can just `#undef` it and then `#define` it again if we need to add options for different bindings (this would happen when we are including multiple `_main.cpp` files).', 'comment_created': datetime.datetime(2021, 6, 30, 14, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': 'bff82395b2e1b8059d6ff7c15532b9ab533bdec3', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e8eeb5c7e26dc2a11d7a284bab0aebfd9ad3a3f', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f751dbea53665e4bd4f02a56b74722a4ce70e4f4', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '007530d285c9ecc831f6b33d1fa72f8a25dd71a1', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '096abf598653ef22996e4ba801d06e9fe5697f02', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2be89a32785c8944b2459c113cf487cab176bcfb', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fd6d5e7d3ba679c6022596ccda6a28589211d51', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6572780785d5e7cb3ebabcaf449a9b6b95fe5b97', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b340bcd34473185d176f70ca3f1b5186024f91e', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5486b096897718d6517c8ef92836a916e6084f31', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b38690f84b7b88cc18c6e46c02c08fd18d59dec1', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb39ec52a955be38961a4c17e4be3ab14319087', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d032eb92f2ae474f14200a53026e594060ed810', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cca8493235661764dc53da0ea6ccf2b0430dde50', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd28763560e4c7f6a4d72966018dad473227e639d', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a609a6412c9f0194ccc9b4fdfd5d959ec9d9ec63', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bebd49c4a38396165ca6ed831acde40a9477347d', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8b12f50112bda1c8968498f83aabc2a69b51703', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}]",Nippun Sharma,53967069,,User,,27,,62,53
707092106,REVAMP BINDINGS FRAMEWORK,"cc @coatless @rcurtin @Yashwants19 
**(This PR should be merged after #2995)**

This PR sets the framework for revamping the mlpack python bindings and changes the bindings for `adaboost` and `linear_regression`.

Things to be added:
- [ ] Add documentation for new macros and utlities.
- [ ] Minor changes in documentation.
- [ ] Think about more tests to add for `linear_regression` and `adaboost`.",True,3030,https://api.github.com/repos/mlpack/mlpack/pulls/3030,https://github.com/mlpack/mlpack/pull/3030,closed,3449,401,78,58,9,126,2,0,"[{'name': 'c: automatic bindings'}, {'name': 't: added feature'}]",2021-08-10 07:16:39+00:00,2022-01-20 20:39:18+00:00,14131359.0,"163 days, 13:22:39","[{'comment_id': 686309747, 'comment_body': 'If you are using these variables in other later macros (like `add_python_class()`), it might make more sense to use the convention we use for CMake which is capital letters... e.g., `${name}_METHOD_NAME_FILES`. :+1:', 'comment_created': datetime.datetime(2021, 8, 10, 20, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686310530, 'comment_body': ""Same comment here, I'd suggest `${name}_CATEGORY`. :+1:"", 'comment_created': datetime.datetime(2021, 8, 10, 20, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686335665, 'comment_body': 'I think you might already be planning to do this, but it would be great if you could add some information on what each of these variables will be used for. :+1:', 'comment_created': datetime.datetime(2021, 8, 10, 21, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686336905, 'comment_body': 'It could also be useful to add a little documentation here on what each of these are for and how we will use them.', 'comment_created': datetime.datetime(2021, 8, 10, 21, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686337168, 'comment_body': '```suggestion\r\n * IMPORT_THIS() returns a string that imports the current method.\r\n```\r\nTiny little fix. :)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686337745, 'comment_body': ""I guess these are all new macros that can all be used from any binding documentation.  We should probably collect some documentation for these in one place, but perhaps that is something we can open an issue for later---I don't think that cleanup needs to be a part of this PR.  I think the existing documentation for these macros is unfortunately a little scattered."", 'comment_created': datetime.datetime(2021, 8, 10, 21, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686338180, 'comment_body': 'We should add some quick documentation here too, even if it is the same as the macro definitions.', 'comment_created': datetime.datetime(2021, 8, 10, 21, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686338741, 'comment_body': ""It might be better to throw a `std::invalid_argument` here---as we implement wrappers for more languages, it's probably good to get an exception when printing the markdown bindings, instead of getting a random `Not supported` somewhere in the text.  (That's a minor comment though.)"", 'comment_created': datetime.datetime(2021, 8, 10, 21, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686339047, 'comment_body': '```suggestion\r\n        ""BindingInfo::Language(): "" + BindingInfo::Language() + ""!"");\r\n```\r\nTiny style fix. :)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686339141, 'comment_body': '```suggestion\r\n        ""BindingInfo::Language(): "" + BindingInfo::Language() + ""!"");\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686339179, 'comment_body': '```suggestion\r\n        ""BindingInfo::Language(): "" + BindingInfo::Language() + ""!"");\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686339235, 'comment_body': '```suggestion\r\n        ""BindingInfo::Language(): "" + BindingInfo::Language() + ""!"");\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686339948, 'comment_body': ""Does this mean the anchor name will be, e.g., `adaboost_predict`?  I'm a little confused by the difference between `GetWrapperName()` and `GetBindingName()` for the Python wrapper case."", 'comment_created': datetime.datetime(2021, 8, 10, 21, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686340203, 'comment_body': '```suggestion\r\n  for (size_t i = 0; i < validMethods.size(); ++i)\r\n```\r\nAnother style fix. :)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686341532, 'comment_body': 'Is it better to print nothing here?  This looks like it will print an empty link for the wrappers.', 'comment_created': datetime.datetime(2021, 8, 10, 21, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686341743, 'comment_body': 'Feel free to split into separate functions if you think that makes the code structure cleaner.\r\n```suggestion\r\n    if (!addWrapperDocs[i]) // different structure for wrappers.\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686342251, 'comment_body': ""Would it be easy to avoid using `boost` here?  I don't want to make @shrit's life harder as he tries to remove it all. :smile:"", 'comment_created': datetime.datetime(2021, 8, 10, 21, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686342798, 'comment_body': ""```suggestion\r\n      for(auto mainItr = paramMethods.begin(); mainItr != paramMethods.end();\r\n```\r\nI probably missed a couple style issues, but I'm trying to point them out as I go. :)"", 'comment_created': datetime.datetime(2021, 8, 10, 21, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686342906, 'comment_body': '```suggestion\r\n      for(auto itr = paramMethods.begin(); itr != paramMethods.end();\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686343032, 'comment_body': '```suggestion\r\n      cout << example.substr(0, example.size() - 1) << endl; // do not want the last ""\\n"".\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686343186, 'comment_body': '```suggestion\r\n      for(size_t j = 0; j < validMethods.size(); j++)\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686343264, 'comment_body': '```suggestion\r\n      for(size_t j = 0; j < validMethods.size(); j++)\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686343646, 'comment_body': ""```suggestion\r\n        map<string, ParamData>& parameters = paramMethods[validMethods[i]].Parameters();\r\n```\r\nThis may be true in other places too; there's no need to copy the map here---we can just use a reference to the one inside `paramMethods[validMethods[i]]`.  Of course this will not really make any computational difference since we are just printing documentation, but still. :)"", 'comment_created': datetime.datetime(2021, 8, 10, 21, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686343823, 'comment_body': 'Can you add a header to this file including the license too?', 'comment_created': datetime.datetime(2021, 8, 10, 21, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686344028, 'comment_body': '```suggestion\r\n          it->second, NULL, (void*) &isSerial);\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686344359, 'comment_body': ""It might be nice to add a comment here indicating what we do and don't print, so that a reader can know at a glance instead of having to look through the various cases."", 'comment_created': datetime.datetime(2021, 8, 10, 21, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686345235, 'comment_body': ""Another style comment, I think in general it's just fine to put the statement after the `if` on a new indented line, like you did above."", 'comment_created': datetime.datetime(2021, 8, 10, 21, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686345625, 'comment_body': 'I think you are already planning to do this, but I just wanted to call it out in a comment---if you can add documentation too here I think it would be really nice. :+1:', 'comment_created': datetime.datetime(2021, 8, 10, 21, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686345913, 'comment_body': 'We should avoid using `using` declarations in header files, because then those declarations will apply to any code that includes this header file.  `using` declarations should only be in `.cpp` files.  (I know that makes things more verbose in header files, unfortunately...)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686346017, 'comment_body': 'This file needs a license too. :)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686347076, 'comment_body': 'It could also be useful to expand this comment to add a bit about what `add_python_wrapper()` does. :+1:', 'comment_created': datetime.datetime(2021, 8, 10, 21, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686347498, 'comment_body': 'I am not sure if this is the same as the previous macro, but can you just call `add_python_binding()` here?', 'comment_created': datetime.datetime(2021, 8, 10, 21, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686347665, 'comment_body': '```suggestion\r\n        ""#include <${loc}>\\n"")\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686347712, 'comment_body': '```suggestion\r\n      ""from .${group_name} import *\\n"")\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686348025, 'comment_body': 'Is this comment still accurate?  I thought we only generate one binding now, that can work differently depending on whether the user has included scikit first.  (I have not read far enough in the PR to consider this comment carefully yet...)', 'comment_created': datetime.datetime(2021, 8, 10, 21, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686348171, 'comment_body': '```suggestion\r\n      ${CMAKE_BINARY_DIR}/src/mlpack/bindings/python/generate_py_wrapper_${group_name}.cpp\r\n      ${CMAKE_SOURCE_DIR}/src/mlpack/bindings/python/print_wrapper_py.hpp\r\n      ${CMAKE_SOURCE_DIR}/src/mlpack/bindings/python/print_wrapper_py.cpp)\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 21, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686348490, 'comment_body': ""This should have a license too.  (I'll stop pointing this out in other new files, but basically we should have the license and a comment about the file in every new file in the PR.)"", 'comment_created': datetime.datetime(2021, 8, 10, 21, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686348808, 'comment_body': 'I think this is debugging output and can be removed?', 'comment_created': datetime.datetime(2021, 8, 10, 21, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686349617, 'comment_body': ""Here is another place we shouldn't use a `using` declaration.  (I know it will pollute the code below with lots of `std::`...)"", 'comment_created': datetime.datetime(2021, 8, 10, 21, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686349729, 'comment_body': 'In most places you can probably just do `#include <mlpack/prereqs.hpp>` and that should be sufficient.', 'comment_created': datetime.datetime(2021, 8, 10, 21, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686349945, 'comment_body': 'I think the indentation here is off---looks like tabs instead of spaces?', 'comment_created': datetime.datetime(2021, 8, 10, 21, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686350692, 'comment_body': ""Nice, it's good to split this support into a unified place."", 'comment_created': datetime.datetime(2021, 8, 10, 22, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686351138, 'comment_body': 'Just an overall structural comment---each of these utility functions is pretty short, and so it might make sense to make a file called, e.g., `wrapper_functions.hpp` or similar that can hold all of these utilities.  There, it might make sense to put the definitions in the `.hpp` file and either put the (inlined) definitions in an `_impl.hpp` file, or a `.cpp` file.', 'comment_created': datetime.datetime(2021, 8, 10, 22, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686351468, 'comment_body': ""Any non-inlined non-templated function's definition should go into a `.cpp` file---otherwise, if multiple translation units include this header, we will get a duplicate definition error at link time.  If you want to keep it in a header file, you can just mark it `inline`. :+1:"", 'comment_created': datetime.datetime(2021, 8, 10, 22, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686352499, 'comment_body': 'Nice cleanup!', 'comment_created': datetime.datetime(2021, 8, 10, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686353152, 'comment_body': ""Isn't this the same as `GetClassName()`?  If the name isn't descriptive here, maybe it makes more sense to make the name `GetClassName()` more generic?"", 'comment_created': datetime.datetime(2021, 8, 10, 22, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686353430, 'comment_body': '```suggestion\r\n        d, NULL, (void*) &isSerial);\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 22, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686353684, 'comment_body': ""It could be useful to add a few descriptive comment lines here on when we do and don't print (and why)."", 'comment_created': datetime.datetime(2021, 8, 10, 22, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686353992, 'comment_body': '```suggestion\r\n  return "">>> import pandas as pd"";\r\n```\r\nThis could be a little simpler. :)', 'comment_created': datetime.datetime(2021, 8, 10, 22, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686354258, 'comment_body': '```suggestion\r\n  return "">>> from mlpack import preprocess_split"";\r\n```\r\nAnother quick simplification. :)', 'comment_created': datetime.datetime(2021, 8, 10, 22, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686354468, 'comment_body': '```suggestion\r\n  return "">>> from mlpack import "" + GetClassName(groupName);\r\n```\r\nHere\'s another one. :)  Up to you if you want to take any of them. :+1:', 'comment_created': datetime.datetime(2021, 8, 10, 22, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686354962, 'comment_body': ""I see this snippet in a few places, where we detect whether or not something should be printed or whether it's a hyperparameter.  Maybe it makes sense to split that into a separate utility function?"", 'comment_created': datetime.datetime(2021, 8, 10, 22, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686355062, 'comment_body': '```suggestion\r\n  if (callMethod != """")\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 22, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686356075, 'comment_body': '```suggestion\r\n    if (extraDefnSet.find(d.tname) == extraDefnSet.end())\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 22, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686356983, 'comment_body': 'It can be a lot clearer to read here if you use `endl` for the newlines, and then just print each line separately. :+1:', 'comment_created': datetime.datetime(2021, 8, 10, 22, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686357288, 'comment_body': ""Also, should we print a warning here of scikit isn't present?  Or, if we do, we should probably print a bit more detail about whether that actually makes a difference."", 'comment_created': datetime.datetime(2021, 8, 10, 22, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686357595, 'comment_body': 'Do we need to import this for every class?  Or should this be in the `__init__.py` for mlpack?', 'comment_created': datetime.datetime(2021, 8, 10, 22, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686357819, 'comment_body': 'It would be really great to add some details about what this block of code does.  It is a bit intimidating to look at right now :smile:', 'comment_created': datetime.datetime(2021, 8, 10, 22, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686358027, 'comment_body': '```suggestion\r\n  cout << string(indent, \' \') << ""def __init__(self,"" << endl;\r\n```\r\nLooks like a tab character was here I think?', 'comment_created': datetime.datetime(2021, 8, 10, 22, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686358352, 'comment_body': ""It might make the code a bit clearer to use the exact type instead of `auto`---that's just a readability comment. :+1:"", 'comment_created': datetime.datetime(2021, 8, 10, 22, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686358638, 'comment_body': 'Maybe you are already planning this, but I think this file could benefit from a cleanup/commenting/style pass. :+1:  What the code *does* looks great though!', 'comment_created': datetime.datetime(2021, 8, 10, 22, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686360461, 'comment_body': '```suggestion\r\n```\r\nI guess we can remove the TODO now. :)', 'comment_created': datetime.datetime(2021, 8, 10, 22, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686880474, 'comment_body': 'You had mentioned that we can remove this macro eventually entirely---maybe before we merge this PR we should be sure to write down that intention somewhere?  Perhaps in a separate issue or something?', 'comment_created': datetime.datetime(2021, 8, 11, 14, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686882652, 'comment_body': ""Do you think it's worth adding a little bit of extra text here to describe what the example is doing?  Or maybe we should print comments in the generated code (e.g. inside of `CALL_METHOD()` or something)?  Or, perhaps, it's self-explanatory enough as-is?  I'm not sure, I'm just tossing ideas out there. :smile:"", 'comment_created': datetime.datetime(2021, 8, 11, 14, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686883115, 'comment_body': '```suggestion\r\n// Allow saving the model.\r\n```\r\nI think we can update this comment now. :+1:', 'comment_created': datetime.datetime(2021, 8, 11, 14, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686883670, 'comment_body': '```suggestion\r\n  AdaBoostModel* m = new AdaBoostModel();\r\n```\r\nMinor simplification (goes with the comment above). :)', 'comment_created': datetime.datetime(2021, 8, 11, 14, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686883785, 'comment_body': '```suggestion\r\n```\r\n(goes with the comment below)', 'comment_created': datetime.datetime(2021, 8, 11, 14, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686884716, 'comment_body': ""I didn't mean to commit this to #2995, but, I guess it is true and is a good comment to leave in..."", 'comment_created': datetime.datetime(2021, 8, 11, 14, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686885331, 'comment_body': ""It's really nice how simple this binding is. :)"", 'comment_created': datetime.datetime(2021, 8, 11, 14, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686886787, 'comment_body': 'I think `RequireOnlyOnePassed` is not necessary here, since it checks that only one option in the given set of options was passed.  So, what this does is just ensure that `test` and `input_model` were passed---but another way you could handle that is just to use `PARAM_MATRIX_IN_REQ()` and `PARAM_MODEL_IN_REQ()` to achieve the same result.  (This applies to `adaboost_predict_main.cpp` too.)  :+1:', 'comment_created': datetime.datetime(2021, 8, 11, 14, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686889379, 'comment_body': 'The name `fit()` here matches the Python/scikit API, but maybe we should consider calling it `_train` internally to match the `Train()` function that mlpack provides?  Then, in the Python bindings, we could have a mapping from names like `_train` to `fit()`.  What do you think?', 'comment_created': datetime.datetime(2021, 8, 11, 14, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686890455, 'comment_body': '```suggestion\r\n  LinearRegression* lr = params.Get<LinearRegression*>(""input_model"");\r\n```\r\nThis happens a couple times in the adapted bindings, but you could often declare and set the value of a model in the same line for simplicity. :+1:', 'comment_created': datetime.datetime(2021, 8, 11, 14, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686892521, 'comment_body': 'Since these programs are already split, do you think we could make a wrapper for them as they are?  Or would it need more modification?  (We can do that in a different PR of course, I am just curious. :))', 'comment_created': datetime.datetime(2021, 8, 11, 14, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686895782, 'comment_body': 'It might be worth also testing to see that an exception is thrown when test data is passed that has a different shape than the input data. :+1:', 'comment_created': datetime.datetime(2021, 8, 11, 14, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 686897832, 'comment_body': ""It could also be useful to check that an exception is thrown when negative regularization is passed.  I can't quickly think of anything else to add though.  Perhaps it's worth checking that when passing a 2-d matrix and no responses, everything succeeds?  (That is, the responses are taken to be the second row of data.)"", 'comment_created': datetime.datetime(2021, 8, 11, 14, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 688667848, 'comment_body': 'Yes, that is correct, GetBindingName does not give the ""class"" name, I just created a new function GetWrapperName because GetBindingName will still be used for bindings that are not yet refactored.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 688668143, 'comment_body': 'However, there is still some issue with the link, I will change that too.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 688713856, 'comment_body': 'yeah you are right, I forgot to remove this.', 'comment_created': datetime.datetime(2021, 8, 13, 18, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 688732185, 'comment_body': 'agreed, this was actually used only while generating the markdown docs and the only difference is that it appends a ""class"" in front of the class name. I have removed this function.', 'comment_created': datetime.datetime(2021, 8, 13, 19, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 688991723, 'comment_body': ""I have a small doubt here. PrintInputProcessing output for a required matrix parameter is:\r\n\r\n```cython\r\n  # Detect if the parameter was passed; set if so.\r\n  training_tuple = to_matrix(training, dtype=np.double, copy=p.Has('copy_all_inputs'))\r\n  if len(training_tuple[0].shape) > 2:\r\n    training_tuple[0].shape = (training_tuple[0].shape[0], 1)\r\n  training_mat = arma_numpy.numpy_to_mat_d(training_tuple[0], training_tuple[1])\r\n  SetParam[arma.Mat[double]](p, <const string> 'training', dereference(training_mat))\r\n  p.SetPassed(<const string> 'training')\r\n  del training_mat\r\n```\r\n\r\nand for a non-required parameter is:\r\n\r\n```cython\r\n  if training is not None:\r\n    training_tuple = to_matrix(training, dtype=np.double, copy=p.Has('copy_all_inputs'))\r\n    if len(training_tuple[0].shape) < 2:\r\n      training_tuple[0].shape = (training_tuple[0].shape[0], 1)\r\n    training_mat = arma_numpy.numpy_to_mat_d(training_tuple[0], training_tuple[1])\r\n    SetParam[arma.Mat[double]](p, <const string> 'training', dereference(training_mat))\r\n    p.SetPassed(<const string> 'training')\r\n    del training_mat\r\n```\r\n\r\napart from the first if condition (that just checks of the parameter is passed or not) shouldn't the entire code be the same?\r\nwhy is there a ` > 2` for required and ` < 2` for a required parameter here?"", 'comment_created': datetime.datetime(2021, 8, 14, 21, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 689125340, 'comment_body': 'I think you are right!  This seems to be a bug.  The intention of that code, if I remember right, was to make it so that if a user passed a vector, we would automatically cast it to a matrix.  So, the correct one is `< 2`, not `> 2`.  Want to also make a change to fix this for the required parameter case?\r\n\r\nNice catch!', 'comment_created': datetime.datetime(2021, 8, 15, 18, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689135146, 'comment_body': 'Actually, I think we can use that for now. We can use short description as the one-liners we are planning to print and the long description as the description that is printed just above the example. Take a look at `adaboost_train_main.cpp`', 'comment_created': datetime.datetime(2021, 8, 15, 19, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 689660281, 'comment_body': ""I'll leave this conversation open for now, and we can just decide how we want to handle it before we merge this. :)"", 'comment_created': datetime.datetime(2021, 8, 16, 15, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689662790, 'comment_body': '```suggestion\r\n          << languages[i] << "" }."";\r\n```\r\nLittle style fix. :)', 'comment_created': datetime.datetime(2021, 8, 16, 15, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689663859, 'comment_body': 'Awesome, thanks for the custom implementation here.  I know it is nitpicky, but can you change the names to match the mlpack naming schemes?  `ReplaceAllCopy()`, `strCopy`, `startPos`, etc. :+1:', 'comment_created': datetime.datetime(2021, 8, 16, 16, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689829338, 'comment_body': ""Let me know if I missed it, but I think this comment is still outstanding so I won't resolve it yet. :+1:"", 'comment_created': datetime.datetime(2021, 8, 16, 20, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689829923, 'comment_body': '```suggestion\r\n      if (it->second.input && foundArma == string::npos && !isSerial)\r\n```\r\nI think this could all fit on one line. :+1:', 'comment_created': datetime.datetime(2021, 8, 16, 20, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689834242, 'comment_body': 'Thanks for the update here.  Personally I\'m not sure the new warning is all that descriptive:\r\n```\r\n    cout << ""  this mlpack method supports scikit utils, install scikit-learn\\\\n"";\r\n    cout << ""  if you wish to use them!\\"", category=ImportWarning)"" << endl;\r\n```\r\nBut, this doesn\'t make it clear to a user what exactly the scikit utilities that are supported are.  Do you think there\'s an easy way to express that in a sentence or two?\r\n\r\nAlso, as I think about it more, maybe we don\'t even need to print a warning?  If the user wants to use scikit utilities, then they will necessarily have scikit installed anyway, I think. :)', 'comment_created': datetime.datetime(2021, 8, 16, 20, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689835039, 'comment_body': '```suggestion\r\n      if (isSerial)\r\n        serializable.insert(itr->second.cppType);\r\n```\r\nAnother little style issue I found. :)', 'comment_created': datetime.datetime(2021, 8, 16, 20, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689835218, 'comment_body': '```suggestion\r\n      if (itr->second.input && foundArma == string::npos && !isSerial)\r\n```\r\nI think this will fit on one line too. :+1:', 'comment_created': datetime.datetime(2021, 8, 16, 20, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689836848, 'comment_body': ""Right, that makes sense, but how do we know in the binding code which binding to use the `LONG_DESCRIPTION()` from?  I guess you are just looking for the name `train`?  (I guess that's ok for now, but we should probably document that in the `LONG_DESCRIPTION()` documentation.)"", 'comment_created': datetime.datetime(2021, 8, 16, 20, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689877074, 'comment_body': 'I think we might need another `endl` here before the `</div>`.  The scripts expect a `</div>` on its own line (it makes finding it way easier...).\r\n\r\nYou can see the `</div>` ends up in the text for every language:\r\n\r\nhttp://mlpack2.ratml.org/doc/mlpack-git/python_documentation.html#adaboost\r\nhttp://mlpack2.ratml.org/doc/mlpack-git/cli_documentation.html#adaboost', 'comment_created': datetime.datetime(2021, 8, 16, 21, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689878384, 'comment_body': 'Actually, there are no tags here for me to move around the `Example` section with.  I think maybe it would be easier if we chose to print the example earlier in `print_docs.cpp` if this is a wrapper.  Let me know what you think. :+1:', 'comment_created': datetime.datetime(2021, 8, 16, 21, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689880192, 'comment_body': 'I think this part may not be working right; these specific options still show up in the `Parameters` table:\r\n\r\nhttp://mlpack2.ratml.org/doc/mlpack-git/python_documentation.html#adaboost\r\nhttp://mlpack2.ratml.org/doc/mlpack-git/python_documentation.html#adaboost\r\n\r\n(However, the Julia bindings seem to omit these parameters successfully?)', 'comment_created': datetime.datetime(2021, 8, 16, 21, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689881069, 'comment_body': 'Alternately, maybe it makes sense to keep the example where it is, but add an additional section that shows the constructor arguments right above the `Parameters` table.', 'comment_created': datetime.datetime(2021, 8, 16, 21, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 689995829, 'comment_body': 'this is changed [here](https://github.com/NippunSharma/mlpack/blob/e3df534edab5ec59374ab042f9bd4dfb26b58065/src/mlpack/bindings/python/print_wrapper_py.cpp#L185)', 'comment_created': datetime.datetime(2021, 8, 17, 2, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 689997835, 'comment_body': 'actually, whatever method is passed first in the group_bindings() macro is expected to have a long description, but I agree, this should be documented. done :+1: ', 'comment_created': datetime.datetime(2021, 8, 17, 2, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 689998413, 'comment_body': 'We can definitely add a small text line here, but for python, I think that the example is pretty straightforward and self-explanatory. Do you have something specific in mind that you wish should be added?', 'comment_created': datetime.datetime(2021, 8, 17, 3, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 689998863, 'comment_body': 'changed [here](https://github.com/NippunSharma/mlpack/blob/e3df534edab5ec59374ab042f9bd4dfb26b58065/src/mlpack/bindings/python/print_input_processing.hpp#L356)', 'comment_created': datetime.datetime(2021, 8, 17, 3, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690000405, 'comment_body': 'Some changes would be required in the `BINDING_*` macros, other than that there should not be any changes, but if we combine these now then documentation for other languages might get skewed because it does not already have a single file that can be used for rest of the languages. To tackle this, we will have to copy each `_main.cpp` file and create a new file that we will use for python. ', 'comment_created': datetime.datetime(2021, 8, 17, 3, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690001343, 'comment_body': 'maybe [this](https://mlpack.org/doc/mlpack-git/doxygen/bindings.html) can be a good place for the documentation?', 'comment_created': datetime.datetime(2021, 8, 17, 3, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690003883, 'comment_body': 'this was changed [here](https://github.com/NippunSharma/mlpack/blob/e3df534edab5ec59374ab042f9bd4dfb26b58065/src/mlpack/bindings/markdown/print_param_table.cpp#L41) do you want me to add something else here?', 'comment_created': datetime.datetime(2021, 8, 17, 3, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690004466, 'comment_body': 'this was changed [here](https://github.com/NippunSharma/mlpack/blob/e3df534edab5ec59374ab042f9bd4dfb26b58065/src/mlpack/bindings/markdown/print_param_table.cpp#L80)', 'comment_created': datetime.datetime(2021, 8, 17, 3, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690004770, 'comment_body': 'already added it [here](https://github.com/NippunSharma/mlpack/blob/e3df534edab5ec59374ab042f9bd4dfb26b58065/src/mlpack/bindings/markdown/print_param_table.hpp#L18)', 'comment_created': datetime.datetime(2021, 8, 17, 3, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690005223, 'comment_body': 'added it [here](https://github.com/NippunSharma/mlpack/blob/e3df534edab5ec59374ab042f9bd4dfb26b58065/src/mlpack/bindings/python/CMakeLists.txt#L315) :+1: ', 'comment_created': datetime.datetime(2021, 8, 17, 3, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690013170, 'comment_body': 'I changed the link of the sidebar to class-adaboost. In mlpack.md it looks like this:\r\n\r\n```markdown\r\n<div class=""language-title"" id=""python"" markdown=""1"">\r\n## class Adaboost\r\n{: #python_class-adaboost }\r\n</div>\r\n```\r\n\r\nshouldn\'t this be linking [here](http://mlpack2.ratml.org/doc/mlpack-git/python_documentation.html#class-adaboost) ?\r\nLet me know if I am missing something?', 'comment_created': datetime.datetime(2021, 8, 17, 3, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690015122, 'comment_body': 'maybe we can get away with this by just changing `class Adaboost()` to `Adaboost()` ?', 'comment_created': datetime.datetime(2021, 8, 17, 3, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 690019595, 'comment_body': 'Nice catch! this was due to clashing for loop variable names, fixed this :+1: ', 'comment_created': datetime.datetime(2021, 8, 17, 4, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 691262998, 'comment_body': ""Ahh, good point.  Let's handle that in another PR in the future. :)"", 'comment_created': datetime.datetime(2021, 8, 18, 13, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 691264486, 'comment_body': ""Yeah, you are right.  Let's perhaps revisit this another time, if there ever arises an example that's non-trivial. :+1:"", 'comment_created': datetime.datetime(2021, 8, 18, 13, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 691264985, 'comment_body': ""Yep, that's just fine.  I think eventually we will end up cleaning things up a bit once all the bindings are grouped, but using the long description from the first binding is just fine for now. :+1:"", 'comment_created': datetime.datetime(2021, 8, 18, 13, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 691265778, 'comment_body': ""Ahh, agreed, that would probably be a good place.  Up to you if you want to handle that in this PR---if not, we should at least open an issue so we don't forget. :+1:"", 'comment_created': datetime.datetime(2021, 8, 18, 13, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 691268288, 'comment_body': ""I'm not sure I understand fully.  When I take a look at `mlpack.md` as generated in commit 9d4d4ba7, I see the `language-title` block just like you posted, but the sidebar code is still pointing at the wrong anchor:\r\n\r\n```\r\n - [class Adaboost](#python_adaboost){: .language-link #python }\r\n```\r\n\r\nIt seems to me like the issue will be fixed if we can emit `#python_class-adaboost` for that link.\r\n\r\nBut, maybe I have misunderstood a deeper point here?"", 'comment_created': datetime.datetime(2021, 8, 18, 14, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 691269066, 'comment_body': ""Oh, sure, that's fine, maybe I was looking at the wrong thing.  I think I expected just a block at the top that collected all the information in one place, but how you did it is fine too. :+1:  Sorry about the confusion!"", 'comment_created': datetime.datetime(2021, 8, 18, 14, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 691278083, 'comment_body': 'Awesome :rocket: ', 'comment_created': datetime.datetime(2021, 8, 18, 14, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697794889, 'comment_body': ""I think we need to add dependencies for the `python` target here:\r\n\r\n```suggestion\r\n    add_dependencies(python generate_py_wrapper_${name})\r\n    add_dependencies(generate_py_wrapper_${group_name} python_configured)\r\n```\r\n\r\nI think that's right---I don't think there is a build step here, we just need to make `generate_py_wrapper_${group_name}` and run it."", 'comment_created': datetime.datetime(2021, 8, 28, 2, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697796562, 'comment_body': '```suggestion\r\n    cout << ""(self, "" << endl;\r\n```\r\nI noticed there are a lot of style issues in this file.  Do you mind taking a pass and fixing them?  Alternately, I can provide a patch commit.', 'comment_created': datetime.datetime(2021, 8, 28, 3, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697796645, 'comment_body': '```suggestion\r\n```\r\nWe already added an empty newline above, so, no need for another one here.', 'comment_created': datetime.datetime(2021, 8, 28, 3, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 697798167, 'comment_body': 'I think if we rename this `adaboost_train_test` and adapt the includes/other bits to use `train` instead of `fit` (and do the same for the linear regression test), then the build will pass. :+1:', 'comment_created': datetime.datetime(2021, 8, 28, 3, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 710962766, 'comment_body': 'yeah, maybe we should just remove the warning altogether ', 'comment_created': datetime.datetime(2021, 9, 17, 11, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 710970691, 'comment_body': 'I took a pass through the file and fixed some issues. If some are still persisting feel free to point them out', 'comment_created': datetime.datetime(2021, 9, 17, 11, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 730289378, 'comment_body': ""```suggestion\r\n    if (addWrapperDocs[i])\r\n```\r\nIt looks like the Markdown build is failing because of this---I'm pretty sure this is the right solution.  Let me know what you think, and once you merge this then the build should pass.  (I made this change locally so I could rebuild the documentation for the test website.)"", 'comment_created': datetime.datetime(2021, 10, 16, 17, 18, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 730289534, 'comment_body': '```suggestion\r\n      cout << GetWrapperLink(bindingName);\r\n```\r\nQuick style fix. :)', 'comment_created': datetime.datetime(2021, 10, 16, 17, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 730290089, 'comment_body': ""The filename changed, so I think Github didn't transfer the comment right, so just so it doesn't get lost here's a comment I left elsewhere that we probably should address before merge:\r\n\r\n> It might be worth also testing to see that an exception is thrown when test data is passed that has a different shape than the input data. +1"", 'comment_created': datetime.datetime(2021, 10, 16, 17, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 730290181, 'comment_body': ""This is also a copy-pasted comment from elsewhere where the original filename changed so the comment is no longer attached to code:\r\n\r\n> It could also be useful to check that an exception is thrown when negative regularization is passed. I can't quickly think of anything else to add though. Perhaps it's worth checking that when passing a 2-d matrix and no responses, everything succeeds? (That is, the responses are taken to be the second row of data.)"", 'comment_created': datetime.datetime(2021, 10, 16, 17, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 730290920, 'comment_body': '```suggestion\r\n        string eg = ReplaceAllCopy(doc.example[j](), ""|"", ""\\\\|"");\r\n```\r\nI think this will all fit on one line within 80 characters. :+1:', 'comment_created': datetime.datetime(2021, 10, 16, 17, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': 'b42e00b97480db921ea96e57d0222f929b490ffd', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '125959c10a6d15a2ffcec79868842f85ac1e58e5', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4aba9601caedbc4f9d96fa31aed0f076f0be0fa', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dbf40e4a96fb52221733025bf4bdf0994a9a97f', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '271d7da4229391c75011159fe4faba0b92e1d4a2', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9387a0329ad0dc2cfdf2b1f8f50063c4a4a7e950', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f67e631af602a704efb9368c2cb424647ac8374', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29813653193dd62db9019c9fd243ff38205358fb', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6ae9d88291093ae3136e8511f1a98352c50fdee', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba5b88f0f11047fde78817e8f9edb0d790cdcf61', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'babd7aacc52757010c5d89ae6343e30f6d023f9a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c0fd8bf1bb83abe96afd08a7aff4772d6df4cb87', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5d02312b3e231e70ddfa74ca6f5ec2553225ca51', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '211ce0425be5056ff17ed2adf2404188b2264e80', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '06592dc1fe1ec95ad3655a3aa6dfe1794085842c', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33bfae8af77b29e9bdf279009d0e1af8c1408210', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '124617d94d65c14114cc0e429e20eef752c43a86', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04272270325dacb300104e8d6201a9b9638b578c', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1be7946cbe9c27b275002ce14c7c05c4d5d5762', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f91f4baaf4183c6d79d42bffd616556534abd6b', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b48f9053884db1bab481615f2b0a379622c374ef', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ce3a15c5f8470a0bb2b21c2fd619398bc9dd6bd', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da94a36cdf7ab0146681f22eb77d641d420c8cfe', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9758e802b39509682252f10258458708ccc14310', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07ba32f37678bc4b22fb00027ece5b1cfb807304', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6da62bdba04717b7cc21b81e9feb8f72bdef7667', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20d9cf5cc3d576a40995813d02d0ee30e535de45', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '542e515aaf0ee7feb3a96997fd23389a46424edd', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2871b3578ed2e98fcc8d05519e8403c5bc2a6609', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '420239711294255436d276c73d5ddf4e4b930764', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec3a6bde87c7390debebaa2f712f73eb8e1b7197', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87b3fb34613667f49469c5e30798e2ffb01b9b17', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd06abbe248310477318e21c1f4447f06fd5dccc', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49d3c4525c7eebd0cafbaef37a62c26c3841cc65', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99835a53cb6f9201aad3faf089c33428b44d2b63', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27988ec7c42cd8232f98fc2b5ef5029089c2db32', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '186f8c7b483afdb0e42058b0727584ea98d86dd4', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a312f306ccb19d4118bb09439cdc8951943edc0e', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0371a5e451c8bf4bd0f6d57c5a0c4a3d3f67789c', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '485acfc274bd78ca801f92fc509f9457d11b34bc', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f21dea3cfa592abba87fc479dc0556647cec43b0', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3df534edab5ec59374ab042f9bd4dfb26b58065', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d4d4ba7335822856407ec07782a08c4f807cc08', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4a519b4f953e806b9a1754682c0929b8298359f', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45ed5c4545675eb1c2a845b5d6d751c7272c3678', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea2ddddd2964b32a19fc44ce688e58e718d37b25', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83a7e21ee07c0018c7ddce2074eb982107bee3c1', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bbb6c7dd01efcf3cdf910be5ca4df8ccf8039e3', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2c2a518b5fa34e9f9eb9a6897d8295e9a76ace3', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd17841576032003a085361bbf8729762cd0ef05', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4609fac75c2711145cfd66cedde3b3b556cdb038', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c08ba722a93cd925b3d1f4225e44967c506b667', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd32225f08313276a77c0be69dfb43a3b0a606428', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6ce672560fa7fa0b48d589a6a75ea14c68e0b76', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24e84042b7e349c20d99e7507fe3934fecd60b8e', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55c68933e16696ec986842864db10d55980ab506', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6323ac3382fc00b3bd49083ee067e10dfba01be', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e15b7bce58375ca9cd115b89da150f9e7b8a63bc', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}]",Nippun Sharma,53967069,,User,,27,,62,53
655255567,[DRAFT] Revamp mlpack bindings.,"cc @rcurtin @Yashwants19 @coatless
We can discuss the project in this draft PR",False,2961,https://api.github.com/repos/mlpack/mlpack/pulls/2961,https://github.com/mlpack/mlpack/pull/2961,closed,856,345,19,18,16,7,2,0,"[{'name': 's: needs review'}, {'name': 'c: automatic bindings'}]",2021-05-27 18:41:03+00:00,2021-08-10 07:18:58+00:00,6439075.0,"74 days, 12:37:55","[{'comment_id': 643286856, 'comment_body': ""Just a minor comment; it could be really helpful to add some documentation here indicating what `MAKING_WRAPPER` is and what it's for.  No need to do that immediately, but we should probably handle it before merge---it makes it a lot easier to figure out what is going on in the file without consulting the CMake configuration. :)"", 'comment_created': datetime.datetime(2021, 6, 1, 16, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 643288910, 'comment_body': 'If I remember right, the `if` was here originally so that if you had an input parameter and an output parameter that both needed a definition, we did not print that definition twice.  (In retrospect I should have commented that better; sorry about that.)  So maybe we need to re-add it?', 'comment_created': datetime.datetime(2021, 6, 1, 16, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 643365411, 'comment_body': 'Actually, now that we are keeping different files for each method, so, one file should output the model (here the `_fit_main.cpp`) and the other file should take in the model or input (here `_predict_main.cpp`) and for each method, a separate `.pyx` file will be created so, we should have the class definition in both the files now to prevent the `LinearRegressionType is not defined` error. That is why I removed this `if` condition.', 'comment_created': datetime.datetime(2021, 6, 1, 17, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 643393496, 'comment_body': 'I have just posted a comment where I am explaining the changes, hopefully reading that will make things clearer. Again, sorry for no comments in the code, will surely add them later.', 'comment_created': datetime.datetime(2021, 6, 1, 18, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 644375900, 'comment_body': ""Ohh, good point!  It might be worthwhile to be a bit more paranoid and track which `tname`s we've already called `PrintClassDefn` for, so that we don't do it twice.  Up to you if you want to do that---I can't imagine a binding where we would output more than one model of the same type, or where we would take more than one model of the same type as input."", 'comment_created': datetime.datetime(2021, 6, 2, 23, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 644470060, 'comment_body': ""Yes, I also can't think of a similar scenario but it is always better to be sure, I will work on tracking that."", 'comment_created': datetime.datetime(2021, 6, 3, 4, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'NippunSharma', 'type': 'User'}, {'comment_id': 657181277, 'comment_body': ""I think as part of #2995, we'll have to use `__COUNTER__` too in all of the binding macros so that more than one `ProgramName` (or `BindingName` as it is called in that branch) can be created in a program.  So, maybe that will mean that we don't need to modify the definition of `BINDING_NAME` here (or `BINDING_USER_NAME` as it will be called)."", 'comment_created': datetime.datetime(2021, 6, 23, 14, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': '1ac700ec08d8099170c65c68d0965fea6bc29519', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e69a16a51e27738d9f8bf7be3972de3d7ad1fee3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5b729f1fd7f40105fdcaa847891232d2aa366cae', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b8fc1629a7df8138ad2ca0fd87a17cf891e963c1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c289e547d049818071b99dd444327d19d6323cd2', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec30e03766cf5bed00774d10558a6cd470b6a836', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01c25da141a84264e11048a394b7b650d9116518', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1fd240b0ed0937184fb6e74f43991f21d9bd0b1b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd0684c869ca23dd0c74609581c06f0867ebcfb2a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '015a716168147d3a93c2ca5bc44cc96ecd813b62', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8c6844a334c8b8749f0b6774bccd9787f4aa9d91', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'badfbbc47cba6e04b49821e546acfe0c91a39e64', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'aa748574e9d16c6ba4e17e31bce82692f0475125', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edb9d1406aaf69c9f75d216c7f1a3fecec42fd3a', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0e5f2e590e55ff4e5d1f256b36bffe25f445dd1', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a3940835db6ec9b5237bd59039ee190f8d3b4ef', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c6e88704d1017aecd1fdf16ece9e8e6e48c6226', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e65575a9c9264118d3e6fd0a180e2aa4280440d2', 'committer_username': 'NippunSharma', 'committer_name': 'Nippun Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 10, 8, 53, 14, tzinfo=datetime.timezone.utc)}]",Nippun Sharma,53967069,,User,,27,,62,53

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
28149409,mlpack,mlpack/mlpack,C++,1592,4986,183,321,30199,28,11,17,"[{'id': 707092106, 'number': 3030, 'closed': datetime.datetime(2022, 1, 20, 20, 39, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 7, 16, 39, tzinfo=datetime.timezone.utc), 'time_taken': 14131359.0, 'time_delta': '163 days, 13:22:39', 'additions': 3449, 'deletions': 401, 'state': 'closed'}, {'id': 655255567, 'number': 2961, 'closed': datetime.datetime(2021, 8, 10, 7, 18, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 27, 18, 41, 3, tzinfo=datetime.timezone.utc), 'time_taken': 6439075.0, 'time_delta': '74 days, 12:37:55', 'additions': 856, 'deletions': 345, 'state': 'closed'}, {'id': 624202680, 'number': 2933, 'closed': datetime.datetime(2021, 5, 21, 14, 21, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 27, 10, 54, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2086042.0, 'time_delta': '24 days, 3:27:22', 'additions': 103, 'deletions': 45, 'state': 'closed'}, {'id': 591720702, 'number': 2871, 'closed': datetime.datetime(2021, 3, 13, 4, 44, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 12, 14, 23, 53, tzinfo=datetime.timezone.utc), 'time_taken': 51644.0, 'time_delta': '14:20:44', 'additions': 0, 'deletions': 111, 'state': 'closed'}, {'id': 589832176, 'number': 2868, 'closed': datetime.datetime(2021, 6, 4, 0, 23, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 10, 16, 10, 20, tzinfo=datetime.timezone.utc), 'time_taken': 7373571.0, 'time_delta': '85 days, 8:12:51', 'additions': 354, 'deletions': 6, 'state': 'closed'}, {'id': 546032546, 'number': 2787, 'closed': datetime.datetime(2021, 2, 2, 2, 23, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 28, 10, 23, 36, tzinfo=datetime.timezone.utc), 'time_taken': 3081589.0, 'time_delta': '35 days, 15:59:49', 'additions': 218, 'deletions': 94, 'state': 'closed'}, {'id': 545997332, 'number': 2786, 'closed': datetime.datetime(2020, 12, 28, 10, 21, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 28, 8, 42, 53, tzinfo=datetime.timezone.utc), 'time_taken': 5901.0, 'time_delta': '1:38:21', 'additions': 31, 'deletions': 3, 'state': 'closed'}, {'id': 531758079, 'number': 2748, 'closed': datetime.datetime(2020, 12, 5, 16, 5, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 3, 12, 55, 26, tzinfo=datetime.timezone.utc), 'time_taken': 184204.0, 'time_delta': '2 days, 3:10:04', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 529072938, 'number': 2744, 'closed': datetime.datetime(2020, 12, 1, 18, 42, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 29, 7, 55, 35, tzinfo=datetime.timezone.utc), 'time_taken': 211601.0, 'time_delta': '2 days, 10:46:41', 'additions': 2, 'deletions': 4, 'state': 'closed'}, {'id': 528223159, 'number': 2739, 'closed': datetime.datetime(2020, 12, 23, 10, 45, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 26, 18, 23, 31, tzinfo=datetime.timezone.utc), 'time_taken': 2305295.0, 'time_delta': '26 days, 16:21:35', 'additions': 500, 'deletions': 0, 'state': 'closed'}, {'id': 526585130, 'number': 2734, 'closed': datetime.datetime(2020, 11, 25, 16, 41, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 24, 15, 56, 31, tzinfo=datetime.timezone.utc), 'time_taken': 89095.0, 'time_delta': '1 day, 0:44:55', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 521060034, 'number': 2716, 'closed': datetime.datetime(2020, 11, 19, 22, 2, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 14, 21, 3, 6, tzinfo=datetime.timezone.utc), 'time_taken': 435562.0, 'time_delta': '5 days, 0:59:22', 'additions': 54, 'deletions': 27, 'state': 'closed'}, {'id': 518375632, 'number': 2706, 'closed': datetime.datetime(2020, 12, 21, 12, 30, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 10, 10, 13, 54, tzinfo=datetime.timezone.utc), 'time_taken': 3550603.0, 'time_delta': '41 days, 2:16:43', 'additions': 52, 'deletions': 15, 'state': 'closed'}, {'id': 517236433, 'number': 2704, 'closed': datetime.datetime(2020, 11, 24, 19, 41, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 8, 5, 43, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1432719.0, 'time_delta': '16 days, 13:58:39', 'additions': 115, 'deletions': 1, 'state': 'closed'}]"
28698514,mlpack,rcurtin/mlpack,C++,3,8,3,319,30008,1,192,1,"[{'id': 690735963, 'number': 4, 'closed': datetime.datetime(2021, 7, 15, 13, 58, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 13, 50, 55, tzinfo=datetime.timezone.utc), 'time_taken': 458.0, 'time_delta': '0:07:38', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 682954677, 'number': 3, 'closed': datetime.datetime(2021, 7, 3, 17, 37, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 3, 3, 4, 58, tzinfo=datetime.timezone.utc), 'time_taken': 52366.0, 'time_delta': '14:32:46', 'additions': 3, 'deletions': 4, 'state': 'closed'}, {'id': 678392889, 'number': 2, 'closed': datetime.datetime(2021, 6, 30, 19, 15, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 18, 13, 38, tzinfo=datetime.timezone.utc), 'time_taken': 349323.0, 'time_delta': '4 days, 1:02:03', 'additions': 417, 'deletions': 392, 'state': 'closed'}]"
