pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
400132326,fix boot paramters update bug  GSoC,"### What does this PR do?
This PR fixes a bug on updating existing boot parameters.  If users attempt to update an VM with existing boot parameters, it will fail. The reason is that  `found_tag = desc.find(tag)` will always return `None` since `tag` is not a direct children of `desc`. 

Moreover, `found_tag and found_tag.text != boot_tag_value`  returns an ElementTree  object which is not a Boolean value. As a result, if branch will evaluate to False and statements under it will never get executed .

### Tests written?
**[NOTICE] Bug fixes or features added to Salt require tests.**
Please review the [test documentation](https://docs.saltstack.com/en/latest/topics/tutorials/writing_tests.html) for details on how to implement tests into Salt's test suite.

Yes

### Commits signed with GPG?

Yes

Please review [Salt's Contributing Guide](https://docs.saltstack.com/en/latest/topics/development/contributing.html) for best practices.

See GitHub's [page on GPG signing](https://help.github.com/articles/signing-commits-using-gpg/) for more information about signing commits with GPG.
",True,56562,https://api.github.com/repos/saltstack/salt/pulls/56562,https://github.com/saltstack/salt/pull/56562,closed,100,2,2,3,8,3,1,0,[{'name': 'ZRelease-Sodium'}],2020-04-07 08:55:19+00:00,2020-04-12 05:49:11+00:00,420832.0,"4 days, 20:53:52","[{'comment_id': 404879302, 'comment_body': 'black should replace the `\'` by `""` here.', 'comment_created': datetime.datetime(2020, 4, 7, 15, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 405057845, 'comment_body': '☝️ ', 'comment_created': datetime.datetime(2020, 4, 7, 19, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'waynew', 'type': 'User'}, {'comment_id': 405202464, 'comment_body': 'Thanks waynew.  I just ran pre-commit and did a push.  :)\r\n', 'comment_created': datetime.datetime(2020, 4, 8, 1, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}]","[{'commit_sha': '12ebcd79cdc3ed2362e33a5d7a5977079c85c10f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6116b457357f75227adeaac3893da8849d1c07fa', 'committer_username': 'dwoz', 'committer_name': 'Daniel Wozniak', 'committer_email': None, 'commit_date': datetime.datetime(2012, 3, 12, 7, 5, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9db0efb5f86656682a7385476c23a320cbe8257d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Guoqing Li,8412714,lguoqing@redhat.com,User,,11,,23,15
402290557,boot VMs with UEFI GSoC,"### What does this PR do?
This PR adds support boot VMs with UEFI.  

### What issues does this PR fix or reference?
Fixes: a bug on removing existing boot parameters

### Previous Behavior
Removing an existing boot parameters by passing an None object would fail. `ElementTree.remove(parent_tag, tag)` because ElementTree does not have a remove attribute.
Apart from that, we also need to make sure None object will not be passed to `check_remote(orig_boot.get(key))`

### New Behavior
User is expected to specify `loader` and `nvram` with the corresponding firmware path to boot the VM with UEFI. For instance: 
```
- boot:
     loader: /usr/share/OVMF/OVMF_CODE.fd
     nvram: /usr/share/OVMF/OVMF_VARS.ms.fd
```
To remove existing boot parameters, pass None object instead.
```
- boot:
     kernel: None
     initrd: None
```
### Docs & changelog written?
Yes
- [x] Docs
- [x] Changelog

### Tests written?
**[NOTICE] Bug fixes or features added to Salt require tests.**
Please review the [test documentation](https://docs.saltstack.com/en/master/topics/tutorials/writing_tests.html) for details on how to implement tests into Salt's test suite.

Yes

### Commits signed with GPG?

Yes

Please review [Salt's Contributing Guide](https://docs.saltstack.com/en/master/topics/development/contributing.html) for best practices.

See GitHub's [page on GPG signing](https://help.github.com/articles/signing-commits-using-gpg/) for more information about signing commits with GPG.
",True,56613,https://api.github.com/repos/saltstack/salt/pulls/56613,https://github.com/saltstack/salt/pull/56613,closed,179,38,3,1,1,0,2,0,"[{'name': 'ZRelease-Sodium'}, {'name': 'master-port'}]",2020-04-12 05:35:33+00:00,2020-04-13 07:49:35+00:00,94442.0,"1 day, 2:14:02",[],"[{'commit_sha': '7a6afd76d32bc0085ca8b950f6a857af42d3e000', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Guoqing Li,8412714,lguoqing@redhat.com,User,,11,,23,15
413536490,improve boot parameter documentation GSoC,"### What does this PR do?
This PR improves the boot parameter documentation.  Parameter definitions are linked to virt.init function. 

### What issues does this PR fix or reference?
Fixes:
Fix some typos and spelling error in the doc.

### Merge requirements satisfied?
**[NOTICE] Bug fixes or features added to Salt require tests.**
<!-- Please review the [test documentation](https://docs.saltstack.com/en/master/topics/tutorials/writing_tests.html) for details on how to implement tests into Salt's test suite. -->
- [ ] Docs
- [ ] Changelog
- [ ] Tests written/updated

### Commits signed with GPG?
Yes

Please review [Salt's Contributing Guide](https://docs.saltstack.com/en/master/topics/development/contributing.html) for best practices.

See GitHub's [page on GPG signing](https://help.github.com/articles/signing-commits-using-gpg/) for more information about signing commits with GPG.
",True,57086,https://api.github.com/repos/saltstack/salt/pulls/57086,https://github.com/saltstack/salt/pull/57086,closed,53,46,2,1,0,4,2,0,"[{'name': 'Documentation'}, {'name': 'ZRelease-Sodium'}]",2020-05-05 14:02:51+00:00,2020-05-07 23:57:40+00:00,208489.0,"2 days, 9:54:49","[{'comment_id': 420151657, 'comment_body': ""There are two points that need more rework:\r\n  * this blob of doc needs to be maintained in 4 places... which will be a pain later\r\n  * the `kernel`, `initrd` and `cmdline` parameters have been added in `3000` we need to keep that info around.\r\n\r\nHere is how I view things:\r\n\r\n```suggestion\r\n    :param boot:\r\n        Specifies kernel for the virtual machine, as well as boot parameters\r\n        for the virtual machine. This is an optional parameter, and all of the\r\n        keys are optional within the dictionary. The structure of the dictionary\r\n        is documented in :ref:`init-boot-def`\r\n        \r\n        .. versionadded: 3000\r\n        \r\n        .. _init-boot-def:\r\n        \r\n        .. rubric:: Boot parameters definition\r\n        \r\n        The boot parameters dictionary can contains the following properties:\r\n        \r\n        kernel:\r\n            The URL or path to the kernel to run the virtual machine with.\r\n        \r\n        initrd:\r\n            The URL or path to the initrd file to run the virtual machine with.\r\n        \r\n        cmdline:\r\n            The parameters to pass to the kernel provided in the `kernel` property.\r\n            \r\n        loader:\r\n            The path to the UEFI binary loader to use.\r\n            \r\n            .. versionadded: sodium\r\n            \r\n        nvram:\r\n            The path to the UEFI data template. The file will be copied when creating the virtual machine.\r\n            \r\n            .. versionadded: sodium\r\n            \r\n        If a remote path is provided to ``kernel`` or ``initrd``, it will be downloaded from the specified\r\n        remote file, and will modify the XML accordingly. \r\n        \r\n        .. code-block:: python\r\n            {\r\n                'kernel': '/root/new-vmlinuz',\r\n                'initrd': '/root/new-initrd',\r\n                'cmdline': 'console=ttyS0 ks=http://example.com/f8-i386/os/',\r\n                'loader': '/usr/share/new/OVMF_CODE.fd',\r\n                'nvram': '/usr/share/new/OVMF_VARS.ms.fd'\r\n            }\r\n```"", 'comment_created': datetime.datetime(2020, 5, 5, 14, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 420154267, 'comment_body': 'You could then replace the whole parameter description with something like this:\r\n\r\n```suggestion\r\n        Specifies kernel for the virtual machine, as well as boot parameters\r\n        for the virtual machine. This is an optional parameter, and all of the\r\n        keys are optional within the dictionary.\r\n        \r\n        Refer to :ref:`init-boot-def` for the complete value description.\r\n        \r\n        To remove any boot parameters, pass an None object to the relevant parameter, for instance: ""kernel"": None\r\n        To update any boot parameters, specify the new path for each. To delete any boot parameters,\r\n        pass a None object, for instance: ``\'kernel\': None``.\r\n        \r\n        .. versionadded:: 3000\r\n```', 'comment_created': datetime.datetime(2020, 5, 5, 14, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 420155387, 'comment_body': 'Here too you could use something like what I suggested for `virt.update`.', 'comment_created': datetime.datetime(2020, 5, 5, 14, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 420156181, 'comment_body': ""Same as for the `virt.defined` state comment. But keep the `versionadded` to `3000` since that's when the parameter first appeared"", 'comment_created': datetime.datetime(2020, 5, 5, 14, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}]","[{'commit_sha': 'c97ca1e4251749f7376e195e794f27088bc464d5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Guoqing Li,8412714,lguoqing@redhat.com,User,,11,,23,15
420818251,Add efi parameter GSoC,"### What does this PR do?
Allows user to specify `efi` parameter so that `uefi` firmware can be auto selected. 
This PR also fix a bug on removing `loader` and `nvram` path. Previous code will not work because `None` is handled as a string in sls file.  We need to use `boot_tag_value == ""None""` to check that.
### What issues does this PR fix or reference?
In response to feature request #57397
Fixes: a bug on changing back to BIOS boot. 

### Previous Behavior
Removing UEFI firmware path will not work.

### Merge requirements satisfied?
**[NOTICE] Bug fixes or features added to Salt require tests.**
<!-- Please review the [test documentation](https://docs.saltstack.com/en/master/topics/tutorials/writing_tests.html) for details on how to implement tests into Salt's test suite. -->
- [x] Docs
- [x] Changelog - https://docs.saltstack.com/en/master/topics/development/changelog.html
- [x] Tests written/updated

### Commits signed with GPG?
Yes

Please review [Salt's Contributing Guide](https://docs.saltstack.com/en/master/topics/development/contributing.html) for best practices.

See GitHub's [page on GPG signing](https://help.github.com/articles/signing-commits-using-gpg/) for more information about signing commits with GPG.
",True,57396,https://api.github.com/repos/saltstack/salt/pulls/57396,https://github.com/saltstack/salt/pull/57396,closed,90,13,3,1,0,9,1,0,[{'name': 'ZRelease-Sodium'}],2020-05-20 15:13:33+00:00,2020-05-22 03:36:13+00:00,130960.0,"1 day, 12:22:40","[{'comment_id': 428108661, 'comment_body': 'Should we also add the minimal qemu version here? I have no idea which it is however', 'comment_created': datetime.datetime(2020, 5, 20, 15, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 428125743, 'comment_body': 'This function should compare the firmware value in the XML and the boot value and only change if needed. Here it forces the `boot.get(""efi"")` value into the XML instead of only when needed', 'comment_created': datetime.datetime(2020, 5, 20, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 428126408, 'comment_body': 'strange... why `""None""` as a string? that shouldn\'t happen', 'comment_created': datetime.datetime(2020, 5, 20, 15, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 428455266, 'comment_body': 'Yeah, I will note 3.0.0 as the [firmware metadata specification](https://github.com/qemu/qemu/blob/master/docs/interop/firmware.json) documented ', 'comment_created': datetime.datetime(2020, 5, 21, 5, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}, {'comment_id': 428478052, 'comment_body': 'It seems like passing `None` in the sls file is handled as a string. ', 'comment_created': datetime.datetime(2020, 5, 21, 6, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}, {'comment_id': 428480437, 'comment_body': 'I just discovered that `os attribute` will be gone after we run the newly defined VM. if we just defined a new VM without starting it.  `nvram` and `loader` will not be filled yet. Just updated the code to check against those cases.', 'comment_created': datetime.datetime(2020, 5, 21, 7, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}, {'comment_id': 428965873, 'comment_body': '@gqlo can you provide some insight into a situation where you would be passing `None` as an argument in an SLS file?', 'comment_created': datetime.datetime(2020, 5, 21, 23, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'garethgreenaway', 'type': 'User'}, {'comment_id': 428986744, 'comment_body': '@garethgreenaway  Hi garethgreen I added the feature to support booting VM with `uefi` in this PR #56613, in the case where we want to change back to BIOS boot or remove booting directly from a specified kernel, passing `None` as an argument would work. Do you have better ideas on this ?', 'comment_created': datetime.datetime(2020, 5, 22, 0, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}, {'comment_id': 429766429, 'comment_body': ""The SLS / Yaml mapping for python's `None` is [Null](https://yaml.org/type/null.html)"", 'comment_created': datetime.datetime(2020, 5, 25, 7, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}]","[{'commit_sha': '5aac91590f7b85d4ec5b32c2bdcbd2f57c7089d0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Guoqing Li,8412714,lguoqing@redhat.com,User,,11,,23,15
422601966,use null in sls file to map None object  GSoC,"### What does this PR do?
Passing `None` with boot parameters in sls file is handled as a string. We could pass `null` so that it will be translated to Python `None` object by YAML. It makes more sense to do so.

### Merge requirements satisfied?
**[NOTICE] Bug fixes or features added to Salt require tests.**
<!-- Please review the [test documentation](https://docs.saltstack.com/en/master/topics/tutorials/writing_tests.html) for details on how to implement tests into Salt's test suite. -->
- [x] Docs
- [ ] Changelog - https://docs.saltstack.com/en/master/topics/development/changelog.html
- [x] Tests written/updated

### Commits signed with GPG?
Yes

Please review [Salt's Contributing Guide](https://docs.saltstack.com/en/master/topics/development/contributing.html) for best practices.

See GitHub's [page on GPG signing](https://help.github.com/articles/signing-commits-using-gpg/) for more information about signing commits with GPG.
",True,57451,https://api.github.com/repos/saltstack/salt/pulls/57451,https://github.com/saltstack/salt/pull/57451,closed,150,162,5,3,2,2,1,0,[{'name': 'Magnesium'}],2020-05-25 07:52:42+00:00,2020-07-30 21:58:46+00:00,5753164.0,"66 days, 14:06:04","[{'comment_id': 429792758, 'comment_body': ""Don't mention `null` in that documentation since this is a YAML/SLS-specific value for `None`"", 'comment_created': datetime.datetime(2020, 5, 25, 8, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 429792834, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 5, 25, 8, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}]","[{'commit_sha': 'be564f515f235f32af65051eb525130a82c532d5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e7a693cb16ad990e2218122e580e8b98409f6357', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c05617cb0a5dcfb66c381cc7deef39106041f0', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}]",Guoqing Li,8412714,lguoqing@redhat.com,User,,11,,23,15
432923829,Memory Tuning  GSoC,"### What does this PR do?
Feature request closes #57639

This PR makes [memory tuning](https://libvirt.org/formatdomain.html#elementsMemoryTuning) option available which allow much greater control of memory allocation. configurable parameters are:
-  `hard_limit`
- `soft_limit`
- `swap_hard_limit` 
- `min_guarantee` 

In addition,  `_handle_unit` function is added which uses regex to parse user input into the corresponding size. 

Fixes a bug on adding sub element to existing XML tree.  `Element.append()` should be used to append an element into existing XML tree.  When using `ElementTree.SubElement()` we must make sure the parent element is from the target domain XML tree. 

Refactored XML diff code, added a few helper functions to manipulate xml node.

More robust check is added  `if 'initrd' in boot and boot.initrd` to ensure `None` object will not cause an exception if it is passed to initialise a new VM .

### Merge requirements satisfied?
**[NOTICE] Bug fixes or features added to Salt require tests.**
<!-- Please review the [test documentation](https://docs.saltstack.com/en/master/topics/tutorials/writing_tests.html) for details on how to implement tests into Salt's test suite. -->
- [x] Docs
- [x] Changelog - https://docs.saltstack.com/en/master/topics/development/changelog.html
- [x] Tests written/updated

### Commits signed with GPG?
Yes/No

Please review [Salt's Contributing Guide](https://docs.saltstack.com/en/master/topics/development/contributing.html) for best practices.

See GitHub's [page on GPG signing](https://help.github.com/articles/signing-commits-using-gpg/) for more information about signing commits with GPG.
",True,57636,https://api.github.com/repos/saltstack/salt/pulls/57636,https://github.com/saltstack/salt/pull/57636,closed,595,38,6,3,11,9,3,1,"[{'name': 'Feature'}, {'name': 'Salt-Cloud'}, {'name': 'Magnesium'}]",2020-06-11 08:33:31+00:00,2020-09-25 23:23:20+00:00,9211789.0,"106 days, 14:49:49","[{'comment_id': 438648188, 'comment_body': 'may be use `{%-` for each if start and end tag to avoid adding too many blank lines in the generated XML. This is cosmetic though. See https://jinja.palletsprojects.com/en/2.11.x/templates/#whitespace-control for reference', 'comment_created': datetime.datetime(2020, 6, 11, 9, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 438649396, 'comment_body': ""Aren't those covered by the `_handle_unit()` test normally? If so there is no need to add them here too IMHO."", 'comment_created': datetime.datetime(2020, 6, 11, 9, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 438785195, 'comment_body': 'We could probably be able to set up `trim_blocks ` in some of the `env` config files. But I added `-` manually for now.', 'comment_created': datetime.datetime(2020, 6, 11, 13, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}, {'comment_id': 438785770, 'comment_body': ""You're right. we don't need these lines. Actually, It won't do any harm to have them, right ? In case, the `caller` in the` virt.update` function made some obvious mistakes, these tests can probably help catching it. What do you think ? "", 'comment_created': datetime.datetime(2020, 6, 11, 13, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}, {'comment_id': 439420500, 'comment_body': ""oh sure it doesn't harm... you can keep them around for sure. No problem to have more tests than the minimum"", 'comment_created': datetime.datetime(2020, 6, 12, 13, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 484709601, 'comment_body': 'That looks strange, why not the following?\r\n```suggestion\r\n        unit = node.get(""unit"", ""b"")\r\n```', 'comment_created': datetime.datetime(2020, 9, 8, 7, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 484712206, 'comment_body': 'This should be moved into its own commit to ease patches backporting if needed in the future.', 'comment_created': datetime.datetime(2020, 9, 8, 7, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 484712718, 'comment_body': 'Please move the test data definition next to the test itself: it helps visualizing where the tests are starting', 'comment_created': datetime.datetime(2020, 9, 8, 7, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 484865909, 'comment_body': 'roger that', 'comment_created': datetime.datetime(2020, 9, 8, 12, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}]","[{'commit_sha': '737dac9d64c44e009412b7201b79a04170d5652a', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbeae42dcbd77cc2c46c52a1d4295ac9b9a8d4c4', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff0fc0c5f0d107af6cdd312b1943c7d0735a5fe5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Guoqing Li,8412714,lguoqing@redhat.com,User,,11,,23,15
445175120,"CPU model, topology and NUMA node tuning  GSoC","### What does this PR do?
In response to feature request #57880 

This PR add the feature to support CPU model and topology. configurable parameters are:
- `mode`
- `match`
- `check`
- `model`
- `vendor`
- `topology`
- `cache` 
- `feature` 

`numa` which is used to specify the attributes and sub-elements of numa `guest`. configurable parameters are:
- `cpus`
- `memory`
- `memAccess`
- `distance`
- `sibling` id and values

To configure numa `guest`,  numa `host ` must be configured beforehand, `numatune` can be used to specify `memory` which tells how to allocate memory for the domain process on a NUMA host and `memnode` which specify memory allocation policies per each guest NUMA node.

See [Libvirt domain XML](https://libvirt.org/formatdomain.html#elementsCPU) for more details.

### Merge requirements satisfied?
**[NOTICE] Bug fixes or features added to Salt require tests.**
<!-- Please review the [test documentation](https://docs.saltstack.com/en/master/topics/tutorials/writing_tests.html) for details on how to implement tests into Salt's test suite. -->
- [x] Docs
- [x] Changelog - https://docs.saltstack.com/en/master/topics/development/changelog.html
- [x] Tests written/updated

### Commits signed with GPG?
Yes

Please review [Salt's Contributing Guide](https://docs.saltstack.com/en/master/topics/development/contributing.html) for best practices.

See GitHub's [page on GPG signing](https://help.github.com/articles/signing-commits-using-gpg/) for more information about signing commits with GPG.
",False,57879,https://api.github.com/repos/saltstack/salt/pulls/57879,https://github.com/saltstack/salt/pull/57879,closed,1851,44,6,5,3,48,1,0,[{'name': 'Salt-Cloud'}],2020-07-07 06:01:09+00:00,2020-12-01 08:40:41+00:00,12710372.0,"147 days, 2:39:32","[{'comment_id': 451381720, 'comment_body': 'This is not really a function documentation. you can prune this sentence', 'comment_created': datetime.datetime(2020, 7, 8, 8, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 451382473, 'comment_body': 'Since you document them after, I would replace `megabytes (2**20)` by `MiB`', 'comment_created': datetime.datetime(2020, 7, 8, 8, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 451383015, 'comment_body': ""Again this is not a function documentation: the user won't see the `def_unit` parameter at all. Please remove that part"", 'comment_created': datetime.datetime(2020, 7, 8, 8, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 451384143, 'comment_body': 'Format the keys as code to make them easier to spot in the doc.\r\n\r\n```suggestion\r\n        Specifies ``hard_limit, soft_limit``, ``swap_hard_limit`` and ``min_guarantee`` parameters for tuning the memory of the domain.\r\n```', 'comment_created': datetime.datetime(2020, 7, 8, 8, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 451388801, 'comment_body': 'The logic to diff two chunks of XML with their attributes and text can surely be extracted into a generic-enough function to be reused to handle the various elements we need to take care of. This would surely reduce the increasing code complexity of the `update()` function.', 'comment_created': datetime.datetime(2020, 7, 8, 8, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 451394050, 'comment_body': 'Use a more expressive function name. What it extracts is not clear at first sight. Also replace `s` and `v` variable names by more meaningful ones. Variable and function names are acting as documentation in such a case.', 'comment_created': datetime.datetime(2020, 7, 8, 9, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 451394773, 'comment_body': 'This whole blob can surely share code with the boot and memtune update code to make it more readable.', 'comment_created': datetime.datetime(2020, 7, 8, 9, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 451561489, 'comment_body': ""Looks like you haven't documented `numatune` and `cpu` parameters changes"", 'comment_created': datetime.datetime(2020, 7, 8, 13, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 451561953, 'comment_body': ""Can't we get rid of that ugly `attrib` attribute? Could be internal, but the user shouldn't see it"", 'comment_created': datetime.datetime(2020, 7, 8, 13, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 451565337, 'comment_body': 'This commit adds more than documentation. You surely need to split your commits differently', 'comment_created': datetime.datetime(2020, 7, 8, 13, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 451565655, 'comment_body': 'Debugging print to be removed', 'comment_created': datetime.datetime(2020, 7, 8, 13, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 451567850, 'comment_body': 'another debug print to be removed', 'comment_created': datetime.datetime(2020, 7, 8, 14, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 451568918, 'comment_body': 'I would move `match`, `mode` and `check` one level up to remove `attrib`', 'comment_created': datetime.datetime(2020, 7, 8, 14, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 451569997, 'comment_body': 'debug print to be removed or converted to `log.debug()`', 'comment_created': datetime.datetime(2020, 7, 8, 14, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 451958326, 'comment_body': ""It's possible to get rid of `attrib`  But it might make the jinja code look even more ugly and less readable. This is how I handle `cpu attribute` in jinja templates  `<cpu {% for attr in cpu.attrib %} {{ cpu.attrib[attr] + ''}} {%- endfor %}>` There are 3 possible cpu attributes and 2 of them are optional, I can't think of a neater way of handle it. Do you have better suggestions? "", 'comment_created': datetime.datetime(2020, 7, 9, 4, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}, {'comment_id': 452567383, 'comment_body': 'Actually, i just had an idea of get rid of attrib without changing the jinja template :) ', 'comment_created': datetime.datetime(2020, 7, 10, 0, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}, {'comment_id': 452567464, 'comment_body': 'got an idea already :) ', 'comment_created': datetime.datetime(2020, 7, 10, 0, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}, {'comment_id': 475604030, 'comment_body': 'please avoid removing blank lines', 'comment_created': datetime.datetime(2020, 8, 24, 13, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486858450, 'comment_body': ""This dictionary can't be documented in `init-cpu-def` since that describes the CPU dictionary. And any way that documentation fragment doesn't explain about the `numatune` `memnode` parameters.\r\n\r\nPlease add the corresponding documentation in a `init-numatune-def` section and update the reference here and in the other `numatune` parameters docs of this commit"", 'comment_created': datetime.datetime(2020, 9, 11, 8, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486858963, 'comment_body': '```suggestion\r\n        used in the dictionary can be found at :ref:`init-numatune-def`.\r\n```', 'comment_created': datetime.datetime(2020, 9, 11, 8, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486860030, 'comment_body': 'Missing documentation for `numatune`. The parameter and the documentation should also be added to `virt.running`', 'comment_created': datetime.datetime(2020, 9, 11, 8, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486865728, 'comment_body': 'libvirt only supports `numatune` for the QEMU driver. So you will need to add these in a condition like:\r\n```\r\nif hypervisor in [""qemu"", ""kvm""]:\r\n```', 'comment_created': datetime.datetime(2020, 9, 11, 8, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486868769, 'comment_body': ""```suggestion\r\n                <memory\r\n                    {%- if 'mode' in numatune.memory %} mode='{{ numatune.memory.mode }}'{%- endif %}\r\n                    {%- if 'nodeset' in numatune.memory %}nodeset='{{ numatune.memory.nodeset }}'{%- endif %}\r\n                />\r\n```"", 'comment_created': datetime.datetime(2020, 9, 11, 8, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486874734, 'comment_body': 'Those test cases may not be strictly needed since these are covered by the first one. I think you can remove them', 'comment_created': datetime.datetime(2020, 9, 11, 8, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486875353, 'comment_body': 'What is an XML fragment doing here? You surely meant it to be in the VM XML definition, right?', 'comment_created': datetime.datetime(2020, 9, 11, 8, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486879794, 'comment_body': ""Why checking for a `memnode` that was never in the original nor updated description? better ensure that `cellid='1'` has been removed."", 'comment_created': datetime.datetime(2020, 9, 11, 9, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486880477, 'comment_body': 'This assert should be deleted too', 'comment_created': datetime.datetime(2020, 9, 11, 9, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486882052, 'comment_body': 'Instead of this test and the previous one, you should merge them into one that removes all numatune settings. It surely covers the same cases and would make it shorter', 'comment_created': datetime.datetime(2020, 9, 11, 9, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486884145, 'comment_body': ""I would remove that test since it's not that useful, and replace it by a test with exactly the parameters of the existing definition to ensure we're not updating the VM in such cases."", 'comment_created': datetime.datetime(2020, 9, 11, 9, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486887027, 'comment_body': 'I thought you implemented something simpler than that here... has it slipped in another PR?', 'comment_created': datetime.datetime(2020, 9, 11, 9, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486888382, 'comment_body': 'May be you should provide examples here. It also can handle ranges and excluded CPUs like `1-4,^3,6`', 'comment_created': datetime.datetime(2020, 9, 11, 9, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486890318, 'comment_body': ""Shouldn't we make it easier by transforming into `auto-placement` as a boolean value defaulting to `True`?"", 'comment_created': datetime.datetime(2020, 9, 11, 9, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486892374, 'comment_body': 'Seems that documentation fragment is outdated already ;)', 'comment_created': datetime.datetime(2020, 9, 11, 9, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486892802, 'comment_body': 'Do we really have to change the default value?', 'comment_created': datetime.datetime(2020, 9, 11, 9, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486896086, 'comment_body': 'If converting to `auto-placement` then this should be changed too', 'comment_created': datetime.datetime(2020, 9, 11, 9, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486933030, 'comment_body': 'There is an issue here: there can (are likely to) be several features. We need to handle things like:\r\n```\r\ncpu:\r\n  features:\r\n    vmx: require\r\n    lahf_lm: disable\r\n```', 'comment_created': datetime.datetime(2020, 9, 11, 9, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486933722, 'comment_body': 'Please test adding multiple features instead.', 'comment_created': datetime.datetime(2020, 9, 11, 9, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486934601, 'comment_body': 'Hum, this is surely a rebase issue ;)', 'comment_created': datetime.datetime(2020, 9, 11, 9, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 487687189, 'comment_body': 'hmm, actually `nodeset` `mode` are coming from `init-cpu-def`. They are somehow connected. ', 'comment_created': datetime.datetime(2020, 9, 14, 6, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}, {'comment_id': 487825241, 'comment_body': 'I am curious how the tests passed. this is obviously wrong. I will fix it', 'comment_created': datetime.datetime(2020, 9, 14, 10, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}, {'comment_id': 487829151, 'comment_body': ""I will add the assertion to ensure cellid='1' is removed. I guess it's still a good practice to check `memnode` that was never updated. Just in case there is something wrong with the update logic. We could run into the case that trying to update `cellid=1` which might messed with `cellid=2`. But i agree this is trivial."", 'comment_created': datetime.datetime(2020, 9, 14, 11, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}, {'comment_id': 487831361, 'comment_body': 'thanks for pointing that out. I will add them', 'comment_created': datetime.datetime(2020, 9, 14, 11, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}, {'comment_id': 494701739, 'comment_body': 'It seems like we can pass `placement:auto` to indicate auto placement', 'comment_created': datetime.datetime(2020, 9, 25, 1, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}, {'comment_id': 495542604, 'comment_body': ""Can you please submit this fix in a separate PR.\r\nI'd like to merge that sooner than this PR.\r\nThanks!"", 'comment_created': datetime.datetime(2020, 9, 27, 7, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 's0undt3ch', 'type': 'User'}, {'comment_id': 498150346, 'comment_body': 'this kwarg should be after `boot_dev` to safely cover the case for someone who is calling these kwargs as positional parameters.', 'comment_created': datetime.datetime(2020, 10, 1, 10, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Ch3LL', 'type': 'User'}, {'comment_id': 498583314, 'comment_body': ""That's right ! Thanks Megan."", 'comment_created': datetime.datetime(2020, 10, 2, 1, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}, {'comment_id': 513572055, 'comment_body': 'Sure, but the idea here was to use a boolean rather than a string to avoid the user to look for the possible values in the doc.', 'comment_created': datetime.datetime(2020, 10, 28, 16, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 513575180, 'comment_body': ""I am still convinced that the `numatune` parameter description shouldn't be shared with the cpu one, just for the sake of clarity. Otherwise you need to have clear references to the `init-cpu-def` sub section you mention. This starts to grow big, let's make it easy for the users."", 'comment_created': datetime.datetime(2020, 10, 28, 16, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}]","[{'commit_sha': 'c184535e8b545064803c54da75bef76b1dec8a7f', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f1af3262b5e63d4dd171f57963dc2d52fce7c2f', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bba2a07fd2a4f3993b69086caaad58e717d5009', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '21db4fbb55801054345708524b25aad5d55c7a44', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6ee020ad65e79eaccfe309f8431a843e3f3117b', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}]",Guoqing Li,8412714,lguoqing@redhat.com,User,,11,,23,15
467774589,cpu tuning and Iothreads allocation GSoC,"### What does this PR do?
Making `IOThreads` allocation available.  These are dedicated event loop threads for supported disk devices to perform block I/O requests.  `Iothreads` parameter specify the number of IOThreads to be assigned to the domain by supported target storage devices.

`IOThreads` can be pined using `iothreadpin` parameter  in `cputune`  which provides details regarding the CPU tunable parameters for the domain.  `cputune` contains the following parameters: 

-  `vcpupin`
- `emulatorpin`
-  `iothreadpin`
-   `shares`
- `period`
- `quota`
- `global_period`
- `global_quota`
- `emulator_period`
- `emulator_quota`
- `iothread_period`
- `iothread_quota`
- `vcpusched, iothreadsched and emulatorsched`
- `cachetune`
- `memorytune`

Detailed Libvirt domain xml info can be found at [iothreads](https://libvirt.org/formatdomain.html#iothreads-allocation)  and  [cpu tuning](https://libvirt.org/formatdomain.html#cpu-tuning)

### Merge requirements satisfied?
**[NOTICE] Bug fixes or features added to Salt require tests.**
<!-- Please review the [test documentation](https://docs.saltstack.com/en/master/topics/tutorials/writing_tests.html) for details on how to implement tests into Salt's test suite. -->
- [x] Docs
- [x] Changelog - https://docs.saltstack.com/en/master/topics/development/changelog.html
- [x] Tests written/updated

### Commits signed with GPG?
Yes/No

Please review [Salt's Contributing Guide](https://docs.saltstack.com/en/master/topics/development/contributing.html) for best practices.

See GitHub's [page on GPG signing](https://help.github.com/articles/signing-commits-using-gpg/) for more information about signing commits with GPG.
",True,58196,https://api.github.com/repos/saltstack/salt/pulls/58196,https://github.com/saltstack/salt/pull/58196,closed,3588,227,8,17,2,20,1,0,[{'name': 'Aluminium'}],2020-08-14 05:19:40+00:00,2020-11-30 20:22:34+00:00,9385374.0,"108 days, 15:02:54","[{'comment_id': 475621386, 'comment_body': 'The expected format of the parameter should be described here. Something like `Number of threads for supported disk devices to perform I/O requests. (Default: None)` would be better.\r\n\r\nIt would be good to also tell the user that the iothreads will be numbered from 1 to the provided number since they are likely to use them in the CPU tuning part.', 'comment_created': datetime.datetime(2020, 8, 24, 13, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475621689, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 8, 24, 13, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475629596, 'comment_body': 'Same doc issue', 'comment_created': datetime.datetime(2020, 8, 24, 13, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475629968, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 8, 24, 13, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475634653, 'comment_body': 'since this is adding tuning of the virtual cpu, I would move it in the `cpu` param, maybe a `tuning` key of it.', 'comment_created': datetime.datetime(2020, 8, 24, 14, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475635488, 'comment_body': ""don't remove blank lines"", 'comment_created': datetime.datetime(2020, 8, 24, 14, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475635844, 'comment_body': ""likely adding a blank line that shouldn't have been removed in the first place"", 'comment_created': datetime.datetime(2020, 8, 24, 14, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475637035, 'comment_body': 'Mention here that the IOThread IDs to use in this value are from 1 to the number passed to `iothread` parameter.', 'comment_created': datetime.datetime(2020, 8, 24, 14, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486982888, 'comment_body': 'Even though you explained it in the example, you should explain that the value is a dict with the vCPU id as key and the cpuset as value.\r\n\r\nAlso mention that setting to `None` will remove all configured vcpupins', 'comment_created': datetime.datetime(2020, 9, 11, 11, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 487003294, 'comment_body': 'As per the [schema](https://gitlab.com/libvirt/libvirt/-/blob/master/docs/schemas/domaincommon.rng#L966) there can be mulitple `iothreadsched`... they need to be a list\r\n\r\nYou can also add the `emulatorsched` (not a list)', 'comment_created': datetime.datetime(2020, 9, 11, 12, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 487004522, 'comment_body': 'I think this entry is a bogus one to be removed', 'comment_created': datetime.datetime(2020, 9, 11, 12, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 487005041, 'comment_body': 'Should handle the unit here.', 'comment_created': datetime.datetime(2020, 9, 11, 12, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 487005672, 'comment_body': 'Wrong PR :)', 'comment_created': datetime.datetime(2020, 9, 11, 12, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 514149812, 'comment_body': ""This doesn't match the implementation. Should be like this:\r\n\r\n```diff\r\n-                        iothreads: 2\r\n-                        scheduler: batch\r\n+                       0:\r\n+                          iothreads: 2\r\n+                          scheduler: batch\r\n```\r\n\r\nBut even this way, how do we handle the default then where the `iothread id` is not defined? Same question for `vcpusched`"", 'comment_created': datetime.datetime(2020, 10, 29, 10, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 514151248, 'comment_body': 'Since the `cpuset` attribute is mandatory in the XML schema, it would make the whole code simpler to move the attribute name to the jinja template and get rid of this piece of code', 'comment_created': datetime.datetime(2020, 10, 29, 10, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 514151938, 'comment_body': 'Same here, using the loop on the attributes as you did for `vcpusched` in the jinja template allows getting rid of this code', 'comment_created': datetime.datetime(2020, 10, 29, 10, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 514152543, 'comment_body': ""I wold move the `cputune` context into `context['cpu']['tuning']`"", 'comment_created': datetime.datetime(2020, 10, 29, 10, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 514153499, 'comment_body': ""Would be nice to have such a test for `_gen_xml()` too, otherwise we don't test the XML generation, only the update"", 'comment_created': datetime.datetime(2020, 10, 29, 10, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 522944861, 'comment_body': '```suggestion\r\n        .. versionadded:: Aluminium\r\n```', 'comment_created': datetime.datetime(2020, 11, 13, 13, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 523083545, 'comment_body': ""```suggestion\r\n                    {%- if numatune.memory.nodeset %} nodeset='{{ numatune.memory.nodeset }}'{%- endif %}\r\n```\r\n\r\nThere is a missing white space before the `nodeset` attribute that makes the XML invalid"", 'comment_created': datetime.datetime(2020, 11, 13, 17, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}]","[{'commit_sha': '84669238a3b05a5dc85a7cc6646e730f0289fa39', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74b4297f2a1034bf86a6564b6acfbab0c552a704', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d97cbd22d67e20a489ef555e9cffbd117bc4c8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8be96d4c1514f283fdb2e2ccdd89610ea37de033', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92ef2e6cca2e1de2e26dcfe86ec0609fb4899270', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d823a797177c46657dfeb700e54c20ec49dcbb4', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '711ca0e1605cfe57f4c897940a9266a05822f929', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14216e7347da5e27586b3a62a7d3c280d270883d', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef7280e3ab1eb8af7fe86216557bc30fe4402c97', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad9d35be36a3246d2c77320464aca7fb7bbee87', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6b5fa44274de0b2a5e133dc727eda41fa463511', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4086a461a668ca57c8903aec3684c9ba64445db', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caa9e8d0ecc07bc2254b9f578a7a74ec5e44514a', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc6f3a0bae9bed15eb1fcc70748c0624c52663b4', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50840ef374f3c507c9378e5fee382578ede19b98', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3d5f1869386b317aabef8387d860b86f88bc05', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '302b4eacdd2837ad9a4a08661a9789710986b11e', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}]",Guoqing Li,8412714,lguoqing@redhat.com,User,,11,,23,15
466197378,Memory backing  GSoC,"### What does this PR do?
In response to feature request #58167 

Support Memory Backing which enables how virtual memory pages are backed by host pages. configurable parameters are: 
- `hugepages`
- `nosharepages`
- `locked`
- `source`
- `access` 
- `discard` 

Detailed explanation of these parameters can be found at [https://libvirt.org/formatdomain.html#memory-backing](Libvirt Domain XML)

### Merge requirements satisfied?
**[NOTICE] Bug fixes or features added to Salt require tests.**
<!-- Please review the [test documentation](https://docs.saltstack.com/en/master/topics/tutorials/writing_tests.html) for details on how to implement tests into Salt's test suite. -->
- [x] Docs
- [x] Changelog - https://docs.saltstack.com/en/master/topics/development/changelog.html
- [x] Tests written/updated

### Commits signed with GPG?
Yes/No

Please review [Salt's Contributing Guide](https://docs.saltstack.com/en/master/topics/development/contributing.html) for best practices.

See GitHub's [page on GPG signing](https://help.github.com/articles/signing-commits-using-gpg/) for more information about signing commits with GPG.
",False,58167,https://api.github.com/repos/saltstack/salt/pulls/58167,https://github.com/saltstack/salt/pull/58167,closed,2285,171,8,8,2,5,0,0,[],2020-08-11 15:54:30+00:00,2020-12-01 08:39:35+00:00,9650705.0,"111 days, 16:45:05","[{'comment_id': 486976836, 'comment_body': '[libvirt doc](https://libvirt.org/formatdomain.html#memory-backing) mentions multiple huge pages pages and has them assigned to a cpuset. How comes this is not handled here?', 'comment_created': datetime.datetime(2020, 9, 11, 11, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486977522, 'comment_body': 'duplicate entry', 'comment_created': datetime.datetime(2020, 9, 11, 11, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486977944, 'comment_body': 'I wonder what happens with those: they are not supposed to have text nor attributes', 'comment_created': datetime.datetime(2020, 9, 11, 11, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486978468, 'comment_body': 'You should move that hunk into a separate commit. Adding a unit test in `test_xmlutil.py` for it would be nice too.', 'comment_created': datetime.datetime(2020, 9, 11, 11, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 497621205, 'comment_body': 'new code is updated to handle assigning of ``cpuset`` :) ', 'comment_created': datetime.datetime(2020, 9, 30, 15, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gqlo', 'type': 'User'}]","[{'commit_sha': '629dc1ff14e0905e45a4681b66a14c027a5beec8', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a21321e8c7cc05d320be75c419353f550804d60', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '659dd19b9f08741e58be04a8ff483da2cd88576d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '54a73780bcf6be7c9184e4158999b8abe449739b', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a51f01588071ea79305189b3edc40eeb1e670924', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b11256387cecbc216973c4ea8ecdaf72c480454f', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef7f2ea29ba67482a5b08bd90686a58f7dc71ea4', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa58a549458359effba1f927db8d52747531424d', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}]",Guoqing Li,8412714,lguoqing@redhat.com,User,,11,,23,15
467774589,cpu tuning and Iothreads allocation GSoC,"### What does this PR do?
Making `IOThreads` allocation available.  These are dedicated event loop threads for supported disk devices to perform block I/O requests.  `Iothreads` parameter specify the number of IOThreads to be assigned to the domain by supported target storage devices.

`IOThreads` can be pined using `iothreadpin` parameter  in `cputune`  which provides details regarding the CPU tunable parameters for the domain.  `cputune` contains the following parameters: 

-  `vcpupin`
- `emulatorpin`
-  `iothreadpin`
-   `shares`
- `period`
- `quota`
- `global_period`
- `global_quota`
- `emulator_period`
- `emulator_quota`
- `iothread_period`
- `iothread_quota`
- `vcpusched, iothreadsched and emulatorsched`
- `cachetune`
- `memorytune`

Detailed Libvirt domain xml info can be found at [iothreads](https://libvirt.org/formatdomain.html#iothreads-allocation)  and  [cpu tuning](https://libvirt.org/formatdomain.html#cpu-tuning)

### Merge requirements satisfied?
**[NOTICE] Bug fixes or features added to Salt require tests.**
<!-- Please review the [test documentation](https://docs.saltstack.com/en/master/topics/tutorials/writing_tests.html) for details on how to implement tests into Salt's test suite. -->
- [x] Docs
- [x] Changelog - https://docs.saltstack.com/en/master/topics/development/changelog.html
- [x] Tests written/updated

### Commits signed with GPG?
Yes/No

Please review [Salt's Contributing Guide](https://docs.saltstack.com/en/master/topics/development/contributing.html) for best practices.

See GitHub's [page on GPG signing](https://help.github.com/articles/signing-commits-using-gpg/) for more information about signing commits with GPG.
",True,58196,https://api.github.com/repos/saltstack/salt/pulls/58196,https://github.com/saltstack/salt/pull/58196,closed,3588,227,8,17,2,20,1,0,[{'name': 'Aluminium'}],2020-08-14 05:19:40+00:00,2020-11-30 20:22:34+00:00,9385374.0,"108 days, 15:02:54","[{'comment_id': 475621386, 'comment_body': 'The expected format of the parameter should be described here. Something like `Number of threads for supported disk devices to perform I/O requests. (Default: None)` would be better.\r\n\r\nIt would be good to also tell the user that the iothreads will be numbered from 1 to the provided number since they are likely to use them in the CPU tuning part.', 'comment_created': datetime.datetime(2020, 8, 24, 13, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475621689, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 8, 24, 13, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475629596, 'comment_body': 'Same doc issue', 'comment_created': datetime.datetime(2020, 8, 24, 13, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475629968, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 8, 24, 13, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475634653, 'comment_body': 'since this is adding tuning of the virtual cpu, I would move it in the `cpu` param, maybe a `tuning` key of it.', 'comment_created': datetime.datetime(2020, 8, 24, 14, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475635488, 'comment_body': ""don't remove blank lines"", 'comment_created': datetime.datetime(2020, 8, 24, 14, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475635844, 'comment_body': ""likely adding a blank line that shouldn't have been removed in the first place"", 'comment_created': datetime.datetime(2020, 8, 24, 14, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475637035, 'comment_body': 'Mention here that the IOThread IDs to use in this value are from 1 to the number passed to `iothread` parameter.', 'comment_created': datetime.datetime(2020, 8, 24, 14, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486982888, 'comment_body': 'Even though you explained it in the example, you should explain that the value is a dict with the vCPU id as key and the cpuset as value.\r\n\r\nAlso mention that setting to `None` will remove all configured vcpupins', 'comment_created': datetime.datetime(2020, 9, 11, 11, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 487003294, 'comment_body': 'As per the [schema](https://gitlab.com/libvirt/libvirt/-/blob/master/docs/schemas/domaincommon.rng#L966) there can be mulitple `iothreadsched`... they need to be a list\r\n\r\nYou can also add the `emulatorsched` (not a list)', 'comment_created': datetime.datetime(2020, 9, 11, 12, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 487004522, 'comment_body': 'I think this entry is a bogus one to be removed', 'comment_created': datetime.datetime(2020, 9, 11, 12, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 487005041, 'comment_body': 'Should handle the unit here.', 'comment_created': datetime.datetime(2020, 9, 11, 12, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 487005672, 'comment_body': 'Wrong PR :)', 'comment_created': datetime.datetime(2020, 9, 11, 12, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 514149812, 'comment_body': ""This doesn't match the implementation. Should be like this:\r\n\r\n```diff\r\n-                        iothreads: 2\r\n-                        scheduler: batch\r\n+                       0:\r\n+                          iothreads: 2\r\n+                          scheduler: batch\r\n```\r\n\r\nBut even this way, how do we handle the default then where the `iothread id` is not defined? Same question for `vcpusched`"", 'comment_created': datetime.datetime(2020, 10, 29, 10, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 514151248, 'comment_body': 'Since the `cpuset` attribute is mandatory in the XML schema, it would make the whole code simpler to move the attribute name to the jinja template and get rid of this piece of code', 'comment_created': datetime.datetime(2020, 10, 29, 10, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 514151938, 'comment_body': 'Same here, using the loop on the attributes as you did for `vcpusched` in the jinja template allows getting rid of this code', 'comment_created': datetime.datetime(2020, 10, 29, 10, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 514152543, 'comment_body': ""I wold move the `cputune` context into `context['cpu']['tuning']`"", 'comment_created': datetime.datetime(2020, 10, 29, 10, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 514153499, 'comment_body': ""Would be nice to have such a test for `_gen_xml()` too, otherwise we don't test the XML generation, only the update"", 'comment_created': datetime.datetime(2020, 10, 29, 10, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 522944861, 'comment_body': '```suggestion\r\n        .. versionadded:: Aluminium\r\n```', 'comment_created': datetime.datetime(2020, 11, 13, 13, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 523083545, 'comment_body': ""```suggestion\r\n                    {%- if numatune.memory.nodeset %} nodeset='{{ numatune.memory.nodeset }}'{%- endif %}\r\n```\r\n\r\nThere is a missing white space before the `nodeset` attribute that makes the XML invalid"", 'comment_created': datetime.datetime(2020, 11, 13, 17, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}]","[{'commit_sha': '84669238a3b05a5dc85a7cc6646e730f0289fa39', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74b4297f2a1034bf86a6564b6acfbab0c552a704', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d97cbd22d67e20a489ef555e9cffbd117bc4c8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8be96d4c1514f283fdb2e2ccdd89610ea37de033', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92ef2e6cca2e1de2e26dcfe86ec0609fb4899270', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d823a797177c46657dfeb700e54c20ec49dcbb4', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '711ca0e1605cfe57f4c897940a9266a05822f929', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14216e7347da5e27586b3a62a7d3c280d270883d', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef7280e3ab1eb8af7fe86216557bc30fe4402c97', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad9d35be36a3246d2c77320464aca7fb7bbee87', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6b5fa44274de0b2a5e133dc727eda41fa463511', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4086a461a668ca57c8903aec3684c9ba64445db', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caa9e8d0ecc07bc2254b9f578a7a74ec5e44514a', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc6f3a0bae9bed15eb1fcc70748c0624c52663b4', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50840ef374f3c507c9378e5fee382578ede19b98', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3d5f1869386b317aabef8387d860b86f88bc05', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '302b4eacdd2837ad9a4a08661a9789710986b11e', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}]",Guoqing Li,8412714,lguoqing@redhat.com,User,,11,,23,15
467774589,cpu tuning and Iothreads allocation GSoC,"### What does this PR do?
Making `IOThreads` allocation available.  These are dedicated event loop threads for supported disk devices to perform block I/O requests.  `Iothreads` parameter specify the number of IOThreads to be assigned to the domain by supported target storage devices.

`IOThreads` can be pined using `iothreadpin` parameter  in `cputune`  which provides details regarding the CPU tunable parameters for the domain.  `cputune` contains the following parameters: 

-  `vcpupin`
- `emulatorpin`
-  `iothreadpin`
-   `shares`
- `period`
- `quota`
- `global_period`
- `global_quota`
- `emulator_period`
- `emulator_quota`
- `iothread_period`
- `iothread_quota`
- `vcpusched, iothreadsched and emulatorsched`
- `cachetune`
- `memorytune`

Detailed Libvirt domain xml info can be found at [iothreads](https://libvirt.org/formatdomain.html#iothreads-allocation)  and  [cpu tuning](https://libvirt.org/formatdomain.html#cpu-tuning)

### Merge requirements satisfied?
**[NOTICE] Bug fixes or features added to Salt require tests.**
<!-- Please review the [test documentation](https://docs.saltstack.com/en/master/topics/tutorials/writing_tests.html) for details on how to implement tests into Salt's test suite. -->
- [x] Docs
- [x] Changelog - https://docs.saltstack.com/en/master/topics/development/changelog.html
- [x] Tests written/updated

### Commits signed with GPG?
Yes/No

Please review [Salt's Contributing Guide](https://docs.saltstack.com/en/master/topics/development/contributing.html) for best practices.

See GitHub's [page on GPG signing](https://help.github.com/articles/signing-commits-using-gpg/) for more information about signing commits with GPG.
",True,58196,https://api.github.com/repos/saltstack/salt/pulls/58196,https://github.com/saltstack/salt/pull/58196,closed,3588,227,8,17,2,20,1,0,[{'name': 'Aluminium'}],2020-08-14 05:19:40+00:00,2020-11-30 20:22:34+00:00,9385374.0,"108 days, 15:02:54","[{'comment_id': 475621386, 'comment_body': 'The expected format of the parameter should be described here. Something like `Number of threads for supported disk devices to perform I/O requests. (Default: None)` would be better.\r\n\r\nIt would be good to also tell the user that the iothreads will be numbered from 1 to the provided number since they are likely to use them in the CPU tuning part.', 'comment_created': datetime.datetime(2020, 8, 24, 13, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475621689, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 8, 24, 13, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475629596, 'comment_body': 'Same doc issue', 'comment_created': datetime.datetime(2020, 8, 24, 13, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475629968, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 8, 24, 13, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475634653, 'comment_body': 'since this is adding tuning of the virtual cpu, I would move it in the `cpu` param, maybe a `tuning` key of it.', 'comment_created': datetime.datetime(2020, 8, 24, 14, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475635488, 'comment_body': ""don't remove blank lines"", 'comment_created': datetime.datetime(2020, 8, 24, 14, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475635844, 'comment_body': ""likely adding a blank line that shouldn't have been removed in the first place"", 'comment_created': datetime.datetime(2020, 8, 24, 14, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 475637035, 'comment_body': 'Mention here that the IOThread IDs to use in this value are from 1 to the number passed to `iothread` parameter.', 'comment_created': datetime.datetime(2020, 8, 24, 14, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 486982888, 'comment_body': 'Even though you explained it in the example, you should explain that the value is a dict with the vCPU id as key and the cpuset as value.\r\n\r\nAlso mention that setting to `None` will remove all configured vcpupins', 'comment_created': datetime.datetime(2020, 9, 11, 11, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 487003294, 'comment_body': 'As per the [schema](https://gitlab.com/libvirt/libvirt/-/blob/master/docs/schemas/domaincommon.rng#L966) there can be mulitple `iothreadsched`... they need to be a list\r\n\r\nYou can also add the `emulatorsched` (not a list)', 'comment_created': datetime.datetime(2020, 9, 11, 12, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 487004522, 'comment_body': 'I think this entry is a bogus one to be removed', 'comment_created': datetime.datetime(2020, 9, 11, 12, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 487005041, 'comment_body': 'Should handle the unit here.', 'comment_created': datetime.datetime(2020, 9, 11, 12, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 487005672, 'comment_body': 'Wrong PR :)', 'comment_created': datetime.datetime(2020, 9, 11, 12, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 514149812, 'comment_body': ""This doesn't match the implementation. Should be like this:\r\n\r\n```diff\r\n-                        iothreads: 2\r\n-                        scheduler: batch\r\n+                       0:\r\n+                          iothreads: 2\r\n+                          scheduler: batch\r\n```\r\n\r\nBut even this way, how do we handle the default then where the `iothread id` is not defined? Same question for `vcpusched`"", 'comment_created': datetime.datetime(2020, 10, 29, 10, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 514151248, 'comment_body': 'Since the `cpuset` attribute is mandatory in the XML schema, it would make the whole code simpler to move the attribute name to the jinja template and get rid of this piece of code', 'comment_created': datetime.datetime(2020, 10, 29, 10, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 514151938, 'comment_body': 'Same here, using the loop on the attributes as you did for `vcpusched` in the jinja template allows getting rid of this code', 'comment_created': datetime.datetime(2020, 10, 29, 10, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 514152543, 'comment_body': ""I wold move the `cputune` context into `context['cpu']['tuning']`"", 'comment_created': datetime.datetime(2020, 10, 29, 10, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 514153499, 'comment_body': ""Would be nice to have such a test for `_gen_xml()` too, otherwise we don't test the XML generation, only the update"", 'comment_created': datetime.datetime(2020, 10, 29, 10, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 522944861, 'comment_body': '```suggestion\r\n        .. versionadded:: Aluminium\r\n```', 'comment_created': datetime.datetime(2020, 11, 13, 13, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}, {'comment_id': 523083545, 'comment_body': ""```suggestion\r\n                    {%- if numatune.memory.nodeset %} nodeset='{{ numatune.memory.nodeset }}'{%- endif %}\r\n```\r\n\r\nThere is a missing white space before the `nodeset` attribute that makes the XML invalid"", 'comment_created': datetime.datetime(2020, 11, 13, 17, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'cbosdo', 'type': 'User'}]","[{'commit_sha': '84669238a3b05a5dc85a7cc6646e730f0289fa39', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74b4297f2a1034bf86a6564b6acfbab0c552a704', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d97cbd22d67e20a489ef555e9cffbd117bc4c8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8be96d4c1514f283fdb2e2ccdd89610ea37de033', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92ef2e6cca2e1de2e26dcfe86ec0609fb4899270', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d823a797177c46657dfeb700e54c20ec49dcbb4', 'committer_username': 'cbosdo', 'committer_name': 'Cedric Bosdonnat', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 13, 19, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '711ca0e1605cfe57f4c897940a9266a05822f929', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14216e7347da5e27586b3a62a7d3c280d270883d', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef7280e3ab1eb8af7fe86216557bc30fe4402c97', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad9d35be36a3246d2c77320464aca7fb7bbee87', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6b5fa44274de0b2a5e133dc727eda41fa463511', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4086a461a668ca57c8903aec3684c9ba64445db', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caa9e8d0ecc07bc2254b9f578a7a74ec5e44514a', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc6f3a0bae9bed15eb1fcc70748c0624c52663b4', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50840ef374f3c507c9378e5fee382578ede19b98', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3d5f1869386b317aabef8387d860b86f88bc05', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '302b4eacdd2837ad9a4a08661a9789710986b11e', 'committer_username': 'gqlo', 'committer_name': 'Guoqing Li', 'committer_email': 'lguoqing@redhat.com', 'commit_date': datetime.datetime(2014, 8, 11, 3, 52, 1, tzinfo=datetime.timezone.utc)}]",Guoqing Li,8412714,lguoqing@redhat.com,User,,11,,23,15

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
1390248,salt,saltstack/salt,Python,5471,14059,533,3941,121328,2790,31,236,"[{'id': 493569016, 'number': 58565, 'closed': datetime.datetime(2020, 9, 27, 8, 15, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 26, 12, 8, 59, tzinfo=datetime.timezone.utc), 'time_taken': 72404.0, 'time_delta': '20:06:44', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 467774589, 'number': 58196, 'closed': datetime.datetime(2020, 11, 30, 20, 22, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 5, 19, 40, tzinfo=datetime.timezone.utc), 'time_taken': 9385374.0, 'time_delta': '108 days, 15:02:54', 'additions': 3588, 'deletions': 227, 'state': 'closed'}, {'id': 466197378, 'number': 58167, 'closed': datetime.datetime(2020, 12, 1, 8, 39, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 15, 54, 30, tzinfo=datetime.timezone.utc), 'time_taken': 9650705.0, 'time_delta': '111 days, 16:45:05', 'additions': 2285, 'deletions': 171, 'state': 'closed'}, {'id': 445175120, 'number': 57879, 'closed': datetime.datetime(2020, 12, 1, 8, 40, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 6, 1, 9, tzinfo=datetime.timezone.utc), 'time_taken': 12710372.0, 'time_delta': '147 days, 2:39:32', 'additions': 1851, 'deletions': 44, 'state': 'closed'}, {'id': 432923829, 'number': 57636, 'closed': datetime.datetime(2020, 9, 25, 23, 23, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 8, 33, 31, tzinfo=datetime.timezone.utc), 'time_taken': 9211789.0, 'time_delta': '106 days, 14:49:49', 'additions': 595, 'deletions': 38, 'state': 'closed'}, {'id': 422601966, 'number': 57451, 'closed': datetime.datetime(2020, 7, 30, 21, 58, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 7, 52, 42, tzinfo=datetime.timezone.utc), 'time_taken': 5753164.0, 'time_delta': '66 days, 14:06:04', 'additions': 150, 'deletions': 162, 'state': 'closed'}, {'id': 420818251, 'number': 57396, 'closed': datetime.datetime(2020, 5, 22, 3, 36, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 15, 13, 33, tzinfo=datetime.timezone.utc), 'time_taken': 130960.0, 'time_delta': '1 day, 12:22:40', 'additions': 90, 'deletions': 13, 'state': 'closed'}, {'id': 413536490, 'number': 57086, 'closed': datetime.datetime(2020, 5, 7, 23, 57, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 5, 14, 2, 51, tzinfo=datetime.timezone.utc), 'time_taken': 208489.0, 'time_delta': '2 days, 9:54:49', 'additions': 53, 'deletions': 46, 'state': 'closed'}, {'id': 402290557, 'number': 56613, 'closed': datetime.datetime(2020, 4, 13, 7, 49, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 12, 5, 35, 33, tzinfo=datetime.timezone.utc), 'time_taken': 94442.0, 'time_delta': '1 day, 2:14:02', 'additions': 179, 'deletions': 38, 'state': 'closed'}, {'id': 400132326, 'number': 56562, 'closed': datetime.datetime(2020, 4, 12, 5, 49, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 7, 8, 55, 19, tzinfo=datetime.timezone.utc), 'time_taken': 420832.0, 'time_delta': '4 days, 20:53:52', 'additions': 100, 'deletions': 2, 'state': 'closed'}, {'id': 398058734, 'number': 56515, 'closed': datetime.datetime(2020, 4, 10, 5, 14, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 3, 9, 18, 16, tzinfo=datetime.timezone.utc), 'time_taken': 590164.0, 'time_delta': '6 days, 19:56:04', 'additions': 0, 'deletions': 0, 'state': 'closed'}]"
