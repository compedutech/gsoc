pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
376345675,FM2-65 Add support for telecom to Patient,"<!--- Add a pull request title above in this format -->
<!--- real example: 'FM2-8 Implement the Person Resource' -->
<!--- 'FM2-JiraIssueNumber JiraIssueTitle' -->
## Description of what I changed
Added support for telecom to Patient

## Issue I worked on
<!--- This project only accepts pull requests related to open issues -->
<!--- Want a new feature or change? Discuss it in an issue first -->
<!--- Found a bug? Point us to the issue/or create one so we can reproduce it -->
<!--- Just add the issue number at the end: -->
see https://issues.openmrs.org/browse/FM2-65

## Checklist: I completed these to help reviewers :)
<!--- Put an `x` in the box if you did the task -->
<!--- If you forgot a task please follow the instructions below -->
- [x] My pull request only contains **ONE single commit**.

- [x] My IDE is configured to follow the [**code style**](https://wiki.openmrs.org/display/docs/Java+Conventions) of this project.

- [x] I have **added tests** to cover my changes. (If you refactored
  existing code that was well tested you do not have to add tests)

- [x] I ran `mvn clean package` right before creating this pull request and
  added all formatting changes to my commit.

- [x] All new and existing **tests passed**.

- [x] My pull request is **based on the latest changes** of the master branch.
",True,70,https://api.github.com/repos/openmrs/openmrs-module-fhir2/pulls/70,https://github.com/openmrs/openmrs-module-fhir2/pull/70,closed,83,0,2,1,2,1,0,0,[],2020-02-17 23:16:32+00:00,2020-02-18 13:19:47+00:00,50595.0,14:03:15,[],"[{'commit_sha': '79b558cd5c38e5c72b465d3c7e5e04e5bdba85f4', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}]",Siddharth Vaish,36266597,sidvaish97@gmail.com,User,,34,,9,39
376806069,FM2-73 Remove the OpenMRS Services from Translators,"<!--- Add a pull request title above in this format -->
<!--- real example: 'FM2-8 Implement the Person Resource' -->
<!--- 'FM2-JiraIssueNumber JiraIssueTitle' -->
## Description of what I changed
<!--- Describe your changes in detail -->
<!--- It can simply be your commit message, which you must have -->


## Issue I worked on
<!--- This project only accepts pull requests related to open issues -->
<!--- Want a new feature or change? Discuss it in an issue first -->
<!--- Found a bug? Point us to the issue/or create one so we can reproduce it -->
<!--- Just add the issue number at the end: -->
see https://issues.openmrs.org/browse/FM2-73

## Checklist: I completed these to help reviewers :)
<!--- Put an `x` in the box if you did the task -->
<!--- If you forgot a task please follow the instructions below -->
- [ ] My pull request only contains **ONE single commit**.

  No? -> [read here](https://wiki.openmrs.org/display/docs/Pull+Request+Tips) on how to squash multiple commits into one

- [x] My IDE is configured to follow the [**code style**](https://wiki.openmrs.org/display/docs/Java+Conventions) of this project.

  No? Unsure? -> [configure your IDE](https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE), format the code and add the changes with `git add . && git commit --amend`

- [x] I have **added tests** to cover my changes. (If you refactored
  existing code that was well tested you do not have to add tests)

  No? -> write tests and add them to this commit `git add . && git commit --amend`

- [x] I ran `mvn clean package` right before creating this pull request and
  added all formatting changes to my commit.

  No? -> execute above command

- [x] All new and existing **tests passed**.

  No? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.

- [x] My pull request is **based on the latest changes** of the master branch.

  No? Unsure? -> execute command `git pull --rebase upstream master`
",True,73,https://api.github.com/repos/openmrs/openmrs-module-fhir2/pulls/73,https://github.com/openmrs/openmrs-module-fhir2/pull/73,closed,144,78,17,4,3,2,0,0,[],2020-02-18 19:55:53+00:00,2020-02-19 13:47:34+00:00,64301.0,17:51:41,"[{'comment_id': 380943650, 'comment_body': ""Technically, we don't need this function at all. We can just use the implementation in the `PersonDao`, which simplifies maintenance."", 'comment_created': datetime.datetime(2020, 2, 18, 21, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 380948661, 'comment_body': '@ibacher I am removing that code', 'comment_created': datetime.datetime(2020, 2, 18, 21, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}]","[{'commit_sha': '98815bc3ea3920e72bb48ed4e11ae26bd00d9714', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59b2d4f9f7c41027e04ad6cb89cd9a8e9e34ee98', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72e8a062e1974c148e0a01d1825cb44b47979cd8', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '106d0cdae1fb8aa46e58b7ba12028160a34461f8', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}]",Siddharth Vaish,36266597,sidvaish97@gmail.com,User,,34,,9,39
377211091,FM2-74 Rename Task to FhirTask,"<!--- Add a pull request title above in this format -->
<!--- real example: 'FM2-8 Implement the Person Resource' -->
<!--- 'FM2-JiraIssueNumber JiraIssueTitle' -->
## Description of what I changed
<!--- Describe your changes in detail -->
<!--- It can simply be your commit message, which you must have -->
Renamed Task to FhirTask

## Issue I worked on
<!--- This project only accepts pull requests related to open issues -->
<!--- Want a new feature or change? Discuss it in an issue first -->
<!--- Found a bug? Point us to the issue/or create one so we can reproduce it -->
<!--- Just add the issue number at the end: -->
see https://issues.openmrs.org/browse/FM2-74

## Checklist: I completed these to help reviewers :)
<!--- Put an `x` in the box if you did the task -->
<!--- If you forgot a task please follow the instructions below -->
- [x] My pull request only contains **ONE single commit**.

  No? -> [read here](https://wiki.openmrs.org/display/docs/Pull+Request+Tips) on how to squash multiple commits into one

- [x] My IDE is configured to follow the [**code style**](https://wiki.openmrs.org/display/docs/Java+Conventions) of this project.

  No? Unsure? -> [configure your IDE](https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE), format the code and add the changes with `git add . && git commit --amend`

- [x] I have **added tests** to cover my changes. (If you refactored
  existing code that was well tested you do not have to add tests)

  No? -> write tests and add them to this commit `git add . && git commit --amend`

- [x] I ran `mvn clean package` right before creating this pull request and
  added all formatting changes to my commit.

  No? -> execute above command

- [x] All new and existing **tests passed**.

  No? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.

- [x] My pull request is **based on the latest changes** of the master branch.

  No? Unsure? -> execute command `git pull --rebase upstream master`
",True,74,https://api.github.com/repos/openmrs/openmrs-module-fhir2/pulls/74,https://github.com/openmrs/openmrs-module-fhir2/pull/74,closed,71,66,9,2,1,4,0,0,[],2020-02-19 14:45:52+00:00,2020-02-19 18:14:05+00:00,12493.0,3:28:13,"[{'comment_id': 381388396, 'comment_body': 'I prefer `TaskFhirResourceProviderTest` instead of `FhirTaskFhirResourceProviderTest`', 'comment_created': datetime.datetime(2020, 2, 19, 16, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'corneliouzbett', 'type': 'User'}, {'comment_id': 381390376, 'comment_body': '`FhirTaskServiceImplTest` instead of `FhirFhirTaskServiceImplTest`', 'comment_created': datetime.datetime(2020, 2, 19, 16, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'corneliouzbett', 'type': 'User'}, {'comment_id': 381392019, 'comment_body': 'Remove prefix Fhir', 'comment_created': datetime.datetime(2020, 2, 19, 16, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'corneliouzbett', 'type': 'User'}, {'comment_id': 381394488, 'comment_body': ""@corneliouzbett Oh really sorry I must have seen this before sending a PR. I'll fix this"", 'comment_created': datetime.datetime(2020, 2, 19, 16, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}]","[{'commit_sha': 'fe48673ad384bfacfd869faaa6ba7382227a8fe3', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c839b43837443c717b0e953abfc035b7785a82d9', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}]",Siddharth Vaish,36266597,sidvaish97@gmail.com,User,,34,,9,39
378306511,FM2-61 Add support for Observation.referenceRange,"<!--- Add a pull request title above in this format -->
<!--- real example: 'FM2-8 Implement the Person Resource' -->
<!--- 'FM2-JiraIssueNumber JiraIssueTitle' -->
## Description of what I changed
<!--- Describe your changes in detail -->
<!--- It can simply be your commit message, which you must have -->


## Issue I worked on
<!--- This project only accepts pull requests related to open issues -->
<!--- Want a new feature or change? Discuss it in an issue first -->
<!--- Found a bug? Point us to the issue/or create one so we can reproduce it -->
<!--- Just add the issue number at the end: -->
see https://issues.openmrs.org/browse/FM2-61

## Checklist: I completed these to help reviewers :)
<!--- Put an `x` in the box if you did the task -->
<!--- If you forgot a task please follow the instructions below -->
- [x] My pull request only contains **ONE single commit**.

  No? -> [read here](https://wiki.openmrs.org/display/docs/Pull+Request+Tips) on how to squash multiple commits into one

- [x] My IDE is configured to follow the [**code style**](https://wiki.openmrs.org/display/docs/Java+Conventions) of this project.

  No? Unsure? -> [configure your IDE](https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE), format the code and add the changes with `git add . && git commit --amend`

- [x] I have **added tests** to cover my changes. (If you refactored
  existing code that was well tested you do not have to add tests)

  No? -> write tests and add them to this commit `git add . && git commit --amend`

- [x] I ran `mvn clean package` right before creating this pull request and
  added all formatting changes to my commit.

  No? -> execute above command

- [x] All new and existing **tests passed**.

  No? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.

- [x] My pull request is **based on the latest changes** of the master branch.

  No? Unsure? -> execute command `git pull --rebase upstream master`
",True,82,https://api.github.com/repos/openmrs/openmrs-module-fhir2/pulls/82,https://github.com/openmrs/openmrs-module-fhir2/pull/82,closed,214,1,6,1,5,18,0,0,[],2020-02-21 14:21:09+00:00,2020-02-24 17:04:03+00:00,268974.0,"3 days, 2:42:54","[{'comment_id': 382611442, 'comment_body': 'This class should have the annotations `@Component` and `@Setter(AccessLevel.PACKAGE)`. The first of those annotations registers this with Spring so it can be `@Inject`ed where appropriate. [A little more on that here](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html). The second tells [Lombok](https://projectlombok.org/features/GetterSetter) to generate a setter.', 'comment_created': datetime.datetime(2020, 2, 21, 14, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 382611854, 'comment_body': ""I think it's preferable for these constants to go in the `FhirConstants` class."", 'comment_created': datetime.datetime(2020, 2, 21, 14, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 382612273, 'comment_body': 'Move this line to above 41', 'comment_created': datetime.datetime(2020, 2, 21, 14, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 382612433, 'comment_body': 'Remove this blank line', 'comment_created': datetime.datetime(2020, 2, 21, 14, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 382612645, 'comment_body': 'Add a blank line before this one', 'comment_created': datetime.datetime(2020, 2, 21, 14, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 382612772, 'comment_body': 'Add a blank line before this', 'comment_created': datetime.datetime(2020, 2, 21, 14, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 382612834, 'comment_body': 'Add a blank line before this', 'comment_created': datetime.datetime(2020, 2, 21, 14, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 382612902, 'comment_body': 'Add a blank line before this', 'comment_created': datetime.datetime(2020, 2, 21, 14, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 382613238, 'comment_body': 'Remove this blank line', 'comment_created': datetime.datetime(2020, 2, 21, 14, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 382613974, 'comment_body': ""We'll need to add a test to this class as well to ensure that it's invoking the `referenceRangeTranslator`. I think this can be modeled on the test for `ObservationInterpretationTranslator`"", 'comment_created': datetime.datetime(2020, 2, 21, 14, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 382619954, 'comment_body': '```java\r\nassertThat(result,\r\n\t        hasItem(allOf(hasProperty(""low"", hasProperty(""value"", equalTo(BigDecimal.valueOf(LOW_NORMAL_VALUE)))),\r\n\t            hasProperty(""type"", hasProperty(""coding"", hasItem(allOf(hasProperty(""system"", equalTo(""http://terminology.hl7.org/CodeSystem/referencerange-meaning"")),\r\n\t                hasProperty(""code"", equalTo(""normal"")))))))));\r\n```\r\n\r\nI forgot that `type` has a `coding` property, which is the list of codes themselves which have the `system` and `code` properties.', 'comment_created': datetime.datetime(2020, 2, 21, 14, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 382631175, 'comment_body': '@ibacher I have written this test please suggest edits\r\n```java\r\n@Test\r\n\tpublic void toFhirResource_shouldInvokereferenceRangeTranslator() {\r\n\t\tConceptNumeric conceptNumeric = new ConceptNumeric();\r\n\t\tconceptNumeric.setUuid(CONCEPT_UUID);\r\n\t\t\r\n\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = referenceRangeTranslator\r\n\t\t        .toFhirResource(conceptNumeric);\r\n\t\t\r\n\t\tassertThat(observationReferenceRangeComponentList, notNullValue());\r\n\t}\r\n```\r\n', 'comment_created': datetime.datetime(2020, 2, 21, 15, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 382685350, 'comment_body': 'So what else should we expect about this list, other than its not just a null value? Should it have any `Observation.ObservationReferenceRangeComponent`s or should it be empty?', 'comment_created': datetime.datetime(2020, 2, 21, 16, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 382686166, 'comment_body': ""Also, feel free to keep pushing changes to this branch. You only need to squash everything down to one commit before it's merged."", 'comment_created': datetime.datetime(2020, 2, 21, 16, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 382693178, 'comment_body': '@ibacher Yes it should have items in it, so maybe something similar to what we did in `ObservationReferenceRangeTranslatorImplTest`\r\n\r\n``` java\r\nassertThat(result, notNullValue());\r\n\t\tassertThat(result, hasItem(hasProperty(""low"", hasProperty(""value"", equalTo(BigDecimal.valueOf(LOW_NORMAL_VALUE))))));\r\n\t\tassertThat(result,\r\n\t\t    hasItem(hasProperty(""high"", hasProperty(""value"", equalTo(BigDecimal.valueOf(HIGH_NORMAL_VALUE))))));\r\n\t\t\r\n\t\tassertThat(result,\r\n\t\t    hasItem(allOf(hasProperty(""low"", hasProperty(""value"", equalTo(BigDecimal.valueOf(LOW_NORMAL_VALUE)))),\r\n\t\t        hasProperty(""type"",\r\n\t\t            hasProperty(""coding"",\r\n\t\t                hasItem(allOf(\r\n\t\t                    hasProperty(""system"", equalTo(""http://terminology.hl7.org/CodeSystem/referencerange-meaning"")),\r\n\t\t                    hasProperty(""code"", equalTo(""normal"")))))))));\r\n```', 'comment_created': datetime.datetime(2020, 2, 21, 16, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 382698866, 'comment_body': ""You've got a lot of repeated code here. It might be better to break this out into a method like this:\r\n\r\n```java\r\nprivate Observation.ObservationReferenceRangeComponent createObservationReferenceRange(double hiValue, double lowValue, String code) {\r\n    Observation.ObservationReferenceRangeComponent component = new Observation.ObservationReferenceRangeComponent()\r\n        .setHigh(new Quantity().setValue(hiValue))\r\n        .setLow(new Quantity().setValue(lowValue));\r\n\r\n    CodeableConcept referenceRangeType = new CodeableConcept();\r\n    concept.addCoding().setCode(code).setSystem(FhirConstants.OBSERVATION_REFERENCE_RANGE_URI);\r\n    component.setType(codeableConcept);\r\n    \r\n    return component;\r\n}\r\n```\r\n\r\nYou can then call it like this:\r\n\r\n```java\r\nobservationReferenceRangeComponentList.add(createObservationReferenceRange(conceptNumeric.getHiNormal(), conceptNumeric.getLowNormal(), FhirConstants.OBSERVATION_REFERENCE_NORMAL));\r\n```"", 'comment_created': datetime.datetime(2020, 2, 21, 17, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 382916068, 'comment_body': 'Can we swap this out for the other testing style we talked about? I think that’s more maintainable. Also, the checks here make the assertions above redundant (they verify the same thing), so I’d remove the above assertions.', 'comment_created': datetime.datetime(2020, 2, 22, 14, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 382916131, 'comment_body': 'Please remove this blank line', 'comment_created': datetime.datetime(2020, 2, 22, 14, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}]","[{'commit_sha': '96dfb5305605cbb5ba56453ba968f8e0e28c0dd3', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}]",Siddharth Vaish,36266597,sidvaish97@gmail.com,User,,34,,9,39
379777575,FM2-89 Fix tests for Observation,"<!--- Add a pull request title above in this format -->
<!--- real example: 'FM2-8 Implement the Person Resource' -->
<!--- 'FM2-JiraIssueNumber JiraIssueTitle' -->
## Description of what I changed
<!--- Describe your changes in detail -->
<!--- It can simply be your commit message, which you must have -->

Fixed tests for Observation

## Issue I worked on
<!--- This project only accepts pull requests related to open issues -->
<!--- Want a new feature or change? Discuss it in an issue first -->
<!--- Found a bug? Point us to the issue/or create one so we can reproduce it -->
<!--- Just add the issue number at the end: -->
see https://issues.openmrs.org/browse/FM2-89

## Checklist: I completed these to help reviewers :)
<!--- Put an `x` in the box if you did the task -->
<!--- If you forgot a task please follow the instructions below -->
- [x] My pull request only contains **ONE single commit**.

  No? -> [read here](https://wiki.openmrs.org/display/docs/Pull+Request+Tips) on how to squash multiple commits into one

- [x] My IDE is configured to follow the [**code style**](https://wiki.openmrs.org/display/docs/Java+Conventions) of this project.

  No? Unsure? -> [configure your IDE](https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE), format the code and add the changes with `git add . && git commit --amend`

- [x] I have **added tests** to cover my changes. (If you refactored
  existing code that was well tested you do not have to add tests)

  No? -> write tests and add them to this commit `git add . && git commit --amend`

- [x] I ran `mvn clean package` right before creating this pull request and
  added all formatting changes to my commit.

  No? -> execute above command

- [x] All new and existing **tests passed**.

  No? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.

- [x] My pull request is **based on the latest changes** of the master branch.

  No? Unsure? -> execute command `git pull --rebase upstream master`
",True,89,https://api.github.com/repos/openmrs/openmrs-module-fhir2/pulls/89,https://github.com/openmrs/openmrs-module-fhir2/pull/89,closed,8,8,2,1,1,0,0,0,[],2020-02-25 20:12:05+00:00,2020-02-25 20:27:36+00:00,931.0,0:15:31,[],"[{'commit_sha': '37b4c86b77fd340c01d39bc303cf88aef9cf7ac4', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}]",Siddharth Vaish,36266597,sidvaish97@gmail.com,User,,34,,9,39
378696777,FM2-79 Improve Search for Encounter,"<!--- Add a pull request title above in this format -->
<!--- real example: 'FM2-8 Implement the Person Resource' -->
<!--- 'FM2-JiraIssueNumber JiraIssueTitle' -->
## Description of what I changed
<!--- Describe your changes in detail -->
<!--- It can simply be your commit message, which you must have -->
FM2-79 Improved Search for Encounter

## Issue I worked on
<!--- This project only accepts pull requests related to open issues -->
<!--- Want a new feature or change? Discuss it in an issue first -->
<!--- Found a bug? Point us to the issue/or create one so we can reproduce it -->
<!--- Just add the issue number at the end: -->
see https://issues.openmrs.org/browse/FM2-79

## Checklist: I completed these to help reviewers :)
<!--- Put an `x` in the box if you did the task -->
<!--- If you forgot a task please follow the instructions below -->
- [x] My pull request only contains **ONE single commit**.

  No? -> [read here](https://wiki.openmrs.org/display/docs/Pull+Request+Tips) on how to squash multiple commits into one

- [x] My IDE is configured to follow the [**code style**](https://wiki.openmrs.org/display/docs/Java+Conventions) of this project.

  No? Unsure? -> [configure your IDE](https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE), format the code and add the changes with `git add . && git commit --amend`

- [ ] I have **added tests** to cover my changes. (If you refactored
  existing code that was well tested you do not have to add tests)

  No? -> write tests and add them to this commit `git add . && git commit --amend`

- [x] I ran `mvn clean package` right before creating this pull request and
  added all formatting changes to my commit.

  No? -> execute above command

- [ ] All new and existing **tests passed**.

  No? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.

- [x] My pull request is **based on the latest changes** of the master branch.

  No? Unsure? -> execute command `git pull --rebase upstream master`
",True,86,https://api.github.com/repos/openmrs/openmrs-module-fhir2/pulls/86,https://github.com/openmrs/openmrs-module-fhir2/pull/86,closed,696,105,13,5,3,53,0,0,[],2020-02-23 11:48:14+00:00,2020-02-26 19:13:51+00:00,285937.0,"3 days, 7:25:37","[{'comment_id': 383180697, 'comment_body': ""I noticed that a similar handlers are used for `PatientDaoImpl` and will be used for `PersonDaoImpl` as well, shouldn't we refactor this to be present in the `BaseDaoImpl`?"", 'comment_created': datetime.datetime(2020, 2, 24, 10, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'CaptainDaVinci', 'type': 'User'}, {'comment_id': 383252208, 'comment_body': 'Yes, we should', 'comment_created': datetime.datetime(2020, 2, 24, 13, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383498851, 'comment_body': 'You seem to have mapped `Encounter.SP_SUBJECT` twice. Are you sure this is right?', 'comment_created': datetime.datetime(2020, 2, 24, 20, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383499579, 'comment_body': 'Should we be using `Patient.SP_IDENTIFIER` here?', 'comment_created': datetime.datetime(2020, 2, 24, 20, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383500098, 'comment_body': 'How does this differ from the `handlePatientReference()` function that already exists?', 'comment_created': datetime.datetime(2020, 2, 24, 20, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383509091, 'comment_body': '@ibacher I guess we should use Practitioner', 'comment_created': datetime.datetime(2020, 2, 24, 20, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 383509532, 'comment_body': 'Yes, exactly!', 'comment_created': datetime.datetime(2020, 2, 24, 20, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383510449, 'comment_body': '@ibacher `handlePatientReference()` has `person` as alias but this has `patient` as alias if I try to use `handlePatientReference()` then an erreo like cannot resolve propery person pops (after writing tests)', 'comment_created': datetime.datetime(2020, 2, 24, 20, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 383513742, 'comment_body': ""Absolutely right. I've fixed this in the latest master."", 'comment_created': datetime.datetime(2020, 2, 24, 21, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383874500, 'comment_body': '@VaishSiddharth Can you rebase onto the latest version of master and use the `handlePatientReference()` method instead? Thanks 😄 ', 'comment_created': datetime.datetime(2020, 2, 25, 13, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383875447, 'comment_body': 'We should still be able to search by patient identifier, right?', 'comment_created': datetime.datetime(2020, 2, 25, 13, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383875753, 'comment_body': 'Take a look at the data defined for this class (in the XML file)', 'comment_created': datetime.datetime(2020, 2, 25, 13, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383876278, 'comment_body': 'We should also have tests by Given and Family', 'comment_created': datetime.datetime(2020, 2, 25, 13, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383876345, 'comment_body': 'We should also have tests by Given and Family', 'comment_created': datetime.datetime(2020, 2, 25, 13, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383876579, 'comment_body': 'Could this be useful in other places?', 'comment_created': datetime.datetime(2020, 2, 25, 13, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383876669, 'comment_body': ""I think you've already done this!"", 'comment_created': datetime.datetime(2020, 2, 25, 13, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383877500, 'comment_body': 'What does this method actually test?', 'comment_created': datetime.datetime(2020, 2, 25, 13, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383877823, 'comment_body': 'Should this property still be referring to Patient?', 'comment_created': datetime.datetime(2020, 2, 25, 13, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383877999, 'comment_body': 'Will this support sub-properties of location?', 'comment_created': datetime.datetime(2020, 2, 25, 13, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383878302, 'comment_body': ""Don't forget to re-add similar tests"", 'comment_created': datetime.datetime(2020, 2, 25, 13, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383878488, 'comment_body': 'This test should *not* be removed.', 'comment_created': datetime.datetime(2020, 2, 25, 13, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 383881199, 'comment_body': '@ibacher Working in it. Will soon send another commit after resolving all these issues.', 'comment_created': datetime.datetime(2020, 2, 25, 13, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 384089712, 'comment_body': ""I appreciate the initiative, but unless these are directly necessary for the encounter stuff, don't modify these tests here. I've got [another ticket](https://issues.openmrs.org/browse/FM2-89) to deal with that."", 'comment_created': datetime.datetime(2020, 2, 25, 19, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384155789, 'comment_body': 'I know that this is wrong will revert this in the next commit', 'comment_created': datetime.datetime(2020, 2, 25, 22, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 384535428, 'comment_body': 'Can we simplify the `ilike()` construction to just `propertyLike(""l.cityVillage"", locationReference.getValue())`?', 'comment_created': datetime.datetime(2020, 2, 26, 14, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384535561, 'comment_body': 'Remove this comment', 'comment_created': datetime.datetime(2020, 2, 26, 14, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384536064, 'comment_body': 'We should still have tests making use of `WRONG_PATIENT_IDENTIFIER`', 'comment_created': datetime.datetime(2020, 2, 26, 14, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384537185, 'comment_body': 'Can we actually remove this file from the PR?', 'comment_created': datetime.datetime(2020, 2, 26, 14, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384537984, 'comment_body': ""We shouldn't need the encounter data XML file anywhere outside of the DAO tests. Everything else should be mocked."", 'comment_created': datetime.datetime(2020, 2, 26, 14, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384538455, 'comment_body': 'Can these statements be ordered in a more logical fashion? This is very confusing to read.', 'comment_created': datetime.datetime(2020, 2, 26, 14, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384539329, 'comment_body': 'Ditto on ordering', 'comment_created': datetime.datetime(2020, 2, 26, 14, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384539433, 'comment_body': 'Ditto on ordering', 'comment_created': datetime.datetime(2020, 2, 26, 14, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384539587, 'comment_body': 'Ditto on ordering', 'comment_created': datetime.datetime(2020, 2, 26, 14, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384540607, 'comment_body': 'Why is this here?', 'comment_created': datetime.datetime(2020, 2, 26, 14, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384540910, 'comment_body': 'Observations?', 'comment_created': datetime.datetime(2020, 2, 26, 14, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384541032, 'comment_body': 'Observations?', 'comment_created': datetime.datetime(2020, 2, 26, 14, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384541200, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 2, 26, 14, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384541281, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 2, 26, 14, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384543420, 'comment_body': 'This also needs some tests verifying complex behaviour. I.e., what should happen if I request\r\n`/Encounter?subject.given=Harold&location.address-postalcode=90210,90177`?', 'comment_created': datetime.datetime(2020, 2, 26, 14, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384559883, 'comment_body': ""@ibacher Not sure what to do here, we haven't included any parameter like order"", 'comment_created': datetime.datetime(2020, 2, 26, 15, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 384560697, 'comment_body': '@ibacher Got it you mean that the method name should be ordered logical', 'comment_created': datetime.datetime(2020, 2, 26, 15, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 384560815, 'comment_body': 'I mean the order that the code is written in.', 'comment_created': datetime.datetime(2020, 2, 26, 15, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384562202, 'comment_body': ""Basically, I'd like to see something like:\r\n\r\n```java\r\nReferenceParam location = new ReferenceParam();\r\nlocation.setValue(ENCOUNTER_ADDRESS_STATE);\r\nlocation.setChain(Location.SP_ADDRESS_CITY)\r\n\r\nCollection<Encounter> encounters = new ArrayList<>();\r\nencounters.add(openMrsEncounter);\r\n\r\nfhirEncounter.setId(ENCOUNTER_UUID);\r\n```\r\n\r\nSo that each part is created and populated in order."", 'comment_created': datetime.datetime(2020, 2, 26, 15, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384565308, 'comment_body': '@ibacher Oh sorry was a bit lazy in typing the full name so copied it from Observations and then forgot to change it to encounters.', 'comment_created': datetime.datetime(2020, 2, 26, 15, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 384566010, 'comment_body': ""@VaishSiddharth That happens and it's fine; just needs to be fixed before we can merge it 🙂 "", 'comment_created': datetime.datetime(2020, 2, 26, 15, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384576050, 'comment_body': '@ibacher What should happen in this case? \r\n\r\n```java\r\n@Test\r\n\tpublic void shouldGetEncountersBySubjectGivenNameAndLocationPostalCode() throws Exception {\r\n\t\tverifyUri(""/Encounter?subject.given=Harold&?location.address-postalcode=90210,90177"");\r\n\r\n\t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), subjectCaptor.capture());\r\n\t\tassertThat(subjectCaptor.getValue(), notNullValue());\r\n\t\tassertThat(locationCaptor.getValue(), notNullValue());\r\n\t\tassertThat(subjectCaptor.getValue().getChain(), equalTo(""given""));\r\n\t\tassertThat(subjectCaptor.getValue().getValue(), equalTo(PATIENT_GIVEN_NAME));\r\n\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(""address-postalcode""));\r\n\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_POSTALCODE));\r\n\t}\r\n```\r\n\r\nThe error failed with error message\r\n```\r\n\r\njava.lang.AssertionError: \r\nExpected: response with HTTP status indicating request was handled successfully\r\n     but: response with status code <400> with message ""Invalid request: The FHIR endpoint on this server does not know how to handle GET operation[Encounter] with parameters [[?location.address-postalcode, subject.given]]""\r\n```\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 2, 26, 15, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 384577304, 'comment_body': '@ibacher Its working if I use only one parameter in location\r\n\r\nlike this \r\n\r\n`/Encounter?subject.given=Hannibal&location.address-postalcode=248001`', 'comment_created': datetime.datetime(2020, 2, 26, 15, 42, 34, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 384679982, 'comment_body': ""Oh yeah, fair enough, we'd have to change it to a `ReferenceOrListParam`, which probably isn't worth it for this PR."", 'comment_created': datetime.datetime(2020, 2, 26, 18, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384681559, 'comment_body': '@ibacher I think I have fixed everything else. So is it ready for getting merged ?', 'comment_created': datetime.datetime(2020, 2, 26, 18, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 384681574, 'comment_body': 'This seems to be searching by subject rather than participant', 'comment_created': datetime.datetime(2020, 2, 26, 18, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384682105, 'comment_body': 'The constant we use here should be `PARTICIPANT_IDENTIFIER` even if it has the same value as `PATIENT_IDENTIFIER`.', 'comment_created': datetime.datetime(2020, 2, 26, 18, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384682425, 'comment_body': 'This constant should be `PRACTITIONER_FULL_NAME` even if it has the same value as `PATIENT_FULL_NAME`', 'comment_created': datetime.datetime(2020, 2, 26, 18, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 384683867, 'comment_body': 'Also remember that the `chain` property needs to be set *after* the value.', 'comment_created': datetime.datetime(2020, 2, 26, 18, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}]","[{'commit_sha': '59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abfdde871aa48708a002414bac97c705dac8df9c', 'committer_username': 'ibacher', 'committer_name': 'Ian', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 3, 16, 23, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e7618c7ea7dc002a5338ac49792b88f95b60c29', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5afb7189963f1536dcd3742eac504eb5d2d521bb', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee11aeee393035fc7a351c44a075cc23ae6fa84b', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}]",Siddharth Vaish,36266597,sidvaish97@gmail.com,User,,34,,9,39
382087236,FM2-88 Enhance Observation Search,"<!--- Add a pull request title above in this format -->
<!--- real example: 'FM2-8 Implement the Person Resource' -->
<!--- 'FM2-JiraIssueNumber JiraIssueTitle' -->
## Description of what I changed
<!--- Describe your changes in detail -->
<!--- It can simply be your commit message, which you must have -->

FM2-88 Enhanced Observation Search

## Issue I worked on
<!--- This project only accepts pull requests related to open issues -->
<!--- Want a new feature or change? Discuss it in an issue first -->
<!--- Found a bug? Point us to the issue/or create one so we can reproduce it -->
<!--- Just add the issue number at the end: -->
see https://issues.openmrs.org/browse/FM2-88

## Checklist: I completed these to help reviewers :)
<!--- Put an `x` in the box if you did the task -->
<!--- If you forgot a task please follow the instructions below -->
- [ ] My pull request only contains **ONE single commit**.

  No? -> [read here](https://wiki.openmrs.org/display/docs/Pull+Request+Tips) on how to squash multiple commits into one

- [x] My IDE is configured to follow the [**code style**](https://wiki.openmrs.org/display/docs/Java+Conventions) of this project.

  No? Unsure? -> [configure your IDE](https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE), format the code and add the changes with `git add . && git commit --amend`

- [x] I have **added tests** to cover my changes. (If you refactored
  existing code that was well tested you do not have to add tests)

  No? -> write tests and add them to this commit `git add . && git commit --amend`

- [x] I ran `mvn clean package` right before creating this pull request and
  added all formatting changes to my commit.

  No? -> execute above command

- [x] All new and existing **tests passed**.

  No? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.

- [x] My pull request is **based on the latest changes** of the master branch.

  No? Unsure? -> execute command `git pull --rebase upstream master`
",True,99,https://api.github.com/repos/openmrs/openmrs-module-fhir2/pulls/99,https://github.com/openmrs/openmrs-module-fhir2/pull/99,closed,799,219,29,4,21,76,0,0,[],2020-03-01 20:00:08+00:00,2020-03-25 17:52:11+00:00,2065923.0,"23 days, 21:52:03","[{'comment_id': 387270242, 'comment_body': '@ibacher I have a few questions here\r\n1. What should be the data type of hasMemberReference I think that `TokenOrListParam` should be the datatype as we do have a function in `BaseDaoImpl` to handleBoolean.\r\n2. I am a bit confused that how should we handle the `value` parameters, should we have only a single ReferenceParam and include all of these value-concept value-date value-quantity value-string, and then make a function to handle all the value related search queries.', 'comment_created': datetime.datetime(2020, 3, 3, 20, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 387286125, 'comment_body': '@VaishSiddharth\r\n\r\n1. So the `hasMember` property of [FHIR Observations](https://www.hl7.org/fhir/observation-definitions.html#Observation.hasMember) is not a boolean value. It stores a reference to an observation that is part of this observation group. So this *should* be a `ReferenceParam` and treated similarly to how we treat `Subject`, etc.\r\n\r\n2. The [FHIR spec](https://www.hl7.org/fhir/observation.html#search) actually wants separate parameters for each value type, so `value-concept` should map to a `TokenAndListParam`, `value-date` to a `DateRangeParam`, `value-quantity` to a `QuantityAndListParam` and `value-string` to a `StringAndListParam`.', 'comment_created': datetime.datetime(2020, 3, 3, 20, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 387700395, 'comment_body': ""I'd actually prefer it if `SP_CODE` came after the `SP_SUBJECT` and before all these other search functions."", 'comment_created': datetime.datetime(2020, 3, 4, 14, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 387936114, 'comment_body': '@ibacher Please have a look at the handlers. I am still left with the `has-member.code` parameter. Not very sure about how to convert value to codeable concept. I guess something like this \r\n\r\n```java\r\nhandleAndListParamBySystem(valueConcept, (system, tokens) -> {\r\nCodeableConcept codeableConcept=new CodeableConcept();\r\n\t\tcodeableConcept.addCoding().setCode(Not sure what will come here).setSystem(system);\r\n});\r\n```', 'comment_created': datetime.datetime(2020, 3, 4, 21, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 387949245, 'comment_body': 'will make this change in the next commit', 'comment_created': datetime.datetime(2020, 3, 4, 21, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 389117818, 'comment_body': '@ibacher Please help me resolve this issue', 'comment_created': datetime.datetime(2020, 3, 6, 20, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 390346729, 'comment_body': 'Change `VALUE_QUANTITY` from ""134.0"" to 134.0d and change the type to double.', 'comment_created': datetime.datetime(2020, 3, 10, 14, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 390355275, 'comment_body': '@ibacher Still the same error', 'comment_created': datetime.datetime(2020, 3, 10, 14, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 390370177, 'comment_body': '@VaishSiddharth Can you put the full stack trace somewhere?', 'comment_created': datetime.datetime(2020, 3, 10, 14, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 390371034, 'comment_body': ""We shouldn't use `ilike` here, which is only for matching strings. We should use `eq`."", 'comment_created': datetime.datetime(2020, 3, 10, 14, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 390375510, 'comment_body': '``` java\r\n@Test\r\n\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\r\n\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\r\n\t\t\r\n\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\r\n\t\t\r\n\t\tQuantityParam quantityParam = new QuantityParam();\r\n\t\tquantityParam.setValue(134.0d);\r\n\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\r\n\t\t\r\n\t\t// Error java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Double (java.lang.String and java.lang.Double are in module java.base of loader \'bootstrap\')\r\n\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\r\n\t\t    null, null);\r\n\t\t\r\n\t\tassertThat(results, notNullValue());\r\n\t\tassertThat(results, not(empty()));\r\n\t\tassertThat(results, hasItem(hasProperty(""uuid"", equalTo(OBS_UUID))));\r\n\t}\r\n```\r\n```\r\n/usr/lib/jvm/jdk-13.0.1/bin/java -ea -Didea.test.cyclic.buffer.size=1048576 -javaagent:/snap/intellij-idea-community/208/lib/idea_rt.jar=45755:/snap/intellij-idea-community/208/bin -Dfile.encoding=UTF-8 -classpath /snap/intellij-idea-community/208/lib/idea_rt.jar:/snap/intellij-idea-community/208/plugins/junit/lib/junit5-rt.jar:/snap/intellij-idea-community/208/plugins/junit/lib/junit-rt.jar:/home/sid/IdeaProjects/openmrs-module-fhir2/api/target/test-classes:/home/sid/IdeaProjects/openmrs-module-fhir2/api/target/classes:/home/sid/.m2/repository/ca/uhn/hapi/fhir/hapi-fhir-base/4.2.0/hapi-fhir-base-4.2.0.jar:/home/sid/.m2/repository/com/google/code/gson/gson/2.8.5/gson-2.8.5.jar:/home/sid/.m2/repository/org/apache/commons/commons-lang3/3.9/commons-lang3-3.9.jar:/home/sid/.m2/repository/org/apache/commons/commons-text/1.7/commons-text-1.7.jar:/home/sid/.m2/repository/commons-codec/commons-codec/1.12/commons-codec-1.12.jar:/home/sid/.m2/repository/ca/uhn/hapi/fhir/hapi-fhir-structures-r4/4.2.0/hapi-fhir-structures-r4-4.2.0.jar:/home/sid/.m2/repository/ca/uhn/hapi/fhir/org.hl7.fhir.utilities/4.2.0/org.hl7.fhir.utilities-4.2.0.jar:/home/sid/.m2/repository/ca/uhn/hapi/fhir/org.hl7.fhir.r4/4.2.0/org.hl7.fhir.r4-4.2.0.jar:/home/sid/.m2/repository/org/fhir/ucum/1.0.2/ucum-1.0.2.jar:/home/sid/.m2/repository/xpp3/xpp3/1.1.4c/xpp3-1.1.4c.jar:/home/sid/.m2/repository/xpp3/xpp3_xpath/1.1.4c/xpp3_xpath-1.1.4c.jar:/home/sid/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/home/sid/.m2/repository/org/projectlombok/lombok/1.18.10/lombok-1.18.10.jar:/home/sid/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar:/home/sid/.m2/repository/com/google/guava/guava/28.1-jre/guava-28.1-jre.jar:/home/sid/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/home/sid/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/sid/.m2/repository/org/checkerframework/checker-qual/2.8.1/checker-qual-2.8.1.jar:/home/sid/.m2/repository/com/google/errorprone/error_prone_annotations/2.3.2/error_prone_annotations-2.3.2.jar:/home/sid/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar:/home/sid/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.18/animal-sniffer-annotations-1.18.jar:/home/sid/.m2/repository/org/exparity/hamcrest-date/2.0.7/hamcrest-date-2.0.7.jar:/home/sid/.m2/repository/org/openmrs/api/openmrs-api/2.0.5/openmrs-api-2.0.5.jar:/home/sid/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/home/sid/.m2/repository/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.jar:/home/sid/.m2/repository/commons-io/commons-io/1.4/commons-io-1.4.jar:/home/sid/.m2/repository/org/azeckoski/reflectutils/0.9.14/reflectutils-0.9.14.jar:/home/sid/.m2/repository/org/apache/velocity/velocity/1.6.2/velocity-1.6.2.jar:/home/sid/.m2/repository/commons-lang/commons-lang/2.4/commons-lang-2.4.jar:/home/sid/.m2/repository/log4j/log4j/1.2.15/log4j-1.2.15.jar:/home/sid/.m2/repository/org/springframework/spring-core/4.1.4.RELEASE/spring-core-4.1.4.RELEASE.jar:/home/sid/.m2/repository/org/springframework/spring-beans/4.1.4.RELEASE/spring-beans-4.1.4.RELEASE.jar:/home/sid/.m2/repository/org/springframework/spring-context/4.1.4.RELEASE/spring-context-4.1.4.RELEASE.jar:/home/sid/.m2/repository/org/springframework/spring-expression/4.1.4.RELEASE/spring-expression-4.1.4.RELEASE.jar:/home/sid/.m2/repository/org/springframework/spring-aop/4.1.4.RELEASE/spring-aop-4.1.4.RELEASE.jar:/home/sid/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/sid/.m2/repository/org/springframework/spring-orm/4.1.4.RELEASE/spring-orm-4.1.4.RELEASE.jar:/home/sid/.m2/repository/org/springframework/spring-tx/4.1.4.RELEASE/spring-tx-4.1.4.RELEASE.jar:/home/sid/.m2/repository/org/springframework/spring-jdbc/4.1.4.RELEASE/spring-jdbc-4.1.4.RELEASE.jar:/home/sid/.m2/repository/asm/asm-commons/2.2.3/asm-commons-2.2.3.jar:/home/sid/.m2/repository/asm/asm-tree/2.2.3/asm-tree-2.2.3.jar:/home/sid/.m2/repository/asm/asm/2.2.3/asm-2.2.3.jar:/home/sid/.m2/repository/asm/asm-util/2.2.3/asm-util-2.2.3.jar:/home/sid/.m2/repository/cglib/cglib-nodep/2.2/cglib-nodep-2.2.jar:/home/sid/.m2/repository/ca/uhn/hapi/hapi-base/2.0/hapi-base-2.0.jar:/home/sid/.m2/repository/commons-cli/commons-cli/1.2/commons-cli-1.2.jar:/home/sid/.m2/repository/org/jdom/jdom/1.1/jdom-1.1.jar:/home/sid/.m2/repository/xalan/xalan/2.7.0/xalan-2.7.0.jar:/home/sid/.m2/repository/ca/uhn/hapi/hapi-structures-v25/2.0/hapi-structures-v25-2.0.jar:/home/sid/.m2/repository/ca/uhn/hapi/hapi-structures-v26/2.0/hapi-structures-v26-2.0.jar:/home/sid/.m2/repository/org/javassist/javassist/3.19.0-GA/javassist-3.19.0-GA.jar:/home/sid/.m2/repository/org/hibernate/hibernate-core/4.3.9.Final/hibernate-core-4.3.9.Final.jar:/home/sid/.m2/repository/org/jboss/logging/jboss-logging/3.1.3.GA/jboss-logging-3.1.3.GA.jar:/home/sid/.m2/repository/org/jboss/logging/jboss-logging-annotations/1.2.0.Beta1/jboss-logging-annotations-1.2.0.Beta1.jar:/home/sid/.m2/repository/org/jboss/spec/javax/transaction/jboss-transaction-api_1.2_spec/1.0.0.Final/jboss-transaction-api_1.2_spec-1.0.0.Final.jar:/home/sid/.m2/repository/org/hibernate/common/hibernate-commons-annotations/4.0.5.Final/hibernate-commons-annotations-4.0.5.Final.jar:/home/sid/.m2/repository/org/hibernate/javax/persistence/hibernate-jpa-2.1-api/1.0.0.Final/hibernate-jpa-2.1-api-1.0.0.Final.jar:/home/sid/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar:/home/sid/.m2/repository/org/jboss/jandex/1.1.0.Final/jandex-1.1.0.Final.jar:/home/sid/.m2/repository/org/hibernate/hibernate-c3p0/4.3.9.Final/hibernate-c3p0-4.3.9.Final.jar:/home/sid/.m2/repository/com/mchange/c3p0/0.9.2.1/c3p0-0.9.2.1.jar:/home/sid/.m2/repository/com/mchange/mchange-commons-java/0.2.3.4/mchange-commons-java-0.2.3.4.jar:/home/sid/.m2/repository/org/hibernate/hibernate-ehcache/4.3.9.Final/hibernate-ehcache-4.3.9.Final.jar:/home/sid/.m2/repository/org/hibernate/hibernate-search-orm/5.1.2.Final/hibernate-search-orm-5.1.2.Final.jar:/home/sid/.m2/repository/org/hibernate/hibernate-search-engine/5.1.2.Final/hibernate-search-engine-5.1.2.Final.jar:/home/sid/.m2/repository/org/apache/lucene/lucene-analyzers-common/4.10.4/lucene-analyzers-common-4.10.4.jar:/home/sid/.m2/repository/org/apache/lucene/lucene-facet/4.10.4/lucene-facet-4.10.4.jar:/home/sid/.m2/repository/org/apache/lucene/lucene-queryparser/4.10.4/lucene-queryparser-4.10.4.jar:/home/sid/.m2/repository/org/apache/lucene/lucene-core/4.10.4/lucene-core-4.10.4.jar:/home/sid/.m2/repository/org/apache/lucene/lucene-sandbox/4.10.4/lucene-sandbox-4.10.4.jar:/home/sid/.m2/repository/org/apache/lucene/lucene-queries/4.10.4/lucene-queries-4.10.4.jar:/home/sid/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar:/home/sid/.m2/repository/org/slf4j/slf4j-api/1.6.0/slf4j-api-1.6.0.jar:/home/sid/.m2/repository/org/slf4j/jcl-over-slf4j/1.6.0/jcl-over-slf4j-1.6.0.jar:/home/sid/.m2/repository/org/slf4j/slf4j-log4j12/1.6.0/slf4j-log4j12-1.6.0.jar:/home/sid/.m2/repository/com/thoughtworks/xstream/xstream/1.4.3/xstream-1.4.3.jar:/home/sid/.m2/repository/xmlpull/xmlpull/1.1.3.1/xmlpull-1.1.3.1.jar:/home/sid/.m2/repository/xpp3/xpp3_min/1.1.4c/xpp3_min-1.1.4c.jar:/home/sid/.m2/repository/javax/mail/mail/1.4.1/mail-1.4.1.jar:/home/sid/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar:/home/sid/.m2/repository/org/liquibase/liquibase-core/2.0.5/liquibase-core-2.0.5.jar:/home/sid/.m2/repository/org/openmrs/liquibase/ext/modify-column/2.0.2/modify-column-2.0.2.jar:/home/sid/.m2/repository/org/openmrs/liquibase/ext/identity-insert/1.2.1/identity-insert-1.2.1.jar:/home/sid/.m2/repository/org/openmrs/liquibase/ext/type-converter/1.0.1/type-converter-1.0.1.jar:/home/sid/.m2/repository/xerces/xercesImpl/2.8.0/xercesImpl-2.8.0.jar:/home/sid/.m2/repository/javax/validation/validation-api/1.0.0.GA/validation-api-1.0.0.GA.jar:/home/sid/.m2/repository/org/hibernate/hibernate-validator/4.2.0.Final/hibernate-validator-4.2.0.Final.jar:/home/sid/.m2/repository/org/codehaus/jackson/jackson-core-asl/1.9.13/jackson-core-asl-1.9.13.jar:/home/sid/.m2/repository/org/codehaus/jackson/jackson-mapper-asl/1.9.13/jackson-mapper-asl-1.9.13.jar:/home/sid/.m2/repository/org/codehaus/groovy/groovy-all/2.4.6/groovy-all-2.4.6.jar:/home/sid/.m2/repository/net/sf/ehcache/ehcache/2.10.0/ehcache-2.10.0.jar:/home/sid/.m2/repository/org/openmrs/api/openmrs-api/2.0.5/openmrs-api-2.0.5-tests.jar:/home/sid/.m2/repository/org/springframework/spring-test/4.1.4.RELEASE/spring-test-4.1.4.RELEASE.jar:/home/sid/.m2/repository/com/h2database/h2/1.4.187/h2-1.4.187.jar:/home/sid/.m2/repository/org/databene/databene-benerator/0.5.9/databene-benerator-0.5.9.jar:/home/sid/.m2/repository/org/databene/databene-webdecs/0.4.9/databene-webdecs-0.4.9.jar:/home/sid/.m2/repository/org/apache/poi/poi/3.5-beta5/poi-3.5-beta5.jar:/home/sid/.m2/repository/org/freemarker/freemarker/2.3.9/freemarker-2.3.9.jar:/home/sid/.m2/repository/org/databene/databene-commons/0.4.9/databene-commons-0.4.9.jar:/home/sid/.m2/repository/org/databene/databene-gui/0.1.9/databene-gui-0.1.9.jar:/home/sid/.m2/repository/net/sourceforge/jtds/jtds/1.2.2/jtds-1.2.2.jar:/home/sid/.m2/repository/mysql/mysql-connector-java/5.1.6/mysql-connector-java-5.1.6.jar:/home/sid/.m2/repository/org/apache/derby/derbyclient/10.4.2.0/derbyclient-10.4.2.0.jar:/home/sid/.m2/repository/postgresql/postgresql/8.3-603.jdbc4/postgresql-8.3-603.jdbc4.jar:/home/sid/.m2/repository/org/dbunit/dbunit/2.4.7/dbunit-2.4.7.jar:/home/sid/.m2/repository/xmlunit/xmlunit/1.3/xmlunit-1.3.jar:/home/sid/.m2/repository/com/carrotsearch/junit-benchmarks/0.7.0/junit-benchmarks-0.7.0.jar:/home/sid/.m2/repository/junit/junit/4.13/junit-4.13.jar:/home/sid/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:/home/sid/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/home/sid/.m2/repository/org/hamcrest/hamcrest-library/2.2/hamcrest-library-2.2.jar:/home/sid/.m2/repository/org/mockito/mockito-core/3.2.4/mockito-core-3.2.4.jar:/home/sid/.m2/repository/net/bytebuddy/byte-buddy/1.10.5/byte-buddy-1.10.5.jar:/home/sid/.m2/repository/net/bytebuddy/byte-buddy-agent/1.10.5/byte-buddy-agent-1.10.5.jar:/home/sid/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/sid/.m2/repository/org/powermock/powermock-module-junit4/2.0.4/powermock-module-junit4-2.0.4.jar:/home/sid/.m2/repository/org/powermock/powermock-module-junit4-common/2.0.4/powermock-module-junit4-common-2.0.4.jar:/home/sid/.m2/repository/org/powermock/powermock-reflect/2.0.4/powermock-reflect-2.0.4.jar:/home/sid/.m2/repository/org/powermock/powermock-core/2.0.4/powermock-core-2.0.4.jar:/home/sid/.m2/repository/org/powermock/powermock-api-mockito2/2.0.4/powermock-api-mockito2-2.0.4.jar:/home/sid/.m2/repository/org/powermock/powermock-api-support/2.0.4/powermock-api-support-2.0.4.jar com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit4 org.openmrs.module.fhir2.api.dao.impl.FhirObservationDaoImplTest,searchForObs_shouldSearchForObsByValueQuantity\r\nWARNING: An illegal reflective access operation has occurred\r\nWARNING: Illegal reflective access by org.springframework.cglib.core.ReflectUtils$2 (file:/home/sid/.m2/repository/org/springframework/spring-core/4.1.4.RELEASE/spring-core-4.1.4.RELEASE.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)\r\nWARNING: Please consider reporting this to the maintainers of org.springframework.cglib.core.ReflectUtils$2\r\nWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations\r\nWARNING: All illegal access operations will be denied in a future release\r\n\r\njava.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Double (java.lang.String and java.lang.Double are in module java.base of loader \'bootstrap\')\r\n\r\n\tat org.hibernate.type.descriptor.java.DoubleTypeDescriptor.unwrap(DoubleTypeDescriptor.java:36)\r\n\tat org.hibernate.type.descriptor.sql.DoubleTypeDescriptor$1.doBind(DoubleTypeDescriptor.java:63)\r\n\tat org.hibernate.type.descriptor.sql.BasicBinder.bind(BasicBinder.java:90)\r\n\tat org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:286)\r\n\tat org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:281)\r\n\tat org.hibernate.loader.Loader.bindPositionalParameters(Loader.java:1995)\r\n\tat org.hibernate.loader.Loader.bindParameterValues(Loader.java:1966)\r\n\tat org.hibernate.loader.Loader.prepareQueryStatement(Loader.java:1901)\r\n\tat org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1862)\r\n\tat org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1839)\r\n\tat org.hibernate.loader.Loader.doQuery(Loader.java:910)\r\n\tat org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:355)\r\n\tat org.hibernate.loader.Loader.doList(Loader.java:2554)\r\n\tat org.hibernate.loader.Loader.doList(Loader.java:2540)\r\n\tat org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2370)\r\n\tat org.hibernate.loader.Loader.list(Loader.java:2365)\r\n\tat org.hibernate.loader.criteria.CriteriaLoader.list(CriteriaLoader.java:126)\r\n\tat org.hibernate.internal.SessionImpl.list(SessionImpl.java:1718)\r\n\tat org.hibernate.internal.CriteriaImpl.list(CriteriaImpl.java:380)\r\n\tat org.openmrs.module.fhir2.api.dao.impl.FhirObservationDaoImpl.searchForObservations(FhirObservationDaoImpl.java:77)\r\n\tat org.openmrs.module.fhir2.api.dao.impl.FhirObservationDaoImplTest.searchForObs_shouldSearchForObsByValueQuantity(FhirObservationDaoImplTest.java:467)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:567)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:73)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:82)\r\n\tat org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:73)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\r\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:217)\r\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:83)\r\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\r\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\r\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:68)\r\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\r\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:163)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\r\n\r\n\r\nProcess finished with exit code 255\r\n\r\n```', 'comment_created': datetime.datetime(2020, 3, 10, 14, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 390383898, 'comment_body': '@ibacher Found the solution for this. Thanks for the help', 'comment_created': datetime.datetime(2020, 3, 10, 15, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 390385051, 'comment_body': '@ibacher Ok I will change this. Is everything else fine, should I complete the code & tests and update the PR?', 'comment_created': datetime.datetime(2020, 3, 10, 15, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 390385993, 'comment_body': ""I haven't really gone through everything else here, but please do keep this up to date"", 'comment_created': datetime.datetime(2020, 3, 10, 15, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 390447956, 'comment_body': '@ibacher Please have a look', 'comment_created': datetime.datetime(2020, 3, 10, 16, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 390497532, 'comment_body': ""I actually don't think that you need to turn the `has-member.code` parameter into a codeable concept. Just refactor out the relevant part of the `handleCodedConcept` method from `FhirObservationDaoImpl` into `BaseDaoImpl` and call that. "", 'comment_created': datetime.datetime(2020, 3, 10, 17, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 390502759, 'comment_body': '@ibacher I think that we\'ll have to handle it by doing something like this\r\n\r\n```java\r\nprotected void handleHasMemberReference(Criteria criteria, ReferenceParam hasMemberReference) {\r\n\t\tif (hasMemberReference != null) {\r\n\t\t\tcriteria.createAlias(""obsGroup"", ""og"");\r\n\r\n\t\t\tif (hasMemberReference.getChain() != null) {\r\n\t\t\t\tswitch (hasMemberReference.getChain()) {\r\n\t\t\t\t\tcase Observation.SP_CODE:\r\n\t\t\t\t\t\tcriteria.add(eq(""og.concept"", hasMemberReference.getValue()));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase """":\r\n\t\t\t\t\t\tcriteria.add(eq(""og.uuid"", hasMemberReference.getValue()));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n```\r\n\r\nbut I am not sure that should we use `obsGroup` or `groupMembers`', 'comment_created': datetime.datetime(2020, 3, 10, 17, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 390503096, 'comment_body': 'Rather than duplicating code all over the place, we should look for ways to create common methods, e.g. adding something like this to `BaseDaoImpl`:\r\n\r\n```\r\nprotected Optional<Criterion> findMatchingConcepts(@NotNull String conceptAlias, TokenAndListParam concepts) {\r\n    if (concepts == null) {\r\n         return Optional.empty();\r\n    }\r\n\r\n    return handleAndListParamBySystem(concepts, (system, tokens) -> {\r\n\t    if (system.isEmpty()) {\r\n\t\t\treturn Optional.of(\r\n\t\t\t    or(in(String.format(""%.conceptId"", conceptAlias), tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\r\n\t\t\t        in(String.format(""%.uuid"", conceptAlias), tokensToList(tokens))));\r\n\t\t} else {\r\n\t\t\tif (!containsAlias(criteria, ""cm"")) {\r\n\t\t\t\tcriteria.createAlias(String.format(""%.conceptMappings"", conceptAlias), ""cm"").createAlias(""cm.conceptReferenceTerm"", ""crt"");\r\n\t\t\t}\r\n\r\n\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nAnd then just changing this to:\r\n\r\n```java\r\nprivate void handleValueCodedConcept(Criteria criteria, TokenAndListParam valueConcepts) {\r\n\tif (valueConcept != null) {\r\n\t\tcriteria.createAlias(""valueCoded"", ""c"");\r\n        findMatchingConcepts(""c"", valueConcepts).ifPresent(criteria::add);\r\n    }\r\n}\r\n```\r\n\r\nDo similar things for `FhirObservationDaoImpl` and `FhirAllergyIntoleranceDaoImpl`.\r\n\r\nThis would also address my comment above about refactoring.', 'comment_created': datetime.datetime(2020, 3, 10, 17, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 390529105, 'comment_body': ""@ibacher Isn't it better to have only one parameter as `hasMember` and through that we could search by `hasMember.code` as well. Will the above code not be a good option to use?"", 'comment_created': datetime.datetime(2020, 3, 10, 18, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 390529749, 'comment_body': ""So the property you should use is `groupMembers`. And, you're right that we'll need two branches here, but the handling for `SP_CODE` will need to be a bit more complex to handle:\r\n\r\n`/ws/fhir2/Observation?has-member.code=http://loinc.org|8854-6`\r\n\r\n😄"", 'comment_created': datetime.datetime(2020, 3, 10, 18, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 390530723, 'comment_body': ""@VaishSiddharth Do you see what I'm getting at here?"", 'comment_created': datetime.datetime(2020, 3, 10, 18, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 390536566, 'comment_body': '@ibacher Yes you mean to say that the `code` part will be a bit difficult to handle, so no problem in that but can\'t we include that part in this handle function itself?\r\n\r\n``` java \r\nprotected void handleHasMemberReference(Criteria criteria, ReferenceParam hasMemberReference) {\r\n\t\tif (hasMemberReference != null) {\r\n\t\t\tcriteria.createAlias(""obsGroup"", ""og"");\r\n\r\n\t\t\tif (hasMemberReference.getChain() != null) {\r\n\t\t\t\tswitch (hasMemberReference.getChain()) {\r\n\t\t\t\t\tcase Observation.SP_CODE:\r\n\r\n//Call a function similar to handleValueCodedConcept\r\n\t\t\t\t\t\tcriteria.add(eq(""og.concept"", hasMemberReference.getValue()));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase """":\r\n\t\t\t\t\t\tcriteria.add(eq(""og.uuid"", hasMemberReference.getValue()));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n```', 'comment_created': datetime.datetime(2020, 3, 10, 18, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 390544293, 'comment_body': ""Yes, that's the idea!"", 'comment_created': datetime.datetime(2020, 3, 10, 19, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 391207215, 'comment_body': '@ibacher Please help me with this error', 'comment_created': datetime.datetime(2020, 3, 11, 19, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 391220946, 'comment_body': 'So `MEMBER_UUID` should be referring to the UUID that is the member of an obs group. An `Obs` is a member of an obs group when the `obs_group_id` column points to the id of another observation.', 'comment_created': datetime.datetime(2020, 3, 11, 19, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 391243465, 'comment_body': '@ibacher I added this and tried pointing to both the ids still the same error\r\n```xml\r\n<obs obs_id=""22"" person_id=""7"" concept_id=""5092"" encounter_id=""3"" obs_datetime=""2008-07-01 00:00:00.0"" location_id=""1"" value_numeric=""98.3"" comments="""" creator=""1"" date_created=""2008-08-18 14:09:35.0"" voided=""false"" value_coded=""[NULL]"" value_coded_name_id=""[NULL]"" value_complex=""[NULL]"" value_text=""[NULL]"" value_datetime=""[NULL]"" value_drug=""[NULL]"" uuid=""4efa62d2-6b8b-4803-a8fa-3f32ee54db4f""/>\r\n    <obs obs_id=""23"" person_id=""7"" obs_group_id=""22"" concept_id=""5242"" encounter_id=""3"" obs_datetime=""2008-07-01 00:00:00.0"" location_id=""1"" value_numeric=""14.0"" comments="""" creator=""1"" date_created=""2008-08-18 14:09:35.0"" voided=""false"" value_coded=""[NULL]"" value_coded_name_id=""[NULL]"" value_complex=""[NULL]"" value_text=""[NULL]"" value_datetime=""[NULL]"" value_drug=""[NULL]"" uuid=""744b91f8-bdbc-4950-833b-002244e9fa2b""/>\r\n```', 'comment_created': datetime.datetime(2020, 3, 11, 20, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 391249090, 'comment_body': 'When you say ""pointing to both ids"", could you spell out what you mean?', 'comment_created': datetime.datetime(2020, 3, 11, 20, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 391250798, 'comment_body': 'i tried both\r\n\r\n``` java\r\nmemberReference.setValue(""744b91f8-bdbc-4950-833b-002244e9fa2b"");\r\n\t\tmemberReference.setChain("""");\r\n```\r\nTHIS FAILED SO I TRIED THE BELOW ONE AND THAT ALSO FAILED\r\n```java\r\nmemberReference.setValue(""4efa62d2-6b8b-4803-a8fa-3f32ee54db4f"");\r\n\t\tmemberReference.setChain("""");\r\n```', 'comment_created': datetime.datetime(2020, 3, 11, 20, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 391252359, 'comment_body': 'The first one looks right to me. Could you make those changes to this branch and push it out? That way we can both be looking at the same code.', 'comment_created': datetime.datetime(2020, 3, 11, 20, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 391654865, 'comment_body': ""@ibacher Any ideas what's wrong here?"", 'comment_created': datetime.datetime(2020, 3, 12, 14, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 395373802, 'comment_body': '@ibacher Not very sure how to handle 1e2 type of numbers please have a look\r\n\r\n', 'comment_created': datetime.datetime(2020, 3, 19, 23, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 395618034, 'comment_body': 'My advice would be to write a test case using ""1e2"" and see what happens.', 'comment_created': datetime.datetime(2020, 3, 20, 12, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395618223, 'comment_body': 'Should be `and` rather than `or`', 'comment_created': datetime.datetime(2020, 3, 20, 12, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395618340, 'comment_body': 'Should be `and` rather than `or`', 'comment_created': datetime.datetime(2020, 3, 20, 12, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395618502, 'comment_body': ""Shouldn't this be `le`?"", 'comment_created': datetime.datetime(2020, 3, 20, 12, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395618829, 'comment_body': 'Should be `and`', 'comment_created': datetime.datetime(2020, 3, 20, 12, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395620122, 'comment_body': 'Of course, better than using `and` or `or` here would be to use `between`', 'comment_created': datetime.datetime(2020, 3, 20, 13, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395620171, 'comment_body': 'Of course, better than using `and` or `or` here would be to use `between`', 'comment_created': datetime.datetime(2020, 3, 20, 13, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395620226, 'comment_body': 'Of course, better than using `and` or `or` here would be to use `between`', 'comment_created': datetime.datetime(2020, 3, 20, 13, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395636805, 'comment_body': ""@ibacher So [here](https://www.hl7.org/fhir/search.html#number) I saw something like \r\n\r\n[99.995 ... 100.005) \r\n\r\nwhere ) means not included that's why I used lt and not le\r\nPlease let me know what's correct"", 'comment_created': datetime.datetime(2020, 3, 20, 13, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 395637757, 'comment_body': 'Good point', 'comment_created': datetime.datetime(2020, 3, 20, 13, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395666539, 'comment_body': '@ibacher I am not sure not to test this out. The problem that I am facing is that I can\'t get the range of a quantityParam. Please tell how should I approach this?\r\n> My advice would be to write a test case using ""1e2"" and see what happens.\r\n\r\n``` java\r\n@Test\r\n\tpublic void shouldGetObservationsByValueQuantityWithPrefix() throws Exception {\r\n\t\tverifyUri(""/Observation?value-quantity=1e2"");\r\n\t\t\r\n\t\tverify(observationService).searchForObservations(isNull(), isNull(), isNull(), isNull(), isNull(),\r\n\t\t    valueQuantityCaptor.capture(), isNull(), isNull(), isNull(), isNull());\r\n\t\t\r\n\t\tassertThat(valueQuantityCaptor.getValue(), notNullValue());\r\n\t\tassertThat(valueQuantityCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\r\n\t\tassertThat(valueQuantityCaptor.getAllValues().iterator().next().getValuesAsQueryTokens().iterator().next()\r\n\t\t        .getValuesAsQueryTokens().iterator().next().getValueAsString(),\r\n\t\t    equalTo(""100""));\r\n\t}\r\n```', 'comment_created': datetime.datetime(2020, 3, 20, 14, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 395688461, 'comment_body': 'So, for our purposes, I\'m less concerned that we map ""1e2"" to [95 ... 105) than I am that we map 1e-2 to [.005 ... .015), i.e., even if we\'re not matching the precision implied by the spec, I think we\'re ok. Properly support 1e2 would, I think, require us to go a little crazy writing a string to number parser.', 'comment_created': datetime.datetime(2020, 3, 20, 14, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395809232, 'comment_body': ""@ibacher I need a way to test these ranges then only I'll be able to code something up for 1e-2 like numbers. Please suggest a way to do so"", 'comment_created': datetime.datetime(2020, 3, 20, 18, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 395824302, 'comment_body': 'So, the quickest way to test is to search (at the DAO level) for an Obs with a quantity of ""36"". There\'s exactly one Obs in the dataset that should fall in that range (Obs 7e77d071-1f7d-4394-a316-0a458edf28c3; it represents body temperature). Then I\'d do a search a search for 39.5. That should have a single result, (Obs 1a9b5242-0ff9-4c5c-adb3-d517632ea63e). That should show that it finds values within ±10%.', 'comment_created': datetime.datetime(2020, 3, 20, 18, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395907101, 'comment_body': 'Please leave a new line at the end of the file', 'comment_created': datetime.datetime(2020, 3, 20, 21, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395907276, 'comment_body': ""@ibacher So I have added some tests which don't pass at the moment because the prefix coding is not correct for `1e2` and `1e-2` type of numbers."", 'comment_created': datetime.datetime(2020, 3, 20, 21, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 395907679, 'comment_body': ""@ibacher We'll need to correct this part"", 'comment_created': datetime.datetime(2020, 3, 20, 21, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 395907877, 'comment_body': ""I'll do that in the next commit"", 'comment_created': datetime.datetime(2020, 3, 20, 21, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 395909272, 'comment_body': 'This has the wrong UUID, since we elected not to implement the approximation range without a decimal point, the search range for `1e2` is [99.5 ... 100.5], which is fine, but only UUID 89fg071-1f7d-4394-a316-0a458edf28c3 falls into that range. The other test works for me.', 'comment_created': datetime.datetime(2020, 3, 20, 22, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395910419, 'comment_body': ""But [here](https://www.hl7.org/fhir/search.html#number) I couldn't find the same range\r\n\r\n[parameter]=1e2 | Values that equal 100, to 1 significant figures precision, so this is actually searching for values in the range [95 ... 105)\r\n-- | --\r\n\r\nDoes 1e-2 works for you?\r\n"", 'comment_created': datetime.datetime(2020, 3, 20, 22, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 395911623, 'comment_body': 'So, `new BigDecimal(0.1)` is closer to what we want. What we actually want is this:\r\n\r\n```java\r\n// At the top of the file\r\nprivate static final BigDecimal APPROX_RANGE = new BigDecimal(0.1);\r\n\r\nBigDecimal value = quantityParam.getValue();\r\nBigDecimal approxRange = APPROX_RANGE.multiply(value);\r\n\r\nreturn Optional\r\n    .of(between(propertyName, value.subtract(approxRange).doubleValue(), value.add(approxRange).doubleValue()));', 'comment_created': datetime.datetime(2020, 3, 20, 22, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395912182, 'comment_body': ""I'm aware. This is a point where I'm suggesting we break spec, because the alternative seems to be to write a parser for scientific notation. Maybe we'll reassess later, but I don't think that's necessary at this point in time. And, yes, 1e-2 worked for me without modifications..."", 'comment_created': datetime.datetime(2020, 3, 20, 22, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 396098612, 'comment_body': ""So, for prefix coding, I'm happy with `eq` being an exact equality, e.g. `1e2` means only exactly `100` (despite the spec, this is the actual implementation in the HAPI JPA Server). `ap` should still work, since `1e2` should still translate to `[90 ... 100]`. `le`, `ge`, `lt`, and `gt` are all defined as starting from the exact position at infinite precision, so again should be covered by just the normal Hibernate operations."", 'comment_created': datetime.datetime(2020, 3, 22, 14, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 396105808, 'comment_body': '@ibacher I have pushed a commit after this please have a look and tell if anything needs to be fixed\r\n', 'comment_created': datetime.datetime(2020, 3, 22, 15, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 396746633, 'comment_body': 'Remove this whole `else` block', 'comment_created': datetime.datetime(2020, 3, 23, 20, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 396746715, 'comment_body': ""We don't really need this"", 'comment_created': datetime.datetime(2020, 3, 23, 20, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 396746995, 'comment_body': ""This should be pushed down to where `dotIdx == -1` since that's the only place we need this value"", 'comment_created': datetime.datetime(2020, 3, 23, 20, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 396747226, 'comment_body': 'Substitute `value` for `quantityParam.getValue()`', 'comment_created': datetime.datetime(2020, 3, 23, 20, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 396747788, 'comment_body': '`double val = value.getValue()` then use val below', 'comment_created': datetime.datetime(2020, 3, 23, 20, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 396748054, 'comment_body': 'Remove this block', 'comment_created': datetime.datetime(2020, 3, 23, 20, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 396748511, 'comment_body': 'Change this to `quantityParam.getPrefix() == null || quantityParam.getPrefix.equals(APPROXIMATE)`', 'comment_created': datetime.datetime(2020, 3, 23, 20, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 397246090, 'comment_body': 'Can we refactor thins so this method is also in BaseDaoImpl', 'comment_created': datetime.datetime(2020, 3, 24, 15, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 397247629, 'comment_body': 'Is there any reason to prefer this to `propertyLike`?', 'comment_created': datetime.datetime(2020, 3, 24, 15, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 397248657, 'comment_body': 'Change this to `handleCodeableConcept`', 'comment_created': datetime.datetime(2020, 3, 24, 15, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 397249706, 'comment_body': 'Also change the signature to match `handleResourceCode`', 'comment_created': datetime.datetime(2020, 3, 24, 15, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 397250611, 'comment_body': 'Can we refactor out the lambda in here (the expression beginning `(system, tokens) ->`) and turn it into a proper method which can be called both here and `handleResourceCode`', 'comment_created': datetime.datetime(2020, 3, 24, 15, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 397250817, 'comment_body': 'Also refactor `handleResourceCode` to be called `handleCodeableConcept`. Hopefully we can eventually get rid of the `TokenOrListParam` version of that.', 'comment_created': datetime.datetime(2020, 3, 24, 15, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 397251930, 'comment_body': ""I'd rename this `handleQuantity()` and move it to BaseDaoImpl. I'd also rename the parameter `quantityAndListParam`."", 'comment_created': datetime.datetime(2020, 3, 24, 15, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 397255193, 'comment_body': 'This is an unnecessary check.', 'comment_created': datetime.datetime(2020, 3, 24, 15, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 397277787, 'comment_body': ""@ibacher So I guess we'll need to change the parameter either here or in handleResourceCode to make it `TokenOrListParam` or `TokenAndListParam`"", 'comment_created': datetime.datetime(2020, 3, 24, 16, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 397280024, 'comment_body': ""Well, I'd like to keep them separate for now so that anything that's relying on `TokenOrListParam` doesn't break and we keep the scope of this PR relatively focused. We can have two method with the same name that are distinguished by parameter types, so that shouldn't be an issue. We just need to make these two resemble each other so it's clear that they provide the same functionality."", 'comment_created': datetime.datetime(2020, 3, 24, 16, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 397359896, 'comment_body': ""Can this also be called `handleCodeableConcept()`? Also, can we move it so it's with the other `handleCodeableConcept` method?"", 'comment_created': datetime.datetime(2020, 3, 24, 18, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 397360194, 'comment_body': ""Let's get rid of this altogether, even though that means updating more files."", 'comment_created': datetime.datetime(2020, 3, 24, 18, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 397367831, 'comment_body': ""@ibacher I'll do that but it'll take some time"", 'comment_created': datetime.datetime(2020, 3, 24, 18, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 398022153, 'comment_body': ""I don't think we need a separate method for this any more. Just inline this for `handleCodeableConcept`. However, this function *should* still take the `conceptMapAlias` and `conceptReferenceTermAlias` parameters instead of hard-coding them as `cm` and `crt`."", 'comment_created': datetime.datetime(2020, 3, 25, 17, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}]","[{'commit_sha': '87b57be258d659e6739979fa54de4f46894f9d96', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '492505db34c052763b4ff8ae2aa38b270a6204f0', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab23925fcfb3d9fe8a393aaec494ed4e104b80c', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f743c5290206ef19b31f8ef8f3dfe04e0664ab9', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}]",Siddharth Vaish,36266597,sidvaish97@gmail.com,User,,34,,9,39
388397218,FM2-92 Add support for AND / OR queries using References,"<!--- Add a pull request title above in this format -->
<!--- real example: 'FM2-8 Implement the Person Resource' -->
<!--- 'FM2-JiraIssueNumber JiraIssueTitle' -->
## Description of what I changed
<!--- Describe your changes in detail -->
<!--- It can simply be your commit message, which you must have -->


## Issue I worked on
<!--- This project only accepts pull requests related to open issues -->
<!--- Want a new feature or change? Discuss it in an issue first -->
<!--- Found a bug? Point us to the issue/or create one so we can reproduce it -->
<!--- Just add the issue number at the end: -->
see https://issues.openmrs.org/browse/FM2-92

## Checklist: I completed these to help reviewers :)
<!--- Put an `x` in the box if you did the task -->
<!--- If you forgot a task please follow the instructions below -->
- [ ] My pull request only contains **ONE single commit**.

  No? -> [read here](https://wiki.openmrs.org/display/docs/Pull+Request+Tips) on how to squash multiple commits into one

- [x] My IDE is configured to follow the [**code style**](https://wiki.openmrs.org/display/docs/Java+Conventions) of this project.

  No? Unsure? -> [configure your IDE](https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE), format the code and add the changes with `git add . && git commit --amend`

- [x] I have **added tests** to cover my changes. (If you refactored
  existing code that was well tested you do not have to add tests)

  No? -> write tests and add them to this commit `git add . && git commit --amend`

- [x] I ran `mvn clean package` right before creating this pull request and
  added all formatting changes to my commit.

  No? -> execute above command

- [x] All new and existing **tests passed**.

  No? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.

- [x] My pull request is **based on the latest changes** of the master branch.

  No? Unsure? -> execute command `git pull --rebase upstream master`
",True,115,https://api.github.com/repos/openmrs/openmrs-module-fhir2/pulls/115,https://github.com/openmrs/openmrs-module-fhir2/pull/115,closed,934,250,26,2,9,25,0,0,[],2020-03-14 18:42:20+00:00,2020-03-23 18:31:06+00:00,776926.0,"8 days, 23:48:46","[{'comment_id': 392692108, 'comment_body': 'Please leave a line before the return statement.', 'comment_created': datetime.datetime(2020, 3, 15, 16, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'varung-31', 'type': 'User'}, {'comment_id': 392692151, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2020, 3, 15, 16, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'varung-31', 'type': 'User'}, {'comment_id': 392692164, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2020, 3, 15, 16, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'varung-31', 'type': 'User'}, {'comment_id': 392692191, 'comment_body': '@VaishSiddharth  setValue() method resets the value of chain to null. Hence you must set the chain after you set the value.', 'comment_created': datetime.datetime(2020, 3, 15, 16, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'varung-31', 'type': 'User'}, {'comment_id': 392692195, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 3, 15, 16, 57, 40, tzinfo=datetime.timezone.utc), 'commenter': 'varung-31', 'type': 'User'}, {'comment_id': 392692203, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 3, 15, 16, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'varung-31', 'type': 'User'}, {'comment_id': 392692210, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 3, 15, 16, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'varung-31', 'type': 'User'}, {'comment_id': 392692268, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 3, 15, 16, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'varung-31', 'type': 'User'}, {'comment_id': 392692280, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 3, 15, 16, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'varung-31', 'type': 'User'}, {'comment_id': 392692290, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 3, 15, 16, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'varung-31', 'type': 'User'}, {'comment_id': 392692306, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 3, 15, 16, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'varung-31', 'type': 'User'}, {'comment_id': 392692318, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 3, 15, 16, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'varung-31', 'type': 'User'}, {'comment_id': 392692344, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 3, 15, 16, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'varung-31', 'type': 'User'}, {'comment_id': 392692353, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 3, 15, 16, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'varung-31', 'type': 'User'}, {'comment_id': 392692366, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 3, 15, 16, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'varung-31', 'type': 'User'}, {'comment_id': 393017846, 'comment_body': 'Also, this is intended one time too many 🙂 ', 'comment_created': datetime.datetime(2020, 3, 16, 13, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 393019311, 'comment_body': ""When we're doing this inside a `handleAndListParam` we do need to check that the alias doesn't already exist."", 'comment_created': datetime.datetime(2020, 3, 16, 13, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 393218945, 'comment_body': 'I would prefer that instead of creating the alias here, we just pass in what the alias is called as it was before.', 'comment_created': datetime.datetime(2020, 3, 16, 18, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 393220476, 'comment_body': ""I'd prefer this method to be re-written along the lines I requested for `handleEncounterReference` above. We don't want to be passing around the `Criteria` object unless we absolutely need to."", 'comment_created': datetime.datetime(2020, 3, 16, 18, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 393221487, 'comment_body': 'We definitely need `!containsAlias` checks around these `createAlias` uses. This, however, seems like a legitimate place to pass in the criteria.', 'comment_created': datetime.datetime(2020, 3, 16, 18, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 393221764, 'comment_body': 'Again we should have `!containsAlias` check', 'comment_created': datetime.datetime(2020, 3, 16, 18, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395758823, 'comment_body': 'So for these tests, rather than repurposing them for `OR` queries, we should leave the initial test as is, then test for `OR` and then add a separate test for `AND` (which looks like `/Observation?subject.identifier=M4001-1&subject.identifier=IU230`).\r\n\r\nAlso, it will be more readable if you save the `ValueAsQueryTokens` intermediate steps. Also note that unlike the results we sometimes use which are `Collections` the result of `getValuesAsQueryTokens()` are lists that can be indexed numerically.', 'comment_created': datetime.datetime(2020, 3, 20, 16, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395811006, 'comment_body': '> (which looks like /Observation?subject.identifier=M4001-1&subject.identifier=IU230).\r\n\r\n@ibacher Can you explain what is this expected to give. I am asking this because when I was testing for `/Observation?subject.identifier=M4001-1,IU230` I get size 2 of the list and when testing for `/Observation?subject.identifier=M4001-1&subject.identifier=IU230` I get size equal to 1', 'comment_created': datetime.datetime(2020, 3, 20, 18, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 395826344, 'comment_body': ""So it depends on where you're looking. Remember that the hierarchy for these types goes:\r\n\r\nEach `AndParam` contains 1 or more `OrParam`s which contains 1 or more `Param`s.\r\n\r\nThis means that if you search for `/Observation?subject.identifier=M4001-1&subject.identifier=IU23`, then the length of `patientCaptor.getValue().getValueAsQueryTokens()` should be 2, but the length of `patientCaptor.getValue().getValueAsQueryTokens().get(0).getValueAsQueryTokens` should be 1."", 'comment_created': datetime.datetime(2020, 3, 20, 18, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 395898459, 'comment_body': ""I know this isn't syntactically required but OpenMRS prefer curly braces around all if statements [see our coding style guide](https://wiki.openmrs.org/display/docs/Java+Conventions#JavaConventions-Conventions). The reason for that is that while things might work well now, it's easier for maintenance if the if blocks are consistent."", 'comment_created': datetime.datetime(2020, 3, 20, 21, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}]","[{'commit_sha': '7c8dfccb7e44be1d2260a338aec66e5e546e09ed', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a70908571f505ac6810e7554a0218ce35074d758', 'committer_username': 'ibacher', 'committer_name': 'Ian', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 3, 16, 23, 10, tzinfo=datetime.timezone.utc)}]",Siddharth Vaish,36266597,sidvaish97@gmail.com,User,,34,,9,39
416895310,FM2-173: Fix Type Mismatch,"<!--- Add a pull request title above in this format -->
<!--- real example: 'FM2-8 Implement the Person Resource' -->
<!--- 'FM2-JiraIssueNumber JiraIssueTitle' -->
## Description of what I changed
<!--- Describe your changes in detail -->
<!--- It can simply be your commit message, which you must have -->


## Issue I worked on
<!--- This project only accepts pull requests related to open issues -->
<!--- Want a new feature or change? Discuss it in an issue first -->
<!--- Found a bug? Point us to the issue/or create one so we can reproduce it -->
<!--- Just add the issue number at the end: -->
see https://issues.openmrs.org/browse/FM2-173

## Checklist: I completed these to help reviewers :)
<!--- Put an `x` in the box if you did the task -->
<!--- If you forgot a task please follow the instructions below -->
- [ ] My pull request only contains **ONE single commit**.

  No? -> [read here](https://wiki.openmrs.org/display/docs/Pull+Request+Tips) on how to squash multiple commits into one

- [ ] My IDE is configured to follow the [**code style**](https://wiki.openmrs.org/display/docs/Java+Conventions) of this project.

  No? Unsure? -> [configure your IDE](https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE), format the code and add the changes with `git add . && git commit --amend`

- [ ] I have **added tests** to cover my changes. (If you refactored
  existing code that was well tested you do not have to add tests)

  No? -> write tests and add them to this commit `git add . && git commit --amend`

- [ ] I ran `mvn clean package` right before creating this pull request and
  added all formatting changes to my commit.

  No? -> execute above command

- [ ] All new and existing **tests passed**.

  No? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.

- [ ] My pull request is **based on the latest changes** of the master branch.

  No? Unsure? -> execute command `git pull --rebase upstream master`
",True,169,https://api.github.com/repos/openmrs/openmrs-module-fhir2/pulls/169,https://github.com/openmrs/openmrs-module-fhir2/pull/169,closed,1,2,1,6,4,0,0,0,[],2020-05-12 18:27:17+00:00,2020-05-13 13:45:33+00:00,69496.0,19:18:16,[],"[{'commit_sha': 'b4a84e2c87bfa9d266dd2b514c53b8463f4422c2', 'committer_username': 'ibacher', 'committer_name': 'Ian', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 3, 16, 23, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc7ccfd9813de168572ec35ed1aebdbb9a471d61', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02a2a3b37f354a2df99a387c564d954e028529df', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a7c7ff5ad1770befa44c92e9821a79539049d4a', 'committer_username': 'ibacher', 'committer_name': 'Ian', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 3, 16, 23, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54931b06c0970e528b166397e97d42bb9a8fe705', 'committer_username': 'ibacher', 'committer_name': 'Ian', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 3, 16, 23, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28ef09b2685b37e645a09b583ee6d2c42a73f0a1', 'committer_username': 'ibacher', 'committer_name': 'Ian', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 3, 16, 23, 10, tzinfo=datetime.timezone.utc)}]",Siddharth Vaish,36266597,sidvaish97@gmail.com,User,,34,,9,39
411694506,FM2-183: Add support for DSTU3,"@VaishSiddharth I'm opening this as a draft PR as the communication tools are better integrated than what we've been doing.

Anyone else, we're currently building support for DSTU3 into the module. This will also serve as the pattern for integrating new versions of FHIR into the module, though we may not really be looking to support versions *earlier* that DSTU3.",True,158,https://api.github.com/repos/openmrs/openmrs-module-fhir2/pulls/158,https://github.com/openmrs/openmrs-module-fhir2/pull/158,closed,9346,309,111,1,7,33,0,0,[],2020-04-30 16:21:34+00:00,2020-05-22 20:29:29+00:00,1915675.0,"22 days, 4:07:55","[{'comment_id': 418132997, 'comment_body': ""Minor point, but please configure your IDE not to introduce `*` imports. OpenMRS doesn't like anyone to use them, and it makes some sense."", 'comment_created': datetime.datetime(2020, 4, 30, 16, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418133265, 'comment_body': 'Remove the `*` import', 'comment_created': datetime.datetime(2020, 4, 30, 16, 22, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418133689, 'comment_body': 'Yes! We should implement this!', 'comment_created': datetime.datetime(2020, 4, 30, 16, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418134325, 'comment_body': 'Required, but we will obviously be given the R3 version of the DiagnosticReport here.', 'comment_created': datetime.datetime(2020, 4, 30, 16, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418134522, 'comment_body': 'Required, but we will obviously be given the R3 version of the DiagnosticReport here.', 'comment_created': datetime.datetime(2020, 4, 30, 16, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418135033, 'comment_body': ""I'd prefer if these files were structured similarly, i.e. with the `@History` method following the `@Read` method."", 'comment_created': datetime.datetime(2020, 4, 30, 16, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418136247, 'comment_body': 'Thinking about this some more, I think that instead of naming every `ResourceProvider` `...DStu3ResourceProvider` we should move them into a `r3` package so, for instance, this class would become `org.openmrs.module.fhir2.providers.r3.AllergyIntoleranceFhirResourceProvider`.', 'comment_created': datetime.datetime(2020, 4, 30, 16, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418137789, 'comment_body': ""Let's shorten this to `fhirR3Resources` (R3 is the release, but was called STU3 — standard trial use; R2 was released and called DSTU2 — draft standard trial use; I'm just favouring the shorter one!)"", 'comment_created': datetime.datetime(2020, 4, 30, 16, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418138711, 'comment_body': 'See above about the order of methods', 'comment_created': datetime.datetime(2020, 4, 30, 16, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418139079, 'comment_body': '`getPatientHistoryById`, also ordering.', 'comment_created': datetime.datetime(2020, 4, 30, 16, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418139689, 'comment_body': ""To be consistent, let's call this FhirR3RestServlet"", 'comment_created': datetime.datetime(2020, 4, 30, 16, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418140270, 'comment_body': ""Let's remove this from this switch since we aren't going to use it right now."", 'comment_created': datetime.datetime(2020, 4, 30, 16, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418140911, 'comment_body': 'We should remove this servlet mapping', 'comment_created': datetime.datetime(2020, 4, 30, 16, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418141058, 'comment_body': 'We should change this `servlet-name` to fhir2R3Servlet', 'comment_created': datetime.datetime(2020, 4, 30, 16, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418141523, 'comment_body': ""We need to rethink this. We should return an error if the value isn't a known version so that we're using a consistent access URL."", 'comment_created': datetime.datetime(2020, 4, 30, 16, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418142725, 'comment_body': ""Instead of making a fork of this class, maybe it makes more sense to call the version here `BaseFhirR3ResourceProviderTest` and have it extend `BaseFhirResourceProviderTest` and then make the changes that we need here. This might involve changing `BaseFhirResourceProviderTest`, but that's ok."", 'comment_created': datetime.datetime(2020, 4, 30, 16, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418143213, 'comment_body': ""Instead of making a fork of this class, maybe it makes more sense to call the version here `BaseFhirR3ProvenanceResourceTest` and have it extend `BaseFhirProvenanceResourceTest` and then make the changes that we need here. This might involve changing `BaseFhirProvenanceResourceTest`, but that's ok.\r\n"", 'comment_created': datetime.datetime(2020, 4, 30, 16, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418162821, 'comment_body': '@ibacher This might need to be changed in master as well. I am not changing anything in omod  module because it might be irrelevant for this PR', 'comment_created': datetime.datetime(2020, 4, 30, 17, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 418172018, 'comment_body': '@ibacher This might need to be changed in master as well', 'comment_created': datetime.datetime(2020, 4, 30, 17, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 418188333, 'comment_body': ""I'm aware. I've got to go through that code soon."", 'comment_created': datetime.datetime(2020, 4, 30, 17, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 418212098, 'comment_body': ""@ibacher Test for all these `@History` functions fail. Can you give an idea, what's wrong here"", 'comment_created': datetime.datetime(2020, 4, 30, 18, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 418215878, 'comment_body': ""Likely because the converter doesn't handled the contained resources properly, so when `getContained()` gets called here, it returns an empty list. We may need to look at implementing re-implementing the code to get the provenance resources as part of the R3 submodule."", 'comment_created': datetime.datetime(2020, 4, 30, 18, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 421660918, 'comment_body': '@ibacher I have added an interface like this.', 'comment_created': datetime.datetime(2020, 5, 7, 17, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 421697321, 'comment_body': '@VaishSiddharth Sorry... I was apparently leading you astray. [This commit](https://github.com/openmrs/openmrs-module-fhir2/pull/158/commits/88232ddf1a43567bd4b11e0e1cbe88894bbafeee) has the refactoring necessary for this. I left some errors in the DSTU3 test classes though. See if you can work them out.', 'comment_created': datetime.datetime(2020, 5, 7, 18, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 422134343, 'comment_body': 'This is correct.', 'comment_created': datetime.datetime(2020, 5, 8, 13, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 422134829, 'comment_body': 'This should be `SP_RELATED`, but note that `SP_RELATED` has a somewhat different structure.', 'comment_created': datetime.datetime(2020, 5, 8, 13, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 422153630, 'comment_body': '@ibacher Shouldn\'t this be `SP_RELATED_TYPE` [here](http://hl7.org/fhir/STU3/observation.html#search) is why I think so.\r\nAlso only changing the data type will not solve the problems, I think that we\'ll have to map it, as we did for `Task` also the `observation` resource returns `IBundleProvider` in search function which complicates things or if not all the tests are failing with this error message\r\n```\r\nca.uhn.fhir.context.ConfigurationException: This context is for FHIR version ""DSTU3"" but the class ""org.hl7.fhir.r4.model.OperationOutcome"" is for version ""R4""\r\n\r\n```\r\nI guess we\'ll need to override this method also in `BaseFhirR3ResourceProviderTest`', 'comment_created': datetime.datetime(2020, 5, 8, 13, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 422158721, 'comment_body': 'No. `SP_RELATED`. `SP_RELATED_TYPE` refers to the type structure that is part of the related element. Technically, `SP_RELATED_TARGET` is the more direct replacement for `SP_HAS_MEMBER`, but only when the `related` structure looks like this:\r\n\r\n```json\r\n""related"": {\r\n    ""type"": ""has-member"",\r\n    ""target"": ""Observation/3""\r\n}\r\n```\r\n\r\nOr, in terms of search parameters:\r\n\r\n```\r\n/Observation?related.type=has-member&related.target=Observation/3\r\n```\r\n\r\nThis also isn\'t exactly like Task, because what we\'re converting here isn\'t a full resource, but a search parameter.\r\n\r\nThe message you highlight:\r\n\r\n```\r\nca.uhn.fhir.context.ConfigurationException: This context is for FHIR version ""DSTU3"" but the class ""org.hl7.fhir.r4.model.OperationOutcome"" is for version ""R4""\r\n```\r\n\r\nDoes indicate a problem, but part of the problem is that we\'re not properly handling things when the result is an `OperationOutcome` (which itself needs to be translated). Please step through one of these failing tests with a debugger to see what is actually happening.\r\n\r\n> I guess we\'ll need to override this method also in BaseFhirR3ResourceProviderTest\r\n\r\nWhich method are you referring to?', 'comment_created': datetime.datetime(2020, 5, 8, 13, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 422163253, 'comment_body': '@ibacher \r\n> Which method are you referring to?\r\n\r\n\r\nprotected void describeMismatchSafely(MockHttpServletResponse item, Description mismatchDescription) in this function we have `OperationOutcome` which is of `import org.hl7.fhir.r4.model.OperationOutcome;` type so I think this needs to be generic so that all versions and use it\r\n\r\n', 'comment_created': datetime.datetime(2020, 5, 8, 14, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 426267658, 'comment_body': '@ibacher I get a NPE here when I do something like this\r\n\r\n```java\r\nreturn request.getScheme() + ""://"" + request.getServerName() + port + ""/"" + contextPath + ""/ws/fhir2/""\r\n\t\t        + FhirVersionUtils.getFhirResourceVersion(request);\r\n```\r\nin `OpenmrsFhirAddressStrategy`', 'comment_created': datetime.datetime(2020, 5, 17, 14, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'VaishSiddharth', 'type': 'User'}, {'comment_id': 426650555, 'comment_body': ""I would make this `UNKNOWN`. Also I would order the values in the enum this way: `UNKNOWN`, `R3`, `R4`. That way we're adding values to the end and (hopefully) not messing up the ordinal order of the enum."", 'comment_created': datetime.datetime(2020, 5, 18, 14, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 426651587, 'comment_body': 'It would be better to switch on the enum value here, even if we do need to calculate the string value. That way we have a compile-time check of the various cases.', 'comment_created': datetime.datetime(2020, 5, 18, 14, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}, {'comment_id': 426654123, 'comment_body': 'Can you give me some more context for this? What does the new version of `OpenmrsFhirAddressStrategy` look like? What does the test case that you are using look like?', 'comment_created': datetime.datetime(2020, 5, 18, 14, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}]","[{'commit_sha': 'fc217f6eb8c43371674d67149f05d2356272d4a0', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}]",Ian,52504170,,User,,64,,2,62
436719770,FM2-237: Add method to get user by user name,"<!--- Add a pull request title above in this format -->
<!--- real example: 'FM2-8: Implement the Person Resource' -->
<!--- 'FM2-JiraIssueNumber: JiraIssueTitle' -->
## Description of what I changed
<!--- Describe your changes in detail -->
<!--- It can simply be your commit message, which you must have -->

## Issue I worked on
<!--- This project only accepts pull requests related to open issues -->
<!--- Want a new feature or change? Discuss it in an issue first -->
<!--- Found a bug? Point us to the issue/or create one so we can reproduce it -->
<!--- Just add the issue number at the end: -->
see https://issues.openmrs.org/browse/FM2-

## Checklist: I completed these to help reviewers :)
<!--- Put an `x` in the box if you did the task -->
<!--- If you forgot a task please follow the instructions below -->
- [x] My IDE is configured to follow the [**code style**](https://wiki.openmrs.org/display/docs/Java+Conventions) of this project.

  No? Unsure? -> [configure your IDE](https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE), format the code and add the changes with `git add . && git commit --amend`

- [x] I have **added tests** to cover my changes. (If you refactored
  existing code that was well tested you do not have to add tests)

  No? -> write tests and add them to this commit `git add . && git commit --amend`

- [x] I ran `mvn clean package` right before creating this pull request and
  added all formatting changes to my commit.

  No? -> execute above command

- [x] All new and existing **tests passed**.

  No? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.

- [x] My pull request is **based on the latest changes** of the master branch.

  No? Unsure? -> execute command `git pull --rebase upstream master`
",True,221,https://api.github.com/repos/openmrs/openmrs-module-fhir2/pulls/221,https://github.com/openmrs/openmrs-module-fhir2/pull/221,closed,21,4,3,1,1,0,0,0,[],2020-06-18 19:29:43+00:00,2020-06-18 19:52:27+00:00,1364.0,0:22:44,[],"[{'commit_sha': 'f32dfbd3f7869826e4bd55a1fe94a4477863da9d', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}]",Siddharth Vaish,36266597,sidvaish97@gmail.com,User,,34,,9,39
462995264,Expose conformance statement without authentication,"<!--- Add a pull request title above in this format -->
<!--- real example: 'FM2-8: Implement the Person Resource' -->
<!--- 'FM2-JiraIssueNumber: JiraIssueTitle' -->
## Description of what I changed
<!--- Describe your changes in detail -->
<!--- It can simply be your commit message, which you must have -->

## Issue I worked on
<!--- This project only accepts pull requests related to open issues -->
<!--- Want a new feature or change? Discuss it in an issue first -->
<!--- Found a bug? Point us to the issue/or create one so we can reproduce it -->
<!--- Just add the issue number at the end: -->
see https://issues.openmrs.org/browse/FM2-

## Checklist: I completed these to help reviewers :)
<!--- Put an `x` in the box if you did the task -->
<!--- If you forgot a task please follow the instructions below -->
- [ ] My IDE is configured to follow the [**code style**](https://wiki.openmrs.org/display/docs/Java+Conventions) of this project.

  No? Unsure? -> [configure your IDE](https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE), format the code and add the changes with `git add . && git commit --amend`

- [ ] I have **added tests** to cover my changes. (If you refactored
  existing code that was well tested you do not have to add tests)

  No? -> write tests and add them to this commit `git add . && git commit --amend`

- [ ] I ran `mvn clean package` right before creating this pull request and
  added all formatting changes to my commit.

  No? -> execute above command

- [ ] All new and existing **tests passed**.

  No? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.

- [ ] My pull request is **based on the latest changes** of the master branch.

  No? Unsure? -> execute command `git pull --rebase upstream master`
",True,271,https://api.github.com/repos/openmrs/openmrs-module-fhir2/pulls/271,https://github.com/openmrs/openmrs-module-fhir2/pull/271,closed,19,17,1,1,6,1,0,0,[],2020-08-04 20:38:11+00:00,2020-08-07 19:28:52+00:00,255041.0,"2 days, 22:50:41","[{'comment_id': 465755323, 'comment_body': '```suggestion\r\n\t\t\tif (!(httpRequest.getRequestURI().contains(""/.well-known"") || \r\n\t\t\t         httpRequest.getRequestURI().endsWith(""/metadata""))) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 5, 14, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ibacher', 'type': 'User'}]","[{'commit_sha': '66cbb3bfbc01cc0e557d5c05cbd9203801394cc1', 'committer_username': 'VaishSiddharth', 'committer_name': 'Siddharth Vaish', 'committer_email': 'sidvaish97@gmail.com', 'commit_date': datetime.datetime(2018, 2, 8, 12, 45, 11, tzinfo=datetime.timezone.utc)}]",Siddharth Vaish,36266597,sidvaish97@gmail.com,User,,34,,9,39

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
232160993,openmrs-module-fhir2,openmrs/openmrs-module-fhir2,Java,108,66,50,46,765,24,17,24,"[{'id': 462995264, 'number': 271, 'closed': datetime.datetime(2020, 8, 7, 19, 28, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 20, 38, 11, tzinfo=datetime.timezone.utc), 'time_taken': 255041.0, 'time_delta': '2 days, 22:50:41', 'additions': 19, 'deletions': 17, 'state': 'closed'}, {'id': 437303701, 'number': 222, 'closed': datetime.datetime(2020, 7, 20, 20, 25, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 21, 32, 42, tzinfo=datetime.timezone.utc), 'time_taken': 2674364.0, 'time_delta': '30 days, 22:52:44', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 436719770, 'number': 221, 'closed': datetime.datetime(2020, 6, 18, 19, 52, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 19, 29, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1364.0, 'time_delta': '0:22:44', 'additions': 21, 'deletions': 4, 'state': 'closed'}, {'id': 424116341, 'number': 186, 'closed': datetime.datetime(2020, 6, 18, 19, 47, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 27, 21, 12, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1895718.0, 'time_delta': '21 days, 22:35:18', 'additions': 790, 'deletions': 75, 'state': 'closed'}, {'id': 416895310, 'number': 169, 'closed': datetime.datetime(2020, 5, 13, 13, 45, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 18, 27, 17, tzinfo=datetime.timezone.utc), 'time_taken': 69496.0, 'time_delta': '19:18:16', 'additions': 1, 'deletions': 2, 'state': 'closed'}, {'id': 388397218, 'number': 115, 'closed': datetime.datetime(2020, 3, 23, 18, 31, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 14, 18, 42, 20, tzinfo=datetime.timezone.utc), 'time_taken': 776926.0, 'time_delta': '8 days, 23:48:46', 'additions': 934, 'deletions': 250, 'state': 'closed'}, {'id': 382087236, 'number': 99, 'closed': datetime.datetime(2020, 3, 25, 17, 52, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 1, 20, 0, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2065923.0, 'time_delta': '23 days, 21:52:03', 'additions': 799, 'deletions': 219, 'state': 'closed'}, {'id': 379777575, 'number': 89, 'closed': datetime.datetime(2020, 2, 25, 20, 27, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 25, 20, 12, 5, tzinfo=datetime.timezone.utc), 'time_taken': 931.0, 'time_delta': '0:15:31', 'additions': 8, 'deletions': 8, 'state': 'closed'}, {'id': 378696777, 'number': 86, 'closed': datetime.datetime(2020, 2, 26, 19, 13, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 23, 11, 48, 14, tzinfo=datetime.timezone.utc), 'time_taken': 285937.0, 'time_delta': '3 days, 7:25:37', 'additions': 696, 'deletions': 105, 'state': 'closed'}, {'id': 378306511, 'number': 82, 'closed': datetime.datetime(2020, 2, 24, 17, 4, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 21, 14, 21, 9, tzinfo=datetime.timezone.utc), 'time_taken': 268974.0, 'time_delta': '3 days, 2:42:54', 'additions': 214, 'deletions': 1, 'state': 'closed'}, {'id': 377211091, 'number': 74, 'closed': datetime.datetime(2020, 2, 19, 18, 14, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 19, 14, 45, 52, tzinfo=datetime.timezone.utc), 'time_taken': 12493.0, 'time_delta': '3:28:13', 'additions': 71, 'deletions': 66, 'state': 'closed'}, {'id': 376806069, 'number': 73, 'closed': datetime.datetime(2020, 2, 19, 13, 47, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 18, 19, 55, 53, tzinfo=datetime.timezone.utc), 'time_taken': 64301.0, 'time_delta': '17:51:41', 'additions': 144, 'deletions': 78, 'state': 'closed'}, {'id': 376345675, 'number': 70, 'closed': datetime.datetime(2020, 2, 18, 13, 19, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 17, 23, 16, 32, tzinfo=datetime.timezone.utc), 'time_taken': 50595.0, 'time_delta': '14:03:15', 'additions': 83, 'deletions': 0, 'state': 'closed'}]"
