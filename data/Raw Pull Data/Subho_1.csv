pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1408269149,networking: Add support for WireGuard,"TODO: 

- [x] Make address field in add/edit dialog the same as in the IPv4 settings dialog. [detail](https://github.com/cockpit-project/cockpit/pull/19024#issuecomment-1667459198): https://github.com/cockpit-project/cockpit/pull/19209
- [x] Test and fix deletion, deactivate first [detail](https://github.com/cockpit-project/cockpit/pull/19024#issuecomment-1667493474)
- [x] Test invalid endpoint without port, improve error message [detail](https://github.com/cockpit-project/cockpit/pull/19024#issuecomment-1667511217)
- [x] [Update dialog to design](https://github.com/cockpit-project/cockpit/pull/19024#issuecomment-1691899291)

Follow-ups:

 - [x] Disable DHCP mode for wireguard interfaces: https://github.com/cockpit-project/cockpit/pull/19337
 - [x] Support setting up the server side: configure allowed IPs, but no peers: https://github.com/cockpit-project/cockpit/pull/19489

## Networking: Add support for WireGuard

The Networking page can now create and edit [WireGuard VPN](https://www.wireguard.com/) connections.

![Screen Shot 2023-08-07 at 08 36 04](https://github.com/cockpit-project/cockpit/assets/200109/28f15285-02fa-465e-825e-77db828665b4)

![Screen Shot 2023-09-13 at 08 02 43](https://github.com/cockpit-project/cockpit/assets/200109/95e5ae4f-659f-44a1-befc-8f8ef444ffbf)

_Many thanks to [Subho Ghosh](https://github.com/subhoghoshX) for adding this feature as part of his [Google Summer of Code](https://summerofcode.withgoogle.com/) project! and thanks to [Gil Obradors](https://github.com/gil-obradors) for his initial work._

",True,19024,https://api.github.com/repos/cockpit-project/cockpit/pulls/19024,https://github.com/cockpit-project/cockpit/pull/19024,closed,700,16,9,1,44,130,0,0,[],2023-06-26 16:09:47+00:00,2023-09-13 09:36:50+00:00,6802023.0,"78 days, 17:27:03","[{'comment_id': 1242440274, 'comment_body': '## Unused local variable\n\nVariable b is not used.\n\n[Show more details](https://github.com/cockpit-project/cockpit/security/code-scanning/564)', 'comment_created': datetime.datetime(2023, 6, 26, 16, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 1247526256, 'comment_body': 'Renaming is confusing. Just rename the original function?', 'comment_created': datetime.datetime(2023, 6, 30, 7, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1247536171, 'comment_body': 'This is a bit ""meh"", but unavoidable. It could get some abstraction, but let\'s keep it for now until this is more mature. Maybe Marius has a better idea about this.', 'comment_created': datetime.datetime(2023, 6, 30, 7, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1247546627, 'comment_body': 'I think at some point we are going to accumulate too many buttons here -- there\'s going to be more, for e.g. OpenVPN. Perhaps we need to categorize them, into ""Add virtual device"" (bond, bridge, team, VLAN) and ""Add VPN"" (WireGuard, OpenVPN, etc.), or turn this into a Kebab?\r\n\r\nI think that\'s a question for @garrett . For continuing the development of this PR this is fine of course.', 'comment_created': datetime.datetime(2023, 6, 30, 7, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1247547027, 'comment_body': 'Leftover?', 'comment_created': datetime.datetime(2023, 6, 30, 7, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1247549783, 'comment_body': 'This will appear in `ps` and /proc. Please never put secrets into the command line. Instead, write it into stdin directly, with something like `cockpit.spawn([""wg"", ""pubkey""]).input(privateKey.trim())`. See https://cockpit-project.org/guide/latest/cockpit-spawn.html', 'comment_created': datetime.datetime(2023, 6, 30, 7, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1247551844, 'comment_body': 'This needs better error handling. I suppose the common case is that the private key is wrong, this should then create a FormHelperText with an useful message. Then it could also be that wg pubkey fails with another reason, this should either appear in the dialog or at least as `console.error()` so that it becomes debuggable.', 'comment_created': datetime.datetime(2023, 6, 30, 7, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1247552825, 'comment_body': 'DRY, please split the address once. This should also get some validation that there the address format is valid -- there may be no /, or more than one, or an empty first/second part, etc.', 'comment_created': datetime.datetime(2023, 6, 30, 7, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1247553928, 'comment_body': 'Hmm, this ought to trigger test/static-code. Translatable text must be enclosed in double quotes.\r\n\r\n*looks* -- and indeed [it does](https://github.com/cockpit-project/cockpit/actions/runs/5392098900/jobs/9789951294?pr=19024#step:4:653)\r\n\r\nI suggest to set up the pre-push check. Search https://github.com/cockpit-project/cockpit/blob/main/HACKING.md#working-on-the-non-web-parts-of-cockpit for ""pre-push hook"".', 'comment_created': datetime.datetime(2023, 6, 30, 7, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1247555433, 'comment_body': 'Please avoid .script() whenever possible. It runs an extra shell, and is always prone to problems with whitespace/escaping/non-standard shells etc. This is just a simple argv vector, so `.spawn([""wg"", ""genkey""])` is perfectly fine.', 'comment_created': datetime.datetime(2023, 6, 30, 7, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1247556266, 'comment_body': 'Needs i18n', 'comment_created': datetime.datetime(2023, 6, 30, 7, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1247556461, 'comment_body': 'Needs i18n', 'comment_created': datetime.datetime(2023, 6, 30, 7, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1247556626, 'comment_body': 'placeholder i18n', 'comment_created': datetime.datetime(2023, 6, 30, 7, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1247558211, 'comment_body': 'This is strange. Why not `b.get_val(""#network-wireguard-settings-dialog .pf-v5-c-clipboard-copy input"")` ?', 'comment_created': datetime.datetime(2023, 6, 30, 7, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1247559208, 'comment_body': 'This could now also test changing the IPv4/IPv6 settings, or adding the default route over the VPN.', 'comment_created': datetime.datetime(2023, 6, 30, 7, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1247560244, 'comment_body': 'Unused, and should also not really be necessary -- a ConfigParser object already behaves much like a dictionary.', 'comment_created': datetime.datetime(2023, 6, 30, 7, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1250934911, 'comment_body': ""That sounds better. I just wanted to be consistent with other renames like that of bond, bridge, team and vlan. Though the name `GhostSettings` itself is confusing for me (maybe it's an actual term).  I assumed it's more like `DefaultSettings` or `InitialSettings`."", 'comment_created': datetime.datetime(2023, 7, 3, 13, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1250935140, 'comment_body': ""I get this error:\r\n`AttributeError: 'Browser' object has no attribute 'get_val'`"", 'comment_created': datetime.datetime(2023, 7, 3, 13, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1250936554, 'comment_body': ""## Unused import\n\nImport of 'configparser' is not used.\n\n[Show more details](https://github.com/cockpit-project/cockpit/security/code-scanning/565)"", 'comment_created': datetime.datetime(2023, 7, 3, 14, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 1250936557, 'comment_body': ""## Unused import\n\nImport of 'io' is not used.\n\n[Show more details](https://github.com/cockpit-project/cockpit/security/code-scanning/566)"", 'comment_created': datetime.datetime(2023, 7, 3, 14, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 1251005455, 'comment_body': ""Sorry, it's `b.val()`, see testlib.py"", 'comment_created': datetime.datetime(2023, 7, 3, 15, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1251765849, 'comment_body': 'Yep, too many buttons.\r\n\r\nI do like the idea of ""Add virtual device"" and ""Add VPN"". However...\r\n\r\nThe issues: \r\n- how common is each task?\r\n- adding a switcher to unrelated tasks (bond/bridge/VLAN) isn\'t so great\r\n- bond in particular is quite verbose\r\n- having everything under a ... menu kind of hides away what Cockpit can do\r\n- there are [split buttons](https://staging.patternfly.org/components/menus/menu-toggle#split-button-toggle-with-action), but those (again) would be for a [default action and other _related_ actions](https://staging.patternfly.org/components/menus/dropdown/design-guidelines#split-button-with-actions).\r\n\r\nShould we do ""Add VPN"" (with a switcher of VPN types in the modal, once we have more than just Wireguard) and a kebab with the rest? :shrug: \r\n\r\n(Also: We should probably default to Wireguard, once we have more VPN types, as Wireguard the most ""native"" and flexible VPN.)\r\n\r\nRight now, we might want to keep this in mind and just tack on an ""Add VPN"" for this PR and handle the rest in a follow-up. What do you think? (Alternative is to ""Add VPN"" and move the rest to a kebab menu in this PR, I think.)', 'comment_created': datetime.datetime(2023, 7, 4, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'garrett', 'type': 'User'}, {'comment_id': 1252542903, 'comment_body': ""Please don't include the `Dialogs.show()` inside the try/catch. That ignores *every* error, so must be very confined. It's also called again in the following code, so please DRY and just move it down."", 'comment_created': datetime.datetime(2023, 7, 5, 5, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252551739, 'comment_body': 'Debian also has the [wireguard-tools package](https://packages.debian.org/unstable/wireguard-tools). There is a [wireguard meta-package](https://packages.debian.org/unstable/wireguard) which depends on -tools and additionally the kernel modules; however, the standard Debian 12 (stable) kernel already includes them, so we dont need to be concerned about this any more. Installing ""wireguard"" is not wrong, but if it simplifies things, we can also hardcode ""wireguard-tools"". I also checked OpenSUSE, and it\'s [wireguard-tools](https://software.opensuse.org/package/wireguard-tools) there as well.\r\n\r\nThe main issue here is that RHEL/CentOS 8 does *not* have wireguard-tools. RHEL 9 does. So we can\'t add ""rhel"" here.\r\n\r\nMy proposal:\r\n * Drop this `config` bit in the manifest\r\n * In the code, check `os_release.PLATFORM_ID` and don\'t offer on-demand install for ""platform:el8"".\r\n * Otherwise, try to install `wireguard-tools`. So far the package name is the same on all our supported distributions.\r\n\r\nFTR, I checked os-release on various images:\r\n\r\n### rhel-8-9\r\n```\r\nNAME=""Red Hat Enterprise Linux""    \r\nVERSION=""8.9 (Ootpa)""    \r\nID=""rhel""    \r\nID_LIKE=""fedora""    \r\nVERSION_ID=""8.9""    \r\nPLATFORM_ID=""platform:el8""    \r\n``` \r\n    \r\n### rhel-9-3\r\n```\r\nNAME=""Red Hat Enterprise Linux""    \r\nVERSION=""9.3 (Plow)""    \r\nID=""rhel""    \r\nID_LIKE=""fedora""    \r\nVERSION_ID=""9.3""    \r\nPLATFORM_ID=""platform:el9""    \r\n``` \r\n    \r\n### ubuntu-stable\r\n```\r\nPRETTY_NAME=""Ubuntu 23.04""    \r\nNAME=""Ubuntu""    \r\nVERSION_ID=""23.04""    \r\nVERSION=""23.04 (Lunar Lobster)""    \r\nVERSION_CODENAME=lunar    \r\nID=ubuntu    \r\nID_LIKE=debian    \r\n```\r\n\r\nSo at some point we can also check `.ID` and fall back to `.ID_LIKE`, to subsume RHEL, Ubuntu etc. into their parent distros. But that still leaves the RHEL 8 special case.', 'comment_created': datetime.datetime(2023, 7, 5, 5, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252552790, 'comment_body': ""If this just becomes error handling for `command -v wg`, that's fine -- that really Should Not Fail™. But if it's error handling for the on-demand install or wg dialog, that needs to become proper Alerts and shown in the UI."", 'comment_created': datetime.datetime(2023, 7, 5, 5, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252554548, 'comment_body': 'This is a bit ugly: It does two different things, has a generic name, but is wireguard specific. My gut feeling: Name it `resolveDeps()`, pass it the `type`, make the `command -v wg` specific to `type==wireguard`, and drop the Dialogs.show(). Return a promise to indicate success/failure.', 'comment_created': datetime.datetime(2023, 7, 5, 5, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252555760, 'comment_body': 'See above, this is awkward. Please call `resolveDeps(type)` unconditionally, and then call the dialog on success.', 'comment_created': datetime.datetime(2023, 7, 5, 5, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252557954, 'comment_body': 'Please write that as `const [result] = await ...` to avoid the extra variable and destructuring.', 'comment_created': datetime.datetime(2023, 7, 5, 5, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252558505, 'comment_body': 'Same here, write it as `const [secrets] = await ...` to avoid the `[0]`. D-Bus calls always return a list.', 'comment_created': datetime.datetime(2023, 7, 5, 5, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252559697, 'comment_body': 'Oh, please don\'t do that. That was an experiment of mine, but this is in no way documented to actually get a list of ""things"". I expect this to break a *lot*, and indeed tests are wildly unhappy. Please revert.', 'comment_created': datetime.datetime(2023, 7, 5, 5, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252562078, 'comment_body': 'needs error checking. The user may type zero or more than one /\r\n\r\nFor the same reason, this needs a way to return failure.', 'comment_created': datetime.datetime(2023, 7, 5, 5, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252563486, 'comment_body': 'What does that 0.0.0.0 gateway mean? Normally ""0.0.0.0/0"" means ""this is the default route"", but (1) we don\'t want to enforce routing everything through the wg interface (that should be opt-in), and (2) there is no netmask, so perhaps this means ""unset""?\r\n\r\nIs that some ""TODO"", or some wireguard quirk? That needs a better comment to explain.', 'comment_created': datetime.datetime(2023, 7, 5, 5, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252565808, 'comment_body': 'Not all OSes have firewalld, in particular not fedora-coreos and rhel4edge. So please guard this with `if not m.ostree_image:` for now, so that the tests stop failling.\r\n\r\nHow exactly does it break with firewalld? ', 'comment_created': datetime.datetime(2023, 7, 5, 5, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252566453, 'comment_body': 'dito. Please group these two together, so that they are covered by the same ostree_image check and TODO comment.', 'comment_created': datetime.datetime(2023, 7, 5, 5, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252566861, 'comment_body': 'Please use `b.val()`', 'comment_created': datetime.datetime(2023, 7, 5, 5, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252567730, 'comment_body': 'Please add error checks here -- missing fields, wrongly formatted addresses, and so on (see my ""dialog review"" comment above). These should all cause some reasoable alert. Finally, put in valid values and make sure that ""Save"" then succeeds. Add a `b.wait_not_visible(""#network-wireguard-settings-dialog"")` to make sure.', 'comment_created': datetime.datetime(2023, 7, 5, 5, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252570396, 'comment_body': 'This is a race condition -- this won\'t work immediately after the `wg set wg0` on m2, supposedly it will take some time to establish the connection. The ping [failed here](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19024-20230704-110812-1ea465d9-fedora-38-other/log.html#191-1), presumably due to that. But that test failure is also rather unhelpful, there are zero error messages.\r\n\r\nI recommend adding some debugging output if the ping fails, so that you can see the system state when it fails:\r\n```py\r\ntry:\r\n    m1.execute(""ping -c 1 10.0.0.2"")\r\nexcept subprocess.CalledProcessError:\r\n    m1.execute(""ip a >&2; ip route >&2; nmcli c >&2"")\r\n    raise\r\n```\r\nand of course whatever else seems useful to you -- `nmcli d` perhaps, or there is something specific for wireguard, or even some `wg status`-like command.', 'comment_created': datetime.datetime(2023, 7, 5, 5, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252570813, 'comment_body': 'See commit a703c070bb49394, please change this to `import testlib` for being consistent with other tests.', 'comment_created': datetime.datetime(2023, 7, 5, 5, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1252571232, 'comment_body': 'Please add ""WireGuard"" to `RE_NETWORKING` in test/run, so that it runs in the ""/network"" scenario instead of ""/other"".', 'comment_created': datetime.datetime(2023, 7, 5, 5, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1264932385, 'comment_body': 'AFAICS this now does not change behaviour, it is just a rewrite of this function to be `async`, right? Please split this out into a separate commit.', 'comment_created': datetime.datetime(2023, 7, 17, 6, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1264932541, 'comment_body': ""`things` isn't used, please drop"", 'comment_created': datetime.datetime(2023, 7, 17, 6, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1264935025, 'comment_body': 'This is too much overhead. Please drop this state and effect, and instead directly write this in the instantiation: `submitDisabled={ !iface || !addresses || !privateKey }`', 'comment_created': datetime.datetime(2023, 7, 17, 6, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1264936608, 'comment_body': 'Please add an error handler, just in case.', 'comment_created': datetime.datetime(2023, 7, 17, 6, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1264937314, 'comment_body': ""Please move after TestBridge, it's more related to these."", 'comment_created': datetime.datetime(2023, 7, 17, 6, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1266519670, 'comment_body': ""I renamed it to `wg` to avoid this. `wireguard` isn't used anywhere else except to distinguish it from other interfaces.\r\n\r\n`wg` might be less clear than `wireguard` but I think it is still understandable."", 'comment_created': datetime.datetime(2023, 7, 18, 9, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1266520221, 'comment_body': 'Thanks, it indeed was unnecessary ;)', 'comment_created': datetime.datetime(2023, 7, 18, 9, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1266520939, 'comment_body': 'done. thanks!', 'comment_created': datetime.datetime(2023, 7, 18, 9, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1266522398, 'comment_body': 'reverted.', 'comment_created': datetime.datetime(2023, 7, 18, 9, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1268941872, 'comment_body': 'Do `ip -6 route` here, as by default that only shows IPv4.', 'comment_created': datetime.datetime(2023, 7, 20, 5, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1268945977, 'comment_body': 'The comment and code don\'t match up. It says ""should not be set"", and then you set it (to ""0.0.0.0""). Also, the ""may be left as 0"" is unclear. This is set to the IPv4 setting\'s `addresses` field. So presumably the NM API , requires setting a ""gateway"" field then? If the NM API needs some string value, and ""0.0.0.0"" means ""unset"", then please write that in the comment. Otherwise, if it can handle this field being unset or `""""`, that\'d be cleaner.', 'comment_created': datetime.datetime(2023, 7, 20, 5, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1268947377, 'comment_body': ""Ah, that's the thing which fixes the firewall? :clap: Can you please add a comment what port that is?"", 'comment_created': datetime.datetime(2023, 7, 20, 5, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1268949405, 'comment_body': 'These tests are rather expensive as they  are not `@nondestructive`, and thus boot a pair of VMs. Please either:\r\n\r\n * move the error checks into `testVPN`; input some false values before you input the final, correct, value (preferred)\r\n * or, at least make this `@nondestructive` and replace the final ""Save"" with ""cancel"". Then you shouldn\'t need two VMs', 'comment_created': datetime.datetime(2023, 7, 20, 5, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1268949906, 'comment_body': 'It does ""Add VPN"" now.', 'comment_created': datetime.datetime(2023, 7, 20, 5, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1268953853, 'comment_body': ""There are some testing gaps there, see the [coverage report](https://github.com/cockpit-project/cockpit/pull/19024#pullrequestreview-1537573651). It seems there are several dialog inputs which aren't touched by the test.\r\n\r\nAlso, the on-demand install functionality also needs to be tested. This shuold remove the real wireguard-tools, create a mock wireguard-tools package, and check that the UI installs that and then transitions to the dialog. That should also validate that on `rhel-8*` and `centos-8*` the dialog does *not* get offered, and instead the UI somehow conveys that wireguard isn't available.\r\n\r\nSee [this test](https://github.com/cockpit-project/cockpit/blob/895b2d0e9465c09a47428f8e48daa159a566b847/test/verify/check-metrics#L1329) for an example how to do that. I.e. do this at the end of `testVPN`, as afterwards you don't have a working wireguard-tools package any more. "", 'comment_created': datetime.datetime(2023, 7, 20, 5, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1268957134, 'comment_body': 'When clicking on ""Add VPN"" on my laptop (which does have a wireguard interface, but not wireguard-tools installed), I get this dialog:\r\n\r\n![image](https://github.com/cockpit-project/cockpit/assets/200109/29869d70-faf8-4a1b-ae3e-6783b1f286f2)\r\n\r\nThe ""not found"" error message is confusing. Presumably this complains about not finding PackageKit, as my system is OSTree? On-demand install does not work there. See [realmd on-demand install detection](https://github.com/cockpit-project/cockpit/blob/895b2d0e9465c09a47428f8e48daa159a566b847/pkg/systemd/overview-cards/realmd.jsx#L67) for how to do that.\r\n\r\nThis will become visible once you have an on-demand install test, it should fail this way on fedora-coreos and/or rhel4edge (if one of them doesn\'t have wireguard-tools)', 'comment_created': datetime.datetime(2023, 7, 20, 5, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1268960928, 'comment_body': 'Pleas also check `10.0.0`, that currently makes the page oops. Also try other variations like `ten.one`, `10 1`, `1.2.3.4/`, `1.2.3`, `1.2.3.4.5`', 'comment_created': datetime.datetime(2023, 7, 20, 5, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1268962671, 'comment_body': ""As mentioned above, there is some missing space between the input and the button:\r\n\r\n![image](https://github.com/cockpit-project/cockpit/assets/200109/d3220218-3079-4aa1-8a13-c01c3aa29795)\r\n\r\nSee [Garrett's comment above](https://github.com/cockpit-project/cockpit/pull/19024#issuecomment-1621328633) how to fix this."", 'comment_created': datetime.datetime(2023, 7, 20, 5, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1268964377, 'comment_body': 'It says ""type=number"", but it still allows me to enter values like ""ab"". This even gets accepted by the dialog, and when I open the settings it is then set to ""0"". Please add some validation and cover this by a test.', 'comment_created': datetime.datetime(2023, 7, 20, 5, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1268965628, 'comment_body': 'So this only accepts IPv4? I tried to add `::1` or `ff01::1/40`, and it said ""invalid address"". Is this a limitation of wireguard or NM, or a bug in the dialog?', 'comment_created': datetime.datetime(2023, 7, 20, 5, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1268966204, 'comment_body': 'Is the addresses field space separated or comma separated? Or can it accept both? The helper text should state what is expected, and we should probably handle both space and/or comma separated, really.', 'comment_created': datetime.datetime(2023, 7, 20, 5, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1269086913, 'comment_body': 'Yes the IPv4 settings `addresses` property requires the values (uint32 ip, uint32 prefix, uint32 gateway).\r\n\r\nThe network page converts ip `""192.168.12.34""` to decimal form `3232238626` then passes that to NM. Same for gateway.\r\n\r\nSo, `""0.0.0.0""` becomes `0`.\r\n\r\n""0.0.0.0"" == 0 == No gateway\r\n\r\nSo NM accepts `(3232238626, 32, 0)` instead of `(""192.168.12.34"", 32, ""0.0.0.0"")`\r\n\r\nThis is confusing I know. That\'s why I proposed (and gave it a try before) to get rid of using the deprecated `addresses` property.\r\n\r\nFrom the docs:\r\n> [addresses] Deprecated in favor of the \'address-data\' and \'gateway\' properties, but this can be used for backward-compatibility with older daemons.\r\n\r\nWe can pass an IP string directly to \'address-data\' and \'gateway\' properties, without converting them to decimal first unlike in \'addresses\'. And let the dbus service throw error if the passed value isn\'t valid. We can probably get rid of all the code that converts IP string to decimal and vice-versa (for both ipv4 and ipv6) giving `.split()`, `.trim()` on null/undefined errors.', 'comment_created': datetime.datetime(2023, 7, 20, 7, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1269087170, 'comment_body': 'That\'s the listening port of wireguard of that peer. I should probably use the variable instead of hard coding it.\r\n```py\r\nm2.execute(f""firewall-cmd --add-port={m2_listening_port}/udp"")\r\n```\r\nThanks for pointing it out.', 'comment_created': datetime.datetime(2023, 7, 20, 7, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1269087867, 'comment_body': ""If Garrett meant the `InputGroupItem` component, I intentionally didn't use it as it's not available in the PF version that cockpit uses.\r\n\r\nAs for the space. I still don't see any space in the docs. Rather it's more connected like:\r\n![image](https://github.com/cockpit-project/cockpit/assets/108616679/3ce7d066-79e3-422b-96a2-3a42894c7dee)\r\n"", 'comment_created': datetime.datetime(2023, 7, 20, 7, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1269088303, 'comment_body': ""Huh, that never happens, on my side.\r\n\r\nOh, wait you're probably using firefox. Yep, I can reproduce it. That looks like a PF issue."", 'comment_created': datetime.datetime(2023, 7, 20, 7, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1269088896, 'comment_body': ""In NM IPv4 and IPv6 settings are separate. For all interfaces we have dedicated IPv4 and IPv6 dialogs in the **edit** page. Same for wireguard.\r\n\r\nGiven how common it is the also set the IP info at the time of creating a connection profile, I added the input field for IPv4.\r\n\r\nWe could technically have another input field for IPv6. Or use the same input, differentiate it and pass it separately to NM. But that'd be another bunch of if-statements and error handling to differentiate between the two."", 'comment_created': datetime.datetime(2023, 7, 20, 7, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1269094909, 'comment_body': 'That sounds nice indeed! But only worth doing if/once we have a new enough NM on all our OSes. I.e. check RHEL 8 and Ubuntu 22.04 (NM version 1.36.4)', 'comment_created': datetime.datetime(2023, 7, 20, 8, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1269096695, 'comment_body': 'Nah, that\'s\' fine, keep it as-is. But perhaps change the label to ""IPv4 addresses"" for clarity?', 'comment_created': datetime.datetime(2023, 7, 20, 8, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1269266567, 'comment_body': ""It should either be an InputGroupItem _or_ have a space; it shouldn't be combined like the screenshot in this thread. Since the action is directly connected to the input, it should be a group without a space, not a separate widget with a space. (Currently, it's two widgets with no space, which is wrong.)\r\n\r\n> If Garrett meant the InputGroupItem component, I intentionally didn't use it as it's not available in the PF version that cockpit uses.\r\n\r\nHuh? Cockpit uses PatternFly 5. It's in PF5:\r\n\r\nhttps://staging.patternfly.org/components/input-group"", 'comment_created': datetime.datetime(2023, 7, 20, 10, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'garrett', 'type': 'User'}, {'comment_id': 1269324881, 'comment_body': 'Created a bug report: https://github.com/patternfly/patternfly-react/issues/9391', 'comment_created': datetime.datetime(2023, 7, 20, 11, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1269324975, 'comment_body': ""Sorry I meant the PF5 alpha version. It's kinda behind :-(. `InputGroupItem` was added in https://github.com/patternfly/patternfly-react/pull/9074."", 'comment_created': datetime.datetime(2023, 7, 20, 11, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1269521452, 'comment_body': ""The staging site has the PF5 RC version. @jelly is working on updating the version of PF5 we're using, which we can hopefully land soon.\r\n\r\nTo detangle this point, use an input + button with a small space between them for now. Then we can enhance it by switching back to InputGroupItem once we can."", 'comment_created': datetime.datetime(2023, 7, 20, 14, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'garrett', 'type': 'User'}, {'comment_id': 1270273183, 'comment_body': 'As the input field is not rounded but the Button is adding a space looks kind of awkward.\r\n\r\n@garrett do you think this looks better? (I think I found just the right props)\r\n![image](https://github.com/cockpit-project/cockpit/assets/108616679/03162849-0696-45d3-b86d-9f35320246f4)\r\n', 'comment_created': datetime.datetime(2023, 7, 21, 6, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1272288636, 'comment_body': ""## Except block handles 'BaseException'\n\nExcept block directly handles BaseException.\n\n[Show more details](https://github.com/cockpit-project/cockpit/security/code-scanning/577)"", 'comment_created': datetime.datetime(2023, 7, 24, 13, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 1272410306, 'comment_body': ""## Except block handles 'BaseException'\n\nExcept block directly handles BaseException.\n\n[Show more details](https://github.com/cockpit-project/cockpit/security/code-scanning/578)"", 'comment_created': datetime.datetime(2023, 7, 24, 15, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 1274695906, 'comment_body': ""Please drop the two empty lines, PEP-8 and ruff complain about that. There's some others, too. See [failed unit test](https://github.com/cockpit-project/cockpit/actions/runs/5655485869/job/15320701409?pr=19024#step:4:653). Please set up a git pre-push hook as documented in [HACKING](https://github.com/cockpit-project/cockpit/blob/main/HACKING.md#working-on-the-non-web-parts-of-cockpit)"", 'comment_created': datetime.datetime(2023, 7, 26, 9, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1274696288, 'comment_body': '`str(m2_port)` please', 'comment_created': datetime.datetime(2023, 7, 26, 9, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1274699096, 'comment_body': ""please also test multiple addresses: separated by single or multiple spaces and commas, with a mix of them, and also valid and invalid ones. This seems to work fine now, but let's cover it."", 'comment_created': datetime.datetime(2023, 7, 26, 9, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1274703440, 'comment_body': 'Please update the helper text to show multiple addresses.', 'comment_created': datetime.datetime(2023, 7, 26, 9, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1274713992, 'comment_body': 'Please add validation to this and a comment that points to https://github.com/patternfly/patternfly-react/issues/9391 . The current behaviour of interpreting anything non-numeric as ""0"" and succeeding is very confusing.', 'comment_created': datetime.datetime(2023, 7, 26, 10, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1274719592, 'comment_body': 'no bare excepts, please. `except testlib.Error:`', 'comment_created': datetime.datetime(2023, 7, 26, 10, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1274720240, 'comment_body': 'Did you really see this time out with 15s? That seems absurdly long for setting an address.', 'comment_created': datetime.datetime(2023, 7, 26, 10, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1274725249, 'comment_body': 'This will not work OSTree, please guard with `if m.ostree_image:` and make sure that there is some sensible behaviour on ostree when the package isn\'t installed. E.g. [rhel4edge fails](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19024-20230725-101338-90629b4e-rhel4edge-networking/log.html#39) because it doesn\'t have wireguard-tools installed -- the ""Add VPN"" button then either should not appear at all, or it should show an useful error message akin to ""wireguard-tools package is not installed"". That makes sense as rhel4edge is *supposed* to be built by admins, so they can easily add the package if they want the functionality.\r\n\r\nIt is installed on fedora-coreos, there you just need to skip this part.', 'comment_created': datetime.datetime(2023, 7, 26, 10, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1274728749, 'comment_body': 'This ought to be covered by running the test on RHEL 8 as well, and making sure that it behaves sensibly there.', 'comment_created': datetime.datetime(2023, 7, 26, 10, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1274729133, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2023, 7, 26, 10, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1274730077, 'comment_body': 'Please add `// not-covered: OS error`, this is just a safeguard that is hard to reach.', 'comment_created': datetime.datetime(2023, 7, 26, 10, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1274731246, 'comment_body': 'Ignore for this PR.', 'comment_created': datetime.datetime(2023, 7, 26, 10, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1274732212, 'comment_body': 'Ignore for this PR.', 'comment_created': datetime.datetime(2023, 7, 26, 10, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1274736270, 'comment_body': 'That is .. odd. There should be plenty of wrong addresses in that test.', 'comment_created': datetime.datetime(2023, 7, 26, 10, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1277515142, 'comment_body': 'This is a weird dance. Just do `const listen_port = Number(listenPort);` and drop `lp`.', 'comment_created': datetime.datetime(2023, 7, 28, 12, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1277519136, 'comment_body': 'Please test the ostree case as well.  In particular, the behaviour for rhel4edge, where the wireguard-tools package is not installed, but also cannot be installed. The ""Add VPN"" button then either should not appear at all, or it should show an useful error message akin to ""wireguard-tools package is not installed""', 'comment_created': datetime.datetime(2023, 7, 28, 13, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1277520511, 'comment_body': ""This tests multiple addresses with errors, but it's missing multiple *valid* addresses, and making sure that they are all actually applied to the interface."", 'comment_created': datetime.datetime(2023, 7, 28, 13, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1277522443, 'comment_body': 'Please update the helper text to show multiple addresses. Also, IP addresses are not translatable', 'comment_created': datetime.datetime(2023, 7, 28, 13, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1277523333, 'comment_body': 'Needs i18n', 'comment_created': datetime.datetime(2023, 7, 28, 13, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1280731069, 'comment_body': ""I was settings multiple valid addresses [here](https://github.com/cockpit-project/cockpit/pull/19024/files#diff-1e9b8cca06a692aac8083ddc21489f716c3ead2ba9cfd7b88de882faab5dbdd4R91) but didn't check whether it was applied. Fixed it [here](https://github.com/cockpit-project/cockpit/pull/19024/files#diff-1e9b8cca06a692aac8083ddc21489f716c3ead2ba9cfd7b88de882faab5dbdd4R109)"", 'comment_created': datetime.datetime(2023, 8, 1, 14, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1280813629, 'comment_body': '""Addresses are""', 'comment_created': datetime.datetime(2023, 8, 1, 15, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1280815003, 'comment_body': 'that is weird. You should be able to simply do `useEffect(async () => { ...})` without the nested function.', 'comment_created': datetime.datetime(2023, 8, 1, 15, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1280815495, 'comment_body': ""and you don't await it here; just get rid of the wrapper, see above."", 'comment_created': datetime.datetime(2023, 8, 1, 15, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1280816820, 'comment_body': ""TBH I think that's not a hack, but the correct solution. There is no need to try and fetch the secrets for each and every state update of any interface, it's enough to do that in the dialog. In other words, maybe drop the comment?"", 'comment_created': datetime.datetime(2023, 8, 1, 15, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1280817995, 'comment_body': 'Hmm, that extra space before "" priv"" *so* looks like a typo. I suppose it\'s not (otherwise the dialog test would fail), but out of interest -- where does this come from?', 'comment_created': datetime.datetime(2023, 8, 1, 15, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1280818535, 'comment_body': 'just a suggestion, feel free to ignore: `if (connection?.["" priv""].path))`', 'comment_created': datetime.datetime(2023, 8, 1, 15, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1280820041, 'comment_body': ""again, can you please just make the whole `useEffect(async () => {...` ?  This avoids these wrappers, and they are avoiding the undefined situation that you don't await the call."", 'comment_created': datetime.datetime(2023, 8, 1, 15, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1280820526, 'comment_body': '... yes, exactly like this :+1: ', 'comment_created': datetime.datetime(2023, 8, 1, 15, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1280822457, 'comment_body': 'Please move this into `testVPN`, and make it dynamic. I.e. \r\n\r\n    if m.image in [""rhel4edge"", ""centos-8-stream""] or m.image.startswith(""rhel-8""):\r\n\r\nthis avoids us having to bump the rhel-8-* value for each new minor release.', 'comment_created': datetime.datetime(2023, 8, 1, 15, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1280823392, 'comment_body': 'please close the dialog and make sure you land back safely on the interface overview page. Otherwise, well done!', 'comment_created': datetime.datetime(2023, 8, 1, 15, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1280824596, 'comment_body': 'overly long line, please move comment above the line', 'comment_created': datetime.datetime(2023, 8, 1, 15, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1280825521, 'comment_body': '`except (subprocess.CalledError, testlib.Error):` Sorry for the bad advice! This should fix error reporting for failures, see above.', 'comment_created': datetime.datetime(2023, 8, 1, 15, 37, 48, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1281813531, 'comment_body': 'AFAIK that\'s not possible. async functions returns a promise object and react expects a clean up function in useEffect if we ever return anything.\r\n\r\n```js\r\nuseEffect(() => {\r\n  // effect code\r\n  return () => {\r\n    // return type == function\r\n    // using useEffect(async () => {}) means return type == Promise object\r\n  }\r\n})\r\n```\r\nFound an example in the docs here https://react.dev/reference/react/useEffect#fetching-data-with-effects (please scroll down to the ""You can also rewrite using the async / await syntax, but you still need to provide a cleanup function:"" section)\r\n\r\nCalling an `async` function like this is a pretty good pattern imho. It was suggested by Dan Abramov once here https://github.com/facebook/react/issues/14326#issuecomment-441680293. I\'ve been using it ever since.\r\n\r\nIn this particular case, as it should be the first thing that runs and only in unmount/mount, we could take it out of `useEffect` into a separate function, similar to https://github.com/cockpit-project/cockpit-machines/blob/main/src/app.jsx#L76 and call it in `dialogError` like `const [dialogError, setDialogError] = useState(checkWireguardPackage());`. Ah it\'s asynchronous. Oops, sorry it wouldn\'t work. (Ignore this last paragraph :smile:)', 'comment_created': datetime.datetime(2023, 8, 2, 12, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1281813623, 'comment_body': ""It's okay to not call `async` functions with `await` if we don't care about resolving the promise that it returns."", 'comment_created': datetime.datetime(2023, 8, 2, 12, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1281813763, 'comment_body': 'It comes from [here](https://github.com/cockpit-project/cockpit/blob/main/pkg/networkmanager/interfaces.js#L238), introduced in this [commit](https://github.com/cockpit-project/cockpit/commit/a00466d276674f05704691cec1f7e2383ef95f58).\r\n\r\nI was never 100% sure about this. I assumed it means ""private"" and the space before is used to stop it from ever clashing in the future. JS [symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) might be a newer approach. Not sure.', 'comment_created': datetime.datetime(2023, 8, 2, 12, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1281814174, 'comment_body': 'Cool! This gives me the idea maybe we could modernize the network page in a PR.', 'comment_created': datetime.datetime(2023, 8, 2, 12, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1281825810, 'comment_body': 'I see, thanks. TIL!', 'comment_created': datetime.datetime(2023, 8, 2, 12, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1282071028, 'comment_body': 'Assumed you meant `subprocess.CalledProcessError`.', 'comment_created': datetime.datetime(2023, 8, 2, 15, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1282141330, 'comment_body': 'Err, yes :see_no_evil: ', 'comment_created': datetime.datetime(2023, 8, 2, 16, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1282145730, 'comment_body': 'Right, and everything else uses `priv(obj)`, could this bit use that, too?', 'comment_created': datetime.datetime(2023, 8, 2, 16, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1282157683, 'comment_body': ""Thought of that too. But it's defined inside `NetworkManagerModel()` [here](https://github.com/cockpit-project/cockpit/blob/main/pkg/networkmanager/interfaces.js#L218) and taking it out of it and exporting didn't make sense, given it's literally just one line of code. No strong opinion though."", 'comment_created': datetime.datetime(2023, 8, 2, 16, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1282184735, 'comment_body': 'Ack, thanks!', 'comment_created': datetime.datetime(2023, 8, 2, 16, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1282656894, 'comment_body': ""`nmcli c` isn't good enough here to show the allowed addresses. Perhaps `nmcli c show con-wg0` and `nmcli d show wg0` help? It would be interesting to compare what NM and wg think about which addresses are allowed -- i.e. did the setting from the dialog already fail? Or does NM think it's got an IPv6 address, but didn't write that to wg correctly?"", 'comment_created': datetime.datetime(2023, 8, 3, 5, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1282663322, 'comment_body': 'With this debug output it works better, and is also easier to read:\r\n```diff\r\n--- test/verify/check-networkmanager-wireguard\r\n+++ test/verify/check-networkmanager-wireguard\r\n@@ -1,6 +1,7 @@\r\n #!/usr/bin/python3 -cimport os, sys; os.execv(os.path.dirname(sys.argv[1]) + ""/../common/pywrap"", sys.argv)\r\n \r\n import subprocess\r\n+import sys\r\n \r\n import netlib\r\n import packagelib\r\n@@ -150,8 +151,10 @@ class TestWireGuard(packagelib.PackageCase, netlib.NetworkCase):\r\n         try:\r\n             m1.execute(f""ping -6 -c 5 {m2_ip6}"")\r\n         except (subprocess.CalledProcessError, testlib.Error):\r\n-            m1.execute(""ip a >&2; ip -6 route >&2; nmcli c >&2; wg >&2"")\r\n-            m2.execute(""ip a >&2; ip -6 route >&2; nmcli c >&2; wg >&2"")\r\n+            print(""-------- status on m1 ----------"", file=sys.stderr)\r\n+            m1.execute(""set -x; ip a >&2; ip -6 route >&2; nmcli c >&2; nmcli c show con-wg0 >&2; nmcli d show wg0 >&2; wg >&2"")\r\n+            print(""-------- status on m2 ----------"", file=sys.stderr)\r\n+            m2.execute(""set -x; ip a >&2; ip -6 route >&2; nmcli c >&2; wg >&2"")\r\n             raise\r\n \r\n         # install wireguard-tools from the install dialog\r\n```\r\n\r\nUnfortunately, `nmcli con show con-wg0` does not show the allowed IPs *at all*, only these:\r\n```\r\nwireguard.private-key:                  <hidden>    \r\nwireguard.private-key-flags:            0 (none)    \r\nwireguard.listen-port:                  51820    \r\nwireguard.fwmark:                       0x0    \r\nwireguard.peer-routes:                  yes    \r\nwireguard.mtu:                          0    \r\nwireguard.ip4-auto-default-route:       -1 (default)    \r\nwireguard.ip6-auto-default-route:       -1 (default)    \r\n```\r\nSo it\'s still unclear at which point setting the allowed IPv6 address failed.', 'comment_created': datetime.datetime(2023, 8, 3, 5, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1282666017, 'comment_body': ""Ah! But it's part of the configuration:\r\n```\r\n# grep allowed /etc/NetworkManager/system-connections/con-wg0.nmconnection \r\nallowed-ips=10.0.0.2;\r\n```\r\n\r\nMaybe this is relevant?\r\n```\r\n# journalctl -b | grep 2001\r\nNetworkManager[644]: <warn>  [1691040473.2828] platform: (wg0) route-sync: failure to add IPv6 route: type unicast 2001::2/128 dev 5 metric 50 mss 0 rt-src user: Permission denied\r\n```\r\n\r\nThat feels more and more like a bug between NM and the kernel. @subhoghoshX can you please create a command line reproducer for it, with `nmcli`? If you can't reproduce that, I'm happy to try here. Then we can submit that as a NM bug report and add a naughty pattern for it."", 'comment_created': datetime.datetime(2023, 8, 3, 5, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1283022897, 'comment_body': 'Thanks for looking into it. Unfortunately even after running 7 parallel tests and YT I can\'t seem to reproduce it. Going further it only breaks on `self.login_and_go(""/network"")` mostly :-(', 'comment_created': datetime.datetime(2023, 8, 3, 10, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1285399214, 'comment_body': ""I restructured this a bit to ensure that setting the allowed IPs actually ends up in `wg show`. This both makes the error easier to debug, and also avoids the race of trying to modify the IPv6 configuration twice asynchronously. It's sort of avoiding the bug, but if it still fails now, we can write an easier naughty pattern."", 'comment_created': datetime.datetime(2023, 8, 7, 5, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1285747621, 'comment_body': ""I think the Cockpit UI should be able to do all these steps, no?  Let's do that if possible."", 'comment_created': datetime.datetime(2023, 8, 7, 11, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mvollmer', 'type': 'User'}, {'comment_id': 1299619203, 'comment_body': ""We're doing it in m1 (machine 1). The only purpose of configuring m2 is to just test the connection."", 'comment_created': datetime.datetime(2023, 8, 21, 5, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1324019446, 'comment_body': 'missing line break', 'comment_created': datetime.datetime(2023, 9, 13, 6, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1324020208, 'comment_body': 'Reduce memory of at least machine2. Also, this ought to work without `restrict`, I suppose that was a testing leftover.', 'comment_created': datetime.datetime(2023, 9, 13, 6, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1324112842, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2023, 9, 13, 7, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1324112966, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 9, 13, 7, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1324197862, 'comment_body': 'This added line is not executed by any test.  [Details](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19024-20230913-074657-1f53987e-fedora-38-devel//Coverage/lcov/github-pr.diff.gcov.html)', 'comment_created': datetime.datetime(2023, 9, 13, 8, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cockpituous', 'type': 'User'}, {'comment_id': 1324197864, 'comment_body': 'This added line is not executed by any test.  [Details](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19024-20230913-074657-1f53987e-fedora-38-devel//Coverage/lcov/github-pr.diff.gcov.html)', 'comment_created': datetime.datetime(2023, 9, 13, 8, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cockpituous', 'type': 'User'}]","[{'commit_sha': '1f53987e6fea354589a42533e7350133934f8544', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1517044524,Disable unsupported IPv4/IPv6 methods for wireguard,Follow-up from #19024,True,19337,https://api.github.com/repos/cockpit-project/cockpit/pulls/19337,https://github.com/cockpit-project/cockpit/pull/19337,closed,59,26,5,2,3,9,0,0,[],2023-09-15 09:50:02+00:00,2023-10-13 12:27:58+00:00,2428676.0,"28 days, 2:37:56","[{'comment_id': 1327107163, 'comment_body': 'Changing constants on runtime which are exported feels very brittle.', 'comment_created': datetime.datetime(2023, 9, 15, 10, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jelly', 'type': 'User'}, {'comment_id': 1327903431, 'comment_body': 'Can these be turned into a `function ipv4_method_choices(device_type)`?', 'comment_created': datetime.datetime(2023, 9, 16, 4, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1332829437, 'comment_body': 'Using a function indeed sounds better, thanks! I see that the IPv4 methods are a subset of the IPv6 methods:\r\n```js\r\nexport let ipv4_method_choices =\r\n    [\r\n        { choice: \'auto\', title: _(""Automatic (DHCP)"") },\r\n        { choice: \'link-local\', title: _(""Link local"") },\r\n        { choice: \'manual\', title: _(""Manual"") },\r\n        { choice: \'shared\', title: _(""Shared"") },\r\n        { choice: \'disabled\', title: _(""Disabled"") }\r\n    ];\r\n\r\nexport let ipv6_method_choices =\r\n    [\r\n        { choice: \'auto\', title: _(""Automatic"") },\r\n        { choice: \'dhcp\', title: _(""Automatic (DHCP only)"") },\r\n        { choice: \'link-local\', title: _(""Link local"") },\r\n        { choice: \'manual\', title: _(""Manual"") },\r\n        { choice: \'ignore\', title: _(""Ignore"") },\r\n        { choice: \'shared\', title: _(""Shared"") },\r\n        { choice: \'disabled\', title: _(""Disabled"") }\r\n    ];\r\n```\r\n\r\nOnly difference is ""auto"" translates to ""Automatic (DHCP)"" is IPv4 and to just ""Automatic"" in IPv6. The value ""auto"" in both IPv4/6 seems to be exactly the same. From NM doc:\r\n>NMSettingIP4Config and NMSettingIP6Config both support ""disabled"", ""auto"", ""manual"", and ""link-local""...\r\n\r\nIf we use the same text for ""auto"" in both IPv4/IPv6, we can also merge the list into one while we\'re at it...', 'comment_created': datetime.datetime(2023, 9, 21, 10, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1337167310, 'comment_body': 'yeah, let\'s use ""Automatic (DHCP)"" for both, that\'ll reduce confusion and i18n overhead. Then you can even have a single function with an ""ipv6?"" flag argument.', 'comment_created': datetime.datetime(2023, 9, 26, 12, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1340857936, 'comment_body': 'Sorry, I think that was bad advice. ""Auto"" for IPv6 is often *not* DHCP, but SLAAC, or possibly some other methods. That\'s why it has a separate ""dhcp"" mode. So we may be able to do it the other way around and name both ""Automatic"", but when in doubt, let\'s just leave them as-is?', 'comment_created': datetime.datetime(2023, 9, 29, 3, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1340951812, 'comment_body': 'Thanks for the feedback @martinpitt! I did some research into this and it indeed looks like ""auto"" in IPv6 doesn\'t mean DHCP. TIL.\r\n\r\nIn case of IPv6 it says [here](https://gitlab.freedesktop.org/NetworkManager/NetworkManager/-/blob/main/src/libnm-core-impl/nm-setting-ip6-config.c?ref_type=heads#L28-29):\r\n> If ""auto"" is specified then the appropriate automatic method (PPP, router advertisement, etc) is used for the device\r\n\r\nSimilar mentioned [here](https://gitlab.freedesktop.org/NetworkManager/NetworkManager/-/blob/main/src/libnm-core-impl/nm-setting-ip6-config.c?ref_type=heads#L1413) as well, which looks like part of a documentation, but I can\'t find the rendered version.\r\n\r\nI also looked into IPv4, and it says:\r\n> Enables automatic IPv4 address assignment from DHCP, PPP, or similar services.\r\n\r\nSource: https://gitlab.freedesktop.org/NetworkManager/NetworkManager/-/blob/main/src/libnm-core-impl/nm-setting-ip4-config.c?ref_type=heads#L1285\r\n\r\nSo, IPv4 ""auto"" is more than just DHCP it seems, then your second suggestion of dropping (DHCP) from IPv4, might be the right way to go.\r\n\r\nWDYT?', 'comment_created': datetime.datetime(2023, 9, 29, 6, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1340967912, 'comment_body': 'Works for me -- cross check, @mvollmer ?', 'comment_created': datetime.datetime(2023, 9, 29, 6, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1352317790, 'comment_body': 'I think ""DHCP"" is a very familiar term and will reassure people that they are getting what they think they are getting. But if it is only correct for certain types of interfaces, I don\'t mind dropping it.\r\n', 'comment_created': datetime.datetime(2023, 10, 10, 11, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mvollmer', 'type': 'User'}, {'comment_id': 1356730548, 'comment_body': ""Please do this the other way round -- *first* wait for the positive options, and then the not_present. It's otherwise (most likely) a race condition that the dialog is building up, and didn't yet fill the choices yet."", 'comment_created': datetime.datetime(2023, 10, 12, 12, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}]","[{'commit_sha': '54a9280c161d9c267006adb1cbeb8557f1a74a4e', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b99c29ccfb1eb8d957b6448a831ea3d4449d6096', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1530962317,networking: fix page crash when wg properties go missing,"Though the original issue #19384 used wg-quick to configure wireguard, I was unable to reproduce the issue with it, unless I created a brand new connection which seems unnecessary as the tests already had a profile configured. Using `sed` to edit wg keyfile and reproduce should be equivalent.

Other wireguard properties `endpoint` and `listen-port` are either optional or have a default value, so the /network page shouldn't break if they're not set. Missing or invalid `public-key` is equivalent to no peer, so it shouldn't break /network page as well.

fixes #19384",True,19395,https://api.github.com/repos/cockpit-project/cockpit/pulls/19395,https://github.com/cockpit-project/cockpit/pull/19395,closed,20,3,3,1,3,8,0,0,[],2023-09-26 16:39:14+00:00,2023-09-27 05:45:00+00:00,47146.0,13:05:46,"[{'comment_id': 1338051863, 'comment_body': 'The commit message said ""public-key is optional as well, so should this also get the `?` treatment?', 'comment_created': datetime.datetime(2023, 9, 27, 5, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1338052565, 'comment_body': 'A more canonical way to write this is `\'/allowed-ips/d\'`, i.e. ""delete a line if it contains that string"".', 'comment_created': datetime.datetime(2023, 9, 27, 5, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1338053074, 'comment_body': 'This change seems unrelated, what does it do?', 'comment_created': datetime.datetime(2023, 9, 27, 5, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1338064877, 'comment_body': 'It said ""Missing or invalid public-key is equivalent to no peer"", for invalid/missing `public-key` the `.map(...)` function [here](https://github.com/cockpit-project/cockpit/pull/19395/files#diff-e6968ba34dad066826484f30b54426b4891fbd5e72d45297d295a8f46086e3c8R591) wouldn\'t even run, as it\'d be an empty array of peers.', 'comment_created': datetime.datetime(2023, 9, 27, 5, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1338064900, 'comment_body': ""It visits are the interface details page, clicking the interaface name:\r\n\r\n![image](https://github.com/cockpit-project/cockpit/assets/108616679/30c37024-9034-40df-9359-5190c8d537cb)\r\n\r\nBut now it's visiting the page much earlier [here](https://github.com/cockpit-project/cockpit/pull/19395/files#diff-1e9b8cca06a692aac8083ddc21489f716c3ead2ba9cfd7b88de882faab5dbdd4R132). So, it'd be already be in that page, when it reaches this line."", 'comment_created': datetime.datetime(2023, 9, 27, 5, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1338065092, 'comment_body': 'ah, this looks much better, thanks!', 'comment_created': datetime.datetime(2023, 9, 27, 5, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1338069573, 'comment_body': 'Ah, sorry for the misunderstanding.', 'comment_created': datetime.datetime(2023, 9, 27, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1338069883, 'comment_body': 'Makes sense, thanks!', 'comment_created': datetime.datetime(2023, 9, 27, 5, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}]","[{'commit_sha': 'b66208e402052ba6d2aaf34d16598286e55a72b4', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1531826802,Minor wireguard fixes,,True,19402,https://api.github.com/repos/cockpit-project/cockpit/pulls/19402,https://github.com/cockpit-project/cockpit/pull/19402,closed,5,5,2,2,0,0,0,0,[],2023-09-27 07:27:09+00:00,2023-09-27 09:58:47+00:00,9098.0,2:31:38,[],"[{'commit_sha': '79668b09d7e141c62d7c9e03ee0592cec88ca2e1', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a97892121b0ddb2501c1ab68bce245312b336d5', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1558365851,test: configure wireguard server side using the browser object,Follow up of #19024,True,19489,https://api.github.com/repos/cockpit-project/cockpit/pulls/19489,https://github.com/cockpit-project/cockpit/pull/19489,closed,37,10,1,1,4,1,0,0,[],2023-10-16 11:05:06+00:00,2023-10-16 16:29:58+00:00,19492.0,5:24:52,"[{'comment_id': 1360655493, 'comment_body': ""FTR, *this* part is completely fine to keep as `firewall-cmd`, as it's not related to the actual wireguard setup. In fact, it's preferable to not  mix tests of different pages. But it's okay, just a suggestion for simplification."", 'comment_created': datetime.datetime(2023, 10, 16, 13, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}]","[{'commit_sha': '9757b8f404ec39dc2c7b50eeb60266a387710256', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1524301023,(WIP) networking: Add support for OpenVPN,"![image](https://github.com/cockpit-project/cockpit/assets/108616679/f9a286f7-e88f-4e7a-962f-f8f74d4e3d72)
",False,19363,https://api.github.com/repos/cockpit-project/cockpit/pulls/19363,https://github.com/cockpit-project/cockpit/pull/19363,open,452,5,8,1,5,24,1,0,[{'name': 'no-test'}],2023-09-21 07:49:55+00:00,,0.0,,"[{'comment_id': 1332728964, 'comment_body': 'This added line is not executed by any test.  [Details](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19363-20230921-075022-79cb9fd2-fedora-38-devel//Coverage/lcov/github-pr.diff.gcov.html)', 'comment_created': datetime.datetime(2023, 9, 21, 9, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cockpituous', 'type': 'User'}, {'comment_id': 1332728965, 'comment_body': 'These 3 added lines are not executed by any test.  [Details](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19363-20230921-075022-79cb9fd2-fedora-38-devel//Coverage/lcov/github-pr.diff.gcov.html)', 'comment_created': datetime.datetime(2023, 9, 21, 9, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cockpituous', 'type': 'User'}, {'comment_id': 1332728968, 'comment_body': 'These 4 added lines are not executed by any test.  [Details](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19363-20230921-075022-79cb9fd2-fedora-38-devel//Coverage/lcov/github-pr.diff.gcov.html)', 'comment_created': datetime.datetime(2023, 9, 21, 9, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cockpituous', 'type': 'User'}, {'comment_id': 1332728970, 'comment_body': 'These 9 added lines are not executed by any test.  [Details](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19363-20230921-075022-79cb9fd2-fedora-38-devel//Coverage/lcov/github-pr.diff.gcov.html)', 'comment_created': datetime.datetime(2023, 9, 21, 9, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cockpituous', 'type': 'User'}, {'comment_id': 1332728971, 'comment_body': 'These 13 added lines are not executed by any test.  [Details](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19363-20230921-075022-79cb9fd2-fedora-38-devel//Coverage/lcov/github-pr.diff.gcov.html)', 'comment_created': datetime.datetime(2023, 9, 21, 9, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cockpituous', 'type': 'User'}, {'comment_id': 1332728976, 'comment_body': 'These 6 added lines are not executed by any test.  [Details](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19363-20230921-075022-79cb9fd2-fedora-38-devel//Coverage/lcov/github-pr.diff.gcov.html)', 'comment_created': datetime.datetime(2023, 9, 21, 9, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cockpituous', 'type': 'User'}, {'comment_id': 1332728978, 'comment_body': 'These 6 added lines are not executed by any test.  [Details](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19363-20230921-075022-79cb9fd2-fedora-38-devel//Coverage/lcov/github-pr.diff.gcov.html)', 'comment_created': datetime.datetime(2023, 9, 21, 9, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'cockpituous', 'type': 'User'}, {'comment_id': 1332728983, 'comment_body': 'These 5 added lines are not executed by any test.  [Details](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19363-20230921-075022-79cb9fd2-fedora-38-devel//Coverage/lcov/github-pr.diff.gcov.html)', 'comment_created': datetime.datetime(2023, 9, 21, 9, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cockpituous', 'type': 'User'}, {'comment_id': 1332728985, 'comment_body': 'This added line is not executed by any test.  [Details](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19363-20230921-075022-79cb9fd2-fedora-38-devel//Coverage/lcov/github-pr.diff.gcov.html)', 'comment_created': datetime.datetime(2023, 9, 21, 9, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cockpituous', 'type': 'User'}, {'comment_id': 1332728986, 'comment_body': 'These 7 added lines are not executed by any test.  [Details](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19363-20230921-075022-79cb9fd2-fedora-38-devel//Coverage/lcov/github-pr.diff.gcov.html)', 'comment_created': datetime.datetime(2023, 9, 21, 9, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cockpituous', 'type': 'User'}, {'comment_id': 1332728989, 'comment_body': 'These 7 added lines are not executed by any test.  [Details](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19363-20230921-075022-79cb9fd2-fedora-38-devel//Coverage/lcov/github-pr.diff.gcov.html)', 'comment_created': datetime.datetime(2023, 9, 21, 9, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cockpituous', 'type': 'User'}, {'comment_id': 1332728991, 'comment_body': 'These 17 added lines are not executed by any test.  [Details](https://cockpit-logs.us-east-1.linodeobjects.com/pull-19363-20230921-075022-79cb9fd2-fedora-38-devel//Coverage/lcov/github-pr.diff.gcov.html)', 'comment_created': datetime.datetime(2023, 9, 21, 9, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cockpituous', 'type': 'User'}, {'comment_id': 1376327715, 'comment_body': 'Can it be truthy without being `true`? What other values can this have?', 'comment_created': datetime.datetime(2023, 10, 30, 14, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1376331168, 'comment_body': 'This is redundant and hard to understand. The `if` overwrites the initial `isChecked` in most cases. Please simplify using `??` and the duplicated/triplicated checks, and write as a single `const` or an `else` branch (for ""active non-VPN"" connection). This could also use a comment which cases exist.', 'comment_created': datetime.datetime(2023, 10, 30, 14, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1376333516, 'comment_body': 'This needs design. We deliberately called the initial button ""VPN"", not ""Wireguard"", as we anticipated that we\'re going to have more types. This somehow needs to get folded into ""Add VPN"".', 'comment_created': datetime.datetime(2023, 10, 30, 14, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1376339180, 'comment_body': ""You don't have to write that into a file at all. Build a string, and run it through pkg/lib/python.js's `spawn()`."", 'comment_created': datetime.datetime(2023, 10, 30, 14, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1376343077, 'comment_body': ""I would recommend to not create that file name on the JS side, it's too much churn. Let the Python script create it using `NamedTemporaryFile`, process it, read it, and return the JSON on its stdout (as it already does)."", 'comment_created': datetime.datetime(2023, 10, 30, 14, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1376344986, 'comment_body': 'Is that the defined API of `nmcli con import`?', 'comment_created': datetime.datetime(2023, 10, 30, 14, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1376346340, 'comment_body': 'Please use `with` to make sure the file gets closed in the end. ', 'comment_created': datetime.datetime(2023, 10, 30, 14, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1376399945, 'comment_body': ""Please try if you can do `file -` or `file /dev/stdin` and pipe the `${ovpn}` data into the process; then you don't need the configFile temp file at all. Otherwise use a NamedTemporaryFile."", 'comment_created': datetime.datetime(2023, 10, 30, 15, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1376400728, 'comment_body': 'I think you want `require` here, for a better error message.', 'comment_created': datetime.datetime(2023, 10, 30, 15, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1376402493, 'comment_body': 'Is ~/.cert an official NM or recommended OpenVPN path? That sounds rather sad, this stuff belongs into ~/.config/networkmanager or something ovpn specific.', 'comment_created': datetime.datetime(2023, 10, 30, 15, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1376406469, 'comment_body': 'This should probably be called ""Import""?', 'comment_created': datetime.datetime(2023, 10, 30, 15, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1376408655, 'comment_body': 'What now? :grin: ', 'comment_created': datetime.datetime(2023, 10, 30, 15, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}]","[{'commit_sha': '9a71bcbc753d26e129ed832061284995968c54f6', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1275075083,fix: check if virtualization is disabled and show warning,"## Machines: Show an alert when virtualization is disabled in BIOS/EFI

Cockpit-Machines displays a full-page alert when virtualization is disabled in the BIOS/EFI settings, preventing potential issues when running a VM.

![image](https://user-images.githubusercontent.com/10246/230377692-1a78e760-1bc6-4269-a393-ee2f06692af2.png)

Thanks to Subho Ghosh for this contribution.",True,980,https://api.github.com/repos/cockpit-project/cockpit-machines/pulls/980,https://github.com/cockpit-project/cockpit-machines/pull/980,closed,170,59,6,14,9,42,0,0,[],2023-03-14 13:45:28+00:00,2023-04-04 18:29:20+00:00,1831432.0,"21 days, 4:43:52","[{'comment_id': 1135644337, 'comment_body': 'please move a few lines up and change to use full path import (@patternfly/react-core/dist/esm/components .*), as we import other Patternfly components. There is a reason for that, check the git blame to figure out why if you want :) ', 'comment_created': datetime.datetime(2023, 3, 14, 14, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KKoukiou', 'type': 'User'}, {'comment_id': 1135646463, 'comment_body': 'This should be made translateable using `_("""")`', 'comment_created': datetime.datetime(2023, 3, 14, 14, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jelly', 'type': 'User'}, {'comment_id': 1135656215, 'comment_body': ""When there are no matches grep will fail and return 1 as exit code. This mades cockpit.script fails. Catching this is a bit akward. I'd rather have that we ignore the an error and just check if the output has `vmx`, `svm` or `0xc0f`.\r\n\r\nSo Adding a `|| true` on the end. Or as we are not that interested in the cpu flags anyway `&& enabled || true` and check if we got `enabled` in the output of `cockpit.script`.\r\n\r\nI assume you got the grep command from the [arch wiki](https://wiki.archlinux.org/title/KVM#Hardware_support). It would be good to know what `0xc0f` is? And if this also does the right thing on ARM/x390x.\r\n\r\n* vmx -> intel\r\n* svm -> amd\r\n* 0xc0f???\r\n\r\nNote that `--color=auto` is not required as we are not displaying the output anywhere."", 'comment_created': datetime.datetime(2023, 3, 14, 14, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jelly', 'type': 'User'}, {'comment_id': 1135671382, 'comment_body': 'replace title with: _(""Hardware virtualization extensions are disabled in BIOS"")\r\n\r\nI am not sure if we want to add the steps for fixing this inline in cockpit. @garrett @martinpitt what do you think? \r\nIt\'s quite of an edge scenario, as all new servers will come with virtualization enabled. And it\'s a lot of text to translate. ', 'comment_created': datetime.datetime(2023, 3, 14, 14, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'KKoukiou', 'type': 'User'}, {'comment_id': 1135675822, 'comment_body': '`grep -E ""vmx|svm"" /proc/cpuinfo` is enough. Color just highlights the text when users read it.\r\n\r\nHowever this will not trow an exception, if will just return an empty ouput. \r\n\r\nSo you need something like: \r\n````\r\ncockpit.script(""grep -E \'vmx|svm\'  /proc/cpuinfo"").then(output => setVirtualiationEnabled(!!output.trim()))\r\n```', 'comment_created': datetime.datetime(2023, 3, 14, 14, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'KKoukiou', 'type': 'User'}, {'comment_id': 1135748720, 'comment_body': 'It would be better to use `await cockpit.file(""/proc/cpuinfo"").read()` for this, and check the contents with e.g. `.includes(\'vmx\')`. This is better than having to deal with failing programs.', 'comment_created': datetime.datetime(2023, 3, 14, 15, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1135756044, 'comment_body': ""Perhaps we just link to https://cockpit-project.org/faq.html#virtual-machines ? That has more detailed instructions. But I don't have a strong opinion about it, showing it inline is okay. It would be good to test this though, perhaps the test can `rmmod kvm_intel` or so?"", 'comment_created': datetime.datetime(2023, 3, 14, 15, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1136648412, 'comment_body': 'Thanks for looking into it.\r\n\r\nIt throws an error at least in my case.\r\n\r\nAlso in grep manual (`man grep`):\r\n\r\n![image](https://user-images.githubusercontent.com/108616679/225239780-92c9654e-fc1c-4b72-85b0-f548b21ed010.png)\r\n\r\nI think it\'s better to not rely on exit codes or whether `grep` return an empty string. It might not even be consistent across systems.\r\n\r\nUsing `await cockpit.file(""/proc/cpuinfo"").read()` instead, suggested by @martinpitt, seems better to me.\r\n\r\nWhat do you think?', 'comment_created': datetime.datetime(2023, 3, 15, 7, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1136656121, 'comment_body': 'martins suggestion looks good!', 'comment_created': datetime.datetime(2023, 3, 15, 7, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'KKoukiou', 'type': 'User'}, {'comment_id': 1136657929, 'comment_body': ""Thanks for the feedbacks.\r\n\r\nLinking it to the FAQ sounds better to me because it avoids repeating instructions already present in the FAQ.\r\n\r\nI tested it by rebooting and toggling the settings in BIOS a few times. It was not ideal. I'll try `rmmod kvm_intel` . Thanks."", 'comment_created': datetime.datetime(2023, 3, 15, 7, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1137225734, 'comment_body': 'Used `_("""")`.', 'comment_created': datetime.datetime(2023, 3, 15, 14, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1137227281, 'comment_body': 'Used `await cockpit.file(""/proc/cpuinfo"").read()`.\r\n\r\n@jelly I found 0xc0f to be for ARM processors.', 'comment_created': datetime.datetime(2023, 3, 15, 14, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1137235916, 'comment_body': ""Implemented the suggested changes.\r\n\r\n@martinpitt `rmmod kvm_intel` doesn't seem to work. At least, it doesn't have an immediate effect."", 'comment_created': datetime.datetime(2023, 3, 15, 15, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1137246670, 'comment_body': ""Got it.\r\n\r\nI wonder how reliable the bundler's tree shaking capabilities are."", 'comment_created': datetime.datetime(2023, 3, 15, 15, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1139011557, 'comment_body': ""`rmmod kvm_intel` would't help as the kernel populates `/proc/cpuinfo` and `kvm_intel` is just a way to use the virtualisation extensions of the CPU, it could as well be Xen or Virtualbox. "", 'comment_created': datetime.datetime(2023, 3, 16, 16, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jelly', 'type': 'User'}, {'comment_id': 1139026960, 'comment_body': 'Alright, then I wonder what it would be for ppc/s390. So looking around there seems to be `virt-host-validate`:\r\n\r\n```\r\n[jelle@t14s][~/projects/cockpit-podman]%virt-host-validate qemu\r\n  QEMU: Checking for hardware virtualization                                 : PASS\r\n  QEMU: Checking if device /dev/kvm exists                                   : PASS\r\n  QEMU: Checking if device /dev/kvm is accessible                            : PASS\r\n  QEMU: Checking if device /dev/vhost-net exists                             : PASS\r\n  QEMU: Checking if device /dev/net/tun exists                               : PASS\r\n  QEMU: Checking for cgroup \'cpu\' controller support                         : PASS\r\n  QEMU: Checking for cgroup \'cpuacct\' controller support                     : PASS\r\n  QEMU: Checking for cgroup \'cpuset\' controller support                      : PASS\r\n  QEMU: Checking for cgroup \'memory\' controller support                      : PASS\r\n  QEMU: Checking for cgroup \'devices\' controller support                     : WARN (Enable \'devices\' in kernel Kconfig file or mount/enable cgroup controller in your system)\r\n  QEMU: Checking for cgroup \'blkio\' controller support                       : PASS\r\n  QEMU: Checking for device assignment IOMMU support                         : PASS\r\n  QEMU: Checking if IOMMU is enabled by kernel                               : WARN (IOMMU appears to be disabled in kernel. Add intel_iommu=on to kernel cmdline arguments)\r\n  QEMU: Checking for secure guest support                                    : WARN (Unknown if this platform has Secure Guest support)\r\n```\r\n\r\nFedora\r\n```\r\n[jelle@⬢ fedora-packager-latest][~]%dnf repoquery --whatprovides /usr/bin/virt-host-validate\r\nlibvirt-daemon-0:8.6.0-3.fc37.x86_64\r\n```\r\n\r\nArch\r\n```\r\n[jelle@t14s][~/projects/cockpit-podman]%pacman -F virt-host-validate\r\ncommunity/libvirt 1:9.0.0-1 [installed: 1:9.1.0-1]\r\n    usr/bin/virt-host-validate\r\n```\r\n\r\nDebian/Ubuntu\r\n```\r\n[jelle@⬢ ubuntu-toolbox-22.04][~]%sudo apt-file search /usr/bin/virt-host-validate\r\nperl: warning: Setting locale failed.\r\nperl: warning: Please check that your locale settings:\r\n        LANGUAGE = (unset),\r\n        LC_ALL = (unset),\r\n        LANG = ""en_GB.UTF-8""\r\n    are supported and installed on your system.\r\nperl: warning: Falling back to the standard locale (""C"").\r\nlibvirt-clients: /usr/bin/virt-host-validate\r\n```\r\n\r\n@KKoukiou what do you think, should we use this?', 'comment_created': datetime.datetime(2023, 3, 16, 16, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jelly', 'type': 'User'}, {'comment_id': 1142205651, 'comment_body': '@garrett can you help a bit with wording here?', 'comment_created': datetime.datetime(2023, 3, 20, 14, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'KKoukiou', 'type': 'User'}, {'comment_id': 1142263033, 'comment_body': ""It's definitely more rebust to use that, and it gives for free a few more checks. However, it's not realy machine readable output which raises the need the for the grepping. \r\n\r\n\r\nAll in all I think it's nice idea to use the virt-host-validate script, but I guess focus on the lines of interest for this PR (just the first line) "", 'comment_created': datetime.datetime(2023, 3, 20, 15, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'KKoukiou', 'type': 'User'}, {'comment_id': 1142275871, 'comment_body': 'This is the exact reason we moved to using tihs import style. Because importing from react-core would leave some imported but unused CSS in place. ', 'comment_created': datetime.datetime(2023, 3, 20, 15, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'KKoukiou', 'type': 'User'}, {'comment_id': 1144427819, 'comment_body': 'This doesn\'t work for translations -- you can\'t split a sentence in the middle and assume some ordering there, and that leading and trailling spaces are kept intact, and such. It is really difficult to translate a sentence with an embedded link. Please look at the [""Read more"" external link on the hwinfo page](https://github.com/cockpit-project/cockpit/blob/main/pkg/systemd/hwinfo.jsx#L212) for how to model this.', 'comment_created': datetime.datetime(2023, 3, 22, 8, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1144428866, 'comment_body': 'This magic number needs a comment with a link to some documentation or article which explains it.', 'comment_created': datetime.datetime(2023, 3, 22, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1144430990, 'comment_body': 'I\'d drop ""in BIOS"", as it\'s a bit confusing with UEFI machines. Also, one just needs *one* extension. Maybe just ""Hardware virtualization is disabled"", to keep this short and comprehensible?', 'comment_created': datetime.datetime(2023, 3, 22, 9, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1144434081, 'comment_body': 'Oh, and this needs a fallback if `flags` is `null` -- that can happen if  /proc/cpuinfo does not exist. Think containers, exotic architectures, etc.', 'comment_created': datetime.datetime(2023, 3, 22, 9, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1144438122, 'comment_body': 'Something like this?\r\n\r\n---\r\n\r\n**Virtualization support is not available**\r\n\r\nEnable virtualization support in BIOS/EFI settings.\r\n\r\nInstructions vary per manufacturer, but usually involves pressing a hot key such as ESC, F1, F12, or Del during boot. In the settings screen, look for ""virtualization"", ""VM"", ""VMX\', ""SVM"", ""VTX"", ""VTD"". It will be different on every computer. Enable any of these options. Consult your computer\'s manual for details.', 'comment_created': datetime.datetime(2023, 3, 22, 9, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'garrett', 'type': 'User'}, {'comment_id': 1144440682, 'comment_body': ""However, I thought this would be a blocker for using Cockpit-Machines, so it would be an empty state pattern, not an alert at the top of the page?\r\n\r\nI understand if you do have already-installed VMs if you're doing development, but someone not doing development and using Cockpit-Machines won't have this experience. If virtualization support is off in their BIOS/EFI settings, then they wouldn't have been able to create and install VMs. Therefore, it really blocks functionality."", 'comment_created': datetime.datetime(2023, 3, 22, 9, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'garrett', 'type': 'User'}, {'comment_id': 1144444026, 'comment_body': 'Oh, I suggested an alert at the top of the page on the issue. :sweat_smile: https://github.com/cockpit-project/cockpit-machines/issues/891#issuecomment-1353364015\r\n\r\n> Since a machine may have multiple VMs set up (due to the toggle changing, which happens during BIOS/EFI updates sometimes, or multiple attempts at installing VMs), I think the right place might be to have a big error at the top of the page (in an alert or banner) and still show the VMs otherwise. It should provide details about how to fix the error (rebooting, hitting a key, changing a value).\r\n\r\nAn alternate approach is to have an empty state, so it\'s in your face and have a bypass button, such as ""Ignore"" to be able to get to the machines to delete it.\r\n\r\nWDYT?', 'comment_created': datetime.datetime(2023, 3, 22, 9, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'garrett', 'type': 'User'}, {'comment_id': 1149190747, 'comment_body': 'Our tests do not run in a guaranteed order so this tests mount\'s something and the test below umounts which will only work if they are run after each other.\r\n\r\nWe should not rely on this behaviour as it\'s random. Our test library has a special `self.addCleanup` function which can call umount after the test is done.\r\n\r\nSo please add an `self.addCleanup(m.execute, ""umount /proc/cpuinfo || true"")`  the `|| true` is required in case the test fails to mount (should never happen imo)', 'comment_created': datetime.datetime(2023, 3, 27, 11, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jelly', 'type': 'User'}, {'comment_id': 1149278319, 'comment_body': 'Added the cleanup function. Thanks for the suggestion :)', 'comment_created': datetime.datetime(2023, 3, 27, 13, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1151126004, 'comment_body': ""If we keep this seperate file for this check, we can also move here 'testLibvirt from test/check-machines-lifecycle'\r\nas it's also doing checks for showing empty states for different reason.\r\n\r\nCan be also followup."", 'comment_created': datetime.datetime(2023, 3, 28, 20, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'KKoukiou', 'type': 'User'}, {'comment_id': 1151127977, 'comment_body': ""'Hardware virtualization is disabled' is more correct. is not available sounds like you can't undo it. THis was the suggestion from Martin and i like it."", 'comment_created': datetime.datetime(2023, 3, 28, 20, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'KKoukiou', 'type': 'User'}, {'comment_id': 1151129868, 'comment_body': 'The ` will not let the string be translated. It also works with "".\r\n\r\nIf you need to use nested "", then you need to escape these like \\"".', 'comment_created': datetime.datetime(2023, 3, 28, 20, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'KKoukiou', 'type': 'User'}, {'comment_id': 1151135326, 'comment_body': ""@garrett @martinpitt I feel that the suggestion text starting from 'Instructions' is too wordy, causing a lot of work for translations without even giving a very clear guidance.\r\nI would suggest to skip it and just stick with the 'Enable virtualization support...` "", 'comment_created': datetime.datetime(2023, 3, 28, 20, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'KKoukiou', 'type': 'User'}, {'comment_id': 1151137510, 'comment_body': ""Since we don't use any cookie and we store that in react state that 'ignore' wil last only till the user refreshes the page. I think it's fine as first pass, but we probably want to either use a cookie for remembering the option or reconsider the design and not hide the whole app behind this empty state. But fine for follow up."", 'comment_created': datetime.datetime(2023, 3, 28, 20, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'KKoukiou', 'type': 'User'}, {'comment_id': 1151137901, 'comment_body': 'No need for this test, all our other tests do indirectly test this :)', 'comment_created': datetime.datetime(2023, 3, 28, 20, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'KKoukiou', 'type': 'User'}, {'comment_id': 1151803374, 'comment_body': 'Yes, it looks better. Changed it.', 'comment_created': datetime.datetime(2023, 3, 29, 11, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1151803765, 'comment_body': '> The ` will not let the string be translated.\r\n\r\n` is just like "", right?\r\n\r\nAh it includes the line break and the indentation spaces. Maybe that prevents it from translation?\r\n\r\nUsing "" wouldn\'t allow the string to be broken in multiple lines. Escaping the line break \\\\ would be same as `. Maybe I should use + to concatenate the broken strings.', 'comment_created': datetime.datetime(2023, 3, 29, 11, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1151803945, 'comment_body': 'We could also use localStorage.', 'comment_created': datetime.datetime(2023, 3, 29, 11, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1151804796, 'comment_body': 'Okay :)', 'comment_created': datetime.datetime(2023, 3, 29, 11, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1151865820, 'comment_body': '> Hardware virtualization is disabled\r\n\r\nGood call. I like that too.', 'comment_created': datetime.datetime(2023, 3, 29, 12, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'garrett', 'type': 'User'}, {'comment_id': 1151873322, 'comment_body': '```suggestion\r\n                        {_(`Changing BIOS/EFI settings is specific to each manufacturer. It involves pressing a hotkey during boot (ESC, F1, F12, Del).\r\n                        Enable a setting called ""virtualization"", ""VM"", ""VMX\', ""SVM"", ""VTX"", ""VTD"".\r\n                        Consult your computer\'s manual for details.`)}\r\n```\r\n\r\nI\'ve tried to trim it down a bit. How\'s this?', 'comment_created': datetime.datetime(2023, 3, 29, 12, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'garrett', 'type': 'User'}, {'comment_id': 1151875472, 'comment_body': 'We probably would want to have ""Dismiss"" instead of ""Ignore"", until we can remember it via LocalStorage.', 'comment_created': datetime.datetime(2023, 3, 29, 12, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'garrett', 'type': 'User'}, {'comment_id': 1151939567, 'comment_body': 'Thanks for the feedback. I implemented saving the preference in localStorage.', 'comment_created': datetime.datetime(2023, 3, 29, 13, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}]","[{'commit_sha': 'a5e4a2722daa556aeae114ac080e2d8c2bf532a7', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c52d3f7cdd91109b83ed6779ec71844373e5fbdc', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b700adf1745a6f473944809d229ade4021f89197', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64efbc9232c4306db21db604e9828a61c225f35f', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77d1735c43a7001a692e97452c395f7a53326dfb', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b67a48f10d2ab6671181afbdc39d64629c8a4fdf', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea8b888a312c466e9aeb55d28f44f6de0e66d6b3', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '763bb3dafb16380086dcf831a100449e3c243e3f', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e82d02b338340fe135c44da7cab151c34e6f230', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92ae1cd9d7389e2d0457044adec4533aafacba5a', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad3820bab0980e3cd6cfbf7db3675a88934048e2', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ed222c6f1772795a36fc88ba6b2d43c36ceaf3f', 'committer_username': 'KKoukiou', 'committer_name': 'Katerina Koukiou', 'committer_email': 'k.koukiou@gmail.com', 'commit_date': datetime.datetime(2015, 10, 1, 8, 19, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd12f026103d9fc44b7a98730aa12b918d8a8ee64', 'committer_username': 'KKoukiou', 'committer_name': 'Katerina Koukiou', 'committer_email': 'k.koukiou@gmail.com', 'commit_date': datetime.datetime(2015, 10, 1, 8, 19, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e8929c9970cb8b2417b7df0cb96358fbce9bcd1', 'committer_username': 'KKoukiou', 'committer_name': 'Katerina Koukiou', 'committer_email': 'k.koukiou@gmail.com', 'commit_date': datetime.datetime(2015, 10, 1, 8, 19, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1308473116,Move from webpack to esbuild bundler,"Sync build.js with cockpit-podman and cockpit-machines.

Things I couldn't do and need assistance with:
1. Changing the `COCKPIT_REPO_COMMIT` hash (https://github.com/cockpit-project/starter-kit/blob/main/Makefile#L37)
2. Updating node_modules

Things I did differently:
1. Change `sourcemap` from `external` to `linked`. It fixes the issue of sourcemap not working. (https://esbuild.github.io/api/#sourcemap)
2. Update the`notify-end` esbuild plugin to also print the time it takes to finish building.
![image](https://user-images.githubusercontent.com/108616679/231076070-fa2e636a-3048-4638-9888-14579b65cf00.png)",True,636,https://api.github.com/repos/cockpit-project/starter-kit/pulls/636,https://github.com/cockpit-project/starter-kit/pull/636,closed,156,211,10,4,7,9,0,0,[],2023-04-11 06:42:36+00:00,2023-04-12 08:23:20+00:00,92444.0,"1 day, 1:40:44","[{'comment_id': 1163157515, 'comment_body': ""```suggestion\r\nimport os from 'node:os';\r\n\r\n```\r\n\r\nWe traditionally separate the imports into three blocks (with blank lines): platform internals, third party libraries, and finally our own local libraries. I.e. there should be a newline in between."", 'comment_created': datetime.datetime(2023, 4, 11, 17, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1163162123, 'comment_body': ""This is overkill here. We don't want to encourage doing subdirs in src/ actually. Let's please do the simple dir that we have in cockpit-podman, with the corresponding comment."", 'comment_created': datetime.datetime(2023, 4, 11, 18, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1163163196, 'comment_body': 'The ""4913"" is [common](https://github.com/b4winckler/vim/blob/1f611c1f921bc219b44272f13a298cd8d97aa6f0/src/fileio.c#L3704), but really weird -- also, this needs to (and does) get along with multiple events in a burst anyway, as editors commonly write a temp file, rename it, etc. Let\'s please drop this here.', 'comment_created': datetime.datetime(2023, 4, 11, 18, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1163698726, 'comment_body': ""Okay. I removed the newline in the last commit and introduced `node:` prefixes. I thought it'd be a modern way of separating the modules :)"", 'comment_created': datetime.datetime(2023, 4, 12, 6, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1163698767, 'comment_body': 'Sure, but could you please explain the reasoning here. Organizing components and scripts in subdirs is a good thing, right?', 'comment_created': datetime.datetime(2023, 4, 12, 6, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1163699082, 'comment_body': 'Cool, removed it :)', 'comment_created': datetime.datetime(2023, 4, 12, 6, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}, {'comment_id': 1163720895, 'comment_body': 'No no, my suggestion was to *add* a new line, like in the suggested patch above.', 'comment_created': datetime.datetime(2023, 4, 12, 7, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1163721498, 'comment_body': ""Also, feel free to keep the `node:` prefixes, they are even documented that way. I wasn't complaining about these at all :grin: "", 'comment_created': datetime.datetime(2023, 4, 12, 7, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1163722418, 'comment_body': ""It depends on the complexity of the project of course. Indeed cockpit-machines makes rather heavy use of that, but podman, certificates, etc. are simple enough to not need a hierarchy. But ok, I see that starter-kit should be generic, so let's keep it."", 'comment_created': datetime.datetime(2023, 4, 12, 7, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}]","[{'commit_sha': 'dd2245e204c2bf3e49fb712afee0e0dae12e65dd', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f94cf1c2ae8ac7e3e442d361bdea45da8cded475', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5445ba6b3207756e18cb9f3af7d1a8716e9606a2', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '441b1c6b0dfb9c1c56eebf224b8696d664ede212', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1312752077,"build.js: esbuild-wasm, build duration, fix sourcemap","Changes:
1. Add esbuild-wasm support for non x86 architectures.
2. Log the time it takes to finish building.
3. Fix sourcemap.",True,1028,https://api.github.com/repos/cockpit-project/cockpit-machines/pulls/1028,https://github.com/cockpit-project/cockpit-machines/pull/1028,closed,31,15,3,1,2,2,0,0,[],2023-04-13 15:52:14+00:00,2023-04-14 05:23:39+00:00,48685.0,13:31:25,"[{'comment_id': 1166278077, 'comment_body': 'This should be consistent with `""esbuild"": ""0.17.10""` above.', 'comment_created': datetime.datetime(2023, 4, 14, 4, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1166278606, 'comment_body': 'I fixed this while I was at it.', 'comment_created': datetime.datetime(2023, 4, 14, 5, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}]","[{'commit_sha': 'a6a497256c5f24f69677838529b07ed056d2efca', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1313998075,Move from webpack to esbuild bundler,"Sync with cockpit-machines and cockpit-podman.

Add esbuild-wasm to allow build in non x86 platforms.

Fix sourcemap.

Also bumped sass to fix performance regression.
https://github.com/sass/dart-sass/releases/tag/1.59.3",True,130,https://api.github.com/repos/cockpit-project/cockpit-certificates/pulls/130,https://github.com/cockpit-project/cockpit-certificates/pull/130,closed,132,207,9,2,2,0,0,0,[],2023-04-14 11:59:04+00:00,2023-04-18 12:42:05+00:00,348181.0,"4 days, 0:43:01",[],"[{'commit_sha': 'd22f1f3c25d97ac3778f94d9f8debf22fc76bf41', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6caa550c295c2793cc4c9a8f68cd324ed71f39d', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1314327660,"build.js: esbuild-wasm, build duration, fix sourcemap & no-useless-escape eslint warnings","Sync with cockpit-machines (https://github.com/cockpit-project/cockpit-machines/commit/00f191f45e2990c861230e79b33e92135b388bb5).

Also fixed no-useless-escape eslint warnings. Taken from https://github.com/cockpit-project/cockpit-machines/commit/e2f0e9fbda60e1adf29b24d764486ec96262f224.",True,1268,https://api.github.com/repos/cockpit-project/cockpit-podman/pulls/1268,https://github.com/cockpit-project/cockpit-podman/pull/1268,closed,30,15,3,5,2,0,0,0,[],2023-04-14 15:48:37+00:00,2023-04-16 07:09:10+00:00,141633.0,"1 day, 15:20:33",[],"[{'commit_sha': '7e7e8e2656241b443a6edddf43fbda444faba78b', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '062aa0c0d9c67611fa7438b67f6b0b9d9cef3652', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24006d9da8a3b5427e0d5a78547e23d3a5f0be61', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e37a49d90cdb657a6981dbcc0ea3ba5a60fa3e', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e73a1b82576ecbbcff54f1db4b2ea24d7b3ab668', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1312543959,Update to eslint 8,"Update ESLint and all it's plugins.

Synced `.eslintrc.json` with cockpit-machines and cockpit-podman. And fixed errors accordingly.",True,127,https://api.github.com/repos/cockpit-project/cockpit-certificates/pulls/127,https://github.com/cockpit-project/cockpit-certificates/pull/127,closed,118,123,6,5,5,0,0,0,[],2023-04-13 13:46:48+00:00,2023-04-14 05:06:15+00:00,55167.0,15:19:27,[],"[{'commit_sha': '605f2b8a3d7223ade0a3500bc6f32b97bc88d74f', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '587f03adef921d60e0344e8476d315e102ca102c', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8db042fc1a8884ca6f3c96fff626a950de129e26', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b44a6e5c26d4b9754bc486377b3eda451860a231', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a76fbea80b998235be0559d750defead86160fe0', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1352257107,Upgrade to react 18,,True,141,https://api.github.com/repos/cockpit-project/cockpit-certificates/pulls/141,https://github.com/cockpit-project/cockpit-certificates/pull/141,closed,13,8,3,1,1,0,0,0,[],2023-05-16 10:36:11+00:00,2023-05-22 12:21:49+00:00,524738.0,"6 days, 1:45:38",[],"[{'commit_sha': 'ecf0158ccb027b76459873169a69b97a4989d780', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1363433521,Upgrade to Patternfly v5 alpha,,True,145,https://api.github.com/repos/cockpit-project/cockpit-certificates/pulls/145,https://github.com/cockpit-project/cockpit-certificates/pull/145,closed,57,52,7,1,1,3,0,0,[],2023-05-24 16:12:02+00:00,2023-05-25 10:02:43+00:00,64241.0,17:50:41,"[{'comment_id': 1204502771, 'comment_body': 'This is too new, there are still lots of visual problems with these versions, see https://github.com/cockpit-project/cockpit/pull/18823 . Please go back to the versions that current cockpit main has.', 'comment_created': datetime.datetime(2023, 5, 24, 16, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1204504025, 'comment_body': 'Can you please include at least 43c3606ed474ea0f841551d7cf9770f38c88a5aa to pick up the pybridge flake fix? There are no other changes which would affect c-certificates, so that should be safe.', 'comment_created': datetime.datetime(2023, 5, 24, 16, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'martinpitt', 'type': 'User'}, {'comment_id': 1205086174, 'comment_body': ""Thanks for the hint. It resolved one of the UI issues which I'd been trying to fix since yesterday :)"", 'comment_created': datetime.datetime(2023, 5, 25, 7, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}]","[{'commit_sha': '0bc7816cc55a9c854aa6de4d1db04c734cac25d0', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1382823648,lib: fix plot zoom controls dropdown toggle,In PF5 event is the first parameter in callbacks,True,18898,https://api.github.com/repos/cockpit-project/cockpit/pulls/18898,https://github.com/cockpit-project/cockpit/pull/18898,closed,1,1,1,1,0,1,0,0,[],2023-06-07 14:37:45+00:00,2023-06-14 12:01:08+00:00,595403.0,"6 days, 21:23:23","[{'comment_id': 1221809806, 'comment_body': 'This added line is not executed by any test.  [Details](https://cockpit-logs.us-east-1.linodeobjects.com/pull-18898-20230607-143755-90f0272e-fedora-38-devel//Coverage/lcov/github-pr.diff.gcov.html)', 'comment_created': datetime.datetime(2023, 6, 7, 15, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'cockpituous', 'type': 'User'}]","[{'commit_sha': '90f0272ee8c467c3e98b11f9a38caa4fdbc3fbfe', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1383062775,terminal: fix unable to use scrollbar,"fixes #18859

Brought back some CSS from this [commit](https://github.com/cockpit-project/cockpit/commit/65471fd9fcbc09343fa66246889bb2c48032cf8a#diff-56769b147d9240af6baba616f66a2ac27cf67a40be3b8f7992400ffb48a0fc8aL31-L33) (replacing `height` with `block-size`).",True,18901,https://api.github.com/repos/cockpit-project/cockpit/pulls/18901,https://github.com/cockpit-project/cockpit/pull/18901,closed,5,0,1,1,3,2,0,0,[],2023-06-07 17:01:54+00:00,2023-07-06 11:03:09+00:00,2484075.0,"28 days, 18:01:15","[{'comment_id': 1223310734, 'comment_body': ""I think should exclude the text as I'm afraid this will depend on timing and cause a test flake. Thinking more about it this might be a bit to tricky to write a pixel test for.\r\n\r\nWe could try to ignore `.xterm-cursor-layer` but not sure if that matches\r\n\r\n"", 'comment_created': datetime.datetime(2023, 6, 8, 16, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jelly', 'type': 'User'}, {'comment_id': 1223828726, 'comment_body': 'Could you please explain what you mean by ""timing""?\r\n\r\nI agree that it\'s tricky. Taking a screenshot does not fully test whether dragging the scrollbar with the mouse works.', 'comment_created': datetime.datetime(2023, 6, 9, 4, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'subhoghoshX', 'type': 'User'}]","[{'commit_sha': '169378ec8ef3cfd21d00ff80b024983e1dd8740b', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1404661683,"network: fix a typo which causes the ""Primary"" select menu to not show up",,True,19003,https://api.github.com/repos/cockpit-project/cockpit/pulls/19003,https://github.com/cockpit-project/cockpit/pull/19003,closed,2,2,2,1,2,0,0,0,[],2023-06-23 08:01:07+00:00,2023-06-23 14:46:25+00:00,24318.0,6:45:18,[],"[{'commit_sha': '84dc87ddbc7fa26c0276a2802bd4c627e2f48a5c', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42
1515501029,Show toolbox & distrobox containers different in containers listing,"fixes #865

![image](https://github.com/cockpit-project/cockpit-podman/assets/108616679/57766555-f315-4035-99f4-d7ce24799ba7)

---

# Show toolbox & distrobox containers different in containers listing

![image](https://github.com/cockpit-project/cockpit-podman/assets/67428/36cc4aec-a90d-4930-b9ac-7e0e82a8c222)
",True,1409,https://api.github.com/repos/cockpit-project/cockpit-podman/pulls/1409,https://github.com/cockpit-project/cockpit-podman/pull/1409,closed,48,1,3,1,13,1,0,0,[],2023-09-14 11:07:27+00:00,2023-09-27 11:17:24+00:00,1123797.0,"13 days, 0:09:57","[{'comment_id': 1338196063, 'comment_body': ""As this is SCSS instead of CSS, it's also possible to write it with nesting, so the associated CSS values are grouped by type, like this:\r\n\r\n```scss\r\n.ct-badge-toolbox {\r\n    background-color: var(--pf-v5-global--palette--purple-100);\r\n    color: var(--pf-v5-global--palette--purple-600);\r\n\r\n    .pf-v5-theme-dark & {\r\n        background-color: var(--pf-v5-global--palette--purple-500);\r\n        color: white;\r\n    }\r\n}\r\n\r\n.ct-badge-distrobox {\r\n    background-color: var(--pf-v5-global--palette--gold-100);\r\n    color: var(--pf-v5-global--palette--gold-600);\r\n\r\n    .pf-v5-theme-dark & {\r\n        background-color: var(--pf-v5-global--palette--gold-500);\r\n        color: white;\r\n    }\r\n}\r\n```\r\n\r\nThis is also the way you'd write plain CSS with nesting, which is a new feature inspired by SCSS. https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_nesting/Using_CSS_nesting — but while native nesting is now available in all browsers (except Firefox extended support release), we can't use it yet. But we're using SCSS, so it's fine to use where we know it'll get compiled down. https://caniuse.com/css-nesting\r\n\r\nIt's not a big deal though; what's here in the PR is totally correct. :grin: "", 'comment_created': datetime.datetime(2023, 9, 27, 7, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'garrett', 'type': 'User'}]","[{'commit_sha': '1147609a8c4de71e9029ed1230399b3db3c4d58b', 'committer_username': 'subhoghoshX', 'committer_name': 'Subho', 'committer_email': None, 'commit_date': datetime.datetime(2022, 7, 3, 12, 36, 10, tzinfo=datetime.timezone.utc)}]",Subho,108616679,,User,,30,,10,42

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
14049216,cockpit,cockpit-project/cockpit,C,1085,10851,193,220,21839,428,7,51,"[{'id': 1570586919, 'number': 19521, 'closed': None, 'created': datetime.datetime(2023, 10, 24, 8, 23, 16, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 98, 'deletions': 13, 'state': 'open'}, {'id': 1558365851, 'number': 19489, 'closed': datetime.datetime(2023, 10, 16, 16, 29, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 16, 11, 5, 6, tzinfo=datetime.timezone.utc), 'time_taken': 19492.0, 'time_delta': '5:24:52', 'additions': 37, 'deletions': 10, 'state': 'closed'}, {'id': 1531826802, 'number': 19402, 'closed': datetime.datetime(2023, 9, 27, 9, 58, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 27, 7, 27, 9, tzinfo=datetime.timezone.utc), 'time_taken': 9098.0, 'time_delta': '2:31:38', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 1530962317, 'number': 19395, 'closed': datetime.datetime(2023, 9, 27, 5, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 26, 16, 39, 14, tzinfo=datetime.timezone.utc), 'time_taken': 47146.0, 'time_delta': '13:05:46', 'additions': 20, 'deletions': 3, 'state': 'closed'}, {'id': 1524301023, 'number': 19363, 'closed': None, 'created': datetime.datetime(2023, 9, 21, 7, 49, 55, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 452, 'deletions': 5, 'state': 'open'}, {'id': 1517044524, 'number': 19337, 'closed': datetime.datetime(2023, 10, 13, 12, 27, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 15, 9, 50, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2428676.0, 'time_delta': '28 days, 2:37:56', 'additions': 59, 'deletions': 26, 'state': 'closed'}, {'id': 1502671983, 'number': 19284, 'closed': datetime.datetime(2023, 9, 5, 14, 19, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 5, 11, 51, 28, tzinfo=datetime.timezone.utc), 'time_taken': 8881.0, 'time_delta': '2:28:01', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1482591719, 'number': 19209, 'closed': datetime.datetime(2023, 9, 4, 10, 56, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 21, 10, 13, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1212148.0, 'time_delta': '14 days, 0:42:28', 'additions': 23, 'deletions': 19, 'state': 'closed'}, {'id': 1462777498, 'number': 19174, 'closed': datetime.datetime(2023, 8, 4, 17, 35, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 4, 11, 26, 47, tzinfo=datetime.timezone.utc), 'time_taken': 22143.0, 'time_delta': '6:09:03', 'additions': 9, 'deletions': 0, 'state': 'closed'}, {'id': 1457495941, 'number': 19156, 'closed': datetime.datetime(2023, 8, 1, 15, 47, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 1, 6, 50, 52, tzinfo=datetime.timezone.utc), 'time_taken': 32204.0, 'time_delta': '8:56:44', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1446977398, 'number': 19131, 'closed': datetime.datetime(2023, 7, 27, 8, 45, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 24, 15, 53, 25, tzinfo=datetime.timezone.utc), 'time_taken': 233551.0, 'time_delta': '2 days, 16:52:31', 'additions': 19, 'deletions': 3, 'state': 'closed'}, {'id': 1408269149, 'number': 19024, 'closed': datetime.datetime(2023, 9, 13, 9, 36, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 26, 16, 9, 47, tzinfo=datetime.timezone.utc), 'time_taken': 6802023.0, 'time_delta': '78 days, 17:27:03', 'additions': 700, 'deletions': 16, 'state': 'closed'}, {'id': 1404661683, 'number': 19003, 'closed': datetime.datetime(2023, 6, 23, 14, 46, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 23, 8, 1, 7, tzinfo=datetime.timezone.utc), 'time_taken': 24318.0, 'time_delta': '6:45:18', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1383062775, 'number': 18901, 'closed': datetime.datetime(2023, 7, 6, 11, 3, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 7, 17, 1, 54, tzinfo=datetime.timezone.utc), 'time_taken': 2484075.0, 'time_delta': '28 days, 18:01:15', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 1382823648, 'number': 18898, 'closed': datetime.datetime(2023, 6, 14, 12, 1, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 7, 14, 37, 45, tzinfo=datetime.timezone.utc), 'time_taken': 595403.0, 'time_delta': '6 days, 21:23:23', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
348997471,cockpit-machines,cockpit-project/cockpit-machines,JavaScript,71,274,17,30,1814,104,2,12,"[{'id': 1318655833, 'number': 1035, 'closed': None, 'created': datetime.datetime(2023, 4, 18, 16, 32, 53, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 69, 'deletions': 11, 'state': 'open'}, {'id': 1312752077, 'number': 1028, 'closed': datetime.datetime(2023, 4, 14, 5, 23, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 13, 15, 52, 14, tzinfo=datetime.timezone.utc), 'time_taken': 48685.0, 'time_delta': '13:31:25', 'additions': 31, 'deletions': 15, 'state': 'closed'}, {'id': 1304124315, 'number': 1011, 'closed': datetime.datetime(2023, 4, 6, 10, 20, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 6, 5, 15, 42, tzinfo=datetime.timezone.utc), 'time_taken': 18303.0, 'time_delta': '5:05:03', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 1275075083, 'number': 980, 'closed': datetime.datetime(2023, 4, 4, 18, 29, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 14, 13, 45, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1831432.0, 'time_delta': '21 days, 4:43:52', 'additions': 170, 'deletions': 59, 'state': 'closed'}]"
94331589,starter-kit,cockpit-project/starter-kit,Makefile,90,130,16,25,780,1,2,1,"[{'id': 1966638744, 'number': 921, 'closed': datetime.datetime(2024, 7, 12, 13, 33, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 12, 13, 11, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1310.0, 'time_delta': '0:21:50', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1308473116, 'number': 636, 'closed': datetime.datetime(2023, 4, 12, 8, 23, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 11, 6, 42, 36, tzinfo=datetime.timezone.utc), 'time_taken': 92444.0, 'time_delta': '1 day, 1:40:44', 'additions': 156, 'deletions': 211, 'state': 'closed'}]"
241865481,cockpit-certificates,cockpit-project/cockpit-certificates,JavaScript,13,65,11,24,576,2,1,0,"[{'id': 1363433521, 'number': 145, 'closed': datetime.datetime(2023, 5, 25, 10, 2, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 24, 16, 12, 2, tzinfo=datetime.timezone.utc), 'time_taken': 64241.0, 'time_delta': '17:50:41', 'additions': 57, 'deletions': 52, 'state': 'closed'}, {'id': 1359110896, 'number': 144, 'closed': datetime.datetime(2023, 5, 22, 12, 52, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 22, 11, 56, 55, tzinfo=datetime.timezone.utc), 'time_taken': 3317.0, 'time_delta': '0:55:17', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1352257107, 'number': 141, 'closed': datetime.datetime(2023, 5, 22, 12, 21, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 16, 10, 36, 11, tzinfo=datetime.timezone.utc), 'time_taken': 524738.0, 'time_delta': '6 days, 1:45:38', 'additions': 13, 'deletions': 8, 'state': 'closed'}, {'id': 1313998075, 'number': 130, 'closed': datetime.datetime(2023, 4, 18, 12, 42, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 14, 11, 59, 4, tzinfo=datetime.timezone.utc), 'time_taken': 348181.0, 'time_delta': '4 days, 0:43:01', 'additions': 132, 'deletions': 207, 'state': 'closed'}, {'id': 1313759466, 'number': 129, 'closed': datetime.datetime(2023, 4, 14, 9, 35, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 14, 9, 7, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1684.0, 'time_delta': '0:28:04', 'additions': 0, 'deletions': 3, 'state': 'closed'}, {'id': 1312729873, 'number': 128, 'closed': datetime.datetime(2023, 4, 13, 16, 4, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 13, 15, 36, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1648.0, 'time_delta': '0:27:28', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1312543959, 'number': 127, 'closed': datetime.datetime(2023, 4, 14, 5, 6, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 13, 13, 46, 48, tzinfo=datetime.timezone.utc), 'time_taken': 55167.0, 'time_delta': '15:19:27', 'additions': 118, 'deletions': 123, 'state': 'closed'}]"
139540556,cockpit-podman,cockpit-project/cockpit-podman,JavaScript,88,424,20,38,1832,71,2,7,"[{'id': 1555623898, 'number': 1451, 'closed': datetime.datetime(2023, 11, 15, 11, 52, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 13, 9, 57, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2858136.0, 'time_delta': '33 days, 1:55:36', 'additions': 46, 'deletions': 29, 'state': 'closed'}, {'id': 1515501029, 'number': 1409, 'closed': datetime.datetime(2023, 9, 27, 11, 17, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 14, 11, 7, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1123797.0, 'time_delta': '13 days, 0:09:57', 'additions': 48, 'deletions': 1, 'state': 'closed'}, {'id': 1514297806, 'number': 1406, 'closed': datetime.datetime(2023, 11, 21, 15, 3, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 13, 17, 42, 7, tzinfo=datetime.timezone.utc), 'time_taken': 5952065.0, 'time_delta': '68 days, 21:21:05', 'additions': 28, 'deletions': 4, 'state': 'closed'}, {'id': 1314327660, 'number': 1268, 'closed': datetime.datetime(2023, 4, 16, 7, 9, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 14, 15, 48, 37, tzinfo=datetime.timezone.utc), 'time_taken': 141633.0, 'time_delta': '1 day, 15:20:33', 'additions': 30, 'deletions': 15, 'state': 'closed'}, {'id': 1279042456, 'number': 1230, 'closed': datetime.datetime(2023, 3, 20, 10, 39, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 16, 17, 44, 36, tzinfo=datetime.timezone.utc), 'time_taken': 320103.0, 'time_delta': '3 days, 16:55:03', 'additions': 4, 'deletions': 4, 'state': 'closed'}]"
