pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
970225917,Define traits,"Make the public-facing traits as generic and as simple as possible.

This PR stems from discussion https://github.com/umccr/BioSerDe/discussions/8#discussioncomment-2968874.",False,10,https://api.github.com/repos/umccr/BioSerDe/pulls/10,https://github.com/umccr/BioSerDe/pull/10,closed,96,1924,19,2,1,0,0,0,[],2022-06-17 05:14:42+00:00,2022-06-24 06:05:58+00:00,607876.0,"7 days, 0:51:16",[],"[{'commit_sha': '008ea587137102de6e3f4d2de88f0b06f109bdda', 'committer_username': 'brainstorm', 'committer_name': 'Roman Valls Guimera', 'committer_email': None, 'commit_date': datetime.datetime(2010, 1, 3, 8, 31, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa595fc80ce2b21b9ac79e0f61638a0966a301ae', 'committer_username': 'brainstorm', 'committer_name': 'Roman Valls Guimera', 'committer_email': None, 'commit_date': datetime.datetime(2010, 1, 3, 8, 31, 4, tzinfo=datetime.timezone.utc)}]",Roman Valls Guimera,175587,,User,,66,,886,274
977612840,Showcase Generic Actions via Demo,"Inspired by `serde_way` branch.
Part of the #8 discussion.

Showcases the need for some generic implementation of how to deal with particular records.

I make a particular proposal to use a trait that will be needed to run in the generic pipelines, which is not the full point of this draft, but it is a suggestion:

```
// // This is what it seems like we should do
// struct ModernBioFormat<F1: BioSerdeRead, F2: BioSerdeWrite> {
//     reader: F1,
//     writer: F2,
//     origin: String,
//     destination: String,
// }
```

Also it raises a problem with the current plan of how to write the many different formats: noodles will be prepared to use it's own struct definitions, which will be very costly in our conversion pipelines (but that may be just something that we will need to accept)

```
// This points out a problem:
//      even if we solve generic writers and readers
//      the bulk of our work will be to make the <write_record> itself
//
// In the specific case of Bed, it asks for specifically a bed::Record type.
//      which is a problem, because it forces our hand to conform
//      to a specific implementation
//      whereas being able to receive a generic trait of some sorts
//      would enable us to pass the IR main struct directly
//      (maybe we can already rehearse making a noodles PR in that sense
//          but that would require us to already have the IR definition)
mbf.writer.write_record::<3>(&record)?; 
```",False,11,https://api.github.com/repos/umccr/BioSerDe/pulls/11,https://github.com/umccr/BioSerDe/pull/11,closed,80,53,3,1,1,0,0,0,[],2022-06-23 20:38:16+00:00,2022-06-29 06:07:50+00:00,466174.0,"5 days, 9:29:34",[],"[{'commit_sha': '0963cd834899ec81c599a0f3f1ec858e4748d2c6', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}]",Gabriel Simonetto,42247511,,User,,43,,68,48
985838872,[BioSerDe-13] - Initial bed serde implementation,"Twin PR on BioSerDe showcasing usage of this branch: https://github.com/umccr/BioSerDe/pull/14

TODO:
- [x] - ser: impl Serialize for Record<3>
- [x] - ser: specialized Serializer (thanks roman!)
- [x] - ser: pub fn to_string<T>(value: &T) -> Result<String>
- [x] - de: pub fn from_reader<R>(reader: &mut Reader<R>) -> Vec<Record<3>>
- [x] - de: pub fn from_string<R>(input: Into<&str>) -> Vec<Record<3>>
    --> solved by: `let result: Vec<Record::<3>> = from_str(input).unwrap();`
    --> doesn't work if string has whitespaces, as described by:
    --> `test de::serde_tests::test_bed_deserialization_with_whitespaces ... ignored`
- [x] - de: specialized Deserializer
- [ ] - introduce Record<N> generalizations
- [x] - review serialization display (is it ok to display backslashes?: `""{\""chrom\"":\""chr7\""...""`)
    --> `Display` doesn't display backslashes, it's `Debug` that does
- [x] - review error handling (TODO's on de.rs)

",True,1,https://api.github.com/repos/umccr/noodles/pulls/1,https://github.com/umccr/noodles/pull/1,closed,1063,56,3,14,7,15,0,0,[],2022-07-03 23:32:18+00:00,2022-09-07 18:48:14+00:00,5685356.0,"65 days, 19:15:56","[{'comment_id': 915536832, 'comment_body': ""This shouldn't fail silently IMO and @mmalenic's: a single record failing should trigger an error."", 'comment_created': datetime.datetime(2022, 7, 7, 7, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'brainstorm', 'type': 'User'}, {'comment_id': 918011628, 'comment_body': 'In the future you might as well `.unwrap()`. Would save you from having to write an informative errors.', 'comment_created': datetime.datetime(2022, 7, 11, 14, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'multimeric', 'type': 'User'}, {'comment_id': 920434663, 'comment_body': 'Fixed and tested on `test_from_reader_reject`', 'comment_created': datetime.datetime(2022, 7, 13, 19, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'GabrielSimonetto', 'type': 'User'}, {'comment_id': 920435369, 'comment_body': ""Fixed, I think it's cleaner aswell\r\n\r\nThis part of the code should hopefully change anyway, to accomodate for better errors (more details on my comment below)"", 'comment_created': datetime.datetime(2022, 7, 13, 19, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'GabrielSimonetto', 'type': 'User'}, {'comment_id': 920838278, 'comment_body': ""V::Error should extend from Rust's standard error, which means `map_err` will work with a bit of formatting. There are some functions in [`serde::de::Error`](https://docs.serde.rs/serde/de/trait.Error.html) for specific error types, or the `custom` function would work too.\r\n\r\nFor example, replace the `.unwrap()` with `.map_err(|err| de::Error::custom(err))`, and remove the enclosing `Ok` to turn this into the correct error type."", 'comment_created': datetime.datetime(2022, 7, 14, 7, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 920839203, 'comment_body': 'I think it would be clearer to avoid nesting these `impl` blocks.', 'comment_created': datetime.datetime(2022, 7, 14, 7, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 920852611, 'comment_body': 'Same as the comment [above](https://github.com/umccr/noodles/pull/1#discussion_r920838278).', 'comment_created': datetime.datetime(2022, 7, 14, 7, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 922908999, 'comment_body': ""This is open for discussion, but I feel like `'a` is the conventional lifetime variable to use, and you only need unique names like this when multiple lifetimes are present."", 'comment_created': datetime.datetime(2022, 7, 17, 23, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'multimeric', 'type': 'User'}, {'comment_id': 922912494, 'comment_body': ""Just nitpick but doesn't seem to be the case on SerDe, its documentation states `'de` for deserializer-related traits, therefore I'd follow its conventions... `'a` is for more generic (canonical/conventional) as seen elsewhere."", 'comment_created': datetime.datetime(2022, 7, 17, 23, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'brainstorm', 'type': 'User'}, {'comment_id': 922913228, 'comment_body': ""Indeed, that's fair."", 'comment_created': datetime.datetime(2022, 7, 17, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'multimeric', 'type': 'User'}, {'comment_id': 923500397, 'comment_body': ""Wow, you're right, I missed the double nesting of results lol\r\n\r\nUsed your suggestion, everything works (:"", 'comment_created': datetime.datetime(2022, 7, 18, 15, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'GabrielSimonetto', 'type': 'User'}, {'comment_id': 923502086, 'comment_body': 'Done, [is it better](https://github.com/umccr/noodles/pull/1/commits/6cc2c6917166f6b5731e410670055f0ff8eb43d3)?', 'comment_created': datetime.datetime(2022, 7, 18, 15, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'GabrielSimonetto', 'type': 'User'}, {'comment_id': 923922024, 'comment_body': 'Yep, looks good now! :slightly_smiling_face: ', 'comment_created': datetime.datetime(2022, 7, 18, 22, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 925009551, 'comment_body': 'One approach to allow lowercase deserialisation is to use the [rename_all](https://serde.rs/container-attrs.html#rename_all) container attribute. This works for serialisation too.\r\n```rust\r\n#[derive(Deserialize, Debug)]\r\n#[serde(rename_all = ""lowercase"")]\r\nenum Field { Chrom, Start, End }\r\n```\r\nNote, fields can be renamed arbitrarily using the [rename](https://serde.rs/field-attrs.html#rename) field attribute, or multiple valid names can be assigned using [alias](https://serde.rs/field-attrs.html#alias).', 'comment_created': datetime.datetime(2022, 7, 19, 22, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 925015599, 'comment_body': ""`bed::Record` can be changed in `record.rs`.\r\nhttps://github.com/umccr/noodles/blob/07bd3d0b984157e39e3f09c2b40996f1f1725ff4/noodles-bed/src/record.rs#L111-L116\r\n\r\nFor example, to ignore the two extra structs, use the [flatten](https://serde.rs/field-attrs.html#flatten) field attribute. This means that during serialisation/deserialisation, `standard_fields` and `optional_fields` won't be present. See the example [here](https://serde.rs/attr-flatten.html).\r\n```rust\r\n/// A BED record.\r\n#[derive(Clone, Debug, Eq, PartialEq, Serialize, Deserialize)]\r\npub struct Record<const N: u8> {\r\n    #[serde(flatten)]\r\n    standard_fields: StandardFields,\r\n    #[serde(flatten)]\r\n    optional_fields: OptionalFields,\r\n}\r\n```"", 'comment_created': datetime.datetime(2022, 7, 19, 22, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}]","[{'commit_sha': '41cdab5306923954b9f4b6aee0da82c5c9c498ce', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17a74795b7cb199249079d25a9f9cb9aeabddfcc', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b7c6229fb5aaabab35aac6eee20420d26b3345f', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8500ffbf340904cd883851be356388d90d02d9ea', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a83fcbdd1c6d3701f16c250de12bab92c8b97844', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9a5ddc5d4919a424f10d67389867d1112b95576', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14960da9be35db6665d4ae543e44ffc95e02d6f7', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd84c9e5125079c4f04182eefeac7a40e63c096ed', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb52d40b8dff63c1e0fda1c8facda96f1f511a35', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ea276958aeb3f9df454965ad185bdbe0f0f462e', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '114abb1f2348f931d8dda31a0f3ec4cdffd73c68', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c90000959e9de6694a09a9ebce299d53a1a6df21', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afb913029ec4df73d35c5b8564539d263a1b83f6', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07bd3d0b984157e39e3f09c2b40996f1f1725ff4', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}]",Gabriel Simonetto,42247511,,User,,43,,68,48
985838872,[BioSerDe-13] - Initial bed serde implementation,"Twin PR on BioSerDe showcasing usage of this branch: https://github.com/umccr/BioSerDe/pull/14

TODO:
- [x] - ser: impl Serialize for Record<3>
- [x] - ser: specialized Serializer (thanks roman!)
- [x] - ser: pub fn to_string<T>(value: &T) -> Result<String>
- [x] - de: pub fn from_reader<R>(reader: &mut Reader<R>) -> Vec<Record<3>>
- [x] - de: pub fn from_string<R>(input: Into<&str>) -> Vec<Record<3>>
    --> solved by: `let result: Vec<Record::<3>> = from_str(input).unwrap();`
    --> doesn't work if string has whitespaces, as described by:
    --> `test de::serde_tests::test_bed_deserialization_with_whitespaces ... ignored`
- [x] - de: specialized Deserializer
- [ ] - introduce Record<N> generalizations
- [x] - review serialization display (is it ok to display backslashes?: `""{\""chrom\"":\""chr7\""...""`)
    --> `Display` doesn't display backslashes, it's `Debug` that does
- [x] - review error handling (TODO's on de.rs)

",True,1,https://api.github.com/repos/umccr/noodles/pulls/1,https://github.com/umccr/noodles/pull/1,closed,1063,56,3,14,7,15,0,0,[],2022-07-03 23:32:18+00:00,2022-09-07 18:48:14+00:00,5685356.0,"65 days, 19:15:56","[{'comment_id': 915536832, 'comment_body': ""This shouldn't fail silently IMO and @mmalenic's: a single record failing should trigger an error."", 'comment_created': datetime.datetime(2022, 7, 7, 7, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'brainstorm', 'type': 'User'}, {'comment_id': 918011628, 'comment_body': 'In the future you might as well `.unwrap()`. Would save you from having to write an informative errors.', 'comment_created': datetime.datetime(2022, 7, 11, 14, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'multimeric', 'type': 'User'}, {'comment_id': 920434663, 'comment_body': 'Fixed and tested on `test_from_reader_reject`', 'comment_created': datetime.datetime(2022, 7, 13, 19, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'GabrielSimonetto', 'type': 'User'}, {'comment_id': 920435369, 'comment_body': ""Fixed, I think it's cleaner aswell\r\n\r\nThis part of the code should hopefully change anyway, to accomodate for better errors (more details on my comment below)"", 'comment_created': datetime.datetime(2022, 7, 13, 19, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'GabrielSimonetto', 'type': 'User'}, {'comment_id': 920838278, 'comment_body': ""V::Error should extend from Rust's standard error, which means `map_err` will work with a bit of formatting. There are some functions in [`serde::de::Error`](https://docs.serde.rs/serde/de/trait.Error.html) for specific error types, or the `custom` function would work too.\r\n\r\nFor example, replace the `.unwrap()` with `.map_err(|err| de::Error::custom(err))`, and remove the enclosing `Ok` to turn this into the correct error type."", 'comment_created': datetime.datetime(2022, 7, 14, 7, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 920839203, 'comment_body': 'I think it would be clearer to avoid nesting these `impl` blocks.', 'comment_created': datetime.datetime(2022, 7, 14, 7, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 920852611, 'comment_body': 'Same as the comment [above](https://github.com/umccr/noodles/pull/1#discussion_r920838278).', 'comment_created': datetime.datetime(2022, 7, 14, 7, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 922908999, 'comment_body': ""This is open for discussion, but I feel like `'a` is the conventional lifetime variable to use, and you only need unique names like this when multiple lifetimes are present."", 'comment_created': datetime.datetime(2022, 7, 17, 23, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'multimeric', 'type': 'User'}, {'comment_id': 922912494, 'comment_body': ""Just nitpick but doesn't seem to be the case on SerDe, its documentation states `'de` for deserializer-related traits, therefore I'd follow its conventions... `'a` is for more generic (canonical/conventional) as seen elsewhere."", 'comment_created': datetime.datetime(2022, 7, 17, 23, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'brainstorm', 'type': 'User'}, {'comment_id': 922913228, 'comment_body': ""Indeed, that's fair."", 'comment_created': datetime.datetime(2022, 7, 17, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'multimeric', 'type': 'User'}, {'comment_id': 923500397, 'comment_body': ""Wow, you're right, I missed the double nesting of results lol\r\n\r\nUsed your suggestion, everything works (:"", 'comment_created': datetime.datetime(2022, 7, 18, 15, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'GabrielSimonetto', 'type': 'User'}, {'comment_id': 923502086, 'comment_body': 'Done, [is it better](https://github.com/umccr/noodles/pull/1/commits/6cc2c6917166f6b5731e410670055f0ff8eb43d3)?', 'comment_created': datetime.datetime(2022, 7, 18, 15, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'GabrielSimonetto', 'type': 'User'}, {'comment_id': 923922024, 'comment_body': 'Yep, looks good now! :slightly_smiling_face: ', 'comment_created': datetime.datetime(2022, 7, 18, 22, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 925009551, 'comment_body': 'One approach to allow lowercase deserialisation is to use the [rename_all](https://serde.rs/container-attrs.html#rename_all) container attribute. This works for serialisation too.\r\n```rust\r\n#[derive(Deserialize, Debug)]\r\n#[serde(rename_all = ""lowercase"")]\r\nenum Field { Chrom, Start, End }\r\n```\r\nNote, fields can be renamed arbitrarily using the [rename](https://serde.rs/field-attrs.html#rename) field attribute, or multiple valid names can be assigned using [alias](https://serde.rs/field-attrs.html#alias).', 'comment_created': datetime.datetime(2022, 7, 19, 22, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 925015599, 'comment_body': ""`bed::Record` can be changed in `record.rs`.\r\nhttps://github.com/umccr/noodles/blob/07bd3d0b984157e39e3f09c2b40996f1f1725ff4/noodles-bed/src/record.rs#L111-L116\r\n\r\nFor example, to ignore the two extra structs, use the [flatten](https://serde.rs/field-attrs.html#flatten) field attribute. This means that during serialisation/deserialisation, `standard_fields` and `optional_fields` won't be present. See the example [here](https://serde.rs/attr-flatten.html).\r\n```rust\r\n/// A BED record.\r\n#[derive(Clone, Debug, Eq, PartialEq, Serialize, Deserialize)]\r\npub struct Record<const N: u8> {\r\n    #[serde(flatten)]\r\n    standard_fields: StandardFields,\r\n    #[serde(flatten)]\r\n    optional_fields: OptionalFields,\r\n}\r\n```"", 'comment_created': datetime.datetime(2022, 7, 19, 22, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}]","[{'commit_sha': '41cdab5306923954b9f4b6aee0da82c5c9c498ce', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17a74795b7cb199249079d25a9f9cb9aeabddfcc', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b7c6229fb5aaabab35aac6eee20420d26b3345f', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8500ffbf340904cd883851be356388d90d02d9ea', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a83fcbdd1c6d3701f16c250de12bab92c8b97844', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9a5ddc5d4919a424f10d67389867d1112b95576', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14960da9be35db6665d4ae543e44ffc95e02d6f7', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd84c9e5125079c4f04182eefeac7a40e63c096ed', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb52d40b8dff63c1e0fda1c8facda96f1f511a35', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ea276958aeb3f9df454965ad185bdbe0f0f462e', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '114abb1f2348f931d8dda31a0f3ec4cdffd73c68', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c90000959e9de6694a09a9ebce299d53a1a6df21', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afb913029ec4df73d35c5b8564539d263a1b83f6', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07bd3d0b984157e39e3f09c2b40996f1f1725ff4', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}]",Gabriel Simonetto,42247511,,User,,43,,68,48
1025860374,Update to Marko's API,"Following the [ideas commented on the main PR](https://github.com/umccr/noodles/pull/1#pullrequestreview-1048929529), @mmalenic set up the environment where serde-json is derived, and I am implementing serde for the regular bed format.

Currently, the serializer is printing out the fields that belong to the other Bed<N> formats , which makes it incompatible with the reader and writer already implemented by noodles:

```
// Serializer's current output
""sq0\t8\t13\tnull\tnull\tnull\t8\t13\tnull\t\n""

// Noodles output
""sq0\t8\t13\n""

// Edit: solved
```

The `serde-json` solution also behaves like this, but since we are creating that representation it's probably fine:

`{""chrom"":""sq0"",""start"":8,""end"":13,""name"":null,""score"":null,""strand"":null,""thick_start"":8,""thick_end"":13,""color"":null,""blocks"":[]}`

One problem that it currently has is that it uses a `thick_start` and `thick_end` which is incompatible with the noodles definition of reusing the `start` and `end` values. I haven't found out how to make the default function in serde derive use an argument (the start value, for example):

```
// Current
fn default_position() -> Position {
    Position::new(1).unwrap()
}

// Probably desired?
fn default_position_thick_start(start: Position) -> Position {
    start
}
```

Other than that, I am exposing the problem of our serializer here, but it seems pretty clear to me that the fields which don't belong to Bed<3> can't be present in the serialization, this might however introduce the problem of having specific serialization processes for each Bed<N> format. Noodles [already does this in `record.rs`](https://github.com/umccr/noodles/blob/gabriel/example_serialization_deserialization/noodles-bed/src/record.rs#L141) to make every higher version of bed inherit the fuctionality from the lesser versions

```
impl BedN<3> for Record<3> {}
impl BedN<3> for Record<4> {}
impl BedN<3> for Record<5> {}
...
```

But at that point it becomes clear that all we want is for the serializer to call the `Display` method from `Record` the question becomes: how do we represent that in the serializing entrypoints, and also, can we change it?

```
pub fn to_string<T>(value: &T) -> Result<String>
where
    // T: Serialize // Current signature
    T: Serialize + BedN<3> + std::fmt::Display, // This would prevent a Vec<Record<_>> from being allowed.
{
    // TODO: How to generalize Bed<N>
    let mut serializer = Record3Serializer {
        output: String::new(),
    };
    value.serialize(&mut serializer)?;
    Ok(serializer.output)
}
```

Notice that we now have to call `record.to_string()` inside the serializer. Which is probably a problem, since the serializer only knows types from the data-format, and probably doesn't have a way to know which struct its dealing with.

At this point I realized that this couldn't be this hard, and to be fair, I haven't realized that now that we are serializing to the actual bed format, marko's previous suggestions like [serde_with](https://docs.rs/serde_with/latest/serde_with/) and [serde_state](https://docs.rs/serde_state/latest/serde_state/), would now make a lot of sense.

Still I wanted to showcase what I have been working on so you guys can correct any big blunders I made in my decision process. 

========= update ==========

[serde_with](https://docs.rs/serde_with/latest/serde_with/) worked wonders, we are now reusing a lot of code directly from noodles, and this should be replicable to the other data formats.

It's still needed to implement a `Serializer` and `Deserializer` which does the minimal work of basically parsing each element on a sequence, and calling `Display` or `FromStr` on each element. The `Deserializer` can be really lean thanks to the `forward_to_deserialize_any!` macro, the `Serializer` however doesn't have anything similar, and needs to implement a lot of `unreachable!` functions because of the trait signature. Maybe there is something in the ecosystem for such a bare-bones use case, but I am not aware of it.",True,2,https://api.github.com/repos/umccr/noodles/pulls/2,https://github.com/umccr/noodles/pull/2,closed,755,353,8,35,3,10,0,0,[],2022-08-14 18:15:56+00:00,2022-09-07 18:48:12+00:00,2075536.0,"24 days, 0:32:16","[{'comment_id': 949969398, 'comment_body': 'To avoid serializing records manually, you could keep track of a [`bed::record::builder::Builder`](https://docs.rs/noodles-bed/0.4.0/noodles_bed/record/builder/struct.Builder.html) state, and progressively build it up inside the `serialize_*` functions. For example, if a `chromStart` field is expected next, and a `serialize_u64` (or another integer serialize function) is called, then the [`set_start_position`](https://docs.rs/noodles-bed/0.4.0/noodles_bed/record/builder/struct.Builder.html#method.set_start_position) builder function could be called. At the end (or intermittently throughout) the records could be converted to string output. This way all the string parsing is done by the noodles library.\r\n\r\nThis is similar to keeping track of the state for the `Deserializer` as shown [below](https://github.com/umccr/noodles/pull/2#discussion_r949972871).', 'comment_created': datetime.datetime(2022, 8, 19, 8, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 949972871, 'comment_body': 'Keeping track of the `Deserializer` state is kind of like the inverse of keeping track of the [`bed::record::builder::Builder`](https://docs.rs/noodles-bed/0.4.0/noodles_bed/record/builder/struct.Builder.html) state in the `Serializer`.', 'comment_created': datetime.datetime(2022, 8, 19, 8, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 954427885, 'comment_body': 'Actually, we are already using noodles functionality to parse the serialization for us, via the `DisplayFromStr` functionality on `serde_with` used with the `AuxiliarBedRecordWrapper`\r\n\r\n```\r\n#[serde_as]\r\n#[derive(Deserialize, Serialize)]\r\npub struct AuxiliarBedRecordWrapper<T>\r\nwhere\r\n    T: BedN<3> + std::str::FromStr + fmt::Display,\r\n    <T as std::str::FromStr>::Err: std::fmt::Display,\r\n{\r\n    #[serde_as(as = ""DisplayFromStr"")]\r\n    pub record: T,\r\n}\r\n```\r\n\r\nI think I tipped you in the wrong direction since `impl<\'a> ser::Serializer for &\'a mut Record3Serializer {}` is really verbose and has lots of implementation that looks like its made to parse bed structs by itself, is that correct?\r\n\r\nThis implementation could be heavily dried out now that we are using `serde_with`, but we still need some kind of plain serializer to grab thinks between each `\\n` and sending directly to `record: T` `Display` method.', 'comment_created': datetime.datetime(2022, 8, 25, 1, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'GabrielSimonetto', 'type': 'User'}, {'comment_id': 954485357, 'comment_body': 'Ahh yeah, I think I see what you mean. Do you think there is any way to avoid even having to parse the `\\n` characters? Ideally there would be no need to touch a raw string, and just allow noodles to do all of this. \r\n\r\nHowever, it looks like noodles might [write records one by one](https://github.com/zaeleus/noodles/blob/65b77361032557de8e16c94a6e35d84f3ef10f39/noodles-bed/src/writer.rs#L97-L103) anyway, so this might not be possible.\r\n\r\nDoes this mean that `serde_with` or `serde_as` is generating the `Serializer` implementations, or does that need to be implemented as well? ', 'comment_created': datetime.datetime(2022, 8, 25, 4, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 955344013, 'comment_body': ""It's kind of weird: we need some Serializer or Deserializer specific implementation to exist to have a full pipeline of serializaton and deserialization, but as soon as we arrive on our Serializer, all it needs to do is:\r\n\r\n1) Call Display from the specific Record<N> implementation (which is being done by the `serde_with` derive)\r\n2) Insert `\\n` on `Vec<T>` serializations.\r\n\r\nSo it's the most plain implementation of a Serializer trait ever, we probably can and should call `unreachable!()` on most of the functions (I didn't do this yet because maybe serde_with fails.)\r\n\r\nAnswering your question: I haven't seen a way to write a string separated `\\n` inside of noodles, but now that you mention it, maybe implementing a `Display` and `FromStr` for `Vec<Record<N>>` shouldn't be that hard, the weird part is that we would still need an `AuxiliarWrapper` for this `Vec`, and I can't see a way to use the same `AuxiliarWrapper` both for a single and a collection of Records, in the past I've seen this solved by coercing single Records to a collection of one element, but maybe we don't want that."", 'comment_created': datetime.datetime(2022, 8, 25, 19, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'GabrielSimonetto', 'type': 'User'}, {'comment_id': 955646321, 'comment_body': 'It seems to be getting stuck here, as this function is called over and over again, without returning `Ok(None)`. [`next_key_seed`](https://docs.rs/serde/latest/serde/de/trait.MapAccess.html#tymethod.next_key_seed) should return `Ok(None)` when there are no more entries left.', 'comment_created': datetime.datetime(2022, 8, 26, 4, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 962467827, 'comment_body': 'I don\'t think this is really unreachable (I could be wrong though), e.g. a contrived example might be able to implement `BedN<3>` and reach the `serialize_bool` during serialization. If you want to panic, I think a [`todo!`](https://doc.rust-lang.org/std/macro.todo.html) or [`unimplemented!`](https://doc.rust-lang.org/std/macro.unimplemented.html) would be better, as we may want to implement these functions later. Otherwise you could also return an `Err` such as `Err(ser::Error::custom(""unsupported type""))`.\r\n\r\nSame applies too all other the `unreachable!` calls.', 'comment_created': datetime.datetime(2022, 9, 5, 4, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 962471115, 'comment_body': 'Change this to `RecordDeserializer::from(s)`, if taking the advice [below](https://github.com/umccr/noodles/pull/2#discussion_r962471540).', 'comment_created': datetime.datetime(2022, 9, 5, 4, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 962471540, 'comment_body': ""I would do something like the following to remove the clippy warning.\r\n\r\n```rust\r\nimpl<'de> From<&'de str> for RecordDeserializer<'de> {\r\n    fn from(input: &'de str) -> Self {\r\n        RecordDeserializer { input }\r\n    }\r\n}\r\n```"", 'comment_created': datetime.datetime(2022, 9, 5, 4, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 962472012, 'comment_body': 'Return an `Err` here. For example `Err(ser::Error::custom(""trailing characters""))`.', 'comment_created': datetime.datetime(2022, 9, 5, 4, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}]","[{'commit_sha': '41cdab5306923954b9f4b6aee0da82c5c9c498ce', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17a74795b7cb199249079d25a9f9cb9aeabddfcc', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b7c6229fb5aaabab35aac6eee20420d26b3345f', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8500ffbf340904cd883851be356388d90d02d9ea', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a83fcbdd1c6d3701f16c250de12bab92c8b97844', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9a5ddc5d4919a424f10d67389867d1112b95576', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14960da9be35db6665d4ae543e44ffc95e02d6f7', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd84c9e5125079c4f04182eefeac7a40e63c096ed', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb52d40b8dff63c1e0fda1c8facda96f1f511a35', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ea276958aeb3f9df454965ad185bdbe0f0f462e', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '114abb1f2348f931d8dda31a0f3ec4cdffd73c68', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c90000959e9de6694a09a9ebce299d53a1a6df21', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afb913029ec4df73d35c5b8564539d263a1b83f6', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07bd3d0b984157e39e3f09c2b40996f1f1725ff4', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5e959bcd390c8d34e7ce8fd58a502cad52a9597', 'committer_username': 'mmalenic', 'committer_name': 'Marko Malenic', 'committer_email': 'mmalenic1@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 1, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5a0dbd68923e089e92328ddbf501a998225ce8a', 'committer_username': 'mmalenic', 'committer_name': 'Marko Malenic', 'committer_email': 'mmalenic1@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 1, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b465d3d5e410a03c12a0ffe5130163f39e324a5', 'committer_username': 'mmalenic', 'committer_name': 'Marko Malenic', 'committer_email': 'mmalenic1@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 1, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0a892e55824d108e2e627b9b2a04bf008604d94', 'committer_username': 'mmalenic', 'committer_name': 'Marko Malenic', 'committer_email': 'mmalenic1@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 1, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0484112649c62e66bb6d1b879c66579a3822da71', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf0ddad200112b2ee8902a2bc22ec723ae881f6d', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afcaf1215ff761b388490a01d0b4f74cb1079f96', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3877beb34c20d7c5a82f10dcf4b748e89ad35dee', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de846c3787b69ec0eb2e1d9dc29545152d922d6d', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17fe14dd54f92abd05d786958b466eb97688e88d', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46b44004e7b642b10b9ba07daaf9d88fbb1a5d70', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '658ebed25557f35077bef2774504b28545d2ec08', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5afcb5fb56fb37fca77e001a1b73b64625a7e105', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8edca528ee80adcaacf12d25870be8fcff86753', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeb9f5222dd7a9ea731b47f6fa68099ae3204a0c', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3cc40bb70b9905f6a9acba6cc22314512330fc6', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '530aec32be856ba82b410568868de162ddbba96a', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80f6b38214c80a8505e3b46454b5ec309192dcd0', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '167c8abe80542575fe54193a0a069149d28b3422', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9975017ab6db387d5a76432db5023a863f17bd53', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce6fb3c2e9fe08218541a6bff93ea6f1e4968536', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}]",Gabriel Simonetto,42247511,,User,,43,,68,48
1053934134,Experiment on converting from one format to the other,"1) Using `serde-transcode` in order to convert one format into the other:

The first commit of this PR focuses on trying to use `serde-transcode` as the solution to `BioSerDe` proposal. This however does not currently work, because we cannot give the serde mechanism a hint in which type we are expecting:

```rust
// Failing serde-transcode example:
// From json representation to noodles-bed representation
let input = r#""{""chrom"":""sq0"",""start"":8,""end"":13}""#;
let mut deserializer = serde_json::Deserializer::from_str(input);
let mut serializer = noodles_bed::RecordSerializer::new();
serde_transcode::transcode(&mut deserializer, &mut serializer).unwrap();
```

Notice that the only information inside this is the Serializer and Deserializer of the target formats, whereas our currently code only works when we explicitly use the `SerdeRecordWrapper` via our auxiliar functions.

One problem with not using transcode would be the use of intermediary memory, aswell as a reduction in the simplicity of the code:

`The [serde-transcode](https://github.com/sfackler/serde-transcode) crate provides functionality to ""transcode"" from an arbitrary Serde Deserializer to an arbitrary Serde Serializer without needing to collect the entire input into an intermediate form in memory.`

But it seems to me that in order to use transcode, we cannot give the serde mechanism a hint in which type we are expecting, if we do that, we will need to go back in our decision of using `serde-with` in order to use the `FromStr` and `Display` already implemented in the noodles crate to accelerate the experiment.

Another problem with **using** transcode, is that we need to have access to the `Serializer` and `Deserializer` of the format we are dealing with, however, some crates may choose to keep those objects private. That seems to be the case for the `rust-csv` crate for example, if I didn't mess up my demo earlier, it could be that the only formats that make this choice will not be the ones where it makes sense to use in bioserde, especially since WE are the ones implementing serde for at least the noodles formats, so they would always be public for our own sake hehe.

2) Trying a manual approach

In order to weight if we really have to eat this bullet, I've tried to explore how would we do this functionality manually on the subsequential commits of this branch, currently it isn't going great:

First I've tried to create single functions for each format:

```rust
    pub fn noodles_bed_to_json_bed(input: &str) -> String {
        let record: Record<3> = noodles_bed::record_from_str(input).unwrap();

        // TODO: start treating errors
        serde_json::to_string(&record).unwrap()
    }
```

That doesn't sound like it's correct, since we would need one function for each Record<N>.

Then I've tried to make a more generic function with an enum of `SupportedFormats`, which initially, could not generalize, since it would expect many Record<N> types in the same function, which rust does not allow

```rust
    pub fn convert_to_format(input: &str, from: SupportedFormat, to: SupportedFormat) -> String {
        let record = match from {
            SupportedFormat::Record3 => noodles_bed::record_from_str::<Record<3>>(input).unwrap(),
            SupportedFormat::Record4 => noodles_bed::record_from_str::<Record<4>>(input).unwrap(),
            SupportedFormat::JsonBed3 => serde_json::from_str::<Record<3>>(input).unwrap(),
            SupportedFormat::JsonBed4 => serde_json::from_str::<Record<4>>(input).unwrap(),
        };

        match to {
            SupportedFormat::Record3 | SupportedFormat::Record4 => {
                noodles_bed::record_to_string(record).unwrap()
            }
            SupportedFormat::JsonBed3 | SupportedFormat::JsonBed4 => {
                serde_json::to_string(&record).unwrap()
            }
        }
    }
```

```
error[E0308]: `match` arms have incompatible types
  --> noodles-bed/src/main.rs:46:41
   |
44 |           let record = match from {
   |  ______________________-
45 | |             SupportedFormat::Record3 => noodles_bed::record_from_str::<Record<3>>(input).unwrap(),
   | |                                         --------------------------------------------------------- this is found to be of type `Record<3_u8>`
46 | |             SupportedFormat::Record4 => noodles_bed::record_from_str::<Record<4>>(input).unwrap(),
   | |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `3_u8`, found `4_u8`
47 | |             SupportedFormat::JsonBed3 => serde_json::from_str::<Record<3>>(input).unwrap(),
48 | |             SupportedFormat::JsonBed4 => serde_json::from_str::<Record<4>>(input).unwrap(),
49 | |         };
   | |_________- `match` arms have incompatible types
   |
   = note: expected struct `Record<3_u8>`
              found struct `Record<4_u8>`
```

Then, I've realized that we can merge the 2 approaches to have a function that does the whole serde process for each input, which works. (I will not print it here, since it's the current version) 

However it's really verbose, we need both a) better ways to fill the match patterns in a way that allows only valid conversions, and b) probably, use macros to create all the functions needed, (which raises exponentially with each added format), that however, sound like it could work well.

My current plan is to persue these enhancements and see if the code is good enough, if however you guys have questions or other ideas, please let me know (:

p.s.: the current code is kinda ugly and have some things I still have to check (such as, if a JsonBed3 and JsonBed4 are really needed), but I still wanted to submit the architecture idea.
",False,3,https://api.github.com/repos/umccr/noodles/pulls/3,https://github.com/umccr/noodles/pull/3,open,316,111,5,7,0,1,0,0,[],2022-09-12 22:05:39+00:00,,0.0,,"[{'comment_id': 971589417, 'comment_body': ""The compiler won't allow different match arm types here. You _could_ potentially merge the two match branches, for example:\r\n\r\n```rust\r\nmatch (from, to) {\r\n    (SupportedFormat::Record3, SupportedFormat::Record3) => noodles_bed::record_to_string(noodles_bed::record_from_str::<Record<3>>(input).unwrap()).unwrap(),\r\n    ...\r\n}\r\n```\r\n\r\nOr use some sort of common trait and dynamically dispatch in a [`Box`](https://doc.rust-lang.org/std/boxed/struct.Box.html).\r\n\r\nHowever, neither seem like their are the right way to go about it, and are still verbose."", 'comment_created': datetime.datetime(2022, 9, 15, 6, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}]","[{'commit_sha': '67bbe84a2bb946796e464891e91e24346379d78f', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee7266be5c192c2a748a8abd5a4bf463cf0acead', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e8f9d88d415138a2d91fdcff446a8c0e26e15b9', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e14eb095751b2674a9ea4a0c5536259b1e119c2', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa950188f475998925186da4e3dfe78bd8853c41', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a2e505e07dad494613da65e99ba88d17fc83f76', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd996dff802ac4435e485f59f64ad5f13f53777be', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}]",Gabriel Simonetto,42247511,,User,,43,,68,48
1025860374,Update to Marko's API,"Following the [ideas commented on the main PR](https://github.com/umccr/noodles/pull/1#pullrequestreview-1048929529), @mmalenic set up the environment where serde-json is derived, and I am implementing serde for the regular bed format.

Currently, the serializer is printing out the fields that belong to the other Bed<N> formats , which makes it incompatible with the reader and writer already implemented by noodles:

```
// Serializer's current output
""sq0\t8\t13\tnull\tnull\tnull\t8\t13\tnull\t\n""

// Noodles output
""sq0\t8\t13\n""

// Edit: solved
```

The `serde-json` solution also behaves like this, but since we are creating that representation it's probably fine:

`{""chrom"":""sq0"",""start"":8,""end"":13,""name"":null,""score"":null,""strand"":null,""thick_start"":8,""thick_end"":13,""color"":null,""blocks"":[]}`

One problem that it currently has is that it uses a `thick_start` and `thick_end` which is incompatible with the noodles definition of reusing the `start` and `end` values. I haven't found out how to make the default function in serde derive use an argument (the start value, for example):

```
// Current
fn default_position() -> Position {
    Position::new(1).unwrap()
}

// Probably desired?
fn default_position_thick_start(start: Position) -> Position {
    start
}
```

Other than that, I am exposing the problem of our serializer here, but it seems pretty clear to me that the fields which don't belong to Bed<3> can't be present in the serialization, this might however introduce the problem of having specific serialization processes for each Bed<N> format. Noodles [already does this in `record.rs`](https://github.com/umccr/noodles/blob/gabriel/example_serialization_deserialization/noodles-bed/src/record.rs#L141) to make every higher version of bed inherit the fuctionality from the lesser versions

```
impl BedN<3> for Record<3> {}
impl BedN<3> for Record<4> {}
impl BedN<3> for Record<5> {}
...
```

But at that point it becomes clear that all we want is for the serializer to call the `Display` method from `Record` the question becomes: how do we represent that in the serializing entrypoints, and also, can we change it?

```
pub fn to_string<T>(value: &T) -> Result<String>
where
    // T: Serialize // Current signature
    T: Serialize + BedN<3> + std::fmt::Display, // This would prevent a Vec<Record<_>> from being allowed.
{
    // TODO: How to generalize Bed<N>
    let mut serializer = Record3Serializer {
        output: String::new(),
    };
    value.serialize(&mut serializer)?;
    Ok(serializer.output)
}
```

Notice that we now have to call `record.to_string()` inside the serializer. Which is probably a problem, since the serializer only knows types from the data-format, and probably doesn't have a way to know which struct its dealing with.

At this point I realized that this couldn't be this hard, and to be fair, I haven't realized that now that we are serializing to the actual bed format, marko's previous suggestions like [serde_with](https://docs.rs/serde_with/latest/serde_with/) and [serde_state](https://docs.rs/serde_state/latest/serde_state/), would now make a lot of sense.

Still I wanted to showcase what I have been working on so you guys can correct any big blunders I made in my decision process. 

========= update ==========

[serde_with](https://docs.rs/serde_with/latest/serde_with/) worked wonders, we are now reusing a lot of code directly from noodles, and this should be replicable to the other data formats.

It's still needed to implement a `Serializer` and `Deserializer` which does the minimal work of basically parsing each element on a sequence, and calling `Display` or `FromStr` on each element. The `Deserializer` can be really lean thanks to the `forward_to_deserialize_any!` macro, the `Serializer` however doesn't have anything similar, and needs to implement a lot of `unreachable!` functions because of the trait signature. Maybe there is something in the ecosystem for such a bare-bones use case, but I am not aware of it.",True,2,https://api.github.com/repos/umccr/noodles/pulls/2,https://github.com/umccr/noodles/pull/2,closed,755,353,8,35,3,10,0,0,[],2022-08-14 18:15:56+00:00,2022-09-07 18:48:12+00:00,2075536.0,"24 days, 0:32:16","[{'comment_id': 949969398, 'comment_body': 'To avoid serializing records manually, you could keep track of a [`bed::record::builder::Builder`](https://docs.rs/noodles-bed/0.4.0/noodles_bed/record/builder/struct.Builder.html) state, and progressively build it up inside the `serialize_*` functions. For example, if a `chromStart` field is expected next, and a `serialize_u64` (or another integer serialize function) is called, then the [`set_start_position`](https://docs.rs/noodles-bed/0.4.0/noodles_bed/record/builder/struct.Builder.html#method.set_start_position) builder function could be called. At the end (or intermittently throughout) the records could be converted to string output. This way all the string parsing is done by the noodles library.\r\n\r\nThis is similar to keeping track of the state for the `Deserializer` as shown [below](https://github.com/umccr/noodles/pull/2#discussion_r949972871).', 'comment_created': datetime.datetime(2022, 8, 19, 8, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 949972871, 'comment_body': 'Keeping track of the `Deserializer` state is kind of like the inverse of keeping track of the [`bed::record::builder::Builder`](https://docs.rs/noodles-bed/0.4.0/noodles_bed/record/builder/struct.Builder.html) state in the `Serializer`.', 'comment_created': datetime.datetime(2022, 8, 19, 8, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 954427885, 'comment_body': 'Actually, we are already using noodles functionality to parse the serialization for us, via the `DisplayFromStr` functionality on `serde_with` used with the `AuxiliarBedRecordWrapper`\r\n\r\n```\r\n#[serde_as]\r\n#[derive(Deserialize, Serialize)]\r\npub struct AuxiliarBedRecordWrapper<T>\r\nwhere\r\n    T: BedN<3> + std::str::FromStr + fmt::Display,\r\n    <T as std::str::FromStr>::Err: std::fmt::Display,\r\n{\r\n    #[serde_as(as = ""DisplayFromStr"")]\r\n    pub record: T,\r\n}\r\n```\r\n\r\nI think I tipped you in the wrong direction since `impl<\'a> ser::Serializer for &\'a mut Record3Serializer {}` is really verbose and has lots of implementation that looks like its made to parse bed structs by itself, is that correct?\r\n\r\nThis implementation could be heavily dried out now that we are using `serde_with`, but we still need some kind of plain serializer to grab thinks between each `\\n` and sending directly to `record: T` `Display` method.', 'comment_created': datetime.datetime(2022, 8, 25, 1, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'GabrielSimonetto', 'type': 'User'}, {'comment_id': 954485357, 'comment_body': 'Ahh yeah, I think I see what you mean. Do you think there is any way to avoid even having to parse the `\\n` characters? Ideally there would be no need to touch a raw string, and just allow noodles to do all of this. \r\n\r\nHowever, it looks like noodles might [write records one by one](https://github.com/zaeleus/noodles/blob/65b77361032557de8e16c94a6e35d84f3ef10f39/noodles-bed/src/writer.rs#L97-L103) anyway, so this might not be possible.\r\n\r\nDoes this mean that `serde_with` or `serde_as` is generating the `Serializer` implementations, or does that need to be implemented as well? ', 'comment_created': datetime.datetime(2022, 8, 25, 4, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 955344013, 'comment_body': ""It's kind of weird: we need some Serializer or Deserializer specific implementation to exist to have a full pipeline of serializaton and deserialization, but as soon as we arrive on our Serializer, all it needs to do is:\r\n\r\n1) Call Display from the specific Record<N> implementation (which is being done by the `serde_with` derive)\r\n2) Insert `\\n` on `Vec<T>` serializations.\r\n\r\nSo it's the most plain implementation of a Serializer trait ever, we probably can and should call `unreachable!()` on most of the functions (I didn't do this yet because maybe serde_with fails.)\r\n\r\nAnswering your question: I haven't seen a way to write a string separated `\\n` inside of noodles, but now that you mention it, maybe implementing a `Display` and `FromStr` for `Vec<Record<N>>` shouldn't be that hard, the weird part is that we would still need an `AuxiliarWrapper` for this `Vec`, and I can't see a way to use the same `AuxiliarWrapper` both for a single and a collection of Records, in the past I've seen this solved by coercing single Records to a collection of one element, but maybe we don't want that."", 'comment_created': datetime.datetime(2022, 8, 25, 19, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'GabrielSimonetto', 'type': 'User'}, {'comment_id': 955646321, 'comment_body': 'It seems to be getting stuck here, as this function is called over and over again, without returning `Ok(None)`. [`next_key_seed`](https://docs.rs/serde/latest/serde/de/trait.MapAccess.html#tymethod.next_key_seed) should return `Ok(None)` when there are no more entries left.', 'comment_created': datetime.datetime(2022, 8, 26, 4, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 962467827, 'comment_body': 'I don\'t think this is really unreachable (I could be wrong though), e.g. a contrived example might be able to implement `BedN<3>` and reach the `serialize_bool` during serialization. If you want to panic, I think a [`todo!`](https://doc.rust-lang.org/std/macro.todo.html) or [`unimplemented!`](https://doc.rust-lang.org/std/macro.unimplemented.html) would be better, as we may want to implement these functions later. Otherwise you could also return an `Err` such as `Err(ser::Error::custom(""unsupported type""))`.\r\n\r\nSame applies too all other the `unreachable!` calls.', 'comment_created': datetime.datetime(2022, 9, 5, 4, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 962471115, 'comment_body': 'Change this to `RecordDeserializer::from(s)`, if taking the advice [below](https://github.com/umccr/noodles/pull/2#discussion_r962471540).', 'comment_created': datetime.datetime(2022, 9, 5, 4, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 962471540, 'comment_body': ""I would do something like the following to remove the clippy warning.\r\n\r\n```rust\r\nimpl<'de> From<&'de str> for RecordDeserializer<'de> {\r\n    fn from(input: &'de str) -> Self {\r\n        RecordDeserializer { input }\r\n    }\r\n}\r\n```"", 'comment_created': datetime.datetime(2022, 9, 5, 4, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}, {'comment_id': 962472012, 'comment_body': 'Return an `Err` here. For example `Err(ser::Error::custom(""trailing characters""))`.', 'comment_created': datetime.datetime(2022, 9, 5, 4, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mmalenic', 'type': 'User'}]","[{'commit_sha': '41cdab5306923954b9f4b6aee0da82c5c9c498ce', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17a74795b7cb199249079d25a9f9cb9aeabddfcc', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b7c6229fb5aaabab35aac6eee20420d26b3345f', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8500ffbf340904cd883851be356388d90d02d9ea', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a83fcbdd1c6d3701f16c250de12bab92c8b97844', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9a5ddc5d4919a424f10d67389867d1112b95576', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14960da9be35db6665d4ae543e44ffc95e02d6f7', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd84c9e5125079c4f04182eefeac7a40e63c096ed', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb52d40b8dff63c1e0fda1c8facda96f1f511a35', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ea276958aeb3f9df454965ad185bdbe0f0f462e', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '114abb1f2348f931d8dda31a0f3ec4cdffd73c68', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c90000959e9de6694a09a9ebce299d53a1a6df21', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afb913029ec4df73d35c5b8564539d263a1b83f6', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07bd3d0b984157e39e3f09c2b40996f1f1725ff4', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5e959bcd390c8d34e7ce8fd58a502cad52a9597', 'committer_username': 'mmalenic', 'committer_name': 'Marko Malenic', 'committer_email': 'mmalenic1@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 1, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5a0dbd68923e089e92328ddbf501a998225ce8a', 'committer_username': 'mmalenic', 'committer_name': 'Marko Malenic', 'committer_email': 'mmalenic1@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 1, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b465d3d5e410a03c12a0ffe5130163f39e324a5', 'committer_username': 'mmalenic', 'committer_name': 'Marko Malenic', 'committer_email': 'mmalenic1@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 1, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0a892e55824d108e2e627b9b2a04bf008604d94', 'committer_username': 'mmalenic', 'committer_name': 'Marko Malenic', 'committer_email': 'mmalenic1@gmail.com', 'commit_date': datetime.datetime(2019, 8, 9, 1, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0484112649c62e66bb6d1b879c66579a3822da71', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf0ddad200112b2ee8902a2bc22ec723ae881f6d', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afcaf1215ff761b388490a01d0b4f74cb1079f96', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3877beb34c20d7c5a82f10dcf4b748e89ad35dee', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de846c3787b69ec0eb2e1d9dc29545152d922d6d', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17fe14dd54f92abd05d786958b466eb97688e88d', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46b44004e7b642b10b9ba07daaf9d88fbb1a5d70', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '658ebed25557f35077bef2774504b28545d2ec08', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5afcb5fb56fb37fca77e001a1b73b64625a7e105', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8edca528ee80adcaacf12d25870be8fcff86753', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeb9f5222dd7a9ea731b47f6fa68099ae3204a0c', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3cc40bb70b9905f6a9acba6cc22314512330fc6', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '530aec32be856ba82b410568868de162ddbba96a', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80f6b38214c80a8505e3b46454b5ec309192dcd0', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '167c8abe80542575fe54193a0a069149d28b3422', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9975017ab6db387d5a76432db5023a863f17bd53', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce6fb3c2e9fe08218541a6bff93ea6f1e4968536', 'committer_username': 'GabrielSimonetto', 'committer_name': 'Gabriel Simonetto', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 9, 16, 21, 7, tzinfo=datetime.timezone.utc)}]",Gabriel Simonetto,42247511,,User,,43,,68,48

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
481523839,BioSerDe,umccr/BioSerDe,Rust,1,1,11,2,13,6,8,1,"[{'id': 981314268, 'number': 12, 'closed': datetime.datetime(2022, 6, 29, 6, 7, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 28, 12, 3, 37, tzinfo=datetime.timezone.utc), 'time_taken': 65019.0, 'time_delta': '18:03:39', 'additions': 30, 'deletions': 1926, 'state': 'closed'}, {'id': 970225917, 'number': 10, 'closed': datetime.datetime(2022, 6, 24, 6, 5, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 17, 5, 14, 42, tzinfo=datetime.timezone.utc), 'time_taken': 607876.0, 'time_delta': '7 days, 0:51:16', 'additions': 96, 'deletions': 1924, 'state': 'closed'}]"
508275067,noodles,umccr/noodles,Rust,0,0,3,8,4005,1,6,1,[]
