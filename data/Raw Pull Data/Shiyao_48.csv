pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
968535253,Time domain operation for max,pmseries: implemented max operation,True,1611,https://api.github.com/repos/performancecopilot/pcp/pulls/1611,https://github.com/performancecopilot/pcp/pull/1611,closed,346,5,6,4,1,5,0,0,[],2022-06-15 19:21:18+00:00,2022-06-29 00:53:22+00:00,1143124.0,"13 days, 5:32:04","[{'comment_id': 898763097, 'comment_body': 'I think we should keep ""max"" since its part of the language now and people are using it (so if we remove it, things will break) - we can make it a synonym of ""max_inst"" though.', 'comment_created': datetime.datetime(2022, 6, 16, 7, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 898763811, 'comment_body': 'Did you find the cause of the memory allocation / valgrind issue from the other day?  (was it n_samples == 0?)', 'comment_created': datetime.datetime(2022, 6, 16, 7, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 898767386, 'comment_body': 'There\'s a code pattern I\'ve noticed developing throughout query.c which I\'m not sure is ideal, where we have these very long statements repeatedly de-referencing pointers (I know you\'re just continuing the same pattern here & usually that\'s the best approach to take).  I wonder if it would make the code more readable, however, if we used some intermediate local variables.\r\n\r\nFor example here we repeat the: ""np->value_set.series_values[i].series_sample[j].series_instance[0]"" string several times, as well as ""np->left->value_set.series_values[i].series_sample[j].series_instance[max_pointer]"".  Shall we start moving code over to assigning earlier on to a local variable (e.g. ""inst"", and then using ""inst->timestamp = ...; inst->series = ...; "" and so on) ... ?', 'comment_created': datetime.datetime(2022, 6, 16, 7, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 899501948, 'comment_body': 'yeah, we need this if statement to check if n_sample = 0 or not. Without this line, valgrind will report a memory error', 'comment_created': datetime.datetime(2022, 6, 16, 20, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ShiyaoC', 'type': 'User'}, {'comment_id': 899503984, 'comment_body': 'Thank you for your suggestions, and I agree with you that defining some local variables like ""inst"" will improve the readability of our code. I will update this. ', 'comment_created': datetime.datetime(2022, 6, 16, 20, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ShiyaoC', 'type': 'User'}]","[{'commit_sha': '1566c77c897145182f766d705963262f4d303252', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cb81a3df96643bc29389f7d4efb7cf8979dc3e9', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dd2ea386b8320bb074a2777ee3d4cb86bbd9a51', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3248d8a83861b1e97cbd910191b5cdf215e3dd8', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}]",,43054578,,User,,7,,2,3
987764811,libpcp_web: add pmseries time domain functions,"Add time domain functions for sum, avg. Implemented standard deviation functions for both time and instance domain. Tests and man page updated.",True,1623,https://api.github.com/repos/performancecopilot/pcp/pulls/1623,https://github.com/performancecopilot/pcp/pull/1623,closed,607,5,6,7,0,0,0,0,[],2022-07-05 19:19:22+00:00,2022-07-12 01:09:29+00:00,539407.0,"6 days, 5:50:07",[],"[{'commit_sha': '994581b79a582e2cefa1b42be13131948c221162', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1de9a24982c1b53d54290b5c97d8c1f6122e8153', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1d382693354f4f368234af90ca56343788162f0', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dd87be74dfd6290b22eccf59c824ce7269d6a84', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43caf3bd37ef0ec91373b2428cc3e585df2a6197', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7787447c1ab7c05caae9b5a6b07aa883a10924a3', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55664520100f8f69fee2e435b388265752a2e33f', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}]",,43054578,,User,,7,,2,3
997354334,libpcp_web: solve memory leak,"The previous freeSeriesQueryNode() function did not free p->value_set.series_values[i].series_desc.*, so changing the values of series_desc.type or series_desc.semantics would cause memory leaks.

The updated code assigned a sdsnew() value to each of p->value_set.series_values[i].series_desc, and free them in freeSeriesQueryNode().",True,1628,https://api.github.com/repos/performancecopilot/pcp/pulls/1628,https://github.com/performancecopilot/pcp/pull/1628,closed,4327,25,4,5,0,0,0,0,[],2022-07-15 04:57:46+00:00,2022-08-01 09:30:45+00:00,1485179.0,"17 days, 4:32:59",[],"[{'commit_sha': 'bbd257a1f320481bb88ed0f2ec0ccff57c6384b7', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6dd84da349fbb0135db8b52ff7f6e95b775d17f', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a465e0279da5237980fca47ed3f567433ba36243', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cd32cacac7e26b8397ca1b367bbd444707d9939', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1207ec8bf115d14ad7990bf17ef13fa5023bf5d', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}]",,43054578,,User,,7,,2,3
1006073535,libpcp_web: modify libpcp_web make file,Add query.o with its required files and remove query_parser.o (no such file),True,1630,https://api.github.com/repos/performancecopilot/pcp/pulls/1630,https://github.com/performancecopilot/pcp/pull/1630,closed,2,1,1,1,0,0,0,0,[],2022-07-22 18:56:25+00:00,2022-07-26 03:15:37+00:00,289152.0,"3 days, 8:19:12",[],"[{'commit_sha': '8e659dbdbaa08a0fd226f296b000069a1d9b0a87', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}]",,43054578,,User,,7,,2,3
1014511315,Pmseries nth percentile,libpcp_web: add nth_percentile_inst() and nth_percentile_sample() functions,True,1637,https://api.github.com/repos/performancecopilot/pcp/pulls/1637,https://github.com/performancecopilot/pcp/pull/1637,closed,489,1,6,7,0,8,0,0,[],2022-08-02 01:21:11+00:00,2022-08-02 23:43:05+00:00,80514.0,22:21:54,"[{'comment_id': 935038903, 'comment_body': ""I observed this line crash with some large (possibly invalid) input numbers - if 'rank' is greater than 'n_samples' this code will attempt to access memory outside of the n_pointer array."", 'comment_created': datetime.datetime(2022, 8, 2, 1, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 935042380, 'comment_body': ""Instead of atoi, let's use strtoul here - that way, we can do some error checking.\r\nAlso, more efficient if we call it just once and save the result in a temporary variable rather than doing the string conversion twice."", 'comment_created': datetime.datetime(2022, 8, 2, 1, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 935042427, 'comment_body': 'Should the L_INTEGER in this line be ""integer"" like in your topk branch?  (similar case for lines 540, 551, 562 below)', 'comment_created': datetime.datetime(2022, 8, 2, 1, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 935042571, 'comment_body': ""@ShiyaoC this test could be improved by also checking error conditions in the input statements - i.e. making sure that we handle bad input for the 'nth_percentile_sample' expression - e.g. lacking parameters, has too many parameters, non-integer second parameter, too-large second parameter, etc.  The error handling should always produce consistent output, so its a good thing to add to the test to make sure we always handle it."", 'comment_created': datetime.datetime(2022, 8, 2, 1, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 935042631, 'comment_body': 'the above section can be compressed (follow the switch/case pattern there - we only need to do the left/right assignments once).', 'comment_created': datetime.datetime(2022, 8, 2, 1, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 935085931, 'comment_body': 'rank should not be greater than the n_sample, since the formula to calculate rank is (int)(n/100 * n_samples), where n is the percentile value. For example if n_samples = 10, n = 90, then rank = 9, which is the largest value. So the range will be 0 to n_samples.', 'comment_created': datetime.datetime(2022, 8, 2, 3, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ShiyaoC', 'type': 'User'}, {'comment_id': 935087268, 'comment_body': 'It gets updated.', 'comment_created': datetime.datetime(2022, 8, 2, 3, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ShiyaoC', 'type': 'User'}, {'comment_id': 935088445, 'comment_body': 'I will add more tests for edge cases.', 'comment_created': datetime.datetime(2022, 8, 2, 3, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ShiyaoC', 'type': 'User'}]","[{'commit_sha': '13043d21e4a77ed299b7a9c434fd169929aa0d63', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a96707f176fd75b0296a206beb5307d9f09ea60', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10b77ca81df4093341c6bd5be9bbb17b13662540', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7795a22cafc3ebe63b061ac7769fb42f266044ab', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8affc02660d132c1b3f7709f3e4a1a6c68672f2', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '451da0758572d4e031768f6e38db935b3980f01a', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b14f429a7bdac7e0b12d70a3ced59e803368ecae', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}]",,43054578,,User,,7,,2,3
1015641452,libpcp_web: pmseries language extensions with topk functions,"Provides topk_inst() and topk_sample functions in pmseries query language,
extracting the top-most values from a historical time series.",True,1638,https://api.github.com/repos/performancecopilot/pcp/pulls/1638,https://github.com/performancecopilot/pcp/pull/1638,closed,396,14,6,9,0,0,0,0,[],2022-08-02 22:08:45+00:00,2022-08-03 06:47:57+00:00,31152.0,8:39:12,[],"[{'commit_sha': '6c48a92d559811acb5396ac0054664c24aa56a87', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fa6a07cd0921caaad4926df9e9e1fc3b181f7c0', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e1e40391a05f547306fa60a8d4a85c7aa35f3b8', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3debe4dcadec7494188636b4de904bf7741f4a8f', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '847ed1a991a019b229c69a2995a1e22abf7516ef', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf031a0f7a001c53b5649f04d42d308c6deb4d5f', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5648b6e7bd3b5dff0cc29146b4d3f66cbb9db96', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8ac5faff6d44e212b76b5e97e328fd857db0e41', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a420d2f0f6c58803cb5d1af5dcf6a361d5f1e3f', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}]",,43054578,,User,,7,,2,3
1067737396,pmseries: scalar multiplication,pmseries: Extended grammar to support scalar multiplication and added qa/1906 for scalar multiplication testing.,True,1681,https://api.github.com/repos/performancecopilot/pcp/pulls/1681,https://github.com/performancecopilot/pcp/pull/1681,closed,647,38,5,1,0,6,0,0,[],2022-09-26 21:25:39+00:00,2022-10-12 02:28:25+00:00,1314166.0,"15 days, 5:02:46","[{'comment_id': 980649235, 'comment_body': 'Good question!  :)  Maybe something like ""Testing pmseries language queries involving scalar operations"".\r\nAlso, an additional test (with a smaller selection of the cases) run under valgrind might be a good idea here.', 'comment_created': datetime.datetime(2022, 9, 27, 1, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 980649648, 'comment_body': 'typo - ""Verify scalar""', 'comment_created': datetime.datetime(2022, 9, 27, 1, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 980650518, 'comment_body': 'Cut+paste typo.', 'comment_created': datetime.datetime(2022, 9, 27, 1, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 980650581, 'comment_body': 'One more time.', 'comment_created': datetime.datetime(2022, 9, 27, 1, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 980651516, 'comment_body': 'I think this file has been accidentally added?  (brought back accidentally?, it previously was deleted I think)', 'comment_created': datetime.datetime(2022, 9, 27, 1, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 980652419, 'comment_body': ""This overflow test needs to be done before the overflow happens - I think the way you've got the unsigned integer versions is more correct.  Can you do the same checks here except using INT32_MAX?  Maybe I'm missing some subtlety here though."", 'comment_created': datetime.datetime(2022, 9, 27, 1, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}]","[{'commit_sha': '446926655eac1899879ea9e962a706c8a94d7506', 'committer_username': 'ShiyaoC', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 7, 2, 17, 29, tzinfo=datetime.timezone.utc)}]",,43054578,,User,,7,,2,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
23028937,pcp,performancecopilot/pcp,C,234,959,52,237,32008,158,6,15,"[{'id': 1099595345, 'number': 1695, 'closed': datetime.datetime(2022, 10, 26, 5, 16, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 25, 23, 47, 10, tzinfo=datetime.timezone.utc), 'time_taken': 19741.0, 'time_delta': '5:29:01', 'additions': 109, 'deletions': 24, 'state': 'closed'}, {'id': 1067737396, 'number': 1681, 'closed': datetime.datetime(2022, 10, 12, 2, 28, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 26, 21, 25, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1314166.0, 'time_delta': '15 days, 5:02:46', 'additions': 647, 'deletions': 38, 'state': 'closed'}, {'id': 1015641452, 'number': 1638, 'closed': datetime.datetime(2022, 8, 3, 6, 47, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 22, 8, 45, tzinfo=datetime.timezone.utc), 'time_taken': 31152.0, 'time_delta': '8:39:12', 'additions': 396, 'deletions': 14, 'state': 'closed'}, {'id': 1014511315, 'number': 1637, 'closed': datetime.datetime(2022, 8, 2, 23, 43, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 1, 21, 11, tzinfo=datetime.timezone.utc), 'time_taken': 80514.0, 'time_delta': '22:21:54', 'additions': 489, 'deletions': 1, 'state': 'closed'}, {'id': 1006073535, 'number': 1630, 'closed': datetime.datetime(2022, 7, 26, 3, 15, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 18, 56, 25, tzinfo=datetime.timezone.utc), 'time_taken': 289152.0, 'time_delta': '3 days, 8:19:12', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 997354334, 'number': 1628, 'closed': datetime.datetime(2022, 8, 1, 9, 30, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 15, 4, 57, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1485179.0, 'time_delta': '17 days, 4:32:59', 'additions': 4327, 'deletions': 25, 'state': 'closed'}, {'id': 987764811, 'number': 1623, 'closed': datetime.datetime(2022, 7, 12, 1, 9, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 5, 19, 19, 22, tzinfo=datetime.timezone.utc), 'time_taken': 539407.0, 'time_delta': '6 days, 5:50:07', 'additions': 607, 'deletions': 5, 'state': 'closed'}, {'id': 968535253, 'number': 1611, 'closed': datetime.datetime(2022, 6, 29, 0, 53, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 15, 19, 21, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1143124.0, 'time_delta': '13 days, 5:32:04', 'additions': 346, 'deletions': 5, 'state': 'closed'}]"
