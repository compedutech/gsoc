pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
673551849,Compiler flags profiles,"### This pull request contains all my contribution implemented during my _**GSoC 2021 Handling compiler arguments project**_.
I have implemented the following features:
- parsing of profiles table in toml syntax
- profiles representation in package
- scope of flags (project-wide profiles, package-wide profiles, files scope flags)
- organise compiled code into multiple build directories based on the flags of each source file
- handle compiler profiles hierarchy (user-specified > parent user-specified > built-in profiles)

**Changes:**
- Move the default compiler flags to `profiles.f90` to the function `get_default_profiles`, which returns an array of `profile_config_t`s
- Change `'gfortran'` in `fpm.90/build_model` to `DEFAULT_COMPILER` introduced in `profiles.f90`, for consistency
- Add `proj_dir` argument to `get_package_data` and `new_package` for file scope profiles
- Extend `package_t` and `package_config_t` definitions with `profile_config_t`
- Create all `include_dirs` at the beginning of `build_package` subroutine
- Remove `build_name` from `fpm_command_line` and simplify `check_build_vals` subroutine
- Modify `fpm_compiler/get_module_flags` not to include any directories, but just handle module flags
- Add a conditional checking for allocation of fields in `fpm_model` - Should fix issues with `show_model`
- Replace `model%output_directory` with function `get_output_directory`

**New features:**
- `profile_config_t` and `profiles` toml table parser in `src/fpm/manifest/profiles.f90`
- `find_profile` subroutine which finds a profile with given parameters in an array of `profile_config_t`
- `info_profile` function which returns representation of a profile as a string
- Add flags to targets in `fpm_targets/build_target_list`
- Tests for profiles in `test_manifest.f90`
- Example packages tested by `ci/run_tests.sh`

**My blog on Fortran-lang discourse**
[*link to Fortran-lang discourse*](https://fortran-lang.discourse.group/t/handling-compiler-arguments-in-fpm-project-blog-by-jakub-jelinek/1297)",False,498,https://api.github.com/repos/fortran-lang/fpm/pulls/498,https://github.com/fortran-lang/fpm/pull/498,open,2147,167,70,38,14,49,1,0,[{'name': 'specification'}],2021-06-18 15:08:42+00:00,,0.0,,"[{'comment_id': 654617352, 'comment_body': 'Maybe `c-flags` and `link-time-flags` are more consistent with other keywords we already have.', 'comment_created': datetime.datetime(2021, 6, 18, 18, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 654634233, 'comment_body': 'Why do we have to iterate over a list of keys here? All required key names in a profile are known at compile time.', 'comment_created': datetime.datetime(2021, 6, 18, 19, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 654634816, 'comment_body': 'Why do we have to set default values here, not allocated deferred-length character passed to optional arguments are handled as not present. The constructor of the profile than can gracefully handle the absence of the arguments.', 'comment_created': datetime.datetime(2021, 6, 18, 19, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 654635270, 'comment_body': 'Why this code duplication, if file_scope_flags is not allocated the constructor will handle it as not present. Therefore, we only need one call here.', 'comment_created': datetime.datetime(2021, 6, 18, 19, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 654636069, 'comment_body': 'Is the OS name really case insensitive? What Happens if there are `Linux`, `LINUX` and `linux` in the same profile?', 'comment_created': datetime.datetime(2021, 6, 18, 19, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 654636241, 'comment_body': 'Same here, should the OS name be handled case-insensitive?', 'comment_created': datetime.datetime(2021, 6, 18, 19, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 654673534, 'comment_body': 'Then all three profiles are created, but when the `find_profile` subroutine is called, the last one of them (therefore the one with `linux`) is taken. Hovewer, all 3 of them would have `OS_LINUX` as their `os_type`.', 'comment_created': datetime.datetime(2021, 6, 18, 20, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kubajj', 'type': 'User'}, {'comment_id': 654675784, 'comment_body': 'In this case, the os_name is case-insensitive first to get the value from the table, but after the conditional block (330 - 333) the `math_os_type` subroutine is called which matches a lowercase OS name to an enumerate (`linux` -> `OS_LINUX`).', 'comment_created': datetime.datetime(2021, 6, 18, 21, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kubajj', 'type': 'User'}, {'comment_id': 654676764, 'comment_body': ""You're right, we do not have to. This is probably part necessary for older implementation."", 'comment_created': datetime.datetime(2021, 6, 18, 21, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kubajj', 'type': 'User'}, {'comment_id': 654677782, 'comment_body': 'This is supposed to be ready for further error handling. We had a discussion about whether an error should occur if the table contains other key names.', 'comment_created': datetime.datetime(2021, 6, 18, 21, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kubajj', 'type': 'User'}, {'comment_id': 655199611, 'comment_body': 'Also, I think that this is the easiest way how to deal with the error handling of the fields as they are. They do not need to be defined, but if they are, they need to be just key-value pairs.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kubajj', 'type': 'User'}, {'comment_id': 658063255, 'comment_body': ""The model should not be modified once we reach `build_target_list`. For this logic, I suggest building a separate list of `include_dirs` from the output directories and then passing this separate list to `resolve_target_linking` in addition to `model%include_dirs`. To explain, `model%include_dirs` is independent of how we arrange our output objects whereas the output directories are specific to this particular layout of output objects. Hence `model%include_dirs` should be separate and immutable (in this module) to the backend-specific information. Let me know if that doesn't make sense."", 'comment_created': datetime.datetime(2021, 6, 24, 15, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 658064900, 'comment_body': 'It looks like `FPM_UNIT_PROGRAM` has slightly different behaviour to the other objects with respect to file-scope flags. For other objects, you EITHER have file-scope flags OR profile flags, but for `FPM_UNIT_PROGRAM` you can have file-scope flags AND profile flags. Is this intentional?', 'comment_created': datetime.datetime(2021, 6, 24, 15, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 658066335, 'comment_body': ""We don't need both `flags` and `c_flags` for source files, just `flags` which is set depending on what type of source file it is. This will simplifies logic later on."", 'comment_created': datetime.datetime(2021, 6, 24, 15, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 658068946, 'comment_body': ""Again, we don't want to be modifying the model at this point. We may need to think how we can move this code to occur before we get to `build_target_list` - _i.e._ sort out all the per-source flags when we build the model."", 'comment_created': datetime.datetime(2021, 6, 24, 15, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 658076880, 'comment_body': 'No, I just forgot to change this, thanks.', 'comment_created': datetime.datetime(2021, 6, 24, 15, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kubajj', 'type': 'User'}, {'comment_id': 680367696, 'comment_body': 'Is this a duplicate?', 'comment_created': datetime.datetime(2021, 7, 31, 14, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 680367719, 'comment_body': '```suggestion\r\n  - ""nvfortran""\r\n```', 'comment_created': datetime.datetime(2021, 7, 31, 14, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 680368091, 'comment_body': 'This is implicitly saved, probably not what you want in this context\r\n```suggestion\r\n    logical :: found\r\n    found = .false.\r\n```', 'comment_created': datetime.datetime(2021, 7, 31, 14, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 680368259, 'comment_body': 'Can we use a more distinguishable variable here? `ii`, `iii` and `iiii` in the same scope for iterations tend to be confusing.', 'comment_created': datetime.datetime(2021, 7, 31, 14, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 680368554, 'comment_body': 'Same for `parent_id`, which also is implicitly saved.', 'comment_created': datetime.datetime(2021, 7, 31, 14, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 680386623, 'comment_body': 'I think that it was somewhere in the command line module, but it probably does not make sense to include it. I will keep just the lower-case one.', 'comment_created': datetime.datetime(2021, 7, 31, 17, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kubajj', 'type': 'User'}, {'comment_id': 680390557, 'comment_body': 'This check is fragile as it relies on the output fpm is producing, which is not guaranteed to be stable.', 'comment_created': datetime.datetime(2021, 7, 31, 17, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 680390649, 'comment_body': 'Instead  of using compiler flags here, how about setting preprocessor defines for the same variable in each package with different values. Each package can than check whether it has the expected value.', 'comment_created': datetime.datetime(2021, 7, 31, 17, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 680396238, 'comment_body': 'Is the new test more stable @awvwgk ?', 'comment_created': datetime.datetime(2021, 7, 31, 18, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kubajj', 'type': 'User'}, {'comment_id': 680396407, 'comment_body': '`stop` will always return with exit code 0', 'comment_created': datetime.datetime(2021, 7, 31, 18, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 680396510, 'comment_body': '`exit` is a standard extension\r\n```suggestion\r\n        stop 1\r\n```', 'comment_created': datetime.datetime(2021, 7, 31, 18, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 680396537, 'comment_body': '```suggestion\r\n        stop 1\r\n```', 'comment_created': datetime.datetime(2021, 7, 31, 18, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 680399226, 'comment_body': 'So should I change it to stop 1?', 'comment_created': datetime.datetime(2021, 7, 31, 19, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kubajj', 'type': 'User'}, {'comment_id': 685421788, 'comment_body': ""I believe we decided omitting the compiler was invalid. I think the example should be:\r\n```suggestion\r\n- The flags field of the following profile is appended to flags fields of all profiles using `gfortran` on `linux` OS\r\n```toml\r\n[profiles.gfortran.linux]\r\nflags = '-g -Wall'\r\n```\r\n```"", 'comment_created': datetime.datetime(2021, 8, 9, 18, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'everythingfunctional', 'type': 'User'}, {'comment_id': 685422517, 'comment_body': '```suggestion\r\nThe compiler flags defined in these packages are as follows:\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 18, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'everythingfunctional', 'type': 'User'}, {'comment_id': 685424236, 'comment_body': 'I think this might be a tad clearer with headings:\r\n```suggestion\r\n| Package | Flags specified | Flags used |\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 18, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'everythingfunctional', 'type': 'User'}, {'comment_id': 685425599, 'comment_body': ""Please don't leave commented out code."", 'comment_created': datetime.datetime(2021, 8, 9, 18, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'everythingfunctional', 'type': 'User'}, {'comment_id': 685432274, 'comment_body': ""Could you format this so it's a bit easier to read. I'd suggest a style like the following, but right now this is a bit difficult to grok quickly, so whatever can make it easier would be worth it.\r\n\r\n```Fortran\r\ndefault_profiles = &\r\n    [ new_profile(\r\n        'release', &\r\n        'caf', &\r\n        OS_ALL, &\r\n        flags = '-O3 -Wimplicit-interface -fPIC -fmax-errors=1 -funroll-loops', &\r\n        is_built_in = .true.) &\r\n    , new_profile( &\r\n        ...) &\r\n    , ... &\r\n    ]\r\n```"", 'comment_created': datetime.datetime(2021, 8, 9, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'everythingfunctional', 'type': 'User'}, {'comment_id': 685741567, 'comment_body': 'There\'s a lot of duplication here which makes maintainability harder - I think this can be simplified, please see my suggestion below and check the logic\r\n\r\n```suggestion\r\n                case (FPM_UNIT_MODULE,FPM_UNIT_SUBMODULE,FPM_UNIT_SUBPROGRAM,FPM_UNIT_CSOURCE,FPM_UNIT_PROGRAM)\r\n                    file_scope_flag = get_file_scope_flags(sources(i), profile)\r\n                    if (file_scope_flag.eq."""") then\r\n                        if (sources(i)%unit_type.eq.FPM_UNIT_CSOURCE) then\r\n                            sources(i)%flags=model%cmd_compile_flags//"" ""//profile%c_flags\r\n                        else\r\n                            sources(i)%flags=model%cmd_compile_flags//"" ""//profile%flags\r\n                        end if\r\n                    else\r\n                        sources(i)%flags=model%cmd_compile_flags//"" ""//file_scope_flag\r\n                    end if\r\n                    \r\n                    if (sources(i)%unit_type == FPM_UNIT_PROGRAM)\r\n                        sources(i)%link_time_flags=profile%link_time_flags\r\n                    end if\r\n                end select\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 6, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 685742570, 'comment_body': 'We can exit this loop once the file flags have been found, right?\r\n```suggestion\r\n                        file_scope_flag = fflags(i)%flags//"" ""\r\n                        exit\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 6, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 685743924, 'comment_body': '```suggestion\r\n    if (present(build_dirs)) then\r\n        if (allocated(build_dirs)) then\r\n            do i=1,size(build_dirs)\r\n                call mkdir(build_dirs(i)%s)\r\n            end do\r\n        end if\r\n    end if\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 6, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 685749093, 'comment_body': 'I think `get_object_name` should be used for all target types to centralise the logic. At the moment, executables and archives have separate logic interspersed in the main code which makes it more difficult to reason about. I would suggest modify `get_object_name` to detect the source type and use this to build the object name if it differs between source types.', 'comment_created': datetime.datetime(2021, 8, 10, 7, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 685749990, 'comment_body': 'Is this used?', 'comment_created': datetime.datetime(2021, 8, 10, 7, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 685751237, 'comment_body': 'Is there a situation where this error would occur, or should this never happen? Same question for line 296', 'comment_created': datetime.datetime(2021, 8, 10, 7, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 685791355, 'comment_body': 'This still needs to be addressed.', 'comment_created': datetime.datetime(2021, 8, 10, 8, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 685816007, 'comment_body': 'The error on 301 should probably happen only if the main package does not specify or has built-in the correct profile.\r\n296 should never happen as there should always be a path from any dependency to main package.', 'comment_created': datetime.datetime(2021, 8, 10, 8, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kubajj', 'type': 'User'}, {'comment_id': 685841037, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 8, 10, 9, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kubajj', 'type': 'User'}, {'comment_id': 685906656, 'comment_body': 'It is not used, but it fixed the following error:\r\n```\r\ntest/fpm_test/test_package_dependencies.f90:16:17:\r\n\r\nprocedure :: resolve_dependency => resolve_dependency_once\r\n        1\r\nError: ‘resolve_dependency’ at (1) must have the same number of formal arguments as the overridden procedure\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 10, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kubajj', 'type': 'User'}, {'comment_id': 685924745, 'comment_body': 'I still think that this is the easiest solution, if you want to suggest anything else, please do.', 'comment_created': datetime.datetime(2021, 8, 10, 11, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kubajj', 'type': 'User'}, {'comment_id': 685938647, 'comment_body': ""Code fence not closed\r\n````suggestion\r\nflags = '-g -Wall'\r\n```\r\n````"", 'comment_created': datetime.datetime(2021, 8, 10, 11, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 685939673, 'comment_body': ""We can't stop while reading the manifest, instead create an error and propagate up."", 'comment_created': datetime.datetime(2021, 8, 10, 11, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 685939917, 'comment_body': 'Same here, please create an error and propagate up.', 'comment_created': datetime.datetime(2021, 8, 10, 11, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 686128951, 'comment_body': 'Ah I see, makes sense.', 'comment_created': datetime.datetime(2021, 8, 10, 16, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}]","[{'commit_sha': 'ee0d46c85819ba345714df724556aaae6d72c2cf', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a978be3d82cbecf7959f49f6d38669b8b7e7f71d', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '648764c4819749374e4e9ec4ef61113f1e661bc1', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8ea4498afccc9608aa500daef274370fe3a96df', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '020c34a9157fc3a629dd1f009e95b1c7395cf865', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1caa897f3c58cfec19aed8b22d646f5b077381a8', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97085c60e77e6bc8245ce1f1df8cc0e24da22ab8', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '507d634a84b32cabc5606075b861aa9ce387a248', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5550bf782eb344ffad8e8ea184a3b9bcce3ca955', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '941c23ba3582c460e782acf9c00a784a4774d158', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1a503c6423edf429de1a2101c65eb6f6c5c7c11', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f81132a7bd556b7f783022b35d97181f9d2e4ee9', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '298999798b9aa5380de9b9e24f6b20dc56eb9ca4', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '709ad3a1499269f7601507c0e15cc87e36204eda', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0997172e40907d81d5a578a08b4e8197364b3500', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb06c00deb19dade8ac214f06f01b33de87f68a6', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cab41811404c2674daaa0b247ecdfb05bda471bc', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '286ac9c76303f1901cdb605174606a0cc4861543', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98badd65ec65ce744c9f83a9d79184807002ec44', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d8ca4cb523569813030de8f20e68afbb3a9e393', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '999c3a6bc4bc0840f1de4f351dcea881225a911b', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '981df565391989224a43842f21fd594c126c5478', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e82f4ee88ea4548e41fda9635fb6e444b9c6d75', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20084fedcdc08b81d678871c33e62bc4c90ffc12', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91323bf71f5a46a3132912639ef9e42cf9a2979f', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '269416a285b08fa3a979d09897f88bbbcc763f70', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba2c8125dc41e3798fa434a7b7b60d20fc9f6945', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce590825f01b9ab2fee366c36d5931f9f323c356', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '789d82338e50151066049b01d8015f345d3cb35e', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '794cd8589ffe8300b9cd47d1d691758b4caeac5e', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3978b8a29228cf70d907c84c60fbfc6595afcea', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e642a1448471a817f82510e87211f71a1ed5d5a3', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09e5b97b6e1d73bc7f4878cac7f23a3d9f2f357c', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d09b4ffdd2bd7b85ced56d913d72db55e445ee5', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '789175f36359e1c8b0a0389798ff37cbac17fa1c', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd708b9462fbc7c8ca59a424e6ba75d0311da743f', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa52c0abb74edd76fa113a98d6ded535a8f2bd97', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1edf2f1a1d79c5cb4f8f6f012c687861c73b9bb9', 'committer_username': 'kubajj', 'committer_name': 'Jakub Jelínek', 'committer_email': None, 'commit_date': datetime.datetime(2017, 11, 16, 14, 10, 31, tzinfo=datetime.timezone.utc)}]",Jakub Jelínek,33724536,,User,,18,,21,16

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
233763778,fpm,fortran-lang/fpm,Fortran,97,867,25,43,2246,201,6,13,"[{'id': 831939331, 'number': 653, 'closed': datetime.datetime(2022, 9, 8, 19, 1, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 25, 23, 0, 26, tzinfo=datetime.timezone.utc), 'time_taken': 19512087.0, 'time_delta': '225 days, 20:01:27', 'additions': 1060, 'deletions': 1, 'state': 'closed'}, {'id': 707255239, 'number': 539, 'closed': None, 'created': datetime.datetime(2021, 8, 10, 11, 10, 59, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 83, 'deletions': 26, 'state': 'open'}, {'id': 673551849, 'number': 498, 'closed': None, 'created': datetime.datetime(2021, 6, 18, 15, 8, 42, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 2147, 'deletions': 167, 'state': 'open'}, {'id': 600164965, 'number': 412, 'closed': datetime.datetime(2021, 3, 31, 9, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 24, 22, 47, 35, tzinfo=datetime.timezone.utc), 'time_taken': 558025.0, 'time_delta': '6 days, 11:00:25', 'additions': 156, 'deletions': 2, 'state': 'closed'}]"
