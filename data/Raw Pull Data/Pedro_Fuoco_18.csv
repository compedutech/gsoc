pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1361911285,ardupilot_ros: turn it into a ros 2 package,"This is PR aims for this package to work with ros 2,  the supported features of this repository will be added as my [GSoC project](https://discuss.ardupilot.org/t/gsoc-2023-gps-denied-autonomous-exploration-with-ros-2/101121) advances.",False,6,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/6,https://github.com/ArduPilot/ardupilot_ros/pull/6,closed,1381,2703,32,5,1,0,1,0,[{'name': 'ros2'}],2023-05-23 19:07:38+00:00,2023-08-22 20:39:44+00:00,7867926.0,"91 days, 1:32:06",[],"[{'commit_sha': '3e11381194544825b4dba886aaeab53c366694d2', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79f911f3b922e0d48d7843eb3ee7a7c0c42f62a8', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82868b9484324cf4640f6ddbc55ae1d0edd90949', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22d87b405c441962115d4bd99f3e22d495b17ab', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'befb944c3aef4d16db10850f77fb18b8b21f97e1', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1361911285,ardupilot_ros: turn it into a ros 2 package,"This is PR aims for this package to work with ros 2,  the supported features of this repository will be added as my [GSoC project](https://discuss.ardupilot.org/t/gsoc-2023-gps-denied-autonomous-exploration-with-ros-2/101121) advances.",False,6,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/6,https://github.com/ArduPilot/ardupilot_ros/pull/6,closed,1381,2703,32,5,1,0,1,0,[{'name': 'ros2'}],2023-05-23 19:07:38+00:00,2023-08-22 20:39:44+00:00,7867926.0,"91 days, 1:32:06",[],"[{'commit_sha': '3e11381194544825b4dba886aaeab53c366694d2', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79f911f3b922e0d48d7843eb3ee7a7c0c42f62a8', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82868b9484324cf4640f6ddbc55ae1d0edd90949', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22d87b405c441962115d4bd99f3e22d495b17ab', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'befb944c3aef4d16db10850f77fb18b8b21f97e1', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1361911285,ardupilot_ros: turn it into a ros 2 package,"This is PR aims for this package to work with ros 2,  the supported features of this repository will be added as my [GSoC project](https://discuss.ardupilot.org/t/gsoc-2023-gps-denied-autonomous-exploration-with-ros-2/101121) advances.",False,6,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/6,https://github.com/ArduPilot/ardupilot_ros/pull/6,closed,1381,2703,32,5,1,0,1,0,[{'name': 'ros2'}],2023-05-23 19:07:38+00:00,2023-08-22 20:39:44+00:00,7867926.0,"91 days, 1:32:06",[],"[{'commit_sha': '3e11381194544825b4dba886aaeab53c366694d2', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79f911f3b922e0d48d7843eb3ee7a7c0c42f62a8', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82868b9484324cf4640f6ddbc55ae1d0edd90949', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22d87b405c441962115d4bd99f3e22d495b17ab', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'befb944c3aef4d16db10850f77fb18b8b21f97e1', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1361911285,ardupilot_ros: turn it into a ros 2 package,"This is PR aims for this package to work with ros 2,  the supported features of this repository will be added as my [GSoC project](https://discuss.ardupilot.org/t/gsoc-2023-gps-denied-autonomous-exploration-with-ros-2/101121) advances.",False,6,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/6,https://github.com/ArduPilot/ardupilot_ros/pull/6,closed,1381,2703,32,5,1,0,1,0,[{'name': 'ros2'}],2023-05-23 19:07:38+00:00,2023-08-22 20:39:44+00:00,7867926.0,"91 days, 1:32:06",[],"[{'commit_sha': '3e11381194544825b4dba886aaeab53c366694d2', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79f911f3b922e0d48d7843eb3ee7a7c0c42f62a8', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82868b9484324cf4640f6ddbc55ae1d0edd90949', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22d87b405c441962115d4bd99f3e22d495b17ab', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'befb944c3aef4d16db10850f77fb18b8b21f97e1', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1400563497,Copter: Add iris with lidar in maze world,"Here are my tests:
![Screenshot from 2023-06-20 18-19-51](https://github.com/ArduPilot/ardupilot_gz/assets/62964137/1a24c1b4-497d-41dc-8f9b-f1f12637b34f)
![Screenshot from 2023-06-20 18-20-39](https://github.com/ArduPilot/ardupilot_gz/assets/62964137/774e1c43-2de1-4aa8-825f-4e54559a3bc7)
![Screenshot from 2023-06-20 18-20-50](https://github.com/ArduPilot/ardupilot_gz/assets/62964137/407e3ca0-652c-4706-9883-2a24db2e8456)

To launch it:
```bash
ros2 launch ardupilot_gz_bringup iris_maze.launch.py
```

Should this command be put in the README as well?",True,20,https://api.github.com/repos/ArduPilot/ardupilot_gz/pulls/20,https://github.com/ArduPilot/ardupilot_gz/pull/20,closed,1487,1,10,2,9,11,1,1,[{'name': 'enhancement'}],2023-06-20 21:37:54+00:00,2023-07-08 15:26:55+00:00,1532941.0,"17 days, 17:49:01","[{'comment_id': 1242446904, 'comment_body': 'The `GZ_SIM_RESOURCE_PATH` should be set up correctly by calling\r\n\r\n```bash\r\nsource ./install/setup.bash\r\n```\r\n\r\nThis is the reason for the files in the `hooks` directory of the plugin project. You can check this is working as follows:\r\n\r\n```bash\r\nLast login: Mon Jun 26 12:33:26 on ttys016\r\nrhys@MacPro2 ros2-ardupilot % pwd\r\n/Users/rhys/Code/ros2/humble/ros2-ardupilot\r\nrhys@MacPro2 ros2-ardupilot % env | grep GZ \r\nGZ_VERSION=garden\r\nGZ_IP=127.0.0.1\r\nrhys@MacPro2 ros2-ardupilot % source ./install/setup.zsh \r\nrhys@MacPro2 ros2-ardupilot % env | grep GZ             \r\nGZ_VERSION=garden\r\nGZ_IP=127.0.0.1\r\nGZ_SIM_RESOURCE_PATH=/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gz_gazebo/share/ardupilot_gz_gazebo/worlds:/Volumes/MacPro2_DV1/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gz_description/share:/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gz_description/share:/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gazebo/share/ardupilot_gazebo/worlds:/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gazebo/share/ardupilot_gazebo/models:/Volumes/MacPro2_DV1/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gazebo/share:/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gazebo/share\r\nGZ_SIM_SYSTEM_PLUGIN_PATH=/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gz_gazebo/lib/ardupilot_gz_gazebo/:/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gazebo/lib/ardupilot_gazebo/\r\n```\r\n', 'comment_created': datetime.datetime(2023, 6, 26, 16, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242890285, 'comment_body': 'Update the hook for `ardupilot_gz_description` so the launch finds the new `iris_with_lidar` model\r\n\r\n```diff\r\n# Add line to ardupilot_gz_description/hooks/ardupilot_gz_description.dsv.in`\r\n+ prepend-non-duplicate;GZ_SIM_RESOURCE_PATH;share/@PROJECT_NAME@/models\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2023, 6, 26, 22, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242895127, 'comment_body': 'This version of sdf supports the `degrees=""true""` attribute so you can write\r\n\r\n```xml\r\n<pose degrees=""true"">0 0 0.194923 0 0 90</pose>\r\n```\r\n\r\nwhich is a bit easier to read. Just noting for a future PR as we should prob. update this in all the models.\r\n', 'comment_created': datetime.datetime(2023, 6, 26, 22, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242902609, 'comment_body': ""We don't want this joint to rotate, so fix limits and set damping to assist with the physics. We're using a revolute joint instead of a fixed joint, because fixed joints can suffer from unwanted jitter in some physics solvers (the old ODE solver was prone to this - DART may be better).\r\n\r\n```suggestion\r\n      <axis>\r\n        <xyz>0 0 1</xyz>\r\n        <limit>\r\n          <lower>0</lower>\r\n          <upper>0</upper>\r\n        </limit>\r\n        <dynamics>\r\n          <damping>1</damping>\r\n        </dynamics>      \r\n      </axis>\r\n```"", 'comment_created': datetime.datetime(2023, 6, 26, 23, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242904979, 'comment_body': ""May want to revisit in future, and namespace the topic. Unlike URDF we can't easily parameterise the topic name with the model's name in the SDF file (although the name auto generated in the plugin should provide be fully scoped). "", 'comment_created': datetime.datetime(2023, 6, 26, 23, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242908032, 'comment_body': 'The project is missing `iris_with_lidar.rviz` - maybe forgot to `git add` the file?\r\n\r\nApply `black` formatter for line > 88 chars:\r\n\r\n```suggestion\r\n        arguments=[\r\n            ""-d"",\r\n            os.path.join(pkg_project_bringup, ""rviz"", ""iris_with_lidar.rviz""),\r\n        ],\r\n```\r\n', 'comment_created': datetime.datetime(2023, 6, 26, 23, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242916134, 'comment_body': 'Line > 88 char will fail `black` formatter. Add line break.\r\n\r\n```suggestion\r\n    pkg_ardupilot_gz_description = get_package_share_directory(\r\n        ""ardupilot_gz_description""\r\n    )\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 23, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1243924098, 'comment_body': ""This is amazing, didn't know we could do it that way, thanks for showing me @srmainwaring! This solution is way cleaner"", 'comment_created': datetime.datetime(2023, 6, 27, 15, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1243926405, 'comment_body': 'Awesome! Agreed', 'comment_created': datetime.datetime(2023, 6, 27, 15, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1243930517, 'comment_body': ""Also fixed joints don't get published to `/tf` by `ros_gz` for some reason."", 'comment_created': datetime.datetime(2023, 6, 27, 15, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1243946265, 'comment_body': 'I accidentally saved `iris_with_lidar.rviz` inside my `install` folder (in the ros2_ws), sorry about that. Adding it now.', 'comment_created': datetime.datetime(2023, 6, 27, 15, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}]","[{'commit_sha': '94bfa66235f0b01673fc87ee752c12ea17fcd4d8', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f303dc4f986cb4b41529299767185da2d37ef58f', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1400563497,Copter: Add iris with lidar in maze world,"Here are my tests:
![Screenshot from 2023-06-20 18-19-51](https://github.com/ArduPilot/ardupilot_gz/assets/62964137/1a24c1b4-497d-41dc-8f9b-f1f12637b34f)
![Screenshot from 2023-06-20 18-20-39](https://github.com/ArduPilot/ardupilot_gz/assets/62964137/774e1c43-2de1-4aa8-825f-4e54559a3bc7)
![Screenshot from 2023-06-20 18-20-50](https://github.com/ArduPilot/ardupilot_gz/assets/62964137/407e3ca0-652c-4706-9883-2a24db2e8456)

To launch it:
```bash
ros2 launch ardupilot_gz_bringup iris_maze.launch.py
```

Should this command be put in the README as well?",True,20,https://api.github.com/repos/ArduPilot/ardupilot_gz/pulls/20,https://github.com/ArduPilot/ardupilot_gz/pull/20,closed,1487,1,10,2,9,11,1,1,[{'name': 'enhancement'}],2023-06-20 21:37:54+00:00,2023-07-08 15:26:55+00:00,1532941.0,"17 days, 17:49:01","[{'comment_id': 1242446904, 'comment_body': 'The `GZ_SIM_RESOURCE_PATH` should be set up correctly by calling\r\n\r\n```bash\r\nsource ./install/setup.bash\r\n```\r\n\r\nThis is the reason for the files in the `hooks` directory of the plugin project. You can check this is working as follows:\r\n\r\n```bash\r\nLast login: Mon Jun 26 12:33:26 on ttys016\r\nrhys@MacPro2 ros2-ardupilot % pwd\r\n/Users/rhys/Code/ros2/humble/ros2-ardupilot\r\nrhys@MacPro2 ros2-ardupilot % env | grep GZ \r\nGZ_VERSION=garden\r\nGZ_IP=127.0.0.1\r\nrhys@MacPro2 ros2-ardupilot % source ./install/setup.zsh \r\nrhys@MacPro2 ros2-ardupilot % env | grep GZ             \r\nGZ_VERSION=garden\r\nGZ_IP=127.0.0.1\r\nGZ_SIM_RESOURCE_PATH=/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gz_gazebo/share/ardupilot_gz_gazebo/worlds:/Volumes/MacPro2_DV1/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gz_description/share:/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gz_description/share:/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gazebo/share/ardupilot_gazebo/worlds:/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gazebo/share/ardupilot_gazebo/models:/Volumes/MacPro2_DV1/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gazebo/share:/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gazebo/share\r\nGZ_SIM_SYSTEM_PLUGIN_PATH=/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gz_gazebo/lib/ardupilot_gz_gazebo/:/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gazebo/lib/ardupilot_gazebo/\r\n```\r\n', 'comment_created': datetime.datetime(2023, 6, 26, 16, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242890285, 'comment_body': 'Update the hook for `ardupilot_gz_description` so the launch finds the new `iris_with_lidar` model\r\n\r\n```diff\r\n# Add line to ardupilot_gz_description/hooks/ardupilot_gz_description.dsv.in`\r\n+ prepend-non-duplicate;GZ_SIM_RESOURCE_PATH;share/@PROJECT_NAME@/models\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2023, 6, 26, 22, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242895127, 'comment_body': 'This version of sdf supports the `degrees=""true""` attribute so you can write\r\n\r\n```xml\r\n<pose degrees=""true"">0 0 0.194923 0 0 90</pose>\r\n```\r\n\r\nwhich is a bit easier to read. Just noting for a future PR as we should prob. update this in all the models.\r\n', 'comment_created': datetime.datetime(2023, 6, 26, 22, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242902609, 'comment_body': ""We don't want this joint to rotate, so fix limits and set damping to assist with the physics. We're using a revolute joint instead of a fixed joint, because fixed joints can suffer from unwanted jitter in some physics solvers (the old ODE solver was prone to this - DART may be better).\r\n\r\n```suggestion\r\n      <axis>\r\n        <xyz>0 0 1</xyz>\r\n        <limit>\r\n          <lower>0</lower>\r\n          <upper>0</upper>\r\n        </limit>\r\n        <dynamics>\r\n          <damping>1</damping>\r\n        </dynamics>      \r\n      </axis>\r\n```"", 'comment_created': datetime.datetime(2023, 6, 26, 23, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242904979, 'comment_body': ""May want to revisit in future, and namespace the topic. Unlike URDF we can't easily parameterise the topic name with the model's name in the SDF file (although the name auto generated in the plugin should provide be fully scoped). "", 'comment_created': datetime.datetime(2023, 6, 26, 23, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242908032, 'comment_body': 'The project is missing `iris_with_lidar.rviz` - maybe forgot to `git add` the file?\r\n\r\nApply `black` formatter for line > 88 chars:\r\n\r\n```suggestion\r\n        arguments=[\r\n            ""-d"",\r\n            os.path.join(pkg_project_bringup, ""rviz"", ""iris_with_lidar.rviz""),\r\n        ],\r\n```\r\n', 'comment_created': datetime.datetime(2023, 6, 26, 23, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242916134, 'comment_body': 'Line > 88 char will fail `black` formatter. Add line break.\r\n\r\n```suggestion\r\n    pkg_ardupilot_gz_description = get_package_share_directory(\r\n        ""ardupilot_gz_description""\r\n    )\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 23, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1243924098, 'comment_body': ""This is amazing, didn't know we could do it that way, thanks for showing me @srmainwaring! This solution is way cleaner"", 'comment_created': datetime.datetime(2023, 6, 27, 15, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1243926405, 'comment_body': 'Awesome! Agreed', 'comment_created': datetime.datetime(2023, 6, 27, 15, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1243930517, 'comment_body': ""Also fixed joints don't get published to `/tf` by `ros_gz` for some reason."", 'comment_created': datetime.datetime(2023, 6, 27, 15, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1243946265, 'comment_body': 'I accidentally saved `iris_with_lidar.rviz` inside my `install` folder (in the ros2_ws), sorry about that. Adding it now.', 'comment_created': datetime.datetime(2023, 6, 27, 15, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}]","[{'commit_sha': '94bfa66235f0b01673fc87ee752c12ea17fcd4d8', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f303dc4f986cb4b41529299767185da2d37ef58f', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1400563497,Copter: Add iris with lidar in maze world,"Here are my tests:
![Screenshot from 2023-06-20 18-19-51](https://github.com/ArduPilot/ardupilot_gz/assets/62964137/1a24c1b4-497d-41dc-8f9b-f1f12637b34f)
![Screenshot from 2023-06-20 18-20-39](https://github.com/ArduPilot/ardupilot_gz/assets/62964137/774e1c43-2de1-4aa8-825f-4e54559a3bc7)
![Screenshot from 2023-06-20 18-20-50](https://github.com/ArduPilot/ardupilot_gz/assets/62964137/407e3ca0-652c-4706-9883-2a24db2e8456)

To launch it:
```bash
ros2 launch ardupilot_gz_bringup iris_maze.launch.py
```

Should this command be put in the README as well?",True,20,https://api.github.com/repos/ArduPilot/ardupilot_gz/pulls/20,https://github.com/ArduPilot/ardupilot_gz/pull/20,closed,1487,1,10,2,9,11,1,1,[{'name': 'enhancement'}],2023-06-20 21:37:54+00:00,2023-07-08 15:26:55+00:00,1532941.0,"17 days, 17:49:01","[{'comment_id': 1242446904, 'comment_body': 'The `GZ_SIM_RESOURCE_PATH` should be set up correctly by calling\r\n\r\n```bash\r\nsource ./install/setup.bash\r\n```\r\n\r\nThis is the reason for the files in the `hooks` directory of the plugin project. You can check this is working as follows:\r\n\r\n```bash\r\nLast login: Mon Jun 26 12:33:26 on ttys016\r\nrhys@MacPro2 ros2-ardupilot % pwd\r\n/Users/rhys/Code/ros2/humble/ros2-ardupilot\r\nrhys@MacPro2 ros2-ardupilot % env | grep GZ \r\nGZ_VERSION=garden\r\nGZ_IP=127.0.0.1\r\nrhys@MacPro2 ros2-ardupilot % source ./install/setup.zsh \r\nrhys@MacPro2 ros2-ardupilot % env | grep GZ             \r\nGZ_VERSION=garden\r\nGZ_IP=127.0.0.1\r\nGZ_SIM_RESOURCE_PATH=/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gz_gazebo/share/ardupilot_gz_gazebo/worlds:/Volumes/MacPro2_DV1/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gz_description/share:/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gz_description/share:/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gazebo/share/ardupilot_gazebo/worlds:/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gazebo/share/ardupilot_gazebo/models:/Volumes/MacPro2_DV1/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gazebo/share:/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gazebo/share\r\nGZ_SIM_SYSTEM_PLUGIN_PATH=/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gz_gazebo/lib/ardupilot_gz_gazebo/:/Users/rhys/Code/ros2/humble/ros2-ardupilot/install/ardupilot_gazebo/lib/ardupilot_gazebo/\r\n```\r\n', 'comment_created': datetime.datetime(2023, 6, 26, 16, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242890285, 'comment_body': 'Update the hook for `ardupilot_gz_description` so the launch finds the new `iris_with_lidar` model\r\n\r\n```diff\r\n# Add line to ardupilot_gz_description/hooks/ardupilot_gz_description.dsv.in`\r\n+ prepend-non-duplicate;GZ_SIM_RESOURCE_PATH;share/@PROJECT_NAME@/models\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2023, 6, 26, 22, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242895127, 'comment_body': 'This version of sdf supports the `degrees=""true""` attribute so you can write\r\n\r\n```xml\r\n<pose degrees=""true"">0 0 0.194923 0 0 90</pose>\r\n```\r\n\r\nwhich is a bit easier to read. Just noting for a future PR as we should prob. update this in all the models.\r\n', 'comment_created': datetime.datetime(2023, 6, 26, 22, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242902609, 'comment_body': ""We don't want this joint to rotate, so fix limits and set damping to assist with the physics. We're using a revolute joint instead of a fixed joint, because fixed joints can suffer from unwanted jitter in some physics solvers (the old ODE solver was prone to this - DART may be better).\r\n\r\n```suggestion\r\n      <axis>\r\n        <xyz>0 0 1</xyz>\r\n        <limit>\r\n          <lower>0</lower>\r\n          <upper>0</upper>\r\n        </limit>\r\n        <dynamics>\r\n          <damping>1</damping>\r\n        </dynamics>      \r\n      </axis>\r\n```"", 'comment_created': datetime.datetime(2023, 6, 26, 23, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242904979, 'comment_body': ""May want to revisit in future, and namespace the topic. Unlike URDF we can't easily parameterise the topic name with the model's name in the SDF file (although the name auto generated in the plugin should provide be fully scoped). "", 'comment_created': datetime.datetime(2023, 6, 26, 23, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242908032, 'comment_body': 'The project is missing `iris_with_lidar.rviz` - maybe forgot to `git add` the file?\r\n\r\nApply `black` formatter for line > 88 chars:\r\n\r\n```suggestion\r\n        arguments=[\r\n            ""-d"",\r\n            os.path.join(pkg_project_bringup, ""rviz"", ""iris_with_lidar.rviz""),\r\n        ],\r\n```\r\n', 'comment_created': datetime.datetime(2023, 6, 26, 23, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1242916134, 'comment_body': 'Line > 88 char will fail `black` formatter. Add line break.\r\n\r\n```suggestion\r\n    pkg_ardupilot_gz_description = get_package_share_directory(\r\n        ""ardupilot_gz_description""\r\n    )\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 23, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'srmainwaring', 'type': 'User'}, {'comment_id': 1243924098, 'comment_body': ""This is amazing, didn't know we could do it that way, thanks for showing me @srmainwaring! This solution is way cleaner"", 'comment_created': datetime.datetime(2023, 6, 27, 15, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1243926405, 'comment_body': 'Awesome! Agreed', 'comment_created': datetime.datetime(2023, 6, 27, 15, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1243930517, 'comment_body': ""Also fixed joints don't get published to `/tf` by `ros_gz` for some reason."", 'comment_created': datetime.datetime(2023, 6, 27, 15, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1243946265, 'comment_body': 'I accidentally saved `iris_with_lidar.rviz` inside my `install` folder (in the ros2_ws), sorry about that. Adding it now.', 'comment_created': datetime.datetime(2023, 6, 27, 15, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}]","[{'commit_sha': '94bfa66235f0b01673fc87ee752c12ea17fcd4d8', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f303dc4f986cb4b41529299767185da2d37ef58f', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1425997255,Tools: Add pre-commit with black and xmllint,"Added pre-commit .yaml file with `black` and `xmllint` as well as some `pre-commit` hooks.

The pre-commit documentation recommends running this the first time to ensure that all the files in the repository are formatted correctly:
```bash
pre-commit run --all-files
```
So I will add a second commit to make the recommended changes",True,21,https://api.github.com/repos/ArduPilot/ardupilot_gz/pulls/21,https://github.com/ArduPilot/ardupilot_gz/pull/21,closed,46,45,14,2,1,2,0,0,[],2023-07-08 16:56:36+00:00,2023-07-20 21:46:36+00:00,1054200.0,"12 days, 4:50:00","[{'comment_id': 1268554342, 'comment_body': ""What happens if you remove this? \r\n\r\nRight now it's ignoring markdown. "", 'comment_created': datetime.datetime(2023, 7, 19, 19, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1269984471, 'comment_body': ""I removed `types_or` as you suggested, it doesn't ignore markdown anymore. \r\n![Screenshot from 2023-07-20 18-30-21](https://github.com/ArduPilot/ardupilot_gz/assets/62964137/6a174b7d-ba36-4cb2-9170-a20c8b142afc)\r\n"", 'comment_created': datetime.datetime(2023, 7, 20, 21, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}]","[{'commit_sha': '628e9bd69c20cfc8a278ac049e9144468f06dd83', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '305fd0046922e532a227aeba89806fc4d59066c3', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1425997255,Tools: Add pre-commit with black and xmllint,"Added pre-commit .yaml file with `black` and `xmllint` as well as some `pre-commit` hooks.

The pre-commit documentation recommends running this the first time to ensure that all the files in the repository are formatted correctly:
```bash
pre-commit run --all-files
```
So I will add a second commit to make the recommended changes",True,21,https://api.github.com/repos/ArduPilot/ardupilot_gz/pulls/21,https://github.com/ArduPilot/ardupilot_gz/pull/21,closed,46,45,14,2,1,2,0,0,[],2023-07-08 16:56:36+00:00,2023-07-20 21:46:36+00:00,1054200.0,"12 days, 4:50:00","[{'comment_id': 1268554342, 'comment_body': ""What happens if you remove this? \r\n\r\nRight now it's ignoring markdown. "", 'comment_created': datetime.datetime(2023, 7, 19, 19, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1269984471, 'comment_body': ""I removed `types_or` as you suggested, it doesn't ignore markdown anymore. \r\n![Screenshot from 2023-07-20 18-30-21](https://github.com/ArduPilot/ardupilot_gz/assets/62964137/6a174b7d-ba36-4cb2-9170-a20c8b142afc)\r\n"", 'comment_created': datetime.datetime(2023, 7, 20, 21, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}]","[{'commit_sha': '628e9bd69c20cfc8a278ac049e9144468f06dd83', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '305fd0046922e532a227aeba89806fc4d59066c3', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1425997255,Tools: Add pre-commit with black and xmllint,"Added pre-commit .yaml file with `black` and `xmllint` as well as some `pre-commit` hooks.

The pre-commit documentation recommends running this the first time to ensure that all the files in the repository are formatted correctly:
```bash
pre-commit run --all-files
```
So I will add a second commit to make the recommended changes",True,21,https://api.github.com/repos/ArduPilot/ardupilot_gz/pulls/21,https://github.com/ArduPilot/ardupilot_gz/pull/21,closed,46,45,14,2,1,2,0,0,[],2023-07-08 16:56:36+00:00,2023-07-20 21:46:36+00:00,1054200.0,"12 days, 4:50:00","[{'comment_id': 1268554342, 'comment_body': ""What happens if you remove this? \r\n\r\nRight now it's ignoring markdown. "", 'comment_created': datetime.datetime(2023, 7, 19, 19, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1269984471, 'comment_body': ""I removed `types_or` as you suggested, it doesn't ignore markdown anymore. \r\n![Screenshot from 2023-07-20 18-30-21](https://github.com/ArduPilot/ardupilot_gz/assets/62964137/6a174b7d-ba36-4cb2-9170-a20c8b142afc)\r\n"", 'comment_created': datetime.datetime(2023, 7, 20, 21, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}]","[{'commit_sha': '628e9bd69c20cfc8a278ac049e9144468f06dd83', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '305fd0046922e532a227aeba89806fc4d59066c3', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1410930754,AP_DDS: Add dynamic TF subscriber support for odometry,* This is the first step for GSOC Cartographer external odometry input,True,24155,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24155,https://github.com/ArduPilot/ardupilot/pull/24155,closed,66,14,5,1,6,15,2,1,"[{'name': 'ROS'}, {'name': 'For-4.5'}]",2023-06-28 03:45:12+00:00,2023-07-31 03:28:11+00:00,2850179.0,"32 days, 23:42:59","[{'comment_id': 1246634184, 'comment_body': ""Maybe we should also check if the `VISO_TYPE` parameter is adequate. If it is disabled there's no point in handling the tf data for now"", 'comment_created': datetime.datetime(2023, 6, 29, 13, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1246693894, 'comment_body': 'Changes to make it consistent with `dds_xrce_profile.xml`:\r\n```suggestion\r\n        .topic_profile_label = ""dynamictf__t"",\r\n        .dw_profile_label = """",\r\n        .dr_profile_label = ""dynamictf___dr"",\r\n```\r\nAn error was appearing before and the subscriber wasn\'t created. With this changes it is now working:\r\n![Screenshot from 2023-06-29 11-06-10](https://github.com/ArduPilot/ardupilot/assets/62964137/3a6012b8-b395-42d0-8c03-aa714b436adf)\r\n\r\nThis should solve the `test dds / build (stm32h7) (pull_request) ` CI fail\r\n', 'comment_created': datetime.datetime(2023, 6, 29, 14, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1256711581, 'comment_body': '@Ryanf55 what do you think?', 'comment_created': datetime.datetime(2023, 7, 8, 1, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1260409294, 'comment_body': '> \r\n\r\nYea, perhaps we should not even subscribe in DDS unless that param is set?', 'comment_created': datetime.datetime(2023, 7, 12, 0, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1262614324, 'comment_body': ""Interraction with ardupilot specific libs and params will happen in the follow up implementation. I'll make sure this gets addressed."", 'comment_created': datetime.datetime(2023, 7, 13, 14, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1263251733, 'comment_body': '```suggestion\r\n        .dr_profile_label = ""dynamictf__dr"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 3, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1263252155, 'comment_body': '```suggestion\r\n            GCS_SEND_TEXT(MAV_SEVERITY_INFO,""Received tf2_msgs/TFMessage of length: %u"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 3, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1263260319, 'comment_body': '![Screenshot from 2023-07-14 00-22-58](https://github.com/ArduPilot/ardupilot/assets/62964137/4780ff78-89d0-401b-b559-83856882aa2e)\r\n', 'comment_created': datetime.datetime(2023, 7, 14, 3, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1263260541, 'comment_body': '![image](https://github.com/ArduPilot/ardupilot/assets/62964137/05ac9e6c-ce69-4f75-97e0-35d2c1d78dbb)', 'comment_created': datetime.datetime(2023, 7, 14, 3, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1274222506, 'comment_body': 'Thanks! Fixed in 01bf7238cdafda250e86d19da2e9aa9a6de49c04', 'comment_created': datetime.datetime(2023, 7, 25, 23, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1277016703, 'comment_body': ""Apparently the Ardupilot C compiler doesn't support `%z`. It failed CI and I also wasn't able to compile it locally."", 'comment_created': datetime.datetime(2023, 7, 28, 2, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1277678562, 'comment_body': 'Which board is it failing for you on? ', 'comment_created': datetime.datetime(2023, 7, 28, 15, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1278030960, 'comment_body': '```suggestion\r\n            GCS_SEND_TEXT(MAV_SEVERITY_INFO,""Received tf2_msgs/TFMessage of length: %lu"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 19, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1278459219, 'comment_body': 'Pixhawk4', 'comment_created': datetime.datetime(2023, 7, 29, 23, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1278465735, 'comment_body': 'With the last commit, it passes CI with the use of a static cast. \r\nPlease approve if you are happy. ', 'comment_created': datetime.datetime(2023, 7, 29, 23, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': 'ea42a5404177a5f9e8ad4df897e1cebc8879219c', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Ryan,25047695,ryanfriedman5410+github@gmail.com,User,,105,,8,29
1410930754,AP_DDS: Add dynamic TF subscriber support for odometry,* This is the first step for GSOC Cartographer external odometry input,True,24155,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24155,https://github.com/ArduPilot/ardupilot/pull/24155,closed,66,14,5,1,6,15,2,1,"[{'name': 'ROS'}, {'name': 'For-4.5'}]",2023-06-28 03:45:12+00:00,2023-07-31 03:28:11+00:00,2850179.0,"32 days, 23:42:59","[{'comment_id': 1246634184, 'comment_body': ""Maybe we should also check if the `VISO_TYPE` parameter is adequate. If it is disabled there's no point in handling the tf data for now"", 'comment_created': datetime.datetime(2023, 6, 29, 13, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1246693894, 'comment_body': 'Changes to make it consistent with `dds_xrce_profile.xml`:\r\n```suggestion\r\n        .topic_profile_label = ""dynamictf__t"",\r\n        .dw_profile_label = """",\r\n        .dr_profile_label = ""dynamictf___dr"",\r\n```\r\nAn error was appearing before and the subscriber wasn\'t created. With this changes it is now working:\r\n![Screenshot from 2023-06-29 11-06-10](https://github.com/ArduPilot/ardupilot/assets/62964137/3a6012b8-b395-42d0-8c03-aa714b436adf)\r\n\r\nThis should solve the `test dds / build (stm32h7) (pull_request) ` CI fail\r\n', 'comment_created': datetime.datetime(2023, 6, 29, 14, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1256711581, 'comment_body': '@Ryanf55 what do you think?', 'comment_created': datetime.datetime(2023, 7, 8, 1, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1260409294, 'comment_body': '> \r\n\r\nYea, perhaps we should not even subscribe in DDS unless that param is set?', 'comment_created': datetime.datetime(2023, 7, 12, 0, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1262614324, 'comment_body': ""Interraction with ardupilot specific libs and params will happen in the follow up implementation. I'll make sure this gets addressed."", 'comment_created': datetime.datetime(2023, 7, 13, 14, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1263251733, 'comment_body': '```suggestion\r\n        .dr_profile_label = ""dynamictf__dr"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 3, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1263252155, 'comment_body': '```suggestion\r\n            GCS_SEND_TEXT(MAV_SEVERITY_INFO,""Received tf2_msgs/TFMessage of length: %u"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 3, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1263260319, 'comment_body': '![Screenshot from 2023-07-14 00-22-58](https://github.com/ArduPilot/ardupilot/assets/62964137/4780ff78-89d0-401b-b559-83856882aa2e)\r\n', 'comment_created': datetime.datetime(2023, 7, 14, 3, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1263260541, 'comment_body': '![image](https://github.com/ArduPilot/ardupilot/assets/62964137/05ac9e6c-ce69-4f75-97e0-35d2c1d78dbb)', 'comment_created': datetime.datetime(2023, 7, 14, 3, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1274222506, 'comment_body': 'Thanks! Fixed in 01bf7238cdafda250e86d19da2e9aa9a6de49c04', 'comment_created': datetime.datetime(2023, 7, 25, 23, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1277016703, 'comment_body': ""Apparently the Ardupilot C compiler doesn't support `%z`. It failed CI and I also wasn't able to compile it locally."", 'comment_created': datetime.datetime(2023, 7, 28, 2, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1277678562, 'comment_body': 'Which board is it failing for you on? ', 'comment_created': datetime.datetime(2023, 7, 28, 15, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1278030960, 'comment_body': '```suggestion\r\n            GCS_SEND_TEXT(MAV_SEVERITY_INFO,""Received tf2_msgs/TFMessage of length: %lu"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 19, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1278459219, 'comment_body': 'Pixhawk4', 'comment_created': datetime.datetime(2023, 7, 29, 23, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1278465735, 'comment_body': 'With the last commit, it passes CI with the use of a static cast. \r\nPlease approve if you are happy. ', 'comment_created': datetime.datetime(2023, 7, 29, 23, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': 'ea42a5404177a5f9e8ad4df897e1cebc8879219c', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Ryan,25047695,ryanfriedman5410+github@gmail.com,User,,105,,8,29
1425997255,Tools: Add pre-commit with black and xmllint,"Added pre-commit .yaml file with `black` and `xmllint` as well as some `pre-commit` hooks.

The pre-commit documentation recommends running this the first time to ensure that all the files in the repository are formatted correctly:
```bash
pre-commit run --all-files
```
So I will add a second commit to make the recommended changes",True,21,https://api.github.com/repos/ArduPilot/ardupilot_gz/pulls/21,https://github.com/ArduPilot/ardupilot_gz/pull/21,closed,46,45,14,2,1,2,0,0,[],2023-07-08 16:56:36+00:00,2023-07-20 21:46:36+00:00,1054200.0,"12 days, 4:50:00","[{'comment_id': 1268554342, 'comment_body': ""What happens if you remove this? \r\n\r\nRight now it's ignoring markdown. "", 'comment_created': datetime.datetime(2023, 7, 19, 19, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1269984471, 'comment_body': ""I removed `types_or` as you suggested, it doesn't ignore markdown anymore. \r\n![Screenshot from 2023-07-20 18-30-21](https://github.com/ArduPilot/ardupilot_gz/assets/62964137/6a174b7d-ba36-4cb2-9170-a20c8b142afc)\r\n"", 'comment_created': datetime.datetime(2023, 7, 20, 21, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}]","[{'commit_sha': '628e9bd69c20cfc8a278ac049e9144468f06dd83', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '305fd0046922e532a227aeba89806fc4d59066c3', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1425997255,Tools: Add pre-commit with black and xmllint,"Added pre-commit .yaml file with `black` and `xmllint` as well as some `pre-commit` hooks.

The pre-commit documentation recommends running this the first time to ensure that all the files in the repository are formatted correctly:
```bash
pre-commit run --all-files
```
So I will add a second commit to make the recommended changes",True,21,https://api.github.com/repos/ArduPilot/ardupilot_gz/pulls/21,https://github.com/ArduPilot/ardupilot_gz/pull/21,closed,46,45,14,2,1,2,0,0,[],2023-07-08 16:56:36+00:00,2023-07-20 21:46:36+00:00,1054200.0,"12 days, 4:50:00","[{'comment_id': 1268554342, 'comment_body': ""What happens if you remove this? \r\n\r\nRight now it's ignoring markdown. "", 'comment_created': datetime.datetime(2023, 7, 19, 19, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1269984471, 'comment_body': ""I removed `types_or` as you suggested, it doesn't ignore markdown anymore. \r\n![Screenshot from 2023-07-20 18-30-21](https://github.com/ArduPilot/ardupilot_gz/assets/62964137/6a174b7d-ba36-4cb2-9170-a20c8b142afc)\r\n"", 'comment_created': datetime.datetime(2023, 7, 20, 21, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}]","[{'commit_sha': '628e9bd69c20cfc8a278ac049e9144468f06dd83', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '305fd0046922e532a227aeba89806fc4d59066c3', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1425997255,Tools: Add pre-commit with black and xmllint,"Added pre-commit .yaml file with `black` and `xmllint` as well as some `pre-commit` hooks.

The pre-commit documentation recommends running this the first time to ensure that all the files in the repository are formatted correctly:
```bash
pre-commit run --all-files
```
So I will add a second commit to make the recommended changes",True,21,https://api.github.com/repos/ArduPilot/ardupilot_gz/pulls/21,https://github.com/ArduPilot/ardupilot_gz/pull/21,closed,46,45,14,2,1,2,0,0,[],2023-07-08 16:56:36+00:00,2023-07-20 21:46:36+00:00,1054200.0,"12 days, 4:50:00","[{'comment_id': 1268554342, 'comment_body': ""What happens if you remove this? \r\n\r\nRight now it's ignoring markdown. "", 'comment_created': datetime.datetime(2023, 7, 19, 19, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1269984471, 'comment_body': ""I removed `types_or` as you suggested, it doesn't ignore markdown anymore. \r\n![Screenshot from 2023-07-20 18-30-21](https://github.com/ArduPilot/ardupilot_gz/assets/62964137/6a174b7d-ba36-4cb2-9170-a20c8b142afc)\r\n"", 'comment_created': datetime.datetime(2023, 7, 20, 21, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}]","[{'commit_sha': '628e9bd69c20cfc8a278ac049e9144468f06dd83', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '305fd0046922e532a227aeba89806fc4d59066c3', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1443560822,Update README with Micro XRCE DDS Gen dependency,Solves #19 ,True,22,https://api.github.com/repos/ArduPilot/ardupilot_gz/pulls/22,https://github.com/ArduPilot/ardupilot_gz/pull/22,closed,1,0,1,1,0,0,0,0,[],2023-07-20 20:27:28+00:00,2023-07-21 00:31:41+00:00,14653.0,4:04:13,[],"[{'commit_sha': '87de51590a613f10eb917b7ad0674d27fdd793c9', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1443560822,Update README with Micro XRCE DDS Gen dependency,Solves #19 ,True,22,https://api.github.com/repos/ArduPilot/ardupilot_gz/pulls/22,https://github.com/ArduPilot/ardupilot_gz/pull/22,closed,1,0,1,1,0,0,0,0,[],2023-07-20 20:27:28+00:00,2023-07-21 00:31:41+00:00,14653.0,4:04:13,[],"[{'commit_sha': '87de51590a613f10eb917b7ad0674d27fdd793c9', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1443588795,dev: Add ROS 2 documentation,"The purpose of this PR is to add a ROS 2 page, similar to the current [ROS](https://ardupilot.org/dev/docs/ros.html) page on `ardupilot_wiki`. The page `<ros2-sitl>` was added to get users started.

I am also on working on `<ros2-gazebo>` and `<ros2-gazebo-slam>` for future PRs.

Although I haven't found a way to do it, the ROS 2 page should sit next to the ROS index in the dev menu:
![image](https://github.com/ArduPilot/ardupilot_wiki/assets/62964137/4b0f6ce6-2e44-4c8f-8953-4e7e4a4b45f6)
",True,5298,https://api.github.com/repos/ArduPilot/ardupilot_wiki/pulls/5298,https://github.com/ArduPilot/ardupilot_wiki/pull/5298,closed,182,3,4,1,4,0,0,0,[],2023-07-20 20:49:39+00:00,2023-07-27 12:17:10+00:00,574051.0,"6 days, 15:27:31",[],"[{'commit_sha': 'd3c588184bd217a652946bd84cc662fbe0fac747', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1443588795,dev: Add ROS 2 documentation,"The purpose of this PR is to add a ROS 2 page, similar to the current [ROS](https://ardupilot.org/dev/docs/ros.html) page on `ardupilot_wiki`. The page `<ros2-sitl>` was added to get users started.

I am also on working on `<ros2-gazebo>` and `<ros2-gazebo-slam>` for future PRs.

Although I haven't found a way to do it, the ROS 2 page should sit next to the ROS index in the dev menu:
![image](https://github.com/ArduPilot/ardupilot_wiki/assets/62964137/4b0f6ce6-2e44-4c8f-8953-4e7e4a4b45f6)
",True,5298,https://api.github.com/repos/ArduPilot/ardupilot_wiki/pulls/5298,https://github.com/ArduPilot/ardupilot_wiki/pull/5298,closed,182,3,4,1,4,0,0,0,[],2023-07-20 20:49:39+00:00,2023-07-27 12:17:10+00:00,574051.0,"6 days, 15:27:31",[],"[{'commit_sha': 'd3c588184bd217a652946bd84cc662fbe0fac747', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1443588795,dev: Add ROS 2 documentation,"The purpose of this PR is to add a ROS 2 page, similar to the current [ROS](https://ardupilot.org/dev/docs/ros.html) page on `ardupilot_wiki`. The page `<ros2-sitl>` was added to get users started.

I am also on working on `<ros2-gazebo>` and `<ros2-gazebo-slam>` for future PRs.

Although I haven't found a way to do it, the ROS 2 page should sit next to the ROS index in the dev menu:
![image](https://github.com/ArduPilot/ardupilot_wiki/assets/62964137/4b0f6ce6-2e44-4c8f-8953-4e7e4a4b45f6)
",True,5298,https://api.github.com/repos/ArduPilot/ardupilot_wiki/pulls/5298,https://github.com/ArduPilot/ardupilot_wiki/pull/5298,closed,182,3,4,1,4,0,0,0,[],2023-07-20 20:49:39+00:00,2023-07-27 12:17:10+00:00,574051.0,"6 days, 15:27:31",[],"[{'commit_sha': 'd3c588184bd217a652946bd84cc662fbe0fac747', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1453138175,Copter: rename robot_state_publisher tf topic to /ap/tf,"I've explained in detail why `robot_state_publisher`'s tf tree should be used when working with other ros applications in a [Ardupilot Discourse post](https://discuss.ardupilot.org/t/gsoc-2023-gps-denied-autonomous-exploration-with-ros-2/101121/16), as it follows ROS REP 105 tree structure.

Because of that, we should rename `/ignore/tf` | `/ignore/tf_static` to `/ap/tf` | `ap/tf_static` as this is the namespace currently used by `AP_DDS_Client`. 

I will adequate the rviz launch calls in `ardupilot_ros` to match this namespace (by remapping the `/tf` topics). With this I will be able to get `cartographer` and `navigation2` working correctly.",True,23,https://api.github.com/repos/ArduPilot/ardupilot_gz/pulls/23,https://github.com/ArduPilot/ardupilot_gz/pull/23,closed,10,46,4,3,1,1,0,0,[],2023-07-28 03:29:26+00:00,2023-08-04 03:34:13+00:00,605087.0,"7 days, 0:04:47","[{'comment_id': 1281235448, 'comment_body': 'Do all these changes need to be part of this PR for the TF tree?', 'comment_created': datetime.datetime(2023, 8, 1, 23, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '24e5fbb754854beaa66000de575baee3705176d6', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1db50bf574ddeea00fb552cafb7a3d54e0ba7ab', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12eaeca450c44db5d45ffacb7fbb76721bcb7f35', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1453138175,Copter: rename robot_state_publisher tf topic to /ap/tf,"I've explained in detail why `robot_state_publisher`'s tf tree should be used when working with other ros applications in a [Ardupilot Discourse post](https://discuss.ardupilot.org/t/gsoc-2023-gps-denied-autonomous-exploration-with-ros-2/101121/16), as it follows ROS REP 105 tree structure.

Because of that, we should rename `/ignore/tf` | `/ignore/tf_static` to `/ap/tf` | `ap/tf_static` as this is the namespace currently used by `AP_DDS_Client`. 

I will adequate the rviz launch calls in `ardupilot_ros` to match this namespace (by remapping the `/tf` topics). With this I will be able to get `cartographer` and `navigation2` working correctly.",True,23,https://api.github.com/repos/ArduPilot/ardupilot_gz/pulls/23,https://github.com/ArduPilot/ardupilot_gz/pull/23,closed,10,46,4,3,1,1,0,0,[],2023-07-28 03:29:26+00:00,2023-08-04 03:34:13+00:00,605087.0,"7 days, 0:04:47","[{'comment_id': 1281235448, 'comment_body': 'Do all these changes need to be part of this PR for the TF tree?', 'comment_created': datetime.datetime(2023, 8, 1, 23, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '24e5fbb754854beaa66000de575baee3705176d6', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1db50bf574ddeea00fb552cafb7a3d54e0ba7ab', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12eaeca450c44db5d45ffacb7fbb76721bcb7f35', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1453138175,Copter: rename robot_state_publisher tf topic to /ap/tf,"I've explained in detail why `robot_state_publisher`'s tf tree should be used when working with other ros applications in a [Ardupilot Discourse post](https://discuss.ardupilot.org/t/gsoc-2023-gps-denied-autonomous-exploration-with-ros-2/101121/16), as it follows ROS REP 105 tree structure.

Because of that, we should rename `/ignore/tf` | `/ignore/tf_static` to `/ap/tf` | `ap/tf_static` as this is the namespace currently used by `AP_DDS_Client`. 

I will adequate the rviz launch calls in `ardupilot_ros` to match this namespace (by remapping the `/tf` topics). With this I will be able to get `cartographer` and `navigation2` working correctly.",True,23,https://api.github.com/repos/ArduPilot/ardupilot_gz/pulls/23,https://github.com/ArduPilot/ardupilot_gz/pull/23,closed,10,46,4,3,1,1,0,0,[],2023-07-28 03:29:26+00:00,2023-08-04 03:34:13+00:00,605087.0,"7 days, 0:04:47","[{'comment_id': 1281235448, 'comment_body': 'Do all these changes need to be part of this PR for the TF tree?', 'comment_created': datetime.datetime(2023, 8, 1, 23, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '24e5fbb754854beaa66000de575baee3705176d6', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1db50bf574ddeea00fb552cafb7a3d54e0ba7ab', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12eaeca450c44db5d45ffacb7fbb76721bcb7f35', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1463434089,Add integration with cartographer in ROS 2,"This PR is dedicated to adding cartographer-ros integration and transforming this repository into a ROS 2 package. Following the instructions on the new README, the results are as follows:

![Screenshot from 2023-08-04 17-44-38](https://github.com/ArduPilot/ardupilot_ros/assets/62964137/45a6c74c-7496-4285-ad57-945c2402cc4b)
",True,8,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/8,https://github.com/ArduPilot/ardupilot_ros/pull/8,closed,1063,2614,28,5,2,18,1,0,[{'name': 'ros2'}],2023-08-04 20:34:55+00:00,2023-08-11 15:19:51+00:00,585896.0,"6 days, 18:44:56","[{'comment_id': 1284873538, 'comment_body': 'Update this to `ardupilot/ardupilot_ros -b humble`? ', 'comment_created': datetime.datetime(2023, 8, 4, 21, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284873902, 'comment_body': '`Build ardupilot_ros and ardupilot_gz with colcon build`? Unclear why you need --packages-select later', 'comment_created': datetime.datetime(2023, 8, 4, 21, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284874266, 'comment_body': 'capitalize `2d` to `2D`', 'comment_created': datetime.datetime(2023, 8, 4, 21, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284875086, 'comment_body': 'Can we switch to pathlib? ', 'comment_created': datetime.datetime(2023, 8, 4, 21, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284875379, 'comment_body': 'Can we use pathlib? ', 'comment_created': datetime.datetime(2023, 8, 4, 21, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284875801, 'comment_body': 'GPLv3?', 'comment_created': datetime.datetime(2023, 8, 4, 21, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284876077, 'comment_body': 'Add license', 'comment_created': datetime.datetime(2023, 8, 4, 22, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287342049, 'comment_body': 'I assume `ardupilot_gz` is already built since it is listed as a requirement', 'comment_created': datetime.datetime(2023, 8, 8, 16, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1287361629, 'comment_body': ""I'm not sure what happened to the license, maybe it got lost in a sync at some point ? sorry about that"", 'comment_created': datetime.datetime(2023, 8, 8, 16, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1287370386, 'comment_body': 'Will do! \r\nDid a little research as to why `pathlib` is preferred. I will leave this link here for future reference: https://stackoverflow.com/questions/67112343/pathlib-vs-os-path-join-in-python', 'comment_created': datetime.datetime(2023, 8, 8, 16, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1287795140, 'comment_body': 'Missing L', 'comment_created': datetime.datetime(2023, 8, 8, 23, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287822432, 'comment_body': 'Can simplify to this, and remove the if statement. \r\ngz_sim_resource_path = os.environ.get([""GZ_SIM_RESOURCE_PATH""])', 'comment_created': datetime.datetime(2023, 8, 9, 1, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287822842, 'comment_body': 'Try `"":"".join([sdf_path, gz_sim_resource_path])`', 'comment_created': datetime.datetime(2023, 8, 9, 1, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287884819, 'comment_body': 'Did you forget to push the change? ', 'comment_created': datetime.datetime(2023, 8, 9, 3, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287888978, 'comment_body': 'Missing newline. Please rebase on top of the main development branch and then `pre-commit run all-files` which will pick up any files in this PR. ', 'comment_created': datetime.datetime(2023, 8, 9, 3, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1290806609, 'comment_body': 'Had an error, just fixed it', 'comment_created': datetime.datetime(2023, 8, 11, 0, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1290807492, 'comment_body': 'Completely removed this section, as robot_state_publisher was moved to `ardupilot_gz`', 'comment_created': datetime.datetime(2023, 8, 11, 0, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1290807510, 'comment_body': 'Completely removed this section, as robot_state_publisher was moved to `ardupilot_gz`', 'comment_created': datetime.datetime(2023, 8, 11, 0, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}]","[{'commit_sha': 'e090f85b5d56d620af0aef7050e900329b2b2974', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ed708a003cfd712ee87d0957dfe3059c613c167', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88f098778e2ec436372d70252f2ce8fc0f35ed6d', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '051b835a2019d825da7aab6f15d62355272d7bf2', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac3730238cd9b958a72793a17a825b4d28d90a17', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1463434089,Add integration with cartographer in ROS 2,"This PR is dedicated to adding cartographer-ros integration and transforming this repository into a ROS 2 package. Following the instructions on the new README, the results are as follows:

![Screenshot from 2023-08-04 17-44-38](https://github.com/ArduPilot/ardupilot_ros/assets/62964137/45a6c74c-7496-4285-ad57-945c2402cc4b)
",True,8,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/8,https://github.com/ArduPilot/ardupilot_ros/pull/8,closed,1063,2614,28,5,2,18,1,0,[{'name': 'ros2'}],2023-08-04 20:34:55+00:00,2023-08-11 15:19:51+00:00,585896.0,"6 days, 18:44:56","[{'comment_id': 1284873538, 'comment_body': 'Update this to `ardupilot/ardupilot_ros -b humble`? ', 'comment_created': datetime.datetime(2023, 8, 4, 21, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284873902, 'comment_body': '`Build ardupilot_ros and ardupilot_gz with colcon build`? Unclear why you need --packages-select later', 'comment_created': datetime.datetime(2023, 8, 4, 21, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284874266, 'comment_body': 'capitalize `2d` to `2D`', 'comment_created': datetime.datetime(2023, 8, 4, 21, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284875086, 'comment_body': 'Can we switch to pathlib? ', 'comment_created': datetime.datetime(2023, 8, 4, 21, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284875379, 'comment_body': 'Can we use pathlib? ', 'comment_created': datetime.datetime(2023, 8, 4, 21, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284875801, 'comment_body': 'GPLv3?', 'comment_created': datetime.datetime(2023, 8, 4, 21, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284876077, 'comment_body': 'Add license', 'comment_created': datetime.datetime(2023, 8, 4, 22, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287342049, 'comment_body': 'I assume `ardupilot_gz` is already built since it is listed as a requirement', 'comment_created': datetime.datetime(2023, 8, 8, 16, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1287361629, 'comment_body': ""I'm not sure what happened to the license, maybe it got lost in a sync at some point ? sorry about that"", 'comment_created': datetime.datetime(2023, 8, 8, 16, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1287370386, 'comment_body': 'Will do! \r\nDid a little research as to why `pathlib` is preferred. I will leave this link here for future reference: https://stackoverflow.com/questions/67112343/pathlib-vs-os-path-join-in-python', 'comment_created': datetime.datetime(2023, 8, 8, 16, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1287795140, 'comment_body': 'Missing L', 'comment_created': datetime.datetime(2023, 8, 8, 23, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287822432, 'comment_body': 'Can simplify to this, and remove the if statement. \r\ngz_sim_resource_path = os.environ.get([""GZ_SIM_RESOURCE_PATH""])', 'comment_created': datetime.datetime(2023, 8, 9, 1, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287822842, 'comment_body': 'Try `"":"".join([sdf_path, gz_sim_resource_path])`', 'comment_created': datetime.datetime(2023, 8, 9, 1, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287884819, 'comment_body': 'Did you forget to push the change? ', 'comment_created': datetime.datetime(2023, 8, 9, 3, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287888978, 'comment_body': 'Missing newline. Please rebase on top of the main development branch and then `pre-commit run all-files` which will pick up any files in this PR. ', 'comment_created': datetime.datetime(2023, 8, 9, 3, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1290806609, 'comment_body': 'Had an error, just fixed it', 'comment_created': datetime.datetime(2023, 8, 11, 0, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1290807492, 'comment_body': 'Completely removed this section, as robot_state_publisher was moved to `ardupilot_gz`', 'comment_created': datetime.datetime(2023, 8, 11, 0, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1290807510, 'comment_body': 'Completely removed this section, as robot_state_publisher was moved to `ardupilot_gz`', 'comment_created': datetime.datetime(2023, 8, 11, 0, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}]","[{'commit_sha': 'e090f85b5d56d620af0aef7050e900329b2b2974', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ed708a003cfd712ee87d0957dfe3059c613c167', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88f098778e2ec436372d70252f2ce8fc0f35ed6d', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '051b835a2019d825da7aab6f15d62355272d7bf2', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac3730238cd9b958a72793a17a825b4d28d90a17', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1463434089,Add integration with cartographer in ROS 2,"This PR is dedicated to adding cartographer-ros integration and transforming this repository into a ROS 2 package. Following the instructions on the new README, the results are as follows:

![Screenshot from 2023-08-04 17-44-38](https://github.com/ArduPilot/ardupilot_ros/assets/62964137/45a6c74c-7496-4285-ad57-945c2402cc4b)
",True,8,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/8,https://github.com/ArduPilot/ardupilot_ros/pull/8,closed,1063,2614,28,5,2,18,1,0,[{'name': 'ros2'}],2023-08-04 20:34:55+00:00,2023-08-11 15:19:51+00:00,585896.0,"6 days, 18:44:56","[{'comment_id': 1284873538, 'comment_body': 'Update this to `ardupilot/ardupilot_ros -b humble`? ', 'comment_created': datetime.datetime(2023, 8, 4, 21, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284873902, 'comment_body': '`Build ardupilot_ros and ardupilot_gz with colcon build`? Unclear why you need --packages-select later', 'comment_created': datetime.datetime(2023, 8, 4, 21, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284874266, 'comment_body': 'capitalize `2d` to `2D`', 'comment_created': datetime.datetime(2023, 8, 4, 21, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284875086, 'comment_body': 'Can we switch to pathlib? ', 'comment_created': datetime.datetime(2023, 8, 4, 21, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284875379, 'comment_body': 'Can we use pathlib? ', 'comment_created': datetime.datetime(2023, 8, 4, 21, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284875801, 'comment_body': 'GPLv3?', 'comment_created': datetime.datetime(2023, 8, 4, 21, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1284876077, 'comment_body': 'Add license', 'comment_created': datetime.datetime(2023, 8, 4, 22, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287342049, 'comment_body': 'I assume `ardupilot_gz` is already built since it is listed as a requirement', 'comment_created': datetime.datetime(2023, 8, 8, 16, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1287361629, 'comment_body': ""I'm not sure what happened to the license, maybe it got lost in a sync at some point ? sorry about that"", 'comment_created': datetime.datetime(2023, 8, 8, 16, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1287370386, 'comment_body': 'Will do! \r\nDid a little research as to why `pathlib` is preferred. I will leave this link here for future reference: https://stackoverflow.com/questions/67112343/pathlib-vs-os-path-join-in-python', 'comment_created': datetime.datetime(2023, 8, 8, 16, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1287795140, 'comment_body': 'Missing L', 'comment_created': datetime.datetime(2023, 8, 8, 23, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287822432, 'comment_body': 'Can simplify to this, and remove the if statement. \r\ngz_sim_resource_path = os.environ.get([""GZ_SIM_RESOURCE_PATH""])', 'comment_created': datetime.datetime(2023, 8, 9, 1, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287822842, 'comment_body': 'Try `"":"".join([sdf_path, gz_sim_resource_path])`', 'comment_created': datetime.datetime(2023, 8, 9, 1, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287884819, 'comment_body': 'Did you forget to push the change? ', 'comment_created': datetime.datetime(2023, 8, 9, 3, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287888978, 'comment_body': 'Missing newline. Please rebase on top of the main development branch and then `pre-commit run all-files` which will pick up any files in this PR. ', 'comment_created': datetime.datetime(2023, 8, 9, 3, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1290806609, 'comment_body': 'Had an error, just fixed it', 'comment_created': datetime.datetime(2023, 8, 11, 0, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1290807492, 'comment_body': 'Completely removed this section, as robot_state_publisher was moved to `ardupilot_gz`', 'comment_created': datetime.datetime(2023, 8, 11, 0, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1290807510, 'comment_body': 'Completely removed this section, as robot_state_publisher was moved to `ardupilot_gz`', 'comment_created': datetime.datetime(2023, 8, 11, 0, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}]","[{'commit_sha': 'e090f85b5d56d620af0aef7050e900329b2b2974', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ed708a003cfd712ee87d0957dfe3059c613c167', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88f098778e2ec436372d70252f2ce8fc0f35ed6d', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '051b835a2019d825da7aab6f15d62355272d7bf2', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac3730238cd9b958a72793a17a825b4d28d90a17', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1410930754,AP_DDS: Add dynamic TF subscriber support for odometry,* This is the first step for GSOC Cartographer external odometry input,True,24155,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24155,https://github.com/ArduPilot/ardupilot/pull/24155,closed,66,14,5,1,6,15,2,1,"[{'name': 'ROS'}, {'name': 'For-4.5'}]",2023-06-28 03:45:12+00:00,2023-07-31 03:28:11+00:00,2850179.0,"32 days, 23:42:59","[{'comment_id': 1246634184, 'comment_body': ""Maybe we should also check if the `VISO_TYPE` parameter is adequate. If it is disabled there's no point in handling the tf data for now"", 'comment_created': datetime.datetime(2023, 6, 29, 13, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1246693894, 'comment_body': 'Changes to make it consistent with `dds_xrce_profile.xml`:\r\n```suggestion\r\n        .topic_profile_label = ""dynamictf__t"",\r\n        .dw_profile_label = """",\r\n        .dr_profile_label = ""dynamictf___dr"",\r\n```\r\nAn error was appearing before and the subscriber wasn\'t created. With this changes it is now working:\r\n![Screenshot from 2023-06-29 11-06-10](https://github.com/ArduPilot/ardupilot/assets/62964137/3a6012b8-b395-42d0-8c03-aa714b436adf)\r\n\r\nThis should solve the `test dds / build (stm32h7) (pull_request) ` CI fail\r\n', 'comment_created': datetime.datetime(2023, 6, 29, 14, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1256711581, 'comment_body': '@Ryanf55 what do you think?', 'comment_created': datetime.datetime(2023, 7, 8, 1, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1260409294, 'comment_body': '> \r\n\r\nYea, perhaps we should not even subscribe in DDS unless that param is set?', 'comment_created': datetime.datetime(2023, 7, 12, 0, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1262614324, 'comment_body': ""Interraction with ardupilot specific libs and params will happen in the follow up implementation. I'll make sure this gets addressed."", 'comment_created': datetime.datetime(2023, 7, 13, 14, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1263251733, 'comment_body': '```suggestion\r\n        .dr_profile_label = ""dynamictf__dr"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 3, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1263252155, 'comment_body': '```suggestion\r\n            GCS_SEND_TEXT(MAV_SEVERITY_INFO,""Received tf2_msgs/TFMessage of length: %u"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 3, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1263260319, 'comment_body': '![Screenshot from 2023-07-14 00-22-58](https://github.com/ArduPilot/ardupilot/assets/62964137/4780ff78-89d0-401b-b559-83856882aa2e)\r\n', 'comment_created': datetime.datetime(2023, 7, 14, 3, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1263260541, 'comment_body': '![image](https://github.com/ArduPilot/ardupilot/assets/62964137/05ac9e6c-ce69-4f75-97e0-35d2c1d78dbb)', 'comment_created': datetime.datetime(2023, 7, 14, 3, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1274222506, 'comment_body': 'Thanks! Fixed in 01bf7238cdafda250e86d19da2e9aa9a6de49c04', 'comment_created': datetime.datetime(2023, 7, 25, 23, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1277016703, 'comment_body': ""Apparently the Ardupilot C compiler doesn't support `%z`. It failed CI and I also wasn't able to compile it locally."", 'comment_created': datetime.datetime(2023, 7, 28, 2, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1277678562, 'comment_body': 'Which board is it failing for you on? ', 'comment_created': datetime.datetime(2023, 7, 28, 15, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1278030960, 'comment_body': '```suggestion\r\n            GCS_SEND_TEXT(MAV_SEVERITY_INFO,""Received tf2_msgs/TFMessage of length: %lu"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 19, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1278459219, 'comment_body': 'Pixhawk4', 'comment_created': datetime.datetime(2023, 7, 29, 23, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1278465735, 'comment_body': 'With the last commit, it passes CI with the use of a static cast. \r\nPlease approve if you are happy. ', 'comment_created': datetime.datetime(2023, 7, 29, 23, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': 'ea42a5404177a5f9e8ad4df897e1cebc8879219c', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Ryan,25047695,ryanfriedman5410+github@gmail.com,User,,105,,8,29
1410930754,AP_DDS: Add dynamic TF subscriber support for odometry,* This is the first step for GSOC Cartographer external odometry input,True,24155,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24155,https://github.com/ArduPilot/ardupilot/pull/24155,closed,66,14,5,1,6,15,2,1,"[{'name': 'ROS'}, {'name': 'For-4.5'}]",2023-06-28 03:45:12+00:00,2023-07-31 03:28:11+00:00,2850179.0,"32 days, 23:42:59","[{'comment_id': 1246634184, 'comment_body': ""Maybe we should also check if the `VISO_TYPE` parameter is adequate. If it is disabled there's no point in handling the tf data for now"", 'comment_created': datetime.datetime(2023, 6, 29, 13, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1246693894, 'comment_body': 'Changes to make it consistent with `dds_xrce_profile.xml`:\r\n```suggestion\r\n        .topic_profile_label = ""dynamictf__t"",\r\n        .dw_profile_label = """",\r\n        .dr_profile_label = ""dynamictf___dr"",\r\n```\r\nAn error was appearing before and the subscriber wasn\'t created. With this changes it is now working:\r\n![Screenshot from 2023-06-29 11-06-10](https://github.com/ArduPilot/ardupilot/assets/62964137/3a6012b8-b395-42d0-8c03-aa714b436adf)\r\n\r\nThis should solve the `test dds / build (stm32h7) (pull_request) ` CI fail\r\n', 'comment_created': datetime.datetime(2023, 6, 29, 14, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1256711581, 'comment_body': '@Ryanf55 what do you think?', 'comment_created': datetime.datetime(2023, 7, 8, 1, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1260409294, 'comment_body': '> \r\n\r\nYea, perhaps we should not even subscribe in DDS unless that param is set?', 'comment_created': datetime.datetime(2023, 7, 12, 0, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1262614324, 'comment_body': ""Interraction with ardupilot specific libs and params will happen in the follow up implementation. I'll make sure this gets addressed."", 'comment_created': datetime.datetime(2023, 7, 13, 14, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1263251733, 'comment_body': '```suggestion\r\n        .dr_profile_label = ""dynamictf__dr"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 3, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1263252155, 'comment_body': '```suggestion\r\n            GCS_SEND_TEXT(MAV_SEVERITY_INFO,""Received tf2_msgs/TFMessage of length: %u"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 3, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1263260319, 'comment_body': '![Screenshot from 2023-07-14 00-22-58](https://github.com/ArduPilot/ardupilot/assets/62964137/4780ff78-89d0-401b-b559-83856882aa2e)\r\n', 'comment_created': datetime.datetime(2023, 7, 14, 3, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1263260541, 'comment_body': '![image](https://github.com/ArduPilot/ardupilot/assets/62964137/05ac9e6c-ce69-4f75-97e0-35d2c1d78dbb)', 'comment_created': datetime.datetime(2023, 7, 14, 3, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1274222506, 'comment_body': 'Thanks! Fixed in 01bf7238cdafda250e86d19da2e9aa9a6de49c04', 'comment_created': datetime.datetime(2023, 7, 25, 23, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1277016703, 'comment_body': ""Apparently the Ardupilot C compiler doesn't support `%z`. It failed CI and I also wasn't able to compile it locally."", 'comment_created': datetime.datetime(2023, 7, 28, 2, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1277678562, 'comment_body': 'Which board is it failing for you on? ', 'comment_created': datetime.datetime(2023, 7, 28, 15, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1278030960, 'comment_body': '```suggestion\r\n            GCS_SEND_TEXT(MAV_SEVERITY_INFO,""Received tf2_msgs/TFMessage of length: %lu"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 19, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1278459219, 'comment_body': 'Pixhawk4', 'comment_created': datetime.datetime(2023, 7, 29, 23, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1278465735, 'comment_body': 'With the last commit, it passes CI with the use of a static cast. \r\nPlease approve if you are happy. ', 'comment_created': datetime.datetime(2023, 7, 29, 23, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': 'ea42a5404177a5f9e8ad4df897e1cebc8879219c', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Ryan,25047695,ryanfriedman5410+github@gmail.com,User,,105,,8,29
1464355490,DDS external odometry/localization support,"# Overview

This is an implementation of allowing external localization data from DDS to augment ArduPilot's EKF for position data. It will solve #23387. Providing an initial world frame position is out of scope of this PR. This is required to complete the Google Cartographer section of @pedro-fuoco's GSoC project.

## Implementation decisions

* Broke out external odom into its own file because it only has message dependencies, nothing on DDS - this will allow easier moving to `AP_ExternalOdometryDDS` backend in the future. 
* Added a new `TransformF` type in ArduPilot for working with homogonous transforms. This reduces the need to pass both a position and orientation separately to similar functions.
* Implemented frame ID checking, since there may be multiple transforms published to ArduPilot in the future and localization is just one

## Questions

Would like a recommendation from @rmackay9 on how to finish out the TODO's. 

* Should we normalize incoming orientation?
  * Yes, it's cheap enough, and ROS is a public facing API, which may be abused.
* How to handle `remote_time_us`, `time_ms`, `posErr`, `angErr`, `reset_counter`. 
  * Google Cartographer does not appear to support any direct positional or angular error estimates, however this ticket provides some alternatives: https://github.com/cartographer-project/cartographer_ros/issues/1258. Ideally, cartographer publishes `PoseStampedWithCovariance`, but it's API does not have that: https://google-cartographer-ros.readthedocs.io/en/latest/ros_api.html#published-topics. The devs said the covariance was not useful, but we need accuracy data: https://github.com/cartographer-project/cartographer_ros/issues/1109
* How to handle if `HAL_VISUALODOM_ENABLED` if OFF but `AP_DDS_ENABLED` is ON
* Should we create a ticket to rename from odometry to localization in `AP_VisualOdom`? After reading the [research paper](https://www.sciencedirect.com/science/article/pii/S1319157821000550), I don't think the name is right. Odometry refers to `sensors` like wheel encoders that have drift over time, while localization is the way to account for the drift, which is how the library is used. I know you already planned to take out the `visual` because there's now lidar and laser odometry sources instead of just camera. 
* 


I'll clean up commits and split when it goes out of draft state.

## Dependencies

* https://github.com/ArduPilot/ardupilot/pull/24600

## Related

* https://github.com/ArduPilot/ardupilot/pull/24528",True,24518,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24518,https://github.com/ArduPilot/ardupilot/pull/24518,closed,233,6,11,3,4,45,4,1,"[{'name': 'Enhancement'}, {'name': 'ROS'}, {'name': 'Vision'}, {'name': 'For-4.5'}]",2023-08-06 22:29:21+00:00,2023-08-23 21:46:07+00:00,1466206.0,"16 days, 23:16:46","[{'comment_id': 1285362635, 'comment_body': ""Well, the `posErr` and `angErr` fields should be converted to doubles, but cartographer doesn't supply those. I'd be interested to look at some of the other backends to see if they would make use of double precision. For GSoC, we decided using the existing single-precision localization is fine. "", 'comment_created': datetime.datetime(2023, 8, 7, 4, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1286503901, 'comment_body': '```suggestion\r\n    Quaternion rotF{\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 1, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1286507004, 'comment_body': 'Perhaps we should have this as a separate cleanup later, and for now use the existing entry-points into AP_VisualOdom?\r\n', 'comment_created': datetime.datetime(2023, 8, 8, 1, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1286508574, 'comment_body': 'Yep, this should be done. ', 'comment_created': datetime.datetime(2023, 8, 8, 1, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1286508655, 'comment_body': 'These can be set as zero, no issue', 'comment_created': datetime.datetime(2023, 8, 8, 1, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1286521514, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2023, 8, 8, 1, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1286521679, 'comment_body': 'Sure! I kicked it off to `add-transform-header` which can go in later.', 'comment_created': datetime.datetime(2023, 8, 8, 1, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1286521750, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 8, 1, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287782166, 'comment_body': ""`#if HAL_VISUALODOM_ENABLED` is correct\r\nIt's set to 0 or 1"", 'comment_created': datetime.datetime(2023, 8, 8, 23, 30, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287783148, 'comment_body': 'To fix this, we can add an `AP_DDS_config.h` that makes the decision. Previously the config was done in AP_DDS_Client.h. Build times go faster with the new method. See AP_GPS_config.h. To use it, you need to include the config file. The CPP file that uses it includes the AP_DDS_Client.h. \r\n\r\n```c++\r\n#if(AP_DDS_ENABLED) && !HAL_VISUALODOM_ENABLED\r\n  #error DDS requires visual odom to be enabled\r\n#endif\r\n```\r\n\r\nTo represent it as a dependency, see `Tools/scipts/build_options.py`. We need to add `AP_DDS_ENABLED`.\r\n#23280 \r\n\r\nSince visual odom is enabled on 2MB board, it should be available for DDS too.', 'comment_created': datetime.datetime(2023, 8, 8, 23, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287786349, 'comment_body': 'Can use auto here. ', 'comment_created': datetime.datetime(2023, 8, 8, 23, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287786622, 'comment_body': 'if (visual_odom == nullptr) { return; }', 'comment_created': datetime.datetime(2023, 8, 8, 23, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287787766, 'comment_body': 'Can instantiate jitter correction object here and use it here. ', 'comment_created': datetime.datetime(2023, 8, 8, 23, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287787920, 'comment_body': ""remote time can be any time base. Populate this with the message timestamp. In mavlink, it's a time in microseconds. It doesn't matter, the jitter corrector will handle it. \r\n\r\ntime_t\r\n* seconds uint64_t (linux epoch)\r\n* milliseconds uint32 up to 1 second. \r\n\r\nNeeds converted to single value. "", 'comment_created': datetime.datetime(2023, 8, 8, 23, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287790451, 'comment_body': 'This is populated by the jitter correction with local millis since boot. EKF uses time since boot. Unix time would require uint64_t. \r\n\r\n[GCS_Mavlink.cpp ](https://github.com/ArduPilot/ardupilot/blob/3fd08865745fb651604f746135d8b3f9ea0bcf70/libraries/GCS_MAVLink/GCS_Common.cpp#L3569)', 'comment_created': datetime.datetime(2023, 8, 8, 23, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287791464, 'comment_body': ""change to `odom` so we don't have to deal with resets. "", 'comment_created': datetime.datetime(2023, 8, 8, 23, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287792560, 'comment_body': 'Just use `strcmp` here. ', 'comment_created': datetime.datetime(2023, 8, 8, 23, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287900658, 'comment_body': 'How should we handle this? \r\n```c++\r\n#if AP_DDS_ENABLED && HAL_VISUALODOM_ENABLED\r\n\r\n#include ""AP_DDS_External_Odom.h""\r\n#include ""AP_DDS_Type_Conversions.h""\r\n#include <AP_VisualOdom/AP_VisualOdom.h>\r\n\r\nvoid AP_DDS_External_Odom::handle_external_odom(const tf2_msgs_msg_TFMessage& msg)\r\n{ // todo implement\r\n}\r\n#endif\r\n```\r\n```bash\r\n../../libraries/AP_DDS/AP_DDS_External_Odom.cpp:3:23: error: ""HAL_VISUALODOM_ENABLED"" is not defined, evaluates to 0 [-Werror=undef]\r\n    3 | #if AP_DDS_ENABLED && HAL_VISUALODOM_ENABLED\r\n      |                       ^~~~~~~~~~~~~~~~~~~~~~\r\ncompilation terminated due to -Wfatal-errors.\r\ncc1plus: some warnings being treated as errors\r\n```', 'comment_created': datetime.datetime(2023, 8, 9, 3, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287909619, 'comment_body': ""Added the `AP_DDS_config.h` file with the help of Randy and it's fixed."", 'comment_created': datetime.datetime(2023, 8, 9, 4, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287917606, 'comment_body': ""We hard code these as zero because cartographer doesn't supply them. "", 'comment_created': datetime.datetime(2023, 8, 9, 4, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287917733, 'comment_body': 'Fixed with `AP_DDS_config.h`', 'comment_created': datetime.datetime(2023, 8, 9, 4, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1297385276, 'comment_body': ""```suggestion\n    // convert from x-forward, y-left, z-up to NED\n    // https://github.com/mavlink/mavros/issues/49#issuecomment-51614130\n    translation.x = static_cast<float>(ros_transform.translation.x);\n    translation.y = static_cast<float>(-ros_transform.translation.y);\n    translation.z = static_cast<float>(-ros_transform.translation.z);\n\n    // In AP, q1 is the quaternion's scalar component.\n    // In ROS, w is the quaternion's scalar component.\n    // https://docs.ros.org/en/humble/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.html#components-of-a-quaternion\n    rotation.q1 = ros_transform.rotation.w;\n    rotation.q2 = ros_transform.rotation.x;\n    rotation.q3 = -ros_transform.rotation.y;\n    rotation.q4 = -ros_transform.rotation.z;\n```\n"", 'comment_created': datetime.datetime(2023, 8, 17, 15, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1300741266, 'comment_body': 'default constructor zeros, so {} not needed', 'comment_created': datetime.datetime(2023, 8, 21, 23, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1300741557, 'comment_body': '{} not needed (please check)', 'comment_created': datetime.datetime(2023, 8, 21, 23, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1300743256, 'comment_body': 'should be left-aligned\r\n```suggestion\r\n#if AP_DDS_VISUALODOM_ENABLED\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 23, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300743689, 'comment_body': 'can this be a reference?\r\n', 'comment_created': datetime.datetime(2023, 8, 21, 23, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300744016, 'comment_body': '```suggestion\r\n        if (!is_odometry_frame(ros_transform_stamped)) {\r\n            continue;\r\n        }\r\n```\r\n', 'comment_created': datetime.datetime(2023, 8, 21, 23, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300744486, 'comment_body': 'i think this will go via single precision, we should be able to do this pure integer\r\nmaybe move to the cpp?', 'comment_created': datetime.datetime(2023, 8, 21, 23, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1300744854, 'comment_body': 'Add a test for large numbers to check precision loss. ', 'comment_created': datetime.datetime(2023, 8, 21, 23, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300745116, 'comment_body': '```suggestion\r\n    translation = {\r\n        static_cast<float>(ros_transform.translation.x),\r\n        static_cast<float>(-ros_transform.translation.y),\r\n        static_cast<float>(-ros_transform.translation.z)\r\n    };\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 21, 23, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300746949, 'comment_body': '```suggestion\r\n#define AP_DDS_UDP_ENABLED AP_DDS_ENABLED && (CONFIG_HAL_BOARD == HAL_BOARD_SITL)\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 23, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300747301, 'comment_body': ""We really should work out whether to call it external or visual.  I've already said I'd prefer external :-)\r\n"", 'comment_created': datetime.datetime(2023, 8, 21, 23, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300764919, 'comment_body': 'Done 977aba179814ad1633b3ca128135441fbb711fb3', 'comment_created': datetime.datetime(2023, 8, 21, 23, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300765014, 'comment_body': 'Done 9273717a790723c241f7c2db3937b06977b0dcf7', 'comment_created': datetime.datetime(2023, 8, 21, 23, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300765724, 'comment_body': 'Done 905090cd211831e8c8220abb1a8d03fad03afe11', 'comment_created': datetime.datetime(2023, 8, 21, 23, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300765832, 'comment_body': 'Done 5425deafcdddee4a3c3649561edb413f96ba0833', 'comment_created': datetime.datetime(2023, 8, 21, 23, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300765894, 'comment_body': 'Done 5425deafcdddee4a3c3649561edb413f96ba0833', 'comment_created': datetime.datetime(2023, 8, 21, 23, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300766456, 'comment_body': 'Great idea for clarity: 0cadf255510f15c12edfbe07469767c2e6bb057d', 'comment_created': datetime.datetime(2023, 8, 21, 23, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300767606, 'comment_body': ""Yea, but I'd prefer to keep consistent for now, and handle a mass-rename of visual to external in another PR. That ok?"", 'comment_created': datetime.datetime(2023, 8, 22, 0, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300768817, 'comment_body': 'Done in 905090cd211831e8c8220abb1a8d03fad03afe11. I tested a 1 week duration. ', 'comment_created': datetime.datetime(2023, 8, 22, 0, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300768929, 'comment_body': 'Added as a TODO, will do later.', 'comment_created': datetime.datetime(2023, 8, 22, 0, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300769055, 'comment_body': 'Will do later', 'comment_created': datetime.datetime(2023, 8, 22, 0, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300769219, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 8, 22, 0, 2, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300769297, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 8, 22, 0, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1302320526, 'comment_body': 'Talked to @tridge , we would like to keep it the same for now, and handle this after GSoC. ', 'comment_created': datetime.datetime(2023, 8, 23, 0, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '96a5e9ab4a65a3d2d5752690961fef8b7b515341', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3a64542d9e5fabcd17e8e3a23bb68115fb06e08', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fc620731f88c9109dde51b846f875494892f1a0', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}]",Ryan,25047695,ryanfriedman5410+github@gmail.com,User,,105,,8,29
1464355490,DDS external odometry/localization support,"# Overview

This is an implementation of allowing external localization data from DDS to augment ArduPilot's EKF for position data. It will solve #23387. Providing an initial world frame position is out of scope of this PR. This is required to complete the Google Cartographer section of @pedro-fuoco's GSoC project.

## Implementation decisions

* Broke out external odom into its own file because it only has message dependencies, nothing on DDS - this will allow easier moving to `AP_ExternalOdometryDDS` backend in the future. 
* Added a new `TransformF` type in ArduPilot for working with homogonous transforms. This reduces the need to pass both a position and orientation separately to similar functions.
* Implemented frame ID checking, since there may be multiple transforms published to ArduPilot in the future and localization is just one

## Questions

Would like a recommendation from @rmackay9 on how to finish out the TODO's. 

* Should we normalize incoming orientation?
  * Yes, it's cheap enough, and ROS is a public facing API, which may be abused.
* How to handle `remote_time_us`, `time_ms`, `posErr`, `angErr`, `reset_counter`. 
  * Google Cartographer does not appear to support any direct positional or angular error estimates, however this ticket provides some alternatives: https://github.com/cartographer-project/cartographer_ros/issues/1258. Ideally, cartographer publishes `PoseStampedWithCovariance`, but it's API does not have that: https://google-cartographer-ros.readthedocs.io/en/latest/ros_api.html#published-topics. The devs said the covariance was not useful, but we need accuracy data: https://github.com/cartographer-project/cartographer_ros/issues/1109
* How to handle if `HAL_VISUALODOM_ENABLED` if OFF but `AP_DDS_ENABLED` is ON
* Should we create a ticket to rename from odometry to localization in `AP_VisualOdom`? After reading the [research paper](https://www.sciencedirect.com/science/article/pii/S1319157821000550), I don't think the name is right. Odometry refers to `sensors` like wheel encoders that have drift over time, while localization is the way to account for the drift, which is how the library is used. I know you already planned to take out the `visual` because there's now lidar and laser odometry sources instead of just camera. 
* 


I'll clean up commits and split when it goes out of draft state.

## Dependencies

* https://github.com/ArduPilot/ardupilot/pull/24600

## Related

* https://github.com/ArduPilot/ardupilot/pull/24528",True,24518,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24518,https://github.com/ArduPilot/ardupilot/pull/24518,closed,233,6,11,3,4,45,4,1,"[{'name': 'Enhancement'}, {'name': 'ROS'}, {'name': 'Vision'}, {'name': 'For-4.5'}]",2023-08-06 22:29:21+00:00,2023-08-23 21:46:07+00:00,1466206.0,"16 days, 23:16:46","[{'comment_id': 1285362635, 'comment_body': ""Well, the `posErr` and `angErr` fields should be converted to doubles, but cartographer doesn't supply those. I'd be interested to look at some of the other backends to see if they would make use of double precision. For GSoC, we decided using the existing single-precision localization is fine. "", 'comment_created': datetime.datetime(2023, 8, 7, 4, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1286503901, 'comment_body': '```suggestion\r\n    Quaternion rotF{\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 1, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1286507004, 'comment_body': 'Perhaps we should have this as a separate cleanup later, and for now use the existing entry-points into AP_VisualOdom?\r\n', 'comment_created': datetime.datetime(2023, 8, 8, 1, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1286508574, 'comment_body': 'Yep, this should be done. ', 'comment_created': datetime.datetime(2023, 8, 8, 1, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1286508655, 'comment_body': 'These can be set as zero, no issue', 'comment_created': datetime.datetime(2023, 8, 8, 1, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1286521514, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2023, 8, 8, 1, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1286521679, 'comment_body': 'Sure! I kicked it off to `add-transform-header` which can go in later.', 'comment_created': datetime.datetime(2023, 8, 8, 1, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1286521750, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 8, 1, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287782166, 'comment_body': ""`#if HAL_VISUALODOM_ENABLED` is correct\r\nIt's set to 0 or 1"", 'comment_created': datetime.datetime(2023, 8, 8, 23, 30, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287783148, 'comment_body': 'To fix this, we can add an `AP_DDS_config.h` that makes the decision. Previously the config was done in AP_DDS_Client.h. Build times go faster with the new method. See AP_GPS_config.h. To use it, you need to include the config file. The CPP file that uses it includes the AP_DDS_Client.h. \r\n\r\n```c++\r\n#if(AP_DDS_ENABLED) && !HAL_VISUALODOM_ENABLED\r\n  #error DDS requires visual odom to be enabled\r\n#endif\r\n```\r\n\r\nTo represent it as a dependency, see `Tools/scipts/build_options.py`. We need to add `AP_DDS_ENABLED`.\r\n#23280 \r\n\r\nSince visual odom is enabled on 2MB board, it should be available for DDS too.', 'comment_created': datetime.datetime(2023, 8, 8, 23, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287786349, 'comment_body': 'Can use auto here. ', 'comment_created': datetime.datetime(2023, 8, 8, 23, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287786622, 'comment_body': 'if (visual_odom == nullptr) { return; }', 'comment_created': datetime.datetime(2023, 8, 8, 23, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287787766, 'comment_body': 'Can instantiate jitter correction object here and use it here. ', 'comment_created': datetime.datetime(2023, 8, 8, 23, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287787920, 'comment_body': ""remote time can be any time base. Populate this with the message timestamp. In mavlink, it's a time in microseconds. It doesn't matter, the jitter corrector will handle it. \r\n\r\ntime_t\r\n* seconds uint64_t (linux epoch)\r\n* milliseconds uint32 up to 1 second. \r\n\r\nNeeds converted to single value. "", 'comment_created': datetime.datetime(2023, 8, 8, 23, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287790451, 'comment_body': 'This is populated by the jitter correction with local millis since boot. EKF uses time since boot. Unix time would require uint64_t. \r\n\r\n[GCS_Mavlink.cpp ](https://github.com/ArduPilot/ardupilot/blob/3fd08865745fb651604f746135d8b3f9ea0bcf70/libraries/GCS_MAVLink/GCS_Common.cpp#L3569)', 'comment_created': datetime.datetime(2023, 8, 8, 23, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287791464, 'comment_body': ""change to `odom` so we don't have to deal with resets. "", 'comment_created': datetime.datetime(2023, 8, 8, 23, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287792560, 'comment_body': 'Just use `strcmp` here. ', 'comment_created': datetime.datetime(2023, 8, 8, 23, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287900658, 'comment_body': 'How should we handle this? \r\n```c++\r\n#if AP_DDS_ENABLED && HAL_VISUALODOM_ENABLED\r\n\r\n#include ""AP_DDS_External_Odom.h""\r\n#include ""AP_DDS_Type_Conversions.h""\r\n#include <AP_VisualOdom/AP_VisualOdom.h>\r\n\r\nvoid AP_DDS_External_Odom::handle_external_odom(const tf2_msgs_msg_TFMessage& msg)\r\n{ // todo implement\r\n}\r\n#endif\r\n```\r\n```bash\r\n../../libraries/AP_DDS/AP_DDS_External_Odom.cpp:3:23: error: ""HAL_VISUALODOM_ENABLED"" is not defined, evaluates to 0 [-Werror=undef]\r\n    3 | #if AP_DDS_ENABLED && HAL_VISUALODOM_ENABLED\r\n      |                       ^~~~~~~~~~~~~~~~~~~~~~\r\ncompilation terminated due to -Wfatal-errors.\r\ncc1plus: some warnings being treated as errors\r\n```', 'comment_created': datetime.datetime(2023, 8, 9, 3, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287909619, 'comment_body': ""Added the `AP_DDS_config.h` file with the help of Randy and it's fixed."", 'comment_created': datetime.datetime(2023, 8, 9, 4, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287917606, 'comment_body': ""We hard code these as zero because cartographer doesn't supply them. "", 'comment_created': datetime.datetime(2023, 8, 9, 4, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287917733, 'comment_body': 'Fixed with `AP_DDS_config.h`', 'comment_created': datetime.datetime(2023, 8, 9, 4, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1297385276, 'comment_body': ""```suggestion\n    // convert from x-forward, y-left, z-up to NED\n    // https://github.com/mavlink/mavros/issues/49#issuecomment-51614130\n    translation.x = static_cast<float>(ros_transform.translation.x);\n    translation.y = static_cast<float>(-ros_transform.translation.y);\n    translation.z = static_cast<float>(-ros_transform.translation.z);\n\n    // In AP, q1 is the quaternion's scalar component.\n    // In ROS, w is the quaternion's scalar component.\n    // https://docs.ros.org/en/humble/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.html#components-of-a-quaternion\n    rotation.q1 = ros_transform.rotation.w;\n    rotation.q2 = ros_transform.rotation.x;\n    rotation.q3 = -ros_transform.rotation.y;\n    rotation.q4 = -ros_transform.rotation.z;\n```\n"", 'comment_created': datetime.datetime(2023, 8, 17, 15, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1300741266, 'comment_body': 'default constructor zeros, so {} not needed', 'comment_created': datetime.datetime(2023, 8, 21, 23, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1300741557, 'comment_body': '{} not needed (please check)', 'comment_created': datetime.datetime(2023, 8, 21, 23, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1300743256, 'comment_body': 'should be left-aligned\r\n```suggestion\r\n#if AP_DDS_VISUALODOM_ENABLED\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 23, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300743689, 'comment_body': 'can this be a reference?\r\n', 'comment_created': datetime.datetime(2023, 8, 21, 23, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300744016, 'comment_body': '```suggestion\r\n        if (!is_odometry_frame(ros_transform_stamped)) {\r\n            continue;\r\n        }\r\n```\r\n', 'comment_created': datetime.datetime(2023, 8, 21, 23, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300744486, 'comment_body': 'i think this will go via single precision, we should be able to do this pure integer\r\nmaybe move to the cpp?', 'comment_created': datetime.datetime(2023, 8, 21, 23, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1300744854, 'comment_body': 'Add a test for large numbers to check precision loss. ', 'comment_created': datetime.datetime(2023, 8, 21, 23, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300745116, 'comment_body': '```suggestion\r\n    translation = {\r\n        static_cast<float>(ros_transform.translation.x),\r\n        static_cast<float>(-ros_transform.translation.y),\r\n        static_cast<float>(-ros_transform.translation.z)\r\n    };\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 21, 23, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300746949, 'comment_body': '```suggestion\r\n#define AP_DDS_UDP_ENABLED AP_DDS_ENABLED && (CONFIG_HAL_BOARD == HAL_BOARD_SITL)\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 23, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300747301, 'comment_body': ""We really should work out whether to call it external or visual.  I've already said I'd prefer external :-)\r\n"", 'comment_created': datetime.datetime(2023, 8, 21, 23, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300764919, 'comment_body': 'Done 977aba179814ad1633b3ca128135441fbb711fb3', 'comment_created': datetime.datetime(2023, 8, 21, 23, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300765014, 'comment_body': 'Done 9273717a790723c241f7c2db3937b06977b0dcf7', 'comment_created': datetime.datetime(2023, 8, 21, 23, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300765724, 'comment_body': 'Done 905090cd211831e8c8220abb1a8d03fad03afe11', 'comment_created': datetime.datetime(2023, 8, 21, 23, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300765832, 'comment_body': 'Done 5425deafcdddee4a3c3649561edb413f96ba0833', 'comment_created': datetime.datetime(2023, 8, 21, 23, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300765894, 'comment_body': 'Done 5425deafcdddee4a3c3649561edb413f96ba0833', 'comment_created': datetime.datetime(2023, 8, 21, 23, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300766456, 'comment_body': 'Great idea for clarity: 0cadf255510f15c12edfbe07469767c2e6bb057d', 'comment_created': datetime.datetime(2023, 8, 21, 23, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300767606, 'comment_body': ""Yea, but I'd prefer to keep consistent for now, and handle a mass-rename of visual to external in another PR. That ok?"", 'comment_created': datetime.datetime(2023, 8, 22, 0, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300768817, 'comment_body': 'Done in 905090cd211831e8c8220abb1a8d03fad03afe11. I tested a 1 week duration. ', 'comment_created': datetime.datetime(2023, 8, 22, 0, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300768929, 'comment_body': 'Added as a TODO, will do later.', 'comment_created': datetime.datetime(2023, 8, 22, 0, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300769055, 'comment_body': 'Will do later', 'comment_created': datetime.datetime(2023, 8, 22, 0, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300769219, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 8, 22, 0, 2, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300769297, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 8, 22, 0, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1302320526, 'comment_body': 'Talked to @tridge , we would like to keep it the same for now, and handle this after GSoC. ', 'comment_created': datetime.datetime(2023, 8, 23, 0, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '96a5e9ab4a65a3d2d5752690961fef8b7b515341', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3a64542d9e5fabcd17e8e3a23bb68115fb06e08', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fc620731f88c9109dde51b846f875494892f1a0', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}]",Ryan,25047695,ryanfriedman5410+github@gmail.com,User,,105,,8,29
1464355490,DDS external odometry/localization support,"# Overview

This is an implementation of allowing external localization data from DDS to augment ArduPilot's EKF for position data. It will solve #23387. Providing an initial world frame position is out of scope of this PR. This is required to complete the Google Cartographer section of @pedro-fuoco's GSoC project.

## Implementation decisions

* Broke out external odom into its own file because it only has message dependencies, nothing on DDS - this will allow easier moving to `AP_ExternalOdometryDDS` backend in the future. 
* Added a new `TransformF` type in ArduPilot for working with homogonous transforms. This reduces the need to pass both a position and orientation separately to similar functions.
* Implemented frame ID checking, since there may be multiple transforms published to ArduPilot in the future and localization is just one

## Questions

Would like a recommendation from @rmackay9 on how to finish out the TODO's. 

* Should we normalize incoming orientation?
  * Yes, it's cheap enough, and ROS is a public facing API, which may be abused.
* How to handle `remote_time_us`, `time_ms`, `posErr`, `angErr`, `reset_counter`. 
  * Google Cartographer does not appear to support any direct positional or angular error estimates, however this ticket provides some alternatives: https://github.com/cartographer-project/cartographer_ros/issues/1258. Ideally, cartographer publishes `PoseStampedWithCovariance`, but it's API does not have that: https://google-cartographer-ros.readthedocs.io/en/latest/ros_api.html#published-topics. The devs said the covariance was not useful, but we need accuracy data: https://github.com/cartographer-project/cartographer_ros/issues/1109
* How to handle if `HAL_VISUALODOM_ENABLED` if OFF but `AP_DDS_ENABLED` is ON
* Should we create a ticket to rename from odometry to localization in `AP_VisualOdom`? After reading the [research paper](https://www.sciencedirect.com/science/article/pii/S1319157821000550), I don't think the name is right. Odometry refers to `sensors` like wheel encoders that have drift over time, while localization is the way to account for the drift, which is how the library is used. I know you already planned to take out the `visual` because there's now lidar and laser odometry sources instead of just camera. 
* 


I'll clean up commits and split when it goes out of draft state.

## Dependencies

* https://github.com/ArduPilot/ardupilot/pull/24600

## Related

* https://github.com/ArduPilot/ardupilot/pull/24528",True,24518,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24518,https://github.com/ArduPilot/ardupilot/pull/24518,closed,233,6,11,3,4,45,4,1,"[{'name': 'Enhancement'}, {'name': 'ROS'}, {'name': 'Vision'}, {'name': 'For-4.5'}]",2023-08-06 22:29:21+00:00,2023-08-23 21:46:07+00:00,1466206.0,"16 days, 23:16:46","[{'comment_id': 1285362635, 'comment_body': ""Well, the `posErr` and `angErr` fields should be converted to doubles, but cartographer doesn't supply those. I'd be interested to look at some of the other backends to see if they would make use of double precision. For GSoC, we decided using the existing single-precision localization is fine. "", 'comment_created': datetime.datetime(2023, 8, 7, 4, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1286503901, 'comment_body': '```suggestion\r\n    Quaternion rotF{\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 1, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1286507004, 'comment_body': 'Perhaps we should have this as a separate cleanup later, and for now use the existing entry-points into AP_VisualOdom?\r\n', 'comment_created': datetime.datetime(2023, 8, 8, 1, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1286508574, 'comment_body': 'Yep, this should be done. ', 'comment_created': datetime.datetime(2023, 8, 8, 1, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1286508655, 'comment_body': 'These can be set as zero, no issue', 'comment_created': datetime.datetime(2023, 8, 8, 1, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1286521514, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2023, 8, 8, 1, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1286521679, 'comment_body': 'Sure! I kicked it off to `add-transform-header` which can go in later.', 'comment_created': datetime.datetime(2023, 8, 8, 1, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1286521750, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 8, 1, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287782166, 'comment_body': ""`#if HAL_VISUALODOM_ENABLED` is correct\r\nIt's set to 0 or 1"", 'comment_created': datetime.datetime(2023, 8, 8, 23, 30, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287783148, 'comment_body': 'To fix this, we can add an `AP_DDS_config.h` that makes the decision. Previously the config was done in AP_DDS_Client.h. Build times go faster with the new method. See AP_GPS_config.h. To use it, you need to include the config file. The CPP file that uses it includes the AP_DDS_Client.h. \r\n\r\n```c++\r\n#if(AP_DDS_ENABLED) && !HAL_VISUALODOM_ENABLED\r\n  #error DDS requires visual odom to be enabled\r\n#endif\r\n```\r\n\r\nTo represent it as a dependency, see `Tools/scipts/build_options.py`. We need to add `AP_DDS_ENABLED`.\r\n#23280 \r\n\r\nSince visual odom is enabled on 2MB board, it should be available for DDS too.', 'comment_created': datetime.datetime(2023, 8, 8, 23, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287786349, 'comment_body': 'Can use auto here. ', 'comment_created': datetime.datetime(2023, 8, 8, 23, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287786622, 'comment_body': 'if (visual_odom == nullptr) { return; }', 'comment_created': datetime.datetime(2023, 8, 8, 23, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287787766, 'comment_body': 'Can instantiate jitter correction object here and use it here. ', 'comment_created': datetime.datetime(2023, 8, 8, 23, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287787920, 'comment_body': ""remote time can be any time base. Populate this with the message timestamp. In mavlink, it's a time in microseconds. It doesn't matter, the jitter corrector will handle it. \r\n\r\ntime_t\r\n* seconds uint64_t (linux epoch)\r\n* milliseconds uint32 up to 1 second. \r\n\r\nNeeds converted to single value. "", 'comment_created': datetime.datetime(2023, 8, 8, 23, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287790451, 'comment_body': 'This is populated by the jitter correction with local millis since boot. EKF uses time since boot. Unix time would require uint64_t. \r\n\r\n[GCS_Mavlink.cpp ](https://github.com/ArduPilot/ardupilot/blob/3fd08865745fb651604f746135d8b3f9ea0bcf70/libraries/GCS_MAVLink/GCS_Common.cpp#L3569)', 'comment_created': datetime.datetime(2023, 8, 8, 23, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287791464, 'comment_body': ""change to `odom` so we don't have to deal with resets. "", 'comment_created': datetime.datetime(2023, 8, 8, 23, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287792560, 'comment_body': 'Just use `strcmp` here. ', 'comment_created': datetime.datetime(2023, 8, 8, 23, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287900658, 'comment_body': 'How should we handle this? \r\n```c++\r\n#if AP_DDS_ENABLED && HAL_VISUALODOM_ENABLED\r\n\r\n#include ""AP_DDS_External_Odom.h""\r\n#include ""AP_DDS_Type_Conversions.h""\r\n#include <AP_VisualOdom/AP_VisualOdom.h>\r\n\r\nvoid AP_DDS_External_Odom::handle_external_odom(const tf2_msgs_msg_TFMessage& msg)\r\n{ // todo implement\r\n}\r\n#endif\r\n```\r\n```bash\r\n../../libraries/AP_DDS/AP_DDS_External_Odom.cpp:3:23: error: ""HAL_VISUALODOM_ENABLED"" is not defined, evaluates to 0 [-Werror=undef]\r\n    3 | #if AP_DDS_ENABLED && HAL_VISUALODOM_ENABLED\r\n      |                       ^~~~~~~~~~~~~~~~~~~~~~\r\ncompilation terminated due to -Wfatal-errors.\r\ncc1plus: some warnings being treated as errors\r\n```', 'comment_created': datetime.datetime(2023, 8, 9, 3, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287909619, 'comment_body': ""Added the `AP_DDS_config.h` file with the help of Randy and it's fixed."", 'comment_created': datetime.datetime(2023, 8, 9, 4, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287917606, 'comment_body': ""We hard code these as zero because cartographer doesn't supply them. "", 'comment_created': datetime.datetime(2023, 8, 9, 4, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287917733, 'comment_body': 'Fixed with `AP_DDS_config.h`', 'comment_created': datetime.datetime(2023, 8, 9, 4, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1297385276, 'comment_body': ""```suggestion\n    // convert from x-forward, y-left, z-up to NED\n    // https://github.com/mavlink/mavros/issues/49#issuecomment-51614130\n    translation.x = static_cast<float>(ros_transform.translation.x);\n    translation.y = static_cast<float>(-ros_transform.translation.y);\n    translation.z = static_cast<float>(-ros_transform.translation.z);\n\n    // In AP, q1 is the quaternion's scalar component.\n    // In ROS, w is the quaternion's scalar component.\n    // https://docs.ros.org/en/humble/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.html#components-of-a-quaternion\n    rotation.q1 = ros_transform.rotation.w;\n    rotation.q2 = ros_transform.rotation.x;\n    rotation.q3 = -ros_transform.rotation.y;\n    rotation.q4 = -ros_transform.rotation.z;\n```\n"", 'comment_created': datetime.datetime(2023, 8, 17, 15, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1300741266, 'comment_body': 'default constructor zeros, so {} not needed', 'comment_created': datetime.datetime(2023, 8, 21, 23, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1300741557, 'comment_body': '{} not needed (please check)', 'comment_created': datetime.datetime(2023, 8, 21, 23, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1300743256, 'comment_body': 'should be left-aligned\r\n```suggestion\r\n#if AP_DDS_VISUALODOM_ENABLED\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 23, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300743689, 'comment_body': 'can this be a reference?\r\n', 'comment_created': datetime.datetime(2023, 8, 21, 23, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300744016, 'comment_body': '```suggestion\r\n        if (!is_odometry_frame(ros_transform_stamped)) {\r\n            continue;\r\n        }\r\n```\r\n', 'comment_created': datetime.datetime(2023, 8, 21, 23, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300744486, 'comment_body': 'i think this will go via single precision, we should be able to do this pure integer\r\nmaybe move to the cpp?', 'comment_created': datetime.datetime(2023, 8, 21, 23, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1300744854, 'comment_body': 'Add a test for large numbers to check precision loss. ', 'comment_created': datetime.datetime(2023, 8, 21, 23, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300745116, 'comment_body': '```suggestion\r\n    translation = {\r\n        static_cast<float>(ros_transform.translation.x),\r\n        static_cast<float>(-ros_transform.translation.y),\r\n        static_cast<float>(-ros_transform.translation.z)\r\n    };\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 21, 23, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300746949, 'comment_body': '```suggestion\r\n#define AP_DDS_UDP_ENABLED AP_DDS_ENABLED && (CONFIG_HAL_BOARD == HAL_BOARD_SITL)\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 23, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300747301, 'comment_body': ""We really should work out whether to call it external or visual.  I've already said I'd prefer external :-)\r\n"", 'comment_created': datetime.datetime(2023, 8, 21, 23, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1300764919, 'comment_body': 'Done 977aba179814ad1633b3ca128135441fbb711fb3', 'comment_created': datetime.datetime(2023, 8, 21, 23, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300765014, 'comment_body': 'Done 9273717a790723c241f7c2db3937b06977b0dcf7', 'comment_created': datetime.datetime(2023, 8, 21, 23, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300765724, 'comment_body': 'Done 905090cd211831e8c8220abb1a8d03fad03afe11', 'comment_created': datetime.datetime(2023, 8, 21, 23, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300765832, 'comment_body': 'Done 5425deafcdddee4a3c3649561edb413f96ba0833', 'comment_created': datetime.datetime(2023, 8, 21, 23, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300765894, 'comment_body': 'Done 5425deafcdddee4a3c3649561edb413f96ba0833', 'comment_created': datetime.datetime(2023, 8, 21, 23, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300766456, 'comment_body': 'Great idea for clarity: 0cadf255510f15c12edfbe07469767c2e6bb057d', 'comment_created': datetime.datetime(2023, 8, 21, 23, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300767606, 'comment_body': ""Yea, but I'd prefer to keep consistent for now, and handle a mass-rename of visual to external in another PR. That ok?"", 'comment_created': datetime.datetime(2023, 8, 22, 0, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300768817, 'comment_body': 'Done in 905090cd211831e8c8220abb1a8d03fad03afe11. I tested a 1 week duration. ', 'comment_created': datetime.datetime(2023, 8, 22, 0, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300768929, 'comment_body': 'Added as a TODO, will do later.', 'comment_created': datetime.datetime(2023, 8, 22, 0, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300769055, 'comment_body': 'Will do later', 'comment_created': datetime.datetime(2023, 8, 22, 0, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300769219, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 8, 22, 0, 2, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1300769297, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 8, 22, 0, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1302320526, 'comment_body': 'Talked to @tridge , we would like to keep it the same for now, and handle this after GSoC. ', 'comment_created': datetime.datetime(2023, 8, 23, 0, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '96a5e9ab4a65a3d2d5752690961fef8b7b515341', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3a64542d9e5fabcd17e8e3a23bb68115fb06e08', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fc620731f88c9109dde51b846f875494892f1a0', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}]",Ryan,25047695,ryanfriedman5410+github@gmail.com,User,,105,,8,29
1469155420,dds-external-odometry: Fix mavlink error,"Fixes the following error
![Screenshot from 2023-08-09 15-05-15](https://github.com/Ryanf55/ardupilot/assets/62964137/7753767b-09d2-4ff4-8e85-25da134517fa)
",True,2,https://api.github.com/repos/Ryanf55/ardupilot/pulls/2,https://github.com/Ryanf55/ardupilot/pull/2,closed,1,1,1,1,0,0,0,0,[],2023-08-09 19:09:13+00:00,2023-08-09 19:25:41+00:00,988.0,0:16:28,[],"[{'commit_sha': 'b41710380bcb0923863de7f2f95c1ef02406b82d', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1469155420,dds-external-odometry: Fix mavlink error,"Fixes the following error
![Screenshot from 2023-08-09 15-05-15](https://github.com/Ryanf55/ardupilot/assets/62964137/7753767b-09d2-4ff4-8e85-25da134517fa)
",True,2,https://api.github.com/repos/Ryanf55/ardupilot/pulls/2,https://github.com/Ryanf55/ardupilot/pull/2,closed,1,1,1,1,0,0,0,0,[],2023-08-09 19:09:13+00:00,2023-08-09 19:25:41+00:00,988.0,0:16:28,[],"[{'commit_sha': 'b41710380bcb0923863de7f2f95c1ef02406b82d', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1469155420,dds-external-odometry: Fix mavlink error,"Fixes the following error
![Screenshot from 2023-08-09 15-05-15](https://github.com/Ryanf55/ardupilot/assets/62964137/7753767b-09d2-4ff4-8e85-25da134517fa)
",True,2,https://api.github.com/repos/Ryanf55/ardupilot/pulls/2,https://github.com/Ryanf55/ardupilot/pull/2,closed,1,1,1,1,0,0,0,0,[],2023-08-09 19:09:13+00:00,2023-08-09 19:25:41+00:00,988.0,0:16:28,[],"[{'commit_sha': 'b41710380bcb0923863de7f2f95c1ef02406b82d', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1485409760,update README with ardupilot configuration,"Provides the user with the information required to send the odometry generated from the SLAM to Ardupilot's EKF, which was made possible by ArduPilot/ardupilot#24518",True,12,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/12,https://github.com/ArduPilot/ardupilot_ros/pull/12,closed,17,0,1,1,2,3,1,0,[{'name': 'ros2'}],2023-08-22 20:43:33+00:00,2023-09-02 02:46:22+00:00,885769.0,"10 days, 6:02:49","[{'comment_id': 1302336757, 'comment_body': 'why disable the GPS? On real vehicles it would be very helpful for log analysis, even if not actually used in flight', 'comment_created': datetime.datetime(2023, 8, 23, 1, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1306684276, 'comment_body': 'Fair point! I will change it here and in ArduPilot/ardupilot_wiki#5366', 'comment_created': datetime.datetime(2023, 8, 27, 15, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1308020002, 'comment_body': 'Agree with Tridge that normally users, particularly researches, would have GPS available and have it as a source of truth, or at least another source like a Vicon. \r\n\r\n## Common setup\r\nPrimary: GPS\r\nSecondary: External (from ROS)\r\n\r\nAnd a switch to flip between the two. Both are normally recorded.\r\n\r\n## Other common setup\r\nEK2: GPS\r\nEK3: External (from ROS)\r\n\r\n\r\n## Plan\r\n\r\nGiven this is a safety problem, if cartographer fails, we should at least explain what the ""safe"" mode is. AltHold is probably ok. If Cartographer causes the EKF to diverge, Tridge would have the external as ride-along (log only, no control impact). Using RC7_OPTION see EKF_POS_SOURCE of 90.', 'comment_created': datetime.datetime(2023, 8, 28, 22, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '46dae9f410e547dfef4406180a81f80139238808', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1485409760,update README with ardupilot configuration,"Provides the user with the information required to send the odometry generated from the SLAM to Ardupilot's EKF, which was made possible by ArduPilot/ardupilot#24518",True,12,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/12,https://github.com/ArduPilot/ardupilot_ros/pull/12,closed,17,0,1,1,2,3,1,0,[{'name': 'ros2'}],2023-08-22 20:43:33+00:00,2023-09-02 02:46:22+00:00,885769.0,"10 days, 6:02:49","[{'comment_id': 1302336757, 'comment_body': 'why disable the GPS? On real vehicles it would be very helpful for log analysis, even if not actually used in flight', 'comment_created': datetime.datetime(2023, 8, 23, 1, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1306684276, 'comment_body': 'Fair point! I will change it here and in ArduPilot/ardupilot_wiki#5366', 'comment_created': datetime.datetime(2023, 8, 27, 15, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1308020002, 'comment_body': 'Agree with Tridge that normally users, particularly researches, would have GPS available and have it as a source of truth, or at least another source like a Vicon. \r\n\r\n## Common setup\r\nPrimary: GPS\r\nSecondary: External (from ROS)\r\n\r\nAnd a switch to flip between the two. Both are normally recorded.\r\n\r\n## Other common setup\r\nEK2: GPS\r\nEK3: External (from ROS)\r\n\r\n\r\n## Plan\r\n\r\nGiven this is a safety problem, if cartographer fails, we should at least explain what the ""safe"" mode is. AltHold is probably ok. If Cartographer causes the EKF to diverge, Tridge would have the external as ride-along (log only, no control impact). Using RC7_OPTION see EKF_POS_SOURCE of 90.', 'comment_created': datetime.datetime(2023, 8, 28, 22, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '46dae9f410e547dfef4406180a81f80139238808', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1485409760,update README with ardupilot configuration,"Provides the user with the information required to send the odometry generated from the SLAM to Ardupilot's EKF, which was made possible by ArduPilot/ardupilot#24518",True,12,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/12,https://github.com/ArduPilot/ardupilot_ros/pull/12,closed,17,0,1,1,2,3,1,0,[{'name': 'ros2'}],2023-08-22 20:43:33+00:00,2023-09-02 02:46:22+00:00,885769.0,"10 days, 6:02:49","[{'comment_id': 1302336757, 'comment_body': 'why disable the GPS? On real vehicles it would be very helpful for log analysis, even if not actually used in flight', 'comment_created': datetime.datetime(2023, 8, 23, 1, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1306684276, 'comment_body': 'Fair point! I will change it here and in ArduPilot/ardupilot_wiki#5366', 'comment_created': datetime.datetime(2023, 8, 27, 15, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1308020002, 'comment_body': 'Agree with Tridge that normally users, particularly researches, would have GPS available and have it as a source of truth, or at least another source like a Vicon. \r\n\r\n## Common setup\r\nPrimary: GPS\r\nSecondary: External (from ROS)\r\n\r\nAnd a switch to flip between the two. Both are normally recorded.\r\n\r\n## Other common setup\r\nEK2: GPS\r\nEK3: External (from ROS)\r\n\r\n\r\n## Plan\r\n\r\nGiven this is a safety problem, if cartographer fails, we should at least explain what the ""safe"" mode is. AltHold is probably ok. If Cartographer causes the EKF to diverge, Tridge would have the external as ride-along (log only, no control impact). Using RC7_OPTION see EKF_POS_SOURCE of 90.', 'comment_created': datetime.datetime(2023, 8, 28, 22, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '46dae9f410e547dfef4406180a81f80139238808', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1476600711,dev: Add ROS 2 page for Gazebo integration,"I plan on adding a quick youtube video showing the gazebo world with a copter in it, it would be nice to have that before merge. 
After this PR I will add a SLAM related page to the wiki.

The technical details have been heavily based on the `ardupilot_gz` README from @srmainwaring, and is linked in the page",True,5359,https://api.github.com/repos/ArduPilot/ardupilot_wiki/pulls/5359,https://github.com/ArduPilot/ardupilot_wiki/pull/5359,closed,77,0,2,2,6,0,0,0,[],2023-08-15 22:46:03+00:00,2023-08-18 22:10:07+00:00,257044.0,"2 days, 23:24:04",[],"[{'commit_sha': 'a97e204bbac6bdca8d13cc5196f4a8fcfb9d0a8b', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33c215e21998135b05a55b0222522597542a7ae4', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1476600711,dev: Add ROS 2 page for Gazebo integration,"I plan on adding a quick youtube video showing the gazebo world with a copter in it, it would be nice to have that before merge. 
After this PR I will add a SLAM related page to the wiki.

The technical details have been heavily based on the `ardupilot_gz` README from @srmainwaring, and is linked in the page",True,5359,https://api.github.com/repos/ArduPilot/ardupilot_wiki/pulls/5359,https://github.com/ArduPilot/ardupilot_wiki/pull/5359,closed,77,0,2,2,6,0,0,0,[],2023-08-15 22:46:03+00:00,2023-08-18 22:10:07+00:00,257044.0,"2 days, 23:24:04",[],"[{'commit_sha': 'a97e204bbac6bdca8d13cc5196f4a8fcfb9d0a8b', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33c215e21998135b05a55b0222522597542a7ae4', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1476600711,dev: Add ROS 2 page for Gazebo integration,"I plan on adding a quick youtube video showing the gazebo world with a copter in it, it would be nice to have that before merge. 
After this PR I will add a SLAM related page to the wiki.

The technical details have been heavily based on the `ardupilot_gz` README from @srmainwaring, and is linked in the page",True,5359,https://api.github.com/repos/ArduPilot/ardupilot_wiki/pulls/5359,https://github.com/ArduPilot/ardupilot_wiki/pull/5359,closed,77,0,2,2,6,0,0,0,[],2023-08-15 22:46:03+00:00,2023-08-18 22:10:07+00:00,257044.0,"2 days, 23:24:04",[],"[{'commit_sha': 'a97e204bbac6bdca8d13cc5196f4a8fcfb9d0a8b', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33c215e21998135b05a55b0222522597542a7ae4', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1484976484,add ros2-cartographer-slam page,"Continuation of #5359.
The technical details have been heavily based on the  `ardupilot_ros` README, which is linked in the page

@Hwurzburg could you upload the video to Ardupilot's youtube channel ? ",True,5366,https://api.github.com/repos/ArduPilot/ardupilot_wiki/pulls/5366,https://github.com/ArduPilot/ardupilot_wiki/pull/5366,closed,95,0,2,1,7,6,0,0,[],2023-08-22 15:25:04+00:00,2023-09-04 22:35:42+00:00,1149038.0,"13 days, 7:10:38","[{'comment_id': 1311789190, 'comment_body': 'under/overlines wrong', 'comment_created': datetime.datetime(2023, 8, 31, 15, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}, {'comment_id': 1311790905, 'comment_body': 'should use =====  for next heading level not ----\r\n', 'comment_created': datetime.datetime(2023, 8, 31, 15, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}, {'comment_id': 1311791223, 'comment_body': '=====', 'comment_created': datetime.datetime(2023, 8, 31, 15, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}, {'comment_id': 1311791449, 'comment_body': '========', 'comment_created': datetime.datetime(2023, 8, 31, 15, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}, {'comment_id': 1311791710, 'comment_body': 'use =====', 'comment_created': datetime.datetime(2023, 8, 31, 15, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}, {'comment_id': 1311810247, 'comment_body': '```suggestion\r\n..  youtube:: bpjGyAECKHA\r\n```\r\nnew link', 'comment_created': datetime.datetime(2023, 8, 31, 15, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}]","[{'commit_sha': '8f3fba54f23f6be44b3e283953e8439b4e9101b8', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1484976484,add ros2-cartographer-slam page,"Continuation of #5359.
The technical details have been heavily based on the  `ardupilot_ros` README, which is linked in the page

@Hwurzburg could you upload the video to Ardupilot's youtube channel ? ",True,5366,https://api.github.com/repos/ArduPilot/ardupilot_wiki/pulls/5366,https://github.com/ArduPilot/ardupilot_wiki/pull/5366,closed,95,0,2,1,7,6,0,0,[],2023-08-22 15:25:04+00:00,2023-09-04 22:35:42+00:00,1149038.0,"13 days, 7:10:38","[{'comment_id': 1311789190, 'comment_body': 'under/overlines wrong', 'comment_created': datetime.datetime(2023, 8, 31, 15, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}, {'comment_id': 1311790905, 'comment_body': 'should use =====  for next heading level not ----\r\n', 'comment_created': datetime.datetime(2023, 8, 31, 15, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}, {'comment_id': 1311791223, 'comment_body': '=====', 'comment_created': datetime.datetime(2023, 8, 31, 15, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}, {'comment_id': 1311791449, 'comment_body': '========', 'comment_created': datetime.datetime(2023, 8, 31, 15, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}, {'comment_id': 1311791710, 'comment_body': 'use =====', 'comment_created': datetime.datetime(2023, 8, 31, 15, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}, {'comment_id': 1311810247, 'comment_body': '```suggestion\r\n..  youtube:: bpjGyAECKHA\r\n```\r\nnew link', 'comment_created': datetime.datetime(2023, 8, 31, 15, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}]","[{'commit_sha': '8f3fba54f23f6be44b3e283953e8439b4e9101b8', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1484976484,add ros2-cartographer-slam page,"Continuation of #5359.
The technical details have been heavily based on the  `ardupilot_ros` README, which is linked in the page

@Hwurzburg could you upload the video to Ardupilot's youtube channel ? ",True,5366,https://api.github.com/repos/ArduPilot/ardupilot_wiki/pulls/5366,https://github.com/ArduPilot/ardupilot_wiki/pull/5366,closed,95,0,2,1,7,6,0,0,[],2023-08-22 15:25:04+00:00,2023-09-04 22:35:42+00:00,1149038.0,"13 days, 7:10:38","[{'comment_id': 1311789190, 'comment_body': 'under/overlines wrong', 'comment_created': datetime.datetime(2023, 8, 31, 15, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}, {'comment_id': 1311790905, 'comment_body': 'should use =====  for next heading level not ----\r\n', 'comment_created': datetime.datetime(2023, 8, 31, 15, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}, {'comment_id': 1311791223, 'comment_body': '=====', 'comment_created': datetime.datetime(2023, 8, 31, 15, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}, {'comment_id': 1311791449, 'comment_body': '========', 'comment_created': datetime.datetime(2023, 8, 31, 15, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}, {'comment_id': 1311791710, 'comment_body': 'use =====', 'comment_created': datetime.datetime(2023, 8, 31, 15, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}, {'comment_id': 1311810247, 'comment_body': '```suggestion\r\n..  youtube:: bpjGyAECKHA\r\n```\r\nnew link', 'comment_created': datetime.datetime(2023, 8, 31, 15, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hwurzburg', 'type': 'User'}]","[{'commit_sha': '8f3fba54f23f6be44b3e283953e8439b4e9101b8', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1463457440,Add pre-commit with black and xmllint,"Added pre-commit .yaml file with `black` and `xmllint` as well as some `pre-commit` hooks.

The pre-commit documentation recommends running this the first time to ensure that all the files in the repository are formatted correctly:
```bash
pre-commit run --all-files
```
So I will add a second commit to make the recommended changes

Solves #9 ",True,10,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/10,https://github.com/ArduPilot/ardupilot_ros/pull/10,closed,102,96,17,2,0,0,1,0,[{'name': 'ros2'}],2023-08-04 21:00:06+00:00,2023-08-04 21:09:20+00:00,554.0,0:09:14,[],"[{'commit_sha': '2e028b4d53fb6eb5a84b1a94ab80d2cafd4adb41', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ef9894446020f3a35c0fb4e47167bbe90ae435e', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1463457440,Add pre-commit with black and xmllint,"Added pre-commit .yaml file with `black` and `xmllint` as well as some `pre-commit` hooks.

The pre-commit documentation recommends running this the first time to ensure that all the files in the repository are formatted correctly:
```bash
pre-commit run --all-files
```
So I will add a second commit to make the recommended changes

Solves #9 ",True,10,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/10,https://github.com/ArduPilot/ardupilot_ros/pull/10,closed,102,96,17,2,0,0,1,0,[{'name': 'ros2'}],2023-08-04 21:00:06+00:00,2023-08-04 21:09:20+00:00,554.0,0:09:14,[],"[{'commit_sha': '2e028b4d53fb6eb5a84b1a94ab80d2cafd4adb41', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ef9894446020f3a35c0fb4e47167bbe90ae435e', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1463457440,Add pre-commit with black and xmllint,"Added pre-commit .yaml file with `black` and `xmllint` as well as some `pre-commit` hooks.

The pre-commit documentation recommends running this the first time to ensure that all the files in the repository are formatted correctly:
```bash
pre-commit run --all-files
```
So I will add a second commit to make the recommended changes

Solves #9 ",True,10,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/10,https://github.com/ArduPilot/ardupilot_ros/pull/10,closed,102,96,17,2,0,0,1,0,[{'name': 'ros2'}],2023-08-04 21:00:06+00:00,2023-08-04 21:09:20+00:00,554.0,0:09:14,[],"[{'commit_sha': '2e028b4d53fb6eb5a84b1a94ab80d2cafd4adb41', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ef9894446020f3a35c0fb4e47167bbe90ae435e', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1467769643,AP_ExternalControl: initial implementation of external control library,"This is a very basic implementation of an external control library, just to unblock @pedro-fuoco 

Relates to #23363 

## Testing Instructions

1. Run sim_vehicle with --enable-dds --console --map
2. Set DDS_ENABLED param to 1
3. Use mavproxy to arm the vehicle, set the mode to guided, and takeoff to ~50m
4. Run the microROS agent like normal
5. Verify with ros2 CLI that you see the `ap/cmd_vel` topic
6. Publish commands to `ap/cmd_vel`, or use rqt. Current behavior is this
    ```
    # Go up at 1 m/s
    ros2 topic pub /ap/cmd_vel geometry_msgs/msg/TwistStamped '{twist: {linear: {z: 1.0}}}'
    # Go down at 2 m/s
    ros2 topic pub /ap/cmd_vel geometry_msgs/msg/TwistStamped '{twist: {linear: {z: -1.0}}}'
    # Go east at 1 m/s
    ros2 topic pub /ap/cmd_vel geometry_msgs/msg/TwistStamped '{twist: {linear: {x: 1.0}}}'
    # Rotate the quadcopter 180 degrees and repeat the above tests. Regardless of the orientation, x always makes the copter go north because the cmd_vel topic is odom frame ENU.
    ```
    
    We do need to decide if the cmd_vel topic should be in body frame or map frame. According to REP-147, the cmd_vel topic i in body frame. Perhaps we should use the frame ID to either `body` or `map` for these different ones? Or a different topic? We have to decide based on clarity (topics are easier to notice than frame ID's), but additional subscribers impact flash, code size, and RAM/CPU usage.  https://ros.org/reps/rep-0147.html#rate-interface
    
    ",True,24549,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24549,https://github.com/ArduPilot/ardupilot/pull/24549,closed,239,6,15,7,2,15,2,0,"[{'name': 'AllVehicles'}, {'name': 'ROS'}]",2023-08-09 00:49:17+00:00,2023-08-22 08:21:23+00:00,1150326.0,"13 days, 7:32:06","[{'comment_id': 1287887461, 'comment_body': ""Should also say the frame convention for yaw rate? Even @lthall has realized the mavlink API's are not quite cut and dry. Although I don't recommend reading too much of this thread, this comment is useful. \r\nhttps://github.com/mavlink/mavlink/pull/2013#issuecomment-1612706250\r\n"", 'comment_created': datetime.datetime(2023, 8, 9, 3, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1289141629, 'comment_body': ""Tested it with `ardupilot_gz`. I did a takeoff and put the copter into guided mode with a GCS.\r\nI then used the following terminal command to send in velocity inputs through ros 2/dds:\r\n```\r\nros2 topic pub /ap/cmd_vel geometry_msgs/msg/TwistStamped '{twist: {angular: {z: 1.0}}}'\r\nros2 topic pub /ap/cmd_vel geometry_msgs/msg/TwistStamped '{twist: {linear: {z: 1.0}}}'\r\n```\r\nIn both cases it entered  this condition, resulting in the copter not moving."", 'comment_created': datetime.datetime(2023, 8, 9, 20, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1289223558, 'comment_body': 'This was caused by the singleton, the class constructor that attributes it was missing. Me and Ryan had a quick debug meeting and fixed it [on his branch](https://github.com/Ryanf55/ardupilot/commit/8aed4220628dfc856d22deda008eead328da10cb)', 'comment_created': datetime.datetime(2023, 8, 9, 21, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1289246418, 'comment_body': 'Here are the test results for the frame orientations:\r\nPositive x (correctly went East):\r\n![x_pos](https://github.com/ArduPilot/ardupilot/assets/62964137/ab72d359-0c12-47e1-aea0-a2464bffaf3d)\r\nPositive y (correnctly went North):\r\n![y_pos](https://github.com/ArduPilot/ardupilot/assets/62964137/6b5d4681-3723-4e2f-bba4-4f5cc8f49968)\r\nNegative z (Wrongfully went Up):\r\n![z_negative](https://github.com/ArduPilot/ardupilot/assets/62964137/c8a3003a-aa5c-4152-be47-239e861c301a)\r\nPositive Yaw (correctly went CounterClockwise looking from above):\r\n![yaw_pos](https://github.com/ArduPilot/ardupilot/assets/62964137/a838572c-dfab-4dc3-aefe-3b6b7e07edb5)\r\n\r\nThus, simply changing the linear z axis should solve it.\r\n```suggestion\r\n        Vector3f linear_velocity {\r\n            float(rx_velocity_control_topic.twist.linear.y),\r\n            float(rx_velocity_control_topic.twist.linear.x),\r\n            float(rx_velocity_control_topic.twist.linear.z) };\r\n        const float yaw_rate = -rx_velocity_control_topic.twist.angular.z;\r\n        external_control->set_linear_velocity_and_yaw_rate(linear_velocity, yaw_rate);\r\n```', 'comment_created': datetime.datetime(2023, 8, 9, 21, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1289248396, 'comment_body': 'Also tested to see if the frame orientations were consistent with #23541. Everything except the z linear axis is perfect', 'comment_created': datetime.datetime(2023, 8, 9, 21, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1289345752, 'comment_body': '> Here are the test results for the frame orientations: Positive x (correctly went East): ![x_pos](https://user-images.githubusercontent.com/62964137/259555182-ab72d359-0c12-47e1-aea0-a2464bffaf3d.gif) Positive y (correnctly went North): ![y_pos](https://user-images.githubusercontent.com/62964137/259555211-6b5d4681-3723-4e2f-bba4-4f5cc8f49968.gif) Negative z (Wrongfully went Up): ![z_negative](https://user-images.githubusercontent.com/62964137/259555219-c8a3003a-aa5c-4152-be47-239e861c301a.gif) Positive Yaw (correctly went CounterClockwise looking from above): ![yaw_pos](https://user-images.githubusercontent.com/62964137/259555241-a838572c-dfab-4dc3-aefe-3b6b7e07edb5.gif)\r\n> \r\n> Thus, simply changing the linear z axis should solve it.\r\n\r\nThis negative for Z should go in the copter API. The external AHRS said positive Z is down, and copter implements it differently. ', 'comment_created': datetime.datetime(2023, 8, 9, 23, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1289378575, 'comment_body': 'Yeh, I am going to put a PR in to fix this mistake. Once I saw it I wonder why I missed it the first time.', 'comment_created': datetime.datetime(2023, 8, 10, 0, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lthall', 'type': 'User'}, {'comment_id': 1289380234, 'comment_body': 'Nice. Please tag me, so we can follow the same convention here. ', 'comment_created': datetime.datetime(2023, 8, 10, 0, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1289384110, 'comment_body': '> This negative for Z should go in the copter API. The external AHRS said positive Z is down, and copter implements it differently.\r\n\r\nYes, we should definatly be using NED where positive Z is down. It can get a bit mixed up because positive altitude is up and I have not converted the position controller to NED yet but I have done most of the work in the background to make that happen. I intend it to be done by the time we fix the units.', 'comment_created': datetime.datetime(2023, 8, 10, 0, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lthall', 'type': 'User'}, {'comment_id': 1289487810, 'comment_body': ""The suggestion from Pedro would solve it for Copter but break other vehicles. I have added a negative in the Copter implementation in this commit, as well as a comment why.\r\nb4251a1ad46269b4796fdca07291c5bbbb5eb5db\r\n\r\nIf/When copter transitions to NED for velocity control, the interface in AP_ExternalControl will not change, because it's already NED."", 'comment_created': datetime.datetime(2023, 8, 10, 3, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1289488000, 'comment_body': 'Fixed in 657d9da8372238907bdb10aa53314f5a1b413f50', 'comment_created': datetime.datetime(2023, 8, 10, 3, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1289531924, 'comment_body': '@pedro-fuoco In my testing, I see positive X going west. \r\n![image](https://github.com/ArduPilot/ardupilot/assets/25047695/5857c792-203a-4201-9bfd-11439b1ea1c8)\r\n', 'comment_created': datetime.datetime(2023, 8, 10, 4, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1291352714, 'comment_body': 'Missing newline.', 'comment_created': datetime.datetime(2023, 8, 11, 13, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1295242189, 'comment_body': 'maybe velocity_NEU_ms', 'comment_created': datetime.datetime(2023, 8, 15, 23, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1295395978, 'comment_body': 'Done 3ec2961f023fc20e105bbedeb2ecde835fe34e51', 'comment_created': datetime.datetime(2023, 8, 16, 5, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': 'e72467c00d7a8d0ded765a6e4c1417c29c4e280e', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd409f5d17251235176046e880d2342621835509d', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '386b0578488b5aab60c10181fd3e30423e5dcc01', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58b3319c60835a729d7c5a380be459539b996bd3', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f46526f26506ef474c3e6472fd4098fe4a0e640', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31a92c64d6a5f2fda06343d2d5ef4a2fac359ba2', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9afe37a00c221ee0f875cc97b99df136024c261', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Andrew Tridgell,831867,,User,,91,,3,1086
1467769643,AP_ExternalControl: initial implementation of external control library,"This is a very basic implementation of an external control library, just to unblock @pedro-fuoco 

Relates to #23363 

## Testing Instructions

1. Run sim_vehicle with --enable-dds --console --map
2. Set DDS_ENABLED param to 1
3. Use mavproxy to arm the vehicle, set the mode to guided, and takeoff to ~50m
4. Run the microROS agent like normal
5. Verify with ros2 CLI that you see the `ap/cmd_vel` topic
6. Publish commands to `ap/cmd_vel`, or use rqt. Current behavior is this
    ```
    # Go up at 1 m/s
    ros2 topic pub /ap/cmd_vel geometry_msgs/msg/TwistStamped '{twist: {linear: {z: 1.0}}}'
    # Go down at 2 m/s
    ros2 topic pub /ap/cmd_vel geometry_msgs/msg/TwistStamped '{twist: {linear: {z: -1.0}}}'
    # Go east at 1 m/s
    ros2 topic pub /ap/cmd_vel geometry_msgs/msg/TwistStamped '{twist: {linear: {x: 1.0}}}'
    # Rotate the quadcopter 180 degrees and repeat the above tests. Regardless of the orientation, x always makes the copter go north because the cmd_vel topic is odom frame ENU.
    ```
    
    We do need to decide if the cmd_vel topic should be in body frame or map frame. According to REP-147, the cmd_vel topic i in body frame. Perhaps we should use the frame ID to either `body` or `map` for these different ones? Or a different topic? We have to decide based on clarity (topics are easier to notice than frame ID's), but additional subscribers impact flash, code size, and RAM/CPU usage.  https://ros.org/reps/rep-0147.html#rate-interface
    
    ",True,24549,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24549,https://github.com/ArduPilot/ardupilot/pull/24549,closed,239,6,15,7,2,15,2,0,"[{'name': 'AllVehicles'}, {'name': 'ROS'}]",2023-08-09 00:49:17+00:00,2023-08-22 08:21:23+00:00,1150326.0,"13 days, 7:32:06","[{'comment_id': 1287887461, 'comment_body': ""Should also say the frame convention for yaw rate? Even @lthall has realized the mavlink API's are not quite cut and dry. Although I don't recommend reading too much of this thread, this comment is useful. \r\nhttps://github.com/mavlink/mavlink/pull/2013#issuecomment-1612706250\r\n"", 'comment_created': datetime.datetime(2023, 8, 9, 3, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1289141629, 'comment_body': ""Tested it with `ardupilot_gz`. I did a takeoff and put the copter into guided mode with a GCS.\r\nI then used the following terminal command to send in velocity inputs through ros 2/dds:\r\n```\r\nros2 topic pub /ap/cmd_vel geometry_msgs/msg/TwistStamped '{twist: {angular: {z: 1.0}}}'\r\nros2 topic pub /ap/cmd_vel geometry_msgs/msg/TwistStamped '{twist: {linear: {z: 1.0}}}'\r\n```\r\nIn both cases it entered  this condition, resulting in the copter not moving."", 'comment_created': datetime.datetime(2023, 8, 9, 20, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1289223558, 'comment_body': 'This was caused by the singleton, the class constructor that attributes it was missing. Me and Ryan had a quick debug meeting and fixed it [on his branch](https://github.com/Ryanf55/ardupilot/commit/8aed4220628dfc856d22deda008eead328da10cb)', 'comment_created': datetime.datetime(2023, 8, 9, 21, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1289246418, 'comment_body': 'Here are the test results for the frame orientations:\r\nPositive x (correctly went East):\r\n![x_pos](https://github.com/ArduPilot/ardupilot/assets/62964137/ab72d359-0c12-47e1-aea0-a2464bffaf3d)\r\nPositive y (correnctly went North):\r\n![y_pos](https://github.com/ArduPilot/ardupilot/assets/62964137/6b5d4681-3723-4e2f-bba4-4f5cc8f49968)\r\nNegative z (Wrongfully went Up):\r\n![z_negative](https://github.com/ArduPilot/ardupilot/assets/62964137/c8a3003a-aa5c-4152-be47-239e861c301a)\r\nPositive Yaw (correctly went CounterClockwise looking from above):\r\n![yaw_pos](https://github.com/ArduPilot/ardupilot/assets/62964137/a838572c-dfab-4dc3-aefe-3b6b7e07edb5)\r\n\r\nThus, simply changing the linear z axis should solve it.\r\n```suggestion\r\n        Vector3f linear_velocity {\r\n            float(rx_velocity_control_topic.twist.linear.y),\r\n            float(rx_velocity_control_topic.twist.linear.x),\r\n            float(rx_velocity_control_topic.twist.linear.z) };\r\n        const float yaw_rate = -rx_velocity_control_topic.twist.angular.z;\r\n        external_control->set_linear_velocity_and_yaw_rate(linear_velocity, yaw_rate);\r\n```', 'comment_created': datetime.datetime(2023, 8, 9, 21, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1289248396, 'comment_body': 'Also tested to see if the frame orientations were consistent with #23541. Everything except the z linear axis is perfect', 'comment_created': datetime.datetime(2023, 8, 9, 21, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1289345752, 'comment_body': '> Here are the test results for the frame orientations: Positive x (correctly went East): ![x_pos](https://user-images.githubusercontent.com/62964137/259555182-ab72d359-0c12-47e1-aea0-a2464bffaf3d.gif) Positive y (correnctly went North): ![y_pos](https://user-images.githubusercontent.com/62964137/259555211-6b5d4681-3723-4e2f-bba4-4f5cc8f49968.gif) Negative z (Wrongfully went Up): ![z_negative](https://user-images.githubusercontent.com/62964137/259555219-c8a3003a-aa5c-4152-be47-239e861c301a.gif) Positive Yaw (correctly went CounterClockwise looking from above): ![yaw_pos](https://user-images.githubusercontent.com/62964137/259555241-a838572c-dfab-4dc3-aefe-3b6b7e07edb5.gif)\r\n> \r\n> Thus, simply changing the linear z axis should solve it.\r\n\r\nThis negative for Z should go in the copter API. The external AHRS said positive Z is down, and copter implements it differently. ', 'comment_created': datetime.datetime(2023, 8, 9, 23, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1289378575, 'comment_body': 'Yeh, I am going to put a PR in to fix this mistake. Once I saw it I wonder why I missed it the first time.', 'comment_created': datetime.datetime(2023, 8, 10, 0, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lthall', 'type': 'User'}, {'comment_id': 1289380234, 'comment_body': 'Nice. Please tag me, so we can follow the same convention here. ', 'comment_created': datetime.datetime(2023, 8, 10, 0, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1289384110, 'comment_body': '> This negative for Z should go in the copter API. The external AHRS said positive Z is down, and copter implements it differently.\r\n\r\nYes, we should definatly be using NED where positive Z is down. It can get a bit mixed up because positive altitude is up and I have not converted the position controller to NED yet but I have done most of the work in the background to make that happen. I intend it to be done by the time we fix the units.', 'comment_created': datetime.datetime(2023, 8, 10, 0, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lthall', 'type': 'User'}, {'comment_id': 1289487810, 'comment_body': ""The suggestion from Pedro would solve it for Copter but break other vehicles. I have added a negative in the Copter implementation in this commit, as well as a comment why.\r\nb4251a1ad46269b4796fdca07291c5bbbb5eb5db\r\n\r\nIf/When copter transitions to NED for velocity control, the interface in AP_ExternalControl will not change, because it's already NED."", 'comment_created': datetime.datetime(2023, 8, 10, 3, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1289488000, 'comment_body': 'Fixed in 657d9da8372238907bdb10aa53314f5a1b413f50', 'comment_created': datetime.datetime(2023, 8, 10, 3, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1289531924, 'comment_body': '@pedro-fuoco In my testing, I see positive X going west. \r\n![image](https://github.com/ArduPilot/ardupilot/assets/25047695/5857c792-203a-4201-9bfd-11439b1ea1c8)\r\n', 'comment_created': datetime.datetime(2023, 8, 10, 4, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1291352714, 'comment_body': 'Missing newline.', 'comment_created': datetime.datetime(2023, 8, 11, 13, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1295242189, 'comment_body': 'maybe velocity_NEU_ms', 'comment_created': datetime.datetime(2023, 8, 15, 23, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1295395978, 'comment_body': 'Done 3ec2961f023fc20e105bbedeb2ecde835fe34e51', 'comment_created': datetime.datetime(2023, 8, 16, 5, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': 'e72467c00d7a8d0ded765a6e4c1417c29c4e280e', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd409f5d17251235176046e880d2342621835509d', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '386b0578488b5aab60c10181fd3e30423e5dcc01', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58b3319c60835a729d7c5a380be459539b996bd3', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f46526f26506ef474c3e6472fd4098fe4a0e640', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31a92c64d6a5f2fda06343d2d5ef4a2fac359ba2', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9afe37a00c221ee0f875cc97b99df136024c261', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Andrew Tridgell,831867,,User,,91,,3,1086
1467769643,AP_ExternalControl: initial implementation of external control library,"This is a very basic implementation of an external control library, just to unblock @pedro-fuoco 

Relates to #23363 

## Testing Instructions

1. Run sim_vehicle with --enable-dds --console --map
2. Set DDS_ENABLED param to 1
3. Use mavproxy to arm the vehicle, set the mode to guided, and takeoff to ~50m
4. Run the microROS agent like normal
5. Verify with ros2 CLI that you see the `ap/cmd_vel` topic
6. Publish commands to `ap/cmd_vel`, or use rqt. Current behavior is this
    ```
    # Go up at 1 m/s
    ros2 topic pub /ap/cmd_vel geometry_msgs/msg/TwistStamped '{twist: {linear: {z: 1.0}}}'
    # Go down at 2 m/s
    ros2 topic pub /ap/cmd_vel geometry_msgs/msg/TwistStamped '{twist: {linear: {z: -1.0}}}'
    # Go east at 1 m/s
    ros2 topic pub /ap/cmd_vel geometry_msgs/msg/TwistStamped '{twist: {linear: {x: 1.0}}}'
    # Rotate the quadcopter 180 degrees and repeat the above tests. Regardless of the orientation, x always makes the copter go north because the cmd_vel topic is odom frame ENU.
    ```
    
    We do need to decide if the cmd_vel topic should be in body frame or map frame. According to REP-147, the cmd_vel topic i in body frame. Perhaps we should use the frame ID to either `body` or `map` for these different ones? Or a different topic? We have to decide based on clarity (topics are easier to notice than frame ID's), but additional subscribers impact flash, code size, and RAM/CPU usage.  https://ros.org/reps/rep-0147.html#rate-interface
    
    ",True,24549,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24549,https://github.com/ArduPilot/ardupilot/pull/24549,closed,239,6,15,7,2,15,2,0,"[{'name': 'AllVehicles'}, {'name': 'ROS'}]",2023-08-09 00:49:17+00:00,2023-08-22 08:21:23+00:00,1150326.0,"13 days, 7:32:06","[{'comment_id': 1287887461, 'comment_body': ""Should also say the frame convention for yaw rate? Even @lthall has realized the mavlink API's are not quite cut and dry. Although I don't recommend reading too much of this thread, this comment is useful. \r\nhttps://github.com/mavlink/mavlink/pull/2013#issuecomment-1612706250\r\n"", 'comment_created': datetime.datetime(2023, 8, 9, 3, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1289141629, 'comment_body': ""Tested it with `ardupilot_gz`. I did a takeoff and put the copter into guided mode with a GCS.\r\nI then used the following terminal command to send in velocity inputs through ros 2/dds:\r\n```\r\nros2 topic pub /ap/cmd_vel geometry_msgs/msg/TwistStamped '{twist: {angular: {z: 1.0}}}'\r\nros2 topic pub /ap/cmd_vel geometry_msgs/msg/TwistStamped '{twist: {linear: {z: 1.0}}}'\r\n```\r\nIn both cases it entered  this condition, resulting in the copter not moving."", 'comment_created': datetime.datetime(2023, 8, 9, 20, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1289223558, 'comment_body': 'This was caused by the singleton, the class constructor that attributes it was missing. Me and Ryan had a quick debug meeting and fixed it [on his branch](https://github.com/Ryanf55/ardupilot/commit/8aed4220628dfc856d22deda008eead328da10cb)', 'comment_created': datetime.datetime(2023, 8, 9, 21, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1289246418, 'comment_body': 'Here are the test results for the frame orientations:\r\nPositive x (correctly went East):\r\n![x_pos](https://github.com/ArduPilot/ardupilot/assets/62964137/ab72d359-0c12-47e1-aea0-a2464bffaf3d)\r\nPositive y (correnctly went North):\r\n![y_pos](https://github.com/ArduPilot/ardupilot/assets/62964137/6b5d4681-3723-4e2f-bba4-4f5cc8f49968)\r\nNegative z (Wrongfully went Up):\r\n![z_negative](https://github.com/ArduPilot/ardupilot/assets/62964137/c8a3003a-aa5c-4152-be47-239e861c301a)\r\nPositive Yaw (correctly went CounterClockwise looking from above):\r\n![yaw_pos](https://github.com/ArduPilot/ardupilot/assets/62964137/a838572c-dfab-4dc3-aefe-3b6b7e07edb5)\r\n\r\nThus, simply changing the linear z axis should solve it.\r\n```suggestion\r\n        Vector3f linear_velocity {\r\n            float(rx_velocity_control_topic.twist.linear.y),\r\n            float(rx_velocity_control_topic.twist.linear.x),\r\n            float(rx_velocity_control_topic.twist.linear.z) };\r\n        const float yaw_rate = -rx_velocity_control_topic.twist.angular.z;\r\n        external_control->set_linear_velocity_and_yaw_rate(linear_velocity, yaw_rate);\r\n```', 'comment_created': datetime.datetime(2023, 8, 9, 21, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1289248396, 'comment_body': 'Also tested to see if the frame orientations were consistent with #23541. Everything except the z linear axis is perfect', 'comment_created': datetime.datetime(2023, 8, 9, 21, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1289345752, 'comment_body': '> Here are the test results for the frame orientations: Positive x (correctly went East): ![x_pos](https://user-images.githubusercontent.com/62964137/259555182-ab72d359-0c12-47e1-aea0-a2464bffaf3d.gif) Positive y (correnctly went North): ![y_pos](https://user-images.githubusercontent.com/62964137/259555211-6b5d4681-3723-4e2f-bba4-4f5cc8f49968.gif) Negative z (Wrongfully went Up): ![z_negative](https://user-images.githubusercontent.com/62964137/259555219-c8a3003a-aa5c-4152-be47-239e861c301a.gif) Positive Yaw (correctly went CounterClockwise looking from above): ![yaw_pos](https://user-images.githubusercontent.com/62964137/259555241-a838572c-dfab-4dc3-aefe-3b6b7e07edb5.gif)\r\n> \r\n> Thus, simply changing the linear z axis should solve it.\r\n\r\nThis negative for Z should go in the copter API. The external AHRS said positive Z is down, and copter implements it differently. ', 'comment_created': datetime.datetime(2023, 8, 9, 23, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1289378575, 'comment_body': 'Yeh, I am going to put a PR in to fix this mistake. Once I saw it I wonder why I missed it the first time.', 'comment_created': datetime.datetime(2023, 8, 10, 0, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lthall', 'type': 'User'}, {'comment_id': 1289380234, 'comment_body': 'Nice. Please tag me, so we can follow the same convention here. ', 'comment_created': datetime.datetime(2023, 8, 10, 0, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1289384110, 'comment_body': '> This negative for Z should go in the copter API. The external AHRS said positive Z is down, and copter implements it differently.\r\n\r\nYes, we should definatly be using NED where positive Z is down. It can get a bit mixed up because positive altitude is up and I have not converted the position controller to NED yet but I have done most of the work in the background to make that happen. I intend it to be done by the time we fix the units.', 'comment_created': datetime.datetime(2023, 8, 10, 0, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lthall', 'type': 'User'}, {'comment_id': 1289487810, 'comment_body': ""The suggestion from Pedro would solve it for Copter but break other vehicles. I have added a negative in the Copter implementation in this commit, as well as a comment why.\r\nb4251a1ad46269b4796fdca07291c5bbbb5eb5db\r\n\r\nIf/When copter transitions to NED for velocity control, the interface in AP_ExternalControl will not change, because it's already NED."", 'comment_created': datetime.datetime(2023, 8, 10, 3, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1289488000, 'comment_body': 'Fixed in 657d9da8372238907bdb10aa53314f5a1b413f50', 'comment_created': datetime.datetime(2023, 8, 10, 3, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1289531924, 'comment_body': '@pedro-fuoco In my testing, I see positive X going west. \r\n![image](https://github.com/ArduPilot/ardupilot/assets/25047695/5857c792-203a-4201-9bfd-11439b1ea1c8)\r\n', 'comment_created': datetime.datetime(2023, 8, 10, 4, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1291352714, 'comment_body': 'Missing newline.', 'comment_created': datetime.datetime(2023, 8, 11, 13, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1295242189, 'comment_body': 'maybe velocity_NEU_ms', 'comment_created': datetime.datetime(2023, 8, 15, 23, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1295395978, 'comment_body': 'Done 3ec2961f023fc20e105bbedeb2ecde835fe34e51', 'comment_created': datetime.datetime(2023, 8, 16, 5, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': 'e72467c00d7a8d0ded765a6e4c1417c29c4e280e', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd409f5d17251235176046e880d2342621835509d', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '386b0578488b5aab60c10181fd3e30423e5dcc01', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58b3319c60835a729d7c5a380be459539b996bd3', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f46526f26506ef474c3e6472fd4098fe4a0e640', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31a92c64d6a5f2fda06343d2d5ef4a2fac359ba2', 'committer_username': 'tridge', 'committer_name': 'Andrew Tridgell', 'committer_email': None, 'commit_date': datetime.datetime(2011, 6, 6, 4, 46, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9afe37a00c221ee0f875cc97b99df136024c261', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Andrew Tridgell,831867,,User,,91,,3,1086
1485597809,AP_DDS: /ap/cmd_vel accepts body-frame messages,"The aim of this PR is for `/ap/cmd_vel` to be able to receive body frame messages with the `base_link` `frame_id`.
This check is performed first as this should be the most common use case for aerial vehicles per `ROS REP 147`",True,24734,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24734,https://github.com/ArduPilot/ardupilot/pull/24734,closed,25,13,1,1,4,3,2,0,"[{'name': 'ROS'}, {'name': 'For-4.5'}]",2023-08-23 01:03:23+00:00,2023-09-06 10:31:20+00:00,1243677.0,"14 days, 9:27:57","[{'comment_id': 1314389237, 'comment_body': 'Can you call this variable `linear_velocity_base_link` to differentiate from the later stuff. \r\n\r\n`linear_velocity = ahrs.body_to_earth(linear_velocity);`', 'comment_created': datetime.datetime(2023, 9, 4, 2, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1315061539, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 9, 4, 15, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1315068210, 'comment_body': 'Should be `else if`', 'comment_created': datetime.datetime(2023, 9, 4, 15, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '5663c8451f2dffc561c6bfe4538c550cf3963e44', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1485597809,AP_DDS: /ap/cmd_vel accepts body-frame messages,"The aim of this PR is for `/ap/cmd_vel` to be able to receive body frame messages with the `base_link` `frame_id`.
This check is performed first as this should be the most common use case for aerial vehicles per `ROS REP 147`",True,24734,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24734,https://github.com/ArduPilot/ardupilot/pull/24734,closed,25,13,1,1,4,3,2,0,"[{'name': 'ROS'}, {'name': 'For-4.5'}]",2023-08-23 01:03:23+00:00,2023-09-06 10:31:20+00:00,1243677.0,"14 days, 9:27:57","[{'comment_id': 1314389237, 'comment_body': 'Can you call this variable `linear_velocity_base_link` to differentiate from the later stuff. \r\n\r\n`linear_velocity = ahrs.body_to_earth(linear_velocity);`', 'comment_created': datetime.datetime(2023, 9, 4, 2, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1315061539, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 9, 4, 15, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1315068210, 'comment_body': 'Should be `else if`', 'comment_created': datetime.datetime(2023, 9, 4, 15, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '5663c8451f2dffc561c6bfe4538c550cf3963e44', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1490859314,Add TwistStamped support via TwistPublisher and TwistSubscriber,"## Basic Info

| Info | Please fill out this column |
| ------ | ----------- |
| Ticket(s) this addresses   | #1594  |
| Primary OS tested on | Ubuntu 22.04 |
| Robotic platform tested on | CI |

---

## Description of contribution in a few bullet points

* Add a new util class for publishing either Twist or TwistStamped called `TwistPublisher`
* Add a new util class for subscribing to either Twist or TwistStamped called `TwistSubscriber`
* Add a new parameter for selecting to stamp the twist data to each util
* Consume TwistPublisher in nav2_controller, among other nodes
* Consume TwistSubscriber in nav2_velocityy_smoother, among other nodes
* Implements the approach described [here](https://github.com/ros-planning/navigation2/issues/1594#issuecomment-1675262038): `But, I suppose we could make a velocity publisher wrapper in nav2_util that deals with that parameterization outside of the application code (and in a way we can remove the non-stamped support more gradually)`.


## Description of documentation updates required from your changes

* Would need to document the new optional parameter behavior in the normal docs on top of the README.


## Future work that may be required in bullet points

* Related PR's in gazebo, etc, to convert the ecosystem to TwistStamped

## Test Instructions

```bash
colcon test --packages-select nav2_util --event-handlers=console_cohesion+ --ctest-args "" -R"" "" test_twist""
```

Quick iteration
```bash
colcon build --packages-select nav2_util && colcon test --packages-select nav2_util --event-handlers=console_cohesion+ --ctest-args "" -R"" "" test_twist""
```

#### For Maintainers: <!-- DO NOT EDIT OR REMOVE -->
- [ ] Check that any new parameters added are updated in navigation.ros.org
- [ ] Check that any significant change is added to the migration guide
- [ ] Check that any new features **OR** changes to existing behaviors are reflected in the tuning guide
- [ ] Check that any new functions have Doxygen added
- [ ] Check that any new features have test coverage
- [ ] Check that any new plugins is added to the plugins page
- [ ] If BT Node, Additionally: add to BT's XML index of nodes for groot, BT package's readme table, and BT library lists
",False,3775,https://api.github.com/repos/ros-navigation/navigation2/pulls/3775,https://github.com/ros-navigation/navigation2/pull/3775,closed,696,117,25,35,29,48,0,0,[],2023-08-27 05:21:59+00:00,2024-01-04 00:36:25+00:00,11214866.0,"129 days, 19:14:26","[{'comment_id': 1306602450, 'comment_body': 'copy-pasta errror', 'comment_created': datetime.datetime(2023, 8, 27, 5, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1306602497, 'comment_body': 'remove', 'comment_created': datetime.datetime(2023, 8, 27, 5, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1307794506, 'comment_body': ""Remove assert, we don't do that in Nav2. You can check if nullptr but don't add `asserts`"", 'comment_created': datetime.datetime(2023, 8, 28, 18, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1307795249, 'comment_body': ""This doesn't need to be stored"", 'comment_created': datetime.datetime(2023, 8, 28, 19, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1307795721, 'comment_body': 'A non-stamped version that adds a stamp if `is_stamped_` is true? Basically the counter-implementation of this one\r\n', 'comment_created': datetime.datetime(2023, 8, 28, 19, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1307797798, 'comment_body': 'There are various reasons why storing the shared pointer creates problems ', 'comment_created': datetime.datetime(2023, 8, 28, 19, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1307920072, 'comment_body': ""Ah yea, it's only  used in the constructor. Good idea. Done"", 'comment_created': datetime.datetime(2023, 8, 28, 20, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1308959071, 'comment_body': 'I just removed it, was using it during testing.', 'comment_created': datetime.datetime(2023, 8, 29, 14, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1308960101, 'comment_body': ""I was thinking about this, and was planning to add it when it's needed, however it seems a lot of NAV2 internals are using the stamped version anyways. "", 'comment_created': datetime.datetime(2023, 8, 29, 14, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1309086008, 'comment_body': ""Oh ok, then I don't think its strictly necessary then.\r\n\r\nThe only thing I'd say in counter to that is that if others want to use this to stamp their twists (with a param/method arg for the base_frame) that could be a nice add on. But given your expertise / applications i think you're in the best position to tell me if that's even something desired. If not, feel free to ignore. "", 'comment_created': datetime.datetime(2023, 8, 29, 16, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1313415176, 'comment_body': 'Update ', 'comment_created': datetime.datetime(2023, 9, 1, 19, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1313418322, 'comment_body': 'This is insufficient. You need to have something that accepts that message to make sure the action is actually taken. Make a subscription and check that it was received / the values. \r\n\r\nAlso, Send it both stamped/unstamped and also make sure both are received and the non-stamped was properly stamped. And check that the subscription count is incremented with the subscriber is added. \r\n\r\nAlso a second test like this for `enable_stamped_cmd_vel = true` . \r\n\r\nBasically, cover the code, all the code :-)', 'comment_created': datetime.datetime(2023, 9, 1, 19, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1313913842, 'comment_body': 'Done in 169f7b3778d3198c8266ba7ec026ae5fc66a58bc', 'comment_created': datetime.datetime(2023, 9, 2, 17, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1313914250, 'comment_body': 'Done in 2bc7d9dd2fa0c1a43368927788ad6b2cd1e1f233.\r\n\r\nI added a subscriber, and cover both the default value of the param, as well as when the param is modified to enforce stamping. The subscription count is now tested, as well as the activation state and all the transitions.', 'comment_created': datetime.datetime(2023, 9, 2, 17, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1391306111, 'comment_body': 'Go back to the unique pointer + move. It removes jitter', 'comment_created': datetime.datetime(2023, 11, 13, 15, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1391306635, 'comment_body': 'Commented otu?', 'comment_created': datetime.datetime(2023, 11, 13, 15, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1391308583, 'comment_body': 'Config guide needs this for all nodes that use it to know about this option. Migration guide too ', 'comment_created': datetime.datetime(2023, 11, 13, 15, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1391312138, 'comment_body': 'Q: why not have a callback here and a `getTwist` & `getTwistStamped` member?', 'comment_created': datetime.datetime(2023, 11, 13, 15, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1391314129, 'comment_body': '^ and for all cases like this one', 'comment_created': datetime.datetime(2023, 11, 13, 15, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1391450679, 'comment_body': ""I didn't know what the behavior of getTwistStamped would be if the node received Twist. Does it re-stamp the timestamp automagically? Right now, there is no made up timestamps. Either it has timestamp data, or it doesn't and you aren't allowed to use it."", 'comment_created': datetime.datetime(2023, 11, 13, 17, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1391480646, 'comment_body': ""Could throw?\r\n\r\nI'm not necessarily asking for a change, just a question to see if it would be sensible to make this similar the `OdomSmoother` or other subscriber-data objects which hold their data and get when requested. I suppose often the Twist Subscription clients are those that need event-based access to the twist data, not polling based, which would be a reasonable answer for why this method is necessary as well. So perhaps its just not sensible?"", 'comment_created': datetime.datetime(2023, 11, 13, 17, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1419835536, 'comment_body': ""> Could throw?\r\n> \r\n> I'm not necessarily asking for a change, just a question to see if it would be sensible to make this similar the `OdomSmoother` or other subscriber-data objects which hold their data and get when requested. I suppose often the Twist Subscription clients are those that need event-based access to the twist data, not polling based, which would be a reasonable answer for why this method is necessary as well. So perhaps its just not sensible?\r\n\r\nI think it could be sensible, but I worry that it is a bit potential higher impact (probability of bugs). Without sufficient test infrastructure to run the whole system tests with a general parameter override globally for the new param, I'm hesitant to introduce data-sharing modifications."", 'comment_created': datetime.datetime(2023, 12, 8, 1, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1419870195, 'comment_body': 'Using std::move on the command results in a failure to compile.  It was not clear why TwistStamped needs to be a unique pointer, so I just pass it by value into publish. ', 'comment_created': datetime.datetime(2023, 12, 8, 2, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1419890372, 'comment_body': ""Even for pass-by-reference? The new syntax doesn't appear to support a move from unique_ptr, but pass-by-reference should be just as efficient as the old method. If you want, I can try to get you the assembly. \r\n\r\nOtherwise, I'll need some help trying to use move on a unique_ptr with the publisher. "", 'comment_created': datetime.datetime(2023, 12, 8, 3, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1419904782, 'comment_body': ""Here's a reference I found that says the usage I switched to is also valid: \r\nhttps://github.com/ros2/rclcpp/pull/676#issuecomment-489381722\r\n\r\nWhat's not clear is why std::move is broken, unless the `rclcpp` maintainers changed the API again since that update.\r\n\r\n"", 'comment_created': datetime.datetime(2023, 12, 8, 4, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1420871553, 'comment_body': ""I don't know what you're talking about with new syntax. This is Rolling and we have every other publisher using `std::move` on a unique pointer. Please update all publications to use publish moved semantics unique pointers. See pretty much every other publisher in the stack for an example :laughing: "", 'comment_created': datetime.datetime(2023, 12, 8, 18, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420872328, 'comment_body': ""I don't care if its valid use of the API, it creates jitter for less reliable publication rates of data. Use unique pointers moved. That was a hard fought victory to get across the stack and this cannot be excluded. "", 'comment_created': datetime.datetime(2023, 12, 8, 18, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420872936, 'comment_body': 'This is still important before a merge. It should be as easy as adding this parameter to each of the configuration guide pages + the YAML at the bottom -- then writing up a short blurb in the migration guide about it', 'comment_created': datetime.datetime(2023, 12, 8, 18, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420878909, 'comment_body': 'Add a comment here about what this represents like the others', 'comment_created': datetime.datetime(2023, 12, 8, 18, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420889714, 'comment_body': ""Remove this line, that link is and/or will be dead. The GSOC pages aren't archived / kept live out of season"", 'comment_created': datetime.datetime(2023, 12, 8, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420891550, 'comment_body': 'You can remove the usage subsection in entirety ', 'comment_created': datetime.datetime(2023, 12, 8, 18, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420892681, 'comment_body': '`)` on line above, this looks like a strange auto-reformatting choice', 'comment_created': datetime.datetime(2023, 12, 8, 18, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420893155, 'comment_body': 'Line extension really needed?', 'comment_created': datetime.datetime(2023, 12, 8, 18, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420898420, 'comment_body': ""You lost me a bit with the 2 callbacks. I suppose previous-me reviewing this didn't catch the reason why I thought having the `getMsg()` functions might be nice. \r\n\r\nWhat do you do if there is a mismatch? Or what if there is no Stamped callback? It seems weird to force a user to define both when they only want to implement one or the other. \r\n\r\nThought 1: TwistStampedCallback has a default argument so that it doesn't need to be defined. Then we have a default twist stamped callback that just strips the stamp and calls the Twist callback so that a Twist user can subscribe to Twist/TwistStamped and get the same result. \r\n\r\nThought 2: Have a second constructor if TwistStamped is the **only** valid option, so that you don't have to define a bogus Twist callback that won't be used. Or, we could do a similar thing with default argument that results in a default callback for Twist that just throws an exception as unimplemented for that use-case. \r\n\r\nThe desire I have is not to have to define 2 callbacks, when I only need / want 1, and the other is bogus just to fit the API. There may be applications where both are acceptable, so having a constructor such as this makes sense -- but I think we should have the other options to specify one or the other alone (or even still the same constructor but default arguments so not required to implement)"", 'comment_created': datetime.datetime(2023, 12, 8, 18, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1435340194, 'comment_body': 'This server needs to publish out a TwistStamped, else this PR is essentially not valuable since the pipeline goes from the controller server -> collision monitor -> velocity smoother -> robot base / drone. The outputs of the velocity smoother + collision monitor also need to be twiststamped', 'comment_created': datetime.datetime(2023, 12, 22, 20, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1435340622, 'comment_body': 'I think that necessitates the inversion of the changes in this file. The TwistStamped should be the actual callback implementing the actual behavior (e.g. storing header to publish out). The un-stamped Cb should create a header to meet the API to go into the stamped callback to use the rest of the pipeline & publish back out unstamped ', 'comment_created': datetime.datetime(2023, 12, 22, 20, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1435341160, 'comment_body': ""Same with velocity smoother: the output here also needs to be stamped and probably changes the way that this should be handled.\r\n\r\nHere and in the velocity smoother: why not use the specific constructors for the specific stamped/unstamped parameter so we're not registering both cbs when unnecessary? "", 'comment_created': datetime.datetime(2023, 12, 22, 20, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1435436424, 'comment_body': ""I've implemented the support for the `Thought 2` with a second constructor."", 'comment_created': datetime.datetime(2023, 12, 23, 2, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435436678, 'comment_body': 'This is what ament_uncrustify wants. I just reran it. ', 'comment_created': datetime.datetime(2023, 12, 23, 2, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435438497, 'comment_body': ""Interesting. ament_uncrustify accepts code in either configuration as valid. Sorry, I'm used to clang-tidy which always results in the same output regardless of what the input code is.\r\n\r\nFixed! "", 'comment_created': datetime.datetime(2023, 12, 23, 2, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435438977, 'comment_body': 'e65fed5e66dac9f0cc264766c078b8b31332f1cd', 'comment_created': datetime.datetime(2023, 12, 23, 2, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435439060, 'comment_body': 'd074e000c6d6130d0ba6d35b8f19c0af685082ce', 'comment_created': datetime.datetime(2023, 12, 23, 2, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435439764, 'comment_body': 'Done in  b94181e0b8d6a393d49f3b8e56d8519e8e72c21b', 'comment_created': datetime.datetime(2023, 12, 23, 2, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435447809, 'comment_body': 'Done. I also switched it to a unique pointer instead of a shared pointer. \r\n6b110684405a58ed8a906acd1da7a3aef58af171', 'comment_created': datetime.datetime(2023, 12, 23, 2, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435483252, 'comment_body': ""Yep, good spot. I'll handle both with TwistSubscriber and TwistPublisher. I also modified the internal timestamping for the last command packet to use the incoming packet timestamp rather than node wall clock. "", 'comment_created': datetime.datetime(2023, 12, 23, 5, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435485135, 'comment_body': '50cc29245aafb83b29436de78060caec62170afb', 'comment_created': datetime.datetime(2023, 12, 23, 5, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435485490, 'comment_body': 'Done c9b4e9b271d0afdda09c7c9b307687dfcbb54dc6', 'comment_created': datetime.datetime(2023, 12, 23, 5, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1436743596, 'comment_body': 'CI is passing on this too. ', 'comment_created': datetime.datetime(2023, 12, 27, 4, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': 'ede0c73101e507f871e1e5c0734227ac7cf57daa', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2ec1a5fbe96b15bcf1d31f039866da19ebd7f59', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356640dc520f05dcebfeafcc3002d3645bb60c96', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e75f8652389d8d1e611c225fe342d614dc166a22', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdaf98eac158b0403e59382677546cd94289ce88', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce295c32019168f434c014cec97ecf30ba829b75', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c63d59780efe8ec43aaeadea88925f2363434e3', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbb1b2378d684ccc5352222c6bb5d5530b507253', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6119b89fe153a4b65b1666f2aaa690164f86673', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4c2ffbd3086bc0d3abdaedad8a5233fc4ab178d', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50a90ea500855b7fc8ab6025ad6ce63e0ebc92e9', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8ff35c98ed72dbf0ad1aba193b54a2438e9aaeb', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2c37febbe9b6ba503a1bf264ae405a02677f76', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5449cf0a7f4a35d0724e2e56278e36a9a2d8cdd9', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47b6e77756f6c7124805f66c5e657c130d717be3', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78b3018034359aa78f48f1e183920ad1d577dd4a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9306ce52700162df809ec1a62af591e3db187b22', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f349beeb4e8ec74ec1f3f75fa6a8fe8f075637a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f23c80373d696be5ea04bb46cc169d7566d8966', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef67626611a92b5ba9eed68721b5119968846b8a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22732b2c3a1df8081a16169b698cfadf58e9cd9c', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff36e3f35f5d5b76996c2dfbb9c30060a784576a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de9a695083052075377502263812790020b4b216', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00ba0821cc3578e962dd14a0670b2f503364e34a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd806e1c0bf1c90152f78c629ee1e97f92b263092', 'committer_username': 'SteveMacenski', 'committer_name': 'Steve Macenski', 'committer_email': 'stevenmacenski@gmail.com', 'commit_date': datetime.datetime(2015, 10, 2, 17, 6, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5895d338fb498c537c5061cb5462686a1f93ab8f', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e65fed5e66dac9f0cc264766c078b8b31332f1cd', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd074e000c6d6130d0ba6d35b8f19c0af685082ce', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b94181e0b8d6a393d49f3b8e56d8519e8e72c21b', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e70ab3fe475cae1076fb21f58803436d9326e8a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50cc29245aafb83b29436de78060caec62170afb', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9b4e9b271d0afdda09c7c9b307687dfcbb54dc6', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d3b6483a9da9d7f424619b0a9a575c7ea0e7b0', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fbf249d92b7816bdf4e958a1104127eacb09bf2', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ec28378e1c18f49bd7c4792f3bc4084d81ca7d', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Ryan,25047695,ryanfriedman5410+github@gmail.com,User,,105,,8,29
1490859314,Add TwistStamped support via TwistPublisher and TwistSubscriber,"## Basic Info

| Info | Please fill out this column |
| ------ | ----------- |
| Ticket(s) this addresses   | #1594  |
| Primary OS tested on | Ubuntu 22.04 |
| Robotic platform tested on | CI |

---

## Description of contribution in a few bullet points

* Add a new util class for publishing either Twist or TwistStamped called `TwistPublisher`
* Add a new util class for subscribing to either Twist or TwistStamped called `TwistSubscriber`
* Add a new parameter for selecting to stamp the twist data to each util
* Consume TwistPublisher in nav2_controller, among other nodes
* Consume TwistSubscriber in nav2_velocityy_smoother, among other nodes
* Implements the approach described [here](https://github.com/ros-planning/navigation2/issues/1594#issuecomment-1675262038): `But, I suppose we could make a velocity publisher wrapper in nav2_util that deals with that parameterization outside of the application code (and in a way we can remove the non-stamped support more gradually)`.


## Description of documentation updates required from your changes

* Would need to document the new optional parameter behavior in the normal docs on top of the README.


## Future work that may be required in bullet points

* Related PR's in gazebo, etc, to convert the ecosystem to TwistStamped

## Test Instructions

```bash
colcon test --packages-select nav2_util --event-handlers=console_cohesion+ --ctest-args "" -R"" "" test_twist""
```

Quick iteration
```bash
colcon build --packages-select nav2_util && colcon test --packages-select nav2_util --event-handlers=console_cohesion+ --ctest-args "" -R"" "" test_twist""
```

#### For Maintainers: <!-- DO NOT EDIT OR REMOVE -->
- [ ] Check that any new parameters added are updated in navigation.ros.org
- [ ] Check that any significant change is added to the migration guide
- [ ] Check that any new features **OR** changes to existing behaviors are reflected in the tuning guide
- [ ] Check that any new functions have Doxygen added
- [ ] Check that any new features have test coverage
- [ ] Check that any new plugins is added to the plugins page
- [ ] If BT Node, Additionally: add to BT's XML index of nodes for groot, BT package's readme table, and BT library lists
",False,3775,https://api.github.com/repos/ros-navigation/navigation2/pulls/3775,https://github.com/ros-navigation/navigation2/pull/3775,closed,696,117,25,35,29,48,0,0,[],2023-08-27 05:21:59+00:00,2024-01-04 00:36:25+00:00,11214866.0,"129 days, 19:14:26","[{'comment_id': 1306602450, 'comment_body': 'copy-pasta errror', 'comment_created': datetime.datetime(2023, 8, 27, 5, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1306602497, 'comment_body': 'remove', 'comment_created': datetime.datetime(2023, 8, 27, 5, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1307794506, 'comment_body': ""Remove assert, we don't do that in Nav2. You can check if nullptr but don't add `asserts`"", 'comment_created': datetime.datetime(2023, 8, 28, 18, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1307795249, 'comment_body': ""This doesn't need to be stored"", 'comment_created': datetime.datetime(2023, 8, 28, 19, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1307795721, 'comment_body': 'A non-stamped version that adds a stamp if `is_stamped_` is true? Basically the counter-implementation of this one\r\n', 'comment_created': datetime.datetime(2023, 8, 28, 19, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1307797798, 'comment_body': 'There are various reasons why storing the shared pointer creates problems ', 'comment_created': datetime.datetime(2023, 8, 28, 19, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1307920072, 'comment_body': ""Ah yea, it's only  used in the constructor. Good idea. Done"", 'comment_created': datetime.datetime(2023, 8, 28, 20, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1308959071, 'comment_body': 'I just removed it, was using it during testing.', 'comment_created': datetime.datetime(2023, 8, 29, 14, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1308960101, 'comment_body': ""I was thinking about this, and was planning to add it when it's needed, however it seems a lot of NAV2 internals are using the stamped version anyways. "", 'comment_created': datetime.datetime(2023, 8, 29, 14, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1309086008, 'comment_body': ""Oh ok, then I don't think its strictly necessary then.\r\n\r\nThe only thing I'd say in counter to that is that if others want to use this to stamp their twists (with a param/method arg for the base_frame) that could be a nice add on. But given your expertise / applications i think you're in the best position to tell me if that's even something desired. If not, feel free to ignore. "", 'comment_created': datetime.datetime(2023, 8, 29, 16, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1313415176, 'comment_body': 'Update ', 'comment_created': datetime.datetime(2023, 9, 1, 19, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1313418322, 'comment_body': 'This is insufficient. You need to have something that accepts that message to make sure the action is actually taken. Make a subscription and check that it was received / the values. \r\n\r\nAlso, Send it both stamped/unstamped and also make sure both are received and the non-stamped was properly stamped. And check that the subscription count is incremented with the subscriber is added. \r\n\r\nAlso a second test like this for `enable_stamped_cmd_vel = true` . \r\n\r\nBasically, cover the code, all the code :-)', 'comment_created': datetime.datetime(2023, 9, 1, 19, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1313913842, 'comment_body': 'Done in 169f7b3778d3198c8266ba7ec026ae5fc66a58bc', 'comment_created': datetime.datetime(2023, 9, 2, 17, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1313914250, 'comment_body': 'Done in 2bc7d9dd2fa0c1a43368927788ad6b2cd1e1f233.\r\n\r\nI added a subscriber, and cover both the default value of the param, as well as when the param is modified to enforce stamping. The subscription count is now tested, as well as the activation state and all the transitions.', 'comment_created': datetime.datetime(2023, 9, 2, 17, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1391306111, 'comment_body': 'Go back to the unique pointer + move. It removes jitter', 'comment_created': datetime.datetime(2023, 11, 13, 15, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1391306635, 'comment_body': 'Commented otu?', 'comment_created': datetime.datetime(2023, 11, 13, 15, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1391308583, 'comment_body': 'Config guide needs this for all nodes that use it to know about this option. Migration guide too ', 'comment_created': datetime.datetime(2023, 11, 13, 15, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1391312138, 'comment_body': 'Q: why not have a callback here and a `getTwist` & `getTwistStamped` member?', 'comment_created': datetime.datetime(2023, 11, 13, 15, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1391314129, 'comment_body': '^ and for all cases like this one', 'comment_created': datetime.datetime(2023, 11, 13, 15, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1391450679, 'comment_body': ""I didn't know what the behavior of getTwistStamped would be if the node received Twist. Does it re-stamp the timestamp automagically? Right now, there is no made up timestamps. Either it has timestamp data, or it doesn't and you aren't allowed to use it."", 'comment_created': datetime.datetime(2023, 11, 13, 17, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1391480646, 'comment_body': ""Could throw?\r\n\r\nI'm not necessarily asking for a change, just a question to see if it would be sensible to make this similar the `OdomSmoother` or other subscriber-data objects which hold their data and get when requested. I suppose often the Twist Subscription clients are those that need event-based access to the twist data, not polling based, which would be a reasonable answer for why this method is necessary as well. So perhaps its just not sensible?"", 'comment_created': datetime.datetime(2023, 11, 13, 17, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1419835536, 'comment_body': ""> Could throw?\r\n> \r\n> I'm not necessarily asking for a change, just a question to see if it would be sensible to make this similar the `OdomSmoother` or other subscriber-data objects which hold their data and get when requested. I suppose often the Twist Subscription clients are those that need event-based access to the twist data, not polling based, which would be a reasonable answer for why this method is necessary as well. So perhaps its just not sensible?\r\n\r\nI think it could be sensible, but I worry that it is a bit potential higher impact (probability of bugs). Without sufficient test infrastructure to run the whole system tests with a general parameter override globally for the new param, I'm hesitant to introduce data-sharing modifications."", 'comment_created': datetime.datetime(2023, 12, 8, 1, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1419870195, 'comment_body': 'Using std::move on the command results in a failure to compile.  It was not clear why TwistStamped needs to be a unique pointer, so I just pass it by value into publish. ', 'comment_created': datetime.datetime(2023, 12, 8, 2, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1419890372, 'comment_body': ""Even for pass-by-reference? The new syntax doesn't appear to support a move from unique_ptr, but pass-by-reference should be just as efficient as the old method. If you want, I can try to get you the assembly. \r\n\r\nOtherwise, I'll need some help trying to use move on a unique_ptr with the publisher. "", 'comment_created': datetime.datetime(2023, 12, 8, 3, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1419904782, 'comment_body': ""Here's a reference I found that says the usage I switched to is also valid: \r\nhttps://github.com/ros2/rclcpp/pull/676#issuecomment-489381722\r\n\r\nWhat's not clear is why std::move is broken, unless the `rclcpp` maintainers changed the API again since that update.\r\n\r\n"", 'comment_created': datetime.datetime(2023, 12, 8, 4, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1420871553, 'comment_body': ""I don't know what you're talking about with new syntax. This is Rolling and we have every other publisher using `std::move` on a unique pointer. Please update all publications to use publish moved semantics unique pointers. See pretty much every other publisher in the stack for an example :laughing: "", 'comment_created': datetime.datetime(2023, 12, 8, 18, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420872328, 'comment_body': ""I don't care if its valid use of the API, it creates jitter for less reliable publication rates of data. Use unique pointers moved. That was a hard fought victory to get across the stack and this cannot be excluded. "", 'comment_created': datetime.datetime(2023, 12, 8, 18, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420872936, 'comment_body': 'This is still important before a merge. It should be as easy as adding this parameter to each of the configuration guide pages + the YAML at the bottom -- then writing up a short blurb in the migration guide about it', 'comment_created': datetime.datetime(2023, 12, 8, 18, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420878909, 'comment_body': 'Add a comment here about what this represents like the others', 'comment_created': datetime.datetime(2023, 12, 8, 18, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420889714, 'comment_body': ""Remove this line, that link is and/or will be dead. The GSOC pages aren't archived / kept live out of season"", 'comment_created': datetime.datetime(2023, 12, 8, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420891550, 'comment_body': 'You can remove the usage subsection in entirety ', 'comment_created': datetime.datetime(2023, 12, 8, 18, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420892681, 'comment_body': '`)` on line above, this looks like a strange auto-reformatting choice', 'comment_created': datetime.datetime(2023, 12, 8, 18, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420893155, 'comment_body': 'Line extension really needed?', 'comment_created': datetime.datetime(2023, 12, 8, 18, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420898420, 'comment_body': ""You lost me a bit with the 2 callbacks. I suppose previous-me reviewing this didn't catch the reason why I thought having the `getMsg()` functions might be nice. \r\n\r\nWhat do you do if there is a mismatch? Or what if there is no Stamped callback? It seems weird to force a user to define both when they only want to implement one or the other. \r\n\r\nThought 1: TwistStampedCallback has a default argument so that it doesn't need to be defined. Then we have a default twist stamped callback that just strips the stamp and calls the Twist callback so that a Twist user can subscribe to Twist/TwistStamped and get the same result. \r\n\r\nThought 2: Have a second constructor if TwistStamped is the **only** valid option, so that you don't have to define a bogus Twist callback that won't be used. Or, we could do a similar thing with default argument that results in a default callback for Twist that just throws an exception as unimplemented for that use-case. \r\n\r\nThe desire I have is not to have to define 2 callbacks, when I only need / want 1, and the other is bogus just to fit the API. There may be applications where both are acceptable, so having a constructor such as this makes sense -- but I think we should have the other options to specify one or the other alone (or even still the same constructor but default arguments so not required to implement)"", 'comment_created': datetime.datetime(2023, 12, 8, 18, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1435340194, 'comment_body': 'This server needs to publish out a TwistStamped, else this PR is essentially not valuable since the pipeline goes from the controller server -> collision monitor -> velocity smoother -> robot base / drone. The outputs of the velocity smoother + collision monitor also need to be twiststamped', 'comment_created': datetime.datetime(2023, 12, 22, 20, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1435340622, 'comment_body': 'I think that necessitates the inversion of the changes in this file. The TwistStamped should be the actual callback implementing the actual behavior (e.g. storing header to publish out). The un-stamped Cb should create a header to meet the API to go into the stamped callback to use the rest of the pipeline & publish back out unstamped ', 'comment_created': datetime.datetime(2023, 12, 22, 20, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1435341160, 'comment_body': ""Same with velocity smoother: the output here also needs to be stamped and probably changes the way that this should be handled.\r\n\r\nHere and in the velocity smoother: why not use the specific constructors for the specific stamped/unstamped parameter so we're not registering both cbs when unnecessary? "", 'comment_created': datetime.datetime(2023, 12, 22, 20, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1435436424, 'comment_body': ""I've implemented the support for the `Thought 2` with a second constructor."", 'comment_created': datetime.datetime(2023, 12, 23, 2, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435436678, 'comment_body': 'This is what ament_uncrustify wants. I just reran it. ', 'comment_created': datetime.datetime(2023, 12, 23, 2, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435438497, 'comment_body': ""Interesting. ament_uncrustify accepts code in either configuration as valid. Sorry, I'm used to clang-tidy which always results in the same output regardless of what the input code is.\r\n\r\nFixed! "", 'comment_created': datetime.datetime(2023, 12, 23, 2, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435438977, 'comment_body': 'e65fed5e66dac9f0cc264766c078b8b31332f1cd', 'comment_created': datetime.datetime(2023, 12, 23, 2, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435439060, 'comment_body': 'd074e000c6d6130d0ba6d35b8f19c0af685082ce', 'comment_created': datetime.datetime(2023, 12, 23, 2, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435439764, 'comment_body': 'Done in  b94181e0b8d6a393d49f3b8e56d8519e8e72c21b', 'comment_created': datetime.datetime(2023, 12, 23, 2, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435447809, 'comment_body': 'Done. I also switched it to a unique pointer instead of a shared pointer. \r\n6b110684405a58ed8a906acd1da7a3aef58af171', 'comment_created': datetime.datetime(2023, 12, 23, 2, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435483252, 'comment_body': ""Yep, good spot. I'll handle both with TwistSubscriber and TwistPublisher. I also modified the internal timestamping for the last command packet to use the incoming packet timestamp rather than node wall clock. "", 'comment_created': datetime.datetime(2023, 12, 23, 5, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435485135, 'comment_body': '50cc29245aafb83b29436de78060caec62170afb', 'comment_created': datetime.datetime(2023, 12, 23, 5, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435485490, 'comment_body': 'Done c9b4e9b271d0afdda09c7c9b307687dfcbb54dc6', 'comment_created': datetime.datetime(2023, 12, 23, 5, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1436743596, 'comment_body': 'CI is passing on this too. ', 'comment_created': datetime.datetime(2023, 12, 27, 4, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': 'ede0c73101e507f871e1e5c0734227ac7cf57daa', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2ec1a5fbe96b15bcf1d31f039866da19ebd7f59', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356640dc520f05dcebfeafcc3002d3645bb60c96', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e75f8652389d8d1e611c225fe342d614dc166a22', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdaf98eac158b0403e59382677546cd94289ce88', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce295c32019168f434c014cec97ecf30ba829b75', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c63d59780efe8ec43aaeadea88925f2363434e3', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbb1b2378d684ccc5352222c6bb5d5530b507253', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6119b89fe153a4b65b1666f2aaa690164f86673', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4c2ffbd3086bc0d3abdaedad8a5233fc4ab178d', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50a90ea500855b7fc8ab6025ad6ce63e0ebc92e9', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8ff35c98ed72dbf0ad1aba193b54a2438e9aaeb', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2c37febbe9b6ba503a1bf264ae405a02677f76', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5449cf0a7f4a35d0724e2e56278e36a9a2d8cdd9', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47b6e77756f6c7124805f66c5e657c130d717be3', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78b3018034359aa78f48f1e183920ad1d577dd4a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9306ce52700162df809ec1a62af591e3db187b22', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f349beeb4e8ec74ec1f3f75fa6a8fe8f075637a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f23c80373d696be5ea04bb46cc169d7566d8966', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef67626611a92b5ba9eed68721b5119968846b8a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22732b2c3a1df8081a16169b698cfadf58e9cd9c', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff36e3f35f5d5b76996c2dfbb9c30060a784576a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de9a695083052075377502263812790020b4b216', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00ba0821cc3578e962dd14a0670b2f503364e34a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd806e1c0bf1c90152f78c629ee1e97f92b263092', 'committer_username': 'SteveMacenski', 'committer_name': 'Steve Macenski', 'committer_email': 'stevenmacenski@gmail.com', 'commit_date': datetime.datetime(2015, 10, 2, 17, 6, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5895d338fb498c537c5061cb5462686a1f93ab8f', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e65fed5e66dac9f0cc264766c078b8b31332f1cd', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd074e000c6d6130d0ba6d35b8f19c0af685082ce', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b94181e0b8d6a393d49f3b8e56d8519e8e72c21b', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e70ab3fe475cae1076fb21f58803436d9326e8a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50cc29245aafb83b29436de78060caec62170afb', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9b4e9b271d0afdda09c7c9b307687dfcbb54dc6', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d3b6483a9da9d7f424619b0a9a575c7ea0e7b0', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fbf249d92b7816bdf4e958a1104127eacb09bf2', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ec28378e1c18f49bd7c4792f3bc4084d81ca7d', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Ryan,25047695,ryanfriedman5410+github@gmail.com,User,,105,,8,29
1490859314,Add TwistStamped support via TwistPublisher and TwistSubscriber,"## Basic Info

| Info | Please fill out this column |
| ------ | ----------- |
| Ticket(s) this addresses   | #1594  |
| Primary OS tested on | Ubuntu 22.04 |
| Robotic platform tested on | CI |

---

## Description of contribution in a few bullet points

* Add a new util class for publishing either Twist or TwistStamped called `TwistPublisher`
* Add a new util class for subscribing to either Twist or TwistStamped called `TwistSubscriber`
* Add a new parameter for selecting to stamp the twist data to each util
* Consume TwistPublisher in nav2_controller, among other nodes
* Consume TwistSubscriber in nav2_velocityy_smoother, among other nodes
* Implements the approach described [here](https://github.com/ros-planning/navigation2/issues/1594#issuecomment-1675262038): `But, I suppose we could make a velocity publisher wrapper in nav2_util that deals with that parameterization outside of the application code (and in a way we can remove the non-stamped support more gradually)`.


## Description of documentation updates required from your changes

* Would need to document the new optional parameter behavior in the normal docs on top of the README.


## Future work that may be required in bullet points

* Related PR's in gazebo, etc, to convert the ecosystem to TwistStamped

## Test Instructions

```bash
colcon test --packages-select nav2_util --event-handlers=console_cohesion+ --ctest-args "" -R"" "" test_twist""
```

Quick iteration
```bash
colcon build --packages-select nav2_util && colcon test --packages-select nav2_util --event-handlers=console_cohesion+ --ctest-args "" -R"" "" test_twist""
```

#### For Maintainers: <!-- DO NOT EDIT OR REMOVE -->
- [ ] Check that any new parameters added are updated in navigation.ros.org
- [ ] Check that any significant change is added to the migration guide
- [ ] Check that any new features **OR** changes to existing behaviors are reflected in the tuning guide
- [ ] Check that any new functions have Doxygen added
- [ ] Check that any new features have test coverage
- [ ] Check that any new plugins is added to the plugins page
- [ ] If BT Node, Additionally: add to BT's XML index of nodes for groot, BT package's readme table, and BT library lists
",False,3775,https://api.github.com/repos/ros-navigation/navigation2/pulls/3775,https://github.com/ros-navigation/navigation2/pull/3775,closed,696,117,25,35,29,48,0,0,[],2023-08-27 05:21:59+00:00,2024-01-04 00:36:25+00:00,11214866.0,"129 days, 19:14:26","[{'comment_id': 1306602450, 'comment_body': 'copy-pasta errror', 'comment_created': datetime.datetime(2023, 8, 27, 5, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1306602497, 'comment_body': 'remove', 'comment_created': datetime.datetime(2023, 8, 27, 5, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1307794506, 'comment_body': ""Remove assert, we don't do that in Nav2. You can check if nullptr but don't add `asserts`"", 'comment_created': datetime.datetime(2023, 8, 28, 18, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1307795249, 'comment_body': ""This doesn't need to be stored"", 'comment_created': datetime.datetime(2023, 8, 28, 19, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1307795721, 'comment_body': 'A non-stamped version that adds a stamp if `is_stamped_` is true? Basically the counter-implementation of this one\r\n', 'comment_created': datetime.datetime(2023, 8, 28, 19, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1307797798, 'comment_body': 'There are various reasons why storing the shared pointer creates problems ', 'comment_created': datetime.datetime(2023, 8, 28, 19, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1307920072, 'comment_body': ""Ah yea, it's only  used in the constructor. Good idea. Done"", 'comment_created': datetime.datetime(2023, 8, 28, 20, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1308959071, 'comment_body': 'I just removed it, was using it during testing.', 'comment_created': datetime.datetime(2023, 8, 29, 14, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1308960101, 'comment_body': ""I was thinking about this, and was planning to add it when it's needed, however it seems a lot of NAV2 internals are using the stamped version anyways. "", 'comment_created': datetime.datetime(2023, 8, 29, 14, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1309086008, 'comment_body': ""Oh ok, then I don't think its strictly necessary then.\r\n\r\nThe only thing I'd say in counter to that is that if others want to use this to stamp their twists (with a param/method arg for the base_frame) that could be a nice add on. But given your expertise / applications i think you're in the best position to tell me if that's even something desired. If not, feel free to ignore. "", 'comment_created': datetime.datetime(2023, 8, 29, 16, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1313415176, 'comment_body': 'Update ', 'comment_created': datetime.datetime(2023, 9, 1, 19, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1313418322, 'comment_body': 'This is insufficient. You need to have something that accepts that message to make sure the action is actually taken. Make a subscription and check that it was received / the values. \r\n\r\nAlso, Send it both stamped/unstamped and also make sure both are received and the non-stamped was properly stamped. And check that the subscription count is incremented with the subscriber is added. \r\n\r\nAlso a second test like this for `enable_stamped_cmd_vel = true` . \r\n\r\nBasically, cover the code, all the code :-)', 'comment_created': datetime.datetime(2023, 9, 1, 19, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1313913842, 'comment_body': 'Done in 169f7b3778d3198c8266ba7ec026ae5fc66a58bc', 'comment_created': datetime.datetime(2023, 9, 2, 17, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1313914250, 'comment_body': 'Done in 2bc7d9dd2fa0c1a43368927788ad6b2cd1e1f233.\r\n\r\nI added a subscriber, and cover both the default value of the param, as well as when the param is modified to enforce stamping. The subscription count is now tested, as well as the activation state and all the transitions.', 'comment_created': datetime.datetime(2023, 9, 2, 17, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1391306111, 'comment_body': 'Go back to the unique pointer + move. It removes jitter', 'comment_created': datetime.datetime(2023, 11, 13, 15, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1391306635, 'comment_body': 'Commented otu?', 'comment_created': datetime.datetime(2023, 11, 13, 15, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1391308583, 'comment_body': 'Config guide needs this for all nodes that use it to know about this option. Migration guide too ', 'comment_created': datetime.datetime(2023, 11, 13, 15, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1391312138, 'comment_body': 'Q: why not have a callback here and a `getTwist` & `getTwistStamped` member?', 'comment_created': datetime.datetime(2023, 11, 13, 15, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1391314129, 'comment_body': '^ and for all cases like this one', 'comment_created': datetime.datetime(2023, 11, 13, 15, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1391450679, 'comment_body': ""I didn't know what the behavior of getTwistStamped would be if the node received Twist. Does it re-stamp the timestamp automagically? Right now, there is no made up timestamps. Either it has timestamp data, or it doesn't and you aren't allowed to use it."", 'comment_created': datetime.datetime(2023, 11, 13, 17, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1391480646, 'comment_body': ""Could throw?\r\n\r\nI'm not necessarily asking for a change, just a question to see if it would be sensible to make this similar the `OdomSmoother` or other subscriber-data objects which hold their data and get when requested. I suppose often the Twist Subscription clients are those that need event-based access to the twist data, not polling based, which would be a reasonable answer for why this method is necessary as well. So perhaps its just not sensible?"", 'comment_created': datetime.datetime(2023, 11, 13, 17, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1419835536, 'comment_body': ""> Could throw?\r\n> \r\n> I'm not necessarily asking for a change, just a question to see if it would be sensible to make this similar the `OdomSmoother` or other subscriber-data objects which hold their data and get when requested. I suppose often the Twist Subscription clients are those that need event-based access to the twist data, not polling based, which would be a reasonable answer for why this method is necessary as well. So perhaps its just not sensible?\r\n\r\nI think it could be sensible, but I worry that it is a bit potential higher impact (probability of bugs). Without sufficient test infrastructure to run the whole system tests with a general parameter override globally for the new param, I'm hesitant to introduce data-sharing modifications."", 'comment_created': datetime.datetime(2023, 12, 8, 1, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1419870195, 'comment_body': 'Using std::move on the command results in a failure to compile.  It was not clear why TwistStamped needs to be a unique pointer, so I just pass it by value into publish. ', 'comment_created': datetime.datetime(2023, 12, 8, 2, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1419890372, 'comment_body': ""Even for pass-by-reference? The new syntax doesn't appear to support a move from unique_ptr, but pass-by-reference should be just as efficient as the old method. If you want, I can try to get you the assembly. \r\n\r\nOtherwise, I'll need some help trying to use move on a unique_ptr with the publisher. "", 'comment_created': datetime.datetime(2023, 12, 8, 3, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1419904782, 'comment_body': ""Here's a reference I found that says the usage I switched to is also valid: \r\nhttps://github.com/ros2/rclcpp/pull/676#issuecomment-489381722\r\n\r\nWhat's not clear is why std::move is broken, unless the `rclcpp` maintainers changed the API again since that update.\r\n\r\n"", 'comment_created': datetime.datetime(2023, 12, 8, 4, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1420871553, 'comment_body': ""I don't know what you're talking about with new syntax. This is Rolling and we have every other publisher using `std::move` on a unique pointer. Please update all publications to use publish moved semantics unique pointers. See pretty much every other publisher in the stack for an example :laughing: "", 'comment_created': datetime.datetime(2023, 12, 8, 18, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420872328, 'comment_body': ""I don't care if its valid use of the API, it creates jitter for less reliable publication rates of data. Use unique pointers moved. That was a hard fought victory to get across the stack and this cannot be excluded. "", 'comment_created': datetime.datetime(2023, 12, 8, 18, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420872936, 'comment_body': 'This is still important before a merge. It should be as easy as adding this parameter to each of the configuration guide pages + the YAML at the bottom -- then writing up a short blurb in the migration guide about it', 'comment_created': datetime.datetime(2023, 12, 8, 18, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420878909, 'comment_body': 'Add a comment here about what this represents like the others', 'comment_created': datetime.datetime(2023, 12, 8, 18, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420889714, 'comment_body': ""Remove this line, that link is and/or will be dead. The GSOC pages aren't archived / kept live out of season"", 'comment_created': datetime.datetime(2023, 12, 8, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420891550, 'comment_body': 'You can remove the usage subsection in entirety ', 'comment_created': datetime.datetime(2023, 12, 8, 18, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420892681, 'comment_body': '`)` on line above, this looks like a strange auto-reformatting choice', 'comment_created': datetime.datetime(2023, 12, 8, 18, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420893155, 'comment_body': 'Line extension really needed?', 'comment_created': datetime.datetime(2023, 12, 8, 18, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1420898420, 'comment_body': ""You lost me a bit with the 2 callbacks. I suppose previous-me reviewing this didn't catch the reason why I thought having the `getMsg()` functions might be nice. \r\n\r\nWhat do you do if there is a mismatch? Or what if there is no Stamped callback? It seems weird to force a user to define both when they only want to implement one or the other. \r\n\r\nThought 1: TwistStampedCallback has a default argument so that it doesn't need to be defined. Then we have a default twist stamped callback that just strips the stamp and calls the Twist callback so that a Twist user can subscribe to Twist/TwistStamped and get the same result. \r\n\r\nThought 2: Have a second constructor if TwistStamped is the **only** valid option, so that you don't have to define a bogus Twist callback that won't be used. Or, we could do a similar thing with default argument that results in a default callback for Twist that just throws an exception as unimplemented for that use-case. \r\n\r\nThe desire I have is not to have to define 2 callbacks, when I only need / want 1, and the other is bogus just to fit the API. There may be applications where both are acceptable, so having a constructor such as this makes sense -- but I think we should have the other options to specify one or the other alone (or even still the same constructor but default arguments so not required to implement)"", 'comment_created': datetime.datetime(2023, 12, 8, 18, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1435340194, 'comment_body': 'This server needs to publish out a TwistStamped, else this PR is essentially not valuable since the pipeline goes from the controller server -> collision monitor -> velocity smoother -> robot base / drone. The outputs of the velocity smoother + collision monitor also need to be twiststamped', 'comment_created': datetime.datetime(2023, 12, 22, 20, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1435340622, 'comment_body': 'I think that necessitates the inversion of the changes in this file. The TwistStamped should be the actual callback implementing the actual behavior (e.g. storing header to publish out). The un-stamped Cb should create a header to meet the API to go into the stamped callback to use the rest of the pipeline & publish back out unstamped ', 'comment_created': datetime.datetime(2023, 12, 22, 20, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1435341160, 'comment_body': ""Same with velocity smoother: the output here also needs to be stamped and probably changes the way that this should be handled.\r\n\r\nHere and in the velocity smoother: why not use the specific constructors for the specific stamped/unstamped parameter so we're not registering both cbs when unnecessary? "", 'comment_created': datetime.datetime(2023, 12, 22, 20, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SteveMacenski', 'type': 'User'}, {'comment_id': 1435436424, 'comment_body': ""I've implemented the support for the `Thought 2` with a second constructor."", 'comment_created': datetime.datetime(2023, 12, 23, 2, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435436678, 'comment_body': 'This is what ament_uncrustify wants. I just reran it. ', 'comment_created': datetime.datetime(2023, 12, 23, 2, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435438497, 'comment_body': ""Interesting. ament_uncrustify accepts code in either configuration as valid. Sorry, I'm used to clang-tidy which always results in the same output regardless of what the input code is.\r\n\r\nFixed! "", 'comment_created': datetime.datetime(2023, 12, 23, 2, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435438977, 'comment_body': 'e65fed5e66dac9f0cc264766c078b8b31332f1cd', 'comment_created': datetime.datetime(2023, 12, 23, 2, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435439060, 'comment_body': 'd074e000c6d6130d0ba6d35b8f19c0af685082ce', 'comment_created': datetime.datetime(2023, 12, 23, 2, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435439764, 'comment_body': 'Done in  b94181e0b8d6a393d49f3b8e56d8519e8e72c21b', 'comment_created': datetime.datetime(2023, 12, 23, 2, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435447809, 'comment_body': 'Done. I also switched it to a unique pointer instead of a shared pointer. \r\n6b110684405a58ed8a906acd1da7a3aef58af171', 'comment_created': datetime.datetime(2023, 12, 23, 2, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435483252, 'comment_body': ""Yep, good spot. I'll handle both with TwistSubscriber and TwistPublisher. I also modified the internal timestamping for the last command packet to use the incoming packet timestamp rather than node wall clock. "", 'comment_created': datetime.datetime(2023, 12, 23, 5, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435485135, 'comment_body': '50cc29245aafb83b29436de78060caec62170afb', 'comment_created': datetime.datetime(2023, 12, 23, 5, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1435485490, 'comment_body': 'Done c9b4e9b271d0afdda09c7c9b307687dfcbb54dc6', 'comment_created': datetime.datetime(2023, 12, 23, 5, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1436743596, 'comment_body': 'CI is passing on this too. ', 'comment_created': datetime.datetime(2023, 12, 27, 4, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': 'ede0c73101e507f871e1e5c0734227ac7cf57daa', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2ec1a5fbe96b15bcf1d31f039866da19ebd7f59', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356640dc520f05dcebfeafcc3002d3645bb60c96', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e75f8652389d8d1e611c225fe342d614dc166a22', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdaf98eac158b0403e59382677546cd94289ce88', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce295c32019168f434c014cec97ecf30ba829b75', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c63d59780efe8ec43aaeadea88925f2363434e3', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbb1b2378d684ccc5352222c6bb5d5530b507253', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6119b89fe153a4b65b1666f2aaa690164f86673', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4c2ffbd3086bc0d3abdaedad8a5233fc4ab178d', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50a90ea500855b7fc8ab6025ad6ce63e0ebc92e9', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8ff35c98ed72dbf0ad1aba193b54a2438e9aaeb', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2c37febbe9b6ba503a1bf264ae405a02677f76', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5449cf0a7f4a35d0724e2e56278e36a9a2d8cdd9', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47b6e77756f6c7124805f66c5e657c130d717be3', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78b3018034359aa78f48f1e183920ad1d577dd4a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9306ce52700162df809ec1a62af591e3db187b22', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f349beeb4e8ec74ec1f3f75fa6a8fe8f075637a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f23c80373d696be5ea04bb46cc169d7566d8966', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef67626611a92b5ba9eed68721b5119968846b8a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22732b2c3a1df8081a16169b698cfadf58e9cd9c', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff36e3f35f5d5b76996c2dfbb9c30060a784576a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de9a695083052075377502263812790020b4b216', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00ba0821cc3578e962dd14a0670b2f503364e34a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd806e1c0bf1c90152f78c629ee1e97f92b263092', 'committer_username': 'SteveMacenski', 'committer_name': 'Steve Macenski', 'committer_email': 'stevenmacenski@gmail.com', 'commit_date': datetime.datetime(2015, 10, 2, 17, 6, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5895d338fb498c537c5061cb5462686a1f93ab8f', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e65fed5e66dac9f0cc264766c078b8b31332f1cd', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd074e000c6d6130d0ba6d35b8f19c0af685082ce', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b94181e0b8d6a393d49f3b8e56d8519e8e72c21b', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e70ab3fe475cae1076fb21f58803436d9326e8a', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50cc29245aafb83b29436de78060caec62170afb', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9b4e9b271d0afdda09c7c9b307687dfcbb54dc6', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d3b6483a9da9d7f424619b0a9a575c7ea0e7b0', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fbf249d92b7816bdf4e958a1104127eacb09bf2', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ec28378e1c18f49bd7c4792f3bc4084d81ca7d', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Ryan,25047695,ryanfriedman5410+github@gmail.com,User,,105,,8,29
1485355925,WIP: Add integration with nav2,"The purpose of this PR is to integrate the `navigation2` stack with Ardupilot and Cartographer.

Solves https://github.com/ArduPilot/ardupilot_gz/issues/5",True,11,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/11,https://github.com/ArduPilot/ardupilot_ros/pull/11,closed,782,200,13,6,14,16,1,1,[{'name': 'ros2'}],2023-08-22 20:04:48+00:00,2024-07-22 07:56:22+00:00,28900294.0,"334 days, 11:51:34","[{'comment_id': 1310498295, 'comment_body': 'The cause of the Issue was this: https://github.com/cartographer-project/cartographer/issues/1498\r\nChanging the `lethal_cost_threshold` parameter in the `nav2` configuration worked as a workaround. \r\nAttempts to patch this in `cartographer` have been made in the past and were ignored, as the project is no longer active\r\n\r\n![costmap example](https://github.com/ArduPilot/ardupilot_ros/assets/62964137/b39678ab-ce61-415c-9e3d-2affe4c9eece)\r\n', 'comment_created': datetime.datetime(2023, 8, 30, 15, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1310559899, 'comment_body': '```suggestion\r\nTakeoff the Copter using `mavproxy` to an altitude of 2.5m:\r\n```', 'comment_created': datetime.datetime(2023, 8, 30, 16, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310563413, 'comment_body': 'Do we want spin behavior on a copter when it has full XY control? ', 'comment_created': datetime.datetime(2023, 8, 30, 16, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310563977, 'comment_body': ""I think we can remove this because Copter won't have docking support in any realistic timeline. "", 'comment_created': datetime.datetime(2023, 8, 30, 16, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565114, 'comment_body': 'For all the use_sim_time, can you add a[ yaml alias](https://www.educative.io/blog/advanced-yaml-syntax-cheatsheet) instead of copying the same value over and over. It seems like they are always True.', 'comment_created': datetime.datetime(2023, 8, 30, 16, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565587, 'comment_body': 'Why are X and Y assymetic?', 'comment_created': datetime.datetime(2023, 8, 30, 16, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565896, 'comment_body': 'Feel free to remove commented code.', 'comment_created': datetime.datetime(2023, 8, 30, 16, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310566395, 'comment_body': 'Is this still needed on Copter?', 'comment_created': datetime.datetime(2023, 8, 30, 16, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310567732, 'comment_body': 'I am good with this patch. It should be easy enough to substitute for an alternative SLAM implementation in the future. ', 'comment_created': datetime.datetime(2023, 8, 30, 16, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310574494, 'comment_body': ""Since we get feedback on velocity from AP's AHRS, could we close the loop? "", 'comment_created': datetime.datetime(2023, 8, 30, 16, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310575113, 'comment_body': 'If we could use pathlib everywhere that would be super', 'comment_created': datetime.datetime(2023, 8, 30, 16, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1313684367, 'comment_body': 'Removed them, these parameters were not being used', 'comment_created': datetime.datetime(2023, 9, 2, 1, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313684501, 'comment_body': 'Nope, removed it', 'comment_created': datetime.datetime(2023, 9, 2, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313684794, 'comment_body': 'We would need to add an `/ap/odom` topic with odometry messages. \r\n\r\nWe can discuss it in the future, but it is not in the scope of this initial PR', 'comment_created': datetime.datetime(2023, 9, 2, 1, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313691455, 'comment_body': 'Not mandatory spin behavior, as in always using x speed and having to spin to align the copter with the goal.\r\n \r\nBut the `Nav2 Goal` tool in `rviz` lets the user choose the final heading of the copter, so we should allow it to follow the goal message', 'comment_created': datetime.datetime(2023, 9, 2, 2, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313726513, 'comment_body': 'Ah ok, for later.', 'comment_created': datetime.datetime(2023, 9, 2, 5, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '586777d37cfc6cf9d04d9d78dc2a5fd92cca08b4', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46ee338d614c27756bbc87466fed4bae4e05ae5', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fdb69902acbf3eca46b797f28c52dda494589d1', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba418b7c32d58ac1d463fa3102b40277a3049c7', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39edd89d816167dd3f0819d7e9ada66b84c41db3', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf211d7948fcc852e8cbb5bf7b00458e98a36ac', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1485355925,WIP: Add integration with nav2,"The purpose of this PR is to integrate the `navigation2` stack with Ardupilot and Cartographer.

Solves https://github.com/ArduPilot/ardupilot_gz/issues/5",True,11,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/11,https://github.com/ArduPilot/ardupilot_ros/pull/11,closed,782,200,13,6,14,16,1,1,[{'name': 'ros2'}],2023-08-22 20:04:48+00:00,2024-07-22 07:56:22+00:00,28900294.0,"334 days, 11:51:34","[{'comment_id': 1310498295, 'comment_body': 'The cause of the Issue was this: https://github.com/cartographer-project/cartographer/issues/1498\r\nChanging the `lethal_cost_threshold` parameter in the `nav2` configuration worked as a workaround. \r\nAttempts to patch this in `cartographer` have been made in the past and were ignored, as the project is no longer active\r\n\r\n![costmap example](https://github.com/ArduPilot/ardupilot_ros/assets/62964137/b39678ab-ce61-415c-9e3d-2affe4c9eece)\r\n', 'comment_created': datetime.datetime(2023, 8, 30, 15, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1310559899, 'comment_body': '```suggestion\r\nTakeoff the Copter using `mavproxy` to an altitude of 2.5m:\r\n```', 'comment_created': datetime.datetime(2023, 8, 30, 16, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310563413, 'comment_body': 'Do we want spin behavior on a copter when it has full XY control? ', 'comment_created': datetime.datetime(2023, 8, 30, 16, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310563977, 'comment_body': ""I think we can remove this because Copter won't have docking support in any realistic timeline. "", 'comment_created': datetime.datetime(2023, 8, 30, 16, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565114, 'comment_body': 'For all the use_sim_time, can you add a[ yaml alias](https://www.educative.io/blog/advanced-yaml-syntax-cheatsheet) instead of copying the same value over and over. It seems like they are always True.', 'comment_created': datetime.datetime(2023, 8, 30, 16, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565587, 'comment_body': 'Why are X and Y assymetic?', 'comment_created': datetime.datetime(2023, 8, 30, 16, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565896, 'comment_body': 'Feel free to remove commented code.', 'comment_created': datetime.datetime(2023, 8, 30, 16, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310566395, 'comment_body': 'Is this still needed on Copter?', 'comment_created': datetime.datetime(2023, 8, 30, 16, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310567732, 'comment_body': 'I am good with this patch. It should be easy enough to substitute for an alternative SLAM implementation in the future. ', 'comment_created': datetime.datetime(2023, 8, 30, 16, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310574494, 'comment_body': ""Since we get feedback on velocity from AP's AHRS, could we close the loop? "", 'comment_created': datetime.datetime(2023, 8, 30, 16, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310575113, 'comment_body': 'If we could use pathlib everywhere that would be super', 'comment_created': datetime.datetime(2023, 8, 30, 16, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1313684367, 'comment_body': 'Removed them, these parameters were not being used', 'comment_created': datetime.datetime(2023, 9, 2, 1, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313684501, 'comment_body': 'Nope, removed it', 'comment_created': datetime.datetime(2023, 9, 2, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313684794, 'comment_body': 'We would need to add an `/ap/odom` topic with odometry messages. \r\n\r\nWe can discuss it in the future, but it is not in the scope of this initial PR', 'comment_created': datetime.datetime(2023, 9, 2, 1, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313691455, 'comment_body': 'Not mandatory spin behavior, as in always using x speed and having to spin to align the copter with the goal.\r\n \r\nBut the `Nav2 Goal` tool in `rviz` lets the user choose the final heading of the copter, so we should allow it to follow the goal message', 'comment_created': datetime.datetime(2023, 9, 2, 2, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313726513, 'comment_body': 'Ah ok, for later.', 'comment_created': datetime.datetime(2023, 9, 2, 5, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '586777d37cfc6cf9d04d9d78dc2a5fd92cca08b4', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46ee338d614c27756bbc87466fed4bae4e05ae5', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fdb69902acbf3eca46b797f28c52dda494589d1', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba418b7c32d58ac1d463fa3102b40277a3049c7', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39edd89d816167dd3f0819d7e9ada66b84c41db3', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf211d7948fcc852e8cbb5bf7b00458e98a36ac', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1485355925,WIP: Add integration with nav2,"The purpose of this PR is to integrate the `navigation2` stack with Ardupilot and Cartographer.

Solves https://github.com/ArduPilot/ardupilot_gz/issues/5",True,11,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/11,https://github.com/ArduPilot/ardupilot_ros/pull/11,closed,782,200,13,6,14,16,1,1,[{'name': 'ros2'}],2023-08-22 20:04:48+00:00,2024-07-22 07:56:22+00:00,28900294.0,"334 days, 11:51:34","[{'comment_id': 1310498295, 'comment_body': 'The cause of the Issue was this: https://github.com/cartographer-project/cartographer/issues/1498\r\nChanging the `lethal_cost_threshold` parameter in the `nav2` configuration worked as a workaround. \r\nAttempts to patch this in `cartographer` have been made in the past and were ignored, as the project is no longer active\r\n\r\n![costmap example](https://github.com/ArduPilot/ardupilot_ros/assets/62964137/b39678ab-ce61-415c-9e3d-2affe4c9eece)\r\n', 'comment_created': datetime.datetime(2023, 8, 30, 15, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1310559899, 'comment_body': '```suggestion\r\nTakeoff the Copter using `mavproxy` to an altitude of 2.5m:\r\n```', 'comment_created': datetime.datetime(2023, 8, 30, 16, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310563413, 'comment_body': 'Do we want spin behavior on a copter when it has full XY control? ', 'comment_created': datetime.datetime(2023, 8, 30, 16, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310563977, 'comment_body': ""I think we can remove this because Copter won't have docking support in any realistic timeline. "", 'comment_created': datetime.datetime(2023, 8, 30, 16, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565114, 'comment_body': 'For all the use_sim_time, can you add a[ yaml alias](https://www.educative.io/blog/advanced-yaml-syntax-cheatsheet) instead of copying the same value over and over. It seems like they are always True.', 'comment_created': datetime.datetime(2023, 8, 30, 16, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565587, 'comment_body': 'Why are X and Y assymetic?', 'comment_created': datetime.datetime(2023, 8, 30, 16, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565896, 'comment_body': 'Feel free to remove commented code.', 'comment_created': datetime.datetime(2023, 8, 30, 16, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310566395, 'comment_body': 'Is this still needed on Copter?', 'comment_created': datetime.datetime(2023, 8, 30, 16, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310567732, 'comment_body': 'I am good with this patch. It should be easy enough to substitute for an alternative SLAM implementation in the future. ', 'comment_created': datetime.datetime(2023, 8, 30, 16, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310574494, 'comment_body': ""Since we get feedback on velocity from AP's AHRS, could we close the loop? "", 'comment_created': datetime.datetime(2023, 8, 30, 16, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310575113, 'comment_body': 'If we could use pathlib everywhere that would be super', 'comment_created': datetime.datetime(2023, 8, 30, 16, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1313684367, 'comment_body': 'Removed them, these parameters were not being used', 'comment_created': datetime.datetime(2023, 9, 2, 1, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313684501, 'comment_body': 'Nope, removed it', 'comment_created': datetime.datetime(2023, 9, 2, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313684794, 'comment_body': 'We would need to add an `/ap/odom` topic with odometry messages. \r\n\r\nWe can discuss it in the future, but it is not in the scope of this initial PR', 'comment_created': datetime.datetime(2023, 9, 2, 1, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313691455, 'comment_body': 'Not mandatory spin behavior, as in always using x speed and having to spin to align the copter with the goal.\r\n \r\nBut the `Nav2 Goal` tool in `rviz` lets the user choose the final heading of the copter, so we should allow it to follow the goal message', 'comment_created': datetime.datetime(2023, 9, 2, 2, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313726513, 'comment_body': 'Ah ok, for later.', 'comment_created': datetime.datetime(2023, 9, 2, 5, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '586777d37cfc6cf9d04d9d78dc2a5fd92cca08b4', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46ee338d614c27756bbc87466fed4bae4e05ae5', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fdb69902acbf3eca46b797f28c52dda494589d1', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba418b7c32d58ac1d463fa3102b40277a3049c7', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39edd89d816167dd3f0819d7e9ada66b84c41db3', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf211d7948fcc852e8cbb5bf7b00458e98a36ac', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1485355925,WIP: Add integration with nav2,"The purpose of this PR is to integrate the `navigation2` stack with Ardupilot and Cartographer.

Solves https://github.com/ArduPilot/ardupilot_gz/issues/5",True,11,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/11,https://github.com/ArduPilot/ardupilot_ros/pull/11,closed,782,200,13,6,14,16,1,1,[{'name': 'ros2'}],2023-08-22 20:04:48+00:00,2024-07-22 07:56:22+00:00,28900294.0,"334 days, 11:51:34","[{'comment_id': 1310498295, 'comment_body': 'The cause of the Issue was this: https://github.com/cartographer-project/cartographer/issues/1498\r\nChanging the `lethal_cost_threshold` parameter in the `nav2` configuration worked as a workaround. \r\nAttempts to patch this in `cartographer` have been made in the past and were ignored, as the project is no longer active\r\n\r\n![costmap example](https://github.com/ArduPilot/ardupilot_ros/assets/62964137/b39678ab-ce61-415c-9e3d-2affe4c9eece)\r\n', 'comment_created': datetime.datetime(2023, 8, 30, 15, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1310559899, 'comment_body': '```suggestion\r\nTakeoff the Copter using `mavproxy` to an altitude of 2.5m:\r\n```', 'comment_created': datetime.datetime(2023, 8, 30, 16, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310563413, 'comment_body': 'Do we want spin behavior on a copter when it has full XY control? ', 'comment_created': datetime.datetime(2023, 8, 30, 16, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310563977, 'comment_body': ""I think we can remove this because Copter won't have docking support in any realistic timeline. "", 'comment_created': datetime.datetime(2023, 8, 30, 16, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565114, 'comment_body': 'For all the use_sim_time, can you add a[ yaml alias](https://www.educative.io/blog/advanced-yaml-syntax-cheatsheet) instead of copying the same value over and over. It seems like they are always True.', 'comment_created': datetime.datetime(2023, 8, 30, 16, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565587, 'comment_body': 'Why are X and Y assymetic?', 'comment_created': datetime.datetime(2023, 8, 30, 16, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565896, 'comment_body': 'Feel free to remove commented code.', 'comment_created': datetime.datetime(2023, 8, 30, 16, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310566395, 'comment_body': 'Is this still needed on Copter?', 'comment_created': datetime.datetime(2023, 8, 30, 16, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310567732, 'comment_body': 'I am good with this patch. It should be easy enough to substitute for an alternative SLAM implementation in the future. ', 'comment_created': datetime.datetime(2023, 8, 30, 16, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310574494, 'comment_body': ""Since we get feedback on velocity from AP's AHRS, could we close the loop? "", 'comment_created': datetime.datetime(2023, 8, 30, 16, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310575113, 'comment_body': 'If we could use pathlib everywhere that would be super', 'comment_created': datetime.datetime(2023, 8, 30, 16, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1313684367, 'comment_body': 'Removed them, these parameters were not being used', 'comment_created': datetime.datetime(2023, 9, 2, 1, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313684501, 'comment_body': 'Nope, removed it', 'comment_created': datetime.datetime(2023, 9, 2, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313684794, 'comment_body': 'We would need to add an `/ap/odom` topic with odometry messages. \r\n\r\nWe can discuss it in the future, but it is not in the scope of this initial PR', 'comment_created': datetime.datetime(2023, 9, 2, 1, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313691455, 'comment_body': 'Not mandatory spin behavior, as in always using x speed and having to spin to align the copter with the goal.\r\n \r\nBut the `Nav2 Goal` tool in `rviz` lets the user choose the final heading of the copter, so we should allow it to follow the goal message', 'comment_created': datetime.datetime(2023, 9, 2, 2, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313726513, 'comment_body': 'Ah ok, for later.', 'comment_created': datetime.datetime(2023, 9, 2, 5, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '586777d37cfc6cf9d04d9d78dc2a5fd92cca08b4', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46ee338d614c27756bbc87466fed4bae4e05ae5', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fdb69902acbf3eca46b797f28c52dda494589d1', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba418b7c32d58ac1d463fa3102b40277a3049c7', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39edd89d816167dd3f0819d7e9ada66b84c41db3', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf211d7948fcc852e8cbb5bf7b00458e98a36ac', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1485355925,WIP: Add integration with nav2,"The purpose of this PR is to integrate the `navigation2` stack with Ardupilot and Cartographer.

Solves https://github.com/ArduPilot/ardupilot_gz/issues/5",True,11,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/11,https://github.com/ArduPilot/ardupilot_ros/pull/11,closed,782,200,13,6,14,16,1,1,[{'name': 'ros2'}],2023-08-22 20:04:48+00:00,2024-07-22 07:56:22+00:00,28900294.0,"334 days, 11:51:34","[{'comment_id': 1310498295, 'comment_body': 'The cause of the Issue was this: https://github.com/cartographer-project/cartographer/issues/1498\r\nChanging the `lethal_cost_threshold` parameter in the `nav2` configuration worked as a workaround. \r\nAttempts to patch this in `cartographer` have been made in the past and were ignored, as the project is no longer active\r\n\r\n![costmap example](https://github.com/ArduPilot/ardupilot_ros/assets/62964137/b39678ab-ce61-415c-9e3d-2affe4c9eece)\r\n', 'comment_created': datetime.datetime(2023, 8, 30, 15, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1310559899, 'comment_body': '```suggestion\r\nTakeoff the Copter using `mavproxy` to an altitude of 2.5m:\r\n```', 'comment_created': datetime.datetime(2023, 8, 30, 16, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310563413, 'comment_body': 'Do we want spin behavior on a copter when it has full XY control? ', 'comment_created': datetime.datetime(2023, 8, 30, 16, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310563977, 'comment_body': ""I think we can remove this because Copter won't have docking support in any realistic timeline. "", 'comment_created': datetime.datetime(2023, 8, 30, 16, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565114, 'comment_body': 'For all the use_sim_time, can you add a[ yaml alias](https://www.educative.io/blog/advanced-yaml-syntax-cheatsheet) instead of copying the same value over and over. It seems like they are always True.', 'comment_created': datetime.datetime(2023, 8, 30, 16, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565587, 'comment_body': 'Why are X and Y assymetic?', 'comment_created': datetime.datetime(2023, 8, 30, 16, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565896, 'comment_body': 'Feel free to remove commented code.', 'comment_created': datetime.datetime(2023, 8, 30, 16, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310566395, 'comment_body': 'Is this still needed on Copter?', 'comment_created': datetime.datetime(2023, 8, 30, 16, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310567732, 'comment_body': 'I am good with this patch. It should be easy enough to substitute for an alternative SLAM implementation in the future. ', 'comment_created': datetime.datetime(2023, 8, 30, 16, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310574494, 'comment_body': ""Since we get feedback on velocity from AP's AHRS, could we close the loop? "", 'comment_created': datetime.datetime(2023, 8, 30, 16, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310575113, 'comment_body': 'If we could use pathlib everywhere that would be super', 'comment_created': datetime.datetime(2023, 8, 30, 16, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1313684367, 'comment_body': 'Removed them, these parameters were not being used', 'comment_created': datetime.datetime(2023, 9, 2, 1, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313684501, 'comment_body': 'Nope, removed it', 'comment_created': datetime.datetime(2023, 9, 2, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313684794, 'comment_body': 'We would need to add an `/ap/odom` topic with odometry messages. \r\n\r\nWe can discuss it in the future, but it is not in the scope of this initial PR', 'comment_created': datetime.datetime(2023, 9, 2, 1, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313691455, 'comment_body': 'Not mandatory spin behavior, as in always using x speed and having to spin to align the copter with the goal.\r\n \r\nBut the `Nav2 Goal` tool in `rviz` lets the user choose the final heading of the copter, so we should allow it to follow the goal message', 'comment_created': datetime.datetime(2023, 9, 2, 2, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313726513, 'comment_body': 'Ah ok, for later.', 'comment_created': datetime.datetime(2023, 9, 2, 5, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '586777d37cfc6cf9d04d9d78dc2a5fd92cca08b4', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46ee338d614c27756bbc87466fed4bae4e05ae5', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fdb69902acbf3eca46b797f28c52dda494589d1', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba418b7c32d58ac1d463fa3102b40277a3049c7', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39edd89d816167dd3f0819d7e9ada66b84c41db3', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf211d7948fcc852e8cbb5bf7b00458e98a36ac', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14
1485355925,WIP: Add integration with nav2,"The purpose of this PR is to integrate the `navigation2` stack with Ardupilot and Cartographer.

Solves https://github.com/ArduPilot/ardupilot_gz/issues/5",True,11,https://api.github.com/repos/ArduPilot/ardupilot_ros/pulls/11,https://github.com/ArduPilot/ardupilot_ros/pull/11,closed,782,200,13,6,14,16,1,1,[{'name': 'ros2'}],2023-08-22 20:04:48+00:00,2024-07-22 07:56:22+00:00,28900294.0,"334 days, 11:51:34","[{'comment_id': 1310498295, 'comment_body': 'The cause of the Issue was this: https://github.com/cartographer-project/cartographer/issues/1498\r\nChanging the `lethal_cost_threshold` parameter in the `nav2` configuration worked as a workaround. \r\nAttempts to patch this in `cartographer` have been made in the past and were ignored, as the project is no longer active\r\n\r\n![costmap example](https://github.com/ArduPilot/ardupilot_ros/assets/62964137/b39678ab-ce61-415c-9e3d-2affe4c9eece)\r\n', 'comment_created': datetime.datetime(2023, 8, 30, 15, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1310559899, 'comment_body': '```suggestion\r\nTakeoff the Copter using `mavproxy` to an altitude of 2.5m:\r\n```', 'comment_created': datetime.datetime(2023, 8, 30, 16, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310563413, 'comment_body': 'Do we want spin behavior on a copter when it has full XY control? ', 'comment_created': datetime.datetime(2023, 8, 30, 16, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310563977, 'comment_body': ""I think we can remove this because Copter won't have docking support in any realistic timeline. "", 'comment_created': datetime.datetime(2023, 8, 30, 16, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565114, 'comment_body': 'For all the use_sim_time, can you add a[ yaml alias](https://www.educative.io/blog/advanced-yaml-syntax-cheatsheet) instead of copying the same value over and over. It seems like they are always True.', 'comment_created': datetime.datetime(2023, 8, 30, 16, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565587, 'comment_body': 'Why are X and Y assymetic?', 'comment_created': datetime.datetime(2023, 8, 30, 16, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310565896, 'comment_body': 'Feel free to remove commented code.', 'comment_created': datetime.datetime(2023, 8, 30, 16, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310566395, 'comment_body': 'Is this still needed on Copter?', 'comment_created': datetime.datetime(2023, 8, 30, 16, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310567732, 'comment_body': 'I am good with this patch. It should be easy enough to substitute for an alternative SLAM implementation in the future. ', 'comment_created': datetime.datetime(2023, 8, 30, 16, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310574494, 'comment_body': ""Since we get feedback on velocity from AP's AHRS, could we close the loop? "", 'comment_created': datetime.datetime(2023, 8, 30, 16, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1310575113, 'comment_body': 'If we could use pathlib everywhere that would be super', 'comment_created': datetime.datetime(2023, 8, 30, 16, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1313684367, 'comment_body': 'Removed them, these parameters were not being used', 'comment_created': datetime.datetime(2023, 9, 2, 1, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313684501, 'comment_body': 'Nope, removed it', 'comment_created': datetime.datetime(2023, 9, 2, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313684794, 'comment_body': 'We would need to add an `/ap/odom` topic with odometry messages. \r\n\r\nWe can discuss it in the future, but it is not in the scope of this initial PR', 'comment_created': datetime.datetime(2023, 9, 2, 1, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313691455, 'comment_body': 'Not mandatory spin behavior, as in always using x speed and having to spin to align the copter with the goal.\r\n \r\nBut the `Nav2 Goal` tool in `rviz` lets the user choose the final heading of the copter, so we should allow it to follow the goal message', 'comment_created': datetime.datetime(2023, 9, 2, 2, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pedro-fuoco', 'type': 'User'}, {'comment_id': 1313726513, 'comment_body': 'Ah ok, for later.', 'comment_created': datetime.datetime(2023, 9, 2, 5, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '586777d37cfc6cf9d04d9d78dc2a5fd92cca08b4', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46ee338d614c27756bbc87466fed4bae4e05ae5', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fdb69902acbf3eca46b797f28c52dda494589d1', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba418b7c32d58ac1d463fa3102b40277a3049c7', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39edd89d816167dd3f0819d7e9ada66b84c41db3', 'committer_username': 'pedro-fuoco', 'committer_name': 'Fuoco', 'committer_email': 'pedrofuoco6@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 20, 27, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf211d7948fcc852e8cbb5bf7b00458e98a36ac', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}]",Fuoco,62964137,pedrofuoco6@gmail.com,User,,18,,6,14

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
533986316,ardupilot_ros,ArduPilot/ardupilot_ros,Python,9,15,2,6,53,4,2,2,"[{'id': 1495815649, 'number': 14, 'closed': datetime.datetime(2023, 9, 4, 2, 14, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 30, 16, 18, 35, tzinfo=datetime.timezone.utc), 'time_taken': 381361.0, 'time_delta': '4 days, 9:56:01', 'additions': 0, 'deletions': 9, 'state': 'closed'}, {'id': 1492806151, 'number': 13, 'closed': datetime.datetime(2023, 8, 28, 22, 27, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 28, 22, 11, 41, tzinfo=datetime.timezone.utc), 'time_taken': 948.0, 'time_delta': '0:15:48', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1485409760, 'number': 12, 'closed': datetime.datetime(2023, 9, 2, 2, 46, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 22, 20, 43, 33, tzinfo=datetime.timezone.utc), 'time_taken': 885769.0, 'time_delta': '10 days, 6:02:49', 'additions': 17, 'deletions': 0, 'state': 'closed'}, {'id': 1485355925, 'number': 11, 'closed': datetime.datetime(2024, 7, 22, 7, 56, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 22, 20, 4, 48, tzinfo=datetime.timezone.utc), 'time_taken': 28900294.0, 'time_delta': '334 days, 11:51:34', 'additions': 782, 'deletions': 200, 'state': 'closed'}, {'id': 1463457440, 'number': 10, 'closed': datetime.datetime(2023, 8, 4, 21, 9, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 4, 21, 0, 6, tzinfo=datetime.timezone.utc), 'time_taken': 554.0, 'time_delta': '0:09:14', 'additions': 102, 'deletions': 96, 'state': 'closed'}, {'id': 1463434089, 'number': 8, 'closed': datetime.datetime(2023, 8, 11, 15, 19, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 4, 20, 34, 55, tzinfo=datetime.timezone.utc), 'time_taken': 585896.0, 'time_delta': '6 days, 18:44:56', 'additions': 1063, 'deletions': 2614, 'state': 'closed'}, {'id': 1361911285, 'number': 6, 'closed': datetime.datetime(2023, 8, 22, 20, 39, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 23, 19, 7, 38, tzinfo=datetime.timezone.utc), 'time_taken': 7867926.0, 'time_delta': '91 days, 1:32:06', 'additions': 1381, 'deletions': 2703, 'state': 'closed'}]"
613660701,ardupilot_gz,ArduPilot/ardupilot_gz,Python,21,31,8,6,46,8,2,1,"[{'id': 1495809072, 'number': 27, 'closed': datetime.datetime(2023, 9, 2, 13, 18, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 30, 16, 15, tzinfo=datetime.timezone.utc), 'time_taken': 248599.0, 'time_delta': '2 days, 21:03:19', 'additions': 5, 'deletions': 13, 'state': 'closed'}, {'id': 1495796836, 'number': 26, 'closed': datetime.datetime(2023, 8, 30, 17, 35, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 30, 16, 6, 2, tzinfo=datetime.timezone.utc), 'time_taken': 5350.0, 'time_delta': '1:29:10', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1453138175, 'number': 23, 'closed': datetime.datetime(2023, 8, 4, 3, 34, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 28, 3, 29, 26, tzinfo=datetime.timezone.utc), 'time_taken': 605087.0, 'time_delta': '7 days, 0:04:47', 'additions': 10, 'deletions': 46, 'state': 'closed'}, {'id': 1443560822, 'number': 22, 'closed': datetime.datetime(2023, 7, 21, 0, 31, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 20, 20, 27, 28, tzinfo=datetime.timezone.utc), 'time_taken': 14653.0, 'time_delta': '4:04:13', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1425997255, 'number': 21, 'closed': datetime.datetime(2023, 7, 20, 21, 46, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 8, 16, 56, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1054200.0, 'time_delta': '12 days, 4:50:00', 'additions': 46, 'deletions': 45, 'state': 'closed'}, {'id': 1400563497, 'number': 20, 'closed': datetime.datetime(2023, 7, 8, 15, 26, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 20, 21, 37, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1532941.0, 'time_delta': '17 days, 17:49:01', 'additions': 1487, 'deletions': 1, 'state': 'closed'}]"
7512484,ardupilot,ArduPilot/ardupilot,C++,17040,10408,658,1076,64547,2454,71,1024,"[{'id': 1495824969, 'number': 24819, 'closed': datetime.datetime(2023, 9, 5, 2, 30, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 30, 16, 23, 54, tzinfo=datetime.timezone.utc), 'time_taken': 468407.0, 'time_delta': '5 days, 10:06:47', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 1485597809, 'number': 24734, 'closed': datetime.datetime(2023, 9, 6, 10, 31, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 23, 1, 3, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1243677.0, 'time_delta': '14 days, 9:27:57', 'additions': 25, 'deletions': 13, 'state': 'closed'}, {'id': 1340043146, 'number': 23694, 'closed': datetime.datetime(2023, 5, 9, 1, 6, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 5, 15, 17, 57, tzinfo=datetime.timezone.utc), 'time_taken': 294542.0, 'time_delta': '3 days, 9:49:02', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 1318960745, 'number': 23541, 'closed': datetime.datetime(2023, 4, 27, 21, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 18, 20, 57, 37, tzinfo=datetime.timezone.utc), 'time_taken': 779903.0, 'time_delta': '9 days, 0:38:23', 'additions': 110, 'deletions': 0, 'state': 'closed'}, {'id': 1318814901, 'number': 23540, 'closed': datetime.datetime(2023, 5, 5, 2, 2, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 18, 18, 42, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1408797.0, 'time_delta': '16 days, 7:19:57', 'additions': 177, 'deletions': 4, 'state': 'closed'}, {'id': 1313409043, 'number': 23480, 'closed': datetime.datetime(2023, 4, 25, 4, 18, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 14, 3, 11, 42, tzinfo=datetime.timezone.utc), 'time_taken': 954432.0, 'time_delta': '11 days, 1:07:12', 'additions': 116, 'deletions': 0, 'state': 'closed'}, {'id': 1303870990, 'number': 23406, 'closed': datetime.datetime(2023, 4, 12, 5, 25, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 5, 22, 35, 28, tzinfo=datetime.timezone.utc), 'time_taken': 542998.0, 'time_delta': '6 days, 6:49:58', 'additions': 9, 'deletions': 0, 'state': 'closed'}, {'id': 1297074202, 'number': 23371, 'closed': datetime.datetime(2023, 4, 4, 0, 48, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 31, 2, 36, tzinfo=datetime.timezone.utc), 'time_taken': 339150.0, 'time_delta': '3 days, 22:12:30', 'additions': 6, 'deletions': 3, 'state': 'closed'}, {'id': 1296513022, 'number': 23370, 'closed': datetime.datetime(2023, 4, 14, 23, 40, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 30, 16, 17, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1322603.0, 'time_delta': '15 days, 7:23:23', 'additions': 145, 'deletions': 5, 'state': 'closed'}, {'id': 1290397791, 'number': 23343, 'closed': datetime.datetime(2023, 3, 28, 20, 11, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 26, 16, 22, tzinfo=datetime.timezone.utc), 'time_taken': 186582.0, 'time_delta': '2 days, 3:49:42', 'additions': 72, 'deletions': 80, 'state': 'closed'}]"
28945232,ardupilot_wiki,ArduPilot/ardupilot_wiki,Python,1230,485,74,491,8085,258,6,89,"[{'id': 1512595154, 'number': 5415, 'closed': datetime.datetime(2023, 9, 12, 20, 15, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 12, 18, 21, 31, tzinfo=datetime.timezone.utc), 'time_taken': 6857.0, 'time_delta': '1:54:17', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1484976484, 'number': 5366, 'closed': datetime.datetime(2023, 9, 4, 22, 35, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 22, 15, 25, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1149038.0, 'time_delta': '13 days, 7:10:38', 'additions': 95, 'deletions': 0, 'state': 'closed'}, {'id': 1476600711, 'number': 5359, 'closed': datetime.datetime(2023, 8, 18, 22, 10, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 15, 22, 46, 3, tzinfo=datetime.timezone.utc), 'time_taken': 257044.0, 'time_delta': '2 days, 23:24:04', 'additions': 77, 'deletions': 0, 'state': 'closed'}, {'id': 1443588795, 'number': 5298, 'closed': datetime.datetime(2023, 7, 27, 12, 17, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 20, 20, 49, 39, tzinfo=datetime.timezone.utc), 'time_taken': 574051.0, 'time_delta': '6 days, 15:27:31', 'additions': 182, 'deletions': 3, 'state': 'closed'}]"
603859228,ardupilot,Ryanf55/ardupilot,C++,0,0,0,1075,64530,1,124,1,"[{'id': 1469155420, 'number': 2, 'closed': datetime.datetime(2023, 8, 9, 19, 25, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 9, 19, 9, 13, tzinfo=datetime.timezone.utc), 'time_taken': 988.0, 'time_delta': '0:16:28', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
135363400,navigation2,ros-navigation/navigation2,C++,1238,2431,64,267,2948,87,15,25,[]
