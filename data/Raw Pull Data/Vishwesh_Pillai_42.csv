pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1306363906,Load and show custom profile fields in user information popup,"<!-- See README for documentation, or ask in #zulip-terminal if unclear -->
### What does this PR do, and why?
This PR adds custom profile fields to the user info popup, which previously only displayed basic user information. This will include information about the user which, currently, has to be accessed by using the webapp. This PR also adds update event handling for the custom profile data.


### Outstanding aspect(s)    <!-- DELETE SECTION IF EMPTY -->
<!-- In what ways is this not fully implemented/functioning? Compared to a discussion/issue? -->
<!-- Do you not understand something? Are you unsure about a certain approach? Want feedback? -->
- [x] Update field values in current session using events.
- [x] Add/update tests.
- [x] Sort fields using 'order'
- [x] Simplify `_clean_custom_profile_data`

### External discussion & connections
<!-- [x] all that apply, specifying topic and adding numbers after # for issues/PRs -->
- [x] Discussed in **#zulip-terminal** in [`Support custom profile fields #T1338`](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Support.20custom.20profile.20fields.20.23T1338)
- [x] Fully fixes #1338
- [ ] Partially fixes issue 
- [ ] Builds upon previous unmerged work in PR #
- [ ] Is a follow-up to work in PR #
- [ ] Requires merge of PR #
- [ ] Merge will enable work on #

### How did you test this?
<!-- [x] all that apply -->
- [x] Manually - Behavioral changes
- [x] Manually - Visual changes
- [x] Adapting existing automated tests
- [x] Adding automated tests for new behavior (or missing tests)
- [ ] Existing automated tests should already cover this (*only a refactor of tested code*)

### Self-review checklist for each commit
- [x] It is a [minimal coherent idea](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development)
- [x] It has a commit summary following the [documented style](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development) (title & body)
- [x] It has a commit summary describing the  motivation and reasoning for the change
- [x] It individually passes linting and tests
- [x] It contains test additions for any new behavior
- [x] It flows clearly from a previous branch commit, and/or prepares for the next commit

### Visual changes    <!-- DELETE SECTION IF NO VISUAL CHANGE -->
<!-- Zulip tips at https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html -->
<!-- For video, try asciinema; after uploading, embed using
[![yourtitle](https://asciinema.org/a/<id>.png)](https://asciinema.org/a/<id>)
-->
![image](https://user-images.githubusercontent.com/44305101/232261237-703b7a81-f648-41fb-9b02-e1704af4d50c.png)


",True,1374,https://api.github.com/repos/zulip/zulip-terminal/pulls/1374,https://github.com/zulip/zulip-terminal/pull/1374,closed,696,19,7,5,7,87,5,0,"[{'name': 'area: UI'}, {'name': 'size: XL'}, {'name': 'area: event handling'}, {'name': 'missing feature: user'}, {'name': 'area: API spec'}]",2023-04-08 02:54:40+00:00,2023-07-14 02:49:04+00:00,8380464.0,"96 days, 23:54:24","[{'comment_id': 1163254809, 'comment_body': ""I was surprised by these types, but they seem accurate.\r\n\r\nThis would be preferable using a TypedDict and Literal to constrain the values where we can. The name you use will then make it clearer where you're using the data."", 'comment_created': datetime.datetime(2023, 4, 11, 19, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1163463114, 'comment_body': ""I know you mentioned that the last-online field is useful to have last, this place isn't the best to accomplish this.\r\n\r\nThis function is concerned with preparing the TidiedUserInfo for output, so we don't need to enforce the ordering in this function. A more general response would be to return the regular data and this data as a tuple. A simple way to group the custom profile data would then be to put it into a group like we do with the actions/links/reactions in the message info popup."", 'comment_created': datetime.datetime(2023, 4, 12, 1, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1163465214, 'comment_body': 'This change and the TidiedUserInfo change in an earlier commit can go together? The big new function above should go into an earlier commit, with tests.\r\n\r\nI understand this works for getting things working :)', 'comment_created': datetime.datetime(2023, 4, 12, 1, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1163468052, 'comment_body': 'As per another comment, this model function would be concerned with cleaning the data, not necessarily making it into just an output form. For example, if I want a list of users, it would be simpler to just end up with a list of ids - and this function may become simpler :)\r\n\r\nThat may mean defining additional TypedDicts for use with TidiedUserInfo and this function would be helpful.', 'comment_created': datetime.datetime(2023, 4, 12, 1, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1163470409, 'comment_body': 'Are 3/6/7 the only ones needing special handling? This will be easier to observe with tests.', 'comment_created': datetime.datetime(2023, 4, 12, 1, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1163474361, 'comment_body': 'Are these prefixes from the web app?', 'comment_created': datetime.datetime(2023, 4, 12, 1, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1164818791, 'comment_body': ""Yes, from manual testing, it seems so. I'm currently working on adding tests."", 'comment_created': datetime.datetime(2023, 4, 13, 0, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1164821740, 'comment_body': ""Yes, for the `external account` field, the web app has three subtypes by default: `github`, `twitter` and `custom`. The `github` and `twitter` subtypes require just the user name and it appends the appropriate prefix while displaying. The `custom` sub type requires a URL pattern while creating the field. This pattern then gets prefixed to the username a user enters. I've yet to handle the `custom` case."", 'comment_created': datetime.datetime(2023, 4, 13, 1, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1166413824, 'comment_body': ""Should I keep this function and just use it to clean the data, and maybe create another function where I process it to get display information? \r\nLike the example that you gave here - when this function cleans the `list of persons` field, it then produces a list of ids in it's place. Then, a second function would fetch the names of the users with the user ids in the list, and create a string (concatenate the names together with commas) for display. \r\nDid I understand you correctly?"", 'comment_created': datetime.datetime(2023, 4, 14, 7, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1167355500, 'comment_body': ""Yes, that's what I meant. There is a function which already does this - to some extent - in UserInfoView."", 'comment_created': datetime.datetime(2023, 4, 15, 1, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170804540, 'comment_body': 'These TypedDicts definitely help compared to the previous typing :+1:\r\n\r\nWe could maybe go further with the typing or API comments, but this seems OK for now.', 'comment_created': datetime.datetime(2023, 4, 19, 4, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170806216, 'comment_body': 'Style: Cleaner with dict comprehension?', 'comment_created': datetime.datetime(2023, 4, 19, 4, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170808107, 'comment_body': 'Style: Combine with previous statement?', 'comment_created': datetime.datetime(2023, 4, 19, 4, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170809686, 'comment_body': ""Style: These have repeated elements and are then used later. The former means I'd use an intermediate variable for the common part, and the latter suggests the assignment/indexing you're doing here could be done inline when creating the dict?"", 'comment_created': datetime.datetime(2023, 4, 19, 5, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170812010, 'comment_body': 'It may be useful to add brief comments for each type here?', 'comment_created': datetime.datetime(2023, 4, 19, 5, 7, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170814653, 'comment_body': 'Would this be simpler to return as a list? Do we need the original field_id? If so, does it belong as a key in a dict or simply a field in each dict entry?', 'comment_created': datetime.datetime(2023, 4, 19, 5, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170825030, 'comment_body': ""To clarify the division we discussed previously, I'd expect this method to not require coordination with `profile_fields`. This would also simplify the testing of types here - which you don't have here right now? - and would be in the cleaning function instead.\r\n\r\n---\r\nHere field_type==3 can be looked up in the previous function? Then this would be simply a string at this point?\r\n\r\nWe could provide eg. extra fields in the TidiedUserInfo to give information about other options that are available, but I'm not sure we need that for this first version - which will already be quite complete."", 'comment_created': datetime.datetime(2023, 4, 19, 5, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170825496, 'comment_body': 'This converts List[int] to comma-separated user names, so is fine here :+1:', 'comment_created': datetime.datetime(2023, 4, 19, 5, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170830598, 'comment_body': 'Similarly we could provide a simple final value (as well as maybe the username itself?)', 'comment_created': datetime.datetime(2023, 4, 19, 5, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170831332, 'comment_body': ""I'm not sure if there's a benefit to keeping the sorting done here, but if the cleaned data was a list then it could be pre-sorted? (even if the ordering field remains)"", 'comment_created': datetime.datetime(2023, 4, 19, 5, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170841226, 'comment_body': 'It would be good to see an example with a list here, to show that this is being processed correctly.', 'comment_created': datetime.datetime(2023, 4, 19, 5, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170845689, 'comment_body': 'What is the source of these? Is the `\\` character for a line break, or in the raw data?', 'comment_created': datetime.datetime(2023, 4, 19, 6, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170856949, 'comment_body': 'These seem OK to include as prefixes, though the webapp treats them as special links - did you do a prefix to ensure the link eg. highlights in terminals for easy copy/paste?', 'comment_created': datetime.datetime(2023, 4, 19, 6, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1174231825, 'comment_body': ""It's for a line break, to keep the linter from complaining."", 'comment_created': datetime.datetime(2023, 4, 22, 0, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1177159517, 'comment_body': ""This could be changed to return a list. This would also make it easier to keep it sorted according to order. Also, we could remove the field_id since we don't use it anymore. I've made the change."", 'comment_created': datetime.datetime(2023, 4, 25, 23, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1191948947, 'comment_body': ""This field_value is the default, right? If so, it might be clearer being part of the conditional. You could treat that as an `else` clause, or one covering the values of 'type' that are known to use this way of calculating the value.\r\n\r\nI do see that two of the conditional branches do use this default value, whereas one looks up the raw value again.\r\n\r\nActually, isn't this type just a str? You could term this the raw/string value and then set it for all values of type in the conditional?"", 'comment_created': datetime.datetime(2023, 5, 12, 6, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1191955077, 'comment_body': ""It'd be great to add a type for this dict, though we don't have a type for initial_data itself yet."", 'comment_created': datetime.datetime(2023, 5, 12, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1191970636, 'comment_body': 'For one long string, you can split into multiple adjacent strings, and use parentheses to group. Or possibly simply parens around the value will be enough for black to lay it out OK?', 'comment_created': datetime.datetime(2023, 5, 12, 6, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1192523612, 'comment_body': ""Let's move this out of this section now :)\r\n(we're requesting it, and we're supporting it!)"", 'comment_created': datetime.datetime(2023, 5, 12, 15, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1192618635, 'comment_body': ""This isn't accompanied by a change to the API, which was very confusing initially as mypy isn't complaining! I feel this is really a bug and lack of coverage in mypy, but the underlying issue appears to be since the TypedDict is defined in such a way that the keys are *definitely* present since it is 'total', so this branch isn't checked at all by mypy.\r\n\r\nWe have Message as total=False, but ideally we'd avoid that since the type-checking isn't as good. Would you be up for improving the typing of that?"", 'comment_created': datetime.datetime(2023, 5, 12, 17, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1192891268, 'comment_body': ""This should use `user_name_from_id` to avoid accessing the implementation.\r\n\r\nI'd be open to adjusting the error behavior in that method to make this cleaner; perhaps providing an optional value different would return that instead of raising the exception?\r\n(it looks like there are some other calling sites we could improve in any case)\r\n\r\nI suspect that would enable making this into a simple list comprehension, or even generator expression with the join."", 'comment_created': datetime.datetime(2023, 5, 13, 1, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1192891945, 'comment_body': 'At the risk of increased nesting we could nest all of this section in the non-bot area, since bots cannot have custom fields, but a comment should suffice since the data should simply not have the fields in the first place.', 'comment_created': datetime.datetime(2023, 5, 13, 1, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1192894115, 'comment_body': 'Unrelated - and inconsistent?', 'comment_created': datetime.datetime(2023, 5, 13, 1, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1192894213, 'comment_body': 'assert on custom_profile_data? The other two tests account for each part individually, but this is the only test for invalid user.', 'comment_created': datetime.datetime(2023, 5, 13, 1, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1192894337, 'comment_body': 'This seems unnecessary?', 'comment_created': datetime.datetime(2023, 5, 13, 1, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1192898151, 'comment_body': ""This line will change based on another comment, and being consistent is great.\r\n\r\nSo it's worth keeping this consistent like you have already, and the code above does patch the object, but more generally we can directly set values on the controller, since it's a Mock(). That's a lot less verbose than repeatedly patching."", 'comment_created': datetime.datetime(2023, 5, 13, 1, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1192898466, 'comment_body': ""This is the wrong type. Unfortunately mypy/pytest doesn't check the parametrize(s) to the parameters."", 'comment_created': datetime.datetime(2023, 5, 13, 1, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1201491652, 'comment_body': 'Since the realm user update event does not have ""new_email"" as a compulsory field, changing it to a ```NotRequired``` field in ```RealmUserEventPerson``` fixes this issue. Also, similar to ""new_email"", other fields are also not guaranteed to be present, except for ```user_id```. This means changing every field (except ```user_id```) to be a ```NotRequired``` field would also make sense.  ', 'comment_created': datetime.datetime(2023, 5, 23, 4, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1201681005, 'comment_body': 'Yes, this is definitely a reasonable approach. If the different updates cannot be in the same event (eg. role and timezone?) then it would be stricter to use a Union of classes for each option. Otherwise NotRequired on lots of these indicates that somewhere between all or none of them could be present.', 'comment_created': datetime.datetime(2023, 5, 23, 7, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233129081, 'comment_body': 'The heading for this section may have been added since you started this PR, but this data/type is not in the ""realm_user"" response for each user, but rather ""custom_profile_fields"". I\'m not sure it appears anywhere else in the API.\r\n\r\nA comment on this class to clarify this would be sufficient.', 'comment_created': datetime.datetime(2023, 6, 17, 20, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233129571, 'comment_body': ""Should field_data be absent here? The type details you added indicate it is absent, though the notes in the API don't indicate this, so I'm not sure if this is from manual testing."", 'comment_created': datetime.datetime(2023, 6, 17, 20, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233133112, 'comment_body': 'It would be clearer to use `field_data` here, though it is a little confusing given the `""field_data""` index.\r\n\r\nThis also applies elsewhere.', 'comment_created': datetime.datetime(2023, 6, 17, 21, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233134060, 'comment_body': ""Is there a reason this line is different? Do different values get passed in? Do we have examples of what the custom value can be?\r\n\r\nIt's notable that you don't have twitter or custom entries in the list of test fields, which would be useful to add.\r\n\r\nSimilarly, for the user-picker type, it would be useful to have additional/multiple fields in the field fixture, to cover single and multiple users in the data fixture - eg. one manager and multiple mentors. On a related point, *if* this field can be set to be empty (ie. `[]`), via the web or API, I expect we'd generate an empty list, but it would be useful to cover that case to know what we'd expect to see in the ZT UI too."", 'comment_created': datetime.datetime(2023, 6, 17, 21, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233137599, 'comment_body': ""Another comment re the custom case and tests may be useful to address first, to make it clearer what is expected and make refactoring easier.\r\n\r\nHowever, depending on the constraints from the custom case, I'd aim to simplify this, either:\r\n- set the pattern string in each conditional, and do the common string substitution/formatting afterwards; any need for a dict can then likely be inlined there\r\n- use f-strings for the non-custom cases, and place any required dict only in the custom case"", 'comment_created': datetime.datetime(2023, 6, 17, 21, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233138476, 'comment_body': ""Minor, but we don't need this now?"", 'comment_created': datetime.datetime(2023, 6, 17, 21, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233139290, 'comment_body': ""Regarding the commit text:\r\n- The name of the method can be explicitly included in the commit title :)\r\n- I assume you're highlighting type 6 since the result is the only one not processed into text?\r\n- Since you modify api_types and helper, it's worth noting why that's relevant\r\n- When noting you add a test, new fixtures are also worth mentioning"", 'comment_created': datetime.datetime(2023, 6, 17, 21, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233139704, 'comment_body': 'We likely want to keep this note about supporting the others in future :)', 'comment_created': datetime.datetime(2023, 6, 17, 21, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233141540, 'comment_body': ""For this commit text, I would clarify that the primary change is the extension of `get_user_info` to cover custom profile data. That does require fetching custom (profile) fields and extending previous data structures, but that's to enable `_clean_and_order_custom_profile_data` to have the appropriate data to act upon, which is itself then used in `get_user_info`."", 'comment_created': datetime.datetime(2023, 6, 17, 22, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233142494, 'comment_body': ""While it's added back in the next commit and is only a comment, it seems strange to remove this here before re-adding it.\r\n\r\nI'd be inclined to add it in a skeletal way here, and then improve the details/typing in the next commit when you use it."", 'comment_created': datetime.datetime(2023, 6, 17, 22, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233147596, 'comment_body': 'The dict only needs to be built if we update the data, so it would be clearer to move it into that branch.\r\n\r\nIn terms of building the dict, it may be simpler to setup the internal dict first before using `profile_field_id` to make the single-element external dict, which could even be passed directly to the `update`. The conditional part for the internal dict may be clearer as a comprehension with a filter.', 'comment_created': datetime.datetime(2023, 6, 17, 22, 53, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233148730, 'comment_body': ""`mypy` isn't catching this, but while the API allows this to be `None`, the field isn't typed that way, so for accurate typing, the inheritance you used isn't going to work."", 'comment_created': datetime.datetime(2023, 6, 17, 23, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233149566, 'comment_body': ""This hasn't been added to the Union."", 'comment_created': datetime.datetime(2023, 6, 17, 23, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233150068, 'comment_body': 'There are more than enough here to make it worth inlining these using `case` expressions.', 'comment_created': datetime.datetime(2023, 6, 17, 23, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233150389, 'comment_body': 'These would be more compact if you only had the innermost dict, and set up the person dict in the test function.', 'comment_created': datetime.datetime(2023, 6, 17, 23, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233150484, 'comment_body': 'A good way to ensure this remains the case is to add an assert that this is the case here, which is likely sufficient instead of most/all the comment.\r\n\r\nYou can define constants in the function, or arguments with default values in the test function, for the 2 & 12 so that it reads better.', 'comment_created': datetime.datetime(2023, 6, 17, 23, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233152259, 'comment_body': ""Minor: it's good to leave a line both sides of the function being tested."", 'comment_created': datetime.datetime(2023, 6, 17, 23, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233152313, 'comment_body': ""This tests the value has been updated; it'd be useful to ensure that other existing values are unchanged.\r\n\r\nSimilarly in the removal test."", 'comment_created': datetime.datetime(2023, 6, 17, 23, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233160077, 'comment_body': ""I don't object to having profile_field_id distinct from the `id` fields values, but it would be more readable if you could express that it is the field that is expected to be modified, in an updated name."", 'comment_created': datetime.datetime(2023, 6, 17, 23, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233162830, 'comment_body': ""This appears to be resolved via what is now the previous commit, or at least is expressed much more clearly :)\r\n\r\nI've found a mypy flag that does warn about the `None` comparison, but it does indicate other issues are present, though these may be related to the API definitions needing to be clarified."", 'comment_created': datetime.datetime(2023, 6, 18, 0, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233167015, 'comment_body': ""Re the commit title, I understand the meaning here, but this could be more specific, and you actually clarify this partially in the first line of the commit body - you're aware the API distinguishes between the profile data and the fields, and this is certainly for former :)\r\n\r\nI'd probably also include the `realm_user` phrase, since while there are other `op` subtypes than `update` in that event type, none allow focusing on custom profile data alone, and it may help with searching the git log in future."", 'comment_created': datetime.datetime(2023, 6, 18, 0, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233167281, 'comment_body': 'Not your change, but these can both be `Dict[str, str]` now?', 'comment_created': datetime.datetime(2023, 6, 18, 0, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233167601, 'comment_body': ""I don't understand the importance or usefulness of this comment."", 'comment_created': datetime.datetime(2023, 6, 18, 0, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233167735, 'comment_body': 'Minor: is this `str` necessary?', 'comment_created': datetime.datetime(2023, 6, 18, 0, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233168616, 'comment_body': ""Minor:\r\n- x.items() is an iterator that provides tuple(k,v), so `list(x.items())` is more concise here - there's no filtering or adjusting of the values in the resulting comprehension\r\n- I'd be inclined to mirror the `user_details` naming when naming the data that goes into this section, though if very compact then it'd be fine to inline it too"", 'comment_created': datetime.datetime(2023, 6, 18, 1, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233169205, 'comment_body': ""We've not done this consistently, but it's useful to use a double underscore between the function being tested and any test 'description' after it, so here between `data` and `custom` - it makes it clearer which function we're testing and any specific functionality of that function."", 'comment_created': datetime.datetime(2023, 6, 18, 1, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233169739, 'comment_body': 'This change seems unrelated? Remove the extra comma and run black?', 'comment_created': datetime.datetime(2023, 6, 18, 1, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233170606, 'comment_body': ""Commit text notes:\r\n- Is there an indication to use a `ui:` area somewhere? It's not unreasonable, but we've not included one in the recent past\r\n- Worth noting that the person picker you reference is the only field not already a string, hence the need to do the translation you discuss"", 'comment_created': datetime.datetime(2023, 6, 18, 1, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1233850534, 'comment_body': ""The comment on the CustomProfileField typeddict is wrong. The example data in the API docs has `field_data` missing in the type 8 (pronouns) field, but the API does have it. I'll make the change.  "", 'comment_created': datetime.datetime(2023, 6, 19, 10, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1233869455, 'comment_body': 'Renamed `field_data` to just `field` to simplify.', 'comment_created': datetime.datetime(2023, 6, 19, 10, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1233926281, 'comment_body': ""For the user-picker, the server sends a RealmUser update event, which has the field and it's value set to None. I think this means that the field can be considered deleted and is not needed to be shown. This behavior is the same as in the webapp, and is added to this PR in a later commit (event handling one).Therefore, the case where the value is an empty list is not possible."", 'comment_created': datetime.datetime(2023, 6, 19, 11, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1236264716, 'comment_body': '> The conditional part for the internal dict may be clearer as a comprehension with a filter.\r\n\r\nThis was my initial intention, but strangely enough, mypy doesn\'t seem to understand that the `key` exists in the typeddict while doing something like -  \r\n`updated_profile_data[profile_field_id] = \r\n{\r\nkey: profile_field_data[key]\r\nfor key in profile_field_data\r\nif key != ""id""\r\n}`\r\nInstead, it throws an error saying - `error: TypedDict key must be a string literal; expected one of (""value"", ""rendered_value"", ""id"")  [literal-required]`', 'comment_created': datetime.datetime(2023, 6, 21, 4, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1236380826, 'comment_body': ""I forgot to remove it after I made changes in the previous version. I'll remove it"", 'comment_created': datetime.datetime(2023, 6, 21, 5, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1236419442, 'comment_body': 'It\'s only purpose is to indicate to mypy that field[""value""] is a string instead of being a `Union[str, List[int]]` since `display_custom_profile_data` is typed as being  a `Dict[str,str]` (part of return value of the function).\r\nI could change the type to `Dict[str, Any]` which would allow `str` to be removed but that might make the typing a bit weaker.', 'comment_created': datetime.datetime(2023, 6, 21, 5, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1236423921, 'comment_body': 'display_data can be `Dict[str,str]` but there is an issue with typing display_custom_profile_data as `Dict[str,str]` as I replied in another comment.', 'comment_created': datetime.datetime(2023, 6, 21, 6, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1236430195, 'comment_body': ""> Is there an indication to use a ui: area somewhere? It's not unreasonable, but we've not included one in the recent past\r\n\r\nNo, it just felt natural to include it, so I added it. Thinking about it now, it might be a bit confusing to have an area be the same as a filename. I'll remove it for now."", 'comment_created': datetime.datetime(2023, 6, 21, 6, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1252383129, 'comment_body': 'This is an improvement, and certainly relevant for the updates via get-events, though\r\n- https://zulip.com/api/get-events#custom_profile_fields doesn\'t have a ""custom_profile_fields"" response?\r\n- It would be good to include the original source of these fields, ie from /api/register (https://zulip.com/api/register-queue), which I suspect is where the custom_profile_fields response is connected to? Similar sections with comments are structured that way.\r\n\r\n(A minor point in passing, but we could constrain `type` further than simply int, using Literal)', 'comment_created': datetime.datetime(2023, 7, 4, 22, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1252392742, 'comment_body': ""Is this previous state the same as the fixture used for the one user with custom profile data?\r\n\r\nWe don't have to use that fixture directly, but rather than having a literal here which is essentially a copy of that, it would be less fragile to copy the data before the test action instead. This avoids needing to repeat this dict here and in the other test.\r\n\r\nIf we're concerned that this may not be sufficiently complete, eg. if user 12 lost custom data, we could do a minimal assert first to ensure it has some data, or even explicitly set a copy of the custom data fixture for an arbitrary user (rather than relying on the built-in structure of initial_data or the users_fixture)."", 'comment_created': datetime.datetime(2023, 7, 4, 22, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1252399032, 'comment_body': 'This seems to be the existing `update_data`?', 'comment_created': datetime.datetime(2023, 7, 4, 22, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1252406853, 'comment_body': ""Does this code miss the situation where a user starts with no custom data?\r\nFor example, what happens if you write a test which updates (adds) any custom field to user 11?\r\n\r\nSimilarly, while it shouldn't ideally happen, what if the user has no custom fields, or a given field has no data, and the event data is None?\r\nThis should only happen if we receive duplicate events or similar, but I'd hope we try and recover gracefully.\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2023, 7, 4, 23, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1252410217, 'comment_body': 'I see you made the other suggested changes. The remaining change isn\'t as important, though may make it easier to read.\r\n\r\nRe the typing issue, one issue could be that we\'re moving from the event type to the profile data type? What is now `updated_data` is not typed, after all.\r\n\r\nHowever, I suspect it\'s a wider problem than that since key is a variable in that comprehension. One alternative would be to type the keys somehow as Literal[...], or simply use an explicit form like:\r\n```python3\r\nif condition:\r\n    some_dict = {""value"": ...}\r\nelse:\r\n    some_dict = {""value"": ..., ""rendered_value"": ...}', 'comment_created': datetime.datetime(2023, 7, 4, 23, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1252413340, 'comment_body': ""In that case, I'd suggest adding defensive code which checks or asserts on the length of the existing/updated dict in various locations. An empty dict is a little False-y to ignore."", 'comment_created': datetime.datetime(2023, 7, 4, 23, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1252416260, 'comment_body': ""Normally the linter complains about capitalized names in functions, since that is reserved for at module-level, but we may have it turned off (we can change it to a case-by-case basis).\r\n\r\nIn other tests we've erred towards:\r\n```python3\r\ndef test_...(a, b, c, ..., constant=5, another=6):\r\n```\r\nor simply defining them in the body of the function, without capitalization."", 'comment_created': datetime.datetime(2023, 7, 4, 23, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1252416433, 'comment_body': 'The general changes are an improvement, this is really a nit-pick :)', 'comment_created': datetime.datetime(2023, 7, 4, 23, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1252425280, 'comment_body': 'Ah, I see the issue here. Generally if I see an explicit type conversion in code like this then I\'m expecting there\'s a runtime reason, like the conversion from an int for lookup in the string-int index of custom profile fields.\r\n\r\nUsing `str()` is totally valid, and so mypy will also accept that as a \'fix\' in this case.\r\n\r\nHowever, for this kind of situation it\'s useful to use either a `cast` (or similar) as an indication to mypy and the reader what is happening and add a comment, or fix the type issue ;) We don\'t need an actual runtime conversion, as it\'s a string already, and a cast avoids that and indicates ""I know what I\'m doing - see the comment"" ;)\r\n\r\nFixing the typing fully is likely too much work here, since we\'d have to map from literals to the type of the data.\r\n\r\nAnother approach which is used a lot instead of `cast` is to use an assert on the type. For example, here you\'re handling the only non-string case specially, so an `else` should be fine:\r\n```python3\r\nfor field in custom_profile_data:\r\n    if field[""type""] == 6:  # Person picker\r\n        ...\r\n    else:\r\n        assert isinstance(field[""value""], str)\r\n```\r\nOr, since you\'re reassigning `field[""value""]`, you can likely move the assert outside of the conditional.\r\nA comment may still be useful though :)\r\nThis is (typically) a runtime check, but doesn\'t implicitly convert anything like `str` would.', 'comment_created': datetime.datetime(2023, 7, 5, 0, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1252425933, 'comment_body': 'This seems resolved now?', 'comment_created': datetime.datetime(2023, 7, 5, 0, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1257855129, 'comment_body': 'All users start with an empty dict if there is no custom profile data, ie `initial_data[""realm_users""][""profile_data""]` = `{}`. So, for the first case, updating the dict new information won\'t be an issue. There is no existing test for it and the user fixture doesn\'t have the empty dict by default, so I\'ll add them.\r\nEDIT: I missed the fact that we update the inner field dict rather than  `profile_data`. I\'ll change it.\r\n\r\nFor the second case, I\'ll provide a default `None` argument for pop() so that it doesn\'t throw a keyerror. I\'ll also add a comment for it.', 'comment_created': datetime.datetime(2023, 7, 10, 7, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1259057314, 'comment_body': ""I think we'd have caught this if we had a good type for users, but unfortunately we're not applying RealmUser here, and it does differ between different situations in any case (eg. `is_active` being present)."", 'comment_created': datetime.datetime(2023, 7, 11, 1, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '0ec7521e545591243722460642b412b81f5c2eec', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b83384c7f06e66f306546b5aea0e0ccde84467fe', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a38627972fc13584df8933169f40fdd615273a', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc6bcbce453ad941ff3dc678c87e25ac4a526e32', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12414564828482f1690af9dfc5d2573bd83a56f0', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}]",Vishwesh Pillai,44305101,,User,,25,,30,31
1289891529,Improve algorithm for 'next unread topic' (n) to use current message state,"<!-- See README for documentation, or ask in #zulip-terminal if unclear -->
### What does this PR do, and why?
This PR improves the algorithm for the 'next unread topic'  method used as the 'n' keybinding. It replaces the use of the last unread topic with the topic of the currently selected message to determine the next unread topic to cycle to. 


<!--- ### Outstanding aspect(s)    <!-- DELETE SECTION IF EMPTY -->
<!-- In what ways is this not fully implemented/functioning? Compared to a discussion/issue? -->
<!-- Do you not understand something? Are you unsure about a certain approach? Want feedback? -->

### External discussion & connections
<!-- [x] all that apply, specifying topic and adding numbers after # for issues/PRs -->
- [x] Discussed in **#zulip-terminal** in [Improve algorithm for 'next unread topic' (n)](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Improve.20algorithm.20for.20'next.20unread.20topic'.20.28n.29.20.23T1333.20.23T1356)
- [x] Fully fixes #1333
- [ ] Partially fixes issue #
- [ ] Builds upon previous unmerged work in PR #
- [ ] Is a follow-up to work in PR #
- [ ] Requires merge of PR #
- [ ] Merge will enable work on #

### How did you test this?
<!-- [x] all that apply -->
- [x] Manually - Behavioral changes
- [x] Manually - Visual changes
- [x] Adapting existing automated tests
- [x] Adding automated tests for new behavior (or missing tests)
- [ ] Existing automated tests should already cover this (*only a refactor of tested code*)

### Self-review checklist for each commit
- [x] It is a [minimal coherent idea](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development)
- [x] It has a commit summary following the [documented style](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development) (title & body)
- [x] It has a commit summary describing the  motivation and reasoning for the change
- [x] It individually passes linting and tests
- [x] It contains test additions for any new behavior
- [x] It flows clearly from a previous branch commit, and/or prepares for the next commit

### Visual changes    <!-- DELETE SECTION IF NO VISUAL CHANGE -->
<!-- Zulip tips at https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html -->
<!-- For video, try asciinema; after uploading, embed using
[![yourtitle](https://asciinema.org/a/<id>.png)](https://asciinema.org/a/<id>)
-->
[![Demo](https://asciinema.org/a/XFCM5cH7W0FHaTNbkj1dGQ71S.svg)](https://asciinema.org/a/XFCM5cH7W0FHaTNbkj1dGQ71S)",True,1356,https://api.github.com/repos/zulip/zulip-terminal/pulls/1356,https://github.com/zulip/zulip-terminal/pull/1356,closed,151,23,4,5,10,37,2,0,"[{'name': 'size: XL'}, {'name': 'missing feature: user'}]",2023-03-25 02:58:14+00:00,2023-08-16 03:45:43+00:00,12444449.0,"144 days, 0:47:29","[{'comment_id': 1157828480, 'comment_body': ""I agree this makes the logic explicit, but adding a docstring here may be useful here to explain what the `None` response signifies, rather than just at the (currently only one) point of use.\r\n\r\nThis code may be changed later, but note since you return early, you can place the later code at the same level, and just add the conditional above it. That makes it explicit that this is either an optimization or a specific code change; it's an extra check, so I hope to see what that means for later :)"", 'comment_created': datetime.datetime(2023, 4, 4, 22, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157832897, 'comment_body': ""Did you investigate what the '2 other cases' represented, given the comment is removed?"", 'comment_created': datetime.datetime(2023, 4, 4, 22, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157836751, 'comment_body': ""I know this is existing code and tests, and shouldn't change behavior (and doesn't seem to), but does this represent the case of continuing unread messages in the same topic?\r\n\r\nI'm mainly interested due to the behavior in `--explore` mode, which I expected to need a special case to handle always moving to the next topic (since nothing is read) but which behaves OK previously and after this."", 'comment_created': datetime.datetime(2023, 4, 4, 22, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157840961, 'comment_body': ""This is a good preparatory commit, though see my overall feedback.\r\n\r\nSince we have multiple classes in this file, it'd be useful to note which class is gaining this method, in the commit title ideally, or at least the text.\r\n\r\nI don't see a test for this?"", 'comment_created': datetime.datetime(2023, 4, 4, 22, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157847183, 'comment_body': ""Overall, this seems to crash from DMs, which I'm not really surprised about, depending on how you use the result.\r\n\r\nMinor: This would be clearer if you returned the value directly, or otherwise the default later."", 'comment_created': datetime.datetime(2023, 4, 4, 23, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157856282, 'comment_body': ""According to the current function typing, this would never trigger, so something is wrong here or in the typing.\r\n\r\nIs the `None` case the only situation we might expect on this particular line?\r\nWe've gone from the 'current topic' not being unread, to it being explicitly None, which is a subset of the previous check."", 'comment_created': datetime.datetime(2023, 4, 4, 23, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157866416, 'comment_body': ""While this is OK as it is, I wonder if it might be simpler to split this commit somehow, maybe even temporarily storing the state in the view - though that seems rather artificial. However, that would allow you to focus on the model method and the state it's coupled to, then use the new helper method in the next commit.\r\n\r\nAs an example here, the multiple moving parts might relate to how you've not removed the model state."", 'comment_created': datetime.datetime(2023, 4, 4, 23, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157886088, 'comment_body': ""This looks like the part of the conditional that you neglected in the previous commit?\r\n\r\nI'll look again another time through the additional tests you've added, but applying the equivalent of the previous conditional appears to pass those tests - and looks much simpler.\r\n\r\nI'm not sure if you had other tests planned, which this was intended to satisfy further?"", 'comment_created': datetime.datetime(2023, 4, 5, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157894690, 'comment_body': ""For information only at this point:\r\n\r\nWriting the function call parameter like this is perfectly valid, and makes it clear on what basis we're getting the next topic. However, this seems like a prime candidate for renaming the function to be more clear - except that we may wish to update the name in the short term to take into account other aspects and change it again.\r\n\r\nBy renaming the function, I'm mainly referring to making it clear when you call it that the first argument is the context, eg. literally just adding `_from` to the name, and possibly adding a required kwarg of `topic` (if it ended up being multiple)."", 'comment_created': datetime.datetime(2023, 4, 5, 0, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1159457724, 'comment_body': ""Yeah, I assumed that the 2 cases were the two just below this one. Both of those represented cases where the function is expected to return None (not narrowing to any topic), and I decided to extend the behavior to this case, since the code then narrows to the same topic as the current topic which produces no change.\r\n\r\nTesting the code a bit more now, I see that changing the expected value to be None if the last unread topic is the same as topic to be returned results in not narrowing to the topic if the currently focused message is in a different topic. This is not an issue after the addition of using the current topic, as such a case is not possible there. I'll modify the commit structure and code to revert this test case to original and then modify it after the commit that adds current topic to the function."", 'comment_created': datetime.datetime(2023, 4, 6, 8, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1159479964, 'comment_body': ""This code wanted to test some additional functionality, but which were not expressed in the newly added testcases. I'll modify them to include it"", 'comment_created': datetime.datetime(2023, 4, 6, 8, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1160186660, 'comment_body': ""I guess this does not represent the case you're talking about, since the current function only determines the next topic to narrow to, and not the next message. The expected behavior of the 'n' hotkey only seems to be to narrow to the next topic with unread messages, and it is not necessary to read through all unread messages in the current topic before doing so.\r\n \r\nExplore mode is an interesting feature. As I mentioned above about the expected behavior of the 'n' hotkey, not reading the messages should not affect it, I suppose. Please correct me if I'm wrong in my understanding of the expected behavior."", 'comment_created': datetime.datetime(2023, 4, 6, 19, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1163489556, 'comment_body': 'Right, this is fine, I was simply surprised reading it :)', 'comment_created': datetime.datetime(2023, 4, 12, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170369879, 'comment_body': ""Should this retain the `not in unread_topics` condition?\r\n(see other comment - I'd expect removing that to break the existing tests, if they're good enough! maybe we're missing an existing situation?)"", 'comment_created': datetime.datetime(2023, 4, 18, 17, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170377693, 'comment_body': ""I like this separate refactor - you might like to add that prefix to the commit title.\r\n\r\nFor the rename the `get_` feels unnecessary. I'm not sure about the rest of the name, it depends how we want to call it, and whether the 'stream' part is implied eg.\r\n- `next_unread_topic_from_message_id(current_id)`\r\n- `next_unread_topic_from(message_id=current_id)`\r\n- `next_unread_stream_topic_from_message_id(id)`\r\n- ..."", 'comment_created': datetime.datetime(2023, 4, 18, 17, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170390260, 'comment_body': ""Following up on this earlier comment: (see another comment in this review cycle)\r\n\r\nIs there a reason you didn't retain this part of the conditional in the earlier commit?\r\n\r\nI understand if you're fixing/improving behavior here by splitting the conditional and adding more tests."", 'comment_created': datetime.datetime(2023, 4, 18, 17, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170396994, 'comment_body': 'Combined, these seem like a `bisect` builtin function?', 'comment_created': datetime.datetime(2023, 4, 18, 18, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170410155, 'comment_body': ""Minor (naming):\r\n- Re naming, the 'current' has no meaning when reading this independently.\r\n- Based on an argument in another comment, this could be `stream_topic_from_message_id`?"", 'comment_created': datetime.datetime(2023, 4, 18, 18, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170414450, 'comment_body': 'Generally the index is not guaranteed to be complete (fully fetched) or in sync with all other data we get from the server (possibly including unreads), and that includes this element of it.\r\n\r\nIn particular, here we only update this data when we fetch messages for a topic narrow, typically when switching to it.\r\n\r\nI think this should be OK here, but it may be worth adding a docstring and test to make this explicit?\r\n\r\nIn terms of implementation, using the main `index[""messages""]` may be simpler?', 'comment_created': datetime.datetime(2023, 4, 18, 18, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170428865, 'comment_body': ""This variable needs removing, if we're not using it any longer."", 'comment_created': datetime.datetime(2023, 4, 18, 18, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170448562, 'comment_body': ""With the current implementation I wouldn't expect much difference, but it might be worth including a known PM/DM message id in a test case?"", 'comment_created': datetime.datetime(2023, 4, 18, 18, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170623507, 'comment_body': 'This `if` statement determines the condition when the first unread topic is to be returned (setting `next_topic = True` before the loop makes this happen). When we migrate from using the `last_unread_topic` to the `current_topic`, the situation where `current_topic` is not in the `unread_topics` list should no longer result in returning the first unread topic. It should instead return the next unread topic in the same stream or the next ones. This behavior is expressed in the test cases and code in the last commit.\r\n\r\nFor example, \r\nif `unread_topics` = `[(1, ""topic1""), (2, ""topic2""), (2, ""topic3"")]`,\r\nand `current_topic` = `(2, ""read_topic"")`,\r\nthen the next topic should be `(2, ""topic2"")` instead of starting from the first topic in the list ie. `(1, ""topic1"")`.\r\n\r\nSo the only condition where we want to start from the top of the `unread_list` is the one when the `current_topic` is `None`, that is, the message is either not a stream message or if the user is not narrowed onto a topic. This is the same as the current behavior in the webapp.', 'comment_created': datetime.datetime(2023, 4, 18, 22, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1170628024, 'comment_body': ""Yes, the `bisect` function and the `bisect_left` function only differ if the element already exists in the list. The conditional used eliminates this situation.\r\nAlso, `insort` could be used to combine these two lines of code. I'll make this change."", 'comment_created': datetime.datetime(2023, 4, 18, 22, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1193074964, 'comment_body': ""The project aims to use `Optional` instead of this `Union[..., None]` form.\r\n\r\nIt's unfortunate that doesn't fit it on one line though!"", 'comment_created': datetime.datetime(2023, 5, 14, 5, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193076570, 'comment_body': ""When there is a value like this, we've tended to place it in the parameter list as a default argument.\r\n\r\nYou can also refer to it later in the test as necessary, which you've done in one part."", 'comment_created': datetime.datetime(2023, 5, 14, 5, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193076743, 'comment_body': ""This test is since we don't have a truly empty index, so you're setting a different message_id?\r\n\r\nIt also seems to be a two-parter, so you're testing it's absent, then adding it. That would be good to encode in the test name if possible."", 'comment_created': datetime.datetime(2023, 5, 14, 5, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193076969, 'comment_body': 'The subject and stream_id that you have here would be good to isolate as variables - that makes it easier to read. In a parametrized test that could be `expected_subject` and so on; here they just take one value, so can be a test parameter with a default parameter, as per my other comment.', 'comment_created': datetime.datetime(2023, 5, 14, 5, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193079648, 'comment_body': 'I think I mentioned this in another review to you, but do you think this patching of the object is an improvement over setting the model attribute equal to a mock with a return value?\r\n\r\nWe can discuss this in the stream perhaps.', 'comment_created': datetime.datetime(2023, 5, 14, 5, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1207121441, 'comment_body': ""Looking at ```conftest.py``` now, I've decided to use the ```extra_stream_msg_template``` fixture instead, which makes it easier to read."", 'comment_created': datetime.datetime(2023, 5, 26, 17, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1209448891, 'comment_body': ""As long as this achieves the logic we require as defined by the tests, I don't see an issue with this.\r\n\r\nOne minor concern is that while we're not modifying the original unreads data, it's a little confusing that this statement appears to indicate that the current_topic is now an unread_topic. So I'd include reasoning why that is in the comment, or at least highlight this difference in behavior."", 'comment_created': datetime.datetime(2023, 5, 29, 16, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1209465288, 'comment_body': ""I don't recall how much of the PR was complete when I made this comment, but the part that's confusing is that you've removed that condition in one commit and then added it back with other handling code in another later commit.\r\n\r\nThat's why I raised this point, since at a surface level it seems like you're changing/breaking existing behavior in one way and then later fixing it (if in a different way). The reduced dependence on unread_topics is the kind of thing I would consider worth addressing in the commit summary.\r\n\r\n> This behavior is expressed in the test cases and code in the last commit.\r\n\r\nThis commit is a behavioral change, not just a refactor, correct? So it would be good to include test cases/changes for this behavior here if possible. Even better, tests don't cover the existing behavior so would be good to add in a *prior* commit, even if they demonstrate how unexpected/incorrect the behavior is. In this commit you can demonstrate the change in behavior via the change in tests.\r\n\r\nThat would make it clearer in what way the behavior is changing, that it's not losing some dependency upon the unread_topics in the algorithm.\r\n\r\nDepending upon the tests mapping to the algorithm changes, this commit *may* even split, if there is an initial change corresponding to the message state dependency followed by another improvement - but I'll leave that to you to determine."", 'comment_created': datetime.datetime(2023, 5, 29, 16, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1209560151, 'comment_body': 'I know this is a rename, but this is an example of the difference between the approaches I was discussing in the stream. Here `self.view` and `mid_col_view.model` are both Mocks.', 'comment_created': datetime.datetime(2023, 5, 29, 21, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1209560833, 'comment_body': 'A pure rename certainly warrants calling this out as refactor commit :)', 'comment_created': datetime.datetime(2023, 5, 29, 21, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1209562095, 'comment_body': 'Minor: This could be simpler if you hoist not just the index lookup, but also the message_id, which is used repeatedly in the logic.\r\n```\r\nmessage = self.index[""messages""].get(message_id)\r\nif message and ...', 'comment_created': datetime.datetime(2023, 5, 29, 21, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1209564985, 'comment_body': 'This is clearer with the standard fixture :+1:\r\n\r\nThat said, do we require the two parts to be in one test? Can we parametrize instead?', 'comment_created': datetime.datetime(2023, 5, 29, 21, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1214254911, 'comment_body': ""Yeah, I can parametrize this test. It'll make the part to be tested clearer. \r\nEdit: If parametrizing, then it would make sense to combine it with the `test_stream_topic_from_message_id` test, as an additional test case for a non-existent message. I'll make the change accordingly."", 'comment_created': datetime.datetime(2023, 6, 2, 11, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1217886737, 'comment_body': ""If we remove the `if current_topic is None` condition and add the `current_topic in unread_topics` condition instead, it will cause existing test cases where `current_topic` is `None` to fail. These test cases represent the case where the first unmuted unread topic is returned. Previously, this behavior was triggered when `last_unread_topic` was not in `unread_topics`. Now, this behavior is triggered when `current_topic` is `None`, indicating that the user is not focused on a stream message. \r\n\r\n> That's why I raised this point, since at a surface level it seems like you're changing/breaking existing behavior in one way and then later fixing it (if in a different way).\r\n\r\nTo make sure the test cases don't fail, while also ensuring that it doesn't break existing behavior only to fix it in a later commit, one way would be to combine the two commits. I'm not entirely sure if that would be okay, so I'd appreciate any feedback on this. \r\n\r\n\r\n> Even better, tests don't cover the existing behavior so would be good to add in a prior commit, even if they demonstrate how unexpected/incorrect the behavior is.\r\n\r\nI'll add tests which show the expected behavior in a prior commit, and then change the algorithm in the next commit so as to demonstrate that the changes resolve the incorrect behavior. This will result in the prior commit having some failing test cases, if I understood you correctly?"", 'comment_created': datetime.datetime(2023, 6, 5, 10, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}]","[{'commit_sha': 'b39e674b5c851668bce20bced19879c3809b8388', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fc646d5d30e1468cbc294cf938cd867ebb61aa2', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '480a96f56b2d9ba85bb9bb9890a49258248e2d12', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7383425594ff551f4a4476c55378405bfec524d', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92e43e890aadb8a84a6ae08322ace82b734d4107', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}]",Vishwesh Pillai,44305101,,User,,25,,30,31
1404969665,Use stream name instead of stream id to order unread topics in the next_unread_topic_from_message_id algorithm.,"<!-- See README for documentation, or ask in #zulip-terminal if unclear -->
### What does this PR do, and why?

This PR sorts the list of unread topics using stream name instead of stream id. This makes the order of moving between streams similar to that in the left panel.

### Outstanding aspect(s)    <!-- DELETE SECTION IF EMPTY -->
<!-- In what ways is this not fully implemented/functioning? Compared to a discussion/issue? -->
<!-- Do you not understand something? Are you unsure about a certain approach? Want feedback? -->

### External discussion & connections
<!-- [x] all that apply, specifying topic and adding numbers after # for issues/PRs -->
- [x] Discussed in **#zulip-terminal** in [`Improve algorithm for 'next unread topic' (n)`](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Improve.20algorithm.20for.20'next.20unread.20topic'.20.28n.29.20.23T1333.20.23T1356)
- [ ] Fully fixes #
- [x] Partially fixes issue #1332 
- [ ] Builds upon previous unmerged work in PR #
- [ ] Is a follow-up to work in PR #
- [ ] Requires merge of PR #
- [ ] Merge will enable work on #

### How did you test this?
<!-- [x] all that apply -->
- [x] Manually - Behavioral changes
- [ ] Manually - Visual changes
- [x] Adapting existing automated tests
- [x] Adding automated tests for new behavior (or missing tests)
- [ ] Existing automated tests should already cover this (*only a refactor of tested code*)

### Self-review checklist for each commit
- [x] It is a [minimal coherent idea](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development)
- [x] It has a commit summary following the [documented style](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development) (title & body)
- [x] It has a commit summary describing the  motivation and reasoning for the change
- [x] It individually passes linting and tests
- [x] It contains test additions for any new behavior
- [x] It flows clearly from a previous branch commit, and/or prepares for the next commit

### Visual changes    <!-- DELETE SECTION IF NO VISUAL CHANGE -->
<!-- Zulip tips at https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html -->
<!-- For video, try asciinema; after uploading, embed using
-->
<!-- NOTE: Attached videos/images will be clearer from smaller terminal windows -->
[![asciicast](https://asciinema.org/a/ML0Qj2WTSh5krcyCILzyzqdnv.svg)](https://asciinema.org/a/ML0Qj2WTSh5krcyCILzyzqdnv)
",True,1412,https://api.github.com/repos/zulip/zulip-terminal/pulls/1412,https://github.com/zulip/zulip-terminal/pull/1412,closed,91,3,4,2,3,4,3,0,"[{'name': 'size: L'}, {'name': 'PR ready to be merged'}, {'name': 'missing feature: user'}]",2023-06-23 12:10:44+00:00,2023-09-22 22:32:15+00:00,7899691.0,"91 days, 10:21:31","[{'comment_id': 1326387829, 'comment_body': ""NOTE: See another comment for what may well be an even simpler way of handling this, if you pass more specific data to the function. However, tidying up our use of the `streams` fixture would still be a great refactor to do or file an issue for!\r\n\r\nInstead of `streams_fixture` and casting, you might find `streams` useful instead. The current fixture doesn't have a great name, so could certainly be refactored first in that regard. The type of that fixture could also be improved, since as per the implementation of your new function, we now define `StreamData`.\r\n\r\nNote that currently since you're using `streams_fixture`, this is just the order that the original data happens to be in - it isn't sorted by stream name like `streams` is, so the test results would need to change."", 'comment_created': datetime.datetime(2023, 9, 14, 18, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1326592093, 'comment_body': ""Nit: Here topic is both the stream and topic, right? I'm aware this comes from previous code, but with the indexing it may be clearer to use something like `stream_topic`?"", 'comment_created': datetime.datetime(2023, 9, 14, 22, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1326614077, 'comment_body': ""You mention replacing `bisect` in the commit message in passing, but it would be useful to briefly indicate why.\r\n\r\nFor example, I initially wondered if you were fixing a separate bug that belonged in a different commit, until rereading our discussion on czo - `sort_unread_topics` always generates a new list, but using it in both places means the key function is consistent? I assume that was the problem from before?\r\n\r\nGiven this approach does a full resort and generates a whole new list, which I understood to be the reason you preferred `bisect` previously, that caveat could also be mentioned.\r\n\r\nTo be clear, I'm not suggesting rewriting this - it appears to work fine, and could be refactored later if necessary."", 'comment_created': datetime.datetime(2023, 9, 14, 23, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1326621367, 'comment_body': ""I commented elsewhere that you could use the `streams` fixture in your test, but another approach would be to only pass the data you require into this function, ie. the ordered list of stream ids. That could make it simpler to test, and if calling the function multiple times then we don't need to generate this list more than once."", 'comment_created': datetime.datetime(2023, 9, 14, 23, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '6d0caba7e22d937fed6bdb04e1bed2537707dd7a', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '170515245b2f61f66b26fb96431d1f8f62a924d3', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}]",Vishwesh Pillai,44305101,,User,,25,,30,31
1289891529,Improve algorithm for 'next unread topic' (n) to use current message state,"<!-- See README for documentation, or ask in #zulip-terminal if unclear -->
### What does this PR do, and why?
This PR improves the algorithm for the 'next unread topic'  method used as the 'n' keybinding. It replaces the use of the last unread topic with the topic of the currently selected message to determine the next unread topic to cycle to. 


<!--- ### Outstanding aspect(s)    <!-- DELETE SECTION IF EMPTY -->
<!-- In what ways is this not fully implemented/functioning? Compared to a discussion/issue? -->
<!-- Do you not understand something? Are you unsure about a certain approach? Want feedback? -->

### External discussion & connections
<!-- [x] all that apply, specifying topic and adding numbers after # for issues/PRs -->
- [x] Discussed in **#zulip-terminal** in [Improve algorithm for 'next unread topic' (n)](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Improve.20algorithm.20for.20'next.20unread.20topic'.20.28n.29.20.23T1333.20.23T1356)
- [x] Fully fixes #1333
- [ ] Partially fixes issue #
- [ ] Builds upon previous unmerged work in PR #
- [ ] Is a follow-up to work in PR #
- [ ] Requires merge of PR #
- [ ] Merge will enable work on #

### How did you test this?
<!-- [x] all that apply -->
- [x] Manually - Behavioral changes
- [x] Manually - Visual changes
- [x] Adapting existing automated tests
- [x] Adding automated tests for new behavior (or missing tests)
- [ ] Existing automated tests should already cover this (*only a refactor of tested code*)

### Self-review checklist for each commit
- [x] It is a [minimal coherent idea](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development)
- [x] It has a commit summary following the [documented style](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development) (title & body)
- [x] It has a commit summary describing the  motivation and reasoning for the change
- [x] It individually passes linting and tests
- [x] It contains test additions for any new behavior
- [x] It flows clearly from a previous branch commit, and/or prepares for the next commit

### Visual changes    <!-- DELETE SECTION IF NO VISUAL CHANGE -->
<!-- Zulip tips at https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html -->
<!-- For video, try asciinema; after uploading, embed using
[![yourtitle](https://asciinema.org/a/<id>.png)](https://asciinema.org/a/<id>)
-->
[![Demo](https://asciinema.org/a/XFCM5cH7W0FHaTNbkj1dGQ71S.svg)](https://asciinema.org/a/XFCM5cH7W0FHaTNbkj1dGQ71S)",True,1356,https://api.github.com/repos/zulip/zulip-terminal/pulls/1356,https://github.com/zulip/zulip-terminal/pull/1356,closed,151,23,4,5,10,37,2,0,"[{'name': 'size: XL'}, {'name': 'missing feature: user'}]",2023-03-25 02:58:14+00:00,2023-08-16 03:45:43+00:00,12444449.0,"144 days, 0:47:29","[{'comment_id': 1157828480, 'comment_body': ""I agree this makes the logic explicit, but adding a docstring here may be useful here to explain what the `None` response signifies, rather than just at the (currently only one) point of use.\r\n\r\nThis code may be changed later, but note since you return early, you can place the later code at the same level, and just add the conditional above it. That makes it explicit that this is either an optimization or a specific code change; it's an extra check, so I hope to see what that means for later :)"", 'comment_created': datetime.datetime(2023, 4, 4, 22, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157832897, 'comment_body': ""Did you investigate what the '2 other cases' represented, given the comment is removed?"", 'comment_created': datetime.datetime(2023, 4, 4, 22, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157836751, 'comment_body': ""I know this is existing code and tests, and shouldn't change behavior (and doesn't seem to), but does this represent the case of continuing unread messages in the same topic?\r\n\r\nI'm mainly interested due to the behavior in `--explore` mode, which I expected to need a special case to handle always moving to the next topic (since nothing is read) but which behaves OK previously and after this."", 'comment_created': datetime.datetime(2023, 4, 4, 22, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157840961, 'comment_body': ""This is a good preparatory commit, though see my overall feedback.\r\n\r\nSince we have multiple classes in this file, it'd be useful to note which class is gaining this method, in the commit title ideally, or at least the text.\r\n\r\nI don't see a test for this?"", 'comment_created': datetime.datetime(2023, 4, 4, 22, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157847183, 'comment_body': ""Overall, this seems to crash from DMs, which I'm not really surprised about, depending on how you use the result.\r\n\r\nMinor: This would be clearer if you returned the value directly, or otherwise the default later."", 'comment_created': datetime.datetime(2023, 4, 4, 23, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157856282, 'comment_body': ""According to the current function typing, this would never trigger, so something is wrong here or in the typing.\r\n\r\nIs the `None` case the only situation we might expect on this particular line?\r\nWe've gone from the 'current topic' not being unread, to it being explicitly None, which is a subset of the previous check."", 'comment_created': datetime.datetime(2023, 4, 4, 23, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157866416, 'comment_body': ""While this is OK as it is, I wonder if it might be simpler to split this commit somehow, maybe even temporarily storing the state in the view - though that seems rather artificial. However, that would allow you to focus on the model method and the state it's coupled to, then use the new helper method in the next commit.\r\n\r\nAs an example here, the multiple moving parts might relate to how you've not removed the model state."", 'comment_created': datetime.datetime(2023, 4, 4, 23, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157886088, 'comment_body': ""This looks like the part of the conditional that you neglected in the previous commit?\r\n\r\nI'll look again another time through the additional tests you've added, but applying the equivalent of the previous conditional appears to pass those tests - and looks much simpler.\r\n\r\nI'm not sure if you had other tests planned, which this was intended to satisfy further?"", 'comment_created': datetime.datetime(2023, 4, 5, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1157894690, 'comment_body': ""For information only at this point:\r\n\r\nWriting the function call parameter like this is perfectly valid, and makes it clear on what basis we're getting the next topic. However, this seems like a prime candidate for renaming the function to be more clear - except that we may wish to update the name in the short term to take into account other aspects and change it again.\r\n\r\nBy renaming the function, I'm mainly referring to making it clear when you call it that the first argument is the context, eg. literally just adding `_from` to the name, and possibly adding a required kwarg of `topic` (if it ended up being multiple)."", 'comment_created': datetime.datetime(2023, 4, 5, 0, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1159457724, 'comment_body': ""Yeah, I assumed that the 2 cases were the two just below this one. Both of those represented cases where the function is expected to return None (not narrowing to any topic), and I decided to extend the behavior to this case, since the code then narrows to the same topic as the current topic which produces no change.\r\n\r\nTesting the code a bit more now, I see that changing the expected value to be None if the last unread topic is the same as topic to be returned results in not narrowing to the topic if the currently focused message is in a different topic. This is not an issue after the addition of using the current topic, as such a case is not possible there. I'll modify the commit structure and code to revert this test case to original and then modify it after the commit that adds current topic to the function."", 'comment_created': datetime.datetime(2023, 4, 6, 8, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1159479964, 'comment_body': ""This code wanted to test some additional functionality, but which were not expressed in the newly added testcases. I'll modify them to include it"", 'comment_created': datetime.datetime(2023, 4, 6, 8, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1160186660, 'comment_body': ""I guess this does not represent the case you're talking about, since the current function only determines the next topic to narrow to, and not the next message. The expected behavior of the 'n' hotkey only seems to be to narrow to the next topic with unread messages, and it is not necessary to read through all unread messages in the current topic before doing so.\r\n \r\nExplore mode is an interesting feature. As I mentioned above about the expected behavior of the 'n' hotkey, not reading the messages should not affect it, I suppose. Please correct me if I'm wrong in my understanding of the expected behavior."", 'comment_created': datetime.datetime(2023, 4, 6, 19, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1163489556, 'comment_body': 'Right, this is fine, I was simply surprised reading it :)', 'comment_created': datetime.datetime(2023, 4, 12, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170369879, 'comment_body': ""Should this retain the `not in unread_topics` condition?\r\n(see other comment - I'd expect removing that to break the existing tests, if they're good enough! maybe we're missing an existing situation?)"", 'comment_created': datetime.datetime(2023, 4, 18, 17, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170377693, 'comment_body': ""I like this separate refactor - you might like to add that prefix to the commit title.\r\n\r\nFor the rename the `get_` feels unnecessary. I'm not sure about the rest of the name, it depends how we want to call it, and whether the 'stream' part is implied eg.\r\n- `next_unread_topic_from_message_id(current_id)`\r\n- `next_unread_topic_from(message_id=current_id)`\r\n- `next_unread_stream_topic_from_message_id(id)`\r\n- ..."", 'comment_created': datetime.datetime(2023, 4, 18, 17, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170390260, 'comment_body': ""Following up on this earlier comment: (see another comment in this review cycle)\r\n\r\nIs there a reason you didn't retain this part of the conditional in the earlier commit?\r\n\r\nI understand if you're fixing/improving behavior here by splitting the conditional and adding more tests."", 'comment_created': datetime.datetime(2023, 4, 18, 17, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170396994, 'comment_body': 'Combined, these seem like a `bisect` builtin function?', 'comment_created': datetime.datetime(2023, 4, 18, 18, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170410155, 'comment_body': ""Minor (naming):\r\n- Re naming, the 'current' has no meaning when reading this independently.\r\n- Based on an argument in another comment, this could be `stream_topic_from_message_id`?"", 'comment_created': datetime.datetime(2023, 4, 18, 18, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170414450, 'comment_body': 'Generally the index is not guaranteed to be complete (fully fetched) or in sync with all other data we get from the server (possibly including unreads), and that includes this element of it.\r\n\r\nIn particular, here we only update this data when we fetch messages for a topic narrow, typically when switching to it.\r\n\r\nI think this should be OK here, but it may be worth adding a docstring and test to make this explicit?\r\n\r\nIn terms of implementation, using the main `index[""messages""]` may be simpler?', 'comment_created': datetime.datetime(2023, 4, 18, 18, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170428865, 'comment_body': ""This variable needs removing, if we're not using it any longer."", 'comment_created': datetime.datetime(2023, 4, 18, 18, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170448562, 'comment_body': ""With the current implementation I wouldn't expect much difference, but it might be worth including a known PM/DM message id in a test case?"", 'comment_created': datetime.datetime(2023, 4, 18, 18, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170623507, 'comment_body': 'This `if` statement determines the condition when the first unread topic is to be returned (setting `next_topic = True` before the loop makes this happen). When we migrate from using the `last_unread_topic` to the `current_topic`, the situation where `current_topic` is not in the `unread_topics` list should no longer result in returning the first unread topic. It should instead return the next unread topic in the same stream or the next ones. This behavior is expressed in the test cases and code in the last commit.\r\n\r\nFor example, \r\nif `unread_topics` = `[(1, ""topic1""), (2, ""topic2""), (2, ""topic3"")]`,\r\nand `current_topic` = `(2, ""read_topic"")`,\r\nthen the next topic should be `(2, ""topic2"")` instead of starting from the first topic in the list ie. `(1, ""topic1"")`.\r\n\r\nSo the only condition where we want to start from the top of the `unread_list` is the one when the `current_topic` is `None`, that is, the message is either not a stream message or if the user is not narrowed onto a topic. This is the same as the current behavior in the webapp.', 'comment_created': datetime.datetime(2023, 4, 18, 22, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1170628024, 'comment_body': ""Yes, the `bisect` function and the `bisect_left` function only differ if the element already exists in the list. The conditional used eliminates this situation.\r\nAlso, `insort` could be used to combine these two lines of code. I'll make this change."", 'comment_created': datetime.datetime(2023, 4, 18, 22, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1193074964, 'comment_body': ""The project aims to use `Optional` instead of this `Union[..., None]` form.\r\n\r\nIt's unfortunate that doesn't fit it on one line though!"", 'comment_created': datetime.datetime(2023, 5, 14, 5, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193076570, 'comment_body': ""When there is a value like this, we've tended to place it in the parameter list as a default argument.\r\n\r\nYou can also refer to it later in the test as necessary, which you've done in one part."", 'comment_created': datetime.datetime(2023, 5, 14, 5, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193076743, 'comment_body': ""This test is since we don't have a truly empty index, so you're setting a different message_id?\r\n\r\nIt also seems to be a two-parter, so you're testing it's absent, then adding it. That would be good to encode in the test name if possible."", 'comment_created': datetime.datetime(2023, 5, 14, 5, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193076969, 'comment_body': 'The subject and stream_id that you have here would be good to isolate as variables - that makes it easier to read. In a parametrized test that could be `expected_subject` and so on; here they just take one value, so can be a test parameter with a default parameter, as per my other comment.', 'comment_created': datetime.datetime(2023, 5, 14, 5, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193079648, 'comment_body': 'I think I mentioned this in another review to you, but do you think this patching of the object is an improvement over setting the model attribute equal to a mock with a return value?\r\n\r\nWe can discuss this in the stream perhaps.', 'comment_created': datetime.datetime(2023, 5, 14, 5, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1207121441, 'comment_body': ""Looking at ```conftest.py``` now, I've decided to use the ```extra_stream_msg_template``` fixture instead, which makes it easier to read."", 'comment_created': datetime.datetime(2023, 5, 26, 17, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1209448891, 'comment_body': ""As long as this achieves the logic we require as defined by the tests, I don't see an issue with this.\r\n\r\nOne minor concern is that while we're not modifying the original unreads data, it's a little confusing that this statement appears to indicate that the current_topic is now an unread_topic. So I'd include reasoning why that is in the comment, or at least highlight this difference in behavior."", 'comment_created': datetime.datetime(2023, 5, 29, 16, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1209465288, 'comment_body': ""I don't recall how much of the PR was complete when I made this comment, but the part that's confusing is that you've removed that condition in one commit and then added it back with other handling code in another later commit.\r\n\r\nThat's why I raised this point, since at a surface level it seems like you're changing/breaking existing behavior in one way and then later fixing it (if in a different way). The reduced dependence on unread_topics is the kind of thing I would consider worth addressing in the commit summary.\r\n\r\n> This behavior is expressed in the test cases and code in the last commit.\r\n\r\nThis commit is a behavioral change, not just a refactor, correct? So it would be good to include test cases/changes for this behavior here if possible. Even better, tests don't cover the existing behavior so would be good to add in a *prior* commit, even if they demonstrate how unexpected/incorrect the behavior is. In this commit you can demonstrate the change in behavior via the change in tests.\r\n\r\nThat would make it clearer in what way the behavior is changing, that it's not losing some dependency upon the unread_topics in the algorithm.\r\n\r\nDepending upon the tests mapping to the algorithm changes, this commit *may* even split, if there is an initial change corresponding to the message state dependency followed by another improvement - but I'll leave that to you to determine."", 'comment_created': datetime.datetime(2023, 5, 29, 16, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1209560151, 'comment_body': 'I know this is a rename, but this is an example of the difference between the approaches I was discussing in the stream. Here `self.view` and `mid_col_view.model` are both Mocks.', 'comment_created': datetime.datetime(2023, 5, 29, 21, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1209560833, 'comment_body': 'A pure rename certainly warrants calling this out as refactor commit :)', 'comment_created': datetime.datetime(2023, 5, 29, 21, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1209562095, 'comment_body': 'Minor: This could be simpler if you hoist not just the index lookup, but also the message_id, which is used repeatedly in the logic.\r\n```\r\nmessage = self.index[""messages""].get(message_id)\r\nif message and ...', 'comment_created': datetime.datetime(2023, 5, 29, 21, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1209564985, 'comment_body': 'This is clearer with the standard fixture :+1:\r\n\r\nThat said, do we require the two parts to be in one test? Can we parametrize instead?', 'comment_created': datetime.datetime(2023, 5, 29, 21, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1214254911, 'comment_body': ""Yeah, I can parametrize this test. It'll make the part to be tested clearer. \r\nEdit: If parametrizing, then it would make sense to combine it with the `test_stream_topic_from_message_id` test, as an additional test case for a non-existent message. I'll make the change accordingly."", 'comment_created': datetime.datetime(2023, 6, 2, 11, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1217886737, 'comment_body': ""If we remove the `if current_topic is None` condition and add the `current_topic in unread_topics` condition instead, it will cause existing test cases where `current_topic` is `None` to fail. These test cases represent the case where the first unmuted unread topic is returned. Previously, this behavior was triggered when `last_unread_topic` was not in `unread_topics`. Now, this behavior is triggered when `current_topic` is `None`, indicating that the user is not focused on a stream message. \r\n\r\n> That's why I raised this point, since at a surface level it seems like you're changing/breaking existing behavior in one way and then later fixing it (if in a different way).\r\n\r\nTo make sure the test cases don't fail, while also ensuring that it doesn't break existing behavior only to fix it in a later commit, one way would be to combine the two commits. I'm not entirely sure if that would be okay, so I'd appreciate any feedback on this. \r\n\r\n\r\n> Even better, tests don't cover the existing behavior so would be good to add in a prior commit, even if they demonstrate how unexpected/incorrect the behavior is.\r\n\r\nI'll add tests which show the expected behavior in a prior commit, and then change the algorithm in the next commit so as to demonstrate that the changes resolve the incorrect behavior. This will result in the prior commit having some failing test cases, if I understood you correctly?"", 'comment_created': datetime.datetime(2023, 6, 5, 10, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}]","[{'commit_sha': 'b39e674b5c851668bce20bced19879c3809b8388', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fc646d5d30e1468cbc294cf938cd867ebb61aa2', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '480a96f56b2d9ba85bb9bb9890a49258248e2d12', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7383425594ff551f4a4476c55378405bfec524d', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92e43e890aadb8a84a6ae08322ace82b734d4107', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}]",Vishwesh Pillai,44305101,,User,,25,,30,31
1518382260,Add support for all streams minimal,"<!-- See README for documentation, or ask in #zulip-terminal if unclear -->
### What does this PR do, and why?
This PR is very similar to #1408 and #1419 and combines elements of both. This PR keeps the initial commits from #1419 but replaces the general accessor methods with only an attribute-specific necessary method i.e ""name"".


### Outstanding aspect(s)    <!-- DELETE SECTION IF EMPTY -->
<!-- In what ways is this not fully implemented/functioning? Compared to a discussion/issue? -->
<!-- Do you not understand something? Are you unsure about a certain approach? Want feedback? -->
- [x] Could add more attribute accessor methods (like ""color"")

### External discussion & connections
<!-- [x] all that apply, specifying topic and adding numbers after # for issues/PRs -->
- [x] Discussed in **#zulip-terminal** in [`Adding streams throws key error`](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Adding.20streams.20throws.20key.20error)
- [x] Fully fixes #816 
- [ ] Partially fixes issue #
- [x] Builds upon previous unmerged work in PR #1419 and PR #1408 
- [ ] Is a follow-up to work in PR #
- [ ] Requires merge of PR #
- [x] Merge will enable work on #1387 

### How did you test this?
<!-- [x] all that apply -->
- [ ] Manually - Behavioral changes
- [ ] Manually - Visual changes
- [x] Adapting existing automated tests
- [x] Adding automated tests for new behavior (or missing tests)
- [ ] Existing automated tests should already cover this (*only a refactor of tested code*)

### Self-review checklist for each commit
- [x] It is a [minimal coherent idea](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development)
- [x] It has a commit summary following the [documented style](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development) (title & body)
- [x] It has a commit summary describing the  motivation and reasoning for the change
- [x] It individually passes linting and tests
- [x] It contains test additions for any new behavior
- [x] It flows clearly from a previous branch commit, and/or prepares for the next commit

### Visual changes    <!-- DELETE SECTION IF NO VISUAL CHANGE -->
<!-- Zulip tips at https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html -->
<!-- For video, try asciinema; after uploading, embed using
[![yourtitle](https://asciinema.org/a/<id>.png)](https://asciinema.org/a/<id>)
-->
<!-- NOTE: Attached videos/images will be clearer from smaller terminal windows -->
",False,1430,https://api.github.com/repos/zulip/zulip-terminal/pulls/1430,https://github.com/zulip/zulip-terminal/pull/1430,open,538,138,13,8,2,31,3,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR awaiting update'}]",2023-09-17 03:30:34+00:00,,0.0,,"[{'comment_id': 1332306796, 'comment_body': ""I really like having these fixtures.\r\n\r\nHowever,\r\n- could we make the data from `initial_data` and these consistent?\r\n- if so, and if they were introduced earlier, could we use them to test that the initial data is converted successfully into the new Model attributes you added, in `Model.test_init`? You don't do that in the first commit as it stands, and these are the right type of data to use."", 'comment_created': datetime.datetime(2023, 9, 21, 0, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1332312720, 'comment_body': 'The only way to use this function with a subscription is with additional information and then casting?\r\n\r\nGiven that, perhaps set the return type to `Stream`? We can have a separate function, something like `_get_subscription_from_id`, specifically for subscription data. That will not need to search through the never-subscribed, and can provide a different error.\r\n\r\nNote that you only need what you have here for supporting the name and other core stream data, whereas eg. color will need Subscription.', 'comment_created': datetime.datetime(2023, 9, 21, 0, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1332324758, 'comment_body': ""I appreciate you including this test, but you're tying it directly to the implementation.\r\n\r\nIf we later change the implementation, such as use a cache, this will need changing, but we want the results to be the same.\r\n\r\nIf you remove the mocking and assert of the internal function being called, can this still work?\r\n\r\nNote that the model likely gets set up with lots of internal data already. We don't test that - see my other comment about test_init - but if it's consistent with the initial data then we should know what to expect here."", 'comment_created': datetime.datetime(2023, 9, 21, 0, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1332330331, 'comment_body': ""It's important to adjust the tests, not just to pass, but to represent what is now necessary. \r\n\r\nIn this commit you're using the function instead of the stream_dict for the name - so is it now necessary to set the stream_dict in the test?\r\n\r\nMany of the test changes need to be checked for this."", 'comment_created': datetime.datetime(2023, 9, 21, 1, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1332334446, 'comment_body': ""Based on the existing `stream_id_from_name`, let's drop the `get_`."", 'comment_created': datetime.datetime(2023, 9, 21, 1, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1332340109, 'comment_body': ""I think I noted somewhere that it's worth including here that it wasn't actively used by us (or the web app even?), and introduced at some other ZFL?"", 'comment_created': datetime.datetime(2023, 9, 21, 1, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1332342767, 'comment_body': ""It's good that this commit focuses on the stream/subscription migration, but\r\n- it doesn't seem that the color is important to the test(s)?\r\n- that could make this transition smaller/simpler\r\n- can we replace the stream_dict code by setting the return_value in the model, in the later commits? (if we don't already)"", 'comment_created': datetime.datetime(2023, 9, 21, 1, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1335392538, 'comment_body': 'If we do that, should I cast the `subscribed` and `unsubscribed` streams returned by this method to `Stream`? That might make the usage of this method clearer too, ie. to only access stream properties (and not subscription properties) from the returned stream.', 'comment_created': datetime.datetime(2023, 9, 25, 5, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1336431733, 'comment_body': ""For the third point, which function's return_value are you referring to?"", 'comment_created': datetime.datetime(2023, 9, 25, 22, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1336440212, 'comment_body': ""I could not find any documentation in the api docs or CZO discussion for this field. What was the field's original purpose, if you know? I can then add it's reason for removal in the commit text with more context."", 'comment_created': datetime.datetime(2023, 9, 25, 22, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1336553429, 'comment_body': ""It's in the API changelog (https://zulip.com/api/changelog), and I found it on czo to be zulip/zulip#15409."", 'comment_created': datetime.datetime(2023, 9, 26, 2, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339546161, 'comment_body': ""I meant that where you're moving to use the functions that access the name and color, instead of using stream_dict, can we now mock those functions and set the return value directly?\r\n\r\nEssentially, we want to ensure we move away from the stream_dict fixture (or equivalent manual dicts), in addition to directly accessing the model attribute."", 'comment_created': datetime.datetime(2023, 9, 28, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339548779, 'comment_body': ""A cast shouldn't be necessary once you have the two different functions - you don't have that in the latest version of the code you just pushed?"", 'comment_created': datetime.datetime(2023, 9, 28, 5, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339560062, 'comment_body': ""Nit: Good comment, but you've lost the 'new in ...' details."", 'comment_created': datetime.datetime(2023, 9, 28, 5, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339561936, 'comment_body': 'Nit: Also present 4.0/ZFL31 until then.', 'comment_created': datetime.datetime(2023, 9, 28, 5, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339563523, 'comment_body': ""Minor: I'd mention these changes to the fixtures in the commit text, even though we don't use them until now."", 'comment_created': datetime.datetime(2023, 9, 28, 5, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339565221, 'comment_body': ""With all of the extra test material, and the next commits tidying up only the existing types/stream_dict, this refactor seems somewhat separate from the feature you're adding.\r\n\r\nI'd consider splitting and shifting the new data addition until just before you start using them in the helper methods."", 'comment_created': datetime.datetime(2023, 9, 28, 5, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339577132, 'comment_body': 'Minor: Would be helpful to include some case ids here, to indicate that there is one test for a subscribed and one for unsubscribed stream?\r\n\r\nSimilarly for the other method.\r\n\r\nThese basically act as comments while reading the code.', 'comment_created': datetime.datetime(2023, 9, 28, 6, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339579258, 'comment_body': 'To ensure this remains the case in future, one can add an assert at the top of the test :)', 'comment_created': datetime.datetime(2023, 9, 28, 6, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339581528, 'comment_body': ""Nit: This is not strictly accurate, since 'not subscribed to' does not cover 'was subscribed to at one point'."", 'comment_created': datetime.datetime(2023, 9, 28, 6, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339596369, 'comment_body': 'Can this replace the stream_dict above?\r\n\r\nAlso, there is a test below this that is using a simple stream_dict instead of mocking the new function.\r\n\r\nIf some stream_dict lines can be removed instead (which I also comment elsewhere) they might be best combined into a trimming refactor later.', 'comment_created': datetime.datetime(2023, 9, 28, 6, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339610719, 'comment_body': 'It looks like another stream_dict can be removed while testing this object too.', 'comment_created': datetime.datetime(2023, 9, 28, 6, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339627195, 'comment_body': ""I've casted the stream_dict and the unsubscribed_streams to a `Stream` in the `_get_stream_from_id` in the latest commit, so that methods which use the `_get_stream_from_id` always access only the stream properties and not the subscription properties (which would then warrant the use of `_get_subscription_from_id`). "", 'comment_created': datetime.datetime(2023, 9, 28, 7, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1339666207, 'comment_body': 'I thought `get_all_stream_ids` was used elsewhere in previous iterations?\r\n\r\nIf it\'s just used in this one place, it may actually be simpler to wrap the conditional into a dedicated method for whether it\'s a ""valid stream"". There are currently two similar methods for this, one by name (`is_valid_stream`) and one by id (`is_user_subscribed_to_stream`).\r\n\r\nHowever, *both* of those existing functions handle subscriptions only right now. On that basis, my first thought would be to suggest extracting this helper out of the earlier commit, and instead refactoring and applying them more appropriately:\r\n- checking the uses of the existing methods - whether they should apply to streams or subscriptions\r\n- renaming the existing methods to be consistent (eg. `is_user_subscribed_to_stream_[id|name]`?)\r\n- adding a specific stream one if necessary - ie. a new `is_valid_stream_[id|name]`', 'comment_created': datetime.datetime(2023, 9, 28, 7, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339671431, 'comment_body': ""I'm wary of leaving the stream_dict in here, but I suspect this will be too much refactoring for now."", 'comment_created': datetime.datetime(2023, 9, 28, 7, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339674157, 'comment_body': ""Note how we're already using `is_valid_stream` here, vs using `all_stream_ids`, in reference to my other comment."", 'comment_created': datetime.datetime(2023, 9, 28, 7, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339678973, 'comment_body': 'Can we remove other stream_dict in this file? (in that same trimming refactor, perhaps)', 'comment_created': datetime.datetime(2023, 9, 28, 7, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339682699, 'comment_body': 'This stream is not an unsubscribed stream. A different test is fine to ensure the color is different, but an actual unsubscribed (not never) would be good to include.', 'comment_created': datetime.datetime(2023, 9, 28, 7, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339688838, 'comment_body': 'Again, this would be nice to avoid, but we might have to rethink the test.', 'comment_created': datetime.datetime(2023, 9, 28, 7, 53, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339700101, 'comment_body': ""If it's necessary to keep this line for the test, can the stream_dict be removed instead later, when we switch to the new function?"", 'comment_created': datetime.datetime(2023, 9, 28, 8, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339731083, 'comment_body': ""Ah right, but I don't remember seeing an explicit `cast()` to work around mypy - I assume this works in the type system since a Stream is a subset of a Subscription."", 'comment_created': datetime.datetime(2023, 9, 28, 8, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '5ef82860e7f74c26eb4c3f3f6c5b25eaa8174662', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1197a6ef63feb89244fdf901dab3eb636eb7b3e4', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe5e5f7da308afe51ce5747e154c63e783b6909f', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50241a654d3958e8e8cef94f90adb3b426160d70', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96da20b7ee721dbd03e5862eefd3a4df759b7d8e', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eeb7658eb8f089239937bc9b1b27bfec43970e7', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c53ee61f3119cf8719232aa9353d0b9ba6c32b32', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0c1a8d8229d46657e65d6aad85343e1e5130dbb', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}]",Vishwesh Pillai,44305101,,User,,25,,30,31
1384261225,Add support for all streams,"<!-- See README for documentation, or ask in #zulip-terminal if unclear -->
### What does this PR do, and why?
This PR adds support for unsubscribed streams and never_subscribed streams in ZT. It creates new data structures and accessor methods to access them. This PR is needed for further work on reducing stream related issues and adding support for stream (un)subscription.

### Outstanding aspect(s)    <!-- DELETE SECTION IF EMPTY -->
<!-- In what ways is this not fully implemented/functioning? Compared to a discussion/issue? -->
<!-- Do you not understand something? Are you unsure about a certain approach? Want feedback? -->

### External discussion & connections
<!-- [x] all that apply, specifying topic and adding numbers after # for issues/PRs -->
- [x] Discussed in **#zulip-terminal** in `Adding streams throws key error`
- [ ] Fully fixes #
- [x] Partially fixes issue #816 
- [ ] Builds upon previous unmerged work in PR #
- [ ] Is a follow-up to work in PR #
- [ ] Requires merge of PR #
- [x] Merge will enable work on #1387 

### How did you test this?
<!-- [x] all that apply -->
- [ ] Manually - Behavioral changes
- [ ] Manually - Visual changes
- [x] Adapting existing automated tests
- [x] Adding automated tests for new behavior (or missing tests)
- [ ] Existing automated tests should already cover this (*only a refactor of tested code*)

### Self-review checklist for each commit
- [x] It is a [minimal coherent idea](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development)
- [x] It has a commit summary following the [documented style](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development) (title & body)
- [x] It has a commit summary describing the  motivation and reasoning for the change
- [x] It individually passes linting and tests
- [x] It contains test additions for any new behavior
- [x] It flows clearly from a previous branch commit, and/or prepares for the next commit

### Visual changes    <!-- DELETE SECTION IF NO VISUAL CHANGE -->
<!-- Zulip tips at https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html -->
<!-- For video, try asciinema; after uploading, embed using
[![yourtitle](https://asciinema.org/a/<id>.png)](https://asciinema.org/a/<id>)
-->
<!-- NOTE: Attached videos/images will be clearer from smaller terminal windows -->
",False,1408,https://api.github.com/repos/zulip/zulip-terminal/pulls/1408,https://github.com/zulip/zulip-terminal/pull/1408,open,1123,161,15,18,2,31,4,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR blocks other PR'}, {'name': 'PR awaiting update'}]",2023-06-08 11:09:18+00:00,,0.0,,"[{'comment_id': 1225526312, 'comment_body': 'This was a personal setting.', 'comment_created': datetime.datetime(2023, 6, 10, 19, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225527532, 'comment_body': 'This commit looks like a reasonable place to clarify the type of stream_dict.\r\n(as per https://github.com/zulip/zulip-terminal/pull/1387#discussion_r1213654312)', 'comment_created': datetime.datetime(2023, 6, 10, 19, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225544355, 'comment_body': ""Did you find this started to fail a type check? We do set it explicitly to None!\r\n\r\nThe tricky thing here is that we reuse the existing assumed datastructures from the server for simplicity. For the purposes of loading the data it is `NotRequired` and is never `None`; once loaded it is expected to be present and may be `Optional`.\r\n\r\nMaybe `Union[NotRequired[int], Optional[int]]`? I've not tested for validity of that syntax, and I'm unsure if it would help with our typing beyond what you have.\r\n\r\nIn any case, assuming we include the Optional[int] then we should add a comment that the None part is ZT-specific."", 'comment_created': datetime.datetime(2023, 6, 10, 19, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225556454, 'comment_body': ""This seems accurate, and we may want to apply NotRequired more often in general - it wasn't an option until quite recently. However, the API notes indicate it was removed again in 6.0/133, so I guess we can include it commented-out as with in_home_view. (I think it's being replaced by the user-group approach for stream management)\r\n\r\nLike with the other change to date_created, I'd suggest mentioning these kinds of changes in the commit summary. This applies to any commit with a change which looks like only the move of code but also has minor adjustments that wouldn't necessarily be noted by a reviewer or someone looking at changes later.\r\n(git tools can show lines moved vs changed, but GitHub doesn't :/)\r\n\r\n**However**, given this and other changes in the fields, both that you've included and that seem present in the updated API docs, I'd suggest splitting those out into a separate commit - unless the changes are necessary for type-checking?"", 'comment_created': datetime.datetime(2023, 6, 10, 20, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225558829, 'comment_body': 'I was going to refer back to my suggestion in https://github.com/zulip/zulip-terminal/pull/1387#discussion_r1213660551 to inline this function since we only use it once, but we may need to reinitialize these values if we lose connection while ZT is running.', 'comment_created': datetime.datetime(2023, 6, 10, 20, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225559708, 'comment_body': ""Minor: Given our (new) distinction between streams and subscriptions, I'd maybe choose a different name for the loop comprehension variable here."", 'comment_created': datetime.datetime(2023, 6, 10, 20, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225561290, 'comment_body': ""It'd be easier to compare them if these were added near to the streams_fixture, which is currently much higher in the file :)"", 'comment_created': datetime.datetime(2023, 6, 10, 20, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225574838, 'comment_body': 'I suppose ""name"" could actually be absent? Some of your accessors use `.get` and others just index directly.\r\n\r\nI\'d be more interested here in knowing that this can fail if stream_id is not present.\r\n\r\nIn parallel to stream_id_from_name, maybe this should be stream_name_from_id?\r\n\r\nI\'m aware you\'ve added the other functions just above here, and the model has got rather large and disorganized, but it\'d be useful to keep all these similar stream/subscription accessor methods together, eg. near stream_id_from_name.', 'comment_created': datetime.datetime(2023, 6, 10, 20, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225594288, 'comment_body': ""For both this and is_valid_stream, they look more general implementations of the same algorithms (ie. to all streams), and seem accurate enough.\r\n\r\nIn the longer term I feel like we'll definitely want to simplify the accessors used externally, via caches or storing the data better."", 'comment_created': datetime.datetime(2023, 6, 10, 21, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1228203682, 'comment_body': 'This can now be typed as a `Dict` with `int` keys and `Subscription` values; reducing the use of `Any` will improve our type-checking.', 'comment_created': datetime.datetime(2023, 6, 13, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 1228209987, 'comment_body': 'Since the `is_web_public` key is guaranteed to be present and is typed as a bool in `api_types`, you can index the `dict` instead of using `get` so the return type for this method can be `bool`, consistent with its type in the `Stream` class.', 'comment_created': datetime.datetime(2023, 6, 13, 14, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 1228290835, 'comment_body': ""Since this method is only being used in the `StreamInfoView` and you haven't added the feature of viewing stream info for a never subscribed stream, can the base condition of returning `None` be avoided? The return value of this method is currently attached to a copy command, and having to copy a `None` to the clipboard doesn't seem appropriate. "", 'comment_created': datetime.datetime(2023, 6, 13, 15, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 1230578923, 'comment_body': ""I've made it so that the method raises a RuntimeError if the stream is not a subscription (or does not exist)."", 'comment_created': datetime.datetime(2023, 6, 15, 7, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1235650283, 'comment_body': 'can `assert_called_once_with` be used here?', 'comment_created': datetime.datetime(2023, 6, 20, 18, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1264157022, 'comment_body': 'Does this belong in the next commit?\r\n\r\nI also have two concerns about this fixture, if we keep it:\r\n- what is stream id? how is it used via the fixture?\r\n- the body is very similar to the function itself', 'comment_created': datetime.datetime(2023, 7, 14, 20, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264169653, 'comment_body': ""I've not checked your other PR, but are both of these helper functions rather than accessors? Are they both currently used internally only?"", 'comment_created': datetime.datetime(2023, 7, 14, 20, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264174978, 'comment_body': 'Where we make these changes, can we remove the stream_dict usage?', 'comment_created': datetime.datetime(2023, 7, 14, 21, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264176400, 'comment_body': 'Note that if we named these two methods similarly, the parameter name could be named similarly too.', 'comment_created': datetime.datetime(2023, 7, 14, 21, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264195646, 'comment_body': ""Could we adapt `get_other_subscribers_in_stream` instead?\r\n\r\nThat method could likely be simplified to only accept a stream_id, and then we might have something like the following?\r\n```\r\nsubscribers_to_stream_id(stream_id, *, include_self_if_subscribed:bool)\r\n```\r\n---\r\nAlso note that you're returning the internal data, which is fine if we plan to use it to modify it internally, but not if exposing it as read-only accessor."", 'comment_created': datetime.datetime(2023, 7, 14, 21, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264197182, 'comment_body': 'This function is unnecessary. The user will not need to do this, and we only update the date created in order to handle different server versions.', 'comment_created': datetime.datetime(2023, 7, 14, 21, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264198307, 'comment_body': 'This is already covered by `stream_access_type` itself, and is more general.', 'comment_created': datetime.datetime(2023, 7, 14, 21, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264202475, 'comment_body': ""The accessor here has more purpose - but only if we use it to wrap accessing the `.cached_retention_text` data, which is what is currently accessed externally :) That will require updating the code you introduced above this.\r\n\r\nWe already have the _get_stream_from_id helper, and there's only one place it's used, and that's inside the model - so I'm unconvinced this is necessary."", 'comment_created': datetime.datetime(2023, 7, 14, 21, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264208760, 'comment_body': ""Similarly to is_web_public, we already have a method for this, which you've updated to use this accessor.\r\n\r\nThere is no use of this data outside of the model in any case, other than through stream_access_type(), so there is no motivation for introducing this accessor."", 'comment_created': datetime.datetime(2023, 7, 14, 22, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264212403, 'comment_body': 'This existing UI code incorporates implicit checking of the server version, which would be better wrapped into the model under `get_stream_post_policy`, rather than the two functions introduced in this commit and the next.', 'comment_created': datetime.datetime(2023, 7, 14, 22, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264218456, 'comment_body': 'This change, and possibly others in this commit seem much more related to those earlier in the PR than here at the end?', 'comment_created': datetime.datetime(2023, 7, 14, 22, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264219013, 'comment_body': ""This suggests we haven't covered accessing the stream or subscription properties sufficiently?"", 'comment_created': datetime.datetime(2023, 7, 14, 22, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1276022360, 'comment_body': ""Yes, the part where we add the `date_created` key and set it to None fails the typecheck. Since we get the data from the server initially, mypy doesn't catch that `date_created` is not present. We could account for this by using `NotRequired[Optional[int]]` instead, but that would purely be for documentation since it passes the typecheck with just `Optional[int]`. I'll also add a comment."", 'comment_created': datetime.datetime(2023, 7, 27, 9, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1276160628, 'comment_body': ""Yeah, you're right, both are helper functions and are used internally only. I'll change the commit description to indicate that, and also maybe change the name for the `get_all_stream_ids` function to `_get_all_stream_ids`."", 'comment_created': datetime.datetime(2023, 7, 27, 11, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1280047590, 'comment_body': 'Resolved in #1419 :+1:', 'comment_created': datetime.datetime(2023, 8, 1, 2, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1280047784, 'comment_body': 'Resolved in #1419 :+1:', 'comment_created': datetime.datetime(2023, 8, 1, 2, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '80e33449d79e4ca9154dfaa1741c0140808b54ee', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82ed222edbae770c76fa3417dac587f47eecd851', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a8eb7f41c014198f789cb6703ecffd944fe540', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b51eae4ab2084bce93d9dc7f3790ba13866be186', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80e0d5ae1bd0c785a910333450fd07165ad710d9', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6ab397250aa3171518e2c10eb2a1b58232e31ed', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55d85606b8298ba1b305749561f9aea92e632927', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '023ea388bab1f265d2094680c8747c798fff76f8', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6282150013e6466e20c52f2061b39a56fb011978', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71d5bd0bd69d95a1614f4d9c4af1ce53b8ba8ff9', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a675771a22b68799bf2e3b72bf5b87cc8dfab1b', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f451244b94c16931c64870a21c2008a0278c9480', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d6e057cfc1ad0de25f99ed246c6a7394d79147d', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e5bd208afbc41b8b23780a420e9471dcb3cea11', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dee7e2bc370f029a78245f8c28c41483237d18d8', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e39bbe362967e18194e04596611428629b9ff5f2', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ca5ee6bcdb4d347f2ef7aa731265f4847a5bd03', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '308fa13c85cdc817c9fa93f47f9f1da899f71452', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}]",Vishwesh Pillai,44305101,,User,,25,,30,31
1451928529,Add support for all streams (more general accessor methods),"<!-- See README for documentation, or ask in #zulip-terminal if unclear -->
### What does this PR do, and why?
This PR adds support for unsubscribed streams and never_subscribed streams in ZT. It creates new data structures and general accessor methods to access them. This PR is needed for further work on reducing stream related issues and adding support for stream (un)subscription.
This PR is based heavily on the initial commits of #1408 with some slight changes and the generalization of the accessor methods.


### Outstanding aspect(s)    <!-- DELETE SECTION IF EMPTY -->
<!-- In what ways is this not fully implemented/functioning? Compared to a discussion/issue? -->
<!-- Do you not understand something? Are you unsure about a certain approach? Want feedback? -->
- Does the typing for the accessor methods look fine?

### External discussion & connections
<!-- [x] all that apply, specifying topic and adding numbers after # for issues/PRs -->
- [x] Discussed in **#zulip-terminal** in [`Adding streams throws key error`](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Adding.20streams.20throws.20key.20error)
- [x] Fully fixes #816 
- [ ] Partially fixes issue #
- [ ] Builds upon previous unmerged work in PR #
- [ ] Is a follow-up to work in PR #
- [ ] Requires merge of PR #
- [x] Merge will enable work on #1387 

### How did you test this?
<!-- [x] all that apply -->
- [x] Manually - Behavioral changes
- [x] Manually - Visual changes
- [x] Adapting existing automated tests
- [x] Adding automated tests for new behavior (or missing tests)
- [ ] Existing automated tests should already cover this (*only a refactor of tested code*)

### Self-review checklist for each commit
- [x] It is a [minimal coherent idea](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development)
- [x] It has a commit summary following the [documented style](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development) (title & body)
- [x] It has a commit summary describing the  motivation and reasoning for the change
- [ ] It individually passes linting and tests
- [ ] It contains test additions for any new behavior
- [x] It flows clearly from a previous branch commit, and/or prepares for the next commit

### Visual changes    <!-- DELETE SECTION IF NO VISUAL CHANGE -->
<!-- Zulip tips at https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html -->
<!-- For video, try asciinema; after uploading, embed using
[![yourtitle](https://asciinema.org/a/<id>.png)](https://asciinema.org/a/<id>)
-->
<!-- NOTE: Attached videos/images will be clearer from smaller terminal windows -->
",False,1419,https://api.github.com/repos/zulip/zulip-terminal/pulls/1419,https://github.com/zulip/zulip-terminal/pull/1419,open,358,40,5,6,1,7,2,0,"[{'name': 'size: XL'}, {'name': 'PR awaiting update'}]",2023-07-27 12:40:05+00:00,,0.0,,"[{'comment_id': 1280046556, 'comment_body': 'As per the other PR, note that this is the successor to `is_muted`, so should move too.', 'comment_created': datetime.datetime(2023, 8, 1, 2, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1280070702, 'comment_body': 'Worth noting why these removals are safe in the commit message.', 'comment_created': datetime.datetime(2023, 8, 1, 3, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1280159852, 'comment_body': 'Is this change strictly required/enforced by the new typing of stream_dict?', 'comment_created': datetime.datetime(2023, 8, 1, 6, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1280160532, 'comment_body': 'This may be a reasonable commit to use a fixed index via a variable, as in the other tests?', 'comment_created': datetime.datetime(2023, 8, 1, 6, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1280162781, 'comment_body': 'Accidental revert?', 'comment_created': datetime.datetime(2023, 8, 1, 6, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1280188659, 'comment_body': 'How well does this approach work in practice? Does this lead to typing errors, since somehow one has to map the result types to the property names?', 'comment_created': datetime.datetime(2023, 8, 1, 7, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1320462156, 'comment_body': 'Yes, the new typing makes it so that each item in the stream_dict has to be of the Subscription Typeddict type.', 'comment_created': datetime.datetime(2023, 9, 9, 2, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}]","[{'commit_sha': '29fe057222efcfddacbcd6cb3b4fab0b40c33bd1', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27ecc64c0f0a6f8cf47f2730375864d0a3d30b8f', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ced8ec95217618b3e8f4e658728dfc4cf97d8f0', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '311725acd5cb6b07b3ffa84006124da05bf77443', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ce1e82fe388f3b19363f7f5f826c374a87f7f1f', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa051b38f2e2daba884a927e3874c5f1c42530bf', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}]",Vishwesh Pillai,44305101,,User,,25,,30,31
1326261480,Handle (un)subscribe events,"<!-- See README for documentation, or ask in #zulip-terminal if unclear -->
### What does this PR do, and why?
This PR adds event handling for (un)subscribe events. Without event handling, ZT crashes
if the user narrows onto a message in a stream which is unsubscribed from. This happens mostly 
when a user is logged in from multiple clients, but can also occur if an admin unsubscribes the user.


### Outstanding aspect(s)    <!-- DELETE SECTION IF EMPTY -->
<!-- In what ways is this not fully implemented/functioning? Compared to a discussion/issue? -->
<!-- Do you not understand something? Are you unsure about a certain approach? Want feedback? -->
- [ ] Updated subscribed streams frequently have the wrong/default color. (This seems to be an issue of
ZT not loading the colors.)
- [x] ZT crashes when the currently narrowed message is unsubscribed from.
- [ ] Should we notify user of the new (un)subscription? If yes, then where?(As a popup or as a message in the footer)

### External discussion & connections
<!-- [x] all that apply, specifying topic and adding numbers after # for issues/PRs -->
- [x] Discussed in **#zulip-terminal** in `Adding streams throws key error`
- [x] Fully fixes #816
- [ ] Partially fixes issue #
- [x] Builds upon previous unmerged work in PR #1408 
- [ ] Is a follow-up to work in PR #
- [ ] Requires merge of PR #
- [ ] Merge will enable work on #

### How did you test this?
<!-- [x] all that apply -->
- [x] Manually - Behavioral changes
- [x] Manually - Visual changes
- [x] Adapting existing automated tests
- [x] Adding automated tests for new behavior (or missing tests)
- [ ] Existing automated tests should already cover this (*only a refactor of tested code*)

### Self-review checklist for each commit
- [x] It is a [minimal coherent idea](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development)
- [x] It has a commit summary following the [documented style](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development) (title & body)
- [x] It has a commit summary describing the  motivation and reasoning for the change
- [x] It individually passes linting and tests
- [x] It contains test additions for any new behavior
- [x] It flows clearly from a previous branch commit, and/or prepares for the next commit

### Visual changes    <!-- DELETE SECTION IF NO VISUAL CHANGE -->
<!-- Zulip tips at https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html -->
<!-- For video, try asciinema; after uploading, embed using
-->
[![Preview](https://asciinema.org/a/qSfrl15TUAozL0kmLAb6kmfim.svg)](https://asciinema.org/a/qSfrl15TUAozL0kmLAb6kmfim)
",False,1387,https://api.github.com/repos/zulip/zulip-terminal/pulls/1387,https://github.com/zulip/zulip-terminal/pull/1387,open,1327,204,15,22,2,16,3,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR needs review'}]",2023-04-24 23:08:53+00:00,,0.0,,"[{'comment_id': 1213305883, 'comment_body': ""I'm not sure if we'd keep this function as it is in light of my other comments on this commit, but I suspect the typing illustrates this is problematic if returned together, and could be so even with other lookup? Or is this mitigated if we type in such a way that a Subscription is-a Stream?\r\n\r\nA more involved but possibly cleaner approach to consider later may be to store all the Stream data separate to the *extra* Subscription data, ie. use ZT-specific data structure for the personal data, though we'd have to do additional data processing for that 🤷 The advantage would be to have a cache of all streams, and cache of personal data per streams (now-subscribed and was-subscribed), which could make lookup easier."", 'comment_created': datetime.datetime(2023, 6, 1, 15, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1213315313, 'comment_body': ""You have a sequence of commits for the refactoring right now, but I'd suggest grouping the refactoring per each new function you introduce, concluding with a rename of `stream_dict` :) I'd be keen to merge those commits as they are first, if you keep them together early in the branch (or split into another PR), since this encapsulation, renaming and stream-vs-subscription clarification should improve the code quality independently of the event/UI changes.\r\n\r\nFor this particular function I'd question its worth - it returns a mutable structure which is not typed precisely.\r\n\r\nInstead I'd explore specific properties that are accessed at each lookup into stream_dict, and what is minimally necessary. For example, perhaps returning individual properties would be sufficient, eg. `stream_property(some_id, property)` and similarly `subscription_property(...)`, potentially limiting the properties to a subset of values until we add more features (via Literal types and/or at runtime). In most/all cases that should limit accidental mutability.\r\n\r\nI'm not sure how many locations look up multiple stream/subscription properties, but I'd expect something like the above should be sufficient - I don't expect the multiple-property case to be overly frequent to motivate a more complex solution.\r\n(On a similar note, once this is complete, we could consider improving how the pinned/unpinned data is handled, since it is something of a cached structure for multiple properties)"", 'comment_created': datetime.datetime(2023, 6, 1, 15, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1213317809, 'comment_body': ""It's likely clearer if we simply term this a `Stream`, with a `Subscription` being an extended form of it."", 'comment_created': datetime.datetime(2023, 6, 1, 15, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1213319142, 'comment_body': 'This Unsubscribed form appears to be identical to a `Subscription`?', 'comment_created': datetime.datetime(2023, 6, 1, 15, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1213325906, 'comment_body': ""This is not returning a 'stream', it's returning a stream or a subscription, as per the type :)\r\n\r\nThere may be cases where this is warranted, but I suspect the calling site either is interested in knowing subscription information, or general stream information - so I'd suggest we likely want dedicated methods for each. For example a stream doesn't have a color property, so should error on that request (and ideally fail via typing too), and each set of methods will have different bounds on valid stream ids."", 'comment_created': datetime.datetime(2023, 6, 1, 15, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1213646980, 'comment_body': 'I agree this needs to occur with new subscriptions too, so extracting it into a function is good :+1:\r\n\r\nIn terms of commit flow, this is only necessary once we start handling the events, so it would be clearer if this commit was closer to the point where it was required.\r\n\r\nNote that right now this function is between two methods that are connected, and this does not (directly) connect to either.', 'comment_created': datetime.datetime(2023, 6, 1, 20, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1213654312, 'comment_body': 'A few points:\r\n- It would be great to move towards the same naming that we have below, and perhaps with a `_` prefix to signify the privacy - `_unsubscribed_streams` is more legible\r\n- See my previous point about the types, but also we can type stream_dict similarly now\r\n- Once the accessors are in place we can rename stream_dict to something better too :)', 'comment_created': datetime.datetime(2023, 6, 1, 20, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1213660551, 'comment_body': ""While this is made more verbose by the parameter and attribute names, this would likely be much clearer using dict comprehensions.\r\n\r\nThe main reason we don't inline other stream setup is I believe that we already extracted it into the subscribe method and we'll call it in events - this is not something we'll reuse, so may be clearer to inline into the initializer?"", 'comment_created': datetime.datetime(2023, 6, 1, 20, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1213662586, 'comment_body': ""We should also update the comment about the source for this, since this is no longer just 'subscriptions'."", 'comment_created': datetime.datetime(2023, 6, 1, 20, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1213682577, 'comment_body': ""This looks a reasonable conditional, if treating this just as a stream-lookup method (not a subscription-lookup method).\r\n\r\nNote how we could cache an 'all streams' data structure, as an alternative to the raw data from the API, to make these kinds of lookups easier - but as I mention elsewhere, let's maybe leave that alternative for later :)"", 'comment_created': datetime.datetime(2023, 6, 1, 21, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1213844180, 'comment_body': ""A few points on the methods in these refactoring commits as they stand:\r\n- a new function that is *only* used internally to a class/module can be useful, but a leading underscore and including the function in the same commit as its substitution can be important to communicate understanding and motivation for the overall change.\r\n- get_all_streams appears to also be used outside of the model, though the mutability it enables appears unnecessary there, and another more specific method that returns a non-mutable value would suffice\r\n- if get_all_streams is warranted and accessed frequently, it *could* suggest a permanent additional data structure/cache (see another comment), or an alternative one? That will be easier to determine when the function+substitution are in the same commit\r\n- methods used externally that support mutating data should be explicit (in name), or else only used internally, and may not be necessary internally if a dict lookup is simple\r\n\r\nNote that strictly this commit and possibly others are *not* a refactor, since there is a functional change to now process the data of *all* streams.\r\n\r\nTherefore more generally, not just for this introduced method, it may be clearer to encapsulate access to stream_dict *first*. In those early method(s)/commit(s), I expect those would be *subscription*-focused in the first instance, since that's all we are storing at this point. Then after you introduce the other data you can also introduce accessors for streams in general."", 'comment_created': datetime.datetime(2023, 6, 2, 2, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1214926878, 'comment_body': ""Minor: We need to be more consistent about this, but we could leave name commented out since we don't use it, with a comment to that effect?"", 'comment_created': datetime.datetime(2023, 6, 2, 22, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1214940686, 'comment_body': ""Minor: since the original line is expanded into a 'synchronize subscriptions' block, it seems clearer to have the stream_id extracted earlier?\r\n\r\nThat could be achieved by simply separating by a blank line, but the rest of this function could benefit from the use of `stream_id` in any case?"", 'comment_created': datetime.datetime(2023, 6, 2, 23, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1214946664, 'comment_body': ""I understand that this is aimed at ensuring that the stream 'dicts' are synchronized, and corresponds to the code in the other function, but it seems strange included within the subscription-removal commit, since nothing is calling them except the initial call to this function, when the synchronization *should* be a no-op.\r\n\r\nIt may be clearer to consider adding and removing subscriptions separately, commit-wise?"", 'comment_created': datetime.datetime(2023, 6, 2, 23, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1214953699, 'comment_body': 'Readability: for comparison with the subscription function, this should maybe go at the top of the loop?', 'comment_created': datetime.datetime(2023, 6, 2, 23, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1214955370, 'comment_body': 'These two lines here suggest these calls may belong in _subscribe_to_streams?', 'comment_created': datetime.datetime(2023, 6, 2, 23, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '80e33449d79e4ca9154dfaa1741c0140808b54ee', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82ed222edbae770c76fa3417dac587f47eecd851', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a8eb7f41c014198f789cb6703ecffd944fe540', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b51eae4ab2084bce93d9dc7f3790ba13866be186', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80e0d5ae1bd0c785a910333450fd07165ad710d9', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6ab397250aa3171518e2c10eb2a1b58232e31ed', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55d85606b8298ba1b305749561f9aea92e632927', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '023ea388bab1f265d2094680c8747c798fff76f8', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6282150013e6466e20c52f2061b39a56fb011978', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71d5bd0bd69d95a1614f4d9c4af1ce53b8ba8ff9', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a675771a22b68799bf2e3b72bf5b87cc8dfab1b', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f451244b94c16931c64870a21c2008a0278c9480', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d6e057cfc1ad0de25f99ed246c6a7394d79147d', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e5bd208afbc41b8b23780a420e9471dcb3cea11', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dee7e2bc370f029a78245f8c28c41483237d18d8', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e39bbe362967e18194e04596611428629b9ff5f2', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ca5ee6bcdb4d347f2ef7aa731265f4847a5bd03', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '308fa13c85cdc817c9fa93f47f9f1da899f71452', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '819a0652be8dac483b820bdd82bf71ff535d5115', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf2f006b5aba5965f00c291cc8ffa8b9103580de', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3b5bb6a34a041eab81544a3ba4bf8dd47d57331', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03aedca9a78a19790f7276b8ba610d44b9e3efec', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}]",Vishwesh Pillai,44305101,,User,,25,,30,31
1384261225,Add support for all streams,"<!-- See README for documentation, or ask in #zulip-terminal if unclear -->
### What does this PR do, and why?
This PR adds support for unsubscribed streams and never_subscribed streams in ZT. It creates new data structures and accessor methods to access them. This PR is needed for further work on reducing stream related issues and adding support for stream (un)subscription.

### Outstanding aspect(s)    <!-- DELETE SECTION IF EMPTY -->
<!-- In what ways is this not fully implemented/functioning? Compared to a discussion/issue? -->
<!-- Do you not understand something? Are you unsure about a certain approach? Want feedback? -->

### External discussion & connections
<!-- [x] all that apply, specifying topic and adding numbers after # for issues/PRs -->
- [x] Discussed in **#zulip-terminal** in `Adding streams throws key error`
- [ ] Fully fixes #
- [x] Partially fixes issue #816 
- [ ] Builds upon previous unmerged work in PR #
- [ ] Is a follow-up to work in PR #
- [ ] Requires merge of PR #
- [x] Merge will enable work on #1387 

### How did you test this?
<!-- [x] all that apply -->
- [ ] Manually - Behavioral changes
- [ ] Manually - Visual changes
- [x] Adapting existing automated tests
- [x] Adding automated tests for new behavior (or missing tests)
- [ ] Existing automated tests should already cover this (*only a refactor of tested code*)

### Self-review checklist for each commit
- [x] It is a [minimal coherent idea](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development)
- [x] It has a commit summary following the [documented style](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development) (title & body)
- [x] It has a commit summary describing the  motivation and reasoning for the change
- [x] It individually passes linting and tests
- [x] It contains test additions for any new behavior
- [x] It flows clearly from a previous branch commit, and/or prepares for the next commit

### Visual changes    <!-- DELETE SECTION IF NO VISUAL CHANGE -->
<!-- Zulip tips at https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html -->
<!-- For video, try asciinema; after uploading, embed using
[![yourtitle](https://asciinema.org/a/<id>.png)](https://asciinema.org/a/<id>)
-->
<!-- NOTE: Attached videos/images will be clearer from smaller terminal windows -->
",False,1408,https://api.github.com/repos/zulip/zulip-terminal/pulls/1408,https://github.com/zulip/zulip-terminal/pull/1408,open,1123,161,15,18,2,31,4,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR blocks other PR'}, {'name': 'PR awaiting update'}]",2023-06-08 11:09:18+00:00,,0.0,,"[{'comment_id': 1225526312, 'comment_body': 'This was a personal setting.', 'comment_created': datetime.datetime(2023, 6, 10, 19, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225527532, 'comment_body': 'This commit looks like a reasonable place to clarify the type of stream_dict.\r\n(as per https://github.com/zulip/zulip-terminal/pull/1387#discussion_r1213654312)', 'comment_created': datetime.datetime(2023, 6, 10, 19, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225544355, 'comment_body': ""Did you find this started to fail a type check? We do set it explicitly to None!\r\n\r\nThe tricky thing here is that we reuse the existing assumed datastructures from the server for simplicity. For the purposes of loading the data it is `NotRequired` and is never `None`; once loaded it is expected to be present and may be `Optional`.\r\n\r\nMaybe `Union[NotRequired[int], Optional[int]]`? I've not tested for validity of that syntax, and I'm unsure if it would help with our typing beyond what you have.\r\n\r\nIn any case, assuming we include the Optional[int] then we should add a comment that the None part is ZT-specific."", 'comment_created': datetime.datetime(2023, 6, 10, 19, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225556454, 'comment_body': ""This seems accurate, and we may want to apply NotRequired more often in general - it wasn't an option until quite recently. However, the API notes indicate it was removed again in 6.0/133, so I guess we can include it commented-out as with in_home_view. (I think it's being replaced by the user-group approach for stream management)\r\n\r\nLike with the other change to date_created, I'd suggest mentioning these kinds of changes in the commit summary. This applies to any commit with a change which looks like only the move of code but also has minor adjustments that wouldn't necessarily be noted by a reviewer or someone looking at changes later.\r\n(git tools can show lines moved vs changed, but GitHub doesn't :/)\r\n\r\n**However**, given this and other changes in the fields, both that you've included and that seem present in the updated API docs, I'd suggest splitting those out into a separate commit - unless the changes are necessary for type-checking?"", 'comment_created': datetime.datetime(2023, 6, 10, 20, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225558829, 'comment_body': 'I was going to refer back to my suggestion in https://github.com/zulip/zulip-terminal/pull/1387#discussion_r1213660551 to inline this function since we only use it once, but we may need to reinitialize these values if we lose connection while ZT is running.', 'comment_created': datetime.datetime(2023, 6, 10, 20, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225559708, 'comment_body': ""Minor: Given our (new) distinction between streams and subscriptions, I'd maybe choose a different name for the loop comprehension variable here."", 'comment_created': datetime.datetime(2023, 6, 10, 20, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225561290, 'comment_body': ""It'd be easier to compare them if these were added near to the streams_fixture, which is currently much higher in the file :)"", 'comment_created': datetime.datetime(2023, 6, 10, 20, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225574838, 'comment_body': 'I suppose ""name"" could actually be absent? Some of your accessors use `.get` and others just index directly.\r\n\r\nI\'d be more interested here in knowing that this can fail if stream_id is not present.\r\n\r\nIn parallel to stream_id_from_name, maybe this should be stream_name_from_id?\r\n\r\nI\'m aware you\'ve added the other functions just above here, and the model has got rather large and disorganized, but it\'d be useful to keep all these similar stream/subscription accessor methods together, eg. near stream_id_from_name.', 'comment_created': datetime.datetime(2023, 6, 10, 20, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1225594288, 'comment_body': ""For both this and is_valid_stream, they look more general implementations of the same algorithms (ie. to all streams), and seem accurate enough.\r\n\r\nIn the longer term I feel like we'll definitely want to simplify the accessors used externally, via caches or storing the data better."", 'comment_created': datetime.datetime(2023, 6, 10, 21, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1228203682, 'comment_body': 'This can now be typed as a `Dict` with `int` keys and `Subscription` values; reducing the use of `Any` will improve our type-checking.', 'comment_created': datetime.datetime(2023, 6, 13, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 1228209987, 'comment_body': 'Since the `is_web_public` key is guaranteed to be present and is typed as a bool in `api_types`, you can index the `dict` instead of using `get` so the return type for this method can be `bool`, consistent with its type in the `Stream` class.', 'comment_created': datetime.datetime(2023, 6, 13, 14, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 1228290835, 'comment_body': ""Since this method is only being used in the `StreamInfoView` and you haven't added the feature of viewing stream info for a never subscribed stream, can the base condition of returning `None` be avoided? The return value of this method is currently attached to a copy command, and having to copy a `None` to the clipboard doesn't seem appropriate. "", 'comment_created': datetime.datetime(2023, 6, 13, 15, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 1230578923, 'comment_body': ""I've made it so that the method raises a RuntimeError if the stream is not a subscription (or does not exist)."", 'comment_created': datetime.datetime(2023, 6, 15, 7, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1235650283, 'comment_body': 'can `assert_called_once_with` be used here?', 'comment_created': datetime.datetime(2023, 6, 20, 18, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1264157022, 'comment_body': 'Does this belong in the next commit?\r\n\r\nI also have two concerns about this fixture, if we keep it:\r\n- what is stream id? how is it used via the fixture?\r\n- the body is very similar to the function itself', 'comment_created': datetime.datetime(2023, 7, 14, 20, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264169653, 'comment_body': ""I've not checked your other PR, but are both of these helper functions rather than accessors? Are they both currently used internally only?"", 'comment_created': datetime.datetime(2023, 7, 14, 20, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264174978, 'comment_body': 'Where we make these changes, can we remove the stream_dict usage?', 'comment_created': datetime.datetime(2023, 7, 14, 21, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264176400, 'comment_body': 'Note that if we named these two methods similarly, the parameter name could be named similarly too.', 'comment_created': datetime.datetime(2023, 7, 14, 21, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264195646, 'comment_body': ""Could we adapt `get_other_subscribers_in_stream` instead?\r\n\r\nThat method could likely be simplified to only accept a stream_id, and then we might have something like the following?\r\n```\r\nsubscribers_to_stream_id(stream_id, *, include_self_if_subscribed:bool)\r\n```\r\n---\r\nAlso note that you're returning the internal data, which is fine if we plan to use it to modify it internally, but not if exposing it as read-only accessor."", 'comment_created': datetime.datetime(2023, 7, 14, 21, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264197182, 'comment_body': 'This function is unnecessary. The user will not need to do this, and we only update the date created in order to handle different server versions.', 'comment_created': datetime.datetime(2023, 7, 14, 21, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264198307, 'comment_body': 'This is already covered by `stream_access_type` itself, and is more general.', 'comment_created': datetime.datetime(2023, 7, 14, 21, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264202475, 'comment_body': ""The accessor here has more purpose - but only if we use it to wrap accessing the `.cached_retention_text` data, which is what is currently accessed externally :) That will require updating the code you introduced above this.\r\n\r\nWe already have the _get_stream_from_id helper, and there's only one place it's used, and that's inside the model - so I'm unconvinced this is necessary."", 'comment_created': datetime.datetime(2023, 7, 14, 21, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264208760, 'comment_body': ""Similarly to is_web_public, we already have a method for this, which you've updated to use this accessor.\r\n\r\nThere is no use of this data outside of the model in any case, other than through stream_access_type(), so there is no motivation for introducing this accessor."", 'comment_created': datetime.datetime(2023, 7, 14, 22, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264212403, 'comment_body': 'This existing UI code incorporates implicit checking of the server version, which would be better wrapped into the model under `get_stream_post_policy`, rather than the two functions introduced in this commit and the next.', 'comment_created': datetime.datetime(2023, 7, 14, 22, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264218456, 'comment_body': 'This change, and possibly others in this commit seem much more related to those earlier in the PR than here at the end?', 'comment_created': datetime.datetime(2023, 7, 14, 22, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1264219013, 'comment_body': ""This suggests we haven't covered accessing the stream or subscription properties sufficiently?"", 'comment_created': datetime.datetime(2023, 7, 14, 22, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1276022360, 'comment_body': ""Yes, the part where we add the `date_created` key and set it to None fails the typecheck. Since we get the data from the server initially, mypy doesn't catch that `date_created` is not present. We could account for this by using `NotRequired[Optional[int]]` instead, but that would purely be for documentation since it passes the typecheck with just `Optional[int]`. I'll also add a comment."", 'comment_created': datetime.datetime(2023, 7, 27, 9, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1276160628, 'comment_body': ""Yeah, you're right, both are helper functions and are used internally only. I'll change the commit description to indicate that, and also maybe change the name for the `get_all_stream_ids` function to `_get_all_stream_ids`."", 'comment_created': datetime.datetime(2023, 7, 27, 11, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1280047590, 'comment_body': 'Resolved in #1419 :+1:', 'comment_created': datetime.datetime(2023, 8, 1, 2, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1280047784, 'comment_body': 'Resolved in #1419 :+1:', 'comment_created': datetime.datetime(2023, 8, 1, 2, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '80e33449d79e4ca9154dfaa1741c0140808b54ee', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82ed222edbae770c76fa3417dac587f47eecd851', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a8eb7f41c014198f789cb6703ecffd944fe540', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b51eae4ab2084bce93d9dc7f3790ba13866be186', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80e0d5ae1bd0c785a910333450fd07165ad710d9', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6ab397250aa3171518e2c10eb2a1b58232e31ed', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55d85606b8298ba1b305749561f9aea92e632927', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '023ea388bab1f265d2094680c8747c798fff76f8', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6282150013e6466e20c52f2061b39a56fb011978', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71d5bd0bd69d95a1614f4d9c4af1ce53b8ba8ff9', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a675771a22b68799bf2e3b72bf5b87cc8dfab1b', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f451244b94c16931c64870a21c2008a0278c9480', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d6e057cfc1ad0de25f99ed246c6a7394d79147d', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e5bd208afbc41b8b23780a420e9471dcb3cea11', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dee7e2bc370f029a78245f8c28c41483237d18d8', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e39bbe362967e18194e04596611428629b9ff5f2', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ca5ee6bcdb4d347f2ef7aa731265f4847a5bd03', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '308fa13c85cdc817c9fa93f47f9f1da899f71452', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}]",Vishwesh Pillai,44305101,,User,,25,,30,31
1518382260,Add support for all streams minimal,"<!-- See README for documentation, or ask in #zulip-terminal if unclear -->
### What does this PR do, and why?
This PR is very similar to #1408 and #1419 and combines elements of both. This PR keeps the initial commits from #1419 but replaces the general accessor methods with only an attribute-specific necessary method i.e ""name"".


### Outstanding aspect(s)    <!-- DELETE SECTION IF EMPTY -->
<!-- In what ways is this not fully implemented/functioning? Compared to a discussion/issue? -->
<!-- Do you not understand something? Are you unsure about a certain approach? Want feedback? -->
- [x] Could add more attribute accessor methods (like ""color"")

### External discussion & connections
<!-- [x] all that apply, specifying topic and adding numbers after # for issues/PRs -->
- [x] Discussed in **#zulip-terminal** in [`Adding streams throws key error`](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Adding.20streams.20throws.20key.20error)
- [x] Fully fixes #816 
- [ ] Partially fixes issue #
- [x] Builds upon previous unmerged work in PR #1419 and PR #1408 
- [ ] Is a follow-up to work in PR #
- [ ] Requires merge of PR #
- [x] Merge will enable work on #1387 

### How did you test this?
<!-- [x] all that apply -->
- [ ] Manually - Behavioral changes
- [ ] Manually - Visual changes
- [x] Adapting existing automated tests
- [x] Adding automated tests for new behavior (or missing tests)
- [ ] Existing automated tests should already cover this (*only a refactor of tested code*)

### Self-review checklist for each commit
- [x] It is a [minimal coherent idea](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development)
- [x] It has a commit summary following the [documented style](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development) (title & body)
- [x] It has a commit summary describing the  motivation and reasoning for the change
- [x] It individually passes linting and tests
- [x] It contains test additions for any new behavior
- [x] It flows clearly from a previous branch commit, and/or prepares for the next commit

### Visual changes    <!-- DELETE SECTION IF NO VISUAL CHANGE -->
<!-- Zulip tips at https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html -->
<!-- For video, try asciinema; after uploading, embed using
[![yourtitle](https://asciinema.org/a/<id>.png)](https://asciinema.org/a/<id>)
-->
<!-- NOTE: Attached videos/images will be clearer from smaller terminal windows -->
",False,1430,https://api.github.com/repos/zulip/zulip-terminal/pulls/1430,https://github.com/zulip/zulip-terminal/pull/1430,open,538,138,13,8,2,31,3,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR awaiting update'}]",2023-09-17 03:30:34+00:00,,0.0,,"[{'comment_id': 1332306796, 'comment_body': ""I really like having these fixtures.\r\n\r\nHowever,\r\n- could we make the data from `initial_data` and these consistent?\r\n- if so, and if they were introduced earlier, could we use them to test that the initial data is converted successfully into the new Model attributes you added, in `Model.test_init`? You don't do that in the first commit as it stands, and these are the right type of data to use."", 'comment_created': datetime.datetime(2023, 9, 21, 0, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1332312720, 'comment_body': 'The only way to use this function with a subscription is with additional information and then casting?\r\n\r\nGiven that, perhaps set the return type to `Stream`? We can have a separate function, something like `_get_subscription_from_id`, specifically for subscription data. That will not need to search through the never-subscribed, and can provide a different error.\r\n\r\nNote that you only need what you have here for supporting the name and other core stream data, whereas eg. color will need Subscription.', 'comment_created': datetime.datetime(2023, 9, 21, 0, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1332324758, 'comment_body': ""I appreciate you including this test, but you're tying it directly to the implementation.\r\n\r\nIf we later change the implementation, such as use a cache, this will need changing, but we want the results to be the same.\r\n\r\nIf you remove the mocking and assert of the internal function being called, can this still work?\r\n\r\nNote that the model likely gets set up with lots of internal data already. We don't test that - see my other comment about test_init - but if it's consistent with the initial data then we should know what to expect here."", 'comment_created': datetime.datetime(2023, 9, 21, 0, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1332330331, 'comment_body': ""It's important to adjust the tests, not just to pass, but to represent what is now necessary. \r\n\r\nIn this commit you're using the function instead of the stream_dict for the name - so is it now necessary to set the stream_dict in the test?\r\n\r\nMany of the test changes need to be checked for this."", 'comment_created': datetime.datetime(2023, 9, 21, 1, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1332334446, 'comment_body': ""Based on the existing `stream_id_from_name`, let's drop the `get_`."", 'comment_created': datetime.datetime(2023, 9, 21, 1, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1332340109, 'comment_body': ""I think I noted somewhere that it's worth including here that it wasn't actively used by us (or the web app even?), and introduced at some other ZFL?"", 'comment_created': datetime.datetime(2023, 9, 21, 1, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1332342767, 'comment_body': ""It's good that this commit focuses on the stream/subscription migration, but\r\n- it doesn't seem that the color is important to the test(s)?\r\n- that could make this transition smaller/simpler\r\n- can we replace the stream_dict code by setting the return_value in the model, in the later commits? (if we don't already)"", 'comment_created': datetime.datetime(2023, 9, 21, 1, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1335392538, 'comment_body': 'If we do that, should I cast the `subscribed` and `unsubscribed` streams returned by this method to `Stream`? That might make the usage of this method clearer too, ie. to only access stream properties (and not subscription properties) from the returned stream.', 'comment_created': datetime.datetime(2023, 9, 25, 5, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1336431733, 'comment_body': ""For the third point, which function's return_value are you referring to?"", 'comment_created': datetime.datetime(2023, 9, 25, 22, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1336440212, 'comment_body': ""I could not find any documentation in the api docs or CZO discussion for this field. What was the field's original purpose, if you know? I can then add it's reason for removal in the commit text with more context."", 'comment_created': datetime.datetime(2023, 9, 25, 22, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1336553429, 'comment_body': ""It's in the API changelog (https://zulip.com/api/changelog), and I found it on czo to be zulip/zulip#15409."", 'comment_created': datetime.datetime(2023, 9, 26, 2, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339546161, 'comment_body': ""I meant that where you're moving to use the functions that access the name and color, instead of using stream_dict, can we now mock those functions and set the return value directly?\r\n\r\nEssentially, we want to ensure we move away from the stream_dict fixture (or equivalent manual dicts), in addition to directly accessing the model attribute."", 'comment_created': datetime.datetime(2023, 9, 28, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339548779, 'comment_body': ""A cast shouldn't be necessary once you have the two different functions - you don't have that in the latest version of the code you just pushed?"", 'comment_created': datetime.datetime(2023, 9, 28, 5, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339560062, 'comment_body': ""Nit: Good comment, but you've lost the 'new in ...' details."", 'comment_created': datetime.datetime(2023, 9, 28, 5, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339561936, 'comment_body': 'Nit: Also present 4.0/ZFL31 until then.', 'comment_created': datetime.datetime(2023, 9, 28, 5, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339563523, 'comment_body': ""Minor: I'd mention these changes to the fixtures in the commit text, even though we don't use them until now."", 'comment_created': datetime.datetime(2023, 9, 28, 5, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339565221, 'comment_body': ""With all of the extra test material, and the next commits tidying up only the existing types/stream_dict, this refactor seems somewhat separate from the feature you're adding.\r\n\r\nI'd consider splitting and shifting the new data addition until just before you start using them in the helper methods."", 'comment_created': datetime.datetime(2023, 9, 28, 5, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339577132, 'comment_body': 'Minor: Would be helpful to include some case ids here, to indicate that there is one test for a subscribed and one for unsubscribed stream?\r\n\r\nSimilarly for the other method.\r\n\r\nThese basically act as comments while reading the code.', 'comment_created': datetime.datetime(2023, 9, 28, 6, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339579258, 'comment_body': 'To ensure this remains the case in future, one can add an assert at the top of the test :)', 'comment_created': datetime.datetime(2023, 9, 28, 6, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339581528, 'comment_body': ""Nit: This is not strictly accurate, since 'not subscribed to' does not cover 'was subscribed to at one point'."", 'comment_created': datetime.datetime(2023, 9, 28, 6, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339596369, 'comment_body': 'Can this replace the stream_dict above?\r\n\r\nAlso, there is a test below this that is using a simple stream_dict instead of mocking the new function.\r\n\r\nIf some stream_dict lines can be removed instead (which I also comment elsewhere) they might be best combined into a trimming refactor later.', 'comment_created': datetime.datetime(2023, 9, 28, 6, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339610719, 'comment_body': 'It looks like another stream_dict can be removed while testing this object too.', 'comment_created': datetime.datetime(2023, 9, 28, 6, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339627195, 'comment_body': ""I've casted the stream_dict and the unsubscribed_streams to a `Stream` in the `_get_stream_from_id` in the latest commit, so that methods which use the `_get_stream_from_id` always access only the stream properties and not the subscription properties (which would then warrant the use of `_get_subscription_from_id`). "", 'comment_created': datetime.datetime(2023, 9, 28, 7, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1339666207, 'comment_body': 'I thought `get_all_stream_ids` was used elsewhere in previous iterations?\r\n\r\nIf it\'s just used in this one place, it may actually be simpler to wrap the conditional into a dedicated method for whether it\'s a ""valid stream"". There are currently two similar methods for this, one by name (`is_valid_stream`) and one by id (`is_user_subscribed_to_stream`).\r\n\r\nHowever, *both* of those existing functions handle subscriptions only right now. On that basis, my first thought would be to suggest extracting this helper out of the earlier commit, and instead refactoring and applying them more appropriately:\r\n- checking the uses of the existing methods - whether they should apply to streams or subscriptions\r\n- renaming the existing methods to be consistent (eg. `is_user_subscribed_to_stream_[id|name]`?)\r\n- adding a specific stream one if necessary - ie. a new `is_valid_stream_[id|name]`', 'comment_created': datetime.datetime(2023, 9, 28, 7, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339671431, 'comment_body': ""I'm wary of leaving the stream_dict in here, but I suspect this will be too much refactoring for now."", 'comment_created': datetime.datetime(2023, 9, 28, 7, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339674157, 'comment_body': ""Note how we're already using `is_valid_stream` here, vs using `all_stream_ids`, in reference to my other comment."", 'comment_created': datetime.datetime(2023, 9, 28, 7, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339678973, 'comment_body': 'Can we remove other stream_dict in this file? (in that same trimming refactor, perhaps)', 'comment_created': datetime.datetime(2023, 9, 28, 7, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339682699, 'comment_body': 'This stream is not an unsubscribed stream. A different test is fine to ensure the color is different, but an actual unsubscribed (not never) would be good to include.', 'comment_created': datetime.datetime(2023, 9, 28, 7, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339688838, 'comment_body': 'Again, this would be nice to avoid, but we might have to rethink the test.', 'comment_created': datetime.datetime(2023, 9, 28, 7, 53, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339700101, 'comment_body': ""If it's necessary to keep this line for the test, can the stream_dict be removed instead later, when we switch to the new function?"", 'comment_created': datetime.datetime(2023, 9, 28, 8, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1339731083, 'comment_body': ""Ah right, but I don't remember seeing an explicit `cast()` to work around mypy - I assume this works in the type system since a Stream is a subset of a Subscription."", 'comment_created': datetime.datetime(2023, 9, 28, 8, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '5ef82860e7f74c26eb4c3f3f6c5b25eaa8174662', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1197a6ef63feb89244fdf901dab3eb636eb7b3e4', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe5e5f7da308afe51ce5747e154c63e783b6909f', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50241a654d3958e8e8cef94f90adb3b426160d70', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96da20b7ee721dbd03e5862eefd3a4df759b7d8e', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eeb7658eb8f089239937bc9b1b27bfec43970e7', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c53ee61f3119cf8719232aa9353d0b9ba6c32b32', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0c1a8d8229d46657e65d6aad85343e1e5130dbb', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}]",Vishwesh Pillai,44305101,,User,,25,,30,31
1387652136,Use Hyperlink widget for links in message info popup.,"<!-- See README for documentation, or ask in #zulip-terminal if unclear -->
### What does this PR do, and why?
This PR introduces the [Hyperlink](https://urwidgets.readthedocs.io/en/stable/api.html#urwidgets.Hyperlink) widget for message links in message information popups. This solves the issue of long urls being force-wrapped which results in them not being clickable from ZT.

### Outstanding aspect(s)    <!-- DELETE SECTION IF EMPTY -->
<!-- In what ways is this not fully implemented/functioning? Compared to a discussion/issue? -->
<!-- Do you not understand something? Are you unsure about a certain approach? Want feedback? -->
- The focus on the currently selected link is a bit off. It doesn't cover the link.

### External discussion & connections
<!-- [x] all that apply, specifying topic and adding numbers after # for issues/PRs -->
- [x] Discussed in **#zulip-terminal** in [`Hyperlink support using OSC-8 escape sequences`](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Hyperlink.20support.20using.20OSC-8.20escape.20sequences)
- [ ] Fully fixes #
- [x] Partially fixes issue #1368 
- [ ] Builds upon previous unmerged work in PR #
- [ ] Is a follow-up to work in PR #
- [ ] Requires merge of PR #
- [ ] Merge will enable work on #

### How did you test this?
<!-- [x] all that apply -->
- [x] Manually - Behavioral changes
- [x] Manually - Visual changes
- [ ] Adapting existing automated tests
- [ ] Adding automated tests for new behavior (or missing tests)
- [ ] Existing automated tests should already cover this (*only a refactor of tested code*)

### Self-review checklist for each commit
- [x] It is a [minimal coherent idea](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development)
- [x] It has a commit summary following the [documented style](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development) (title & body)
- [x] It has a commit summary describing the  motivation and reasoning for the change
- [ ] It individually passes linting and tests
- [ ] It contains test additions for any new behavior
- [ ] It flows clearly from a previous branch commit, and/or prepares for the next commit

### Visual changes    <!-- DELETE SECTION IF NO VISUAL CHANGE -->
<!-- Zulip tips at https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html -->
<!-- For video, try asciinema; after uploading, embed using
[![yourtitle](https://asciinema.org/a/<id>.png)](https://asciinema.org/a/<id>)
-->
<!-- NOTE: Attached videos/images will be clearer from smaller terminal windows -->
![image](https://github.com/zulip/zulip-terminal/assets/44305101/4635aa0a-35f7-4989-a2ba-f0f181687a51)

",False,1409,https://api.github.com/repos/zulip/zulip-terminal/pulls/1409,https://github.com/zulip/zulip-terminal/pull/1409,open,9,2,3,2,2,3,2,0,"[{'name': 'size: S'}, {'name': 'PR awaiting update'}]",2023-06-11 19:12:48+00:00,,0.0,,"[{'comment_id': 1274371965, 'comment_body': ""Having the rendering of the link defined in the link button like this would be cleaner, and it may be reasonable to refactor the layout into the button as a prep refactor for this.\r\n\r\nHowever, right now this overall change affects the rendering quite a lot: links are not styled in the same way as the background of the button, or when selected. That makes it difficult to visually identify that the link and number/title are related to the link when many links are present.\r\n\r\nI'm not sure if that's a limitation of the Hyperlink?"", 'comment_created': datetime.datetime(2023, 7, 26, 4, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1493327039, 'comment_body': ""Hello!\r\n\r\n> However, right now this overall change affects the rendering quite a lot: links are not styled in the same way as the background of the button, or when selected. That makes it difficult to visually identify that the link and number/title are related to the link when many links are present.\r\n>\r\n> I'm not sure if that's a limitation of the Hyperlink?\r\n\r\nYes, it was.\r\n\r\nI just released [v0.2.0](https://github.com/AnonymouX47/urwidgets/releases/tag/v0.2.0) which allows the use of `Attrmap`s (and other means) over `Hyperlink` widgets (and the rendered canvases). See https://github.com/AnonymouX47/urwidgets/pull/3."", 'comment_created': datetime.datetime(2024, 2, 17, 12, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'AnonymouX47', 'type': 'User'}, {'comment_id': 1493330255, 'comment_body': ""Replace with:\r\n\r\n```py\r\n        hyperlink = urwidgets.Hyperlink(uri=self.link)\r\n        icon = urwid.Pile(\r\n            widget_list=[\r\n                urwid.SelectableIcon(caption, cursor_position=len(caption) + 1),\r\n                # using `hyperlink.pack()[0]` instead of `len(self.link)` in case of wide characters\r\n                urwidgets.TextEmbed((hyperlink.pack()[0], hyperlink)),\r\n            ]\r\n        )\r\n```\r\nto wrap the URL across lines instead of clipping with ellipsis.\r\n\r\nThe `OSC 8` feature will still work perfectly on any terminal emulator with a spec-compliant implementation and behaviour will remain the same as before this PR on terminal emulators that don't support the feature."", 'comment_created': datetime.datetime(2024, 2, 17, 12, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AnonymouX47', 'type': 'User'}]","[{'commit_sha': '93bb11253830dec1075e95506b1bf1e3858d5e63', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e778c2ae04021804180de083d4c3cbc32a9fcd', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}]",Vishwesh Pillai,44305101,,User,,25,,30,31
1424713498,[WIP] Add DM panel to the left side view.,"<!-- See README for documentation, or ask in #zulip-terminal if unclear -->
### What does this PR do, and why?
This PR is currently preparation for the addition of a collapsible DM panel in the left side UI view. 


### Outstanding aspect(s)    <!-- DELETE SECTION IF EMPTY -->
<!-- In what ways is this not fully implemented/functioning? Compared to a discussion/issue? -->
<!-- Do you not understand something? Are you unsure about a certain approach? Want feedback? -->
- [ ] 

### External discussion & connections
<!-- [x] all that apply, specifying topic and adding numbers after # for issues/PRs -->
- [x] Discussed in **#zulip-terminal** in `Private messages sidepanel`
- [x] Fully fixes #1197 
- [ ] Partially fixes issue #
- [ ] Builds upon previous unmerged work in PR #
- [ ] Is a follow-up to work in PR #
- [ ] Requires merge of PR #
- [ ] Merge will enable work on #

### How did you test this?
<!-- [x] all that apply -->
- [x] Manually - Behavioral changes
- [x] Manually - Visual changes
- [ ] Adapting existing automated tests
- [ ] Adding automated tests for new behavior (or missing tests)
- [ ] Existing automated tests should already cover this (*only a refactor of tested code*)

### Self-review checklist for each commit
- [x] It is a [minimal coherent idea](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development)
- [x] It has a commit summary following the [documented style](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development) (title & body)
- [x] It has a commit summary describing the  motivation and reasoning for the change
- [x] It individually passes linting and tests
- [ ] It contains test additions for any new behavior
- [x] It flows clearly from a previous branch commit, and/or prepares for the next commit

### Visual changes    <!-- DELETE SECTION IF NO VISUAL CHANGE -->
<!-- Zulip tips at https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html -->
<!-- For video, try asciinema; after uploading, embed using
[![yourtitle](https://asciinema.org/a/<id>.png)](https://asciinema.org/a/<id>)
-->
<!-- NOTE: Attached videos/images will be clearer from smaller terminal windows -->
[![asciicast](https://asciinema.org/a/CmHP5b8aFhA6XRLEp0foNJYA9.svg)](https://asciinema.org/a/CmHP5b8aFhA6XRLEp0foNJYA9)
",False,1416,https://api.github.com/repos/zulip/zulip-terminal/pulls/1416,https://github.com/zulip/zulip-terminal/pull/1416,open,374,52,10,9,3,6,5,0,"[{'name': 'enhancement'}, {'name': 'area: UI'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR awaiting update'}]",2023-07-07 13:48:43+00:00,,0.0,,"[{'comment_id': 1340905661, 'comment_body': ""At this commit, this stream_button doesn't exist.\r\n\r\nThis set_count-related code likely wants to go after a skeleton UI with no count, so the button is there, and then once hooked up the count can be visible."", 'comment_created': datetime.datetime(2023, 9, 29, 5, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1340915145, 'comment_body': ""More of a note for later, but this test is not the easiest to validate - but that's historical rather than this commit. I can see this being refactored, but unreads are a complex aspect as it is."", 'comment_created': datetime.datetime(2023, 9, 29, 5, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1340919330, 'comment_body': ""The `[S]` shouldn't be advertised until that hotkey is available in its new role, which will be much later, when we enable the swapping between the DM and stream panels."", 'comment_created': datetime.datetime(2023, 9, 29, 5, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1340923825, 'comment_body': 'As per another comment, you need the stream_button first, to handle updates.\r\n\r\nSo, until the unread count tracking is working, the count can be left at zero; in doing that, the Stream messages will look like a title.\r\n\r\nWhen the tracking is complete, you can then do a small commit, or part of another, which hooks the parts together.', 'comment_created': datetime.datetime(2023, 9, 29, 5, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1340925450, 'comment_body': 'Would it be simpler to make this a Divider in the left column?', 'comment_created': datetime.datetime(2023, 9, 29, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1340931213, 'comment_body': 'This looks independent of this particular commit, and maybe belongs in the previous commit?\r\n\r\nAlso, this change essentially sets all the borders to be empty?', 'comment_created': datetime.datetime(2023, 9, 29, 6, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'bf3fec05d07f5d83a7917571d723310973699cda', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5de2789c56cfc9e9b4cf41f8b41a7721a6266f7', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1de25b58dee30e12ed1efbc4f8e341b08f7953e9', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6160f66de35f17ddf0948e0404322638322d46c8', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e615c904a9580e1700630c79485a0b597c529d6', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b011799e94e5dfb6a2f91dbda57d99ec6514bfa5', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94068785472f4c1abcaed0ab0d8148a9d71f2178', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f090ebff0be196d24658def01576ee5b8fd60577', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76ca0743fdb967ad4e4a7a7e6df40e152ec080cc', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}]",Vishwesh Pillai,44305101,,User,,25,,30,31

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
122704772,zulip-terminal,zulip/zulip-terminal,Python,243,612,18,81,2276,423,3,165,"[{'id': 1737833991, 'number': 1473, 'closed': None, 'created': datetime.datetime(2024, 2, 21, 23, 4, 22, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 10, 'deletions': 3, 'state': 'open'}, {'id': 1518382260, 'number': 1430, 'closed': None, 'created': datetime.datetime(2023, 9, 17, 3, 30, 34, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 538, 'deletions': 138, 'state': 'open'}, {'id': 1451928529, 'number': 1419, 'closed': None, 'created': datetime.datetime(2023, 7, 27, 12, 40, 5, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 358, 'deletions': 40, 'state': 'open'}, {'id': 1424713498, 'number': 1416, 'closed': None, 'created': datetime.datetime(2023, 7, 7, 13, 48, 43, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 374, 'deletions': 52, 'state': 'open'}, {'id': 1404969665, 'number': 1412, 'closed': datetime.datetime(2023, 9, 22, 22, 32, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 23, 12, 10, 44, tzinfo=datetime.timezone.utc), 'time_taken': 7899691.0, 'time_delta': '91 days, 10:21:31', 'additions': 91, 'deletions': 3, 'state': 'closed'}, {'id': 1387652136, 'number': 1409, 'closed': None, 'created': datetime.datetime(2023, 6, 11, 19, 12, 48, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 9, 'deletions': 2, 'state': 'open'}, {'id': 1384261225, 'number': 1408, 'closed': None, 'created': datetime.datetime(2023, 6, 8, 11, 9, 18, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1123, 'deletions': 161, 'state': 'open'}, {'id': 1326261480, 'number': 1387, 'closed': None, 'created': datetime.datetime(2023, 4, 24, 23, 8, 53, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1327, 'deletions': 204, 'state': 'open'}, {'id': 1306363906, 'number': 1374, 'closed': datetime.datetime(2023, 7, 14, 2, 49, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 8, 2, 54, 40, tzinfo=datetime.timezone.utc), 'time_taken': 8380464.0, 'time_delta': '96 days, 23:54:24', 'additions': 696, 'deletions': 19, 'state': 'closed'}, {'id': 1289891529, 'number': 1356, 'closed': datetime.datetime(2023, 8, 16, 3, 45, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 25, 2, 58, 14, tzinfo=datetime.timezone.utc), 'time_taken': 12444449.0, 'time_delta': '144 days, 0:47:29', 'additions': 151, 'deletions': 23, 'state': 'closed'}, {'id': 1272667865, 'number': 1322, 'closed': datetime.datetime(2023, 3, 21, 6, 30, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 13, 5, 27, 36, tzinfo=datetime.timezone.utc), 'time_taken': 694984.0, 'time_delta': '8 days, 1:03:04', 'additions': 91, 'deletions': 74, 'state': 'closed'}]"
