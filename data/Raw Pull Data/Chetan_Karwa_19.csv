pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
717043677,Stdlib linked list,"This PR is to submit the first draft of the linked list module for stdlib.
This is based upon #68 by Milan, #463 by me.

I have been working on this module as a part of my GSoC Project.  
All my work was regularly updated on my personal repository that I have been sharing with everyone in my weekly report.
Link to my repository ([here](https://github.com/ChetanKarwa/Fortran-Linked-List)).
A bit detailed project report is available ([here](https://docs.google.com/document/d/1e3V9uRmJcjO55sTd9339i4dR8UGUH_EUPRaS5M1KfZY/edit?usp=sharing)).
List of all the weekly Blogs - ([here](https://docs.google.com/document/d/1AgDox3gDiUUuPaPTSmVHgb04lAtN8DUGKqgKEmFXU8Y/edit?usp=sharing))
 
The module was tested in two compilers, intel oneAPI and gfortran.",False,491,https://api.github.com/repos/fortran-lang/stdlib/pulls/491,https://github.com/fortran-lang/stdlib/pull/491,open,1147,1,4,3,7,5,3,0,"[{'name': 'waiting for OP'}, {'name': 'reviewers needed'}, {'name': 'topic: container'}]",2021-08-20 23:16:23+00:00,,0.0,,"[{'comment_id': 817309945, 'comment_body': '```suggestion\r\nnullify (this_child_list%head, this_child_list%tail)\r\n```\r\n\r\nIt seems that the head and tail of the linked list need to be blanked here, otherwise an error will be reported when a new push node is pushed again.', 'comment_created': datetime.datetime(2022, 3, 2, 3, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zoziha', 'type': 'User'}, {'comment_id': 817310949, 'comment_body': '```suggestion\r\n            call current_node%clear()\r\n            deallocate(current_node)\r\n```\r\nIt seems that the destruction of the current node content should be added here.', 'comment_created': datetime.datetime(2022, 3, 2, 3, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zoziha', 'type': 'User'}, {'comment_id': 817314376, 'comment_body': 'Maybe a routine can be abstracted here, allowing the user to customize the way to get the contents of the linked list?\r\n```fortran\r\n...\r\ngeneric :: get => get_node_at_index, &\r\n                  get_node_at_index_user\r\nprocedure, private :: get_node_at_index, &\r\n                      get_node_at_index_user\r\n...\r\nabstract interface\r\n        subroutine get_value(this_item, return_item)\r\n            class(*), intent(in) :: this_item\r\n            class(*), intent(out) :: return_item\r\n        end subroutine get_value\r\nend interface\r\n...\r\nsubroutine get_node_at_index_user(this_list, node_index, func, return_item)\r\n        class(child_list), intent(inout) :: this_list\r\n        integer, intent(in) :: node_index\r\n        procedure(get_value) :: func\r\n        class(*), intent(out) :: return_item\r\n        type(node), pointer :: curr_node\r\n        integer index\r\n\r\n        curr_node => this_list%head\r\n        index = 1\r\n        do while (associated(curr_node))\r\n            if (index == node_index) then\r\n                call func(curr_node%item, return_item)\r\n                nullify (curr_node)\r\n                return\r\n            end if\r\n\r\n            curr_node => curr_node%next\r\n            index = index + 1\r\n        end do\r\n        nullify (curr_node)\r\n\r\nend subroutine get_node_at_index_user\r\n...\r\n```\r\n\r\nThe user can use it like this:\r\n```fortran\r\nprogram main\r\n\r\n    use linked_list_m, only: child_list, rk, ik\r\n    implicit none\r\n    real(rk) :: x\r\n    integer(ik) :: n\r\n\r\n    type(this_child) :: list\r\n    print *, list%size()\r\n\r\n    call list%push(1.0_rk)\r\n    call list%push(2_ik)\r\n\r\n    call list%get(1, get_value, x)\r\n    call list%get(2, get_value, n)\r\n\r\n    print *, x, n, list%size()\r\n\r\ncontains\r\n\r\n    subroutine get_value(this_item, return_item)\r\n        class(*), intent(in) :: this_item\r\n        class(*), intent(out) :: return_item\r\n\r\n        select type (this_item)\r\n        type is (real(rk))\r\n            select type (return_item)\r\n            type is (real(rk))\r\n                return_item = this_item\r\n            class default\r\n                print *, \'*<ERROR>* get_value: type mismatch\'\r\n            end select\r\n        type is (integer(ik))\r\n            select type (return_item)\r\n            type is (integer(ik))\r\n                return_item = this_item\r\n            class default\r\n                print *, \'*<ERROR>* get_value: type mismatch\'\r\n            end select\r\n        class default\r\n            print *, ""*<ERROR>* get_value: invalid type""\r\n        end select\r\n\r\n    end subroutine get_value\r\n\r\nend program main\r\n```', 'comment_created': datetime.datetime(2022, 3, 2, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zoziha', 'type': 'User'}, {'comment_id': 817314710, 'comment_body': '```suggestion\r\n\r\n```\r\nThis statement seems like it should be removed?', 'comment_created': datetime.datetime(2022, 3, 2, 3, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoziha', 'type': 'User'}, {'comment_id': 823342987, 'comment_body': '`source` uses the optional argument `new_item` here, there may be memory access errors.', 'comment_created': datetime.datetime(2022, 3, 10, 4, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zoziha', 'type': 'User'}]","[{'commit_sha': 'a9c9ad86dcb5fbd1f5e35874e230e2c1a1371f92', 'committer_username': 'ChetanKarwa', 'committer_name': 'Chetan Karwa', 'committer_email': 'cbkarwa@gmail.com', 'commit_date': datetime.datetime(2019, 1, 18, 12, 27, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a7d1fac8e7850219f0216ddc7896291fd7de39f', 'committer_username': 'ChetanKarwa', 'committer_name': 'Chetan Karwa', 'committer_email': 'cbkarwa@gmail.com', 'commit_date': datetime.datetime(2019, 1, 18, 12, 27, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e87ad75fbda960ad09106099706ddf047163280', 'committer_username': 'ChetanKarwa', 'committer_name': 'Chetan Karwa', 'committer_email': 'cbkarwa@gmail.com', 'commit_date': datetime.datetime(2019, 1, 18, 12, 27, 52, tzinfo=datetime.timezone.utc)}]",Chetan Karwa,46815976,cbkarwa@gmail.com,User,,24,,7,15

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
228099010,stdlib,fortran-lang/stdlib,Fortran,164,1049,55,64,3103,253,4,24,"[{'id': 717043677, 'number': 491, 'closed': None, 'created': datetime.datetime(2021, 8, 20, 23, 16, 23, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1147, 'deletions': 1, 'state': 'open'}, {'id': 604378541, 'number': 372, 'closed': datetime.datetime(2021, 5, 22, 9, 8, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 30, 20, 20, 35, tzinfo=datetime.timezone.utc), 'time_taken': 4538861.0, 'time_delta': '52 days, 12:47:41', 'additions': 18, 'deletions': 11, 'state': 'closed'}, {'id': 601319226, 'number': 363, 'closed': None, 'created': datetime.datetime(2021, 3, 26, 5, 37, 3, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 159, 'deletions': 5, 'state': 'open'}]"
