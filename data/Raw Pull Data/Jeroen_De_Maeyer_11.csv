pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
450922352,Add named logging with LOGNAME to OMPL interface,"### Description

As is done in other parts of MoveIt #1079 #1179, this pull request adds named logging to all source files of the `moveit_planners_ompl` package. (For some files with a single log statement, it might be overkill, but it is consistent...)

**Important** I'm not confident whether it is ok to put this outside a namespace. But in most source files of the OMPL interface, all code is put outside of a namespace and all names are prepended with `ompl_interface::`. Maybe this is worth another cleanup? Or is there a reason for this?

### Checklist
- [ ] **Required by CI**: Code is auto formatted using [clang-format](http://moveit.ros.org/documentation/contributing/code)
- [ ] Extend the tutorials / documentation [reference](http://moveit.ros.org/documentation/contributing/)
- [ ] Document API changes relevant to the user in the [MIGRATION.md](https://github.com/ros-planning/moveit/blob/master/MIGRATION.md) notes
- [ ] Create tests, which fail without this PR [reference](https://ros-planning.github.io/moveit_tutorials/doc/tests/tests_tutorial.html)
- [ ] Include a screenshot if changing a GUI
- [ ] While waiting for someone to review your request, please help review [another open pull request](https://github.com/ros-planning/moveit/pulls) to support the maintainers

[//]: # ""You can expect a response from a maintainer within 7 days. If you haven't heard anything by then, feel free to ping the thread. Thank you!""
",True,2211,https://api.github.com/repos/moveit/moveit/pulls/2211,https://github.com/moveit/moveit/pull/2211,closed,255,228,11,5,9,2,0,0,[],2020-07-17 08:43:29+00:00,2020-07-21 10:55:36+00:00,353527.0,"4 days, 2:12:07","[{'comment_id': 456514909, 'comment_body': 'Please put this inside the ompl_interface namespace (the same applies to all cases below). In addition, write it as\r\n```\r\nconstexpr char LOGNAME[] = ""constrained_goal_sampler"";\r\n```\r\nConstexprs offer the compilers more options for optimization. A std::string cannot be created via constexpr. ', 'comment_created': datetime.datetime(2020, 7, 17, 15, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 456524787, 'comment_body': 'Ok!\r\n\r\nCan I put all class method definitions inside the namespace (as is done in many other parts of MoveIt, but not [here](https://github.com/ros-planning/moveit/blob/877e1d51560f701b60b79e04a852ec104ad77de0/moveit_planners/ompl/ompl_interface/src/planning_context_manager.cpp#L88) for example). Or is the preferred way to do `ompl_interface::LOGNAME` in all the log statements?', 'comment_created': datetime.datetime(2020, 7, 17, 15, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}]","[{'commit_sha': 'f8a78a0ba8452f36b9d1c27ae4f14f708229e5fe', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9caa8b51c2c2977aa878e45bf2504974a3573d10', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '877e1d51560f701b60b79e04a852ec104ad77de0', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7bc2e278991a963a7131d513e67b1cef7390be2', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec116149cd327967c8057b12b08e049404b9f128', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}]",Jeroen,11537861,,User,,117,,8,42
451239844,Remove dead code from ompl interface (related to subspaces),"### Description

Addresses issue #2209.

The attribute `std::vector<ModelBasedStateSpacePtr> subspaces_` inside [ModelBasedPlanningContextSpecification](https://github.com/JeroenDM/moveit/blob/d6666a9aee734acd1891a43657cf162c9ca4e9b7/moveit_planners/ompl/ompl_interface/include/moveit/ompl_interface/model_based_planning_context.h#L71) is never used as far as I can tell. It is created in created in [PlanningContextManager::getPlanningContext](https://github.com/JeroenDM/moveit/blob/d6666a9aee734acd1891a43657cf162c9ca4e9b7/moveit_planners/ompl/ompl_interface/src/planning_context_manager.cpp#L363).

I suspect it was added with support for OMPL's [CompoundStateSpace](https://ompl.kavrakilab.org/classompl_1_1base_1_1CompoundStateSpace.html) in mind, but this is speculation.

**Note that I am biased**, as I plan to add things here in the context of #2092. It would make my life much easier if this piece of code was not there... :)

### Checklist
- [x] **Required by CI**: Code is auto formatted using [clang-format](http://moveit.ros.org/documentation/contributing/code)
- [ ] Extend the tutorials / documentation [reference](http://moveit.ros.org/documentation/contributing/)
- [ ] Document API changes relevant to the user in the [MIGRATION.md](https://github.com/ros-planning/moveit/blob/master/MIGRATION.md) notes
- [ ] Create tests, which fail without this PR [reference](https://ros-planning.github.io/moveit_tutorials/doc/tests/tests_tutorial.html)
- [ ] Include a screenshot if changing a GUI
- [ ] While waiting for someone to review your request, please help review [another open pull request](https://github.com/ros-planning/moveit/pulls) to support the maintainers

[//]: # ""You can expect a response from a maintainer within 7 days. If you haven't heard anything by then, feel free to ping the thread. Thank you!""
",True,2214,https://api.github.com/repos/moveit/moveit/pulls/2214,https://github.com/moveit/moveit/pull/2214,closed,30,153,5,2,9,3,0,0,[],2020-07-17 16:17:05+00:00,2020-07-27 15:04:29+00:00,859644.0,"9 days, 22:47:24","[{'comment_id': 457536656, 'comment_body': 'This line still seems relevant. Without it, `use_state_validity_cache_` in context might be uninitialized. Having said that, perhaps that member can be deleted as well, since it is always true with your changes.', 'comment_created': datetime.datetime(2020, 7, 20, 16, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 457606116, 'comment_body': 'It is initialized in the constructor, but I agree that it can be removed.\r\n\r\nThis seems to imply that [ompl_interface::StateValidityChecker::isValidWithoutCache](https://github.com/ros-planning/moveit/blob/fe6498061103aaa299b0ef20d3e8a3dce39964d5/moveit_planners/ompl/ompl_interface/src/detail/state_validity_checker.cpp#L112) can also be removed (~70 lines of code). It is only used in [this](https://github.com/ros-planning/moveit/blob/fe6498061103aaa299b0ef20d3e8a3dce39964d5/moveit_planners/ompl/ompl_interface/src/detail/state_validity_checker.cpp#L74) context:\r\n```C++\r\nreturn planning_context_->useStateValidityCache() ? isValidWithCache(state, verbose) :\r\n                                                      isValidWithoutCache(state, verbose);\r\n```\r\n\r\nI find it difficult to believe that all this code is not used by the current interface. Maybe I need to dig a bit in very commits to understand the reasoning behind this difference?', 'comment_created': datetime.datetime(2020, 7, 20, 18, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 458020843, 'comment_body': ""> I find it difficult to believe that all this code is not used by the current interface. Maybe I need to dig a bit in very commits to understand the reasoning behind this difference?\r\n\r\nAs someone digging through this code base for years, I don't find it difficult to believe.\r\nEven if there are still hooks for it around, they likely haven't been used by anyone in years.\r\nPlease go ahead and simplify the interface further if you can."", 'comment_created': datetime.datetime(2020, 7, 21, 11, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'v4hn', 'type': 'User'}]","[{'commit_sha': '44e509b77cbb572aab9da06ca84a479797dc117c', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae7e96dee3990f6943c941ff7aa68df763272879', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}]",Jeroen,11537861,,User,,117,,8,42
452007746,Fix mismatch between docstring and code in robot_state.h,"### Description

In `robot_state.h`, there was a mismatch between the docstring and the code. I updated the docstring to match the code.

I could also rename it to `link_model`, as in other parts of MoveIt. But I'm not sure this is necessary.

(I quickly tried to look for the reason of this change in git history but could not find it. But the why is not really relevant as long as the documentation and the code match I guess :) )

### Checklist
- [x] **Required by CI**: Code is auto formatted using [clang-format](http://moveit.ros.org/documentation/contributing/code)
- [ ] Extend the tutorials / documentation [reference](http://moveit.ros.org/documentation/contributing/)
- [ ] Document API changes relevant to the user in the [MIGRATION.md](https://github.com/ros-planning/moveit/blob/master/MIGRATION.md) notes
- [ ] Create tests, which fail without this PR [reference](https://ros-planning.github.io/moveit_tutorials/doc/tests/tests_tutorial.html)
- [ ] Include a screenshot if changing a GUI
- [ ] While waiting for someone to review your request, please help review [another open pull request](https://github.com/ros-planning/moveit/pulls) to support the maintainers

[//]: # ""You can expect a response from a maintainer within 7 days. If you haven't heard anything by then, feel free to ping the thread. Thank you!""
",True,2215,https://api.github.com/repos/moveit/moveit/pulls/2215,https://github.com/moveit/moveit/pull/2215,closed,4,4,1,1,1,0,0,0,[],2020-07-18 16:09:57+00:00,2020-07-20 15:45:27+00:00,171330.0,"1 day, 23:35:30",[],"[{'commit_sha': 'be3eb0f465660110e06f6f401c30f3d863850f08', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}]",Jeroen,11537861,,User,,117,,8,42
457723770,OMPL interface: add documentation,"### Description

The `ompl_interface::ModelBasedPlanningContext` has two methods with the same name `getPlanningContext`. I think this is confusing because they do different things. Especially given that the `planning_interface::PlannerManager` also has [two of such methods](https://github.com/ros-planning/moveit/blob/dc909df5d2cf93868a1773db869e6767e339cf7a/moveit_core/planning_interface/include/moveit/planning_interface/planning_interface.h#L182), where overloading is used for a completely different purpose (both versions are public).

I also added docstrings to the header, to hopefully clarify a bit was is going on in these methods.

An alternative name could be `constructPlanningContext`.

### Checklist
- [x] **Required by CI**: Code is auto formatted using [clang-format](http://moveit.ros.org/documentation/contributing/code)
- [ ] Extend the tutorials / documentation [reference](http://moveit.ros.org/documentation/contributing/)
- [ ] Document API changes relevant to the user in the [MIGRATION.md](https://github.com/ros-planning/moveit/blob/master/MIGRATION.md) notes
- [ ] Create tests, which fail without this PR [reference](https://ros-planning.github.io/moveit_tutorials/doc/tests/tests_tutorial.html)
- [ ] Include a screenshot if changing a GUI
- [ ] While waiting for someone to review your request, please help review [another open pull request](https://github.com/ros-planning/moveit/pulls) to support the maintainers

[//]: # ""You can expect a response from a maintainer within 7 days. If you haven't heard anything by then, feel free to ping the thread. Thank you!""
",True,2226,https://api.github.com/repos/moveit/moveit/pulls/2226,https://github.com/moveit/moveit/pull/2226,closed,16,0,2,1,4,2,0,0,[],2020-07-28 10:38:47+00:00,2020-07-29 14:54:42+00:00,101755.0,"1 day, 4:15:55","[{'comment_id': 461805464, 'comment_body': 'Why the name change? This method will actually return a planning context from a cache if one is available. In that case no new planning context is created.', 'comment_created': datetime.datetime(2020, 7, 28, 19, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 462094370, 'comment_body': ""The name change probably only made sense to me personally, I'll revert it.\r\n\r\nI think it can be confusing that both methods do part of the construction of the planning context. For example, after the context is created, or a cached context is retrieved, `context.clear()` is called. And both methods call a bunch of `context->setXXX(..)` methods.\r\n\r\nAnd then as a cherry on top of the cake, `context->configure()` is called to do even more configuration :)\r\n\r\nI think it can be confusing to have to the configuration of the context so spread out in the code base, without clear names indications what is done where. But I don't have a solution..."", 'comment_created': datetime.datetime(2020, 7, 29, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}]","[{'commit_sha': 'badcdc9cc81a46b23d9a955b1bf867175507d0a8', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}]",Jeroen,11537861,,User,,117,,8,42
457748202,OMPL interface: fix / ignore clang-tidy warnings,"### Description

This makes it easier to spot new warnings when adding code.

Fix a single warning related to a variable name `solutionsWindow`.
```
warning: invalid case style for variable 'solutionsWindow' [readability-identifier-naming]
    std::size_t solutionsWindow = 10u;
                ^~~~~~~~~~~~~~~
                solutions_window
```

Ignore 6 warnings like this:
```
warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      if (nh_.hasParam(group_name + ""/"" + k))
```
because I think fixing it would make it less readable, and the code is not in a performance-critical path. A simple `group_name.append(""/"").append(k)` does not work because `group_name` is `const`. Or *is* there a readable way to fix this?

PS: I promise I will soon start working on the pull requests that actually add new functionality :)

### Checklist
- [x] **Required by CI**: Code is auto formatted using [clang-format](http://moveit.ros.org/documentation/contributing/code)
- [ ] Extend the tutorials / documentation [reference](http://moveit.ros.org/documentation/contributing/)
- [ ] Document API changes relevant to the user in the [MIGRATION.md](https://github.com/ros-planning/moveit/blob/master/MIGRATION.md) notes
- [ ] Create tests, which fail without this PR [reference](https://ros-planning.github.io/moveit_tutorials/doc/tests/tests_tutorial.html)
- [ ] Include a screenshot if changing a GUI
- [ ] While waiting for someone to review your request, please help review [another open pull request](https://github.com/ros-planning/moveit/pulls) to support the maintainers

[//]: # ""You can expect a response from a maintainer within 7 days. If you haven't heard anything by then, feel free to ping the thread. Thank you!""
",True,2227,https://api.github.com/repos/moveit/moveit/pulls/2227,https://github.com/moveit/moveit/pull/2227,closed,15,11,4,2,2,7,0,0,[],2020-07-28 11:29:22+00:00,2020-07-29 15:52:19+00:00,102177.0,"1 day, 4:22:57","[{'comment_id': 461557569, 'comment_body': 'I would prefer `std::string{path}.append(""/"").append(filename)` over nolint.', 'comment_created': datetime.datetime(2020, 7, 28, 12, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'v4hn', 'type': 'User'}, {'comment_id': 461557817, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 28, 12, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'v4hn', 'type': 'User'}, {'comment_id': 461577273, 'comment_body': 'Fix this!', 'comment_created': datetime.datetime(2020, 7, 28, 13, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 461581880, 'comment_body': 'True, I actually noticed this first scrolling through, but then I got distracted by the general nolints :)', 'comment_created': datetime.datetime(2020, 7, 28, 13, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'v4hn', 'type': 'User'}, {'comment_id': 461586664, 'comment_body': 'I agree nolint is ugly. But `path + ""/"" + filename` is so much more readable than in my opinion that I almost regret fixing the warning...\r\n\r\nWhat do you think of my compromise? I applied you\'re suggestion in `constraint_library.cpp` and went a different route in `ompl_interface.cpp`.', 'comment_created': datetime.datetime(2020, 7, 28, 13, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 461588891, 'comment_body': ""Hmmm, `full_param_name` would be a better name, as `k` is actually the `param_name` in this context.... but I'm getting lost in the details again."", 'comment_created': datetime.datetime(2020, 7, 28, 13, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 461595051, 'comment_body': ""Nah, the `full_` is not needed. k is a config parameter, but `param_name` refers to the **ROS parameter** name. That's fine."", 'comment_created': datetime.datetime(2020, 7, 28, 13, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'v4hn', 'type': 'User'}]","[{'commit_sha': 'ef555ceb1504764837f2c3ec664bca47c9eb4013', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caa713131a15e61fffbc27e6a6716a9b780fb32f', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}]",Jeroen,11537861,,User,,117,,8,42
464086392,fix memcpy bug in copyJointToOMPLState in ompl interface,"### Description

A single line bug fix (that was punching far above its weight class in terms of causing debugging fun.)

Example of the issue in [an online C++ shell](http://cpp.sh/6snnu).
Previous [related discussion](https://github.com/JeroenDM/moveit/pull/3) with @tylerjw, where he created the example that I use in the C++ shell link above.

### What (I think) happens in this piece of code

The joint data for a specific joint is copied from MoveIt to OMPL, it looks something like this:

Robot model memory (array of doubles), the bold values are copied.
| x1 | x2 | ... | ... **| y1 | y2 | y3|** ... | ... | ... | z1 | .. |

Copies into OMPL state memory (also an array of doubles)
| x1 | x2 **| y1 | y2 | y3 |** z1 |

The | ... | represent joint values for fixed joints (or mimic joints?) that are not relevant for OMPL.

### Test
I extended an existing test in `test_state_space.cpp` to make it fail without this fix. I mirrored the approach of the other tests. But maybe it is not the best way to test this. If anyone agrees, I can add another test that just copies fixed, known joint values.

### Checklist
- [x] **Required by CI**: Code is auto formatted using [clang-format](http://moveit.ros.org/documentation/contributing/code)
- [ ] Extend the tutorials / documentation [reference](http://moveit.ros.org/documentation/contributing/)
- [ ] Document API changes relevant to the user in the [MIGRATION.md](https://github.com/ros-planning/moveit/blob/master/MIGRATION.md) notes
- [x] Create tests, which fail without this PR [reference](https://ros-planning.github.io/moveit_tutorials/doc/tests/tests_tutorial.html)
- [ ] Include a screenshot if changing a GUI
- [ ] While waiting for someone to review your request, please help review [another open pull request](https://github.com/ros-planning/moveit/pulls) to support the maintainers

[//]: # ""You can expect a response from a maintainer within 7 days. If you haven't heard anything by then, feel free to ping the thread. Thank you!""
",True,2239,https://api.github.com/repos/moveit/moveit/pulls/2239,https://github.com/moveit/moveit/pull/2239,closed,49,15,2,4,3,8,0,0,[],2020-08-06 15:05:07+00:00,2020-08-07 07:27:04+00:00,58917.0,16:21:57,"[{'comment_id': 466509374, 'comment_body': 'Good catch, when you use `operator+` on a pointer it advances based on the type of the pointer.  Since getVariablePositions returns a double you want to advance the pointer by amounts of `sizeof(double)` not `sizeof(double) * sizeof(double)`.', 'comment_created': datetime.datetime(2020, 8, 6, 15, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 466511822, 'comment_body': '```suggestion\r\n    EXPECT_LT(robot_state.distance(robot_state2), 1e-12);\r\n```\r\n\r\nI see that the old code in this file also does the comparison this way.  The advantage of using `EXPECT_LT` is that it will print the value when it fails instead of just saying that it was false.  Also, since 1e-12 seems to be being used as an epsilon you could put a constant at the top of the file and replace all the uses with the constant.\r\n\r\nThis is more of just a nit as you are following the style already in this test.', 'comment_created': datetime.datetime(2020, 8, 6, 15, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 466512449, 'comment_body': '```suggestion\r\n      EXPECT_NE(joint_model, nullptr);\r\n```', 'comment_created': datetime.datetime(2020, 8, 6, 15, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 466513065, 'comment_body': '```suggestion\r\n    EXPECT_GT(robot_state.distance(robot_state2), 1e-12);\r\n```', 'comment_created': datetime.datetime(2020, 8, 6, 15, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 466513406, 'comment_body': '```suggestion\r\n    EXPECT_LT(robot_state.distance(robot_state2), 1e-12);\r\n```', 'comment_created': datetime.datetime(2020, 8, 6, 15, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 466514608, 'comment_body': ""[nit] again, just a style thing, `ss` isn't a nice descriptive name.  You are just using what was already here, so you are welcome to just ignore this comment."", 'comment_created': datetime.datetime(2020, 8, 6, 15, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 466531290, 'comment_body': ""I changed it to `std::numeric_limits<double>::epsilon();`, but used a variable name that is a bit more reasonable in length.\r\n\r\nThe tests seem to work, but I decreased the test tolerance from `1e-12` to `1e-16` ish. I'm a bit worried this will cause random test failures because the distance calculation probably contains summations. Maybe increase it a bit?\r\n\r\n@mamoll Look at the above comment before merging please."", 'comment_created': datetime.datetime(2020, 8, 6, 16, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 466532150, 'comment_body': 'Ah, now I really understand it, finally. Thanks!', 'comment_created': datetime.datetime(2020, 8, 6, 16, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}]","[{'commit_sha': '38d13256d64a7664acb4363c6b589c998542eb6a', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c6ac8e023e87b7c8fc170274f4a56a808fe7117', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b9641334c41e7eb43cace877209ddfe8fb85498', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a59a8a3203dfd04a315432de8bf039e485c312b8', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}]",Jeroen,11537861,,User,,117,,8,42
474593265,fix some spelling errors in the ompl interface,"### Description

Some minor spelling fixes in the OMPL interface, as mentioned in #2277.
",True,2279,https://api.github.com/repos/moveit/moveit/pulls/2279,https://github.com/moveit/moveit/pull/2279,closed,3,3,2,1,1,0,0,0,[],2020-08-27 10:06:26+00:00,2020-08-27 10:27:10+00:00,1244.0,0:20:44,[],"[{'commit_sha': '127d06168151f7b046d8e12619927cd04afe3a2e', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}]",Jeroen,11537861,,User,,117,,8,42
426053992,Creating MoveIt Plugins tutorial: fix namespace collision,"### Description

When running the `lerp_example.launch`, I get the following warning:
```
ros.rosconsole_bridge.class_loader.impl: SEVERE WARNING!!! A namespace collision has occured with plugin factory for class lerp_interface::LERPPlannerManager. New factory will OVERWRITE existing one. This situation occurs when libraries containing plugins are directly linked against an executable (the one running right now generating this message). Please separate plugins out into their own library or just don't link against the library and use either class_loader::ClassLoader/MultiLibraryClassLoader to open.
```
I removed the linking of the example with the lerp plugin library, and removed `lerp_planner_manager.cpp` from the main library as it was compiled two times.

In addition the example contained an unused include statement.
```
#include <lerp_interface/lerp_planning_context.h>
```

I think these fixes also make it easier to understand the idea behind plugins. Not having to link it at compile time is the whole point of the plugin infrastructure, as far as I understand it at least.

### Checklist
- [x] **Required by CI**: Code is auto formatted using [clang-format](http://moveit.ros.org/documentation/contributing/code)
- [ ] While waiting for someone to review your request, please consider reviewing [another open pull request](https://github.com/ros-planning/moveit/pulls) to support the maintainers

[//]: # ""You can expect a response from a maintainer within 7 days. If you haven't heard anything by then, feel free to ping the thread. Thank you!""
",True,492,https://api.github.com/repos/moveit/moveit_tutorials/pulls/492,https://github.com/moveit/moveit_tutorials/pull/492,closed,0,4,2,2,4,0,0,0,[],2020-06-01 15:24:46+00:00,2020-06-01 18:59:38+00:00,12892.0,3:34:52,[],"[{'commit_sha': 'd01cea4a172c6a4b825c73ac4637f0d20236e121', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75faa740392517321a595ae8f91333cdb35f85db', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}]",Jeroen,11537861,,User,,117,,8,42
471554918,OMPL Constrained State Space Planning,"### Description

In the context of a [Google Summer of Code project](https://github.com/ros-planning/moveit/issues/2092), I would like to add the constrained planning capabilities of OMPL to the existing interface. Previously, I split up the code in several pull requests. This was not entirely clear and impractical for testing. Hence this new approach, a single pull request that can be reviewed on a per commit basis.

**Edit** this pull request is quite large, but can be made smaller by first merging these tests separately:
- Add test to ompl interface for StateValidityChecker #2247 (already approved)
- WIP: add test for PlanningContextManager in ompl interface #2248 (needs some discussion)

### Why
It is one of the projects on the [future projects page](https://moveit.ros.org/documentation/contributing/future_projects/).

It can solve the long-standing [joint flip bug](https://github.com/ros-planning/moveit/issues/562) when planning with path constraints. It is especially useful in cases where the constrained region has zero volume in Cartesian space and the ` enforce_joint_model_state_space` (rejection sampling) does not work. For example planning with the end-effector constrained to a plane:

![case_2](https://user-images.githubusercontent.com/11537861/90881322-3d437d00-e3aa-11ea-8660-1084b8c5c93c.gif)

Or a line:

![case_3](https://user-images.githubusercontent.com/11537861/90881337-43d1f480-e3aa-11ea-94ee-297da2583a05.gif)

The current default planner that uses the `PoseModelStateSpace` can solve these problems, but the solution will often contain large jumps in joint space because it plans in Cartesian space. (Especially when adding obstacles in the scene.) This new planner plans in joint space. The example below illustrates the difference.

With the default `PoseModelStateSpace`:

![case_4_pose_model](https://user-images.githubusercontent.com/11537861/90881354-4df3f300-e3aa-11ea-930b-a732757f3957.gif)

With OMPL's `ConstrainedStateSpace`:

![case_4](https://user-images.githubusercontent.com/11537861/90881359-52b8a700-e3aa-11ea-9563-68fc4cb2e81c.gif)

Finally (and maybe most importantly) once this new planning approach is integrated, the possibilities for adding new constraints are endless. It would be really nice if we could pass arbitrary user-defined constraints to OMPL through some C++ interface in the future.

### Checklist

- [x] **Required by CI**: Code is auto formatted using [clang-format](http://moveit.ros.org/documentation/contributing/code)
- [x] [Extend the tutorials.](https://github.com/ros-planning/moveit_tutorials/pull/518)
- [ ] Document API changes relevant to the user in the [MIGRATION.md](https://github.com/ros-planning/moveit/blob/master/MIGRATION.md) notes
- [x] Create tests, which fail without this PR [reference](https://ros-planning.github.io/moveit_tutorials/doc/tests/tests_tutorial.html)
- [ ] Include a screenshot if changing a GUI
- [ ] While waiting for someone to review your request, please help review [another open pull request](https://github.com/ros-planning/moveit/pulls) to support the maintainers",False,2273,https://api.github.com/repos/moveit/moveit/pulls/2273,https://github.com/moveit/moveit/pull/2273,open,2613,29,20,51,50,120,0,0,[],2020-08-21 10:36:37+00:00,,0.0,,"[{'comment_id': 478347260, 'comment_body': '```suggestion\r\n  # Unfortunately it is not possible to test the planning context manager without introducing a ROS dependency.\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 11, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478347739, 'comment_body': '```suggestion\r\n *   * Neither the name of KU Leuven nor the names of its\r\n```\r\nHave a Ctrl+Shift+F for this in your changes', 'comment_created': datetime.datetime(2020, 8, 27, 11, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478348412, 'comment_body': '```suggestion\r\n * OMPL ConstrainedStateSpace requires a model of the constraints given as a generic\r\n```\r\nNote the ""constriant"" typo which occurs a few more times. I know you use VSCode, so I suggest [this](https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker)', 'comment_created': datetime.datetime(2020, 8, 27, 11, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478350195, 'comment_body': ""```suggestion\r\n * The 'scalar value' can be the difference between the position or orientation of a link and a target position or orientation, or\r\n```"", 'comment_created': datetime.datetime(2020, 8, 27, 11, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478350697, 'comment_body': '```suggestion\r\n  /** \\brief Initialize constraint based on message content.\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 27, 11, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478354728, 'comment_body': '```suggestion\r\n  /** \\brief For inequality constraints: calculate the value of the parameter that is being constrained by the bounds.\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 11, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478355002, 'comment_body': '```suggestion\r\n  /** \\brief For inequality constraints: calculate the Jacobian for the current parameters that are being constrained.\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 11, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478355421, 'comment_body': '```suggestion\r\n  /** \\brief Thread-safe storage of the robot state.\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 11, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478358180, 'comment_body': ""Wouldn't it make sense to call this `BoxConstraint` then? It seems like this is quite a special case of a position constraint"", 'comment_created': datetime.datetime(2020, 8, 27, 11, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478413290, 'comment_body': 'On first read I am not sure what is part of MoveIt and what is part of OMPL.', 'comment_created': datetime.datetime(2020, 8, 27, 13, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478424456, 'comment_body': 'Might be worth linking the discussion about this here', 'comment_created': datetime.datetime(2020, 8, 27, 13, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478429373, 'comment_body': 'This should probably be prettier and DEBUG level', 'comment_created': datetime.datetime(2020, 8, 27, 13, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478429850, 'comment_body': '?', 'comment_created': datetime.datetime(2020, 8, 27, 13, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478430661, 'comment_body': 'Can we name `si_` to something more descriptive?', 'comment_created': datetime.datetime(2020, 8, 27, 13, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478432418, 'comment_body': 'You can also link to a writeup with debugging instructions instead', 'comment_created': datetime.datetime(2020, 8, 27, 13, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478459563, 'comment_body': 'I started using that plugin this week :) I really needed it...', 'comment_created': datetime.datetime(2020, 8, 27, 14, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 478460732, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 27, 14, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 478470781, 'comment_body': 'Good idea, it is a bit ugly to leave this in.', 'comment_created': datetime.datetime(2020, 8, 27, 14, 40, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 478474052, 'comment_body': ""It's from the OMPL source code (`ompl::base::StateValidityChecker`). I could create a pull request there, but I can imagine it would be quite a large one.\r\n\r\nI can also add a comment above every use here, it's only used 4 times.\r\n"", 'comment_created': datetime.datetime(2020, 8, 27, 14, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 478477706, 'comment_body': 'The whole factory method is a template code to support different constraints, but only a single option is actually returns a non-nullptr at the moment (position constraints). All the other cases spit out warnings or errors.\r\n\r\nI guess I can remove all the unnecessary template code and only add it when needed, I never though about that.', 'comment_created': datetime.datetime(2020, 8, 27, 14, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 478486436, 'comment_body': 'Do you mean [this writeup](https://github.com/JeroenDM/moveit/pull/2)?', 'comment_created': datetime.datetime(2020, 8, 27, 15, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 478529925, 'comment_body': ""Oh true it's OMPL. A comment at the end of the line with the spelled out variable name might be enough."", 'comment_created': datetime.datetime(2020, 8, 27, 16, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478530909, 'comment_body': 'Oh. ""just **giving** feedback""? I was having trouble parsing the sentence.', 'comment_created': datetime.datetime(2020, 8, 27, 16, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 478531925, 'comment_body': ""Yes, it's helpful. Although it might be more appropriate to copy it to your thread on the ros-planning repo. Nitpicking though."", 'comment_created': datetime.datetime(2020, 8, 27, 16, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'felixvd', 'type': 'User'}, {'comment_id': 479137765, 'comment_body': ""Good idea, that's a better name indeed."", 'comment_created': datetime.datetime(2020, 8, 28, 11, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 479157925, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 28, 11, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 479158337, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 28, 11, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 479169422, 'comment_body': 'I updated the comment and left the rest of the function as is. I feel it is pretty clear with the log messages and allows for easy integration of orientation constraints and a combination of position and orientation constraints in the future.\r\n\r\nNow the comment reads:\r\n```C++\r\n// The factory method contains template code to support different constraints, but only position constraints are\r\n// currently supported. The other options return a nullptr for now and should not be used.\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 11, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 479180306, 'comment_body': 'I replaced the long comment with: `// Developer tip: replace this with a dynamic_cast for debugging`. As for debugging instructions, I think it will be useful if I write a good description of all these details in a central place somewhere. But I need to come up with a good format and a good place to put it. Maybe the MoveIt [concepts page](https://moveit.ros.org/documentation/concepts/) on the website?', 'comment_created': datetime.datetime(2020, 8, 28, 11, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 479188890, 'comment_body': ""I feel like I'm too deep in all of this to understand the question :s\r\n\r\nIn the comments and code, everything from OMPL is prefixed with `ompl::base`. In the arguments of the methods of this class, OMPL states are called `ompl_state` and MoveIt states fo type `RobotState` are called `robot_state`."", 'comment_created': datetime.datetime(2020, 8, 28, 11, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 504779410, 'comment_body': '```suggestion\r\n    ROS_ERROR_STREAM(""Constraint method calcError was not overridden, so it should not be used."");\r\n```', 'comment_created': datetime.datetime(2020, 10, 14, 15, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 504779830, 'comment_body': '```suggestion\r\n    ROS_ERROR_STREAM(""Constraint method calcErrorJacobian was not overridden, so it should not be used."");\r\n```', 'comment_created': datetime.datetime(2020, 10, 14, 15, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 504782303, 'comment_body': ""```suggestion\r\n   * threads due to OMPL's LazyGoalSampler, we need a separate robot state in every thread.\r\n```"", 'comment_created': datetime.datetime(2020, 10, 14, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 504787455, 'comment_body': ""```suggestion\r\n *  When you set the name of a constraint to 'use_equality_constraints', all constraints with a dimension lower than\r\n```"", 'comment_created': datetime.datetime(2020, 10, 14, 15, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 504788164, 'comment_body': 'How do you set the name of a constraint?', 'comment_created': datetime.datetime(2020, 10, 14, 15, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 504790877, 'comment_body': ""Can it be exactly the same value?\r\n\r\nShouldn't there be a way to set `equality_constraint_threshold_` to a different value? If not, then you might as well make it `static const`."", 'comment_created': datetime.datetime(2020, 10, 14, 15, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 504796653, 'comment_body': 'why do you need this?', 'comment_created': datetime.datetime(2020, 10, 14, 16, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 504817705, 'comment_body': ""I'd make Bounds operate over Eigen::VectorXd rather than doubles. In the code you almost always have to write for loops to iterate over an array of Bounds. By making Bounds::penalty and Bounds::derivative map from Eigen vectors to Eigen vectors, you can avoid the loops and create more readable (and potentially more performant) code.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 10, 14, 16, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 504818965, 'comment_body': 'by changing Bounds as suggested above, this could be written as:\r\n```\r\nout = robot_jacobian * bounds_.derivative(constraint_error);\r\n```', 'comment_created': datetime.datetime(2020, 10, 14, 16, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 504825832, 'comment_body': '```suggestion\r\n        std::make_shared<ConstrainedPlanningStateValidityChecker>(this));\r\n```', 'comment_created': datetime.datetime(2020, 10, 14, 16, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 504903298, 'comment_body': 'I used the ""name"" field in [moveit_msgs/Constraints](http://docs.ros.org/latest/api/moveit_msgs/html/msg/Constraints.html), but it is hacky.\r\n\r\n**I need to remove this comment** as it will not be necessary anymore if I add change the orientation constraint message as discussed in [this issue](https://github.com/ros-planning/moveit_msgs/issues/89). I started working on it but my pace is not the same as it was this summer...', 'comment_created': datetime.datetime(2020, 10, 14, 18, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 504911995, 'comment_body': 'Because the `ompl::base::State` pointer passed to the state validity checker has a different type when planning in constrained state space. I need to ""unwrap"" it to get to the actual state, as is done [here](https://github.com/JeroenDM/moveit/blob/ad0aa16fbb206481fb1394c804176f509b84e2da/moveit_planners/ompl/ompl_interface/src/detail/state_validity_checker.cpp#L209) like so:\r\n```C++\r\n  // Unwrap the state from a ConstrainedStateSpace::StateType\r\n  auto state = wrapped_state->as<ompl::base::ConstrainedStateSpace::StateType>()->getState();\r\n```\r\n\r\nI considered using dynamic casting to check at runtime what kind of pointer it is, but I assumed this would be slower and collision checking is often *the* bottleneck. (I did try this out and it works, but I did not benchmark it...).\r\n\r\nBoth solutions are equally ugly in my opinion...\r\n\r\n', 'comment_created': datetime.datetime(2020, 10, 14, 19, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 514530223, 'comment_body': 'In a previous commit you had commented out debugging code in here.  If you wanted to you could put it back with an assert that will get built into the code if it is built in debug mode.\r\n\r\n```c++\r\nassert((dynamic_cast<ompl_interface::ConstrainedPlanningStateSpace::StateType*>(ompl_state)) && ""unexpected state type!"");\r\n```\r\n\r\nThat is only if you think it would be reasonable for someone to write code that misused this.  It looks like you need the cast (I\'m not sure what `as<>` does, maybe it would fail and this is unnesesary).', 'comment_created': datetime.datetime(2020, 10, 29, 20, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514538847, 'comment_body': ""These parameter types seem really confusing to me.  Is this following some existing patterns in the code for parameters?  robot_state is a non-const reference as you are modifying it but ompl_state is a const ptr.  \r\n\r\nThere are not clear guidelines for how this should be done (and it has changed as the language has changed).  However, I think it is important to first be consistent with the existing style and second, make parameter type decisions that are easy to use correctly and hard to use incorrectly.\r\n\r\nIn the google style guide for C++ inout parameters (initialized parameters, you are going to modify the state of) should be passed by poiter so it is obvious that the parameter can be modified by reading where it is called.  You then include an `assert(ptr != nullptr);` at the top of the function.  This serves two purposes, it makes it clear to the user of the function when they are using it that the function expects to modify the parameter.  The assert tells the user (at runtime) that it can't be uninitalized.  Secondly in google's style guide input only parameters should be const-ref if they are not trivially copyable and normal parameters if they are (like plain old data types).  This means that when you are writing code against a function like this it is really obvious what is going to be modified by the calling of the function.\r\n\r\nI see the reason you chose these types may have had to do with the input parameters of setJointGroupPositions.  Weither you should follow my advice and change the interface of this function depends on two things.  First is this an external function, do you expect users to use this or is it just for some other code you wrote?  Second, if ompl_state was a const& can you use the as<>() functionality?   "", 'comment_created': datetime.datetime(2020, 10, 29, 20, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514539860, 'comment_body': ""Same as the comment above about the types.  I think you should also put an `assert(ptr != nullptr);` as the first line in any function that takes a pointer.  It will not make any release builds slower but could make someone's life much easier if they accidentally call this with an uninitialized pointer."", 'comment_created': datetime.datetime(2020, 10, 29, 20, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514540401, 'comment_body': 'Here is another confusing function prototype.', 'comment_created': datetime.datetime(2020, 10, 29, 20, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514547166, 'comment_body': ""What does this mean?  Is this a pure virtual function that had to be overridden?  If so, I'd call abort with a message to make sure the user knows they accidentally called something they shouldn't."", 'comment_created': datetime.datetime(2020, 10, 29, 20, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514547898, 'comment_body': 'Does this need to be an info level message?  Could it be debug instead?', 'comment_created': datetime.datetime(2020, 10, 29, 20, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514548073, 'comment_body': 'Ditto the comment above about the log level.', 'comment_created': datetime.datetime(2020, 10, 29, 20, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514548680, 'comment_body': 'Convert these to make_shared so these are just one dynamic memory allocation instead of two.', 'comment_created': datetime.datetime(2020, 10, 29, 20, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514549266, 'comment_body': ""I know you didn't edit this line, but while you are at it, `make_shared`."", 'comment_created': datetime.datetime(2020, 10, 29, 20, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514550971, 'comment_body': ""```suggestion\r\n        std::lock_guard<std::mutex> slock(cached_contexts_->lock_);\r\n```\r\n\r\n[Here is a nice explination](http://jakascorner.com/blog/2016/02/lock_guard-and-unique_lock.html) as to the differences between `unique_lock` and `lock_guard`.  In this case I don't think we need the extra complexity of a `unique_lock`.  "", 'comment_created': datetime.datetime(2020, 10, 29, 20, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514552703, 'comment_body': 'I think it would make more sense to remove the `verbose` variable from the interface and tests and instead just use the debug log type.', 'comment_created': datetime.datetime(2020, 10, 29, 20, 40, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514553203, 'comment_body': 'I commented elsewhere but I think it would be nicer to remove this verbose flag from the tests and various functions and instead use the debug (or trace) log level.', 'comment_created': datetime.datetime(2020, 10, 29, 20, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514553500, 'comment_body': 'Here is another place where we could just use the debug log level.', 'comment_created': datetime.datetime(2020, 10, 29, 20, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514555231, 'comment_body': ""What is `num_cons_` and why is it default to 3?  Please add a documentation string to the constructor for this.  I'm probably just confused because I don't understand what this is used for yet.  Is that the number of dimensions or something else?"", 'comment_created': datetime.datetime(2020, 10, 29, 20, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514558825, 'comment_body': 'Please namespace logs.  It makes it much easier to identify where in the code they come from when you get them in your logs.\r\n\r\n```suggestion\r\n    ROS_ERROR_STREAM_NAMED(""BaseConstraint"", ""Constraint method calcError was not overridded, so it should not be used."");\r\n```', 'comment_created': datetime.datetime(2020, 10, 29, 20, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514562703, 'comment_body': ""yikes, const_cast\r\n\r\nI probably just don't understand what is happening here but please add a comment explaining why we should const_cast this and add it to the function docstring in the header that this method could modify this object (in this way).  That way it is easier in the future for the next person who might need to understand and modify this in some way."", 'comment_created': datetime.datetime(2020, 10, 29, 20, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514564011, 'comment_body': 'assert that wrapped_stae is not nullptr', 'comment_created': datetime.datetime(2020, 10, 29, 21, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514564590, 'comment_body': 'newline at eof', 'comment_created': datetime.datetime(2020, 10, 29, 21, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514565447, 'comment_body': 'Here too with the shared_ptr.  Please do a search through your pr for the keyword `new` and try to remove it in any place it could be a make_shared or make_unique.', 'comment_created': datetime.datetime(2020, 10, 29, 21, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514566509, 'comment_body': 'newline at eof', 'comment_created': datetime.datetime(2020, 10, 29, 21, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514566667, 'comment_body': 'here is another verbose flag', 'comment_created': datetime.datetime(2020, 10, 29, 21, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514568933, 'comment_body': ""You don't need this.  If make_shared fails it throws a bad_alloc and the test will fail there. (that is assuming `computeLocations` won't reset state_space_ somehow?"", 'comment_created': datetime.datetime(2020, 10, 29, 21, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514569199, 'comment_body': 'This too is extra, make_shared will throw if the allocation fails.', 'comment_created': datetime.datetime(2020, 10, 29, 21, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514569748, 'comment_body': 'Use one of the gtest macros for this.\r\n\r\n```suggestion\r\n    ASSERT_NE(si_constrained, nullptr);\r\n```', 'comment_created': datetime.datetime(2020, 10, 29, 21, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514569908, 'comment_body': 'newline at eof', 'comment_created': datetime.datetime(2020, 10, 29, 21, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514570675, 'comment_body': 'Why are these commented out?', 'comment_created': datetime.datetime(2020, 10, 29, 21, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514570778, 'comment_body': 'Here too?', 'comment_created': datetime.datetime(2020, 10, 29, 21, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514570862, 'comment_body': '[nit] newline at eof', 'comment_created': datetime.datetime(2020, 10, 29, 21, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514570919, 'comment_body': '[nit] newline at eof', 'comment_created': datetime.datetime(2020, 10, 29, 21, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 514927142, 'comment_body': 'It should be impossible for the end-user to misuse this part, as they do not directly handle state spaces normally.\r\n\r\nThe method also gets explicitly tested in `test_constrained_planning_state_space.cpp`, but that does not exclude that there could still be some bugs related to all this casting that is unfortunately necessary.', 'comment_created': datetime.datetime(2020, 10, 30, 8, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 514928643, 'comment_body': 'This is related to the rather complicated approach to select state spaces. It is documented in the corresponding header file:\r\n```C++\r\n  /** \\brief Return a priority that this planner should be used for this specific planning problem.\r\n   *\r\n   * This state space factory is currently only used if `use_ompl_constrained_state_space` was set to `true` in\r\n   * ompl_planning.yaml. In that case it is the only factory to choose from, so the priority does not matter.\r\n   * It returns a low priority so it will never be choosen when others are available.\r\n   * (The second lowest priority is -1 in the PoseModelStateSpaceFactory.)\r\n   *\r\n   * For more details on this state space selection process, see:\r\n   * https://github.com/JeroenDM/moveit/pull/2\r\n   * **/\r\n```\r\n\r\nI will add a comment in the source file that quickly explains it and point to the header file for more info.', 'comment_created': datetime.datetime(2020, 10, 30, 8, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 514930346, 'comment_body': 'Something like this:\r\n```C++\r\n  // Return the lowest priority currently existing in the ompl interface.\r\n  // This state space will only be selected if it is the only option to choose from.\r\n  // See header file for more info.\r\nreturn -2;\r\n```', 'comment_created': datetime.datetime(2020, 10, 30, 8, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 514937953, 'comment_body': 'No reason, just stupidity. Thanks for commenting!', 'comment_created': datetime.datetime(2020, 10, 30, 8, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 514938198, 'comment_body': 'Same as above. I uncommented them again.', 'comment_created': datetime.datetime(2020, 10, 30, 8, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 514966495, 'comment_body': '## Assert statement\r\nI like the idea of adding `assert(ptr != nullptr);`. There are many other places in the existing OMPL interface where this could be valuable, but I feel like that does not belong in this PR. I\'ll just add it to the new code.\r\n\r\n## `state->as<StateType>()` pattern\r\nThis pattern is used extremely often in the OMPL interface. It is based on the central design decision in OMPL to pass states around as pointers. Every function should cast the pointer to the proper type before using it. Because it is used so often, OMPL defines a helper method [State::<T>as()](https://ompl.kavrakilab.org/classompl_1_1base_1_1State.html#ace9774faf8793299dc105292f8557987) to make this easier.\r\n\r\nFor a constrained state space, it gets more complicated. We do not pass around `State` pointers, but a `WrapperState` (in full [ompl::base::WrapperStateSpace::StateType](https://ompl.kavrakilab.org/classompl_1_1base_1_1WrapperStateSpace_1_1StateType.html)). This type of state has a method `getState()` to access the ""normal"" state pointer. This ""normal"" state pointer is then cast again to the appropriate type. We end up with:\r\n\r\n```C++\r\nompl_state->as<ompl::base::ConstrainedStateSpace::StateType>()->getState()->as<StateType>()\r\n```\r\n(This has caused me a lot of headaches (I mean, interesting challenges...), and I\'m still not sure I completely understand all the implications.)\r\n\r\n## Can we make this easier?\r\nI think OMPL and MoveIt\'s OMPL interface are so tightly coupled that it is difficult to avoid the `state->as<StateType>()` pattern. But there could be ways to make it easier to use. Adding the assert statement seems like a good step in that direction.\r\n\r\n## Q&A\r\n> First is this an external function, do you expect users to use this or is it just for some other code you wrote?\r\n\r\nThis is all internal as far as I know. The user interface (ignoring MoveGroup for a moment) looks like this:\r\n\r\n```C++\r\n// setup the planning context manager\r\nompl_interface::PlanningContextManager pcm(robot_model_, constraint_sampler_manager_);\r\n\r\n// get a planning context for a specific planning scene and request\r\nauto pc = pcm.getPlanningContext(planning_scene_, request, error_code, node_handle_, false);\r\n\r\n// solve your problem\r\nplanning_interface::MotionPlanResponse res;\r\nbool res = pc->solve(res);\r\n```\r\n(The tests in `test_planning_context_manager.cpp` show this in more detail.)\r\n\r\n> Second, if ompl_state was a const& can you use the as<>() functionality?\r\n\r\nI\'m not sure, can you static cast references? The implementation goes:\r\n\r\n```C++\r\ntemplate <class T>\r\nT *as()\r\n {\r\n BOOST_CONCEPT_ASSERT((boost::Convertible<T *, State *>));\r\n   return static_cast<T *>(this);\r\n}\r\n```\r\n\r\nAlso, many of the functions that take raw state pointers implement an interface imposed by OMPL. (Not the one discussed here though.)', 'comment_created': datetime.datetime(2020, 10, 30, 9, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 514967029, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 10, 30, 9, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 514977397, 'comment_body': 'Note to self @JeroenDM , did `std::make_shared` work here? I seem to remember it did not work in some places.', 'comment_created': datetime.datetime(2020, 10, 30, 9, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 514980393, 'comment_body': 'This is not my code, but I feel an info message is justified. You have to ask MoveIt explicitly to reuse a planning graph, so it seems nice to have some feedback that it actually happened, no? See #1799 for the related PR.', 'comment_created': datetime.datetime(2020, 10, 30, 9, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 514984515, 'comment_body': ""I will remove the `verbose` flags in all the other places. This one however is the same one as discussed in #2247 and is passed to the state validity checker. The comment will get updated once I rebase. (And I really should do this now, I'm going to have some nasty merge conflicts otherwise...)"", 'comment_created': datetime.datetime(2020, 10, 30, 9, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 514987215, 'comment_body': 'Ooops, the comment will not update after the rebase unless I merge the different tests. I will update after the rebase.', 'comment_created': datetime.datetime(2020, 10, 30, 10, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 515167597, 'comment_body': ""Ah, I'm sorry I didn't understand that.  Thank you for clarifying."", 'comment_created': datetime.datetime(2020, 10, 30, 15, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 515167990, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 10, 30, 15, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 515200109, 'comment_body': ""It looks like there is a boost assert there so we shouldn't need to add ours.  (I'm not sure what a cncept assert is).\r\n\r\nLooking at the examples (the tests) I don't mind this interface nearly as much.  It seems like it is this way because of the interface of ompl and the intersection with the moveit stadards (the ref to the RobotState).  I think the combination of a non-const ref and a const ptr had me confused what you were trying to do here."", 'comment_created': datetime.datetime(2020, 10, 30, 15, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 515201019, 'comment_body': ""I do think adding `assert(ptr != nullptr);` would be useful.  The assert I don't think we need is one that tests if the cast will work (as that is already in the as<>() function)."", 'comment_created': datetime.datetime(2020, 10, 30, 15, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 524586693, 'comment_body': '```suggestion\r\nclass Bounds\r\n```', 'comment_created': datetime.datetime(2020, 11, 16, 21, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 524589365, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2020, 11, 16, 21, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 524593590, 'comment_body': 'Also, remove the trailing underscore since this is typically used for member variables.', 'comment_created': datetime.datetime(2020, 11, 16, 21, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 524599960, 'comment_body': 'Maybe you are still working on this, but I assume that eventually you will rename Bounds2 to Bounds and eliminate the Bounds class above, right?', 'comment_created': datetime.datetime(2020, 11, 16, 21, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 524932278, 'comment_body': ""Indeed, I am committing work in progress. Sorry for the confusion, I'll let you know when the refactoring is finished."", 'comment_created': datetime.datetime(2020, 11, 17, 7, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 524963684, 'comment_body': 'This change must have sneaked in when solving the merge conflicts. I linked the library again, it is required for the test. Or did you mean something else with the suggestions?', 'comment_created': datetime.datetime(2020, 11, 17, 8, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 524972964, 'comment_body': 'I also added it to the existing state validity checker.', 'comment_created': datetime.datetime(2020, 11, 17, 8, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 524980687, 'comment_body': ""I estimate there are close to 30 instances of this in the existing code base, but I think it will be confusing to change them all in this pull request. I changed these two instances to make_shared. I'm not sure make_unique is ok here."", 'comment_created': datetime.datetime(2020, 11, 17, 8, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 524982249, 'comment_body': 'I changed it and the tests pass.', 'comment_created': datetime.datetime(2020, 11, 17, 8, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 524984290, 'comment_body': 'See earlier comment\r\n>I estimate there are close to 30 instances of this in the existing code base, but I think it will be confusing to change them all in this pull request\r\n\r\n@JeroenDM add this in a separate pull request?', 'comment_created': datetime.datetime(2020, 11, 17, 8, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 525307796, 'comment_body': ""I just suggested deleting the trailing whitespace. Obviously, if `${eigen_conversions_LIBRARIES}` is still needed, then don't delete that :-)."", 'comment_created': datetime.datetime(2020, 11, 17, 16, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mamoll', 'type': 'User'}, {'comment_id': 528525962, 'comment_body': 'Ah, ok. I have a single whitespace before every ""add test"" command now.', 'comment_created': datetime.datetime(2020, 11, 23, 8, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 528537125, 'comment_body': ""Resolved based on an earlier discussion:\r\n\r\n>Looking at the examples (the tests) I don't mind this interface nearly as much. It seems like it is this way because of the interface of ompl and the intersection with the moveit stadards (the ref to the RobotState)."", 'comment_created': datetime.datetime(2020, 11, 23, 8, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 528538043, 'comment_body': 'Resolved because of my comment higher up in the code:\r\n\r\n>This is not my code, but I feel an info message is justified. You have to ask MoveIt explicitly to reuse a planning graph, so it seems nice to have some feedback that it actually happened, no? See #1799 for the related PR.', 'comment_created': datetime.datetime(2020, 11, 23, 8, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 528539083, 'comment_body': 'As mentioned below, there are too many cases in the existing code to add this to the current PR I think. I added to my TODO list to create a separate PR.', 'comment_created': datetime.datetime(2020, 11, 23, 8, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 528544722, 'comment_body': ""I'm not entirely sure how it works with the cached context having a persistent lock, but as there isn't any `unlock()` call anywhere in the code, I agree with replacing it with the less complex default option."", 'comment_created': datetime.datetime(2020, 11, 23, 8, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 528546568, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 11, 23, 8, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 528557705, 'comment_body': 'The assert statements are added.', 'comment_created': datetime.datetime(2020, 11, 23, 9, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 540839023, 'comment_body': 'I changed it to static const and continued the discussion on why it exists and how large it should be in the main thread to make it easier to find.', 'comment_created': datetime.datetime(2020, 12, 11, 10, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 540848703, 'comment_body': 'I removed the verbose flags where possible. (Some are necessary because the state validity checker uses an explicit verbose flag.)', 'comment_created': datetime.datetime(2020, 12, 11, 10, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 540849299, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 12, 11, 10, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 540853149, 'comment_body': ""I've added a comment. All constraints currently implemented have 3 constraint equations, so it might just as well be the default. The MoveIt constraint messages such as position and orientation constraints also have 3 dimensions."", 'comment_created': datetime.datetime(2020, 12, 11, 10, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 540856750, 'comment_body': 'done (a while ago)', 'comment_created': datetime.datetime(2020, 12, 11, 10, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 540858086, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 12, 11, 10, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 540862002, 'comment_body': 'done. `ComputeLocations` tries to access the memory but does not reset it as far as I understand.', 'comment_created': datetime.datetime(2020, 12, 11, 10, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 540862601, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 12, 11, 10, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 540862854, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 12, 11, 10, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 540869015, 'comment_body': 'I understand that this an (arguably less ideal) way to implement caching of the validity. I added a single comment at the top of the file to avoid copying the same comment many times:\r\n```C++\r\n/** A state validity checker checks:\r\n *\r\n * - Bounds (joint limits).\r\n * - Collision.\r\n * - Kinematic path constraints.\r\n * - Generic user-specified feasibility using the `isStateFeasible` of the planning scene.\r\n *\r\n * IMPORTANT: Although the isValid method takes the state as `const ompl::base::State* state`,\r\n * it uses const_cast to modify the validity of the state with `markInvalid` and `markValid` for caching.\r\n * **/\r\n```', 'comment_created': datetime.datetime(2020, 12, 11, 11, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 555182861, 'comment_body': ""We could also declare the `flags` member of `ModelBasedStateSpace::StateType` as `mutable`, so that it can be changed from a `const` qualified member function. I'm happy to provide a PR.\r\nBut one question (as I don't know the details): is the state a shared object between threads? If so, the `flags` should probably be an `atomic` to avoid data races."", 'comment_created': datetime.datetime(2021, 1, 11, 16, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gleichdick', 'type': 'User'}, {'comment_id': 631760679, 'comment_body': 'FYI, this line introduced a regression on moveit2 https://github.com/ros-planning/moveit2/pull/455', 'comment_created': datetime.datetime(2021, 5, 13, 12, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JafarAbdi', 'type': 'User'}, {'comment_id': 674848127, 'comment_body': '@JeroenDM the modernization with std::make_shared introduced a regression. With these two line changes I cannot run the Constrained planning tutorial anymore, it is crashing.', 'comment_created': datetime.datetime(2021, 7, 22, 14, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gautz', 'type': 'User'}, {'comment_id': 674922004, 'comment_body': ':( I remember similar problems last year. Do you have some error messages?', 'comment_created': datetime.datetime(2021, 7, 22, 15, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 674948263, 'comment_body': 'unfortunately it is just crashing.', 'comment_created': datetime.datetime(2021, 7, 22, 16, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gautz', 'type': 'User'}, {'comment_id': 678563870, 'comment_body': 'Jup this was clearly a bug, my mistake :s I ran the tutorial locally again now and it seems to be working again. (Without the support for orientation constraints with this planner of course, but it just falls back to the PoseModel planner.) (FWI turning on debug messages can be really helpful http://dav.ee/blog/notes/archives/898 :) )\r\n', 'comment_created': datetime.datetime(2021, 7, 28, 18, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}]","[{'commit_sha': 'c2caecc206959ffbc1bb1ceb9e28d0b2794b48e6', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf9091223d6078dffd35e116740152980a520365', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec0274195b25e31a25fadbe7a2488a47187d9232', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9b6a89c3aecbb3fb9709b4a929ffa44f9aa3e3a', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '193bc1f03ee0163b246b0535a47b92af78abaa55', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a218001598fc2eab3ff0d2a9418df317174567b2', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '294f2b87b802c60e6e22d7e9900f1ae5b3a72c42', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26214d6cf47da057d3dc86cf8b022bad904c77e4', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd86b865c851d739f7f491415e73129be70518162', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76435b1733c1a779b07a6bc6d791c84479376e9a', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93d96b9ae873c01e3d5bc88bd0c34f90c8084ffe', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '438e5bfc89c7653c95111597fa9e61c2de8e712b', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '543d2371e660e9f5dffae8f9139d7aefc27338c5', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04b68064c73229700cda3737bb154c815fc09295', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf690e2189a14f52dd97537c28dfabdebb0218e6', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9a30f91c1b685ffc269bef0c6f3e99a3830ba80', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '874111cca7955edacebc371129d79bd48032b932', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6df0f3c6a8d354346b66fedc705f598b7779911e', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6df3623dc74e4c6d6ec589d6fc3510f4eb563a6f', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '572d3607c5cc89b05fc8531a1fc25c5ad660f340', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cded2a5f2debef1f21f7bb822259d5bb1d3be6e0', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab8af3fb08a0bcaa9542928e3f4828cd173f9586', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c60b579fec91fd5986153cf267a09325c2b36e06', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b8b01ad0e79f693397307be46a12708e058cb5c', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85b436deaf1f43357d0dea8a4d18b61b3c4fdf6d', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8af01a84365ac09e892cfa9ebc5928bc96182e39', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72c414eed91a67729d2fc8f1f723d3486a007c9b', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0caee59b6ebdd86532751c618fad8906af488ce', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e008bd2e1c7c33db02dccc102cd65dd0992d37b', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b406850aa9712dc8e8f01354ec3fc31412bfc0ec', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a59bc8b11980bd64b7f28a454eb1309875b39af', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5cfb9e1baa78c1505464acee39f5e62c7d68151', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e1a847d2ae518485a2d4fa34b295802f3042cb1', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a331b9d7415348ef88c56f62ecdd18168f6b6b4b', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c1dbbf0ec30223667c0f7630fb7d39e7e3a8f02', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16bb63524376f67cbf6e0342081bbe7ddc8c07ba', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66f95ff91bf42c5586ca0d0d8bbb98144867b7cf', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd84da4eab0f8a72d86d8552daf89dd03ac20876', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e70b5fe080113391a7f72b09cf5a863e59447bc4', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da147b671c71de0d3393dc83cafa5be389e57605', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df2e35f0f6845676fafb96d8cd0b2b2a5467bb0b', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f87e2390acd03cb798229fe997bd6e60b8593ee1', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e290ce13623b5293ceec4709e651b56e37fd433', 'committer_username': 'gleichdick', 'committer_name': 'Bjar Ne', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 25, 6, 52, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7655208a2f8a6c42866f8ded3c37c51f705b1e3c', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96a4b47ef1e117f54ccfb4d9df2b97943c82466b', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '065dd104957f51064899c56fd4101208bbc71990', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56bf8e339b92013068505ce832c84a835e1e7cbf', 'committer_username': 'pradeepr-roboticist', 'committer_name': 'Pradeep Rajendran', 'committer_email': 'pradeepunique1989@gmail.com', 'commit_date': datetime.datetime(2014, 2, 5, 19, 43, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbd63394635932d955e04b74d6d5de5732021b34', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '175b5522b9a0cf052501daa9c2c03e6db3a0750d', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb594a81c52f8c9258ffac752bf2fe3bda40c3dd', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e303afcb1a8932427ef9bbe1bfa7b0ef330400a6', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}]",Jeroen,11537861,,User,,117,,8,42
562752708,OMPL constrained planning,"OMPL for constrained cartesian planning.

Co-authored-by: JeroenDM <jeroendemaeyer@live.be>

### Description
This is a port from [PR 2273](https://github.com/ros-planning/moveit/pull/2273) that provides position constraints. 

A demo and integration test are included. 
Add the follow lines to ompl_planning.yaml in panda_config under `panda_arm:`
```
enforce_constrained_state_space: true
projection_evaluator: joints(panda_joint1,panda_joint2)
```

#### Demo
```
colcon build --symlink-install  --packages-up-to run_ompl_constrained_planning --mixin rel-with-deb-info compile-commands ccache
source install/setup.bash
ros2 launch run_ompl_constrained_planning run_move_group.launch.py
ros2 launch run_ompl_constrained_planning run_ompl_demo.launch.py
```

#### Unit Tests 
```
colcon build --symlink-install  --packages-up-to moveit_planners_ompl --mixin rel-with-deb-info compile-commands ccache
colcon test --event-handlers console_direct+ --packages-select moveit_planners_ompl
```

#### Integration Test
```
colcon build --symlink-install  --packages-up-to moveit_ros_planning_interface --mixin rel-with-deb-info compile-commands ccache
colcon test --event-handlers console_direct+ --packages-select moveit_ros_planning_interface
```

The demo outputs:
### Box Constraint
![box](https://user-images.githubusercontent.com/36201047/106045609-688b7000-609e-11eb-8a51-9f4ec4f01cb3.gif)

### Plane Constraint
![plane](https://user-images.githubusercontent.com/36201047/106045618-6b866080-609e-11eb-87be-00a8aa0479e5.gif)



### Checklist
- [x] **Required by CI**: Code is auto formatted using [clang-format](http://moveit.ros.org/documentation/contributing/code)
- [ ] Extend the tutorials / documentation [reference](http://moveit.ros.org/documentation/contributing/)
- [ ] Document API changes relevant to the user in the [MIGRATION.md](https://github.com/ros-planning/moveit/blob/master/MIGRATION.md) notes
- [x] Create tests, which fail without this PR [reference](https://ros-planning.github.io/moveit_tutorials/doc/tests/tests_tutorial.html)
- [x] Include a screenshot if changing a GUI
- [ ] While waiting for someone to review your request, please help review [another open pull request](https://github.com/ros-planning/moveit/pulls) to support the maintainers

[//]: # ""You can expect a response from a maintainer within 7 days. If you haven't heard anything by then, feel free to ping the thread. Thank you!""
",True,347,https://api.github.com/repos/moveit/moveit2/pulls/347,https://github.com/moveit/moveit2/pull/347,closed,4490,227,41,1,9,33,0,0,[],2021-01-27 19:53:38+00:00,2021-02-15 16:56:31+00:00,1630973.0,"18 days, 21:02:53","[{'comment_id': 570373958, 'comment_body': 'should this really be enabled? And if yes, why not add to moveit_package()?', 'comment_created': datetime.datetime(2021, 2, 4, 16, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 570375644, 'comment_body': 'Can you remove these comments or add notes why these should stay?', 'comment_created': datetime.datetime(2021, 2, 4, 16, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 570377155, 'comment_body': ' `orientation.w` defaults to 1 in ROS 2  ;) https://github.com/ros2/common_interfaces/blob/master/geometry_msgs/msg/Quaternion.msg#L6', 'comment_created': datetime.datetime(2021, 2, 4, 16, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 570379718, 'comment_body': ""Shouldn't this also be set for derived classes that have own Eigen members?"", 'comment_created': datetime.datetime(2021, 2, 4, 16, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 570885642, 'comment_body': ""these magic numbers... ;)  pretty sure it's out ouf scope of this PR, but it would be great if we had a central documentation of the different state space priorities and ideally use constants included from a single header file."", 'comment_created': datetime.datetime(2021, 2, 5, 10, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 570886247, 'comment_body': ""also not part of this, but it's about time we remove this check"", 'comment_created': datetime.datetime(2021, 2, 5, 10, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 570890199, 'comment_body': 'This is definitely a great start, but this should go into the tutorial as well (maybe even above `longest_valid_segment_fraction` because many readers will be running once they get there :wink:  ).', 'comment_created': datetime.datetime(2021, 2, 5, 11, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 570892329, 'comment_body': 'please remove', 'comment_created': datetime.datetime(2021, 2, 5, 11, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 571097244, 'comment_body': 'Good to know', 'comment_created': datetime.datetime(2021, 2, 5, 16, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bostoncleek', 'type': 'User'}, {'comment_id': 571104470, 'comment_body': 'I will remove it. This was in the other demo cmakes.\r\n', 'comment_created': datetime.datetime(2021, 2, 5, 16, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'bostoncleek', 'type': 'User'}, {'comment_id': 571113007, 'comment_body': 'I dont think it needs to be enabled. Remove it from the other demos?\r\n', 'comment_created': datetime.datetime(2021, 2, 5, 17, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'bostoncleek', 'type': 'User'}, {'comment_id': 571148741, 'comment_body': 'I think this is required by the planning_context_manager. I can include a single header file for each priority level. Is that what you are looking for? If you want me to remove the ConstrainedPlanningStateSpaceFactory  I will have to think more about the implementation. ', 'comment_created': datetime.datetime(2021, 2, 5, 17, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bostoncleek', 'type': 'User'}, {'comment_id': 571149957, 'comment_body': 'The doc is hidden [here](https://github.com/bostoncleek/moveit2/blob/pr-ompl_constraints/moveit_planners/ompl/ompl_interface/src/planning_context_manager.cpp#L514) in the code but I can make this more public. ', 'comment_created': datetime.datetime(2021, 2, 5, 17, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'bostoncleek', 'type': 'User'}, {'comment_id': 571150738, 'comment_body': 'The factory priority level ensures that case 3 in the doc above is satisfied and that a state space will be chosen.', 'comment_created': datetime.datetime(2021, 2, 5, 18, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bostoncleek', 'type': 'User'}, {'comment_id': 571215601, 'comment_body': 'There are no derived classes here that have declared [fixed size eigen](https://eigen.tuxfamily.org/dox/group__TopicFixedSizeVectorizable.html) members. Would this macro be inherited by the derived class? I can add it to each derived class if you want. That will at least save us a potential eigen alignment headache down the road.', 'comment_created': datetime.datetime(2021, 2, 5, 19, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bostoncleek', 'type': 'User'}, {'comment_id': 571230614, 'comment_body': 'Yes I will add this to the tutorial. I also added it to the readme in the demo added here.', 'comment_created': datetime.datetime(2021, 2, 5, 20, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'bostoncleek', 'type': 'User'}, {'comment_id': 571405345, 'comment_body': ""There is some more hidden documentation [here](https://github.com/JeroenDM/moveit/pull/2). I experimented with simplifying the whole factory pattern that is somewhat overkill. But I was not happy with the result.\r\n\r\nI'm sorry it's so hard to find. The GSoC thread on GitHub got so long these things got lost. (Even I forget about all the things I tried sometimes...)"", 'comment_created': datetime.datetime(2021, 2, 6, 10, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'JeroenDM', 'type': 'User'}, {'comment_id': 572265627, 'comment_body': 'obviously, I missed that X', 'comment_created': datetime.datetime(2021, 2, 8, 18, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'henningkayser', 'type': 'User'}, {'comment_id': 575454251, 'comment_body': 'nit: newline at end of file', 'comment_created': datetime.datetime(2021, 2, 12, 18, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 575454390, 'comment_body': 'nl eof', 'comment_created': datetime.datetime(2021, 2, 12, 18, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 575454536, 'comment_body': 'nl eof', 'comment_created': datetime.datetime(2021, 2, 12, 18, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 575454870, 'comment_body': 'nl eof', 'comment_created': datetime.datetime(2021, 2, 12, 18, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 575455413, 'comment_body': 'nl eof', 'comment_created': datetime.datetime(2021, 2, 12, 18, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 575455835, 'comment_body': 'nl eof', 'comment_created': datetime.datetime(2021, 2, 12, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 575455944, 'comment_body': 'nl eof', 'comment_created': datetime.datetime(2021, 2, 12, 18, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 575456235, 'comment_body': 'nl eof', 'comment_created': datetime.datetime(2021, 2, 12, 18, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 575456870, 'comment_body': 'nl eof', 'comment_created': datetime.datetime(2021, 2, 12, 18, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 575456982, 'comment_body': 'nl eof', 'comment_created': datetime.datetime(2021, 2, 12, 18, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 575457566, 'comment_body': 'nl eof', 'comment_created': datetime.datetime(2021, 2, 12, 18, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 575457653, 'comment_body': 'nl eof', 'comment_created': datetime.datetime(2021, 2, 12, 18, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 575457782, 'comment_body': 'nl eof', 'comment_created': datetime.datetime(2021, 2, 12, 18, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 575457895, 'comment_body': 'nl eof', 'comment_created': datetime.datetime(2021, 2, 12, 18, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 575458140, 'comment_body': '[nit] remove commented out code', 'comment_created': datetime.datetime(2021, 2, 12, 18, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}]","[{'commit_sha': '781165d17589c49fce4529d08718f39a5c652536', 'committer_username': 'bostoncleek', 'committer_name': 'Boston Cleek', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 6, 16, 3, 13, tzinfo=datetime.timezone.utc)}]",Boston Cleek,36201047,,User,,43,,21,96
471560046,WIP: Tutorial on using OMPL's Constrained State Space,"### Description

The tutorial that goes together with the pull request on the main MoveIt repo:
https://github.com/ros-planning/moveit/pull/2273


### Checklist
- [ ] **Required by CI**: Code is auto formatted using [clang-format](http://moveit.ros.org/documentation/contributing/code)
- [ ] While waiting for someone to review your request, please consider reviewing [another open pull request](https://github.com/ros-planning/moveit/pulls) to support the maintainers
",False,518,https://api.github.com/repos/moveit/moveit_tutorials/pulls/518,https://github.com/moveit/moveit_tutorials/pull/518,open,673,0,11,9,9,5,0,0,[],2020-08-21 10:47:53+00:00,,0.0,,"[{'comment_id': 476127751, 'comment_body': '... from MoveIt. **To illustrate the capabilities of this planner**, three ....', 'comment_created': datetime.datetime(2020, 8, 25, 3, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ommmid', 'type': 'User'}, {'comment_id': 476128889, 'comment_body': 'The interface currently only supports position constraints **on any link of the robot**\r\n\r\nNice work on explaining why and where this planner is better than enforce_joint_model_state_space', 'comment_created': datetime.datetime(2020, 8, 25, 3, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ommmid', 'type': 'User'}, {'comment_id': 476140055, 'comment_body': 'After you **change**,', 'comment_created': datetime.datetime(2020, 8, 25, 4, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ommmid', 'type': 'User'}, {'comment_id': 476140928, 'comment_body': 'A red and green sphere should appear in Rviz to show the start and goal states **respectively**.', 'comment_created': datetime.datetime(2020, 8, 25, 4, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ommmid', 'type': 'User'}, {'comment_id': 476146259, 'comment_body': '...so **moving** **an** equal amount ...', 'comment_created': datetime.datetime(2020, 8, 25, 4, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ommmid', 'type': 'User'}]","[{'commit_sha': 'e8d01cee02c60ba521845f536341b56babb4f071', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84fa2bbcbbc332ed70c9f51528d6f0f6c2b25489', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fc7945d5f649ed8fcd8c1112b4f15cb402ebd2e', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54bfe08c24254a9a53fb7c498fb6b170f9e154eb', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95c21df732befed0e960c828a141fa3d00a7cab4', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f42c90ef6975ea8836ffd0f160a1f8935426b462', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '463ecd3dead0972daa190b6300f0f49e9aaee03c', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b52379c84c35c92f1704adcfc6c9e1be48079310', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94aafbe71339a100c5290eb45261bda813df4699', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}]",Jeroen,11537861,,User,,117,,8,42
473681550,OMPL Constrained planning with orientation constraints,"### Description

Changes required to also support orientation constraints for OMPL's ConstrainedStateSpace planning.",False,6,https://api.github.com/repos/JeroenDM/moveit/pulls/6,https://github.com/JeroenDM/moveit/pull/6,open,3017,23,23,13,0,0,0,0,[],2020-08-26 06:28:30+00:00,,0.0,,[],"[{'commit_sha': 'beeafe0f9e3b94c96bcb17fd1bcc38c6f6686531', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b84591857b01178ccdf1405acb9d12759c1f04a', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2fbaeec66ea2694f225afb151b907cf5b7389a4', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6204421c67579d32c480294f7f5f1b7712a62c3', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '146e5a23d11525db09e94b839d668004a1267220', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26fffab8c78121765f95bce170185549536c1eb0', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0fe688887169b5c2dadcae86a0aa9174aff6262', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aff01825da929050165a2d6b239f2d0050d39666', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ae4b43fdd5d388192c01336ee6aeab326f6d8b5', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99cdc59cce52cf53cf68a43a5d8bdcc41c3e10f2', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3417e51bf23b305fd17249d0a1796ea1c2c1fe6', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39bcfb40221c10cb945e92f867f863036c79892b', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c74938cc91d316b28d08a16f35bea924b6fcbe35', 'committer_username': 'JeroenDM', 'committer_name': 'Jeroen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 18, 11, 58, 23, tzinfo=datetime.timezone.utc)}]",Jeroen,11537861,,User,,117,,8,42

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
64340188,moveit,moveit/moveit,C++,943,1631,69,378,7991,624,9,58,"[{'id': 814137686, 'number': 3019, 'closed': datetime.datetime(2022, 1, 4, 22, 16, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 4, 19, 15, 58, tzinfo=datetime.timezone.utc), 'time_taken': 10835.0, 'time_delta': '3:00:35', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 514938597, 'number': 2402, 'closed': datetime.datetime(2021, 6, 23, 3, 37, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 3, 19, 10, 26, tzinfo=datetime.timezone.utc), 'time_taken': 19988834.0, 'time_delta': '231 days, 8:27:14', 'additions': 337, 'deletions': 31, 'state': 'closed'}, {'id': 474593265, 'number': 2279, 'closed': datetime.datetime(2020, 8, 27, 10, 27, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 10, 6, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1244.0, 'time_delta': '0:20:44', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 473990627, 'number': 2277, 'closed': datetime.datetime(2020, 9, 5, 15, 14, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 15, 36, 25, tzinfo=datetime.timezone.utc), 'time_taken': 862673.0, 'time_delta': '9 days, 23:37:53', 'additions': 193, 'deletions': 279, 'state': 'closed'}, {'id': 471554918, 'number': 2273, 'closed': None, 'created': datetime.datetime(2020, 8, 21, 10, 36, 37, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 2613, 'deletions': 29, 'state': 'open'}, {'id': 466133249, 'number': 2248, 'closed': datetime.datetime(2020, 10, 18, 22, 17, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 14, 15, 23, tzinfo=datetime.timezone.utc), 'time_taken': 5904126.0, 'time_delta': '68 days, 8:02:06', 'additions': 504, 'deletions': 0, 'state': 'closed'}, {'id': 465969290, 'number': 2247, 'closed': datetime.datetime(2020, 10, 26, 18, 35, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 9, 0, 35, tzinfo=datetime.timezone.utc), 'time_taken': 6600909.0, 'time_delta': '76 days, 9:35:09', 'additions': 346, 'deletions': 0, 'state': 'closed'}, {'id': 464086392, 'number': 2239, 'closed': datetime.datetime(2020, 8, 7, 7, 27, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 15, 5, 7, tzinfo=datetime.timezone.utc), 'time_taken': 58917.0, 'time_delta': '16:21:57', 'additions': 49, 'deletions': 15, 'state': 'closed'}, {'id': 457748202, 'number': 2227, 'closed': datetime.datetime(2020, 7, 29, 15, 52, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 11, 29, 22, tzinfo=datetime.timezone.utc), 'time_taken': 102177.0, 'time_delta': '1 day, 4:22:57', 'additions': 15, 'deletions': 11, 'state': 'closed'}, {'id': 457723770, 'number': 2226, 'closed': datetime.datetime(2020, 7, 29, 14, 54, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 10, 38, 47, tzinfo=datetime.timezone.utc), 'time_taken': 101755.0, 'time_delta': '1 day, 4:15:55', 'additions': 16, 'deletions': 0, 'state': 'closed'}, {'id': 455159268, 'number': 2224, 'closed': datetime.datetime(2020, 8, 21, 10, 38, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 14, 35, 15, tzinfo=datetime.timezone.utc), 'time_taken': 2577824.0, 'time_delta': '29 days, 20:03:44', 'additions': 1065, 'deletions': 0, 'state': 'closed'}, {'id': 453523005, 'number': 2219, 'closed': datetime.datetime(2020, 8, 21, 10, 39, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 14, 45, 29, tzinfo=datetime.timezone.utc), 'time_taken': 2750023.0, 'time_delta': '31 days, 19:53:43', 'additions': 1851, 'deletions': 185, 'state': 'closed'}, {'id': 453493070, 'number': 2218, 'closed': datetime.datetime(2020, 8, 21, 10, 39, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 14, 13, 51, tzinfo=datetime.timezone.utc), 'time_taken': 2751941.0, 'time_delta': '31 days, 20:25:41', 'additions': 571, 'deletions': 4, 'state': 'closed'}, {'id': 453363714, 'number': 2216, 'closed': datetime.datetime(2020, 8, 21, 10, 39, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 11, 44, 56, tzinfo=datetime.timezone.utc), 'time_taken': 2760896.0, 'time_delta': '31 days, 22:54:56', 'additions': 47, 'deletions': 20, 'state': 'closed'}, {'id': 452007746, 'number': 2215, 'closed': datetime.datetime(2020, 7, 20, 15, 45, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 18, 16, 9, 57, tzinfo=datetime.timezone.utc), 'time_taken': 171330.0, 'time_delta': '1 day, 23:35:30', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 451239844, 'number': 2214, 'closed': datetime.datetime(2020, 7, 27, 15, 4, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 16, 17, 5, tzinfo=datetime.timezone.utc), 'time_taken': 859644.0, 'time_delta': '9 days, 22:47:24', 'additions': 30, 'deletions': 153, 'state': 'closed'}, {'id': 450922352, 'number': 2211, 'closed': datetime.datetime(2020, 7, 21, 10, 55, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 8, 43, 29, tzinfo=datetime.timezone.utc), 'time_taken': 353527.0, 'time_delta': '4 days, 2:12:07', 'additions': 255, 'deletions': 228, 'state': 'closed'}, {'id': 347035814, 'number': 1793, 'closed': datetime.datetime(2019, 11, 29, 14, 42, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 29, 12, 53, 28, tzinfo=datetime.timezone.utc), 'time_taken': 6527.0, 'time_delta': '1:48:47', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
66317561,moveit_tutorials,moveit/moveit_tutorials,HTML,691,467,29,134,520,111,4,19,"[{'id': 471560046, 'number': 518, 'closed': None, 'created': datetime.datetime(2020, 8, 21, 10, 47, 53, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 673, 'deletions': 0, 'state': 'open'}, {'id': 426053992, 'number': 492, 'closed': datetime.datetime(2020, 6, 1, 18, 59, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 15, 24, 46, tzinfo=datetime.timezone.utc), 'time_taken': 12892.0, 'time_delta': '3:34:52', 'additions': 0, 'deletions': 4, 'state': 'closed'}]"
170893393,moveit2,moveit/moveit2,C++,504,1021,46,458,9279,308,22,46,[]
278142989,moveit,JeroenDM/moveit,C++,5,5,2,345,7603,7,27,7,"[{'id': 488086704, 'number': 7, 'closed': None, 'created': datetime.datetime(2020, 9, 16, 15, 54, 30, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 70, 'deletions': 21, 'state': 'open'}, {'id': 473681550, 'number': 6, 'closed': None, 'created': datetime.datetime(2020, 8, 26, 6, 28, 30, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 3017, 'deletions': 23, 'state': 'open'}, {'id': 473680470, 'number': 5, 'closed': datetime.datetime(2020, 8, 26, 6, 26, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 6, 26, 32, tzinfo=datetime.timezone.utc), 'time_taken': 27.0, 'time_delta': '0:00:27', 'additions': 2853, 'deletions': 17, 'state': 'closed'}, {'id': 457258164, 'number': 4, 'closed': None, 'created': datetime.datetime(2020, 7, 27, 16, 4, 32, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 48, 'deletions': 31, 'state': 'open'}, {'id': 456339325, 'number': 3, 'closed': datetime.datetime(2020, 7, 26, 8, 36, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 15, 7, 5, tzinfo=datetime.timezone.utc), 'time_taken': 149381.0, 'time_delta': '1 day, 17:29:41', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 449635219, 'number': 2, 'closed': None, 'created': datetime.datetime(2020, 7, 15, 17, 43, 39, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 378, 'deletions': 485, 'state': 'open'}, {'id': 448302488, 'number': 1, 'closed': None, 'created': datetime.datetime(2020, 7, 13, 14, 45, 9, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1404, 'deletions': 34, 'state': 'open'}]"
