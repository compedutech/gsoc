pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1459000357,Kurucz spectrum,"<!-- Please be sure to check out our contributing guidelines,
https://github.com/radis/radis/blob/develop/CONTRIBUTING.md . -->

### Description
<!-- Provide a general description of what your pull request does. -->

PR for the 2023 GSOC project : Common API for large molecular databases. 
This PR includes the implementation of the Kurucz database to Radis with an example to plot spectrum using Spectrum Factory and all the related changes to the API or other sections of the code
Follows 
 PR #579 and adds broadening, a spectrum factory based example for Kurucz, also fixes minor requested changes.



<!-- If the pull request closes any open issues you can add this.
If you replace <Issue Number> with a number, GitHub will automatically link it.
If this pull request is unrelated to any issues, please remove
the following line. -->

Fixes #<Issue Number>
",False,601,https://api.github.com/repos/radis/radis/pulls/601,https://github.com/radis/radis/pull/601,closed,7323,59,21,84,9,115,0,0,[],2023-08-02 02:04:12+00:00,2024-06-04 16:18:51+00:00,26576079.0,"307 days, 14:14:39","[{'comment_id': 1281504443, 'comment_body': ""I think we already have a dependency to `https://pypi.org/project/mendeleev/`, if it's enough for you let's use it instead of a new package "", 'comment_created': datetime.datetime(2023, 8, 2, 7, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281507590, 'comment_body': 'General comment : if you want the example to be ran and appear as a plot on the Gallery Example, then the file name should start with `plot` (its a quite hidden design feature!). So rename to `plot_kuruzc.py`\n\n`git mv` can be used to rename while keeping track of history\n\n@minouHub @menasrac ', 'comment_created': datetime.datetime(2023, 8, 2, 7, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281509218, 'comment_body': 'Looks like the equivalent of `fetch_hitran` etc. Move it to a new Radis.io.kurucz file. \n\nRadis.api will keep the parts common with Radis calculations and with Exojax \n', 'comment_created': datetime.datetime(2023, 8, 2, 7, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281512013, 'comment_body': ""Let's keep a same key for Atom and Molecule.\nCall it Species, for instance \nKeep molecule for as available for backward compatibility (see how it's handled in kwargs) "", 'comment_created': datetime.datetime(2023, 8, 2, 7, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281513641, 'comment_body': 'We can treat all ionisation states as different species.\n\nIe. species would be ""Fe II"" and you don\'t have to introduce a new ionization state as a SpectrumFactory input parameter ', 'comment_created': datetime.datetime(2023, 8, 2, 7, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281515245, 'comment_body': ""This isn't a Spectrum"", 'comment_created': datetime.datetime(2023, 8, 2, 7, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281516351, 'comment_body': ""I'm quite sure we already have such a Einstein to Linestrength function in the code "", 'comment_created': datetime.datetime(2023, 8, 2, 7, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281517277, 'comment_body': ""Shouldn't be required as SpectrumFactory has its own function to do it (cf the doc) "", 'comment_created': datetime.datetime(2023, 8, 2, 7, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281520916, 'comment_body': 'Warning keep it out for the release\n\nAlso, for fast and efficient debugging you can use debug mode, or add a `raise`, then enter ""interactive post mortem""\n\n```\n%debug\n```\n\nIn an interactive iPython console opens a console directly within the function, where you can see variable status, execute code, even go to the function parent with `u`  (up) and child `d` (down)\n\nI haven\'t found anything more efficient than this to debug.\n\n@1someshverma you might also be interested ', 'comment_created': datetime.datetime(2023, 8, 2, 7, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281521896, 'comment_body': 'Needs some docstrings and references.\n\nIf borrowing code from somewhere else also write down and link it', 'comment_created': datetime.datetime(2023, 8, 2, 7, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281523393, 'comment_body': 'This will probably break existing code, any reason you need it? ', 'comment_created': datetime.datetime(2023, 8, 2, 7, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281523916, 'comment_body': 'Same comment as %debug above ', 'comment_created': datetime.datetime(2023, 8, 2, 7, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281524488, 'comment_body': 'Looks useless given its rewritten next line? ', 'comment_created': datetime.datetime(2023, 8, 2, 7, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281525240, 'comment_body': 'We already have this somewhere ', 'comment_created': datetime.datetime(2023, 8, 2, 7, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281528685, 'comment_body': ""Important @menasrac \n\n- let Radis default functions (gaussian broadening) handle the temperature dependence. If input parameters are different in Kurucz compared to expected parameters in Hitran etc, the goal of your API (Kuruzc class) is to convert them to Radis-expected standards.\n\nIf its not possible and we need to change the standard, let's discuss.\n\n"", 'comment_created': datetime.datetime(2023, 8, 2, 7, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281533654, 'comment_body': '@menasrac  load_databank and fetch_databank are slightly different, the former expects that you already have downloaded the database and the latter does it for you and is more user friendly. \n\nFocus on the latter first, writing `fetch_kuruzc` in a new Radis.io.kurucz file\n\n@minouHub ', 'comment_created': datetime.datetime(2023, 8, 2, 7, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281537181, 'comment_body': ""There is a lineshape_optimization / optimization parameter in SpectrumFactory. It is designed for molecular spectra with millions of lines. I think it will slow your calculations with Kuruzc. Set it to None, compare calculation times.\n\nIn calc_spectrum you'll set the default based on the input parameters (I.e None for atomic spectra) "", 'comment_created': datetime.datetime(2023, 8, 2, 7, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281540155, 'comment_body': ""Do you need this here?\n\nThere is already a dbformat or equivalent in load_databank() / fetch_databank()\n\nLet's find a way not to add a new parameter "", 'comment_created': datetime.datetime(2023, 8, 2, 7, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281547803, 'comment_body': 'All of the caching should be embedded in a function from the API ', 'comment_created': datetime.datetime(2023, 8, 2, 8, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281549732, 'comment_body': 'Here you should test the new Radis Kurutz partition function object ', 'comment_created': datetime.datetime(2023, 8, 2, 8, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281553809, 'comment_body': 'This is the Tref parameter already in Radis ', 'comment_created': datetime.datetime(2023, 8, 2, 8, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281556283, 'comment_body': 'I see you already have a plot_kuruzc. Choose and keep only one example ', 'comment_created': datetime.datetime(2023, 8, 2, 8, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281558828, 'comment_body': ""(I..e. To be very clear : you shouldn't have to have your own Doppler function for Kuruzc.use existing ones) "", 'comment_created': datetime.datetime(2023, 8, 2, 8, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281561267, 'comment_body': 'Did you use Tab it to include it as a class method ? Then no, keep it a separate function ', 'comment_created': datetime.datetime(2023, 8, 2, 8, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281562000, 'comment_body': 'Same, there is no reason to add them as class methods ', 'comment_created': datetime.datetime(2023, 8, 2, 8, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281884882, 'comment_body': 'Ok I will adjust it', 'comment_created': datetime.datetime(2023, 8, 2, 13, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1281888604, 'comment_body': 'The plot_kurucz example was created without using Spectrum Factory and is based on the first method named process in the Kurucz API. The one that I will keep is the calc_spectrum example because it uses SpectrumFactory. Thank you for the comment, I will rename it so that it appears in the galley ', 'comment_created': datetime.datetime(2023, 8, 2, 13, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1281890591, 'comment_body': 'Ok I will try to keep one key only', 'comment_created': datetime.datetime(2023, 8, 2, 13, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1281893546, 'comment_body': ""Ok so I don't have to modify the loader.py file at all ?? Where should I introduce the format differenciation then ?"", 'comment_created': datetime.datetime(2023, 8, 2, 13, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1281895374, 'comment_body': 'I will try with a None input and compare the runtime', 'comment_created': datetime.datetime(2023, 8, 2, 13, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1281897100, 'comment_body': 'Indeed, I will double check but I think it is not needed since the format is handled by  load_databank() / fetch_databank()', 'comment_created': datetime.datetime(2023, 8, 2, 13, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1281919704, 'comment_body': ""As I said in the PR Description : The changes in broadening.py and factory.py must be ignored. \r\nThey come from the previous version I showed you during the Teams call and I didn't want to push them. Indeed, the doppler_kurucz method isn't used in my current code which only relies on SpectrumFactory as it is.\r\nSo basically the broadening methods are used as they are. \r\nOne last thing about the partfcns : since I added the linestrength at the Tref temperature to the df early in the API in the read_kurucz method, the calc_linestrength_eq method ran with this int parameter and didn't force me to add a new Class for partfcns as we discussed it. However, if I must not add the int to the df and compute the linestrength with the Exojax Sij0 method, I will have to make changes to partfunctions. "", 'comment_created': datetime.datetime(2023, 8, 2, 13, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1283283549, 'comment_body': ""It didn't change much, the runtime is sometimes even longer @erwanp "", 'comment_created': datetime.datetime(2023, 8, 3, 14, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1283291640, 'comment_body': ""Indeed, this is part of the old example of my first PR. I won't keep this one\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 14, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1283292721, 'comment_body': 'I can do without it', 'comment_created': datetime.datetime(2023, 8, 3, 14, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1284118807, 'comment_body': ""Please push now the revert of these files. Otherwise it's super hard for us to review"", 'comment_created': datetime.datetime(2023, 8, 4, 8, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1284137802, 'comment_body': 'We already commented that you should not add files at the root level. Both @erwanp and I already [made this comment](https://github.com/radis/radis/pull/579#discussion_r1271553465) on the parallel PR.\r\nThe file `NIST_iE.txt` can be moved to `radis/db`. Ideally, it is downloaded only if people need it but that can be left in a todo. ', 'comment_created': datetime.datetime(2023, 8, 4, 8, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1284140554, 'comment_body': 'This file is a duplicate of `kuruczpartfn.txt`. Delete it.', 'comment_created': datetime.datetime(2023, 8, 4, 8, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1284141945, 'comment_body': 'agreed', 'comment_created': datetime.datetime(2023, 8, 4, 8, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1284145858, 'comment_body': 'Then remove the file please 🙏 ', 'comment_created': datetime.datetime(2023, 8, 4, 8, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1284172487, 'comment_body': 'This is imported above in `from radis.phys.constants import hc_k`\r\n```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 4, 8, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1284173056, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 4, 9, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1284173936, 'comment_body': 'and not even used. This is tested in the pre-commit btw', 'comment_created': datetime.datetime(2023, 8, 4, 9, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1284175804, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 4, 9, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1284176280, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 4, 9, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1284176590, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 4, 9, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1284186538, 'comment_body': 'As Erwan said, \r\n\r\n- `fetch_databank` download from the internet the database to your hard drive, then transfer the database from the hard drive to the RAM. \r\n- `load_databank` only transfer the database from the hard drive to the RAM. \r\n\r\nThese portions of code should be moved to `fetch_databank` function, as it download the Kurucz files', 'comment_created': datetime.datetime(2023, 8, 4, 9, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1284187510, 'comment_body': 'you need to remove these prints everywhere\r\n```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 4, 9, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1284527195, 'comment_body': 'I pushed the New Kurucz Part functions and will push the new test ASAP @erwanp\r\n ', 'comment_created': datetime.datetime(2023, 8, 4, 14, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1285637181, 'comment_body': 'Not needed if you just use `elements`\r\n```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 7, 9, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1285639506, 'comment_body': 'as you said in comments, this is unnecessary \r\n```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 7, 9, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1285888251, 'comment_body': 'See recent PR #599 of Erwan on the subject. The pip packages should be in ""requierements.txt"" now\r\n```suggestion\r\n  - beautifulsoup4 # parse ExoMol website\r\n  - lxml           # parser used for ExoMol website\r\n  - hjson          # Json with comments (for default_radis.json)\r\n  - publib>=0.3.2  # Plotting styles for Matplotlib\r\n  - hitran-api     # HAPI, used to access TIPS partition functions\r\n  - peakutils\r\n  - json-tricks>=3.15.0  # to deal with non jsonable formats\r\n  - mpldatacursor\r\n  - mendeleev\r\n  - progressbar2    # used in vaex\r\n  #- tuna           # to generate visual/interactive performance profiles\r\n  - tables  # for pandas to HDF5 export\r\n  - habanero  # CrossRef API to retrieve data from doi\r\n```\r\n```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 7, 13, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1286500540, 'comment_body': '@minouHub A first placeholder for Tdpair line 361', 'comment_created': datetime.datetime(2023, 8, 8, 1, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1286501161, 'comment_body': '@minouHub The other placeholders for atomic_coeff and neutral_hydrogen_number lines 399 and 400', 'comment_created': datetime.datetime(2023, 8, 8, 1, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1287091813, 'comment_body': 'why not stick to the conventional naming of atoms and ions? (""N_I"" for N atoms, ""N_II"" for N+, etc. ). Also, this fails for an ionization above `_III`. Please stick to the [spectroscopic notation](https://lweb.cfa.harvard.edu/amp/ampdata/kurucz23/spectro-not.html).', 'comment_created': datetime.datetime(2023, 8, 8, 13, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287093647, 'comment_body': 'This should not be hardcoded in the python file. A good practice is *at least* to store this list in a file. Better would be to retrieve it from the Kurucz database.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287122202, 'comment_body': '- Two functions `_at(self, T)` are defined in this file. Can you include yours to the existing one?\r\n- You must test if the temperature `T` is not outside of the range and raise an error if our of bounds (low and high)', 'comment_created': datetime.datetime(2023, 8, 8, 13, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287127022, 'comment_body': ""Again, it's not good practice to hardcode array of values"", 'comment_created': datetime.datetime(2023, 8, 8, 13, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287130387, 'comment_body': '- Duplicated from `partfunc.py`\r\n- Please stick to spectroscopist convention (see other comment in `partfunc.py`)', 'comment_created': datetime.datetime(2023, 8, 8, 13, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287133399, 'comment_body': ""- constants are imported from radis.phys.constants (I'm pretty sure it is already there for the speed of light)\r\n- If the constant does not exist, add it in radis.phys.constants "", 'comment_created': datetime.datetime(2023, 8, 8, 13, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287139336, 'comment_body': '- 1st definition of the partition functions in this file\r\n- is it actually used? Everything seems to go through `partfunc.py`, which is the expected behavior. ', 'comment_created': datetime.datetime(2023, 8, 8, 13, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287139557, 'comment_body': '- 2nd definition of the partition functions in this file\r\n- is it actually used? Everything seems to go through `partfunc.py`, which is the expected behavior. ', 'comment_created': datetime.datetime(2023, 8, 8, 13, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287140200, 'comment_body': 'Then why is it still here?', 'comment_created': datetime.datetime(2023, 8, 8, 13, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287265295, 'comment_body': ""What is the purpose of this function? It's not referenced anywhere except in a test to assess the output format"", 'comment_created': datetime.datetime(2023, 8, 8, 15, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287266271, 'comment_body': 'Function not used', 'comment_created': datetime.datetime(2023, 8, 8, 15, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287280680, 'comment_body': 'You are right it is not used , I will remove it ', 'comment_created': datetime.datetime(2023, 8, 8, 15, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1287287902, 'comment_body': 'You can initialize your arrays with \r\n```\r\n    num_lines = len(lines)\r\n    wlnmair = np.zeros(num_lines)\r\n    loggf = np.zeros(num_lines)\r\n    species = np.array([""""] * num_lines, dtype=object)\r\n    gamvdW = np.zeros(num_lines)\r\n    ielem = np.zeros(num_lines, dtype=int)\r\n    iion = np.zeros(num_lines, dtype=int)\r\n```\r\netc.', 'comment_created': datetime.datetime(2023, 8, 8, 15, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287289623, 'comment_body': 'Please apply the following, which is more concise\r\n```suggestion\r\n # Invert elower, eupper, jlower, and jupper where eupper - elower > 0\r\ncondition = eupper - elower > 0\r\nelower[condition], eupper[condition] = eupper[condition], elower[condition]\r\njlower[condition], jupper[condition] = jupper[condition], jlower[condition]\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 15, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287292308, 'comment_body': 'You do not need to return the dataframe. Please commit suggestion \r\n```suggestion\r\n        self.data = pd.DataFrame(data_dict)\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 15, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287293725, 'comment_body': 'See https://github.com/radis/radis/pull/601/files#r1287292308\r\n```suggestion\r\n        kurucz.read_kurucz(kuruczf)\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 15, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287294568, 'comment_body': 'There should be not print without a `if verbose:`', 'comment_created': datetime.datetime(2023, 8, 8, 15, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287299698, 'comment_body': '[MAJOR]\r\nAs far as I remember, you get an error if you don\'t put something in the ""airbrd"" column. Please put None values here. ""airbrd"" will only be used for molecules whereas, for atoms, the Lorentzian width will have to be calculated from the ""gamRad"", ""gamVdW"" and ""GamStark"" with a formula close to what ExoJax does', 'comment_created': datetime.datetime(2023, 8, 8, 15, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1288294437, 'comment_body': 'This first definition was removed', 'comment_created': datetime.datetime(2023, 8, 9, 10, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1290565106, 'comment_body': 'I thought we agreed to use airbrd and approximate it with gamRad,gamVdW until we get a better solution ? I cannot put None, it breaks the code @minouHub ', 'comment_created': datetime.datetime(2023, 8, 10, 19, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1291170532, 'comment_body': 'If code is borrowed from somewhere else, mention it in the docstrings ', 'comment_created': datetime.datetime(2023, 8, 11, 10, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291176654, 'comment_body': 'Same, reference the author in the docstrings. Best is even to cite Exojax paper DOI\n\n', 'comment_created': datetime.datetime(2023, 8, 11, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291179039, 'comment_body': 'This pure Python loop looks very slow, but Kuruzc database is not huge neither. Does it take time to parse the files?\n\nIf so we could use the same structure as when parsing Hitran databases, based on np.fromtxt (as far as i remember) which is C-compiled code ', 'comment_created': datetime.datetime(2023, 8, 11, 10, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291180331, 'comment_body': 'This should use our Radis DatabaseManager class, which is compatible with Pandas Hdf5 but also other formats such as Vaex Hdf5 or Apache Arrow ', 'comment_created': datetime.datetime(2023, 8, 11, 10, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291181618, 'comment_body': 'Looks wrong to me. Do you mean ""is_neutral""?\nWhat if there is \'_II\'. It will also return True ', 'comment_created': datetime.datetime(2023, 8, 11, 10, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291181981, 'comment_body': 'Add unitary tests for this function ', 'comment_created': datetime.datetime(2023, 8, 11, 10, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291182661, 'comment_body': ""What you're comparing is not clear to the reader. "", 'comment_created': datetime.datetime(2023, 8, 11, 10, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291207913, 'comment_body': 'You are right,  the name should rather be is_atom', 'comment_created': datetime.datetime(2023, 8, 11, 11, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1291356394, 'comment_body': 'you can add a new test file in `radis\\test\\db\\test_classes` . For instance\r\n\r\n```python\r\nassert is_atom(""Fe_I"")\r\nassert is_atom(""H_II"")\r\nassert not is_atom(""CO2"")\r\n\r\n```\r\n\r\n\r\nBtw, look at the function [radis.test.db.test_molecules_list.generate_molparam_for_non_HITRAN_species()](https://github.com/radis/radis/blob/54299c7869633450890cc2b911bec7a93bd1dd2f/radis/test/db/test_molecule_lists.py#L147) . I can\'t remember who implemented it and why but it has a `_parse_molecule` regex  that might be interesting for you', 'comment_created': datetime.datetime(2023, 8, 11, 13, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291507854, 'comment_body': 'Thank you I had a look at the regex. \r\nI think if we want to adjust it at some point so that it can also identify atomic species, it should be _parse_molecule = re.compile(""(\\d+)?([A-Z][a-z]?)_?([A-Z][a-z\\d+]?)?"") with the optional _? for the ionization state\r\nHowever, is_atom can be enough to distinguish atoms or ions from molecules so it depends on what the goal is precisely @erwanp \r\n', 'comment_created': datetime.datetime(2023, 8, 11, 15, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1291589353, 'comment_body': 'Indeed, it does not take much time \r\nThis is how it was originally implemented in Exojax if I can remember well', 'comment_created': datetime.datetime(2023, 8, 11, 16, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1292149738, 'comment_body': ""If is_atom is enough, keep it !\r\nIt would be nice (= must not) to use physical conventions, for instance `Fe` rather than `Fe_I` or `Fe+` rather than `Fe_II`. To simplify the code a simple converter could be added only at the higher level, for instance converting the input of `calc_spectrum`, and making sure every function within the code then uses chemical conventions. \r\n\r\nFor instance a renaming dictionary: \r\n```\r\n_species_rename = {'Ar': 'Ar_I',\r\n                   'Ar I': 'Ar_I',\r\n                   'AR': 'Ar_I',  # Cantera uses capital only\r\n                   'Ar+': 'Ar_II',\r\n                   'Ar II': 'Ar_II',\r\n                   'C': 'C_I',\r\n                   'C I': 'C_I',\r\n                   'C+': 'C_II',\r\n                   'C II': 'C_II',\r\n                   'O': 'O_I',\r\n                   'O I': 'O_I',\r\n                   'O+': 'O_II',\r\n                   'O II': 'O_II',\r\n                   'N': 'N_I',\r\n                   'N I': 'N_I',\r\n                   'N+': 'N_II',\r\n                   'N II': 'N_II',\r\n                   }\r\n``` "", 'comment_created': datetime.datetime(2023, 8, 12, 8, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1292149865, 'comment_body': 'Related to Slack discussion : https://radis-radiation.slack.com/archives/C018C2MH5AB/p1691752697266999 ', 'comment_created': datetime.datetime(2023, 8, 12, 8, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1293072280, 'comment_body': ""I realized that it might just be confusing to use the same term 'airbrd' for atoms and molecules, when different formulas will be applied to these coefficients.  Can you direct me to what fails when you try to put None in the airbrd column?"", 'comment_created': datetime.datetime(2023, 8, 14, 7, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1293078649, 'comment_body': ""Just to be sure I understood what you meant: the spectroscopic notation (`Fe_I`) should be the default notation in RADIS. These notations should be what the code primarily uses to distinguish the atoms and ions. Let's not add confusion by adding new names. \r\n\r\nHowever, it would be nice for the user interface only, that when asking `calc_spectrum(Fe)`, RADIS would understand that we meant `Fe_I`."", 'comment_created': datetime.datetime(2023, 8, 14, 7, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1293422223, 'comment_body': 'I added the range test for temperature but I am not sure to understand what you mean by including the Kurucz _at(self,T) function to the existing one @minouHub ', 'comment_created': datetime.datetime(2023, 8, 14, 12, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1293435970, 'comment_body': '- You can just put `>= 0` for the minimum bound because I think the partition functions are evaluated from T = 0 K. You have to check.\r\n\r\n- Why did you put 10,000 K as the maximum? Is it the same for all molecules? \r\n', 'comment_created': datetime.datetime(2023, 8, 14, 13, 7, 39, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1293436596, 'comment_body': ""> I added the range test\r\n\r\nNice, see comment on commit.\r\n\r\n>  I am not sure to understand what you mean by including the Kurucz _at(self,T) function to the existing one \r\n\r\nThere is already a function call `_at(self, T)` in this file. It would make a lot of sense to me that the function `_at(self, T)` is always called when a partition function is evaluated. Then:\r\n\r\n- species == molecule and the code runs as usual \r\n- species == atom and it's your portion that is executed."", 'comment_created': datetime.datetime(2023, 8, 14, 13, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1293484910, 'comment_body': 'I put these lower and upper bounds because according to the values I have from Exojax, the partition functions are evaluated at these temperatures : \r\npfT_values = np.array(\r\n            [\r\n                1e-05,\r\n                1e-04,\r\n                1e-03,\r\n                1e-02,\r\n                1e-01,\r\n                1.5e-01,\r\n                2e-01,\r\n                3e-01,\r\n                5e-01,\r\n                7e-01,\r\n                1.0,\r\n                1.3,\r\n                1.7,\r\n                2.0,\r\n                3.0,\r\n                5.0,\r\n                7.0,\r\n                10.0,\r\n                15.0,\r\n                20.0,\r\n                30.0,\r\n                50.0,\r\n                70.0,\r\n                100.0,\r\n                130.0,\r\n                170.0,\r\n                200.0,\r\n                250.0,\r\n                300.0,\r\n                500.0,\r\n                700.0,\r\n                1e03,\r\n                1.5e03,\r\n                2e03,\r\n                3e03,\r\n                4e03,\r\n                5e03,\r\n                6e03,\r\n                7e03,\r\n                8e03,\r\n                9e03,\r\n                1e04,\r\n            ])\r\n            @minouHub ', 'comment_created': datetime.datetime(2023, 8, 14, 13, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1293537259, 'comment_body': 'The thing is that for now by mentioning the parfuncfmt in SpectrumFactory directly, the user selects earlier which Partfunc Class will be used and thus which _at function will be used. So what you suggested is to gather all the _at functions  or at least the Kurucz and Exomol ones (they are very similar actually only the temperature range checks are different) under one same method which can be applied to both atoms and molecules ? @minouHub ', 'comment_created': datetime.datetime(2023, 8, 14, 14, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1293753341, 'comment_body': 'typo `rannge`\r\nBe more explicit, say it\'s because of the parition functions : \r\n```\r\nraise ValueError(f""The temperature {T} is outside the accepted range [{10**(-5)}, {10**(4)}] K for the partition functions of {self.species}"")\r\n```\r\nAlso save `self.species` in __init__()', 'comment_created': datetime.datetime(2023, 8, 14, 17, 17, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1293757346, 'comment_body': ""if not done already, add a test for `PartFuncKurucz` in `radis/test/levels/test_partfunc.py` \r\n\r\n(making sure it works; and assert that you find the expected partition functions for a few atoms of your choice. You'll ensure it never fails)"", 'comment_created': datetime.datetime(2023, 8, 14, 17, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1293758189, 'comment_body': 'yes exactly. \r\nAnd by user interface I mean calc_spectrum ; even SpectrumFactory is for advanced users already and they should use the proper chemical notations', 'comment_created': datetime.datetime(2023, 8, 14, 17, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1294463612, 'comment_body': 'I have already added such a test in radis/test/io/test_partfunc.py , I will move it to radis/test/levels/test_partfunc.py', 'comment_created': datetime.datetime(2023, 8, 15, 11, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1294981860, 'comment_body': 'I have added a to_conventional_name method to radis/db/classes below is_atom\r\nIf the input of calc_spectrum is an atomic species in a format such as Na or Na+ it will be modified to Na_I , Na_II etc\r\nMolecules will remain the same\r\nI have also added some tests to radis/test/db/test_classes.py', 'comment_created': datetime.datetime(2023, 8, 15, 18, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1295438275, 'comment_body': ""Alright, please raise a UserWarning saying that we don't know yet the validity limit of the partition function "", 'comment_created': datetime.datetime(2023, 8, 16, 6, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1295519835, 'comment_body': 'Alright, I see your point I think.', 'comment_created': datetime.datetime(2023, 8, 16, 7, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1295526503, 'comment_body': 'I cannot find easily an upper bound for the validity of these partition functions. Users can easily go past 10,000 K in their simulations (during my thesis I went up to 50,000 K in my experiments). Please increase the max up to 50,000 K and add a `UserWarning` for now when the partition functions are evaluated above 20,000 K. It could be `The validity of the Kurucz partition function is not checked for now. Please be careful in interpretations.`', 'comment_created': datetime.datetime(2023, 8, 16, 8, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1295539772, 'comment_body': '@minouHub by default I\'d rather raise an error (as it is now) than extrapolate. Partition functions might change a lot in between 10,000 K and 50,000 K, and Radis users aren\'t necessarily spectroscopist experts.   ""Better raise an error than return wrong results"" is a good guiding principle; \r\n\r\nIf you want to compute above 10,000 K ; maybe Kurucz partition functions aren\'t the right choice. \r\nFor higher temperature spectra users would have to provide their own partition functions.  How to do that is not straighforward (can be done by editing the radis.json database), but making it more clear & adding an example can be work for later! ', 'comment_created': datetime.datetime(2023, 8, 16, 8, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1297419486, 'comment_body': ""The checks fail when SpectrumFactory is used with molecule instead of species because of the is_atom call \r\nradis/lbl/factory.py:508: in __init__\r\n    if not is_atom(species):\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nspecies = None\r\n    def is_atom(species):\r\n>       if '_I' in species :\r\nE       TypeError: argument of type 'NoneType' is not iterable\r\nFor instance \r\nYou can see the build report it happens in severals files @erwanp "", 'comment_created': datetime.datetime(2023, 8, 17, 15, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'menasrac', 'type': 'User'}, {'comment_id': 1297472977, 'comment_body': 'Sorry I\'m on my phone and I cannot fully check the problem but here, ""species"" should be a list of species name. Not a None', 'comment_created': datetime.datetime(2023, 8, 17, 16, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1297477139, 'comment_body': ""@1someshverma i'm seeing this change here : in your next changes, you can remove this line, remove the `engine` argument from `_calc_spectrum_one_molecule`, and read engine directly from `_calc_spectrum_one_molecule`.  No need to have it here already\r\n\r\n@menasrac you can ignore this comment !"", 'comment_created': datetime.datetime(2023, 8, 17, 16, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1300966632, 'comment_body': 'Remove line? ', 'comment_created': datetime.datetime(2023, 8, 22, 5, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1300968082, 'comment_body': 'Make it an absolute path. There are some functions in Radis/dB and Radis/test/utils to get proper maths independently of 1) the working directory 2) your OS', 'comment_created': datetime.datetime(2023, 8, 22, 5, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1300974957, 'comment_body': ""Fix molecule and/or species when reading the function parameters.\r\n\r\nThen use one only through the whole code. Here you're still using both it makes the code hard to read. \r\n\r\nYou can rename the internal name to species to be very clear. "", 'comment_created': datetime.datetime(2023, 8, 22, 5, 42, 34, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1300976085, 'comment_body': 'Remember to remove ', 'comment_created': datetime.datetime(2023, 8, 22, 5, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1300978385, 'comment_body': '@1someshverma resolve the comment when implemented in your branch ', 'comment_created': datetime.datetime(2023, 8, 22, 5, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1307200372, 'comment_body': 'not needed anymore I think', 'comment_created': datetime.datetime(2023, 8, 28, 9, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}]","[{'commit_sha': 'ab48aa00612c04ba70f7618a32fefb6a1ea4b1a1', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6155439d88ddb49d7456f3622d440c0657c7ba85', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1a6bcd660ac4b4adae87506d3a868b387a8d543', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4910ce5dc3f997974c05b86b90d54688c47fcfb', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b3afd5833bf75b7e26752432668816cb2f60476', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f67c110f47622a947107b34c41af08eed8e18c79', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '133f9819f595524244fa3db2acf819024fe326a0', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e3511dfca563a7edea8c7f50a84755defd82ad1', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6489bd0879046c07dc97cc108a3f58eb41b2752f', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e554810debb2d41bd2727e38a6409b231882a3b3', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '777e2cdf6c6c29e99b326e25baf0bec01a4e0ce6', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49381c54b10bb3c311474fae82389bb16d145684', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef7708551808c51d5dff079d29c3c763e021ba00', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82e4304702dae497073bb43fdf5f7749a2955efa', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0305d795d400a2e383f66d3f69e65c61c78733cc', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7289dd9c30f6df06f1ca018b096ceec9dbf96cb', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4efb579c2b00dbf3578dfe214f965d535dfc8278', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff6a81d97946178f98538892a0d120abad908b48', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c383f6c628b8b52c7d1e8ea682a9fdbf28521095', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c33699b25104eb9f8723097c52a4aef83fb287a', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85c99274996e5b1d8d153230d98966156311381a', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae1e9ba3f9d2f2e060a3761a6e49fce8d082bf61', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cb36392993e9568b2e621f238e3880941e3b571', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81407c76495570ecf965fd791f72ff7a4aea7bd7', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51aab5517beae8437e3a7aa2cbba04b453126773', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e248050d43273a565667e1917bec5320b30941c', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '860bcb5dd551e2a747dda89b400373abb02ec3c4', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b36711a2e6abe9632505b6d08ee575349a5f442', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4bb832c52b57a35489baf7c2f68795c2bd5d538', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3ae824a794ab752b42f53ea9b1d5b1661f8317e', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53a3a0f015c944b699031df0cbb7d3f15f494b80', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd77bb46ceea8b8d5609af53e0fb126ac505b7db', 'committer_username': 'minouHub', 'committer_name': 'Nicolas Minesi', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 20, 19, 40, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e708d825d10135e2b69cbf2b377ab3127efa5f66', 'committer_username': 'minouHub', 'committer_name': 'Nicolas Minesi', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 20, 19, 40, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbe821af271821e868112146edeea6b7d15f5cd5', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4040f0ac522e5ac8630719a12438f6369c10b68f', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0feb172a0bf3f3ec0599afcbf62abe6c309becde', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '032816d919069c8ab8b1a29f3365c38a011e8ddb', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44607f522e13ce63988c947664f60cefad7e9339', 'committer_username': 'minouHub', 'committer_name': 'Nicolas Minesi', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 20, 19, 40, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e19f182ea08b4b55ba9e8d2229cf3e8a36f0feb4', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e27b20cbe0ced86af596f34f1f5bfef71c4f8d4b', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75d9396ab63aa14d4f5401f4f1a6910727057cb0', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e5b763e78a66b86336c0c4abef063e31bb72d1', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5453c43c89d67d50ea356a422daa9bcbfccc6925', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc25f55432b9e46104bb0bedb2f81c5e67a302a4', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f945d4cb29aec7c3f78da3588aea035996c800b', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b35ac5e35165b5b3386ab47f47258a5676706b6f', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a72c3986240a07464007cab837ac2405a622c3e', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89cf8e9718e841360f894c5d253b4e165678812b', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efeadd41f8dde33f16198f43e281c46387ffb0a5', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a6ff017acaefa4695392b59118e3e56ee04a221', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f028df5254f4af3dd8a106d384c20e7c0cf0f084', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cad290958e3d1c7b3816f45d8700694bacd178fc', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b119509a4b2d4778c7b947a5be80376026ba3496', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14b5a9d237b4230bbee08cb0a3371b538b15f696', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81cf1c5ea156fb57fca440bb7fcea5f2a734d703', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a436147eae1c0730619cd054abc01ea6e427250c', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea6f9ef74b7f9dd2f96762127a785329a0c662cc', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f333fa9426ba8ac8d399a28798b85f38263ffae4', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9208ea5f350033f96952d076b4d2e997319d4614', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da11515e044d88b0c0e47a8ddf2c2d9d68430d0d', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea0b18b7c5203bd5f2e97725e67825f5c8339a1d', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a86b53e84fff1b95bac8188e847fcb3a79011ec4', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b469ee016b41f3b779a6805655bb43f19ea35834', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ae795a4abb910a397ef8183c100a6bbedec16d0', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd86e51651e97daf8b480cfce10e66d4e4172f9dd', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3468e4900e3979841395bc44bf6b4f42c0277ba', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6acccaa5dd65f5d3a25d8e773a582708c96c284a', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2395c4370685bd3bd1c610a7c08c064a40b086c', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e148daea9d95b36d80ae8aa1d35ebc0edf8d547', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb9d8f17dbaafa7874c21ecbcc4d84d3d598389a', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ea2bff9a07d3377438e059cb05881e0c7b6cd6e', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '380cadb78f41f807c6665be2303fede02e697b4c', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57a84bffa046e80a80fa7a448b5c8d8d2a6ca5db', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b995395b0692e166f9b106a34afe819f9d7f06c', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c30a5f3c9179cdfe42fd3dc595319ec844e151e6', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cc7c023f17f31f3664adbfc5c1a849f11cf5bb6', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3470bcdcc1190b98edfa276c367dcde897f2746e', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70d82b108d60ab88c51ea55b3124cb8f9c72ef70', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9ebd1919973f4f96349f3d078187bba444b8c17', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb228930cf86a757f9494545c7fbe4b79df6c02', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ea433b13c3d2c37729702daac63877da27b0785', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4333fc00ebe28280130ca6f00eb24cfc5db2ea7', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9df931f72ef2de02330dd3584635a655a106b27', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a08a8b0249f7419eb76c1e0bd2df769ba18dd30', 'committer_username': 'menasrac', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2023, 4, 1, 10, 35, 55, tzinfo=datetime.timezone.utc)}]",,129592774,,User,,3,,0,1

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
118933991,radis,radis/radis,Python,121,210,11,47,3450,76,11,8,"[{'id': 1459000357, 'number': 601, 'closed': datetime.datetime(2024, 6, 4, 16, 18, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 2, 2, 4, 12, tzinfo=datetime.timezone.utc), 'time_taken': 26576079.0, 'time_delta': '307 days, 14:14:39', 'additions': 7323, 'deletions': 59, 'state': 'closed'}, {'id': 1420834803, 'number': 579, 'closed': datetime.datetime(2023, 8, 15, 11, 9, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 5, 10, 27, 36, tzinfo=datetime.timezone.utc), 'time_taken': 3544903.0, 'time_delta': '41 days, 0:41:43', 'additions': 817, 'deletions': 0, 'state': 'closed'}, {'id': 1416252002, 'number': 577, 'closed': datetime.datetime(2023, 7, 6, 8, 18, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 17, 2, 32, tzinfo=datetime.timezone.utc), 'time_taken': 400547.0, 'time_delta': '4 days, 15:15:47', 'additions': 817, 'deletions': 0, 'state': 'closed'}, {'id': 1301930461, 'number': 562, 'closed': datetime.datetime(2024, 2, 26, 16, 17, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 4, 16, 10, 48, tzinfo=datetime.timezone.utc), 'time_taken': 28339628.0, 'time_delta': '328 days, 0:07:08', 'additions': 86, 'deletions': 5, 'state': 'closed'}, {'id': 1300800091, 'number': 560, 'closed': datetime.datetime(2023, 5, 19, 10, 23, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 3, 23, 10, 14, tzinfo=datetime.timezone.utc), 'time_taken': 3928369.0, 'time_delta': '45 days, 11:12:49', 'additions': 37, 'deletions': 0, 'state': 'closed'}, {'id': 1300779301, 'number': 559, 'closed': datetime.datetime(2023, 5, 19, 10, 23, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 3, 22, 43, 2, tzinfo=datetime.timezone.utc), 'time_taken': 3930004.0, 'time_delta': '45 days, 11:40:04', 'additions': 38, 'deletions': 0, 'state': 'closed'}]"
