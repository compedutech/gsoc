pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
676253554,Add rocket chat import tool,"This PR adds the support to import the following data from Rocket Chat:
* All users
* All public/private channels
* All teams and their public/private channels
* All discussion rooms as topics in their parent channel
* All the messages in all the channels
* All private conversations
* Reactions on messages (except for custom emojis)
* Mentions in messages (except `@all`, `@here` mentions)

Features remaining to be added:
* User avatars
* Attachments
* Default streams
* Custom emojis
* `@all`, `@here` mentions
* Starred messages
* Threads as separate topics
* Import messages longer than 10,000 characters.",True,18966,https://api.github.com/repos/zulip/zulip/pulls/18966,https://github.com/zulip/zulip/pull/18966,closed,1743,9,19,3,26,38,1,0,[{'name': 'size: XL'}],2021-06-23 12:45:03+00:00,2021-07-28 22:46:46+00:00,3060103.0,"35 days, 10:01:43","[{'comment_id': 658142642, 'comment_body': 'Can you add a comment documenting the other types that might exist in Rocket.Chat?  ', 'comment_created': datetime.datetime(2021, 6, 24, 17, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 658143265, 'comment_body': 'This comment is kinda confusing; we should just support exactly the set of wildcard mentions that exist in Rocket.Chat, without reference to what Mattermost happens to do.', 'comment_created': datetime.datetime(2021, 6, 24, 17, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 658143869, 'comment_body': ""It's probably better to truncate too-long messages; we could also consider spitting them.  Did you see this case in practice, or is this copied from Mattermost?  If the latter, probably best to leave this for a follow-up issue."", 'comment_created': datetime.datetime(2021, 6, 24, 17, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 658841381, 'comment_body': 'Added the comment.', 'comment_created': datetime.datetime(2021, 6, 25, 15, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 658843230, 'comment_body': 'I actually copied the comment from the Mattermost tool, which is "" We don\'t have an equivalent for Mattermost\'s @here mention which mentions all users online in the channel."". I changed the `online` to `active`, as RocketChat tags all the active users in a channel with `@here`, but forgot to change the name.\r\n\r\nUpdated.', 'comment_created': datetime.datetime(2021, 6, 25, 15, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 658846065, 'comment_body': ""I copied this from the Mattermost import tool, but I checked for RocketChat and it also supports sending messages longer than 10,000 characters.\r\n\r\nI've added this in the description of this PR, to be solved in a follow-up issue."", 'comment_created': datetime.datetime(2021, 6, 25, 15, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 660161084, 'comment_body': 'Sounds good.', 'comment_created': datetime.datetime(2021, 6, 28, 22, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 660161464, 'comment_body': 'Is there top-level documentation on the Rocket.Chat data export format that we could link to from a comment located here?', 'comment_created': datetime.datetime(2021, 6, 28, 22, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 660161562, 'comment_body': ""(Might be worth adding something similar for the other data import tools, if we haven't already)."", 'comment_created': datetime.datetime(2021, 6, 28, 22, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670819999, 'comment_body': 'A lot of this code is duplicated between our conversion tools; what do you think about doing a small prep PR to migrate the existing import tools to a cleaner interface?  We can start by using `ZulipBaseCommand` from `zerver/lib/management.py`, and then adding a `self.add_data_export_output_args()` similar to `add_realm_args`, and then call a `selfoutput_dir = self.get_output_dir()` that together replace most of the code from here on up.\r\n\r\n(The other bits seem harder to avoid duplicating, and are relatively short in any case).', 'comment_created': datetime.datetime(2021, 7, 15, 21, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670821039, 'comment_body': ""Let's use `realm_id` rather than `3` for these checks; that's a lot more readable."", 'comment_created': datetime.datetime(2021, 7, 15, 21, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670822189, 'comment_body': ""I think we should spell this last parameter `Rocket.Chat`, since that's how they spell their name."", 'comment_created': datetime.datetime(2021, 7, 15, 21, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670822661, 'comment_body': ""If the Rocket.Chat export has a realm creation time, it's possible we should record that instead of the current time.  \r\n\r\n(This may be an issue across our data import tools)"", 'comment_created': datetime.datetime(2021, 7, 15, 21, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670823231, 'comment_body': 'I think we should only set `is_mirror_dummy` for `""unknown""`.  \r\n\r\nWe probably want to import bots with `is_bot=True, is_active=False`, and ideally `bot_owner` set.', 'comment_created': datetime.datetime(2021, 7, 15, 21, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670823770, 'comment_body': ""I'm not sure why you need this variable as a parameter on `user_dict`, rather than just a local variable, given that you convert it into one below."", 'comment_created': datetime.datetime(2021, 7, 15, 21, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670825337, 'comment_body': 'What\'s the thinking for the `[TEAM] {stream_name}` formatting of the team channel name?  I think it\'d be reasonable to not change stream names and just do something with the stream descriptions.  But maybe I\'m missing something about how ""teams"" work in Rocket.Chat and the stream names aren\'t themselves globally unique?', 'comment_created': datetime.datetime(2021, 7, 15, 21, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670825872, 'comment_body': ""If we need to combine the channel and team names for uniqueness, I think what I'd want is a format for stream names like `#{channel_name} ({team})`"", 'comment_created': datetime.datetime(2021, 7, 15, 21, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670826319, 'comment_body': 'Do they have an equivalent of our `stream_post_policy` that we could import?  https://zulip.com/help/stream-sending-policy.', 'comment_created': datetime.datetime(2021, 7, 15, 21, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670826532, 'comment_body': 'I think we might need `deactivated=True` for streams with no subscribers, since Zulip auto-deactivates streams in that situation.', 'comment_created': datetime.datetime(2021, 7, 15, 21, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670826861, 'comment_body': ""I take it we haven't implemented custom emoji import yet?"", 'comment_created': datetime.datetime(2021, 7, 15, 21, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670827477, 'comment_body': 'If this is a PM, `topic_name` should be the empty string.', 'comment_created': datetime.datetime(2021, 7, 15, 21, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670827808, 'comment_body': 'And then this can be just ""Imported from Rocket.Chat"" to be consistent with our other import tools.', 'comment_created': datetime.datetime(2021, 7, 15, 21, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670828122, 'comment_body': 'Maybe ""{fname} (from Rocket.Chat)` would be a good pattern here?  I\'m not sure what a `fname` looks like.', 'comment_created': datetime.datetime(2021, 7, 15, 21, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670828536, 'comment_body': ""What does setting `mentions_user_ids` here do?  I think the markdown rendering process during data import will handle individual user mentions, if we've updated the content, and this code may not do anything."", 'comment_created': datetime.datetime(2021, 7, 15, 21, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670828745, 'comment_body': 'Be explicit: ""Messages with a type are system notifications like user_joined that we don\'t include.""', 'comment_created': datetime.datetime(2021, 7, 15, 21, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 672641058, 'comment_body': 'Ohh, I must have missed this.', 'comment_created': datetime.datetime(2021, 7, 19, 21, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 672653879, 'comment_body': 'Actually, teams have a separate category in Rocket.Chat, where all the main channels of teams are grouped together. (All teams have one main channel that appears in that category and then several child channels that appears in the normal `Public` and `Private` category.)\r\n\r\n![Screenshot from 2021-07-20 03-13-53](https://user-images.githubusercontent.com/39924567/126231428-5782dc2a-9e25-4f06-a02f-1cbb23f0c8ce.png)\r\n\r\n\r\nSo, in order to give the users migrating from Rocket.Chat a similar experience, I added `[TEAM]` before the stream name of the main team channels, which will group all the teams together at the top of the streams list, just like in Rocket.Chat. ', 'comment_created': datetime.datetime(2021, 7, 19, 21, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 675134625, 'comment_body': 'Mattermost does not provide any timestamps (realm creation and stream creation) and Slack only provides the stream creation timestamp, which is already being used while creating Zulip streams. So, this is a problem with Rocket.Chat only.\r\n\r\nWill fix it.', 'comment_created': datetime.datetime(2021, 7, 22, 20, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 675160111, 'comment_body': 'Updated code to use the actual realm creation and stream creation time.', 'comment_created': datetime.datetime(2021, 7, 22, 21, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 675175018, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 22, 21, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 675180822, 'comment_body': ""I think we should keep it as `{fname} (Discussion from Rocket.Chat)`. This way, it won't take a good portion of the topic name at the beginning and will also inform the users that this topic is actually imported from Rocket.Chat Discussion.\r\n\r\nYou can refer to the screenshot attached above to get an idea of how the `fname` looks like (these are just like the stream names)."", 'comment_created': datetime.datetime(2021, 7, 22, 21, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 675248062, 'comment_body': ""maybe `{fname} (Imported from Rocket.Chat)`?  I think that's a bit cleaner."", 'comment_created': datetime.datetime(2021, 7, 23, 0, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 675872646, 'comment_body': 'Done.\r\n\r\nIn Rocket.Chat, there is nothing like `bot_owner` and all the admins have the privilege to configure all the bots. But, as we can set only one user as the `bot_owner`, while looping through all the users (when creating their user profiles), I separated out all the admins (now realm owners) in `realm_owners` list and set the first realm owner as the owner of all the bots.', 'comment_created': datetime.datetime(2021, 7, 23, 21, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 675876878, 'comment_body': 'Yes, removed all the comments related to custom emojis.', 'comment_created': datetime.datetime(2021, 7, 23, 21, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 675890357, 'comment_body': '> I think the markdown rendering process during data import will handle individual user mentions\r\n\r\nNo, it does not. \r\n\r\nSo, while creating the user_message, we just add `8` to the `flag_mask` (to state that the user is mentioned in the message). This highlights the message for the users mentioned in the message but does not highlight the part where the users are mentioned in the message, plus, clicking over the user mention in the message does not open any popover.\r\n\r\n![Screenshot from 2021-07-24 03-42-50](https://user-images.githubusercontent.com/39924567/126846333-c57bbaed-a6c0-40c4-8954-50491917fa29.png)\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 23, 22, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 676032037, 'comment_body': 'I looked into it and yes, on Rocket.Chat we can mark channels as read-only, where only admins of the workplace and owners and moderators of the channel can post.\r\n\r\nWhile importing such channels, I set the stream policy as -- Only admins and moderators can post.', 'comment_created': datetime.datetime(2021, 7, 24, 18, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 676042400, 'comment_body': ""There isn't any such documentation for Rocket.Chat (they don't even have any mechanism to export data, we use the mongo dump in our import tool). But it would be worth adding this in other import tools.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 24, 20, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 678279598, 'comment_body': 'I think we can eliminiate these two lines by using a `collections.defaultdict(set)` instead of `set` for                 stream_members_map', 'comment_created': datetime.datetime(2021, 7, 28, 13, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}]","[{'commit_sha': '24dd0ff96cced7b5478e24252f366af1c9fa47cb', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e68b1989b3a096c0f3045e8b1796f89dbdd4330c', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '044fe547d347137558be4245189cc2c0cfcff1a8', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}]",Priyansh Garg,39924567,priyanshgarg30@gmail.com,User,,67,,43,178
701642570,data_import: Import custom emoji from Rocket.Chat.,"Custom emojis in reactions work correctly, but custom emojis inside messages are not rendered (probably because we do not pass the imported messages through our markdown processor).

![Screenshot from 2021-08-02 22-42-18](https://user-images.githubusercontent.com/39924567/127899374-91a90e2c-2271-4dfa-a4b9-ca43b7147a40.png)
",True,19461,https://api.github.com/repos/zulip/zulip/pulls/19461,https://github.com/zulip/zulip/pull/19461,closed,522,33,10,3,6,2,2,0,"[{'name': 'area: emoji'}, {'name': 'size: XL'}]",2021-08-02 17:17:35+00:00,2021-08-09 13:38:26+00:00,591651.0,"6 days, 20:20:51","[{'comment_id': 684848381, 'comment_body': 'Emoticons are something different in our terminology; this should be `build_custom_emoji`.', 'comment_created': datetime.datetime(2021, 8, 8, 23, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 685200883, 'comment_body': ""Here you're affecting implementing a function remapping channels, which needs to be identical to the function for how we name channels imported into the zerver_stream table. \r\n\r\nWe should make both of those code paths call a shared function -- otherwise it's basically inevitable that there will be bugs where there the two disagree, either now or in the future."", 'comment_created': datetime.datetime(2021, 8, 9, 13, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': '34a4b6ece9096013ef7b640099fa30dfeb8ce483', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7427961e06d840c33c28806822ef8f796e2b31df', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df5912ac655ad059060f8927e9c3cb91708a9076', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}]",Priyansh Garg,39924567,priyanshgarg30@gmail.com,User,,67,,43,178
710818881,Rocket.Chat import tool updates,,True,19564,https://api.github.com/repos/zulip/zulip/pulls/19564,https://github.com/zulip/zulip/pull/19564,closed,143,67,6,5,2,13,1,0,[{'name': 'size: XL'}],2021-08-12 12:24:22+00:00,2021-11-02 00:13:59+00:00,7040977.0,"81 days, 11:49:37","[{'comment_id': 701084768, 'comment_body': 'We generally do `if rc_channel.get(""teamMain"")` instead of `if rc_channel.get(""teamMain"") is True\r\n` when comparing for True in Zulip codebase.', 'comment_created': datetime.datetime(2021, 9, 2, 13, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 701104127, 'comment_body': 'To confirm, all the users subscribed to a channel in RC can access all the discussions created inside the channel right? And there is no way to explicitly restrict the access of a channel subscriber to a given discussion inside the channel?', 'comment_created': datetime.datetime(2021, 9, 2, 13, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 701123604, 'comment_body': 'I think we can mention that `@all` and `@here` are both imported as `@all` in Zulip and what it means. Since RC has diffrent meaning for the two.', 'comment_created': datetime.datetime(2021, 9, 2, 14, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 701124916, 'comment_body': 'We should add tests for this.', 'comment_created': datetime.datetime(2021, 9, 2, 14, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 701126500, 'comment_body': 'Would be nice to include the commit message IDs of the functionality that implemented this in the commit description.', 'comment_created': datetime.datetime(2021, 9, 2, 14, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 701163589, 'comment_body': 'Can we add a test for the discussion imported from a channel checking for content and all. Or is there one already? Similiarly one for a discussion imported from a direct message would be also great to have.', 'comment_created': datetime.datetime(2021, 9, 2, 14, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 701184048, 'comment_body': 'We need to add tests for this.', 'comment_created': datetime.datetime(2021, 9, 2, 15, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 701185636, 'comment_body': 'We should first mention how are threads imported for channels. Then mention this. ', 'comment_created': datetime.datetime(2021, 9, 2, 15, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 717968975, 'comment_body': 'I think I had some reason for using `is` here (I have used it at a very few places), but even after thinking about it a lot, I couldn\'t think of the possible reason. `teamMain` can only attain 3 possible values, `None`, `True` and `False` and in all three cases, just doing `if rc_channel.get(""teamMain"")` seems to work fine.', 'comment_created': datetime.datetime(2021, 9, 28, 21, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 717974737, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 9, 28, 21, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 717989216, 'comment_body': 'Yes, I rechecked this once again and all the members subscribed to a channel in RC can access and join a discussion created inside that channel, even when the discussion created is private. I couldn\'t find a way to restrict the users (other than those invited) from joining a discussion. \r\n\r\nMaking the discussion ""Private"" seems to be the only option around this but even with that turned on, anyone who is subscribed to a channel can access and join all the discussions inside that channel.\r\n\r\n![Screenshot from 2021-09-29 03-10-19](https://user-images.githubusercontent.com/39924567/135170122-33a64ab1-fe1c-42e4-9535-94515d6bc6b9.png)\r\n', 'comment_created': datetime.datetime(2021, 9, 28, 21, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 717993111, 'comment_body': 'Okay, there is one more thing. If we set a discussion as not private, we get another option of setting a password that the user will need to enter before joining a discussion.\r\n\r\n![Screenshot from 2021-09-29 03-18-53](https://user-images.githubusercontent.com/39924567/135170618-46051e10-7caa-46b2-b67b-09588be0bd0a.png)\r\n\r\nBut in this case too, the user can access the content of the discussion, but just cannot join the discussion.', 'comment_created': datetime.datetime(2021, 9, 28, 21, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 717996467, 'comment_body': 'Sure, done.', 'comment_created': datetime.datetime(2021, 9, 28, 21, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}]","[{'commit_sha': '26f16b9eec420e986b3a1d76635bb690bcbdcc7f', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d3ecc8a0ef55ad0eabb28eb169eb92d23ea8802', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f1e246230e3885e62bf051536300de1c18fd015', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0db9b7287b65a49dcb18bb414205a1b6f3b2b486', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c2e4eec200d986a9a020f3e9a651d27216e0e85', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}]",Priyansh Garg,39924567,priyanshgarg30@gmail.com,User,,67,,43,178
707572285,markdown: Remove unnecessary checks for zulip_message.,"This commits removes some unnecessary checks for `self.md.zulip_message`,
which were put there historically, as earlier we used to add the additional
properties like mentions_user_ids, alert_words, etc. to Message dict
only. These were later moved to MessageRenderingResult class in commit
75cea329b but the checks weren't removed.

This is important because while rendering the messages imported from
other chat tools (like Rocket.Chat), the Message dict is not passed to
the markdown, due to which the checks for `self.md.zerver_message` fails
and hence, things like user mentions, stream/topic mentions are not
rendered in the imported messages properly.
",True,19553,https://api.github.com/repos/zulip/zulip/pulls/19553,https://github.com/zulip/zulip/pull/19553,closed,33,37,1,1,7,0,1,0,[{'name': 'size: L'}],2021-08-10 18:31:32+00:00,2021-08-31 23:53:43+00:00,1833731.0,"21 days, 5:22:11",[],"[{'commit_sha': 'a77b15768ca3398585148200f69132cd7c29e576', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}]",Priyansh Garg,39924567,priyanshgarg30@gmail.com,User,,67,,43,178
678950155,data_import: Add import attachments support for Mattermost.,"Add support for importing message attachments from Mattermost.

Fixes: #18959

Tested on the exported data provided in the above mentioned issue.

**GIFs or screenshots:** <!-- If a UI change.  See:
  https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
  -->
![Screenshot from 2021-06-28 16-07-18](https://user-images.githubusercontent.com/39924567/123627454-a77d4780-d82f-11eb-8cba-31c4074b28f8.png)

",True,19034,https://api.github.com/repos/zulip/zulip/pulls/19034,https://github.com/zulip/zulip/pull/19034,closed,220,23,7,2,9,17,4,0,"[{'name': 'bug'}, {'name': 'area: export/import'}, {'name': 'priority: high'}, {'name': 'size: XL'}]",2021-06-28 11:13:03+00:00,2021-07-02 18:29:53+00:00,371810.0,"4 days, 7:16:50","[{'comment_id': 660797130, 'comment_body': 'I think we can create a helper function for this since this is kind of duplicated in zerver/lib/markdown/__init__.py as well.', 'comment_created': datetime.datetime(2021, 6, 29, 16, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 660802211, 'comment_body': 'Is it safe to assume the attachments in message are always created by the user who sends the message? For example,  if I include a link to attachment uploaded by someone else in the message will it show up in attachments of the message.', 'comment_created': datetime.datetime(2021, 6, 29, 16, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 660805111, 'comment_body': '```suggestion\r\n    return content, has_image\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 17, 1, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 660805370, 'comment_body': '```suggestion\r\n            content, has_image = process_message_attachments(\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 17, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 660806082, 'comment_body': '```suggestion\r\n        content_for_link = f""[file_name](/user_uploads/{s3_path})""\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 17, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 660815403, 'comment_body': 'hmm. Wouldn\'t `len(post_dict[""attachments""])` always be true if `post_dict.get(""attachments"")` is True.', 'comment_created': datetime.datetime(2021, 6, 29, 17, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 660823557, 'comment_body': '@timabbott  We have a flag to mask content(`--mask`) during QA. Should the attchments be exported if the flag is passed?', 'comment_created': datetime.datetime(2021, 6, 29, 17, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 660827268, 'comment_body': '@timabbott Should we do any check on whether the files are smaller than MAX_FILE_UPLOAD_SIZE', 'comment_created': datetime.datetime(2021, 6, 29, 17, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 660886228, 'comment_body': 'Yeah :sweat_smile: Actually empty array in JS corresponds to True, so I thought it would be the same case with Python too.', 'comment_created': datetime.datetime(2021, 6, 29, 18, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 660886991, 'comment_body': ""I didn't really understand the use of --mask. Can you please explain what it does?"", 'comment_created': datetime.datetime(2021, 6, 29, 19, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 661176320, 'comment_body': '@garg3133 I don\'t properly remember the full story as well. The description of the flag is this\r\n\r\n```\r\nparser.add_argument(\r\n        ""--mask"",\r\n        dest=""masking_content"",\r\n        action=""store_true"",\r\n        help=""Mask the content for privacy during QA."",\r\n)\r\n```\r\n\r\nI think it was added so that we can import a proper mattermost organization with actual data and do testing on it to make sure that everything is imported correctly. Since we mask the content we won\'t see the content of the messages during testing.', 'comment_created': datetime.datetime(2021, 6, 30, 6, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 661838748, 'comment_body': ""Mattermost doesn't include the link to the attached file in the message or anywhere, so the only way to re-send an attachment somewhere else is to re-upload that attachment, which'll make the uploader the owner of the attachment.\r\n\r\nThe only way to get the link to the attachment is to click on the attachment and copy the link from the download button, but even if we get the link to the attachment and include it in a message, it won't really act as an attachment in that message but a simple link to some file."", 'comment_created': datetime.datetime(2021, 6, 30, 21, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 662056592, 'comment_body': 'Okay great. Thanks for the clarification :)', 'comment_created': datetime.datetime(2021, 7, 1, 7, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hackerkid', 'type': 'User'}, {'comment_id': 662588122, 'comment_body': 'How about creating a variable `IMAGE_EXT` in `zerver/lib/markdown/init.py` and using it at other places, like in the sample commit I added to this PR? Will rebase it properly once it gets approved.', 'comment_created': datetime.datetime(2021, 7, 1, 20, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 663185007, 'comment_body': ""I don't think we need to; the main constraint there is client-side, not server-side."", 'comment_created': datetime.datetime(2021, 7, 2, 18, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 663185887, 'comment_body': ""I think that makes sense but it may not be worth the investment; it seems possible that now that the mattermost import tool is pretty stable, we won't use that option again. "", 'comment_created': datetime.datetime(2021, 7, 2, 18, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 663186144, 'comment_body': 'This is good, but should be called `IMAGE_EXTENSIONS` to be a lot more readable (plural is correct, and also we avoid abbreviations wherever we can).', 'comment_created': datetime.datetime(2021, 7, 2, 18, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': '5b2e21965ce9e4b9a947662ff9cdd305d3b32539', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94a2be06f35f63a4e0b4d5a70ec75a8eae373e9b', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}]",Priyansh Garg,39924567,priyanshgarg30@gmail.com,User,,67,,43,178
690986549,compose: Fix expanded compose un-collapsible in presence of navbar_alerts.,"The distance of compose-box from the top is hardcoded in the existing
code as `50px`, which only considers the height of the `.header`, plus the
padding-bottom of the header. This results in a bug where the top bar of
compose-box gets hidden behind the header if navbar_alerts is also present
in the view.

This commit calculates the top distance of the compose-box dynamically,
whenever the compose-box is opened and set the `top` property of the
compose-box accordingly.

Tested on my Ubuntu development environment.

Fixes: #19249.

**GIFs or screenshots:** <!-- If a UI change.  See:
  https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
  -->
![Screenshot from 2021-07-16 01-07-15](https://user-images.githubusercontent.com/39924567/125847299-2f5879d4-be9a-4b78-a8b7-f5133ca17106.png)
",True,19266,https://api.github.com/repos/zulip/zulip/pulls/19266,https://github.com/zulip/zulip/pull/19266,closed,65,3,4,1,2,8,4,0,"[{'name': 'bug'}, {'name': 'area: compose (misc)'}, {'name': 'priority: high'}, {'name': 'size: L'}]",2021-07-15 19:37:46+00:00,2021-07-22 21:25:49+00:00,611283.0,"7 days, 1:48:03","[{'comment_id': 670761101, 'comment_body': 'This sort of javascript-based approach feels fragile.  Is there a way that we can refactor the HTML a bit to just make the 100% mean 100% of the space below the navbar panels?', 'comment_created': datetime.datetime(2021, 7, 15, 19, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 670783636, 'comment_body': 'Actually, the compose has `position: fixed` property, so no matter what we do with the HTML, 100% for the compose will always be 100% of the entire viewport. This can be solved by moving the compose box from `.column-middle` to `.app-main` and using `position: absolute` there, but this might need a lot of careful work and may also lead to some unnecessary bugs.\r\n\r\nThe code I used above is actually how we set the top of `#floating_recipient_bar` [here](https://github.com/zulip/zulip/blob/1295b47e3b9042c4ea7cb10d9928499ba141d193/static/js/navbar_alerts.js#L27).', 'comment_created': datetime.datetime(2021, 7, 15, 20, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 671732376, 'comment_body': 'I agree with @garg3133 , I also tried the same way. But the `#compose` has `position: fixed` which is causing the problem.', 'comment_created': datetime.datetime(2021, 7, 17, 19, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Signior-X', 'type': 'User'}, {'comment_id': 674381781, 'comment_body': 'I assume we now need to call this function whenever doing a show/hide in `navbar_alerts`.', 'comment_created': datetime.datetime(2021, 7, 21, 22, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 674382174, 'comment_body': ""Well, I can't say I have a clear sense as to whether we changing to `position: absolute` would be better; that may be a discussion worth taking to #frontend, but probably not a blocker for this.\r\n\r\nWe should record that background in the comments here, however."", 'comment_created': datetime.datetime(2021, 7, 21, 22, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 675047618, 'comment_body': 'I think instead of calling this function every time `navbar_alerts` is shown or hidden, we should call this every time `.app` is resized, as the height of the expanded compose-box is closely related to the height of `.app`, and this will also consider the case when the window is resized or app in zoomed in/out.', 'comment_created': datetime.datetime(2021, 7, 22, 17, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 675053775, 'comment_body': 'Updated. Please check the comment.', 'comment_created': datetime.datetime(2021, 7, 22, 18, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}, {'comment_id': 675053909, 'comment_body': 'Updated the code.', 'comment_created': datetime.datetime(2021, 7, 22, 18, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}]","[{'commit_sha': 'fb4e32a9c72c26b3299a7c813c93c80bd7a2ae92', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}]",Priyansh Garg,39924567,priyanshgarg30@gmail.com,User,,67,,43,178
691036972,compose: Fix compose top-right buttons misalignment.,"<!-- What's this PR for?  (Just a link to an issue is fine.) -->

Bootstrap set the `vertical-align` property of all button elements to `middle`, which seems to be causing this problem.

**Testing plan:** <!-- How have you tested? -->


**GIFs or screenshots:** <!-- If a UI change.  See:
  https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
  -->

**Before**
![Screenshot from 2021-07-16 02-19-49](https://user-images.githubusercontent.com/39924567/125857977-d78583e1-06ce-435b-b09d-11bfcf3c40f7.png)


**After**
![Screenshot from 2021-07-16 02-29-49](https://user-images.githubusercontent.com/39924567/125858002-753538c5-f906-4ffd-9281-bd635b75b585.png)



<!-- Also be sure to make clear, coherent commits:
  https://zulip.readthedocs.io/en/latest/contributing/version-control.html
  -->
",True,19270,https://api.github.com/repos/zulip/zulip/pulls/19270,https://github.com/zulip/zulip/pull/19270,closed,1,0,1,1,1,0,1,0,[{'name': 'size: XS'}],2021-07-15 21:08:56+00:00,2021-07-15 21:12:29+00:00,213.0,0:03:33,[],"[{'commit_sha': '371476395ccfdb92c2d31e82505b77fc2a337e1b', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}]",Priyansh Garg,39924567,priyanshgarg30@gmail.com,User,,67,,43,178
692869185,compose: Fix compose-preview size in expanded mode.,"The CSS properties used to make the `#compose-textarea` full-size
were missing for the `#preview_message_area`, thus, it was just
getting to the height as specified in the `max-height` property
of `#preview_compose_box`.

Adding the missing CSS properties resolved the problem, but only
for not-too-long messages. For very-long messages, the preview
message area was overflowing the parent container (attaining the
maximum height possible according to the content, due to the absence
of max-height), which led to the controls below compose-box to
disappear.

Adding an additional property of `height: 1.5em` solved this problem,
as if a height lower than min-height is set to an element, it attains
its min-height.

Tested manually on my Ubuntu Development environment.

Fixes: #19243.


**GIFs or screenshots:** <!-- If a UI change.  See:
  https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
  -->

**Without height property**
![Screenshot from 2021-07-20 01-01-27](https://user-images.githubusercontent.com/39924567/126216582-3eb6f196-b647-4b95-9109-82c399758467.png)


**With height property**
![Screenshot from 2021-07-20 01-02-32](https://user-images.githubusercontent.com/39924567/126217255-16255bf0-6747-475b-a83b-a763cc4f2ea9.png)


",True,19321,https://api.github.com/repos/zulip/zulip/pulls/19321,https://github.com/zulip/zulip/pull/19321,closed,6,0,1,1,5,0,2,0,"[{'name': 'area: compose (misc)'}, {'name': 'size: S'}]",2021-07-19 19:35:03+00:00,2021-07-22 19:51:04+00:00,260161.0,"3 days, 0:16:01",[],"[{'commit_sha': '9238a7023cd6b37bded7ac097d26108e2f150d57', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}]",Priyansh Garg,39924567,priyanshgarg30@gmail.com,User,,67,,43,178
699867394,data_import: Make slack bot emails unique.,"Slack bot emails generated by us can be duplicate for two bots.
If such a case occur, append a counter to the email to make it
unique.

For maintaining the counter of duplicate emails and the final
email assigned to each bot, a class-based approach is used with
static variables and static (class) methods. This keeps all the
data related to slack bot emails at the same place and easily
accessible from anywhere inside the module (without defining any
class object and passing it around).

Fixes: #16793
",True,19436,https://api.github.com/repos/zulip/zulip/pulls/19436,https://github.com/zulip/zulip/pull/19436,closed,37,8,1,1,3,3,2,0,"[{'name': 'area: export/import'}, {'name': 'size: M'}]",2021-07-29 22:00:45+00:00,2021-08-03 23:18:14+00:00,436649.0,"5 days, 1:17:29","[{'comment_id': 679525375, 'comment_body': ""I think a correct algorithm here probably needs to involve a loop or something that iterates until it finds a value not used, since it's theoretically possible that the original namespace had a `bot@example.com` and a `bot1@example.com`, and we don't want collisions in that case."", 'comment_created': datetime.datetime(2021, 7, 29, 22, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 679525870, 'comment_body': 'I think it might be a cleaner interface to have this if/else live in the `SlackBotEmail` class, so you just call `return `SlackBotEmail.email_for(user)`', 'comment_created': datetime.datetime(2021, 7, 29, 22, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 679728232, 'comment_body': ""That actually won't create an issue, as we are appending an extra `-bot` to the `slack_bot_name` while creating the email. So even if there was originally some number ahead of the `slack_bot_name`, appending of `-bot` will normalise it and there won't be any further collisions."", 'comment_created': datetime.datetime(2021, 7, 30, 7, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'garg3133', 'type': 'User'}]","[{'commit_sha': '195086113d7b0d56b35709580ad2d0667f24310d', 'committer_username': 'garg3133', 'committer_name': 'Priyansh Garg', 'committer_email': 'priyanshgarg30@gmail.com', 'commit_date': datetime.datetime(2018, 6, 4, 18, 55, 14, tzinfo=datetime.timezone.utc)}]",Priyansh Garg,39924567,priyanshgarg30@gmail.com,User,,67,,43,178

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
43160685,zulip,zulip/zulip,Python,7618,21016,375,1134,60300,2470,28,802,"[{'id': 775028758, 'number': 20196, 'closed': None, 'created': datetime.datetime(2021, 11, 7, 18, 51, 45, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 85, 'deletions': 14, 'state': 'open'}, {'id': 775007104, 'number': 20195, 'closed': datetime.datetime(2021, 11, 7, 17, 50, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 7, 16, 41, 6, tzinfo=datetime.timezone.utc), 'time_taken': 4189.0, 'time_delta': '1:09:49', 'additions': 56, 'deletions': 35, 'state': 'closed'}, {'id': 772727762, 'number': 20153, 'closed': datetime.datetime(2021, 11, 3, 23, 50, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 3, 19, 26, 30, tzinfo=datetime.timezone.utc), 'time_taken': 15866.0, 'time_delta': '4:24:26', 'additions': 23, 'deletions': 3, 'state': 'closed'}, {'id': 741599979, 'number': 19819, 'closed': datetime.datetime(2021, 9, 28, 18, 36, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 23, 17, 38, 6, tzinfo=datetime.timezone.utc), 'time_taken': 435525.0, 'time_delta': '5 days, 0:58:45', 'additions': 21, 'deletions': 0, 'state': 'closed'}, {'id': 710818881, 'number': 19564, 'closed': datetime.datetime(2021, 11, 2, 0, 13, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 12, 24, 22, tzinfo=datetime.timezone.utc), 'time_taken': 7040977.0, 'time_delta': '81 days, 11:49:37', 'additions': 143, 'deletions': 67, 'state': 'closed'}, {'id': 707572285, 'number': 19553, 'closed': datetime.datetime(2021, 8, 31, 23, 53, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 18, 31, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1833731.0, 'time_delta': '21 days, 5:22:11', 'additions': 33, 'deletions': 37, 'state': 'closed'}, {'id': 704795814, 'number': 19518, 'closed': datetime.datetime(2021, 8, 5, 15, 54, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 15, 12, 11, tzinfo=datetime.timezone.utc), 'time_taken': 2511.0, 'time_delta': '0:41:51', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 701642570, 'number': 19461, 'closed': datetime.datetime(2021, 8, 9, 13, 38, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 17, 17, 35, tzinfo=datetime.timezone.utc), 'time_taken': 591651.0, 'time_delta': '6 days, 20:20:51', 'additions': 522, 'deletions': 33, 'state': 'closed'}, {'id': 699867394, 'number': 19436, 'closed': datetime.datetime(2021, 8, 3, 23, 18, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 29, 22, 0, 45, tzinfo=datetime.timezone.utc), 'time_taken': 436649.0, 'time_delta': '5 days, 1:17:29', 'additions': 37, 'deletions': 8, 'state': 'closed'}, {'id': 692869185, 'number': 19321, 'closed': datetime.datetime(2021, 7, 22, 19, 51, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 19, 19, 35, 3, tzinfo=datetime.timezone.utc), 'time_taken': 260161.0, 'time_delta': '3 days, 0:16:01', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 691036972, 'number': 19270, 'closed': datetime.datetime(2021, 7, 15, 21, 12, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 21, 8, 56, tzinfo=datetime.timezone.utc), 'time_taken': 213.0, 'time_delta': '0:03:33', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 690986549, 'number': 19266, 'closed': datetime.datetime(2021, 7, 22, 21, 25, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 19, 37, 46, tzinfo=datetime.timezone.utc), 'time_taken': 611283.0, 'time_delta': '7 days, 1:48:03', 'additions': 65, 'deletions': 3, 'state': 'closed'}, {'id': 678950155, 'number': 19034, 'closed': datetime.datetime(2021, 7, 2, 18, 29, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 11, 13, 3, tzinfo=datetime.timezone.utc), 'time_taken': 371810.0, 'time_delta': '4 days, 7:16:50', 'additions': 220, 'deletions': 23, 'state': 'closed'}, {'id': 676253554, 'number': 18966, 'closed': datetime.datetime(2021, 7, 28, 22, 46, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 12, 45, 3, tzinfo=datetime.timezone.utc), 'time_taken': 3060103.0, 'time_delta': '35 days, 10:01:43', 'additions': 1743, 'deletions': 9, 'state': 'closed'}, {'id': 676029933, 'number': 18963, 'closed': datetime.datetime(2021, 6, 23, 15, 3, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 7, 36, 56, tzinfo=datetime.timezone.utc), 'time_taken': 26807.0, 'time_delta': '7:26:47', 'additions': 0, 'deletions': 2, 'state': 'closed'}, {'id': 556988678, 'number': 17082, 'closed': datetime.datetime(2021, 6, 29, 18, 24, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 18, 18, 55, 54, tzinfo=datetime.timezone.utc), 'time_taken': 13994919.0, 'time_delta': '161 days, 23:28:39', 'additions': 43, 'deletions': 0, 'state': 'closed'}, {'id': 547348230, 'number': 16992, 'closed': datetime.datetime(2021, 7, 6, 23, 38, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 31, 12, 36, 41, tzinfo=datetime.timezone.utc), 'time_taken': 16196497.0, 'time_delta': '187 days, 11:01:37', 'additions': 85, 'deletions': 20, 'state': 'closed'}, {'id': 545825364, 'number': 16968, 'closed': datetime.datetime(2020, 12, 28, 22, 40, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 27, 15, 59, 6, tzinfo=datetime.timezone.utc), 'time_taken': 110475.0, 'time_delta': '1 day, 6:41:15', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 486022907, 'number': 16341, 'closed': datetime.datetime(2020, 9, 14, 4, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 12, 20, 59, 43, tzinfo=datetime.timezone.utc), 'time_taken': 111737.0, 'time_delta': '1 day, 7:02:17', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 480186078, 'number': 16301, 'closed': datetime.datetime(2020, 9, 21, 22, 44, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 4, 22, 7, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1470994.0, 'time_delta': '17 days, 0:36:34', 'additions': 60, 'deletions': 13, 'state': 'closed'}, {'id': 473034519, 'number': 16195, 'closed': datetime.datetime(2020, 8, 25, 23, 34, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 8, 31, 47, tzinfo=datetime.timezone.utc), 'time_taken': 54192.0, 'time_delta': '15:03:12', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 470317295, 'number': 16167, 'closed': datetime.datetime(2020, 8, 24, 19, 22, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 17, 41, 38, tzinfo=datetime.timezone.utc), 'time_taken': 438040.0, 'time_delta': '5 days, 1:40:40', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 465026142, 'number': 16074, 'closed': datetime.datetime(2024, 3, 14, 0, 29, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 8, 12, 26, 20, tzinfo=datetime.timezone.utc), 'time_taken': 113486577.0, 'time_delta': '1313 days, 12:02:57', 'additions': 130, 'deletions': 64, 'state': 'closed'}, {'id': 455112754, 'number': 15876, 'closed': datetime.datetime(2020, 7, 29, 0, 7, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 13, 16, 26, tzinfo=datetime.timezone.utc), 'time_taken': 557460.0, 'time_delta': '6 days, 10:51:00', 'additions': 51, 'deletions': 24, 'state': 'closed'}, {'id': 448703799, 'number': 15785, 'closed': datetime.datetime(2020, 7, 15, 7, 15, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 7, 35, 52, tzinfo=datetime.timezone.utc), 'time_taken': 85153.0, 'time_delta': '23:39:13', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 448383066, 'number': 15774, 'closed': datetime.datetime(2020, 7, 14, 7, 28, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 17, 10, 50, tzinfo=datetime.timezone.utc), 'time_taken': 51438.0, 'time_delta': '14:17:18', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 447905788, 'number': 15764, 'closed': datetime.datetime(2020, 7, 13, 19, 35, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 12, 14, 14, 1, tzinfo=datetime.timezone.utc), 'time_taken': 105667.0, 'time_delta': '1 day, 5:21:07', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
