pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
398336294,Rewrite matrix connector to use matrix-nio,"# Description

Rewrite of the matrix connector to use the matrix-nio library. This is a better supported matrix library and provides the possibility to add encryption support in a subsequent PR. This **is a breaking change** for anyone using the `ConnectorMatrix.connection` property as the type of this property has changed to be a `nio.AsyncClient` object, or anyone relying on the return types from the send methods.

---

This is _not_ tested with encryption enabled due to the fact that I was not able to install the olm library properly. But the connector is ported to nio and enabling encryption should be a much easier step now.

Please review and test a lot to ensure everything is working as expected. I have adapted all unit tests (and the are all passing) but I did't test all the opsdroid features because for some I don't know how they are supposed to work and I assume there a some I don't know of.


## Status
**READY**

## Type of change

- New feature (non-breaking change which adds functionality)


# Checklist:

- [x] I have performed a self-review of my own code
- [ ] I have made corresponding changes to the documentation (if applicable)
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
",True,1418,https://api.github.com/repos/opsdroid/opsdroid/pulls/1418,https://github.com/opsdroid/opsdroid/pull/1418,closed,758,320,5,23,19,74,2,0,"[{'name': 'breaking'}, {'name': 'connector/matrix'}]",2020-04-03 19:02:02+00:00,2020-06-16 11:19:31+00:00,6365849.0,"73 days, 16:17:29","[{'comment_id': 418118555, 'comment_body': 'Was there a particular reason for removing this warning?', 'comment_created': datetime.datetime(2020, 4, 30, 16, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'SolarDrew', 'type': 'User'}, {'comment_id': 418119581, 'comment_body': ""As above, I feel like both of these warnings are useful for the user, but perhaps I'm missing something in how nio handles these fail cases for the api calls?"", 'comment_created': datetime.datetime(2020, 4, 30, 16, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'SolarDrew', 'type': 'User'}, {'comment_id': 418597904, 'comment_body': 'Nope, added them in again', 'comment_created': datetime.datetime(2020, 5, 1, 15, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'awesome-michael', 'type': 'User'}, {'comment_id': 423230428, 'comment_body': 'Here it should be a room specific name. Right now its just returning the default username.', 'comment_created': datetime.datetime(2020, 5, 11, 18, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 423230476, 'comment_body': ""The exception is being dealt with within the try clause itself, plus I don't think the try clause would actually throw any exceptions at all."", 'comment_created': datetime.datetime(2020, 5, 11, 18, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 423230503, 'comment_body': 'The change above also makes this part redundant.', 'comment_created': datetime.datetime(2020, 5, 11, 18, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 423230600, 'comment_body': ""Is there a reason for removing the filter? I think it's important to only get events that we can handle."", 'comment_created': datetime.datetime(2020, 5, 11, 18, 19, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 423235356, 'comment_body': 'I think it would be better to not hard code the device name, maybe we could use the nick from the config instead', 'comment_created': datetime.datetime(2020, 5, 11, 18, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 423657465, 'comment_body': 'I think this is a sane default, but we might want to consider allowing it to be configured. In general with bot accounts I think you are only likely to have the single device.', 'comment_created': datetime.datetime(2020, 5, 12, 11, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 423703400, 'comment_body': 'Yeah that seems like a better way to do it', 'comment_created': datetime.datetime(2020, 5, 12, 12, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 428232500, 'comment_body': ""I think you're right. I'll remove the exception"", 'comment_created': datetime.datetime(2020, 5, 20, 18, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'awesome-michael', 'type': 'User'}, {'comment_id': 428264239, 'comment_body': ""I'm sorry I can't find anything in the matrix spec how room specific displaynames can be set or read. Can you point me to the corresponding part of the documentation?"", 'comment_created': datetime.datetime(2020, 5, 20, 19, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'awesome-michael', 'type': 'User'}, {'comment_id': 428564520, 'comment_body': ""I dont think there's a direct way to do this. Seems like you'll have to match the mxid with the usernames in the list returned by [this function](https://matrix-nio.readthedocs.io/en/latest/nio.html?highlight=members#nio.AsyncClient.joined_members) and get the corresponding displayname. "", 'comment_created': datetime.datetime(2020, 5, 21, 10, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 428798487, 'comment_body': 'I\'m having trouble to use the predefined filters with their IDs because nio always returns a ""Invalid filter ID"". The homeserver accepts the generated filter IDs. Maybe its a bug in nio. Should I just send the filters with every sync request or wait until the problem is solved?', 'comment_created': datetime.datetime(2020, 5, 21, 17, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'awesome-michael', 'type': 'User'}, {'comment_id': 429915763, 'comment_body': ""I'm unable to reproduce this error. Instead there was a problem with the `filter_json` property, it needs to be serialized into json in this case, passing it directly results in a bad request. Maybe that's why the filter ID isn't being recognized? because it works properly when the filter is serialized."", 'comment_created': datetime.datetime(2020, 5, 25, 12, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 429924369, 'comment_body': 'I also had the problem with `filter_json` but ignored it for the moment because the serialized json made a problem in the listen function. I tried a lot with the first filter but always ran in the ""Invalid filter ID"" response from the homeserver. How did you serialize the json?', 'comment_created': datetime.datetime(2020, 5, 25, 13, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'awesome-michael', 'type': 'User'}, {'comment_id': 429933798, 'comment_body': '`json.dumps()` worked for me and I\'m not getting ""invalid filter ID"" with `first_filter_id` either', 'comment_created': datetime.datetime(2020, 5, 25, 13, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 431833549, 'comment_body': '```suggestion\r\n        path = f""/_matrix/client/r0/user/{self.mxid}/filter""\r\n```', 'comment_created': datetime.datetime(2020, 5, 28, 13, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 431833750, 'comment_body': '```suggestion\r\n        headers = {""Authorization"": ""Bearer {api.token}""}\r\n```', 'comment_created': datetime.datetime(2020, 5, 28, 13, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 431850546, 'comment_body': 'we seem to have regressed #1396 here?', 'comment_created': datetime.datetime(2020, 5, 28, 13, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 431851265, 'comment_body': ""This should be fatal, we can't continue if we haven't logged in?\r\n```suggestion\r\n            raise login_response\r\n```"", 'comment_created': datetime.datetime(2020, 5, 28, 13, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 431852560, 'comment_body': ""I am not sure if failing to join the configured rooms should be fatal or not, but if we think it should then we should raise here, and if we don't we should be using the logger and not `print()`."", 'comment_created': datetime.datetime(2020, 5, 28, 13, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 431853270, 'comment_body': '```suggestion\r\n            _LOGGER.error(f""Error during initial sync: {response.message}"")\r\n```', 'comment_created': datetime.datetime(2020, 5, 28, 13, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 431854236, 'comment_body': 'should use logger here as above.', 'comment_created': datetime.datetime(2020, 5, 28, 13, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 431857076, 'comment_body': 'With this as return, if a sync fails we stop listening by returning from this function. We should keep some of the specific error code handling behaviour from below, and use continue to keep listening rather than return.', 'comment_created': datetime.datetime(2020, 5, 28, 13, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 431859542, 'comment_body': 'I think this is a behaviour change. Before if this lookup failed we would fall back to the profile, not the mxid.', 'comment_created': datetime.datetime(2020, 5, 28, 14, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 431862192, 'comment_body': 'I am not sure if this is better or not :thinking: take it or leave it.\r\n```suggestion\r\n            nick = list(filter(lambda id: id == mxid, res.members))\r\n            if nick:\r\n                return nick[0].display_name\r\n```', 'comment_created': datetime.datetime(2020, 5, 28, 14, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 431866614, 'comment_body': 'I think that `.exception` uses the current stacktrace when inside an `except:` block. I am not sure how you should pass the exception object to it in this case.\r\n\r\nAlso I think you need to use `_LOGGER` not `logging` to make sure the logging line knows the calling scope.', 'comment_created': datetime.datetime(2020, 5, 28, 14, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 431867108, 'comment_body': 'should be a logger call at error.', 'comment_created': datetime.datetime(2020, 5, 28, 14, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 431868041, 'comment_body': ""The previous behaviour here seems wrong. I think we should raise the exception unless it's a `409` in which case we should log and then silently continue."", 'comment_created': datetime.datetime(2020, 5, 28, 14, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 431869885, 'comment_body': 'As above we should throw the exception if we don\'t understand it.\r\n```suggestion\r\n        if isinstance(res, nio.RoomInviteError):\r\n            if res.status_code == 403 and ""is already in the room"" in res.message:\r\n                _LOGGER.info(\r\n                    f""{invite_event.user_id} is already in the room, ignoring.""\r\n                )\r\n            else:\r\n                raise res\r\n```', 'comment_created': datetime.datetime(2020, 5, 28, 14, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 431952369, 'comment_body': 'In my opinion the previous version is more understandable ... so I would leave it as is', 'comment_created': datetime.datetime(2020, 5, 28, 16, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'awesome-michael', 'type': 'User'}, {'comment_id': 431954093, 'comment_body': 'Will opsdroid stop running if an exception is raised here? Then I think we should just log because joining the other rooms may work well.', 'comment_created': datetime.datetime(2020, 5, 28, 16, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'awesome-michael', 'type': 'User'}, {'comment_id': 432381383, 'comment_body': ""I agree, I think it's worth favouring readability over efficiency here."", 'comment_created': datetime.datetime(2020, 5, 29, 9, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'SolarDrew', 'type': 'User'}, {'comment_id': 432383617, 'comment_body': 'Since this ""if error: log error, return"" structure is coming up a lot here, I wonder if it\'s worth defining a function or a context manager to wrap it, just to make the code in the connector a little tidier? Probably not worth worrying about for this PR but something to consider going forward.', 'comment_created': datetime.datetime(2020, 5, 29, 10, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'SolarDrew', 'type': 'User'}, {'comment_id': 432389133, 'comment_body': ""The test failures seem to be suggesting that `nio.RoomInvitationError` doesn't inherit from `Exception`, and it's causing problems. Is this the correct class to use here?"", 'comment_created': datetime.datetime(2020, 5, 29, 10, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'SolarDrew', 'type': 'User'}, {'comment_id': 432701049, 'comment_body': ""seems that all the nio ErrorResponse classes don't inherit from `Exception`. Should I replace those passages with something like\r\n```\r\nif isinstance(res, nio.RoomInviteError):\r\n  _LOGGER.error(res.message)\r\n  raise\r\n```\r\n?"", 'comment_created': datetime.datetime(2020, 5, 29, 19, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'awesome-michael', 'type': 'User'}, {'comment_id': 432842703, 'comment_body': 'I think that makes sense then. Are there other properties on those error classes which are worth putting in the log? http code etc?', 'comment_created': datetime.datetime(2020, 5, 30, 13, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 432889357, 'comment_body': 'oh wait that never got merged :facepalm: ', 'comment_created': datetime.datetime(2020, 5, 30, 21, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 432889418, 'comment_body': ""I feel like this should probably be at `error`? It's an action the user has specified in the config file?"", 'comment_created': datetime.datetime(2020, 5, 30, 21, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 433182144, 'comment_body': 'Is this `try` block still relevant with `nio`? It looks like the pattern with nio is to return errors rather than raise them, so I assume the best thing to do would be to remove this?', 'comment_created': datetime.datetime(2020, 6, 1, 11, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 433182426, 'comment_body': 'Is this type also returned if you get a http error like a 504, 522 etc? If not we should also handle those cases.', 'comment_created': datetime.datetime(2020, 6, 1, 11, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 433183050, 'comment_body': 'This should also log why.', 'comment_created': datetime.datetime(2020, 6, 1, 11, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 433331669, 'comment_body': 'afaik http errors are also returned as errors', 'comment_created': datetime.datetime(2020, 6, 1, 15, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'awesome-michael', 'type': 'User'}, {'comment_id': 434578309, 'comment_body': ""Yes I think it will. My preference would be to raise the error - some rooms may work but without further info from the user I think we have to assume that the bot needs to join every room in the config. (Some way to specify higher or lower priority of rooms might be a good way to address this, but that's a different PR.)"", 'comment_created': datetime.datetime(2020, 6, 3, 13, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'SolarDrew', 'type': 'User'}, {'comment_id': 434825451, 'comment_body': 'This needs to be an f-string', 'comment_created': datetime.datetime(2020, 6, 3, 20, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 435173909, 'comment_body': ""This isn't the right function. I think you need [`resolve_room_alias`](https://github.com/poljar/matrix-nio/blob/053be26ceca5a24422b471187f4d0e7d044807b5/nio/client/async_client.py#L1636)"", 'comment_created': datetime.datetime(2020, 6, 4, 11, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 435175139, 'comment_body': 'This is real picky, but it reads better this way round :grin: \r\n```suggestion\r\n                if e.membership == ""invite""\r\n```', 'comment_created': datetime.datetime(2020, 6, 4, 11, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 435175686, 'comment_body': '```suggestion\r\n                            # event = await self.connection.decrypt_event(event)\r\n                            continue\r\n```', 'comment_created': datetime.datetime(2020, 6, 4, 11, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 435176024, 'comment_body': 'I know this was like this before, but should this actually be return here? What happens if there is more than one event in the sync response?!\r\n\r\n(we probably need to open an issue for this and not worry about it in this PR).', 'comment_created': datetime.datetime(2020, 6, 4, 11, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 435177155, 'comment_body': 'I would move this up into the top if statement, and fall back to not-roomspecific nicks if room is `None`.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 6, 4, 11, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 435177239, 'comment_body': '```suggestion\r\n        if self.room_specific_nicks and roomid is not None:\r\n```', 'comment_created': datetime.datetime(2020, 6, 4, 11, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 435178834, 'comment_body': 'I think you can re-write this logic so that it drops out of the top `if self.room_specific_nicks` block to resolve the global profile nick, rather than rewriting this here.\r\n\r\n```suggestion\r\n            else:\r\n                for member in res.members:\r\n                    if member.user_id == mxid:\r\n                        return member.display_name\r\n```', 'comment_created': datetime.datetime(2020, 6, 4, 11, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 436263838, 'comment_body': ""I think you're right. The return seems not to be correct here"", 'comment_created': datetime.datetime(2020, 6, 6, 12, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'awesome-michael', 'type': 'User'}, {'comment_id': 436264666, 'comment_body': ""You're right"", 'comment_created': datetime.datetime(2020, 6, 6, 12, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'awesome-michael', 'type': 'User'}, {'comment_id': 436265085, 'comment_body': 'hmm not sure how to write this as every function has its own error class that is returned', 'comment_created': datetime.datetime(2020, 6, 6, 12, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'awesome-michael', 'type': 'User'}, {'comment_id': 436292632, 'comment_body': 'A sorry.. no the return is needed so yeah we should probably open an issue for that', 'comment_created': datetime.datetime(2020, 6, 6, 19, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'awesome-michael', 'type': 'User'}, {'comment_id': 436615260, 'comment_body': 'I am taking this as a generic example of a pattern here.\r\n\r\nPreviously before nio if a call like this errored, the error would raise and be caught in the logs as the outgoing send would fail. I am not sure what the best solution to this is, if all the `nio.XXXError` classes have a common parent we could write a decorator which catches them in the return and logs them at error?\r\n\r\n(We can probably punt this to an issue post merge)', 'comment_created': datetime.datetime(2020, 6, 8, 11, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 436618897, 'comment_body': '```suggestion\r\n                _LOGGER.error(f""Error during sync: {response.message} (status code {response.status_code})"")\r\n```', 'comment_created': datetime.datetime(2020, 6, 8, 11, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 436623622, 'comment_body': 'I tested this branch out locally and this caused all my syncs to fail:\r\n```suggestion\r\n        return int(resp_json[""filter_id""])\r\n```', 'comment_created': datetime.datetime(2020, 6, 8, 11, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 437644923, 'comment_body': '`event.source` doesn\'t have info about the actual membership change, this is an easy way to pass it to the event handler \r\n```suggestion\r\n                    if event.sender != self.mxid:\r\n                        # if isinstance(event, nio.MegolmEvent):\r\n                        # event is encrypted\r\n                        # event = await self.connection.decrypt_event(event)\r\n                        if event.source[""type""] == ""m.room.member"":\r\n                            event.source[""membership""] = event.membership\r\n                        return await self._event_creator.create_event(\r\n                            event.source, roomid\r\n                        )\r\n```\r\n\r\nThis would mean changing [this line](https://github.com/opsdroid/opsdroid/pull/1418/files#diff-9d595b55ddf1583136a938382e129321R185) in `create_events.py` to this\r\n```\r\nif event[""membership""] == ""join"":\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 18, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 437647356, 'comment_body': 'This parameter needs to be a dict \r\n```suggestion\r\n        return await self.connection.room_put_state(\r\n            name_event.target, ""m.room.name"", {""name"": name_event.name}\r\n        )\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 18, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 437648976, 'comment_body': 'Same here\r\n```suggestion\r\n        return await self.connection.room_put_state(\r\n            desc_event.target, ""m.room.topic"", {""topic"": desc_event.description}\r\n        )\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 18, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 437652875, 'comment_body': '`room_context.event` returns a `RoomMessageText` instead of a dict\r\n```suggestion\r\n        event_json = room_context.event.source\r\n```\r\n\r\nAlso [down here](https://github.com/opsdroid/opsdroid/pull/1418/files#diff-9d595b55ddf1583136a938382e129321R122) in `_file_kwargs()` the function is not part of nio, instead the url can be retrieved like so \r\n```\r\nurl = event[""content""][""url""]\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 19, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 438380375, 'comment_body': 'But doesn\'t `event.source[""content""][""membership""]` hold the information?', 'comment_created': datetime.datetime(2020, 6, 10, 20, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'awesome-michael', 'type': 'User'}, {'comment_id': 438381954, 'comment_body': ""Also I don't fully understand the use case here so I wasn't able to write a test for that bit"", 'comment_created': datetime.datetime(2020, 6, 10, 20, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'awesome-michael', 'type': 'User'}, {'comment_id': 438387916, 'comment_body': '> But doesn\'t `event.source[""content""][""membership""]` hold the information?\r\n\r\nNo the content dict isn\'t part of `event.source` anymore', 'comment_created': datetime.datetime(2020, 6, 10, 20, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 438645215, 'comment_body': ""The event creator really needs the content dict, as it's supposed to set it as `raw_event` on the generated `opsdroid.Event`. Maybe it would be better to pass that through?"", 'comment_created': datetime.datetime(2020, 6, 11, 9, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 438646935, 'comment_body': 'Am I correct in assuming this will be the `mxc://` url? This needs to be converted into a https URL, for people to be able to interact with it in a sensible way.', 'comment_created': datetime.datetime(2020, 6, 11, 9, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 438650159, 'comment_body': 'Which is what that function used to do.', 'comment_created': datetime.datetime(2020, 6, 11, 9, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 438652847, 'comment_body': 'I think you need https://github.com/poljar/matrix-nio/blob/master/nio/client/async_client.py#L768 :smile: ', 'comment_created': datetime.datetime(2020, 6, 11, 9, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 438742166, 'comment_body': 'You mean opsdroid expects `raw_event` to have a `content` dict? \r\nIn that case we could do its as \r\n```\r\nevent.source[""content""] = event.content\r\n```\r\nOr does content need more stuff in it?', 'comment_created': datetime.datetime(2020, 6, 11, 12, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 438743590, 'comment_body': 'I mean `raw_event` should be the content dict. What is `event.source` and `event.content`? I am not really familiar with these nio classes.', 'comment_created': datetime.datetime(2020, 6, 11, 12, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 438814846, 'comment_body': ""I think source is the info about the response and content is the actual body of the event. In other nio event classes content is part of source but not in this case, not sure why. For all the other events we've been passing source as raw_event since that's where the stuff like sender and event type is"", 'comment_created': datetime.datetime(2020, 6, 11, 14, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}]","[{'commit_sha': '67aa9b15b4c20ea40cca9fff77f08a606b251e0c', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acd0fb0f22281ec9670137f5a693339b07aa4bc8', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b959d7916b11a2c2db97559e1084c648ac809339', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33aa93996ae0621da9cc40905f6ff5302ebefb95', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08cfedceb13ed9a66a952345f678dc1a067ffa78', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cc0eb9f1a898086f812e1cc644306f103c46a51', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57c6e3cb5941ae41d1e4f996d1810c800ba2609f', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92a3ac7c75dbafa1f783192e6787ba42a8f8599e', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88f8fedcf6411f611d054ef577009e20fe76a708', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aef48544f804ec3362d9b21da608e2f5364565db', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdcafed61a840bed909835d5245412813be51559', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3817f232f6f35857173382731d05304d5c60fc31', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19682e4d546bc7bf716f559b9858f0b5ce8f98f0', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d45fd704c73170e623c72255213a50e49925005', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee9c52194bb31d6cbf0f3fc9daf215b480000e6a', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57575f71ca615cf7b5138da8b3fe030c93ffa409', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8441340d9d7c3011ded35e7a594165b8757beb98', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5115347235c5bd175abf55cfc6fa5cee3ab2b87', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff74cae2ceb42db429535503c948867bdda6ac32', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc0179b0077806d8202f4d860a60dec6934c8838', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd0fb6074fdb0f6f7409c6aef9ff6bf93090fe4f', 'committer_username': 'awesome-michael', 'committer_name': 'Michael Albert', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 9, 8, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '208b9e11110106b0e5adffc01c15d2699c4e69d9', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15145dde8fc0dfc01dc37b33b556995699fa289a', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}]",Michael Albert,37796947,,User,,4,,0,6
435324121,Fix File/Image and membership events in Matrix Connector,"# Description

Sending files/images and receiving membership events works. Updated matrix-nio version and removed redundant ClientConfig

Part of fixes listed in  #1529 

## Status
**UNDER DEVELOPMENT** 

## Type of change

- Bug fix (non-breaking change which fixes an issue)

# Checklist:

- [x] I have performed a self-review of my own code
- [ ] I have made corresponding changes to the documentation (if applicable)
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
",True,1538,https://api.github.com/repos/opsdroid/opsdroid/pulls/1538,https://github.com/opsdroid/opsdroid/pull/1538,closed,80,13,3,11,2,7,1,0,[{'name': 'bug'}],2020-06-16 16:14:05+00:00,2020-06-22 19:28:06+00:00,530041.0,"6 days, 3:14:01","[{'comment_id': 442734735, 'comment_body': ""I am not very familiar with the `io` classes, but what is `BufferedReader` providing here? Am I correct in thinking that `BytesIO` already provides a file-like input and that's all we need to pass to `nio`?"", 'comment_created': datetime.datetime(2020, 6, 19, 9, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 442744700, 'comment_body': ""I don't think this change is correct. The form of the content dict here is just as described in the spec: https://matrix.org/docs/spec/client_server/r0.6.0#m-image unless I am missing something?"", 'comment_created': datetime.datetime(2020, 6, 19, 9, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 442744764, 'comment_body': 'same here.', 'comment_created': datetime.datetime(2020, 6, 19, 9, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 442758306, 'comment_body': 'BytesIO is a file-like but the upload function expects `TextIOBase, BufferedReader, BufferedRandom, FileIO, AsyncBufferedReader or AsyncTextIOWrapper` and `bytes` cant be directly casted to these types', 'comment_created': datetime.datetime(2020, 6, 19, 10, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 442775429, 'comment_body': 'Oh, what types it actually supports in `io` are really bizzare to me, I might ask in the nio room.\r\n\r\nIt might actually be easier to pass it a callable, which returns the bytes directly, I think this will work: `upload_file = lambda x, y: upload_file`.', 'comment_created': datetime.datetime(2020, 6, 19, 11, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 443447918, 'comment_body': '```suggestion\r\nmatrix-nio==0.14.0\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 9, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 443760072, 'comment_body': 'assert the type of `returned_message` here?', 'comment_created': datetime.datetime(2020, 6, 22, 18, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}]","[{'commit_sha': '09d9295fdea37c0f6432d8a118dae678bc37a161', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '849f43b634f97593457e022d6d2528ff7f82cd2f', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25602472761ab961a93f891dd7ad4b76a468e8d5', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29a785ce81c14855f010453da8d0b6358bfb32ce', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3ea522f8b7959c7adec8990b1e6128cccb4573b', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3ebe07d4437ed4322a9106e2ffe81a10813b05c', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec9d6646de4b37deb23efbe2e8150bd23aac1f6d', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f04e452c412db6760be423948bf6799556316560', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68f1f05a6f4ec09e2ecf222043271533ea2161cc', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b477bc5a334417e01f5f15eefc01b8e39eca727', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9718c55db32053ab708daf23bbe49b81be71bfd3', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}]",Tyagraj Desigar,43397375,,User,,20,,8,5
438714812,Add support for end to end encryption in Matrix connector,"# Description

Adds steps needed to send and receive encrypted messages through matrix. The listen method basically mimics `AsyncClient.sync_forever`. Few additions to the configuration which we could find alternatives for. 

Fixes #992 and some parts of #1529 


## Status
 **UNDER DEVELOPMENT**


## TODO

- [x] Received encrypted events have slightly different formats, needs some tweaking
- [x] Config validation
- [x] `sync` sometimes returns older events which need to be filtered somehow, might be fixed by handling multiple events in a single sync
- [ ] Rarely, received events stop getting decrypted, possibly due to some conflict in the store, needs further investigation
- [ ] Add guide/script for installing libolm
- [x] Add tests
- [x] Add docs

## Type of change

- Breaking change (fix or feature that would cause existing functionality to not work as expected)
- This change requires a documentation update
- Documentation (fix or adds documentation)


## Checklist:

- [ ] I have performed a self-review of my own code
- [ ] I have made corresponding changes to the documentation (if applicable)
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
",True,1548,https://api.github.com/repos/opsdroid/opsdroid/pulls/1548,https://github.com/opsdroid/opsdroid/pull/1548,closed,760,349,12,36,3,39,1,0,[{'name': 'connector/matrix'}],2020-06-23 17:29:42+00:00,2020-07-30 10:33:41+00:00,3171839.0,"36 days, 17:03:59","[{'comment_id': 444778085, 'comment_body': ""Will it not happily create a new device on every restart if you don't set this? Why does it not work at all?"", 'comment_created': datetime.datetime(2020, 6, 24, 9, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 444839197, 'comment_body': 'Is this done for us elsewhere?', 'comment_created': datetime.datetime(2020, 6, 24, 11, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 444840317, 'comment_body': 'Should this not also be done as part of the initial sync? If so This could be moved into a helper method?', 'comment_created': datetime.datetime(2020, 6, 24, 11, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 444871913, 'comment_body': ""It would but if we use a newly created device the device verification wouldn't work since the store doesn't get populated"", 'comment_created': datetime.datetime(2020, 6, 24, 12, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 444872365, 'comment_body': 'The sync function decrypts the events', 'comment_created': datetime.datetime(2020, 6, 24, 12, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 445170901, 'comment_body': ""let's default this to [`DEFAULT_ROOT_PATH`](https://github.com/opsdroid/opsdroid/blob/6d7a256e88c88c2b7ae9524c5a3c41ebb5848d8a/opsdroid/const.py#L11)`/matrix` for now."", 'comment_created': datetime.datetime(2020, 6, 24, 21, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 445428007, 'comment_body': 'Why drop the default here?', 'comment_created': datetime.datetime(2020, 6, 25, 9, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 445428372, 'comment_body': 'Can we not default this safely? What happens if we try to create a device with a device id that already exists?', 'comment_created': datetime.datetime(2020, 6, 25, 9, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 445451433, 'comment_body': 'Probably best to just drop this and we can come back to it.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 6, 25, 10, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 445452345, 'comment_body': 'leaving this as an instance variable is probably a good idea. I can see that this will likely become a flag in the future. Could be private (`_`)?', 'comment_created': datetime.datetime(2020, 6, 25, 10, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 445509554, 'comment_body': '`config.get()` would return `None` by default anyway', 'comment_created': datetime.datetime(2020, 6, 25, 12, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 445513933, 'comment_body': ""We need a device_id that belongs to the user, so we'd have to get it from the config anyway"", 'comment_created': datetime.datetime(2020, 6, 25, 12, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 446083647, 'comment_body': 'Just a single underscore is convention for private variables. `__thing__` is generally only used for python internal methods etc.\r\n```suggestion\r\n        self._ignore_unverified = True\r\n```', 'comment_created': datetime.datetime(2020, 6, 26, 9, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 446083874, 'comment_body': 'What do you mean when you say ""belongs to the user""? I am pretty sure that the HS will generate a random device ID if one isn\'t specified at login.', 'comment_created': datetime.datetime(2020, 6, 26, 9, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 446084306, 'comment_body': 'See the response section of https://matrix.org/docs/spec/client_server/r0.5.0#post-matrix-client-r0-login', 'comment_created': datetime.datetime(2020, 6, 26, 9, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 446084761, 'comment_body': 'In which case we should delete this block.', 'comment_created': datetime.datetime(2020, 6, 26, 9, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 446085992, 'comment_body': ""By the time we make it here if the user hasn't given a device id, we have one assigned to us. Does this get added to the store? Could we save it with the rest of the store and restore it next time opsdroid is started, this would at least reduce the amount of devices we create?"", 'comment_created': datetime.datetime(2020, 6, 26, 9, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 446530203, 'comment_body': ""I couldn't find a way to access the store through nio without first logging in and doing so assigns a new device_id\r\n"", 'comment_created': datetime.datetime(2020, 6, 27, 14, 7, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 446534740, 'comment_body': ""What I meant was if we were to use a device id that already exists as a default, that id would have to be one that belongs to the user's account."", 'comment_created': datetime.datetime(2020, 6, 27, 14, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 448406996, 'comment_body': '```suggestion\r\n        self.device_id = config.get(""device_id"", ""opsdroid"")\r\n```', 'comment_created': datetime.datetime(2020, 7, 1, 14, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 448407402, 'comment_body': ""why sqlite and not default? What's the advantages / disadvantages of both?"", 'comment_created': datetime.datetime(2020, 7, 1, 14, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 448407615, 'comment_body': '```suggestion\r\n            store_name=""opsdroid"",\r\n```\r\nwhy not name this something like this?', 'comment_created': datetime.datetime(2020, 7, 1, 14, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 448407842, 'comment_body': 'Why? Why not leave it there for next time?', 'comment_created': datetime.datetime(2020, 7, 1, 14, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 450254763, 'comment_body': '```suggestion\r\n            response, file_dict = response\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 14, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451732371, 'comment_body': ""does this store have any value if e2ee isn't enabled?"", 'comment_created': datetime.datetime(2020, 7, 8, 18, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451733373, 'comment_body': 'Does this break if encryption is disabled? If not can we just continue calling it?', 'comment_created': datetime.datetime(2020, 7, 8, 18, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451735738, 'comment_body': ""nope it doesn't get created at all"", 'comment_created': datetime.datetime(2020, 7, 8, 18, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 451736602, 'comment_body': 'i dont think it breaks anything', 'comment_created': datetime.datetime(2020, 7, 8, 18, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 451740030, 'comment_body': 'then do we need this conditional?', 'comment_created': datetime.datetime(2020, 7, 8, 18, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451740141, 'comment_body': 'We might as well save the if then?', 'comment_created': datetime.datetime(2020, 7, 8, 18, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 452104858, 'comment_body': 'if we pass a non-empty string it tries to load the store which then errors out', 'comment_created': datetime.datetime(2020, 7, 9, 9, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 452228489, 'comment_body': 'Only if encryption is disabled?', 'comment_created': datetime.datetime(2020, 7, 9, 13, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 452263569, 'comment_body': 'yeah', 'comment_created': datetime.datetime(2020, 7, 9, 14, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 453178060, 'comment_body': 'These should be a fixture so they are recreated new for each test.', 'comment_created': datetime.datetime(2020, 7, 11, 9, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 453178478, 'comment_body': 'oh my this list of mocks has got out of control :rofl: \r\n\r\nDo you fancy refactoring this to use the mocker fixture? You can make fixtures which use mocker to mock things or groups of things and then pass them to tests, so for this you could mock all the e2ee related things in one fixture like this:\r\n\r\n```python\r\ndef e2ee_mock(mocker):\r\n    mocker.patch(api_string.format(""send_to_device_messages""))\r\n    ....\r\n```\r\nthe only thing with this approach is returning the patched object for later assertions, maybe a dict of `{\'api_string\': patched}` would be the best way to handle that.\r\n\r\nOr if that\'s a little too hacky, you could at least use the mocker fixture in this test to move all of these from being context managers to function calls which would make it read a lot nicer.', 'comment_created': datetime.datetime(2020, 7, 11, 9, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 453178629, 'comment_body': 'Again needs to be a fixture (probably could be the same fixture).', 'comment_created': datetime.datetime(2020, 7, 11, 9, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 453178729, 'comment_body': '@jacobtomlinson We have had to do some hacks here to test the e2ee functionality while waiting for upstream to provide builds. Do you have thoughts on this and the changes to the github actions config file?', 'comment_created': datetime.datetime(2020, 7, 11, 9, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 458021960, 'comment_body': 'This feels very matrix specific. Does this mean I will have to run something like `tox -e py38-noe2e` when testing locally?', 'comment_created': datetime.datetime(2020, 7, 21, 11, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 458034666, 'comment_body': 'It seems to be a limitation of the gh-actions tox plugin. I have got to what I think is a working compromise, where on the CI we run `noe2e` on windows to override the behaviour of the tox plugin, but locally all `py3x` commands should work just fine.', 'comment_created': datetime.datetime(2020, 7, 21, 11, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}]","[{'commit_sha': '933b8439de65dcb114c031f973737bcfc0ae9e60', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '615b9df432282eb9453321356b2c1d952a8d6e2d', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9098b97f99ce6a679e163af058011db0a8664b7', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '340a6688b76e4ad940e8e3860be02eed9e246900', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80e2fdcae0a0380c70780ac17fcf4ec273c114dc', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8939dc7fcefcce6b72099d79715b77dc07b70c67', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3434ddcf13a67fe28f0b097e8259dcc8e8cd6b15', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77b9e6fc02d2292fc2141292d04b1a17fcba00cd', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ab28788af3e504b58f449f1468b7702e40a41fa', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8755961ed592ebd6039d8e767582976167af8ff', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be7689f2c2cb7a6ac485841f07f56bfe1c7da73d', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebe9c0450eb4f875fa087ae1ce70f53fe8aa29a7', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fee466471720793d06aa9b488f2c94bb1a15457f', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '002fe4a5b59890b6807ea949ff737f797f5ecd73', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d7b600f0085337a69c219f785a01b1f50c2becd', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e4d3592ebb4214147d8836498515982a510012e', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '615048a4eb03e9ee884f424cb936922142696e21', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '116dc38b2ea6d1ca77ed1f57e779e51a27f480f8', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '351e9aac1a82cb7800958dd1fd9ad20ef79dac7d', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7ccae3a2e56354f36b38cd0bd1c02990169675c', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca995187b80565210f1472e27855840cc01b26d1', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ccc760d9664078df8f22f81abf6bd183f722d58', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '598f7d284372c2e9f878cf55d8db9035562379c6', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d53a78dde77c418297374244daa87c9ec43969a', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd06a5b0c435d75923868b02d5e1626cca0444128', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '825baa0549135d4d5846b81c65241c4b51fd52b1', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8bce97395fef38aa4bcde5a4a1bf4d9b0466095', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76f7b88ab67677ec28dcefa7c6810f6e75a90d30', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70222bb2417753ea541774cc92734dd34d309be0', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad4314be21ae974ad6a9f9116667c431faf04800', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ffb1172ba6b2ecb7ab204ceddc66ea5c3b33637', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecd9b1a18ef5752635d43f127c4b63dddefbb825', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ab11a1d81ec151457e9c69711ea0586a6753389', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d708227965749b950e0446b358a05f37ef5e23a', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8abbbb01ac1a7dbe8dd524cbc29529c029fc8c9f', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75fd4d9b29c89059fed0905705fa59213682a0cc', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}]",Tyagraj Desigar,43397375,,User,,20,,8,5
445663225,Add optional dependencies via extra_requires to reduce number of dependencies for a simple installation,"# Description

Moved most of the params for `setuptools.setup()` to `setup.cfg` so we can start adding optional dependencies for each module in the form of extras. An `[all]` extra is created in setup.py which has deps for all the modules. Moved test deps to `tox.ini` which uses the `[all]` extra


## Status
**UNDER DEVELOPMENT**

## TODO
- [x] Add extras for each module
- [x] Add grouped extras

## Type of change

- Breaking change (fix or feature that would cause existing functionality to not work as expected)
- This change requires a documentation update


# Checklist:

- [x] I have performed a self-review of my own code
- [x] I have made corresponding changes to the documentation (if applicable)
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
",True,1567,https://api.github.com/repos/opsdroid/opsdroid/pulls/1567,https://github.com/opsdroid/opsdroid/pull/1567,closed,203,131,11,16,7,44,2,0,"[{'name': 'enhancement'}, {'name': 'breaking'}]",2020-07-07 20:39:34+00:00,2020-08-24 10:33:35+00:00,4110841.0,"47 days, 13:54:01","[{'comment_id': 451140214, 'comment_body': ""I think these should be an extra named `test` or similar? (Which isn't installed by `all`). @jacobtomlinson do you agree?"", 'comment_created': datetime.datetime(2020, 7, 7, 21, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451144185, 'comment_body': 'This is matrix.', 'comment_created': datetime.datetime(2020, 7, 7, 21, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451144302, 'comment_body': 'this is also matrix.', 'comment_created': datetime.datetime(2020, 7, 7, 21, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451144536, 'comment_body': 'Do we actually have a runtime requirement on setuptools?', 'comment_created': datetime.datetime(2020, 7, 7, 21, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451144999, 'comment_body': 'I *think* this is also matrix?', 'comment_created': datetime.datetime(2020, 7, 7, 21, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451145172, 'comment_body': 'matcher-parse', 'comment_created': datetime.datetime(2020, 7, 7, 21, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451145281, 'comment_body': 'connector-mattermost I assume', 'comment_created': datetime.datetime(2020, 7, 7, 21, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451145504, 'comment_body': 'database-sqlite', 'comment_created': datetime.datetime(2020, 7, 7, 21, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451145573, 'comment_body': 'database-redis ??', 'comment_created': datetime.datetime(2020, 7, 7, 21, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451145711, 'comment_body': 'connector-slack?!', 'comment_created': datetime.datetime(2020, 7, 7, 21, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451145823, 'comment_body': 'connector-slack', 'comment_created': datetime.datetime(2020, 7, 7, 21, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451145905, 'comment_body': 'matcher-watson', 'comment_created': datetime.datetime(2020, 7, 7, 21, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451146115, 'comment_body': 'connector-webexteams ?', 'comment_created': datetime.datetime(2020, 7, 7, 21, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451146177, 'comment_body': 'matcher-regex', 'comment_created': datetime.datetime(2020, 7, 7, 21, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451148231, 'comment_body': 'I would suggest we put this at the top', 'comment_created': datetime.datetime(2020, 7, 7, 21, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451165782, 'comment_body': 'Are you sure? seems to be part of the events class of opsdroid', 'comment_created': datetime.datetime(2020, 7, 7, 21, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 451166188, 'comment_body': 'what do you think about keeping this, regex and cron as default', 'comment_created': datetime.datetime(2020, 7, 7, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 451166781, 'comment_body': 'this also seems to be in the base events class only', 'comment_created': datetime.datetime(2020, 7, 7, 21, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 451168394, 'comment_body': 'I thought since all tests are gonna be using tox anyway this would reduce some clutter in setup.py', 'comment_created': datetime.datetime(2020, 7, 7, 22, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 451172198, 'comment_body': ""Doesn't look like it, same with websockets i think. The websockets connector uses aiohttp"", 'comment_created': datetime.datetime(2020, 7, 7, 22, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 451465820, 'comment_body': ""You don't have to run the tests in tox, so it's good to provide an easy way for people to install the requirements outside of tox."", 'comment_created': datetime.datetime(2020, 7, 8, 11, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451466037, 'comment_body': 'I could well be wrong.', 'comment_created': datetime.datetime(2020, 7, 8, 11, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451466363, 'comment_body': 'I would be ok with that, be interested to know what the others think.', 'comment_created': datetime.datetime(2020, 7, 8, 11, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 451468401, 'comment_body': ""Maybe it would be best to do this with the `common` group @jacobtomlinson mentioned in chat, so it's possible to have a very very light opsdroid (maybe just using the webhook connector for instance) but we make all our default installation documentation be `pip install opsdroid[common]`."", 'comment_created': datetime.datetime(2020, 7, 8, 11, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 464901301, 'comment_body': 'Removing this should fix the build\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 4, 8, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 466302881, 'comment_body': 'I assume we want the docker file to install all the deps? If we do line 17 below needs updating to be `.[all]`', 'comment_created': datetime.datetime(2020, 8, 6, 9, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 466349030, 'comment_body': 'Yeah the docker image should have everything. Maybe we should also have a slim image which just installs the core too.', 'comment_created': datetime.datetime(2020, 8, 6, 11, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 472326733, 'comment_body': 'it would probably be good to move these into a ""docs"" requirement, and use that over ""test"" for read the docs. Installing less things on RTD means a faster build.', 'comment_created': datetime.datetime(2020, 8, 18, 16, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 472327076, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 18, 16, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 472358976, 'comment_body': 'so the test should just use these 4?', 'comment_created': datetime.datetime(2020, 8, 18, 17, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 472405469, 'comment_body': 'no test should be all the others, and these should be docs.', 'comment_created': datetime.datetime(2020, 8, 18, 18, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 472406835, 'comment_body': 'yea i meant the RTD CI check', 'comment_created': datetime.datetime(2020, 8, 18, 18, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 472407128, 'comment_body': 'seems like pytest also needs to be in docs?', 'comment_created': datetime.datetime(2020, 8, 18, 18, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 472439111, 'comment_body': 'looks like yeah', 'comment_created': datetime.datetime(2020, 8, 18, 19, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 472935389, 'comment_body': 'Can we link to the setup file here or something so users can discover all the available options?', 'comment_created': datetime.datetime(2020, 8, 19, 10, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 472935909, 'comment_body': 'Should the quickstart install common? Or just core?', 'comment_created': datetime.datetime(2020, 8, 19, 10, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 472987785, 'comment_body': 'So add a comment block on top of setup.cfg and link to the file here?', 'comment_created': datetime.datetime(2020, 8, 19, 12, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 472988558, 'comment_body': 'I think since its for getting the users set up and try out opsdroid quickly, common would be a better choice', 'comment_created': datetime.datetime(2020, 8, 19, 12, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 473021810, 'comment_body': 'Not necessarily. We just need to list all the options somewhere. The `options.extras_require` section in setup.cfg lists all of the options (other than the meta ones that you already listed in the docs). So it might be useful to link there.', 'comment_created': datetime.datetime(2020, 8, 19, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 473023338, 'comment_body': 'But common only gives Slack, Matrix and sqlite right? And the quickstart docs do not mention those at all.\r\n\r\nI expect many users will be unfamiliar with extra packages specified this way. Opsdroid it aimed at novice users. I just feel like this is unnecessary complexity at this point.\r\n\r\nPerhaps this is a sign that we should rethink the quickstart. What do we actually want to show people here?', 'comment_created': datetime.datetime(2020, 8, 19, 13, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 474635194, 'comment_body': ""It would be possible to parse the setup.cfg as part of the doc build and generate a list, but I don't know how well that would interact with rst/md.\r\n\r\nA link is probably a good place to start :)"", 'comment_created': datetime.datetime(2020, 8, 21, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474636208, 'comment_body': 'I am keen to get this merged and not degenerate it into a documentation refactor. How about we put `[all]` here for now and open an issue to improve it.', 'comment_created': datetime.datetime(2020, 8, 21, 11, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474693867, 'comment_body': ""Yep I'm happy with that."", 'comment_created': datetime.datetime(2020, 8, 21, 13, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 474694286, 'comment_body': 'Yup I would go for a link and improve it later', 'comment_created': datetime.datetime(2020, 8, 21, 13, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}]","[{'commit_sha': '7a03892dae65b837159c402b173c24e2f24887bb', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2933b79db85ccea280aa209d8b5c9257cd9449f0', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e595da1d5062db6f0df714f8938fbe4e13b4a63', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51232788d4fb1179d64da5941139ae33e22448fc', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d193d67cabaa1d3a8ce52bf57bf5dffc0545d08', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f94e4425c962c3008fe861e03c1aa8cab6a904b', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35ea3c5d80aa70f534a9cddeb6215f44226770aa', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27bae18c9dca5d8df25db51240c656e6260fd0ba', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e966c8130aba0807073cbaf47e94323bf437798c', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dc8a344411fddd5481f6b403b6d252696ee4e28', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '722cebaa157219c52e7b59fd77874dc876c39e3d', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6078d8bf8c580c0675215636516760c57194c5a', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd264b21c2ef208fdd552c7bb686ba0c70c1ff2fd', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da95909e65d68aea95cb568d9020d42c8b32856a', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a2021c1d1c23ad9a1ae6bfb699d0acf2196de57', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ca70cb2379defd0f9abfeefe0d25be30da43a0e', 'committer_username': 'Cadair', 'committer_name': 'Stuart Mumford', 'committer_email': 'stuart@cadair.com', 'commit_date': datetime.datetime(2012, 1, 30, 10, 33, 34, tzinfo=datetime.timezone.utc)}]",Tyagraj Desigar,43397375,,User,,20,,8,5
455173243,Add matrix database which stores memory in matrix room state,"# Description

Rewrote the [matrix database](https://github.com/SolarDrew/database-matrix) with matrix-nio. Added a delete method. Added encryption support for the database. When encrypting data is sent as encrypted room events in encrypted rooms whose event id is stored as state events. Added migration from opsdroid.database to dev.opsdroid.database event. Needs some more testing with encrypted rooms.


## Status
**UNDER DEVELOPMENT**


## Type of change


- New feature (non-breaking change which adds functionality)
- This change requires a documentation update
- Documentation (fix or adds documentation)


# Checklist:

- [x] I have performed a self-review of my own code
- [x] I have made corresponding changes to the documentation (if applicable)
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
",True,1587,https://api.github.com/repos/opsdroid/opsdroid/pulls/1587,https://github.com/opsdroid/opsdroid/pull/1587,closed,1632,3,8,32,1,80,2,0,"[{'name': 'enhancement'}, {'name': 'database'}]",2020-07-22 14:57:29+00:00,2020-09-01 17:02:21+00:00,3549892.0,"41 days, 2:04:52","[{'comment_id': 462911402, 'comment_body': 'We should probably expand this message to make it clear that `single_state_key` is a config option.\r\n\r\n```suggestion\r\n            raise ValueError(""When the matrix database is configured with single_state_key=False the value stored in the database must be a dict."")\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 10, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 462912709, 'comment_body': '```suggestion\r\n                f""Error putting key into matrix room {self.room_id}: {ori_data.message}({ori_data.status_code})""\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 10, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 465068692, 'comment_body': 'We should add a config schema like the [mongo database](https://github.com/opsdroid/opsdroid/blob/master/opsdroid/database/mongo/__init__.py) I am not sure how that exactly gets validated though.', 'comment_created': datetime.datetime(2020, 8, 4, 13, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 465068864, 'comment_body': '```suggestion\r\n        self.should_encrypt = config.get(""should_encrypt"", True)\r\n```', 'comment_created': datetime.datetime(2020, 8, 4, 13, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 465071487, 'comment_body': 'Could we use the connector `lookup_target` method here? https://github.com/opsdroid/opsdroid/blob/master/opsdroid/connector/matrix/connector.py#L294', 'comment_created': datetime.datetime(2020, 8, 4, 14, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 465073443, 'comment_body': 'We are going to get here at every startup of the database right, just that the content of the state event (once it\'s been replaced) would be empty. I think you need this to be:\r\n\r\n```suggestion\r\n                if event[""type""] == ""opsdroid.database"" and event[""content""]:\r\n```\r\n\r\nYou should also add a test that the new state event and the redaction isn\'t sent on a second run of this method.', 'comment_created': datetime.datetime(2020, 8, 4, 14, 2, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 465080866, 'comment_body': ""Haven't we already retrieved the value in `ori_data` above? Given the encryption support I can understand needing to replace the call to `room_get_state_event` with a call to `self.get` to handle the decryption, however, I think that we should only ever need a `self.get(key)` to do that?"", 'comment_created': datetime.datetime(2020, 8, 4, 14, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 465082343, 'comment_body': 'I don\'t think this is correct.\r\n\r\nIf `single_state_key` is False then we use `key` as the `state_key`, if `single_state_key` is True then we do `value = event[""content""][key]`?', 'comment_created': datetime.datetime(2020, 8, 4, 14, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 465082990, 'comment_body': ""I don't understand how state_key can ever be a dict."", 'comment_created': datetime.datetime(2020, 8, 4, 14, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 465088541, 'comment_body': ""this doesn't make any sense to me, if `single_state_key` is `False` then there can be an arbitrary number of keys in `value`."", 'comment_created': datetime.datetime(2020, 8, 4, 14, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 465090705, 'comment_body': 'surely this should be `key` not `sub_key`?', 'comment_created': datetime.datetime(2020, 8, 4, 14, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 465091665, 'comment_body': 'We probably need to at least log something here if we fail to decrypt this event because of missing keys. (i.e. it was sent a long time ago with a different instance of opsdroid that can no longer decrypt it etc)', 'comment_created': datetime.datetime(2020, 8, 4, 14, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 465096916, 'comment_body': 'I think there is an issue with the tests here, that we should only be making this call once, but from the implementation I have to assume we are making it more than once. (Same goes for all the tests)', 'comment_created': datetime.datetime(2020, 8, 4, 14, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 465098908, 'comment_body': 'I think we need a single_state_key variant of this test, with more than one item in the dict. (probably good to have a couple of tests with more than one item in the dict).', 'comment_created': datetime.datetime(2020, 8, 4, 14, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 465102127, 'comment_body': 'We should only be doing this if e2ee is enabled in the room and `should_encrypt` is set.\r\nI am pretty sure you can tell if a room is encrypted by the presence of a certain state event.\r\n\r\n```suggestion\r\n        if self.room_is_encrypted(self.room) and self.should_encrypt:\r\n```', 'comment_created': datetime.datetime(2020, 8, 4, 14, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474652477, 'comment_body': 'This example required you to do `opsdroid.get_database(""matrix"")` right? If so it should have a complete example here.', 'comment_created': datetime.datetime(2020, 8, 21, 12, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474652753, 'comment_body': 'Probably keeping this example simple is a good idea?\r\n\r\n```suggestion\r\n    single_state_key: True\r\n```', 'comment_created': datetime.datetime(2020, 8, 21, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474656706, 'comment_body': ""I don't understand why this is an error condition? What happens if there isn't anything in the state yet? i.e. this is the first put in a new room?"", 'comment_created': datetime.datetime(2020, 8, 21, 12, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474659856, 'comment_body': 'I don\'t understand why key can ever be a dict?\r\n\r\nIf we are using single state key then we should have a situation where we have a state event which has the type `""dev.opsdroid.database""` and the state key we are using (probably `""""`), and then this `get` method returns `content[key]`.\r\n\r\nIf we aren\'t using single state key then we should be getting an event which has the type `""dev.opsdroid.database""` and `state_key` equal to key and then this get method returns `content`.\r\n\r\n(obviously with the extra step of post-processing content to deal with encryption).\r\n\r\nWhat situation happens where `key` is a dict?', 'comment_created': datetime.datetime(2020, 8, 21, 12, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474660501, 'comment_body': 'surely a key must be passed anyway? If `single_state_key` is True then this method should be returning `content[key]`?', 'comment_created': datetime.datetime(2020, 8, 21, 12, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474661296, 'comment_body': 'We shouldn\'t ever be getting ""full state"" as we are only getting events with type `self._event_type`?', 'comment_created': datetime.datetime(2020, 8, 21, 12, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474664577, 'comment_body': 'The `room_get_state_event` call above is not doing what this error message describes.\r\n\r\nMatrix room state is a key value store, which is effectively keyed on a `(event_type, state_key)` pair. Depending on the value of `single_state_key` we map our database key value store on to matrix\'s key value store in one of two different ways.\r\n\r\nGiven a request to store a `{dkey: dvalue}` mapping in the opsdroid database the following two things can happen:\r\n\r\n* If `single_state_key` is `True`, then the state key (normally) becomes `""""` so we put something into matrix room state which is a mapping like: `{(""dev.opsdroid.database"", """"): {dkey: dvalue}}`.\r\n\r\n* If `single_state_key` is False, we put something into matrix room state which looks like this: `{(""dev.opsdroid.database"", ""dkey""): dvalue}` (which puts a requirement on `dvalue` to be a dict).', 'comment_created': datetime.datetime(2020, 8, 21, 12, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474681531, 'comment_body': 'Can I suggest you create a generic ""decrypt"" method which given any content dict iterates through all the values in the dict and resolves all the references to encrypted values. So given a content dict which looks like this:\r\n\r\n```\r\n{\'key1\': {\'encrypted_val\': \'$eventid\'}, \'key2\': ""bob"", \'key3\': {\'encrypted_val\': \'$eventid\'}}\r\n```\r\nit would return\r\n```\r\n{\'key1\': \'hello world\', \'key2\': ""bob"", \'key3\': \'spam\'}\r\n```\r\n\r\nI suggest you are reasonably strict about the way you detect this so, I would propose something which looks like this, where if we fail to decrypt an event we log an error, but we continue to return anything we can decrypt (or isn\'t encrypted) from the state:\r\n\r\nI think something along the lines of the following could work. You could also implement an `encrypt_content` method which does the reverse.\r\n```python\r\n\r\ndef decrypt_content(content):\r\n    new_content = {}\r\n    for key, value in content.items():\r\n        if isinstance(value, dict) and len(value) == 1 and ""encrypted_val"" in value:\r\n            resp = await self.connector.connection.room_get_event(\r\n                        room_id=self.room_id, event_id=value[""encrypted_val""],\r\n                    )\r\n            if isinstance(resp, RoomGetEventError):\r\n                _LOGGER.error(\r\n                    f""Error decrypting event {value[\'encrypted_val\']} while reading from matrix database,""\r\n                    f"" dropping {key} from database: {resp.message}({resp.status_code})""\r\n                )\r\n               continue\r\n            value = resp.event.source[""content""][key]\r\n\r\n        new_content[key] = value\r\n        return new_content\r\n```', 'comment_created': datetime.datetime(2020, 8, 21, 13, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474683806, 'comment_body': 'Users could provide a custom single state key as well right? since the code accounts for that', 'comment_created': datetime.datetime(2020, 8, 21, 13, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 474686043, 'comment_body': 'i think in that case `data` would be an empty dict ', 'comment_created': datetime.datetime(2020, 8, 21, 13, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 474686535, 'comment_body': ""yeah, I think that's an advanced use case though, so our docs don't really need to promote it."", 'comment_created': datetime.datetime(2020, 8, 21, 13, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474687923, 'comment_body': 'key would be a dict when single state key is false and the user wants a key within the state event so they can pass a dict like `{state_key: key}` and get `content[key]` from that state_key', 'comment_created': datetime.datetime(2020, 8, 21, 13, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 474689757, 'comment_body': 'i added this while fiddling with using a single `get` inside `put`. the idea is that if single_state_key is true, users could opt to not pass a key to get the entire content dict', 'comment_created': datetime.datetime(2020, 8, 21, 13, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 474690693, 'comment_body': 'Its a full state in the sense its the full dictionary of that state event. I guess ""full state event"" would make more sense here?', 'comment_created': datetime.datetime(2020, 8, 21, 13, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 474693954, 'comment_body': 'If ""single_state_key"" is True then there should only ever be a single state key we are accessing through the database, so I don\'t think this extra level of complexity is something we should support?', 'comment_created': datetime.datetime(2020, 8, 21, 13, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474695692, 'comment_body': '""full state"" is a bit of an overloaded term for a matrix room (it generally refers to all of the current state events in a room). Once we have worked out the other comments I will think about a good wording for this.', 'comment_created': datetime.datetime(2020, 8, 21, 13, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474701128, 'comment_body': ""While I can sort of see the value in that, I am not sure if it's worth the complexity at this stage. I would probably not support it in this first iteration, and then later we could add a new method to the database which gets all the database, irrespective of  `single_state_key`."", 'comment_created': datetime.datetime(2020, 8, 21, 13, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474702102, 'comment_body': 'Ah yeah that sounds reasonable', 'comment_created': datetime.datetime(2020, 8, 21, 13, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 474706435, 'comment_body': 'Would this be a better way to put it?\r\n```suggestion\r\n                f""Error getting the state event of type {self._event_type} with state_key \'{state_key}\' from matrix room {self.room_id}: {ori_data.message}({ori_data.status_code})""\r\n```', 'comment_created': datetime.datetime(2020, 8, 21, 13, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 474708749, 'comment_body': 'yeah', 'comment_created': datetime.datetime(2020, 8, 21, 13, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474715984, 'comment_body': ""The reason i did it this way in `verify_and_get` is so that we only ever decrypt the events with keys that the user specified. I think decrypting all the events would be inefficient when we know what we need to decrypt. Plus we wouldn't know which events were encrypted and which weren't, so we would have to re-encrypt the whole dict. \r\nThe way you suggested is the way it is in `get`. I do agree with the continue instead of the return part."", 'comment_created': datetime.datetime(2020, 8, 21, 13, 59, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 474728844, 'comment_body': ""yeah not decrypting all the keys is a very good point, I didn't think of that. I would still maybe move the decrypt stuff into a function call though, I found `verify_and_get` a little confusing because of the way it conflated a bunch of things."", 'comment_created': datetime.datetime(2020, 8, 21, 14, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 474730185, 'comment_body': ""Sure i'll see what can be done"", 'comment_created': datetime.datetime(2020, 8, 21, 14, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 474744971, 'comment_body': '```suggestion\r\n```\r\nWe should get rid of this completely. `should_encrypt` only applies if the room is encrypted. This breaks the database with the default configuration in an unencrypted room.', 'comment_created': datetime.datetime(2020, 8, 21, 14, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 475461039, 'comment_body': ""Given my [comment](https://github.com/opsdroid/opsdroid/pull/1587/files#r474656706) below, shouldn't this be \r\n```suggestion\r\n            return {}\r\n```"", 'comment_created': datetime.datetime(2020, 8, 24, 9, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 475463156, 'comment_body': ""Also, this isn't always an error, if this is being triggered by the first PUT in a room, meaning logging this at error is sometimes not the right thing to do."", 'comment_created': datetime.datetime(2020, 8, 24, 9, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 475470928, 'comment_body': ""This line: https://github.com/opsdroid/opsdroid/pull/1587/files#diff-c97d0db15ae0cc89347831db7cc93d05R89 causes a `None` to be returned if the state event doesn't exist?"", 'comment_created': datetime.datetime(2020, 8, 24, 9, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 475472369, 'comment_body': '```suggestion\r\n            f""Getting {key} from matrix room {self.room_id} with state_key={state_key}.""\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 9, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 475477728, 'comment_body': ""I think this method could use a little readjustment, both to make it's error handling more applicable and to make it equally useful to `put` and `get`.\r\n\r\nI think that restricting this to just getting an existing value out of the store and decrypting it if needed would be better than worrying about deduplicating with a new value, as that behaviour only belongs in `put` not `get`?\r\n\r\nI would then call it something like `_get_and_decrypt`?"", 'comment_created': datetime.datetime(2020, 8, 24, 9, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 476257628, 'comment_body': ""if the state event doesn't exist, the `room_get_state_event` in `_verify_and_get` would return a default response with the error keys we discussed. So for the first put in a room `data` won't be `None`"", 'comment_created': datetime.datetime(2020, 8, 25, 8, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 476258641, 'comment_body': ""We won't get a `RoomGetStateEventError` for the first put in the room, that would happen for other problems like connection errors or membership errors etc"", 'comment_created': datetime.datetime(2020, 8, 25, 8, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 477189750, 'comment_body': 'We need to detect the 404 here like we discussed, I think\r\n```python\r\nif (\r\n    isinstance(data, RoomGetStateEventError) or \r\n    (isinstance(data, RoomGetStateEventResponse) and data.transport_response.status == 404)\r\n):\r\n```\r\nshould catch all the issues.', 'comment_created': datetime.datetime(2020, 8, 26, 10, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 477190646, 'comment_body': 'The code I suggested above is more future proof than this, because now I have patched nio in the next release the 404 will return the error object.', 'comment_created': datetime.datetime(2020, 8, 26, 10, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 477191434, 'comment_body': 'it feels weird to delegate the `check_dict` to `get`. Why not just put that code in `put`?', 'comment_created': datetime.datetime(2020, 8, 26, 10, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 477193276, 'comment_body': ""Aren't we now decrypting all events? Shouldn't we need to do something like this:\r\n```\r\nif self._single_state_key:\r\n    data = {key: data[key]}\r\n```\r\nbefore this loop, so we only decrypt the keys we need if single state key is true?"", 'comment_created': datetime.datetime(2020, 8, 26, 10, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 477195063, 'comment_body': ""This variable isn't being used anywhere?"", 'comment_created': datetime.datetime(2020, 8, 26, 10, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 477197295, 'comment_body': 'Actually we should detect if the key is not in the return here for single state key\r\n```python\r\nif self._single_state_key:\r\n    if key not in data:\r\n        return None\r\n    data = {key: data[key]}\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 10, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 477197684, 'comment_body': 'With my above comments this becomes\r\n```python\r\nreturn data\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 10, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 477204592, 'comment_body': 'When I said in matrix that we should only send one event per put what I think I meant is this:\r\n```suggestion\r\n            room_event = await self.opsdroid.send(\r\n                GenericMatrixRoomEvent(\r\n                    target=self.room_id, content=value, event_type=self._event_type\r\n                )\r\n            )\r\n            data[key] = {""encrypted_val"": room_event.event_id}\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 10, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 477208554, 'comment_body': ""```suggestion\r\n\r\n## Encryption\r\n\r\nIn encrypted Matrix rooms, state events (used by the database) are not encrypted. This means that anything put into the matrix database in an encrypted room would not be encrypted. To prevent this the matrix database send the **values** you put into your database into the room as regular events, which are encrypted, and then references these events from the database (which is still a state event).\r\n\r\nThis has two effects you should be aware of:\r\n1) The keys in your database are not encrypted, **do not put sensitive information in the key**.\r\n2) If opsdroid can't decrypt the event, it will be dropped from the database. This means that if you need long term storage in your encrypted rooms you must take steps to save the matrix connectors store (where the decryption keys are kept), so back up your store and keep it safe!\r\n```\r\n```\r\n```"", 'comment_created': datetime.datetime(2020, 8, 26, 10, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479629270, 'comment_body': 'Doing\r\n\r\n```\r\ndata = ori_data.content\r\n```\r\nabove did a copy by reference, which means that assigning to `data[k]` has modified `ori_data.content` so I am not sure if this line is doing anything? (i.e. return data would be the same).', 'comment_created': datetime.datetime(2020, 8, 29, 9, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479631251, 'comment_body': ""It's to account for the reassignment in [line 162](https://github.com/opsdroid/opsdroid/pull/1587/files#diff-c97d0db15ae0cc89347831db7cc93d05R162) so that when ssk is true we send the entire dict back to put"", 'comment_created': datetime.datetime(2020, 8, 29, 9, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 479785666, 'comment_body': 'What if this fails because of a permission error or something?\r\n\r\nWould it not be better to use `opsdroid.send` here instead?', 'comment_created': datetime.datetime(2020, 8, 30, 15, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479785713, 'comment_body': 'What if this fails because of a permission error or something?\r\n\r\nWould it not be better to use `opsdroid.send` here instead?', 'comment_created': datetime.datetime(2020, 8, 30, 15, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479785824, 'comment_body': 'If this fails to redact then we will still ignore it next time right (as there will be a `dev.opsdroid.database` event?).', 'comment_created': datetime.datetime(2020, 8, 30, 15, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479786039, 'comment_body': '```suggestion\r\n        data = await self.get(key, get_full=True) or {}\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 15, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479786234, 'comment_body': ""This docstring needs expanding to document the extra parameter (as it's deviated from the base class)."", 'comment_created': datetime.datetime(2020, 8, 30, 15, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479786458, 'comment_body': '```suggestion\r\n        _LOGGER.debug(f""Got {data} from state in room {self.room_id}."")\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 16, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479786589, 'comment_body': '```suggestion\r\n                _LOGGER.debug(f""{key} doesn\'t exist in state event in room {self.room_id}."")\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 16, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479786899, 'comment_body': 'We could be slightly stricter here and do:\r\n```suggestion\r\n            if isinstance(v, dict) and len(v) == 1 and ""encrypted_val"" in v:\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 16, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479786948, 'comment_body': '```suggestion\r\n                        f""Error decrypting event {v[\'encrypted_val\']} while getting ""\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 16, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479787146, 'comment_body': 'A according to the docstring in the base class key should only be a string (not list of strings), so we should call that out here (it needs a parameter blocks).', 'comment_created': datetime.datetime(2020, 8, 30, 16, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479787217, 'comment_body': '```suggestion\r\n\r\n        data = data.content\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 16, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479787287, 'comment_body': '```suggestion\r\n            _LOGGER.error(f""State event {self._event_type} with state key \'{state_key}\' doesn\'t exist."")\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 16, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479787332, 'comment_body': '```suggestion\r\n        _LOGGER.debug(f""Got {data} from state event in room {self.room_id}."")\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 16, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479787584, 'comment_body': '```suggestion\r\n                _LOGGER.debug(f""Deleting key \'{k}\' from database in {self.room_id}."")\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 16, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479787711, 'comment_body': 'I think this should be logged at a higher level than debug?\r\n```suggestion\r\n                _LOGGER.warning(f""Unable to delete \'{k}\' from database in room {self.room_id} as it doesn\'t exist."")\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 16, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479787860, 'comment_body': '```suggestion\r\n        """"""Use room state in the given room rather than the default.""""""\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 16, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479787993, 'comment_body': 'Please remove all these commented out tests.', 'comment_created': datetime.datetime(2020, 8, 30, 16, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479788041, 'comment_body': ""I think skip might be better than `xfail` if the deps aren't installed?"", 'comment_created': datetime.datetime(2020, 8, 30, 16, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 479803264, 'comment_body': ""yep even if it fails to redact we won't try to migrate again. The older state event will stay but be ignored"", 'comment_created': datetime.datetime(2020, 8, 30, 18, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 479807387, 'comment_body': ""We're mocking the methods that encryption would affect anyway so without deps they would still fail correctly. Plus in that case we won't know if they xpass after future changes."", 'comment_created': datetime.datetime(2020, 8, 30, 19, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Tyagdit', 'type': 'User'}, {'comment_id': 481018738, 'comment_body': '```suggestion\r\n    """"""Use room state from the room the message was received in rather than the default.""""""\r\n```', 'comment_created': datetime.datetime(2020, 9, 1, 10, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 481273000, 'comment_body': ""Is it worth just doing this on startup rather than checking if it's been done every time `get()` or `put()` is called?"", 'comment_created': datetime.datetime(2020, 9, 1, 16, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'SolarDrew', 'type': 'User'}, {'comment_id': 481296853, 'comment_body': 'you could be in a new room everytime with the decorator.', 'comment_created': datetime.datetime(2020, 9, 1, 17, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}]","[{'commit_sha': '984926fa3b9538d7c93fae9a46a5c82dddf3eb56', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6c5384be464eb03a98f9d6a3b7f7adfe7490b39', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb62d0278ab3fd0ce787b67e79493ae290dd6560', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c2d247aa24f57e74fb0edf154acb49a04b909ab', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '098704daad6fe8442df5a452affad78d81cb8369', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f079778d56ea900dd56e0656583320b38c15ffc', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76cb8bc8cb43ef2805d587f330a1981ef9d367ab', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8f080347f3f8940c85210bcb3dc3beca13da5a7', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3318ea9862d094a5a69ec212636b8a1fc9dc5b41', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5708c69db900e34ca3091e2b4faef5fa7c8a6c8b', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1f3bfe169d825d9e9ab7c9d7b4e32b61831fcc8', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0de38da23d3817af7f8c65cdf2cdba8aef4f0e9', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbff108258447f6b3d5e9c9a880deb38d454c7a9', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14e0846dbf25a3a0596265accb7e6cb667624312', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0e0f29f7892b91acbf68edf7a40c06066870bfe', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40a9e7a6de86e3103e86cebc0a7a10d8d90f572c', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3669f23e17b7f32372830bf6a21de7f27cc92ae', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56d1a830d4ee3e9b5a93b6f4ff5d671f0fc28c1d', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76692886ddfb9335f9b96b0f788befa213adcffc', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bd31aaf21ec180defd8f54d66905d6092836bf2', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc228f185876e39252928bc8d1a47fdf0fd7567c', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b3281683d4c861ca5e664d810e7287baf828faf', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8746b637d0e1978f6b21af8384fc50a191927c95', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0fe6f26f56198a51dfd02cbe21bf3a0205fde61', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d6f91cef2c1dce6da67f85caa47e56e1d075d0b', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ec99fffc907e315a983a77af8cca1e0d71922d6', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b3d8a53a5a47c4bc6293ff76ec8852432ea6b51', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2befde5fb8e06a741e3de80a01348046edfefb2', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '531bca7cb79cc96fd8962bde8482314da6bfdf57', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b42960995140f6d2ad26bce94742cfee40809d54', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38a774c1f63ee561c3dfbc3fe70d1070e8254439', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '681c291ab64be68846425b05281e159376201136', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}]",Tyagraj Desigar,43397375,,User,,20,,8,5
442018466,Fix some modules not being removed properly when closing opsdroid,"# Description

Some modules were not being removed when the user closed opsdroid since we were iterating through the list of modules while modifying it which caused it to skip every other module

## Status
**READY**


## Type of change


- Bug fix (non-breaking change which fixes an issue)


# Checklist:

- [x] I have performed a self-review of my own code
- [ ] I have made corresponding changes to the documentation (if applicable)
- [ ] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
",True,1551,https://api.github.com/repos/opsdroid/opsdroid/pulls/1551,https://github.com/opsdroid/opsdroid/pull/1551,closed,3,3,1,1,1,0,1,0,[{'name': 'bug'}],2020-06-30 13:11:22+00:00,2020-06-30 14:27:27+00:00,4565.0,1:16:05,[],"[{'commit_sha': 'c346757819d96ed05c2596464b3bf779841565a8', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}]",Tyagraj Desigar,43397375,,User,,20,,8,5
474964210,Temporarily pin black to version 19.10b0,"# Description

Black's new release has a [bug](https://github.com/psf/black/issues/1629) that makes it pretty much unusable, so pinning the older one till that gets fixed

## Status
**READY** 

## Type of change


- Bug fix (non-breaking change which fixes an issue)


# Checklist:

- [x] I have performed a self-review of my own code
- [x] I have made corresponding changes to the documentation (if applicable)
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
",True,1627,https://api.github.com/repos/opsdroid/opsdroid/pulls/1627,https://github.com/opsdroid/opsdroid/pull/1627,closed,1,1,1,1,2,0,1,0,[{'name': 'installation/packaging'}],2020-08-27 21:35:20+00:00,2020-08-28 09:14:27+00:00,41947.0,11:39:07,[],"[{'commit_sha': 'ec375f67bce8e63b67ea2eec00b6849b238d5d6c', 'committer_username': 'Tyagdit', 'committer_name': 'Tyagraj Desigar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 4, 8, 33, tzinfo=datetime.timezone.utc)}]",Tyagraj Desigar,43397375,,User,,20,,8,5

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
64034523,opsdroid,opsdroid/opsdroid,Python,410,819,29,186,1252,106,36,9,"[{'id': 398336294, 'number': 1418, 'closed': datetime.datetime(2020, 6, 16, 11, 19, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 3, 19, 2, 2, tzinfo=datetime.timezone.utc), 'time_taken': 6365849.0, 'time_delta': '73 days, 16:17:29', 'additions': 758, 'deletions': 320, 'state': 'closed'}, {'id': 378580330, 'number': 1375, 'closed': datetime.datetime(2020, 4, 8, 10, 37, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 22, 11, 24, 22, tzinfo=datetime.timezone.utc), 'time_taken': 3971605.0, 'time_delta': '45 days, 23:13:25', 'additions': 195, 'deletions': 0, 'state': 'closed'}, {'id': 375802283, 'number': 1369, 'closed': datetime.datetime(2020, 2, 17, 17, 13, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 16, 8, 54, 38, tzinfo=datetime.timezone.utc), 'time_taken': 116343.0, 'time_delta': '1 day, 8:19:03', 'additions': 40, 'deletions': 5, 'state': 'closed'}, {'id': 328367356, 'number': 1166, 'closed': datetime.datetime(2019, 10, 23, 8, 41, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 15, 16, 46, 36, tzinfo=datetime.timezone.utc), 'time_taken': 662115.0, 'time_delta': '7 days, 15:55:15', 'additions': 7, 'deletions': 13, 'state': 'closed'}]"
