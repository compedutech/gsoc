pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1363913546,generalized_opt_routine,,True,652,https://api.github.com/repos/jonescompneurolab/hnn-core/pulls/652,https://github.com/jonescompneurolab/hnn-core/pull/652,closed,897,76,14,63,44,142,0,0,[],2023-05-24 23:54:58+00:00,2023-09-07 20:21:32+00:00,9145594.0,"105 days, 20:26:34","[{'comment_id': 1204880648, 'comment_body': 'could we also add the current optimization function to the comparisons? It has an argument called `return_rmse` which you can plot ...', 'comment_created': datetime.datetime(2023, 5, 25, 0, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1232216637, 'comment_body': 'can you also add a `__repr__` ?', 'comment_created': datetime.datetime(2023, 6, 16, 12, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1232217954, 'comment_body': '```suggestion\r\n        self.obj = list()\r\n```\r\n\r\nto be clear what is the data type', 'comment_created': datetime.datetime(2023, 6, 16, 12, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1232218405, 'comment_body': 'obj = objective value\r\n\r\nI think it\'s more generalizable than ""error""', 'comment_created': datetime.datetime(2023, 6, 16, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1232363945, 'comment_body': ""I like the `metric` argument here, but how about `self.obj_func` instead of `self.metric` so that it's clear this translates to a function? "", 'comment_created': datetime.datetime(2023, 6, 16, 14, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1232387635, 'comment_body': 'I think `window_len` should be specified somehow with the `metric` or possibly as an argument of the objective function since it is part of the cost calculation.', 'comment_created': datetime.datetime(2023, 6, 16, 15, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1232398759, 'comment_body': ""Why do `_get_fixed_params()` and `_get_predicted_params()` need to be separate functions? This should be setup with as much flexibility as possible so that you aren't hardcoding which parameter types are deemed fixed. All fixed parameters should already be instantiated in `net`, so all you have to do is assemble the varied parameters selected by the optimizer, set them within `net` (for an exogenous drive that is targeted for optimization, this will involve overwriting it with the updated parameters), and then running the simulation."", 'comment_created': datetime.datetime(2023, 6, 16, 15, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1233085613, 'comment_body': ""```suggestion\r\n            if cons_key in ('mu', 'sigma'):\r\n```"", 'comment_created': datetime.datetime(2023, 6, 17, 16, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1233086545, 'comment_body': ""I don't quite get the logic of extracting the fixed params. Why can't we just pass around the network object and never worry about the fixed params?"", 'comment_created': datetime.datetime(2023, 6, 17, 16, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1233087456, 'comment_body': ""it might be cleaner to do:\r\n\r\n```py\r\n\r\ndef _get_params(net, params):\r\n     # insert logic of flattening network\r\n     # into a dictionary\r\n    return params, constraints\r\n\r\ndef _get_params_bayesian(net, params):\r\n    params, constraints = _get_params(net, constraints)\r\n    for param in params:\r\n        # now convert into solver-specific format\r\n        continue\r\n\r\ndef _get_params_cobyla(net, params):\r\n    params, constraints = _get_params(net, constraints)\r\n    for param in params:\r\n        # now convert into solver-specific format\r\n        continue\r\n```\r\n\r\nso you don't repeat the logic of flattening multiple times and introduce potential sources of error"", 'comment_created': datetime.datetime(2023, 6, 17, 16, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1233088094, 'comment_body': 'I think the more generalizable way is to update the network attributes directly ... basically do the opposite of what you did in `_get_params`', 'comment_created': datetime.datetime(2023, 6, 17, 16, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1233203512, 'comment_body': 'This is getting at the same issue I was pointing out in https://github.com/jonescompneurolab/hnn-core/pull/652#discussion_r1232398759.', 'comment_created': datetime.datetime(2023, 6, 18, 6, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1233209562, 'comment_body': ""Shouldn't we strive to use the established code path via the public API since setting `Network` attributes can be much trickier than getting them? Mostly just because there are a bunch of checks and stuff in `Network.add_evoked_drive()` and `Network._attach_drive()`. For instance, if the user should decide to optimize the `n_drive_cells` parameter (not sure why one would want to do this, but it's theoretically an option), we'd need to make sure the `gid_ranges` and `connectivity` attributes are updated accordingly."", 'comment_created': datetime.datetime(2023, 6, 18, 6, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1234660621, 'comment_body': 'but that seemed to be different from what [you proposed here](https://github.com/jonescompneurolab/hnn-core/pull/652#discussion_r1232398759) ?', 'comment_created': datetime.datetime(2023, 6, 20, 2, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1234789922, 'comment_body': 'I meant that the general strategy is to retrieve fixed parameters from `Network` attributes that should be treated more-or-less as immutable (e.g., like an external drive), and then re-instantiate them using the standard API with their original fixed params and updated params. If the `Network` attribute getting modified during optimization is fair-game for direct modification, the `_get_params()` method is irrelevant (right?). Some `Network` attributes can be overwritten directly (particularly those without a complex instantiation API written for them), but others are a bit error prone.', 'comment_created': datetime.datetime(2023, 6, 20, 6, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1235433827, 'comment_body': ""In that case, maybe it's better if we initially restrict the params to be amongst those that can be instantiated through the API. If we assemble the dictionary cleverly, we might even be able to just say:\n\nnet.add_evoked_drive(**updated_params)\n\nWhere updated_params are the arguments relevant for the evoked drive. You can get the list of arguments a function accepts and make the dictionary keys match those."", 'comment_created': datetime.datetime(2023, 6, 20, 15, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1235467735, 'comment_body': ""> In that case, maybe it's better if we initially restrict the params to be amongst those that can be instantiated through the API. If we assemble the dictionary cleverly, we might even be able to just say:\r\n\r\nYou mean, restrict optimization params to just drives? Or drives and connectivity maybe?\r\n\r\n> net.add_evoked_drive(**updated_params)\r\n> \r\n> Where updated_params are the arguments relevant for the evoked drive. You can get the list of arguments a function accepts and make the dictionary keys match those.\r\n\r\n"", 'comment_created': datetime.datetime(2023, 6, 20, 15, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1235469494, 'comment_body': 'Start with drives and drive connectivity. We can always expand to other parameters.', 'comment_created': datetime.datetime(2023, 6, 20, 15, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1238543737, 'comment_body': '```suggestion\r\n        Returns\r\n        -------\r\n```', 'comment_created': datetime.datetime(2023, 6, 22, 13, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1238890259, 'comment_body': '```suggestion\r\ndef _set_constraints(net, constraints):\r\n```\r\n?', 'comment_created': datetime.datetime(2023, 6, 22, 18, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1238893182, 'comment_body': '```suggestion\r\n       target_statistic : Dipole\r\n           The target statistic.\r\n       max_iter : int\r\n           Max number of calls.\r\n```', 'comment_created': datetime.datetime(2023, 6, 22, 18, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1238912876, 'comment_body': 'Copy all of the attributed necessary to call `net.add_evoked(...)`', 'comment_created': datetime.datetime(2023, 6, 22, 18, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1238914655, 'comment_body': 'add extra attribute for user defined callable', 'comment_created': datetime.datetime(2023, 6, 22, 18, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1261600997, 'comment_body': 'Here allow passing in a `set_params(net, params_dict)` function', 'comment_created': datetime.datetime(2023, 7, 12, 18, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1261601396, 'comment_body': '```suggestion\r\n        self.max_iter = 200\r\n        self._set_params = set_params\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 18, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1261606918, 'comment_body': ""For the generic `set_params()` function that a user passes in, you could have one input called `params_dict` which looks like\r\n`{'mu': 50, 'sigma': 4.5, 'ampa_weight': 2, ...}`"", 'comment_created': datetime.datetime(2023, 7, 12, 18, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1261608588, 'comment_body': 'and then ""hard-code"" parameter updated as `net.add_evoked(mu=params_dict[\'mu\'], ...)`', 'comment_created': datetime.datetime(2023, 7, 12, 18, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1261609930, 'comment_body': 'The `f_bands` parameter can be ""implicit"" to the `set_params` function', 'comment_created': datetime.datetime(2023, 7, 12, 19, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1261612835, 'comment_body': 'Add logic t check if `f_bands` is in the appropriate format\r\n\r\nAdd warning otherwise', 'comment_created': datetime.datetime(2023, 7, 12, 19, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1265526989, 'comment_body': 'rebase problem?', 'comment_created': datetime.datetime(2023, 7, 17, 15, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1266862229, 'comment_body': 'Yeah I think so! The commit is from awhile back so I think the best plan is to just focus on cleaning things up and we can walk through fixing the commit history over zoom or something', 'comment_created': datetime.datetime(2023, 7, 18, 14, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1276140341, 'comment_body': ""I think it's ok to leave this as is!"", 'comment_created': datetime.datetime(2023, 7, 27, 11, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1276145493, 'comment_body': 'An alternative way to write this would be with a [partial function](https://www.geeksforgeeks.org/partial-functions-python/l)', 'comment_created': datetime.datetime(2023, 7, 27, 11, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1276156633, 'comment_body': '```suggestion\r\n    target : ndarray\r\n```\r\n?\r\nSince it\'s really just a signal rather than a ""statistic"" being calculated on top of it', 'comment_created': datetime.datetime(2023, 7, 27, 11, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1276157604, 'comment_body': 'Feel free to disagree ;), `target` is pretty vague', 'comment_created': datetime.datetime(2023, 7, 27, 11, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1276158853, 'comment_body': 'Definitely add your name!', 'comment_created': datetime.datetime(2023, 7, 27, 11, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1276160266, 'comment_body': 'Perfect!', 'comment_created': datetime.datetime(2023, 7, 27, 11, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1276161797, 'comment_body': 'Is it actually necessary to `return net`?\r\n\r\nThese functions modify `net` in place, so if the copy occurs outside of this function then you just need to call the function on net', 'comment_created': datetime.datetime(2023, 7, 27, 11, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1276163711, 'comment_body': 'Is this all of the parameters used in the old optimization example? My only concern is it seems like a lot of values and may take awhile to run this script', 'comment_created': datetime.datetime(2023, 7, 27, 11, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1282408735, 'comment_body': 'Yup, the [old optimization example](https://jonescompneurolab.github.io/hnn-core/stable/auto_examples/howto/plot_optimize_evoked.html#sphx-glr-auto-examples-howto-plot-optimize-evoked-py) was optimizing all network drives (proximal, distal, proximal). Should we limit our example to optimizing only one drive / a few parameters from each drive?', 'comment_created': datetime.datetime(2023, 8, 2, 20, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'carolinafernandezp', 'type': 'User'}, {'comment_id': 1284681906, 'comment_body': 'This still needs to be fixed @carolinafernandezp. Perhaps try using [git-blame](https://www.git-scm.com/docs/git-blame) to identify which commit this was accidentally added on, and then edit it out with an interactive rebase.', 'comment_created': datetime.datetime(2023, 8, 4, 17, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1284682975, 'comment_body': ""Same here. This looks like part of Rajat's recent work."", 'comment_created': datetime.datetime(2023, 8, 4, 17, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1284694864, 'comment_body': 'No just wanted to double check! Definitely can keep it as is', 'comment_created': datetime.datetime(2023, 8, 4, 17, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1289035015, 'comment_body': 'If possible, we should refrain from setting the backend at this level so that the user can set it at their discretion via e.g.\r\n\r\n```python\r\noptimizer = Optimizer(...)\r\ntarget = ...\r\nwith MPIBackend(n_procs=2):\r\n    optimizer.fit(target)\r\n```', 'comment_created': datetime.datetime(2023, 8, 9, 18, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1289062001, 'comment_body': 'can you move the files into their right locations? Example goes into the example folder ... rest go into an optimization folder inside hnn_core. Then the imports would either be relative imports or use `hnn_core` ', 'comment_created': datetime.datetime(2023, 8, 9, 18, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289062651, 'comment_body': 'missing docstring. Need to document both arguments and attributes. Make it a habit to do it as soon as you write the code ... or even *before* you write the code.', 'comment_created': datetime.datetime(2023, 8, 9, 18, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289083111, 'comment_body': ""is this the optimized network or the original network? In sklearn terminology, you'd add an underscore at the end of the name if it's optimized network"", 'comment_created': datetime.datetime(2023, 8, 9, 19, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289089123, 'comment_body': ""```suggestion\r\n```\r\n\r\nUnlike in C/C++ you don't need to return if you don't have anything to return"", 'comment_created': datetime.datetime(2023, 8, 9, 19, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289089746, 'comment_body': 'this isn\'t ""declared"" in the init. The structure of the class should be clear from the init', 'comment_created': datetime.datetime(2023, 8, 9, 19, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289090120, 'comment_body': ""```suggestion\r\n```\r\n\r\nsince you don't return anything"", 'comment_created': datetime.datetime(2023, 8, 9, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289090519, 'comment_body': '```suggestion\r\n        """"""Convergence plot.\r\n```\r\n\r\nsee pep257', 'comment_created': datetime.datetime(2023, 8, 9, 19, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289091491, 'comment_body': 'pep 257. Fix elsewhere too', 'comment_created': datetime.datetime(2023, 8, 9, 19, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289098633, 'comment_body': 'agreed, we should not hardcode the backend. Basic hnn-core functionality should work without MPI backend', 'comment_created': datetime.datetime(2023, 8, 9, 19, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289100680, 'comment_body': 'can you refactor this with \r\n\r\nhttps://github.com/jonescompneurolab/hnn-core/blob/c81e5b87fbcc13bd4c6e5a403e838ca63ea16760/hnn_core/dipole.py#L239\r\n\r\nmaybe move the old function here and update it?', 'comment_created': datetime.datetime(2023, 8, 9, 19, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289105532, 'comment_body': 'I was thinking the same but this might be actually cleaner and more explicit as the argument that remains to be defined (predicted_params) is clear here', 'comment_created': datetime.datetime(2023, 8, 9, 19, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289109507, 'comment_body': 'can we make it more informative? maybe printing some of the attributes of the optimizer + whether the optimizer has already been fit would be useful information', 'comment_created': datetime.datetime(2023, 8, 9, 19, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289111653, 'comment_body': '```suggestion\r\n    obj = [np.min(obj_values[:idx]) for idx in range(1, max_iter + 1)]\r\n```\r\n\r\navoid single letter variable names when you can ... they are hard to find and replace + not very informative', 'comment_created': datetime.datetime(2023, 8, 9, 19, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289120895, 'comment_body': ""I'm in two minds whether we should have a private parent Optimizer class and two separate classes for cobyla and bayesian ...\r\n\r\nSomething like:\r\n\r\n```py\r\nclass _Optimizer:\r\n\r\n     def run(self):\r\n         pass\r\n\r\n     def assemble_constraints(self):\r\n          pass\r\n\r\n      def plot_convergence(self):\r\n          # insert code for plotting convergence\r\n\r\n     def set_params(self):\r\n           pass\r\n\r\nclass BayesianOptimizer(_Optimizer):\r\n\r\n       def run(self):\r\n             # now call the function to run bayesian optimization\r\n\r\nclass CobylaOptimizer(_Optimizer):\r\n\r\n       def run(self):\r\n             # now call the function to run cobyla optimization\r\n```"", 'comment_created': datetime.datetime(2023, 8, 9, 19, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289122973, 'comment_body': ""In general, I'm not a big fan of attaching the object type to the name of a variable ... one should use python's object introspection capabilities if necessary + keep object structure as simple as possible so such additional explanation is not necessary\r\n```suggestion\r\ndef set_params(net, params):\r\n```"", 'comment_created': datetime.datetime(2023, 8, 9, 19, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289124179, 'comment_body': 'Maybe we can update the old example to update only one drive / a few parameters? It will make our CIs go faster too!', 'comment_created': datetime.datetime(2023, 8, 9, 19, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289124565, 'comment_body': 'some rationale should be given why these bounds were chosen', 'comment_created': datetime.datetime(2023, 8, 9, 19, 51, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289125129, 'comment_body': ""please prioritize putting this in the right folder before tomorrow's meeting"", 'comment_created': datetime.datetime(2023, 8, 9, 19, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289125500, 'comment_body': ""let's put this in the test folder"", 'comment_created': datetime.datetime(2023, 8, 9, 19, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1289344966, 'comment_body': ""Really good alternative, let's plan to discuss but for right now we should really focus on getting the basic functionality working and just merge this PR"", 'comment_created': datetime.datetime(2023, 8, 9, 23, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1289348480, 'comment_body': ""Perhaps let's save refining the example for a future PR? Especially since the API is subject to change"", 'comment_created': datetime.datetime(2023, 8, 9, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1290402226, 'comment_body': '```suggestion\r\nfrom .optimization.optimizer import Optimizer\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1290417483, 'comment_body': ""```suggestion\r\nfrom .metrics import _rmse_evoked\r\n```\r\nFor debugging purposes, let's be more explicit here so that we can more easily know which file `_rmse_evoked` comes from."", 'comment_created': datetime.datetime(2023, 8, 10, 16, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1290419903, 'comment_body': 'You could probably use `MPIBackend` to speed this up here.', 'comment_created': datetime.datetime(2023, 8, 10, 16, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1290423663, 'comment_body': 'To avoid conflict with the previously created ""optimization.py"" file, we should probably rename it and move it into the ""optimization"" directory.', 'comment_created': datetime.datetime(2023, 8, 10, 16, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1290560268, 'comment_body': ""Let's reduce this to optimizing parameters for just one drive"", 'comment_created': datetime.datetime(2023, 8, 10, 18, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1290567939, 'comment_body': 'Looks like you forgot to document the attributes !', 'comment_created': datetime.datetime(2023, 8, 10, 19, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1290583834, 'comment_body': ""```suggestion\r\n        obj_fun : string | func\r\n            The objective function to be minimized.\r\n```\r\nThis should be slightly more general, and I don't think `'evoked'` and taking the RMSE of simulated vs target dipoles are necessarily equivalent. How about the string label of `'dipole_rmse'`? Or what if we make this argument only for callables and not strings that translate to callables?"", 'comment_created': datetime.datetime(2023, 8, 10, 19, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1290592531, 'comment_body': 'Has `mu` actually been offset, or is it just the name of the ""mu"" that is getting optimized?', 'comment_created': datetime.datetime(2023, 8, 10, 19, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1290608780, 'comment_body': 'you should use [`pytest.mark.parametrize`](https://docs.pytest.org/en/7.3.x/how-to/parametrize.html)', 'comment_created': datetime.datetime(2023, 8, 10, 19, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1290610084, 'comment_body': 'test the repr before and after fitting ...', 'comment_created': datetime.datetime(2023, 8, 10, 19, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1290613480, 'comment_body': 'Good catch, no, it hasn\'t been offset. The key should just be ""mu"", I just corrected it.', 'comment_created': datetime.datetime(2023, 8, 10, 19, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'carolinafernandezp', 'type': 'User'}, {'comment_id': 1290616171, 'comment_body': 'you need to update `api.rst`', 'comment_created': datetime.datetime(2023, 8, 10, 19, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1290694877, 'comment_body': 'almost there :) `_optimize_evoked` is redundant ... you should rename it to `test_optimize_evoked` and add the `pytest.mark.parametrize` there', 'comment_created': datetime.datetime(2023, 8, 10, 21, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1290743458, 'comment_body': ""you have a lot of required arguments for the user ... can we set some sensible defaults? That's the one big difference in Python as opposed to Matlab :) Suggestion below:\r\n\r\n```suggestion\r\n    def __init__(self, net, tstop, constraints, set_params, solver='cobyla', obj_fun='evoked_rmse',\r\n                        scale_factor=1., smooth_window_len=None):\r\n```"", 'comment_created': datetime.datetime(2023, 8, 10, 22, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1290745137, 'comment_body': 'set some sensible defaults here as well ... high probability of bugs otherwise', 'comment_created': datetime.datetime(2023, 8, 10, 22, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1290754112, 'comment_body': 'The directory structure of your tests should reflect the directory structure of your module. At the very least, I would say, the names should be consistent. If your original file is `optimizer.py` then the test file should be called `test_optimizer.py` not `test_optimize_evoked.py`', 'comment_created': datetime.datetime(2023, 8, 10, 22, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1290757188, 'comment_body': ""```suggestion\r\nconstraints = dict({'evprox1_ampa_L2_basket': (0.01, 1.),\r\n```\r\nnitpick"", 'comment_created': datetime.datetime(2023, 8, 10, 23, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1297514016, 'comment_body': 'The last sentence is unnecessary since examples + developing tests should be implicit with any significant change to the API. Short and concise is better here.', 'comment_created': datetime.datetime(2023, 8, 17, 17, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1297568854, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 17, 18, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'carolinafernandezp', 'type': 'User'}, {'comment_id': 1297707747, 'comment_body': '```suggestion\r\n# Then, we define the constraints.\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 20, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1297710616, 'comment_body': 'Quick heads up, @raj1701 had to change this in #661 as well because of the flake8 update (so you might get a merge conflict during the rebase)', 'comment_created': datetime.datetime(2023, 8, 17, 20, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1297712993, 'comment_body': ""Guess it depends on who's PR is merged first, sorry we've unintentionally turned this into a race :smile: "", 'comment_created': datetime.datetime(2023, 8, 17, 20, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1297718780, 'comment_body': '@rythorpe @carolinafernandezp  a really cheap way to speed up the tests will be adding the ability to set `dt`. `dt=0.5` is really the sweet spot of being embarrassingly large but still allows for proper testing.', 'comment_created': datetime.datetime(2023, 8, 17, 20, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1297720989, 'comment_body': 'After initialization, `solver` should be a callable right?', 'comment_created': datetime.datetime(2023, 8, 17, 20, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1297735128, 'comment_body': ""In the future, we should probably try to find a way to confine these parameters to the `_rmse_evoked()` metric function because they're not a general property of the Optimizer."", 'comment_created': datetime.datetime(2023, 8, 17, 20, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1297738010, 'comment_body': ""So we're currently not allowing users to pass in their own callable here?"", 'comment_created': datetime.datetime(2023, 8, 17, 20, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1297753113, 'comment_body': '```suggestion\r\n        name = self.__class__.__name__\r\n        return f""<{name}\\nsolver={self.solver}\\nfit={is_fit}>""\r\n```\r\nAnother way to write this more succinctly would be to use f-strings. This is completely optional, but using newlines via \'\\n\' can also improve readability.', 'comment_created': datetime.datetime(2023, 8, 17, 21, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1297754341, 'comment_body': 'Make sure you test it out though and like the look of it.', 'comment_created': datetime.datetime(2023, 8, 17, 21, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1297763885, 'comment_body': 'If we allow the constructor to accept arbitrary callables, maybe we could expose the `dt` parameter within `_dipole_rmse()` so that we can use it in the test as follows:\r\n\r\n```python\r\nfrom functools import partial\r\n\r\nobj_fun = partial(_dipole_rmse, dt=0.5)\r\noptimizer = Optimizer(...obj_fun=obj_func)\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 21, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1300356796, 'comment_body': 'Not at the moment, I think once we get this merged I can do that really easily', 'comment_created': datetime.datetime(2023, 8, 21, 16, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'carolinafernandezp', 'type': 'User'}, {'comment_id': 1300438945, 'comment_body': 'Fair enough!', 'comment_created': datetime.datetime(2023, 8, 21, 17, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1302063997, 'comment_body': '```suggestion\r\n# were chosen so as to keep the model in physiologically realistic regimes.\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 18, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1302064680, 'comment_body': 'relative imports should come last in the list of imports', 'comment_created': datetime.datetime(2023, 8, 22, 18, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1302067941, 'comment_body': ""I'm confused what is the difference between this `net` object and `net_`. I can imagine a user would be too. Should this `net` be provided to the init or is it better to have it in the `fit` method? Or maybe it should be a private attribute? Maybe you can get some inspiration from `sklearn` ?"", 'comment_created': datetime.datetime(2023, 8, 22, 18, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1302076270, 'comment_body': '@carolinafernandezp I commented on this in the previous iteration. There is already: https://github.com/jonescompneurolab/hnn-core/blob/c81e5b87fbcc13bd4c6e5a403e838ca63ea16760/hnn_core/dipole.py#L239\r\n\r\nWhy not reuse that? \r\n\r\nAs a general rule, you should address all the comments and/or provide an explanation why it could not be addressed ... otherwise, the PR will remain in a stale state as reviewers will see the same issues again.', 'comment_created': datetime.datetime(2023, 8, 22, 19, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1302079374, 'comment_body': ""you should nest this import and make `'cobyla'` the default. I'm hesitant to add another hard dependency. It will make our life difficult for installation"", 'comment_created': datetime.datetime(2023, 8, 22, 19, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1302157866, 'comment_body': ""Let me know if I'm not understanding correctly: \r\n- We don't pass in `dpl`, it is computed inside `_rmse_evoked`.\r\n- We talked about using `target` instead of `exp_dpl` because the user will not always pass a dipole to the fit method (although 'target' will become optional once we introduce the rhythmic metric, so we could go ahead and call it `exp_dpl`).\r\n- We don't use `tstart` or `weights` (I think the old routine used those because of the chunking approach)."", 'comment_created': datetime.datetime(2023, 8, 22, 20, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'carolinafernandezp', 'type': 'User'}, {'comment_id': 1302163837, 'comment_body': ""`net` is the network object the user passes in (has no drives). `net_` is an attribute the user can access after `fit` is called (it's a network object with the final, optimized drives). I think it makes sense then to make `net` private?"", 'comment_created': datetime.datetime(2023, 8, 22, 20, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'carolinafernandezp', 'type': 'User'}, {'comment_id': 1302356196, 'comment_body': ""Just to recapitulate what @carolinafernandezp said in different words, `_rmse_evoked()` is an objective function that simulates `net` from within. @jasmainak maybe there's a way to clarify this by renaming this module `objective_functions.py`?"", 'comment_created': datetime.datetime(2023, 8, 23, 1, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1302360195, 'comment_body': ""rename for sure but let me point out the common code so you can see what I'm saying"", 'comment_created': datetime.datetime(2023, 8, 23, 1, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1302360511, 'comment_body': 'this computation looks common with `_rmse` @carolinafernandezp @rythorpe ', 'comment_created': datetime.datetime(2023, 8, 23, 1, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1302361437, 'comment_body': 'Oh yes, good catch.', 'comment_created': datetime.datetime(2023, 8, 23, 1, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1302362168, 'comment_body': ""also there is a `resample` ... it's not the same as downsample as it also lowpass filters. I haven't closely followed. Is that what you intend to do? The filtering step could slow your computation "", 'comment_created': datetime.datetime(2023, 8, 23, 1, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1302363697, 'comment_body': 'Also, what was the rationale @carolinafernandezp for normalizing the RMSE by `max(target) - min(target)`?', 'comment_created': datetime.datetime(2023, 8, 23, 2, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1302373376, 'comment_body': ""do you mean to use `pytest.raises` ... we don't really do this style of tests. All verbose messages are suppressed during the tests, the only reason you'd print something is if you want to check a warning/error was raised correctly"", 'comment_created': datetime.datetime(2023, 8, 23, 2, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1302373763, 'comment_body': 'also pep8 style guide says: https://peps.python.org/pep-0008/\r\n\r\n> The preferred way of wrapping long lines is by using Python’s implied line continuation inside parentheses, brackets and braces. Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation.', 'comment_created': datetime.datetime(2023, 8, 23, 2, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1302376492, 'comment_body': 'You should explain what is the expected signature of the function. See for example scipy documentation: \r\n\r\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html#scipy.optimize.minimize', 'comment_created': datetime.datetime(2023, 8, 23, 2, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1302377218, 'comment_body': '```suggestion\r\n        obj_fun : str\r\n```\r\n\r\nfix also elsewhere ... try to be as consistent as possible with rest of codebase and copy the style. General advice for any open source repo :)', 'comment_created': datetime.datetime(2023, 8, 23, 2, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1302377392, 'comment_body': '```suggestion\r\n        net : instance of Network\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 2, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1302396670, 'comment_body': 'private yes, and also worth thinking whether `net` and `tstop` should be arguments of the class init or in the `fit` method. Look around some libraries to get inspiration for API ... scipy, skopt, sklearn, keras etc', 'comment_created': datetime.datetime(2023, 8, 23, 2, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1302399311, 'comment_body': 'I would even call it `initial_net`,  `net0`, `cortical_net` or something to that effect to avoid confusion for developers', 'comment_created': datetime.datetime(2023, 8, 23, 2, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1302422154, 'comment_body': ""I've always been curious about this: why do we say `net : instance of Network` but not `tstop : instance of float` even though both represent instances of Python objects."", 'comment_created': datetime.datetime(2023, 8, 23, 3, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1302455494, 'comment_body': ""well `float` is not the class though, it's `Network` that is a class. Strictly speaking, `Network` is not a datatype even if you get `Network` if you do `type(Network)` ... instead it's more correct to say that `net` is an object that is an instance of the `Network` class. "", 'comment_created': datetime.datetime(2023, 8, 23, 3, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1303733059, 'comment_body': ""In reference to `signal.resample`, we only ever downsample, either the target dpl time series or the experimental dpl time series (whichever has more data points). I think we do this also in `dipole.py` which is why I though it was appropriate. The only other function I know is `scipy.signal.decimate` which filters the signal before downsampling. Is there another that's more appropriate? "", 'comment_created': datetime.datetime(2023, 8, 24, 3, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'carolinafernandezp', 'type': 'User'}, {'comment_id': 1303736250, 'comment_body': '@rythorpe When we first started drafting `_rmse_evoked` @jasmainak suggested we use the normalized RMSE to be able to compare RMSEs between models of different scales, but please @jasmainak correct me if you meant something else I know there are a few different ways of calculating nRMSE (like by dividing by the mean of the data).', 'comment_created': datetime.datetime(2023, 8, 24, 3, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'carolinafernandezp', 'type': 'User'}, {'comment_id': 1303802667, 'comment_body': 'I honestly have no recollection :) maybe it was @ntolley ? is the optimization sensitive to `scale_factor` ? how does that come into the picture?', 'comment_created': datetime.datetime(2023, 8, 24, 4, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1304739864, 'comment_body': ""So I don't think this is actually producing a reduced network because the network size is only set when you instantiate the network with `jones_2009_model()`. There should be an example of how to do this in `test_optimization.py` or `test_parallel_backends.py`."", 'comment_created': datetime.datetime(2023, 8, 24, 18, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1304743537, 'comment_body': 'wonder if we should allow a tuple `network_size=(N_pyr_x, N_pyr_y)` as arguments to `Network` class and in turn to the `jones_2009_model` etc to avoid such issues.', 'comment_created': datetime.datetime(2023, 8, 24, 18, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1307400093, 'comment_body': '```suggestion\r\n```\r\n\r\nwe can probably get rid of this ... it was specific to autoreject', 'comment_created': datetime.datetime(2023, 8, 28, 13, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1307400351, 'comment_body': '```suggestion\r\n```\r\n\r\nsame as above', 'comment_created': datetime.datetime(2023, 8, 28, 13, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1307412332, 'comment_body': 'I was looking at the implementation of the blog post here: https://gist.github.com/alextp/1402892\r\n\r\nand found one difference between the original and ours: it uses annealing from `scipy.optimize`. That is a deprecated function but this is recommended in its place:\r\n\r\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.basinhopping.html#scipy.optimize.basinhopping', 'comment_created': datetime.datetime(2023, 8, 28, 13, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1307418759, 'comment_body': 'skopt seems to use lbfgs-b as the default optimizer: https://docs.scipy.org/doc/scipy/reference/optimize.minimize-lbfgsb.html\r\n\r\nYou could try with either ... I can see why sampling may give non-optimal results.', 'comment_created': datetime.datetime(2023, 8, 28, 13, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1307449346, 'comment_body': '```suggestion\r\n#          Mainak Jas <mjas@mgh.harvard.edu>\r\n```\r\n\r\nThat email address is probably no longer active', 'comment_created': datetime.datetime(2023, 8, 28, 13, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1307477925, 'comment_body': ""Ok I'll try `basinhopping` with a uniform grid and less parameters (the results I posted a screenshot of was of 6 parameters)."", 'comment_created': datetime.datetime(2023, 8, 28, 14, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'carolinafernandezp', 'type': 'User'}, {'comment_id': 1307507792, 'comment_body': 'Just to explain my intuition ... random sampling is probably not covering the entire space properly in higher dimensions, it may be good for 2 or 3 dimensions. But afterwards, it gets worse and you need to use an optimizer like `lbfgs_b` or `basinhopping` to get the minima. You might want to first try reducing the dimensions to see if it works on the dipole optimization with fewer parameters. If it does, my intuition is correct ... the next step is then to implement one of these other optimizer functions in place of random sampling.', 'comment_created': datetime.datetime(2023, 8, 28, 14, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1310741216, 'comment_body': 'you should leave this for the last when everyone has agreed the PR is ready for merge. This file is prone to rebase conflicts', 'comment_created': datetime.datetime(2023, 8, 30, 19, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1310742222, 'comment_body': 'why do you redefine these?', 'comment_created': datetime.datetime(2023, 8, 30, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1310743233, 'comment_body': 'also defined above', 'comment_created': datetime.datetime(2023, 8, 30, 19, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1310747710, 'comment_body': 'The only other option would be to pass in the initial network object (`net_init`) to `set_params`, and inside `set_params` we can tell the user to remove the last drive/the drive they will be optimizing (`evprox2`). Is that a good way to go?', 'comment_created': datetime.datetime(2023, 8, 30, 19, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'carolinafernandezp', 'type': 'User'}, {'comment_id': 1310754801, 'comment_body': '![image](https://github.com/jonescompneurolab/hnn-core/assets/51917715/521fb9b7-2341-4cee-a984-79ff52d59c9d)\r\n![image](https://github.com/jonescompneurolab/hnn-core/assets/51917715/b4769a4a-8869-43f5-bd0f-c596c35a61e6)\r\n\r\n\r\nOptimizing only 1 drive gives a convergence plot that still looks pretty flat, just because most of the dipole is explained by 2 of the drives. \r\n\r\n- Would it be a good idea to have the initial dipole be the dipole that results from loading in the `default.json` parameters and running optimization on all drives? Optimizing all drives actually takes the same amount of time as optimizing 1 drive (since what takes long is `simulate_dipole`). \r\n\r\n- Alternatively, we could keep optimizing only 1 drive but set `max_iter` to a smaller value like 50.', 'comment_created': datetime.datetime(2023, 8, 30, 19, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'carolinafernandezp', 'type': 'User'}, {'comment_id': 1310768686, 'comment_body': ""```py\r\nnet = net.copy(reset_drives=False)\r\ndel net.external_drives['evprox2']\r\nnet.add_evoked_drive(...)\r\n```"", 'comment_created': datetime.datetime(2023, 8, 30, 20, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1310820648, 'comment_body': 'reminder to update readme !', 'comment_created': datetime.datetime(2023, 8, 30, 21, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1310821344, 'comment_body': 'we can probably delete this too', 'comment_created': datetime.datetime(2023, 8, 30, 21, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1313191921, 'comment_body': 'Something went wrong in your last rebase. This is undoing a bug patch I made in my last PR.', 'comment_created': datetime.datetime(2023, 9, 1, 15, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1313192052, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2023, 9, 1, 15, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1313192540, 'comment_body': 'Why was this touched?', 'comment_created': datetime.datetime(2023, 9, 1, 15, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1316111499, 'comment_body': ""Not sure what went wrong but looking into it now. All other tests are passing so I think we'll be able to merge after this."", 'comment_created': datetime.datetime(2023, 9, 5, 16, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'carolinafernandezp', 'type': 'User'}]","[{'commit_sha': 'a36878837de63c7fd876523a8cdfda5caba97171', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7a2f51b3b1534b2262f5241e24137a7a1caec62', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88ac514b0d953f55d2d4023b61e3a81860f73fe3', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '203e95ce80c50abeaf0ecf9ea1c44266f3b88262', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d972136c9d8cfa7806ceb96906844bca36866bd', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3dfef26633f4de22f20f8fadf787827910b8de', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c78406bb32b3de2d858ba28ae0809221ed178c41', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69503bca974aa5dd8a94f6ce81ea9ba7764f1e91', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4db96ddffc6b9589322953eed71bd4d5e4c00091', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cd4f4ab4b1e11cd9fa04de0ec8b49f6c91cbbd2', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2977aa158e7ac57306a5917f76885cf4666ad4fa', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8b9cb822f8cd58e9fb5eef8547237a511344e80', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '726bfd8fcd38b5fc78b5d6e3adc3a46f40974a68', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9530dd7550e9fed6610c97ecd507135b2e1f02db', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '782326467226f7cf3856389f51e28e1aac0e86ad', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83ac65f0cd77822d0e45b43d5de738c2e3c01842', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f4d44b71ccd0ce91203a39ee8054557ec91ce0b', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28915fab43a6b4d3e757032bfe12cd730c839f6b', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64977afabceca62d95690386a19082910ba32c84', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af81c718caa676a3239bf1833ee0f73d975d857b', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe1a3fe22c60050e1607df9119966dff3f9ae13b', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e08509e6c15451ffb7b4c91b4dbbc77bd576ecca', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcd3e8e6a7263c0151baa0aea2f44990895fad98', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f107131a2e2e65a97ffe8f85e483edb0c5998c7d', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3aee67f40f41070e30b358813b4ccb6a322c2c8', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bef1564e1ec3abdbe1378c3a17dafadbc8664c3', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c376fb8f8917b0d6e2143d9400db5ff89f660c4c', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f068cb27d390fff65d6cbdc9c2c53dcb8dbea11', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aff7ce9dbc9fbbe2e29797f3faafb93c4a80c901', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '465c666754a68445a6e73b51ce16fd47f1d4dffc', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7443ed326aa42c56e1cfd60534f6ba1d1a10d5b', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3453dd8dbab75e2f6b2eca9622f74b0d5304ce65', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa3dbab692aa0b1cb338bece549546e133ad0d85', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02be0652e459af5a63ceccdf4576b6305774c1c5', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54d051f28d73c3b7b997c38519e7ee1342bfe842', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7877f3d6ffbfc5209657152e3ec26a04f259197', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a9117393f28ae6ece94c842205c15bab19b41ea', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '489d169f1b9bc1c244f632667ce50716302738af', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82e28c713dbe48190bb420709f5c1674c135c809', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27db0acda60dfd7ef71c8bbb69e767b01be7b731', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd56857f9d3d8e6e7045316e2ff933b45fd9b228', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7aa7be1d51e27b7832e5806016a29227363da9b5', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac9be58d409e6882d67950f60754ca4f8d41aabe', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e07afc57a94a6f523ada989168574b065d2c297f', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31939e5bf0eef4fb91d7cc674b41076333703a24', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7423b255dd4bcb9d8f393b1d548b8a5adef8f5e7', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a362fafb8e03f2469feb4aac90a10fe8265231f', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9d3c07ae8724df8da01cc30b66a5d4a75726b03', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a32774f19a6b037d388a310125099e4a4d61e80', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '817f132c510c4a27aeb86e894b132eafa8530a7e', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27cefc44e500a5e99971ca16e55a232cd83cac95', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f29330fdd837e425889c42f078482f1333df6609', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e97b3e9229f9ff3853b65f4c856d3388b82844fd', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecdd6f5a7ea644902b7cc5263b53a43b01d952a7', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f926853500e347006023a92e21ac7beed362ea3', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa029576997286235b2118c68080d405f20c9055', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7df94ea210aa17aa8dce2a52bbe44305e7cad6a8', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a56279160e43ba6b7cae3fff2de7995b9f40bbc', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07f8a72ac661fd538faca75f08db910f7dcf2fcb', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec2391c8f2d9d7c5a7bccc8292a6beb1165dbca8', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb43e692f3b1d683ba1e287783256a193eb21df2', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b4ec365ccf430c6f5372a5cb375d8df77f5fa7e', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95df1842c5680b5c72ff492e4950b995d57e44e6', 'committer_username': 'carolinafernandezp', 'committer_name': 'Carolina Fernandez', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 17, 13, 46, 9, tzinfo=datetime.timezone.utc)}]",Carolina Fernandez,51917715,,User,,2,,2,1

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
168215891,hnn-core,jonescompneurolab/hnn-core,Python,51,53,9,26,2761,81,10,25,"[{'id': 1516386071, 'number': 673, 'closed': datetime.datetime(2024, 7, 29, 18, 31, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 14, 21, 36, 20, tzinfo=datetime.timezone.utc), 'time_taken': 27550520.0, 'time_delta': '318 days, 20:55:20', 'additions': 481, 'deletions': 72, 'state': 'closed'}, {'id': 1363913546, 'number': 652, 'closed': datetime.datetime(2023, 9, 7, 20, 21, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 24, 23, 54, 58, tzinfo=datetime.timezone.utc), 'time_taken': 9145594.0, 'time_delta': '105 days, 20:26:34', 'additions': 897, 'deletions': 76, 'state': 'closed'}, {'id': 1281768559, 'number': 621, 'closed': datetime.datetime(2023, 4, 3, 17, 14, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 19, 21, 31, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1280549.0, 'time_delta': '14 days, 19:42:29', 'additions': 32, 'deletions': 4, 'state': 'closed'}, {'id': 1281485751, 'number': 620, 'closed': datetime.datetime(2023, 3, 19, 20, 59, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 19, 4, 56, 3, tzinfo=datetime.timezone.utc), 'time_taken': 57807.0, 'time_delta': '16:03:27', 'additions': 113, 'deletions': 0, 'state': 'closed'}]"
