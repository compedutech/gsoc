pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
422323343,MzTab-m Support [GSOC 2020],"This PR is for basic import/export support for mzTab-m file in MZmine. This will include -
1. mzTab-m File Import support
- [x] Basic SML table parameter and raw data files import
- [x] Help html

2 . mzTab-m File export support
- [x] basic export functionality for only SML table
- [x] adding support for SME/SMF tables
- [x] Help html

- [x] Code Review",True,70,https://api.github.com/repos/mzmine/mzmine/pulls/70,https://github.com/mzmine/mzmine/pull/70,closed,1187,2,14,23,1,11,0,1,[],2020-05-23 20:29:44+00:00,2020-06-23 06:29:20+00:00,2627976.0,"30 days, 9:59:36","[{'comment_id': 440240848, 'comment_body': 'General comment: This is okay for now, but may need to be adjusted, depending on the type of analysis that was performed with MzMine .\r\n\r\n@tomas-pluskal ', 'comment_created': datetime.datetime(2020, 6, 15, 15, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nilshoffmann', 'type': 'User'}, {'comment_id': 440245986, 'comment_body': 'Here, we need a mechanism to represent the ID modules of MzMine. They are already classified within this enum: MZmineModuleCategory.IDENTIFICATION. This can be implemented with user params: https://github.com/HUPO-PSI/mzTab/blob/master/specification_document-releases/2_0-Metabolomics-Release/mzTab_format_specification_2_0-M_release.adoc#6250-database1-n For databases with official CV terms, the original CV term should be used. For now, I would create a user param with the name from PeakIdentity.getPropertyValue(PROPERTY_METHOD), leave the user param value empty. Set the prefix to peakIdentity.getClass().getSimpleName(). Set the version to the MzMine version to MzMineCore.getMZmineVersion() and set the uri to the PeakIdentity.getPropertyValue(PROPERTY_URL) value, if it exists, otherwise to ""null"".\r\n\r\nThis information is attached to PeakIdentity which can be accessed from PeakListRow. The default implementation, SimplePeakListRow is created by numerous alignment methods within MzMine.\r\n\r\nTo generate the list of databases, you will need to loop over all the simple peak list rows and assemble the different PeakIdentities into distinct databases. ', 'comment_created': datetime.datetime(2020, 6, 15, 15, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nilshoffmann', 'type': 'User'}, {'comment_id': 440249254, 'comment_body': 'Id format is specific to the vendor format from which the mzML file was generated: https://github.com/HUPO-PSI/mzTab/blob/master/specification_document-releases/2_0-Metabolomics-Release/mzTab_format_specification_2_0-M_release.adoc#51-use-of-identifiers-for-input-spectra-to-a-search\r\n\r\nFor this case, I think that the generic IdFormat should be used: \r\nMTD ms_run[1]-id_format [MS, MS:1000774, multiple peak list nativeID format, ]\r\n...\r\nSEH ... spectra_ref ...\r\nSME ... ms_run[1]:index=2 ...\r\n\r\n@tomas-pluskal ', 'comment_created': datetime.datetime(2020, 6, 15, 15, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nilshoffmann', 'type': 'User'}, {'comment_id': 440256009, 'comment_body': 'The cvAccession for negative scan is ""MS:1000129"", please adjust it accordingly, not only the name. Neutral scans can not occur in mass spectrometry. Thus, if any other polarity value is encountered, the status should be set to error:\r\nsetStatus(TaskStatus.ERROR);\r\nsetErrorMessage(""Invalid scan polarity "" + pol + "" encountered for file "" + file.getName() + ""."");', 'comment_created': datetime.datetime(2020, 6, 15, 15, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nilshoffmann', 'type': 'User'}, {'comment_id': 440279905, 'comment_body': 'General comment: This needs to be checked against the PeakIdentity that was used. However, this is not available yet from the interface. That kind of information needs to be added in MzMine to pull it into this level. https://github.com/HUPO-PSI/mzTab/blob/master/specification_document-releases/2_0-Metabolomics-Release/mzTab_format_specification_2_0-M_release.adoc#6311-reliability\r\n@tomas-pluskal ', 'comment_created': datetime.datetime(2020, 6, 15, 15, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nilshoffmann', 'type': 'User'}, {'comment_id': 440281602, 'comment_body': 'General comment: This needs to be checked against the PeakIdentity that was used. In most cases, this will be the native score value of the id method that was applied. See: https://github.com/HUPO-PSI/mzTab/blob/master/specification_document-releases/2_0-Metabolomics-Release/mzTab_format_specification_2_0-M_release.adoc#6517-id_confidence_measure1-n \r\n@tomas-pluskal ', 'comment_created': datetime.datetime(2020, 6, 15, 16, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nilshoffmann', 'type': 'User'}, {'comment_id': 440283755, 'comment_body': 'Please use the constant values instead of the string literals here and for the next few rows where you access peakIdentity.getPropertyValue(), e.g. `peakIdentity.getPropertyValue(PeakIdentity.PROPERTY_ID)`.', 'comment_created': datetime.datetime(2020, 6, 15, 16, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nilshoffmann', 'type': 'User'}, {'comment_id': 442623488, 'comment_body': 'I changed the database metadata. However, I was confused where to use the  MZmineModuleCategory.IDENTIFICATION value?', 'comment_created': datetime.datetime(2020, 6, 19, 4, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 442660628, 'comment_body': '> I changed the database metadata. However, I was confused where to use the MZmineModuleCategory.IDENTIFICATION value?\r\n\r\nSorry, that was not worded right. If you want to find the classes in MzMine which provide some sort of identification result (what we call a ""database"" in mzTab-M), you can search for usages of MZmineModuleCategory.IDENTIFICATION. Just for your own information :-)', 'comment_created': datetime.datetime(2020, 6, 19, 6, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nilshoffmann', 'type': 'User'}, {'comment_id': 443676589, 'comment_body': '@SurajViitk Why is this now ""file://null""? It should be possible to leave this value at null (literally) for the validation to pass. ""file://null"" will be treated by the validator as a file URL, but it should not be provided like this.\r\nIt should work with:\r\n`p.getPropertyValue(PeakIdentity.PROPERTY_URL).equals("""")) ? null:p.getPropertyValue(PeakIdentity.PROPERTY_URL);`', 'comment_created': datetime.datetime(2020, 6, 22, 16, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nilshoffmann', 'type': 'User'}, {'comment_id': 443696728, 'comment_body': 'Please see [this](https://apps.lifs.isas.de/mztabvalidator/result/4fa7ded8-cc58-4bb6-99b6-20d5e3211ff0) file\'s validation error. ""null"" value for database-uri gives a Logical Error ""database[1]-uri"" MUST be defined in the metadata section."" ', 'comment_created': datetime.datetime(2020, 6, 22, 16, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}]","[{'commit_sha': 'a2277c9e901671fdc6b14fd85332e8eec5070d47', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc02290978d6ad42ed34063b3d32ab4500440c30', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12d60d1bdbfa9b73d8619a488f2f37d9cbe6e101', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c431fdd61cd33dfbacf637187847410035057078', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a309fb9d0fded0abbbebbd2c9f9c2217a4acaf8', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81d62940c00965d8c492c00c3c90080a92798c4e', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2688aa5fa09423ecb6c52a8211f522180277a59a', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6954b33a943b3ff71b9a85b92a6635fe2edbab7', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8075ec2f711a39a10507794b5bf3890a18777b75', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a5fa807548cf7908783f013e495ca17fc3cb755', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '966924e068c4eb678e82dca3a703ea8130851b4c', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ebb0a2425f99f2c56aa002d25deb6754d95d0c', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb60ea3a77796be4c8e7152b37003ebf4debd661', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7153382bf59034c1735c7ea5b86b7ad975ea7d9', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e5213d62ae6ead7310e2808956e700238fb5c4f', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e37d10a1d38ebc0c478a98589226a10ffd91b2', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59430f59a8d1138ff7cf6d27efeab3a2a4bb7a13', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14d0d577ae6951b6fa3db754b9b79552dfff50e4', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '785848edea622778521b9281db59fe682911e843', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30c4c91e5b0c95f7a2f8c80eeea69142a6dc73a2', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de9d0d1d3f04ffd9e3efcd213192c642c9729906', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a861d18f566f3191c02e14bf269c1fa34679feae', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '020b1f94e7225d85a908fc68a2b7415049a77338', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}]",SurajV,33134846,,User,,22,,4,2
440931545,CliqueMS grouping [GSOC 2020],"PR for CliqueMS grouping implementation
 
- [x] Network (Clique) formation
",True,82,https://api.github.com/repos/mzmine/mzmine/pulls/82,https://github.com/mzmine/mzmine/pull/82,closed,2052,0,15,19,6,48,0,0,[],2020-06-27 16:16:10+00:00,2020-07-21 08:43:05+00:00,2046415.0,"23 days, 16:26:55","[{'comment_id': 453621936, 'comment_body': 'It is a dirty solution to wrap the whole code in a long try/catch block, because there is no control over what types of errors might happen where, and no control over the error messages that are produced. Try/catch blocks should be only used for shorter segments of code where something unusual (like an I/O error) might happen.', 'comment_created': datetime.datetime(2020, 7, 13, 12, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453622878, 'comment_body': 'The progress should reflect the actual progress of the calculation - e.g., calculated based on the total number of rows in the peak list. See here: https://github.com/mzmine/mzmine3/blob/master/src/main/java/io/github/mzmine/modules/dataprocessing/filter_isotopegrouper/IsotopeGrouperTask.java#L115', 'comment_created': datetime.datetime(2020, 7, 13, 12, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453623333, 'comment_body': 'When the status is set to TaskStatus.ERROR, you also need to call setErrorMessage()', 'comment_created': datetime.datetime(2020, 7, 13, 12, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453624017, 'comment_body': 'Please add some JavaDoc comments to the classes to explain what is the purpose of each class', 'comment_created': datetime.datetime(2020, 7, 13, 12, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453643949, 'comment_body': 'This should be changed to MZToleranceParameter', 'comment_created': datetime.datetime(2020, 7, 13, 13, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453644191, 'comment_body': 'This should be changed to RTToleranceParameter', 'comment_created': datetime.datetime(2020, 7, 13, 13, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453644610, 'comment_body': 'Is this absolute intensity? Or relative (%)?', 'comment_created': datetime.datetime(2020, 7, 13, 13, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453645135, 'comment_body': 'The description should explain what is log-likelihood. Otherwise it is just saying the same as the parameter name (""Log-likelihood tolerance"").', 'comment_created': datetime.datetime(2020, 7, 13, 13, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453645595, 'comment_body': 'Change the name to ""Filter similar features"". Explain what ""similar"" means in the description.', 'comment_created': datetime.datetime(2020, 7, 13, 13, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453646069, 'comment_body': 'For variables that are not expected to change during the task run, declare them as private final.', 'comment_created': datetime.datetime(2020, 7, 13, 13, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453647809, 'comment_body': 'Please remove all the commented-out code before merging the PR', 'comment_created': datetime.datetime(2020, 7, 13, 13, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453648430, 'comment_body': 'For things like double[][] arrays, add some comments to the code to explain what is the meaning of the array dimensions', 'comment_created': datetime.datetime(2020, 7, 13, 13, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453648772, 'comment_body': 'Add JavaDoc comments to explain the meaning of the double[][] return value', 'comment_created': datetime.datetime(2020, 7, 13, 13, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453649514, 'comment_body': 'Use lambda notation for the comparator', 'comment_created': datetime.datetime(2020, 7, 13, 13, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453649796, 'comment_body': 'Use the logger instead of System.out for logging and debugging messages ', 'comment_created': datetime.datetime(2020, 7, 13, 13, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453650137, 'comment_body': 'What is the meaning of these constant values? Needs more explanation.', 'comment_created': datetime.datetime(2020, 7, 13, 13, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453650279, 'comment_body': 'Add the license header', 'comment_created': datetime.datetime(2020, 7, 13, 13, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453650890, 'comment_body': 'If there are no setters, you can declare this class as `@Immutable` and declare all the fields as final', 'comment_created': datetime.datetime(2020, 7, 13, 13, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453651191, 'comment_body': 'Class names should start with capital letters (CsvImportParameters not csvImportParameters)', 'comment_created': datetime.datetime(2020, 7, 13, 13, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453651957, 'comment_body': 'CsvImportTask not csvImportTask', 'comment_created': datetime.datetime(2020, 7, 13, 13, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453652289, 'comment_body': 'Incorrect description', 'comment_created': datetime.datetime(2020, 7, 13, 13, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453652500, 'comment_body': 'CsvImportModule not csvImportModule', 'comment_created': datetime.datetime(2020, 7, 13, 13, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453652809, 'comment_body': 'This module needs a help file to describe the column structure of the CSV file that is being imported', 'comment_created': datetime.datetime(2020, 7, 13, 13, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453654643, 'comment_body': ""It's bad practice to read the whole file at once, it just wastes memory. Why not parse the file line by line?\r\n```\r\nwhile ((values = csvReader.readNext()) != null) {\r\n        // use the values\r\n}\r\n\r\n```"", 'comment_created': datetime.datetime(2020, 7, 13, 13, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453656441, 'comment_body': 'There is currently no way to cancel the task once it starts running. You need to check periodically for the cancelled flag and if it has been canceled, return from the run() method', 'comment_created': datetime.datetime(2020, 7, 13, 13, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453657111, 'comment_body': 'There is currently no way to cancel the task once it starts running. You need to check periodically for the cancelled flag and if it has been canceled, return from the run() method', 'comment_created': datetime.datetime(2020, 7, 13, 13, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 453872251, 'comment_body': 'these default values were used in the R code, so I used them as it is.', 'comment_created': datetime.datetime(2020, 7, 13, 19, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 454144732, 'comment_body': 'the intensity tolerance is checked against relative (ratio, not percent) difference in intensities, so it does not matter whether relative% or absolute intensities are used. Updating the descriptions.  ', 'comment_created': datetime.datetime(2020, 7, 14, 7, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 454920346, 'comment_body': ""Perhaps it's better to use this class from Apache Commons: http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/mutable/MutableDouble.html\r\nWith the Apache library there is some guarantee it won't change in the future, but the ADAP library is developed by one lab and may change its form and structure."", 'comment_created': datetime.datetime(2020, 7, 15, 9, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 454921733, 'comment_body': ""In this method, you should also cancel the ongoing computations in the ComputeCliqueModule and ComputeIsotopesModule objects. For example, if the cm.getClique() calculation takes a long time, the task won't be cancelled until that calculation is finished."", 'comment_created': datetime.datetime(2020, 7, 15, 9, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 454924319, 'comment_body': 'Define better what is ""EIC matrix"". What exactly is stored in the double[][] array? (e.g., retention time in minutes and absolute signal intensity?)', 'comment_created': datetime.datetime(2020, 7, 15, 9, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 454925275, 'comment_body': 'Add more explanation how the cosine correlation matrix is calculated. Explain the dimensions of the j*j array.', 'comment_created': datetime.datetime(2020, 7, 15, 9, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 454925861, 'comment_body': 'Add javadoc comments for parameters. The rtdiff parameter should not be double, but should be RTTolerance class.', 'comment_created': datetime.datetime(2020, 7, 15, 9, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 454926167, 'comment_body': 'Is there any explanation in the R code why these values were chosen?', 'comment_created': datetime.datetime(2020, 7, 15, 9, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 454927839, 'comment_body': ""I don't really like the way the progress is tracked - you have so many variables (progress, initialProgress, matrixCalcProgress, initialmatProgres) and a function updateProgress(). That is overly complicated. Why don't you just use a single variable (progress) and update it during the computation based on the stage in which the computation is in?"", 'comment_created': datetime.datetime(2020, 7, 15, 9, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 454928451, 'comment_body': 'This is not so important message, so should go to Level.FINEST', 'comment_created': datetime.datetime(2020, 7, 15, 9, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 454930194, 'comment_body': '`Collections.sort(inData, (o1, o2) -> Double.compare(o2, o1))`\r\n', 'comment_created': datetime.datetime(2020, 7, 15, 9, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 455020374, 'comment_body': 'So, should I use all numbers everywhere instead? For eg- If matrix calculation part is done, 65% process is already completed, so afterwards for network calculation, i can do something like progress.setValue(0.65+ 0.1*...) ', 'comment_created': datetime.datetime(2020, 7, 15, 12, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 455022412, 'comment_body': 'Yes. Please define the constants (like 0.65) in the beginning of the class as private static final variables.', 'comment_created': datetime.datetime(2020, 7, 15, 12, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 455044859, 'comment_body': 'That would leave lot of constants too, like for processing EIC matrix, cosine correlation matrix, several stages of network calculation...\r\nShould I use this way only?\r\n', 'comment_created': datetime.datetime(2020, 7, 15, 13, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 455051467, 'comment_body': 'Yes, it is a lot of constants, but those can all be listed in the beginning of the class. That is common practice. \r\nAlso see the naming conventions for constants: https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html#:~:text=The%20names%20of%20variables%20declared,%2C%20for%20ease%20of%20debugging.)\r\n', 'comment_created': datetime.datetime(2020, 7, 15, 13, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 455052637, 'comment_body': 'EIC matrix contains mean absolute intensity values, but the exact way of calculating them is not so simple.\r\n ', 'comment_created': datetime.datetime(2020, 7, 15, 13, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 455054187, 'comment_body': ""Also, I don't know what it means or signifies, not written anything regarding that in the R code. I just translated the code from R. "", 'comment_created': datetime.datetime(2020, 7, 15, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 455054712, 'comment_body': 'Please explain it at least briefly. The double[][] array has 2 dimensions, so it should be clear what the dimensions represent.', 'comment_created': datetime.datetime(2020, 7, 15, 13, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 455055552, 'comment_body': 'If there is no explanation in the R code, please ask the cliqueMS authors on our Slack.', 'comment_created': datetime.datetime(2020, 7, 15, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 455100721, 'comment_body': ""I'll give a brief explanation of how it is calculated. I'll ask what it means/signifies in the slack channel and update the docs as soon as I get the answer."", 'comment_created': datetime.datetime(2020, 7, 15, 14, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 456946300, 'comment_body': 'The current description still doesn\'t make it clear for the user how to set the parameter optimally (""If two features\' relative difference of intensity values...""). Maybe add an example to make it clear?', 'comment_created': datetime.datetime(2020, 7, 19, 19, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 456947005, 'comment_body': 'Use Level.FINEST instead of Level.INFO for all these debugging messages', 'comment_created': datetime.datetime(2020, 7, 19, 19, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}]","[{'commit_sha': '11dba933cd0fcb8467c14232738fbe76c19adaab', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8ea9562c075f6831e75140e1784016c0bef4522', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d42f3658ae3946be1e0cfe596c7cfd59b7977a8', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecaa821e0bdac646929413a5efbb6339534e03ef', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20b65a0d436badc56874a297f4ddc0af8df3bd03', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8086ae4530560597edbcfa13197811652a36d62f', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c74b8723d832536d490d16b362eee8c43441a1c4', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c48d1ddc538b07191f5acb1cbc3607828b2d0f2', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88b3306d5b75750f15aeb3654c16738990b20199', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7200ef4c3fde28df2672c3adeb03f7102b1186b', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d0d86f0e028866deca64160ea9c4db99ffd2064', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cf3301bfdb34c9c1b991c0a09867222031e0a61', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b7238863d3366e4ddd4d48a2774e308acb5aace', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cfee6b03a50d4afbd1a8d0cb85d79f0b88b4f55', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c39970e2b99bc1f462477c9f34c2b87fe121a1f', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81b97ee9cca0b8c73c449c5cedebeafe2391ccaa', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd5e661ce55a7473bd46e3e94de047b6d7466d82', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09e5ad3bba8cd4dfc245420ecbef2137b70d1ece', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06916651ec752842277bcdb48d031a418d0a9a83', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}]",SurajV,33134846,,User,,22,,4,2
454586838,Clique ms Isotope and adduct annotation  Implementation [GSOC 2020],"- [x] Isotope annotation

- [x] Adduct annotation

- [x] Code review",True,88,https://api.github.com/repos/mzmine/mzmine/pulls/88,https://github.com/mzmine/mzmine/pull/88,closed,2993,629,28,33,1,32,0,0,[],2020-07-21 15:36:55+00:00,2020-08-27 09:55:11+00:00,3176296.0,"36 days, 18:18:16","[{'comment_id': 467894222, 'comment_body': 'Please double check the use of capital letters in the documentation. ""non-Annotation score"" should be ""Non-annotation score"", also not sure why Normalize is capitalized in ""Annotation Normalize score"".', 'comment_created': datetime.datetime(2020, 8, 10, 13, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 467895579, 'comment_body': 'Avoid hard-coded constants in the code. Define the ""5"" in the beginning of a class as a private final constant.', 'comment_created': datetime.datetime(2020, 8, 10, 13, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 467896225, 'comment_body': 'This code needs more error checking - what if the peaklist row ID is not found? Remember that objects are dynamic and can change - the peak list could be modified by another module during the calculation of the cliques.', 'comment_created': datetime.datetime(2020, 8, 10, 13, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 468594118, 'comment_body': 'This calculation needs some explanation, what is going on here?', 'comment_created': datetime.datetime(2020, 8, 11, 13, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 468594324, 'comment_body': 'Please explain the 0.10 constant', 'comment_created': datetime.datetime(2020, 8, 11, 13, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 468594638, 'comment_body': 'What is DF?', 'comment_created': datetime.datetime(2020, 8, 11, 13, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 468595296, 'comment_body': 'TODO?', 'comment_created': datetime.datetime(2020, 8, 11, 13, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 468596215, 'comment_body': 'Please follow the Java naming conventions - e.g. topmasstotal  should be topMassTotal.\r\n', 'comment_created': datetime.datetime(2020, 8, 11, 13, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 468598388, 'comment_body': 'Add license header', 'comment_created': datetime.datetime(2020, 8, 11, 13, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 468622314, 'comment_body': ""I think you don't need this function, or do you? The parameters should not be hard-coded this way."", 'comment_created': datetime.datetime(2020, 8, 11, 14, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 468636566, 'comment_body': 'Please add basic Javadoc comments to all classes', 'comment_created': datetime.datetime(2020, 8, 11, 14, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 468640337, 'comment_body': 'Based on the Slack discussion, [Cat]+ is the same as [M]+ which we already have in the list above. We generally use M instead of Cat, so please change Cat to M and remove the duplicated entries', 'comment_created': datetime.datetime(2020, 8, 11, 14, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 468641140, 'comment_body': 'Also you can rearrange the list - first all M, then all 2M, then all 3M, etc.\r\nWithin each group, first put no adduct, then +H, then +Na, then +other adducts.', 'comment_created': datetime.datetime(2020, 8, 11, 14, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 468641775, 'comment_body': 'I think this value should be a constant, not a parameter. Is there any case when the user needs to change the value?', 'comment_created': datetime.datetime(2020, 8, 11, 14, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 469220462, 'comment_body': 'Why is polarity represented as a String, when we have the PolarityType enum (which you also use later)?', 'comment_created': datetime.datetime(2020, 8, 12, 12, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 469228524, 'comment_body': 'Use the OptionalModuleParameter here, so the nested parameters like MZ_DIFF and RT_DIFF are only configured when the filter is enabled', 'comment_created': datetime.datetime(2020, 8, 12, 12, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 469423436, 'comment_body': 'This I have confirmed witht he author of the R code, is not required, will remove it.\r\n', 'comment_created': datetime.datetime(2020, 8, 12, 17, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 469424838, 'comment_body': 'I had kept the naming conventions used in the R code where DF means DataFrame. Should I remove it?', 'comment_created': datetime.datetime(2020, 8, 12, 17, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 469425498, 'comment_body': 'This has been taken directly from the R code. I myself have was doubtful about it. Should I ask the author?', 'comment_created': datetime.datetime(2020, 8, 12, 17, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 469427233, 'comment_body': ""The calculations taken directly from the R code. The problem is that this part of the R code is itself not much well documented as it was written in C, whenever there were comments in the R code, I put them in the java code too. I'll add comments according to my understanding of the code."", 'comment_created': datetime.datetime(2020, 8, 12, 17, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 470094501, 'comment_body': 'Yes, please ask the authors on Slack.', 'comment_created': datetime.datetime(2020, 8, 13, 16, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 470095129, 'comment_body': ""You don't need to remove it, just add comments so the meaning is clear. Or you can rename the function to readDataFrame - in Java we generally prefer to use longer names that are more self-explanatory."", 'comment_created': datetime.datetime(2020, 8, 13, 17, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 470950397, 'comment_body': ""are you referring the getIsotopes() method or setIsoInfos? I'll remove all default values functions from all 3 modules."", 'comment_created': datetime.datetime(2020, 8, 15, 7, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 470954801, 'comment_body': ""I had  asked authors on slack and there's an answer, is it alright?"", 'comment_created': datetime.datetime(2020, 8, 15, 8, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 470972339, 'comment_body': ""I've asked the authors and I'll add a comment as soon as I get an answer."", 'comment_created': datetime.datetime(2020, 8, 15, 12, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 475099571, 'comment_body': 'The adduct formula should be H2, not 2H. Because if you have a formula like C6H12 and add your adduct, it will become C6H122H - should be C6H12H2 = C6H14. Please fix all other instances as well.', 'comment_created': datetime.datetime(2020, 8, 22, 15, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 475099587, 'comment_body': 'Here the adduct formula should be empty', 'comment_created': datetime.datetime(2020, 8, 22, 15, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 475111850, 'comment_body': 'Did the changes, please take a look.', 'comment_created': datetime.datetime(2020, 8, 22, 17, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'SurajViitk', 'type': 'User'}, {'comment_id': 477353610, 'comment_body': 'Move this file into the cliquems package', 'comment_created': datetime.datetime(2020, 8, 26, 14, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 477360030, 'comment_body': 'Remove all the commented-out code', 'comment_created': datetime.datetime(2020, 8, 26, 14, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 477360813, 'comment_body': 'Please leave the e.getMessage() as part of the error message, it is important', 'comment_created': datetime.datetime(2020, 8, 26, 14, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}, {'comment_id': 477361916, 'comment_body': 'The use of ""relative"" and ""absolute"" in this description is quite confusing - what exactly does relative and absolute mean here?', 'comment_created': datetime.datetime(2020, 8, 26, 14, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tomas-pluskal', 'type': 'User'}]","[{'commit_sha': '3686966f92304d2359e81aa4dd80567d6609ea4a', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef964fca5c89926d66b8c4532f22f865ea87865b', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e612c903bdee1f48cb59d5b0d073c22bad486e3c', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34694e145b08e2befed49668c6064f2348d096da', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a333fcd1861652804cba3e194cd372775ab4a284', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85218aa414118f36c4fb13522c63c91fbe331e2f', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '350d13762fa178460741afc64b0e883ab5963e16', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bedd6032802bc1ec7a0d09ec528656e110e8f25f', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b9f419f6c614316d5ee31b1f4d65650d9da9c7', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8572d566bc085151a26da92e7f1a4d98a525ff2', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0337177f64a9f68cdd3dbfad30a60cb5718d605', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0607e424d88b4f74607f46c857572ea52a5b42b3', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a29e3e89752f7059e2968554f236f307c710350e', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c4332eab4043ba98902586bac6ec42f9f55707a', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f75376efcff0a355b90597a5bb8da4943430aaa', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d932075a12d4610df60d30682ebc28900fae935', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96cee4b3f3f5494b58babc92fe9d87ccccce6ca9', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10553704e3665f41120551e63ceecc0d52dff562', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eaf91b87f1c0bec36e38cbbb023f638e0733646', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5a8e6b18f9dcb994f1c92b38499d250c165d52f', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44e5a1feca680a6789a7a80888bfbe7482333dc2', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eec4c719a719d45d33c4560d7ae21da78f1181b', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa8db931c92df59a87bbcaf60fbc4f629cdee84', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '515917f1e9b025501a4c568e88fa7ebffed931d4', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56782b82c5ad92277a0625998a0c52ca442175a4', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eebf7e2a88cbff05c07dbeb88d7b00bb70a6db21', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bac3faa3610616474040c253a08ed2efaaea7199', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01a972e14f3c5a231a6df1ce94596bc352acf98b', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec2fdd9733f1af17685eef37794b2ba6b4b1e246', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09f258efa2a6f13b77951c4aafb23e65bc8e2481', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd20abfa8cf6b9027f9f7e4aad8d6b6d51f58603e', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e45159510011d4b21452ffa70dac1861b6b18c3', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e81bd53f84cde17d22c925aa19aff2a50e1a0990', 'committer_username': 'SurajViitk', 'committer_name': 'SurajV', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 26, 19, 35, 25, tzinfo=datetime.timezone.utc)}]",SurajV,33134846,,User,,22,,4,2

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
223040641,mzmine,mzmine/mzmine,Java,122,180,12,83,14921,296,14,36,"[{'id': 454586838, 'number': 88, 'closed': datetime.datetime(2020, 8, 27, 9, 55, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 15, 36, 55, tzinfo=datetime.timezone.utc), 'time_taken': 3176296.0, 'time_delta': '36 days, 18:18:16', 'additions': 2993, 'deletions': 629, 'state': 'closed'}, {'id': 448043722, 'number': 87, 'closed': datetime.datetime(2020, 7, 13, 13, 10, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 5, 30, 13, tzinfo=datetime.timezone.utc), 'time_taken': 27617.0, 'time_delta': '7:40:17', 'additions': 6, 'deletions': 5, 'state': 'closed'}, {'id': 440931545, 'number': 82, 'closed': datetime.datetime(2020, 7, 21, 8, 43, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 27, 16, 16, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2046415.0, 'time_delta': '23 days, 16:26:55', 'additions': 2052, 'deletions': 0, 'state': 'closed'}, {'id': 422323343, 'number': 70, 'closed': datetime.datetime(2020, 6, 23, 6, 29, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 23, 20, 29, 44, tzinfo=datetime.timezone.utc), 'time_taken': 2627976.0, 'time_delta': '30 days, 9:59:36', 'additions': 1187, 'deletions': 2, 'state': 'closed'}, {'id': 417577073, 'number': 69, 'closed': datetime.datetime(2020, 5, 17, 22, 41, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 19, 51, 31, tzinfo=datetime.timezone.utc), 'time_taken': 355789.0, 'time_delta': '4 days, 2:49:49', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 404500749, 'number': 63, 'closed': datetime.datetime(2020, 4, 19, 1, 33, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 16, 16, 4, 19, tzinfo=datetime.timezone.utc), 'time_taken': 206958.0, 'time_delta': '2 days, 9:29:18', 'additions': 556, 'deletions': 350, 'state': 'closed'}, {'id': 385372657, 'number': 42, 'closed': datetime.datetime(2020, 3, 11, 6, 44, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 3, 52, 59, tzinfo=datetime.timezone.utc), 'time_taken': 183109.0, 'time_delta': '2 days, 2:51:49', 'additions': 371, 'deletions': 19, 'state': 'closed'}]"
