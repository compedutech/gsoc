pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1389395250,Adding A Modal Component,"This PR adds a custom Modal component so that Squoosh can communicate better with users (_snackbars are SO last year_).

While the snackbar popup will convey small and concise messages to users, the Modal can be used for displaying verbose  information like:

1. **INFO** mode - Explaining codecs and their parameters
2. **UPDATE** mode - Informing users about new features
3. **ERROR** mode - Expanding error messages on mobile, where users can't view the console error messages

It's keyboard accessible, has pre-formatted styles for different HTML elements, is responsive across the board and can be easily accessed by other components/elements.

I've tested the feature on the following devices:

* Safari - iOS / Mac
* Chrome - iOS / Android / Windows
* Firefox - Android / Windows

---

### DEMO

In the right-side options under the quality slider, click on any of the modal checkboxes. If you're using a keyboard, focus will be restored to that checkbox once the modal is closed.

---

**Unnecessary PR Lore**: This is complementary to PR #1366 where Surma rightly pointed out that the HTML hover _title_ is inaccessible to mobile users. I initially planned to put small one-line descriptions for each codec param in the _title_ attribute, then later add modal support with more detailed descriptions. But I figure if those one-liners will be overwritten anyway, might as well do them soon.",False,1369,https://api.github.com/repos/GoogleChromeLabs/squoosh/pulls/1369,https://github.com/GoogleChromeLabs/squoosh/pull/1369,open,508,22,10,23,10,102,0,0,[],2023-06-12 20:22:31+00:00,,0.0,,"[{'comment_id': 1235005565, 'comment_body': 'Is this supposed to be part of the PR? I think this can be really useful but pretty independent of the feature :D\r\n\r\n', 'comment_created': datetime.datetime(2023, 6, 20, 9, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1235007136, 'comment_body': '```suggestion\r\n    requestAnimationFrame(() => {\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 9, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1235009340, 'comment_body': 'But on second thought, it might actually be more idiomatic to use the `ref` prop to focus the button once a DOM element been created for it. Something like\r\n\r\n```js\r\n  <button ref={(el) => el?.focus()} /*...*/>\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 9, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1235010730, 'comment_body': 'We should have a dedicated class or id for the close button. Feels brittle otherwise with user-provided content for the modal.', 'comment_created': datetime.datetime(2023, 6, 20, 9, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1235014299, 'comment_body': 'On the one hand, I am impressed that you managed to successfully trap focus manually :D\r\n\r\nHowever, I think there are some platform features that we can use to achieve the same thing with less code. The first options is the `inert` attribute, that can make all other HTML in the tree unfocusable. Read [more here](https://developer.chrome.com/articles/inert/). The other option, and the even more natural fit I think, is using the `<dialog>` element, which is now [well supported](https://caniuse.com/dialog). \r\n', 'comment_created': datetime.datetime(2023, 6, 20, 9, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1235016960, 'comment_body': 'This seems a bit dangerous. I think instead of setting a height on each child, setting `align-content: stretch;` on the header should do the trick. Same with the font size, which is automatically inherited.\r\n', 'comment_created': datetime.datetime(2023, 6, 20, 9, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1235018984, 'comment_body': 'lol', 'comment_created': datetime.datetime(2023, 6, 20, 9, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1235020950, 'comment_body': 'Considering that there can only ever be one modal shown at time (it’s a singleton), I wonder if we need to do the Context/Provider dance. We could just have a ES module that exports a `showModal()` function and forwards that to a `ref` of a single, global `<Modal>` instance. Not sure what others think of that, tho', 'comment_created': datetime.datetime(2023, 6, 20, 9, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1235024040, 'comment_body': 'I don’t think `content` should be a string, but rather a `VNode`. With string we lose the ability to have more complex interactivity in the modal (event listeners would get lost etc). Even `title` should probably be a `VNode`.\r\n\r\nThe next logical step is to make the Modal itself actually unaware of whether it’s an error or info or update. It’s just a component for modal dialogs, and since we can pass arbitrary VNodes for title and content, the user can style it depending on what the use-case is.\r\n\r\n', 'comment_created': datetime.datetime(2023, 6, 20, 9, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1235026800, 'comment_body': '<img width=""769"" alt=""Screenshot 2023-06-20 at 10 52 17"" src=""https://github.com/GoogleChromeLabs/squoosh/assets/234957/12eced32-c18b-40ba-b567-2d84b22d7c2d"">\r\nThe text can also get quite easily lost due to contrast.', 'comment_created': datetime.datetime(2023, 6, 20, 9, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1236258650, 'comment_body': 'I\'m confused, will that work in this case? I\'m not adding/removing the Modal component to the DOM tree on show/hide, just changing some CSS properties to ""hide"" it from the user. ', 'comment_created': datetime.datetime(2023, 6, 21, 4, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1236259964, 'comment_body': ""That was just lazy coding on my part LOL, I'll make a dedicated id for it"", 'comment_created': datetime.datetime(2023, 6, 21, 4, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1236277422, 'comment_body': ""Ahh you're right, `VNode` would be better suited. Will do!"", 'comment_created': datetime.datetime(2023, 6, 21, 4, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1236277855, 'comment_body': ""I **did** want to use the `<dialog>` element, but isn't it fairly new on iOS? I personally know lots of people using iOS 14 and who stubbornly refuse to update. But yeah, most user devices should be able to support it, and I'm all for using a cool new web feature. Lemme know what you think!"", 'comment_created': datetime.datetime(2023, 6, 21, 4, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1236284877, 'comment_body': ""I was iffy about using `inert` because I'd have to apply it to all element siblings of the Modal components. Wouldn't that initiate a huge reflow every time the Modal is shown/hidden?"", 'comment_created': datetime.datetime(2023, 6, 21, 5, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1236458519, 'comment_body': 'This file is in `/Compress/` - is its usage intended to be scoped to this part of the app, or is it for more general use?', 'comment_created': datetime.datetime(2023, 6, 21, 6, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1236461142, 'comment_body': ""Wouldn't it be more natural for the content to be the node's children? (like how `<dialog>` works)"", 'comment_created': datetime.datetime(2023, 6, 21, 6, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1236461842, 'comment_body': ""Is the intent to use the 'type' for other things? Right now it's just impacting the icon. So, maybe accept a vnode for the icon?"", 'comment_created': datetime.datetime(2023, 6, 21, 6, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1236474600, 'comment_body': ""Not required, but we can start using 'real' private properties. If you want to do that, you might need to adjust the config.\r\n\r\nThe benefit in real private vars is their names compress."", 'comment_created': datetime.datetime(2023, 6, 21, 7, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1236477885, 'comment_body': 'I think the correct Preact way to do this would be in `componentDidUpdate`. But, you get all this stuff for free with `<dialog>`, so we should just use that.', 'comment_created': datetime.datetime(2023, 6, 21, 7, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1236479223, 'comment_body': ""Also seems odd to have a method like this, but then other code above getting the button manually. But I don't think we'll need this at all with `<dialog>`."", 'comment_created': datetime.datetime(2023, 6, 21, 7, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1236480101, 'comment_body': 'I think this is another problem solved by `<dialog>`', 'comment_created': datetime.datetime(2023, 6, 21, 7, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1236536778, 'comment_body': 'General use. Maybe I could put it in the shared directory like the snack bar element?', 'comment_created': datetime.datetime(2023, 6, 21, 7, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1236554722, 'comment_body': ""I can't really think of reasons other than these 3 for displaying a modal - so I thought it might be better to abstract away the Icon behind the `type` parameter"", 'comment_created': datetime.datetime(2023, 6, 21, 7, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1236558372, 'comment_body': 'Ahh got it, will do', 'comment_created': datetime.datetime(2023, 6, 21, 7, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1236559865, 'comment_body': ""The benefit of providing the icon is unused icons won't be bundled"", 'comment_created': datetime.datetime(2023, 6, 21, 7, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1236561818, 'comment_body': ""`lazy-app` is a good place for it if it isn't needed for the first interaction."", 'comment_created': datetime.datetime(2023, 6, 21, 8, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1242722737, 'comment_body': '```suggestion\r\n  hr {\r\n    border: none;\r\n    border-bottom: 1px solid var(--dim-text);\r\n  }\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 20, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'argyleink', 'type': 'User'}, {'comment_id': 1242738595, 'comment_body': '```suggestion\r\n    background-color: var(--black);\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 20, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'argyleink', 'type': 'User'}, {'comment_id': 1242739053, 'comment_body': '```suggestion\r\n    overflow-x: auto;\r\n    padding: 1rem 2rem;\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 20, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'argyleink', 'type': 'User'}, {'comment_id': 1242739921, 'comment_body': '```suggestion\r\n  h1 {\r\n    color: var(--white);\r\n  }\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 20, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'argyleink', 'type': 'User'}, {'comment_id': 1242742481, 'comment_body': '```suggestion\r\n  background-color: var(--dark-gray);\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 20, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'argyleink', 'type': 'User'}, {'comment_id': 1242743555, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 20, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'argyleink', 'type': 'User'}, {'comment_id': 1242745298, 'comment_body': '```suggestion\r\n  background-color: var(--off-black);\r\n  color: var(--light-gray);\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 20, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'argyleink', 'type': 'User'}, {'comment_id': 1242748498, 'comment_body': '```suggestion\r\n      color: var(--blue);\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 20, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'argyleink', 'type': 'User'}, {'comment_id': 1242748646, 'comment_body': '```suggestion\r\n      color: var(--pink);\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 20, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'argyleink', 'type': 'User'}, {'comment_id': 1251844502, 'comment_body': '```suggestion\r\n  this.setState(cleanSet(this.state, `shown`, false));\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 10, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1251845622, 'comment_body': ""I [don’t think](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#:~:text=Toggle%20history-,key,-51) we need both.\r\n\r\n```suggestion\r\n    if (e.key === 'Escape') {\r\n```"", 'comment_created': datetime.datetime(2023, 7, 4, 10, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1251848381, 'comment_body': 'I think this file is unused?', 'comment_created': datetime.datetime(2023, 7, 4, 10, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1251850345, 'comment_body': 'It might be worth throwing here (something like “called `Modal.showModal()` without putting the `<Modal />` component being present”).', 'comment_created': datetime.datetime(2023, 7, 4, 10, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1251884462, 'comment_body': 'TIL about `cleanSet`. On it!', 'comment_created': datetime.datetime(2023, 7, 4, 11, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1251886879, 'comment_body': ""Nice catch, I'll remove it from the commits and do some cleanup"", 'comment_created': datetime.datetime(2023, 7, 4, 11, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1251890031, 'comment_body': 'Sure thing!', 'comment_created': datetime.datetime(2023, 7, 4, 11, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1258707479, 'comment_body': ""@argyleink I'm a bit confused, you suggested 20px to show intent - but wouldn't it be better to add a comment here instead of changing the translation amount? 20px isn't making much of a visual difference on mobile IMO"", 'comment_created': datetime.datetime(2023, 7, 10, 18, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1258745018, 'comment_body': ""sorry for the confusion!\r\n\r\nthis\r\n![Screenshot 2023-07-10 at 12 20 45 PM](https://github.com/GoogleChromeLabs/squoosh/assets/1134620/059873d0-2ea6-4739-a7e6-b8b987ce15fb)\r\n\r\nis better than this\r\n![Screenshot 2023-07-10 at 12 20 33 PM](https://github.com/GoogleChromeLabs/squoosh/assets/1134620/8b730d3d-9894-4078-bc27-805bab41a262)\r\n\r\nis what I'm getting at. the intent is to have a modal, and it's weird if it's stuck to the top flush, better if it's got some breathing room from the top edge."", 'comment_created': datetime.datetime(2023, 7, 10, 19, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'argyleink', 'type': 'User'}, {'comment_id': 1258815514, 'comment_body': ""Huh, that's weird - it's supposed to be centered on all devices/sizes, not stuck to the top. Could you tell me which browser/os you're using? I've tested it on most Android browsers and remotely tested on a couple iOS versions too, seemed to work fine on those."", 'comment_created': datetime.datetime(2023, 7, 10, 19, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1258848321, 'comment_body': 'Chrome stable 114 ', 'comment_created': datetime.datetime(2023, 7, 10, 20, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'argyleink', 'type': 'User'}, {'comment_id': 1258944929, 'comment_body': 'confirm devtools issue', 'comment_created': datetime.datetime(2023, 7, 10, 21, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'argyleink', 'type': 'User'}, {'comment_id': 1262305607, 'comment_body': ""What's the benefit of having this as one object rather than individual properties."", 'comment_created': datetime.datetime(2023, 7, 13, 9, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1262306680, 'comment_body': 'Why are these state rather than props?', 'comment_created': datetime.datetime(2023, 7, 13, 9, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1262309058, 'comment_body': ""Does it need to be static? One of the benefits of `<dialog>` is that it can be deep in the DOM but still pop out to the top-level. I wonder if you're trying to recreate that feature here, but given it already exists in the platform, we can just use it."", 'comment_created': datetime.datetime(2023, 7, 13, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1262323521, 'comment_body': ""I don't think this is the right way to do this. The `transitionend` even bubbles, so the wrong transition may end up closing the dialog. Also, if it somehow ends up trying to transition to the same value, this event won't trigger. No requirement to watch it, but there's a 203 that covers these gotchas https://www.youtube.com/watch?v=9-6CKCz58A8\r\n\r\nIf you want to do something after an animation, the safest way is to do the animation with the web animation API, and then use its `finished` promise."", 'comment_created': datetime.datetime(2023, 7, 13, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1262324332, 'comment_body': 'I think this stuff will be refactored anyway, but for future reference, you can just do:\r\n\r\n```js\r\nel.inert = true;\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 9, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1262325451, 'comment_body': ""fwiw, I'm happy for new code to use real JS privacy. As in `#closeOnTransitionEnd`"", 'comment_created': datetime.datetime(2023, 7, 13, 9, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293486955, 'comment_body': ""I think it makes more sense for the content of the modal to be the child of `<ModalHint>`, and the 'label' to be a prop. The label could probably just be a string too."", 'comment_created': datetime.datetime(2023, 8, 14, 13, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293575931, 'comment_body': 'Passed it through SVGOMG.\r\n\r\n```suggestion\r\n  <svg viewBox=""0 0 512 512"" fill=""currentColor"">\r\n    <path fill-rule=""evenodd"" d=""M64 0C29 0 0 29 0 64v384c0 35 29 64 64 64h384c35 0 64-29 64-64V64c0-35-29-64-64-64H64Zm234 377 3-3c4-5 6-9 4-16-2-8-11-11-19-9-10 4-27 15-27 15l13-64 4-15c6-25 14-53-4-72-15-16-34-12-51 4l-24 25-3 4c-4 5-6 9-4 16s11 11 18 8c11-3 28-14 28-14l-12 56-1 1c-3 12-20 73-1 94 15 16 35 12 51-4l25-26Zm-72-240a43 43 0 1 0 87-8 43 43 0 0 0-87 8Z""/>\r\n  </svg>\r\n```', 'comment_created': datetime.datetime(2023, 8, 14, 14, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293578631, 'comment_body': '```suggestion\r\n  <svg viewBox=""0 0 24 24"" fill=""currentColor"">\r\n    <path\r\n      fill-rule=""evenodd""\r\n      d=""M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10zm-1.5-5.009c0-.867.659-1.491 1.491-1.491.85 0 1.509.624 1.509 1.491 0 .867-.659 1.509-1.509 1.509-.832 0-1.491-.642-1.491-1.509zM11.172 6a.5.5 0 0 0-.499.522l.306 7a.5.5 0 0 0 .5.478h1.043a.5.5 0 0 0 .5-.478l.305-7a.5.5 0 0 0-.5-.522h-1.655z""\r\n    />\r\n  </svg>\r\n```', 'comment_created': datetime.datetime(2023, 8, 14, 14, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293582476, 'comment_body': '```suggestion\r\n  <svg viewBox=""0 0 48 48"" fill=""currentColor"">\r\n    <path d=""M24 48c0-12-12-24-24-24 12 0 24-12 24-24 0 12 12 24 24 24a25.8 25.8 0 0 0-24 24Z""/>\r\n  </svg>\r\n```', 'comment_created': datetime.datetime(2023, 8, 14, 14, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293587728, 'comment_body': 'Instead of styling all dialogs, use a class name. That avoids clashes with other dialogs we may have in future.', 'comment_created': datetime.datetime(2023, 8, 14, 14, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293590979, 'comment_body': ""Where's this default coming from? As in, why does it need `!important`?"", 'comment_created': datetime.datetime(2023, 8, 14, 15, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293591694, 'comment_body': 'Would it be better to use https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible ?', 'comment_created': datetime.datetime(2023, 8, 14, 15, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293597183, 'comment_body': 'Move this to icons?', 'comment_created': datetime.datetime(2023, 8, 14, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293604737, 'comment_body': 'You can avoid creating a function on each render by using class fields. See the pattern here https://github.com/GoogleChromeLabs/squoosh/blob/dev/src/shared/prerendered-app/Intro/index.tsx#L282', 'comment_created': datetime.datetime(2023, 8, 14, 15, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293607499, 'comment_body': ""If you're going to use `<header>` and `<footer>`, then wrap both in an `<article>`. This semantically links the header and footer."", 'comment_created': datetime.datetime(2023, 8, 14, 15, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293608715, 'comment_body': 'Nit: Rename the arg to `event`. Leave minification to the minifier 😄 ', 'comment_created': datetime.datetime(2023, 8, 14, 15, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293610159, 'comment_body': 'My preference is that, if the thing is already in the desired state, then just return rather than throwing. Also, try to avoid using both component state & dialog element state. Use one as the source of truth (the component state?)', 'comment_created': datetime.datetime(2023, 8, 14, 15, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293610857, 'comment_body': 'Can you talk me through the usage of `inert` in this component?', 'comment_created': datetime.datetime(2023, 8, 14, 15, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293611732, 'comment_body': 'Can you talk me through the reason for this, and why the event is attached this way, rather than the usual Preact way?', 'comment_created': datetime.datetime(2023, 8, 14, 15, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293613353, 'comment_body': 'Would it make more sense to use `animateFrom` in cases like this?', 'comment_created': datetime.datetime(2023, 8, 14, 15, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293614027, 'comment_body': '```suggestion\r\n      animateTo(this.dialogElement, { opacity: 0 }, {\r\n```', 'comment_created': datetime.datetime(2023, 8, 14, 15, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293614163, 'comment_body': ""```suggestion\r\n        easing: 'ease',\r\n```"", 'comment_created': datetime.datetime(2023, 8, 14, 15, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293614626, 'comment_body': ""```suggestion\r\n        easing: 'ease',\r\n```\r\n\r\nIt looks better 😄 "", 'comment_created': datetime.datetime(2023, 8, 14, 15, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293615365, 'comment_body': 'Why require a particular kind of element here? (`span`)', 'comment_created': datetime.datetime(2023, 8, 14, 15, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1293616360, 'comment_body': 'Why is this needed?', 'comment_created': datetime.datetime(2023, 8, 14, 15, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1294171816, 'comment_body': ""Might be obsolete because I prevented click events from _leaking_ out of the dialog, I'll look into it"", 'comment_created': datetime.datetime(2023, 8, 15, 4, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1294173130, 'comment_body': 'No reason in particular, just seemed to make it easier to understand', 'comment_created': datetime.datetime(2023, 8, 15, 4, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1294176358, 'comment_body': ""I have a feeling it's another instance of obsolete code now that we're using the native `dialog` element, but here's the logic: when hidden, the dialog is made inert to prevent its contents from being `TAB`bed to. Might be a remnant of the time when I didn't use the dialog element and had to ensure the modal wasn't focusable."", 'comment_created': datetime.datetime(2023, 8, 15, 4, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1294177400, 'comment_body': ""No good reason, I'll refactor it"", 'comment_created': datetime.datetime(2023, 8, 15, 4, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1294186553, 'comment_body': '(For browsers that support backdrop) We need fill-mode `forwards` or `both` to keep the backdrop opaque after the animation - but animateFrom uses `back`.\r\nIf I edit that part of animateFrom then it essentially becomes animateTo without committing styles, and in that case a try-catch is much more readable IMO.', 'comment_created': datetime.datetime(2023, 8, 15, 5, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1294187817, 'comment_body': ""Didn't cross my mind that I could change it to an arrow function to preserve the `this` context, will do!"", 'comment_created': datetime.datetime(2023, 8, 15, 5, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1294192138, 'comment_body': ""The global `unbutton` sets the outline-color with the focus selector, so that overrides the default\r\n\r\n...and now that I think of it, I should've just done the same and set it on focus - eliminating `!important`. Will do."", 'comment_created': datetime.datetime(2023, 8, 15, 5, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1294195313, 'comment_body': ""Hmm I suppose that makes more sense. My thought process was we can just wrap existing text nodes (like for the custom input elements) in the `ModalHint` and get the modal functionality without much refactoring - but in hindsight that's a cop-out."", 'comment_created': datetime.datetime(2023, 8, 15, 5, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1294280073, 'comment_body': ""I think I get it, but wouldn't the backdrop's default from-CSS opacity be 1, so it wouldn't need a fill-forward?"", 'comment_created': datetime.datetime(2023, 8, 15, 7, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1294282010, 'comment_body': 'It works both ways, and in this case it isn\'t clear-cut which thing is naturally the ""children"". But ""content"" sounds like just another name for ""children"", whereas the actual child is the label. That, and I usually lean towards having the larger, more tree-like content as the child.\r\n\r\nBut yeah, it isn\'t clear-cut.', 'comment_created': datetime.datetime(2023, 8, 15, 7, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1294282837, 'comment_body': ""I think so. `<dialog>` content isn't tabbable when it's not-shown."", 'comment_created': datetime.datetime(2023, 8, 15, 7, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1294285496, 'comment_body': ""The good thing about using class names (and CSS modules) is that you can decouple style and semantics. So, if a particular `modal-hint` made sense as an `<aside>`, then that's fine, because the class name can be applied to any element. However, in this case it can only be applied to `<span>`, and I don't think that's a useful restriction.\r\n\r\nIn general I'd just use class names, and only use tag names in cases where it's justified. Cases like `.icon > svg` are fiiiine, and your use of tag names for dialog content is great, but I think just sticking with a class name is better here."", 'comment_created': datetime.datetime(2023, 8, 15, 7, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1338375294, 'comment_body': '```suggestion\r\n  <svg viewBox=""0 0 48 48"" fill=""currentColor"" {...props}>\r\n```\r\n\r\nOtherwise the parameter is unused.', 'comment_created': datetime.datetime(2023, 9, 27, 10, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1338403508, 'comment_body': '```suggestion\r\n  <svg viewBox=""0 0 520 520"" fill=""currentColor"" {...props}>\r\n    <path d=""M70 0C31 0 0 31 0 70v380c0 39 31 70 70 70h380c39 0 70-31 70-70V70c0-39-31-70-70-70H70zm189 65c11 0 21 4 28 12 8 8 12 18 12 29s-4 21-12 29c-7 8-17 12-28 12s-21-4-29-12-12-18-12-29 4-21 12-29 18-12 29-12zm-33 119h5c18 0 32 5 44 14 12 10 18 25 18 45v198h-3l-23-3c-7-2-14-5-21-10-6-4-11-10-15-17-4-8-5-17-5-28V184z""/>\r\n  </svg>\r\n```\r\n\r\n- Optimised the path\r\n- Added the `{...props}`, otherwise it\'s an unused argument\r\n- Removed the `xmlns`, it isn\'t needed in HTML\r\n- Removed the clip-path - it\'s ok to use clip-paths, but remember that `id=""a""` would be going into the document, and IDs have document scope. As it was, the icon would likely weirdly break if there was ever something else with `id=""a""` (probably another icon that uses the same pattern).', 'comment_created': datetime.datetime(2023, 9, 27, 10, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1338414685, 'comment_body': '```suggestion\r\n  /* Only show the focus ring on keyboard interaction */\r\n```', 'comment_created': datetime.datetime(2023, 9, 27, 10, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1338419623, 'comment_body': 'I think we decided that the content of the model should be the children of the modal?', 'comment_created': datetime.datetime(2023, 9, 27, 10, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1338420819, 'comment_body': ""I don't think it needs to stop immediate propogation?"", 'comment_created': datetime.datetime(2023, 9, 27, 10, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1338424007, 'comment_body': 'This should be a heading element. `<h1>` seems fine.', 'comment_created': datetime.datetime(2023, 9, 27, 10, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1338424298, 'comment_body': '```suggestion\r\n              <RoundedCrossIcon/>\r\n```', 'comment_created': datetime.datetime(2023, 9, 27, 10, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1338424687, 'comment_body': '```suggestion\r\n        class={style.modalDialog}\r\n```', 'comment_created': datetime.datetime(2023, 9, 27, 10, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1338425449, 'comment_body': ""I don't think `stopImmediatePropagation` is needed"", 'comment_created': datetime.datetime(2023, 9, 27, 10, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1338427415, 'comment_body': ""```suggestion\r\n    anim.finished.then(() => this._closeOnTransitionEnd());\r\n```\r\n\r\nUsing the promise makes it clearer that we only expect this to happen once. Also, it avoids passing an event into a function that doesn't expect it. https://jakearchibald.com/2021/function-callback-risks/"", 'comment_created': datetime.datetime(2023, 9, 27, 10, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1338428496, 'comment_body': ""I think it's ok to assume `dialogElement` is there, since this component never presents a state where it isn't. Other instances of this can be skipped too."", 'comment_created': datetime.datetime(2023, 9, 27, 10, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1338431011, 'comment_body': 'Let\'s change this to ""label"" or something that better describes its usage.', 'comment_created': datetime.datetime(2023, 9, 27, 10, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1338431253, 'comment_body': '```suggestion\r\n          <InfoIcon/>\r\n```', 'comment_created': datetime.datetime(2023, 9, 27, 10, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1338431532, 'comment_body': ""I don't think `stopImmediatePropagation` is needed."", 'comment_created': datetime.datetime(2023, 9, 27, 10, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1338432130, 'comment_body': ""This can probably be skipped, as it's guaranteed to be there."", 'comment_created': datetime.datetime(2023, 9, 27, 10, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1368154123, 'comment_body': ""Nice catch with the `id`! I guess I've never really considered when the downloaded SVG has attributes that might interfere with the code, I'll keep that in mind "", 'comment_created': datetime.datetime(2023, 10, 23, 5, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}]","[{'commit_sha': '0159f2364cd8b5fcd99a3306fa4d9724f22e535e', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dd67bcd5c0cb0b31e4dec884eff096d0ad96382', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b4d8936f4a6aa566f949eb775d178eeb9acaa7e', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89f94f756341fbd5931e41e8ca3b0152262bc8e2', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e98cab9cf938854b5f74eb9c7db956c576223a3', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1337d24d58be9bb2f4e2a84d93353a900e267d7', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9e2c30025b889552bc4baf1fd31213af0cddcf1', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1875a55d040e3cbba17a8c04a8fa79b0ef23c1d', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b66ec294fabd7e82251d69293179e616b74617c1', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fefe3d3545aa497f78b24bb372945e54beecd00c', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eea18028967b9d8d00a9ccafcd1bc412119d6f68', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc5b15c7a954456797f14b10af54a75b5352880b', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd766ecb290f6f635f33a49fd6d789e4fb84bff14', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e4e8f2a5354a0d99dd90ef3016f53ff08005de4', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6adf4bea004451d15d68f238a42945aac2c301a7', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cdf594f4fc7c733253acf65ee108d29b84d0b47', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36c646eb64fe7fa8576e6997a414f36f0c337bbf', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a25f09385c146e52c27d7ca44c92e9d06b4a79d0', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9391d01d4a62ccb271a408dc08ee008acacdd9e', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8511b8f7f1c7d469e5c4ec16c4e21c1cdebc8da7', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '313d06fee4db16d8411928c90ad7573406af388d', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84c19ca5c9e3bbb58b9e3fe33dba4377b5e956ed', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '365021cf27cbb9e7c0deedf540b2e6f0f7348551', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}]",Aryan Pingle,49340972,,User,,44,,29,54
1558823335,Adding the Quite OK Image (QOI) Codec,"Adds the [QOI (Quite OK Image Format) codec](https://github.com/phoboslab/qoi) to Squoosh.

QOI is a lossless, super-fast codec that is stupidly simple to understand and implement. It's written by a single individual, yet manages to hold its own against giants like PNG in terms of compression ratios.
This PR adds the original (and final) version of QOI, but there are more performant variants of QOI out there - I highly encourage future contributors to try adding them to Squoosh!

IMO this is a great way to showcase how easy it is to add codecs to the codebase, without having to worry about platforms and compatibility.",True,1384,https://api.github.com/repos/GoogleChromeLabs/squoosh/pulls/1384,https://github.com/GoogleChromeLabs/squoosh/pull/1384,closed,295,0,19,12,0,8,0,0,[],2023-10-16 15:09:16+00:00,2023-10-20 08:29:00+00:00,321584.0,"3 days, 17:19:44","[{'comment_id': 1363651911, 'comment_body': 'We should make `channels` configurable via `options` (`3` and `4` are valid values)! If there is no transparency (i.e. 3 channels), the resulting image file should get smaller. \r\n\r\nWhile we are at it, let’s make `colorspace` configurable as well.', 'comment_created': datetime.datetime(2023, 10, 18, 10, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1363656008, 'comment_body': 'This is leaking memory. From the `qoi.h::qoi_encode()` docs:\r\n\r\n> The returned qoi data should be free()d after use.\r\n\r\nIt’s not a big deal as we are killing the Wasm modules quite regularly, but if someone is encoding really big images in fast succession, it could lead to an OOM error.\r\n\r\n```suggestion\r\n      Uint8Array.new_(typed_memory_view(compressedSizeInBytes, (const uint8_t*)encodedData));\r\n      free(encodedData);\r\n```', 'comment_created': datetime.datetime(2023, 10, 18, 10, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1363656567, 'comment_body': 'Memory leak here! See comment in encoder for explanation.\r\n```suggestion\r\n      decodedWidth, decodedHeight);\r\n   free(rgba);\r\n```', 'comment_created': datetime.datetime(2023, 10, 18, 10, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1363684219, 'comment_body': 'As @jakearchibald said on chat: It’d be idea if the code would automatically use 3-channel mode if there are no transparent pixels.', 'comment_created': datetime.datetime(2023, 10, 18, 11, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1363702213, 'comment_body': 'Ohh, nice catch! Committing your suggestion directly 👍 ', 'comment_created': datetime.datetime(2023, 10, 18, 11, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1363732903, 'comment_body': 'Nice catch again, committing this directly', 'comment_created': datetime.datetime(2023, 10, 18, 11, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1363951312, 'comment_body': ""Turns out a side-effect of QOI's simplicity is that it can't encode RGB data differently from RGBA. Pretty much just sets the alpha to `255` and the source image's channels matter only during decoding. So yeah, using only 3 channels ends up with the same compressed size as if you use all 4 channels (for opaque images)."", 'comment_created': datetime.datetime(2023, 10, 18, 14, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1364566152, 'comment_body': 'You are right. I read trhe source wrong. Ignore me ;D', 'comment_created': datetime.datetime(2023, 10, 18, 21, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}]","[{'commit_sha': 'd2a656f0bbfd75d9211081783917cc34880d5ec1', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a1bcec5afc4c799fcf303741f19cc6a149e1285', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eaa04c8afa1186dd30b3c12acbbc468e866533a', 'committer_username': 'surma', 'committer_name': 'Surma', 'committer_email': 'surma@surma.dev', 'commit_date': datetime.datetime(2010, 4, 1, 13, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37cc2363074d40a2742dd3f52d07ad8cd6ccc7a0', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71f341923aed48d62f7580712b69e2e35484e548', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '003d5d125cd34b7be4e6620cd84840582bec787d', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1021aa2582efa7283ee6f408bab0d44be70cc539', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16c4eaeca46ed2807d6220e882c651ec0829ef72', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa6d61f4cb89938174e5729a4b4cea2dd62ee3c', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '921888c7c0ac535561a0492978777d8a260f38bb', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b330cd55c5d57b8090f8b4026c8578549bf832a', 'committer_username': 'jakearchibald', 'committer_name': 'Jake Archibald', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 9, 14, 32, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '369d6f45a064bc9541ccea6c6594bcfa967dc9d2', 'committer_username': 'jakearchibald', 'committer_name': 'Jake Archibald', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 9, 14, 32, 50, tzinfo=datetime.timezone.utc)}]",Aryan Pingle,49340972,,User,,44,,29,54
1517036967,Update libavif,"* Update libavif for improved compression and speed
* v1.0.0 deprecates usage of min and max-quantizers; we use `quality` and `qualityAlpha` instead
* Renamed `maxSpeed` to `MAX_EFFORT` for better readability",True,1381,https://api.github.com/repos/GoogleChromeLabs/squoosh/pulls/1381,https://github.com/GoogleChromeLabs/squoosh/pull/1381,closed,197,101,19,24,18,71,0,0,[],2023-09-15 09:44:30+00:00,2024-01-24 08:04:34+00:00,11312404.0,"130 days, 22:20:04","[{'comment_id': 1327106072, 'comment_body': 'Can you move this back into a global variable `maxQuality` or something?', 'comment_created': datetime.datetime(2023, 9, 15, 10, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1327106923, 'comment_body': 'I know this wasn’t the case previously, but it really should have been 😅 \r\n\r\n```suggestion\r\n                max={maxQuality - 1}\r\n```\r\n\r\nSame below!', 'comment_created': datetime.datetime(2023, 9, 15, 10, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'surma', 'type': 'User'}, {'comment_id': 1327117908, 'comment_body': ""Yep that'd be easier to read, on it!"", 'comment_created': datetime.datetime(2023, 9, 15, 10, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1337761720, 'comment_body': '1. Remove or update the comments at lines 1-2. You are now using official libavif and libaom releases, rather than the stable snapshots in google3/third_party/libavif/METADATA and google3/third_party/libaom/METADATA\r\n\r\n2. Consider adding a comment to note that this hash is v1.0.1.\r\n\r\n3. The latest libaom release is v3.7.0. So you can also update libaom to v3.7.0 (line 6) in a separate CL.', 'comment_created': datetime.datetime(2023, 9, 26, 20, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337776661, 'comment_body': 'Please rename the `cqLevel` and `cqAlphaLevel` members to `quality` and `qualityAlpha`, respectively.\r\n\r\nIn the comment at line 13, change ""cqLevel"" to ""quality"".', 'comment_created': datetime.datetime(2023, 9, 26, 20, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337780298, 'comment_body': 'Change lines 61-63 from:\r\n\r\n```\r\n  bool lossless = options.cqLevel == AVIF_QUANTIZER_LOSSLESS &&\r\n                  options.cqAlphaLevel <= AVIF_QUANTIZER_LOSSLESS &&\r\n                  format == AVIF_PIXEL_FORMAT_YUV444;\r\n```\r\n\r\nto\r\n\r\n```\r\n  bool lossless = options.quality == AVIF_QUALITY_LOSSLESS &&\r\n                  (options.qualityAlpha == -1 || options.qualityAlpha == AVIF_QUALITY_LOSSLESS) &&\r\n                  format == AVIF_PIXEL_FORMAT_YUV444;\r\n```', 'comment_created': datetime.datetime(2023, 9, 26, 20, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337784606, 'comment_body': 'At line 65, check if the `avifImageCreate()` call returns a null pointer?', 'comment_created': datetime.datetime(2023, 9, 26, 21, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337787023, 'comment_body': 'At line 79, check the return value of `avifImageRGBToYUV()`.', 'comment_created': datetime.datetime(2023, 9, 26, 21, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337788868, 'comment_body': 'Delete line 87: `avifEncoderSetCodecSpecificOption(encoder, ""end-usage"", ""q"");`\r\n\r\nThis is the default now.', 'comment_created': datetime.datetime(2023, 9, 26, 21, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337789440, 'comment_body': 'At line 88, check the return value of `avifEncoderSetCodecSpecificOption()`.', 'comment_created': datetime.datetime(2023, 9, 26, 21, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337791664, 'comment_body': 'Change lines 91-94 from\r\n\r\n```\r\n    encoder->quality = options.cqLevel;\r\n    if (options.cqAlphaLevel != -1) {\r\n      encoder->qualityAlpha = options.cqAlphaLevel;\r\n    }\r\n```\r\n\r\nto\r\n\r\n```\r\n    encoder->quality = options.quality;\r\n    if (options.qualityAlpha == -1) {\r\n      encoder->qualityAlpha = options.quality;\r\n    } else {\r\n      encoder->qualityAlpha = options.qualityAlpha;\r\n    }\r\n```\r\n\r\nNote that this code can also be used in the `if (lossless)` case (lines 84-85).', 'comment_created': datetime.datetime(2023, 9, 26, 21, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337794074, 'comment_body': 'Change line 96 from\r\n\r\n```\r\n    if (options.tune == 2 || (options.tune == 0 && options.cqLevel <= 32)) {\r\n```\r\n\r\nto\r\n\r\n```\r\n    if (options.tune == 2 || (options.tune == 0 && options.quality >= 50)) {\r\n```', 'comment_created': datetime.datetime(2023, 9, 26, 21, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337796000, 'comment_body': 'Change lines 127-128 from\r\n\r\n```\r\n      .field(""cqLevel"", &AvifOptions::cqLevel)\r\n      .field(""cqAlphaLevel"", &AvifOptions::cqAlphaLevel)\r\n```\r\nto\r\n\r\n```\r\n      .field(""quality"", &AvifOptions::quality)\r\n      .field(""qualityAlpha"", &AvifOptions::qualityAlpha)\r\n```', 'comment_created': datetime.datetime(2023, 9, 26, 21, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337798325, 'comment_body': 'Change lines 21-22 from\r\n\r\n```\r\n  cqLevel: 50,\r\n  cqAlphaLevel: -1,\r\n```\r\n\r\nto\r\n\r\n```\r\n  quality: 50,\r\n  qualityAlpha: -1,\r\n```\r\n', 'comment_created': datetime.datetime(2023, 9, 26, 21, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337800301, 'comment_body': 'Change `""99""` to `{MAX_QUALITY - 1} // MAX_QUALITY would mean lossless`?\r\n\r\nSee line 194.', 'comment_created': datetime.datetime(2023, 9, 26, 21, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337801349, 'comment_body': 'Change `cqLevel` to `quality`', 'comment_created': datetime.datetime(2023, 9, 26, 21, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337803101, 'comment_body': ""Change lines 81-82 from\r\n\r\n```\r\n        ? options.cqAlphaLevel\r\n        : defaultOptions.cqLevel,\r\n```\r\n\r\nto\r\n\r\n\r\n```\r\n        ? options.qualityAlpha\r\n        : defaultOptions.quality,\r\n```\r\n\r\nNote: I don't know the distinction between `options` and `defaultOptions`."", 'comment_created': datetime.datetime(2023, 9, 26, 21, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337804351, 'comment_body': 'In line 84:\r\n\r\n```\r\n        options.subsample === 0 || lossless\r\n```\r\n\r\nIs the `options.subsample === 0` check correct? `options.subsample === 0` means 4:0:0 (monochrome). I wonder if the check should be `options.subsample === -1`.\r\n\r\nAlso, if `lossless` is true, it seems that `subsample` should be set to 3 (4:4:4).', 'comment_created': datetime.datetime(2023, 9, 26, 21, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337805837, 'comment_body': 'Change `cqLevel` to `quality`.', 'comment_created': datetime.datetime(2023, 9, 26, 21, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337806237, 'comment_body': 'In line 132, change `cqAlphaLevel` to `qualityAlpha`.', 'comment_created': datetime.datetime(2023, 9, 26, 21, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1337806723, 'comment_body': 'Change `alphaLevel` to `alphaQuality` or `qualityAlpha`?', 'comment_created': datetime.datetime(2023, 9, 26, 21, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1338059923, 'comment_body': 'Sure thing. I saw [this line](https://github.com/AOMediaCodec/libavif/blob/fc592f01f88acdf44bc7019cc78c850485120f38/CHANGELOG.md?plain=1#L128) in the changelogs that mentioned libaom version 3.6.1, so how tightly coupled are libavif and libaom releases? (just for reference)', 'comment_created': datetime.datetime(2023, 9, 27, 5, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1338061863, 'comment_body': ""Ooh nice catch, I'm on it 👍 "", 'comment_created': datetime.datetime(2023, 9, 27, 5, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1338066470, 'comment_body': ""`options` is the user-selected codec parameters, `defaultOptions` is just the default parameters for the codec when it is selected for the first time. I'll change the field names and make sure they match correctly."", 'comment_created': datetime.datetime(2023, 9, 27, 5, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1338074678, 'comment_body': ""Hmm, it turns out we aren't even exposing options 0 and 2 in the form. My guess is it handles the default value (0) before the user selects anything? I'll look into it"", 'comment_created': datetime.datetime(2023, 9, 27, 5, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1338939296, 'comment_body': 'libaom 3.7.0 was released three days after libavif 1.0.0 was released. This is why you saw ""Update aom.cmd: v3.6.1"" in the changelog of libavif 1.0.0.\r\n\r\nlibavif and libaom releases are not coupled. libaom 3.7.0 is compatible with earlier libaom 3.x releases, so you can safely update to libaom 3.7.0. (And this is true for future libaom 3.x releases.)', 'comment_created': datetime.datetime(2023, 9, 27, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1338949245, 'comment_body': 'Thanks for the explanation. If `separateAlpha` is false, why do we use `defaultOptions.cqLevel` instead of `options.cqLevel`? The latter seems more reasonable to me.', 'comment_created': datetime.datetime(2023, 9, 27, 17, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1338960824, 'comment_body': 'Change lines 65-68 from\r\n\r\n```\r\n    const lossless =\r\n      options.cqLevel === 0 &&\r\n      options.cqAlphaLevel <= 0 &&\r\n      options.subsample == 3;\r\n```\r\n\r\nto\r\n\r\n```\r\n    const lossless =\r\n      options.quality === 100 &&\r\n      (options.qualityAlpha == -1 || options.qualityAlpha == 100) &&\r\n      options.subsample == 3;\r\n```', 'comment_created': datetime.datetime(2023, 9, 27, 17, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1338964604, 'comment_body': 'I wonder if the default value of `options.subsample` should be something other than 0 (e.g., 1 = 4:2:0), or an invalid value such as -1 to indicate that it is not initialized.', 'comment_created': datetime.datetime(2023, 9, 27, 17, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1339427351, 'comment_body': ""Yep sounds good to me too, I'll make the changes"", 'comment_created': datetime.datetime(2023, 9, 28, 2, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1340268168, 'comment_body': ""Sure, and on a related note is there any documentation for the possible key-value pairs for `avifEncoderSetCodecSpecificOption`? The inline documentation says:\r\n\r\n> See the codec documentation to know if a setting is persistent or applied only to the next frame.\r\n\r\nbut I couldn't find any references."", 'comment_created': datetime.datetime(2023, 9, 28, 14, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1343267191, 'comment_body': 'Here ""codec"" refers to the AV1 codec that libavif is configured to use. In Squoosh, libavif is configured to use only libaom as the AV1 codec. So ""See the codec documentation"" means ""See the libaom documentation"".\r\n\r\nNow comes the hard part. The libaom documntation for the possible key-value pairs for `avifEncoderSetCodecSpecificOption` is best obtained in one of two ways:\r\n- Read the source code in the libaom source file av1/arg_defs.c. This is the definitive way.\r\n- Run the libaom command-line program `aomenc --help`. This is more ""user friendly"", but has the drawback that `aomenc` has some additional command-line options that are not implemented using libaom\'s key-value API, so not every option in the `aomenc --help` page can be passed to `avifEncoderSetCodecSpecificOption`.\r\n\r\nMy apologies for the current state of libaom\'s documentation for key-value pairs. Do you have any specific questions about them? I will be happy to find the answers for you (and tell you how I find the answers so you will be able to do it yourself in the future).', 'comment_created': datetime.datetime(2023, 10, 2, 23, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1343720755, 'comment_body': ""No specific questions so far, though I'm sure I'll have some as I dive deeper into the codec. [The libaom file has pretty good documentation](https://aomedia.googlesource.com/aom/+/refs/heads/main/av1/arg_defs.c#145) so that answers the question!"", 'comment_created': datetime.datetime(2023, 10, 3, 8, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1375331948, 'comment_body': 'Optional: My colleague Vincent Rabaud recently added more cmake flags to speed up the build (by not generating the unneeded targets):\r\n\r\n```\r\n-DWEBP_BUILD_ANIM_UTILS=OFF -DWEBP_BUILD_CWEBP=OFF -DWEBP_BUILD_DWEBP=OFF -DWEBP_BUILD_GIF2WEBP=OFF -DWEBP_BUILD_IMG2WEBP=OFF -DWEBP_BUILD_VWEBP=OFF -DWEBP_BUILD_WEBPINFO=OFF -DWEBP_BUILD_LIBWEBPMUX=OFF -DWEBP_BUILD_WEBPMUX=OFF -DWEBP_BUILD_EXTRAS=OFF\r\n```', 'comment_created': datetime.datetime(2023, 10, 28, 23, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1375332118, 'comment_body': 'Nit: Delete the backslash `\\` ?\r\n\r\nAlso in line 93.', 'comment_created': datetime.datetime(2023, 10, 28, 23, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1375332475, 'comment_body': 'I noticed you pass `-DCONFIG_AV1_HIGHBITDEPTH=0` to libaom (e.g., in line 47). Do you only support bit depth 8 when encoding AVIF?', 'comment_created': datetime.datetime(2023, 10, 28, 23, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1375333917, 'comment_body': 'Remove the semicolon (;) from these two macros (line 8 and line 11), otherwise you have an extra semicolon when you use these macros like this:\r\n\r\n```\r\n    RETURN_NULL_IF_NOT_EQUALS(status, AVIF_RESULT_OK);\r\n```\r\n\r\nNote: The best way to define this kind of macro is to put them in a do {} while (false) block:\r\n\r\n```\r\n#define RETURN_NULL_IF_NOT_EQUALS(val1, val2) \\\r\n  do { \\\r\n    if (val1 != val2)                           \\\r\n      return val::null(); \\\r\n  } while (false)\r\n```', 'comment_created': datetime.datetime(2023, 10, 28, 23, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1375334146, 'comment_body': 'Nit: Use `nullptr` instead of `NULL`? Also in line 101.', 'comment_created': datetime.datetime(2023, 10, 28, 23, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1375334378, 'comment_body': 'enableSharpDownsampling => enableSharpYUVDownsampling', 'comment_created': datetime.datetime(2023, 10, 28, 23, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1375335070, 'comment_body': 'Delete lines 95-97? This looks like a debugging printf.', 'comment_created': datetime.datetime(2023, 10, 28, 23, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1375451745, 'comment_body': 'Nit: Add `#include <string>` at the beginning of this file for `std::to_string`.', 'comment_created': datetime.datetime(2023, 10, 29, 14, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1375452339, 'comment_body': ""Nit: We should also prefix this with `color:` as you did in line 130. The alpha channel in AVIF is represented by a separate monochrome image, which doesn't have chroma planes."", 'comment_created': datetime.datetime(2023, 10, 29, 14, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1375454170, 'comment_body': ""`aqMode` (line 39) doesn't seem to be used in codecs/avif/enc/avif_enc.cpp. Please double check."", 'comment_created': datetime.datetime(2023, 10, 29, 15, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1375454520, 'comment_body': 'Nit: Add ""YUV"" to the name of this boolean: enableSharpYUVDownsampling', 'comment_created': datetime.datetime(2023, 10, 29, 15, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1375455021, 'comment_body': ""I may have asked you about this line before, but I still don't understand this line (specifically, why do we use `defaultOptions.quality` if `lossless` is true). It would be good to add a comment.\r\n\r\nAlso, `defaultOptions.quality` seems to be 50 (see src/features/encoders/avif/shared/meta.ts). The quality for lossless should be 100, not 50."", 'comment_created': datetime.datetime(2023, 10, 29, 15, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1375455527, 'comment_body': '""alphaLevel"" seems like a typo. I think this comment should point out that -1 means ""set qualityAlpha to quality"".', 'comment_created': datetime.datetime(2023, 10, 29, 15, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1375457436, 'comment_body': 'Why do we use `defaultOptions` here? We use `options` everywhere else.', 'comment_created': datetime.datetime(2023, 10, 29, 15, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1375499675, 'comment_body': ""Sure thing. I'll update this comment with the speed improvements as well."", 'comment_created': datetime.datetime(2023, 10, 29, 19, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1375501294, 'comment_body': 'Yep, for all codecs on Squoosh.', 'comment_created': datetime.datetime(2023, 10, 29, 19, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1375501971, 'comment_body': ""Ahh gotcha. I suppose without that it would've failed for compound `if` statements."", 'comment_created': datetime.datetime(2023, 10, 29, 19, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1375504322, 'comment_body': ""Yep it's an obsolete parameter, removing it."", 'comment_created': datetime.datetime(2023, 10, 29, 20, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1375513383, 'comment_body': ""By default, we don't use the lossless mode so we keep the quality at a _reasonable_ 50. Agreed, using `defaultOptions.quality` seems wrong here.\r\n\r\n<hr>\r\n\r\n@jakearchibald correct me if I'm wrong: There are are two situations where we want to generate the encoding state:\r\n\r\n1. When the component is mounted for the first time - we use `getDerivedStateFromProps` to generate the state as a function of the props (which will be `defaultOptions`)\r\n2. When any input changes - we use the `_inputChange` function to set the new encoding state.\r\n\r\nSo yeah I think we can completely remove `defaultOptions` from this file because it'll be equivalent to using `props.options`. Also, \r\n\r\n```typescript\r\nconst quality = lossless ? defaultOptions.quality : options.quality;\r\n```\r\n\r\ncan be removed? Because `lossless` will be true iff `options.quality` is 100 anyway."", 'comment_created': datetime.datetime(2023, 10, 29, 21, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1375513508, 'comment_body': ""Yep it is, I'm on it"", 'comment_created': datetime.datetime(2023, 10, 29, 21, 13, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1376169723, 'comment_body': ""Confirmed, it's around 2x faster with these flags. Adding them now!"", 'comment_created': datetime.datetime(2023, 10, 30, 12, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1376766829, 'comment_body': 'I feel the variable name is pretty wordy even now. Changing it to `enableSharpYUV`, that should make it more readable IMO.', 'comment_created': datetime.datetime(2023, 10, 30, 20, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1378635411, 'comment_body': 'Remember that this is UI state, not encoder state.\r\n\r\nWhat if:\r\n\r\n1. The user changes the quality slider to 30.\r\n2. The user checks the lossless checkbox (removing the quality slider).\r\n3. The user unchecks the lossless checkbox (brining back the quality slider).\r\n\r\nWhat should the quality slider be? 100 or 30?\r\n\r\nI feel strongly that it should be 30. The quality slider in the UI is only used for lossy quality control, so it should be returned to the last state the user set it to. They checked ""lossless"", sure, but I don\'t think that means the quality slider is set to 100 when the user returns to lossy encoding.\r\n\r\nSo, if we\'re going to return it to a value of 30, we need to store that state somewhere, and it\'s stored in the `quality` UI state.\r\n\r\nWhen deriving the `EncodeOptions`, the `quality` UI state is ignored when the intended encode is lossless (see the code in `_inputChange`).\r\n\r\n`getDerivedStateFromProps` performs the initial conversion from encode state to UI state. If the incoming encode options are lossless, then we need to figure out what to set the quality slider to if it\'s shown, hence:\r\n\r\n```ts\r\nconst quality = lossless ? defaultOptions.quality : options.quality;\r\n```\r\n\r\nThis code sets the quality slider to `defaultOptions.quality` if the incoming encode options are lossless. This avoids the quality slider being set to 100, which doesn\'t make sense as a default for a slider related to lossy quality.', 'comment_created': datetime.datetime(2023, 11, 1, 10, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1378701343, 'comment_body': ""@jakearchibald  Ah right, if it's lossless then the quality should just be whatever it was before and the encoder should be given `100` without changing the state.\r\n\r\nOn a related note, I think\r\n\r\n```typescript\r\nconst quality = lossless ? defaultOptions.quality : options.quality;\r\n```\r\n\r\nis redundant anyway because we're using `getDerivedStateFromProps()` only when the AVIF codec is selected, so `options` will be equal to `defaultOptions`. I've removed this line in the latest commit and it still (correctly) preserves the original `quality` before toggling lossless mode. "", 'comment_created': datetime.datetime(2023, 11, 1, 11, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1379141202, 'comment_body': 'Optional: You can merge these two macros into `RETURN_NULL_IF_FALSE` that takes a conditional expression as the argument.', 'comment_created': datetime.datetime(2023, 11, 1, 18, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1379151295, 'comment_body': 'I believe we can omit -DAVIF_LOCAL_LIBSHARPYUV=ON in the decoding-only build. Sharp YUV is only used in the RGB-to-YUV conversion, which is only used when preparing the YUV input to the AVIF encoder.', 'comment_created': datetime.datetime(2023, 11, 1, 18, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1379154003, 'comment_body': 'Nit: I suggest moving the declaration of `output` (currently at line 63) right before this line.', 'comment_created': datetime.datetime(2023, 11, 1, 18, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1379156666, 'comment_body': ""Add `#include <memory>` (because we're using `std::unique_ptr` now)."", 'comment_created': datetime.datetime(2023, 11, 1, 18, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1379160630, 'comment_body': 'In a follow-up pull request, we should look into using the new `autoTiling` option of the AVIF encoder.\r\n\r\nI suggest Squoosh set `autoTiling` to `AVIF_TRUE` by default. (The default of `autoTiling` in libavif is `AVIF_FALSE` for backward compatibility.) The Squoosh UI can have a ""manual tiling"" box, which when checked,  shows the `tileRowsLog2` and `tileColsLog2` fields (both default to 0, meaning no tiling).', 'comment_created': datetime.datetime(2023, 11, 1, 18, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1379163250, 'comment_body': 'Nit: ""generated image"" isn\'t quite accurate. This is the input image, in the YUV format.', 'comment_created': datetime.datetime(2023, 11, 1, 18, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1379219029, 'comment_body': 'Are you sure that still works when copying settings from one side to the other?', 'comment_created': datetime.datetime(2023, 11, 1, 19, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1379801775, 'comment_body': ""Compare these steps on this deploy vs live:\r\n\r\n1. Open demo image\r\n2. On the right-hand side, select AVIF\r\n3. On the right-hand side, select lossless\r\n4. Copy settings to the left side (using the [< >] icon)\r\n5. On the left-hand side, deselect lossless\r\n\r\nOn squoosh.app this gives you a default quality setting. In this PR it gives you a quality of 100.\r\n\r\nI'm pretty sure this is because you removed that line, which would use `defaultOptions.quality` if the initial settings are lossless."", 'comment_created': datetime.datetime(2023, 11, 2, 9, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jakearchibald', 'type': 'User'}, {'comment_id': 1380028487, 'comment_body': 'Ahh I see what you mean. Reverting the change.', 'comment_created': datetime.datetime(2023, 11, 2, 12, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1380032948, 'comment_body': ""That's so much better than the current macro LOL, thank you!"", 'comment_created': datetime.datetime(2023, 11, 2, 12, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1380037515, 'comment_body': ""Gotcha, I'll try to add it to this PR or at least make raise an issue for it. I assume `autoTiling` automatically chooses the _best_ `tileRowsLog2` and `tileColsLog2`, is there any more documentation about it that I can link to?"", 'comment_created': datetime.datetime(2023, 11, 2, 12, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}, {'comment_id': 1380425874, 'comment_body': 'Note: I probably would not use a macro that saves only one line. But some people like to use this kind of macro so that the main flow of the code is not cluttered with error handling code.', 'comment_created': datetime.datetime(2023, 11, 2, 16, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1380444054, 'comment_body': 'Unless this requires just simple changes, I suggest filing an issue for this and implementing this in a follow-up pull request. The review of this pull request has been going on for a while. We need to watch out for ""code review fatigue.""\r\n\r\nYou understand `autoTiling` correctly. The `autoTiling` algorithm may be tweaked in the future, so we didn\'t document the current algorithm in the public header avif/avif.h. You can find the current algorithm in libavif/src/write.c:\r\n\r\n```\r\n    if (encoder->autoTiling) {\r\n        // Use as many tiles as allowed by the minimum tile area requirement and impose a maximum\r\n        // of 8 tiles.\r\n        const int threads = 8;\r\n        avifSetTileConfiguration(threads, firstCell->width, firstCell->height, &encoder->data->tileRowsLog2, &encoder->data->tileColsLog2);\r\n    }\r\n```\r\n\r\nI do think all the automatic tiling algorithms have some common elements, such as imposing a minimum tile area or tile width and height, and potentially imposing a maximum number of tiles. But I am not sure if you need to mention this. You can, however, say that the use of tiles makes it easier for the decoder to decode an AVIF image with multiple threads in parallel.', 'comment_created': datetime.datetime(2023, 11, 2, 16, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wantehchang', 'type': 'User'}, {'comment_id': 1382160661, 'comment_body': ""Yep that was my line of thinking. I'm pretty sure we'll be repeating that line again for other optimizations, so it's better to just have a macro for it."", 'comment_created': datetime.datetime(2023, 11, 3, 20, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aryanpingle', 'type': 'User'}]","[{'commit_sha': '47f874677e3cf72b79193df1f676a851c9e76f46', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8804b1e4a0306edea2fd3e0f9f62582f716a823', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82658c703fa22defda534a8ba91f3ba10864fd34', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '642ac6d4f8fc4e30b88d08a71b36b76f24f5d145', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96da59f631d16929e744803ab241062e6cebacc9', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5a3f632cd1138d408bc4ed77f03c8cab1eb1506', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1f40302fe51c7259af9fcce08fc4e6bf12f65ae', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ed34e101cf4b0883222b46730cf0b1f2e7a7066', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '625eee2df3f14aac8dff4cb7c787b1d9e14a4d62', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b3f791723033bebe54ef903ad42f07628992853', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f27d524d6c20a25e9810509c50ca74c737b0936a', 'committer_username': 'surma', 'committer_name': 'Surma', 'committer_email': 'surma@surma.dev', 'commit_date': datetime.datetime(2010, 4, 1, 13, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47cd47e0a66dc61e2adba36eb51ccba8b978d9d4', 'committer_username': 'surma', 'committer_name': 'Surma', 'committer_email': 'surma@surma.dev', 'commit_date': datetime.datetime(2010, 4, 1, 13, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25ea8b9e221fd1f7e29424ba1b86154ab5b27052', 'committer_username': 'surma', 'committer_name': 'Surma', 'committer_email': 'surma@surma.dev', 'commit_date': datetime.datetime(2010, 4, 1, 13, 22, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0413c66e2fd7209fcdc90f0468a5e9d6711ee2c9', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab79cafa42273c0d6613eef688cadbc7cdd3ba03', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41c4b30c64639668112eae2bb01189b61c4c351b', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faa14672ab4bfa73afcd45d17ae9b03e9c099f22', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd53823765ef51881fdf324396994ff48b18f1f5', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aad51d3f3e51465e9d7a8121284e29e50987ea01', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '699b9e0017c064986aac57f102f11a5aa12d389e', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cdc2463a645a72c98827830847fe466b6ee18bf', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7099d5e42d01ee0c3926d81559cb62c5a2605d6a', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa89d7c55dcc07c1613810dd2e668984b71f3a4e', 'committer_username': 'aryanpingle', 'committer_name': 'Aryan Pingle', 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 6, 12, 32, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '795e3957bbd7d5be1d62cd72bca6d7308dbdf4ae', 'committer_username': 'jakearchibald', 'committer_name': 'Jake Archibald', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 9, 14, 32, 50, tzinfo=datetime.timezone.utc)}]",Aryan Pingle,49340972,,User,,44,,29,54

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
124303364,squoosh,GoogleChromeLabs/squoosh,TypeScript,1513,21562,242,71,1471,223,109,88,"[{'id': 2024110379, 'number': 1425, 'closed': datetime.datetime(2024, 8, 18, 18, 42, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 8, 17, 19, 15, 55, tzinfo=datetime.timezone.utc), 'time_taken': 84387.0, 'time_delta': '23:26:27', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 1710036815, 'number': 1399, 'closed': None, 'created': datetime.datetime(2024, 2, 3, 22, 14, 13, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 13, 'deletions': 2, 'state': 'open'}, {'id': 1558823335, 'number': 1384, 'closed': datetime.datetime(2023, 10, 20, 8, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 16, 15, 9, 16, tzinfo=datetime.timezone.utc), 'time_taken': 321584.0, 'time_delta': '3 days, 17:19:44', 'additions': 295, 'deletions': 0, 'state': 'closed'}, {'id': 1517036967, 'number': 1381, 'closed': datetime.datetime(2024, 1, 24, 8, 4, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 15, 9, 44, 30, tzinfo=datetime.timezone.utc), 'time_taken': 11312404.0, 'time_delta': '130 days, 22:20:04', 'additions': 197, 'deletions': 101, 'state': 'closed'}, {'id': 1509162029, 'number': 1380, 'closed': None, 'created': datetime.datetime(2023, 9, 10, 14, 20, 53, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 14, 'deletions': 0, 'state': 'open'}, {'id': 1501201369, 'number': 1379, 'closed': None, 'created': datetime.datetime(2023, 9, 4, 12, 22, 39, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 82, 'deletions': 29, 'state': 'open'}, {'id': 1495349572, 'number': 1378, 'closed': None, 'created': datetime.datetime(2023, 8, 30, 11, 27, 23, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 82, 'deletions': 29, 'state': 'open'}, {'id': 1389395250, 'number': 1369, 'closed': None, 'created': datetime.datetime(2023, 6, 12, 20, 22, 31, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 508, 'deletions': 22, 'state': 'open'}, {'id': 1374706295, 'number': 1366, 'closed': datetime.datetime(2023, 7, 11, 15, 16, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 1, 20, 6, 1, tzinfo=datetime.timezone.utc), 'time_taken': 3438625.0, 'time_delta': '39 days, 19:10:25', 'additions': 194, 'deletions': 25, 'state': 'closed'}, {'id': 1285724730, 'number': 1348, 'closed': datetime.datetime(2023, 4, 12, 16, 11, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 22, 11, 51, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1829988.0, 'time_delta': '21 days, 4:19:48', 'additions': 73, 'deletions': 3, 'state': 'closed'}, {'id': 1267435936, 'number': 1344, 'closed': datetime.datetime(2023, 9, 18, 0, 5, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 8, 7, 16, 6, tzinfo=datetime.timezone.utc), 'time_taken': 16735786.0, 'time_delta': '193 days, 16:49:46', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1259563393, 'number': 1335, 'closed': datetime.datetime(2023, 3, 2, 11, 42, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 1, 22, 58, 36, tzinfo=datetime.timezone.utc), 'time_taken': 45856.0, 'time_delta': '12:44:16', 'additions': 7, 'deletions': 0, 'state': 'closed'}]"
