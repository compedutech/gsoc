pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1364782176,feat: add support for timeframe in `KeptnMetric`,"Fixes #981

Changes made:
- Added `range.interval` field in `KeptnMetric`.
- Set the default value of `range.interval` to 5m.
- Added a validating webhook to check if `range.interval` can be parsed by https://pkg.go.dev/time#ParseDuration.",True,1471,https://api.github.com/repos/keptn/lifecycle-toolkit/pulls/1471,https://github.com/keptn/lifecycle-toolkit/pull/1471,closed,353,11,20,27,9,25,2,0,"[{'name': 'metrics-operator'}, {'name': 'helm'}]",2023-05-25 13:46:08+00:00,2023-06-22 05:28:52+00:00,2389364.0,"27 days, 15:42:44","[{'comment_id': 1209877147, 'comment_body': '```suggestion\r\n        name: metrics-webhook-service\r\n```', 'comment_created': datetime.datetime(2023, 5, 30, 8, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1209878331, 'comment_body': 'the name of this file also needs to be added to the `resources` list of the `kustomization.yaml` in the same directory ', 'comment_created': datetime.datetime(2023, 5, 30, 8, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1210276813, 'comment_body': 'I would use the Time type here instead of a string, similarly to what K8s does: https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/types.go#L188\r\nhttps://pkg.go.dev/time#Time', 'comment_created': datetime.datetime(2023, 5, 30, 13, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1210768414, 'comment_body': 'Oh, then how would https://pkg.go.dev/time#ParseDuration parse the interval? as it takes a `string` as an argument? Do we convert the variable `metav1.Time` to `string` over here using `s.Spec.Range.Interval.Time.Format(time.RFC3339)` or how?', 'comment_created': datetime.datetime(2023, 5, 30, 20, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1211650520, 'comment_body': ""my bad, you're right - this must be a string :) "", 'comment_created': datetime.datetime(2023, 5, 31, 12, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1211651178, 'comment_body': 'I think we can remove this comment :) ', 'comment_created': datetime.datetime(2023, 5, 31, 12, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1211651436, 'comment_body': 'nit\r\n```suggestion\r\n\t\ts.Name, \r\n\t\tallErrs\r\n\t)\r\n```', 'comment_created': datetime.datetime(2023, 5, 31, 12, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1211652142, 'comment_body': 'I would also add a case for empty string', 'comment_created': datetime.datetime(2023, 5, 31, 12, 38, 7, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1212030030, 'comment_body': 'Just wanted to confirm some things, I think some things are going wrong, please share your views on this @thisthat @bacherfl \r\n- During the below scenario, we are getting an error. \r\n```\r\nrange:\r\n  interval: """"\r\n```\r\n- During this scenario, the resource gets created, I think the deafult value is being taken over here i.e `5m`\r\n```\r\nrange:\r\n   interval: \r\n```\r\n- However if we dont provide the `range.interval` field, we are still getting error, I think this is wrong right? as we are supposed to make this `range.interval` feature optional.', 'comment_created': datetime.datetime(2023, 5, 31, 16, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1212782098, 'comment_body': 'Hi @rakshitgondwal - indeed, the range spec should be optional, so in my opinion we should not get an error if we do not provide it. Can you try to make the `Range` property of the `KeptnMetric` struct a pointer? I think this way we can keep this new property optional, and in the webhook we do the validation only if this property is `!= nil`', 'comment_created': datetime.datetime(2023, 6, 1, 8, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1212784134, 'comment_body': 'the files in `config/certmanager` can be removed as we do the certificate injection with our own cert-manager, based on the `keptn.sh/inject-cert` label', 'comment_created': datetime.datetime(2023, 6, 1, 8, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1212785251, 'comment_body': 'please also add a comment describing this property to support automatic doc generation for that one', 'comment_created': datetime.datetime(2023, 6, 1, 8, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1212786351, 'comment_body': 'i believe this file can also be removed', 'comment_created': datetime.datetime(2023, 6, 1, 8, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1213133054, 'comment_body': 'to reduce nesting, I suggest to arrange this a little bit\r\n```suggestion\r\n        if s.Spec.Range == nil {\r\n            return nil\r\n        }\r\n\t_, err := time.ParseDuration(s.Spec.Range.Interval)\r\n        if err != nil {\r\n\t        return field.Invalid(\r\n\t\t        field.NewPath(""spec"").Child(""range"").Child(""interval""),\r\n\t\t        s.Spec.Range.Interval,\r\n\t\t        errors.New(""Forbidden! The time interval cannot be parsed. Please check for suitable conventions"").Error(),\r\n\t        )\r\n        }\r\n        return nil\r\n```', 'comment_created': datetime.datetime(2023, 6, 1, 13, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1213134288, 'comment_body': 'can you please also add a test for a metric where there is no `range` provided? this way we ensure that this new property is optional', 'comment_created': datetime.datetime(2023, 6, 1, 13, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1213135302, 'comment_body': ""let's also add a test case for a `KeptnMetricSpec` with the `Range` being `nil`"", 'comment_created': datetime.datetime(2023, 6, 1, 13, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1213440703, 'comment_body': 'Added test cases for:\r\n- if `Range == nil` \r\n- if `Range` is not provided\r\n\r\nNot sure if these are the same case, will remove `with-no-range` test case then. @bacherfl ', 'comment_created': datetime.datetime(2023, 6, 1, 17, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1217679423, 'comment_body': 'thanks for the additional tests - those two cases should be the same, so I think the `with-no-range` can be removed ', 'comment_created': datetime.datetime(2023, 6, 5, 8, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1217837672, 'comment_body': 'one final suggestion: Here I would suggest to call the `validateKeptnMetric`, to also get coverage for this method. Ideally, also the `Validate[Create/Delete/Update]()` methods should be covered, to maintain good test coverage', 'comment_created': datetime.datetime(2023, 6, 5, 10, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1217899917, 'comment_body': 'Can we add an extra test checking that the validation webhook fails if we apply a poorly formatted duration? ', 'comment_created': datetime.datetime(2023, 6, 5, 10, 57, 6, tzinfo=datetime.timezone.utc), 'commenter': 'RealAnna', 'type': 'User'}, {'comment_id': 1217908640, 'comment_body': 'what about using time.Duration here directly as a parameter type ? like we use it here https://github.com/keptn/lifecycle-toolkit/blob/main/operator/apis/lifecycle/v1alpha3/keptntask_types.go#L69\r\n\r\nThe advantage would be the possibility to validate the format and value (see the regex above the parameter) without the need to actually create an extra validation webhook, as it will be covered out-of-the-box by the default validation webhook', 'comment_created': datetime.datetime(2023, 6, 5, 11, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'odubajDT', 'type': 'User'}, {'comment_id': 1218067465, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 6, 5, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1218998435, 'comment_body': 'to reduce duplication and avoid a mismatch of types for test cases where a `nil` error is expected, i suggest the following:\r\n\r\n```suggestion\r\n\t\t\tvar s *KeptnMetric\r\n\t\t\tif tt.Spec.Range == nil {\r\n\t\t\t\ts = &KeptnMetric{\r\n\t\t\t\t\tObjectMeta: metav1.ObjectMeta{Name: tt.name},\r\n\t\t\t\t\tSpec:       KeptnMetricSpec{Range: tt.Spec.Range},\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\ts = &KeptnMetric{\r\n\t\t\t\t\tObjectMeta: metav1.ObjectMeta{Name: tt.name},\r\n\t\t\t\t\tSpec:       KeptnMetricSpec{Range: &RangeSpec{Interval: tt.Spec.Range.Interval}},\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\terr := s.validateKeptnMetric()\r\n\r\n\t\t\tif tt.want == nil {\r\n\t\t\t\trequire.Nil(t, err)\r\n\t\t\t} else {\r\n\t\t\t\trequire.Equal(t, tt.want, err)\r\n\t\t\t}\r\n```', 'comment_created': datetime.datetime(2023, 6, 6, 6, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1219004635, 'comment_body': 'Using `time.Duration` + the regex would have also been a valid solution, but imho the validation webhook provides the advantage of being able to test it in more detail  using the unit tests added in this PR (as opposed to the integration tests where we just check if a invalid metric results in an error, without further inspecting the error reason), so I would be fine with keeping this solution', 'comment_created': datetime.datetime(2023, 6, 6, 6, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1219672368, 'comment_body': '```suggestion\r\n  - command: kubectl apply -f badmetric.yaml\r\n```', 'comment_created': datetime.datetime(2023, 6, 6, 13, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}]","[{'commit_sha': 'd8f9370dd7c2016e75ef0ed24b53517dfc59de1e', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcc54a2c7db792dcfad7d2b7544415df2608f764', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d5740976112031ed661153d611b8650e5982178', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16cd62c9e8ad2e1b1e882ff0e708b5badf252e25', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c71934abc87464632cc352d929fb36ff8351c14', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f65d29fec44e08c2d5785f500d15aa838964788c', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35a3138bf1ccb2203869e2ecf959aa91576a8523', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b09e2f2fe444985a5984bd9c6f6d4c86310ba24f', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '074eaef27ef73cbb1bf1693ee1aa535116ec901f', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc176af654214118d4eff5bfd1a54c6b4468c519', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b56c00529d73747daf726e42bad0ca650b23709', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9272396e2f39c4bdaaba58d042a325060ab039bb', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93037d3c0154ecc3eaaf52c61e48b3e2b1eab4d0', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e0a67cecb6cfcfb88c699aa8e442a7ff31d4e57', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31e8e58f0b07cfc648088c655ba3bf2ca71e117f', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c944b76063e3f7e8bc69f07954b6594e077b54d', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e34b4c1c14260f165e372314d426d16d79c532a', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c23a41db3e3e743019a9793f2886d4a93f5e9d90', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4c9e1c1dec0f1c1bf23c75c0baa6b58bd7f7b79', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22f43b916767bf3abf8c8d6b0c1ed24866f6028a', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b255738c699af2348a14492861476c937eb480a5', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0d26b0046217c3f9adacbe98610dcc7cc82b08f', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72685812167f2d38108cf5f9141c924d78910b27', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49a0e204eb08c0e364352d70d21ac140da61ca19', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf44799953fffbb0954e70d8fdf067802529af9a', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '661e0db9847f1291a0c04658c4d5b2dde05b7208', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2beea9c7475e93e3aac11b49e382d46a93510629', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}]",Rakshit Gondwal,98955085,,User,,105,,27,112
1399630959,feat: update Prometheus API to query metrics over a range,"Partially Fixes (#1012) 
Dependency: #1471 

Changes made:
- Updated `prometheus.go` to query metrics over a time frame",True,1587,https://api.github.com/repos/keptn/lifecycle-toolkit/pulls/1587,https://github.com/keptn/lifecycle-toolkit/pull/1587,closed,182,37,2,17,5,13,1,0,[{'name': 'metrics-operator'}],2023-06-20 10:46:32+00:00,2023-06-30 05:23:03+00:00,844591.0,"9 days, 18:36:31","[{'comment_id': 1238006434, 'comment_body': 'I suggest to handle the different cases (with time range, without time range) in separate functions to keep this method easy to read. The log message indicating which query is being executed should then also moved into those (currently the generated query is logged a couple of lines above, but this will change depending if there is a time range or not)', 'comment_created': datetime.datetime(2023, 6, 22, 5, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1238029330, 'comment_body': 'please rename the return value `r` to something else, as this shadows the declaration of the pointer receiver', 'comment_created': datetime.datetime(2023, 6, 22, 5, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1241641870, 'comment_body': ""let's use the unix timestamp instead of the string representation of the timestamps"", 'comment_created': datetime.datetime(2023, 6, 26, 6, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1241643358, 'comment_body': 'as both the `EvaluateQuery...` functions are only used here, i think we can make them unexported', 'comment_created': datetime.datetime(2023, 6, 26, 6, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1241674673, 'comment_body': 'it seems like the `step` parameter must also be passed when using time range queries (https://prometheus.io/docs/prometheus/latest/querying/api/#range-queries).\r\n\r\nThis might also be the reason for why the integration tests are failing, as I\'ve found this in the logs:\r\n\r\n```\r\n2023-06-22T23:32:11Z\tERROR\tKeptnMetric Controller\tFailed to evaluate the query\t{""Response from provider was:"": """", ""error"": ""bad_data: invalid parameter \\""step\\"": zero or negative query resolution step widths are not accepted. Try a positive integer""}\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 6, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1241813279, 'comment_body': 'So should I convert the unix timestamp to string afterward like `strconv.FormatInt(startTime.Unix(),10)` because there\'s an error if we just passing the Unix timestamp over here\r\n```\r\ninvalid operation: ""Running query: /api/v1/query_range?query="" + metric.Spec.Query + ""&start="" + startTime.Unix() (mismatched types string and int64)\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 8, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1242009453, 'comment_body': 'ideally, we should log the query exactly as we send it to the api - To prevent this error, I would say using `fmt.Sprintf` might be the cleanest approach:\r\n\r\n```\r\nr.Log.Info(fmt.Sprintf(\r\n\t\t""Running query: /api/v1/query_range?query=%s&start=%d&end=%d"",\r\n\t\tmetric.Spec.Query,\r\n\t\tstartTime.Unix(), queryTime.Unix(),\r\n\t))\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 11, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1242055052, 'comment_body': 'What do you suggest keeping the `step` param as? I was trying to keep it as the `fetchIntervalSeconds`', 'comment_created': datetime.datetime(2023, 6, 26, 11, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1242247710, 'comment_body': '> What do you suggest keeping the `step` param as? I was trying to keep it as the `fetchIntervalSeconds`\r\n\r\nNot quite sure yet what the best value to user here tbh... Can you maybe try to get the response payloads for a range queries with different values for `step` and post them here? E.g. a query with a time range of `5min` and the step set to `fetchIntervalSeconds` and then to `5min`, i.e. the same as the time frame. Maybe that will give us further info what the best approach would be', 'comment_created': datetime.datetime(2023, 6, 26, 13, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1244043727, 'comment_body': 'I have used the `step` param as the `range.interval` as if we are to set it to `fetchIntervalSeconds`, we will get multiple values in our result and it would be later difficult for us to choose which value to display in the result field, thus I thought, we can modify this logic once we work on the aggregation functions later.', 'comment_created': datetime.datetime(2023, 6, 27, 16, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1245041542, 'comment_body': 'i suggest to name the `getResultForRange`/`getResultForNoRange` functions to `getResultForMatrix`/`getResultForVector` to better reflect what they are doing', 'comment_created': datetime.datetime(2023, 6, 28, 10, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1246286385, 'comment_body': '```suggestion\r\n\t// This logic should be changed, once we work onto the aggregation functions.\r\n```', 'comment_created': datetime.datetime(2023, 6, 29, 8, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1246302883, 'comment_body': 'There was seeminglyy an issue with formatting which lead to the check for the length of the result array not being reached (it was failing earlier after the `QueryRange`which returned an error). This payload should fix this:\r\n\r\n```suggestion\r\nconst promMultiPointPayloadWithRange = ""{\\""status\\"":\\""success\\"",\\""data\\"":{\\""resultType\\"":\\""matrix\\"",\\""result\\"":[{\\""metric\\"":{\\""__name__\\"":\\""kube_pod_info\\"",\\""container\\"":\\""kube-rbac-proxy-main\\"",\\""created_by_kind\\"":\\""DaemonSet\\"",\\""created_by_name\\"":\\""kindnet\\"",\\""host_ip\\"":\\""172.18.0.2\\"",\\""host_network\\"":\\""true\\"",\\""instance\\"":\\""10.244.0.24:8443\\"",\\""job\\"":\\""kube-state-metrics\\"",\\""namespace\\"":\\""kube-system\\"",\\""node\\"":\\""kind-control-plane\\"",\\""pod\\"":\\""kindnet-llt85\\"",\\""pod_ip\\"":\\""172.18.0.2\\"",\\""uid\\"":\\""0bb9d9db-2658-439f-aed9-ab3e8502397d\\""},\\""values\\"":[[1669714193.275,\\""1\\""]]},{\\""metric\\"":{\\""__name__\\"":\\""kube_pod_info\\"",\\""container\\"":\\""kube-rbac-proxy-main\\"",\\""created_by_kind\\"":\\""DaemonSet\\"",\\""created_by_name\\"":\\""kindnet\\"",\\""host_ip\\"":\\""172.18.0.2\\"",\\""host_network\\"":\\""true\\"",\\""instance\\"":\\""10.244.0.24:8443\\"",\\""job\\"":\\""kube-state-metrics\\"",\\""namespace\\"":\\""kube-system\\"",\\""node\\"":\\""kind-control-plane\\"",\\""pod\\"":\\""kindnet-llt85\\"",\\""pod_ip\\"":\\""172.18.0.2\\"",\\""uid\\"":\\""0bb9d9db-2658-439f-aed9-ab3e8502397d\\""},\\""values\\"":[[1669714193.275,\\""1\\""]]}]}}""\r\n```', 'comment_created': datetime.datetime(2023, 6, 29, 8, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}]","[{'commit_sha': '0be88bef57661baf7e4451c8d4e5dde730ba8890', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '169ae1a10873d886081a7b73f01c9227acde9a34', 'committer_username': 'bacherfl', 'committer_name': 'Florian Bacher', 'committer_email': 'florian.bacher@dynatrace.com', 'commit_date': datetime.datetime(2012, 8, 13, 9, 40, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ced0f6d6203fb80e923645dbd5049f4f8a5e0380', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aff709f0b11e706391258a82b0d29065f722fc13', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f36f005e42043d9c720079803759389982edeb16', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46947f6e5af0dc449504190a4b331ebc1f156ae9', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19e1d365643c52bd55494c39f551de552ab37424', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c5e232dd650e788641336c603ffb6f63858a30', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf1e6852715129e55843444311ebe37457c97199', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ad0a0e6d2ddaf53c5f7d3a2d2b6a80eade3592f', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2506a00850ba17930fedbaf3d002a1bac42628a', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a961ef1e656479d61d5c6cc2bbe89e19f56ccdf', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e3e781a7f3ae5d53c503a54f3a5df1bb314d511', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac9c8ee7149a5d2b3f55f97c02d1b3e175a98635', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd99e20fbca060700d12f141a0ec9f5d8122b1fe', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13e406b5cd3af6a410d33f6c5738316e142b6931', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dff5fd42478e04f0802d355c320833a1517f74a0', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}]",Rakshit Gondwal,98955085,,User,,105,,27,112
1405577595,feat: update Datadog API to query metrics for range,"Partially Fixes (https://github.com/keptn/lifecycle-toolkit/issues/1012)

Changes made:
- Updated `datadog.go` to query metrics over a time frame.
- Modified the tests accordingly.",True,1615,https://api.github.com/repos/keptn/lifecycle-toolkit/pulls/1615,https://github.com/keptn/lifecycle-toolkit/pull/1615,closed,179,57,2,11,3,2,1,0,[{'name': 'metrics-operator'}],2023-06-23 19:52:05+00:00,2023-07-25 13:00:00+00:00,2740075.0,"31 days, 17:07:55","[{'comment_id': 1255962565, 'comment_body': 'Since we might add more cases across the whole set of tests, I suggest having a slice instead of an array. The performance for testing is not a requirement, hence I would rather having a more easier to use code :) \r\n```suggestion\r\n\tmetrics := []metricsapi.KeptnMetric{\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 15, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1256199562, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2023, 7, 7, 17, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}]","[{'commit_sha': 'e698f8da9e47b11ec6d93e38bcddc380e3550b89', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2a33722130e9d953b63d64a3b65a1f3f4c8d047', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27a5e56adb686605205c07f6f5feffcf38acd5b2', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '383ecb7d40b57e37afcf6ceaf80c0b621eaa0a3e', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c675255b927f6a6a58c58780c166895b30e53a71', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '966799a90617e8642b2eb31b760a56284a497ccb', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9508fa02b548f8310999053cf40871d9455bde2c', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5575fc85b4eee0c46d0b587b6cc00f918d9b335', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea85be5c1816db8c047be9d369e836ae378ce96c', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90a28d44e202374d21e8a63ab697d9f08e25aa94', 'committer_username': 'bacherfl', 'committer_name': 'Florian Bacher', 'committer_email': 'florian.bacher@dynatrace.com', 'commit_date': datetime.datetime(2012, 8, 13, 9, 40, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88309470a5f3dd106e8711652ec6acf813b18ed8', 'committer_username': 'bacherfl', 'committer_name': 'Florian Bacher', 'committer_email': 'florian.bacher@dynatrace.com', 'commit_date': datetime.datetime(2012, 8, 13, 9, 40, 43, tzinfo=datetime.timezone.utc)}]",Rakshit Gondwal,98955085,,User,,105,,27,112
1416156619,feat: update Dynatrace provider to query metrics over a range,"Fixes #1012

Changes made:
- Update Dynatrace API to query metrics over a time range.
- Update the test cases to support this new time range field.",True,1658,https://api.github.com/repos/keptn/lifecycle-toolkit/pulls/1658,https://github.com/keptn/lifecycle-toolkit/pull/1658,closed,115,35,2,10,3,9,1,0,[{'name': 'metrics-operator'}],2023-07-01 14:44:51+00:00,2023-07-18 11:31:11+00:00,1457180.0,"16 days, 20:46:20","[{'comment_id': 1252564029, 'comment_body': 'please check if `metric.Spec.Range` is not `nil` first, otherwise this will lead to nil pointer accesses when there is no interval set in a `KeptnMetric`. ', 'comment_created': datetime.datetime(2023, 7, 5, 5, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1252892855, 'comment_body': 'Thank you, fixed it.', 'comment_created': datetime.datetime(2023, 7, 5, 10, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1254361297, 'comment_body': 'according to the DT API docs (https://www.dynatrace.com/support/help/dynatrace-api/environment-api/metric-v2/get-data-points), this should be:\r\n```suggestion\r\n\t\tqURL = baseURL + ""v2/metrics/query?metricSelector="" + query + ""?from=now-"" + metric.Spec.Range.Interval\r\n```\r\n\r\nThe `writtenSince` is only used in the endpoint for retrieving the available metrics. In this case, we are using the endpoint for retrieving their values, where the `from` parameter should be used\r\n\r\n', 'comment_created': datetime.datetime(2023, 7, 6, 12, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1255941524, 'comment_body': 'The parameter should be `from` according to the doc: https://www.dynatrace.com/support/help/dynatrace-api/environment-api/metric-v2/get-data-points\r\n\r\n```suggestion\r\n\t\tqURL = baseURL + ""v2/metrics/query?metricSelector="" + query + ""?from=now-"" + metric.Spec.Range.Interval\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 14, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1255946543, 'comment_body': ""I would keep it dynamic so we don't have to update this field each time we add an entry\r\n```suggestion\r\nfunc setupTest(objs ...client.Object) (KeptnDynatraceProvider, []metricsapi.KeptnMetric) {\r\n```"", 'comment_created': datetime.datetime(2023, 7, 7, 14, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1255946852, 'comment_body': 'Same here\r\n```suggestion\r\n\tobjects := []metricsapi.KeptnMetric{\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 14, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1255957115, 'comment_body': 'Few lines afterward, in the callback of the ""mocked"" DT API response (line 336~), it would be good to verify that the timeframe was correctly set checking that a `from` query parameter is available. \r\n\r\nSomething like:\r\n```\r\np := r.URL.Query().Get(""from"")\r\nrequire.NotEmpty(t, p)\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 14, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1256015620, 'comment_body': ""Oh, actually I referenced a different [doc](https://www.dynatrace.com/support/help/dynatrace-api/environment-api/metric-v2/get-all-metrics) for this param, but sure I'll change it. "", 'comment_created': datetime.datetime(2023, 7, 7, 15, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1257245552, 'comment_body': 'Added a new test case that covers this.', 'comment_created': datetime.datetime(2023, 7, 8, 11, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}]","[{'commit_sha': '21d68a38acf8e10ad6555c5d2c82640c2b6957a2', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b64aa21a632a577d1aafb89bd1a83f712ac8370', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e8e7a08f753527fc1aa368a5bf094b7476aa8e4', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b459db8f1f27bedfdac5c0a2c758423ee27fa73f', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c4358bbd0179181d891a68fb6dad6c237aee4a', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a29df353cb6124fc751112c60500ab4100eae8c2', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be9e28aec28c84f47bf56fed98ac88173f2090a9', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57428b27620437f8386655ca17a95aad404d7aaa', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '696f9d67a48dc75e1e3c1eea7482b0e0ff9f8a05', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eada6d5a9d6b5399208751c3a8d04d1c3e0a9ec6', 'committer_username': 'bacherfl', 'committer_name': 'Florian Bacher', 'committer_email': 'florian.bacher@dynatrace.com', 'commit_date': datetime.datetime(2012, 8, 13, 9, 40, 43, tzinfo=datetime.timezone.utc)}]",Rakshit Gondwal,98955085,,User,,105,,27,112
1423023641,feat: add `interval` field for `kubectl get KeptnMetric`,"Fixes #1677

Changes made:
- Introduced a new `interval` field for `kubectl get KeptnMetric`.
- This field has the value of `metric.spec.range.interval` field.

Some screenshots:

- With `range.interval` field defined
 
  ![Screenshot from 2023-07-06 20-04-01](https://github.com/keptn/lifecycle-toolkit/assets/98955085/2d2b04b8-1858-41f2-a72c-8601411bd2a3)

- Without a `range.interval` field defined

  ![Screenshot from 2023-07-06 20-05-08](https://github.com/keptn/lifecycle-toolkit/assets/98955085/fce2dfa6-33fd-4104-ac49-9a7d65a0df9d)
",True,1689,https://api.github.com/repos/keptn/lifecycle-toolkit/pulls/1689,https://github.com/keptn/lifecycle-toolkit/pull/1689,closed,4,0,2,1,4,0,1,0,[{'name': 'metrics-operator'}],2023-07-06 14:42:11+00:00,2023-07-10 07:11:51+00:00,318580.0,"3 days, 16:29:40",[],"[{'commit_sha': '4b184641e7fe0cf97c1bf6bfb42615e591a3da3c', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}]",Rakshit Gondwal,98955085,,User,,105,,27,112
1429287715,docs: document `timeframe` feature for `KeptnMetric`,"Fixes #1702

Updated https://main.lifecycle.keptn.sh/docs/yaml-crd-ref/metric/ to support the `range.interval` field.",True,1703,https://api.github.com/repos/keptn/lifecycle-toolkit/pulls/1703,https://github.com/keptn/lifecycle-toolkit/pull/1703,closed,36,1,4,5,5,6,2,0,"[{'name': 'documentation'}, {'name': 'metrics-operator'}]",2023-07-11 11:40:18+00:00,2023-07-19 05:42:50+00:00,669752.0,"7 days, 18:02:32","[{'comment_id': 1260764188, 'comment_body': ""```suggestion\r\nLet's suppose you set the `range.interval` field to be `5m`,\r\n```"", 'comment_created': datetime.datetime(2023, 7, 12, 7, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1260764510, 'comment_body': '```suggestion\r\nthe Keptn Metrics Operator would query the metrics for the\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 7, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1260778033, 'comment_body': 'Can we please describe the default behavior when the `.spec.range.interval` is not set ? Otherwise looks good :)', 'comment_created': datetime.datetime(2023, 7, 12, 8, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'odubajDT', 'type': 'User'}, {'comment_id': 1261263558, 'comment_body': 'If I recall correctly v1alpha1 does not have this parameter', 'comment_created': datetime.datetime(2023, 7, 12, 14, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'odubajDT', 'type': 'User'}, {'comment_id': 1261263885, 'comment_body': 'If I recall correctly v1alpha2 does not have this parameter', 'comment_created': datetime.datetime(2023, 7, 12, 14, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'odubajDT', 'type': 'User'}, {'comment_id': 1261268564, 'comment_body': 'Oh yes, my bad, it got missed out by me. Will fix this.', 'comment_created': datetime.datetime(2023, 7, 12, 14, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}]","[{'commit_sha': '29cc022551d5368e03f7105a253a12fbd6f4a738', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '019e696ae0413f7cf4440f4c575c2910e6b05ef6', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0615afa3a3131db3aa9fea8ff9d91e6ef60f7bfd', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a691a378280d3182cbed39ebb606e985fb58331a', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3b9621c642d0da33fbaefc0423e41206a932590', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}]",Rakshit Gondwal,98955085,,User,,105,,27,112
1442666052,feat: add `step` field in `KeptnMetric`,"Fixes #1735

Changes made:
- Added `spec.range.step` field in the `KeptnMetric` CRD.
- Modified the existing validating webhook to check if the value inside the `step` can be parsed.",True,1755,https://api.github.com/repos/keptn/lifecycle-toolkit/pulls/1755,https://github.com/keptn/lifecycle-toolkit/pull/1755,closed,236,4,10,6,3,0,1,0,[{'name': 'metrics-operator'}],2023-07-20 11:21:53+00:00,2023-07-28 06:26:35+00:00,673482.0,"7 days, 19:04:42",[],"[{'commit_sha': 'e61b9f81b550e688ddd34dede51b83ed69cbf6cd', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a991ce17bc3d10caf1ac91731af94527bda26037', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b94a02ef82b8dbc4f8129c30ab9456105d0011e', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46f8830a55d39b715414f7beb4b79e6d885d9743', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f338106e8819a88620973726894c247c294ed5b7', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cbcd65e5b0082b435b88fdd9a61308ecd668630', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}]",Rakshit Gondwal,98955085,,User,,105,,27,112
1448790298,feat: add `aggregation` field in `KeptnMetric`,"Fixes #1779

Changes made:
- Added a new field in the `KeptnMetric` struct.
- Values accepted for this field: p90, p95, p99, max, min, median, avg.
- If `range.step` is not defined and `range.aggregation` is defined, a `field.Required` error would be shown.
- If `range.aggregation` is not defined and `range.step` is defined, a `field.Required` error would be shown.",True,1780,https://api.github.com/repos/keptn/lifecycle-toolkit/pulls/1780,https://github.com/keptn/lifecycle-toolkit/pull/1780,closed,261,41,9,8,6,2,2,0,"[{'name': 'documentation'}, {'name': 'metrics-operator'}]",2023-07-25 16:48:12+00:00,2023-08-03 10:27:28+00:00,754756.0,"8 days, 17:39:16","[{'comment_id': 1281417780, 'comment_body': 'Please also add the allowed values to the description of the property, so they are also visible in the docs', 'comment_created': datetime.datetime(2023, 8, 2, 5, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1281778231, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2023, 8, 2, 11, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}]","[{'commit_sha': '2518071bc18e4435da0141acfb238e4a92f551c9', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90f22c7f6dc007adc7b671634eb9432d5b8e8795', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c0cb5569856de44822156dc1b3597e02abff4c6', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3fc3be99e6798b4070dc5992f5fa2847bd17caa', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bc277eab2023f46891948cf574375bb599a48d5', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '100e867abe00b491ac7eef6aa0a36a675ff8f243', 'committer_username': 'bacherfl', 'committer_name': 'Florian Bacher', 'committer_email': 'florian.bacher@dynatrace.com', 'commit_date': datetime.datetime(2012, 8, 13, 9, 40, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f4ff6fe9b516be3fa8ddf8a0a8a1b8679c35a8', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c506c2d73b656ed58b79523b2698299e12454c5', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}]",Rakshit Gondwal,98955085,,User,,105,,27,112
1453749038,feat: update prometheus api to support `range.step`,"Relates to #1736

Changes made:
- Updated Prometheus API to support the `range.step` value.
- Added a new `EvaluateQueryForStep` func in `prometheus.go` that returns a `[]slice` with the result values inside it. Later, aggregation functions would be applied to the values inside this slice.
- This function will return the Marshal value of the `resultSlice` as a whole for the `rawValue`.",True,1801,https://api.github.com/repos/keptn/lifecycle-toolkit/pulls/1801,https://github.com/keptn/lifecycle-toolkit/pull/1801,closed,236,32,2,18,3,6,1,0,[{'name': 'metrics-operator'}],2023-07-28 12:26:40+00:00,2023-08-10 10:53:04+00:00,1117584.0,"12 days, 22:26:24","[{'comment_id': 1286610181, 'comment_body': '```suggestion\r\n// EvaluateQueryForStep fetches the metric values from prometheus provider\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 5, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1288482075, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2023, 8, 9, 13, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1289620244, 'comment_body': 'I think we can remove the logging here, as any errors returned by this component will be logged later in the [controller](https://github.com/keptn/lifecycle-toolkit/blob/5b471203e412a919903876212ac45c04f180e482/metrics-operator/controllers/metrics/controller.go#L101). This also applies for the `getResultForVector` function.\r\nThis way, we also would not have to pass the `KeptnPrometheusProvider` to those functions, making them a bit simpler.', 'comment_created': datetime.datetime(2023, 8, 10, 6, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1289832640, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2023, 8, 10, 9, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1289908328, 'comment_body': 'this is optional and can also be done in a follow up, but we could define common errors for could not case/no values in query result/too many values, as those are used in this function, as well as in `getResultForVector`, i.e. at the beginning of this file we would have:\r\n\r\n```\r\nvar errCouldNotCast = fmt.Errorf(""could not cast result"")\r\nvar errNoValues = fmt.Errorf(""no values in query result"")\r\nvar errTooManyValues = fmt.Errorf(""too many values in query result"")\r\n```\r\n\r\nand use them within the two mentioned functions ', 'comment_created': datetime.datetime(2023, 8, 10, 10, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1289937685, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2023, 8, 10, 10, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}]","[{'commit_sha': '0e44719d8abf254940d93a4a1ba40aad02822645', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39e95c5ca6265d51bd875b6cb7113cfb646589ec', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9aa8e610c3e75a95a2c244f393a102bd7d7880cd', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f59420cbbcb96e31a203d5e537d8dbbe408eed3', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e076c2ff9487620e8af066daacfe97231f6fa01', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38d40c8242cf662577935eba3e003c392007139f', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '187abbaa7bdbe2614c7df7517f2fcae47a3e8da5', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23018b8d56ed487914cd380a7488717086286d5b', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da3588b9c77a3ee5be0a89e6a85d0d500b386d97', 'committer_username': 'bacherfl', 'committer_name': 'Florian Bacher', 'committer_email': 'florian.bacher@dynatrace.com', 'commit_date': datetime.datetime(2012, 8, 13, 9, 40, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1f4cb46d32d4adbad50e3412bfa2fc40e08834d', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8cb328dd0821fed50556889c3bdd423a272e75f', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b1238a65c04b4a476f9d348c9f405ba4e8f47e5', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '184b981b4d173d7277d76bf5d88456f4bce24707', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2be0b2bd2084a73a2c060d1de254c0e9479377b4', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86a22545f3d945f816f58af390906dd998653781', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75ef4198727a0b5e3eb073b0e994ff6fda3dd6fc', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '085d79e593190f5e8e054289b24fa0cff49bf7ba', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cee2b3e1c730c74c9a328b6362c27cf4721780bf', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}]",Rakshit Gondwal,98955085,,User,,105,,27,112
1457904474,feat(metrics-operator): update dynatrace api to support `range.step`,"Relates to https://github.com/keptn/lifecycle-toolkit/issues/1736

Changes made:

- Updated Dynatrace API to support the `range.step` value.
- Added a new `EvaluateQueryForStep` func in `dynatrace.go` that returns a `[]slice` with the result values inside it. Later, aggregation functions would be applied to the values inside this slice.
",True,1812,https://api.github.com/repos/keptn/lifecycle-toolkit/pulls/1812,https://github.com/keptn/lifecycle-toolkit/pull/1812,closed,390,15,2,11,3,6,1,0,[{'name': 'metrics-operator'}],2023-08-01 11:22:47+00:00,2023-08-16 10:22:28+00:00,1292381.0,"14 days, 22:59:41","[{'comment_id': 1290083883, 'comment_body': 'i think we can just return an error here if `metric.Spec.Range == nil` - otherwise this function will proceed with an empty `qURL` and return an error when the `HttpClient.Do(req)` function is called', 'comment_created': datetime.datetime(2023, 8, 10, 12, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1290548007, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2023, 8, 10, 18, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1291140731, 'comment_body': 'As most of the logic of this function seems to be the same as `EvaluateQuery`, with the difference being the generation of the query and returning `getResultSlice` instead of `getSingleValue` at the end, can you please create a function that performs the request (i.e. creating the `req` object, retrieving the auth token, doing the request and unmarshalling the response payload) that can be used by both `EvaluateQuery` and `EvaluateQueryForStep`?', 'comment_created': datetime.datetime(2023, 8, 11, 9, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1291560274, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2023, 8, 11, 16, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1295418770, 'comment_body': 'I was just checking the DT API docs again and found that we have to provide the `step` as the `resolution` query parameter: https://www.dynatrace.com/support/help/dynatrace-api/environment-api/metric-v2/get-data-points, instead of adding the `/<step>` to the `from` parameter', 'comment_created': datetime.datetime(2023, 8, 16, 6, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1295631069, 'comment_body': 'I mistook alignment as resolution, my bad. Fixed it.', 'comment_created': datetime.datetime(2023, 8, 16, 9, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}]","[{'commit_sha': 'e0653bf55d42afc0dd8afb2d502453b8926e172e', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c0af99ee8f1bd6afb5b3e1619c56fa128ee18f2', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d35689ab7673cbec74a66d45f0b0547259d4ce', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd142a8897064b2a5432fe385771ba1a2801ca7ae', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5774e38cd7a5e91f6eb2e85d7f6883ad0db15e99', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fc93dafb10160dfba32765441b4ce3f0a2b2e3f', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5476f3e546670a9f52399bcd5ca36405d84d130b', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ca0ad5e747c7c5d805b5c5bb89a135d316900c1', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '359cf9ab2666b20da5843c8f673161d6971d7797', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9798b4482c477a3d20222912d7b5a820935d5211', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c06027b6a1788011030b77b8fb0dba9f3d8b0445', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}]",Rakshit Gondwal,98955085,,User,,105,,27,112
1464159746,feat(metrics-operator): update datadog api to support `range.step`,"Relates to https://github.com/keptn/lifecycle-toolkit/issues/1736

Changes made:

- Updated Datadog API to support the `range.step` value.",True,1842,https://api.github.com/repos/keptn/lifecycle-toolkit/pulls/1842,https://github.com/keptn/lifecycle-toolkit/pull/1842,closed,649,25,2,17,3,13,1,0,[{'name': 'metrics-operator'}],2023-08-06 13:32:10+00:00,2023-08-22 08:17:23+00:00,1363513.0,"15 days, 18:45:13","[{'comment_id': 1295941974, 'comment_body': 'I believe we can remove the `d.Log.Error/Info` statements in the error cases as any errors returned by `EvaluateQuery` will be logged by the metrics controller anyway', 'comment_created': datetime.datetime(2023, 8, 16, 13, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1295944925, 'comment_body': ""let's also add a small unit test to test this function in isolation"", 'comment_created': datetime.datetime(2023, 8, 16, 13, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1295952033, 'comment_body': 'please also add a check for the length of `point` before accessing the element at index `1´ - otherwise we might crash with an index out of range error', 'comment_created': datetime.datetime(2023, 8, 16, 13, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1295958839, 'comment_body': 'Let\'s also add some checks for the several query parameters to be submitted as we expect them, i.e. something like:\r\n\r\n```\r\nrequire.Equal(t, ""1m"", r.URL.Query().Get(""interval""))\r\n```', 'comment_created': datetime.datetime(2023, 8, 16, 13, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1296507566, 'comment_body': 'Just added this for this particular test case, does it needs to be get added to other test cases as well or only for this one?\r\n\r\nAlso, the interval would be equal to `60000` as we convert `1m` to milliseconds.\r\n```\r\nrequire.Equal(t, ""60000"", r.URL.Query().Get(""interval""))\r\n```', 'comment_created': datetime.datetime(2023, 8, 16, 22, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1299618714, 'comment_body': ""Thanks, I think it's sufficient to have the checks for this test case"", 'comment_created': datetime.datetime(2023, 8, 21, 5, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1299622885, 'comment_body': 'Let\'s start those error messages with a lower case character so we stick with go best practices:\r\n\r\n```suggestion\r\nvar errNoValues = ""no values in query result""\r\nvar errNoMetricPoints = ""no metric points in query result""\r\nvar errCloseBody = ""could not close request body""\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 5, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1299814886, 'comment_body': 'a link with some documentation about standard error messages in Golang: https://github.com/golang/go/wiki/CodeReviewComments#error-strings', 'comment_created': datetime.datetime(2023, 8, 21, 8, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1299819183, 'comment_body': ""these could be directly errors with `errors.New()` so you don't need a call to `fmt.Errorf` each time and they could be used with `errors.Is`"", 'comment_created': datetime.datetime(2023, 8, 21, 8, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1300146971, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2023, 8, 21, 13, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1300955331, 'comment_body': 'optional, but you can also check the error like this since we have the error constant for that case:\r\n\r\n```suggestion\r\n\trequire.ErrorIs(t, e, errNoValues)\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 5, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1300959615, 'comment_body': 'optional, but you can check the error like this since we have the error constant:\r\n```suggestion\r\n\trequire.ErrorIs(t, e, errNoMetricPoints)\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 5, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1301189391, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2023, 8, 22, 8, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}]","[{'commit_sha': '3802da72c5780bf19a6506ee8205f9d8ecaf3830', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ac679f682a4894da139509b5a894134ac704a10', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '925a75ab656feae3899f631d306e1cbbb8d70fa6', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '563dec51ef0cbc529e4ce5744d523b846f37f1bd', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cff3f533840e352dfb13ab6a96a6034bcd754fe', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '197d6a50043b49cc3e911ff6cb9bf2263cd69a25', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0302e00a13349f12fcd84cc6b71917cffee85c03', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b89059ab71cb09142d669879bee695b22b3a02c7', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9eadfc1e98b9145eaeec6dd1e0bb201a6c5695e3', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a61d8eb301691db6c05e6b328818b634a9818d8a', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '020c7575d477f06d18a30a94c27f12f10780d109', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0031a5a502f9df6990eafe1a2219aa0326a7b8a', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '204fc71580d3a18cc7d18e7227f37daf81907bb6', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ff1cceca72add548ac504424583a29123ce6e2', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '300702823b7c5754ddf39937baee5ea1bdeda240', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec11f6b3e1737640faacd40541f67ef4012692dd', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e227ec006334d1a1be17b467812a3150baadec7', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}]",Rakshit Gondwal,98955085,,User,,105,,27,112
1484394978,feat(metrics-operator): update dql provider to include range,Fixes #1918,True,1919,https://api.github.com/repos/keptn/lifecycle-toolkit/pulls/1919,https://github.com/keptn/lifecycle-toolkit/pull/1919,closed,760,68,5,14,3,15,1,0,[{'name': 'metrics-operator'}],2023-08-22 09:35:05+00:00,2023-08-24 11:21:37+00:00,179192.0,"2 days, 1:46:32","[{'comment_id': 1301663504, 'comment_body': 'by default we can leave the timeframe properties unset, otherwise we will get a timeframe with a length of 0', 'comment_created': datetime.datetime(2023, 8, 22, 13, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1301702656, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 8, 22, 14, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1302596617, 'comment_body': '```suggestion\r\n\t\treturn nil, res.StatusCode, ErrRequestFailed\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1302597368, 'comment_body': '```suggestion\r\n\t\treturn nil, http.StatusInternalServerError, err\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 7, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1302597815, 'comment_body': '```suggestion\r\n\t\treturn nil, http.StatusInternalServerError, err\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 7, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1302598052, 'comment_body': '```suggestion\r\n\t\treturn nil, http.StatusInternalServerError, err\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 7, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1302599740, 'comment_body': 'To keep consistent with the expectation of receiving a http status code from this functions, I suggest to use `http.StatusInternalServerError` for the error cases (see the suggestions below)\r\n\r\n```suggestion\r\n\t\treturn nil, http.StatusInternalServerError, err\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 7, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1302601026, 'comment_body': 'please also bind the received status to a variable and do an assertion on that (also for the other test cases)', 'comment_created': datetime.datetime(2023, 8, 23, 7, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1302602954, 'comment_body': '```suggestion\r\n\tpath := ""/platform/storage/query/v1/query:execute""\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 7, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1302604990, 'comment_body': ""let's make the base path `/platform/storage/query/v1/query` a constant in this file and use that for the `:execute` and `:poll` requests"", 'comment_created': datetime.datetime(2023, 8, 23, 7, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1302622635, 'comment_body': '```suggestion\r\n\tresultSlice := make([]string, len(result.Records))\r\n\tfor index, r := range result.Records {\r\n\t\tresultSlice[index] = fmt.Sprintf(""%f"", r.Value.Max)\r\n\t}\r\n\treturn resultSlice\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 7, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1302733718, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2023, 8, 23, 9, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1302758218, 'comment_body': 'I think this is a better fit\r\n```suggestion\r\n\t\treturn nil, http.StatusUnauthorized, err\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 9, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1302761824, 'comment_body': 'maybe we can think of encapsulating these lines into a new function since they are the same across both invokations ', 'comment_created': datetime.datetime(2023, 8, 23, 9, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1302838670, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 23, 10, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}]","[{'commit_sha': '9cb4499ab44ae5e3412cb2b3e8c69cc4af882169', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '989c66dc909749913113b99931397f8f1feaa661', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '629461d424523faf6876be99882d092165f37511', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3de5ce4bcedc3732cbba98f90b6e527c1870f7a', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f807bcafc4a1c3ce284cd91dcd2804208472627', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b34b49a0eee6bd69b9f3711dad578ccd928d39a8', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe7836f3c5afda4dd1fb23e0f769409177864dc', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9531db94c153564914304a8ca5bcf67eb9ee097c', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4f3a72fafbc08ec3476c4500df6e7f6fc93955d', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac18643489506eaf2c56628896e2ff3f0b6ee3e4', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a147ecca283e1d5df6d9fb0bbb2ac2872847d6c2', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f862734bb14292e1a8c67952b5afb2e66ecd125', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1ac310d2fad4c268744f1cbd91b3d1019177729', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f06f3731839c8459fbb5e680293cbcb60e8e172', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}]",Rakshit Gondwal,98955085,,User,,105,,27,112
1453785996,feat: aggregation functions support for metrics controller,"Fixes #1737

Changes made:
- Added aggregation functions in the metrics controller.",True,1802,https://api.github.com/repos/keptn/lifecycle-toolkit/pulls/1802,https://github.com/keptn/lifecycle-toolkit/pull/1802,closed,400,5,5,19,3,10,1,0,[{'name': 'metrics-operator'}],2023-07-28 12:56:53+00:00,2023-09-07 08:33:16+00:00,3526583.0,"40 days, 19:36:23","[{'comment_id': 1305224502, 'comment_body': '```suggestion\r\nfunc (r *KeptnMetricReconciler) getResults(ctx context.Context, metric *metricsapi.KeptnMetric, provider providers.KeptnSLIProvider, metricProvider *metricsapi.KeptnMetricsProvider) (string, []byte, error) {\r\n\tif metric.Spec.Range != nil && metric.Spec.Range.Step != """" {\r\n\t\treturn r.getStepQueryResults(ctx, metric, provider, metricProvider)\r\n\t}\r\n\treturn r.getQueryResults(ctx, metric, provider, metricProvider)\r\n}\r\n\r\nfunc (r *KeptnMetricReconciler) getQueryResults(ctx context.Context, metric *metricsapi.KeptnMetric, provider providers.KeptnSLIProvider, metricProvider *metricsapi.KeptnMetricsProvider) (string, []byte, error) {\r\n\tvalue, rawValue, err := provider.EvaluateQuery(ctx, *metric, *metricProvider)\r\n\tif err != nil {\r\n\t\tr.Log.Error(err, ""Failed to evaluate the query"", ""Response from provider was:"", (string)(rawValue))\r\n\t\treturn """", cupSize(rawValue), err\r\n\t}\r\n\treturn value, cupSize(rawValue), nil\r\n}\r\n\r\nfunc (r *KeptnMetricReconciler) getStepQueryResults(ctx context.Context, metric *metricsapi.KeptnMetric, provider providers.KeptnSLIProvider, metricProvider *metricsapi.KeptnMetricsProvider) (string, []byte, error) {\r\n\tvalue, rawValue, err := provider.EvaluateQueryForStep(ctx, *metric, *metricProvider)\r\n\tif err != nil {\r\n\t\tr.Log.Error(err, ""Failed to evaluate the query"", ""Response from provider was:"", (string)(rawValue))\r\n\t\treturn """", cupSize(rawValue), err\r\n\t}\r\n\taggValue, err := aggregateValues(value, metric.Spec.Range.Aggregation)\r\n\tif err != nil {\r\n\t\treturn """", nil, err\r\n\t}\r\n\treturn aggValue, cupSize(rawValue), nil\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 6, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1305227787, 'comment_body': 'These aggregation functions might be useful in other places as well - I would suggest to move them to a separate package in `controllers/common/aggregation` and make them exported', 'comment_created': datetime.datetime(2023, 8, 25, 6, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1305307888, 'comment_body': 'i think here we need to use `math.Ceil`:\r\n```suggestion\r\n\ti := math.Ceil(float64(len(values)) * perc / 100)\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 7, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1305308789, 'comment_body': 'Here we need to pass the percentage as a number between [0,100], otherwise the calculation of the index will be off\r\n```suggestion\r\n\t\taggValue = fmt.Sprintf(""%v"", calculatePercentile(sort.Float64Slice(floatSlice), 90))\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 7, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1305308931, 'comment_body': '```suggestion\r\n\t\taggValue = fmt.Sprintf(""%v"", calculatePercentile(sort.Float64Slice(floatSlice), 95))\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 7, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1305309114, 'comment_body': '```suggestion\r\n\t\taggValue = fmt.Sprintf(""%v"", calculatePercentile(sort.Float64Slice(floatSlice), 99))\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 7, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1305370759, 'comment_body': 'maybe we can use a float here and use `fmt.Sprintf` in the return\r\n```suggestion\r\n\tvar aggValue float64\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 8, 38, 7, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1305373312, 'comment_body': 'when moving to Go 1.21 we can use the slices package :) \r\nhttps://pkg.go.dev/slices@master', 'comment_created': datetime.datetime(2023, 8, 25, 8, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}, {'comment_id': 1305893694, 'comment_body': 'For the aggregation functions?', 'comment_created': datetime.datetime(2023, 8, 25, 16, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1314486128, 'comment_body': 'yes :) ', 'comment_created': datetime.datetime(2023, 9, 4, 6, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'thisthat', 'type': 'User'}]","[{'commit_sha': 'ba83818fa28c0b05c2f72c7ab2ccf328bf1e4e7a', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efe6a7f83cd48a7d7283f3b6b55f8fc265fdb5cc', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '001c53323967b9d3413d3e0421d60c1dfc964ba5', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a460ac68b477961fd498412e3816221ab77e8b6', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52f8010789efaf1c31701be7a7695a767533c51f', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a74379019ebdd195643abd4fb8174163fbbeeb15', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '728860f3de7351230faccdaf1754dfcc544875f2', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18e3164e9034d932b655b0ca74ce3db7a1c5bcf4', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89b2f0040afd9839d82fa8b5254e6742519d8163', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a101015eeec393b482d260f75be158c9f2386753', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c87ace335c63c7435268bc06fd89e7dc8ed96e2b', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a715e97518777c8bafd15ca2cbe2f902f850029', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f16cd3c0303da73dfa4f1c53618e4b83b095fb9d', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16f65883c698856c0ce0938f35a9cfffe79c9ab9', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1401a0c5f83a4eddc4db53ee76fc1c33278d576', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e833eac87da6e4a8021b38221fc8b8f8bf80861f', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '157be771d6c9f1e7c2fd4249d36ec1b6aac695db', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30ee210a7c280cede71bb8e901213674e38ca675', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '028d99845f9c7f84bb3f622fdad1c6b8f2e489a5', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}]",Rakshit Gondwal,98955085,,User,,105,,27,112
1479301326,feat: update `KeptnMetric` to store multiple metrics in status,Fixes #2082,True,1900,https://api.github.com/repos/keptn/lifecycle-toolkit/pulls/1900,https://github.com/keptn/lifecycle-toolkit/pull/1900,closed,271,39,7,15,3,9,3,0,"[{'name': 'documentation'}, {'name': 'metrics-operator'}, {'name': 'helm'}]",2023-08-17 15:59:49+00:00,2023-09-21 06:29:44+00:00,2989795.0,"34 days, 14:29:55","[{'comment_id': 1300136071, 'comment_body': '```suggestion\r\n        // StoredResults indicates the upper limit of how many past results should be stored in the status of a KeptnMetric\r\n\t// +kubebuilder:validation:Maximum:=255\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 13, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1325546064, 'comment_body': ""these docs seem to be out of sync with what's in the code, so I think they need to be regenerated"", 'comment_created': datetime.datetime(2023, 9, 14, 8, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1325757662, 'comment_body': 'I ran `./.github/scripts/generate-crd-docs/generate-crd-docs.sh` again but the result is same.', 'comment_created': datetime.datetime(2023, 9, 14, 10, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1326870168, 'comment_body': '```suggestion\r\n\t// Range represents the time range for which this data was queried\r\n```', 'comment_created': datetime.datetime(2023, 9, 15, 6, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1326870851, 'comment_body': 'found the issue now - there was one comment that needed to be adapted in the metric type - see the suggestion in https://github.com/keptn/lifecycle-toolkit/pull/1900/files#r1326870168', 'comment_created': datetime.datetime(2023, 9, 15, 6, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1327000836, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2023, 9, 15, 8, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1327001088, 'comment_body': 'Thanks', 'comment_created': datetime.datetime(2023, 9, 15, 8, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}, {'comment_id': 1328527114, 'comment_body': 'removing the `omitempty` tag makes those required fields - which is also the reason for the failing integration tests. Is there anything that speaks against keeping the `omitempty` tags here? If not, I would keep them', 'comment_created': datetime.datetime(2023, 9, 18, 10, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'bacherfl', 'type': 'User'}, {'comment_id': 1330612990, 'comment_body': 'Fixed, Thanks', 'comment_created': datetime.datetime(2023, 9, 19, 19, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rakshitgondwal', 'type': 'User'}]","[{'commit_sha': '8aca000d5483ac38e31cf4da006400651ebff6da', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2fbabc379c70ad6335754e6461313732b3d2b06', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '600265b76540fbcc7b8e271f9d2a50252aa3baf8', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3fca1331caa39faf997be48c6695739185992a2', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eae2b02c20dacc1603e371a7fddf12976f2eea77', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e1a9c1c1a9a3105980478ab5b21e86edf28cd2d', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cf0ef06e1eedc342b2a7a63d27cfc928f4fac60', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30d5e19ffe52b1096b02d24e93db51318cc549e1', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3e070a55b3e04e5ceb8ac25db6e6201efbdc0de', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20d0c1533dca6449b2b13eb368a7ed72cf2019bd', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd19545560ed4782faca70e3c6438c6f5a45267f2', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aeda9cfec9533aef0f496c0b560262ff73cf1e1', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '847da86369f01b7bf4cf1144abdb691f5495010d', 'committer_username': 'bacherfl', 'committer_name': 'Florian Bacher', 'committer_email': 'florian.bacher@dynatrace.com', 'commit_date': datetime.datetime(2012, 8, 13, 9, 40, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a482b25aa591bbba8c991fd9152b49cb36d67a3', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31c90c41d903c1aa6ebd2c4d6a66d48cfb1087b2', 'committer_username': 'rakshitgondwal', 'committer_name': 'Rakshit Gondwal', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 3, 12, 0, 54, tzinfo=datetime.timezone.utc)}]",Rakshit Gondwal,98955085,,User,,105,,27,112

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
531839724,lifecycle-toolkit,keptn/lifecycle-toolkit,Go,118,287,10,71,2159,110,71,41,"[{'id': 1532780954, 'number': 2190, 'closed': datetime.datetime(2024, 1, 22, 8, 25, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 27, 16, 38, 25, tzinfo=datetime.timezone.utc), 'time_taken': 10079237.0, 'time_delta': '116 days, 15:47:17', 'additions': 187, 'deletions': 40, 'state': 'closed'}, {'id': 1484394978, 'number': 1919, 'closed': datetime.datetime(2023, 8, 24, 11, 21, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 22, 9, 35, 5, tzinfo=datetime.timezone.utc), 'time_taken': 179192.0, 'time_delta': '2 days, 1:46:32', 'additions': 760, 'deletions': 68, 'state': 'closed'}, {'id': 1479301326, 'number': 1900, 'closed': datetime.datetime(2023, 9, 21, 6, 29, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 17, 15, 59, 49, tzinfo=datetime.timezone.utc), 'time_taken': 2989795.0, 'time_delta': '34 days, 14:29:55', 'additions': 271, 'deletions': 39, 'state': 'closed'}, {'id': 1464159746, 'number': 1842, 'closed': datetime.datetime(2023, 8, 22, 8, 17, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 6, 13, 32, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1363513.0, 'time_delta': '15 days, 18:45:13', 'additions': 649, 'deletions': 25, 'state': 'closed'}, {'id': 1457904474, 'number': 1812, 'closed': datetime.datetime(2023, 8, 16, 10, 22, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 1, 11, 22, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1292381.0, 'time_delta': '14 days, 22:59:41', 'additions': 390, 'deletions': 15, 'state': 'closed'}, {'id': 1453785996, 'number': 1802, 'closed': datetime.datetime(2023, 9, 7, 8, 33, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 28, 12, 56, 53, tzinfo=datetime.timezone.utc), 'time_taken': 3526583.0, 'time_delta': '40 days, 19:36:23', 'additions': 400, 'deletions': 5, 'state': 'closed'}, {'id': 1453749038, 'number': 1801, 'closed': datetime.datetime(2023, 8, 10, 10, 53, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 28, 12, 26, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1117584.0, 'time_delta': '12 days, 22:26:24', 'additions': 236, 'deletions': 32, 'state': 'closed'}, {'id': 1448790298, 'number': 1780, 'closed': datetime.datetime(2023, 8, 3, 10, 27, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 25, 16, 48, 12, tzinfo=datetime.timezone.utc), 'time_taken': 754756.0, 'time_delta': '8 days, 17:39:16', 'additions': 261, 'deletions': 41, 'state': 'closed'}, {'id': 1442666052, 'number': 1755, 'closed': datetime.datetime(2023, 7, 28, 6, 26, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 20, 11, 21, 53, tzinfo=datetime.timezone.utc), 'time_taken': 673482.0, 'time_delta': '7 days, 19:04:42', 'additions': 236, 'deletions': 4, 'state': 'closed'}, {'id': 1429287715, 'number': 1703, 'closed': datetime.datetime(2023, 7, 19, 5, 42, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 11, 11, 40, 18, tzinfo=datetime.timezone.utc), 'time_taken': 669752.0, 'time_delta': '7 days, 18:02:32', 'additions': 36, 'deletions': 1, 'state': 'closed'}, {'id': 1423023641, 'number': 1689, 'closed': datetime.datetime(2023, 7, 10, 7, 11, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 6, 14, 42, 11, tzinfo=datetime.timezone.utc), 'time_taken': 318580.0, 'time_delta': '3 days, 16:29:40', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 1416156619, 'number': 1658, 'closed': datetime.datetime(2023, 7, 18, 11, 31, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 14, 44, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1457180.0, 'time_delta': '16 days, 20:46:20', 'additions': 115, 'deletions': 35, 'state': 'closed'}, {'id': 1405577595, 'number': 1615, 'closed': datetime.datetime(2023, 7, 25, 13, 0, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 23, 19, 52, 5, tzinfo=datetime.timezone.utc), 'time_taken': 2740075.0, 'time_delta': '31 days, 17:07:55', 'additions': 179, 'deletions': 57, 'state': 'closed'}, {'id': 1399630959, 'number': 1587, 'closed': datetime.datetime(2023, 6, 30, 5, 23, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 20, 10, 46, 32, tzinfo=datetime.timezone.utc), 'time_taken': 844591.0, 'time_delta': '9 days, 18:36:31', 'additions': 182, 'deletions': 37, 'state': 'closed'}, {'id': 1364782176, 'number': 1471, 'closed': datetime.datetime(2023, 6, 22, 5, 28, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 25, 13, 46, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2389364.0, 'time_delta': '27 days, 15:42:44', 'additions': 353, 'deletions': 11, 'state': 'closed'}, {'id': 1335422307, 'number': 1345, 'closed': datetime.datetime(2023, 7, 25, 14, 40, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 2, 15, 21, 7, tzinfo=datetime.timezone.utc), 'time_taken': 7255189.0, 'time_delta': '83 days, 23:19:49', 'additions': 2355, 'deletions': 1620, 'state': 'closed'}, {'id': 1330425920, 'number': 1296, 'closed': datetime.datetime(2023, 5, 5, 7, 8, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 27, 13, 50, 5, tzinfo=datetime.timezone.utc), 'time_taken': 667091.0, 'time_delta': '7 days, 17:18:11', 'additions': 26, 'deletions': 0, 'state': 'closed'}, {'id': 1308902732, 'number': 1208, 'closed': datetime.datetime(2023, 4, 17, 6, 39, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 11, 12, 10, 39, tzinfo=datetime.timezone.utc), 'time_taken': 498542.0, 'time_delta': '5 days, 18:29:02', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 1297518067, 'number': 1163, 'closed': datetime.datetime(2023, 4, 26, 7, 34, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 31, 10, 16, 25, tzinfo=datetime.timezone.utc), 'time_taken': 2236679.0, 'time_delta': '25 days, 21:17:59', 'additions': 18, 'deletions': 5, 'state': 'closed'}, {'id': 1294891001, 'number': 1151, 'closed': datetime.datetime(2023, 4, 17, 12, 34, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 29, 15, 48, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1629972.0, 'time_delta': '18 days, 20:46:12', 'additions': 97, 'deletions': 33, 'state': 'closed'}, {'id': 1294578876, 'number': 1150, 'closed': datetime.datetime(2023, 4, 11, 11, 46, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 29, 12, 46, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1119634.0, 'time_delta': '12 days, 23:00:34', 'additions': 41, 'deletions': 3, 'state': 'closed'}, {'id': 1269938057, 'number': 1033, 'closed': datetime.datetime(2023, 3, 15, 8, 18, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 9, 16, 30, 44, tzinfo=datetime.timezone.utc), 'time_taken': 488840.0, 'time_delta': '5 days, 15:47:20', 'additions': 33, 'deletions': 5, 'state': 'closed'}, {'id': 1257505130, 'number': 935, 'closed': datetime.datetime(2023, 3, 9, 13, 41, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 28, 17, 27, 49, tzinfo=datetime.timezone.utc), 'time_taken': 764028.0, 'time_delta': '8 days, 20:13:48', 'additions': 73, 'deletions': 0, 'state': 'closed'}, {'id': 1229561874, 'number': 768, 'closed': datetime.datetime(2023, 2, 6, 7, 3, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 5, 18, 54, 32, tzinfo=datetime.timezone.utc), 'time_taken': 43761.0, 'time_delta': '12:09:21', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 1228463912, 'number': 759, 'closed': datetime.datetime(2023, 2, 14, 6, 48, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 3, 17, 35, 51, tzinfo=datetime.timezone.utc), 'time_taken': 911537.0, 'time_delta': '10 days, 13:12:17', 'additions': 85, 'deletions': 0, 'state': 'closed'}, {'id': 1211574906, 'number': 671, 'closed': datetime.datetime(2023, 1, 27, 9, 20, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 20, 13, 57, 46, tzinfo=datetime.timezone.utc), 'time_taken': 588179.0, 'time_delta': '6 days, 19:22:59', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
