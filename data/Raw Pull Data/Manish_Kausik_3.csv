pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
964417381,Detect Request for use of Enzyme as Backend by user,"This patch is the first step towards integrating enzyme AD with Clad. The user can now mention that he/she wants to use enzyme for AD instead of clad by using the API calls:
           ```clad::differentiate<clad::opts::use_enzyme>(func,""..."");```
and     ```clad::gradient<clad::opts::use_enzyme>(func);```
Via this patch one can successfully recognise the request for Enzyme AD backend. It is implemented via Overloading the function templates for differentiate and gradient. Currently after successfully recognising a Enzyme request, an empty function is created to show that we have identified the request for enzyme. That is,
    
```clad::gradient<clad::opts::use_enzyme>(func);```
generates the function:
```
        void func_grad_enzyme(...function arguments... , ...arguments to store derivatives...){
        }
```
Currently generation of dummy function for clad::differentiate<clad::opts::use_enzyme>(...) is not implemented.
These functions must be modified in future patches to insert valid code for enzyme to work on.
",True,460,https://api.github.com/repos/vgvassilev/clad/pulls/460,https://github.com/vgvassilev/clad/pull/460,closed,128,59,7,1,7,16,0,0,[],2022-06-10 18:14:28+00:00,2022-06-27 14:38:02+00:00,1455814.0,"16 days, 20:23:34","[{'comment_id': 896079651, 'comment_body': 'We use `DerivedFnCollector` to store derived functions and make sure that Clad does not generate the same derived function multiple times. You will need to modify `DerivedFnCollector`, and possibly `DerivedFnInfo`, to keep their expected behaviour once differentiation through enzyme is involved. ', 'comment_created': datetime.datetime(2022, 6, 13, 19, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 896084823, 'comment_body': ""It seems like, `clad::gradient<clad::opts::use_clad>` would work but `clad::differentiate<clad::opts::use_clad>` would not work, shouldn't we make this design more consistent? "", 'comment_created': datetime.datetime(2022, 6, 13, 19, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 896137395, 'comment_body': 'We don’t need this option. That’s the default anyway. ', 'comment_created': datetime.datetime(2022, 6, 13, 21, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 899196103, 'comment_body': 'I didnt find the need for this as of now, Clad is able to recognise duplicate calls to differentiate a function and derives the code only once, atleast for whatever tests I have written till now. But would definitely keep this in mind for upcoming patches. Thanks for bringing this to my attention!', 'comment_created': datetime.datetime(2022, 6, 16, 15, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 899196786, 'comment_body': 'I have removed ```use_clad``` option', 'comment_created': datetime.datetime(2022, 6, 16, 15, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 899197706, 'comment_body': 'I have modified the design now to remove ```use_clad```. Kindly check now.', 'comment_created': datetime.datetime(2022, 6, 16, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 905312835, 'comment_body': 'It seems still in the diff, did you push?', 'comment_created': datetime.datetime(2022, 6, 23, 17, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 905313956, 'comment_body': ""I don't expect to need this. Upon seeing `clad::differentiate` or `clad::gradient`, we will form a DiffRequest. In there we can check which was the function we wanted to differentiate and send it to enzyme."", 'comment_created': datetime.datetime(2022, 6, 23, 17, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 905904700, 'comment_body': ""sry, it wasn't removed during a merge conflict, I have updated it now."", 'comment_created': datetime.datetime(2022, 6, 24, 9, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 905906955, 'comment_body': ""But enzyme's API needs us to make calls to ```enzyme_autodiff``` with our function as a parameter. We will need to create these Function calls when we ```ProcessDiffRequests``` and enclose them in some wrapper functions so that its easy for clad to interface with it. This is how we communicate with enzyme stating which function we want to differentiate. \r\n\r\nWe can try to bypass the Enzyme API and try to use Internal functions of Enzyme directly. But I think this would render our integration useless if the Enzyme team decides to change their internal functions. Enzyme has a ```HandleAutoDiff``` function which takes as input llvm ```CallInst``` and performs differentiation of that function. But that would entail us to write a llvm pass for it and force us to work at the llvm IR level. I think we should not take this approach. Or am I missing something?"", 'comment_created': datetime.datetime(2022, 6, 24, 9, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 906766553, 'comment_body': 'Why this needs to be annotated differently?', 'comment_created': datetime.datetime(2022, 6, 26, 6, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 906766788, 'comment_body': 'Can you run clang-format, you should be able to do something like `git clang-format HEAD~1`', 'comment_created': datetime.datetime(2022, 6, 26, 7, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 906792507, 'comment_body': 'I have updated it to remove those annotations. Previously I was using it to differentiate between calls to use enzyme and clad. ', 'comment_created': datetime.datetime(2022, 6, 26, 10, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 906792524, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 6, 26, 10, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 906815537, 'comment_body': 'Can you avoid using braces for single statement operators? Here and in a few other places in this PR.', 'comment_created': datetime.datetime(2022, 6, 26, 13, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 906854874, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 26, 18, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}]","[{'commit_sha': '8068267fa6e61392515d67473b503156eb65e5ec', 'committer_username': 'Nirhar', 'committer_name': 'Manish Kausik H', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 3, 16, 23, 49, tzinfo=datetime.timezone.utc)}]",Manish Kausik H,46352931,,User,,25,,9,3
982116956,Generate code for Enzyme autodiff for functions with Pointer/array arguments,"For functions of type
	```double myfunction(double* arr){...};```
OR 	```double myfunction(double arr[3]){...};```

we generate derivative code of type:
```	
        void d_myfunction(double* arr, clad::array_ref<double> _d_arr){
		double* d_arr = _d_arr.ptr();
		__enzyme_autodiff_myfunction(myfunction, arr, d_arr);
	}
```

Further on enzyme will handle the function differentiation

This Commit also Downloads and Installs Enzyme in the Clad Directory, if
the flag ""-DENZYME=On"" is passed to cmake during project configuration.
    
This Commit also contains tests for the above feature in test/Gradient/Enzyme.C",True,466,https://api.github.com/repos/vgvassilev/clad/pulls/466,https://github.com/vgvassilev/clad/pull/466,closed,464,98,14,2,19,82,0,0,[],2022-06-29 05:02:35+00:00,2022-08-15 19:22:16+00:00,4112381.0,"47 days, 14:19:41","[{'comment_id': 909380758, 'comment_body': 'It seems we also need additional checks here to make sure that the first parameter is of pointer/array type.', 'comment_created': datetime.datetime(2022, 6, 29, 9, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 909387261, 'comment_body': 'Can you use `VisitorBase::BuildDeclRef` or `clang::Sema::BuildDeclRefExpr` here?\r\nIn general, prefer `Sema::` functions over specific AST class functions. ', 'comment_created': datetime.datetime(2022, 6, 29, 9, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 909388442, 'comment_body': '```suggestion\r\n            auto getPointerExpr = BuildCallExprToMemFn(arrayRefNameExpr, ""ptr"", {});\r\n```', 'comment_created': datetime.datetime(2022, 6, 29, 9, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 909393036, 'comment_body': '```suggestion\r\n            enzyme_call_FD->setParams(enz_params);\r\n```', 'comment_created': datetime.datetime(2022, 6, 29, 9, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 909393881, 'comment_body': '```suggestion\r\n                                                        enz_args);\r\n```', 'comment_created': datetime.datetime(2022, 6, 29, 9, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 913832214, 'comment_body': ""Shouldn't we use some tagged stable version instead of the main development branch?"", 'comment_created': datetime.datetime(2022, 7, 5, 13, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 913834350, 'comment_body': 'We should branch these if conditions into one. ', 'comment_created': datetime.datetime(2022, 7, 5, 14, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 913844722, 'comment_body': 'If I recall correctly, ubuntu GitHub runners do not include the Ninja build system by default. Can you make sure if it is installed in a runner or not?', 'comment_created': datetime.datetime(2022, 7, 5, 14, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 913876837, 'comment_body': 'changed it to the latest stable version', 'comment_created': datetime.datetime(2022, 7, 5, 14, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 913876973, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 7, 5, 14, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 913877928, 'comment_body': 'changed it to make. Enzyme build with make is a bit slow, but otherwise works fine.', 'comment_created': datetime.datetime(2022, 7, 5, 14, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 922645733, 'comment_body': ""Based on the above comment, shouldn't we add a check here to make sure that the first parameter is of array/pointer type?"", 'comment_created': datetime.datetime(2022, 7, 16, 7, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 922646055, 'comment_body': 'In which case can `t_ptr` be null here?\r\nAnd if you do not need the cast result, then prefer to use `llvm::isa<>`.', 'comment_created': datetime.datetime(2022, 7, 16, 7, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 922646282, 'comment_body': 'Prefer to use `VisitorBase::BuildDeclRef` here, that makes the codebase more uniform and easier to read. ', 'comment_created': datetime.datetime(2022, 7, 16, 7, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 922646488, 'comment_body': 'Can we use `clad_compat::GetResult<...>` instead of this? ', 'comment_created': datetime.datetime(2022, 7, 16, 7, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 922646700, 'comment_body': 'We generally use a camel case for local variable names. But we also do not have any fixed convention. @vgvassilev Should we decide and create some naming convention for the codebase?', 'comment_created': datetime.datetime(2022, 7, 16, 7, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 922647023, 'comment_body': 'Can you add more comprehensive tests? You mentioned in chat that you got enzyme to work for a wide class of function prototypes. Can you also add tests for them?', 'comment_created': datetime.datetime(2022, 7, 16, 7, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 922647135, 'comment_body': 'Does enzyme require size information of primal or derivative array anywhere?', 'comment_created': datetime.datetime(2022, 7, 16, 7, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 922652892, 'comment_body': 'yes this done in line number 482', 'comment_created': datetime.datetime(2022, 7, 16, 8, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 922653170, 'comment_body': 'This PR does not deal with that, it only deals with function prototypes which have a single arraytype or pointer as argument. My next PR will contain more examples and will deal with different types of function prototypes.', 'comment_created': datetime.datetime(2022, 7, 16, 8, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 922653716, 'comment_body': 'No it doesnt for this specific example. Examples where size information are required will be given in the next PR.', 'comment_created': datetime.datetime(2022, 7, 16, 8, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 922660193, 'comment_body': 'changed it to llvm::isa<>', 'comment_created': datetime.datetime(2022, 7, 16, 9, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 922660252, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 16, 9, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 922660447, 'comment_body': 'Since I am using ```VisitorBase::BuildDeclRef```, which already contains ```clad_compat::GetResult<...>```, I have removed this code', 'comment_created': datetime.datetime(2022, 7, 16, 9, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 922660518, 'comment_body': 'changed variable names to camel case', 'comment_created': datetime.datetime(2022, 7, 16, 9, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 922686601, 'comment_body': '> We generally use a camel case for local variable names. But we also do not have any fixed convention. @vgvassilev Should we decide and create some naming convention for the codebase?\r\n\r\nWe should, although what we do is consistent to clang where there is nothing strict enforced. However, I agree we should not add more coding convention styles :)', 'comment_created': datetime.datetime(2022, 7, 16, 14, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 922687828, 'comment_body': 'Okay! \r\nCan you add this information in the PR description?', 'comment_created': datetime.datetime(2022, 7, 16, 14, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 922688727, 'comment_body': ""It seems this PR does not add support for forward mode differentiation using enzyme. Then shouldn't all the changes of this file should be at least be in a separate commit, or more preferably in a separate PR?"", 'comment_created': datetime.datetime(2022, 7, 16, 14, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 922689049, 'comment_body': '`ReverseModeVisitor::Derive` does a lot of things now. We should try to make the code more modular. Should we divide it into smaller sections using something like this: \r\n\r\n```cpp\r\nif (!use_enzyme)\r\n  DifferentiateUsingClad(...);\r\nelse\r\n  DifferentiateUsingEnzyme(...);\r\ngradientBody = endBlock();\r\n```\r\n\r\n@vgvassilev What do you think about this?', 'comment_created': datetime.datetime(2022, 7, 16, 15, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 922689573, 'comment_body': 'Where are you creating and pushing scopes necessary for the `enzymeCallFD` ? For example, codes like these:\r\n```cpp\r\nbeginScope(Scope::FunctionPrototypeScope | Scope::FunctionDeclarationScope |\r\n               Scope::DeclScope);\r\nm_Sema.PushFunctionScope();\r\nm_Sema.PushDeclContext(getCurrentScope(), m_Derivative);\r\n```', 'comment_created': datetime.datetime(2022, 7, 16, 15, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 922691715, 'comment_body': 'Since `enzymeCallFD` represents an extern function declaration, we do not scopes here. ', 'comment_created': datetime.datetime(2022, 7, 16, 15, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 922699424, 'comment_body': 'That sounds reasonable to me.', 'comment_created': datetime.datetime(2022, 7, 16, 16, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 922700849, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 16, 17, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 922700986, 'comment_body': 'I have removed Fwd mode code from here for now, would add it later when I make a PR for forward mode', 'comment_created': datetime.datetime(2022, 7, 16, 17, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 922702586, 'comment_body': 'I think this is a good idea, but I would want to attempt this after this PR and the next one, I think it would be better if I make a separate PR later for code refactoring such as this. Whats your opinion @vgvassilev?', 'comment_created': datetime.datetime(2022, 7, 16, 17, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 922784494, 'comment_body': 'We do not need `no_enzyme`, we can write `enable_enzyme` for the platform we care about and for the rest it will be undefined. Then we can check `if enable_enzyme` and that should be enough.', 'comment_created': datetime.datetime(2022, 7, 17, 7, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 922784691, 'comment_body': 'We should use the `extra_cmake_options` to add `-DENZYME=On`. I think we should call this option `ENABLE_ENZYME_BACKEND`.', 'comment_created': datetime.datetime(2022, 7, 17, 7, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 922785263, 'comment_body': 'That would bloat the history for no good reason I fear.', 'comment_created': datetime.datetime(2022, 7, 17, 7, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 922785426, 'comment_body': '```suggestion\r\n        QualType OrigTy = origParams[0]->getOriginalType();\r\n        if (OrigTy->isConstantArrayType() || OrigTy->isPointerType()) {\r\n```', 'comment_created': datetime.datetime(2022, 7, 17, 7, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 922785671, 'comment_body': 'Stray comments?', 'comment_created': datetime.datetime(2022, 7, 17, 7, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 922786185, 'comment_body': 'We should use a local variable for the DeclContext here.', 'comment_created': datetime.datetime(2022, 7, 17, 7, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 922822812, 'comment_body': 'Okay, I have put both those sections into 2 different functions\r\n', 'comment_created': datetime.datetime(2022, 7, 17, 12, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 922836529, 'comment_body': '```suggestion\r\nif (ENABLE_ENZYME_BACKEND)\r\n```', 'comment_created': datetime.datetime(2022, 7, 17, 13, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 922836818, 'comment_body': '```suggestion\r\n    // FIXME: Write code to generate code that enzyme can work on\r\n```', 'comment_created': datetime.datetime(2022, 7, 17, 13, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 922836924, 'comment_body': 'We prefer `//` in multiline comments', 'comment_created': datetime.datetime(2022, 7, 17, 13, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 922837907, 'comment_body': 'We can probably simplify all this by adding:\r\n`config.have_enzyme = @ENABLE_ENZYME_BACKEND@`\r\n\r\nYou can see how this is done in https://github.com/llvm/llvm-project/blob/7b3146dcd38464708a37d796bce2f7a7500e2174/clang/test/lit.site.cfg.py.in#L23', 'comment_created': datetime.datetime(2022, 7, 17, 13, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 922838071, 'comment_body': 'Is Enzyme a shared library? And where it is located?', 'comment_created': datetime.datetime(2022, 7, 17, 13, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 922838201, 'comment_body': 'Why do we need to find `opt`?', 'comment_created': datetime.datetime(2022, 7, 17, 13, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 922838588, 'comment_body': 'We should construct enzyme in clad. That is, we should call `%cladclang ... -fenzyme-backend ...`, then clad should construct the expected optimization pipeline by enzyme, compile it and trigger enzyme.', 'comment_created': datetime.datetime(2022, 7, 17, 14, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 922840690, 'comment_body': 'We need opt because, when enzyme generates code, it generates derivative code which is unoptimised. It is recommended that this code is passed through various compiler optimisations like constant folding, expression simplifications etc to increase performance. Moreover the enzyme pass is linked during an opt execution.', 'comment_created': datetime.datetime(2022, 7, 17, 14, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 922841236, 'comment_body': 'yes enzyme is a shared library, and it is located in the build folder configured by external project add in cmake. This build folder is somewhere inside the EnzymeAD folder(which is inside the clad folder). The existence of the EnzymeAD folder will show that enzyme has been included in the project ', 'comment_created': datetime.datetime(2022, 7, 17, 14, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 925164513, 'comment_body': 'I managed to remove dependency on opt, and have integrated the enzyme pass into clang command itself. Do I need to create this special flag called ""-fenzyme-backend""? I think creation of this flag is out of the scope of clad, as clad only has a frontend plugin, but enzyme has to act in the backend right?', 'comment_created': datetime.datetime(2022, 7, 20, 4, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 927359227, 'comment_body': 'Why only constant arrays? I think you mean to use `isArrayOrPointerType`.', 'comment_created': datetime.datetime(2022, 7, 22, 7, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 927364159, 'comment_body': 'We can use `config.llvm_shlib_ext`?', 'comment_created': datetime.datetime(2022, 7, 22, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 930927074, 'comment_body': 'Why this test is expected to fail?', 'comment_created': datetime.datetime(2022, 7, 27, 11, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 930947070, 'comment_body': 'Differentiation of functions in Forward mode AD with enzyme is not yet implemented. ', 'comment_created': datetime.datetime(2022, 7, 27, 11, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 930949625, 'comment_body': ""Ah, ok, let's add that as a comment before the xfail."", 'comment_created': datetime.datetime(2022, 7, 27, 11, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 944138688, 'comment_body': 'Maybe this change here is significant. Can you undo it?', 'comment_created': datetime.datetime(2022, 8, 12, 6, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 944161539, 'comment_body': 'I could have used `PR->getPassInfo(""enzyme"")` (which would have been a cleaner solution) and removed the dependence on `PassRegistrationListener`, but for some reason, the `getPassInfo` function returned `nullptr` for the above code. hence I had to use the `PassRegistrationListener` to iterate through all the passes and get the enzyme pass', 'comment_created': datetime.datetime(2022, 8, 12, 6, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 944429430, 'comment_body': 'Can you investigate why that happens?', 'comment_created': datetime.datetime(2022, 8, 12, 12, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 944430041, 'comment_body': 'Do we have test coverage for clang later than 9? If not we should add a new entry to the build matrix.', 'comment_created': datetime.datetime(2022, 8, 12, 12, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 944430661, 'comment_body': 'These should probably go in `ClangBackendPlugin.cpp`.', 'comment_created': datetime.datetime(2022, 8, 12, 12, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 944431095, 'comment_body': 'Why this code is in the header file and not in the source file?', 'comment_created': datetime.datetime(2022, 8, 12, 12, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 944434267, 'comment_body': '```suggestion\r\n\r\n```\r\nWe do not need that anymore.', 'comment_created': datetime.datetime(2022, 8, 12, 12, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 945046792, 'comment_body': 'currently the tests are run in clang-runtime 11, so adding a new entry into build matrix must not be needed', 'comment_created': datetime.datetime(2022, 8, 13, 3, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 945047153, 'comment_body': 'Okay I will shift it to the source file', 'comment_created': datetime.datetime(2022, 8, 13, 3, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 945069093, 'comment_body': 'Okay, upon some debugging I found that there are two overloaded functions for getPassInfo, one of which takes a StringRef argument, which gives its name, and the other void* type argument which is supposed to give its identifier. I was giving a char* as input hoping that it would be casted as a StringRef, but it was interpreting it as a void* argument and hence the wrong function was being called. Explicitly creating a StringRef object and passing it to getPassInfo solved the problem. ', 'comment_created': datetime.datetime(2022, 8, 13, 4, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 945087380, 'comment_body': 'The bot shows this part of the code as not covered because, this part of the code will be executed only when cmake is not configured to enable enzyme, and hence the enzyme pass is not found. In the bot where tests are enabled, this will not be covered, and hence the error. The fact that the other bots run successfully mean that this portion of code is executed when enzymePass is not found saving us from some seg faults', 'comment_created': datetime.datetime(2022, 8, 13, 5, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 945152966, 'comment_body': 'Can you check if this actually runs?', 'comment_created': datetime.datetime(2022, 8, 13, 14, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 945154538, 'comment_body': 'Can you move this in `ClangBackendPlugin.cpp`?', 'comment_created': datetime.datetime(2022, 8, 13, 14, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 945170555, 'comment_body': 'I do not see how that would be the case if we have linked enzyme in clad. Perhaps turn this into an assertion.', 'comment_created': datetime.datetime(2022, 8, 13, 17, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 945170580, 'comment_body': 'Likewise.', 'comment_created': datetime.datetime(2022, 8, 13, 17, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 945170760, 'comment_body': ""I don't think we use clad in the context of link-time optimizations. I'd suggest to leave that our for now, including the `loadLTOPass` function."", 'comment_created': datetime.datetime(2022, 8, 13, 17, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 945171636, 'comment_body': 'The linking happens only if the ENABLE_ENZYME_BACKEND flag is set during cmake configuration. This is not set in the usual case, and hence the enzyme pass will not be found in the regular use case', 'comment_created': datetime.datetime(2022, 8, 13, 17, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 945171937, 'comment_body': 'Ah... fair point, this code is still triggered. Perhaps we can adjust that as well to be conditional outside of this PR.', 'comment_created': datetime.datetime(2022, 8, 13, 17, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 945173201, 'comment_body': 'Hmm.. for me codecov shows that this code is not covered by tests. Are you looking at line 40 or 41?', 'comment_created': datetime.datetime(2022, 8, 13, 17, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 945173808, 'comment_body': 'Both. I wanted to avoid that report from codecov.', 'comment_created': datetime.datetime(2022, 8, 13, 17, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 945323619, 'comment_body': ""The osx-clang-9 bot seems to fail when the destructors of these objects are called by the runtime, during program termination. Will I have to build clang in debug mode on this bot to understand what's happening?"", 'comment_created': datetime.datetime(2022, 8, 14, 17, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 945324735, 'comment_body': ""[This](https://github.com/sampsyo/llvm-pass-skeleton/issues/7#issuecomment-461988004) seems like a reasonable explanation to what's happening"", 'comment_created': datetime.datetime(2022, 8, 14, 18, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 945329806, 'comment_body': 'Basically, this issue seems to be a standard problem in llvm-9 on Mac OS, and has been fixed in llvm-10. The only work around for this problem is [this](https://github.com/sampsyo/llvm-pass-skeleton/issues/7#issuecomment-576786718). As per the instructions in the link, I am setting the environment variable, and running clang as below:\r\n```\r\nexport DYLD_INSERT_LIBRARIES=""./obj/lib/clad.dylib""\r\n/usr/local/opt/llvm@9/bin/clang -I ./include -x c++ -std=c++11 -fplugin=./obj/lib/clad.dylib trial.cpp -o trial -lstdc++ -lm\r\n```\r\n\r\nbut I get the error:\r\n```\r\ndyld: could not load inserted library \'./obj/lib/clad.dylib\' because no suitable image found.  Did find:\r\n        ./obj/lib/clad.dylib: not a dylib\r\n        ./obj/lib/clad.dylib: stat() failed with errno=1\r\n```\r\n@vgvassilev any leads on how this can be resolved? Clearly the .dylib object is found, but is not recognised as a .dylib object. I did try the top answer in [this](https://stackoverflow.com/questions/32730312/reason-no-suitable-image-found), but that too didnt work.\r\n', 'comment_created': datetime.datetime(2022, 8, 14, 18, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 945339816, 'comment_body': 'Can you provide the stacktrace for the early dlclose call?', 'comment_created': datetime.datetime(2022, 8, 14, 20, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 945422594, 'comment_body': 'The nvvm pass is not crucial for enzyme to operate.  Currently I have commented the early nvvm pass registration, and still the error occurs ', 'comment_created': datetime.datetime(2022, 8, 15, 4, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}]","[{'commit_sha': '124e1e4df5c96fbe7230fc1fe13c3b869c0b924a', 'committer_username': 'vgvassilev', 'committer_name': 'Vassil Vassilev', 'committer_email': None, 'commit_date': datetime.datetime(2014, 1, 27, 16, 43, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3598e4880390b9c271e2dbcb17d98da05fbe5dd7', 'committer_username': 'Nirhar', 'committer_name': 'Manish Kausik H', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 3, 16, 23, 49, tzinfo=datetime.timezone.utc)}]",Manish Kausik H,46352931,,User,,25,,9,3
1027185163,Add Support for Differentiating functions with both pointer/array type and primitive type parameters with Enzyme,"This commit adds support to differentiate many more function types with enzyme.
Some example supported function types are:
```cpp
double f(double* arr)
double f(double x, double y, double z)
double f(double* arr, int n)
double f(double* arr1, int n,  double* arr2, int m)
double f(double arr[], double x,int n,double y)
```

Tests for these have been written in tests/Enzyme/ReverseMode.C",True,486,https://api.github.com/repos/vgvassilev/clad/pulls/486,https://github.com/vgvassilev/clad/pull/486,closed,253,86,7,1,2,27,0,0,[],2022-08-16 06:01:13+00:00,2022-08-24 11:53:25+00:00,712332.0,"8 days, 5:52:12","[{'comment_id': 946384226, 'comment_body': 'I am wondering if we can cross check both implementation by running all clad tests with `clad::opts::use_enzyme` (specified somehow by default) and check if we get the same results from tests.', 'comment_created': datetime.datetime(2022, 8, 16, 6, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 946386216, 'comment_body': '```suggestion\r\n      if (!isArrayOrPointerType(origParams[i]->getOriginalType())) {\r\n```\r\nWe might want to leverage `isDifferentiableType`?', 'comment_created': datetime.datetime(2022, 8, 16, 6, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 946387597, 'comment_body': '```suggestion\r\n  paramType = paramType->getPointeeOrArrayElementType();\r\n```', 'comment_created': datetime.datetime(2022, 8, 16, 6, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 946388331, 'comment_body': '```suggestion\r\n      if (!cladRefParams[i]) {\r\n```', 'comment_created': datetime.datetime(2022, 8, 16, 6, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 946389119, 'comment_body': 'Can you mention the motivation for this? Is it the case where we have `double*` as a parameter without the corresponding clad::array_ref? If so why we make this shortcut?', 'comment_created': datetime.datetime(2022, 8, 16, 6, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 946389453, 'comment_body': '```suggestion\r\n    if (enzymeRealParams.size()) {\r\n```', 'comment_created': datetime.datetime(2022, 8, 16, 6, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 947178456, 'comment_body': 'Checking during execution can be done for a few function prototypes from `test/Gradient/Loops.C` and from `test/Gradient/Gradients.C` But for compile time checks we will have to rewrite these files because the generated functions differ from what clad would normally generate. also I am not sure how we can force `clad::opts::use_enzyme` in the current clad tests', 'comment_created': datetime.datetime(2022, 8, 16, 19, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 947181648, 'comment_body': 'No, `isDifferentiableType()` will return true if the QualType is real or pointer/array types. Here I explicitly want to check if it is realType.  Maybe I should rephrase this to `isRealType(origParams[i]->getOriginalType())`', 'comment_created': datetime.datetime(2022, 8, 16, 19, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 947184731, 'comment_body': ""I think this comment is slightly misleading. i will correct this. What I meant was that, if the original parameter was of real type(float/double) then we don't have to obtain the pointer to the arrays from the `clad_array_ref` and neither do we have to add it to the arguments to the enzyme call. Thus we can skip the rest of the code in the loop."", 'comment_created': datetime.datetime(2022, 8, 16, 19, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 947767743, 'comment_body': 'also I cant get rid of the paramType variable, because I am using in many more places from here, but I have removed q2', 'comment_created': datetime.datetime(2022, 8, 17, 10, 38, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 947776631, 'comment_body': 'We need to design this to be able to be used for verification. We also have some past work in this area in #290 ', 'comment_created': datetime.datetime(2022, 8, 17, 10, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 947777466, 'comment_body': 'I think using `isArrayOrPointerType` is fine and keeping `paramType` is also fine.', 'comment_created': datetime.datetime(2022, 8, 17, 10, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 950726799, 'comment_body': ""```suggestion\r\n      // If the original parameter is not of array/pointer type, then we don't\r\n```"", 'comment_created': datetime.datetime(2022, 8, 20, 18, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 950726836, 'comment_body': '```suggestion\r\n        // If original parameter is of a differentiable real type(but not\r\n```', 'comment_created': datetime.datetime(2022, 8, 20, 18, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 950726901, 'comment_body': '```suggestion\r\n    QualType QT;\r\n```', 'comment_created': datetime.datetime(2022, 8, 20, 18, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 950733714, 'comment_body': 'Can we use `VisitorBase::GetCladClassOfType`? We should probably rename this function to `MaybeInstantiateAndGetTypeOf` or similar.', 'comment_created': datetime.datetime(2022, 8, 20, 19, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 950733891, 'comment_body': 'We can use `VisitorBase::GetCladClassDecl`, and maybe rename the function to `LookupInNamespaceClad` or something.', 'comment_created': datetime.datetime(2022, 8, 20, 19, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 950733930, 'comment_body': 'Why not `VisitorBase::BuildCallExprToMemFn`?', 'comment_created': datetime.datetime(2022, 8, 20, 19, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 950957559, 'comment_body': 'No, I cant use `CladClassOfType`, because this function inherently assumes that the template arguments will be of `QualType`, but I am using Integral constant template arguments, which wont fit into what the function was designed to do(which is to instantiate templates that use typenames)', 'comment_created': datetime.datetime(2022, 8, 22, 2, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 950958742, 'comment_body': 'No, I cant use `BuildCallExprToMemFn` because I am building an expression that access member variables and am not calling any member function. Thus the `m_Sema.ActOnCallExpr(...)` at the end of `BuildCallExprToMemFn` is problematic to my cause and so I should not be using it.', 'comment_created': datetime.datetime(2022, 8, 22, 2, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 950971648, 'comment_body': 'Changed it to `LookupTemplateDeclInCladNamespace`', 'comment_created': datetime.datetime(2022, 8, 22, 2, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 953491768, 'comment_body': ""Can't the function take optionally a `TemplateArgumentListInfo` parameter?"", 'comment_created': datetime.datetime(2022, 8, 24, 8, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 953492524, 'comment_body': 'We can have an overload of this function which does not call `ActOnCallExpr`.', 'comment_created': datetime.datetime(2022, 8, 24, 8, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 953546371, 'comment_body': 'Created a new function called `BuildExprToMemVariable`', 'comment_created': datetime.datetime(2022, 8, 24, 9, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 953626086, 'comment_body': 'How is that different from `BuildMemberExpr` in `CladUtils.cpp`?', 'comment_created': datetime.datetime(2022, 8, 24, 10, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 953654375, 'comment_body': 'Oh yes, sorry, I overlooked this', 'comment_created': datetime.datetime(2022, 8, 24, 11, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 953673343, 'comment_body': ""That's dead code it will not execute. I'd return the old version."", 'comment_created': datetime.datetime(2022, 8, 24, 11, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}]","[{'commit_sha': 'abec39f83b211cc331d092a407eb7d6fbb347c7a', 'committer_username': 'Nirhar', 'committer_name': 'Manish Kausik H', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 3, 16, 23, 49, tzinfo=datetime.timezone.utc)}]",Manish Kausik H,46352931,,User,,25,,9,3
1043683748,Benchmark Clad and Enzyme,"We compare the performance of Reverse Mode in Clad and Enzyme for 4 different kinds of functions:
1. Sum of elements of an array
2. Product of elements of an array
3. Sum of elements of an array multiplied with 2 scalars
4. The Gaussian density function",True,491,https://api.github.com/repos/vgvassilev/clad/pulls/491,https://github.com/vgvassilev/clad/pull/491,closed,175,5,6,1,1,6,0,0,[],2022-09-01 12:47:04+00:00,2022-09-03 18:14:03+00:00,192419.0,"2 days, 5:26:59","[{'comment_id': 961035813, 'comment_body': ""Wasn't that addressed by #492 "", 'comment_created': datetime.datetime(2022, 9, 1, 19, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 961038321, 'comment_body': 'yes, have removed the copy functions now', 'comment_created': datetime.datetime(2022, 9, 1, 19, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 961042346, 'comment_body': 'Does uncommenting this lines change anything for the benchmarks?', 'comment_created': datetime.datetime(2022, 9, 1, 19, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 961249448, 'comment_body': 'No, the overall performance difference of the gauss function looks the same to me.', 'comment_created': datetime.datetime(2022, 9, 2, 3, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 961250656, 'comment_body': 'So should I remove these `benchmark::DoNotOptimize` statements from everywhere in `EnzymeCladComparison.cpp`?', 'comment_created': datetime.datetime(2022, 9, 2, 3, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 961291996, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2022, 9, 2, 5, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}]","[{'commit_sha': '3e63f50848d5a6c65ffdd1889f389b46b7f3b87d', 'committer_username': 'Nirhar', 'committer_name': 'Manish Kausik H', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 3, 16, 23, 49, tzinfo=datetime.timezone.utc)}]",Manish Kausik H,46352931,,User,,25,,9,3
1043906373,Treat Request to use Enzyme for Differentiating a Function to be different from a Clad differentiation,"Prior to this commit, If a user differentiates the same function with both Clad and Enzyme, only one derivative is generated, because both Derivatives get stored in the same `DerivedFnInfo` object.
    
Hence if the derivative of a function was already found by using Enzyme or Clad, using the other method would not succeed. This is because the new `DiffRequest` would be taken as a repetition of the old one, and hence the old derivative would be returned.
    
This commit adds a new field `m_UsesEnzyme` to `DerivedFnInfo` that helps the program differentiate between a Function derived with Enzyme and Clad respectively.
",True,492,https://api.github.com/repos/vgvassilev/clad/pulls/492,https://github.com/vgvassilev/clad/pull/492,closed,52,12,3,1,4,0,0,0,[],2022-09-01 15:32:18+00:00,2022-09-01 19:22:00+00:00,13782.0,3:49:42,[],"[{'commit_sha': 'e2de62721069b4ece401dec0665bae6fbdf1c4d7', 'committer_username': 'Nirhar', 'committer_name': 'Manish Kausik H', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 3, 16, 23, 49, tzinfo=datetime.timezone.utc)}]",Manish Kausik H,46352931,,User,,25,,9,3
1044131443,Add Documentation for Integration of Enzyme with Clad,"This Commit adds documentation on how to use Enzyme within Clad. It conveys to a user on how to enable Enzyme backend within Clad and use it for Differentiating functions within clad, but with Enzyme. 

It also introduces Enzyme, Clad and their approaches to Automatic Differentiation to a new user.",True,494,https://api.github.com/repos/vgvassilev/clad/pulls/494,https://github.com/vgvassilev/clad/pull/494,closed,53,0,2,1,2,15,0,0,[],2022-09-01 19:16:43+00:00,2022-09-09 18:55:03+00:00,689900.0,"7 days, 23:38:20","[{'comment_id': 964137101, 'comment_body': '```suggestion\r\nLike Clad, `Enzyme <https://enzyme.mit.edu/>`_ is also a library for Automatic Differentiation (AD). A major difference is that, Enzyme works at the LLVM IR level, while Clad works at the Clang AST level.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 20, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 964137533, 'comment_body': '```suggestion\r\nClad analyses the Clang Abstract Syntax Tree (AST) to generate the derivative of a function, while Enzyme analyses the LLVM IR of a function to generate the derivative of the same.\r\n```\r\n\r\nAST is used on the previous line but defined here.', 'comment_created': datetime.datetime(2022, 9, 6, 20, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 964139069, 'comment_body': '```suggestion\r\nLanguages such as Rust, C++, Julia and Swift output LLVM IR which makes Enzyme is more interoperable as it can differentiate functions originally written in multiple languages.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 20, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 964139636, 'comment_body': '```suggestion\r\nHowever, in Enzyme, interoperability comes at a cost. For example, while basic functions are supported across various languages; containers, classes and other language specific constructs require extra scaffolding to be supported by Enzyme.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 20, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 964141448, 'comment_body': '```suggestion\r\nClad is more tightly coupled with the Clang frontend and the C++ language. It has access to the high-level program structure and compile-only constructs such as `consteval`. That allows more coherency when differentiating C++.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 20, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 964141924, 'comment_body': '```suggestion\r\nThis includes first class support of Object Oriented Programs written in C++.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 20, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 964144061, 'comment_body': '```suggestion\r\nThe initial integration of Enzyme in Clad is to enable cross validation of the produced code.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 20, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 964144220, 'comment_body': '```suggestion\r\nCurrently, use of Enzyme for Reverse Mode AD is supported within Clad. This section describes how Enzyme can be used within Clad. \r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 20, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 964144606, 'comment_body': '```suggestion\r\nTo enable the use of enzyme within Clad, one needs to configure Clad to use Enzyme. This can be done by adding the flag ``-DENABLE_ENZYME_BACKEND=On`` to cmake while configuring Clad build.\r\n```\r\n\r\nWe should spell out Clad consistently.', 'comment_created': datetime.datetime(2022, 9, 6, 20, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 964144776, 'comment_body': '```suggestion\r\nThus the overall cmake command should look something like this:\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 20, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 964145616, 'comment_body': '```suggestion\r\nThis flag instruct the build system to download and build Enzyme. Then it is linked as a static library to the Clad.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 20, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 964146078, 'comment_body': 'What happens if we call `dump` on a enzyme-produced gradient?', 'comment_created': datetime.datetime(2022, 9, 6, 20, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 964146325, 'comment_body': '```suggestion\r\nFor more ideas on the type of functions supported, please have a look at ``test/Enzyme/ReverseMode.C`` for examples that can be differentiated within clad.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 20, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 965989921, 'comment_body': 'It outputs the wrapper function that contains the call to `__enzyme__autodiff`', 'comment_created': datetime.datetime(2022, 9, 8, 13, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Nirhar', 'type': 'User'}, {'comment_id': 966799935, 'comment_body': 'Can you remove the these stray lines?', 'comment_created': datetime.datetime(2022, 9, 9, 8, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}]","[{'commit_sha': '95afa7484a5b8971f9a5ee6914860aff8ef9df5b', 'committer_username': 'Nirhar', 'committer_name': 'Manish Kausik H', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 3, 16, 23, 49, tzinfo=datetime.timezone.utc)}]",Manish Kausik H,46352931,,User,,25,,9,3
1045412312,Add tests to verify enzyme results with clad,"This commit takes a few test cases from `test/Gradient/Gradients.C` and `test/Gradient/Loops.C` and generates gradients for the same using Enzyme as the backend. It also generates clad derivatives for the same and verifies if the results of both are same.

This commit also restructures the test/Enzyme folder with more meaningful test names.",True,495,https://api.github.com/repos/vgvassilev/clad/pulls/495,https://github.com/vgvassilev/clad/pull/495,closed,594,0,4,1,3,0,0,0,[],2022-09-03 06:22:41+00:00,2022-09-06 20:25:13+00:00,309752.0,"3 days, 14:02:32",[],"[{'commit_sha': '2bb09ad983746e246a27b36eabdfbe16eba61dbb', 'committer_username': 'Nirhar', 'committer_name': 'Manish Kausik H', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 3, 16, 23, 49, tzinfo=datetime.timezone.utc)}]",Manish Kausik H,46352931,,User,,25,,9,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
17050358,clad,vgvassilev/clad,C++,115,275,18,47,1161,163,10,33,"[{'id': 1049082382, 'number': 497, 'closed': datetime.datetime(2022, 9, 22, 15, 12, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 7, 18, 17, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1284909.0, 'time_delta': '14 days, 20:55:09', 'additions': 494, 'deletions': 188, 'state': 'closed'}, {'id': 1045424796, 'number': 496, 'closed': None, 'created': datetime.datetime(2022, 9, 3, 7, 49, 17, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 124, 'deletions': 18, 'state': 'open'}, {'id': 1045412312, 'number': 495, 'closed': datetime.datetime(2022, 9, 6, 20, 25, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 3, 6, 22, 41, tzinfo=datetime.timezone.utc), 'time_taken': 309752.0, 'time_delta': '3 days, 14:02:32', 'additions': 594, 'deletions': 0, 'state': 'closed'}, {'id': 1044131443, 'number': 494, 'closed': datetime.datetime(2022, 9, 9, 18, 55, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 1, 19, 16, 43, tzinfo=datetime.timezone.utc), 'time_taken': 689900.0, 'time_delta': '7 days, 23:38:20', 'additions': 53, 'deletions': 0, 'state': 'closed'}, {'id': 1043906373, 'number': 492, 'closed': datetime.datetime(2022, 9, 1, 19, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 1, 15, 32, 18, tzinfo=datetime.timezone.utc), 'time_taken': 13782.0, 'time_delta': '3:49:42', 'additions': 52, 'deletions': 12, 'state': 'closed'}, {'id': 1043683748, 'number': 491, 'closed': datetime.datetime(2022, 9, 3, 18, 14, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 1, 12, 47, 4, tzinfo=datetime.timezone.utc), 'time_taken': 192419.0, 'time_delta': '2 days, 5:26:59', 'additions': 175, 'deletions': 5, 'state': 'closed'}, {'id': 1036799556, 'number': 488, 'closed': None, 'created': datetime.datetime(2022, 8, 25, 13, 55, 1, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 321, 'deletions': 13, 'state': 'open'}, {'id': 1027185163, 'number': 486, 'closed': datetime.datetime(2022, 8, 24, 11, 53, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 16, 6, 1, 13, tzinfo=datetime.timezone.utc), 'time_taken': 712332.0, 'time_delta': '8 days, 5:52:12', 'additions': 253, 'deletions': 86, 'state': 'closed'}, {'id': 1016428775, 'number': 478, 'closed': None, 'created': datetime.datetime(2022, 8, 3, 14, 54, 58, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 263, 'deletions': 29, 'state': 'open'}, {'id': 982116956, 'number': 466, 'closed': datetime.datetime(2022, 8, 15, 19, 22, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 29, 5, 2, 35, tzinfo=datetime.timezone.utc), 'time_taken': 4112381.0, 'time_delta': '47 days, 14:19:41', 'additions': 464, 'deletions': 98, 'state': 'closed'}, {'id': 964417381, 'number': 460, 'closed': datetime.datetime(2022, 6, 27, 14, 38, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 10, 18, 14, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1455814.0, 'time_delta': '16 days, 20:23:34', 'additions': 128, 'deletions': 59, 'state': 'closed'}, {'id': 958353063, 'number': 457, 'closed': datetime.datetime(2022, 7, 15, 11, 22, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 5, 5, 58, 27, tzinfo=datetime.timezone.utc), 'time_taken': 3475430.0, 'time_delta': '40 days, 5:23:50', 'additions': 27, 'deletions': 0, 'state': 'closed'}, {'id': 949492869, 'number': 455, 'closed': datetime.datetime(2022, 9, 1, 5, 3, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 27, 16, 45, 24, tzinfo=datetime.timezone.utc), 'time_taken': 8338690.0, 'time_delta': '96 days, 12:18:10', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 946394941, 'number': 454, 'closed': datetime.datetime(2022, 5, 25, 7, 38, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 25, 3, 33, 55, tzinfo=datetime.timezone.utc), 'time_taken': 14678.0, 'time_delta': '4:04:38', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 894766704, 'number': 422, 'closed': datetime.datetime(2022, 4, 12, 23, 0, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 30, 18, 29, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1139463.0, 'time_delta': '13 days, 4:31:03', 'additions': 111, 'deletions': 10, 'state': 'closed'}, {'id': 878961225, 'number': 398, 'closed': datetime.datetime(2022, 3, 26, 21, 54, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 14, 11, 54, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1072769.0, 'time_delta': '12 days, 9:59:29', 'additions': 2, 'deletions': 2, 'state': 'closed'}]"
