pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
417471943,Milestone 1.1: Added nerdamer library with typedefs.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following: Adds nerdamer library for the new math interactions.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9305,https://api.github.com/repos/oppia/oppia/pulls/9305,https://github.com/oppia/oppia/pull/9305,closed,55,1,3,4,4,10,0,2,[],2020-05-13 16:21:14+00:00,2020-05-15 02:57:36+00:00,124582.0,"1 day, 10:36:22","[{'comment_id': 424578285, 'comment_body': 'Sort alphabetically.', 'comment_created': datetime.datetime(2020, 5, 13, 16, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 424578536, 'comment_body': 'Add newline.', 'comment_created': datetime.datetime(2020, 5, 13, 16, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 424692100, 'comment_body': 'Is `strings` a valid type? Also can you please use `string` instead of `String` and `boolean` instead of `Boolean`.', 'comment_created': datetime.datetime(2020, 5, 13, 19, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 424694106, 'comment_body': ""Also you've made a change in package.json. So there should be a change in `yarn.lock` too, right?"", 'comment_created': datetime.datetime(2020, 5, 13, 19, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 424755454, 'comment_body': 'Just curious - why are we restricting String to string and ditto for boolean. And if we are doing that, we should have an automated test for that. WDYT?', 'comment_created': datetime.datetime(2020, 5, 13, 21, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 424845741, 'comment_body': ""Also, please run `yarn` to update `yarn.lock`. For context, we no longer update the `yarn.lock` file automatically so that it doesn't affect dev experience. "", 'comment_created': datetime.datetime(2020, 5, 14, 3, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kevinlee12', 'type': 'User'}, {'comment_id': 425025857, 'comment_body': ""`String` is actually a js object used to create strings like\r\n```typescript\r\nconst a = String('hello');\r\n```\r\n\r\nbut `string` is the typescript string type.\r\n\r\nReference - https://stackoverflow.com/questions/14727044/typescript-difference-between-string-and-string\r\n\r\nYup, I agree there should be a check for that!"", 'comment_created': datetime.datetime(2020, 5, 14, 10, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 425104626, 'comment_body': 'Done both.', 'comment_created': datetime.datetime(2020, 5, 14, 12, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 425104663, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 14, 12, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 425104710, 'comment_body': 'Done, thanks!', 'comment_created': datetime.datetime(2020, 5, 14, 12, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}]","[{'commit_sha': '50b9e3f23c69cf178b5a5ab17242f49d909f4b90', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e505eca914b118f89fd38967d8e876813ea5f67', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b801277fd22d83c1481541fd32589ffcaa58594c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '434ef11cd1db7c5015f4ae41030732683e14543d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}]",Prayush Dawda,35144226,,User,,27,,14,47
420808095,Milestone 1.2.1: Added math objects with validators.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following:
Adds the following objects for math interactions with their validators
 - AlgebraicExpression
 - SetOfPlaceholders
 - MathEquation
 - PositionOfTerms

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9336,https://api.github.com/repos/oppia/oppia/pulls/9336,https://github.com/oppia/oppia/pull/9336,closed,1225,3,8,43,21,274,0,0,[],2020-05-20 14:57:49+00:00,2020-06-13 08:17:09+00:00,2049560.0,"23 days, 17:19:20","[{'comment_id': 429484204, 'comment_body': 'Would you include greek letters?', 'comment_created': datetime.datetime(2020, 5, 22, 23, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429484285, 'comment_body': ""Should these be latex strings? If not, what's the full definition of the format?"", 'comment_created': datetime.datetime(2020, 5, 22, 23, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429484291, 'comment_body': ""Should these be latex strings? If not, what's the full definition of the format?"", 'comment_created': datetime.datetime(2020, 5, 22, 23, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429484711, 'comment_body': 'Missing an ""else raise"" at the bottom. Also missing backend tests.', 'comment_created': datetime.datetime(2020, 5, 22, 23, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429484766, 'comment_body': 'Drop space before ""obj"".', 'comment_created': datetime.datetime(2020, 5, 22, 23, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429484904, 'comment_body': 'Indent by 4.', 'comment_created': datetime.datetime(2020, 5, 22, 23, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429485087, 'comment_body': 'expression_is_valid\r\n\r\nBut I think you can do away with this, and just ""return False"" early at various places? Easier to follow, that way.', 'comment_created': datetime.datetime(2020, 5, 22, 23, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429485196, 'comment_body': ""Wouldn't numeric expressions be a subset of algebraic expressions (with regards to validity)?"", 'comment_created': datetime.datetime(2020, 5, 22, 23, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429485330, 'comment_body': 'No magic numbers in the code. Perhaps have separate constants for brackets/non-brackets chars.', 'comment_created': datetime.datetime(2020, 5, 22, 23, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429485379, 'comment_body': ""Isn't this covered by character validity?"", 'comment_created': datetime.datetime(2020, 5, 22, 23, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429485434, 'comment_body': 'Nit: we typically use elem', 'comment_created': datetime.datetime(2020, 5, 22, 23, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429485477, 'comment_body': 'Drop space before obj', 'comment_created': datetime.datetime(2020, 5, 22, 23, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429485527, 'comment_body': '2 = 6 - 4 seems like a valid equation to me...', 'comment_created': datetime.datetime(2020, 5, 22, 23, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429485663, 'comment_body': ""I feel like you need to do a bit more parsing. Doesn't this allow stuff like (352+)-3x which seems misformatted to me?\r\n\r\nProbably you'll need to actually build the parse tree corresponding to the expression."", 'comment_created': datetime.datetime(2020, 5, 22, 23, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429538103, 'comment_body': ""Yes, the user will be able to input greek letters but since the format is ASCIIMath, we won't need to include special characters. For instance, if the user inputs `α`, the ASCIIMath format will be `alpha`. You can try out the conversions [here](https://guppy.js.org/site/), just make sure you've selected ASCIIMath.\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 5, 23, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429538115, 'comment_body': 'The input will be in ASCIIMath format. [More info](http://asciimath.org/).', 'comment_created': datetime.datetime(2020, 5, 23, 11, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429538118, 'comment_body': ""The input will be in ASCIIMath format. [More info](http://asciimath.org/).\r\nEdit: I've updated the docstring"", 'comment_created': datetime.datetime(2020, 5, 23, 11, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429538126, 'comment_body': 'I\'m sorry, I don\'t understand why we need an ""else raise"". If it\'s not an opening or a closing bracket then we just ignore it. Note that this particular function only checks for balanced parenthesis. ', 'comment_created': datetime.datetime(2020, 5, 23, 11, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429538139, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 23, 11, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429538142, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 23, 11, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429538147, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 23, 11, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429538153, 'comment_body': ""According to the definition that we finalized in the proposal, a numeric expression should not contain anything other than numbers and an algebraic expression should contain at least one variable. That's the only difference between the two."", 'comment_created': datetime.datetime(2020, 5, 23, 11, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429538159, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 23, 11, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429538165, 'comment_body': ""Ah yes, I've removed it now, thanks!"", 'comment_created': datetime.datetime(2020, 5, 23, 11, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429538174, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 23, 11, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429538178, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 23, 11, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429538183, 'comment_body': ""That's true, but I was under the impression that we won't be supporting purely numeric equations. Also, would purely numeric expressions ever be useful?"", 'comment_created': datetime.datetime(2020, 5, 23, 11, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429586321, 'comment_body': 'This info should definitely be part of the docstring.', 'comment_created': datetime.datetime(2020, 5, 23, 23, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429586426, 'comment_body': 'Per your other comment, this should probably become ""is valid asciimath expression"" (or the subset of asciimath that we support). The docstring for this method should explain clearly and fully what the definition of ""validity"" is.', 'comment_created': datetime.datetime(2020, 5, 23, 23, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429586441, 'comment_body': 'Your reply here doesn\'t seem to jive with ""is_each_element_a_single_latin_letter"".', 'comment_created': datetime.datetime(2020, 5, 23, 23, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429586470, 'comment_body': 'Oh, yes, I see. Thanks, no action needed here -- my bad.', 'comment_created': datetime.datetime(2020, 5, 23, 23, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429586543, 'comment_body': 'I don\'t remember this part. Could you point me to the discussion?\r\n\r\nI agree that we need separate interactions for numeric and algebraic expressions. But even if the correct answer is 7x, the student can type 7. It seems to me that, logically, numeric expressions are a subset of algebraic expressions; the differences between the interactions are not just the range of inputs allowed, but also the rule checks.\r\n\r\nOr are you planning to prevent students from typing ""7""?', 'comment_created': datetime.datetime(2020, 5, 23, 23, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429586549, 'comment_body': 'Yes. E.g. questions about decomposition into place values: 734 = 700 + 30 + 4.', 'comment_created': datetime.datetime(2020, 5, 23, 23, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429631650, 'comment_body': 'Umm, I was referring to the latin alphabet with only 26 letters a-z (case insensitive). Should I change it to `is_each_element_a_single_english_alphabet` instead?', 'comment_created': datetime.datetime(2020, 5, 24, 12, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429631684, 'comment_body': ""I mentioned it in the warnings table [here](https://docs.google.com/document/d/1MkxE7mDPWZcY76v8HIz6W0LAQc5ckD6ozHQLVeR-69A/edit#bookmark=id.7xyychnrax4n). \r\n\r\nNo, the student can't type in '7'. That would be considered as incorrect since if the creator has chosen the AlgebraicExpresionInput interaction then they would obviously be expecting an algebraic expression as a correct answer.\r\nAlso, in terms of validity, we require at least one variable to be present for an algebraic expression to be valid, so we can't use the same validity for numeric expressions since they can't contain variables.\r\nI don't think numeric expressions are a subset of algebraic expressions. Also, the rule-set is pretty much the same for both (the only difference being that numeric expression input interaction won't have the MatchesWithGeneralForm rule, everything else is same)."", 'comment_created': datetime.datetime(2020, 5, 24, 12, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429631913, 'comment_body': 'If I\'m not wrong, this would fall under the numeric expression interaction, won\'t it? From the creator\'s POV, I think the question would be formed like, ""Expand 734 into its component place values"" and the accepted answer would be 700 + 30 + 4 which would use the numeric expressions interaction. \r\nAlso, if we are willing to support purely numeric equations as well, then wouldn\'t we have to split the math equation interaction into algebraic and numeric equation interactions (the same reason for splitting the expressions interaction would apply here as well)?\r\nBut that again brings up the question of how useful would the numeric equation interaction be?', 'comment_created': datetime.datetime(2020, 5, 24, 12, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 429671245, 'comment_body': 'No, I meant, it wouldn\'t be a *single* letter, right? E.g. ""alpha"".', 'comment_created': datetime.datetime(2020, 5, 24, 20, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429671469, 'comment_body': 'The link you provided doesn\'t support this discussion. It seems to point to the opposite case, which is entering a variable in the numeric expression input (which I agree should be disallowed).\r\n\r\nThat said, I think I\'m fine going with what you propose for now. Just to check: if we find in the future that there are use cases where we e.g. want to give feedback on a specific wrong student answer to an ""algebraic expression"" question, and that student answer happens to be purely numeric, what steps would need to be taken to expand algebraic expression to cover numeric expressions and would this require any migrations?', 'comment_created': datetime.datetime(2020, 5, 24, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 429671521, 'comment_body': ""Fair points. Let's leave this for now, but I'll ask the question I had above, which is: if we need to expand this later to include numeric equations too, what steps would need to be taken?"", 'comment_created': datetime.datetime(2020, 5, 24, 20, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 430375260, 'comment_body': ""Ah, yes, I've modified it now."", 'comment_created': datetime.datetime(2020, 5, 26, 12, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 430375301, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2020, 5, 26, 12, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 430375424, 'comment_body': ""In that case, we would only have to remove this check from here and from the frontend and the creator can then add purely numeric expressions in an algebraic expression interaction as well.\r\nI don't think this would need migrations since this wouldn't affect the already present data -- all of that would still be valid as they would all be algebraic expressions.\r\n\r\nBut note that the rule checks for the algebraic expression interaction would not work for numeric expressions (this was one of the reasons we decided to create separate interactions). They wouldn't necessarily throw errors if we remove this check, but they wouldn't work as expected either. For instance, 3+4 would be considered exactly equal to 7 (which is not what we want for an exact match). But yes, if the aim is just to detect if the learner has entered a purely numeric expression, then removing this check would be enough.\r\nAlso, note that the learner will get a helpful warning if they enter a numeric expression in the algebraic interaction."", 'comment_created': datetime.datetime(2020, 5, 26, 12, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 430375467, 'comment_body': ""The same points mentioned above apply here as well. We could simply allow purely numeric equations but the rule-set is going to be built for algebraic equations only, so it wouldn't work as expected. To support that we would probably have to create a new interaction for numeric equations, though again, not sure how useful that would be."", 'comment_created': datetime.datetime(2020, 5, 26, 12, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 430375529, 'comment_body': ""I've taken this approach now:\r\nCheck if the expression contains invalid characters.\r\nCheck for balanced parens. \r\nConvert the given expression to postfix.\r\nEvaluate the postfix expression and check if a single value is obtained in the end. If so, the expression is valid, else it's not."", 'comment_created': datetime.datetime(2020, 5, 26, 12, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 430375582, 'comment_body': ""I've renamed the method and updated the docstring."", 'comment_created': datetime.datetime(2020, 5, 26, 12, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 430974064, 'comment_body': 'Where?', 'comment_created': datetime.datetime(2020, 5, 27, 9, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 430974375, 'comment_body': 'The description of what placeholders are still seems wrong.', 'comment_created': datetime.datetime(2020, 5, 27, 9, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 430974506, 'comment_body': ""I don't see an update to the docstring."", 'comment_created': datetime.datetime(2020, 5, 27, 9, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 431045182, 'comment_body': 'Done now, sorry!', 'comment_created': datetime.datetime(2020, 5, 27, 11, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 431045225, 'comment_body': 'Updated the description.', 'comment_created': datetime.datetime(2020, 5, 27, 11, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 431045282, 'comment_body': 'Done now, sorry!', 'comment_created': datetime.datetime(2020, 5, 27, 11, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 431677584, 'comment_body': ""Hm. You're expecting students to type '~'?"", 'comment_created': datetime.datetime(2020, 5, 28, 8, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 431678136, 'comment_body': 'This is a function; it seems weird to write it as a constant. is_algebraic_operand perhaps?\r\n\r\nDitto below.', 'comment_created': datetime.datetime(2020, 5, 28, 8, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 431678922, 'comment_body': 'Drop one of the spaces before ""obj"". Add a space after ""obj"".', 'comment_created': datetime.datetime(2020, 5, 28, 8, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 431679819, 'comment_body': 'Seems risky; an expression may use both alpha and a, for example. (Add backend tests for this case.)', 'comment_created': datetime.datetime(2020, 5, 28, 8, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 431680483, 'comment_body': 'When calling a function with a default argvalue specified, include the argname when calling. Ditto elsewhere.', 'comment_created': datetime.datetime(2020, 5, 28, 8, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 431680863, 'comment_body': 'I think you can save the intermediate results as variables to avoid repeated computation of the same thing.', 'comment_created': datetime.datetime(2020, 5, 28, 8, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 431682750, 'comment_body': ""No examples with ~ ?\r\n\r\nAlso, in general, these feel like really weak tests that miss a lot of the cases. I don't see greek letters below, I don't see cases that mix latin and greek letters, you'll want to try some equations with spaces in them, etc. Try to be (much!) more comprehensive and think of all the different ways students could write something. I would expect probably three times as many tests as are currently written here, that try to catch a variety of different classes of errors."", 'comment_created': datetime.datetime(2020, 5, 28, 8, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 431739330, 'comment_body': ""No, not at all. While parsing the string (in the tokenize function [here](https://github.com/oppia/oppia/pull/9336/files#diff-781314b975a52120938e342ae5ffd787R302)) I've checked if the '-' sign represents unary negation or binary subtraction and replaced '-' with '~' if the former is true. This is done so that while validating the postfix expression, I would know if the '-' is expecting two operators or one. So basically, `a - (-b)` would be changed to `a - (~b)`."", 'comment_created': datetime.datetime(2020, 5, 28, 10, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 431740951, 'comment_body': 'Since this is a global variable, the linter treats it as a constant which is why it requires uppercase. Some other instances of this pattern are [here](https://github.com/oppia/oppia/blob/a1fa806b883d4522df07698022d6e5acc9e48b85/feconf.py#L471).', 'comment_created': datetime.datetime(2020, 5, 28, 10, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 431744121, 'comment_body': 'Then I would suggest that you write it as a regular function, with args, docstring, etc.', 'comment_created': datetime.datetime(2020, 5, 28, 10, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 431744352, 'comment_body': ""Yes, but since this is just a structural check, it doesn't matter. Initially, I'd used 'α' instead of 'a' but that was causing some issues while validating the postfix expression since it would get converted to its unicode equivalent which is not a single character and would, therefore, be considered as an invalid token. With this approach, something like `alpha^a + beta^b` would be converted to `a^a + b^b` which is structurally equivalent and simpler to handle.\r\nI'll still add a backend check just in case.\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 5, 28, 10, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 431747883, 'comment_body': ""> No examples with ~ ?\r\n\r\nThe student isn't expected to enter ~. That would be an invalid character and the expression would be evaluated as an invalid one if it contains ~. The one that has been used in the code is simply to distinguish between the unary negation and binary subtraction, this symbol is arbitrary.\r\n\r\n> I don't see greek letters below, I don't see cases that mix latin and greek letters, you'll want to try some equations with spaces in them, etc.\r\n\r\nUmm, this is the numeric expression validation which shouldn't contain greek/english alphabets. I have added cases that cover the things you're talking about in the test function right [above](https://github.com/oppia/oppia/pull/9336/files#diff-c74be67925376344e4088b160b1135b4R491). Also, the reason for not adding too many cases here is that this is just a slight variation of the algebraic validation and almost uses the same approach so I thought adding a lot of cases in the algebraic expression test function would indirectly imply that this one works correctly as well. But perhaps that was wrong of me, I'll add more test cases here and in the equation validation as well.\r\n"", 'comment_created': datetime.datetime(2020, 5, 28, 10, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 431792260, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 28, 12, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 431792421, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 28, 12, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 431792640, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 28, 12, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 431792698, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 28, 12, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 432897176, 'comment_body': 'Naming of this seems wrong. Also, perhaps just use ""choices"" instead?', 'comment_created': datetime.datetime(2020, 5, 31, 0, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432897245, 'comment_body': ""OK. Perhaps worth adding a comment explaining. (In general, proactively do this if you're doing something non-obvious in the code -- new developers won't read your design doc or know where to find it.)"", 'comment_created': datetime.datetime(2020, 5, 31, 0, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432902758, 'comment_body': 'Ah yes, I see. I suggest that you add a note to that effect in the comment.\r\n\r\nHowever, I think using expression.replace() is tricky, and that you should be doing the substitution as part of tokenization instead. Otherwise, what if the expression contains something like ""balpha""? (Or you can probably construct examples where different orders of iteration through the greek letters produce different validity results.)\r\n\r\nMore generally, why don\'t you use the existing Backus-Naur grammar at the bottom of http://asciimath.org/ to construct the parse tree (something like [this](https://ruslanspivak.com/lsbasi-part4/) perhaps)? That way, you won\'t have any discrepancies between backend and frontend.', 'comment_created': datetime.datetime(2020, 5, 31, 2, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432902852, 'comment_body': 'No idea what ""i"" is, use a more semantic name.', 'comment_created': datetime.datetime(2020, 5, 31, 2, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432904590, 'comment_body': 'It seems odd to have current_token be the name of a list (which is presumably plural).', 'comment_created': datetime.datetime(2020, 5, 31, 2, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432904658, 'comment_body': 'What if a number contains multiple dots, e.g. 23.4.5? Will this detect that it is invalid?', 'comment_created': datetime.datetime(2020, 5, 31, 2, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432904695, 'comment_body': ""Should raise error, right? Or return None?\r\n\r\nAt the very least, semantically, you'll need some kind of sentinel value named constant that's defined at the module-level and reused."", 'comment_created': datetime.datetime(2020, 5, 31, 2, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432904763, 'comment_body': ""OK, thanks for the explanation. Let's leave the requirements as they are for now, then."", 'comment_created': datetime.datetime(2020, 5, 31, 3, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432904853, 'comment_body': ""Thanks, the tests are better now. And, you're testing interface, not implementation, so all the functions should be treated as independent. The tests for one function don't imply anything about the tests for other functions.\r\n\r\nAlso, although the student isn't expected to enter ~, they still might, so include some tests with that."", 'comment_created': datetime.datetime(2020, 5, 31, 3, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432980856, 'comment_body': 'I\'ve updated the validator name along with the docstring of the validator function.\r\nI don\'t see why we need to use ""choices""? The validation is quite straightforward so it doesn\'t make sense listing down all the possible letters instead.', 'comment_created': datetime.datetime(2020, 5, 31, 20, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 432980865, 'comment_body': ""I'd added a comment explaining it [here](https://github.com/oppia/oppia/pull/9336/files#diff-781314b975a52120938e342ae5ffd787R319)."", 'comment_created': datetime.datetime(2020, 5, 31, 20, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 432980883, 'comment_body': '> Ah yes, I see. I suggest that you add a note to that effect in the comment.\r\n\r\nAdded\r\n\r\n> However, I think using expression.replace() is tricky, and that you should be doing the substitution as part of tokenization instead.\r\n\r\nSorry if I\'m misunderstanding, but it _is_ a part of tokenization, isn\'t it?\r\n\r\n> Otherwise, what if the expression contains something like ""balpha""?\r\n\r\nThat would be converted to ""ba"" which is still structurally invalid. I don\'t think there are any examples wherein greek words cause false positives to arise.\r\n\r\n> More generally, why don\'t you use the existing Backus-Naur grammar at the bottom of http://asciimath.org/ to construct the parse tree (something like this perhaps)? That way, you won\'t have any discrepancies between backend and frontend.\r\n\r\nI think, to check for syntactic validity, there\'s no need to generate a parse tree, we can simply convert infix to postfix and evaluate the postfix -- which is what I\'ve done atm.', 'comment_created': datetime.datetime(2020, 5, 31, 20, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 432980907, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 31, 20, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 432980918, 'comment_body': ""I've changed the name of the variable.\r\nThe only reason I used a list instead of a string is that I'm appending characters to this while iterating through the loop so it's more efficient to append items to a list as compared to a string since strings are immutable."", 'comment_created': datetime.datetime(2020, 5, 31, 20, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 432980930, 'comment_body': ""Yes, it would. I've also added tests for this case."", 'comment_created': datetime.datetime(2020, 5, 31, 20, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 432980953, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 31, 20, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 432980963, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 31, 20, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 432986133, 'comment_body': 'No, I mean, adding a comment here explaining the point above (i.e. something along the lines of ""you do not expect students to type that character and that it\'s being added by us as part of the XXX function below"").\r\n\r\nThink about a future dev who is, perhaps, trying to add a new operator to this OPERATOR_PRECEDENCE constant. They won\'t know that you have a comment somewhere else in the file relating to this.', 'comment_created': datetime.datetime(2020, 5, 31, 21, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432986967, 'comment_body': '>> However, I think using expression.replace() is tricky, and that you should be doing the substitution as part of tokenization instead.\r\n> Sorry if I\'m misunderstanding, but it is a part of tokenization, isn\'t it?\r\n\r\nNot really. Tokenization means splitting the string into its constituent parts. It doesn\'t involve replacing or overwriting parts of the original string -- if you tokenize b * alpha you should get [\'b\', \'*\', \'alpha\']. Substitution only comes after tokenization but is usually not something that\'s done.\r\n\r\n> That would be converted to ""ba"" which is still structurally invalid. I don\'t think there are any examples wherein greek words cause false positives to arise.\r\n\r\nIs it structurally invalid? I typed ""ba"" into the demo at http://asciimath.org/ and it works. There is a legitimate ambiguity about whether to interpret ""balpha"" as ""b * alpha"" or ""b * a * l * p * h * a"" so you need to make sure that your results here always match whatever asciimath does, and there needs to be proof of that. \r\n\r\n> I think, to check for syntactic validity, there\'s no need to generate a parse tree, we can simply convert infix to postfix and evaluate the postfix -- which is what I\'ve done atm.\r\n\r\nThe onus is on you to prove formally/rigorously that this works in all cases, not on me (or your users, if you push this to production) to find counterexamples and run into errors/frustrations. The proof will be easier if you validate against the already-established grammar using standard methods for handling Backus-Naur or context-free grammar parsing, since by definition this will work. But if you have a parsing approach that is completely different, then it needs a formal proof of equivalence.\r\n\r\nMore specifically, there needs to be a formal grammar for what ""algebraic expression"" is and you need to parse according to that grammar. If that grammar is the same as the asciimath grammar, then you can default to that. If it\'s a different grammar you need to specify it here, make clear that it\'s a proper subset of asciimath, and parse according to that second grammar.\r\n\r\nNote that the grammar/proof should be included in the relevant docstring. This is important for future maintainability, since it allows us to update the grammar and/or update the proof if the definition of validity changes in the future.\r\n\r\nLet me know if you have any questions about this.', 'comment_created': datetime.datetime(2020, 5, 31, 21, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432987151, 'comment_body': '> I\'ve updated the validator name along with the docstring of the validator function. I don\'t see why we need to use ""choices""? The validation is quite straightforward so it doesn\'t make sense listing down all the possible letters instead.\r\n\r\nBecause you\'re introducing an entirely new custom function, which is a broader change than using an existing function that is known to work well and that has been battle-tested. So, if you have existing infrastructure that already does the job, use that, rather than creating something completely custom that is relevant only to your specific interaction(s).\r\n\r\n(You can still store that list in a named constant so that it doesn\'t need to be duplicated each time.)', 'comment_created': datetime.datetime(2020, 5, 31, 21, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432988048, 'comment_body': ""I just realized something -- every function in this file should have its own unit tests. In particular, you should also have tests for tokenize(). Could you please add them?\r\n\r\n(I was trying to figure out how numbers with multiple decimal points in them are handled and AFAICT the tokenize() function seems to just write the whole thing as a token even though it's invalid, but the tests would help verify things like this.)"", 'comment_created': datetime.datetime(2020, 5, 31, 21, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435049097, 'comment_body': 'Can you please give these names which have more semantic meaning than ""expr1"" and ""expr2""?', 'comment_created': datetime.datetime(2020, 6, 4, 7, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435050631, 'comment_body': '`<function>` is not defined.', 'comment_created': datetime.datetime(2020, 6, 4, 7, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435050929, 'comment_body': 'So ""abcd"" is an identifier...? I don\'t think that\'s what you originally intended.\r\n\r\nAlso how are we handling greek letters by the time they get expressed in this form?', 'comment_created': datetime.datetime(2020, 6, 4, 7, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435051659, 'comment_body': 'Is ""2x"" a valid unit/expression? It seems missing from your tests, so I cannot tell.', 'comment_created': datetime.datetime(2020, 6, 4, 7, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435056648, 'comment_body': 'Perhaps ""Invalid token syntax: "" and add the token to the exception message, so that you can debug?', 'comment_created': datetime.datetime(2020, 6, 4, 7, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435056795, 'comment_body': 'Have only one blank line between methods in a class. Ditto elsewhere.', 'comment_created': datetime.datetime(2020, 6, 4, 7, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435057028, 'comment_body': 'Have one blank line above ""Returns"". Ditto elsewhere. Please follow existing style guide.', 'comment_created': datetime.datetime(2020, 6, 4, 7, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435057332, 'comment_body': 'The last part seems wrong. Please proofread your PR and make sure all docstrings and comments (and code!) are correct.', 'comment_created': datetime.datetime(2020, 6, 4, 7, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435058221, 'comment_body': 'Is this only internal nodes? Or all nodes (including leaf nodes)?', 'comment_created': datetime.datetime(2020, 6, 4, 7, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435058439, 'comment_body': 'Here and below, why do you need to pass the operator_token in, especially if it would be the same for every invocation?', 'comment_created': datetime.datetime(2020, 6, 4, 7, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435058866, 'comment_body': 'Perhaps explain what an ""identifier node"" is.', 'comment_created': datetime.datetime(2020, 6, 4, 7, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435059215, 'comment_body': ""Can you derive this from the constants defined at the top of the file? That way, it's automatically kept up-to-date."", 'comment_created': datetime.datetime(2020, 6, 4, 7, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435059671, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 6, 4, 7, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435059906, 'comment_body': ""If you have a link to a blog post or doc explaining the overall methodology, it's worth adding it here for the benefit of future contributors."", 'comment_created': datetime.datetime(2020, 6, 4, 7, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435060200, 'comment_body': ""Shouldn't each greek letter be its own token?"", 'comment_created': datetime.datetime(2020, 6, 4, 7, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435060681, 'comment_body': ""It is probably more semantic to use ['[', '{'], since tokens can, in general, be strings of arbitrary length. Ditto below."", 'comment_created': datetime.datetime(2020, 6, 4, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435060891, 'comment_body': 'Then should parse_expr be private (i.e. prefixed with underscore)?', 'comment_created': datetime.datetime(2020, 6, 4, 7, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435061117, 'comment_body': 'You need a better name for this -- no one has any idea what parse_expr1, parse_expr2 are.', 'comment_created': datetime.datetime(2020, 6, 4, 7, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435061504, 'comment_body': 'Don\'t know about that -- what if you have ""---+34""? Is that valid? I have no idea, and your tests don\'t seem to cover it.\r\n\r\nYou might want to re-examine your tests, there seem to be gaps.', 'comment_created': datetime.datetime(2020, 6, 4, 7, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435062591, 'comment_body': ""Don't just raise a generic exception like this. Include more info about the issue and the thing you're trying to parse so that you can actually debug things. Ditto elsewhere."", 'comment_created': datetime.datetime(2020, 6, 4, 7, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435063794, 'comment_body': 'You might perhaps go with a convention of having parsed things start with parsed (e.g. ""parsed_right"") to distinguish them from unparsed things? I\'m not sure.\r\n\r\nI guess you could just have a _token suffix for textual stuff, too. But the above might be useful for removing any potential ambiguity. I\'m not sure, what do you think?', 'comment_created': datetime.datetime(2020, 6, 4, 7, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435064327, 'comment_body': 'Should it be ""allowed token texts""? Otherwise, sounds like a Token object.', 'comment_created': datetime.datetime(2020, 6, 4, 7, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435064744, 'comment_body': ""Name is now wrong, since you're not parsing against asciimath."", 'comment_created': datetime.datetime(2020, 6, 4, 8, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435064898, 'comment_body': 'I think you can drop this. See a previous comment.', 'comment_created': datetime.datetime(2020, 6, 4, 8, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435176747, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435176806, 'comment_body': 'Definition added.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435176829, 'comment_body': ""No, it is not. I've added tests for it now.\r\nThough note that, I'd added a test with 'ab/2' which seemed to cover this case."", 'comment_created': datetime.datetime(2020, 6, 4, 11, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435176872, 'comment_body': '> So ""abcd"" is an identifier...?\r\n\r\nNo, it is not. I\'ve updated the definition and made it more precise now.\r\n\r\n> Also how are we handling greek letters by the time they get expressed in this form?\r\n\r\nI\'ve added them explicitly in the definition now.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435176912, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435176943, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435176971, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435176987, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177018, 'comment_body': ""This could be any node of the tree, including leaf nodes. In that case, the children list would be empty. I've updated the docstring."", 'comment_created': datetime.datetime(2020, 6, 4, 11, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177040, 'comment_body': ""Yes, it would be the same for every instance of this class. But, let's say in the future we need to perform some operations on this parse tree which requires iterating over the nodes of the tree. We would then need some information about which operator/identifier the node contains, right? We can't just have the node be represented by its children only. There has to be some information about the value that node stores."", 'comment_created': datetime.datetime(2020, 6, 4, 11, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177086, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177121, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 4, 11, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177150, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177178, 'comment_body': ""Yes, it is. The expression `alpha + b/2.3` would be tokenized as `['alpha', '+', 'b', '/', '2.3']`."", 'comment_created': datetime.datetime(2020, 6, 4, 11, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177203, 'comment_body': 'Using regex instead of loops for tokenization is simpler.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177227, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177249, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177276, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177304, 'comment_body': ""Technically, it is valid, isn't it? They are all unary operators that can be stacked on top of each other. I've tried this out on other websites (khanacademy and desmos) and they allow it. Actually the way khanacademy deals with this is that, it doesn't consider extra unary operators as syntactically invalid, but they require the students to have the answer in the simplest form whenever that constraint is possible which inturn disallows redundant operators in the expression."", 'comment_created': datetime.datetime(2020, 6, 4, 11, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177340, 'comment_body': ""I agree. That would make things less ambiguous. I've made the necessary changes, thanks!"", 'comment_created': datetime.datetime(2020, 6, 4, 11, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177367, 'comment_body': 'Updated all exception messages.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177412, 'comment_body': 'Yes, that makes sense. Done.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177520, 'comment_body': ""Understood. I've made the changes."", 'comment_created': datetime.datetime(2020, 6, 4, 11, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177602, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435177634, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435197613, 'comment_body': 'This conversation is obsolete due to the new changes. Now, there is no need for replacing - with ~.', 'comment_created': datetime.datetime(2020, 6, 4, 11, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435201973, 'comment_body': 'As per discussion here, the approach of validation has been updated to generating a parse tree instead of simply converting from infix to postfix.\r\n\r\nAbout the concatenation of operands -- With the new implementation, concatenation of operators is not allowed, i.e., `ab` != `a * b`. This would imply that there is no ambiguity between variables, greek letters, and math functions. So, ""balpha"" would be treated as `b * alpha` and not `b * a * l * p * h * a`.', 'comment_created': datetime.datetime(2020, 6, 4, 12, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435202942, 'comment_body': ""Comment is obsolete due to new changes. These functions don't exist anymore."", 'comment_created': datetime.datetime(2020, 6, 4, 12, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435524511, 'comment_body': 'I think I saw that, but note that ""ab"" is different from ""2x"" conceptually.', 'comment_created': datetime.datetime(2020, 6, 4, 20, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435524894, 'comment_body': ""Sure, but you don't need to pass it in right? You could still set it as e.g. a class constant or within the `__init__` method.\r\n\r\nPassing operator_token in suggests that various possible values for operator_token exist."", 'comment_created': datetime.datetime(2020, 6, 4, 20, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435525309, 'comment_body': 'No, I meant constructing the regex programmatically.', 'comment_created': datetime.datetime(2020, 6, 4, 20, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435843523, 'comment_body': ""@iamprayush I think I've mentioned this before, but please note that every public function needs to have its own unit tests."", 'comment_created': datetime.datetime(2020, 6, 5, 10, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435843777, 'comment_body': '(Please check that this is the case for all functions in this PR.)', 'comment_created': datetime.datetime(2020, 6, 5, 10, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435848471, 'comment_body': ""@seanlip I'll add the tests for `contains_balanced_brackets` and `is_algebraic` since they are global functions. But just to confirm, I don't need to add tests for the parser functions, right? Since all of them, are being checked by the test cases that I've already added. \r\nAlso, I'm not sure how exactly they would be tested since they are interdependent recursive functions that implement a particular production rule of the grammar, so having separate independent unit tests for them doesn't really make sense since none of them can ever be used independently."", 'comment_created': datetime.datetime(2020, 6, 5, 11, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435848951, 'comment_body': 'expression is misspelled.', 'comment_created': datetime.datetime(2020, 6, 5, 11, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435849208, 'comment_body': 'token_texts, because these are not Token domain objects.\r\n\r\nPlease check the PR and make sure you are distinguishing clearly between tokens (domain objects) and token_texts (the strings contained within those objects).', 'comment_created': datetime.datetime(2020, 6, 5, 11, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 435859184, 'comment_body': 'I understand. Done.', 'comment_created': datetime.datetime(2020, 6, 5, 11, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435859217, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 5, 11, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435859321, 'comment_body': 'Tests for global functions added.', 'comment_created': datetime.datetime(2020, 6, 5, 11, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 435996086, 'comment_body': ""Can't we support more letters, like Sigma (which can be common), or is there a restriction based on library?"", 'comment_created': datetime.datetime(2020, 6, 5, 15, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 435996919, 'comment_body': 'Yeah, as long as all the different parser functions are tested with equations (both success and failure for each), I think it should be fine.', 'comment_created': datetime.datetime(2020, 6, 5, 15, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436000512, 'comment_body': ""Won't the `Token` class already throw an error if any of this is invalid via the `is_identifier` function called during init()? Is this really needed here?"", 'comment_created': datetime.datetime(2020, 6, 5, 15, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436005027, 'comment_body': 'Combine both these in an `or` statement?', 'comment_created': datetime.datetime(2020, 6, 5, 15, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436006386, 'comment_body': 'So, is the sign also passed here?', 'comment_created': datetime.datetime(2020, 6, 5, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436007477, 'comment_body': 'This class is never used on its own, right? Just inherited by others? If so, make sure to mention that as well.', 'comment_created': datetime.datetime(2020, 6, 5, 15, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436008728, 'comment_body': 'a Number', 'comment_created': datetime.datetime(2020, 6, 5, 15, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436012824, 'comment_body': 'Move this to right after invalid character check?', 'comment_created': datetime.datetime(2020, 6, 5, 15, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436013420, 'comment_body': 'Remove new line', 'comment_created': datetime.datetime(2020, 6, 5, 15, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436015007, 'comment_body': 'Remove new line between docstring and code, ditto elsewhere.', 'comment_created': datetime.datetime(2020, 6, 5, 15, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436017285, 'comment_body': 'Add that it does without iterating `next_token_index`, since that seems to be the main part?', 'comment_created': datetime.datetime(2020, 6, 5, 16, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436019475, 'comment_body': 'Just return True? Since the function is just used for checking.', 'comment_created': datetime.datetime(2020, 6, 5, 16, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436019601, 'comment_body': 'In which case, return False here.', 'comment_created': datetime.datetime(2020, 6, 5, 16, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436020429, 'comment_body': '`is_next_token` means it is just checking whether the next is this operator. Either use get_next_token here or combine both these functions.', 'comment_created': datetime.datetime(2020, 6, 5, 16, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436024538, 'comment_body': 'Have return True outside try - except. That would be the same, right?', 'comment_created': datetime.datetime(2020, 6, 5, 16, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436025977, 'comment_body': ""Something like 'alpha + zeta' is also not algebraic, right? Maybe check that? Basically some that have a valid and invalid identifier."", 'comment_created': datetime.datetime(2020, 6, 5, 16, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436027407, 'comment_body': ""Aren't these the 'Identifiers', if so maybe rename these to 'AlgebraicIdentifiers' or something similar?"", 'comment_created': datetime.datetime(2020, 6, 5, 16, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436032385, 'comment_body': ""Wouldn't algebraic validity imply numerical validity, since we are removing the restriction that at least one token should be an identifier?"", 'comment_created': datetime.datetime(2020, 6, 5, 16, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436034072, 'comment_body': ""Is this invalid because of 'space'? If so, is that something that we can manually ignore, by replacing with ''?\r\n\r\ncc @seanlip "", 'comment_created': datetime.datetime(2020, 6, 5, 16, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436034557, 'comment_body': 'So, we are not supporting inequalities for now?', 'comment_created': datetime.datetime(2020, 6, 5, 16, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436213123, 'comment_body': ""If you can't test a function, that's generally a bit of a red flag indicating that your function is too tightly coupled.\r\n\r\nIn general, all public functions should be tested. However, if you want certain functions to be private, you can add an underscore before their names. Don't use this as a crutch, though -- private-ness should be used to prevent outside modules from calling the function, not to get around the standard code hygiene requirements for testing and self-containedness of functions."", 'comment_created': datetime.datetime(2020, 6, 6, 0, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436213327, 'comment_body': 'I think this is more for checking if there are any alphabetic tokens (vs if all the tokens are numeric in nature), rather than validity?', 'comment_created': datetime.datetime(2020, 6, 6, 0, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436213570, 'comment_body': 'Use named constants for strings that are referenced more than once. You can make those named constants private to the expression_parser module.', 'comment_created': datetime.datetime(2020, 6, 6, 0, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436215106, 'comment_body': 'Hm, given this, perhaps worth calling this class UnaryFunction?', 'comment_created': datetime.datetime(2020, 6, 6, 0, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436215382, 'comment_body': 'Probably better to have Node at the end of the classname, here and below.\r\n\r\nAlso, suggest using the noun form -- e.g. AdditionOperatorNode. Otherwise, sounds like you are trying to ""add an operator"".', 'comment_created': datetime.datetime(2020, 6, 6, 0, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436215669, 'comment_body': ""Use string interpolation and set the value just once rather than redefining:\r\n\r\n```\r\nre_string = (\r\n    r'(....|[%s])' % ...)\r\n```"", 'comment_created': datetime.datetime(2020, 6, 6, 0, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436215837, 'comment_body': 'In varnames, please differentiate between token and token_text. Otherwise, lines like this read quite confusingly.', 'comment_created': datetime.datetime(2020, 6, 6, 0, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436215898, 'comment_body': 'Update docstrings too (parse_expr --> _parse_expr)', 'comment_created': datetime.datetime(2020, 6, 6, 0, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436216107, 'comment_body': ""The name of this function suggests it returns a boolean -- I think you need a better name. Something like get_next_token_if_matches() perhaps -- I'm not quite sure."", 'comment_created': datetime.datetime(2020, 6, 6, 0, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436220615, 'comment_body': 'I\'m finding it quite hard to follow the logic of these functions, because everything seems to be intertwined. E.g. we call self.parse_mul_expr() below but I don\'t have any idea what is being parsed at each stage. It seems like this and other similar functions are editing ""global state"", which means that the functions have side effects and are difficult to understand individually.\r\n\r\nCould you please make each function self-contained, and not have side effects? You can do this by using function args to pass data in, and the function acts only on the data that is passed in and not on data that is outside it. For example, you might pass in the substring or sublist that is currently being parsed.\r\n\r\nThis also has the advantage of making the functions testable, which is important.', 'comment_created': datetime.datetime(2020, 6, 6, 0, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436220840, 'comment_body': ""It may be valid or invalid -- it's a matter of definition. The point I was making was to ensure that some of these cases are included in your tests."", 'comment_created': datetime.datetime(2020, 6, 6, 0, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436221196, 'comment_body': 'You don\'t compare a ""token"" with ""text"" -- keep these concepts separate. Maybe you mean token text.\r\n\r\nA token is a ""container"" object that happens to contain some text as one of its properties.', 'comment_created': datetime.datetime(2020, 6, 6, 0, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436222109, 'comment_body': 'Perhaps use parens to indicate precedence -- I think most devs won\'t know whether ""not"" or ""^"" takes precedence.', 'comment_created': datetime.datetime(2020, 6, 6, 1, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436222161, 'comment_body': 'Can you also add: ""Note that purely-numeric expressions are NOT considered valid algebraic expressions.""', 'comment_created': datetime.datetime(2020, 6, 6, 1, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436222206, 'comment_body': 'Not done. Please double-check (using the Files Changed tab) that you have actually addressed the comment before claiming completion.', 'comment_created': datetime.datetime(2020, 6, 6, 1, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436222322, 'comment_body': 'Other equations have spaces too. I think the issue is that there is no equality sign.', 'comment_created': datetime.datetime(2020, 6, 6, 1, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436222348, 'comment_body': 'Perhaps add a case with ==.', 'comment_created': datetime.datetime(2020, 6, 6, 1, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436262874, 'comment_body': ""Agreed, I've removed the try-except block, that's redundant."", 'comment_created': datetime.datetime(2020, 6, 6, 11, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436262925, 'comment_body': ""No, only the numeric value is passed. I'm just trying to be explicit about the possible inputs to this function."", 'comment_created': datetime.datetime(2020, 6, 6, 11, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436263001, 'comment_body': ""I've renamed the function to avoid confusion."", 'comment_created': datetime.datetime(2020, 6, 6, 11, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436263003, 'comment_body': ""I've renamed the function to avoid confusion."", 'comment_created': datetime.datetime(2020, 6, 6, 11, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436263201, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436263227, 'comment_body': ""That's what I'd done initially but the linter check failed saying that the parens are superfluous."", 'comment_created': datetime.datetime(2020, 6, 6, 12, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436263350, 'comment_body': ""No, it wouldn't. The restriction is still present. For algebraic expressions, at least one token should be a valid identifier and for numeric, there should be none. Could you please point towards the discussion/code that caused this confusion so that I can fix it?"", 'comment_created': datetime.datetime(2020, 6, 6, 12, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436263366, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436263472, 'comment_body': ""That's right. Handling inequalities would be relatively complex and it's not that important as of now, which is why we'd decided to leave it for now."", 'comment_created': datetime.datetime(2020, 6, 6, 12, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436263733, 'comment_body': ""I've extended the greek letters list so 'zeta' is now a valid identifier. I've added a test case with valid + invalid identifiers below."", 'comment_created': datetime.datetime(2020, 6, 6, 12, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436263751, 'comment_body': ""Wait, this shouldn't be algebraic, right? Since `bet` is not a valid identifier?"", 'comment_created': datetime.datetime(2020, 6, 6, 12, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436263849, 'comment_body': ""I thought these would be enough for now, but adding more isn't a problem. I've added all the greek letters now."", 'comment_created': datetime.datetime(2020, 6, 6, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436263924, 'comment_body': 'Yup, sorry, just saw that. Fixed it now.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264032, 'comment_body': ""Oh, ok, thanks for clarifying! You could add a comment above the XOR line in `is_valid_math_expression`, other than that I think it's clear enough."", 'comment_created': datetime.datetime(2020, 6, 6, 12, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436264151, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264213, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264231, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264241, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264252, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264257, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264281, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264299, 'comment_body': ""I've renamed the function to avoid confusion."", 'comment_created': datetime.datetime(2020, 6, 6, 12, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264310, 'comment_body': 'Yup, done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264357, 'comment_body': 'Test added.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264379, 'comment_body': 'Yes, that does make things simpler! Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264571, 'comment_body': ""I've added a comment in the docstring of that function that should clear things up."", 'comment_created': datetime.datetime(2020, 6, 6, 12, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264665, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264714, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264731, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264738, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264746, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264752, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264755, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264786, 'comment_body': 'Changed it.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436264793, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 12, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436316688, 'comment_body': '_TOKEN_CATEGORY_IDENTIFIER, etc. -- and declare these as separate constants, similar to how we do so elsewhere.', 'comment_created': datetime.datetime(2020, 6, 7, 1, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436316698, 'comment_body': 'token_texts (otherwise, sounds like one piece of text covering all tokens).', 'comment_created': datetime.datetime(2020, 6, 7, 1, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436316766, 'comment_body': 'Add a blank line above this one.', 'comment_created': datetime.datetime(2020, 6, 7, 2, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436316787, 'comment_body': 'variable --> attribute', 'comment_created': datetime.datetime(2020, 6, 7, 2, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436316811, 'comment_body': 'token_texts', 'comment_created': datetime.datetime(2020, 6, 7, 2, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436316845, 'comment_body': 'Put a period or a semicolon after ""token"".', 'comment_created': datetime.datetime(2020, 6, 7, 2, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 436587592, 'comment_body': 'Tests added.', 'comment_created': datetime.datetime(2020, 6, 8, 10, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436587792, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 10, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436588850, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 10, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436588951, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 10, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436589221, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 10, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436589270, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 10, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436589381, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 10, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 437060551, 'comment_body': '""x"" seems more standard?\r\n\r\nDitto for the others -- perhaps ""x"", ""x"", ""x=y""?', 'comment_created': datetime.datetime(2020, 6, 8, 23, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 437062190, 'comment_body': ""This function needs comprehensive unit tests.\r\n\r\nAs a meta note, please bear this in mind for future PRs, and write tests automatically as a matter of course. If you don't do it, then reviewers will just ask you for it and it lengthens the time taken overall."", 'comment_created': datetime.datetime(2020, 6, 8, 23, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 437074224, 'comment_body': 'This looks weird. Should be Parser.validate(expression) or similar.', 'comment_created': datetime.datetime(2020, 6, 9, 0, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 437075107, 'comment_body': ""Try not to redefine like this. Instead, turn the compilation of token_list into a for loop and create the correct token before appending it to the list.\r\n\r\n(I also mildly wonder if you even need to do this, since e.g. we don't replace all digits with 1 and all letters with 'a'. But I'm fine either way.)\r\n\r\nAlso I'm a bit skeptical of re.findall(). Shouldn't this somehow check that there are no chars in remaining in the original expression after everything that can be assigned has been assigned to a regex? A simple way to do it might be to compare the len() of the original expression and the sum of lengths of the token texts. Unit tests should catch this stuff."", 'comment_created': datetime.datetime(2020, 6, 9, 0, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 437075543, 'comment_body': 'MATH_FUNCTION_NAMES\r\n\r\nBtw should these constants be (module-)private? In general, make things private if they can be private.', 'comment_created': datetime.datetime(2020, 6, 9, 0, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 437076785, 'comment_body': ""You have this check in multiple places in this file, as well as in AlgebraicIdentifier in objects.py. Perhaps combine all of them to make sure things don't skew in the future? I.e. define a constant in this file that's a single list with all the latin + greek letters (same way you did in objects.py) and have everything just use that, rather than treating both cases differently each time."", 'comment_created': datetime.datetime(2020, 6, 9, 0, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 437077008, 'comment_body': 'given --> the given. Ditto below.', 'comment_created': datetime.datetime(2020, 6, 9, 0, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 437077939, 'comment_body': 'I notice this is sometimes called self.token and sometimes self.operator_token. It seems sensible but perhaps you should define both of these as `@property` and have them raise NotImplementedError (or some sort of ""client error, you shouldn\'t touch this"") if either of them are accessed?\r\n\r\n(Then subclasses wouldn\'t need to override init, just the `@property` methods.)', 'comment_created': datetime.datetime(2020, 6, 9, 0, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 437078360, 'comment_body': 'Drop all this -- the Parser is not a domain object so let\'s not have it store stuff. Instead, pass `expression` etc. into the functions directly, e.g. Parser.parse(expression).\r\n\r\nAs an alternative, you could also do Parser.initialize(expression) which sets the expression and resets the next_token_index to 0. But if you do that then you need lots of documentation in parse(), validate(), etc. explaining ""this function should only be called after Parser.initialize()"". It does end up becoming a bit problematic if Parser.parse() might be called multiple times in succession, so my recommendation would be to do away with all the instance variables altogether and just have Parser.parse() keep track of the current index (and pass either that index, or the relevant sub-part of the list, to sub-functions as needed).', 'comment_created': datetime.datetime(2020, 6, 9, 0, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 437082360, 'comment_body': 'none --> None', 'comment_created': datetime.datetime(2020, 6, 9, 1, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 437082815, 'comment_body': 'Perhaps should be get_next_token_if_text_in', 'comment_created': datetime.datetime(2020, 6, 9, 1, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 437082880, 'comment_body': 'none --> None, here and elsewhere', 'comment_created': datetime.datetime(2020, 6, 9, 1, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 437083276, 'comment_body': 'Also I\'m wondering why you even need to define self.operator_token. It doesn\'t look like it\'s used anywhere? Plus, the confusion between ""token"" and ""token_text"" still remains -- please check your entire PR and weed out this sort of thing.', 'comment_created': datetime.datetime(2020, 6, 9, 1, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 437083769, 'comment_body': ""Similarly I can't figure out where this property gets called/used. I'm not saying necessarily that you need to remove it but I'm trying to understand if it's even needed (outside tests).\r\n\r\nIf this is just for tests, then that's probably fine, though it seems like quite a lot of set up needed just for tests."", 'comment_created': datetime.datetime(2020, 6, 9, 1, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 437084087, 'comment_body': 'Where is this used? Do you even need it?', 'comment_created': datetime.datetime(2020, 6, 9, 1, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 438123220, 'comment_body': 'Done now, sorry!', 'comment_created': datetime.datetime(2020, 6, 10, 13, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438123597, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438123733, 'comment_body': 'Made modifications so that each function is self-contained.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438123963, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438124143, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438124636, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438124702, 'comment_body': ""> Try not to redefine like this. Instead, turn the compilation of token_list into a for loop and create the correct token before appending it to the list.\r\n\r\nDone.\r\n\r\n> (I also mildly wonder if you even need to do this, since e.g. we don't replace all digits with 1 and all letters with 'a'. But I'm fine either way.)\r\n\r\nThis is done in order to make the parsing process simpler, otherwise, I'd have to add extra checks for the kind of paren that the token represents. But since balance checking is done prior to parsing, making this change shouldn't cause any issues.\r\n\r\n> Also I'm a bit skeptical of re.findall(). Shouldn't this somehow check that there are no chars in remaining in the original expression after everything that can be assigned has been assigned to a regex? A simple way to do it might be to compare the len() of the original expression and the sum of lengths of the token texts. Unit tests should catch this stuff.\r\n\r\nThat's a valid and an important point, I missed this, thanks for pointing it out! I've added a check along with appropriate unit tests to ensure this error doesn't occur in production."", 'comment_created': datetime.datetime(2020, 6, 10, 13, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438124969, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438125091, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438125738, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438125783, 'comment_body': ""The `token` property is supposed to be accessed (by the test files for now, but perhaps by other functions in the future), so I've left it as it is. But you're right, we can deduce the type of operator by the class name hence I've removed the `operator_token` property from the classes. This should resolve any confusion."", 'comment_created': datetime.datetime(2020, 6, 10, 13, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438125825, 'comment_body': ""I've modified the code such that the class doesn't store the expression and that it is directly passed into the `parse` method.\r\nAlso, I'd modified the code by making the `next_token_index` as a parameter rather than a global property but since a lot of functions directly modify this variable, I had to make the functions return this value upon each call. And this happens multiple times within a single function which made the code quite difficult to follow. I think we should leave just this variable as global, everything else has been passed through the functions."", 'comment_created': datetime.datetime(2020, 6, 10, 13, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438125854, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438125894, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438125922, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438125963, 'comment_body': 'Yup, currently, only the tests access this property. But in the future, perhaps if we ever need to add some functionality to operate on the parse tree, or maybe even evaluate it, then we would also need to access this property then. Also, I think it makes sense in general to have some information regarding what the identifier/function text is at that particular node. ', 'comment_created': datetime.datetime(2020, 6, 10, 13, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438126020, 'comment_body': ""Oh yes, this is quite important actually. This is what stores the children of the root node that the parse function returns. Without this, it wouldn't be possible to generate and verify the structure of the parse tree. It isn't being used explicitly anywhere (except the tests) but it is implicitly storing the structure of the parse tree."", 'comment_created': datetime.datetime(2020, 6, 10, 13, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438427197, 'comment_body': ""As mentioned before (in other cases), I don't think you've provided enough info in this exception message."", 'comment_created': datetime.datetime(2020, 6, 10, 21, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 438430277, 'comment_body': 'I think it\'s not unreasonable to have this as a stored internal variable. But you need to do a few things to ensure that it is used safely:\r\n- Prefix it with an underscore to indicate that it\'s private.\r\n- Reset it with every call to the main method (parse()?) and make that clear in the relevant docstrings that calling that method forces the parser to ""start over"".\r\n- Update documentation here to indicate the lifecycle of this property -- when is it reset, etc.\r\n\r\nIt also probably means that your other functions (parse_mul_expr, etc.) need to be private, to prevent weird situations happening when callers call them without calling parse(). You can still have tests that are specifically for checking parse_mul_expr etc. but you should update those tests to call parse() instead (per #7450).', 'comment_created': datetime.datetime(2020, 6, 10, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 438430703, 'comment_body': 'Formatting should be as follows. Please fix here and elsewhere:\r\n\r\n```\r\nRaises:\r\n    Exception: Invalid syntax\r\n    Exception: Invalid character\r\n    Exception: Invalid bracket pairing\r\n```\r\n\r\nAlso try to provide more detail for ""Invalid syntax"" -- e.g. unexpected end of expression. Do this for all other ""invalid syntax"" errors too.', 'comment_created': datetime.datetime(2020, 6, 10, 21, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 438719064, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 6, 11, 11, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438719152, 'comment_body': ""I've made the `next_token_index` private and added relevant comments to explain it's lifecycle. I've also made the other functions (except `parse`) private and made relevant modifications to the tests. Since I can't call these methods directly, or rather shouldn't, I've refactored the tests such that the checks are based on the production rules that the functions implement rather than testing the functions themselves. So, these test scenarios would ensure that the function related to the production rule mentioned in the docstring is called and produces the expected output."", 'comment_created': datetime.datetime(2020, 6, 11, 11, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438719288, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 11, 11, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}]","[{'commit_sha': '9b6284dee00f3762efab0f1742ea399e8291b43b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26df2c13c27891f193d9d70178a68ef0fdd71e30', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21282639747f248b2c464c3eacd2bf090e6233d6', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2e1b182df5cbf1660d02c2c6692f74f6a966d05', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '396c1bb48596c8ca70dbb14f5a3878b5e7be58ac', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90ec42c647b47b0659ff8ba3810ccda8a977bb13', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc214a917833202f9a93ab6035437546ed93db7c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c77988484d71c5bb610a8b5733d5cc1efdbfea', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6b1c47f5500c5c077848b67af902477eb724d9a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '579437c265f99c54aeb67336965ad17019646dbf', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efc856b3f91650ecab836423692c5cf05309eefd', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '584c86cc56bbfd629066cbfb87f845f536f4a557', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a92c66a8a3bb0b7d77b99c4904c6310406ebb7bb', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14f05017ecf659a715198df08e5e7f768499a270', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b60ed16782b98e4de2271941b9aea421e09beced', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52021d7e2c78539095c83572da173b4f605f2431', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '832517541814fd98aa58dee25c8ffd2ce3033c83', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89f010de4648ca54651ccad659c5d1ba60885b0b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e05c376c6bfe5dc58390e88ddb6968eae67e2e91', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0510b5345f3eae1ec3242e3ffc37ed62b0f7ce0b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8dffaffe1cbcbbfa065b4e3dcf2e14bf9f54354', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9fce0acb212e1bf9989e4a983fc60fe9cc85348', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19685e5311d50d128bef80ba39d3360802babe42', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '735eb7ecd712737d9c6aed204a057c64d07662a1', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a226def35658276fbbfe5a22e9b5e2ca799417b0', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ca38fb7f751946a9cb8f43b846710afc0170d81', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e9fd48160f759f9927e99a0d75cb59deb6523e4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b50bc5e1b377c27342791d94a6a4d4f204a16d2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efde6db0a503601848860a5191a44c55a6b3d0e4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771b08c22b4ef4edacf717975763e39a15307f34', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eef34bfbb8b872e81d8dddbcbc7e8c23c42adae', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0c55be129cc6c4568be3bd40cbad0dbf0ac72ff', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a001958fe90db2d0fa70d8f155a6901b89c5c6a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09d350d3b8d1f9ea51728d9a3fadb496a3710005', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0deae952201eae95871db85ab445aba3dc757e8c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '659ce889e0f45a3eb2c04e2e28c45665b0a42d62', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02b7aa4c3d3b7d9c6ec3a46a8766692b8b79f9a4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb8411e5991561cdc8602f054cb81ef237715b81', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb0b166cd4000382e353cacdb562c4f20406e40a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '753209ed328c25b570c90795e3587d5bd8d91eed', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5d778c6553a0d53dc6bcc17b3e74e5bc4acf497', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af95c0d5f6a7b2944e49c56d4de8dfe2d331b4a2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43194ea4d2f45d4f25b6652b4e38c0d708c7af6e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}]",Prayush Dawda,35144226,,User,,27,,14,47
425441169,Milestone 1.2.2: Added position-of-terms and math editor directives.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following:
 - Adds the position-of-terms-editor and math-editor directive.
 - The math-editor directive uses the guppy editor with an optional on-screen keyboard for mobile compatibility.
 - Upgrades guppy version for better osk support.

Position of terms editor:
![positionOfTerms](https://user-images.githubusercontent.com/35144226/83324962-47ac1a00-a286-11ea-8618-9408e33c84a4.gif)

Math editor:
![math-editor](https://user-images.githubusercontent.com/35144226/83324970-51358200-a286-11ea-81fb-861d8882e9f8.gif)

**Note**: Since the new math interactions are not ready yet, these directives can be tested by using in other pre-existing interactions.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9400,https://api.github.com/repos/oppia/oppia/pulls/9400,https://github.com/oppia/oppia/pull/9400,closed,445,28,16,98,58,129,0,1,[],2020-05-30 09:32:38+00:00,2020-06-20 20:24:46+00:00,1853528.0,"21 days, 10:52:08","[{'comment_id': 433976056, 'comment_body': ""Try not to use '!important' tags, isn't there any other way to achieve this?"", 'comment_created': datetime.datetime(2020, 6, 2, 15, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 433977821, 'comment_body': 'Wrong comment?', 'comment_created': datetime.datetime(2020, 6, 2, 15, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 433978823, 'comment_body': ""Isn't 'value' being used here?"", 'comment_created': datetime.datetime(2020, 6, 2, 15, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436207933, 'comment_body': ""These attributes already have values in guppy-default-osk.min.css, this is supposed to override those values. I'm not aware of any other way to do this."", 'comment_created': datetime.datetime(2020, 6, 5, 23, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436207943, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 6, 5, 23, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436207949, 'comment_body': ""Oh, yes, I missed this part. I've bound the value from the editor to this variable."", 'comment_created': datetime.datetime(2020, 6, 5, 23, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436286562, 'comment_body': 'Oh, they are in the style attribute itself in those divs. In that case, I think this is fine.', 'comment_created': datetime.datetime(2020, 6, 6, 17, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436286591, 'comment_body': '2020', 'comment_created': datetime.datetime(2020, 6, 6, 17, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436286766, 'comment_body': ""There is an issue here where if the creator presses the 'Esc' key while the osk is visible, the modal closes, but osk is still visible, with no way to close it. Can you see if there is a way to fix it (or at least have a close button on the osk)?"", 'comment_created': datetime.datetime(2020, 6, 6, 17, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436287000, 'comment_body': 'If these are going to be used elsewhere, maybe in directives that check this, have it as constants in constants.ts?', 'comment_created': datetime.datetime(2020, 6, 6, 17, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436287106, 'comment_body': ""Why does this need to be an object, can't it just be `ctrl.localValue = ctrl.positionOfTerms[2]`?"", 'comment_created': datetime.datetime(2020, 6, 6, 17, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436287182, 'comment_body': 'Mention that it caused console errors due to this as well?', 'comment_created': datetime.datetime(2020, 6, 6, 17, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 436295637, 'comment_body': 'Can you please also verify that the typedefs for this version of guppy as same as written in this file.', 'comment_created': datetime.datetime(2020, 6, 6, 19, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 436300366, 'comment_body': ""Can you convert this into a component? We're moving away from using directives in our codebase. You can look at #9317 for reference.\r\n/cc @marianazangrossi "", 'comment_created': datetime.datetime(2020, 6, 6, 21, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436300483, 'comment_body': 'Create a class for the styling used here.', 'comment_created': datetime.datetime(2020, 6, 6, 21, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436300644, 'comment_body': 'Use single quotes instead of double quotes in this script tag.', 'comment_created': datetime.datetime(2020, 6, 6, 21, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436301028, 'comment_body': 'Please add tests for this and `position-of-terms-editor`. Read the note on top, we discourage adding new files to this list.\r\n/cc @marianazangrossi ', 'comment_created': datetime.datetime(2020, 6, 6, 21, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436301061, 'comment_body': 'Ditto: convert this to a component.', 'comment_created': datetime.datetime(2020, 6, 6, 21, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436301411, 'comment_body': 'Hm, @iamprayush have you tried making the rule more specific to the element so that your CSS applies correctly? You can refer [this](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity), see notes under ""Instead of using !important, consider"".', 'comment_created': datetime.datetime(2020, 6, 6, 21, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436301616, 'comment_body': 'Also, can you please add a comment somewhere that says what version of Guppy this is? I remember we had a hard time figuring out what version of Guppy we were using.', 'comment_created': datetime.datetime(2020, 6, 6, 21, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436411598, 'comment_body': '@kevintab95 these styles are supposed to be applied to these elements only, not sure what you mean by ""more specific to the element"". Also, in the link you\'ve referenced, it says \r\n > Only use !important on page-specific CSS that overrides foreign CSS (from external libraries, like Bootstrap or normalize.css).\r\n\r\nThis seems to be relevant here since I\'m overriding styles from the third party library.', 'comment_created': datetime.datetime(2020, 6, 7, 23, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436411609, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 23, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436411612, 'comment_body': ""Ah, the osk can be closed by clicking the osk button again. But, just for ease, I've added an event listener that dismisses the osk upon pressing the escape key."", 'comment_created': datetime.datetime(2020, 6, 7, 23, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436411618, 'comment_body': ""This entire list of objects won't be used elsewhere. This directive will provide the 'name' of the position, i.e., 'lhs', 'rhs', etc., so while validating I'd just be checking the value provided against these 4 names. There's no need to make the entire thing a global constant.\r\nAlso, note that this is the convention used in other places as well. [Ref1](https://github.com/oppia/oppia/blob/develop/extensions/objects/templates/graph-property-editor.directive.ts), [Ref2](https://github.com/oppia/oppia/blob/develop/extensions/objects/templates/logic-error-category-editor.directive.ts)."", 'comment_created': datetime.datetime(2020, 6, 7, 23, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436411623, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 23, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436411625, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 23, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436411627, 'comment_body': ""> Can you please also verify that the typedefs for this version of guppy as same as written in this file.\r\n\r\nI've made the necessary changes.\r\n\r\n\r\n\r\n> Also, can you please add a comment somewhere that says what version of Guppy this is? I remember we had a hard time figuring out what version of Guppy we were using.\r\n\r\nDone."", 'comment_created': datetime.datetime(2020, 6, 7, 23, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436411629, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 23, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436411632, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 23, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436411633, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 23, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436411634, 'comment_body': ""@kevintab95 I'm not sure exactly how we would test these directives. They don't have any functions that can be unit tested, they just display an input box/dropdown which takes in values and stores them in a variable. Seems like that behavior would be tested by the e2e tests, right?"", 'comment_created': datetime.datetime(2020, 6, 7, 23, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436411649, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 23, 22, 47, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436508012, 'comment_body': '@iamprayush Sorry for not being clear, let me try again. What I meant was, can you look into how to make the CSS specificity for your rule greater so that your rule takes higher precedence than that defined in the guppy-default-osk.min.css. The doc I linked describes a bit about this (ie. which CSS selectors lead to increased specificity.)\r\n\r\nRegarding overriding third party styles, this is still a bad pattern, we should try to avoid it. That said, if you are unable to find a way to increase the specificity of the CSS like I mentioned above, we can go ahead and use !important here with a note.', 'comment_created': datetime.datetime(2020, 6, 8, 7, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436508907, 'comment_body': 'Can you change this to RGBA or use HEX values?', 'comment_created': datetime.datetime(2020, 6, 8, 7, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436509084, 'comment_body': 'Add a new line after this.', 'comment_created': datetime.datetime(2020, 6, 8, 7, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436509319, 'comment_body': 'nit:\r\n```suggestion\r\n      // Dynamically assigns a unique id to the guppy-div.\r\n```', 'comment_created': datetime.datetime(2020, 6, 8, 7, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436509829, 'comment_body': 'Maybe add a relevant link?', 'comment_created': datetime.datetime(2020, 6, 8, 7, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436514730, 'comment_body': 'In `math-editor`, I see a bunch of variables being initialised and an event listener being added. You can check if this method works as expected in the test (ie. it initialises correctly). Ditto about `position-of-terms-editor`. @rohitkatlaa recently worked on adding tests for directives/components he had worked on as part of his GSoC project, you can ask him if you are stuck.\r\n\r\nAlso, in general, it is good practice to write unit tests for any code that you write. e2e tests cannot be used as a replacement for unit tests. Note that, as mentioned at the top of this list, this should not be updated unless you get a confirmation from @marianazangrossi.\r\n', 'comment_created': datetime.datetime(2020, 6, 8, 7, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436702147, 'comment_body': ""Thanks for explaining, @kevintab95! The thing is, the styles that I'm overriding have been assigned to the style attribute of the div directly. See [here](https://github.com/daniel3735928559/guppy/blob/f9440220a73685ea9011c285a4af798f381de53a/build/guppy.js#L4311) for ref. AFAICT, there's no way to override these styles without using `!important`."", 'comment_created': datetime.datetime(2020, 6, 8, 13, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436724095, 'comment_body': ""Thanks for the explanation, @kevintab95! I've added tests for the `position-of-terms-editor` component. While adding tests for the `math-editor` component, I'm running into an issue that I can't seem to be able to resolve.\r\nIn the test file, I've called the `$onInit` method of the component which initializes a guppy instance. When I ran the tests, it threw an error: `ReferenceError: Guppy is not defined`. This is most likely due to the way guppy has been imported. As per instructions given [here](https://guppy.js.org/site/doc/quickstart), I've imported the lib's files in guppy.html directly with the script tag.\r\nAlso, apparently, _guppy-js lists no main file and has no index.js, so it can't be directly required._. ([ref](https://npm.runkit.com/guppy-js)). Please let me know if you have any idea on how to resolve this, thanks!\r\n\r\n/cc @aks681 @rohitkatlaa @marianazangrossi \r\n"", 'comment_created': datetime.datetime(2020, 6, 8, 13, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436724311, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436724444, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436724551, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 436747845, 'comment_body': ""> See here for ref. AFAICT, there's no way to override these styles without using !important.\r\n\r\nAh okay. Yep, we can't override in this case. Thanks for adding a reference. Just add a comment so that this doesn't get removed later on."", 'comment_created': datetime.datetime(2020, 6, 8, 14, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 436753430, 'comment_body': 'Can you simply mock Guppy instead?', 'comment_created': datetime.datetime(2020, 6, 8, 14, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 437771997, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 9, 23, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 437772095, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 6, 9, 23, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438243891, 'comment_body': 'alphabetize list', 'comment_created': datetime.datetime(2020, 6, 10, 16, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 438248690, 'comment_body': ""set ctrl.value also here? Since that is the value used outside the directive, and without editing the selection, `onChangePosition` won't be called, right?"", 'comment_created': datetime.datetime(2020, 6, 10, 16, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 438257569, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 16, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438257596, 'comment_body': 'Yup, done.', 'comment_created': datetime.datetime(2020, 6, 10, 16, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 438934844, 'comment_body': ""Undo this change if it's not expected "", 'comment_created': datetime.datetime(2020, 6, 11, 16, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 438937150, 'comment_body': 'Can we use python_utils.open_file here?', 'comment_created': datetime.datetime(2020, 6, 11, 17, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 438938163, 'comment_body': 'Move the file path generation code inside `remove_emojis_from_guppy` and add a comment here explaining the reason for this removal!', 'comment_created': datetime.datetime(2020, 6, 11, 17, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 438941996, 'comment_body': ""I'm not sure whether we should do this kinda changes through this script inside a third-party library. Should we use a forked repo (Which doesn't have this unwanted emojis) until the main repo resolves the issue? Do you see any such pattern in the codebase for any other third party libs?\r\n\r\n/cc @seanlip any thoughts?"", 'comment_created': datetime.datetime(2020, 6, 11, 17, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 438943605, 'comment_body': ""We need to change this test as per the review comments above! The test setup doesn't look good to me here, do you see this pattern anywhere else i.e, making download request for testing?"", 'comment_created': datetime.datetime(2020, 6, 11, 17, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 438944646, 'comment_body': 'Earlier we were using first 6 characters of the hash, should we follow the same?', 'comment_created': datetime.datetime(2020, 6, 11, 17, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439090262, 'comment_body': ""I've declared the string that needs to be removed in the `remove_emojis_from_guppy` function that contains non-ascii characters, which is why this line is important."", 'comment_created': datetime.datetime(2020, 6, 11, 21, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 439090314, 'comment_body': 'Yes, done.', 'comment_created': datetime.datetime(2020, 6, 11, 21, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 439090353, 'comment_body': ""While testing, the path is different which is why it's been passed as a parameter instead of hard-coding it inside the function.\r\nAlso, the docstring of the `remove_emojis_from_guppy` function explains the reason for this removal along with the relevant link to the issue filed in guppy's issue tracker."", 'comment_created': datetime.datetime(2020, 6, 11, 21, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 439090425, 'comment_body': ""I discussed this with @aks681 and we concluded that this is the most reasonable solution given the situation.\r\n\r\n> Should we use a forked repo (Which doesn't have this unwanted emojis) until the main repo resolves the issue?\r\n\r\nThat's a good idea, but I'm not sure if this is considered as a major issue since only one other person has reported it till now, so it doesn't seem like this will be fixed anytime soon. The [original issue](https://github.com/daniel3735928559/guppy/issues/138) was filed more than a year ago and hasn't received any activity since.\r\n\r\n> Do you see any such pattern in the codebase for any other third party libs?\r\n\r\nNo -- I know this seems kinda dangerous, but it's a simple attribute removal from the dict present in the lib's file. It isn't messing with the logic in any way, which is why I think this is safe enough."", 'comment_created': datetime.datetime(2020, 6, 11, 21, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 439090489, 'comment_body': ""No, I realize that this pattern hasn't been followed anywhere else, but I don't see any other way of testing if the function works correctly.\r\nShould I instead, create a dummy file, append this text to it and then run the function to check if the text got removed or not?\r\nAlso, could you please explain why the method that I've implemented is not recommended? "", 'comment_created': datetime.datetime(2020, 6, 11, 21, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 439090537, 'comment_body': 'Yup, done!', 'comment_created': datetime.datetime(2020, 6, 11, 21, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 439119811, 'comment_body': ""Can't you provide your own symbols file as mentioned by the other poster? I agree with @DubeySandeep that this is not a pattern to be followed."", 'comment_created': datetime.datetime(2020, 6, 11, 23, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439119964, 'comment_body': 'Tests should not require connecting to the Internet. It should be possible to run them offline.', 'comment_created': datetime.datetime(2020, 6, 11, 23, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439130807, 'comment_body': 'I would also suggest making a PR to the original repo upstream.', 'comment_created': datetime.datetime(2020, 6, 11, 23, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439238414, 'comment_body': ""> Can't you provide your own symbols file as mentioned by the other poster? I agree with @DubeySandeep that this is not a pattern to be followed.\r\n\r\nThe problem isn't due to the symbols file. That's just a json -- having these characters there doesn't cause these warnings. The problem is that these characters are present in guppy.js file ([here](https://github.com/daniel3735928559/guppy/blob/f9440220a73685ea9011c285a4af798f381de53a/build/guppy.js#L1162)), which is being compiled and processed, thus causing these warnings.\r\n\r\n> I would also suggest making a PR to the original repo upstream.\r\n\r\nSorry, I don't understand, PR for what? For removing these symbols? As I mentioned, I don't think this is considered as a major issue, since no activity has been observed on the issue thread.\r\nAgain, I fail to understand why this is a problem. This is simply removing a variable from the js file, and not messing with the logic at all."", 'comment_created': datetime.datetime(2020, 6, 12, 6, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 439239044, 'comment_body': ""In that case, @seanlip could you please confirm/deny if the approach I've mentioned above seems reasonable? I don't see any other option. Thanks!"", 'comment_created': datetime.datetime(2020, 6, 12, 6, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 439241224, 'comment_body': ""I was referring to [this comment](https://github.com/daniel3735928559/guppy/issues/138#issuecomment-476901715). The person mentions that they solved this issue that way. Is the issue you are running to the same one, and if so, could you do something similar to what they did?\r\n\r\nI was also suggesting making a PR upstream to fix this issue. No activity on an issue doesn't mean it's not major. We have lots of issues here but not enough time to fix them, so you shouldn't take that as the sole signal.\r\n\r\nFinally, we generally do not modify third-party libs on the fly like this. This is because it results in different contributors ending up with different versions of the libs and tends to break our versioning system. In general we prefer contributing patches upstream."", 'comment_created': datetime.datetime(2020, 6, 12, 6, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439241479, 'comment_body': ""We'll have to resolve [this thread](https://github.com/oppia/oppia/pull/9400#discussion_r438941996) first."", 'comment_created': datetime.datetime(2020, 6, 12, 6, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439255192, 'comment_body': ""> I was referring to this comment. The person mentions that they solved this issue that way. Is the issue you are running to the same one, and if so, could you do something similar to what they did?\r\n\r\nYes, I realize that, but I don't think it's the exact same problem. I've tested this locally and modifying the symbols file still gave the same warning. This is probably because of the fact that these characters have been hard-coded in the guppy.js file. They probably wouldn't have been in the js file at the time of filing this issue which is why having a custom symbols file might've solved the issue then, but the same solution doesn't work now.\r\n\r\n> I was also suggesting making a PR upstream to fix this issue. No activity on an issue doesn't mean it's not major. We have lots of issues here but not enough time to fix them, so you shouldn't take that as the sole signal.\r\n\r\nI've created a [PR](https://github.com/daniel3735928559/guppy/pull/173) and commented on the issue thread. But will I have to wait for that PR to get merged before getting this one in? This PR blocks further progress in the project.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 12, 7, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 439570094, 'comment_body': 'Then follow the pattern i.e, add a new line with `#` see other similar files for reference.', 'comment_created': datetime.datetime(2020, 6, 12, 18, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439575029, 'comment_body': 'is this event listener related to the comment on lines 4 and 5?', 'comment_created': datetime.datetime(2020, 6, 12, 18, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439575448, 'comment_body': 'math editor component*', 'comment_created': datetime.datetime(2020, 6, 12, 18, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439576600, 'comment_body': 'Should we add the keydown event listener here instead of inside the script tag? (not sure whether that will work!)\r\nAsking such that we have less code there inside the script tag and we can use $document) ', 'comment_created': datetime.datetime(2020, 6, 12, 18, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439602774, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 12, 19, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 439602832, 'comment_body': ""No -- AFAICT, since this is not related to touch-based events, it wouldn't matter if the event listener is active or passive."", 'comment_created': datetime.datetime(2020, 6, 12, 19, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 439602863, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 12, 19, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 439602912, 'comment_body': 'Valid point -- but the guppy.html file is common for all uses of guppy in the codebase. Currently, there is the MathExpressionInput interaction which uses guppy, also, soon, I plan on adding the new interactions that will also use guppy. So, the eventListener would have to be added to all of them separately. Adding it here instead, makes it global and easier to track.', 'comment_created': datetime.datetime(2020, 6, 12, 19, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 439748778, 'comment_body': 'Is this intentional?', 'comment_created': datetime.datetime(2020, 6, 13, 15, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 439770769, 'comment_body': 'Yes. This is done in order to fix  the issue mentioned [above](https://github.com/oppia/oppia/pull/9400#issuecomment-643424420).', 'comment_created': datetime.datetime(2020, 6, 13, 21, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 439861341, 'comment_body': ""Hm, don't you also need to change the `chromeDriver` property in protractor.conf.js to the corresponding version?\r\n\r\n`chromeDriver: './selenium/chromedriver_xx.yy.zz',`\r\n"", 'comment_created': datetime.datetime(2020, 6, 14, 19, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 439899381, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2020, 6, 15, 2, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 440030899, 'comment_body': 'Discussed. This is obsolete now.', 'comment_created': datetime.datetime(2020, 6, 15, 9, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 440030952, 'comment_body': 'This was done so that the chromedriver version is fetched from the PATH instead of hard-coding it since a version upgrade would download a file with the version name suffix. This is not necessary now since this PR no longer requires this update.', 'comment_created': datetime.datetime(2020, 6, 15, 9, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 440683367, 'comment_body': ""When a line of code splits over multiple lines, break after the opening bracket ('[' in this case).\r\n"", 'comment_created': datetime.datetime(2020, 6, 16, 8, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440683817, 'comment_body': 'Add space after ""for"".\r\n\r\nI am also a little concerned about having all this in the plain JS. Could you please check with @srijanreddy98 and @bansalnitish whether there are any issues with this from an Angular perspective?', 'comment_created': datetime.datetime(2020, 6, 16, 8, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440685924, 'comment_body': 'This doesn\'t seem right. Can you get @nishantwrp @vojtechjelinek signoff on the usage of ""any"" here?\r\n\r\nAlso, shouldn\'t we be using $window instead?', 'comment_created': datetime.datetime(2020, 6, 16, 8, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440687196, 'comment_body': 'I\'m a little confused. What is this conversation actually referring to and what is the resolution? I don\'t see any ""keydown"" in this PR.', 'comment_created': datetime.datetime(2020, 6, 16, 8, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440688092, 'comment_body': ""I don't think you need to worry about max-len for urls, right? eslint has an option that doesn't apply the check when the line is a URL. /cc @Hudda \r\n\r\n(Btw @Hudda this keeps coming up. Could you confirm that URLs are ok? If so, would it be possible to update the coding style guide on the wiki accordingly so that folks will know about this exception? Thanks!)"", 'comment_created': datetime.datetime(2020, 6, 16, 8, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440729750, 'comment_body': ""@seanlip, @iamprayush there is an issue as this can't be used in angular2+. You can't use script tags in angular HTML. Angular will remove it. I am not really sure if my suggested method works in ajs but here is how this is done in angular2+:\r\nCase: When you can't find an npm guppy module and have to use the script tag\r\nIn order to do this thing in angular, you will have to add the script tag using the component.ts file. Here is a generalized function to that.\r\n\r\n```\r\n  loadExternalScript(scriptUrl: string): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      const scriptElement = document.createElement('script');\r\n      scriptElement.src = scriptUrl;\r\n      scriptElement.onload = () => resolve(true);\r\n      document.body.appendChild(scriptElement);\r\n    });\r\n  }\r\n```\r\nDeclare the variable at the top of the file, right after imports:\r\n```\r\ndeclare let Guppy: any;\r\n```\r\n\r\nThen load the script and add all the contents of this script tag in `then()`.\r\n```\r\nloadExternalScript('/third_party/static/guppy-175999/build/guppy.min.js').then(\r\n_ => { \r\n  Guppy.init({});\r\n  ...\r\n});\r\n```"", 'comment_created': datetime.datetime(2020, 6, 16, 9, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 440812239, 'comment_body': ""This is obsolete now. Before, I'd added an event listener that would hide the osk if the escape key is pressed but since we're not gonna use the osk on desktop anyways, this conversation is irrelevant."", 'comment_created': datetime.datetime(2020, 6, 16, 12, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 440846952, 'comment_body': ""@srijanreddy98 Thanks for such a clear explanation!\r\nMy question is -- how did it work till now, then? Other static third party libs (midijs, pencilcode, etc.) are also imported in this way. All these libs are being loaded by the `dependency_html.html` file. Isn't this how it's supposed to be?\r\n\r\nOne more thing, these configs are supposed to be the global configs for all instances of guppy across the codebase, so that we don't have to repeat all of this code in each directive that we use it in. If I'm not mistaken, the method you're proposing would require these configs to be written in every file that guppy is being imported in, right?"", 'comment_created': datetime.datetime(2020, 6, 16, 13, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 440850783, 'comment_body': 'I think it worked because of `AngularJs`.', 'comment_created': datetime.datetime(2020, 6, 16, 13, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 440851558, 'comment_body': '@iamprayush Why is any needed here? We have typings for window in `typings` directory.', 'comment_created': datetime.datetime(2020, 6, 16, 13, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 440856405, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 16, 13, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 440856518, 'comment_body': ""> Also, shouldn't we be using $window instead?\r\n\r\nYeah that works as well and we won't need to use `any` with that. I've changed it now, thanks!"", 'comment_created': datetime.datetime(2020, 6, 16, 13, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 440856568, 'comment_body': 'Done -- the lint checks passed with no errors when I removed the `eslint-disable`.', 'comment_created': datetime.datetime(2020, 6, 16, 13, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 440866052, 'comment_body': ""> My question is -- how did it work till now, then?\r\n\r\nI mentioned that this won't work in angular2+, I didn't say that it won't work in ajs. As a matter of fact, this approach is valid in ajs.  It works in ajs because it doesn't sanitize HTML. This is not a problem now, and mostly won't be when migrating to angular2+ because I have worked on such cases before (PayPal's js-sdk has the same problem). So @iamprayush, I would reach out to you during the migration of this code to make sure that the migrated code works as expected. \r\n\r\n> One more thing, these configs are supposed to be the global configs for all instances of guppy across the codebase\r\n\r\nThis won't be a problem. We can initialize in those in the root component and store them in a service and use that variable later on in other directives\r\n\r\n> I think it worked because of AngularJs.\r\n\r\n@nishantwrp yes, ajs doesn't sanitize HTML."", 'comment_created': datetime.datetime(2020, 6, 16, 13, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 440926470, 'comment_body': '@seanlip Line containing URLs is allowed to have length of more than 80 characters. I have added this rule to the style guide.', 'comment_created': datetime.datetime(2020, 6, 16, 15, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 441282163, 'comment_body': 'Thanks @Hudda!', 'comment_created': datetime.datetime(2020, 6, 17, 5, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441282620, 'comment_body': 'FYI I spoke to @srijanreddy98 about this. I think it is not a good idea to have manipulation of `script` tags in the JS. It can lead to all kinds of injection vulnerabilities.\r\n\r\nI suggested finding a way to have this in a service that gets initialized once at the appropriate time. Would it be possible to do that? Our main files should have ""script src"" tags and nothing else (especially not random custom JS).', 'comment_created': datetime.datetime(2020, 6, 17, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441912455, 'comment_body': ""Add the relevant link to this docstring (make sure that it's to a specific line in a specific commit of guppy) so that it's easier for other devs to investigate in the future if needed.\r\n\r\nIf you need to, it's fine to break the link across multiple lines."", 'comment_created': datetime.datetime(2020, 6, 18, 1, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441912780, 'comment_body': ""Let's say there are multiple components on a page. How many times is this called? Please test and verify.\r\n\r\nIf once per component, you'll probably want a common service instead, as suggested in my previous comment."", 'comment_created': datetime.datetime(2020, 6, 18, 1, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441912865, 'comment_body': ""I think you can name this SYMBOLS_TO_REMOVE since it's not meant to be changed."", 'comment_created': datetime.datetime(2020, 6, 18, 1, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442095448, 'comment_body': ""I've tested this and yes, there can be, or actually there will be multiple guppy instances on a single page. But that would only happen when the creator saves a response and then adds another one (that would create a new guppy instance for each response). To handle this, we would have to fetch all the guppy divs and individually initialize them. But, this scenario wouldn't occur right now since we can't save a response atm(the interaction files haven't been added). The interaction files are added in my next [PR](https://github.com/oppia/oppia/pull/9553), and there I have modified the code to work where multiple instances are active on a single page."", 'comment_created': datetime.datetime(2020, 6, 18, 9, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 442096840, 'comment_body': ""Please fix this issue properly in this PR (you will need to sort out the CI tests anyway). We don't merge PRs that are half done and need to be revisited later."", 'comment_created': datetime.datetime(2020, 6, 18, 9, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442113358, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 18, 10, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 442113491, 'comment_body': ""Done.\r\nRE the failing CI tests, I'd discussed this with @aks681 and it's most likely a flake. I've seen it fail on a couple of other PRs as well with the same exact error. Also, it's failing on the code which hasn't been modified in this PR."", 'comment_created': datetime.datetime(2020, 6, 18, 10, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 442113578, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 18, 10, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 442116763, 'comment_body': ""I'm a bit confused -- I thought that we had multiple components, but they all correspond to a single global guppy third-party lib.\r\n\r\nSo, if you do this, wouldn't Guppy.remove_global_symbol() be called multiple times if there are multiple components on the page? This is the sort of thing I'm worried about -- things that should be done once should only be done once and not multiple times. (Let me know if I'm missing something.)"", 'comment_created': datetime.datetime(2020, 6, 18, 10, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442130869, 'comment_body': ""Oh, I see. I'm sorry I misinterpreted your question. So, to ensure that the removal code is only called once, we'd have to put it in a place that is only invoked once. Options for doing this are:\r\n1. In guppy.html with a script tag.\r\n2. A separate guppy_config.js that the guppy.html would include with the script src tag just like it includes the third party lib guppy.js.\r\n3. A global file like App.ts. (I tried doing this but it didn't work. It gave an error saying that `Guppy is not defined.`. I think this is because of the order of loading of files -- the guppy.html file needs to be loaded before App.ts which is probably not happening.\r\n\r\nAlso, creating a separate service wouldn't help since we would have to inject that service in the component and the functions in there would have to be called in the onInit method which would effectively cause the same problem that is currently present, i.e., removal code would be called multiple times.  "", 'comment_created': datetime.datetime(2020, 6, 18, 10, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 442133223, 'comment_body': ""Well, that's why I was saying that the separate service would have a boolean flag that checks whether init() has already been called or not. The first call would set it, and other calls would check whether the boolean has been set and, if so, return without re-executing the logic. Does that make sense / would that work?\r\n\r\n(Also, in general, this doesn't just apply to the removal code. It applies to anything that should  be called only once in a page's lifetime.)"", 'comment_created': datetime.datetime(2020, 6, 18, 10, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442139339, 'comment_body': ""That makes sense, yes. One question though -- can't we do that without using a separate service? I can just have a variable that checks if onInit has been called or not and based on that I can execute the removal and the initialization code. Does that seem reasonable?"", 'comment_created': datetime.datetime(2020, 6, 18, 10, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 442140817, 'comment_body': ""If my understanding of components is correct, that won't work. Each component is completely separate from the others and it's not very useful to check that its own onInit has been called or not. The point of the service is that it's a singleton across the entire app.\r\n\r\nAlso, make sure the service is fully tested!"", 'comment_created': datetime.datetime(2020, 6, 18, 10, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442185854, 'comment_body': ""Yup, I tried that and it didn't work. I've added a service now, PTAL, thanks!"", 'comment_created': datetime.datetime(2020, 6, 18, 12, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 442595008, 'comment_body': '@nishantwrp just to check, is this correct? The quotes around the name look a bit weird.', 'comment_created': datetime.datetime(2020, 6, 19, 2, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442595300, 'comment_body': ""Add a test that actually tries to check the scenario we are interested in, i.e. we call init() multiple times from different components.\r\n\r\n(In general, if you don't write enough tests, your reviewer will just ask you to add more tests, so I would advise you to think through and proactively cover as many cases as you can from the outset. When in doubt, add more.)"", 'comment_created': datetime.datetime(2020, 6, 19, 2, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442595963, 'comment_body': ""Should this be initializeNewGuppyInstance since you're initializing a particular instance of guppy, not the entire third-party lib?"", 'comment_created': datetime.datetime(2020, 6, 19, 2, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442596264, 'comment_body': ""Logically, shouldn't this happen prior to the line above (i.e. shouldn't the third-party service be initialized before any component is)?"", 'comment_created': datetime.datetime(2020, 6, 19, 2, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442596328, 'comment_body': 'Initially, the default ...', 'comment_created': datetime.datetime(2020, 6, 19, 2, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442854235, 'comment_body': 'BTW, @seanlip when I tried using eslint disable for camelcase, it suggested to wrap the name with quotes.', 'comment_created': datetime.datetime(2020, 6, 19, 13, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 442854258, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 19, 13, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 442854288, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 19, 13, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 442854310, 'comment_body': 'Yes, that makes sense. Done.', 'comment_created': datetime.datetime(2020, 6, 19, 13, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 442854336, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 19, 13, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 442855407, 'comment_body': ""Do you mean 'disable' for snake_case?"", 'comment_created': datetime.datetime(2020, 6, 19, 13, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 442857782, 'comment_body': 'Actually, using `eslint-disable camelcase` would disable the check for verifying that only camelcase is being used, which is what is required.', 'comment_created': datetime.datetime(2020, 6, 19, 14, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 442873062, 'comment_body': ""Yeah, I guess this is right. I enforced this check to avoid using `eslint disable camelcase` so that we have only one convention i.e to wrap camelcase names in `'`."", 'comment_created': datetime.datetime(2020, 6, 19, 14, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}]","[{'commit_sha': '76167513236338afb2f04831b9099503c6297cfc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd17cd80fbb361264893ecb81e39ea265feafa71e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c46df0bae642e0b7bcf13306bce97b9bfc65051', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebc705849c99f4b5a1ca162158f68c553b538da8', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08f668b5d7db65814baacbf12a0da00550b471a1', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '405deb93bd596dee41e9ebd1a0fa8d9ca2bec819', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c92416f14f90ef542dc200e954db58ba4f90b2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2c2f609e0977e11e2313018a650dbdc8ee09d06', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7674fa1bf13866d5a87f1c6cd0b436a9801ff790', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5e5b7441fea12bac337f8ea8373a01b21bacda3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57e8245737111406737ad25a9c1c101a70d07e4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f4ab59e956e145a8a6f20af17df07c22dac9062', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4951afc9f90ad69aa038ec23cf6cd89c764b74c3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dba41e2bcbea25060720635f1e1eee8fd1fed21', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6586eb699179989ba1a433ac89e4ed44f3e2620a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43cf86905fe221120023d0138aabb076ed611b04', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19c3f302a9316138b3b1a3769f5085a1fd8f3616', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e64f965d04b4fd6982a0f891ea8d8f871c9708eb', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de3d9aa779ff53e3e79360f37d16e0aff82c899', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ce692b16f6aa247cdefb3f5907aead67ccef09d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a9de6620e7b87faaa9bfab438c715f0c0b61e53', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ff39d268237044d2837b97a67272697126c2571', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20a32b993647a65a30b1ee8d6cf463b7cc2819c7', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c18607988d5e6ddef6770594ff1263d7245536', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd261b3045b4b7d498546822925437dbe30fbd61', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb4093f0e427a2c4b89ec333effe9261f7de07fd', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '252f2c0ecc72290a83b21e5698f43554e064a4bc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46e02333ebb31c681a009ca2f6bc6d12a70e7908', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51fc5a255583b40f10740d83ee5ebf161c0fb1dc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6cb959097f2d8cccc03c8d54d914e51e5e5796d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e811cc087174a77adad1193b5e18b3e6646000', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91e91c163d992a77a8e6bf923f00f231def6fe88', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd1f01ff1d407d42a3a6b0118537db5fe5370199', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e26489e551a6a337aadc5b95d2880b313f28ea3f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '189971fc159d51ef9d475bdd8df436eb6ccdef7b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de2996e030428e67622aaf698a907c2c2b1bc48d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '899c1ba60df2ada278856f5952df2c81f2aeea9a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d147ead13616b8b9d3f1a5503e4768c5bc1e8dc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '882b2e2855bf8c304eea17f1d9419780ac686b55', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ce5a4833afcf026af497a3f3226bfdbfb273f68', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '419db116962ebf603577d471b649e1b8df54c568', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05b257168042305ef09f8c6af20a4a39f06061b6', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e111b3bbd8cb5620eb6d944598688a9ef468a079', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5bb8f71d16d8f84f5ec9e935ed39a91d2c4b55b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bd3126b77e9335847e8edfb47fb12f5a2f576c6', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e4b439d8299a97a3d36f2b208843a09c9adf07', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3058d1acb1efa0d96473d4fe8370a4b541e88c74', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41db4e6c249f8fc4c8a0fe7f4ae530406385e558', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c6d5e132574e1f02982f1516fd7991ca2a1cb83', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6e714ba70c19ce6ce7df09fff56e8a968d81711', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eede75077156b91cf310ef4444fa82b68d87475b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd688d8acb0b441e40573e5716061e0723c8b9553', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83777cd63581306be895345921e2dd07aa2ae7f3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b16b997afd420488a2860f462510abf29979945f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7ca111d5a17d3022dd717bfc439303e3404da98', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e3ab8022cf202eb7e6dbd83fe5016a92c8497a1', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28958dce2fabc835beea6070969177b60b0788e6', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00dfb163cd29db42777dbf0af1e299210d54d304', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6994be2da31288341038c3e176caa68649c92705', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f3fbbf459e93631930a487a63bd13e053e45e0b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f29a08065be656940c54dff3875433673d542b93', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b76d2d30ee855fa430977db49546817bf6056c97', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f9ffb2af22728c600933d68cd5391f5356bc7fd', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75edd77912a185c4e8c25c420be1636d3838db45', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed805ece86492f90219a4fea47e50ef6414ed417', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e11c60153a7d3d4b5214e3238ff5cba381e90f76', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bb0db5eac385f5da395ab890154d63597840fbb', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30e1ffa88bb3f65284d946e6f56394149e78acf2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3635bb1e92c2fd3a6aa9a3e2692f841a85d0fa6', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a2039c9fbf7713aa926ce2fa3659d96cba65155', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68e5734e90c44c3f16b77efb8e1a0a26196e4c06', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b994054c252f6ec80a61555758ca404ae78014be', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2b5304fabd90c3c3bb3c2f7b8facade2471e40d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '847d91afd4266ce0c154fdb3d364cbbd333e542e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b7ad01b5d9e650ae1e3be1789e24930cfb1f87', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c23f2e885600eaacf04386ee68803c31ea66915', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3db0c8da7b9131f3b10bc78160ae5ae4807890ec', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e24f9b72dd60f9e99a16b88c3ec13f3d2e53b9a4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb37c179706fbaf8d88d780c940e04cb82b806fa', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ff40266fb2b4cc1252ed9098f26dcb0b407c9c5', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '435ac44c9be4b92317310b66ca1451d138a900c9', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf93227484f31f154721515925025bd50347d59b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c51150f237ef5e75b5288dbe42f7bb52baaa816f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25fb7d204443223825c838c9c04acb5621e4e44e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a179aabbee222ee75084b0f2350cd284f79d919', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc3aee9daa1d5865a8fb0d44fb0cd85274a996c9', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9fd354aa578da10d08f9f29ddd41a7dfacf002a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5817d342c81f5b2d66e05ec91363a4382c0e1a94', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40433d10d3a5ed3231e4acdaa3f746658898862a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e94ff83fd0f65cf518685be1beb094017d1239f5', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3161413e66b310016115415de5a0aae29c4bc975', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03022a3ff9693fefa06cdb63d161798eb342af8e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38ba30fc50ed44e022532b2ba08c646a4c2c298b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fd39faa8dd2ab393bfa81405c4cc29d8321d83a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7313e6157a0d15467a9905cb6f3a3d23aaaaeec9', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e784bdbdd1b3a909d0580f3031aa803c1bcdc0f8', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '525db57f94fa02077f2dae2611b44efe336151a0', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91db10d04a547bf8341dfa7f297280595c9e731d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}]",Prayush Dawda,35144226,,User,,27,,14,47
435245773,Milestone 1.3 and 1.4: Add Algebraic Expression Input Interaction,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following: Adds the AlgebraicExpressionInput interaction with MatchesExactlyWith and IsEquivalentTo rules implemented along with their validations.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9553,https://api.github.com/repos/oppia/oppia/pulls/9553,https://github.com/oppia/oppia/pull/9553,closed,1929,231,52,116,17,105,1,1,[{'name': 'PR: LGTM'}],2020-06-16 14:14:25+00:00,2020-06-27 05:56:14+00:00,920509.0,"10 days, 15:41:49","[{'comment_id': 440966583, 'comment_body': 'Why is inputs an object, instead of a string? Is it something that is included in the existing framewok?', 'comment_created': datetime.datetime(2020, 6, 16, 16, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 440969242, 'comment_body': ""Can't there be other cases as well where rules won't get matched?\r\nAlso, what if the expressions (`inputs.x`) themselves are different between the rules in an answer group, then they may not be overruled, right?\r\n\r\nAdd more tests like these as well."", 'comment_created': datetime.datetime(2020, 6, 16, 16, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 440971088, 'comment_body': ""Isn't that a colon, not a semicolon? Also, why the need of this index?"", 'comment_created': datetime.datetime(2020, 6, 16, 16, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 440976004, 'comment_body': 'Ditto about colon', 'comment_created': datetime.datetime(2020, 6, 16, 16, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 440976092, 'comment_body': 'What about other checks like those done in the backend, is that done by nerdamer?\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 16, 16, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 441029686, 'comment_body': 'Yes, that is how the other rules services have implemented this as well. This is because of the way that the input has been interpolated in the rules. For instance, the current rule is `matches exactly with {{x|AlgebraicExpression}}`. So the inputs field is interpolated as an object with the key `x` of type AlgebraicExpression which is a unicode string.', 'comment_created': datetime.datetime(2020, 6, 16, 17, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 441029724, 'comment_body': ""> Can't there be other cases as well where rules won't get matched?\r\n\r\nI don't think there are any other cases given the current rule-set. There are only 2 rules atm, so the only other case is if the MatchesExactlyWith rule precedes the IsEquivalentTo rule which is not a problem.\r\n\r\n> Also, what if the expressions (inputs.x) themselves are different between the rules in an answer group, then they may not be overruled, right?\r\n\r\nOh yes, that's right. I've added a condition for that along with test cases."", 'comment_created': datetime.datetime(2020, 6, 16, 17, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 441029768, 'comment_body': 'Yes, fixed now.\r\nThis is needed because the error messages from nerdamer also provide the index at which the error has occurred. And that part starts with a colon. so this just strips that part out.', 'comment_created': datetime.datetime(2020, 6, 16, 17, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 441029859, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 6, 16, 17, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 441029934, 'comment_body': 'Yes, nerdamer handles any syntax errors while parsing and provides error messages for the same, which I have displayed after cleaning as shown above.', 'comment_created': datetime.datetime(2020, 6, 16, 17, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 441043461, 'comment_body': 'Ok, even so, can you add comments to each line since I have no idea what the format of the mesage is and so on.\r\n\r\nDitto in editor as well', 'comment_created': datetime.datetime(2020, 6, 16, 18, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 441045118, 'comment_body': 'This is the only line that needs to be in try - catch to get the error from nerdamer, right? The following errors can be added as warningText directly instead of this block?\r\n\r\nDitto in editor as well.', 'comment_created': datetime.datetime(2020, 6, 16, 18, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 441045710, 'comment_body': 'Rename array to  something else (maybe just `isEquivalentToInputs`) ?', 'comment_created': datetime.datetime(2020, 6, 16, 18, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 441046837, 'comment_body': ""Shouldn't you  compare later 'equivalent' inputs to past 'equivalent' inputs as well? \r\nLike equivalent to `(a+b)^2` and equivalent to `a^2 + b^2 + 2ab` would be the same, right?"", 'comment_created': datetime.datetime(2020, 6, 16, 18, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 441047656, 'comment_body': ""True, but can't you change the calling function to pass `inputs.x` in the first place, so the parameters are both strings? Since, I see you have created objects in the parameter in some locations which are not ideal."", 'comment_created': datetime.datetime(2020, 6, 16, 18, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 441047726, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 6, 16, 18, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 441048282, 'comment_body': ""Can't you just do this inside the loop without the need of another variable?"", 'comment_created': datetime.datetime(2020, 6, 16, 18, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 441199439, 'comment_body': ""That wouldn't work since those aren't the only places that the rules functions are being used at. The rules service is being passed to the `CurrentInteractionService` via the `onSubmit` function. This is being done in `oppia-interactive-algebraic-expression-input.component.ts`. Now, this service is general for all interactions and hence requires the inputs parameter to be an object. This is because not all interactions have simple input types like this one, so having them wrapped in an object makes things easier to handle."", 'comment_created': datetime.datetime(2020, 6, 16, 23, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 441215763, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 17, 0, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 441215778, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 17, 0, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 441215801, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 17, 0, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 441215821, 'comment_body': ""Yes. Also, I realized that two matching rules with the exact same input would also make the latter one redundant. I've modified the code and added more tests."", 'comment_created': datetime.datetime(2020, 6, 17, 0, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 441215838, 'comment_body': 'Discussed above.', 'comment_created': datetime.datetime(2020, 6, 17, 0, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 441215848, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 17, 0, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 441421852, 'comment_body': 'But `CurrentInteractionService` never calls the function directly? Or does it take the function name (for rule) from interaction_specs and calls it generally?', 'comment_created': datetime.datetime(2020, 6, 17, 9, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 441474520, 'comment_body': 'The `CurrentInteractionService` does call the `onSubmit` function. It does this in order to validate the submitted answer against the rules provided in the rules service. And this is done generally which is why all rules need to have the same type of parameter for input. For reference, the function is being called [here](https://github.com/oppia/oppia/blob/89001c40abeb5468c2dd69bdfe8ca24f26982cd0/core/templates/pages/exploration-player-page/services/current-interaction.service.ts#L116).', 'comment_created': datetime.datetime(2020, 6, 17, 11, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443253402, 'comment_body': ""Remove duplicate 'to'"", 'comment_created': datetime.datetime(2020, 6, 21, 20, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 443253447, 'comment_body': ""Shouldn't these be before the nerdamer validation?"", 'comment_created': datetime.datetime(2020, 6, 21, 20, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 443253790, 'comment_body': 'Merge this into an else if?', 'comment_created': datetime.datetime(2020, 6, 21, 20, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 443253875, 'comment_body': 'Merge this with the above condition using AND?', 'comment_created': datetime.datetime(2020, 6, 21, 20, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 443254253, 'comment_body': 'Do not use relative input here.', 'comment_created': datetime.datetime(2020, 6, 21, 20, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 443254308, 'comment_body': ""```suggestion\r\nconst nerdamer = require('nerdamer');\r\n```"", 'comment_created': datetime.datetime(2020, 6, 21, 20, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 443254343, 'comment_body': 'What does this check do in other interactions? Is it to test the customization args for the interaction (which in your case, there is none of)? Since this test seems to check just the presence.', 'comment_created': datetime.datetime(2020, 6, 21, 20, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 443254361, 'comment_body': 'Do not use relative import.', 'comment_created': datetime.datetime(2020, 6, 21, 20, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 443257012, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 21, 21, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443257016, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 21, 21, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443257018, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 21, 21, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443257023, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 21, 21, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443257027, 'comment_body': ""As mentioned [here](https://github.com/oppia/oppia/wiki/Creating-Interactions), this function is supposed to verify that the interaction is displayed correctly. This is why I've checked if the interaction element is present or not. Also, this is how it's done for other interactions as well."", 'comment_created': datetime.datetime(2020, 6, 21, 21, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443257031, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 21, 21, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443257034, 'comment_body': ""That's what I'd done initially but since this has been required in multiple files, it wouldn't allow the usage of `const`."", 'comment_created': datetime.datetime(2020, 6, 21, 21, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443257037, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 21, 21, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443369720, 'comment_body': '@iamprayush please add this service to `oppia-angular-root.component.ts`. The steps for doing this is mentioned in the point 12 here: https://github.com/oppia/oppia/wiki/Angular-Migration#implementation-details-to-migrate-services ', 'comment_created': datetime.datetime(2020, 6, 22, 7, 37, 48, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 443370367, 'comment_body': ""This import should come below this line ```import { GuppyInitializationService } from\r\n  'services/guppy-initialization.service.ts';```"", 'comment_created': datetime.datetime(2020, 6, 22, 7, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 443373415, 'comment_body': ""the import order in general is:\r\n\r\n1. Core angular imports\r\n2. Third-party imports\r\n3. Application imports\r\n\r\nWithin each sub-category you should sort by the module it is imported from and not what is being imported.\r\n\r\nSo something like:\r\n```\r\nimport { A } from 'D';\r\nimport { C } from 'B';\r\n```\r\nis wrong.\r\n\r\nThe right way to do that would be:\r\n```\r\nimport { C } from 'B';\r\nimport { A } from 'D';\r\n```\r\nbecause 'B' < 'D'\r\n\r\nPlease change the imports to follow this order."", 'comment_created': datetime.datetime(2020, 6, 22, 7, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 443373924, 'comment_body': 'Use `const` and `let` instead of `var`. Here and everywhere else (at least in angular2+ code)', 'comment_created': datetime.datetime(2020, 6, 22, 7, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 443375358, 'comment_body': ""```suggestion\r\n    for (let guppyDiv of guppyDivs) {\r\n      divId = 'guppy_' + Math.floor(Math.random() * 100000000);\r\n      // Dynamically assigns a unique id to the guppy div.\r\n      guppyDiv.setAttribute('id', divId);\r\n      // Create a new guppy instance for that div.\r\n      guppyInstance = new Guppy(divId, {});\r\n      this.guppyInstances.push(new GuppyObject(divId, guppyInstance));\r\n    }\r\n  }\r\n```"", 'comment_created': datetime.datetime(2020, 6, 22, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 443377564, 'comment_body': '@iamprayush maybe use `let` in that case.', 'comment_created': datetime.datetime(2020, 6, 22, 7, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 443640226, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 22, 15, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443640576, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 22, 15, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443640649, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 22, 15, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443640705, 'comment_body': ""Thanks for such a clear explanation! I've reordered the imports."", 'comment_created': datetime.datetime(2020, 6, 22, 15, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443640748, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 22, 15, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443640786, 'comment_body': ""I'd done this before but this doesn't work. Since `document.querySelectorAll` returns a `NodeList`, you can't iterate using `of`."", 'comment_created': datetime.datetime(2020, 6, 22, 15, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443722999, 'comment_body': 'Ah ok.', 'comment_created': datetime.datetime(2020, 6, 22, 17, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 443724562, 'comment_body': ""Instead of repeating the whole thing, isn't it possible to just declare these filename strings separately initially and reuse all the actual checks?"", 'comment_created': datetime.datetime(2020, 6, 22, 17, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 443817434, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 6, 22, 20, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443982600, 'comment_body': ""Right, NodeList doesn't inherit from array. So it is either forEach or the normal for loop. I think we can go with the normal for loop."", 'comment_created': datetime.datetime(2020, 6, 23, 6, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 443983445, 'comment_body': ""The import order here should be:\r\n```\r\nimport { Injectable } from '@angular/core';\r\nimport { downgradeInjectable } from '@angular/upgrade/static';\r\n```"", 'comment_created': datetime.datetime(2020, 6, 23, 6, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 443984932, 'comment_body': 'This can be` const i = 0; ...`. ', 'comment_created': datetime.datetime(2020, 6, 23, 6, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 443988910, 'comment_body': 'Why it is adding me and @srijanreddy98 as codeowner?', 'comment_created': datetime.datetime(2020, 6, 23, 6, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 444199206, 'comment_body': '@bansalnitish @srijanreddy98 \r\nI saw that the other services have both of you as code-owners which is why I thought any new services should be owned by you guys. Should I assign someone else instead?', 'comment_created': datetime.datetime(2020, 6, 23, 12, 53, 18, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 444272780, 'comment_body': 'Add many more cases. This seems to poorly test the conditions (e.g. no tests for inequalities). Add more complicated example inputs. Also add cases with multiple violations (like equation with a trailing operator). ', 'comment_created': datetime.datetime(2020, 6, 23, 14, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 444273372, 'comment_body': 'Add more success cases too!', 'comment_created': datetime.datetime(2020, 6, 23, 14, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 444274488, 'comment_body': 'No tests for this function.', 'comment_created': datetime.datetime(2020, 6, 23, 14, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 444321036, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 6, 23, 15, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 444321083, 'comment_body': '@nithusha21 This is a private function and is not meant to be called directly. As I understand we only write unit tests for public functions that can be called directly. This is just a helper function and this does indirectly get tested since I am checking for the warning text, which gets generated by this method, after calling the validation function.', 'comment_created': datetime.datetime(2020, 6, 23, 15, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 444322537, 'comment_body': 'Ah understood. Thanks!', 'comment_created': datetime.datetime(2020, 6, 23, 15, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 444620595, 'comment_body': ""This function should also check that the interaction was created correctly. In this case we don't apply any customizations, so we should confirm that the interaction appears in its default state. Sorry about the bad examples elsewhere in the codebase. Unfortunately some of the other interactions have lax tests that we should fix at some point"", 'comment_created': datetime.datetime(2020, 6, 24, 3, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 444620866, 'comment_body': ""Can we also check that the edit is displayed to the editing user? This would help catch bugs where the edit is saved, but the editing user doesn't get feedback"", 'comment_created': datetime.datetime(2020, 6, 24, 3, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 444621135, 'comment_body': ""Does this set of tests cover the interaction's capabilities thoroughly? At first glace it seems a little too simple to be comprehensive"", 'comment_created': datetime.datetime(2020, 6, 24, 3, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 444621706, 'comment_body': ""Can we use a `protractor-test-*` tag here? Even if you have to drill down to a child element from the `protractor-test-*` tag like `element(by.css(protractor-test-...)).element(...).element(...)...`, including a `protractor-test-*` tag makes it easier to find the relevant part of the HTML when we're debugging tests"", 'comment_created': datetime.datetime(2020, 6, 24, 3, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 444621875, 'comment_body': ""What if it hasn't loaded yet? A `waitFor` might be helpful to make sure the element has loaded before we interact with it"", 'comment_created': datetime.datetime(2020, 6, 24, 3, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 444717025, 'comment_body': ""I understand. I assume we would have to check that initially, the guppy editor has empty content.\r\nThe thing with getting the value from the guppy editor is that you need the reference to the instance of the Guppy class that is formed while initializing new guppy instances. This is done in the `guppy-initialization.service.ts`. This reference also requires the ID of the element. That ID is assigned to the div while initialization and is a unique random number that we won't have access to in the protractor tests since we are not storing it anywhere. We can't simply do things like `getAttribute(value)` since the div itself stores this value in an expression tree with a bunch of KaTeX HTML elements and they get converted to the required format when we try to fetch the value from the instance that created that particular div, which again, we don't have access to in the protractor tests."", 'comment_created': datetime.datetime(2020, 6, 24, 8, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 444717916, 'comment_body': ""Again, assuming that we would have to fetch the current value of the editor, we can't, as mentioned in the [comment above](https://github.com/oppia/oppia/pull/9553#discussion_r444717025)."", 'comment_created': datetime.datetime(2020, 6, 24, 8, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 444720841, 'comment_body': ""Yes, this particular test is not enough to check _all_ of the possible inputs that the interaction can accept. But I was under the impression that, in the protractor tests, we are only supposed to test if the interaction behaves as expected when the end-user is using it. Its capabilities of handling various inputs are tested in the unit tests, which has been done thoroughly as you can seen [here](https://github.com/oppia/oppia/blob/64e08a8becc20485cb3fbd2b0f4de7f27fbd14d9/extensions/interactions/AlgebraicExpressionInput/directives/algebraic-expression-input-rules.service.spec.ts). Please let me know if I'm misunderstanding and if I should add all those tests here as well."", 'comment_created': datetime.datetime(2020, 6, 24, 8, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 444781643, 'comment_body': ""The `guppy_active` class is added dynamically by the third-party lib so I can't change that class name. Also, at a given instant, there would be multiple guppy divs present so I can't query based on the guppy-div class name since only one of them will be active (only one of them will have the class `guppy_active`) which is why we try to find that particular div by querying for `guppy_active` classname. "", 'comment_created': datetime.datetime(2020, 6, 24, 9, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 444781689, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 444913234, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 6, 24, 13, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 444913324, 'comment_body': ""Umm, that can't be a constant, can it? It's inside a loop so it's value will change after every iteration."", 'comment_created': datetime.datetime(2020, 6, 24, 13, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 445033708, 'comment_body': 'Maybe move this and the above line to the ""Interaction"" section?', 'comment_created': datetime.datetime(2020, 6, 24, 16, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445033790, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 6, 24, 16, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445055438, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 24, 17, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 445055520, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 24, 17, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 445092071, 'comment_body': ""Oh right, I forgot, you can't loop over using `for const i in arr` here"", 'comment_created': datetime.datetime(2020, 6, 24, 18, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 445797784, 'comment_body': ""Say the `guppy-div` element has the class `protractor-test-guppy-div`. Then couldn't you do the following?\r\n\r\n```js\r\nelement(by.css(protractor-test-guppy-div)).element(by.css('.guppy_active'))\r\n```"", 'comment_created': datetime.datetime(2020, 6, 25, 19, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 445801866, 'comment_body': 'Yeah, but at a given moment there could be multiple divs in the document that have the class `protractor-test-guppy-div` and only one of them would contain `.guppy_active`. Protractor would grab the first div but that might not be the one that contains the active class.', 'comment_created': datetime.datetime(2020, 6, 25, 19, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 445804337, 'comment_body': ""You are correct that e2e tests don't need to be quite as thorough as the unit tests, but they still need to be fairly comprehensive because the kinds of bugs we find with e2e tests can be just as subtle as those found by unit tests. For example, we recently discovered a bug with the exploration editor that only occurred when a drag-and-drop interaction was present. This wasn't caught by the e2e tests (or any of our tests for that matter) because the exploration editor tests aren't comprehensive enough and only test a few of the most common interactions, not drag-and-drop. To catch bugs like these, ideally we'd have e2e tests that cover all possible ways the end-user could use the site, including all possible interactions, all possible configurations of those interactions, etc.\r\n\r\nHowever, it's also true that it's impractical to actually test every possible usage. To take an extreme, we'd never test all possible topic names in case some special sequence of characters caused it to crash (think of that [iPhone-crashing string](https://www.cnet.com/news/new-ios-text-bomb-bug-can-crash-your-iphone-but-fix-is-said-to-be-close/) from a few months ago). I think the `ItemSelectionInput` test strikes a reasonable middle ground:\r\n\r\nhttps://github.com/oppia/oppia/blob/ddc50f2ff4e5cb9fc4d337f7c3289c50532ee382/extensions/interactions/ItemSelectionInput/protractor.js#L118\r\n\r\nDoes that sound reasonable?"", 'comment_created': datetime.datetime(2020, 6, 25, 19, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 445812024, 'comment_body': ""Okay, it sounds like we need to build a more complicated infrastructure for working with these objects like we have with rich text editors, and I understand that you probably don't have time to build that right now. Instead, could we do something like count the number of KaTeX elements so that we at least know the editor changes when the user inputs something? At least then we'd be able to catch bugs where the editor doesn't respond."", 'comment_created': datetime.datetime(2020, 6, 25, 20, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 445814779, 'comment_body': ""You can loop over the elements with `protractor-test-guppy-div` and get the one with `.guppy_active`. Here's an example of this pattern:\r\n\r\nhttps://github.com/oppia/oppia/blob/3317ab53340a3b3161cdb65ba255e891dcd3874b/core/tests/protractor_utils/LibraryPage.js#L56\r\n\r\nAlso for future reference, this is one of the patterns described on the [wiki page](https://github.com/oppia/oppia/wiki/End-to-End-Tests#independence), where we have a link to that example if you ever need it again"", 'comment_created': datetime.datetime(2020, 6, 25, 20, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 445905182, 'comment_body': ""I've extracted the annotation tag from KaTeX element. That contains the XML content but since we are just testing for default state we can expect it to just be empty."", 'comment_created': datetime.datetime(2020, 6, 26, 0, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 445905206, 'comment_body': ""Thanks for the clear explanation! I've added more tests."", 'comment_created': datetime.datetime(2020, 6, 26, 0, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 445905237, 'comment_body': ""That actually inspired a solution! I realized that the active div will be the one that's created last so I just picked the last div and it works as expected. I've now used `protractor-test-guppy-div`, thanks!"", 'comment_created': datetime.datetime(2020, 6, 26, 0, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446193973, 'comment_body': 'Nice! This looks like a great solution', 'comment_created': datetime.datetime(2020, 6, 26, 13, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446194198, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 6, 26, 13, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446195413, 'comment_body': ""Normally we discourage using `.last()`, because it tends to make tests dependent on each other, but in this case we actually know that the element we want will be last (https://github.com/oppia/oppia/pull/9553#discussion_r445905237), so it's fine. Could you just add a comment explaining that we know the active element will be last?"", 'comment_created': datetime.datetime(2020, 6, 26, 13, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446196095, 'comment_body': 'Oops, sorry I missed this one earlier. The element might just have not loaded yet, so we need a waitFor just like the earlier comment you addressed', 'comment_created': datetime.datetime(2020, 6, 26, 13, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446196413, 'comment_body': 'ditto: comment explaining why `.last()`', 'comment_created': datetime.datetime(2020, 6, 26, 13, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446196671, 'comment_body': 'Can we use a `protractor-test-*` tag here too?', 'comment_created': datetime.datetime(2020, 6, 26, 13, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446197020, 'comment_body': ""Why `.first()`? If we know the desired element will be first, let's explain that in a comment"", 'comment_created': datetime.datetime(2020, 6, 26, 13, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446223870, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 14, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446224275, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 14, 38, 7, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446224390, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 14, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446225020, 'comment_body': ""I've now used the `algebraicInputElem` element to query this, which is fetched via the `.protractor-test-guppy-div` class."", 'comment_created': datetime.datetime(2020, 6, 26, 14, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446225259, 'comment_body': ""Ah, I just realized that we can use `algebraicInputElem` element to query this. And since there will only be one `annotation` tag in there, we don't need to fetch the first one explicitly."", 'comment_created': datetime.datetime(2020, 6, 26, 14, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}]","[{'commit_sha': '76167513236338afb2f04831b9099503c6297cfc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd17cd80fbb361264893ecb81e39ea265feafa71e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c46df0bae642e0b7bcf13306bce97b9bfc65051', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebc705849c99f4b5a1ca162158f68c553b538da8', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08f668b5d7db65814baacbf12a0da00550b471a1', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '405deb93bd596dee41e9ebd1a0fa8d9ca2bec819', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c92416f14f90ef542dc200e954db58ba4f90b2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2c2f609e0977e11e2313018a650dbdc8ee09d06', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7674fa1bf13866d5a87f1c6cd0b436a9801ff790', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5e5b7441fea12bac337f8ea8373a01b21bacda3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57e8245737111406737ad25a9c1c101a70d07e4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f4ab59e956e145a8a6f20af17df07c22dac9062', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4951afc9f90ad69aa038ec23cf6cd89c764b74c3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dba41e2bcbea25060720635f1e1eee8fd1fed21', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6586eb699179989ba1a433ac89e4ed44f3e2620a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43cf86905fe221120023d0138aabb076ed611b04', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19c3f302a9316138b3b1a3769f5085a1fd8f3616', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e64f965d04b4fd6982a0f891ea8d8f871c9708eb', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de3d9aa779ff53e3e79360f37d16e0aff82c899', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ce692b16f6aa247cdefb3f5907aead67ccef09d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a9de6620e7b87faaa9bfab438c715f0c0b61e53', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ff39d268237044d2837b97a67272697126c2571', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20a32b993647a65a30b1ee8d6cf463b7cc2819c7', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c18607988d5e6ddef6770594ff1263d7245536', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd261b3045b4b7d498546822925437dbe30fbd61', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb4093f0e427a2c4b89ec333effe9261f7de07fd', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '252f2c0ecc72290a83b21e5698f43554e064a4bc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46e02333ebb31c681a009ca2f6bc6d12a70e7908', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51fc5a255583b40f10740d83ee5ebf161c0fb1dc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6cb959097f2d8cccc03c8d54d914e51e5e5796d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e811cc087174a77adad1193b5e18b3e6646000', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91e91c163d992a77a8e6bf923f00f231def6fe88', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd1f01ff1d407d42a3a6b0118537db5fe5370199', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e26489e551a6a337aadc5b95d2880b313f28ea3f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '189971fc159d51ef9d475bdd8df436eb6ccdef7b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de2996e030428e67622aaf698a907c2c2b1bc48d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '899c1ba60df2ada278856f5952df2c81f2aeea9a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d147ead13616b8b9d3f1a5503e4768c5bc1e8dc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '882b2e2855bf8c304eea17f1d9419780ac686b55', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ce5a4833afcf026af497a3f3226bfdbfb273f68', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '419db116962ebf603577d471b649e1b8df54c568', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05b257168042305ef09f8c6af20a4a39f06061b6', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e111b3bbd8cb5620eb6d944598688a9ef468a079', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5bb8f71d16d8f84f5ec9e935ed39a91d2c4b55b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bd3126b77e9335847e8edfb47fb12f5a2f576c6', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e4b439d8299a97a3d36f2b208843a09c9adf07', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3058d1acb1efa0d96473d4fe8370a4b541e88c74', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41db4e6c249f8fc4c8a0fe7f4ae530406385e558', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60297de835c6c79a8385bed8d62db115e091e255', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee80f65effa0117a235f8b8c6bb7626285a2c9b0', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46ba576c9e3239c35667878135d67d9efa402961', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25a40b9a50a522b23a6bf536c74486488baa736b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef9211a7e00f29231e6b19c7857b0fdbd8e1b5d2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67a6d3cd78d8592f5b6b31fddc689df340362189', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05230afa0628fbf3145e478b600916726e6ef6d5', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9abb3cf3c5b89b10d7d705941abaa261629f9a1', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de1d86d794a833534a4d0142c9518b92ee8b123c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd88bd98e622f53e4fffb578995520ed28f76f99', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e67916d89c56f0ba825b86d128f9d5d403b7971a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1be513d5ff8d60096760914d5f4d4a0452196022', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05104b0f2b8caad140e27783172f572adcea6c8e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a9c4c72d4720e620f861388196da0bd5e72b111', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e513860083d6255569d82e683b2561ae413f26a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a2819b057451e6e49f9e8e587506dfacef2d393', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52a3912accd6dabec2995871d8cd029d10b2f5b0', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb393f466b7012f120b8801b3bd9319682042fed', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b97a4da3712a38bd1003d87a5783800ad5ea162', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a5d506d4bca360ed3912a2c9de086432c44f5d8', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f894bdecbee1c3ec5c106c49d55f84ae9cd1622', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '400bc5dd8f20916bcc80452a55af43f8a1334e9a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e0d360b7c8b18cf1eb8d1c97d78163d4ef17e7c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f182370d657d744f51fa42ba8e9ef6487500c14b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '092356c4cb79fe5790c78aa9f28e955ce3b4a064', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1174fcc24c7f64eba62c5311cd7ba90e7ce97f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29a51ac4e98af0c2076bdcddab05e61ea2ee0995', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7369da9c32760a759d910b3b1380f70f359f1f93', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80871200929fdfbe26a18c7167ec4fa0921a65d3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e303ca9ec9eb19ac185c5a92a64655db19fa529', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44d5571f82dae2935f9724cb895b20b279b5e912', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fc0a8a1d2c799f6dc2a4fce11c49ee12b7c27ba', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a099295fef3b5cba9a7df0ac0a0cb73e3acbd732', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92acebda907ce2d73c801c22a8f6251ba91fdd76', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e2f3f18fae7821a78b88607915e7f4e61791b8f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '715e68cf80ce68dc7927825c6ab9b3597b650122', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f14a60326560eb9e2c1e54d58c4b81ba08175af', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ebb99a26d5867b6b3eaeeb84a1d9f26e62725b4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9faf97630da9dcfd33e2a581ec53645e89eba45', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17eee0df277ce57ebb01b878bff7ac7c77e7ec4b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e262aba4d915e4c7fa06e941d747961000425dd', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '635795dafdf04979f3fcd25a688f9902aea65e42', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c343c06ff036840350e9a6970b114edfd96c9f70', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '932c7bf52ec62a4b65d0627c29471ca53dc74aaf', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67ebd83085fb9102e9ee2cf81271705afe75fda7', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c78dda7a80274ef3a4a5661a3953c8273f5fd2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '498bb2de09d2f035385698ca245fae791f3967d8', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3765cc56dc2ecf4275ec498f95941648a922bac', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '889f4a7d81ed0daff8d68de0331768edd3922e37', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '630a2e076b9360fdd001021ce77bdb9d262a7115', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b76192cfbb50317cd6a9cd23ca677f5956478fbb', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6833c7f9305345bb980fbcc180bb69e22616e603', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8afac9cb1e5072dbd949a09ca9845381f384482b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cefcb1b63866fed4c09cf49629dab4edc590d18', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62f7057e01cfb975f520a98fb5ed9cbbedb07a19', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64e08a8becc20485cb3fbd2b0f4de7f27fbd14d9', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '932261281a0d9a8b9dfd99efb68da6e736a4efa2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96d5c200982d67701f88246b3f744fff828322fb', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '323296cd4010cb66b1808319775af84fbe8b585f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b63a438e463043147dff80ee1a0f10168839edf9', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '745443e834c0b1a7497daaa20c06adf73ca86c13', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b94555f21a0901a67179a0001d0fd268ea844913', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97089ab3bd8c2a9215a7b01758b79cdce5207c59', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00ab455d6bcb675479c501edc967cf392a4bda61', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68d7e52339f1368c22ba5e22f6968d6f197cab2c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64a92ecb93a4498860b609c8dfdbcb8b86b10e0c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ef2e6350cf82b2895249e7de01866fa34c48ba3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3008d4676bd7b22b0f482a62446ddab17551739c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}]",Prayush Dawda,35144226,,User,,27,,14,47
439415514,Milestone 1.6 and 1.7: Added Math Equation Input Interaction.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following:
 * Adds a new Math Equation Input interaction.
 * Removes the MathExpressionInput editor from the Choose Interaction modal. This is done in order to disallow any new interactions from using the MathExpressionInput interaction and instead use the new AlgebraicExpressionInput and MathEquationInput interactions. Currently, since some of the explorations still use the old math interaction, we cannot remove all the code referencing that interaction, which is why only the thumbnail is removed from the Choose Interaction modal. Also, this would fail the e2e tests since you wouldn't be able to choose this interaction anymore which is why the e2e tests have been modified to skip the MathExpressionInput tests.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9649,https://api.github.com/repos/oppia/oppia/pulls/9649,https://github.com/oppia/oppia/pull/9649,closed,1959,106,58,159,14,33,1,1,[{'name': 'PR: LGTM'}],2020-06-24 19:21:04+00:00,2020-06-29 14:24:03+00:00,414179.0,"4 days, 19:02:59","[{'comment_id': 446563333, 'comment_body': ""Is `AlgebraicExpressionInput` replacing `MathExpressionInput`? If so, should we remove `MathExpressionInput` from here? If not, then don't the changes in `extensions.js` mean those tests don't cover `MathExpressionInput` anymore?"", 'comment_created': datetime.datetime(2020, 6, 27, 20, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446563689, 'comment_body': ""I don't understand what's going on with the name changes throughout this PR. Could you add a description to the top comment explaining what these various editors and interactions do and what names are changing?"", 'comment_created': datetime.datetime(2020, 6, 27, 20, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446563727, 'comment_body': 'This is still `algebraic-expression-input`', 'comment_created': datetime.datetime(2020, 6, 27, 20, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446563751, 'comment_body': 'ditto: still `algebraic-expression`', 'comment_created': datetime.datetime(2020, 6, 27, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446563876, 'comment_body': ""It doesn't look like you've deleted the actual `MathExpressionInput` folder, so why is it no longer included in this file?"", 'comment_created': datetime.datetime(2020, 6, 27, 20, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446563976, 'comment_body': 'Could you use a `protractor-test-*` class here instead? You might have to make a new one. This helps stop frontend code changes like refactoring class names from breaking the e2e tests', 'comment_created': datetime.datetime(2020, 6, 27, 20, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446563996, 'comment_body': 'ditto: use `protractor-test-*` class', 'comment_created': datetime.datetime(2020, 6, 27, 20, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446564026, 'comment_body': 'ditto: use `protractor-test-*` class', 'comment_created': datetime.datetime(2020, 6, 27, 20, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446564179, 'comment_body': 'These look great! Thanks for being so comprehensive', 'comment_created': datetime.datetime(2020, 6, 27, 20, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446566741, 'comment_body': 'Sorry, is it supposed to be something else?', 'comment_created': datetime.datetime(2020, 6, 27, 20, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446566771, 'comment_body': 'The MathEditor is common for both interactions, but the tag still needs to be specific to the interaction itself. Am I missing something?', 'comment_created': datetime.datetime(2020, 6, 27, 20, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446566871, 'comment_body': ""I've added a comment explaining this in the description now, PTAL, and let me know if there are still any ambiguities."", 'comment_created': datetime.datetime(2020, 6, 27, 20, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446567370, 'comment_body': ""All of the other interactions have used the `oppia-interactive-{interaction-name}` tag pattern. Also, we'd have to add the `protractor-test-*` class to the div that contains the interaction. This div is created dynamically and is not hard-coded anywhere."", 'comment_created': datetime.datetime(2020, 6, 27, 21, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446567394, 'comment_body': 'Addressed above.', 'comment_created': datetime.datetime(2020, 6, 27, 21, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446567400, 'comment_body': 'Addressed above.', 'comment_created': datetime.datetime(2020, 6, 27, 21, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446567437, 'comment_body': ""Comment added. Also, specifically about this change -- The thing is, both the MathEquationInput and AlgebraicExpressionInput interactions use the same editor which is why I've used a single function in objects' protractor that can be used by both editors."", 'comment_created': datetime.datetime(2020, 6, 27, 21, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446567509, 'comment_body': ""Yes, the new interactions replace the old one. I've removed it from here."", 'comment_created': datetime.datetime(2020, 6, 27, 21, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446570489, 'comment_body': ""Please change all instances of\r\n```typescript\r\nconst nerdamer = require('nerdamer');\r\n```\r\nto\r\n```typescript\r\nimport nerdamer from 'nerdamer';\r\n```\r\n\r\nThis way the type definitions for nerdamer are inferred by the compiler.\r\n\r\n![nerdmar1](https://user-images.githubusercontent.com/36989112/85932825-41dd3f00-b8ed-11ea-9231-823e1bb71ac4.png)\r\n![nerdmar2](https://user-images.githubusercontent.com/36989112/85932828-44d82f80-b8ed-11ea-9697-981ebe95da1a.png)\r\n\r\nAlso I noticed that some functions are not present in their type defs and you've already added them in your custom defs. I've refactored them to override the default ones here #9695. (You can either wait for that PR to get merged or can include the changes in that PR here and I'll close that one.)\r\n"", 'comment_created': datetime.datetime(2020, 6, 27, 21, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 446576091, 'comment_body': ""Done. And I've moved the changes from your PR here so that it's faster overall, thanks!"", 'comment_created': datetime.datetime(2020, 6, 27, 22, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446576343, 'comment_body': ""Add a new line here.\r\n\r\n Also I've noticed the lint checks don't work in the `typings` directory. Is it expected?\r\n\r\n/cc @Hudda @kevinlee12 "", 'comment_created': datetime.datetime(2020, 6, 27, 22, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 446576491, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 27, 23, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446612986, 'comment_body': ""> Also I've noticed the lint checks don't work in the typings directory. Is it expected?\r\n\r\nYep lint checks don't work here, `typings` directory is excluded from lint checks"", 'comment_created': datetime.datetime(2020, 6, 28, 7, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446616985, 'comment_body': 'Sort these alphabetically, please. Ditto in other places.', 'comment_created': datetime.datetime(2020, 6, 28, 8, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 446627240, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 28, 9, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446660414, 'comment_body': 'Thanks for the clarification! This makes sense now', 'comment_created': datetime.datetime(2020, 6, 28, 14, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446660492, 'comment_body': ""Nope, I just didn't understand that `MathEditor` was working for both interactions. Thanks for explaining!"", 'comment_created': datetime.datetime(2020, 6, 28, 14, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446660604, 'comment_body': 'This makes sense!', 'comment_created': datetime.datetime(2020, 6, 28, 14, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446666847, 'comment_body': 'Ahh, okay', 'comment_created': datetime.datetime(2020, 6, 28, 15, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 446667885, 'comment_body': ""shouldn't this be invalid? "", 'comment_created': datetime.datetime(2020, 6, 28, 16, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 446668406, 'comment_body': 'Is there some error message displayed? If so can we assert that?', 'comment_created': datetime.datetime(2020, 6, 28, 16, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 446675157, 'comment_body': 'Yes, it will be categorized as invalid. This is just to test that the replacement function works as expected. When the validation will be called on this expression it will evaluate it as invalid.', 'comment_created': datetime.datetime(2020, 6, 28, 17, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 446675401, 'comment_body': 'Sounds good!', 'comment_created': datetime.datetime(2020, 6, 28, 17, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 446678630, 'comment_body': ""Yes, I've added it here and in the algebraic component."", 'comment_created': datetime.datetime(2020, 6, 28, 17, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}]","[{'commit_sha': '76167513236338afb2f04831b9099503c6297cfc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd17cd80fbb361264893ecb81e39ea265feafa71e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c46df0bae642e0b7bcf13306bce97b9bfc65051', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebc705849c99f4b5a1ca162158f68c553b538da8', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08f668b5d7db65814baacbf12a0da00550b471a1', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '405deb93bd596dee41e9ebd1a0fa8d9ca2bec819', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c92416f14f90ef542dc200e954db58ba4f90b2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2c2f609e0977e11e2313018a650dbdc8ee09d06', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7674fa1bf13866d5a87f1c6cd0b436a9801ff790', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5e5b7441fea12bac337f8ea8373a01b21bacda3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57e8245737111406737ad25a9c1c101a70d07e4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f4ab59e956e145a8a6f20af17df07c22dac9062', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4951afc9f90ad69aa038ec23cf6cd89c764b74c3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dba41e2bcbea25060720635f1e1eee8fd1fed21', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6586eb699179989ba1a433ac89e4ed44f3e2620a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43cf86905fe221120023d0138aabb076ed611b04', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19c3f302a9316138b3b1a3769f5085a1fd8f3616', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e64f965d04b4fd6982a0f891ea8d8f871c9708eb', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de3d9aa779ff53e3e79360f37d16e0aff82c899', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ce692b16f6aa247cdefb3f5907aead67ccef09d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a9de6620e7b87faaa9bfab438c715f0c0b61e53', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ff39d268237044d2837b97a67272697126c2571', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20a32b993647a65a30b1ee8d6cf463b7cc2819c7', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c18607988d5e6ddef6770594ff1263d7245536', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd261b3045b4b7d498546822925437dbe30fbd61', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb4093f0e427a2c4b89ec333effe9261f7de07fd', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '252f2c0ecc72290a83b21e5698f43554e064a4bc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46e02333ebb31c681a009ca2f6bc6d12a70e7908', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51fc5a255583b40f10740d83ee5ebf161c0fb1dc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6cb959097f2d8cccc03c8d54d914e51e5e5796d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e811cc087174a77adad1193b5e18b3e6646000', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91e91c163d992a77a8e6bf923f00f231def6fe88', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd1f01ff1d407d42a3a6b0118537db5fe5370199', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e26489e551a6a337aadc5b95d2880b313f28ea3f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '189971fc159d51ef9d475bdd8df436eb6ccdef7b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de2996e030428e67622aaf698a907c2c2b1bc48d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '899c1ba60df2ada278856f5952df2c81f2aeea9a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d147ead13616b8b9d3f1a5503e4768c5bc1e8dc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '882b2e2855bf8c304eea17f1d9419780ac686b55', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ce5a4833afcf026af497a3f3226bfdbfb273f68', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '419db116962ebf603577d471b649e1b8df54c568', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05b257168042305ef09f8c6af20a4a39f06061b6', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e111b3bbd8cb5620eb6d944598688a9ef468a079', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5bb8f71d16d8f84f5ec9e935ed39a91d2c4b55b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bd3126b77e9335847e8edfb47fb12f5a2f576c6', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e4b439d8299a97a3d36f2b208843a09c9adf07', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3058d1acb1efa0d96473d4fe8370a4b541e88c74', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41db4e6c249f8fc4c8a0fe7f4ae530406385e558', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60297de835c6c79a8385bed8d62db115e091e255', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee80f65effa0117a235f8b8c6bb7626285a2c9b0', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46ba576c9e3239c35667878135d67d9efa402961', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25a40b9a50a522b23a6bf536c74486488baa736b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef9211a7e00f29231e6b19c7857b0fdbd8e1b5d2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67a6d3cd78d8592f5b6b31fddc689df340362189', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05230afa0628fbf3145e478b600916726e6ef6d5', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9abb3cf3c5b89b10d7d705941abaa261629f9a1', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de1d86d794a833534a4d0142c9518b92ee8b123c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd88bd98e622f53e4fffb578995520ed28f76f99', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e67916d89c56f0ba825b86d128f9d5d403b7971a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1be513d5ff8d60096760914d5f4d4a0452196022', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05104b0f2b8caad140e27783172f572adcea6c8e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a9c4c72d4720e620f861388196da0bd5e72b111', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e513860083d6255569d82e683b2561ae413f26a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a2819b057451e6e49f9e8e587506dfacef2d393', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52a3912accd6dabec2995871d8cd029d10b2f5b0', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb393f466b7012f120b8801b3bd9319682042fed', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b97a4da3712a38bd1003d87a5783800ad5ea162', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a5d506d4bca360ed3912a2c9de086432c44f5d8', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f894bdecbee1c3ec5c106c49d55f84ae9cd1622', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '400bc5dd8f20916bcc80452a55af43f8a1334e9a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e0d360b7c8b18cf1eb8d1c97d78163d4ef17e7c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f182370d657d744f51fa42ba8e9ef6487500c14b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '092356c4cb79fe5790c78aa9f28e955ce3b4a064', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1174fcc24c7f64eba62c5311cd7ba90e7ce97f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29a51ac4e98af0c2076bdcddab05e61ea2ee0995', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7369da9c32760a759d910b3b1380f70f359f1f93', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80871200929fdfbe26a18c7167ec4fa0921a65d3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e303ca9ec9eb19ac185c5a92a64655db19fa529', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44d5571f82dae2935f9724cb895b20b279b5e912', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fc0a8a1d2c799f6dc2a4fce11c49ee12b7c27ba', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a099295fef3b5cba9a7df0ac0a0cb73e3acbd732', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92acebda907ce2d73c801c22a8f6251ba91fdd76', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e2f3f18fae7821a78b88607915e7f4e61791b8f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '715e68cf80ce68dc7927825c6ab9b3597b650122', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f14a60326560eb9e2c1e54d58c4b81ba08175af', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ebb99a26d5867b6b3eaeeb84a1d9f26e62725b4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9faf97630da9dcfd33e2a581ec53645e89eba45', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17eee0df277ce57ebb01b878bff7ac7c77e7ec4b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e262aba4d915e4c7fa06e941d747961000425dd', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '635795dafdf04979f3fcd25a688f9902aea65e42', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c343c06ff036840350e9a6970b114edfd96c9f70', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '932c7bf52ec62a4b65d0627c29471ca53dc74aaf', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67ebd83085fb9102e9ee2cf81271705afe75fda7', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c78dda7a80274ef3a4a5661a3953c8273f5fd2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '498bb2de09d2f035385698ca245fae791f3967d8', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3765cc56dc2ecf4275ec498f95941648a922bac', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '889f4a7d81ed0daff8d68de0331768edd3922e37', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '630a2e076b9360fdd001021ce77bdb9d262a7115', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b76192cfbb50317cd6a9cd23ca677f5956478fbb', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6833c7f9305345bb980fbcc180bb69e22616e603', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8afac9cb1e5072dbd949a09ca9845381f384482b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cefcb1b63866fed4c09cf49629dab4edc590d18', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62f7057e01cfb975f520a98fb5ed9cbbedb07a19', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64e08a8becc20485cb3fbd2b0f4de7f27fbd14d9', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7e8c9e7a19623133ebef4b212d94727fe364408', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2a4f7d09675469ac3a82d88af602cf5cce7a219', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c5e497fe30c635b7cf9892bd87afd5316218da3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcdefe47c70f32e238c440428d45e6d015c8545d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '932261281a0d9a8b9dfd99efb68da6e736a4efa2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96d5c200982d67701f88246b3f744fff828322fb', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '323296cd4010cb66b1808319775af84fbe8b585f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b63a438e463043147dff80ee1a0f10168839edf9', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '745443e834c0b1a7497daaa20c06adf73ca86c13', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b94555f21a0901a67179a0001d0fd268ea844913', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '872ecb5c5e6ff8984625faf9ed26e47702ebb4ca', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ebd66a96dfe966df7188c2d653863e8a6de8dc9', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ccc3116007828993f5b202d1e0ba89461985d6a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e678da76a150f7f36cd1e9906edb98bb846b0c8', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97089ab3bd8c2a9215a7b01758b79cdce5207c59', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00ab455d6bcb675479c501edc967cf392a4bda61', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68d7e52339f1368c22ba5e22f6968d6f197cab2c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64a92ecb93a4498860b609c8dfdbcb8b86b10e0c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0624b3245901839dcdedd8033db790d0ee05cc61', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b692e6b2672d14dd9b6a149eab69c5dc34028f3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dd90b2a2d1da4db1c56296563c2c0fcc309b131', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '098f1cad3a9b0b7ddb94c216be3e6ca5aabdbb35', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ef2e6350cf82b2895249e7de01866fa34c48ba3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e29af66e7b27f90c60fbf3631269dfcf33a5278', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41536421b9a6b0731a4cec65b6bc071f33eb0397', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbb74d40a610f254c77207a6e43becadffddfb2f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '306d50e35630b8c09b8d7be5db7a2e7b4cc147ff', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ef19900eb868f118946aa2e441cc08411c67562', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e102934c9c4d787dadec66b39070eab86b2c6b2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e1bb704f605dc83c9cef62a83360ca3622fce20', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9810c254f578537599eb741d384c92419d29c45', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6afec0cb48210402ad0875f5b1192af96d081fe', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c51c7816b2b6e0f3726c3a7e1bcdf1edbff84e38', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7286da24bb582c84bd82ea22f9bac0466373f13', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af4142b236f5b2f5b43e911d3233d6a171ea0ce2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7716e93118cd0750a85215db542451f8dc9da1ea', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e911e94a6508e094464de5a8d868fc3fe37a3801', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4f6c843ffb8e669058799cfd855f75b51e195a7', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83b312139a02f4d55ebfb0bee97c9c7792249583', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54d7579ff6a6e6b9ae43c61d5c437165adaab025', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '352ab34e10146daea645e3cb2acebb73b8c9305d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ec6cf8ddc1f8988df9bc14fae39f2774b442d34', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e606317b67db9cc0ebd3cdd4ea0fb99f43b16e0', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbb841fde092e6a87d514ae8483145ccbd613a00', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '738cadf9f9ce8f5574caf948721ac7d4a29a4b1d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2db38e81f7af4b1c23d142934bfa1edb176e3f5e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '098997afa49fc9852e5dc71ae4d79aee6dc9e422', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bcba2fe550ec69ffd278233e5b6395a18f9b678', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bf6f47392efe9190f6863d7d1f536bcb028206b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6fc5f473bf25b0277cb6a45bbeeea8187284fdf', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76d80de1331594467f0d651906d76547b50ca9b8', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '985f326028eee08137940729e6e1d38f304c5f59', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03a1440e5fbc3647be76ae67c8ece4dfe06cdc24', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9fb840c60860f11753e005029c5eb9142e2cf3d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8944913fab70663ae902464d1c0a8edb3715d27', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}]",Prayush Dawda,35144226,,User,,27,,14,47
437433513,Added a one-off job for math expression input validation.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following:
Adds a one-off job that validates all explorations that use the MathExpressionInput interaction to check how many inputs are valid according to the new validations and also to classify them between equations and expressions. This is a prerequisite for the upgradation of the explorations to the new math interactions. 

This PR also removes the old one-off job that was added to check how many inputs are equations. That functionality is a subset of this one-off job which is why the old one is now obsolete.

The following screenshots show an example run of the job that was carried out locally:
Sample exploration inputs:
![inputs](https://user-images.githubusercontent.com/35144226/85206876-c1de3480-b342-11ea-9778-ec125f99764a.png)

Job output:
![job_output](https://user-images.githubusercontent.com/35144226/85206883-c6a2e880-b342-11ea-9ab9-8ed429f18fa2.png)


## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9597,https://api.github.com/repos/oppia/oppia/pulls/9597,https://github.com/oppia/oppia/pull/9597,closed,396,43,9,23,10,60,2,1,"[{'name': 'PR: LGTM'}, {'name': 'PR: Affects datastore layer'}]",2020-06-20 16:41:01+00:00,2020-06-27 03:34:36+00:00,557615.0,"6 days, 10:53:35","[{'comment_id': 443144744, 'comment_body': 'Is this job not required any more?', 'comment_created': datetime.datetime(2020, 6, 20, 16, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 443145757, 'comment_body': ""This is done so that the path to the third-party lib can be resolved. Also, the linter disables are necessary because I couldn't add the path insert code above the imports, that would also cause the linter checks to fail."", 'comment_created': datetime.datetime(2020, 6, 20, 17, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443145816, 'comment_body': 'The old job just checked which interactions have equations as inputs, so this job covers that functionality which is why we can remove the old one.', 'comment_created': datetime.datetime(2020, 6, 20, 17, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443181667, 'comment_body': ""I don't understand why all this is needed, especially since we seem to be able to import other third-party libs without a problem (see e.g. mutagen). Why is this case different and why does it need so much special-case setup? In general, please make sure to follow existing patterns in the codebase."", 'comment_created': datetime.datetime(2020, 6, 21, 4, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443181715, 'comment_body': 'Always add a single new line between paragraphs.', 'comment_created': datetime.datetime(2020, 6, 21, 4, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443181868, 'comment_body': ""I thought we were planning to validate the asciimath, not the latex. \r\n\r\nAlso, is this library meant to be a permanent addition? What is the precise definition of the format of the text output of latex2text? Is it asciimath? If so, could you point me to the docs which state that? If not, then wouldn't this mean that there is a mismatch?"", 'comment_created': datetime.datetime(2020, 6, 21, 4, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443182025, 'comment_body': ""This seems a bit off. If what you want to do is view the problematic cases rather than list all formulae, then perhaps your first element (the key for the mapreduce) should be by validity and the second element should contain all the details. For the valid cases you probably can just output the first N (100-1000?) rule_input strings for eyeballing, but for the invalid cases you'll want to output all of them with full details."", 'comment_created': datetime.datetime(2020, 6, 21, 5, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443258052, 'comment_body': ""The other libs also require such explicit addition of paths. The lib you've mentioned has done this in multiple places that it's being used in. Since this is the only place pylatexenc is being used in, the path to it has been added here. Also, this sort of thing is being done in other places as well, for instance [here](https://github.com/oppia/oppia/blob/640cf5aff24da4df8e549f4d79b9b704ba74f213/scripts/linters/js_ts_linter.py#L35), the path to the esprima library has been explicitly added just the way I've added it here which is why I thought this was the norm."", 'comment_created': datetime.datetime(2020, 6, 21, 21, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443259043, 'comment_body': ""> I thought we were planning to validate the asciimath, not the latex.\r\n\r\nCurrently the input is stored in the form of latex which is why we need to convert it before validating it. Also, when we perform the actual upgrade, we would have to replace the latex string with the text format to maintain consistency.\r\n\r\n> Also, is this library meant to be a permanent addition?\r\n\r\nNo. Once the upgradation of the old explorations has been done successfully, we can remove this from the codebase.\r\n\r\n> What is the precise definition of the format of the text output of latex2text? Is it asciimath? If so, could you point me to the docs which state that? If not, then wouldn't this mean that there is a mismatch?\r\n\r\nThe [documentation](https://pylatexenc.readthedocs.io/en/latest/latex2text/) doesn't mention the exact format of the text output with the exact grammar; but I've played around with this locally and it seems to convert the latex syntax into human readable string. So things like `\\frac{x}{y}` turns into `x/y` and so on. Note that there is no tight requirement for having asciimath as long as it is in a human-readable form. The reason for choosing asciimath was that it was the closest to a human-readable form that guppy outputted in,"", 'comment_created': datetime.datetime(2020, 6, 21, 21, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443262605, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 21, 22, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443262610, 'comment_body': ""That makes sense. I've set the limit for valid explorations to 200."", 'comment_created': datetime.datetime(2020, 6, 21, 22, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443273438, 'comment_body': ""The lib I mentioned appears to be used in exactly one place (core/controllers/voice_artist.py) and, as far as I can tell, does not require any addition of paths or usage of linter disables. Could you please clarify what you are looking at?\r\n\r\nStuff in the scripts/ folder has different rules because it is run using cmdline, so don't take that as a basis for what you should do with third-party libs in the main codebase."", 'comment_created': datetime.datetime(2020, 6, 22, 0, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443273602, 'comment_body': ""I'm afraid I don't follow. A MathExpression has an ascii property and a latex property (look at the definition of the object in extensions/objects). If I understand correctly, the former is supposed to be in asciimath. So why don't you just validate that and avoid latex conversion altogether?\r\n"", 'comment_created': datetime.datetime(2020, 6, 22, 0, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443273916, 'comment_body': ""Why are you storing this on the class? Just declare local vars.\r\n\r\nAlso I feel like this completely misses the point of mapreduce jobs. Please read up a bit more on how these work and look at other examples in the codebase. Any combination of data between individual map threads should be done in reduce(). The whole point of MR is so that things can run on a distributed system so don't assume that the same running instance is processing all of the models. In the map() phase you'll still need to yield everything, let reduce() sort out the combination / filtering / etc."", 'comment_created': datetime.datetime(2020, 6, 22, 0, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443321354, 'comment_body': ""Ah, I understand what the confusion is. The thing is, the expected answer in this interaction is indeed in the form of an object that contains both, latex as well as asciimath. But, this is only for the learner's answer. The creator's input is in Unicode because while creating an exploration with this interaction, the creator gets a normal text input box instead of the guppy editor. And obviously, the text input cannot output both latex as well as asciimath. Here, we are just expecting the creator to enter a correctly formatted latex string without any validations to check if the string entered is correctly formatted. I'm not sure what the thought process was behind not using the guppy editor in the creator's view as well, but because of this, we don't have the asciimath format of the creator's input, which is what this job validates. Does that clear things up?"", 'comment_created': datetime.datetime(2020, 6, 22, 5, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443326561, 'comment_body': ""I've fixed this now."", 'comment_created': datetime.datetime(2020, 6, 22, 5, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443326597, 'comment_body': ""Oh, I got confused. I've localized the variable now, thanks!"", 'comment_created': datetime.datetime(2020, 6, 22, 5, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443356456, 'comment_body': 'Thanks. Could you please explain the earlier sentence about ""The lib you\'ve mentioned has done this in multiple places that it\'s being used in."" -- what happened there?', 'comment_created': datetime.datetime(2020, 6, 22, 7, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443357032, 'comment_body': ""Yes, this makes sense, thanks for the clear explanation. Just to check -- the new interactions will be using guppy input, and the stored format will be math expression input with both ascii and latex fields, right? (And we'll be migrating from the old unicodestring to the new mathexpression format?) If so, all that sounds good.\r\n\r\n(I'm not sure why the unicode editor was used originally, but I agree that it's definitely suboptimal.)"", 'comment_created': datetime.datetime(2020, 6, 22, 7, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443357316, 'comment_body': 'Why are you putting this here? Put it in the usual place, similar to all other third-party libs.\r\n\r\nOPPIA_TOOLS stuff does not get uploaded to production.', 'comment_created': datetime.datetime(2020, 6, 22, 7, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443357451, 'comment_body': ""I don't know what this means. Please pick a clearer name."", 'comment_created': datetime.datetime(2020, 6, 22, 7, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443358017, 'comment_body': ""Normally, third-party stuff comes after our internal stuff -- see the mutagen example again. Does pylint require you to place this here? If so, that's a bit odd and you should talk to @Hudda."", 'comment_created': datetime.datetime(2020, 6, 22, 7, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443358145, 'comment_body': 'Add space before (', 'comment_created': datetime.datetime(2020, 6, 22, 7, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443358591, 'comment_body': ""You aren't going to reach this limit in a single exploration. The idea was to cap the output, so the limit should be applied in the reduce() step.\r\n\r\nFor invalid stuff, presumably you will want to include more debug info so that the issues can be fixed manually if necessary. E.g. the exp ID and some info about where the problematic expression was found."", 'comment_created': datetime.datetime(2020, 6, 22, 7, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443420896, 'comment_body': ""Ah, I saw the path being inserted in multiple files like `appengine_config.py`, `gae_suite.py`, `run_backend_tests.py`, and `pre_commit_linter.py`. I thought if I were to just add the path in this file, I wouldn't have to add it to multiple places like that. But I suppose that is more consistent, which is why I've added it to those files instead now."", 'comment_created': datetime.datetime(2020, 6, 22, 9, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443422507, 'comment_body': ""Yes, the new interactions will all use guppy for the learner and the creator's views. The answer will be stored as `AlgebraicExpression`, `MathEquation`, or `NumericExpression`. But only asciimath format from the guppy editor will be stored since we don't need latex. And yes, all the old latex input strings will be converted to ascii and will be stored in the new format."", 'comment_created': datetime.datetime(2020, 6, 22, 9, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443437722, 'comment_body': 'OK, that sounds good, thanks.\r\n\r\nJust to check, would it be possible to convert from asciimath to latex, if we ever wanted to do so? (If so, how?)', 'comment_created': datetime.datetime(2020, 6, 22, 9, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443454617, 'comment_body': 'Yes, pylatexenc also has a reversed functionality to convert text to latex. Also, if we ever need latex in the frontend, nerdamer has functionality to convert the expression/equation to latex.', 'comment_created': datetime.datetime(2020, 6, 22, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443457032, 'comment_body': ""> the limit should be applied in the reduce() step.\r\n\r\n@seanlip Just to confirm, we would then have to use a class variable like I'd done before, right? If I'm not mistaken, static methods (map and reduce) won't be able to access instance variables (if I were to initialize it in the `__init__` method).\r\n\r\nEdit: I just realized this can be done without the static variable as well. Please ignore the above question."", 'comment_created': datetime.datetime(2020, 6, 22, 10, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443512773, 'comment_body': ""@Hudda I'm getting an `Imports are incorrectly sorted` error if I import this third-party lib after the internal imports. Could you PTAL? Thanks!\r\n\r\nEdit: The linter couldn't recognize this as a third party lib -- I had to add this lib to `.isort.cfg` and it's working as expected."", 'comment_created': datetime.datetime(2020, 6, 22, 12, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443528144, 'comment_body': ""I've removed this."", 'comment_created': datetime.datetime(2020, 6, 22, 12, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443528233, 'comment_body': ""I've updated the var name and added a comment."", 'comment_created': datetime.datetime(2020, 6, 22, 12, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443528328, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 22, 12, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443812291, 'comment_body': 'expressions, not explorations', 'comment_created': datetime.datetime(2020, 6, 22, 20, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443812391, 'comment_body': 'Do not abbreviate -- there is ambiguity about exploration vs expression', 'comment_created': datetime.datetime(2020, 6, 22, 20, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443812869, 'comment_body': 'OK, sounds good. Thanks!', 'comment_created': datetime.datetime(2020, 6, 22, 20, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443813365, 'comment_body': ""Put this (and probably the constant above) at the class level. It doesn't need to be exposed to the entire module because it's very specific to one particular job (but its naming makes it sound generic)."", 'comment_created': datetime.datetime(2020, 6, 22, 20, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443824576, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 22, 21, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443824631, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 22, 21, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443824743, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 22, 21, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443826752, 'comment_body': 'I think something is wrong with your setup here. Why are you still installing this in oppia_tools?\r\n\r\nPlease fix this -- I tried running your PR on my local machine and it gave a 500 server error. You can test by checking out a copy of Oppia in a second dir on your local machine and performing a full install from scratch -- make sure the start script results in the page loading without any issues.', 'comment_created': datetime.datetime(2020, 6, 22, 21, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443827083, 'comment_body': 'Wrong dir. I thought I mentioned this in a previous review?', 'comment_created': datetime.datetime(2020, 6, 22, 21, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443827657, 'comment_body': 'Avoid pylint pragmas. You can define a local var with a shorter name, for example.\r\n\r\nIn general please try to really avoid pylint pragmas in your code, going forward. The first thing the reviewer will do is to ask you why you need them in the first place.', 'comment_created': datetime.datetime(2020, 6, 22, 21, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443830264, 'comment_body': ""> I think something is wrong with your setup here. Why are you still installing this in oppia_tools?\r\n\r\nI saw that the other libs which are installed using pip are installed in oppia_tools. I'll change it and add the link in `manifest.json` instead.\r\n\r\n> I tried running your PR on my local machine and it gave a 500 server error.\r\n\r\nIt was giving me a 500 error as well which is why I had to insert the path in a bunch of places. It works for me now, still, I'll double-check it in a fresh copy."", 'comment_created': datetime.datetime(2020, 6, 22, 21, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443832379, 'comment_body': ""Remember: oppia_tools is for stuff that is not uploaded to prod. It's for developer scripts, and stuff that doesn't already exist in App Engine. If you want something to be in prod, then it needs to go in third_party.\r\n\r\nIs the library not on github? You could install from there instead perhaps. "", 'comment_created': datetime.datetime(2020, 6, 22, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443841603, 'comment_body': ""I've moved this from oppia_tools to third_party_libs and I've tested it locally on a fresh copy of the repo."", 'comment_created': datetime.datetime(2020, 6, 22, 21, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443841677, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2020, 6, 22, 21, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443841804, 'comment_body': ""Understood. I've changed it now."", 'comment_created': datetime.datetime(2020, 6, 22, 21, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443866489, 'comment_body': 'Don\'t give it a made-up name. Use something semantic like ""cls"" or current_class. Or, perhaps better:\r\n\r\n```\r\nunicode_to_text_mapping = (\r\n    MathExpressionValidationOneOffJob.UNICODE_TO_TEXT)\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 22, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443866604, 'comment_body': 'Ditto here and elsewhere.', 'comment_created': datetime.datetime(2020, 6, 22, 22, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443965178, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 23, 5, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443965196, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 23, 5, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 443966535, 'comment_body': ""The typical way to handle this sort of thing is to use .encode('utf-8'). You'll see this in existing tests. Why don't you do something like that instead, rather than all this special-casing?"", 'comment_created': datetime.datetime(2020, 6, 23, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 444186220, 'comment_body': ""The purpose of doing this is to replace special characters' unicode values like u221a for sqrt with their string representations. So for instance, `\\sqrt{2}` will get converted to `\\u221a(2)` by pylatexenc. So, after replacing with the corresponding text value, we'll get `sqrt(2)` which is exactly what we want. "", 'comment_created': datetime.datetime(2020, 6, 23, 12, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 444450074, 'comment_body': 'Oh, I see, you need it for is_valid_math_expression().\r\n\r\nOK then can you apply the .encode() thing instead of lines 171-179 below? That is how we typically handle ""out of range"" chars.', 'comment_created': datetime.datetime(2020, 6, 23, 19, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 444464973, 'comment_body': '@seanlip It\'s not only for the validation functions. Even while yielding the result, it is required to not have characters with ordinal values greater than 127. Using `.encode()` gives the following error:\r\n\r\n```\r\nFile ""/home/prayush/Desktop/opensource/oppia/core/domain/exp_jobs_one_off.py"", line 192, in map\r\n    item.id, state_name.encode(\'utf-8\'), rule_input.encode(\'utf-8\')))\r\nUnicodeDecodeError: \'ascii\' codec can\'t decode byte 0xc3 in position 0: ordinal not in range(128)\r\n```', 'comment_created': datetime.datetime(2020, 6, 23, 19, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 444469986, 'comment_body': 'Can you check where the encode() error is happening -- is it in the state name or the rule input?\r\n\r\nWhat is an example of an input that causes this -- can you walk me through a trace of how it goes through the various stages of your map()?', 'comment_created': datetime.datetime(2020, 6, 23, 19, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 444512430, 'comment_body': 'It\'s happening due to the rule input. I\'ll explain this through the example I\'ve added to the tests. Let\'s assume the rule input is `âéîôü` (contains characters that have ordinal values > 127). If these characters are from the ones that we are expecting, like the square root sign or the multiplication dot, then we simply replace them with the corresponding strings (`√` -> `sqrt`) and everything is fine. But, if the input contains characters that we are not expecting, they wouldn\'t get replaced and these ""out of range"" characters would still be present in the rule_input string. So, when we try to perform some operation on this string (during validation) or when they are yielded by the map function, the string gets decoded but due to these ""out of range"" characters, a UnicodeDecodeError is thrown. To avoid this, what I\'ve done is, I\'ve replaced all characters that have ordinal values > 127 with their corresponding ordinal values. This is essentially the same as replacing square root\'s character with `sqrt`, but since we can\'t special-case _all_ possible characters, we just replace them with the ordinal value. So, the string `âéîôü` gets converted to `226 233 238 244 252` which does not contain characters that are out of range and everything works smoothly. Also, note that that particular input is going to be marked as invalid anyways(since it contains unexpected characters) so we can modify it without affecting the validation process.', 'comment_created': datetime.datetime(2020, 6, 23, 21, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 444673899, 'comment_body': ""Tried it out. Still no good, I'm afraid -- the same errors still arise.\r\n\r\nI would encourage you to take a closer look at encode('utf-8'). We've run into unicode issues before and they are often due to the MapReduce pipeline handling strings rather than unicode. It seems surprising to me that you don't need them for this job and you need to roll your own custom implementation. You might want to look at the patterns in other jobs and compare and contrast them to what you are doing here.\r\n\r\nIn general, try to avoid doing custom handcrafted things. Figure out what the output of pylatexenc is (str/unicode/etc.) and encode/decode it as needed using a standard method so that you can have guarantees on the types/encoding of your strings. Feel free to add assert statements/checks within the function to verify those guarantees -- if any of those assertions errors out on a production run, I will let you know.\r\n\r\nAlso, test thoroughly locally with unicode strings in various places. The error may not occur where you think it does. I suspect it's occurring because you're passing unicode chars to the MR framework somehow when it's expecting a string."", 'comment_created': datetime.datetime(2020, 6, 24, 6, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 444893401, 'comment_body': ""Sorry about this, @seanlip. I have removed the customized replacements for out of range characters and used `.encode('utf-8')` instead. I think the errors are occurring because the yielded output is in unicode and as you mentioned, they need to be strings. I've tested the latest changes locally and they do work -- please let me know if there's a specific way that I can test them to ensure that they would work on production.\r\n\r\nI think the reason my previous method did not work is probably because some of the unicode characters might still be present in the string that is being yielded. So, the latest changes ensure that there would be no such problems."", 'comment_created': datetime.datetime(2020, 6, 24, 13, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}]","[{'commit_sha': 'b88baf62eec4b25a19bf3819589ffc194c97c993', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fcb8495b1cbf88893968f78fae1d3722f8d09de', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '549e7d6110dfaddba3cbc1089d2ce2009ddd56e6', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4bf1f2e7593656130a740cbba6521b4b63971bf', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49c19cefbf1302cbe4fa241537d9cc93bc85992b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c9fbee986e5dd3063a3523968e63a55dd9f981', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f58413287949fa233b7e56b5b2ed6b13b1e80b4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5803b8015b8e3acf55010b17c3888bd6b50d2190', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f8ee6d652280a81e9752432ed53a29ca903d7a4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a3783a594018504f0db2a9824504e5cd9ddaf04', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '083935b531e6b2c9ea4cf6544ea1352da623fa1b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21f57bf7db03412e7779ed5662ffa06f0d618648', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a44805373b7b71437f8b2e4f5708dd55b5ffe88', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e59f65cbf969629cf0afaf7370f1062bd01b3948', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c78bf491efa27db20ff39f47c00a3917c1849398', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590e3b800b2fb565e8e218d18618334316f901c3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55155c81085573ed9fc582784999a05131bc5885', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65f37a20370b84ea9b55933e36e20406698bae59', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42e17b3712e7ab0c15791a6fad841c5655060d76', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31ec29324fec4f8e19e4d2055d4f657dc1bb247a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cae7e5c03498e6ddae799e7775b6eb25955b5dc8', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d3a2995db22cefa1551d6545c64f60b66b18341', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06879488358bdd332eb3e1df1622d19ed64cee4e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}]",Prayush Dawda,35144226,,User,,27,,14,47
445384633,Milestone 2.1: Added Numeric Expression Input Interaction.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following: Adds the numeric expression input interaction with 4 rules and e2e tests. 

Here are the screenshots of 5 consecutive successful runs of the e2e tests that are added in this PR:
Pass 1:
![Pass1](https://user-images.githubusercontent.com/35144226/86935832-e7e54080-c15a-11ea-821f-95de6a36508e.png)
Pass 2:
![Pass2](https://user-images.githubusercontent.com/35144226/86935828-e74caa00-c15a-11ea-9d19-5249db0ce814.png)
Pass 3:
![Pass3](https://user-images.githubusercontent.com/35144226/86935827-e6b41380-c15a-11ea-8344-5b89cfb01d59.png)
Pass 4:
![Pass4](https://user-images.githubusercontent.com/35144226/86935825-e61b7d00-c15a-11ea-8397-bc9df8480410.png)
Pass 5:
![Pass5](https://user-images.githubusercontent.com/35144226/86935817-e3b92300-c15a-11ea-9286-25e864bc69d3.png)

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9822,https://api.github.com/repos/oppia/oppia/pulls/9822,https://github.com/oppia/oppia/pull/9822,closed,1881,110,53,36,9,51,0,1,[],2020-07-07 12:36:53+00:00,2020-07-15 22:45:08+00:00,727695.0,"8 days, 10:08:15","[{'comment_id': 450832133, 'comment_body': 'Along with this please also add this def this `IInteractionAnswer`', 'comment_created': datetime.datetime(2020, 7, 7, 12, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 450832425, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2020, 7, 7, 12, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 451070190, 'comment_body': ""Instead of the pragma,  can't you split this with `+`?"", 'comment_created': datetime.datetime(2020, 7, 7, 18, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 451071241, 'comment_body': ""Isn't the new line 872 (old 869) also `MathEquationInputValidationService`? There seems to be a bug here."", 'comment_created': datetime.datetime(2020, 7, 7, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 451073233, 'comment_body': ""What would happen to something like `a+b*2`? Since splitting it as `a+b` and `2` doesn't seem right."", 'comment_created': datetime.datetime(2020, 7, 7, 18, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 451074723, 'comment_body': ""Can't this be done with a `replace(' ', '')`?"", 'comment_created': datetime.datetime(2020, 7, 7, 18, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 451078082, 'comment_body': ""Hmm, so you mean '-' and '/' are the terms that need modification, right? I think it'd be better if you explicitly mention that, like have 2 variables for delimiters instead of a list with appropriate names, since if at any point someone reverses that list, then this would be hard to debug."", 'comment_created': datetime.datetime(2020, 7, 7, 18, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 451079451, 'comment_body': 'It should be an error if this does occur, right? Since that means an expression is starting with a delimiter or  something like that.', 'comment_created': datetime.datetime(2020, 7, 7, 19, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 451080239, 'comment_body': ""Also, isn't it better to check this initially (inside the higher if block) and finish up with `currentTerm` in this iteration itself? Since, rn you are waiting for the next iteration to do modifications, right?\r\nYou can also not use a separate `shouldModifyTerm` flag also."", 'comment_created': datetime.datetime(2020, 7, 7, 19, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 451080426, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 7, 19, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 451080454, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 7, 19, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 451081311, 'comment_body': 'With my comment above, this would also not be needed, right?', 'comment_created': datetime.datetime(2020, 7, 7, 19, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 451082563, 'comment_body': 'Why not addition/subtraction also? Like, terms matching `2+3` and `3+2` should also be there, right?', 'comment_created': datetime.datetime(2020, 7, 7, 19, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 451083734, 'comment_body': ""Wait, why are you modifying the list that is being iterated on? Isn't there a better way to do this?\r\nMaybe with a separate flag variable and if any term has no matches, then break out of all loops?"", 'comment_created': datetime.datetime(2020, 7, 7, 19, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 451084741, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 7, 7, 19, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 451085803, 'comment_body': 'How are you getting a list of terms from a term? Is term1 supposed to represent something else?', 'comment_created': datetime.datetime(2020, 7, 7, 19, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 451086867, 'comment_body': ""Can't you just call `termsMatch` with the 2 lists here instead of  on a term by term basis?"", 'comment_created': datetime.datetime(2020, 7, 7, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 451088258, 'comment_body': 'Rename variable?', 'comment_created': datetime.datetime(2020, 7, 7, 19, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 451442668, 'comment_body': ""That wouldn't happen since split by multiplication is to be done after split by addition. So if an expression is `a+b*2`, it would be first split into `[a, b*2]` and then to match individual terms we will split each term by multiplication and division so `b*2` will be split into `[b, 2]`. If the expression was `(a+b)*2` then it would be considered as a single term and while matching, it would be split into `[a+b, 2]`. Does that make things clear?"", 'comment_created': datetime.datetime(2020, 7, 8, 10, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 451442701, 'comment_body': 'No, that is not possible while importing like this. That can be done when you use require, but not with this. This pattern is present in a lot of other places as well.', 'comment_created': datetime.datetime(2020, 7, 8, 10, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 451450756, 'comment_body': 'Not necessarily. An expression could start with a + or - sign. Also, note that any expression that these functions operate on is guaranteed to be syntactically valid since it would have to pass through the frontend and backend validations before they can be stored for the rules service to operate upon.', 'comment_created': datetime.datetime(2020, 7, 8, 10, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 451458523, 'comment_body': 'Basically, this is how the entire process pans out:\r\n1. The given expression is split into ""terms"". By [definition](https://simple.wikipedia.org/wiki/Term_(mathematics)), a term is a part of the expression split by + or - signs.\r\n2. Now we will try to match terms between the learner\'s answer and the creator\'s input. These terms may internally contain * and / signs. They may also contain + or - signs but in that case, they would have to be wrapped around parens otherwise they would\'ve been split during step 1. To match terms, we split the term into separate parts by splitting by * and /, and then performing the part match just like the term match. The split based on * and / is done in order to be able to match `3*4` with `4*3` (considering the fact that multiplication is commutative).\r\n\r\nFor eg.  consider the following scenario:\r\n_Creator\'s input_: `3 + 4*5`.\r\n_Learner\'s answer_: `5*4 + 3`.\r\n**Step 1**: We split by +/- and get a list of _terms_ `[3, 4*5]` and `[5*4, 3]`.\r\n**Step 2**: We try to match terms between them. For `4*5` and `5*4`, they get split by * or / into `[4, 5]` and `[5, 4]`. Then these lists of _parts_ gets matched just like the list of _terms_ (trying to match each term from one list with another. Note that here, they would just be checked for mathematical equivalence). And then obviously the 3s would be matched with each other directly.\r\n\r\nHope that makes things clearer. Please let me know if there are any more ambiguities. \r\n', 'comment_created': datetime.datetime(2020, 7, 8, 11, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 451460292, 'comment_body': ""Because we need a 1-1 mapping between terms. So every time 2 terms are matched,  they are both removed from their respective lists so that they don't get matched with any other term. Otherwise, if multiple terms are matched with a single term, expressions like `3` and `3+3` would match with each other, since both 3s in the second expression would have matched with the same term from the first expression."", 'comment_created': datetime.datetime(2020, 7, 8, 11, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 451460423, 'comment_body': 'Addressed above.', 'comment_created': datetime.datetime(2020, 7, 8, 11, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 451487456, 'comment_body': ""Ah yes, that block is repeated. I've fixed it now."", 'comment_created': datetime.datetime(2020, 7, 8, 12, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 451487508, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 8, 12, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 451487550, 'comment_body': ""> Hmm, so you mean '-' and '/' are the terms that need modification, right? I think it'd be better if you explicitly mention that, like have 2 variables for delimiters instead of a list with appropriate names, since if at any point someone reverses that list, then this would be hard to debug.\r\n\r\nYes. Done.\r\n\r\n> Also, isn't it better to check this initially (inside the higher if block) and finish up with currentTerm in this iteration itself? Since, rn you are waiting for the next iteration to do modifications, right?\r\nYou can also not use a separate shouldModifyTerm flag also.\r\n\r\nActually, the `shouldModifyTerm` is supposed to indicate if we should be modifying the next term. For instance, say the expression is `3/10`, then when the `/` sign is encountered, the `shouldModifyTerm` flag is set to true, thereby indicating that the next term we get is supposed to be modified (add - sign or raise to a power of -1). This is why we need a flag and can't just modify the current term because we won't know if we need to modify the current term without using a flag.\r\nTo avoid this confusion, I've renamed the flag from `shouldModifyTerm` to `shouldModifyNextTerm`.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 8, 12, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 451487579, 'comment_body': 'Addressed above.', 'comment_created': datetime.datetime(2020, 7, 8, 12, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 451487637, 'comment_body': ""As explained above, when splitting a term by * or /, we would get a list of parts. I've renamed this to partsList instead to further signify the distinction."", 'comment_created': datetime.datetime(2020, 7, 8, 12, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 451487659, 'comment_body': 'No, because termsMatch is expecting terms which it will split into parts (by * and /). We still need to split the main expression into terms (by + and -).', 'comment_created': datetime.datetime(2020, 7, 8, 12, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 451487687, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 8, 12, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452861172, 'comment_body': 'Ah ok, yup it does.', 'comment_created': datetime.datetime(2020, 7, 10, 13, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 452861678, 'comment_body': ""`add the '-' sign or raise` ?"", 'comment_created': datetime.datetime(2020, 7, 10, 13, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 452862454, 'comment_body': 'Just to check, tests are there for the various ways in which this can occur, right?', 'comment_created': datetime.datetime(2020, 7, 10, 14, 0, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 452862878, 'comment_body': 'Ah ok, yeah.', 'comment_created': datetime.datetime(2020, 7, 10, 14, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 452864547, 'comment_body': 'The  input to this should be terms  split by addition/subtraction, right? Add that as a comment.', 'comment_created': datetime.datetime(2020, 7, 10, 14, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 452928725, 'comment_body': 'Yeah, done.', 'comment_created': datetime.datetime(2020, 7, 10, 15, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452928758, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2020, 7, 10, 15, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452928798, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 10, 15, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453055080, 'comment_body': ""Can you add this comment outside the function just above it, since this is related to something that calls it and not about something that happens inside it.\r\nAlso one doubt, what if we pass `(2+3)*(4+5)` and `(4+5)*(2+3)`? This is a valid input as we can't split by addition here. So, when you compare by nerdamer, it would be comparing (2+3) as a whole, would that work?"", 'comment_created': datetime.datetime(2020, 7, 10, 20, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 453056943, 'comment_body': 'I saw a test with `x*(y+z)`. Can you maybe add tests with multiple of these bracketed terms multiplied together? ', 'comment_created': datetime.datetime(2020, 7, 10, 20, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 453209750, 'comment_body': "">  Can you add this comment outside the function just above it, since this is related to something that calls it and not about something that happens inside it.\r\n\r\nDone.\r\n\r\n> Also one doubt, what if we pass (2+3)*(4+5) and (4+5)*(2+3)? This is a valid input as we can't split by addition here. So, when you compare by nerdamer, it would be comparing (2+3) as a whole, would that work?\r\n\r\nYes  that  is technically a single term, which is why we would  be  comparing `(2+3)` as a whole, which wouldn't be a problem.\r\n\r\n> I saw a test with x*(y+z). Can you maybe add tests with multiple of these bracketed terms multiplied together?\r\n\r\nDone."", 'comment_created': datetime.datetime(2020, 7, 11, 16, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453335639, 'comment_body': 'Does this work for cases like `sqrt(5)log(2)` also?', 'comment_created': datetime.datetime(2020, 7, 12, 16, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 453336180, 'comment_body': ""Yes, I've added test cases for the same here:\r\nhttps://github.com/oppia/oppia/blob/eb3b6056c8133d1e88855b8ef186a217d2a0c041/core/templates/services/math-interactions.service.spec.ts#L270-L275"", 'comment_created': datetime.datetime(2020, 7, 12, 16, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453336312, 'comment_body': ""Instead of removing multiplication signs in the service, can you do that in the directive for editor and viewer itself? Since that's where `replaceAbsSymbolWithText` is also done, right? Basically answers shouldn't be manipulated in the service, everything should be more or less valid (except for the tests here) before coming in, otherwise  whenever you add a new function here, this has  to be added there as well."", 'comment_created': datetime.datetime(2020, 7, 12, 16, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 453336495, 'comment_body': 'Ah ok!', 'comment_created': datetime.datetime(2020, 7, 12, 16, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 453351902, 'comment_body': ""I understand, but the thing is, unlike the `replaceAbsSymbolWithText` method, the `insertMultiplicationSigns` method requires the input to the method to represent a valid expression since it passes in the input to nerdamer, so if it's invalid, nerdamer will throw an error.\r\nAlso, we're not exactly manipulating the input in the rules service, we are just temporarily re-formatting the given input so that it conforms to our validations. For eg. `5sqrt(3)` is not syntactically invalid, it is just not in the format that is compatible with the validators we've written, which is why we need to temporarily reformat it.\r\nDoes that seem reasonable enough, @aks681 ?    "", 'comment_created': datetime.datetime(2020, 7, 12, 19, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453371688, 'comment_body': ""@aks681 \r\nUpdate: I've made the changes you asked for as per discussion.\r\n"", 'comment_created': datetime.datetime(2020, 7, 12, 22, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 454997216, 'comment_body': 'I don\'t get it -- why are you doing this? You should just be writing tests to assert that usage of those symbols results in an invalid expression/equation, not trying to accept expressions/equations with it. (As you say, it isn\'t an expected input from the frontend, right?)\r\n\r\nThe current implementation is wrong anyway because it does not handle nesting properly, e.g. |1 - |3-5| + 4|. This is why it is important to define a fixed schema _and stick to it_. We have also talked before about not doing ad hoc parsing, which this is an example of.\r\n\r\nAlso, as a meta-comment -- please do not do this sort of thing, where a comment is given, you do something completely different (without stating that at all), and then say ""Done"". That\'s ... just not the way to go.', 'comment_created': datetime.datetime(2020, 7, 15, 11, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455048679, 'comment_body': '> I don\'t get it -- why are you doing this? You should just be writing tests to assert that usage of those symbols results in an invalid expression/equation, not trying to accept expressions/equations with it. (As you say, it isn\'t an expected input from the frontend, right?)\r\n\r\nOh, I misunderstood. I\'ll remove this and just add the check then.\r\n\r\n> The current implementation is wrong anyway because it does not handle nesting properly, e.g. |1 - |3-5| + 4|. This is why it is important to define a fixed schema and stick to it. We have also talked before about not doing ad hoc parsing, which this is an example of.\r\n\r\nHm, that\'s interesting. Yeah, I didn\'t think about nested absolute signs, but how do we even handle this? I mean since there is no distinction between the opening and closing parens, how would we even pair something like this? For instance, in `||3+4|-2|a|+3|`, there can be two syntactically valid transformations: `((3+4)-2(a)+3)` and `((3+4)-2)a(+3)`. How would we decide which one\'s the intended one? Also, just a general question -- would we really see a lot of examples with nested abs signs in practice?\r\n\r\n> Also, as a meta-comment -- please do not do this sort of thing, where a comment is given, you do something completely different (without stating that at all), and then say ""Done"". That\'s ... just not the way to go.\r\n\r\nSorry about that, I\'ll take care from now on :)', 'comment_created': datetime.datetime(2020, 7, 15, 13, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 455407216, 'comment_body': '> Hm, that\'s interesting. Yeah, I didn\'t think about nested absolute signs, but how do we even handle this? I mean since there is no distinction between the opening and closing parens, how would we even pair something like this? For instance, in ||3+4|-2|a|+3|, there can be two syntactically valid transformations: ((3+4)-2(a)+3) and ((3+4)-2)a(+3). How would we decide which one\'s the intended one? \r\n\r\nThere are various ways, but the easiest is to define validity such that the accepted valid formats are always unambiguous. This is why it\'s always important to define ""validity"" clearly for something like this, and for any parsing problem that you do -- you\'ll probably need some tweaks to that definition to avoid ambiguity.\r\n\r\n> Also, just a general question -- would we really see a lot of examples with nested abs signs in practice?\r\n\r\nI don\'t know, but that\'s irrelevant. They do exist and your parser needs to be able to process 100% of inputs. (I have seen them in math questions before, if that is what you\'re asking.)', 'comment_created': datetime.datetime(2020, 7, 15, 22, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}]","[{'commit_sha': 'ddfba83e866f1e6a3e000f490931e2024d8292fb', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60c3c03a3606c2a4fafee4048979c0a9766d5862', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15c4c9ec0f48c299af77bca07a56cce77d25667c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dee1516d393618dd7fe145f04d0d180d50e37b6', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5879a24bc8c79e8a15481136e4c1de98a92a154b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29acdd836df70771099227e519d19d96c6af4896', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3cad61cdd63443563a03d340f4eb56b5a186cb4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3402fedb5dcd8190cf79af5e0b7871099201b29e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a69926a8f74a662d423fc440896cbff57dccb1b6', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fce60dd7aea6d694da5a1a1fd29d88a9e3f374d6', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd84b167b588dac7450d61dec42646d474c8d159', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ea744d650fd94520dfcffb1921c69c15b122d75', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e39ac3d1d9d514825365220ce94b87c4020c8a44', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fdda20bbc947bebd43cd969012194be4f1f6d4e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8884d777e3b8c6fd76ef9e6b5d2d24033469d9d5', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a61251ab419845df38140b3a9907a27aca339044', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceb959753db23928e8e00c6c186699739f077d1e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9130348f55802c58cd15634b36dc0fe25b611cc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb3b6056c8133d1e88855b8ef186a217d2a0c041', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4f6251af87b02ab2bf27595fe038813162d3413', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54edef38616f21f1a3d076b5d20bffae4fd24527', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f271a0811ab6737b67a52606ee99caeec8cb69f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72244810e4d6246351448a286ba0cc867457a619', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43351d34f04a0873d73aa5038ca34b9626b31091', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38d5a68fbaf426094f73508e73d510e4ce1528a5', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13d516547ef5bfe94f0bd88c54b686eb412deb1b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04ba4fe42219addac9d4df8ff358f1a19fe8da93', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e706e0c2dc8f8b9ce88a59b1b373df4f02bd43c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86dcedcdd3253a458ac0f842b14995b827e872a3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5035d9bf2249c6d12c454e8fb2b26f2946f33b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff8fb9af4dc05f3daad19dd774af6fbe0114b8a3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14916f1b7746122970b268e67df676fec0c34cb2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdc883098fe9b79aac35f56e4680a45979ae482a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3d7a20677b124f1710d98918672578706ac429a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f88ecdc02d1b004b2eeb1efec87d323e2d582b8e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc6136649afe4977eddc2365b8ee134f3bb6eff2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}]",Prayush Dawda,35144226,,User,,27,,14,47
447114103,Milestone 2.2: Upgrade explorations that use the old math interaction.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following:
Adds a state migration that upgrades all explorations that use the old math interaction.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9863,https://api.github.com/repos/oppia/oppia/pulls/9863,https://github.com/oppia/oppia/pull/9863,closed,2163,1278,51,86,35,109,1,2,[{'name': 'PR: Affects datastore layer'}],2020-07-09 21:57:05+00:00,2020-07-28 21:36:27+00:00,1640362.0,"18 days, 23:39:22","[{'comment_id': 452608612, 'comment_body': '""Upgradation"" is not a word. I think you want ""Upgrade"".', 'comment_created': datetime.datetime(2020, 7, 10, 3, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 452610599, 'comment_body': 'What will this look like, visually -- could you show a screenshot?', 'comment_created': datetime.datetime(2020, 7, 10, 4, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 452610733, 'comment_body': 'What are you going to do to ensure that your dict is comprehensive and there are no remaining unicode chars that have not been handled?', 'comment_created': datetime.datetime(2020, 7, 10, 4, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 452611016, 'comment_body': 'Probably should make this private. (In general make things private where possible.)', 'comment_created': datetime.datetime(2020, 7, 10, 4, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 452611282, 'comment_body': ""Just a thought -- would it be better to have is_valid_algebraic_expression() and is_valid_numeric_expression() instead? When I read is_valid_math_expression() it doesn't automatically suggest an algebraic expression."", 'comment_created': datetime.datetime(2020, 7, 10, 4, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 452611357, 'comment_body': 'Same thing (possibly) if this is checking for algebraic-ness too.', 'comment_created': datetime.datetime(2020, 7, 10, 4, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 452611400, 'comment_body': 'If you use a string more than once, always make it a named constant.', 'comment_created': datetime.datetime(2020, 7, 10, 4, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 452611457, 'comment_body': '""upgradation"" is not a word. Perhaps ""upgrade"".\r\n\r\nDitto elsewhere.', 'comment_created': datetime.datetime(2020, 7, 10, 4, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 452611568, 'comment_body': 'Perhaps you should say which types.\r\n\r\nAlso, > 1 does not imply 2.', 'comment_created': datetime.datetime(2020, 7, 10, 4, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 452612736, 'comment_body': 'Probably OppiaMigrationBot, not admin.\r\n\r\nAlso, again, never hardcode strings that are used more than once in the codebase, please. Use named constants. There are many other examples of this in the PR -- please fix this.', 'comment_created': datetime.datetime(2020, 7, 10, 4, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 452612841, 'comment_body': ""You should set this to a valid value or at least validate at the end that it is not ''."", 'comment_created': datetime.datetime(2020, 7, 10, 4, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 452613218, 'comment_body': 'You still need to raise/yield/etc. if an error is discovered, and handle that case safely, providing enough information to the admin such that they can take manual measures if needed or re-run the job again.\r\n\r\nDo not leave anything to chance in a migration. Mistakes happen, so program defensively and do not assume anything.', 'comment_created': datetime.datetime(2020, 7, 10, 4, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 452613357, 'comment_body': 'No changes to customization args?\r\n\r\nAlso, when an interaction is changed normally through the UI, is this the list of changes that typically results? Please explain in detail what steps you took to verify this.', 'comment_created': datetime.datetime(2020, 7, 10, 4, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 452613814, 'comment_body': 'Write more tests. Cover all corner and unexpected cases. Ensure that the job is idempotent if something goes wrong midway.', 'comment_created': datetime.datetime(2020, 7, 10, 4, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 452749754, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 10, 10, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452749799, 'comment_body': ""Oh, I just realized this should be `(sin(x))^2` instead. I've corrected it. Also, in the editor, this is how it would look like:\r\n![mathEditor](https://user-images.githubusercontent.com/35144226/87132119-0c543080-c2b3-11ea-8d37-e80d30eea569.png)\r\n"", 'comment_created': datetime.datetime(2020, 7, 10, 10, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452749841, 'comment_body': ""I have added the unicode characters that we support in the mapping dict and they will be replaced with their string equivalents. For the remaining ones, since they are not supported, they won't be replaced and will render the input as invalid, which is the expected behavior."", 'comment_created': datetime.datetime(2020, 7, 10, 10, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452749861, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 10, 10, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452749941, 'comment_body': 'That was the original plan, but the thing is since both the functions have a lot of overlapping code, I chose to refactor them into a single function with a parameter to specify the type of expression. I understand that seeing `is_valid_math_expression` doesn\'t imply ""algebraicness"" which is why I\'ve removed the default parameter so that we need to explicitly mention upon each call whether the expression is algebraic/numeric. ', 'comment_created': datetime.datetime(2020, 7, 10, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452749970, 'comment_body': 'Addressed above.', 'comment_created': datetime.datetime(2020, 7, 10, 10, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452750219, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 10, 10, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452750390, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 10, 10, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452750499, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 10, 10, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452750615, 'comment_body': 'Understood, done.', 'comment_created': datetime.datetime(2020, 7, 10, 10, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452750650, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 10, 10, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452750688, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 10, 10, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452750778, 'comment_body': ""> No changes to customization args?\r\n\r\nThere are no customization args in the old interaction or in the new one so that won't require changes. \r\n\r\n>  Also, when an interaction is changed normally through the UI, is this the list of changes that typically results? Please explain in detail what steps you took to verify this.\r\n\r\nYes. So, I created two explorations, one with the old interaction and the other with the new one. I then downloaded the explorations in the yaml format and I saw that these are the attributes that are different in both interactions. Also, I have tested this upgrade job locally and it  works as expected.  "", 'comment_created': datetime.datetime(2020, 7, 10, 10, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 452750814, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 10, 10, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453076481, 'comment_body': 'Why  is this limit present?', 'comment_created': datetime.datetime(2020, 7, 10, 21, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 453078055, 'comment_body': 'It also upgrades the exploration as well, right?', 'comment_created': datetime.datetime(2020, 7, 10, 21, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 453078911, 'comment_body': ""if new_interaction_id does become '', then that means, it didn't fall into any one case above, right? Handle that as well, by yielding another message?"", 'comment_created': datetime.datetime(2020, 7, 10, 21, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 453123699, 'comment_body': '>> Also, when an interaction is changed normally through the UI, is this the list of changes that typically results? Please explain in detail what steps you took to verify this.\r\n\r\n> Yes. So, I created two explorations, one with the old interaction and the other with the new one. I then downloaded the explorations in the yaml format and I saw that these are the attributes that are different in both interactions. Also, I have tested this upgrade job locally and it works as expected.\r\n\r\nThis is not a sufficient test. Please find a way to introspect the actual list of changes that is created when you do similar operations through the editor UI. Verify that that list of changes matches the changelist that you have here, and add that evidence to this comment.', 'comment_created': datetime.datetime(2020, 7, 10, 23, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453123925, 'comment_body': 'Please try to avoid using abbreviations when naming things.\r\n\r\nIn addition, each of these should be prefixed by a ""type"". For example we might have _STATUS_OPEN, _STATUS_CLOSED, _STATUS_IGNORED, etc. for feedback threads. Do something similar here so that it\'s clear that all these belong to the same ""conceptual group"". Also do this in general when naming groups of constants.', 'comment_created': datetime.datetime(2020, 7, 10, 23, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453124150, 'comment_body': ""> Oh, I just realized this should be `(sin(x))^2` instead. I've corrected it. Also, in the editor, this is how it would look like:\r\n![mathEditor](https://user-images.githubusercontent.com/35144226/87132119-0c543080-c2b3-11ea-8d37-e80d30eea569.png)\r\n\r\nOK, thanks. The more usual way to type/display this is:\r\n\r\n![Screenshot from 2020-07-10 16-48-48](https://user-images.githubusercontent.com/10575562/87211201-3ca8c880-c2cd-11ea-9960-482e19f1af07.png)\r\n\r\nHow would a user do that?"", 'comment_created': datetime.datetime(2020, 7, 10, 23, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453124474, 'comment_body': 'Where does this ""render the input as invalid"" happen in the code? ', 'comment_created': datetime.datetime(2020, 7, 10, 23, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453124816, 'comment_body': '> That was the original plan, but the thing is since both the functions have a lot of overlapping code, I chose to refactor them into a single function with a parameter to specify the type of expression. I understand that seeing is_valid_math_expression doesn\'t imply ""algebraicness"" which is why I\'ve removed the default parameter so that we need to explicitly mention upon each call whether the expression is algebraic/numeric.\r\n\r\nOh, then this is what you do. Still have is_valid_algebraic_math_expression() etc. as your ""public API"". Behind the scenes, these functions call a private _is_valid_math_expression(True/False).\r\n\r\nThat way, you still reuse code while keeping this clear to clients.', 'comment_created': datetime.datetime(2020, 7, 10, 23, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453125010, 'comment_body': ""No hardcoding. I've said this already.\r\n\r\nThis is already defined in the codebase as an existing named constant. Use that constant."", 'comment_created': datetime.datetime(2020, 7, 10, 23, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453125356, 'comment_body': 'Not done. There needs to be an ""else"" clause.', 'comment_created': datetime.datetime(2020, 7, 10, 23, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453125373, 'comment_body': 'Not done. I think there might be some confusion about what I meant by ""validate"". What I\'m trying to say is that you should fail visibly somehow if this is still \'\' at the end, because presumably that is a non-expected case. Currently that case seems to be just swept under the rug.\r\n\r\nAlso why is this \'\'? Shouldn\'t it be None?', 'comment_created': datetime.datetime(2020, 7, 10, 23, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453125699, 'comment_body': 'Where is the test for idempotence? Simulate the case where a migration goes wrong midway, and then the migration is re-run. Verify that the result of this is the same as the migration running fully the first time.', 'comment_created': datetime.datetime(2020, 7, 10, 23, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453331909, 'comment_body': 'While tokenizing the expression, the following regex would skip the invalid character and the check following these lines would raise the `Invalid token` exception.\r\nhttps://github.com/oppia/oppia/blob/d1544d8f74b9e399e3b5aefe940b07cab1e7d974/core/domain/expression_parser.py#L132-L151', 'comment_created': datetime.datetime(2020, 7, 12, 15, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453332255, 'comment_body': 'The thing is, it is not possible to change the type of interaction through the editor UI. The only way to replicate this behavior through the UI is to delete the state and create a new one with a different interaction. I did that and the changes are as expected.\r\n![changelist](https://user-images.githubusercontent.com/35144226/87243890-5249f980-c457-11ea-9b7f-a5cd1e4396d2.gif)\r\n', 'comment_created': datetime.datetime(2020, 7, 12, 15, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453332276, 'comment_body': 'Unfortunately, it is not possible to type/display `sin^2x` like this in the guppy editor.', 'comment_created': datetime.datetime(2020, 7, 12, 15, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453334868, 'comment_body': '> Not done. I think there might be some confusion about what I meant by ""validate"". What I\'m trying to say is that you should fail visibly somehow if this is still \'\' at the end, because presumably that is a non-expected case. Currently that case seems to be just swept under the rug.\r\n\r\nUnderstood, I\'ve added an explicit ERROR message for that case.\r\n\r\n>  Also why is this \'\'? Shouldn\'t it be None?\r\n\r\nI\'ve changed the code so that it is consistent in both the jobs and easier to follow, which is why this is not required.', 'comment_created': datetime.datetime(2020, 7, 12, 16, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453334876, 'comment_body': ""I've handled this now. If any of the inputs are categorized as Invalid, an error will be generated and that state won't be upgraded."", 'comment_created': datetime.datetime(2020, 7, 12, 16, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453334889, 'comment_body': ""I've modified the `test_explorations_with_invalid_inputs_are_not_upgraded` method to replicate the behavio that you've mentioned. Does that look alright?\r\n"", 'comment_created': datetime.datetime(2020, 7, 12, 16, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453334897, 'comment_body': ""This limits the number of valid inputs of each type that are yielded by the job. We're displaying the valid outputs only for confirming that they are correct in general. We don't need to closely inspect each of the valid inputs, which is why we aren't displaying all of them. I've updated the comment here to make things clearer. "", 'comment_created': datetime.datetime(2020, 7, 12, 16, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453334904, 'comment_body': ""Ah yes, I've updated the comment."", 'comment_created': datetime.datetime(2020, 7, 12, 16, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453334912, 'comment_body': ""I've changed the code so that it is consistent in both the jobs and easier to follow, which is why this is not required."", 'comment_created': datetime.datetime(2020, 7, 12, 16, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453334922, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 12, 16, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453334936, 'comment_body': ""Ah, that makes sense. I've changed it now, thanks!"", 'comment_created': datetime.datetime(2020, 7, 12, 16, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453334949, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 12, 16, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453337567, 'comment_body': ""What you are doing seems like the right way to achieve 'change interaction' in the frontend. Though, can you maybe log what is present in `UndoRedoService.getCommittableChangeList` or the change list received by the controller  in the backend, when you do 'Delete Interaction -> New Interaction -> Change rules in answer groups'? Since, that is what you are doing, right?"", 'comment_created': datetime.datetime(2020, 7, 12, 16, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 453368521, 'comment_body': '+1 -- what @aks681 explains is exactly the evidence I was looking for. Please could you provide it?', 'comment_created': datetime.datetime(2020, 7, 12, 22, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453370874, 'comment_body': 'Spelling: closely', 'comment_created': datetime.datetime(2020, 7, 12, 22, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453371016, 'comment_body': 'Add: Other unicode characters will be left in the string as-is, and will be rejected by the expression parser.\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 12, 22, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453371158, 'comment_body': ""Which ones? This message doesn't help at all with debugging."", 'comment_created': datetime.datetime(2020, 7, 12, 22, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453371285, 'comment_body': 'At this point, shouldn\'t you be raising and breaking if the expression has invalid type?\r\n\r\nYou should not be doing any edits at all to an exploration if any ""badness"" is discovered.', 'comment_created': datetime.datetime(2020, 7, 12, 22, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453371385, 'comment_body': 'This is not a helpful message. It does not help with debugging.', 'comment_created': datetime.datetime(2020, 7, 12, 22, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453371528, 'comment_body': 'Be more specific here. If you\'re trying to say ""if key is one of _TYPE_..."" then say that. Otherwise it\'s hard for the reader of this to know what your intention is, and ""Input"" itself doesn\'t really convey much meaning compared to ""Valid""/""Invalid"".', 'comment_created': datetime.datetime(2020, 7, 12, 22, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453371629, 'comment_body': 'Validate also that no changes at all have been made to the exploration.', 'comment_created': datetime.datetime(2020, 7, 12, 22, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453371648, 'comment_body': ""Yes, thanks. I've added a comment but in general it looks good!"", 'comment_created': datetime.datetime(2020, 7, 12, 22, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453597126, 'comment_body': ""@aks681 @seanlip Here are the logs that show the change list when I do the process of creating a new interaction with math expression input -> deleting the state -> creating a new state with Algebraic Expression Input with the same rule input.\r\n\r\n![1](https://user-images.githubusercontent.com/35144226/87301799-cfe03900-c52d-11ea-9509-7124feb98377.png)\r\n![2](https://user-images.githubusercontent.com/35144226/87301794-ceaf0c00-c52d-11ea-9f6f-75a5e9ef2a36.png)\r\n\r\nNote that the migration job doesn't need to do this (deleting the state and creating a new one), the migration job can directly change the interaction ID which is why the exact changelist in the job is different but logically, they are both the same."", 'comment_created': datetime.datetime(2020, 7, 13, 11, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453602545, 'comment_body': ""We don't wanna break upon finding invalid inputs, because we need to output them so that they can be resolved. And if any of the types_of_inputs is found invalid, we don't modify that state at all. This is checked after the loop on the answer groups is finished."", 'comment_created': datetime.datetime(2020, 7, 13, 12, 7, 44, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453611073, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 13, 12, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453611099, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 13, 12, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453611115, 'comment_body': ""The invalid inputs are displayed in the output with the key 'Invalid'. I've added this in the error message as well to avoid confusion."", 'comment_created': datetime.datetime(2020, 7, 13, 12, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453611154, 'comment_body': ""The invalid inputs are displayed in the output with the key 'Invalid'. I've added this in the error message as well to avoid confusion."", 'comment_created': datetime.datetime(2020, 7, 13, 12, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453611196, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 13, 12, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 453611219, 'comment_body': ""I've now checked if the version remains the same or not. That should suffice, right?"", 'comment_created': datetime.datetime(2020, 7, 13, 12, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 454099291, 'comment_body': ""Mm, sort of. It's just about acceptable, but it would be better to have a more thorough check of the content of the exploration itself since the version number is one step removed."", 'comment_created': datetime.datetime(2020, 7, 14, 4, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 454290134, 'comment_body': ""Ok, I've updated the tests to check for the entire exploration content, instead of just the version."", 'comment_created': datetime.datetime(2020, 7, 14, 11, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 456376967, 'comment_body': 'You keep talking about ""deleting the state"". Don\'t you mean ""deleting the interaction""?\r\n\r\nAlso, please replicate exactly this changelist in your PR. Mimic what would happen in the frontend if you were making the changes manually. If we ever need to do any investigation retroactively in the future, then having everything follow a similar format would be helpful. It would make it easier to assume that the data we have is in a certain format.\r\n\r\nPlease fix this along the above lines and provide proof that it is done correctly (e.g. for adding the rules etc.). It is important that the backend commit cmd list match exactly whatever would have been done in the frontend had the same commands been performed manually.', 'comment_created': datetime.datetime(2020, 7, 17, 11, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456416017, 'comment_body': '> You keep talking about ""deleting the state"". Don\'t you mean ""deleting the interaction""?\r\n\r\nNo, I do mean ""deleting the state"". Each interaction has multiple states and each state can have a single interaction with multiple answer groups. So, this job checks for all inputs in all answer groups, and only if all of the inputs are valid and correspond to a single interaction, do we upgrade that state. The point is that states are independent from each other so invalidity of one state should not restrict the upgrade of the other just because they happen to be in the same exploration. So, in a way, I think ""deleting the interaction"" is the same is ""deleting the state"" since each state can have exactly one interaction.\r\n\r\n> Also, please replicate exactly this changelist in your PR. Mimic what would happen in the frontend if you were making the changes manually. If we ever need to do any investigation retroactively in the future, then having everything follow a similar format would be helpful. It would make it easier to assume that the data we have is in a certain format.\r\n\r\nDone. Now, the upgrade job will delete the state and replace it with a copy that has the changes -- just like it would happen in the frontend. I have simply updated the changelist that we update the interaction to match with the one that is generated when the operation is performed from the frontend as shown in the screenshot above.\r\n\r\n ', 'comment_created': datetime.datetime(2020, 7, 17, 12, 40, 17, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 456500760, 'comment_body': '@seanlip, I actually meant ""Each _exploration_ (not interaction) has multiple states..."". \r\nAnd yes, I do mean deleting the interaction and not the state. I was confused between states and interactions.\r\n\r\n/cc @aks681 ', 'comment_created': datetime.datetime(2020, 7, 17, 15, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460188123, 'comment_body': ""I've removed this because this job was temporary and was failing when I tried upgrading the version from 34 to 35 in the tests for this job. This is in order to mirror the changes made by @donosco98 as seen in [this commit](https://github.com/oppia/oppia/pull/9985/commits/89342471240d7598c2c1654b68fc7d37df14fca0)."", 'comment_created': datetime.datetime(2020, 7, 24, 17, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460268172, 'comment_body': ""Wouldn't this affect solutions also?"", 'comment_created': datetime.datetime(2020, 7, 24, 20, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 460268455, 'comment_body': 'I thought the delete would be done here? Or is  that after the audit job is run?', 'comment_created': datetime.datetime(2020, 7, 24, 20, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 460326540, 'comment_body': ""Yeah, I've added that as well now."", 'comment_created': datetime.datetime(2020, 7, 24, 23, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460381585, 'comment_body': 'Wrong indentation.', 'comment_created': datetime.datetime(2020, 7, 25, 8, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 460381735, 'comment_body': 'Where is the try catch where  the conversion function is called that catches this error and returns None?', 'comment_created': datetime.datetime(2020, 7, 25, 8, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 460389078, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 25, 10, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460389126, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2020, 7, 25, 10, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460389590, 'comment_body': 'Missing Raises docstring.', 'comment_created': datetime.datetime(2020, 7, 25, 10, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460391421, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 25, 10, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460574128, 'comment_body': ""This sentence doesn't scan -- is there a typo or missing word?"", 'comment_created': datetime.datetime(2020, 7, 26, 21, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460574146, 'comment_body': ""Missing typeinfo -- shouldn't a ts checker catch this? /cc @nishantwrp @vojtechjelinek "", 'comment_created': datetime.datetime(2020, 7, 26, 21, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460574220, 'comment_body': 'Are these the only two cases? It should actually be done more declaratively, with a constant mapping and a for loop (and that constant should be used everywhere it needs to be).', 'comment_created': datetime.datetime(2020, 7, 26, 21, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460574455, 'comment_body': ""Why is neg handled here but not in the init() case above?\r\n\r\nThis is why we need a constant -- although now I'm thinking it actually ought to be a service, since you've got stuff after this that is common between all the invocations, too."", 'comment_created': datetime.datetime(2020, 7, 26, 21, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460574491, 'comment_body': 'Why is this needed?', 'comment_created': datetime.datetime(2020, 7, 26, 21, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460574708, 'comment_body': ""Again the type is inferred here due to `initialValue = ''` i.e. string."", 'comment_created': datetime.datetime(2020, 7, 26, 21, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 460575067, 'comment_body': 'Ah ok, thanks. What do you want the convention to be in the codebase going forward, though? Should all types be specified, ideally? @nishantwrp ', 'comment_created': datetime.datetime(2020, 7, 26, 21, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460577634, 'comment_body': ""Hmm, I'm fine with both the possibilities here. But in cases where there is no default value like here, there should be specific types."", 'comment_created': datetime.datetime(2020, 7, 26, 21, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 460577895, 'comment_body': 'Ah ok, thanks. Please mention the full desired convention on your types wiki page then, since it will be used as a reference in the future for any type-related issues.  Thanks!', 'comment_created': datetime.datetime(2020, 7, 26, 21, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460578665, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 26, 22, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 461035801, 'comment_body': 'Should you actually expand LHS in the human readable name?', 'comment_created': datetime.datetime(2020, 7, 27, 17, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 461039792, 'comment_body': 'invalid term you mean? 3.4.5 is not an integer', 'comment_created': datetime.datetime(2020, 7, 27, 17, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 461040255, 'comment_body': '""seems to be empty"" is probably not right. Maybe you can say ""Please enter an answer before submitting""', 'comment_created': datetime.datetime(2020, 7, 27, 17, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 461040413, 'comment_body': 'ditto, reg integer', 'comment_created': datetime.datetime(2020, 7, 27, 17, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 461040713, 'comment_body': 'Ditto, reg empty', 'comment_created': datetime.datetime(2020, 7, 27, 17, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 461132045, 'comment_body': ""It was a typo. I've fixed it now."", 'comment_created': datetime.datetime(2020, 7, 27, 19, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 461132378, 'comment_body': ""This code is no longer needed and I've removed it from all three interactions."", 'comment_created': datetime.datetime(2020, 7, 27, 19, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 461132873, 'comment_body': ""Yes, I've tested all the functions that we support and these are the only two cases that need to be handled.\r\nNow that this code is only present in this file, I don't need to add it in a constant, right?"", 'comment_created': datetime.datetime(2020, 7, 27, 19, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 461132979, 'comment_body': ""Not needed anymore. I've removed it."", 'comment_created': datetime.datetime(2020, 7, 27, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 461133096, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 19, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 461133200, 'comment_body': 'Yup, makes sense. Done.', 'comment_created': datetime.datetime(2020, 7, 27, 19, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 461133286, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 19, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 461133336, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 19, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 461133382, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 19, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}]","[{'commit_sha': '20ed48f327c77792392588001074bc7d43cae11b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f047874c2827167b2e0a347e4450e410989428f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb34cbec09eb588a9213c9cf67830b4f718acdee', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44ef54209f382e036cf3621aaae83f655b277dc7', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e13cb555beb81230eca6b5be7f0dc6ad9b3dcb67', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc516263b9c7e22227f8954e72e9f578f4fb973d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d36a8b801f6f6de990f30e158a561caa71fe6c4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bbb7e5f66771e40cfe1093b4042332412cf536a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '494729dc5783a4e2ba3b0372e652120f4df511a7', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd88b281153b9a0601285b845aded81a09970887b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b20364f27246caa788cdb37af521261dacd05f6', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4da90cacd341ceb8766bc519b209f5603060dbd2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '057188dd9df4b68f0ab40b378e9bab7df9d5b7d2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '099397afd80c3abe0bdd5e1f3fb6ea36d7ac1550', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '617541883eaf835861e50f37565240a0e0a462ba', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b316b9069a8884093f02837f50d68affc83bc92e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '707bd3f6fb7bb01be28004710f01987347bfa0a8', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2269345ebe7039d2daaafeba08f16cccbe5b3b70', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2190b3d911df62fc414293290245341681ddb49d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e52106884efc5bd0d3d6dda9b4f870884d0cc2fe', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e863418b4b9574ff435ec4b5c1793469a950da42', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb9c6977cb8a64ca1416b609c69a0deaaa2e9e1', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66767508712970ec39fe010233e0a4c457eeef57', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01f01f9d8ab1d23845c2e24398f240cc58a49fc3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18c1f7a55aa072882dbc71ffdbd97f49854779cd', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e370610cd30b9a1fd81f2f5d1892e4b89b1e2ecc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '158380cb81bf73b0381f1408e2b0fea8b5e7af51', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb97ed185eeacd9778c9ad37e394be670f3d6a27', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e96fffd8e199d7acc34099e669078ae793b756c4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e551c6a3a151efa13810531357748e2ddda68b88', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e977730bd8f1193a25d9d6989e34675a13c26ec4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c575581e1f783ed0561f2873090e22b55294a7ef', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f89e0f45a8d2d2b7a8a4e7e428a35f7000db5bf', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '297eb7176821f378640e5cf9233dcf3931e878d7', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d99dbc6b122832759cfe49e86a341f372558e56', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1af2e20a36f1fb9eaa51d995251b716d972d0ebb', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54ed6cc2d704fa04383399b71e45d9d1a4140ca2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '659b5fd384a6a6840582373c5542a79490436974', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a21ad2f1728b9e6b3ce9f90eb67392bbef30514', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da671f052096e9230dff3385ffeb45b0944d9773', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4092addb236af3a1a29f1f87ff3f343a3cad72b7', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32b0efdd95dba288e30b5ab374e14705d6046b16', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab8b646125454c394cddcff4d11b5d4d2fa52c7', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3729d3fd770e86a0996f3f2bdec291970d774c4f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b81b1672484c744efe335c8022011a106753246', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e872ebf6abf0fdfedb49ee8a170727be4611b57', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa97db391289f23a286c22b519275001f02b1fb4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95e19dd262f734697a70ee82272fd6c013be7292', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fba432c0925bfda993656dc7b6554356ef6e9f9', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1be9dc53232eb0ee1c8aa30b7cc5d04e7e7b55a5', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee8868ef75015ecdd405602eac5e3b895b01977', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb8249ae04b3ed3b9f6b63bc5fbdbb9a1d513410', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a6a8976ea01e4429cd386ebabac243244309bbc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5de541ac282b001196aa5b8bbbb61c9874a914b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '543bf4671136c1e37d930e15365b9ab609507165', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e81a2ea626ba434e9e269f7b7a0bbdd2e6e21551', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '746c8ae0cdf9b0d96e276192c89fc6904610a8c4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62f2e3001f19b98161a79fba79d507cc569a8121', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b25e839b3fd47bf102b20d8ad95f0e614490bb2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55d4994dc816c42db1da2e75de3920998f9c6fb5', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5dcf2f445baf09ad76d05e52c46dd207bacc2d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d3b22f6413b7a6b12ad780c055bfcc21f452085', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eec002c3683d3bfe5565b091baa44a39778c5d6', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ba3082100518c0cdb8f148ea172e5c78c870662', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2747b7a31452e01a82c29f013fc7820b0ee64f23', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce5dddc58280d5c9fa26ed7d0ab3dd56dc3ef6a0', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3841e12222be7f8f6c9c510b2f3069b8fe84d0c5', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01d7ee1861946f01ba6e29ce834f38f1a05ec0c3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f931745180b6c0f429d95d141496bc47e2873f4a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08a6aad96036428ed82dc13b697f5252a2254cda', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfef0ed8451b1f29ec35fead157c96d2ee72f843', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b0288f703ae02df6ba4b5d11950e6a610347740', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc7a51a4c11bc028e3844306badb7063ee73e16b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '604dbbd4d89aa51d1b697eac05a5cefa485ac872', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61969ced4189d6b00af12a52005425bdf6141fe1', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0272461069bf6edf3163becd9795387a51063427', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b82c0707409f533fe92308e9f687e6063e71f776', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5dc6a922cd1772d67a391a5dce2c65b60c29941', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '168a64c27e25f24b3b15f3304a998ae31c433148', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f416da5ec9482559a6d7d5a52e378a1bc7219a09', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1562d066459d525d51bb9bf5bf74fb9eb62f737f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc622661aa0e92df49db166fccb9bce7bcb21014', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612b443898126d51c5489aa4761044f14657015d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63279a3ab5d7280c773f8c219d0a80de048763a7', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eca639905b5ec31c5237b49049353550e453a083', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44cd5874976be779ae68f183372061a7b9578f60', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}]",Prayush Dawda,35144226,,User,,27,,14,47
453770666,Milestone 2.3: Adds an on-screen keyboard for math interactions.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes #9552
2. This PR does the following:
 - Adds an on-screen keyboard for touch-based devices, replacing guppy's osk.

This is how the keyboard behaves:
![OSKBehaviour](https://user-images.githubusercontent.com/35144226/87978281-c9cdf780-caed-11ea-8dff-fc9a872b5ecc.gif)


This is how the keyboard looks with customized variables:
![customizable](https://user-images.githubusercontent.com/35144226/88262385-b5544f80-cce5-11ea-92c2-8c938a6ce75b.png)


## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9978,https://api.github.com/repos/oppia/oppia/pulls/9978,https://github.com/oppia/oppia/pull/9978,closed,960,96,38,21,20,49,0,1,[],2020-07-20 19:39:15+00:00,2020-07-25 21:36:45+00:00,439050.0,"5 days, 1:57:30","[{'comment_id': 458379606, 'comment_body': 'Can this section and the one below be organized into an `ng-repeat` of buttons with the list in the component? Would be easier  to organize and edit later on.', 'comment_created': datetime.datetime(2020, 7, 21, 20, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 458380526, 'comment_body': ""Are these `guppy` functions (asking, since it's in snake case)?"", 'comment_created': datetime.datetime(2020, 7, 21, 20, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 458380991, 'comment_body': 'Maybe add a comment saying, this functionality will be added later on?', 'comment_created': datetime.datetime(2020, 7, 21, 20, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 458383048, 'comment_body': 'Rename to just `showOSK`?\r\nSo is there no `hideOSK` function here (Is it because hiding is done directly from the OSK itself)?', 'comment_created': datetime.datetime(2020, 7, 21, 20, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 458384115, 'comment_body': ""So, OSK automatically shows when you click on the editor, do you want that always? It's fine if it does that only on mobile, just wanted to confirm if that is the case for desktop also."", 'comment_created': datetime.datetime(2020, 7, 21, 20, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 458384276, 'comment_body': 'Ditto about renaming here and elsewhere.', 'comment_created': datetime.datetime(2020, 7, 21, 20, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 458614532, 'comment_body': ""Yeah, I thought of that as well, but the thing is, this div contains elements of various types with different classes. There are buttons, images, and i tags. I don't think it'll be any easier to read and maintain if I were to turn this into a loop because I would have to add a lot of conditions and specific things, perhaps I would even have to add multiple loops, which is why I chose to implement it this way for this div and the one below it."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 458614713, 'comment_body': 'Yes, they are.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 458619142, 'comment_body': 'Yeah, I think that is more user friendly. The other option would be to add a button that needs to be clicked in order to show the OSK. But, when the user clicks on the editor, they are most probably gonna write something, it seems more user friendly to automatically show the OSK, and hide it once they click away or click the HIDE button.\r\nAnd yes, the OSK is only going to be visible on touch-based devices.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 458624163, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 458624230, 'comment_body': ""Done.\r\nYes. Basically, we need to toggle the showOSK variable to true once the guppy div has been clicked (activated), and the hiding will be done in the OSK component by checking if there is still an active div. Once the user clicks away, there won't be any active divs which will trigger the hideOSK function in the OSK component to hide the OSK. "", 'comment_created': datetime.datetime(2020, 7, 22, 8, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 458624280, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 458782791, 'comment_body': ""Yeah, maybe not for numbers, but operators and functions seem doable (2 loops)? Since they have the same classes and similar 'click' functions."", 'comment_created': datetime.datetime(2020, 7, 22, 13, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 459270694, 'comment_body': ""Done. I've used a loop for functions, but for operators, we only have 3 so we don't really need a loop, right?"", 'comment_created': datetime.datetime(2020, 7, 23, 7, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 459327442, 'comment_body': 'Should we use ng-repeat for these three buttons?', 'comment_created': datetime.datetime(2020, 7, 23, 9, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459327722, 'comment_body': 'Unwanted newline?', 'comment_created': datetime.datetime(2020, 7, 23, 9, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459334744, 'comment_body': 'For numbers, you can have dict, key as number and values as a dict of special properties maybe?', 'comment_created': datetime.datetime(2020, 7, 23, 9, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459337366, 'comment_body': 'Can we do it with [flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) such that all numbers 9-1 falls in one container and all other left parts fall into another container? I think that way you can use ng-repeat in lots of places.', 'comment_created': datetime.datetime(2020, 7, 23, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459338188, 'comment_body': 'Do we want these to be both way binded?', 'comment_created': datetime.datetime(2020, 7, 23, 9, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459338467, 'comment_body': 'Break after `[`', 'comment_created': datetime.datetime(2020, 7, 23, 9, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459338549, 'comment_body': 'Ditto*', 'comment_created': datetime.datetime(2020, 7, 23, 9, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459338902, 'comment_body': 'Define this string in a constant and use it here and in the HTML', 'comment_created': datetime.datetime(2020, 7, 23, 9, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459350908, 'comment_body': 'lettersInKeyboardLayout maybe?', 'comment_created': datetime.datetime(2020, 7, 23, 10, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459359224, 'comment_body': ""Why do we need to pass an empty string to `custom-letters` if we don't want to add one, should we handle this in the component?"", 'comment_created': datetime.datetime(2020, 7, 23, 10, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459360263, 'comment_body': ""Don't start a variable name with a verb. maybe onScreenKeyboardShown?"", 'comment_created': datetime.datetime(2020, 7, 23, 10, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459370565, 'comment_body': 'Instead of adding this here should we add this in the interaction which uses it? (not sure!)', 'comment_created': datetime.datetime(2020, 7, 23, 11, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459393650, 'comment_body': 'Please sort these alphabetically (keep `$scope` at start).', 'comment_created': datetime.datetime(2020, 7, 23, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 459394322, 'comment_body': 'Please sort these alphabetically (keep `$scope` at start).', 'comment_created': datetime.datetime(2020, 7, 23, 11, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 459394652, 'comment_body': 'Please sort these alphabetically (keep `$scope` at start).', 'comment_created': datetime.datetime(2020, 7, 23, 11, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 459395059, 'comment_body': 'This code is copied into three places, should it be extracted to some helper function?', 'comment_created': datetime.datetime(2020, 7, 23, 11, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 460010756, 'comment_body': 'That would make the code quite messy, IMO. Because in that case, we would have to use 2 horizontal flexboxes, with the first one containing numbers from 9-1 and the operators and shortcuts...and the second row would contain `. 0 backspace < >`. Now, in both of these flexboxes, we would have to use 2 grids, for the left part and the right part. So, that would be a total of 4 grids with dims as: 3x3, 3x2, 1x3, 1x2. Does that not seem more complex than the current implementation which is just a single grid of dim 4x5?', 'comment_created': datetime.datetime(2020, 7, 24, 12, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460010787, 'comment_body': ""The thing is, only the letters tab button has an ng-if attr so, I would have to add that separately. So, it doesn't make sense having a loop for just 2 items, right?"", 'comment_created': datetime.datetime(2020, 7, 24, 12, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460108222, 'comment_body': ""I'm not actually sure about this yet. Since I haven't integrated the customization args yet so I don't know exactly how this would function. But, I will change this when I implement the customization args."", 'comment_created': datetime.datetime(2020, 7, 24, 15, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460108390, 'comment_body': ""Umm, this needs to be bound to the controller, so we can't have it as a constant, right? We expect its value to change."", 'comment_created': datetime.datetime(2020, 7, 24, 15, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460113361, 'comment_body': ""So this is how it's supposed to function:\r\nThe math interactions will all have a customization arg for specifying what letters should be displayed to the learner. This data will be passed into the component during initialization. But adding this customization arg requires a state migration which is why I've decided to do it separately. So once the cust arg is implemented and added to the interactions, the `customizable` field will be removed and only the `custom-letters` field will be present so that we can pass in which the letters to be displayed. Currently, it's just for checking if the UI works as expected. Please let me know if you'd like me to explain something in more detail :)"", 'comment_created': datetime.datetime(2020, 7, 24, 15, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460116064, 'comment_body': 'Yeah, that would be ideal (in terms of easily exchanging interaction data with the component). But the issue with that is that the OSK needs to be displayed from the bottom of the screen overlaying on top of all other entities...and if we add this in the interactions then it would only be displayed inside the white div designated for the questions and answers. This is why I had to add this somewhere higher up.', 'comment_created': datetime.datetime(2020, 7, 24, 15, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460119928, 'comment_body': ""Actually a lot of code is common between these interactions and I've tried to refactor it as much as possible by using the GuppyInitializationService and GuppyConfigurationService. But these events need to be added in the components itself since they involve triggering the digest cycle with `$scope.$apply();` so I can't put it in a function in a separate service and call it."", 'comment_created': datetime.datetime(2020, 7, 24, 15, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460125560, 'comment_body': ""I think he means the 'mainTab' string, like have that value in a constant,"", 'comment_created': datetime.datetime(2020, 7, 24, 15, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 460156148, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460156186, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460156219, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460156268, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460156302, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460156336, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460156360, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460156395, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460157010, 'comment_body': ""Ah, I see. I've made the change, thanks!"", 'comment_created': datetime.datetime(2020, 7, 24, 16, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 460174121, 'comment_body': 'Why adding new font?', 'comment_created': datetime.datetime(2020, 7, 24, 16, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 460177562, 'comment_body': 'As @mschanteltc mentioned in the comment [here](https://github.com/oppia/oppia/pull/9978#issuecomment-663185793), we need to use a serif font which resembles the fonts that get rendered in the editor.', 'comment_created': datetime.datetime(2020, 7, 24, 17, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}]","[{'commit_sha': 'dcaa52fb3c96292ed3f02e5418ea6b4a5910beb5', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa5663ea141513cf1c0001936c1018fa8f703bfc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '055feadeb2c5383ed54e171b35b48eae7b48ea42', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e24100ab85ac8a8295d77c9faba04b3b0f2e6fcc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b27aa7b122efe98b32f441d8ba8b85a7621bb37d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ee42cdf1735be6cacc169e27ba26aa4af0be69a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a145f458ab58852babbff3b61cea1623f04eb68', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04411b47012d1c5444d8bcb66ea253ba682def30', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd46416e7164533fede812724b83169ed81655777', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99e0608e0df1c3c089fd068e9a7ea9eee427bc3f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df2301ddd1cafe472abc6218c7be32c29503c318', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '447f9c181708cc5b0c64176a9762299f0fe2ce9f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33508564153043f84334bab819b8b53b13e3d424', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54b9f8cad2bbdc6b7e92d2ba169b727cf5bfa125', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71de8c843c8e58e752d9908373a5a4ace678811f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eda270eac635ceaaecb7e8f9b96ea96ac0615931', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfeb3046f3373d6a61fd68e7797d5e82ddc5d237', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0032d484303ea8851d081bbf0bb0f53d3ecdc9e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cb91558604f68f7150b383e40540b275e328f65', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '251b4113a3fedffcb63effd00d72dfc86a22b210', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c67730429dbcfe5a326d951e87ca7731ea2cdb7d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}]",Prayush Dawda,35144226,,User,,27,,14,47
467511505,Milestone 3.1: Adds 3 rules to AlgebraicExpressionInput and MathEquationInput ,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following:
Adds the following rules to AlgebraicExpressionInput and MathEquationInput:
 - ContainsSomeOf
 - OmitsSomeOf
 - MatchesWithGeneralForm

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10321,https://api.github.com/repos/oppia/oppia/pulls/10321,https://github.com/oppia/oppia/pull/10321,closed,885,29,24,17,2,20,0,1,[],2020-08-13 16:48:06+00:00,2020-08-21 07:40:30+00:00,658344.0,"7 days, 14:52:24","[{'comment_id': 471515502, 'comment_body': 'This is still linked to `constants.GREEK_LETTER_NAMES_TO_SYMBOLS`, right? Maybe add a comment for that?', 'comment_created': datetime.datetime(2020, 8, 17, 14, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 471516870, 'comment_body': ""Maybe rename the second var to inputExpression or something that specifies its use? Since the current name doesn't indicate why we need placeholders."", 'comment_created': datetime.datetime(2020, 8, 17, 14, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 471518864, 'comment_body': 'Add comments for important sections in this loop as well.', 'comment_created': datetime.datetime(2020, 8, 17, 14, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 471520105, 'comment_body': ""What do you mean by 'withSide'? "", 'comment_created': datetime.datetime(2020, 8, 17, 14, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 471520827, 'comment_body': 'For this, do we allow any ordering around the = sign?', 'comment_created': datetime.datetime(2020, 8, 17, 14, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 471521919, 'comment_body': 'Ok, so this editor initializes with the OSK letters, but then the creator can edit that?', 'comment_created': datetime.datetime(2020, 8, 17, 14, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 471573505, 'comment_body': ""The `IsEquivalentTo` rule input doesn't require the `y` parameter which denotes the side of the equation which is relevant for the rule check. This is why we need different typedefs for this interaction, ie, one with side and the other without. One with placeholder is also added in this PR for the general match rule."", 'comment_created': datetime.datetime(2020, 8, 17, 15, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 471579006, 'comment_body': ""No, this rule expects the learner's answer to match with the creator's answer on both sides of the equation. Since we want to check the general form match, it doesn't make sense in allowing the answer terms to be on either, since that would most likely always be the wrong answer. Do you agree?"", 'comment_created': datetime.datetime(2020, 8, 17, 15, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 471579321, 'comment_body': 'Yes, if and when the creator edits the customization arg, these choices in the dropdown will be accordingly updated.', 'comment_created': datetime.datetime(2020, 8, 17, 15, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 471585416, 'comment_body': 'Yup, done!', 'comment_created': datetime.datetime(2020, 8, 17, 16, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 471585446, 'comment_body': 'Agreed, done.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 471585450, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 472460434, 'comment_body': 'Hmm, ok, though a general form like ax+by+c=0 can be matched with 2x+3y=5, right, maybe? If we are not allowing this, might be worth adding a help text somewhere so the creator knows this.', 'comment_created': datetime.datetime(2020, 8, 18, 20, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 472461464, 'comment_body': ""Ah ok, maybe add a comment where it is defined then (if that isn't there)?"", 'comment_created': datetime.datetime(2020, 8, 18, 20, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 472465020, 'comment_body': 'Oh, how does this work, so if we are comparing 2x and ax where a is placeholder, how would subtracting or dividing get rid of the 2?', 'comment_created': datetime.datetime(2020, 8, 18, 20, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 472944016, 'comment_body': ""Ok, so when we divide 2x and ax, the resultant would be 2/a which contains only placeholder variables and that is why it is said to have matched. So things like 2x^2, 2y, etc. wouldn't match since the resultant would contain non-placeholder variables as well."", 'comment_created': datetime.datetime(2020, 8, 19, 11, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 472944031, 'comment_body': 'No, that wouldn\'t match. It\'s analogous to the ""Matches exactly with on both sides"" rule where LHS of the answer must match with the LHS of the input and same for RHS. Since if we allow this kind of behavior, y=mx+c would get matched with answers like 4x+y+3=0, which is not the expected behavior. I have added a help text for this rule as well.', 'comment_created': datetime.datetime(2020, 8, 19, 11, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 472944040, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 19, 11, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 473274348, 'comment_body': 'Yeah, agreed, thanks!', 'comment_created': datetime.datetime(2020, 8, 19, 19, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 473275337, 'comment_body': 'Ah ok, so we are only checking for presence and absence. Yeah, looks good. Make sure that there are comprehensive tests for this.', 'comment_created': datetime.datetime(2020, 8, 19, 19, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}]","[{'commit_sha': 'b88e4aad4699f87a80b04183ed67b6335daa7f22', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4516dec1b0a8ab56e795f2a69fd82cd96431cc4b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1c340af2bb2aa5cf96ac68d3c9b0b1a7d2dbc00', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd8aef440d99021be5ecb962c1ea9c169e4064b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca95cdff2b33a2de1f699f499c2b9e9f1244140a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33a4ec026790bb0c93fb3c87912dcda3edb5e846', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c55390638984f0212090791d2ec6e767b3d088b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea24367d9ced098ba5f5b67483af0843e52cc153', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e29de058ee2ec954e0e594ddacf838974fed282', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a86fbef23b52f8309477fab300fc036c2dc1ddb9', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b659e3d4f314dd9438b8d9be4b0489913420573d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '512310630f82ae2986c9ab57825a70b14777e6a4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f25ab0906d47383adba84efe606ba7a5eba3c6fd', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6912efe6b8e1234ea266040b71ffb694b4dd819', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26a3520f1fc7ab1e8e8e96688b1ba32a63ec2fd0', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '992daa7829f4d26261a733888ca9b709e36c9693', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf3cb85065b86a795ede029b9d162509bcb8a452', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}]",Prayush Dawda,35144226,,User,,27,,14,47
468448558,Milestone 3.2: Removed the old math interaction.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following: The new math interactions that are supposed to replace the MathExpressionInput interaction have been deployed and all explorations that use the old interaction have been migrated to one of the new ones which is why all the code referring to the old interaction can be safely removed from the codebase.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10361,https://api.github.com/repos/oppia/oppia/pulls/10361,https://github.com/oppia/oppia/pull/10361,closed,9,997,49,8,6,7,0,1,[],2020-08-16 14:01:13+00:00,2020-08-21 16:41:22+00:00,441609.0,"5 days, 2:40:09","[{'comment_id': 471525626, 'comment_body': ""Isn't something like this not required for the new math interactions?"", 'comment_created': datetime.datetime(2020, 8, 17, 14, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 471528280, 'comment_body': 'Basically, do the new interactions work offline after the exp has been loaded?', 'comment_created': datetime.datetime(2020, 8, 17, 14, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 472058606, 'comment_body': 'Yes, the interactions do work offline and this is not needed since MathJax is not used in the new interactions.', 'comment_created': datetime.datetime(2020, 8, 18, 9, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 472062656, 'comment_body': 'Do we still need MathJax until @donosco98 also does his deprecation of Math RTE components?', 'comment_created': datetime.datetime(2020, 8, 18, 10, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 472469692, 'comment_body': ""@seanlip According to [this](https://github.com/oppia/oppia/pull/10331#discussion_r471910063), it seems it's fine to remove it in this pr?"", 'comment_created': datetime.datetime(2020, 8, 18, 20, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 472512427, 'comment_body': ""Oh I see! Didn't see that, thanks for flagging it.\r\n\r\nYup, sounds like it's OK. @donosco98 can you confirm?"", 'comment_created': datetime.datetime(2020, 8, 18, 21, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 472685372, 'comment_body': 'Yeah, I can confirm its fine to remove it in this PR(since these just pre-fetch the files for math interaction).\r\nThe actual removal of MathJax is done in my PR. [here](https://github.com/oppia/oppia/pull/10331/files#diff-b29ad93457f46f58229dccc8d15d65d9L48)', 'comment_created': datetime.datetime(2020, 8, 19, 4, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}]","[{'commit_sha': '8152705f34d8eb2399ae76d3b7fdcef9c5ef741c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '221096ffdc912f9566612358ce4ba390a8e53dc4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38e5e7eb62e3ab604fb1366ddcda8cc2531b0d00', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99b24831eddde811a794d86b984f03fcf47cec8c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59f9a51a47ea84afda65e69bac033588eae8288d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cdfd8dd8958ae29ff38fcf956f340abaa881c4c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b35feb2b90d94935a84e0e0b3ab772d5ac54442', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22e1a6295f1f5e6e1c346355dbb96bad7632a101', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}]",Prayush Dawda,35144226,,User,,27,,14,47
461245928,Fix #10037: Adds a customization arg for math interactions.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes #10037.
2. This PR does the following: Adds a customization arg that allows creators to specify the letters that the learner will see in the on-screen keyboard.
This is how the arg behaves:
![custarg](https://user-images.githubusercontent.com/35144226/89105981-93746e80-d443-11ea-9822-f62a169849c3.gif)


<details>
  <summary>Since this PR adds a new customization arg along with e2e tests, here are the success runs of Circle and Travis CI:</summary>
 
Travis 1:
![travis1](https://user-images.githubusercontent.com/35144226/89740770-55152a00-daa9-11ea-8249-4b46019caf66.png)
Travis 2:
![travis2](https://user-images.githubusercontent.com/35144226/89740771-55adc080-daa9-11ea-9498-aa7aaa13e8c7.png)
Travis 3:
![travis3](https://user-images.githubusercontent.com/35144226/89740773-56465700-daa9-11ea-8bab-d598b1f61a14.png)

Circle 1:
![circle1](https://user-images.githubusercontent.com/35144226/89740766-521a3980-daa9-11ea-9cb6-f1c78ac36b22.png)
Circle 2:
![circle2](https://user-images.githubusercontent.com/35144226/89740768-53e3fd00-daa9-11ea-9c0d-21ff7f9ab58c.png)
Circle 3:
![circle3](https://user-images.githubusercontent.com/35144226/89740769-547c9380-daa9-11ea-9778-8a222adf88bc.png)


</details>

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10136,https://api.github.com/repos/oppia/oppia/pulls/10136,https://github.com/oppia/oppia/pull/10136,closed,1379,207,51,79,26,78,0,1,[],2020-08-01 16:40:46+00:00,2020-08-09 20:26:57+00:00,704771.0,"8 days, 3:46:11","[{'comment_id': 465303267, 'comment_body': ""What's the difference? Is one the display value and one the input value?"", 'comment_created': datetime.datetime(2020, 8, 4, 20, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 465304404, 'comment_body': 'Does this mean the constants (in constants.ts) should have them in the same order? If so, maybe add a comment there?', 'comment_created': datetime.datetime(2020, 8, 4, 20, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 465304990, 'comment_body': ""Just to check, this won't modify the rule in the input, right?"", 'comment_created': datetime.datetime(2020, 8, 4, 20, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 465305210, 'comment_body': 'customOSKLetters?', 'comment_created': datetime.datetime(2020, 8, 4, 20, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 465305615, 'comment_body': 'Ditto comments in state_domain here also.', 'comment_created': datetime.datetime(2020, 8, 4, 20, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 465307488, 'comment_body': 'Why are the changes below in `insertMultiplicationSigns` function? Also, why are the changes below required?\r\nSince, it was working without these before, right? ', 'comment_created': datetime.datetime(2020, 8, 4, 20, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 465309305, 'comment_body': ""typo: 'fot'"", 'comment_created': datetime.datetime(2020, 8, 4, 20, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 465309824, 'comment_body': ""Do you mean 'roman' or 'latin'? Or are they the same :P?"", 'comment_created': datetime.datetime(2020, 8, 4, 20, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 465387910, 'comment_body': '`GREEK_LETTERS` represent the words and `GREEK_SYMBOLS` represent the symbols. I thought naming it to something like `GREEK_WORDS` seems weird which is why I chose to name it this way.  ', 'comment_created': datetime.datetime(2020, 8, 4, 23, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 465387945, 'comment_body': ""Yes, I've added a comment."", 'comment_created': datetime.datetime(2020, 8, 4, 23, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 465387959, 'comment_body': ""Yes, it won't modify the rule inputs."", 'comment_created': datetime.datetime(2020, 8, 4, 23, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 465387975, 'comment_body': ""That won't work since `customOSKLetters` would get converted to `custom-oskletters-editor` instead of `custom-osk-letters-editor`."", 'comment_created': datetime.datetime(2020, 8, 4, 23, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 465388000, 'comment_body': 'Addressed above.', 'comment_created': datetime.datetime(2020, 8, 4, 23, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 465388017, 'comment_body': ""The problem was that the older implementation didn't account for consecutive greek words without multiplication signs so things like `alphabeta` would be considered as `a*l*p*h*a*b*e*t*a` instead of `alpha*beta`. With these changes, such cases are also covered. Also, cases like `xalphayzgamma` are converted to `x*alpha*y*z*gamma`."", 'comment_created': datetime.datetime(2020, 8, 4, 23, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 465388037, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 8, 4, 23, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 465388051, 'comment_body': ""Apparently they're the same ([ref](https://en.wikipedia.org/wiki/Latin_alphabet)), but just to be consistent, I've changed this to Latin, since I've used Latin everywhere else."", 'comment_created': datetime.datetime(2020, 8, 4, 23, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 466473599, 'comment_body': 'Is this a learner facing error message? If so, how does a learner know what the ""custom letters list"" is?', 'comment_created': datetime.datetime(2020, 8, 6, 14, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 466473720, 'comment_body': 'Same question as above', 'comment_created': datetime.datetime(2020, 8, 6, 14, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 466473883, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 8, 6, 14, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 466479538, 'comment_body': 'No, this is a creator facing message and the creator has the ability to modify the custom letters and the rules.', 'comment_created': datetime.datetime(2020, 8, 6, 15, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 466479663, 'comment_body': 'Addressed.', 'comment_created': datetime.datetime(2020, 8, 6, 15, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 466479710, 'comment_body': 'Addressed', 'comment_created': datetime.datetime(2020, 8, 6, 15, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 466517327, 'comment_body': 'Can you make this a waitFor statement instead? It will do essentially the same thing (check that the element is present) but wait a little bit for the element to load before failing', 'comment_created': datetime.datetime(2020, 8, 6, 15, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 466518710, 'comment_body': 'This check also doesn\'t allow for the element to still be loading when this line runs. You can check this with a `try` like this:\r\n\r\n```js\r\nlet letterIsPresent = true;\r\ntry {\r\n  waitFor.presenceOf(element, ""This error should be caught."");\r\n} catch (e) {\r\n  letterIsPresent = false;\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 8, 6, 16, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 466519086, 'comment_body': 'Please make sure the element has loaded before trying to click it. You can use `protractor_utils/action.js` to do this easily', 'comment_created': datetime.datetime(2020, 8, 6, 16, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 466519357, 'comment_body': 'ditto: check elements have loaded before clicking', 'comment_created': datetime.datetime(2020, 8, 6, 16, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 466520211, 'comment_body': 'Same comments as I left for AlgebraicExpressionInput:\r\n\r\n* Use waitFor statements instead of `.isPresent()` to allow for elements needing to load\r\n* Check elements have loaded before clicking them', 'comment_created': datetime.datetime(2020, 8, 6, 16, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 466522268, 'comment_body': ""This is a common problem we see in e2e test PR reviews. You can use [this checklist](https://github.com/oppia/oppia/wiki/End-to-End-Tests#codeowner-checks) to check for these common problems when you're writing PRs"", 'comment_created': datetime.datetime(2020, 8, 6, 16, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 466732623, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 6, 23, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 466732653, 'comment_body': ""Alright, so I tried calling the presenseOf function as you've suggested, but the error doesn't seem to get caught for some reason. I tried explicitly calling the function's statements directly and it works. Is that fine?"", 'comment_created': datetime.datetime(2020, 8, 6, 23, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 466732668, 'comment_body': ""I understand, I've fixed this now and I will keep this in mind for future, thanks!"", 'comment_created': datetime.datetime(2020, 8, 6, 23, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 466732687, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 6, 23, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 466732713, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 6, 23, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 466813980, 'comment_body': 'I suggest going with GREEK_LETTER_NAMES -- that would be less confusing, IMO.', 'comment_created': datetime.datetime(2020, 8, 7, 4, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 466817585, 'comment_body': 'This sort of thing suggests that the data structure is wrong. Can you bundle them into a single list instead (or a dict if the order does not matter), so that the elements are automatically paired up?', 'comment_created': datetime.datetime(2020, 8, 7, 4, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 466817936, 'comment_body': 'The logic seems too ad hoc: does it handle stuff like `betalphaa` correctly? Can you prove that it is equivalent to your parser output?\r\n\r\nIt would be better to parse this using your parser and then identify the variables etc. from there.', 'comment_created': datetime.datetime(2020, 8, 7, 4, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 466818123, 'comment_body': ""Sort them first? It's a bit cleaner."", 'comment_created': datetime.datetime(2020, 8, 7, 4, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467186972, 'comment_body': ""Done. I've combined them into a dict."", 'comment_created': datetime.datetime(2020, 8, 7, 17, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467187131, 'comment_body': ""Done. I've added a function in the parser file for extracting variables. "", 'comment_created': datetime.datetime(2020, 8, 7, 17, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467187234, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 7, 17, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467251999, 'comment_body': ""Can you make this error message more specific? In particular, describe which element took long to load. This is important because we don't always get reliable line numbers in stack traces, so the message has to be enough to debug any problems"", 'comment_created': datetime.datetime(2020, 8, 7, 20, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 467252775, 'comment_body': ""Could you dig a little into why just calling the function doesn't work? I don't see why it would matter whether we call the function or its lines, and we should avoid copying function code instead of calling the function"", 'comment_created': datetime.datetime(2020, 8, 7, 20, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 467253700, 'comment_body': ""Could you dig into why just calling the waitFor function doesn't work? Copying the function code is really not ideal"", 'comment_created': datetime.datetime(2020, 8, 7, 20, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 467325044, 'comment_body': ""I did some more experimenting and it seems like calling the function doesn't explicitly throw an exception which is why the catch block is never being reached. Now, I tried adding a `throw new Error(errorMessage);` in the `presenceOf` function and then it threw exceptions. But, having this would mean that we would have to wrap all invocations of the `presenceOf` function in a try-catch block, otherwise, they will throw errors in the absence of said element. Also, I don't see such a pattern of catching errors from waitFor functions elsewhere in the codebase."", 'comment_created': datetime.datetime(2020, 8, 7, 23, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467325054, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 7, 23, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467331705, 'comment_body': ""MAX_CUSTOM_LETTERS_FOR_OSK\r\n\r\n(Use more specific names. The current name doesn't specify what the limit is for. It doesn't specify whether it's an upper/lower limit. When naming things, try to be specific.)"", 'comment_created': datetime.datetime(2020, 8, 7, 23, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467332976, 'comment_body': ""No please don't add new jQuery constructs, here and elsewhere. Find a way to call the actual function."", 'comment_created': datetime.datetime(2020, 8, 8, 0, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467435089, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 8, 10, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467435115, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 8, 10, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467459348, 'comment_body': 'No -- I mentioned this already in chat. Use a different key for this case.', 'comment_created': datetime.datetime(2020, 8, 8, 12, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467459351, 'comment_body': ""Why do you still have a limit? Don't do that."", 'comment_created': datetime.datetime(2020, 8, 8, 12, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467465043, 'comment_body': ""I've removed it now. I thought we just need to see a sample of the output to verify manually."", 'comment_created': datetime.datetime(2020, 8, 8, 13, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467465044, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 8, 13, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467495828, 'comment_body': ""Update: I've used a much simpler approach (thanks @aks681!), which makes this problem obsolete. "", 'comment_created': datetime.datetime(2020, 8, 8, 19, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467497304, 'comment_body': 'nit: reusable', 'comment_created': datetime.datetime(2020, 8, 8, 19, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467497352, 'comment_body': ""No -- don't make any changes to the datastore. This is an _audit_ job. Do the migration in place using the conversion_fn."", 'comment_created': datetime.datetime(2020, 8, 8, 19, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467497403, 'comment_body': 'Do not modify constants.', 'comment_created': datetime.datetime(2020, 8, 8, 19, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467497499, 'comment_body': 'Is the e2e team ok with this? Seems like the sort of change that should be run past them. /cc @kevintab95 @nithusha21 @U8NWXD @DubeySandeep ', 'comment_created': datetime.datetime(2020, 8, 8, 19, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467511202, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 8, 22, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467511206, 'comment_body': ""I understand. I've made changes so that there are no changes made to the datastore."", 'comment_created': datetime.datetime(2020, 8, 8, 22, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467511226, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 8, 22, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467511236, 'comment_body': ""Oh, this is unintentional. This was just for testing locally, I've reverted it now."", 'comment_created': datetime.datetime(2020, 8, 8, 22, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467511901, 'comment_body': 'The numbers here seem wrong?', 'comment_created': datetime.datetime(2020, 8, 8, 22, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467511912, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 8, 8, 22, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467512114, 'comment_body': 'No, this test still tests migration of the previous exploration schema version to the latest one. (The setup involves bringing the exp to N-1, but the job itself is testing out the N-1 --> N migration.)', 'comment_created': datetime.datetime(2020, 8, 8, 22, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467512303, 'comment_body': ""Why do you need to change all these? The idea was to fix the start and end versions so that this doesn't need to be changed each time someone wants to do a migration."", 'comment_created': datetime.datetime(2020, 8, 8, 22, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467512307, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 8, 8, 22, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467516553, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 8, 8, 23, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467516563, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 8, 8, 23, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467516565, 'comment_body': 'Changed it now.', 'comment_created': datetime.datetime(2020, 8, 8, 23, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467516568, 'comment_body': ""I see. I've reverted these changes now."", 'comment_created': datetime.datetime(2020, 8, 8, 23, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467516570, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 8, 8, 23, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467527250, 'comment_body': ""@iamprayush Here's an example where we use a similar pattern:\r\n\r\nhttps://github.com/oppia/oppia/blob/develop/core/tests/protractor_utils/TopicsAndSkillsDashboardPage.js#L342\r\n\r\nI'll also dig into this some more on my end to see if I can figure out why it isn't working for you"", 'comment_created': datetime.datetime(2020, 8, 9, 2, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 467585534, 'comment_body': ""I see. I tried this pattern (I also called the click function inside the try block and it worked).\r\n```javascript\r\nfor (let letter of customLetters) {\r\n    await action.click('Math OSK Tab', elem.element(by.buttonText('abc')));\r\n    try {\r\n      await waitFor.presenceOf(\r\n        elem.element(by.buttonText(letter)),\r\n        'Letter took too long to be present.');\r\n      await elem.element(by.buttonText(letter)).click();\r\n    } catch (e) {\r\n      await action.click('Math OSK Tab', elem.element(by.buttonText('αβγ')));\r\n    }\r\n    await action.click('Math OSK Letter', elem.element(by.buttonText(letter)));\r\n  }\r\n```"", 'comment_created': datetime.datetime(2020, 8, 9, 13, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467593578, 'comment_body': ""We don't need to export these anymore do we?"", 'comment_created': datetime.datetime(2020, 8, 9, 14, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 467598208, 'comment_body': 'Yup, removed.', 'comment_created': datetime.datetime(2020, 8, 9, 15, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 467618143, 'comment_body': ""Typically we use ('SUCCESS', 1). (more semantic, for counting up the length). Please fix in a follow-up PR."", 'comment_created': datetime.datetime(2020, 8, 9, 19, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 467624293, 'comment_body': 'Will do! Added it to this [issue](https://github.com/oppia/oppia/issues/10229).', 'comment_created': datetime.datetime(2020, 8, 9, 20, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}]","[{'commit_sha': '83a17f7dd13ce984f67f268c4b7feee331bfe31d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dd414a4aaee7f220ebc8fe5ce7722af8791e0ff', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc13655bade0b548c8a27190efebef775b5ea651', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd59822de84c0ae87c18a7d803ddddd6c863cee8f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e19f26ca005cc49b71c726474bf15c4ebb8a56be', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36c92047920697d5d8f9de42cb375af4092b0b6e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '727cf9aef76219f9de7ffecb373da4a481bec40d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5ef9eb5fea32ba2f34898467ffcd5e815c21ebd', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34f973f2ac643d9406a6644ce55a7bc7fc33e556', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f267606ac5fdbb24171e133ec4c3618a1670d9c0', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffcfb5716a0b5359517c2b7dd3cb4369cf5744e2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14a9ceb49709eaa56c54d046f4865b69588b83ac', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5db554a5150cc17f0a25440046deb0bbdc57d68', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '640005fcc0ece82d57cba43a9706cbc444c1f7ec', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8f294d848b0d5c21291f1a61c4909797cbe4ddf', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8caeb74d97fb7de22dbdfe4174e2b16b851e6346', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91c0787e67235c0f8e5a32a4b1c12b5781cc51d0', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a81ab396a2e89b662f5d6b60f017a6262d4f8efb', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '290411377fc2523180b810273092bda0742ec260', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c45371f4e72b86e230b5c7cfa341e67496d9d4eb', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b62c5508cf6822e8667b276b857d72b4349381be', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e37114542e372aa263cae293558148c1d332bb2f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86557a5a4c5c1538d63786338308aedfe92cb3fc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5f0632ad9628eb059a7981b7c3a69c0272fc138', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a38ad962ffd57d686ea5580be9a25080c6cc1b4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '465ad1eb037e00da77281fd97cf64c4c4620ca51', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a473609437fd0eec1a8a20ca7746d07c38b2bd4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b506a59f3c2226a49e84aba7d713a5a75369584f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cafc4542e8ecbae2656019f84cd3dff9b1ca7505', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '741a7167537d499d7d25dfac5f0d9446aad7a1ef', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a791e5c2bbd2b269299834e291418dd0edbdb8b3', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12599ee44c2d4e0d88585eba899debd8347ab588', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b5a9dcb3c5ebd4cb8079294ea1bebbcb86ac963', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fb82cc3ede69f54929191300d8fe769f5cf7b8e', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35a80968b9720d7572d52f307391f9a20e4f9cd2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f683b84eda2d721bd417499862937b654d36bff', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8bd7b18f71c3deda24bb33824fa3ae7e5af2d2b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '197961471fcba1acbb12275fa8f414477cb5bed5', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9ff0a1142732825f6445acf40e66497d4b275bb', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1639a7ed533d86ca16937defec5dd758cf774a60', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eb2da24b5bbcd5caa7d0b4bcb25a97fe23cce54', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3265f4c8af7adce17d218944df672b7b758ff46', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a5a8cb8ed42fec0fc410a3abe1ab1d0d382c8d2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed19df504cd607208731b76ad6d37c804322e690', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59ba963fda9c8a50027a166a2c741dc0fc69fa8b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b82d5782ec73fc4e941a403825d35ff133b29486', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4d77a38d622020f0f343813df9cfe4eedb7fe5a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bdce116b0008394caeead160edd1668f8b44a69', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f85531feb38053f0edc49c6042a4ce3a895235c1', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23073780682f6baa9e4bc9fb352cad70bf6f875c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52a9dc55ed3935d657f5e5bbec6c01f32f361f59', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f6f5102907e36cd5a0c4e47695b6a24ce3c1790', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbac96b4201e9e7a530225909f1883778bb99a35', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b1c7aa8f952e1c1aa74dfed09460482badb6143', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0cf6788ff8c22f397cde899fe1416cfedb07d92', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ca8b72c992da6b466cd447746fe3ec9a66ab789', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce4d033459d786c37a23cbe0f794bb067a2b5d3d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9385a11960125a32db5b606ccc1af637f3426281', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd75dc54f2555aa473d2218f8ab5d3dbaa93fef45', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d453fa644ccb505b413b66f43b0359c43fb59c5', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a669454c68c77e5e058a68dfb2ddc66c2e8c2911', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '177a08e2c6b51e2c76ac7b15c95d871ac04fcf43', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bca161464be45ac95903e69da5e57c3b2cbb8ad', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e24e710b1bc4e00c4b13b59d49285b4aefbbd534', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe8ab304525110436a227e4ac78ba8648a8f11b1', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e61c336f33279045b20011c2908ec4fafcee11d5', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db47eb458e45e91b0cc0d223d612359c2dc33c4a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfe5f08284010fef7163cda2873e4041daf2c49b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58ebd63f4a5359dc2775074505ed346c326f3cca', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ce7d696a58bf44af24a609210e5313992aa79b2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '485f9a718fd029e76b2a65ab1ead3aadaa03b5cc', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4253044c7c217dc33e62175e5da629841d4d74b5', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9740e8c98517485a16e5a8020c5fcc2fabad198', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3d1a8667c1385c18a5b51363464c40245cba945', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f84f7ee443430b326d80c27c40543cafad7c4a48', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49b85ec9708c2ec919403f2bf7ff11d6e65fa30b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da22b9510dd94bc8c91880c28678e3b50577cdda', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7324d0f0f8addd5e9ddbc4356f633908ca711914', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f154d5661d5774c789496ab98d796b78a9e5074d', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}]",Prayush Dawda,35144226,,User,,27,,14,47
466144930,Fix #10229: Fixes bugs related to the new math interactions.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes #10229.
2. This PR does the following:

- Added a warning for keyboard users that enter invalid variables:
![invalidvar](https://user-images.githubusercontent.com/35144226/89910054-624b2980-dc0d-11ea-83c7-07aab12be21c.gif)

- Fixed a nit mentioned [here](https://github.com/oppia/oppia/pull/10136#discussion_r467618143) re audit job output.

- Removed the MathExpressionValidationOneOff job. ([link](https://github.com/oppia/oppia/blob/6f99ce42489ff0d0cca419e750c4f0e3759b4bd3/core/domain/exp_jobs_one_off.py#L164))

- Made the page scrollable when OSK is visible:
![oskscrollfix](https://user-images.githubusercontent.com/35144226/89910189-91619b00-dc0d-11ea-89a6-7884ef616f40.gif)


<details><summary>5 screenshots of the extensions suite success:</summary>

![1](https://user-images.githubusercontent.com/35144226/90152649-ab35e600-dda5-11ea-85b8-bdf4882af59c.png)
![2](https://user-images.githubusercontent.com/35144226/90152652-acffa980-dda5-11ea-858a-e1b199f8a4d6.png)
![3](https://user-images.githubusercontent.com/35144226/90152658-aec96d00-dda5-11ea-8ebe-0f92530203d3.png)
![4](https://user-images.githubusercontent.com/35144226/90152665-affa9a00-dda5-11ea-8f75-ff8810de5516.png)
![5](https://user-images.githubusercontent.com/35144226/90152669-b12bc700-dda5-11ea-823d-9c20dccd1079.png)

</details>

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10269,https://api.github.com/repos/oppia/oppia/pulls/10269,https://github.com/oppia/oppia/pull/10269,closed,229,309,20,21,11,26,0,2,[],2020-08-11 14:33:32+00:00,2020-08-16 13:28:32+00:00,428100.0,"4 days, 22:55:00","[{'comment_id': 468797462, 'comment_body': 'Along with this, you also modified the migration audit job, right? Worth removing that also here?', 'comment_created': datetime.datetime(2020, 8, 11, 18, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 468916196, 'comment_body': ""I'd already removed that in the previous PR so that audit job no more has a modified output for math interactions."", 'comment_created': datetime.datetime(2020, 8, 11, 23, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 468980096, 'comment_body': 'Here and below: can we force clients to pass in this param rather than providing a default value? DItto for ""algebraic"".\r\n\r\nIn general, prefer explicit passing in of params, especially where there isn\'t an obvious default choice that would hold for the majority of cases.', 'comment_created': datetime.datetime(2020, 8, 12, 3, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 469178915, 'comment_body': 'Got it. Done!', 'comment_created': datetime.datetime(2020, 8, 12, 11, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469663836, 'comment_body': 'As mentioned previously, force callers to pass in ""algebraic"" directly; don\'t have a default value.', 'comment_created': datetime.datetime(2020, 8, 13, 2, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 469887945, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 13, 11, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 470194554, 'comment_body': ""Why would this be undefined? If it is for NumericExpression, make sure to manually pass empty array, don't condition for undefined."", 'comment_created': datetime.datetime(2020, 8, 13, 19, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 470197970, 'comment_body': 'Actually, I just remembered another comment I had before, but for the backend: have validateAlgebraicExpression and validateNumericExpression instead as public functions for this service. If necessary they can delegate to a validateExpression() behind the scenes. That would be clearer for the callers than passing in ""true""/""false"".', 'comment_created': datetime.datetime(2020, 8, 13, 19, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 470219069, 'comment_body': ""I've fixed this now."", 'comment_created': datetime.datetime(2020, 8, 13, 20, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 470219099, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 13, 20, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 470224163, 'comment_body': ""No, please don't do this, @aks681 already pointed it out. Have every caller explicitly pass things in.\r\n\r\n@nishantwrp -- a question for you. Shouldn't this sort of thing be caught by the typescript checks? /cc @vojtechjelinek \r\n"", 'comment_created': datetime.datetime(2020, 8, 13, 20, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 470224379, 'comment_body': 'Extract just the common parts into _validateExpression() and name that function accordingly. Algebraic/numeric-specific stuff should be dealt with in the individual functions.', 'comment_created': datetime.datetime(2020, 8, 13, 20, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 470244527, 'comment_body': ""Nope! typescript doesn't throw an error on comparing an argument with `undefined` https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABADwBQEMBciDOUBOMYA5gJSIDeAUIrYjMIhogLxuLgAmApsEd53LU6IxOhp0AvlUlA"", 'comment_created': datetime.datetime(2020, 8, 13, 20, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 470265635, 'comment_body': ""Hi @nishantwrp -- no, what I mean is, shouldn't it prevent an undefined validVariablesList from being passed in, in the first place?"", 'comment_created': datetime.datetime(2020, 8, 13, 21, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 470272393, 'comment_body': ""Are you saying that can we call this function as\r\n\r\n validateAlgebraicExpression('some string', undefined);\r\n\r\n\r\nthen yes. we can assign null or undefined to any type."", 'comment_created': datetime.datetime(2020, 8, 13, 21, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 470275693, 'comment_body': ""Oh, that's annoying. Is there any setting to forbid that, in either the linter or TS checks? I can understand null, but we should prohibit undefined. /cc @vojtechjelinek "", 'comment_created': datetime.datetime(2020, 8, 13, 22, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 470275877, 'comment_body': ""(E.g. if a key in an object is missing, it's basically undefined, so if the TS checks are not checking for this then their utility is somewhat decreased.)"", 'comment_created': datetime.datetime(2020, 8, 13, 22, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 470276292, 'comment_body': 'Relevant? https://mariusschulz.com/blog/non-nullable-types-in-typescript#strict-null-checking\r\n\r\nEither we do it for both null + undefined, or we do it for just undefined, but this is one of the sorts of things that we ought to be catching.', 'comment_created': datetime.datetime(2020, 8, 13, 22, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 470278308, 'comment_body': 'Yup, I agree we can enable this check.', 'comment_created': datetime.datetime(2020, 8, 13, 22, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 470278708, 'comment_body': ""> (E.g. if a key in an object is missing, it's basically undefined, so if the TS checks are not checking for this then their utility is somewhat decreased.)\r\n\r\nI think ts would catch this. "", 'comment_created': datetime.datetime(2020, 8, 13, 22, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 470281586, 'comment_body': 'Thanks @nishantwrp. Filed https://github.com/oppia/oppia/issues/10327 and assigned to you. ', 'comment_created': datetime.datetime(2020, 8, 13, 22, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 470281939, 'comment_body': '(And @iamprayush -- just noting that you still have an action item on this comment thread: https://github.com/oppia/oppia/pull/10269#discussion_r470224163, despite the conversation after that not being relevant to this PR. Thanks!)', 'comment_created': datetime.datetime(2020, 8, 13, 22, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 470513440, 'comment_body': ""Yup, I've removed the undefined check completely now."", 'comment_created': datetime.datetime(2020, 8, 14, 9, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 470513462, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 14, 9, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 470517580, 'comment_body': 'Just to check -- do you already have a validation for ""exactly one equals sign""?', 'comment_created': datetime.datetime(2020, 8, 14, 9, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 470551044, 'comment_body': ""Hmm -- I've had this validation in the backend but for some reason in the frontend, I missed it. I've added it now along with tests, thanks for pointing this out!"", 'comment_created': datetime.datetime(2020, 8, 14, 10, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}]","[{'commit_sha': '294cf68dbcf8548321122455873b321a2633fda2', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c756fc14f9ec747513f910876a4f9b221519f583', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf7c347db2fe867d52f3117d69a9c25ccdfe512', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05e138d5bbaa9ed8c986f046a4a385e4d9a0dd0c', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e58aa9a52b6c7ece76f04681072dd4c3bb1b016', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81c47789f0b53df4378f52125a9fbc50f508a314', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35ac815e0e0f33b3757c14e0fe5ac2d5b102f02f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6788b888cfb7f6272f977d6152fe16d13e7bd92', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a97c0ddc0dfda505872b73a8e3291e458faf1ea4', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b0f13e6439be5254967705252267beb26dfca4a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c387974f0d3834d385814cec7eabf944f2a9a5f7', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd41276cf482d4bed7cd700674e4c5aff774a2f2a', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a63a2ab782c47fe37177c44df92fbb104c67805f', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0c12ef25263c6800c1902cf20c8d6d786098dfd', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '751d307fbc4ebeb82c6433e1547da04d2e8072d9', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f5f5a3fcc8e42750ae479a0819013f53c214384', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af74726ba2fe940ecc75a5211117ec8142d20609', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2158ec1c1834c88df31deac97c2829026959195', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4004d0efa568fbff4461e79115e08ffd05f8cec8', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b93d4e36e6d327bec6ba4ea9a8f0a3ba274370b', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34b1fcd5b533dee09d54dcbfe2869475891abceb', 'committer_username': 'iamprayush', 'committer_name': 'Prayush Dawda', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 5, 15, 51, 9, tzinfo=datetime.timezone.utc)}]",Prayush Dawda,35144226,,User,,27,,14,47

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
40687563,oppia,oppia/oppia,Python,3846,5717,241,775,15760,1412,418,20,"[{'id': 1145396890, 'number': 16665, 'closed': datetime.datetime(2022, 12, 7, 9, 18, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 4, 22, 23, 31, tzinfo=datetime.timezone.utc), 'time_taken': 212124.0, 'time_delta': '2 days, 10:55:24', 'additions': 147, 'deletions': 164, 'state': 'closed'}, {'id': 1073885773, 'number': 16189, 'closed': datetime.datetime(2022, 10, 2, 18, 43, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 2, 16, 30, 43, tzinfo=datetime.timezone.utc), 'time_taken': 7992.0, 'time_delta': '2:13:12', 'additions': 178, 'deletions': 0, 'state': 'closed'}, {'id': 1066389101, 'number': 16143, 'closed': datetime.datetime(2022, 10, 2, 16, 2, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 25, 20, 47, 1, tzinfo=datetime.timezone.utc), 'time_taken': 587733.0, 'time_delta': '6 days, 19:15:33', 'additions': 6323, 'deletions': 1380, 'state': 'closed'}, {'id': 1039870068, 'number': 15963, 'closed': datetime.datetime(2022, 9, 20, 19, 25, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 29, 15, 32, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1914772.0, 'time_delta': '22 days, 3:52:52', 'additions': 170, 'deletions': 0, 'state': 'closed'}, {'id': 1017494606, 'number': 15844, 'closed': datetime.datetime(2022, 8, 6, 13, 37, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 12, 55, 45, tzinfo=datetime.timezone.utc), 'time_taken': 175296.0, 'time_delta': '2 days, 0:41:36', 'additions': 19, 'deletions': 11, 'state': 'closed'}, {'id': 967329044, 'number': 15585, 'closed': datetime.datetime(2022, 6, 15, 9, 57, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 14, 19, 33, 19, tzinfo=datetime.timezone.utc), 'time_taken': 51862.0, 'time_delta': '14:24:22', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 959547252, 'number': 15545, 'closed': datetime.datetime(2022, 7, 5, 20, 42, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 6, 20, 2, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2508046.0, 'time_delta': '29 days, 0:40:46', 'additions': 296, 'deletions': 60, 'state': 'closed'}, {'id': 900584220, 'number': 15271, 'closed': datetime.datetime(2022, 6, 2, 17, 51, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 5, 18, 31, 5, tzinfo=datetime.timezone.utc), 'time_taken': 5008823.0, 'time_delta': '57 days, 23:20:23', 'additions': 3670, 'deletions': 837, 'state': 'closed'}, {'id': 858528507, 'number': 14977, 'closed': datetime.datetime(2022, 4, 1, 12, 37, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 19, 10, 35, 35, tzinfo=datetime.timezone.utc), 'time_taken': 3549734.0, 'time_delta': '41 days, 2:02:14', 'additions': 590, 'deletions': 118, 'state': 'closed'}, {'id': 854849662, 'number': 14952, 'closed': datetime.datetime(2022, 4, 1, 6, 18, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 16, 21, 36, tzinfo=datetime.timezone.utc), 'time_taken': 3746535.0, 'time_delta': '43 days, 8:42:15', 'additions': 311, 'deletions': 0, 'state': 'closed'}, {'id': 774872197, 'number': 14197, 'closed': datetime.datetime(2022, 1, 21, 6, 10, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 6, 22, 55, 17, tzinfo=datetime.timezone.utc), 'time_taken': 6506141.0, 'time_delta': '75 days, 7:15:41', 'additions': 471, 'deletions': 227, 'state': 'closed'}, {'id': 746903320, 'number': 13962, 'closed': datetime.datetime(2021, 10, 1, 11, 41, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 30, 17, 24, 59, tzinfo=datetime.timezone.utc), 'time_taken': 65810.0, 'time_delta': '18:16:50', 'additions': 10, 'deletions': 10, 'state': 'closed'}, {'id': 715411094, 'number': 13706, 'closed': datetime.datetime(2021, 8, 20, 11, 45, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 20, 57, 19, tzinfo=datetime.timezone.utc), 'time_taken': 139697.0, 'time_delta': '1 day, 14:48:17', 'additions': 9, 'deletions': 4, 'state': 'closed'}, {'id': 711540224, 'number': 13643, 'closed': datetime.datetime(2021, 8, 23, 8, 51, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 20, 18, 57, tzinfo=datetime.timezone.utc), 'time_taken': 909158.0, 'time_delta': '10 days, 12:32:38', 'additions': 678, 'deletions': 8, 'state': 'closed'}, {'id': 701720051, 'number': 13553, 'closed': datetime.datetime(2021, 8, 3, 20, 26, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 19, 17, 59, tzinfo=datetime.timezone.utc), 'time_taken': 90483.0, 'time_delta': '1 day, 1:08:03', 'additions': 5, 'deletions': 6, 'state': 'closed'}, {'id': 696550115, 'number': 13488, 'closed': datetime.datetime(2021, 8, 12, 5, 30, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 19, 10, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1506021.0, 'time_delta': '17 days, 10:20:21', 'additions': 972, 'deletions': 1183, 'state': 'closed'}, {'id': 673048336, 'number': 13120, 'closed': datetime.datetime(2021, 7, 9, 10, 20, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 22, 58, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1855311.0, 'time_delta': '21 days, 11:21:51', 'additions': 690, 'deletions': 4, 'state': 'closed'}, {'id': 620086982, 'number': 12578, 'closed': datetime.datetime(2021, 5, 22, 19, 51, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 21, 10, 46, 33, tzinfo=datetime.timezone.utc), 'time_taken': 2711092.0, 'time_delta': '31 days, 9:04:52', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 617541012, 'number': 12548, 'closed': datetime.datetime(2021, 5, 18, 2, 11, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 18, 19, 28, 54, tzinfo=datetime.timezone.utc), 'time_taken': 2529741.0, 'time_delta': '29 days, 6:42:21', 'additions': 9, 'deletions': 7, 'state': 'closed'}, {'id': 612749642, 'number': 12483, 'closed': datetime.datetime(2021, 4, 13, 13, 41, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 9, 21, 59, 38, tzinfo=datetime.timezone.utc), 'time_taken': 315691.0, 'time_delta': '3 days, 15:41:31', 'additions': 565, 'deletions': 38, 'state': 'closed'}, {'id': 581486582, 'number': 12057, 'closed': datetime.datetime(2021, 3, 21, 15, 43, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 28, 9, 50, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1835589.0, 'time_delta': '21 days, 5:53:09', 'additions': 248, 'deletions': 89, 'state': 'closed'}, {'id': 547692131, 'number': 11573, 'closed': datetime.datetime(2021, 1, 28, 14, 22, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 2, 0, 0, 34, tzinfo=datetime.timezone.utc), 'time_taken': 2298137.0, 'time_delta': '26 days, 14:22:17', 'additions': 155, 'deletions': 62, 'state': 'closed'}, {'id': 545276431, 'number': 11491, 'closed': datetime.datetime(2020, 12, 30, 3, 9, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 24, 11, 37, 35, tzinfo=datetime.timezone.utc), 'time_taken': 487925.0, 'time_delta': '5 days, 15:32:05', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 543373045, 'number': 11459, 'closed': datetime.datetime(2020, 12, 22, 16, 28, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 21, 9, 55, 11, tzinfo=datetime.timezone.utc), 'time_taken': 110005.0, 'time_delta': '1 day, 6:33:25', 'additions': 13, 'deletions': 15, 'state': 'closed'}, {'id': 543355823, 'number': 11458, 'closed': datetime.datetime(2020, 12, 21, 20, 56, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 21, 9, 23, 9, tzinfo=datetime.timezone.utc), 'time_taken': 41619.0, 'time_delta': '11:33:39', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 518411207, 'number': 11164, 'closed': datetime.datetime(2020, 11, 16, 21, 58, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 10, 11, 12, 22, tzinfo=datetime.timezone.utc), 'time_taken': 557197.0, 'time_delta': '6 days, 10:46:37', 'additions': 81, 'deletions': 3, 'state': 'closed'}, {'id': 506366413, 'number': 11013, 'closed': datetime.datetime(2020, 10, 23, 0, 29, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 20, 0, 25, 8, tzinfo=datetime.timezone.utc), 'time_taken': 259488.0, 'time_delta': '3 days, 0:04:48', 'additions': 34, 'deletions': 1, 'state': 'closed'}, {'id': 494727105, 'number': 10815, 'closed': datetime.datetime(2020, 10, 7, 3, 10, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 29, 10, 28, 42, tzinfo=datetime.timezone.utc), 'time_taken': 664915.0, 'time_delta': '7 days, 16:41:55', 'additions': 530, 'deletions': 66, 'state': 'closed'}, {'id': 477901767, 'number': 10539, 'closed': datetime.datetime(2020, 9, 18, 5, 42, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 2, 15, 29, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1347165.0, 'time_delta': '15 days, 14:12:45', 'additions': 35, 'deletions': 2, 'state': 'closed'}, {'id': 477089119, 'number': 10521, 'closed': datetime.datetime(2020, 9, 4, 13, 29, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 1, 13, 39, 42, tzinfo=datetime.timezone.utc), 'time_taken': 258562.0, 'time_delta': '2 days, 23:49:22', 'additions': 40, 'deletions': 4, 'state': 'closed'}, {'id': 476241410, 'number': 10510, 'closed': datetime.datetime(2020, 9, 15, 7, 56, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 11, 37, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1282745.0, 'time_delta': '14 days, 20:19:05', 'additions': 178, 'deletions': 0, 'state': 'closed'}, {'id': 475875748, 'number': 10492, 'closed': datetime.datetime(2020, 9, 1, 8, 9, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 30, 7, 28, 29, tzinfo=datetime.timezone.utc), 'time_taken': 175289.0, 'time_delta': '2 days, 0:41:29', 'additions': 79, 'deletions': 38, 'state': 'closed'}, {'id': 474845366, 'number': 10468, 'closed': datetime.datetime(2020, 8, 28, 22, 21, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 17, 25, 54, tzinfo=datetime.timezone.utc), 'time_taken': 104137.0, 'time_delta': '1 day, 4:55:37', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 472500316, 'number': 10424, 'closed': datetime.datetime(2020, 9, 15, 7, 25, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 13, 0, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1880715.0, 'time_delta': '21 days, 18:25:15', 'additions': 365, 'deletions': 23, 'state': 'closed'}, {'id': 471534467, 'number': 10405, 'closed': datetime.datetime(2020, 8, 31, 12, 15, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 9, 54, 22, tzinfo=datetime.timezone.utc), 'time_taken': 872497.0, 'time_delta': '10 days, 2:21:37', 'additions': 26, 'deletions': 1, 'state': 'closed'}, {'id': 468448558, 'number': 10361, 'closed': datetime.datetime(2020, 8, 21, 16, 41, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 16, 14, 1, 13, tzinfo=datetime.timezone.utc), 'time_taken': 441609.0, 'time_delta': '5 days, 2:40:09', 'additions': 9, 'deletions': 997, 'state': 'closed'}, {'id': 467511505, 'number': 10321, 'closed': datetime.datetime(2020, 8, 21, 7, 40, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 16, 48, 6, tzinfo=datetime.timezone.utc), 'time_taken': 658344.0, 'time_delta': '7 days, 14:52:24', 'additions': 885, 'deletions': 29, 'state': 'closed'}, {'id': 466144930, 'number': 10269, 'closed': datetime.datetime(2020, 8, 16, 13, 28, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 14, 33, 32, tzinfo=datetime.timezone.utc), 'time_taken': 428100.0, 'time_delta': '4 days, 22:55:00', 'additions': 229, 'deletions': 309, 'state': 'closed'}, {'id': 461245928, 'number': 10136, 'closed': datetime.datetime(2020, 8, 9, 20, 26, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 1, 16, 40, 46, tzinfo=datetime.timezone.utc), 'time_taken': 704771.0, 'time_delta': '8 days, 3:46:11', 'additions': 1379, 'deletions': 207, 'state': 'closed'}, {'id': 456997052, 'number': 10062, 'closed': datetime.datetime(2020, 7, 27, 8, 38, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 8, 28, 2, tzinfo=datetime.timezone.utc), 'time_taken': 633.0, 'time_delta': '0:10:33', 'additions': 418, 'deletions': 96, 'state': 'closed'}, {'id': 453770666, 'number': 9978, 'closed': datetime.datetime(2020, 7, 25, 21, 36, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 19, 39, 15, tzinfo=datetime.timezone.utc), 'time_taken': 439050.0, 'time_delta': '5 days, 1:57:30', 'additions': 960, 'deletions': 96, 'state': 'closed'}, {'id': 447114103, 'number': 9863, 'closed': datetime.datetime(2020, 7, 28, 21, 36, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 21, 57, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1640362.0, 'time_delta': '18 days, 23:39:22', 'additions': 2163, 'deletions': 1278, 'state': 'closed'}, {'id': 445384633, 'number': 9822, 'closed': datetime.datetime(2020, 7, 15, 22, 45, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 12, 36, 53, tzinfo=datetime.timezone.utc), 'time_taken': 727695.0, 'time_delta': '8 days, 10:08:15', 'additions': 1881, 'deletions': 110, 'state': 'closed'}, {'id': 444810576, 'number': 9806, 'closed': datetime.datetime(2020, 7, 7, 18, 25, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 14, 25, 30, tzinfo=datetime.timezone.utc), 'time_taken': 100796.0, 'time_delta': '1 day, 3:59:56', 'additions': 4, 'deletions': 7, 'state': 'closed'}, {'id': 444292332, 'number': 9785, 'closed': datetime.datetime(2020, 7, 4, 17, 56, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 4, 14, 41, 52, tzinfo=datetime.timezone.utc), 'time_taken': 11682.0, 'time_delta': '3:14:42', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 439802994, 'number': 9658, 'closed': datetime.datetime(2020, 6, 27, 8, 26, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 8, 12, 28, tzinfo=datetime.timezone.utc), 'time_taken': 173650.0, 'time_delta': '2 days, 0:14:10', 'additions': 179, 'deletions': 27, 'state': 'closed'}, {'id': 439415514, 'number': 9649, 'closed': datetime.datetime(2020, 6, 29, 14, 24, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 19, 21, 4, tzinfo=datetime.timezone.utc), 'time_taken': 414179.0, 'time_delta': '4 days, 19:02:59', 'additions': 1959, 'deletions': 106, 'state': 'closed'}, {'id': 437433513, 'number': 9597, 'closed': datetime.datetime(2020, 6, 27, 3, 34, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 16, 41, 1, tzinfo=datetime.timezone.utc), 'time_taken': 557615.0, 'time_delta': '6 days, 10:53:35', 'additions': 396, 'deletions': 43, 'state': 'closed'}, {'id': 435245773, 'number': 9553, 'closed': datetime.datetime(2020, 6, 27, 5, 56, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 14, 14, 25, tzinfo=datetime.timezone.utc), 'time_taken': 920509.0, 'time_delta': '10 days, 15:41:49', 'additions': 1929, 'deletions': 231, 'state': 'closed'}, {'id': 431276894, 'number': 9460, 'closed': datetime.datetime(2020, 6, 13, 10, 3, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 17, 2, 37, tzinfo=datetime.timezone.utc), 'time_taken': 406880.0, 'time_delta': '4 days, 17:01:20', 'additions': 362, 'deletions': 229, 'state': 'closed'}, {'id': 425441169, 'number': 9400, 'closed': datetime.datetime(2020, 6, 20, 20, 24, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 30, 9, 32, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1853528.0, 'time_delta': '21 days, 10:52:08', 'additions': 445, 'deletions': 28, 'state': 'closed'}, {'id': 425147709, 'number': 9394, 'closed': datetime.datetime(2020, 5, 30, 0, 22, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 29, 14, 43, 50, tzinfo=datetime.timezone.utc), 'time_taken': 34732.0, 'time_delta': '9:38:52', 'additions': 12, 'deletions': 8, 'state': 'closed'}, {'id': 420808095, 'number': 9336, 'closed': datetime.datetime(2020, 6, 13, 8, 17, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 14, 57, 49, tzinfo=datetime.timezone.utc), 'time_taken': 2049560.0, 'time_delta': '23 days, 17:19:20', 'additions': 1225, 'deletions': 3, 'state': 'closed'}, {'id': 418044831, 'number': 9312, 'closed': datetime.datetime(2020, 5, 19, 2, 55, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 14, 44, 50, tzinfo=datetime.timezone.utc), 'time_taken': 389463.0, 'time_delta': '4 days, 12:11:03', 'additions': 179, 'deletions': 27, 'state': 'closed'}, {'id': 417471943, 'number': 9305, 'closed': datetime.datetime(2020, 5, 15, 2, 57, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 16, 21, 14, tzinfo=datetime.timezone.utc), 'time_taken': 124582.0, 'time_delta': '1 day, 10:36:22', 'additions': 55, 'deletions': 1, 'state': 'closed'}, {'id': 413644210, 'number': 9252, 'closed': datetime.datetime(2020, 5, 29, 12, 1, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 5, 17, 9, 15, tzinfo=datetime.timezone.utc), 'time_taken': 2055134.0, 'time_delta': '23 days, 18:52:14', 'additions': 189, 'deletions': 118, 'state': 'closed'}, {'id': 410997321, 'number': 9191, 'closed': datetime.datetime(2020, 5, 21, 9, 7, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 29, 22, 51, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1851327.0, 'time_delta': '21 days, 10:15:27', 'additions': 514, 'deletions': 60, 'state': 'closed'}, {'id': 407777569, 'number': 9141, 'closed': datetime.datetime(2020, 4, 29, 22, 17, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 23, 8, 58, 54, tzinfo=datetime.timezone.utc), 'time_taken': 566331.0, 'time_delta': '6 days, 13:18:51', 'additions': 89, 'deletions': 48, 'state': 'closed'}, {'id': 405460278, 'number': 9109, 'closed': datetime.datetime(2020, 5, 3, 21, 41, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 18, 7, 44, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1346220.0, 'time_delta': '15 days, 13:57:00', 'additions': 150, 'deletions': 132, 'state': 'closed'}, {'id': 403692787, 'number': 9093, 'closed': datetime.datetime(2020, 4, 18, 22, 2, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 15, 11, 7, 18, tzinfo=datetime.timezone.utc), 'time_taken': 298515.0, 'time_delta': '3 days, 10:55:15', 'additions': 57, 'deletions': 0, 'state': 'closed'}, {'id': 402526129, 'number': 9073, 'closed': datetime.datetime(2020, 4, 14, 15, 8, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 13, 8, 4, 14, tzinfo=datetime.timezone.utc), 'time_taken': 111838.0, 'time_delta': '1 day, 7:03:58', 'additions': 13, 'deletions': 3, 'state': 'closed'}, {'id': 402370951, 'number': 9067, 'closed': datetime.datetime(2020, 4, 14, 12, 27, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 12, 17, 20, 25, tzinfo=datetime.timezone.utc), 'time_taken': 155240.0, 'time_delta': '1 day, 19:07:20', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 402206539, 'number': 9051, 'closed': datetime.datetime(2020, 4, 12, 7, 31, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 11, 15, 34, 33, tzinfo=datetime.timezone.utc), 'time_taken': 57412.0, 'time_delta': '15:56:52', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 401516921, 'number': 9032, 'closed': datetime.datetime(2020, 4, 12, 16, 52, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 9, 16, 16, tzinfo=datetime.timezone.utc), 'time_taken': 261395.0, 'time_delta': '3 days, 0:36:35', 'additions': 55, 'deletions': 0, 'state': 'closed'}, {'id': 396947643, 'number': 8960, 'closed': datetime.datetime(2020, 4, 3, 21, 2, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 1, 11, 55, 36, tzinfo=datetime.timezone.utc), 'time_taken': 205598.0, 'time_delta': '2 days, 9:06:38', 'additions': 8, 'deletions': 14, 'state': 'closed'}, {'id': 385957758, 'number': 8798, 'closed': datetime.datetime(2020, 3, 13, 2, 4, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 10, 6, 22, 48, tzinfo=datetime.timezone.utc), 'time_taken': 243703.0, 'time_delta': '2 days, 19:41:43', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 385753637, 'number': 8795, 'closed': datetime.datetime(2020, 3, 12, 3, 17, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 18, 37, 20, tzinfo=datetime.timezone.utc), 'time_taken': 203997.0, 'time_delta': '2 days, 8:39:57', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 382438522, 'number': 8755, 'closed': datetime.datetime(2020, 3, 30, 0, 27, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 2, 15, 10, 43, tzinfo=datetime.timezone.utc), 'time_taken': 2366202.0, 'time_delta': '27 days, 9:16:42', 'additions': 471, 'deletions': 71, 'state': 'closed'}, {'id': 376545771, 'number': 8671, 'closed': datetime.datetime(2020, 2, 22, 18, 5, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 18, 10, 48, 33, tzinfo=datetime.timezone.utc), 'time_taken': 371815.0, 'time_delta': '4 days, 7:16:55', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 376514065, 'number': 8669, 'closed': datetime.datetime(2020, 3, 13, 19, 52, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 18, 9, 45, 4, tzinfo=datetime.timezone.utc), 'time_taken': 2110049.0, 'time_delta': '24 days, 10:07:29', 'additions': 212, 'deletions': 2, 'state': 'closed'}, {'id': 375730704, 'number': 8648, 'closed': datetime.datetime(2020, 2, 19, 12, 26, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 15, 16, 0, 41, tzinfo=datetime.timezone.utc), 'time_taken': 332739.0, 'time_delta': '3 days, 20:25:39', 'additions': 6, 'deletions': 57, 'state': 'closed'}, {'id': 375390931, 'number': 8638, 'closed': datetime.datetime(2020, 2, 29, 19, 58, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 14, 13, 34, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1319073.0, 'time_delta': '15 days, 6:24:33', 'additions': 377, 'deletions': 29, 'state': 'closed'}, {'id': 374258998, 'number': 8627, 'closed': datetime.datetime(2020, 2, 13, 1, 59, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 12, 11, 36, 55, tzinfo=datetime.timezone.utc), 'time_taken': 51735.0, 'time_delta': '14:22:15', 'additions': 215, 'deletions': 21, 'state': 'closed'}, {'id': 372329571, 'number': 8573, 'closed': datetime.datetime(2020, 3, 6, 20, 3, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 7, 10, 4, 21, tzinfo=datetime.timezone.utc), 'time_taken': 2455122.0, 'time_delta': '28 days, 9:58:42', 'additions': 28, 'deletions': 2, 'state': 'closed'}, {'id': 372237727, 'number': 8572, 'closed': datetime.datetime(2020, 2, 7, 18, 25, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 7, 5, 10, 3, tzinfo=datetime.timezone.utc), 'time_taken': 47706.0, 'time_delta': '13:15:06', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 371003149, 'number': 8556, 'closed': datetime.datetime(2020, 2, 8, 18, 20, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 4, 19, 10, 33, tzinfo=datetime.timezone.utc), 'time_taken': 342599.0, 'time_delta': '3 days, 23:09:59', 'additions': 26, 'deletions': 3, 'state': 'closed'}, {'id': 367952349, 'number': 8511, 'closed': datetime.datetime(2020, 2, 12, 16, 7, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 28, 11, 6, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1314051.0, 'time_delta': '15 days, 5:00:51', 'additions': 138, 'deletions': 7, 'state': 'closed'}, {'id': 365486009, 'number': 8467, 'closed': datetime.datetime(2020, 1, 26, 1, 1, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 21, 20, 4, 13, tzinfo=datetime.timezone.utc), 'time_taken': 363441.0, 'time_delta': '4 days, 4:57:21', 'additions': 13, 'deletions': 17, 'state': 'closed'}, {'id': 364530593, 'number': 8454, 'closed': datetime.datetime(2020, 1, 27, 20, 8, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 19, 12, 42, 32, tzinfo=datetime.timezone.utc), 'time_taken': 717943.0, 'time_delta': '8 days, 7:25:43', 'additions': 27, 'deletions': 13, 'state': 'closed'}, {'id': 364473621, 'number': 8451, 'closed': datetime.datetime(2020, 1, 19, 12, 43, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 18, 22, 48, 33, tzinfo=datetime.timezone.utc), 'time_taken': 50107.0, 'time_delta': '13:55:07', 'additions': 20, 'deletions': 12, 'state': 'closed'}, {'id': 363144700, 'number': 8428, 'closed': datetime.datetime(2020, 1, 23, 4, 50, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 15, 13, 44, 50, tzinfo=datetime.timezone.utc), 'time_taken': 659146.0, 'time_delta': '7 days, 15:05:46', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 362261360, 'number': 8420, 'closed': datetime.datetime(2020, 1, 24, 17, 21, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 13, 18, 32, 39, tzinfo=datetime.timezone.utc), 'time_taken': 946137.0, 'time_delta': '10 days, 22:48:57', 'additions': 32, 'deletions': 18, 'state': 'closed'}, {'id': 361806796, 'number': 8405, 'closed': datetime.datetime(2020, 1, 15, 15, 35, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 12, 8, 24, 32, tzinfo=datetime.timezone.utc), 'time_taken': 285054.0, 'time_delta': '3 days, 7:10:54', 'additions': 36, 'deletions': 12, 'state': 'closed'}, {'id': 361737318, 'number': 8395, 'closed': datetime.datetime(2020, 1, 11, 23, 57, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 11, 15, 9, 48, tzinfo=datetime.timezone.utc), 'time_taken': 31645.0, 'time_delta': '8:47:25', 'additions': 189, 'deletions': 53, 'state': 'closed'}, {'id': 358722819, 'number': 8328, 'closed': datetime.datetime(2020, 1, 10, 15, 49, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 2, 16, 51, 36, tzinfo=datetime.timezone.utc), 'time_taken': 687503.0, 'time_delta': '7 days, 22:58:23', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 357814678, 'number': 8310, 'closed': datetime.datetime(2020, 1, 1, 15, 39, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 29, 20, 1, 8, tzinfo=datetime.timezone.utc), 'time_taken': 243496.0, 'time_delta': '2 days, 19:38:16', 'additions': 20, 'deletions': 7, 'state': 'closed'}, {'id': 356767862, 'number': 8288, 'closed': datetime.datetime(2019, 12, 28, 18, 37, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 25, 8, 56, 16, tzinfo=datetime.timezone.utc), 'time_taken': 294063.0, 'time_delta': '3 days, 9:41:03', 'additions': 196, 'deletions': 4, 'state': 'closed'}]"
