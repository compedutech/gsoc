pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1419244791,Feat[WIP]: JIT compiled SQL expressions,"## Summary

MCS uses interepreted execution to calculate SQL expressions results. Here is an example of a SQL expression 'table1.col1 + FLOOR(table2.col1)'. Given that table1.col1 is DECIMAL and table2.col1 is DOUBLE there is a number of conditions that drives the calculation of this relatively simple example in runtime. Given that SQL types and expression tree are known before the query begins it is possible to replace interpretation with JIT to produce specialized compiled bytecode that is:

small
has no or almost no branches
optimized for the specific platform it is run at
This is a research mostly project which goal is to produce a set of microbenchmarks that:

leverages any JIT compiler available, e.g. LLVM, MIR
demonstrates a negative and positive effects of using JIT


## Related

[gsoc-2023](https://summerofcode.withgoogle.com/programs/2023/projects/hLufFI1y)",False,2891,https://api.github.com/repos/mariadb-corporation/mariadb-columnstore-engine/pulls/2891,https://github.com/mariadb-corporation/mariadb-columnstore-engine/pull/2891,closed,8342,2302,80,21,1,28,0,0,[],2023-07-04 08:50:53+00:00,2024-07-31 13:51:53+00:00,33973260.0,"393 days, 5:01:00","[{'comment_id': 1254288163, 'comment_body': 'Which code or data structure owns the memory that `module` referes to here? Could the memory actually be freed in the `erase` call? If so, then these statements should be swapped with each other to make the code safe.', 'comment_created': datetime.datetime(2023, 7, 6, 11, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dr-m', 'type': 'User'}, {'comment_id': 1254291620, 'comment_body': 'For any mutex or any potentially concurrently accessed data structure, it would be useful to document the protection rules. Many of these data members are actually protected by `jit_lock` in `deleteCompiledModule()`.', 'comment_created': datetime.datetime(2023, 7, 6, 11, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'dr-m', 'type': 'User'}, {'comment_id': 1254296914, 'comment_body': 'Iâ€™d like to see comment for  documenting the lifetime and purpose of each data member. For `compiled_code_size` it would be useful to know what (if any) kind of padding or alignment overhead it would include.\r\n\r\nDue to the lack of comments, it took me some time to find a counterpart of `deleteCompiledModule()` that would increment `compiled_code_size` and add something to `module_identifier_to_memory_manager`. It is `compileModule(std::unique_ptr<llvm::Module>)`. It seems to lack proper `jit_lock` protection.', 'comment_created': datetime.datetime(2023, 7, 6, 11, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dr-m', 'type': 'User'}, {'comment_id': 1254297952, 'comment_body': 'We could live with an implicit default constructor if the initializer expression for `page_size` was revised to this value.', 'comment_created': datetime.datetime(2023, 7, 6, 11, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dr-m', 'type': 'User'}, {'comment_id': 1254303121, 'comment_body': 'I do not see any modification of this `page_size` in the code. I think that it could be declared simply as\r\n```c++\r\n  const size_t page_size = 8;\r\n```\r\nor even `static const` or `static constexpr` to save some memory, and then we could avoid explicitly declaring `Arena()`. I think that it is rather pointless to declare `const` data members `private` and to define public accessors for them.\r\n\r\nWhat is the unit here? Bytes? Kilobytes? Some comments would be helpful.\r\n\r\nTypically, `sysconf(PAGESIZE)` should return 4096 or a larger value.', 'comment_created': datetime.datetime(2023, 7, 6, 11, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dr-m', 'type': 'User'}, {'comment_id': 1254305763, 'comment_body': 'It looks like the actual interesting part is still missing. The body of `compile()` seems to be missing `return nullptr;`.', 'comment_created': datetime.datetime(2023, 7, 6, 11, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dr-m', 'type': 'User'}, {'comment_id': 1254306824, 'comment_body': 'The member function body does not look like valid C++ to me.', 'comment_created': datetime.datetime(2023, 7, 6, 11, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dr-m', 'type': 'User'}, {'comment_id': 1254311701, 'comment_body': 'This is a rather large header file that will `#include` many other header files. I think that including that kind of a ""jungle"" in a rather popular header file (`functor.h` is being included from many other header files, which in turn could be included from many compilation units) could significantly include the compilation time.\r\n\r\nWe only seem to need this for the type name `llvm::Value`, which `compile()` would return a pointer to. I think that it would be better to define an opaque type and avoid including the header here. Something like this might work:\r\n```c++\r\nnamespace llvm { class Value; }\r\n```', 'comment_created': datetime.datetime(2023, 7, 6, 11, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dr-m', 'type': 'User'}, {'comment_id': 1304184178, 'comment_body': 'I would suggest\r\n```c++\r\nfunc->setDoesNotThrow();\r\n```\r\nso that no `.eh_frame` or `.rela.eh_frame` section will be generated.', 'comment_created': datetime.datetime(2023, 8, 24, 11, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dr-m', 'type': 'User'}, {'comment_id': 1304188031, 'comment_body': 'Can multiple `compiled_function_` be set at a time?', 'comment_created': datetime.datetime(2023, 8, 24, 11, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'dr-m', 'type': 'User'}, {'comment_id': 1304189991, 'comment_body': '`compiled_function_uint64` seems to be unused. Do we really need this distinction? The ABI for signed and unsigned should be the same.\r\n\r\nI would suggest to add some tests and to demonstrate that all this code is covered by the test cases.', 'comment_created': datetime.datetime(2023, 8, 24, 11, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dr-m', 'type': 'User'}, {'comment_id': 1304190987, 'comment_body': 'Could we simply have one `compiled_function` member that will be `reinterpret_cast` to the appropriate type? That could avoid some run-time code duplication.', 'comment_created': datetime.datetime(2023, 8, 24, 11, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dr-m', 'type': 'User'}, {'comment_id': 1328642457, 'comment_body': 'We use c++20 if compiler handles it [via compiler flags](https://github.com/mariadb-corporation/mariadb-columnstore-engine/blob/develop/CMakeLists.txt#L53C1-L53C1). Is this set is necessary?', 'comment_created': datetime.datetime(2023, 9, 18, 12, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 1328643400, 'comment_body': 'This directory must be moved into ./utils and the paths changed accordingly.', 'comment_created': datetime.datetime(2023, 9, 18, 12, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 1328650655, 'comment_body': 'You can drop ${NETSNMP_LIBRARIES} as this is an obsolete prerequisite.', 'comment_created': datetime.datetime(2023, 9, 18, 12, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 1328675900, 'comment_body': 'How many times compileExternalFunction will be actually called?', 'comment_created': datetime.datetime(2023, 9, 18, 12, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 1328679015, 'comment_body': 'I suppose these two lines will go away.', 'comment_created': datetime.datetime(2023, 9, 18, 12, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 1328702014, 'comment_body': 'No, only one pointer will be set at a time.', 'comment_created': datetime.datetime(2023, 9, 18, 13, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'noorall', 'type': 'User'}, {'comment_id': 1328706256, 'comment_body': '```suggestion\r\n  inline llvm::Value* compileInt_(llvm::IRBuilder<>& b, llvm::Value* l, llvm::Value* r);\r\n```', 'comment_created': datetime.datetime(2023, 9, 18, 13, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 1328706552, 'comment_body': '```suggestion\r\n  inline llvm::Value* compileFloat_(llvm::IRBuilder<>& b, llvm::Value* l, llvm::Value* r);\r\n```', 'comment_created': datetime.datetime(2023, 9, 18, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 1328715860, 'comment_body': 'I am curious why do you think this functionality belongs here and not to jit directory?', 'comment_created': datetime.datetime(2023, 9, 18, 13, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'drrtuy', 'type': 'User'}, {'comment_id': 1328738171, 'comment_body': 'The initial idea was to maintain consistency in function call behavior. It seems better to add a tool class in the jit directory to make the JIT code more centralized.', 'comment_created': datetime.datetime(2023, 9, 18, 13, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'noorall', 'type': 'User'}, {'comment_id': 1334385613, 'comment_body': 'It is necessary. If it is not specified as 14 during compilation, an error will be reported.', 'comment_created': datetime.datetime(2023, 9, 22, 13, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'noorall', 'type': 'User'}, {'comment_id': 1334437165, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 9, 22, 14, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'noorall', 'type': 'User'}, {'comment_id': 1334441176, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 9, 22, 14, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'noorall', 'type': 'User'}, {'comment_id': 1334441814, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 9, 22, 14, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'noorall', 'type': 'User'}, {'comment_id': 1334446785, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 9, 22, 14, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'noorall', 'type': 'User'}, {'comment_id': 1335634692, 'comment_body': '> I am curious why do you think this functionality belongs here and not to jit directory?\r\n\r\nI have moved it to a compilehelper class.', 'comment_created': datetime.datetime(2023, 9, 25, 9, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'noorall', 'type': 'User'}]","[{'commit_sha': '58da5eea954dbbce8c954c323dd2c8247e54303e', 'committer_username': 'drrtuy', 'committer_name': 'drrtuy', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 15, 16, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76e7adaed2d650df537f16cd312683a789bbdd1b', 'committer_username': 'noorall', 'committer_name': 'Leiyang', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 12, 12, 51, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dd722988c8d6c41e70c8d2d235351ed35a322b6', 'committer_username': 'noorall', 'committer_name': 'Leiyang', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 12, 12, 51, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9ec71b26464bf3910556b974ff34674f0f7c297', 'committer_username': 'noorall', 'committer_name': 'Leiyang', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 12, 12, 51, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35ab7debd3c916f609740be670e41200a1d68919', 'committer_username': 'noorall', 'committer_name': 'Leiyang', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 12, 12, 51, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbef873ea0416e231903f8724f423efca07a2a66', 'committer_username': 'noorall', 'committer_name': 'Leiyang', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 12, 12, 51, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36f22c1da025153e09bb409eea02649051b77c76', 'committer_username': 'jun0315', 'committer_name': 'Xieqijun', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 20, 3, 32, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc40f89f7d6b32273b36c87ee4fc70ac0bc12ac8', 'committer_username': 'jun0315', 'committer_name': 'Xieqijun', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 20, 3, 32, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f53a70e192306b1228306ef04fca2f4b97744f3', 'committer_username': 'jun0315', 'committer_name': 'Xieqijun', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 20, 3, 32, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fa3f0d2a3c0e653e9af9fa668463649658675a5', 'committer_username': 'jun0315', 'committer_name': 'Xieqijun', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 20, 3, 32, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '923c203da434d492fcb6dd0feb972e74df481544', 'committer_username': 'jun0315', 'committer_name': 'Xieqijun', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 20, 3, 32, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25988e3e6e918f5b39187ea1f9d29de9e48adb0e', 'committer_username': 'jun0315', 'committer_name': 'Xieqijun', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 20, 3, 32, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26609109994b7c72a77fd0925ded63f258924bd6', 'committer_username': 'jun0315', 'committer_name': 'Xieqijun', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 20, 3, 32, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7882658dff61b69d1a36e392a80c1181c66849e4', 'committer_username': 'jun0315', 'committer_name': 'Xieqijun', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 20, 3, 32, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8194af5278541946a436c77b0c9fcc052073051d', 'committer_username': 'jun0315', 'committer_name': 'Xieqijun', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 20, 3, 32, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd187400ca2ef13e64bcbac33bbe4eab91273b7c', 'committer_username': 'jun0315', 'committer_name': 'Xieqijun', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 20, 3, 32, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1b78b5c7f855a58d212a5064061da99e0bd6ed3', 'committer_username': 'jun0315', 'committer_name': 'Xieqijun', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 20, 3, 32, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbf1f8d160dff12df0d07aad6e769a36f67c2f92', 'committer_username': 'jun0315', 'committer_name': 'Xieqijun', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 20, 3, 32, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32f1184d46d5ee35465427988bc6594e54f41d73', 'committer_username': 'jun0315', 'committer_name': 'Xieqijun', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 20, 3, 32, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9c8b5e2e272e7bf9fdfe860753c97c96e1b9d3b', 'committer_username': 'jun0315', 'committer_name': 'Xieqijun', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 20, 3, 32, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e71b6266991f15dd8a78c1803251cb21c56d71f1', 'committer_username': 'jun0315', 'committer_name': 'Xieqijun', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 20, 3, 32, 12, tzinfo=datetime.timezone.utc)}]",Xieqijun,44310040,,User,,40,,78,77

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
59521862,mariadb-columnstore-engine,mariadb-corporation/mariadb-columnstore-engine,C++,64,106,37,97,6279,30,269,30,"[{'id': 1900735848, 'number': 3195, 'closed': datetime.datetime(2024, 6, 3, 12, 24, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 3, 12, 22, 44, tzinfo=datetime.timezone.utc), 'time_taken': 77.0, 'time_delta': '0:01:17', 'additions': 2561, 'deletions': 42, 'state': 'closed'}, {'id': 1419244791, 'number': 2891, 'closed': datetime.datetime(2024, 7, 31, 13, 51, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 4, 8, 50, 53, tzinfo=datetime.timezone.utc), 'time_taken': 33973260.0, 'time_delta': '393 days, 5:01:00', 'additions': 8342, 'deletions': 2302, 'state': 'closed'}]"
