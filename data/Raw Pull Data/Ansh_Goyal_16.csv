pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
907523041,CB-433: Show release groups on label page,"CB-433

Show the release group linked with the label on the label's page.
",True,422,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/422,https://github.com/metabrainz/critiquebrainz/pull/422,closed,147,11,4,6,1,0,0,0,[],2022-04-12 10:58:34+00:00,2022-05-26 16:44:07+00:00,3822333.0,"44 days, 5:45:33",[],"[{'commit_sha': '0e4345b5fc31db6969a9398f7a38b9c2c7ccead4', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '163b8e8bcbe74625cb764d26b0de8b913963ea3a', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07b8e3cbb1a1ca6e92f07be0c2ffdbbdc486b1d4', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '170f86476098b801b14b289acc90b5c080a0a084', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0813a7b11c396a89718d7510de746ba5df261be', 'committer_username': 'alastair', 'committer_name': 'Alastair Porter', 'committer_email': None, 'commit_date': datetime.datetime(2008, 8, 1, 9, 36, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff02610505057261d76935157d990d8e9a05afd8', 'committer_username': 'alastair', 'committer_name': 'Alastair Porter', 'committer_email': None, 'commit_date': datetime.datetime(2008, 8, 1, 9, 36, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
916249072,CB-434: Show events on place page ,"CB-434

Show the events linked with the place on the place's page.",True,423,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/423,https://github.com/metabrainz/critiquebrainz/pull/423,closed,215,36,5,10,1,2,0,0,[],2022-04-22 09:48:41+00:00,2022-05-26 16:30:12+00:00,2961691.0,"34 days, 6:41:31","[{'comment_id': 862915013, 'comment_body': ""I prefer to use real data from the database instead of a mock in this kind of test, because we've run into problems before where the returned data from the library changes and we forget to update the mocks.\r\n\r\nNow that the CB tests use the MB sample database (like the BU tests), we are able to get real data - can you see if you can replace this test with one that uses real data for a place?"", 'comment_created': datetime.datetime(2022, 5, 2, 14, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 867439320, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 5, 8, 5, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}]","[{'commit_sha': 'c495cfd71d7c5ac04b8c95c7a92a644981af4255', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2e5363537f624c9ea7b8b0cce6a30135b0b94e1', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a59f88b0d18912725c6ee5a622e8ae996f37bc9b', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '985a84461ece78e0625d3b819c4b00d412017fad', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c7769303e14461e4d06a6addb1916dd541772b2', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '708f368c63f0bcf415563f2bc484c3a209b77a1f', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e81b89d8ae54aae4b1efb3a30adc5702f4ccf9ee', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0fb4312a39cd340b720e2f2af604aa92b54fc6c', 'committer_username': 'alastair', 'committer_name': 'Alastair Porter', 'committer_email': None, 'commit_date': datetime.datetime(2008, 8, 1, 9, 36, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a528001b4cb4d618c721f32c9964d4027c553987', 'committer_username': 'alastair', 'committer_name': 'Alastair Porter', 'committer_email': None, 'commit_date': datetime.datetime(2008, 8, 1, 9, 36, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b56301be74b6c09140c73e86a152789d8cd2340', 'committer_username': 'alastair', 'committer_name': 'Alastair Porter', 'committer_email': None, 'commit_date': datetime.datetime(2008, 8, 1, 9, 36, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
943396297,"CB-410: Revisions of reviews are created when drafts are made, and they remain visible","CB-410
This PR:
1. Deletes the older revisions of the review when the user publishes it.
2. Adds option in the endpoint to publish the draft reviews.
3. Fixes a bug which updates the average ratings table with the ratings even when the review is a draft.

We need to run 2 queries in our database
1. To delete all older revisions of the review which was later published.
2. To delete the avg_ratings for the draft reviews.",False,427,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/427,https://github.com/metabrainz/critiquebrainz/pull/427,open,145,8,7,5,1,2,0,0,[],2022-05-21 09:24:55+00:00,,0.0,,"[{'comment_id': 982344119, 'comment_body': 'Since we are deleting data, this test should be more comprehensive IMO. Probably fetch the actual revisions before publish, assert, then fetch again after publish to confirm the correct revisions were deleted.', 'comment_created': datetime.datetime(2022, 9, 28, 12, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 984953515, 'comment_body': ""Sounds Good! I've improved the tests."", 'comment_created': datetime.datetime(2022, 9, 30, 21, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}]","[{'commit_sha': 'e1b59c46ef98addba27834b27821fe57b290f83c', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a72fe0116475c2591aea6f4df02ac00e143baafd', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5500f1a5b05470b8e7ce1bf65319a5d6c85535c9', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a8bdf5dea32ff9d6248fe67348415bbfbec8abc', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '871e3b69b6a495403ef9a91c4024ae51d0efb971', 'committer_username': 'alastair', 'committer_name': 'Alastair Porter', 'committer_email': None, 'commit_date': datetime.datetime(2008, 8, 1, 9, 36, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
958103844,Add BookBrainz Database ,This PR adds BookBrainz Database to the CB database.,True,433,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/433,https://github.com/metabrainz/critiquebrainz/pull/433,closed,99,8,13,8,1,4,0,0,[],2022-06-04 05:25:19+00:00,2022-06-13 15:45:41+00:00,814822.0,"9 days, 10:20:22","[{'comment_id': 890983487, 'comment_body': 'can you split this into 2 files, one for CB and one for BB?', 'comment_created': datetime.datetime(2022, 6, 7, 9, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 890992934, 'comment_body': 'For now it would be nice to be able to run CB without a bookbrainz database. To do this, we can check if `app.config.get(""BB_DATABASE_URI"")` is None, and if so don\'t run init_db_engine.', 'comment_created': datetime.datetime(2022, 6, 7, 9, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 891010428, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 7, 9, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 895719238, 'comment_body': 'after another discussion we decided to make the BB database always required for now', 'comment_created': datetime.datetime(2022, 6, 13, 13, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}]","[{'commit_sha': 'cba42772fbe34ee101b7ea47b81771c0bb489945', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1be828ab7e0fd8c1ed7820b7ef358c799da4e8bb', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d35e4f50dc724fbc9a706c21582d844b7b48dc5', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5607c080bcded411e9648553922b1780c6aa42b', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c24a5c7c6dc9a3eac205a7c33781ee1ee252f22b', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eaa6e823b6a7f76c0d2fb38edd734e17aaf063e', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a75cbd1bbc65a4ea1023a681b1dd1dc73f33d430', 'committer_username': 'alastair', 'committer_name': 'Alastair Porter', 'committer_email': None, 'commit_date': datetime.datetime(2008, 8, 1, 9, 36, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '113e360f614d9ae8fb55caa5fb4002c012b3b5e3', 'committer_username': 'alastair', 'committer_name': 'Alastair Porter', 'committer_email': None, 'commit_date': datetime.datetime(2008, 8, 1, 9, 36, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
959390883,Fetch edition group from BB database,This PR fetches edition group from the BB database.,True,434,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/434,https://github.com/metabrainz/critiquebrainz/pull/434,closed,870,83,21,18,1,28,0,0,[],2022-06-06 17:58:18+00:00,2022-07-08 13:49:17+00:00,2749859.0,"31 days, 19:50:59","[{'comment_id': 895889972, 'comment_body': ""In the Bookbrainz database we have a number of views which reproduce this query, in a way that should let you perform something as simple as `SELECT * FROM edition_group`. I see that these views aren't created when we perform a dump import, so we should have a look at why this is the case and add them. This will simplify all BB database queries significantly."", 'comment_created': datetime.datetime(2022, 6, 13, 15, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 896535222, 'comment_body': ""@anshg1214 pointed out to me that the views don't have all necessary columns, so he used a direct query instead. We should check with @MonkeyDo to see if we can add these columns to the views"", 'comment_created': datetime.datetime(2022, 6, 14, 8, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915073012, 'comment_body': 'If we are in DEBUG mode, and we try and get a review for a BB item which isn\'t in the BB database, we will return this item. Are the fields correct to use in the BB pages?\r\nI know that this is very unlikely to happen, as we\'re currently using a full database for BB tests and local development, however I\'d like to ensure that we make this work now rather than encounter an error later.\r\n\r\nPerhaps the change could be as simple as `if entity_type.startswith(""bb_""): return get_dummy_bb_item....` in the development methods above', 'comment_created': datetime.datetime(2022, 7, 6, 17, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915073468, 'comment_body': ""I know that the musicbrainz methods don't include this, but can we list the fields that this method returns? That's just the list of items that we SELECT in the sql query below."", 'comment_created': datetime.datetime(2022, 7, 6, 17, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915079124, 'comment_body': 'In documentation it\'s also good to include what is returned in the case of an error. In this case, ""Returns None if the BBID doesn\'t exist in the database""', 'comment_created': datetime.datetime(2022, 7, 6, 17, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915080213, 'comment_body': ""to help us in the future, let's prefix all bookbrainz cache uses with `bb_` or similar (especially the 'identifier' one in identifiers.py, that word is common enough that it could conflict with something else in the future)"", 'comment_created': datetime.datetime(2022, 7, 6, 17, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915086575, 'comment_body': 'there\'s a very sneaky bug here. \r\nIf you pass in a bbid formatted slightly differently (e.g. ""343ca0d1-cf7e-4a69-8701-97733d81c3B0"" - note that the last b is upper-case), then postgres will happily accept it, but return `edition_group.bbid` in lower-case, and this dictionary key access will fail.\r\n\r\nIn AcousticBrainz, we check user-provided data at the API level by turning it into a UUID object and then back into a string: https://github.com/metabrainz/acousticbrainz-server/blob/ed51bcc5afaf07f78fd0cdf48fc28db844c3ca6b/webserver/views/api/v1/core.py#L196-L200\r\nhowever it\'s much more common to do this at the user-level, and assume that the data is clean by the time it gets down to a low-level data method like this one. I see that the musicbrainz methods fail in the same way.\r\nI\'ll take a deeper look into this and let you know if we should change it.', 'comment_created': datetime.datetime(2022, 7, 6, 17, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915087610, 'comment_body': 'I see that you have a type hint here saying that this method takes a UUID object, but if I try it I get an error:\r\n```py\r\nIn [9]: edition_group.get_edition_group_by_bbid(uuid.UUID(""343ca0d1-cf7e-4a69-8701-97733d81c3b0""))\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\nInput In [9], in <cell line: 1>()\r\n----> 1 edition_group.get_edition_group_by_bbid(uuid.UUID(""343ca0d1-cf7e-4a69-8701-97733d81c3b0""))\r\n\r\nFile /code/critiquebrainz/frontend/external/bookbrainz_db/edition_group.py:22, in get_edition_group_by_bbid(bbid)\r\n     20 if not edition_group:\r\n     21     return None\r\n---> 22 return edition_group[bbid]\r\n\r\nKeyError: UUID(\'343ca0d1-cf7e-4a69-8701-97733d81c3b0\')\r\n```\r\n\r\nThis is similar to the previous issue of upper-case letters in a UUID string.\r\n\r\nIn this case we should probably convert it to `str(bbid)` in the case that it\'s a UUID object.', 'comment_created': datetime.datetime(2022, 7, 6, 17, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915088499, 'comment_body': 'Take a look a the (in-progress) MusicBrainz SQL formatting guidelines, and see if you can update this query to follow that format: https://gist.github.com/reosarevok/2d8a2fa6310cc0144cad043a9c566717 \r\n\r\neventually we would like to follow this format with all of our queries in all apps, this is a good place to start! Ask me or @reosarevok if you have any questions with the guidelines.', 'comment_created': datetime.datetime(2022, 7, 6, 17, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915089360, 'comment_body': ""I tried this method with an invalid-formatted bbid and the query failed, raising an sqlalchemy exception. This happens with the musicbrainz methods too. I'll look into this and see if we should update these methods to catch this exception and return a CB-specific data access error."", 'comment_created': datetime.datetime(2022, 7, 6, 17, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915092384, 'comment_body': 'In methods that return a dictionary or list, I prefer to return an empty version of that object instead of None in this case, as it can still be tested as a false object with `if not`, but it ""looks like"" the correct object type. For example, it allows you to do something like\r\n\r\n```py\r\ndata = get_all_the_things()\r\nnewdata = [process(d) for d in data]\r\n```\r\n\r\nif `get_all_the_things` returns a list normally, but `None` in some cases, you can\'t do this without first checking if it\'s None or not.\r\n\r\nIn this case, better to return an empty `{}` in this method', 'comment_created': datetime.datetime(2022, 7, 6, 17, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915093803, 'comment_body': ""very small thing here, I would skip this line, and `return results` at the end of the method. There's no reason to overwrite this variable, and it makes it a bit confusing as to what data it includes (the list from the database query, or this differently formatted return data)"", 'comment_created': datetime.datetime(2022, 7, 6, 17, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915093915, 'comment_body': 'use bb_ prefix', 'comment_created': datetime.datetime(2022, 7, 6, 17, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915099637, 'comment_body': ""can we have a name that's more descriptive than `identifiers`? maybe they're bookbrainz_external_site_identifiers?"", 'comment_created': datetime.datetime(2022, 7, 6, 17, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915099972, 'comment_body': 'double-check this syntax. I think the `()` is unnecessary, and probably has no effect', 'comment_created': datetime.datetime(2022, 7, 6, 17, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915100025, 'comment_body': 'This map is OK for now, as it copies [data that is already in the BB website](https://github.com/metabrainz/bookbrainz-site/blob/master/src/client/components/pages/entities/identifiers-links.js). However, I don\'t like having data that can potentially change in two different locations (BB and CB). In the case that a new identifier is added to BB, we also need to remember to add it here, and I guarantee that we will forget to do so.\r\n\r\nIn BB, we already have the `bookbrainz.identifier_type` table, which includes these identifiers _and already has a column for a recognition regex_. I\'d like to open a discussion with @MonkeyDo to add a new column to this table to also have the ""construct url"" text, so that we can share this data between BB and CB by using the database.\r\n\r\nCan you please open a ticket in Jira for the CB project for an enhancement to read these identifiers from the database?', 'comment_created': datetime.datetime(2022, 7, 6, 17, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915100116, 'comment_body': 'are we sure that all URLs are going to have this structure (`http://website.com/[value]`)? I see that the [bookbrainz version of this method](https://github.com/metabrainz/bookbrainz-site/blob/master/src/client/components/pages/entities/identifiers-links.js) explicitly substitutes the `${value}` variable.\r\nIn python we can also use string formatting:\r\n\r\n```py\r\nurl_map = {\r\n    1: ""https://musicbrainz.org/release/{value}"",\r\n...\r\nurl = url_map[type_id].format(value=value)\r\n```\r\nThis will help future-proof this code in case we end up with a URL that doesn\'t have the value at the end of the URL', 'comment_created': datetime.datetime(2022, 7, 6, 17, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915100887, 'comment_body': 'In the case that new `type_id` is added to BB and not added here, this will fail. Can we add a check here to avoid this error?', 'comment_created': datetime.datetime(2022, 7, 6, 17, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915101214, 'comment_body': 'for your information, this could also be written as \r\n```py\r\nicon = icon_map.get(type_id, None)\r\n```\r\nI tend to use this syntax to save space', 'comment_created': datetime.datetime(2022, 7, 6, 17, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915102047, 'comment_body': 'Possible alternate way of writing this:\r\n```suggestion\r\n        if type_id == 13: \r\n            value = value.replace("" "", """") # Remove spaces first (see BB-499)\r\n        if type_id in url_map:\r\n            url = url_map[type_id] + value\r\n        else:\r\n            url = None\r\n```', 'comment_created': datetime.datetime(2022, 7, 6, 17, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915102424, 'comment_body': 'release_type?', 'comment_created': datetime.datetime(2022, 7, 6, 17, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915103252, 'comment_body': 'if you want to make a UUID field from postgres into a string, you can also use\r\n```\r\nSELECT rel.source_bbid::text as source_bbid\r\n```\r\nto get postgres to turn it into a string for you!', 'comment_created': datetime.datetime(2022, 7, 6, 17, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915104540, 'comment_body': '@MonkeyDo do you have a better idea?', 'comment_created': datetime.datetime(2022, 7, 6, 17, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915106316, 'comment_body': 'can we add a test for some relationships too?\r\n\r\nthis might get kind of complex, because we\'re using a real database that changes every week and tests might just suddenly start failing. perhaps we can ask @MonkeyDo to make us a ""fixed"" sample database every time BB makes a schema change so that we know that data won\'t change underneath us too often.', 'comment_created': datetime.datetime(2022, 7, 6, 17, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915816209, 'comment_body': 'bookbrainz_external_identifiers would also work IMO', 'comment_created': datetime.datetime(2022, 7, 7, 12, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 916728779, 'comment_body': ""For now let's leave this as-is"", 'comment_created': datetime.datetime(2022, 7, 8, 11, 29, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 916729358, 'comment_body': 'this is great!', 'comment_created': datetime.datetime(2022, 7, 8, 11, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 916729818, 'comment_body': 'Noice\r\n', 'comment_created': datetime.datetime(2022, 7, 8, 11, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}]","[{'commit_sha': '9da362afb7ae57af94d5f69e341afb03be41066a', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f78c17b3a0d01e11f32f492cc9072f1f556fc4', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae913af0c72976166d98052472802ccbfdd3638e', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345df57b6271130f0e5d5373179891a271e81da6', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b3f5e0f8809aa8e7d5baeb3874c9bc4cd7db8e', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd76761a203cb0448806aa1da55f39c17cee9e4e', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f50bbf031209bdec27e49383f80ddcb6a0bc3387', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25c05e9484eb2bc189a9c4b6283047fa3c7d315d', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c589b3bd640bdd627e57a6c0fcb1443f68a847a3', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4534a69101203393d1d75d2ae17027b9119c9a5', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3927e0a1301dabb8da99f3e0abbe4195dcc9d869', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef36289ac1647833e59212a79c18308294ba4121', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1b928bb88b115dca18ef5b5358d9b2c91d64fd2', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '656d2004b18f44f9acce1f12b0fcac1b59f67c4d', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '386156717d58ab8ced118ff4126925cc8326031e', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2191061e72bdf7ccf17eafd30b985e4a6db23424', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b623719f5be56595d13fa584743193bab5d7cbb9', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88a5d0b1809cc9c86cafc8eb171ac375d15eff13', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
960711102,Allow CB to review Edition Group,This PR enables reviews for Edition Group,True,436,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/436,https://github.com/metabrainz/critiquebrainz/pull/436,closed,138,4,20,10,1,11,0,0,[],2022-06-07 17:46:26+00:00,2022-07-08 13:49:44+00:00,2664198.0,"30 days, 20:03:18","[{'comment_id': 915108509, 'comment_body': 'could we wrap `show_avg_rating` and maybe `show_entity_type` in a `<p>` instead to get this spacing better? @MonkeyDo ', 'comment_created': datetime.datetime(2022, 7, 6, 17, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915110771, 'comment_body': 'These default values in other template files are from an old time when we used to be able to create a review for an entity that doesn\'t exist in the database. \r\nHowever, since #398 we explicitly treat these items as 404, and so don\'t need to have these checks.\r\n\r\nLet\'s start cleaning these template files with the BB work, we can just have:\r\n\r\n```\r\n{{ _(\'Review of ""%(edition_group)s"" by %(user)s\', edition_group= bb_edition_group.name, user=review.user.display_name) }} - CritiqueBrainz\r\n```', 'comment_created': datetime.datetime(2022, 7, 6, 17, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915111087, 'comment_body': 'Another guard that is no longer needed', 'comment_created': datetime.datetime(2022, 7, 6, 17, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915111917, 'comment_body': ""We don't need to import this macro if it's not used (also unused in critiquebrainz/frontend/templates/review/entity/bb_edition_group.html)"", 'comment_created': datetime.datetime(2022, 7, 6, 17, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915113381, 'comment_body': 'what is `label` here? Sounds like it might be a MB-specific thing. Should this be one of the fields returned by `get_edition_group_by_bbid`?', 'comment_created': datetime.datetime(2022, 7, 6, 17, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915113685, 'comment_body': 'default not needed', 'comment_created': datetime.datetime(2022, 7, 6, 17, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915116107, 'comment_body': ""I think we might have found a bug here - I guess this entity type should be translated, but this expression won't do that.\r\nCan we change this block of code into a macro, and use a dictionary mapping `review.entity_type` to a translated version of the entity type?"", 'comment_created': datetime.datetime(2022, 7, 6, 17, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915707991, 'comment_body': ""Earlier my queries returned the edition group type as `label`. But now since we are using views, I'll update the variable name to `edition_group_type`."", 'comment_created': datetime.datetime(2022, 7, 7, 10, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 915777250, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 7, 11, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 916733478, 'comment_body': 'ok, great. I think it\'s best to use terminology specific to BB in the BB pages, rather than trying to make it ""look like"" MB data', 'comment_created': datetime.datetime(2022, 7, 8, 11, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 916742531, 'comment_body': ""If I'm honest the best way would be to add css classes to the show_entity_type elements and corresponding css code to tweak the margins as necessary.\r\nBarring that, perhaps wrapping show_entity_type in a `<p>`  tag would work visually (but not semantically :) ) "", 'comment_created': datetime.datetime(2022, 7, 8, 11, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}]","[{'commit_sha': '5aea3964d1a2c4a93be5d5f66098f1114968ef0c', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee4df23cba98bbb5d7dc4a70e0498aae15407b14', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c79217ff977f2b4d34cc7fbe7a24fbe6c9d406a2', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3b049f962ae9a1183bab60a485ce685313cfcaa', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26492d0db0bfafd74ae14287d85e79c9d95b4162', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3ecee717e9b87da23d7ef2e0c63c721e531de84', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d3c38aa8075434785cb5aed96fa4f1ecd8fe11e', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33ce5ccd2fb52f8e234c69071da8fad3c5a2ef7f', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '202ccb0b9b78a137fb64c8fb3f5eb30917988477', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '646c0c25659de858b43e199b5cb34fa840748fb3', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
984139382,Add Page for Edition Group,This PR adds the entity page for edition group.,True,440,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/440,https://github.com/metabrainz/critiquebrainz/pull/440,closed,248,76,13,3,1,4,0,0,[],2022-06-30 17:59:49+00:00,2022-07-08 13:50:17+00:00,676228.0,"7 days, 19:50:28","[{'comment_id': 915118090, 'comment_body': 'Could this be replaced with a macro in all templates?', 'comment_created': datetime.datetime(2022, 7, 6, 18, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915118764, 'comment_body': 'same that I asked in #436, is label a BB thing or a MB thing?', 'comment_created': datetime.datetime(2022, 7, 6, 18, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915122761, 'comment_body': 'As I mentioned in https://github.com/metabrainz/critiquebrainz/pull/434#discussion_r915086575 here\'s a related part.\r\nTake a look at [the documentation](https://github.com/wbolster/flask-uuid), by default it uses what\'s called ""strict mode"", so the `\'/<uuid:id>\'` in the URL will validate that it is only lower-case, and is a correctly formatted UUID otherwise it will return 404. So it looks like we\'re safe here!', 'comment_created': datetime.datetime(2022, 7, 6, 18, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 915709228, 'comment_body': ""Earlier my queries returned the edition group type as `label`. But now since we are using views, I'll update the variable name to `edition_group_type`."", 'comment_created': datetime.datetime(2022, 7, 7, 10, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}]","[{'commit_sha': 'c20fd58832d11266dfae07235047da6638464ca8', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b295c237ad8f6bd63523945ab8e027fc476e5a8', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc820f2f13bb6a556052a65aa3ecd0fa1ff8a6f1', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
993028422,Allow searching of Edition Group,This PR adds the feature to allow user to search for Edition Group,True,444,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/444,https://github.com/metabrainz/critiquebrainz/pull/444,closed,81,15,6,8,1,5,0,0,[],2022-07-11 12:13:28+00:00,2022-07-25 13:21:03+00:00,1213655.0,"14 days, 1:07:35","[{'comment_id': 917947211, 'comment_body': ""we should have some checks here to see that the result of this API query succeeded.\r\nYou can check the value of `requests.get().status_code` to see if it's 200 or not.\r\nWe should also add a timeout: https://requests.readthedocs.io/en/latest/user/advanced/#timeouts and catch this exception\r\nAnd also a verification for ValueError when parsing the json result"", 'comment_created': datetime.datetime(2022, 7, 11, 13, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 917948868, 'comment_body': 'perfect! this is simple and great that it already exists in html', 'comment_created': datetime.datetime(2022, 7, 11, 13, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 918067868, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 11, 15, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 928653981, 'comment_body': ""let's add a new `bookbrainz.py` for this, so that we can add the upcoming search methods to it."", 'comment_created': datetime.datetime(2022, 7, 25, 9, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 928656837, 'comment_body': ""This is good, but we should use an error code that indicates a server error (starting with 5) instead of BadRequest, which indicates a client error. Let's use `ServiceUnavailable`.\r\n\r\nI think that we can return a single error message here in case of all of these errors. so let's just do\r\n\r\n`exept (HTTPError, JSONDecodeError, Timeout):`\r\n\r\nand raise the same error message"", 'comment_created': datetime.datetime(2022, 7, 25, 9, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}]","[{'commit_sha': 'c9cf25da3f8b4b72b99241e0ee1defc4b8f635b5', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac3eb5c07740f5bddc915b4a09ef1ef0b6746306', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7117cabf57b81d7da4046a8b9c622583ac5ff27', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '951b42aa005173fb2413b0af6ee48bd76b0857b5', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75c97c439f7033e733f51bfc1f3afab77ca0d7bf', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05df79b18c273e245c5e29b05ecb176f375656b9', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2051b0981ff167705c8e4bd411cdab88c6ed25fb', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4832efd39130ef3f02b6a0668554801f24866960', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
1011710838,Allow CB to review Literary Works,"This PR allows users to browse and review BookBrainz Literary Works.

NOTE: This PR needs to be merged first.",True,452,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/452,https://github.com/metabrainz/critiquebrainz/pull/452,closed,2015,35,45,38,1,13,0,0,[],2022-07-29 08:46:12+00:00,2022-08-16 14:32:58+00:00,1576006.0,"18 days, 5:46:46","[{'comment_id': 938781480, 'comment_body': 'can we make `ENTITY_TYPES` just be `MUSICBRAINZ_ENTITY_TYPES + BOOKBRAINZ_ENTITY_TYPES`?', 'comment_created': datetime.datetime(2022, 8, 5, 12, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 938828034, 'comment_body': ""even though we do some validation of this user input data, we should always use sql query parameters for anything in a WHERE statement.\r\nWe can do this by setting up the query parameters dict ahead of time:\r\n```py\r\nquery_params = {}\r\nelif work_type in WORK_TYPE_FILTER_OPTIONS:\r\n     work_type_filter_string = 'AND work_type = :work_type'\r\n     query_params['work_type'] = work_type\r\n...\r\nconnection.execute(..., query_params)\r\n```\r\nYou can then add additional items to query_params as needed (bbids, limit, offset, etc)"", 'comment_created': datetime.datetime(2022, 8, 5, 13, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 938828461, 'comment_body': 'You can pass `LIMIT NULL` to an sql query to set no limit. So passing `None` is fine here.', 'comment_created': datetime.datetime(2022, 8, 5, 13, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 938828968, 'comment_body': ""add some documentation about what values are valid, and what a value of 'other' means"", 'comment_created': datetime.datetime(2022, 8, 5, 13, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 938830588, 'comment_body': 'can we set `ENTITY_TYPES = MUSICBRAINZ_ENTITY_TYPES + BOOKBRAINZ_ENTITY_TYPES` here? (I thought I saw some other code where you did this, but I can no longer find it)', 'comment_created': datetime.datetime(2022, 8, 5, 13, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 938831152, 'comment_body': 'This is a great additional feature, but it should be documented everwhere it can be used - both in the docstring for this db method, and also in the API documentation if this can be used directly from the API', 'comment_created': datetime.datetime(2022, 8, 5, 13, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 938833147, 'comment_body': 'while we use \'literary work\' as our identifier for this type, perhaps here we should just say ""Sorry, we couldn\'t find a BookBrainz work with this ID""', 'comment_created': datetime.datetime(2022, 8, 5, 13, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 938834668, 'comment_body': 'All of this is the same as the editiongroup version, except for the `type` parameter. How about we break this out into a helper function `do_bookbrainz_search(entity_type, query, limit, offset)`?', 'comment_created': datetime.datetime(2022, 8, 5, 13, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 938914818, 'comment_body': 'Yes, indeed!', 'comment_created': datetime.datetime(2022, 8, 5, 15, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 938915233, 'comment_body': ""Thats a great idea. I'll make the changes"", 'comment_created': datetime.datetime(2022, 8, 5, 15, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 938915423, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 8, 5, 15, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 938917221, 'comment_body': ""I agree. I'll add it in the documentation"", 'comment_created': datetime.datetime(2022, 8, 5, 15, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 938925057, 'comment_body': ""I've now converted it to a single function. For this I have mapped the CB entity type name to BB entity type name and created a common function to fetch the entity data which does the job."", 'comment_created': datetime.datetime(2022, 8, 5, 15, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}]","[{'commit_sha': 'd15c0857c0a736bafd60150877ef81e3aac84639', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be34a8fa2e148b37883f897ec707347395eb0140', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41c071b1458ca256e3f4f6dfcbcc2095e9a8b92a', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c7ac6aebc3b9854a892abd340d2b95337681bb', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75c2dc07c623d7b0282c3dc53cd777cc554bda5f', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '551ab915f04dbd8d3fccaeddccc6d26c9bca1374', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d9a4a58ed990666b581508b0e6ba73969b611bb', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '605f4541addf542d0236089bdda6f9043f755143', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c46200ca20ec17873e8196739045b3b0711eed14', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13d63b7cec03b791e065435495bdf4e97217ecaa', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8624e6535330bd024ee4b0ff02b48a514139d64', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0b307f613b89034b4063d78728f633e0059fa1', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '868a3381c7c4af64766397421a3eb4bea95ebb32', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1e37fffcb0a47faebbf16435c90420735e7e2c2', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbb7cc5719e863bd279a48dc4451a74f7fc4851a', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '747aa3c84459b87ab38ff54c402d2d307f8632c1', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54ced5efb7b60c557c79282dcbebb2c2416e962f', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b633a8f9abc47de75d51b644a3dfb78134e0d2a4', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9c89ae9ad37096adfe3b9ac5a51dc848f5fdfad', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9374dd02e1ab849730bf5a789db59e987b91283', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72f25c39a705f9e059a4d48a9c1fa888d457cfce', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0659060bb0f8daa3d7fb6075637e1e87c46f0bcf', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8afd6eac81f5d06e8580e46c0dfad1a76bbb449', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '219d930d84ad9938e45ce59b695b99cdf74d432c', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8498903a7c19f651cff9a99ce95594aa50ed87fb', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bdf4aa88d081c87b93d0f95f409b60f3964c0d3', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9950b2d934743e6bb8f58bf1f6c1d6cc7cfc4a30', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '736bcf654f09c1ee3f8eda068002f3d9e547f496', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49b38a206f99573b33f58b719bba0f6e143217eb', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73c6829e25acc1006caa868f17dc9ca3499847e9', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fbb9424f976de5b690e6cdb2282f9339ed9a772', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '577b0e9b9c4898e70383454cf024471327e1ca93', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45c7090929564e98c18e2013b473429fea040e7a', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '441f620a0fd84029483050f3a9ffef2263a89709', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c92df86a59d7cb5a7b48085d2a3b587355bc0e3d', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c4eb7ad91becac035ca319b9ed1875efc4fd6d3', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe9d1201360aea08a9f0ff3ef780adecd40a941c', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19028b084c27cbc2ba2302638f30c79eb8b344c9', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
1011715419,Allow CB to review Authors,"This PR allows users to browse and review BookBrainz Authors.

NOTE: This PR needs to be merged after #452",True,453,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/453,https://github.com/metabrainz/critiquebrainz/pull/453,closed,607,4,23,9,0,6,0,0,[],2022-07-29 08:51:01+00:00,2022-08-16 14:33:00+00:00,1575719.0,"18 days, 5:41:59","[{'comment_id': 938837510, 'comment_body': ""is there a reason why the literary works version of this method takes a limit and offset, but this one and series don't?"", 'comment_created': datetime.datetime(2022, 8, 5, 13, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 938920024, 'comment_body': 'Yes, I added the support for showing works on author pages in that PR itself. That is why it takes in limits and offset.', 'comment_created': datetime.datetime(2022, 8, 5, 15, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 946580120, 'comment_body': 'This file seems to be indented with tabs, instead of 4 spaces', 'comment_created': datetime.datetime(2022, 8, 16, 10, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 946580338, 'comment_body': 'indented with tabs?', 'comment_created': datetime.datetime(2022, 8, 16, 10, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 946600117, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 8, 16, 10, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 946600545, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 8, 16, 10, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}]","[{'commit_sha': 'd15c0857c0a736bafd60150877ef81e3aac84639', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be34a8fa2e148b37883f897ec707347395eb0140', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41c071b1458ca256e3f4f6dfcbcc2095e9a8b92a', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c7ac6aebc3b9854a892abd340d2b95337681bb', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75c2dc07c623d7b0282c3dc53cd777cc554bda5f', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '551ab915f04dbd8d3fccaeddccc6d26c9bca1374', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d9a4a58ed990666b581508b0e6ba73969b611bb', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '605f4541addf542d0236089bdda6f9043f755143', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49b38a206f99573b33f58b719bba0f6e143217eb', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
1017579941,Allow CB to review Series,This PR allows users to browse and review BookBrainz Series.,True,455,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/455,https://github.com/metabrainz/critiquebrainz/pull/455,closed,901,2,25,9,1,0,0,0,[],2022-08-04 13:51:28+00:00,2022-08-16 14:33:00+00:00,1039292.0,"12 days, 0:41:32",[],"[{'commit_sha': '54ced5efb7b60c557c79282dcbebb2c2416e962f', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b633a8f9abc47de75d51b644a3dfb78134e0d2a4', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9c89ae9ad37096adfe3b9ac5a51dc848f5fdfad', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9374dd02e1ab849730bf5a789db59e987b91283', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72f25c39a705f9e059a4d48a9c1fa888d457cfce', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0659060bb0f8daa3d7fb6075637e1e87c46f0bcf', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9950b2d934743e6bb8f58bf1f6c1d6cc7cfc4a30', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '736bcf654f09c1ee3f8eda068002f3d9e547f496', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73c6829e25acc1006caa868f17dc9ca3499847e9', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
1029707264,Order Series Items by ordering type,This PR orders the BB series items by their ordering type id,False,460,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/460,https://github.com/metabrainz/critiquebrainz/pull/460,open,361,198,12,5,0,0,0,0,[],2022-08-18 08:53:51+00:00,,0.0,,[],"[{'commit_sha': 'ee5dd84e00a2e71f64829fb95b4109e330588c03', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb6d28f65bbc02cf2b1dcf70d6c550c7b148ff02', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd608e16543e31499428f621cca7491331ec1b230', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d19285f81dec3d9db220b3954841b9cd8be735e', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd9970108e80f13cf2d991e9cfea866ba53472ff', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
997514365,Remove script to update Bookbrainz Database,This PR removes the script which was added temporarily to update the BookBrainz Database,True,445,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/445,https://github.com/metabrainz/critiquebrainz/pull/445,closed,0,434,2,1,1,0,0,0,[],2022-07-15 08:46:49+00:00,2022-07-18 09:58:42+00:00,263513.0,"3 days, 1:11:53",[],"[{'commit_sha': '2aa0c47df35539b9605037863a1e8e3225e1cbf9', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
1009474749,Update queries for author credits,,True,451,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/451,https://github.com/metabrainz/critiquebrainz/pull/451,closed,54,5,5,4,1,3,0,0,[],2022-07-27 10:21:59+00:00,2022-07-29 14:14:30+00:00,186751.0,"2 days, 3:52:31","[{'comment_id': 931137795, 'comment_body': ""it's great that you were able to find coalesce!\r\nI remember that we added some manual data for tests for relationships in BB entities. Would it also be possible to add some data with a null artist credit to ensure that this item isn't returned in the query?"", 'comment_created': datetime.datetime(2022, 7, 27, 14, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 931460755, 'comment_body': ""Yes, it is possible. I'll add tests for both cases if author credits exist and if they don't. "", 'comment_created': datetime.datetime(2022, 7, 27, 18, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 933317373, 'comment_body': 'for your information, normally a join phrase only exists if there are more than 1 name in the credit. It\'s so that you can do ""Test Author **and** Someone Else"" where __and__ is the join phrase. However, this is fine', 'comment_created': datetime.datetime(2022, 7, 29, 14, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}]","[{'commit_sha': '357ca734cdb15cd18dee087f01da3fc6a8a03522', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ef63b4ae46b74185e0671a262bdc35663bd2f2e', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f092cda8469e9ec6c5f31353678bccd0a1297d6', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '210441b48b7cda81dd9b60110e296d1957647f84', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
1018450176,Handle Deleted and Redirected BB Entities,,True,456,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/456,https://github.com/metabrainz/critiquebrainz/pull/456,closed,100,4,7,5,1,6,0,0,[],2022-08-05 09:17:09+00:00,2022-08-16 15:18:14+00:00,972065.0,"11 days, 6:01:05","[{'comment_id': 938698334, 'comment_body': ""normally, we check for a redirect after first trying to retrieve the item with the given id. This means that in the usual case where it's not a redirect, we only do one database query. This change means that we always do 2 queries on each page load. It would be better to do 1 query on the case where the id is not a redirect, and then 3 in the case that it is (get + return nothing, lookup redirect, get with redirect). In the case that the ID is not an entity id _or_ a redirect, we can return 404 directly after 2 queries"", 'comment_created': datetime.datetime(2022, 8, 5, 10, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 946559508, 'comment_body': 'It would be good to have a test for this, both for a single level redirect, and for a recursive one', 'comment_created': datetime.datetime(2022, 8, 16, 9, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 946559865, 'comment_body': ""just to make it a bit easier to follow, can we can 'bb_' to this key?"", 'comment_created': datetime.datetime(2022, 8, 16, 9, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 946571697, 'comment_body': ""This sounds great. I'll make the changes."", 'comment_created': datetime.datetime(2022, 8, 16, 9, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 946891976, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 16, 15, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 946892097, 'comment_body': ""I've added the tests"", 'comment_created': datetime.datetime(2022, 8, 16, 15, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}]","[{'commit_sha': 'ca265f450266937e2220d6c1bcba3bf1f9ce3495', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93ff8fffc343386db3dcf4e0766eaee316488b68', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '171d6a04bf7c613784602c5ddfd8eadea9aac635', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66db55f80564b324f9993659f0a1244c4f486a73', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a591666329e500492fd496fc5d616acf4be42c4', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
1028883936,Display Relationships on Entity Pages,"This PR 
1. Displays the Works linked to the Edition Group
2. Displays translated works on the Work's page",True,459,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/459,https://github.com/metabrainz/critiquebrainz/pull/459,closed,354,65,15,8,1,16,0,0,[],2022-08-17 13:59:56+00:00,2022-09-08 16:15:59+00:00,1908963.0,"22 days, 2:16:03","[{'comment_id': 955921234, 'comment_body': 'I think that it would be good to start adding these type ids as constants in python, perhaps in `frontend/external/bookbrainz_db/__init__.py`. For example, we could call this `BB_RELATIONSHIP_EDITION_WORK_CONTAINS = 10` (source entity type _ target entity type _ name). Giving it an explicit name will make it clear what relationship we are querying. In fact, this would also allow us to use the same function in the future to find relationships between the same source/target type.', 'comment_created': datetime.datetime(2022, 8, 26, 10, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 955924588, 'comment_body': ""I didn't notice this at the time, but it's not a good idea to use the name/label of a relationship to select it, because there's a small chance that we might want to change the label of this relation in the future.\r\nLet's also make a change here where we introduce some constants in python pointing to the `id` column instead."", 'comment_created': datetime.datetime(2022, 8, 26, 10, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 955926535, 'comment_body': ""we should have a test for this method. I'm not sure if it makes sense to create our own custom relationship like we do in some other tests so that we know that they exist and won't change, or if we should just use an existing relationship. I think that if we choose a book that was published some time ago (e.g. 30-40 years) then the chances of a new edition coming out and breaking the tests is quite low, so probably an acceptable tradeoff."", 'comment_created': datetime.datetime(2022, 8, 26, 11, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 955927152, 'comment_body': ""does this fill in _only_ translation rels into the variable `literary_work['rels']`? In that case, do you think it makes sense to call it `literary_work['translation_rels']` or something similar instead?"", 'comment_created': datetime.datetime(2022, 8, 26, 11, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 955927459, 'comment_body': 'maybe ""Works in this edition group""', 'comment_created': datetime.datetime(2022, 8, 26, 11, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 955927836, 'comment_body': 'does this method return more than one work? if so, `fetch_works_for_edition_group`', 'comment_created': datetime.datetime(2022, 8, 26, 11, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 955928162, 'comment_body': ""do works in an edition have an ordering? I don't see an `ORDER BY` clause in the python method."", 'comment_created': datetime.datetime(2022, 8, 26, 11, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 955928343, 'comment_body': '""Translations of this work""', 'comment_created': datetime.datetime(2022, 8, 26, 11, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 955930331, 'comment_body': ""it would be nice to give this variable a clearer name to say that it's translation relationships"", 'comment_created': datetime.datetime(2022, 8, 26, 11, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 955930891, 'comment_body': ""because we always pass this variable into the template context in the view, we don't need the `is defined` check. Let's just use `{% if work_rels_info %}` (so it will omit this block if the variable is `[]` but show it otherwise)"", 'comment_created': datetime.datetime(2022, 8, 26, 11, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 955931543, 'comment_body': 'Do we also want to add an additional section to this page, ""Edition Groups in which this work appears""? @MonkeyDo ', 'comment_created': datetime.datetime(2022, 8, 26, 11, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 955993019, 'comment_body': ""This is a good idea. I'll make the changes"", 'comment_created': datetime.datetime(2022, 8, 26, 12, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 957242352, 'comment_body': ""I've added the tests."", 'comment_created': datetime.datetime(2022, 8, 29, 12, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 957243562, 'comment_body': 'Done. Now `type_id` is being used for fetching relationships.', 'comment_created': datetime.datetime(2022, 8, 29, 12, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 957255743, 'comment_body': 'No, Works for Edition does not have an ordering.', 'comment_created': datetime.datetime(2022, 8, 29, 12, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 958185795, 'comment_body': ""I've added this section"", 'comment_created': datetime.datetime(2022, 8, 30, 8, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}]","[{'commit_sha': 'a011fa7f776509a4c8518b0223d4db11f2d7af0d', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88e9dc47187d3e06579b4f4f4a70f7e1608f95f4', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '240483269623de314672c116dc643ce93c9bc026', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bebf3d5bdfc23f6de6ba27752ede74cac9907400', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e6444b49adc1899c73f447b5197e920d63e4f17', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae4997c7a4edc9fe1d2461ccf2ceaf1311e50cc', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5faec6ba8df30c9b091f475dab211677fb6ba718', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dd302ee8e32f5324c27d7dfed97a5786a779c7e', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
994016973,feat(editionGroup): Show CB reviews for Edition Group,This PR adds CritiqueBrainz reviews for EditionGroup.,True,862,https://api.github.com/repos/metabrainz/bookbrainz-site/pulls/862,https://github.com/metabrainz/bookbrainz-site/pull/862,closed,326,22,10,17,0,21,0,0,[],2022-07-12 08:53:15+00:00,2022-07-19 13:12:14+00:00,620339.0,"7 days, 4:18:59","[{'comment_id': 918919034, 'comment_body': 'This is probably left over from trying to fit the EntityReviews in here, but can now be removed ', 'comment_created': datetime.datetime(2022, 7, 12, 12, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 918921839, 'comment_body': 'Better remove the console logs now :)\r\nIf you need debug info, you can use the `debug` library, which we already have in the codebase: https://github.com/debug-js/debug', 'comment_created': datetime.datetime(2022, 7, 12, 12, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 918929684, 'comment_body': 'What is the expected output of this method? It would be good to add the typescript type for it.', 'comment_created': datetime.datetime(2022, 7, 12, 12, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 918942101, 'comment_body': ""We can directly pass the props we need rather than the whole entity object to avoid unnecessary rerenders.\r\nNot sure it will have a big impact here but it's best practice:\r\n```suggestion\r\n\t\t\t\t\t\t<EntityReviews entity={entity.reviews} entityType={entity.type} />\r\n```\r\n\r\nOr even, after refactoring the code as I suggest in another comment:\r\n```suggestion\r\n\t\t\t\t\t\t<EntityReviews entity={entity.reviews} cbEntityType={getReviewEntityNameFromType (entity.type)} />\r\n```"", 'comment_created': datetime.datetime(2022, 7, 12, 13, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 918943163, 'comment_body': ""This will need some error handling.\r\nYou'll need to do a few things: \r\n1. wrap this block (lines 9-17) in a try-catch block\r\n2. I think (the docs aren't very clear for async/await syntax) that you might need to only return the body if `res.ok` is truthy \r\n3. if `res.ok` is falsy you can throw an error; not sure how you get the error message though\r\n4. In the catch block you can log any error and return…judging from [this line](https://github.com/metabrainz/bookbrainz-site/pull/862/files#diff-1e08379bd6206ad9c3911bf9d48d1977e284ffc53ae218928448a2f197bdd8e9R47) an empty array?\r\n\r\n\r\nIt is possible that superagent throws errors for successful requests with an error http status, in which case steps 2 and 3 aren't needed."", 'comment_created': datetime.datetime(2022, 7, 12, 13, 3, 10, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 918948529, 'comment_body': 'We should make sure this exists, and log an error + return empty array if the entity type cannot be found in this mapping.\r\nThen you can get rid of this check perhaps? https://github.com/metabrainz/bookbrainz-site/pull/862/files#diff-8f13ac13a037cddb521ab9b4829f038c0021e5e761d544b826cb539b70682c77R230', 'comment_created': datetime.datetime(2022, 7, 12, 13, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 918952713, 'comment_body': ""~~This code is duplicated; it would be good to make it a helper (we won't win a prize for the name, but what about `getReviewEntityNameFromType` or `getCritiqueBrainzEntityType`?) in `scr/common/…` that can be used both by the server and client side.~~\r\n\r\nEdit: With my comment below about kebabCase I don't think this will be necessary"", 'comment_created': datetime.datetime(2022, 7, 12, 13, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 918953871, 'comment_body': 'Just as a precaution, we can first ensure that reviews exists before trying to access a length property. For an undefined `reviews` this would otherwise throw.\r\n\r\nAnd it can be done with minimal changes with new JS syntax:\r\n```suggestion\r\n    if (reviews?.length) {\r\n```', 'comment_created': datetime.datetime(2022, 7, 12, 13, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 918957588, 'comment_body': 'I think you could add an else block and setting reviewContent accordingly for empty reviews.\r\nI\'m thinking a short message and a call to action, along the lines of ""No reviews yet"" with a  ""Write a review"" button that will later open a modal.\r\nFro now it can be a link to CB.', 'comment_created': datetime.datetime(2022, 7, 12, 13, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 918968966, 'comment_body': ""This isn't right at the moment with entityType `bb_edition_group` defined on line 44. Should be `edition-group`.\r\nIn which case if we just want to transform the entity names with a dash, I would recommend using lodash's `kebabCase` method like so: https://github.com/metabrainz/bookbrainz-site/blob/83c554fad43567c71b5d2165f03d682c4b525ef3/src/common/helpers/utils.ts#L169"", 'comment_created': datetime.datetime(2022, 7, 12, 13, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 918974157, 'comment_body': 'You should also commit the change in `yarn.lock`  file.\r\nIf you did not install with yarn (`yarn add react-simple-star-rating`)  you might have to run the command again to generate the changes to the lockfile.', 'comment_created': datetime.datetime(2022, 7, 12, 13, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 918980552, 'comment_body': ""Let's define this number as a constant REVIEW_CONTENT_PREVIEW_LENGTH = 75 and use it below \r\n\r\n```suggestion\r\n    if (reviewText.length > REVIEW_CONTENT_PREVIEW_LENGTH) {\r\n        reviewText = reviewText.substring(0, REVIEW_CONTENT_PREVIEW_LENGTH) + '...';\r\n```"", 'comment_created': datetime.datetime(2022, 7, 12, 13, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 918981541, 'comment_body': 'I think this can be improved:\r\n1. if entity.reviews is undefined, or not an object, this line will throw an error\r\n2. I commented in another comment but we can directly pass the reviews array and entity type as props rather than the whole entity object.\r\n', 'comment_created': datetime.datetime(2022, 7, 12, 13, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 919693101, 'comment_body': ""We would have to keep this, because the links in CB are not always the kebabCase links returned by the defined function in utils. Like for the entity `Work` , we don't have the link critiquebrainz.org/work/\\<entity-id> for it."", 'comment_created': datetime.datetime(2022, 7, 13, 6, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 919866566, 'comment_body': 'Ah, right, I forgot about work.', 'comment_created': datetime.datetime(2022, 7, 13, 9, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 922214448, 'comment_body': 'This should use the `log` library instead like done [here](https://github.com/metabrainz/bookbrainz-site/blob/0e6807c9b6151dc166e201a3aa2d6425db2902b9/src/server/helpers/handler.js#L36) for example\r\n```suggestion\r\n\t\tlog.error(err);\r\n```', 'comment_created': datetime.datetime(2022, 7, 15, 14, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 922222100, 'comment_body': ""I'm not convinced by this URL structure.\r\nI think compared to other routes, it would make more sense to have `/$entityType/$entityBBID/reviews`, which does mean adding that sub-route to each entity router.\r\nAnd in that case we probably don't need to send the entity type in the query params.\r\n\r\nWhat do you think? What was your thought process for this endpoint?"", 'comment_created': datetime.datetime(2022, 7, 15, 14, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 922229585, 'comment_body': ""This throws an error if there is no review or no text:\r\n`Unhandled rejection TypeError: Cannot read properties of null (reading 'length')`\r\n\r\nThis should do the trick:\r\n```suggestion\r\n\tif (reviewText?.length > REVIEW_CONTENT_PREVIEW_LENGTH) {\r\n```"", 'comment_created': datetime.datetime(2022, 7, 15, 14, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 922230279, 'comment_body': 'I would be conservative here and return undefined if reviewData is falsy.\r\nYou never know…', 'comment_created': datetime.datetime(2022, 7, 15, 14, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 922637688, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 16, 6, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 922638282, 'comment_body': ""Yes, I also think this URL structure is much cleaner and makes more sense. But we don't need to add a sub-route to each entity router. One main router can handle reviews of every entity type."", 'comment_created': datetime.datetime(2022, 7, 16, 6, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}]","[{'commit_sha': 'be7a4b56a4250aef1d880c1beaf87fe2094eef86', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19f3d6f0252dc1ca50ddec4f831eec2c50840fb9', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7fb472a1b3ee55334f1dc8dd9f4a1e29f90f0f9', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ac1ffa4111d977a6793665b596619cb943c21e7', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '527b75fe0f06179bf77bf31f654c3459541f9f8a', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94a960cca4ce56054c60dae1bbcdf4cfdc811ad2', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5904e51b2dd6afbb8f7aa2cb5f8f1c555644a6d', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '800737347730bee0e650111b3a00ecee36368621', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab7dea3f46933b1810532b4ddbb57c8b4f3ca075', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a61e53aad3202ca356169fa18c7537d815aa489c', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb92dfb55ef4bc7de28c78fbae339583f6fc1582', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fb748febb4b8a17fca219535dee6269333643b0', 'committer_username': 'dependabot[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 16, 22, 34, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ca8aa79d8db52e041867e05fe61c7b4014d0f16', 'committer_username': 'MonkeyDo', 'committer_name': 'Monkey Do', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 13, 16, 38, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bc7c4a1d89709cc58b7e36217613d69314adf8b', 'committer_username': 'MonkeyDo', 'committer_name': 'Monkey Do', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 13, 16, 38, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dfb4534a3d403c1e854ee31406d4bbf1a531cc6', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9711485e5d34108bbd4f5165d54f1b02bff31588', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47c2d6a554ba1b175cec8cbc97c1f0b5bb1b1e60', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
998962046,feat: add externalServiceOauth table and functions,"This PR adds the following:
1. A model for the `external_service_oauth` table.
2. Functions for fetching, saving, updating and deleting Oauth tokens in the database.",True,286,https://api.github.com/repos/metabrainz/bookbrainz-data-js/pulls/286,https://github.com/metabrainz/bookbrainz-data-js/pull/286,closed,500,0,7,4,0,4,0,0,[],2022-07-18 06:36:37+00:00,2022-08-05 10:24:16+00:00,1568859.0,"18 days, 3:47:39","[{'comment_id': 924743410, 'comment_body': 'I think we could probably do the right thing and define an ExternalServiceToken typescript type as the return type, since we know this method will return an array of rows in a specific format.\r\nThe return type  of this method (and others too) would then be `ExternalServiceToken[]` for an array of json objects.\r\n\r\nThat is, unless the return value of this method should be `return result.rows[0];` as it is for saveOauthToken and updateOauthToken', 'comment_created': datetime.datetime(2022, 7, 19, 16, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 932151724, 'comment_body': 'Sounds Good! ', 'comment_created': datetime.datetime(2022, 7, 28, 12, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 938690158, 'comment_body': 'I merged the PR too quickly ! 😱 \r\n\r\nI get an error when I run the tests locally: all these queries should reference `bookbrainz.external_service_oauth` rather than just `external_service_oauth`.\r\nI get errors like so: ""relation ""external_service_oauth"" does not exist"".\r\n\r\nWould you mind opening a new PR with the fixes?', 'comment_created': datetime.datetime(2022, 8, 5, 10, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 938691578, 'comment_body': ""Sure! I'll open a PR "", 'comment_created': datetime.datetime(2022, 8, 5, 10, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}]","[{'commit_sha': 'f1bd51b4328ea16336d6c25dd7c9aa016251b37a', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ff9faea4e262f71eb9ca3c4af4377ca67db25c9', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c208748ede32da180ceea5d5b54b56ef0c7d17b', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18c2979af4c8da95244bd29bff95375d4c363097', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29
1036471571,Unify reviews for Common MB-BB entities,"This PR unifies reviews for Artist-Author, Work-Literary Work having relationship between them.",True,464,https://api.github.com/repos/metabrainz/critiquebrainz/pulls/464,https://github.com/metabrainz/critiquebrainz/pull/464,closed,342,3,10,4,1,12,0,0,[],2022-08-25 09:03:59+00:00,2022-10-25 13:58:33+00:00,5288074.0,"61 days, 4:54:34","[{'comment_id': 958619804, 'comment_body': 'Like we did in #459, can we also add new python constants for these type ids?', 'comment_created': datetime.datetime(2022, 8, 30, 15, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 966189293, 'comment_body': 'If this method can return more than 1 id, then we should name it in a way that shows that it can return plural: `get_authors_for_artist`', 'comment_created': datetime.datetime(2022, 9, 8, 16, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 966189783, 'comment_body': 'If we return a list of items, it\'s better to have the ""no result"" option here as `[]` instead of `None`', 'comment_created': datetime.datetime(2022, 9, 8, 16, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 966190349, 'comment_body': 'Same comments as the author version - plural in function name, and `[]` return value', 'comment_created': datetime.datetime(2022, 9, 8, 16, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 966784168, 'comment_body': 'type id as a constant', 'comment_created': datetime.datetime(2022, 9, 9, 8, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 967216465, 'comment_body': 'Just a small thing here, when we know that the ""empty"" case is an empty list, we don\'t necessarily need `and author_info`, because `{% for author in author_info %}` will be an empty list and won\'t loop through anything.\r\n\r\nHowever, this being said, I think that we could do this a bit differently:\r\n\r\n```suggestion\r\n    {% if author_info is defined and author_info %}\r\n    <h4> {{ _(\'This entity is also in the BookBrainz Database as \') }}\r\n    {% for author in author_info %}\r\n```\r\nBecause if for some reason there are two related authors, we will show this heading twice. We should only do it once.', 'comment_created': datetime.datetime(2022, 9, 9, 15, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 969583064, 'comment_body': ""This bit of code is a candidate for an optimisation, although in the case that we currently have for these pages this isn't necessary.\r\n\r\nA common error in designing database queries is to perform 1+n queries - i.e. one query to get a list of items, and then for each of those n items, another query for each of them. This could result in thousands of queries being made, when it could have been simplified to perform just 1 query (for example to get the list of items and their related data) by changing the query or including a join to another table.\r\n\r\nIn this case, we could have multiple mbids, and then for each of them we call the `list_reviews` method (this actually makes at least 2 sql queries, one to get the count of all reviews, and another to get the actual reviews). This means that if we had 10 artist mbids, we'd have to make 20 sql queries, all of them more or less the same except for the entity id.\r\nHowever, in the specific case of BB-MB relationships, we don't expect to see more than 1 or 2 related MBIDs, so we're not going to make too many database queries.\r\n\r\nIn the future, we may have more requirements to get information/reviews about multiple entities at once. I'll open a ticket to add this feature so that we know that we might need it.\r\n\r\nFor this PR, no requirement to do anything else, I was just letting you know about the problem."", 'comment_created': datetime.datetime(2022, 9, 13, 12, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 970374415, 'comment_body': 'That would be great. Done', 'comment_created': datetime.datetime(2022, 9, 14, 6, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 970374789, 'comment_body': 'Fixed 👍 ', 'comment_created': datetime.datetime(2022, 9, 14, 6, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 970374882, 'comment_body': 'Done 👍 ', 'comment_created': datetime.datetime(2022, 9, 14, 6, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 970375148, 'comment_body': 'Done 👍 ', 'comment_created': datetime.datetime(2022, 9, 14, 6, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 970375185, 'comment_body': 'Done 👍 ', 'comment_created': datetime.datetime(2022, 9, 14, 6, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}]","[{'commit_sha': 'd59ecc723546a1808b3d64eb530b39a9e7e31f67', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95b075baa81a8b1680e577fe2e716a40beb29cec', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73afc1cfa4e2df195f415e74c59e5e863764e96a', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f07b3b5c128d24541bda4b0a4b6ee3587de647f', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}]",Ansh Goyal,84081628,anshg1214@gmail.com,User,,26,,17,29

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
16650099,critiquebrainz,metabrainz/critiquebrainz,Python,61,66,7,44,3004,6,15,6,"[{'id': 1540617405, 'number': 492, 'closed': datetime.datetime(2023, 10, 31, 10, 16, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 3, 19, 50, 42, tzinfo=datetime.timezone.utc), 'time_taken': 2384728.0, 'time_delta': '27 days, 14:25:28', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1347733177, 'number': 487, 'closed': datetime.datetime(2023, 9, 5, 15, 20, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 11, 20, 58, 48, tzinfo=datetime.timezone.utc), 'time_taken': 10088528.0, 'time_delta': '116 days, 18:22:08', 'additions': 370, 'deletions': 359, 'state': 'closed'}, {'id': 1080941495, 'number': 474, 'closed': None, 'created': datetime.datetime(2022, 10, 8, 6, 49, 33, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 474, 'deletions': 92, 'state': 'open'}, {'id': 1058452052, 'number': 465, 'closed': datetime.datetime(2022, 10, 25, 13, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 16, 10, 14, 13, tzinfo=datetime.timezone.utc), 'time_taken': 3382427.0, 'time_delta': '39 days, 3:33:47', 'additions': 50, 'deletions': 407, 'state': 'closed'}, {'id': 1036471571, 'number': 464, 'closed': datetime.datetime(2022, 10, 25, 13, 58, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 25, 9, 3, 59, tzinfo=datetime.timezone.utc), 'time_taken': 5288074.0, 'time_delta': '61 days, 4:54:34', 'additions': 342, 'deletions': 3, 'state': 'closed'}, {'id': 1036459546, 'number': 463, 'closed': datetime.datetime(2022, 8, 26, 11, 11, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 25, 8, 53, 26, tzinfo=datetime.timezone.utc), 'time_taken': 94710.0, 'time_delta': '1 day, 2:18:30', 'additions': 15, 'deletions': 14, 'state': 'closed'}, {'id': 1029707264, 'number': 460, 'closed': None, 'created': datetime.datetime(2022, 8, 18, 8, 53, 51, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 361, 'deletions': 198, 'state': 'open'}, {'id': 1028883936, 'number': 459, 'closed': datetime.datetime(2022, 9, 8, 16, 15, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 17, 13, 59, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1908963.0, 'time_delta': '22 days, 2:16:03', 'additions': 354, 'deletions': 65, 'state': 'closed'}, {'id': 1025081415, 'number': 458, 'closed': datetime.datetime(2022, 8, 30, 15, 16, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 12, 15, 39, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1553788.0, 'time_delta': '17 days, 23:36:28', 'additions': 56, 'deletions': 46, 'state': 'closed'}, {'id': 1020443238, 'number': 457, 'closed': datetime.datetime(2022, 8, 16, 14, 33, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 8, 15, 29, 28, tzinfo=datetime.timezone.utc), 'time_taken': 687852.0, 'time_delta': '7 days, 23:04:12', 'additions': 19, 'deletions': 10, 'state': 'closed'}, {'id': 1018450176, 'number': 456, 'closed': datetime.datetime(2022, 8, 16, 15, 18, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 5, 9, 17, 9, tzinfo=datetime.timezone.utc), 'time_taken': 972065.0, 'time_delta': '11 days, 6:01:05', 'additions': 100, 'deletions': 4, 'state': 'closed'}, {'id': 1017579941, 'number': 455, 'closed': datetime.datetime(2022, 8, 16, 14, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 13, 51, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1039292.0, 'time_delta': '12 days, 0:41:32', 'additions': 901, 'deletions': 2, 'state': 'closed'}, {'id': 1011961945, 'number': 454, 'closed': datetime.datetime(2022, 8, 4, 15, 54, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 13, 3, 52, tzinfo=datetime.timezone.utc), 'time_taken': 528616.0, 'time_delta': '6 days, 2:50:16', 'additions': 482, 'deletions': 2, 'state': 'closed'}, {'id': 1011715419, 'number': 453, 'closed': datetime.datetime(2022, 8, 16, 14, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 8, 51, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1575719.0, 'time_delta': '18 days, 5:41:59', 'additions': 607, 'deletions': 4, 'state': 'closed'}, {'id': 1011710838, 'number': 452, 'closed': datetime.datetime(2022, 8, 16, 14, 32, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 8, 46, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1576006.0, 'time_delta': '18 days, 5:46:46', 'additions': 2015, 'deletions': 35, 'state': 'closed'}, {'id': 1009474749, 'number': 451, 'closed': datetime.datetime(2022, 7, 29, 14, 14, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 27, 10, 21, 59, tzinfo=datetime.timezone.utc), 'time_taken': 186751.0, 'time_delta': '2 days, 3:52:31', 'additions': 54, 'deletions': 5, 'state': 'closed'}, {'id': 1007106474, 'number': 449, 'closed': datetime.datetime(2022, 7, 25, 13, 21, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 10, 31, 37, tzinfo=datetime.timezone.utc), 'time_taken': 10195.0, 'time_delta': '2:49:55', 'additions': 7, 'deletions': 2, 'state': 'closed'}, {'id': 998963282, 'number': 446, 'closed': datetime.datetime(2022, 7, 25, 9, 2, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 18, 6, 38, 27, tzinfo=datetime.timezone.utc), 'time_taken': 613463.0, 'time_delta': '7 days, 2:24:23', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 997514365, 'number': 445, 'closed': datetime.datetime(2022, 7, 18, 9, 58, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 15, 8, 46, 49, tzinfo=datetime.timezone.utc), 'time_taken': 263513.0, 'time_delta': '3 days, 1:11:53', 'additions': 0, 'deletions': 434, 'state': 'closed'}, {'id': 993028422, 'number': 444, 'closed': datetime.datetime(2022, 7, 25, 13, 21, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 11, 12, 13, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1213655.0, 'time_delta': '14 days, 1:07:35', 'additions': 81, 'deletions': 15, 'state': 'closed'}, {'id': 992672128, 'number': 443, 'closed': datetime.datetime(2022, 7, 11, 12, 3, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 11, 5, 16, 53, tzinfo=datetime.timezone.utc), 'time_taken': 24371.0, 'time_delta': '6:46:11', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 990195827, 'number': 441, 'closed': datetime.datetime(2022, 7, 29, 16, 6, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 7, 12, 57, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1912132.0, 'time_delta': '22 days, 3:08:52', 'additions': 76, 'deletions': 5, 'state': 'closed'}, {'id': 984139382, 'number': 440, 'closed': datetime.datetime(2022, 7, 8, 13, 50, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 30, 17, 59, 49, tzinfo=datetime.timezone.utc), 'time_taken': 676228.0, 'time_delta': '7 days, 19:50:28', 'additions': 248, 'deletions': 76, 'state': 'closed'}, {'id': 960711102, 'number': 436, 'closed': datetime.datetime(2022, 7, 8, 13, 49, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 7, 17, 46, 26, tzinfo=datetime.timezone.utc), 'time_taken': 2664198.0, 'time_delta': '30 days, 20:03:18', 'additions': 138, 'deletions': 4, 'state': 'closed'}, {'id': 959390883, 'number': 434, 'closed': datetime.datetime(2022, 7, 8, 13, 49, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 6, 17, 58, 18, tzinfo=datetime.timezone.utc), 'time_taken': 2749859.0, 'time_delta': '31 days, 19:50:59', 'additions': 870, 'deletions': 83, 'state': 'closed'}, {'id': 958103844, 'number': 433, 'closed': datetime.datetime(2022, 6, 13, 15, 45, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 4, 5, 25, 19, tzinfo=datetime.timezone.utc), 'time_taken': 814822.0, 'time_delta': '9 days, 10:20:22', 'additions': 99, 'deletions': 8, 'state': 'closed'}, {'id': 943396297, 'number': 427, 'closed': None, 'created': datetime.datetime(2022, 5, 21, 9, 24, 55, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 145, 'deletions': 8, 'state': 'open'}, {'id': 919755668, 'number': 426, 'closed': datetime.datetime(2022, 5, 26, 17, 15, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 26, 18, 39, 39, tzinfo=datetime.timezone.utc), 'time_taken': 2586960.0, 'time_delta': '29 days, 22:36:00', 'additions': 80, 'deletions': 52, 'state': 'closed'}, {'id': 916249072, 'number': 423, 'closed': datetime.datetime(2022, 5, 26, 16, 30, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 22, 9, 48, 41, tzinfo=datetime.timezone.utc), 'time_taken': 2961691.0, 'time_delta': '34 days, 6:41:31', 'additions': 215, 'deletions': 36, 'state': 'closed'}, {'id': 907523041, 'number': 422, 'closed': datetime.datetime(2022, 5, 26, 16, 44, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 12, 10, 58, 34, tzinfo=datetime.timezone.utc), 'time_taken': 3822333.0, 'time_delta': '44 days, 5:45:33', 'additions': 147, 'deletions': 11, 'state': 'closed'}, {'id': 903115256, 'number': 419, 'closed': datetime.datetime(2022, 4, 11, 9, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 7, 19, 16, 19, tzinfo=datetime.timezone.utc), 'time_taken': 310781.0, 'time_delta': '3 days, 14:19:41', 'additions': 9, 'deletions': 13, 'state': 'closed'}, {'id': 902294077, 'number': 418, 'closed': datetime.datetime(2022, 4, 11, 8, 57, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 7, 5, 4, 33, tzinfo=datetime.timezone.utc), 'time_taken': 359568.0, 'time_delta': '4 days, 3:52:48', 'additions': 2, 'deletions': 12, 'state': 'closed'}, {'id': 882136966, 'number': 406, 'closed': datetime.datetime(2022, 3, 29, 13, 50, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 17, 6, 54, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1061794.0, 'time_delta': '12 days, 6:56:34', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 876764522, 'number': 403, 'closed': datetime.datetime(2022, 10, 4, 10, 27, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 10, 19, 30, 41, tzinfo=datetime.timezone.utc), 'time_taken': 17938596.0, 'time_delta': '207 days, 14:56:36', 'additions': 167, 'deletions': 82, 'state': 'closed'}, {'id': 874016218, 'number': 402, 'closed': datetime.datetime(2022, 3, 8, 14, 56, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 8, 10, 5, 4, tzinfo=datetime.timezone.utc), 'time_taken': 17513.0, 'time_delta': '4:51:53', 'additions': 113, 'deletions': 26, 'state': 'closed'}, {'id': 870947404, 'number': 401, 'closed': None, 'created': datetime.datetime(2022, 3, 3, 19, 32, 39, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 4069, 'deletions': 4, 'state': 'open'}, {'id': 867116853, 'number': 399, 'closed': datetime.datetime(2022, 3, 8, 16, 1, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 28, 19, 35, 35, tzinfo=datetime.timezone.utc), 'time_taken': 678339.0, 'time_delta': '7 days, 20:25:39', 'additions': 31, 'deletions': 141, 'state': 'closed'}, {'id': 844143468, 'number': 394, 'closed': datetime.datetime(2022, 4, 11, 16, 44, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 9, 17, 13, 16, tzinfo=datetime.timezone.utc), 'time_taken': 5268653.0, 'time_delta': '60 days, 23:30:53', 'additions': 80, 'deletions': 26, 'state': 'closed'}, {'id': 835010292, 'number': 390, 'closed': datetime.datetime(2022, 2, 6, 18, 8, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 29, 6, 56, 44, tzinfo=datetime.timezone.utc), 'time_taken': 731501.0, 'time_delta': '8 days, 11:11:41', 'additions': 67, 'deletions': 100, 'state': 'closed'}, {'id': 831135485, 'number': 389, 'closed': datetime.datetime(2022, 1, 28, 9, 47, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 25, 7, 1, 36, tzinfo=datetime.timezone.utc), 'time_taken': 269148.0, 'time_delta': '3 days, 2:45:48', 'additions': 34, 'deletions': 21, 'state': 'closed'}, {'id': 827575494, 'number': 386, 'closed': datetime.datetime(2022, 1, 23, 6, 5, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 20, 14, 14, 49, tzinfo=datetime.timezone.utc), 'time_taken': 229855.0, 'time_delta': '2 days, 15:50:55', 'additions': 61, 'deletions': 31, 'state': 'closed'}]"
28521896,bookbrainz-site,metabrainz/bookbrainz-site,JavaScript,279,186,15,94,6138,20,21,20,"[{'id': 1577834689, 'number': 1033, 'closed': datetime.datetime(2024, 1, 18, 12, 50, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 29, 11, 43, 18, tzinfo=datetime.timezone.utc), 'time_taken': 7002425.0, 'time_delta': '81 days, 1:07:05', 'additions': 63, 'deletions': 19, 'state': 'closed'}, {'id': 1577545580, 'number': 1032, 'closed': datetime.datetime(2023, 11, 23, 15, 2, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 28, 13, 11, 47, tzinfo=datetime.timezone.utc), 'time_taken': 2253025.0, 'time_delta': '26 days, 1:50:25', 'additions': 21, 'deletions': 11, 'state': 'closed'}, {'id': 1492103859, 'number': 1013, 'closed': datetime.datetime(2023, 9, 2, 10, 54, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 28, 13, 36, 29, tzinfo=datetime.timezone.utc), 'time_taken': 422278.0, 'time_delta': '4 days, 21:17:58', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 1065159729, 'number': 883, 'closed': datetime.datetime(2022, 10, 17, 14, 12, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 23, 10, 36, 17, tzinfo=datetime.timezone.utc), 'time_taken': 2086575.0, 'time_delta': '24 days, 3:36:15', 'additions': 1, 'deletions': 3, 'state': 'closed'}, {'id': 1000726830, 'number': 865, 'closed': datetime.datetime(2022, 8, 30, 18, 31, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 19, 12, 36, 46, tzinfo=datetime.timezone.utc), 'time_taken': 3650079.0, 'time_delta': '42 days, 5:54:39', 'additions': 1700, 'deletions': 87, 'state': 'closed'}, {'id': 994016973, 'number': 862, 'closed': datetime.datetime(2022, 7, 19, 13, 12, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 12, 8, 53, 15, tzinfo=datetime.timezone.utc), 'time_taken': 620339.0, 'time_delta': '7 days, 4:18:59', 'additions': 326, 'deletions': 22, 'state': 'closed'}]"
42076955,bookbrainz-data-js,metabrainz/bookbrainz-data-js,JavaScript,20,9,12,18,1086,0,6,0,"[{'id': 1018562352, 'number': 287, 'closed': datetime.datetime(2022, 8, 5, 12, 3, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 5, 11, 14, 47, tzinfo=datetime.timezone.utc), 'time_taken': 2914.0, 'time_delta': '0:48:34', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 998962046, 'number': 286, 'closed': datetime.datetime(2022, 8, 5, 10, 24, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 18, 6, 36, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1568859.0, 'time_delta': '18 days, 3:47:39', 'additions': 500, 'deletions': 0, 'state': 'closed'}]"
