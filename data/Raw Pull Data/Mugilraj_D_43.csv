pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
672261648,Skeleton driver for AD5110 Digital potentiometer,"This PR adds a bare-minimal skeleton driver for ADI's AD5110, a Nonvolatile Digital Potentiometer. Along with the driver, this PR includes a device-tree overlay for AD5110 to use with Raspberry Pi and adds it to the device-tree's list of trivial devices.

Done as part of GSoC 2021, under The Linux Foundation.",True,1571,https://api.github.com/repos/analogdevicesinc/linux/pulls/1571,https://github.com/analogdevicesinc/linux/pull/1571,closed,130,0,7,3,0,1,0,0,[],2021-06-17 06:17:07+00:00,2021-06-22 12:07:52+00:00,453045.0,"5 days, 5:50:45","[{'comment_id': 653556985, 'comment_body': 'For i2c drivers [this](https://elixir.bootlin.com/linux/latest/source/include/linux/i2c.h#L265) is now the preferred way... Better to start using it from the beginning :)', 'comment_created': datetime.datetime(2021, 6, 17, 13, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}]","[{'commit_sha': 'a7b884450d715ba44097e1410e1902e661d8f23e', 'committer_username': 'mugilr', 'committer_name': 'MUGILRAJ', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 21, 9, 55, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a36b02448dbb043d70126bddcd24acfc70c91a6d', 'committer_username': 'mugilr', 'committer_name': 'MUGILRAJ', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 21, 9, 55, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b1a13a88e64b71c4be3cacc5a625766d46f1b3c', 'committer_username': 'mugilr', 'committer_name': 'MUGILRAJ', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 21, 9, 55, 38, tzinfo=datetime.timezone.utc)}]",MUGILRAJ,44336713,,User,,25,,2,2
680958655,iio: potentiometer: Add channel support to AD5110,"Add the channel, read_raw(), and write_raw() functions support to the
ad5110 driver with configured offset and scale.

",True,1595,https://api.github.com/repos/analogdevicesinc/linux/pulls/1595,https://github.com/analogdevicesinc/linux/pull/1595,closed,259,16,1,1,7,61,0,0,[],2021-06-30 15:02:16+00:00,2021-08-06 11:29:28+00:00,3184032.0,"36 days, 20:27:12","[{'comment_id': 662230199, 'comment_body': ""Some of these values are unused in the driver so they should be removed. \r\nI don't personally mind this, but you'll get this comment when upstreaming."", 'comment_created': datetime.datetime(2021, 7, 1, 12, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 662232198, 'comment_body': 'you could probably simplify to `return ret;` if the function is known not to return positive return codes', 'comment_created': datetime.datetime(2021, 7, 1, 12, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 662234013, 'comment_body': ""i think more care should go into those types:\r\n- cmd could be an u8 (having it signed or larger than 8 bits doesn't make sense)\r\n- i'm not 100% sure but please check if val shouldn't be 8-bit too and if the sign has any meaning here\r\n\r\nalso please do this check for all variables and function parameters"", 'comment_created': datetime.datetime(2021, 7, 1, 12, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 662248322, 'comment_body': 'Maybe device_get_match_data here?', 'comment_created': datetime.datetime(2021, 7, 1, 12, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tachicialex', 'type': 'User'}, {'comment_id': 662249405, 'comment_body': 'Nit: maybe add a default case with -EINVAL', 'comment_created': datetime.datetime(2021, 7, 1, 12, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tachicialex', 'type': 'User'}, {'comment_id': 662253927, 'comment_body': ' From the datasheet: ""The storing of EEPROM data takes approximately 18 ms  during this time, the device is locked and does not acknowledge any new command."" Maybe is worth waiting that time? msleep(20)?', 'comment_created': datetime.datetime(2021, 7, 1, 12, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tachicialex', 'type': 'User'}, {'comment_id': 662258352, 'comment_body': 'Check return value for errors.', 'comment_created': datetime.datetime(2021, 7, 1, 12, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tachicialex', 'type': 'User'}, {'comment_id': 662258540, 'comment_body': 'Here too.', 'comment_created': datetime.datetime(2021, 7, 1, 12, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tachicialex', 'type': 'User'}, {'comment_id': 662810097, 'comment_body': 'Yeah sure, I just added it for future implementation. will drop in v2\r\n', 'comment_created': datetime.datetime(2021, 7, 2, 7, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 662810994, 'comment_body': 'Fixed in v2', 'comment_created': datetime.datetime(2021, 7, 2, 7, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 662813002, 'comment_body': ""Makes sense. I guess both are u8, I'll check it. Fixed in v2"", 'comment_created': datetime.datetime(2021, 7, 2, 7, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 662814679, 'comment_body': 'Yes, Fixed in v2', 'comment_created': datetime.datetime(2021, 7, 2, 7, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 662821770, 'comment_body': ""You're right, but I haven't added EEPROM write feature so didn't think of it. Do you want me to add msleep?"", 'comment_created': datetime.datetime(2021, 7, 2, 8, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 662821983, 'comment_body': 'Sure, Fixed in v2', 'comment_created': datetime.datetime(2021, 7, 2, 8, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 662822179, 'comment_body': 'Fixed in v2', 'comment_created': datetime.datetime(2021, 7, 2, 8, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 662826373, 'comment_body': ""I didn't add a default case because after the switch condition there is no execution so thought of placing -EINVAL out of the switch case. I'll change it if you say so :)"", 'comment_created': datetime.datetime(2021, 7, 2, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 663680215, 'comment_body': 'i think is good to have it there, thx', 'comment_created': datetime.datetime(2021, 7, 5, 6, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tachicialex', 'type': 'User'}, {'comment_id': 663788836, 'comment_body': 'Is `cmd` supposed to be the register to read?', 'comment_created': datetime.datetime(2021, 7, 5, 9, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 663790520, 'comment_body': 'Any reason not to use `regmap`? It makes things a bit more simpler...', 'comment_created': datetime.datetime(2021, 7, 5, 9, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 663795936, 'comment_body': 'nit: new line', 'comment_created': datetime.datetime(2021, 7, 5, 9, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 663796699, 'comment_body': 'The lock should also protect the writes on `data->buf` as that is a shared variable... Same for the read function', 'comment_created': datetime.datetime(2021, 7, 5, 9, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 663798128, 'comment_body': '`FIELD_GET()` with `GENMASK(6, 3)`?', 'comment_created': datetime.datetime(2021, 7, 5, 9, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 663798420, 'comment_body': 'run checkpatch on your patches... It should complain here?', 'comment_created': datetime.datetime(2021, 7, 5, 9, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 663798798, 'comment_body': 'maybe use `BIT(7)`. More readable and neat', 'comment_created': datetime.datetime(2021, 7, 5, 9, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 663800795, 'comment_body': ""Hmm nop... Just turn this into:\r\n\r\n```\r\nret = ad5110_read(data, AD5110_RDAC_RD, val);\r\nif (ret)\r\n    return ret;\r\n\r\n*val = *val >> data->cfg->shift;\r\nreturn IIO_VAL_INT;\r\n```\r\n\r\nThere's no point in doing the write into `*val` if the read failed..."", 'comment_created': datetime.datetime(2021, 7, 5, 9, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 663801421, 'comment_body': 'Typically a comment on why the align requirement is appreciated...', 'comment_created': datetime.datetime(2021, 7, 5, 9, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 663806552, 'comment_body': 'nit: I would not really check for `val2`... Just ignore it', 'comment_created': datetime.datetime(2021, 7, 5, 10, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 663807195, 'comment_body': ""I don't really see the added value with this helper macro. Anyways, I don't see any problem either :). Just fix the alignment as it looks odd  "", 'comment_created': datetime.datetime(2021, 7, 5, 10, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 664079929, 'comment_body': ""Today I had a discussion with @buha and @dragos.bogdan. so, msleep is not required here. Probably in the future, while implementing EEPROM will add msleep.  I hope that's alright for you."", 'comment_created': datetime.datetime(2021, 7, 5, 18, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 664081199, 'comment_body': 'yes, kind of register. Since the datasheet mentioned like  command I used `cmd`', 'comment_created': datetime.datetime(2021, 7, 5, 18, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 664083763, 'comment_body': 'Initially,  had an idea of using `regmap`  but most of the single interface driver not using regmap. so, dropped that idea ', 'comment_created': datetime.datetime(2021, 7, 5, 18, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 664083821, 'comment_body': 'Fixed in v2\r\n', 'comment_created': datetime.datetime(2021, 7, 5, 18, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 664083941, 'comment_body': 'Fixed in v2\r\n', 'comment_created': datetime.datetime(2021, 7, 5, 18, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 664084271, 'comment_body': ""Didn't think of this. Fixed in v2"", 'comment_created': datetime.datetime(2021, 7, 5, 18, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 664084370, 'comment_body': ""yes, `WARNING: line over 80 characters`. Is that a big issue?  I don't have any idea to overcome this.\r\nMaybe like this?\r\n```\r\ndata->tol = ((val & 0x07)*1000 / 8) + data->tol*1000;\r\ndata->tol = data->cfg->kohms * data->tol / 100;\r\n```"", 'comment_created': datetime.datetime(2021, 7, 5, 18, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 664084464, 'comment_body': 'Fixed in v2', 'comment_created': datetime.datetime(2021, 7, 5, 18, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 664084738, 'comment_body': 'Makes sense. applied in v2', 'comment_created': datetime.datetime(2021, 7, 5, 18, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 664084914, 'comment_body': 'Fixed in v2', 'comment_created': datetime.datetime(2021, 7, 5, 18, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 664085080, 'comment_body': 'Fixed in v2', 'comment_created': datetime.datetime(2021, 7, 5, 18, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 664085999, 'comment_body': ' to make of_table looks good :)', 'comment_created': datetime.datetime(2021, 7, 5, 18, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 664566707, 'comment_body': 'I think it does not look that bad without this :wink: . Anyways, fix the alignment  in this macro...', 'comment_created': datetime.datetime(2021, 7, 6, 13, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 664571725, 'comment_body': 'Hmm not really that... I think checkpatch should complain about not having spaces around `*` like in `((val & 0x07) * 1000 / 8)`. So in IIO, the 80 limit is still the preferred when it does not hurt readability (the max now is 100).  For me, the 100 limit is fine but upstream might complain... Maybe just go with your suggestion and make it in 2 lines.', 'comment_created': datetime.datetime(2021, 7, 6, 13, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 664574156, 'comment_body': ""Ok, then as you're using a properly cacheline aligned data buffer, use `i2c_master_recv_dmasafe()` and `i2c_master_send_dmasafe()`. Check [here](https://elixir.bootlin.com/linux/latest/source/Documentation/i2c/dma-considerations.rst) if you have interest in this..."", 'comment_created': datetime.datetime(2021, 7, 6, 13, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 664574857, 'comment_body': 'Hmm, then I guess I would still use `reg` as it makes it more explicit. But yea, also fine as-is', 'comment_created': datetime.datetime(2021, 7, 6, 13, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 665928868, 'comment_body': ""nit: didn't checkpatch complained about the lock? Typically it also requires a comment"", 'comment_created': datetime.datetime(2021, 7, 8, 7, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 665930513, 'comment_body': 'nit: no need for the extra new line before the new `case`', 'comment_created': datetime.datetime(2021, 7, 8, 7, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 665931076, 'comment_body': 'Still more tabs than really needed...Just one tab is enough', 'comment_created': datetime.datetime(2021, 7, 8, 7, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nunojsa', 'type': 'User'}, {'comment_id': 666661855, 'comment_body': ""No, It didn't complain anything about it."", 'comment_created': datetime.datetime(2021, 7, 9, 4, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 666662130, 'comment_body': 'Fixed in v3\r\n', 'comment_created': datetime.datetime(2021, 7, 9, 4, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 681500467, 'comment_body': 'By looking at the datasheet, I think you need to use this here:\r\n`*val = data->buf[1];`', 'comment_created': datetime.datetime(2021, 8, 3, 7, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 681748428, 'comment_body': ""I  tested with `*val = data->buf[1];` It's just return 0 but when I use `*val = data->buf[0];` It's return the value we need. So I think `buf[0]` is correct.\r\n"", 'comment_created': datetime.datetime(2021, 8, 3, 13, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 681759466, 'comment_body': ""Actually something is wrong here, it's related to what I said.\r\n\r\nIf you look in the datasheet at figure 45 you can see that a read operation consists of an:\r\nop1 - i2c write: frame1 (addr + w) + frame2 (command) + frame3 (data)\r\nop2 - i2c read: frame1 (addr + r) + frame2 (data)\r\n\r\nAccording to your code op2 performs an operation with 3 frames (bytes) instead of 2 frames (bytes) which is incorrect and probably messes up the communication. https://github.com/analogdevicesinc/linux/blob/3d15848f2f94458080c3192b80b82f4ccec7dc98/drivers/iio/potentiometer/ad5110.c#L95\r\n\r\nThat line should probably read:\r\n`ret = i2c_master_recv_dmasafe(data->client, data->buf, 1);`\r\n\r\nAnd then you indeed retrieve the correct value with :\r\n`*val = data->buf[0];`"", 'comment_created': datetime.datetime(2021, 8, 3, 13, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 681795027, 'comment_body': ""Oops, I thought it won't create any problem. I assumed in op2 the 3rd frame becomes zero which we don't care about.\r\n"", 'comment_created': datetime.datetime(2021, 8, 3, 14, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 681831577, 'comment_body': 'Well, it\'s an extra ""frame"" on the i2c bus which is not what the datasheet describes. I\'m curious if this improves anything related to the issues you were mentioning. It probably improves the read/write of any value as the pot value, but probably doesn\'t improve the double call issue.', 'comment_created': datetime.datetime(2021, 8, 3, 14, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 681849641, 'comment_body': 'Yeah, It probably improves the i2c read but we are facing issues on i2c write.', 'comment_created': datetime.datetime(2021, 8, 3, 15, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 682545160, 'comment_body': ""Well, in the demo that we saw, you were writing 123 and reading 3 so you can't know for sure what is wrong, the read or the write ? In any case, the read is probably fixed with this change. But what happens now when you write 127 for example ? "", 'comment_created': datetime.datetime(2021, 8, 4, 11, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 682653959, 'comment_body': 'i2c_master_send_dmasafe() (called by ad5110_write()) returns negative errno or the number of read bytes. This is incorrect for an iio_write_raw() function, where in case of success, it should return 0. Most probably, you will end up having iio_write_raw() called multiple times.', 'comment_created': datetime.datetime(2021, 8, 4, 14, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dbogdan', 'type': 'User'}, {'comment_id': 682659129, 'comment_body': ""It's a problem with write because when I write 123 the driver executes write_raw for 2 times In the 1st cycle it writes 123 and in the 2nd cycle, it again writes 3 which is the last digit of the previous write. Since the recent data write to RDAC was 3, when we read it showed 3. So, in this example, if we write 127 in the 1st cycle it writes 127, and in the 2nd cycle just 7. So, If we read RDAC it will return  7. "", 'comment_created': datetime.datetime(2021, 8, 4, 14, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}, {'comment_id': 682662445, 'comment_body': 'see @dbogdan comment below, that will be the fix for the double write', 'comment_created': datetime.datetime(2021, 8, 4, 14, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 682663676, 'comment_body': 'minor correction: i2c_master_send_dmasafe() returns positive number of bytes and this value is passed back instead of zero as the return code of write_raw()', 'comment_created': datetime.datetime(2021, 8, 4, 14, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'buha', 'type': 'User'}, {'comment_id': 682671376, 'comment_body': 'ohh ok got it, my bad :(\r\n', 'comment_created': datetime.datetime(2021, 8, 4, 14, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mugilr', 'type': 'User'}]","[{'commit_sha': 'a1bf21ea721800f09823386fcfcb799807016a49', 'committer_username': 'mugilr', 'committer_name': 'MUGILRAJ', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 21, 9, 55, 38, tzinfo=datetime.timezone.utc)}]",MUGILRAJ,44336713,,User,,25,,2,2



