pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
448795724,Omindex mimetype,Add mimetype as a parameter to bool extract().,False,304,https://api.github.com/repos/xapian/xapian/pulls/304,https://github.com/xapian/xapian/pull/304,closed,19,4,11,9,1,2,0,0,[],2020-07-14 10:33:30+00:00,2020-07-15 07:17:53+00:00,74663.0,20:44:23,"[{'comment_id': 454264117, 'comment_body': ""When I did git commit -v, this wasn't there. I even compared before creating a PR. I don't know how this end up here.\r\n\r\nWhat I did was I performed a git reset --mixed on my omindex_mimetype-modifications branch to reset it to a commit that has been merged. And then did git add -p to only add changes which were required."", 'comment_created': datetime.datetime(2020, 7, 14, 10, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 454268901, 'comment_body': ""> When I did git commit -v, this wasn't there. I even compared before creating a PR. I don't know how this end up here.\r\n> \r\n> What I did was I performed a git reset --mixed on my omindex_mimetype-modifications branch to reset it to a commit that has been merged. And then did git add -p to only add changes which were required.\r\n\r\nI have fixed this, It was added twice, I will find out how that happened. I have fixed it for this PR."", 'comment_created': datetime.datetime(2020, 7, 14, 10, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}]","[{'commit_sha': 'c6f0c45303f860a46461987b34703229e48e042c', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5291bc069a55e2d106b615593b243c8194490cc8', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd94f0002eca2c871aa6fcc3ec3415e48e0b4da81', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7a638879cb002ae0af07a152ffe2d35d525fab2', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37d61cdbb3893fec83a786f82dcc4ca3e3558d83', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60392a37ea39908ce18dca5631d5fc55ab801229', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4890de575d5b195b3d1a8c2109c13dcadf370e87', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee35af00c97cd69f44daf478d475e9fc28f18a1', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ce3715d13e346960de5c03a02027272e525b973', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}]",Parth Kapadia,46609729,,User,,69,,18,21
432448300,Omindex libarchive zip,Handler for extracting data from OpenDocument Formats using Libarchive,False,300,https://api.github.com/repos/xapian/xapian/pulls/300,https://github.com/xapian/xapian/pull/300,closed,1220,37,22,12,1,70,0,0,[],2020-06-10 13:16:16+00:00,2020-07-11 00:58:21+00:00,2634125.0,"30 days, 11:42:05","[{'comment_id': 438317458, 'comment_body': 'Avoid using `&string[0]` as it is not guaranteed to be null terminated in some version of C++. \r\nA better option would be using [c_str](http://www.cplusplus.com/reference/string/string/c_str/) to get a `const char *` from a string.', 'comment_created': datetime.datetime(2020, 6, 10, 18, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 438319204, 'comment_body': 'I think it is not necessary to assign an empty string. The default string constructor creates an empty string, with a length of zero characters.', 'comment_created': datetime.datetime(2020, 6, 10, 18, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 438321362, 'comment_body': 'This is a minor issue but try to use meaningful names when declaring variables. This make the code more readable and easy to understand.', 'comment_created': datetime.datetime(2020, 6, 10, 18, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 438756295, 'comment_body': 'I have changed this and committed again,\r\n\r\n`const char* file = filename.c_str();`', 'comment_created': datetime.datetime(2020, 6, 11, 12, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 438756544, 'comment_body': 'Thanks for pointing this out, I have edited this.', 'comment_created': datetime.datetime(2020, 6, 11, 12, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 438757538, 'comment_body': 'a, here, is an archive object (pointer to struct archive). I have renamed `a` to `archive_obj`.', 'comment_created': datetime.datetime(2020, 6, 11, 12, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 439861407, 'comment_body': 'Missing space ', 'comment_created': datetime.datetime(2020, 6, 14, 19, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 439865249, 'comment_body': 'It would be better using different strings to store the information extracted as we cannot assume any particular order in which libarchive browses on the file.', 'comment_created': datetime.datetime(2020, 6, 14, 20, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 439865787, 'comment_body': ""This is not a proper way to declare variable length arrays in C++ as some version of the standard doesn't support it. A constant-expression can be used, but in this case I think the operators `new` and `delete` are more suitable."", 'comment_created': datetime.datetime(2020, 6, 14, 20, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 439866554, 'comment_body': ""As you cannot assume any order in which files are shown, you cannot parse the content of the file here. It is highly possible that `s` doesn't store the information extracted from `content.xml` at this point so you should parse the information at the end of the program."", 'comment_created': datetime.datetime(2020, 6, 14, 20, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 439871479, 'comment_body': 'Not sure if we should return `false` here and drop all the extracted information.', 'comment_created': datetime.datetime(2020, 6, 14, 21, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 439972282, 'comment_body': ""When you're adding a new item to an existing list, look to see if the list is in sorted order (as this one was before your addition) - if so, you should probably add the item to preserve that sorted order."", 'comment_created': datetime.datetime(2020, 6, 15, 7, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 439974366, 'comment_body': ""In C++ code, it's usually better to declare variables at the point where you can assign to them (at least if that's easily possible as it is here for `status_code` and `archive_obj`).  That way there's no point where the variable is uninitialised, which makes it very clear that the uninitialised value is never used (and harder for someone changing the code in future to accidentally introduce a use of an uninitialised value).\r\n\r\nThe style of declaring everything at the top of the function (or block) is a hang-over from older C code - before C99 you couldn't portably declare a variable except at the top of a block."", 'comment_created': datetime.datetime(2020, 6, 15, 7, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 439974514, 'comment_body': 'over-indented', 'comment_created': datetime.datetime(2020, 6, 15, 7, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 439976250, 'comment_body': 'When wrapping a parameter list, Xapian-style is to line up the wrapped parameters under the first parameter (so the `o` should be directly below the opening `""`.\r\n\r\n(I don\'t think I\'ve seen the style you\'ve used here before - it seems confusing as it makes it look like `omindex_libarchive);` is a separate statement.)', 'comment_created': datetime.datetime(2020, 6, 15, 7, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 439976841, 'comment_body': 'The opening `""` of the wrapped part of the string should be below the opening quote on the line above.', 'comment_created': datetime.datetime(2020, 6, 15, 7, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 439977787, 'comment_body': ""Wrap after the `,`, not before the first parameter.\r\n\r\nIn general when writing code in an existing project you should look at how existing code is formatted for a situation similar to the one you're in."", 'comment_created': datetime.datetime(2020, 6, 15, 7, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 440589278, 'comment_body': ""Indeed.  I've just added a check to xapian-check-patch for this."", 'comment_created': datetime.datetime(2020, 6, 16, 5, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 440592203, 'comment_body': 'Currently the structure of this is:\r\n\r\n```\r\n    if (strcmp(archive_entry_pathname(entry), ""..."") == 0) {\r\n        // ...\r\n    } else if (strcmp(archive_entry_pathname(entry), ""..."") == 0) {\r\n        // ...\r\n    } else if (strcmp(archive_entry_pathname(entry), ""..."") == 0) {\r\n        // ...\r\n    }\r\n```\r\n\r\nIf an entry doesn\'t match any of these checks (which most probably don\'t - a typical ODF zip container has a lot more than just these 3 files) or matches the last one then we call `archive_entry_pathname(entry)` 3 times.  It\'ll give the same answer each time, but the compiler has no way to tell that.\r\n\r\nI\'d suggest just calling it once and putting the result in a variable.  That\'ll also make the code much clearer - the conditions will be short enough to fit on one line, and if you use a string variable you can just write them as equality checks:\r\n\r\n```\r\n    string pathname = archive_entry_pathname(entry);\r\n    if (pathname == ""content.xml"") {\r\n        // And so on...\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 5, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 440597078, 'comment_body': ""Yes - ISO C99 added VLAs, and some C++ compilers support them in C++ code as a non-standard extension, but we shouldn't rely on that as it limits portability.\r\n\r\nThe size needs to be a compile-time constant - you could allocate a few KB and then call `archive_read_data()` repeatedly to read the file in chunks.\r\n\r\nIf you want a variable size block, the portable C++ version is something like:\r\n\r\n```\r\nunique_ptr<char> buf1 = new char[total];\r\n```\r\n\r\nThough here you can avoid allocating a temporary buffer entirely by resizing the string to have enough space and then reading directly into that space, which also avoids an extra copy operation:\r\n\r\n```\r\nauto i = s.size();\r\ns.resize(i + total);\r\nsize = archive_read_data(archive_obj, &s[i], total);\r\nif (size <= 0) {\r\n    // ...\r\n}\r\ns.resize(i + size);"", 'comment_created': datetime.datetime(2020, 6, 16, 5, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 440597993, 'comment_body': ""Also, `buf1`, `buf2`, `buf3` aren't great variable names unless the numbers have some actual meaning (which they don't here).  You could actually just call them all `buf` in this case I think, since they each exist in disjoint blocks, but if they were in the same block then `buf_content`, `buf_styles`, `buf_meta` would be easier for the reader to follow than arbitrary numbers."", 'comment_created': datetime.datetime(2020, 6, 16, 5, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 440598994, 'comment_body': ""Also you really need to use the length read (which is in `size`), not rely on there being a terminating zero byte (which the libarchive documentation doesn't mention being added).  You'll often happen to have a zero byte after the read data as memory is typically zero-initialised on first allocation in modern machines, but in a longer running process as heap memory gets reused this will likely end up with extra junk getting appended to the read archive member data."", 'comment_created': datetime.datetime(2020, 6, 16, 5, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 440599229, 'comment_body': '`}` overindented', 'comment_created': datetime.datetime(2020, 6, 16, 5, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 440599349, 'comment_body': 'Needs doing!', 'comment_created': datetime.datetime(2020, 6, 16, 5, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 442960259, 'comment_body': ""I noticed, in `index_file.cc`, that the file is indexed even if extracting from `meta.xml` fails.\r\nSo when size is <=0, I thought I shouldn't be returning false.\r\nAlso, should I be appending to `error`? \r\n`error` will be used only when `bool extract` returns false, am I right?"", 'comment_created': datetime.datetime(2020, 6, 19, 17, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 443144413, 'comment_body': 'It seems that if `archive_read_free` fails, some file descriptors can remain opened and that can cause problems(run out of file descriptors) in some scenarios. \r\nHave @Exter-dg  seen [`archive_error_string`](https://nxmnpg.lemoda.net/3/archive_error_string)? Maybe we can get more information to append to the error string.', 'comment_created': datetime.datetime(2020, 6, 20, 16, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 443144453, 'comment_body': 'The error string is going to be used only when `extract` returns false.\r\nI think we should ignore this error, as indexing partial information from the document can be useful. (This apply for others cases in the handler).', 'comment_created': datetime.datetime(2020, 6, 20, 16, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 443283428, 'comment_body': 'I have changed it.', 'comment_created': datetime.datetime(2020, 6, 22, 1, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 443283914, 'comment_body': ""I have used string resizing as Olly suggested so char array is not being used anymore.\r\n\r\nAlso, I will use two different strings for `content.xml` and 'styles.xml`, I haven't done this yet, will make the change and push it again."", 'comment_created': datetime.datetime(2020, 6, 22, 1, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 443284154, 'comment_body': ""I have used string resizing now. Thanks for pointing it out, I have renamed the buffers to `buf`. As they are in different blocks, it shouln't be a problem."", 'comment_created': datetime.datetime(2020, 6, 22, 1, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 443284595, 'comment_body': 'I have now used OpenDocParser at the end of the file.\r\n@barufa, should I use different strings to store data extracted from content.xml and styles.xml and later append them? \r\nOr is it alright if they are in a different order?', 'comment_created': datetime.datetime(2020, 6, 22, 1, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 443284871, 'comment_body': ""Yes, I read about 'archive_error_string`, it can provide us with more information about the error produced incase archive_read_free() fails. I have changed this."", 'comment_created': datetime.datetime(2020, 6, 22, 2, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 443284995, 'comment_body': 'Thanks for pointing out, I have changed this.', 'comment_created': datetime.datetime(2020, 6, 22, 2, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 443285111, 'comment_body': 'I will take care of using this style, I have changed this.', 'comment_created': datetime.datetime(2020, 6, 22, 2, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 443285151, 'comment_body': 'I have corrected this.', 'comment_created': datetime.datetime(2020, 6, 22, 2, 1, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 443285273, 'comment_body': 'Thanks for pointing this out. I will take care of this in future and have changed it.', 'comment_created': datetime.datetime(2020, 6, 22, 2, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 443285373, 'comment_body': 'I have changed this, will take care of this in future.', 'comment_created': datetime.datetime(2020, 6, 22, 2, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 443285608, 'comment_body': ""Thanks for pointing this out. I have used `string pathname` here, hence it doesn't require wrapping now. I will take care of this in the future."", 'comment_created': datetime.datetime(2020, 6, 22, 2, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 443285806, 'comment_body': 'Thanks for pointing this out. Yes, multiple calls to archive_entry_pathname() were redundant. I have changed this, used `string pathname` instead.', 'comment_created': datetime.datetime(2020, 6, 22, 2, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 443285883, 'comment_body': 'I have corrected this.', 'comment_created': datetime.datetime(2020, 6, 22, 2, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 444550862, 'comment_body': 'Not sure if it is necessary, but I would try to preserve the order. It would be great to process the file in the same way that we were doing it on `index_file.cc`.', 'comment_created': datetime.datetime(2020, 6, 23, 22, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 444551859, 'comment_body': 'In this part I would write some like \r\n```\r\nif (size > 0) {\r\n    s_meta.resize(size);\r\n    .....\r\n}\r\n```\r\nThat way we execute this code only if there is some work to do and we emphasize that `s_meta` is not empty. ', 'comment_created': datetime.datetime(2020, 6, 23, 22, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 444554026, 'comment_body': 'As we declare s_meta here, we know that s_meta is empty so it is no necessary to call `size`.', 'comment_created': datetime.datetime(2020, 6, 23, 23, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 444554477, 'comment_body': 'Over indented', 'comment_created': datetime.datetime(2020, 6, 23, 23, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 444694517, 'comment_body': ""It is necessary - that's why `index_file.cc` calls `unzip` separately for `context.xml` and then for `styles.xml`, rather than calling `unzip` once and listing both files - see 5811711bb0f3b9dca7f8be6279290df31fa80397 (which fixes a bug where we were processing them in the order they happened to be inside the zip container)."", 'comment_created': datetime.datetime(2020, 6, 24, 7, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 444695845, 'comment_body': ""But we need to resize `s_meta` before we call `archive_read_data()` so there's space there to read the data into, so we can't conditionalise the resize on the value returned by `archive_read_data()`!"", 'comment_created': datetime.datetime(2020, 6, 24, 7, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 444820302, 'comment_body': 'Yes, but we are doing it already in line 95. This second call is to shorten the string if necessary.\r\nHere I meant that we could move all the code inside the if, that way we declare `MetaXmlParser` only when we get some information to process.\r\n```\r\nif (size > 0) {\r\n    s_meta.resize(size);\r\n    MetaXmlParser metaxmlparser;\r\n    metaxmlparser.parse(s_meta);\r\n    title = metaxmlparser.title;\r\n    keywords = metaxmlparser.keywords;\r\n    author = metaxmlparser.author;\r\n}\r\n```\r\n', 'comment_created': datetime.datetime(2020, 6, 24, 11, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 446473912, 'comment_body': 'I have changed this, have used different strings for content.xml and styles.xml and appended them to s.', 'comment_created': datetime.datetime(2020, 6, 27, 2, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 446473992, 'comment_body': 'I changed this in the last commit only, I am not sure why it is not updated in the remote repo, I have added this now.', 'comment_created': datetime.datetime(2020, 6, 27, 2, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 446474105, 'comment_body': ""Shouldn't this be true for s_content and s_styles too (as all the three strings would be empty when calling size() )? I have removed `auto i = s_file.size()` for all three strings."", 'comment_created': datetime.datetime(2020, 6, 27, 2, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 446474119, 'comment_body': 'Thanks for pointing this out, Corrected.', 'comment_created': datetime.datetime(2020, 6, 27, 2, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 447253662, 'comment_body': 'Yes, that can also  be applied to s_content and s_styles.', 'comment_created': datetime.datetime(2020, 6, 29, 21, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 450178368, 'comment_body': ""Not sure if these comments should be here. I know they are going to be relevant in the near future if some modification are applied, but at the moment the doesn't add any relevant information."", 'comment_created': datetime.datetime(2020, 7, 6, 12, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 450181253, 'comment_body': ""I think you forget meta.xml in this comment, or is there a reason why you didn't add it to the comment?"", 'comment_created': datetime.datetime(2020, 7, 6, 12, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 450596367, 'comment_body': 'I have removed the comments (except those describing the file - blank, corrupt, ODF, ApacheOffice)', 'comment_created': datetime.datetime(2020, 7, 7, 3, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 450596537, 'comment_body': 'Thank you for pointing this out. I have added meta.xml (No, there was no reason for not adding it, I missed it)', 'comment_created': datetime.datetime(2020, 7, 7, 3, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 451296877, 'comment_body': ""Are you actually using anything from `<cstring>`?\r\n\r\nI'm wondering if this was added for `strcmp()` in a previous iteration of the patch, but you aren't using that now."", 'comment_created': datetime.datetime(2020, 7, 8, 5, 46, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 451297363, 'comment_body': '`""str.h""` only defines an overloaded `str()` function, but that function doesn\'t seem to be used in this file.', 'comment_created': datetime.datetime(2020, 7, 8, 5, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 451300066, 'comment_body': ""This filetype is meant to be a zip container so I think we don't want to allow any filters (which seems to be the default if you don't do anything), and only want the zip formats (i.e. `archive_read_support_format_zip(archive_obj)`, which enables both the streamable and seekable zip format handlers).\r\n\r\nFor example, if somebody renames a tar.bz2 archive to `.odt` then it's not helpful for us to open it and read its contents - nothing else which supports `.odt` is likely to."", 'comment_created': datetime.datetime(2020, 7, 8, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 451300498, 'comment_body': 'Why 10KB blocks?', 'comment_created': datetime.datetime(2020, 7, 8, 5, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 451302116, 'comment_body': ""Also, the wrapped line is under-indented by one column (the `f` of `file` should be under the `a` of `archive_obj`).\r\n\r\nThis line doesn't actually need wrapping - if I unwrap it, it only reaches column 79..."", 'comment_created': datetime.datetime(2020, 7, 8, 6, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 451302759, 'comment_body': 'Did you mean to assign a string to `error` before appending the error message from libarchive to it?', 'comment_created': datetime.datetime(2020, 7, 8, 6, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 451305947, 'comment_body': 'This free-form wrapping makes things harder to read.  I\'d wrap between the items instead (and then wrap the list as well but only if it\'s still too long), e.g.:\r\n\r\n```\r\n    tests.insert({""odf/libarchive_text_template.ott"",\r\n                  {""Zjane"", ""Zdoe"", ""Zstructur""}});\r\n    tests.insert({""odf/libarchive_presentation.odp"",\r\n                  {""Zfascin"", ""Zfact"", ""Zpustak"", ""Zmahal"", ""Zmillion"", ""Zpeopl"",\r\n                   ""Zbirthday"", ""501""}});\r\n```', 'comment_created': datetime.datetime(2020, 7, 8, 6, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 452374752, 'comment_body': 'Thanks for pointing this. These are redundant now and I have removed them.\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 9, 17, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 452375082, 'comment_body': 'It was used in earlier versions but it is redundant now. I have removed this.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 452375384, 'comment_body': 'I have changed this.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 452376878, 'comment_body': ""I have added a comment for this. As per discussions(on IRC), Libarchive automatically detects the required block size for files and for regular file size it usually takes a default one - https://sources.debian.org/src/libarchive/3.4.3-1/libarchive/archive_read_open_filename.c/#L353.\r\n\r\nThe specified block size will only be used in case of tape drives and 10240 is chosen as it is default size used in Libarchive's documentation (size of 20 records of 512 bytes each)"", 'comment_created': datetime.datetime(2020, 7, 9, 17, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 452377111, 'comment_body': 'Thanks for pointing this out, I have changed this.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 452378503, 'comment_body': 'I believe I was appending to a ""not-empty"" error string. But this has probably changed over the commits. Thanks for pointing this out, I have changed this. \r\n\r\n`error = archive_error_string(archive_obj);`', 'comment_created': datetime.datetime(2020, 7, 9, 17, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 452378672, 'comment_body': 'I have changed this.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}]","[{'commit_sha': '9f0fdaf4ef600d4840f68b111534bc699d242644', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '836cdea39aa8951025a464273921f2ced8c50605', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63f50f085a72bcc342b74a91d96d8913a21fd41e', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '620fed577f6f19117da7950ca0258c4e6aa45d1f', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6de3e636b88a36596816b9edc060682ea1c63c0', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fb29e4bdddbcfe803815e2e8764cd03c1f46b35', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a71391aeafee3d0aeca704b40378cc5a5df72b5', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32b370ffe55bc451f80c070e9ea5c1361c55af3e', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2681bbf657ad16ba1d64963758a35e079334add4', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '518a696b95a25ec227bc8fabbdc5133ac490f52a', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbb19e59e0215a2f2d555a5306fbbfa06db6dd17', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9cf0cc2ccece49fc2d28305826c38ec10fce891', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}]",Parth Kapadia,46609729,,User,,69,,18,21
447855942,Omindex mimetype modifications,"* Libarchive now supports OOXML formats (.docx, .xlsx, .pptx, etc)",False,303,https://api.github.com/repos/xapian/xapian/pulls/303,https://github.com/xapian/xapian/pull/303,closed,249,55,7,14,3,20,0,0,[],2020-07-12 06:01:13+00:00,2020-07-25 04:03:13+00:00,1116120.0,"12 days, 22:02:00","[{'comment_id': 453871745, 'comment_body': 'overindented', 'comment_created': datetime.datetime(2020, 7, 13, 19, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 453874583, 'comment_body': 'Here I think there is a problem.\r\nThe type of `size` is `ssize_t`. In short, `ssize_t` is similar to `size_t`(unsigned) but it can store -1 to notify an error.\r\nIt seems that if `archive_read_data` fails, size will hold -1 and an exception is going to be raised if you call resize with negative values.', 'comment_created': datetime.datetime(2020, 7, 13, 19, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 453875304, 'comment_body': 'Maybe `s_content` is a more meaningful name for `s`', 'comment_created': datetime.datetime(2020, 7, 13, 19, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 454148479, 'comment_body': ""Indeed - `resize(-1)` on a string will cast the -1 to the largest value of the unsigned `std::string::size_type`, which will (hopefully) be larger than you can actually resize a string to.\r\n\r\nAlso, to be useful this resize needs to happen *before* we pass `s_meta` to `parse_metadata()` (though you'd usually expect the number of bytes read to match the size reported for the entry in `total`, so we probably get away with this most of the time)."", 'comment_created': datetime.datetime(2020, 7, 14, 7, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 454149167, 'comment_body': ""There's not really a good reason for all these `s_` prefixes.  Some coding styles (like hungarian notation which Microsoft uses a bastardised version of) try to encode the types of variables into their names, but we don't use that style in Xapian."", 'comment_created': datetime.datetime(2020, 7, 14, 7, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 456205777, 'comment_body': 'I have resolved this.', 'comment_created': datetime.datetime(2020, 7, 17, 4, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 456206125, 'comment_body': 'Thanks for pointing this out. I have changed this. Now resize() is called before it is sent to parse_metadata().', 'comment_created': datetime.datetime(2020, 7, 17, 4, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 456206563, 'comment_body': 'I will keep this in mind. For now, I have changed few variable names \r\n* s_content -> content\r\n* s_meta -> metadata\r\n* s -> content\r\n* s_styles -> styles\r\n\r\nAre these a better choice?', 'comment_created': datetime.datetime(2020, 7, 17, 4, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 456840694, 'comment_body': ""Yes (at least assuming `s_content` and `s` aren't used in the same scope!)"", 'comment_created': datetime.datetime(2020, 7, 19, 0, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 456841622, 'comment_body': ""Calling `parse_metadata()` here sets fields `title`, `keywords`, and `author` which doesn't overlap with what's set by parsing the other file above, so there's no need to delay this parsing until here - we can just parse the data where we extract it from the zip archive above (there are several places, but you've put the code to do the parsing into a function so you can just call it in each case).\r\n\r\nThat reduces how long we need to hold that data in memory, reduces the lifetime of the `metadata` variable, and eliminates the need for the `metaxml` flag.  It'll also mean the code is easier to follow."", 'comment_created': datetime.datetime(2020, 7, 19, 0, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 456848226, 'comment_body': 'Thanks for pointing this out. I have made the required changes and have updated the PR.', 'comment_created': datetime.datetime(2020, 7, 19, 2, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 458599434, 'comment_body': ""It would be better to wrap the line by aligning the function parameters vertically rather than splitting the string - that's more typical of how this sort of case is wrapped in existing code in the codebase, it seems easier to read that way, and it means things like `grep application/vnd` match here."", 'comment_created': datetime.datetime(2020, 7, 22, 7, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 458604776, 'comment_body': 'I think we should above calling these formats ""OpenXML"", and just say ""OOXML"" instead.  Microsoft subverted the ISO standardisation process (for some history see https://en.wikipedia.org/wiki/Office_Open_XML#Standardization_process).\r\n\r\nIt\'s not really an ""Open"" format - sure the specification is public, but the format was just submitted fully formed by Microsoft rather than developed in an open way.  It\'s really no more ""Open"" than the older OLE-stream Microsoft formats they replaced with it (which are also now publicly documented, but only after Microsoft lost an anti-trust case).\r\n\r\nThe format is sadly widely used so it\'s unhelpful to refuse to support it, but we should avoid being sucked into their PR games.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 459181716, 'comment_body': 'Thank you for the insight. I have made the necessary changes.', 'comment_created': datetime.datetime(2020, 7, 23, 2, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 459182407, 'comment_body': 'I have changed this. But in order to maintain 80 chars per line, I had to move the opening bracket of the else if statement to the next line (against the usual practice). Will that be ok?', 'comment_created': datetime.datetime(2020, 7, 23, 2, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 459198292, 'comment_body': 'If you\'re going to put the returned value in a variable, better to declare the variable when you can assign to it - as this currently is the scope of the variable is greater than needed.\r\n\r\nBut there isn\'t really much point putting the result in a variable here - you can just test the result directly - e.g. for the above:\r\n\r\n```\r\nif (!extract_odf(...)) {\r\n    return false;\r\n}\r\n```\r\n\r\nA boolean return for ""success"" is pretty common and reads nicely inline - ""if we didn\'t extract the odf then return false"" - but if the returned thing is more obscure a variable can provide a way to document what it is.  Perhaps `extract_foo()` returns the number of errors encountered, in which case:\r\n\r\n```\r\nint error_count = extract_foo(...);\r\nif (error_count > 0)\r\n    return false;\r\n```\r\n\r\nis perhaps more helpful than:\r\n\r\n```\r\nif (extract_foo(...) > 0)\r\n    return false;\r\n```\r\n\r\nAnd probably clearer than adding a comment such as:\r\n\r\n```\r\n// Check if extract_foo() encountered any errors.\r\nif (extract_foo(...) > 0)\r\n    return false;\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 23, 3, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 459199086, 'comment_body': ""The content we fill the string to have here shouldn't matter as we resize to remove any excess we didn't read into, but it'd be more consistent to use the same fill byte in cases like this as we get for `sheets.resize(i + total);` which would be a zero byte (i.e. `'\\0'`).  Zero bytes should also make it more obvious to the person debugging if we did end up leaving some of this fill in the read data, whereas spaces will probably look like valid data."", 'comment_created': datetime.datetime(2020, 7, 23, 3, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 459200260, 'comment_body': ""Yes, I think that's OK.\r\n\r\nWhen it comes down to it, the point of having such formatting rules as part of coding standards is mainly to aid readability and make it easier to work with the source code, and to help spot problems (if things are consistent then inconsistencies stand out, and bugs are often due to inconsistencies)."", 'comment_created': datetime.datetime(2020, 7, 23, 3, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 459239814, 'comment_body': 'Thank you for pointing this out. I have made the necessary changes.', 'comment_created': datetime.datetime(2020, 7, 23, 6, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 459239883, 'comment_body': 'I have changed this.', 'comment_created': datetime.datetime(2020, 7, 23, 6, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}]","[{'commit_sha': '3d7cb1e7c52fcc8720167bec638de83d12c01ce7', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9eb6030d3b23b6a1b9084dd13c3fdfef1864b3d', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2ec6f02eb5c29fc37b2bfe18e48b326f97ea174', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85b04cef801f04eb23e03cbb727c41346e0b5102', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2a9c4196eff754d1c198d12a43ea246a6f1f720', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9b73ebfc076dcb2f100dc535f4db4ddb019d25b', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ccf34937c97e2131f3f0baf31852a69a974fc27', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ac5aa986c5d0bd3544e5eb8f1cfaeb534a45ec2', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d5180482337cdfdb8f278f5ffa3b1233116b749', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aa26b48d74a434a3c6f1bd78ed0fdd10f51c487', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb82f7406e2ad3b51ea8f6d70e18a067e1542b6c', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bef7d9e2b5dbe716236bbeceae43486458b4b1f', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfbd419fc17f79572420e94cd45002dd35777279', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '447678802f5043a5811f79327f6a23d9843157ce', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}]",Parth Kapadia,46609729,,User,,69,,18,21
459544728,Omindex libabw,"* Adds support for Abiword documents using Libabw
* Also indexes meta-data",False,307,https://api.github.com/repos/xapian/xapian/pulls/307,https://github.com/xapian/xapian/pull/307,closed,260,3,9,7,0,12,0,0,[],2020-07-30 19:49:11+00:00,2020-08-06 07:10:00+00:00,559249.0,"6 days, 11:20:49","[{'comment_id': 463391944, 'comment_body': ""`succeed` is initialised to `true`, and then set to `true` conditionally in two places - it never gets set anywhere else so what's the point of it?"", 'comment_created': datetime.datetime(2020, 7, 31, 3, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 464026089, 'comment_body': 'Thanks for pointing this out. It was a mistake. The plan is to initialise `succeed` to `false` and set it to `true` if libabw extracts metadata/content from the file.\r\nI have corrected this.', 'comment_created': datetime.datetime(2020, 8, 2, 3, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 464800863, 'comment_body': ""I said on IRC adding a comment here would be good:\r\n\r\n> [07:58:00] <olly> so probably use something other than the document title in this testcase\r\n> [07:58:26] <olly> and note in a comment that we deliberately aren't testing the title, because of this bug fix not being present in some versions still in use\r\n\r\nIt's useful to note in the code when there's a reason why we don't test something that it might seem to someone reading the code that it would be good to test (i.e. a term from the subject here), since otherwise they might try to be helpful and improve the test coverage by adding `ZSabiword` or similar to the terms checked, and because developer machines tend to have fairly recent versions of everything it'll probably work fine for them and then we'll have to do another loop around the cycle of discovering it doesn't work with older libabw versions and taking that back out again.\r\n\r\nIf you also note the version of libabw this was fixed in (which you can see from the libabw commit I linked to) then the comment also serves to tell us what version of libabw we need to assume if we want to restore this check in the future.\r\n"", 'comment_created': datetime.datetime(2020, 8, 4, 5, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 464802105, 'comment_body': 'This is clearly significantly based on an existing file (e.g. all the `PARSE_FIELD` code is taken from one of the existing handler_*.cc files), so you should preserve copyright information from that file and add yourself rather than replacing it with yourself.', 'comment_created': datetime.datetime(2020, 8, 4, 5, 7, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 464803175, 'comment_body': ""There's code in omindex to clean up whitespace in the stored sample, so it really shouldn't be necessary to clean up whitespace here too.\r\n\r\nThe only reason to do so I can see would be if libabw produces output with so much superfluous whitespace that the cost of sending it over the pipe to the parent process is greater than the extra cost of this otherwise redundant cleaning up of whitespace."", 'comment_created': datetime.datetime(2020, 8, 4, 5, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 464808163, 'comment_body': 'The revised code doesn\'t entirely make sense either.\r\n\r\nThe value in `error` is only used if this function indicates there was an error by returning `false`.  If it returns `true` that means ""it worked"", so it doesn\'t make sense to also try to report an error.\r\n\r\nI think unless we have evidence that failure here is actually OK it makes more sense to be strict and just set `error` and `return false` right away if any call to `libabw::AbiDocument::parse()` fails.\r\n\r\nIf that turns out to reject certain abiword documents which can be usefully opened with abiword or libreoffice then we can relax the checks appropriately in response to bug reports.\r\n\r\nIf we start off being lax here it will be very hard to tighten up later - users will be more forgiving of a new feature being overly strict than an existing feature changing in a way which stops things working for them which were fine before.\r\n\r\n(This is different to the situation for e.g. OpenDocument where we were reusing the existing parsers and matching how they were being applied currently made sense.)', 'comment_created': datetime.datetime(2020, 8, 4, 5, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 464811418, 'comment_body': 'Is anything from `<memory>` actually used in this file?', 'comment_created': datetime.datetime(2020, 8, 4, 5, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 466124011, 'comment_body': 'Thank you for the insight. I have changed this.\r\n\r\n* Removed the bool variable (succeed) altogether\r\n* Returns false if it fails to extract either metadata or content', 'comment_created': datetime.datetime(2020, 8, 6, 3, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 466124236, 'comment_body': 'Thanks for pointing this out. I have fixed this.', 'comment_created': datetime.datetime(2020, 8, 6, 3, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 466124642, 'comment_body': 'Thank you for pointing this out. I have changed the copyright portion.', 'comment_created': datetime.datetime(2020, 8, 6, 3, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 466125073, 'comment_body': ""I analysed the output generated by libabw's parse function for some files and it doesn't seem to generate extra whitespaces.\r\nI removed the function from the file.  "", 'comment_created': datetime.datetime(2020, 8, 6, 3, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 466125427, 'comment_body': 'Thanks for pointing this out. I noticed that some header files were used in the previous versions of the handler but after the changes, these were not required. I have removed them and I will try and make sure to keep a habit of checking if the header files are still required after making some changes.', 'comment_created': datetime.datetime(2020, 8, 6, 3, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}]","[{'commit_sha': '6cedb1f1c79eb37c4a1d736e3b0be99165aa23c7', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94e61d1c3bcd8c132159c0fb4fd9ca4b8df00df2', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92d37d46149245a891461f10cf9839d92dddaf8f', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b7b59cb8f0ea083516b9bd089d73729c83d0ee', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6466af5ae17e92b91ebdae2f71eb429b63ebee6d', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c165083730b7d66da56ce2d9e83d23db245b1e1c', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7660d8b5c26ecb758a05cc5c8c1a572a3754a0f6', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}]",Parth Kapadia,46609729,,User,,69,,18,21
466480050,Add support for CorelDRAW files,,False,311,https://api.github.com/repos/xapian/xapian/pulls/311,https://github.com/xapian/xapian/pull/311,closed,97,3,10,4,1,5,0,0,[],2020-08-12 03:14:57+00:00,2020-08-19 07:47:32+00:00,621155.0,"7 days, 4:32:35","[{'comment_id': 470654945, 'comment_body': 'Maybe we can remove this empty line', 'comment_created': datetime.datetime(2020, 8, 14, 14, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 470661599, 'comment_body': 'These mimetypes are too broad. `application/octet-stream` is defined as ""arbitrary binary data"" and maybe it would be better to handle application/zip with omindex_libarchive.\r\n\r\nPerhaps `image/x-coreldraw cdr` would be more appropriated.', 'comment_created': datetime.datetime(2020, 8, 14, 14, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 470887256, 'comment_body': ""Indeed - the code above will try to process zip files and arbitrary binary data with libcdr.\r\n\r\nFor a case like this where libmagic gives us a mime-type which isn't specific to the type of file we should add extension mappings (in this case for `cdr` and `cmx`) to an appropriate mime-type or types, and then use that type or types here.\r\n\r\nLooking in the EDRM data set (which has sample files of quite a lot of different types), the libmagic from debian unstable reports `image/x-coreldraw` when it reports a specific type, so that's a good choice:\r\n\r\n```\r\n$ file --mime-type /mnt/data/scratch/EDRM_Data-Set_File-Formats_1-0/data-set/*/*.{cdr,CDR}\r\n/mnt/data/scratch/EDRM_Data-Set_File-Formats_1-0/data-set/bmp/4seafoodc.cdr: application/octet-stream\r\n/mnt/data/scratch/EDRM_Data-Set_File-Formats_1-0/data-set/bmp/PO.cdr:        image/x-coreldraw\r\n/mnt/data/scratch/EDRM_Data-Set_File-Formats_1-0/data-set/cdr/5radialg.cdr:  application/octet-stream\r\n/mnt/data/scratch/EDRM_Data-Set_File-Formats_1-0/data-set/cdr/award.cdr:     image/x-coreldraw\r\n/mnt/data/scratch/EDRM_Data-Set_File-Formats_1-0/data-set/cdr/itmenu.cdr:    application/octet-stream\r\n/mnt/data/scratch/EDRM_Data-Set_File-Formats_1-0/data-set/bmp/911.CDR:       application/octet-stream\r\n/mnt/data/scratch/EDRM_Data-Set_File-Formats_1-0/data-set/bmp/C5MENU.CDR:    application/octet-stream\r\n/mnt/data/scratch/EDRM_Data-Set_File-Formats_1-0/data-set/bmp/EYE.CDR:       application/octet-stream\r\n/mnt/data/scratch/EDRM_Data-Set_File-Formats_1-0/data-set/cdr/BOXES.CDR:     application/octet-stream\r\n/mnt/data/scratch/EDRM_Data-Set_File-Formats_1-0/data-set/cdr/FROMWPG.CDR:   application/octet-stream\r\n/mnt/data/scratch/EDRM_Data-Set_File-Formats_1-0/data-set/cdr/GOODPEAR.CDR:  application/octet-stream\r\n/mnt/data/scratch/EDRM_Data-Set_File-Formats_1-0/data-set/cdr/UNIFILL.CDR:   application/octet-stream\r\n```\r\n\r\nThere's only one CMX file in there which gives a non-specific type:\r\n\r\n```\r\n$ file --mime-type /mnt/data/scratch/EDRM_Data-Set_File-Formats_1-0/data-set/cmx/NEWSFLSH.CMX\r\n/mnt/data/scratch/EDRM_Data-Set_File-Formats_1-0/data-set/cmx/NEWSFLSH.CMX: application/octet-stream\r\n```\r\n\r\nWhile looking to see if I had any other .cmx files, I noticed it's used by ocaml:\r\n\r\n```\r\n$ file /usr/lib/ocaml/ocamldoc/odoc_texi.cmx\r\n/usr/lib/ocaml/ocamldoc/odoc_texi.cmx: OCaml native object file (.cmx) (Version 025)\r\n$ file --mime-type /usr/lib/ocaml/ocamldoc/odoc_texi.cmx\r\n/usr/lib/ocaml/ocamldoc/odoc_texi.cmx: application/octet-stream\r\n```\r\n\r\nBut since libmagic doesn't currently seem to identify coreldraw CMX files I think we probably need to assume that `cmx` is coreldraw CMX at least for now (if libmagic learns about them then we could change that).  That will mean we pointlessly try to process any ocaml cmx files we find, but that seems less bad than ignoring the ones we can handle.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 14, 22, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 471148507, 'comment_body': 'I have removed the extra line.', 'comment_created': datetime.datetime(2020, 8, 16, 19, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 471148923, 'comment_body': ""Thanks for pointing this out.\r\nActually, for all versions of CMX files that I tested, libcdr doesn't seem to extract any data from them. I tested CMX files on both libcdr-0.1.5 and libcdr-0.1.6 and hence have not included them for now. \r\n\r\nI used two mime-types earlier as older versions of `.cdr` files returned `application/octet-stream` while the newer zip containers returned `application/zip`. I have replaced these with `image/x-coreldraw`.\r\n"", 'comment_created': datetime.datetime(2020, 8, 16, 19, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}]","[{'commit_sha': 'ad3346fcbc1226febe4a15ec0c67a7675cef28ca', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b74a295129ac19aa4731b31633d1327c58654c9', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45d8a7a29dc58932bf2242148974d265b9ae717a', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec4a3c86fb788b3f9ec50d6097bb96d9395461b4', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}]",Parth Kapadia,46609729,,User,,69,,18,21
472120856,Support Legacy Mac Documents using libmwaw,* Adds support for Apple Works documents,False,315,https://api.github.com/repos/xapian/xapian/pulls/315,https://github.com/xapian/xapian/pull/315,closed,294,3,11,8,1,10,0,0,[],2020-08-23 12:54:22+00:00,2022-06-02 05:51:34+00:00,55961832.0,"647 days, 16:57:12","[{'comment_id': 476173073, 'comment_body': ""What type does `pages_content.size()` return?\r\n\r\nHere you assign it to `pages`, which is a `std::string&` but above you compare `i < pages_content.size()` where `i` is unsigned.  I'm a bit surprised one doesn't fail to compile, and am concerned that at least one isn't doing what we want it to..."", 'comment_created': datetime.datetime(2020, 8, 25, 4, 51, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 476179383, 'comment_body': ""Control flow can't leave the block above, because there's a `return` at the end.  In a situation like this, the code which follows doesn't need to be in an `else` block, and putting it in one tends to make the code less clear - the code which follows is conceptually part of the actual purpose of the function (vs the code in the `if` block above which is handling an error case.)"", 'comment_created': datetime.datetime(2020, 8, 25, 5, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 479221140, 'comment_body': 'As per my understanding, `pages_content.size()` returns an integer (numerical value). \r\n`pages` in the handlers is supposed to store the number of the pages in the file, right?\r\n\r\nSo what I did was - iterate over the pages (pages_content.size() times) of the file and append the data to `dump`.\r\nAnd later on line 175, I store the number of pages (`pages_content.size()`) in the document in the variable `pages`.\r\n\r\nAm I interpreting things wrongly? ', 'comment_created': datetime.datetime(2020, 8, 28, 12, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 479434659, 'comment_body': 'Thanks for pointing this out. I have changed this.', 'comment_created': datetime.datetime(2020, 8, 28, 17, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 480807216, 'comment_body': '> `pages` in the handlers is supposed to store the number of the pages in the file, right?\r\n\r\nYes, but it\'s a `std::string&` and C++ doesn\'t implicitly convert an integer to a string for you.\r\n\r\nIt looks (from `/usr/include/librevenge-0.0/librevenge/RVNGStringVector.h`) like `size()` returns `unsigned` here.\r\n\r\nTesting that:\r\n\r\n```\r\n$ cat string-from-unsigned.cc \r\n#include <iostream>\r\n#include <string>\r\n\r\nvoid f(std::string& pages, unsigned size) {\r\n    pages = size;\r\n}\r\n\r\nint main() {\r\n    std::string s;\r\n    f(s, 42);\r\n    std::cout << ""\'"" << s << ""\'\\n"";\r\n}\r\n$ g++ -Wall -W -O2 -s string-from-unsigned.cc\r\n$ ./a.out\r\n\'*\'\r\n```\r\n\r\nSo the code does compile, but my concern that it isn\'t doing what we want is well-founded - it actually sets `pages` to a single character based on the value assigned!\r\n\r\nYou want `pages = str(pages_content.size());` instead.', 'comment_created': datetime.datetime(2020, 9, 1, 4, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 480812879, 'comment_body': ""For the same reasons I think I pointed out in another PR, I'd get rid of the `else` here and put its contents at the top level of the function.  Same below."", 'comment_created': datetime.datetime(2020, 9, 1, 5, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 480815202, 'comment_body': ""We seem to have 3 copies of the same code to iterate pages in an `MWAWDocument` - while it's not hugely complex code, it's probably more maintainable to factor that out into its own function so we just have it once."", 'comment_created': datetime.datetime(2020, 9, 1, 5, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 486743032, 'comment_body': 'Thank you for pointing this out. I have made the necessary changes.', 'comment_created': datetime.datetime(2020, 9, 11, 2, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 486743082, 'comment_body': 'I have made these changes.', 'comment_created': datetime.datetime(2020, 9, 11, 2, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 486743203, 'comment_body': 'Thank you for pointing this out. I have changed this and created a separate function for iterating over pages.', 'comment_created': datetime.datetime(2020, 9, 11, 2, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}]","[{'commit_sha': '211c066eef7fed18cc65722f808045f303e6b7d5', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb1a48b60dda1e924d8fea71393b096fd65f91f7', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac50d7581c5a230d7693be988a8d5ae60bccc61e', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49200d2bbab07ac7c0a2cf6d32e4f5d31e6efc4f', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed13ef44476f77f40c27b9c676f37cdbe55e35ea', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28820d0ab501f032e6b5ee1f56b5b2a639ec889d', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b8cf81b074954b2f56d6af7bebd4594294f025', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd86ebebe6b16e0f60bd87113d27aa37e6fd3e11d', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}]",Parth Kapadia,46609729,,User,,69,,18,21
454099299,Omindex libextractor,Adds support for Audio and Video formats in Omega (Extracting meta-data).,False,306,https://api.github.com/repos/xapian/xapian/pulls/306,https://github.com/xapian/xapian/pull/306,closed,313,63,11,30,3,58,0,0,[],2020-07-21 04:07:42+00:00,2020-09-05 06:55:55+00:00,3984493.0,"46 days, 2:48:13","[{'comment_id': 457887095, 'comment_body': ""This isn't indented like the similar constructs just above."", 'comment_created': datetime.datetime(2020, 7, 21, 7, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 458447484, 'comment_body': 'A better option than resizing the string to zero would be calling the string method [clear](http://www.cplusplus.com/reference/string/string/clear/).', 'comment_created': datetime.datetime(2020, 7, 21, 23, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 458448275, 'comment_body': ""Not sure if using the same names for this variables is a good option as this practice can induce bugs. I think we should try to avoid it.\r\n\r\nWe can use an structure(as Olly've suggested) to store the necessary information and pass a pointer to it in `cls` instead of global variables."", 'comment_created': datetime.datetime(2020, 7, 21, 23, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 458451764, 'comment_body': ""I couldn't find if `data` is null terminated on libextractor docs. Maybe using `data_len` would be a good idea.\r\nThere is actually a [string constructor](http://www.cplusplus.com/reference/string/string/string/) that uses it(see constructor number 5)."", 'comment_created': datetime.datetime(2020, 7, 21, 23, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 458527735, 'comment_body': 'I have changed this.', 'comment_created': datetime.datetime(2020, 7, 22, 4, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 458529420, 'comment_body': 'Thanks for pointing this out. I was using clear(), I chose to use resize(0) because I read that clear (in case of vector) will make the vector empty but space will still be reserved, So I used resize instead of clear. I am not sure how does it work in case of strings. I will research more about this.\r\nFor the handler - I have used a struct as suggested by Olly.', 'comment_created': datetime.datetime(2020, 7, 22, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 458529495, 'comment_body': 'I have changed this.', 'comment_created': datetime.datetime(2020, 7, 22, 4, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 458529821, 'comment_body': 'Thanks for pointing this out. I have changed to code and now it uses the string constructor \r\n\r\n`string (const char* s, size_t n);`', 'comment_created': datetime.datetime(2020, 7, 22, 4, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 458548461, 'comment_body': 'Should I avoid using the same variables inside the structure too? As I have done right now.', 'comment_created': datetime.datetime(2020, 7, 22, 5, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 459140823, 'comment_body': ""No, that's not necessary. Only when two variables have the same name under a scope. This is not an error, but it can introduce bugs (for example, if you forget :: when you want to refer to a global variable) and makes the code less readable."", 'comment_created': datetime.datetime(2020, 7, 22, 23, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 459241982, 'comment_body': ""https://en.cppreference.com/w/cpp/string/basic_string/clear says:\r\n\r\n> Unlike for std::vector::clear, the C++ standard does not explicitly require that capacity is unchanged by this function, but existing implementations do not change capacity. This means that they do not release the allocated memory (see also shrink_to_fit). \r\n\r\n(I'd definitely recommends cppreference.com as a resource - I think there's an offline version too.)\r\n\r\nBut if you're reusing the strings over and over you probably want the reserved space to be kept.  It's not so helpful if you process one enormous file but mostly small ones, but it's also not helpful to be constantly releasing and reallocating space."", 'comment_created': datetime.datetime(2020, 7, 23, 6, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 460374114, 'comment_body': ""This creates a temporary `std::string` object to append the data, which will result in needlessly copying the data, and also in a heap allocation if the string is at all long (short strings are typically actually just stored within the `std::string` object itself).  This temporary object can be avoided by using the `std::string::append()` method - that has an overload form which takes a pointer and length:\r\n\r\n```\r\nmd->title.append(data, data_len);\r\n```\r\n\r\nAlso, this always results in a trailing space on the result - it'd be neater to only add it if there's already something in the variable, which is easy to do by first checking and adding the space if non-empty, then appending the data."", 'comment_created': datetime.datetime(2020, 7, 25, 6, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 464088304, 'comment_body': 'I have made the necessary changes here.', 'comment_created': datetime.datetime(2020, 8, 2, 15, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 465510634, 'comment_body': 'If we get multiple `EXTRACTOR_METATYPE_PAGE_COUNT` items (which seems like it would happen if more than one plugin reports a number of pages for a format) then this will now concatenate them as strings - e.g. if we\'re told 12 pages twice, we\'ll turn that into `1212`!\r\n\r\nThe behaviour before of taking the last answer in case of duplicates seems better, so I think you want the ""assign"" method instead of ""append"" here.', 'comment_created': datetime.datetime(2020, 8, 5, 6, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 465518130, 'comment_body': 'There\'s also `oga` and `spx` for `audio/ogg`, and `ogv` for `video/ogg` - see https://tools.ietf.org/html/rfc5334#section-10.2\r\n\r\nI think we probably don\'t want an extension to mime-type mapping for the `ogg` extension itself though - `ogg` can be `audio/ogg` or `video/ogg` (as your example files demonstrate!)  If we don\'t provide a mapping then omindex will use libmagic which can tell the difference from the file content:\r\n\r\n```\r\n$ file --mime-type testfiles/*/*.ogg\r\ntestfiles/audio/file_example_OOG_1MG.ogg:       audio/ogg\r\ntestfiles/video/file_example_OGG_480_1_7mg.ogg: video/ogg\r\n```\r\n\r\n(`file` uses libmagic internally.)\r\n\r\nBoth get mapped to libextractor by default, but the recorded mime-type will be wrong (which could matter if that\'s provided as a ""file type"" filter to users) and it\'ll also be confusing to the user if they overrides the default mappings.', 'comment_created': datetime.datetime(2020, 8, 5, 7, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 466118301, 'comment_body': 'Thanks for pointing this out. I have changed this.', 'comment_created': datetime.datetime(2020, 8, 6, 3, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 466118465, 'comment_body': 'Thank you for the insight, I have changed this.', 'comment_created': datetime.datetime(2020, 8, 6, 3, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 466122540, 'comment_body': ""You've addressed the second part, but not the missing extensions I noted in the first paragraph.\r\n\r\nWe should pick up the type of such files via libmagic, but it's good to provide extension to mime type mappings where they're reliable since libmagic needs to look at the start of the file to determine the type, which takes more time than just looking at the end of the filename - not much per file, but it can add up."", 'comment_created': datetime.datetime(2020, 8, 6, 3, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 466125872, 'comment_body': ""I think we need to find a better approach than this.\r\n\r\nAs written, the test can never fail for an audio or video file, but there are test results which are clearly a failure because we should either get all the terms that come from a plugin or none of them.  So for example, for `audio/file_example_OOG_1MG.ogg` if we get `Akevin` we should also get `Simpact`.\r\n\r\nYou need to think carefully about what cases might happen due to a missing plugin and what can't, so that the test can actually catch problems.\r\n\r\nAlso, the variable `skip` seems to be confusingly named - it looks to me like `skip` being `false` means we're skipping the tests if they'd otherwise pass.  The sense seems reversed from what I'd expect.\r\n\r\n(And a coding style point - it's clearer to put `{`...`}` on the blocks for an `if` where the condition has been split over multiple lines like this.)\r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 6, 3, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 466128668, 'comment_body': 'Oh, I misunderstood the comment. I will fix this and update the PR.', 'comment_created': datetime.datetime(2020, 8, 6, 3, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 466137108, 'comment_body': 'I have fixed this', 'comment_created': datetime.datetime(2020, 8, 6, 4, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 475125342, 'comment_body': 'I have updated this. \r\n* Changed return type of compare_test to an enum err_code which will return PASS, FAIL, SKIP.\r\n* The test will skip only if no terms are found and will fail when some terms are not found.', 'comment_created': datetime.datetime(2020, 8, 22, 19, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 475208806, 'comment_body': 'I think this is long enough to justify wrapping (see `EXTRA_DIST` below for how to do that).', 'comment_created': datetime.datetime(2020, 8, 23, 11, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jaylett', 'type': 'User'}, {'comment_id': 475209083, 'comment_body': ""I'd probably call this `test_result` or something, since not all of those are strictly errors (and `err_code` is quite abstract, where `test_result` makes it clear it's about tests — which is implied by being in a file about tests, but even so is a good idea I think)."", 'comment_created': datetime.datetime(2020, 8, 23, 11, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jaylett', 'type': 'User'}, {'comment_id': 475209252, 'comment_body': ""If we shouldn't do this now because of changes you've made, then just delete the lines (and the `blank.odt`) as a separate commit (my understanding is that the test will just `SKIP` so it'd be fine to have in a separate commit).\r\n\r\nHaving it in a separate commit makes it easy to restore the test including the file if someone makes changes in future that allow differentiating between a blank file and something that our handler can't extract anything from."", 'comment_created': datetime.datetime(2020, 8, 23, 11, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jaylett', 'type': 'User'}, {'comment_id': 475209455, 'comment_body': ""This change (including the enum and the matching one in `main()`) could have been a separate commit. The final commit is probably going to be small enough that it's readable, but a good principle is for each commit to contain a distinct change. Here you have two: adding support for tests that skip and skipping on no terms, and adding support for libextractor."", 'comment_created': datetime.datetime(2020, 8, 23, 11, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jaylett', 'type': 'User'}, {'comment_id': 475209616, 'comment_body': 'This would be at least as clear if you just had `else` rather than `else if`, since setting `term_found` to `true` when it\'s already true is ""safe"". (It\'s unlikely to be significantly more efficient to check first with a bool.)', 'comment_created': datetime.datetime(2020, 8, 23, 11, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jaylett', 'type': 'User'}, {'comment_id': 475209740, 'comment_body': ""I'd probably put these comments at the top of the function, since they lay out how it works overall."", 'comment_created': datetime.datetime(2020, 8, 23, 11, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jaylett', 'type': 'User'}, {'comment_id': 475209951, 'comment_body': '`succeed` is no longer an appropriate variable name for this.', 'comment_created': datetime.datetime(2020, 8, 23, 11, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jaylett', 'type': 'User'}, {'comment_id': 475210102, 'comment_body': 'A comment as to ""why 77"" might be an idea here (just saying that it\'s the standard for automake would be fine).', 'comment_created': datetime.datetime(2020, 8, 23, 11, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jaylett', 'type': 'User'}, {'comment_id': 475246840, 'comment_body': 'I have changed this.', 'comment_created': datetime.datetime(2020, 8, 23, 17, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 475246895, 'comment_body': 'Thank you for pointing this out. I have changed the name to `test_result`.', 'comment_created': datetime.datetime(2020, 8, 23, 17, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 475246960, 'comment_body': 'I have made the necessary changes in a new commit.', 'comment_created': datetime.datetime(2020, 8, 23, 17, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 475247138, 'comment_body': 'Thank you for your insight. I will try and make separate commits for distinct changes in the future.', 'comment_created': datetime.datetime(2020, 8, 23, 17, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 475247220, 'comment_body': 'Thank you for pointing this out. I have changed the `else if` to `else`.', 'comment_created': datetime.datetime(2020, 8, 23, 17, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 475247256, 'comment_body': 'I have changed this. The comments are now at the top of the function.', 'comment_created': datetime.datetime(2020, 8, 23, 17, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 475247440, 'comment_body': 'Thank you for pointing this out. Right now, I have changed 2 variable names - `result` will indicate the result of the entire test and `outcome` will indicate the result of individual tests on files. Are these better names?\r\n\r\n* result -> outcome\r\n* succeed -> result\r\n', 'comment_created': datetime.datetime(2020, 8, 23, 17, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 475247467, 'comment_body': 'Thank you for pointing this out. I have added a comment for the same.', 'comment_created': datetime.datetime(2020, 8, 23, 17, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 475954544, 'comment_body': ""For Xapian code, we'd usually indent the `*` and `*/` lines so the `*`s all line up vertically with the one in `/*`.\r\n\r\nIt's also better to format function parameter docs as a doxygen documentation comment - that way someone can run doxygen over the code and get collated docs for internal APIs.  Going through and fixing up existing docs that lack such formatting is tedious work which is hard to automate, so it's the sort of thing which doesn't ever get done, so doing this when the comments are added is better.\r\n\r\nWhat that actually means is starting the comment block with `/**` followed by a brief description of the purpose of the function, and then formatting the parameter list entries like: `@param data_len  number of bytes in data`"", 'comment_created': datetime.datetime(2020, 8, 24, 23, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 475974010, 'comment_body': ""Better to avoid C-style casts in C++ code.  A C-style cast can be used for one of several purposes and it may not be clear to the reader which are wanted.  Also the compiler doesn't know which, and that allows errors to slip through.  C++ casts make the purpose clear to the reader, and the compiler can complain if they're misused.  `static_cast<>` is the appropriate one here: https://en.cppreference.com/w/cpp/language/static_cast\r\n\r\nAs an example of the sort of problem this avoids, if we had `const void* cls2` and tried:\r\n\r\n```\r\n    struct metadata* md = (struct metadata*)cls2;\r\n```\r\n\r\nThen this would compile without even a warning (because one use of a C-style cast is to remove `const` qualification), and we'd be able to modify the object despite getting a `const` pointer to it - that's potentially very bad.  If the object is actually in the `RODATA` section, it could give an access violation.  If it's constant data but not protected in that way, it's undefined behaviour to modify it.  Even if it's not constant, someone reading code that passes in an object as a `const` pointer won't expect it to be modified, and reasoning about calling code may be invalid.\r\n\r\nIf you try to compile this you'll get an error:\r\n\r\n```\r\n    struct metadata* md = static_cast<struct metadata*>(cls2);\r\n```\r\n\r\nIf you actually want to remove `const` with a C++ cast you need to use `const_cast<>` (and that only removes `const` - it won't accidentally change the type at the same time)."", 'comment_created': datetime.datetime(2020, 8, 24, 23, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 475975801, 'comment_body': ""Xapian coding style is to wrap after `=` not before.\r\n\r\nBut you can probably avoid needing to wrap by using `auto` for the type.  The exact type isn't interesting here - this is really just an opaque thing representing plugins which we need to pass to other libextractor API functions."", 'comment_created': datetime.datetime(2020, 8, 24, 23, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 475977494, 'comment_body': 'Blank line at end of block.', 'comment_created': datetime.datetime(2020, 8, 24, 23, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 475984483, 'comment_body': 'This removes a testcase, which seems undesirable.\r\n\r\nAdding per-testcase flags would address this in a much more satisfactory way as it would allow marking the testcases where ""skip for no terms"" is appropriate.  Then we could keep this testcase, and we\'d also catch ""missing all terms"" bugs for formats where this missing plugin situation doesn\'t apply (which is probably at least everything that doesn\'t use libextractor, and perhaps even everything except libextractor with particular plugins).\r\n', 'comment_created': datetime.datetime(2020, 8, 25, 0, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 478814022, 'comment_body': 'I have made these changes and updated the comment.', 'comment_created': datetime.datetime(2020, 8, 28, 3, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 478814877, 'comment_body': 'Thank you for your insight. I have changed this.', 'comment_created': datetime.datetime(2020, 8, 28, 3, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 478815069, 'comment_body': 'I have changed the type to `auto`. But I had to still wrap the lines as it was still exceeding 80 chars.', 'comment_created': datetime.datetime(2020, 8, 28, 3, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 478815114, 'comment_body': 'I have corrected this.', 'comment_created': datetime.datetime(2020, 8, 28, 3, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 478815479, 'comment_body': 'I have made the necessary changes here.\r\n* Change implementation of testcase to a structure.\r\n* Added an enum for flags with 3 values as of now - `FAIL_IF_NO_TERMS`, `SKIP_IF_NO_TERMS`, `PASS_IF_NO_TERMS`\r\n', 'comment_created': datetime.datetime(2020, 8, 28, 3, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 479253490, 'comment_body': ""Maybe we can use a more descriptive name, like `test_type_flag`.\r\n\r\nYou can add other flags but I think it's okay for now."", 'comment_created': datetime.datetime(2020, 8, 28, 12, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 479262045, 'comment_body': 'Perhaps we can rename the variable `exists` to `all_term_exist`.', 'comment_created': datetime.datetime(2020, 8, 28, 12, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'barufa', 'type': 'User'}, {'comment_id': 479463546, 'comment_body': '`all_terms_exist` would be slightly better.', 'comment_created': datetime.datetime(2020, 8, 28, 18, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jaylett', 'type': 'User'}, {'comment_id': 479463782, 'comment_body': '`test_flag` would be one option, or you could nest it in the `struct testcase` which might be more appropriate.', 'comment_created': datetime.datetime(2020, 8, 28, 18, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jaylett', 'type': 'User'}, {'comment_id': 479464136, 'comment_body': 'I\'d probably call this `individual_result` or something. It\'s not going to be clear to someone just reading the variable names what the difference between ""outcome"" and ""result"" is.', 'comment_created': datetime.datetime(2020, 8, 28, 18, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jaylett', 'type': 'User'}, {'comment_id': 479609342, 'comment_body': 'Thank you for pointing this out. I have changed the variable name to `test_flag`.\r\nI haven\'t nested the declaration inside the struct as I was not sure if I understood it correctly.\r\n\r\n@jaylett  Should I declare the enum `test_flag` inside the structure definition and then the insertion in tests would be of the form-\r\n`tests.insert({""test.txt"", {testcase::FAIL_IF_NO_TERMS, {""Zjoey""}}})`', 'comment_created': datetime.datetime(2020, 8, 29, 5, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 479609407, 'comment_body': 'I have changed the variable name to `all_terms_exist`', 'comment_created': datetime.datetime(2020, 8, 29, 5, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 479609451, 'comment_body': 'Thank you for pointing this out. I have changed the variable name to `individual_result` instead of `outcome`.', 'comment_created': datetime.datetime(2020, 8, 29, 5, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}, {'comment_id': 480791956, 'comment_body': ""I don't think we need 3 flags for this.  If there are 3 flags, there are 8 possible combinations of them, but most of the combinations don't make any sense.  As a general design point, it's cleaner to have a design where there aren't invalid combinations like this to worry about.\r\n\r\nI think there are really just 2 cases here:\r\n\r\n* We're using an extractor plugin which may not extract anything due to a missing dependency - this is `SKIP_IF_NO_TERMS`\r\n* We aren't - not specifying `SKIP_IF_NO_TERMS` covers this case (and if you add a constructor to `struct testcase` with the parameter for `flags` last and with a default of 0 then this you should be able to only specify the flag on the testcases that need it and avoid the clutter of flags on every testcase in the list).\r\n\r\nNote that you can tell the cases that you currently have marked with `FAIL_IF_NO_TERMS` and `PASS_IF_NO_TERMS` apart because the latter has `terms.empty()` and the former don't.  It wouldn't really make sense to list terms but have `PASS_IF_NO_TERMS`, and a testcase listing no terms with `FAIL_IF_NO_TERMS` would have to always fail."", 'comment_created': datetime.datetime(2020, 9, 1, 4, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ojwb', 'type': 'User'}, {'comment_id': 483191906, 'comment_body': 'I have changed this and have updated the PR.', 'comment_created': datetime.datetime(2020, 9, 3, 18, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Exter-dg', 'type': 'User'}]","[{'commit_sha': 'cab29b602d05357cb5f7e99ae2ff2a5a475017c1', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36ec4ece79ea57bd5dee79dfc4170268e46ce268', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e9654d4e10322f1e970878379507e86d4891f7a', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e86068ba099d7c2ca554e0d3af41aaa3498e1f20', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '700239d168c2d0d51467c683e718a1d301148671', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60cf736ec5d964e72f0c343f738b60a42fc66e86', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb32ff9a83db2d3a5c81fdf84a5eb0117ba9c20d', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a9411f381f4a6d101e48dc814431c9bd901e785', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfe1cc62c070b86c01fd5c6c13732ab0be23e077', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd407dfcfc4b51e90687276b784dd3e368ad99f43', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40266f720aa26303b3dfaf72820be559dcb50fcc', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7dbaf0e5820848318f9e030e734c4f4e5de2a04', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48b65bea9cbfa8f2245e8daa41b5a084aedfd7cc', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82a88075a7ced1a2fdcefc4006caaf8223ba5b5e', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e56b5656b47ee220339deebc899b19789c3593aa', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d92a2c2c3ca39dbc720908ac19413b2a8f8aacd', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdfb14da30868183953f7282321e360194bc9b16', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0a1dfe071e7d621d14c2f31f6c0dfea9b81f902', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7265d0597b558ebe60a82de6f09b1a895b0a9382', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0d92ae5c29285ef363a1108eff4fdf62193e777', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '051e7009fc50ed7c23ea0f57550b220110dccf27', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c3d07cfd118ca568967942cab90fe1451026a73', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '967b2c07b243ef8122fc70383e12e8b3f59d0031', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17e0c1bb0624e6adf327a377c9207f6f7f451acb', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4977284c6cdd2d9c05c485c49ad9b5ed1ec6e5d', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '856130619b4788766eb5cf7d4535b46cf74d20a8', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7b7f8c84c45cb801cb6169d040052cea6549363', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39b6b10ffacaf4fe9a032a8468efb82ad5241d29', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8aaba3efa6af77262c94323ec3dfbb9719b85435', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '518223ebecf1748a35c33b2206998dc00502634d', 'committer_username': 'Exter-dg', 'committer_name': 'Parth Kapadia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 11, 19, 59, 42, tzinfo=datetime.timezone.utc)}]",Parth Kapadia,46609729,,User,,69,,18,21

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
735981,xapian,xapian/xapian,C++,281,793,50,58,19774,12,272,12,"[{'id': 472120856, 'number': 315, 'closed': datetime.datetime(2022, 6, 2, 5, 51, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 23, 12, 54, 22, tzinfo=datetime.timezone.utc), 'time_taken': 55961832.0, 'time_delta': '647 days, 16:57:12', 'additions': 294, 'deletions': 3, 'state': 'closed'}, {'id': 466480050, 'number': 311, 'closed': datetime.datetime(2020, 8, 19, 7, 47, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 3, 14, 57, tzinfo=datetime.timezone.utc), 'time_taken': 621155.0, 'time_delta': '7 days, 4:32:35', 'additions': 97, 'deletions': 3, 'state': 'closed'}, {'id': 459544728, 'number': 307, 'closed': datetime.datetime(2020, 8, 6, 7, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 19, 49, 11, tzinfo=datetime.timezone.utc), 'time_taken': 559249.0, 'time_delta': '6 days, 11:20:49', 'additions': 260, 'deletions': 3, 'state': 'closed'}, {'id': 454099299, 'number': 306, 'closed': datetime.datetime(2020, 9, 5, 6, 55, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 4, 7, 42, tzinfo=datetime.timezone.utc), 'time_taken': 3984493.0, 'time_delta': '46 days, 2:48:13', 'additions': 313, 'deletions': 63, 'state': 'closed'}, {'id': 448795724, 'number': 304, 'closed': datetime.datetime(2020, 7, 15, 7, 17, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 10, 33, 30, tzinfo=datetime.timezone.utc), 'time_taken': 74663.0, 'time_delta': '20:44:23', 'additions': 19, 'deletions': 4, 'state': 'closed'}, {'id': 447855942, 'number': 303, 'closed': datetime.datetime(2020, 7, 25, 4, 3, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 12, 6, 1, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1116120.0, 'time_delta': '12 days, 22:02:00', 'additions': 249, 'deletions': 55, 'state': 'closed'}, {'id': 432448300, 'number': 300, 'closed': datetime.datetime(2020, 7, 11, 0, 58, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 13, 16, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2634125.0, 'time_delta': '30 days, 11:42:05', 'additions': 1220, 'deletions': 37, 'state': 'closed'}, {'id': 385362085, 'number': 290, 'closed': datetime.datetime(2020, 4, 13, 22, 46, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 3, 2, 41, tzinfo=datetime.timezone.utc), 'time_taken': 3095010.0, 'time_delta': '35 days, 19:43:30', 'additions': 3, 'deletions': 3, 'state': 'closed'}]"
