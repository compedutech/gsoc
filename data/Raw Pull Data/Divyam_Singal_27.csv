pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
676945422,Optimization of DAG,"1. Added optimize method for Real number, which user can call. Its implemented by traversal on shared pointers rather than reals, as traversal on real requires typecasting of shared pointers to real.
2. Added 2 variables - optimize_freq which denotes number of nodes after which every time we optimize. num_nodes maintain the number of nodes added in tree after last optimization. They are used in set_optimize_freq method. num_nodes is updated every time there is an operation like +=, -=, *=, /=.
3. Added method to find number of nodes, for it is required for finding num_nodes in real operation. 
4. Modified the print_tree method by traversing on shared pointers rather than reals, as traversal on real requires typecasting of shared pointers to real. Tested it and gave a huge improvement.
5. Corrected some typo's in check and distribute function. Also made the reals one and two in this function as static, so that they have the same address. Having same address will help us optimize such cases also.
6. Added two more variables - use_prev and prev_top which stores the result of previous optimization for next. This way we can simplify further two calls of optimization. 
7. Added tests for optimize() and set_optimize_freq() methods.",True,9,https://api.github.com/repos/BoostGSoC21/Real/pulls/9,https://github.com/BoostGSoC21/Real/pull/9,closed,775,33,3,5,1,19,0,0,[],2021-06-24 09:28:44+00:00,2021-07-26 12:44:05+00:00,2776521.0,"32 days, 3:15:21","[{'comment_id': 669698242, 'comment_body': ""shouldn't you also set the optimize_freq, use_prev and prev_top private attributes as well?\r\n"", 'comment_created': datetime.datetime(2021, 7, 14, 15, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669716246, 'comment_body': '1. Why not to define these private atributes inside the real_data structure so you have no need to maintain them separately. It seems that if these optimizations are part of real numbers, then it make sens to store the optimization attributes inside the real_data structure. Maybe, it can be even better to store these variables in a real_optimizer_data structure inside the real_data.\r\n2. Just for consistency, if there is a reason to not encapsulate  the attributes of the optimizer, put them before the private constructor to have a consistent declaration order attributes then constructors.', 'comment_created': datetime.datetime(2021, 7, 14, 15, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669718958, 'comment_body': 'You use this pattern in multiple places, why not to declare a single function to encapsulate this behavior.\r\n\r\n```\r\nincrement_and_check_if_optimize(int num_nodes) {\r\n    this->num_nodes = num_nodes;\r\n    this->check_if_optimize();\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 15, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669724818, 'comment_body': ""In operation nodes shuldn''t this->num_nodes be 3 instead of 2? you have two children and a parent node."", 'comment_created': datetime.datetime(2021, 7, 14, 15, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669751831, 'comment_body': 'because `num_nodes` is a counter from the last optimization I suggest using a more descriptive name even if it ends up longer. When I read `num_nodes` I spect having stored in the variable the total number of nodes within the tree, but this is not the case. A better name can be something like `num_nodes_without_optimization` or something describing the fact that the counter is reseated after each optimization. ', 'comment_created': datetime.datetime(2021, 7, 14, 16, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669755912, 'comment_body': ""find_num_nodes shouldn't be 5? 3 leaf nodes (b, 5 and a) and 2 operation nodes (+ and *).\r\n\r\nI think this question also answers my previous question about setting num_nodes = 2 in operations. "", 'comment_created': datetime.datetime(2021, 7, 14, 16, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669766164, 'comment_body': '1. Why is this break here? It seems you are looking for the first positive count. Is this correct? Why? and if so, why not to use a std::find function for it? I understand that you are first looking the first positive count and then looping to process all counts? what is the role of the `first` boolean variable? \r\n', 'comment_created': datetime.datetime(2021, 7, 14, 16, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669787810, 'comment_body': 'Here num_nodes refer to the number of variables in expression. Here it would be 2, as the parent node is an operation number. It makes sense to be the number of variables, which the user can understand.', 'comment_created': datetime.datetime(2021, 7, 14, 16, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 669788699, 'comment_body': 'As I have answered above, it will have 3 variables - a, b and 5.', 'comment_created': datetime.datetime(2021, 7, 14, 16, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 669804732, 'comment_body': ""Let us take an example, 5\\*a+3\\*b-4\\*c. Now first the optimized tree would consist of multiplication of 5 and a, after that we also need to join 3\\*b by + and 4\\*c by -. If first expression is constructed, others need to be joined by +/-. Now it is also not necessary that first should be the first element of map, for in case if the count of element is 0, we don't add to our new tree. If first doesn't occur, that means the number is 0, which I have taken care of at the end.\r\n\r\nTake another example, -a+b-c = (-1) \\* a + b + (-1) \\* c. Here number of nodes is 5. If we write it as b - a - c, number of nodes would be 3. In case it was all negative counts, i.e. -a-b-c, then there is no option but to simplify it as (-1) \\* a - b - c.\r\nYes, I can use std::find_if, if required."", 'comment_created': datetime.datetime(2021, 7, 14, 17, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 669807013, 'comment_body': 'How does `num_variables_after_last_optimize` sound?', 'comment_created': datetime.datetime(2021, 7, 14, 17, 18, 2, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 669829827, 'comment_body': 'Do you think it is better if the optimization attributes are also transferred to the copies? If yes, then I will correct it.', 'comment_created': datetime.datetime(2021, 7, 14, 17, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 669929777, 'comment_body': 'I think yes. If you do a copy of an element, then, you want something exactly like that element, including his state. The optimization state is part or the element state.', 'comment_created': datetime.datetime(2021, 7, 14, 20, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669931494, 'comment_body': ""Ok, perfect, but maybe the name num_nodes can be misunderstood as the number of nodes instead of the number of variables. Don't you think? maybe should be called num_vars? "", 'comment_created': datetime.datetime(2021, 7, 14, 20, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669932979, 'comment_body': 'Ok, that name sound mutch better. It\'\'s kind of too long thought, but if there is no descriptive shorter name, then it is better to have a long descriptive name than a short confusing name.  There is that saying ""written once and reader million times"" ', 'comment_created': datetime.datetime(2021, 7, 14, 20, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669942107, 'comment_body': 'not sure to fully understand this. We will discuss it in the call this friday', 'comment_created': datetime.datetime(2021, 7, 14, 20, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 671798971, 'comment_body': ""@Laouen I don't think we can keep them in a new file or real_data because of this attribute - \r\n`std::pair<std::shared_ptr<real_data<T>>, std::map<std::shared_ptr<real_data<T>>, int>> prev_top;`\r\nMaybe I will encapsulate all those 4 variables in a structure in real.hpp file.\r\nWhat do you say?"", 'comment_created': datetime.datetime(2021, 7, 18, 7, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 671804575, 'comment_body': 'Or I can make a structure in a new file `real_optimization_data.hpp` containing `real_data.hpp` file. And then include `real_optimization_data.hpp` in `real.hpp`. ', 'comment_created': datetime.datetime(2021, 7, 18, 8, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 673108202, 'comment_body': 'Ok, definitively having a new file `real_optimizacion_data.hpp`  containing `real_data.hpp` is not a good idea from a semantical point of view because a real number is not in essence an optimized real number. But I think you can create the new file you suggested `real_optimization_data.hpp` with a structure containing the 4 optimization variables and then import that file from the `real.hpp` file to use it in the same way as the real_data.hpp file is been used. Because there is no circular dependencies between the new `real_optimization_data.hpp` and the existing `real_data.hpp` you are able to import `real_data.hpp` in the new `real_optimiation_data.hpp` file in order to declare the `std::pair<std::shared_ptr<real_data<T>>, std::map<std::shared_ptr<real_data<T>>, int>> prev_top;` attribute.', 'comment_created': datetime.datetime(2021, 7, 20, 13, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}]","[{'commit_sha': 'a3e0b4a5f1a3e25f7d9f753d0575c775c338a7c0', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bea27a853d0e95bf220deaa49247905f3e1abf69', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '257a32791414e18f8569ce13212db2536dcbee5a', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b70b423e21f012c4a9ac09d9cef659f181f376', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '466041bbb7cf4ca9eb075aa136ecd7384b3b73ac', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}]",Divyam Singal,54735797,divyamsingal01@gmail.com,User,,29,,8,28
667638144,Corrected champernowne & added its optimized binary digit generator,"I have modified the champernowne function to output digits in base (std::numeric_limits<T>::max() / 4) * 2, as required by real_algorithm number.

I have also kept the optimized champernowne function to output digits in base 2, if some user wants digit in base 2.

I have also added a test for it, comparing with hardcoded digits.

",True,4,https://api.github.com/repos/BoostGSoC21/Real/pulls/4,https://github.com/BoostGSoC21/Real/pull/4,closed,351,263,5,1,0,0,0,0,[],2021-06-11 03:47:33+00:00,2021-07-26 12:47:17+00:00,3920384.0,"45 days, 8:59:44",[],"[{'commit_sha': 'b9de9e3a3869af0b1d8e98d6544095e8273094fa', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}]",Divyam Singal,54735797,divyamsingal01@gmail.com,User,,29,,8,28
672728846,Improvements in exact arithmetic operations,"I made the following changes - 
1.  Replaced the insert() function in add and subtract vectors by push_back() function, and then reversed the digits.
2.  Preventing overflow in mul_mod() and mult_div() functions. Handled this by careful addition by taking modulus when required. This will come to use if we change our library to a larger base in future.",True,7,https://api.github.com/repos/BoostGSoC21/Real/pulls/7,https://github.com/BoostGSoC21/Real/pull/7,closed,52,13,1,1,0,0,0,0,[],2021-06-17 15:07:58+00:00,2021-07-26 12:46:32+00:00,3361114.0,"38 days, 21:38:34",[],"[{'commit_sha': 'bb9ec6631b53b845a2b8f2c4d02d79002f8e64dc', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}]",Divyam Singal,54735797,divyamsingal01@gmail.com,User,,29,,8,28
667226217,Corrected carryover case in add_vector function,"In the carry-over scenario, digit=max+min-base-1. As division a/b means floor(a/b), we use the identity that base=floor(base/2)+floor((base-1)/2)+1.
(Here we take (base-1)/2 to avoid overflow.)
So instead of subtracting base/2 from max, we should rather subtract (base-1)/2-1 from max, otherwise it would lead to an incorrect result for even bases.",True,1,https://api.github.com/repos/BoostGSoC21/Real/pulls/1,https://github.com/BoostGSoC21/Real/pull/1,closed,2,2,1,2,0,0,0,0,[],2021-06-10 18:59:52+00:00,2021-06-11 14:13:13+00:00,69201.0,19:13:21,[],"[{'commit_sha': 'a504865ffd12bf1b9066e76027453e7d6155ce6a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '97b93c2ee2e5e29723c59836fd546185412c3c50', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Divyam Singal,54735797,divyamsingal01@gmail.com,User,,29,,8,28
683374395,"Optimizing math functions like exp, log and trigonometric","1. Exponent: Optimized using binary exponentiation for large values. For exponent(1000), it gave an improvement in speed by taking 0.8s now as compared to 256s earlier. Also improved in cases where x<-1.
2. Logarithm: Wrote log(x)=log(x/2)+log(2), repeating until x is small enough. Also calculated log(2) only once. For log(100), it gave an improvement in speed by taking 5s now as compared to 437s earlier. Also improved in cases where x<1.
3. Trigonometric Functions: Performed argument reduction to reduce the number to [0,2PI). Then used Taylor series. For sin(10000), it gave an improvement in speed by taking 0.6s now as compared to 64s earlier. Implemented floor function for it.
4. Added sqrt and inverse trigonometric functions.

Also using up_to() at each iteration of taylor series to avoid extra computation. This also gave significant improvement in time.",True,10,https://api.github.com/repos/BoostGSoC21/Real/pulls/10,https://github.com/BoostGSoC21/Real/pull/10,closed,614,18,4,7,4,27,0,0,[],2021-07-05 05:33:10+00:00,2021-07-26 12:43:22+00:00,1840212.0,"21 days, 7:10:12","[{'comment_id': 669868910, 'comment_body': ""maybe it's faster to use the power function?\r\n"", 'comment_created': datetime.datetime(2021, 7, 14, 18, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669870726, 'comment_body': 'there is a problem with the indentation here. There are other places where there is this code style problem. Make sure indentation is consistent with the rest of the code.', 'comment_created': datetime.datetime(2021, 7, 14, 18, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669886746, 'comment_body': ""1. Calling it `exact_pi` is confusing as pi can't be exactly calculated. You are taking by parameter a `max_error_exponent` in a method called exact_pi. Why can't you could just call it Pi?\r\n2. This function is the same function as `pi_nth_digit`. The only difference is just that this function returns the entire pi number while pi_nth_digit returns only the nth digit. Thus, please use this function to refactor the `pi_nth_digit`  and avoid duplicated code to maintain and bug fix.\r\n\r\nThe refactor should be something like:\r\n\r\n```\r\nT pi_nth_digit(unsigned int n) {\r\n    return exact_pi(n)[n];\r\n}\r\n```"", 'comment_created': datetime.datetime(2021, 7, 14, 19, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669920614, 'comment_body': 'There is tests of this?', 'comment_created': datetime.datetime(2021, 7, 14, 20, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669921090, 'comment_body': 'Also, by not duplicating code you are sure this works because of the already existing test for  pi_nth_digit', 'comment_created': datetime.datetime(2021, 7, 14, 20, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669922024, 'comment_body': 'make tests for this function', 'comment_created': datetime.datetime(2021, 7, 14, 20, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669922525, 'comment_body': 'make test for this function', 'comment_created': datetime.datetime(2021, 7, 14, 20, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669922662, 'comment_body': 'make tests for this function', 'comment_created': datetime.datetime(2021, 7, 14, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669922864, 'comment_body': 'make tests for this and all new functions', 'comment_created': datetime.datetime(2021, 7, 14, 20, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 670110507, 'comment_body': 'Yes. We should not make a copy of an irrational number like that (with approximation). This should be as @Laouen suggested above.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670111015, 'comment_body': 'You should add some comments at each part of function, it makes code more readable and bugs get easier to fix for someone else in future.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670113349, 'comment_body': ""No.\r\nThe power function that we have for exact numbers, is for integral power.\r\nNow, _e_ is an irrational number, so can't express it with an exact number and then keep on multiplying it with itself.\r\nAlso, the power function works only for integral powers.\r\nThe taylor expansion is the right and accurate way, and here the Taylor expansion is just a bit  improved. So, the optimization is correct.\r\n@Ezio112 (Suraj) can benchmark it later and check the performance difference."", 'comment_created': datetime.datetime(2021, 7, 15, 3, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670113520, 'comment_body': 'Correct the indentation.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670113566, 'comment_body': 'indentation again.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670114189, 'comment_body': 'If you are not using square root function anywhere, there is no need. Because we have separate square root function for Real numbers, which also uses exponent and logarithm but at higher level.\r\nUnless you need this somewhere, to calculate square root of an exact_number, remove it.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670114815, 'comment_body': ""Pi is quite an expensive calculation.\r\nI didn't use this approach because of expensive Pi.\r\nI am thinks this method will be more expansive than previous one. Review this optimization once more, keep the previous code handy, we will have to check using benchmark, whether this one is really an improvement or not."", 'comment_created': datetime.datetime(2021, 7, 15, 3, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670121631, 'comment_body': 'Square root function is required for the inverse trigonometric functions.', 'comment_created': datetime.datetime(2021, 7, 15, 4, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 670250219, 'comment_body': ""I don't know why the indentation got messed up, even though it's fine in my editor. I'll correct it."", 'comment_created': datetime.datetime(2021, 7, 15, 8, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 673130045, 'comment_body': 'I would suggest encapsulating all this code in a single struct to avoid spreading global variables all over the code and to keep a clear semantic modularization. By encapsulating max_precise_pi, max_error_exponent_pi and get_pi in a single struct and then assign that struct to a single variable allows to have all in a single encapsulated place.', 'comment_created': datetime.datetime(2021, 7, 20, 13, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 673131699, 'comment_body': 'Not sure what happened here. did you directly removed the `T pi_nth_digit(unsigned int n)` function? that function is needed in order to create the literal algorithmic PI number. The suggestion was not to delete the function but to use the new pi function to calculate the n-th digit.', 'comment_created': datetime.datetime(2021, 7, 20, 13, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 673132389, 'comment_body': 'Update comment as well to specify that the number returns a truncated version of pi and not the exact version of pi as that is impossible.', 'comment_created': datetime.datetime(2021, 7, 20, 13, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 673150274, 'comment_body': ""No, I haven't deleted it, it is after the pi function."", 'comment_created': datetime.datetime(2021, 7, 20, 14, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 673151736, 'comment_body': 'The tests were already made for real trigonometric functions, which uses exact trigonometric functions.', 'comment_created': datetime.datetime(2021, 7, 20, 14, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 673152676, 'comment_body': ""I'll make the tests for inverse trigonometric functions after adding the OPERATION for them, same as the case mentioned above."", 'comment_created': datetime.datetime(2021, 7, 20, 14, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 673204270, 'comment_body': ""OK, I didn't see the new function you did with the requested refactor! it's perfect! "", 'comment_created': datetime.datetime(2021, 7, 20, 14, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 673212114, 'comment_body': 'It would be good to have a simple not optimized integral power function  that work for any number (not only exact numbers) until we can implement an optimized version. I think something like:\r\n\r\n```\r\nreal pow(real a, int b) {\r\n  if (b == 1) {\r\n    return a;\r\n  } else {\r\n    if ( b is odd) {\r\n      result = power(a, (b-1) / 2);\r\n      result *= result;\r\n      result *= b;\r\n      return result;\r\n  } else {\r\n      result = power(a, b / 2);\r\n      result *= result;\r\n      return result;\r\n  }\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 15, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 673737329, 'comment_body': 'Floor function is used for argument reduction in trigonometric functions, whose tests are already made.', 'comment_created': datetime.datetime(2021, 7, 21, 7, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}]","[{'commit_sha': 'f9a3b7d3a7a5f15fd2b21b302197d34ccce05e3a', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5daad33ea9f1354bf6975f54099af921d3fd7805', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a6eccdc4440b706ba4aba1ce5ee8feae8e085d4', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef7dbb7f6561ff300c5bd2a547a941156d6d0483', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9998e6815c217c3ce166763b351d734c5b4fbad', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5d2574ca1c67c67f989dcabf9055c587ac81ed5', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa9c12c2bacc66c4e6a19b60904b374caa76a1d9', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}]",Divyam Singal,54735797,divyamsingal01@gmail.com,User,,29,,8,28
683374395,"Optimizing math functions like exp, log and trigonometric","1. Exponent: Optimized using binary exponentiation for large values. For exponent(1000), it gave an improvement in speed by taking 0.8s now as compared to 256s earlier. Also improved in cases where x<-1.
2. Logarithm: Wrote log(x)=log(x/2)+log(2), repeating until x is small enough. Also calculated log(2) only once. For log(100), it gave an improvement in speed by taking 5s now as compared to 437s earlier. Also improved in cases where x<1.
3. Trigonometric Functions: Performed argument reduction to reduce the number to [0,2PI). Then used Taylor series. For sin(10000), it gave an improvement in speed by taking 0.6s now as compared to 64s earlier. Implemented floor function for it.
4. Added sqrt and inverse trigonometric functions.

Also using up_to() at each iteration of taylor series to avoid extra computation. This also gave significant improvement in time.",True,10,https://api.github.com/repos/BoostGSoC21/Real/pulls/10,https://github.com/BoostGSoC21/Real/pull/10,closed,614,18,4,7,4,27,0,0,[],2021-07-05 05:33:10+00:00,2021-07-26 12:43:22+00:00,1840212.0,"21 days, 7:10:12","[{'comment_id': 669868910, 'comment_body': ""maybe it's faster to use the power function?\r\n"", 'comment_created': datetime.datetime(2021, 7, 14, 18, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669870726, 'comment_body': 'there is a problem with the indentation here. There are other places where there is this code style problem. Make sure indentation is consistent with the rest of the code.', 'comment_created': datetime.datetime(2021, 7, 14, 18, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669886746, 'comment_body': ""1. Calling it `exact_pi` is confusing as pi can't be exactly calculated. You are taking by parameter a `max_error_exponent` in a method called exact_pi. Why can't you could just call it Pi?\r\n2. This function is the same function as `pi_nth_digit`. The only difference is just that this function returns the entire pi number while pi_nth_digit returns only the nth digit. Thus, please use this function to refactor the `pi_nth_digit`  and avoid duplicated code to maintain and bug fix.\r\n\r\nThe refactor should be something like:\r\n\r\n```\r\nT pi_nth_digit(unsigned int n) {\r\n    return exact_pi(n)[n];\r\n}\r\n```"", 'comment_created': datetime.datetime(2021, 7, 14, 19, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669920614, 'comment_body': 'There is tests of this?', 'comment_created': datetime.datetime(2021, 7, 14, 20, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669921090, 'comment_body': 'Also, by not duplicating code you are sure this works because of the already existing test for  pi_nth_digit', 'comment_created': datetime.datetime(2021, 7, 14, 20, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669922024, 'comment_body': 'make tests for this function', 'comment_created': datetime.datetime(2021, 7, 14, 20, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669922525, 'comment_body': 'make test for this function', 'comment_created': datetime.datetime(2021, 7, 14, 20, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669922662, 'comment_body': 'make tests for this function', 'comment_created': datetime.datetime(2021, 7, 14, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669922864, 'comment_body': 'make tests for this and all new functions', 'comment_created': datetime.datetime(2021, 7, 14, 20, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 670110507, 'comment_body': 'Yes. We should not make a copy of an irrational number like that (with approximation). This should be as @Laouen suggested above.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670111015, 'comment_body': 'You should add some comments at each part of function, it makes code more readable and bugs get easier to fix for someone else in future.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670113349, 'comment_body': ""No.\r\nThe power function that we have for exact numbers, is for integral power.\r\nNow, _e_ is an irrational number, so can't express it with an exact number and then keep on multiplying it with itself.\r\nAlso, the power function works only for integral powers.\r\nThe taylor expansion is the right and accurate way, and here the Taylor expansion is just a bit  improved. So, the optimization is correct.\r\n@Ezio112 (Suraj) can benchmark it later and check the performance difference."", 'comment_created': datetime.datetime(2021, 7, 15, 3, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670113520, 'comment_body': 'Correct the indentation.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670113566, 'comment_body': 'indentation again.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670114189, 'comment_body': 'If you are not using square root function anywhere, there is no need. Because we have separate square root function for Real numbers, which also uses exponent and logarithm but at higher level.\r\nUnless you need this somewhere, to calculate square root of an exact_number, remove it.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670114815, 'comment_body': ""Pi is quite an expensive calculation.\r\nI didn't use this approach because of expensive Pi.\r\nI am thinks this method will be more expansive than previous one. Review this optimization once more, keep the previous code handy, we will have to check using benchmark, whether this one is really an improvement or not."", 'comment_created': datetime.datetime(2021, 7, 15, 3, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670121631, 'comment_body': 'Square root function is required for the inverse trigonometric functions.', 'comment_created': datetime.datetime(2021, 7, 15, 4, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 670250219, 'comment_body': ""I don't know why the indentation got messed up, even though it's fine in my editor. I'll correct it."", 'comment_created': datetime.datetime(2021, 7, 15, 8, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 673130045, 'comment_body': 'I would suggest encapsulating all this code in a single struct to avoid spreading global variables all over the code and to keep a clear semantic modularization. By encapsulating max_precise_pi, max_error_exponent_pi and get_pi in a single struct and then assign that struct to a single variable allows to have all in a single encapsulated place.', 'comment_created': datetime.datetime(2021, 7, 20, 13, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 673131699, 'comment_body': 'Not sure what happened here. did you directly removed the `T pi_nth_digit(unsigned int n)` function? that function is needed in order to create the literal algorithmic PI number. The suggestion was not to delete the function but to use the new pi function to calculate the n-th digit.', 'comment_created': datetime.datetime(2021, 7, 20, 13, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 673132389, 'comment_body': 'Update comment as well to specify that the number returns a truncated version of pi and not the exact version of pi as that is impossible.', 'comment_created': datetime.datetime(2021, 7, 20, 13, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 673150274, 'comment_body': ""No, I haven't deleted it, it is after the pi function."", 'comment_created': datetime.datetime(2021, 7, 20, 14, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 673151736, 'comment_body': 'The tests were already made for real trigonometric functions, which uses exact trigonometric functions.', 'comment_created': datetime.datetime(2021, 7, 20, 14, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 673152676, 'comment_body': ""I'll make the tests for inverse trigonometric functions after adding the OPERATION for them, same as the case mentioned above."", 'comment_created': datetime.datetime(2021, 7, 20, 14, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 673204270, 'comment_body': ""OK, I didn't see the new function you did with the requested refactor! it's perfect! "", 'comment_created': datetime.datetime(2021, 7, 20, 14, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 673212114, 'comment_body': 'It would be good to have a simple not optimized integral power function  that work for any number (not only exact numbers) until we can implement an optimized version. I think something like:\r\n\r\n```\r\nreal pow(real a, int b) {\r\n  if (b == 1) {\r\n    return a;\r\n  } else {\r\n    if ( b is odd) {\r\n      result = power(a, (b-1) / 2);\r\n      result *= result;\r\n      result *= b;\r\n      return result;\r\n  } else {\r\n      result = power(a, b / 2);\r\n      result *= result;\r\n      return result;\r\n  }\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 15, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 673737329, 'comment_body': 'Floor function is used for argument reduction in trigonometric functions, whose tests are already made.', 'comment_created': datetime.datetime(2021, 7, 21, 7, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}]","[{'commit_sha': 'f9a3b7d3a7a5f15fd2b21b302197d34ccce05e3a', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5daad33ea9f1354bf6975f54099af921d3fd7805', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a6eccdc4440b706ba4aba1ce5ee8feae8e085d4', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef7dbb7f6561ff300c5bd2a547a941156d6d0483', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9998e6815c217c3ce166763b351d734c5b4fbad', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5d2574ca1c67c67f989dcabf9055c587ac81ed5', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa9c12c2bacc66c4e6a19b60904b374caa76a1d9', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}]",Divyam Singal,54735797,divyamsingal01@gmail.com,User,,29,,8,28
706725596,Added operation of sqrt,"I have added a separate OPERATION::SQRT, as it showed significant improvement.

For sqrt(10^5), my function took 1s whereas previous function took 32s. ",True,16,https://api.github.com/repos/BoostGSoC21/Real/pulls/16,https://github.com/BoostGSoC21/Real/pull/16,closed,31,16,3,2,1,0,0,0,[],2021-08-09 18:01:53+00:00,2021-08-11 18:47:03+00:00,175510.0,"2 days, 0:45:10",[],"[{'commit_sha': '0965a99b65890df71b75dc4a6e8c709461fad652', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7ba72f0f5124601328704be6641b320fd7e4c03', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}]",Divyam Singal,54735797,divyamsingal01@gmail.com,User,,29,,8,28
683374395,"Optimizing math functions like exp, log and trigonometric","1. Exponent: Optimized using binary exponentiation for large values. For exponent(1000), it gave an improvement in speed by taking 0.8s now as compared to 256s earlier. Also improved in cases where x<-1.
2. Logarithm: Wrote log(x)=log(x/2)+log(2), repeating until x is small enough. Also calculated log(2) only once. For log(100), it gave an improvement in speed by taking 5s now as compared to 437s earlier. Also improved in cases where x<1.
3. Trigonometric Functions: Performed argument reduction to reduce the number to [0,2PI). Then used Taylor series. For sin(10000), it gave an improvement in speed by taking 0.6s now as compared to 64s earlier. Implemented floor function for it.
4. Added sqrt and inverse trigonometric functions.

Also using up_to() at each iteration of taylor series to avoid extra computation. This also gave significant improvement in time.",True,10,https://api.github.com/repos/BoostGSoC21/Real/pulls/10,https://github.com/BoostGSoC21/Real/pull/10,closed,614,18,4,7,4,27,0,0,[],2021-07-05 05:33:10+00:00,2021-07-26 12:43:22+00:00,1840212.0,"21 days, 7:10:12","[{'comment_id': 669868910, 'comment_body': ""maybe it's faster to use the power function?\r\n"", 'comment_created': datetime.datetime(2021, 7, 14, 18, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669870726, 'comment_body': 'there is a problem with the indentation here. There are other places where there is this code style problem. Make sure indentation is consistent with the rest of the code.', 'comment_created': datetime.datetime(2021, 7, 14, 18, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669886746, 'comment_body': ""1. Calling it `exact_pi` is confusing as pi can't be exactly calculated. You are taking by parameter a `max_error_exponent` in a method called exact_pi. Why can't you could just call it Pi?\r\n2. This function is the same function as `pi_nth_digit`. The only difference is just that this function returns the entire pi number while pi_nth_digit returns only the nth digit. Thus, please use this function to refactor the `pi_nth_digit`  and avoid duplicated code to maintain and bug fix.\r\n\r\nThe refactor should be something like:\r\n\r\n```\r\nT pi_nth_digit(unsigned int n) {\r\n    return exact_pi(n)[n];\r\n}\r\n```"", 'comment_created': datetime.datetime(2021, 7, 14, 19, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669920614, 'comment_body': 'There is tests of this?', 'comment_created': datetime.datetime(2021, 7, 14, 20, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669921090, 'comment_body': 'Also, by not duplicating code you are sure this works because of the already existing test for  pi_nth_digit', 'comment_created': datetime.datetime(2021, 7, 14, 20, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669922024, 'comment_body': 'make tests for this function', 'comment_created': datetime.datetime(2021, 7, 14, 20, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669922525, 'comment_body': 'make test for this function', 'comment_created': datetime.datetime(2021, 7, 14, 20, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669922662, 'comment_body': 'make tests for this function', 'comment_created': datetime.datetime(2021, 7, 14, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 669922864, 'comment_body': 'make tests for this and all new functions', 'comment_created': datetime.datetime(2021, 7, 14, 20, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 670110507, 'comment_body': 'Yes. We should not make a copy of an irrational number like that (with approximation). This should be as @Laouen suggested above.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670111015, 'comment_body': 'You should add some comments at each part of function, it makes code more readable and bugs get easier to fix for someone else in future.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670113349, 'comment_body': ""No.\r\nThe power function that we have for exact numbers, is for integral power.\r\nNow, _e_ is an irrational number, so can't express it with an exact number and then keep on multiplying it with itself.\r\nAlso, the power function works only for integral powers.\r\nThe taylor expansion is the right and accurate way, and here the Taylor expansion is just a bit  improved. So, the optimization is correct.\r\n@Ezio112 (Suraj) can benchmark it later and check the performance difference."", 'comment_created': datetime.datetime(2021, 7, 15, 3, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670113520, 'comment_body': 'Correct the indentation.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670113566, 'comment_body': 'indentation again.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670114189, 'comment_body': 'If you are not using square root function anywhere, there is no need. Because we have separate square root function for Real numbers, which also uses exponent and logarithm but at higher level.\r\nUnless you need this somewhere, to calculate square root of an exact_number, remove it.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670114815, 'comment_body': ""Pi is quite an expensive calculation.\r\nI didn't use this approach because of expensive Pi.\r\nI am thinks this method will be more expansive than previous one. Review this optimization once more, keep the previous code handy, we will have to check using benchmark, whether this one is really an improvement or not."", 'comment_created': datetime.datetime(2021, 7, 15, 3, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vikram2000b', 'type': 'User'}, {'comment_id': 670121631, 'comment_body': 'Square root function is required for the inverse trigonometric functions.', 'comment_created': datetime.datetime(2021, 7, 15, 4, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 670250219, 'comment_body': ""I don't know why the indentation got messed up, even though it's fine in my editor. I'll correct it."", 'comment_created': datetime.datetime(2021, 7, 15, 8, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 673130045, 'comment_body': 'I would suggest encapsulating all this code in a single struct to avoid spreading global variables all over the code and to keep a clear semantic modularization. By encapsulating max_precise_pi, max_error_exponent_pi and get_pi in a single struct and then assign that struct to a single variable allows to have all in a single encapsulated place.', 'comment_created': datetime.datetime(2021, 7, 20, 13, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 673131699, 'comment_body': 'Not sure what happened here. did you directly removed the `T pi_nth_digit(unsigned int n)` function? that function is needed in order to create the literal algorithmic PI number. The suggestion was not to delete the function but to use the new pi function to calculate the n-th digit.', 'comment_created': datetime.datetime(2021, 7, 20, 13, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 673132389, 'comment_body': 'Update comment as well to specify that the number returns a truncated version of pi and not the exact version of pi as that is impossible.', 'comment_created': datetime.datetime(2021, 7, 20, 13, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 673150274, 'comment_body': ""No, I haven't deleted it, it is after the pi function."", 'comment_created': datetime.datetime(2021, 7, 20, 14, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 673151736, 'comment_body': 'The tests were already made for real trigonometric functions, which uses exact trigonometric functions.', 'comment_created': datetime.datetime(2021, 7, 20, 14, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 673152676, 'comment_body': ""I'll make the tests for inverse trigonometric functions after adding the OPERATION for them, same as the case mentioned above."", 'comment_created': datetime.datetime(2021, 7, 20, 14, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}, {'comment_id': 673204270, 'comment_body': ""OK, I didn't see the new function you did with the requested refactor! it's perfect! "", 'comment_created': datetime.datetime(2021, 7, 20, 14, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 673212114, 'comment_body': 'It would be good to have a simple not optimized integral power function  that work for any number (not only exact numbers) until we can implement an optimized version. I think something like:\r\n\r\n```\r\nreal pow(real a, int b) {\r\n  if (b == 1) {\r\n    return a;\r\n  } else {\r\n    if ( b is odd) {\r\n      result = power(a, (b-1) / 2);\r\n      result *= result;\r\n      result *= b;\r\n      return result;\r\n  } else {\r\n      result = power(a, b / 2);\r\n      result *= result;\r\n      return result;\r\n  }\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 15, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Laouen', 'type': 'User'}, {'comment_id': 673737329, 'comment_body': 'Floor function is used for argument reduction in trigonometric functions, whose tests are already made.', 'comment_created': datetime.datetime(2021, 7, 21, 7, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'div5252', 'type': 'User'}]","[{'commit_sha': 'f9a3b7d3a7a5f15fd2b21b302197d34ccce05e3a', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5daad33ea9f1354bf6975f54099af921d3fd7805', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a6eccdc4440b706ba4aba1ce5ee8feae8e085d4', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef7dbb7f6561ff300c5bd2a547a941156d6d0483', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9998e6815c217c3ce166763b351d734c5b4fbad', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5d2574ca1c67c67f989dcabf9055c587ac81ed5', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa9c12c2bacc66c4e6a19b60904b374caa76a1d9', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}]",Divyam Singal,54735797,divyamsingal01@gmail.com,User,,29,,8,28
698046816,Added operations of inverse trig & corresponding tests,"Added operations and tests for inverse trigonometric functions.

Fixed `upper` in `real_math`. Closes issue #11 ",True,13,https://api.github.com/repos/BoostGSoC21/Real/pulls/13,https://github.com/BoostGSoC21/Real/pull/13,closed,831,12,5,2,0,0,0,0,[],2021-07-27 17:23:24+00:00,2021-08-11 16:27:59+00:00,1292675.0,"14 days, 23:04:35",[],"[{'commit_sha': '2334d38df47b46edf2ea5795c532a39564e0838d', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe6dc445ceb25f730acfba9b285fd8c9de6a5e7f', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}]",Divyam Singal,54735797,divyamsingal01@gmail.com,User,,29,,8,28
701970015,Added golden ratio to irrationals,,True,15,https://api.github.com/repos/BoostGSoC21/Real/pulls/15,https://github.com/BoostGSoC21/Real/pull/15,closed,61,1,3,1,0,0,0,0,[],2021-08-03 05:34:38+00:00,2021-08-11 16:28:44+00:00,730446.0,"8 days, 10:54:06",[],"[{'commit_sha': '8dc56274aab6cbcd3105334e7afccdf19e4c250d', 'committer_username': 'div5252', 'committer_name': 'Divyam Singal', 'committer_email': 'divyamsingal01@gmail.com', 'commit_date': datetime.datetime(2019, 8, 31, 6, 47, tzinfo=datetime.timezone.utc)}]",Divyam Singal,54735797,divyamsingal01@gmail.com,User,,29,,8,28

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
375749711,Real,BoostGSoC21/Real,C++,5,4,1,11,335,5,7,4,"[{'id': 706725596, 'number': 16, 'closed': datetime.datetime(2021, 8, 11, 18, 47, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 9, 18, 1, 53, tzinfo=datetime.timezone.utc), 'time_taken': 175510.0, 'time_delta': '2 days, 0:45:10', 'additions': 31, 'deletions': 16, 'state': 'closed'}, {'id': 701970015, 'number': 15, 'closed': datetime.datetime(2021, 8, 11, 16, 28, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 5, 34, 38, tzinfo=datetime.timezone.utc), 'time_taken': 730446.0, 'time_delta': '8 days, 10:54:06', 'additions': 61, 'deletions': 1, 'state': 'closed'}, {'id': 698046816, 'number': 13, 'closed': datetime.datetime(2021, 8, 11, 16, 27, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 17, 23, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1292675.0, 'time_delta': '14 days, 23:04:35', 'additions': 831, 'deletions': 12, 'state': 'closed'}, {'id': 694844017, 'number': 12, 'closed': datetime.datetime(2021, 7, 26, 12, 41, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 22, 3, 32, 4, tzinfo=datetime.timezone.utc), 'time_taken': 378553.0, 'time_delta': '4 days, 9:09:13', 'additions': 28, 'deletions': 0, 'state': 'closed'}, {'id': 683374395, 'number': 10, 'closed': datetime.datetime(2021, 7, 26, 12, 43, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 5, 33, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1840212.0, 'time_delta': '21 days, 7:10:12', 'additions': 614, 'deletions': 18, 'state': 'closed'}, {'id': 676945422, 'number': 9, 'closed': datetime.datetime(2021, 7, 26, 12, 44, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 9, 28, 44, tzinfo=datetime.timezone.utc), 'time_taken': 2776521.0, 'time_delta': '32 days, 3:15:21', 'additions': 775, 'deletions': 33, 'state': 'closed'}, {'id': 672821093, 'number': 8, 'closed': datetime.datetime(2021, 8, 21, 11, 46, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 16, 47, 15, tzinfo=datetime.timezone.utc), 'time_taken': 5597973.0, 'time_delta': '64 days, 18:59:33', 'additions': 37, 'deletions': 9, 'state': 'closed'}, {'id': 672728846, 'number': 7, 'closed': datetime.datetime(2021, 7, 26, 12, 46, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 15, 7, 58, tzinfo=datetime.timezone.utc), 'time_taken': 3361114.0, 'time_delta': '38 days, 21:38:34', 'additions': 52, 'deletions': 13, 'state': 'closed'}, {'id': 671685413, 'number': 6, 'closed': datetime.datetime(2021, 6, 17, 4, 3, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 16, 59, 48, tzinfo=datetime.timezone.utc), 'time_taken': 39830.0, 'time_delta': '11:03:50', 'additions': 10, 'deletions': 10, 'state': 'closed'}, {'id': 667638144, 'number': 4, 'closed': datetime.datetime(2021, 7, 26, 12, 47, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 11, 3, 47, 33, tzinfo=datetime.timezone.utc), 'time_taken': 3920384.0, 'time_delta': '45 days, 8:59:44', 'additions': 351, 'deletions': 263, 'state': 'closed'}, {'id': 667276522, 'number': 3, 'closed': datetime.datetime(2021, 7, 26, 12, 47, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 19, 29, 7, tzinfo=datetime.timezone.utc), 'time_taken': 3950332.0, 'time_delta': '45 days, 17:18:52', 'additions': 21, 'deletions': 21, 'state': 'closed'}, {'id': 667236323, 'number': 2, 'closed': datetime.datetime(2021, 6, 10, 19, 7, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 19, 6, 15, tzinfo=datetime.timezone.utc), 'time_taken': 74.0, 'time_delta': '0:01:14', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 667226217, 'number': 1, 'closed': datetime.datetime(2021, 6, 11, 14, 13, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 18, 59, 52, tzinfo=datetime.timezone.utc), 'time_taken': 69201.0, 'time_delta': '19:13:21', 'additions': 2, 'deletions': 2, 'state': 'closed'}]"
