pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
456667996,feat: Added ImageLoader,Integrated JPEGTurbo with swift-models using CMake. ,True,649,https://api.github.com/repos/tensorflow/swift-models/pulls/649,https://github.com/tensorflow/swift-models/pull/649,closed,206,0,5,15,4,65,1,0,[{'name': 'gsoc'}],2020-07-25 20:55:16+00:00,2020-08-26 21:57:06+00:00,2768510.0,"32 days, 1:01:50","[{'comment_id': 460972224, 'comment_body': ""This isn't exactly the best option IMO.  This modifies the source tree for JPEG Turbo and that repository is hidden away in the build tree.  It would be nicer if we could copy out the headers into a staging directory instead."", 'comment_created': datetime.datetime(2020, 7, 27, 15, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460973309, 'comment_body': 'Because these overwrite the variables (`BINARY_DIR` and `SOURCE_DIR`), could you please re-order the rules such that the `SwiftProtobuf` library is completely added before handling the JPEG Turbo library?', 'comment_created': datetime.datetime(2020, 7, 27, 15, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460973518, 'comment_body': 'Nit: Extraneous whitespace', 'comment_created': datetime.datetime(2020, 7, 27, 15, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460973560, 'comment_body': 'Nit: Extraneous whitespace', 'comment_created': datetime.datetime(2020, 7, 27, 15, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460973705, 'comment_body': 'Nit: missing newline', 'comment_created': datetime.datetime(2020, 7, 27, 15, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460973970, 'comment_body': 'The rest of the project places `SHARED` on the previous line, could you please follow the same style?', 'comment_created': datetime.datetime(2020, 7, 27, 15, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460974141, 'comment_body': 'Nit: indentation is off.', 'comment_created': datetime.datetime(2020, 7, 27, 15, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460975016, 'comment_body': ""Does this need to be exposed?  If the library is the image operations, they should be high level enough that this shouldn't matter IMO.  Alternatively, we could call this `TurboJPEGOperations`."", 'comment_created': datetime.datetime(2020, 7, 27, 15, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460975191, 'comment_body': 'Could you please `swift-format` this file?', 'comment_created': datetime.datetime(2020, 7, 27, 15, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460976323, 'comment_body': '`fopen` is not available.  Please add this to the beginning of the file:\r\n\r\n```swift\r\n#if os(iOS) || os(macOS) || os(tvOS) || os(watchOS)\r\nimport Darwin\r\n#elseif os(Android) || os(Linux)\r\nimport Glibc\r\n#elseif os(Windows)\r\nimport ucrt\r\n#else\r\n#error ""C library not known for the target OS""\r\n#endif\r\n```', 'comment_created': datetime.datetime(2020, 7, 27, 15, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460977175, 'comment_body': 'What is the purpose of this variable?  You immediately cast it away to `Int32`.', 'comment_created': datetime.datetime(2020, 7, 27, 15, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460985022, 'comment_body': 'If this should be in the C style, this definitely needs error handling throughout.  However, this all seems overly complicated for what it seems like - reading the contents of the file.  Why does this need to be done manually rather than something like:\r\n\r\n```swift\r\nguard let data = FileManager.default.contents(atPath: filename) else {\r\n  // log.error(""unable to load contents of \\(filename)"")\r\n  return nil\r\n}\r\nlet decompressor: ? = tjInitDecompress()\r\ndata.withUnsafeBytes {\r\n  tjDecompressHeader(decompressor, $0.baseAddress!, UInt(size), &width, &height)\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 7, 27, 15, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460986130, 'comment_body': ""Nit: Extraneous space after `(`.\r\n\r\nThe first formal parameter (`filename`) is ambiguous.  What is `UnsafePointer<Int8>?`?  Is it a UTF-8 encoding string?  Perhaps UTF-16 so that it is compatible with Cocoa and Win32.  It is probably best to pass that as a Swift style `String` to allow for the encoding to be dealt with properly.\r\n\r\nI don't really like the myriad of `inout` parameters here.  It seems that you are using them to return the image data.  Why not redesign the API as:\r\n\r\n```\r\nenum PixelFormat: Int32 {\r\ncase ...\r\n}\r\nstruct ImageData {\r\n  let height: Int32\r\n  let width: Int32\r\n  let alignment: Int32\r\n  let pixelFormat: PixelFormat\r\n  let data: [UInt8]\r\n}\r\nprivate func LoadJPEG(atPath path: String, flags: Int = 0) -> ImageData? {\r\n}\r\n```\r\n\r\nThis allows for the data associated with the image content to returned as a single entity and be easily tracked.  It also means that future loaders can easily have a similar API, making them easy to swap out.  Lastly, it avoids the `UnsafeMutablePointer` which makes memory management a trickier issue.\r\n\r\nIs the cost of the additional copy here the concern?  Is it the unnecessary zero'ing?\r\n\r\nAdditionally, the `subsample` parameter to the load function seems unused.  Is there a reason for that parameter?\r\n\r\nAre the pixel formats specific to JPEG?  I assume that the pixel format is referring more to something like ARGB8888 vs RGB565, etc."", 'comment_created': datetime.datetime(2020, 7, 27, 15, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460989206, 'comment_body': 'Similar issues with the `filename` parameter.  The image details seem better encapsulated as `ImageData` IMO.  The `outSubsamp` parameter is unused, what is the purpose of that?', 'comment_created': datetime.datetime(2020, 7, 27, 15, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460989710, 'comment_body': 'Again why not use `FileManager` from `Foundation` to write the file?', 'comment_created': datetime.datetime(2020, 7, 27, 15, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460990327, 'comment_body': 'This component is poorly named - I imagine that we can have more than one executable.  More importantly, you are installing a library but naming the component `executable` which is very confusing.', 'comment_created': datetime.datetime(2020, 7, 27, 15, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 460991917, 'comment_body': ""I think that we should merge `ImageOps` and `JPEG`.  These don't make sense as separate libraries.  The `ImageOps` are not generic image operations currently, they are JPEG specific.  Why not make that `JPEGImageOperations`?  Why is that library separate?  Do you foresee other uses of it beyond just the `JPEG` library?"", 'comment_created': datetime.datetime(2020, 7, 27, 15, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 461725190, 'comment_body': 'Okay. I will copy it.', 'comment_created': datetime.datetime(2020, 7, 28, 16, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 461725315, 'comment_body': 'Will do.', 'comment_created': datetime.datetime(2020, 7, 28, 16, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 461727310, 'comment_body': 'I will merge the files.', 'comment_created': datetime.datetime(2020, 7, 28, 16, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 461727782, 'comment_body': 'Will do.', 'comment_created': datetime.datetime(2020, 7, 28, 16, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 461950829, 'comment_body': ""Yes, passing the filename as a Swift style `String` can be done. \r\n \r\nSo what I had in mind while writing this function signature was to give the user a similar experience as to the functions declared in libjpeg.\r\n \r\nBut actually we only need/store `width`, `height`, `pixelFormat` and `data` for our operations, so as you said, we can redesign the API but maybe just to only include `width`, `height`, `pixelFormat` and `data`, thereby removing the `alignment`, `subsample` and `pitch` parameters.\r\n \r\nIn the current implementation, I'm taking `flags` as an input but it can cause an error on user's side, hence I'm thinking of maybe removing that too from the function signature, giving it a 0 value by default, and change everything to - \r\n \r\n \r\n```\r\nenum PixelFormat: Int32 {\r\ncase ...\r\n}\r\nstruct ImageData {\r\n  let height: Int32\r\n  let width: Int32\r\n  let pixelFormat: PixelFormat\r\n  let data: [UInt8]\r\n}\r\nprivate func LoadJPEG(atPath path: String) -> ImageData? {\r\n}\r\n```\r\n \r\nYes, the Pixel Formats are specific to JPEG I believe. You can take a look at the formats [here](http://jpeg-turbo.dpldocs.info/libjpeg.turbojpeg.TJPF.html).\r\n \r\nWhat are your views on this? Should we give the user the ability to choose the alignment, pitch and flags, or hardcode them to default value as 0 inside function?"", 'comment_created': datetime.datetime(2020, 7, 28, 23, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 462022218, 'comment_body': ""I don't think that there is much value to providing the same API surface as TurboJPEG as this is a helper function.  If there is some reason that I am not seeing, that might be important.\r\n\r\nThe pixel formats are specific to TurboJPEG only in their return'ed value.  The enumeration is generic, and I think that we should have our enumeration as the same encodings are prevalent in other image formats.\r\n\r\n```swift\r\nenum PixelFormat: Int8 {\r\ncase RGB888,      // TJPF_RGB\r\ncase BGR888,      // TJPF_BGR\r\ncase RGBA8888, // TJPF_RGBA\r\ncase BGRA8888, // TJPF_BGRA\r\ncase ARGB8888, // TJPF_ARGB\r\ncase ABGR8888, // TJPF_ABGR\r\ncase RGBA8880, // TJPF_RGBX\r\ncase BGRA8880, // TJPF_BGRX\r\ncase ARGB0888, // TJPF_XRGB\r\ncase ABGR0888, // TJPF_XBGR\r\ncase GREY8,     // TJPF_GREY\r\n}\r\n```\r\n\r\nThe encodings from that link are explicitly 8-bit indexed gray for the greyscale, RBG/BGR 888, and ARGB/ABGR/RGBA/BGRA 8888.  The reason for actually explicitly special casing the ARGB/ABGR 0888 RGBA/BGRA 8880 is to actually see if we can take advantage of that when constructing the embedding and using a tensor with a lower rank (@BradLarson should know if that is ever useful).  In the case that the reduced rank tensor is not useful, we should drop the explicit sparse formats in favour of the 8888 equivalents.\r\n\r\nAs to the other fields - if we know that our usage doesn't require any adjustment to that, lets remove it from the initial implementation.  We can easily add in things in the future, removing them is more difficult."", 'comment_created': datetime.datetime(2020, 7, 29, 3, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 462353229, 'comment_body': ""Most image models are built around the assumption of a 3-channel input tensor (ignoring the alpha channel), but there are some that take advantage of that extra channel. I think it would make sense to have the ability to generate 3- or 4-channel image tensors based on whether the image on disk has a specified alpha channel.\r\n\r\nI agree with Saleem's suggestion that we should have a Swift-like interface to the loading and saving functions, rather than mirroring a C interface. Taking in a String filename and returning a tuple or struct of parameters (casting those parameters to Int instead of the less common Int32, possibly) would make this easier to use for people on the Swift side. I'd even go so far as to suggest that instead of a name like `tjJPEGLoadCompressedImage` we might prefer `loadCompressedJPEGImage`.\r\n\r\nWe probably also want these to `throw` errors if there are failures on reading or writing, which will be common for image loading and saving functions."", 'comment_created': datetime.datetime(2020, 7, 29, 14, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 462356206, 'comment_body': ""Is this intended as a unit test for saving and loading a file? If so, it might belong in a dedicated test target. Usually what I do for those is save a known set of bytes, then load them back in and verify they're the same. That might not work so well for a lossy JPEG compression, so we'd have to figure out how to test that things are approximately the same."", 'comment_created': datetime.datetime(2020, 7, 29, 14, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 471850248, 'comment_body': 'Can these not be `let` bindings?', 'comment_created': datetime.datetime(2020, 8, 18, 0, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 471850542, 'comment_body': 'This is better to write as:\r\n\r\n```swift\r\nguard FileManager.default.fileExists(atPath: path) else {\r\n  fatalError(""File does not exist at \\(path)."")\r\n}\r\nlet data: Data = FileManager.default.contents(atPath: path)!\r\n```', 'comment_created': datetime.datetime(2020, 8, 18, 0, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 471850597, 'comment_body': 'Is this not a bit extreme?  Why not `throw`?', 'comment_created': datetime.datetime(2020, 8, 18, 0, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 471852120, 'comment_body': 'This is not valid.  You cannot escape the `baseAddress`.  You need to do all the work inside the closure.\r\n\r\n```swift\r\nreturn data.withUnsafeBytes {\r\n  let data: UnsafeMutablePointer<UInt8> = UnsafeMutablePointer<UInt8>(mutating: $0.baseAddress!.assumingMemoryBound(to: UInt8.self))\r\n\r\n  var decompressor = tjInitDecompress()\r\n  defer { tjDestroy(decompressor) }\r\n\r\n  tjDecompressHeader(decompressor, data, jpegSize, &width, &height)\r\n\r\n  let buffer = tjAlloc(imageFormat.channelCount * width * height)\r\n  tjDecompress2(decompressor, data, UInt(jpegSize), buffer, width, 0, height, 0, imageFormat.rawValue, 0)\r\n\r\n  return ImageData(height: height, width: width, data: buffer!, imageFormat: imageFormat)\r\n}\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 0, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 471852437, 'comment_body': 'Use a `defer` block for this.', 'comment_created': datetime.datetime(2020, 8, 18, 0, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 471852452, 'comment_body': 'And this.', 'comment_created': datetime.datetime(2020, 8, 18, 0, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 471852575, 'comment_body': 'This is unnecessary after the `defer` block, because you know its valid for the duration of the function and cannot accidentally use it after free.', 'comment_created': datetime.datetime(2020, 8, 18, 0, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 471852602, 'comment_body': 'Similar.', 'comment_created': datetime.datetime(2020, 8, 18, 0, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 471852672, 'comment_body': 'Is this not a bit extreme?  Why not throw an error?', 'comment_created': datetime.datetime(2020, 8, 18, 0, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 471865148, 'comment_body': 'Okay. Will do', 'comment_created': datetime.datetime(2020, 8, 18, 1, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 471865262, 'comment_body': 'Okay.', 'comment_created': datetime.datetime(2020, 8, 18, 1, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 471870408, 'comment_body': 'Yes, I will change that.', 'comment_created': datetime.datetime(2020, 8, 18, 2, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 471871425, 'comment_body': 'Okay yes.', 'comment_created': datetime.datetime(2020, 8, 18, 2, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 471907443, 'comment_body': 'Bleeding white space', 'comment_created': datetime.datetime(2020, 8, 18, 4, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 471907538, 'comment_body': 'Extra white space after `path`', 'comment_created': datetime.datetime(2020, 8, 18, 4, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 472484381, 'comment_body': ""Presubmits are currently failing with\r\n\r\n```\r\n/swift-models/ImageLoader/JPEGImageOperations/JPEGImageOperations.swift:2:8: error: no such module 'TurboJPEG'\r\nimport TurboJPEG\r\n       ^\r\n```\r\n\r\nCould that be because the name here is `turbojpeg` instead of `TurboJPEG`? Not as familiar with CMake, but the other Swift module names use the same capitalization as when they are imported in code."", 'comment_created': datetime.datetime(2020, 8, 18, 20, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 472488555, 'comment_body': 'As part of the Google Swift style, we generally let type inference do the work for us in defining types, so you can safely leave off the `: UnsafeMutablePointer<UInt8>` at the left here. The line itself is a little long (the Google Style Guide specifies 100 character max widths), but if you have trouble wrapping it we can run this through swift-format to get things to the right length.', 'comment_created': datetime.datetime(2020, 8, 18, 20, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 472491318, 'comment_body': ""I'm concerned about the use of the `UnsafeMutablePointer` here and how the memory for this will be managed. When will `data` be deallocated, and who will be responsible for doing so? It looks like `tjAlloc()` creates the buffer within `LoadJPEG()`, but it is never deallocated in any of the code below. This could be a recipe for large memory leaks.\r\n\r\nInstead, would it make sense to treat ImageData as a class and contain `tjAlloc()` within its initializer, reference its buffer to copy data in, then use `tjDealloc()` in a `deinit` to abstract away memory management from the consumer of this API? "", 'comment_created': datetime.datetime(2020, 8, 18, 21, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 473068950, 'comment_body': 'Yes that makes sense, I had multiple approaches in mind for the interface, one of them was the one you mentioned. And it does makes sense to do better memory management.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 473075440, 'comment_body': 'Okay I will swift-format the file.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 473286542, 'comment_body': ""It was working earlier and I guess due to my cache I didn't get the error earlier. I am not able to figure out any difference in the cmakefiles in the working copy and this one. I don't think it's because of the naming. @compnerd if you could help me with this, it would be great."", 'comment_created': datetime.datetime(2020, 8, 19, 20, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 474438628, 'comment_body': ""@BradLarson @compnerd It's working but with using source directory, as you mentioned that it's better to use staging directory instead of that, I am not able to make it work with that.\r\nhttps://github.com/tensorflow/swift-models/blob/5674cadfc7acfe0df6ac400611f275e5647fe1e4/CMakeLists.txt#L93"", 'comment_created': datetime.datetime(2020, 8, 21, 6, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 474786428, 'comment_body': 'The `import` name must match the name in the module file (https://github.com/tensorflow/swift-models/pull/649/files?file-filters%5B%5D=.swift&file-filters%5B%5D=.txt#diff-203769a91fcabeff72f75c47ed68ce70R1).', 'comment_created': datetime.datetime(2020, 8, 21, 15, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 475006378, 'comment_body': 'yes Its working now :) ', 'comment_created': datetime.datetime(2020, 8, 21, 23, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 475919452, 'comment_body': 'We can probably drop the return value (and retVal), the throwable error should serve the same purpose.', 'comment_created': datetime.datetime(2020, 8, 24, 22, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 475921065, 'comment_body': 'Per [the Swift API Design Guidelines](https://swift.org/documentation/api-design-guidelines/#general-conventions), functions should start with a lowercase letter. Uppercase initial letters are only used for names of types and protocols. This comment can also apply to the `SaveJPEG()` function below. ', 'comment_created': datetime.datetime(2020, 8, 24, 22, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BradLarson', 'type': 'User'}, {'comment_id': 475969997, 'comment_body': 'Okay I will change it. ', 'comment_created': datetime.datetime(2020, 8, 24, 23, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 476012814, 'comment_body': 'I have made the changes.', 'comment_created': datetime.datetime(2020, 8, 25, 0, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 476047989, 'comment_body': 'This should be `PixelFormat` not `pixelFormats`.  Enumerations represent a single entity and should not be pluralized.', 'comment_created': datetime.datetime(2020, 8, 25, 1, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 476048784, 'comment_body': 'Hmm, can this not be:\r\n\r\n```\r\nfunc loadJPEG(atPath path: String, pixelFormat: PixelFormat) throws -> ImageData\r\n```\r\n\r\nThe function currently either returns an `ImageData` or will throw.', 'comment_created': datetime.datetime(2020, 8, 25, 1, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 476085795, 'comment_body': 'Okay I will change that.', 'comment_created': datetime.datetime(2020, 8, 25, 2, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 476085977, 'comment_body': 'Yes, thats better.', 'comment_created': datetime.datetime(2020, 8, 25, 2, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 476109665, 'comment_body': '```suggestion\r\npublic enum PixelFormat: Int {\r\n```\r\n\r\nIn general, with Swift, you should use `Int` unless you explicitly need it to be 32-bit in width for some reason.  Enumerated types should use PascalCase.', 'comment_created': datetime.datetime(2020, 8, 25, 3, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 476109762, 'comment_body': '```suggestion\r\n    var channelCount: Int {\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 3, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 476110392, 'comment_body': '```suggestion\r\n    let height: CInt\r\n    let width: CInt\r\n```\r\n\r\nI assume that these were `Int32` because they come from the C API?  If so, it is probably better to sugar this as `CInt`.  Otherwise, prefer `Int`.', 'comment_created': datetime.datetime(2020, 8, 25, 3, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 476110618, 'comment_body': '```suggestion\r\n    var width: CInt = 0\r\n    var height: CInt = 0\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 3, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 476111126, 'comment_body': '```suggestion\r\n    let outQual: CInt = 95\r\n```\r\n\r\nThis seems like an inout parameter, what do you think of renaming it to `quality`?', 'comment_created': datetime.datetime(2020, 8, 25, 3, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 476111341, 'comment_body': '```suggestion\r\n    var jpegSize: CUInt = 0\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 3, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'compnerd', 'type': 'User'}, {'comment_id': 476132594, 'comment_body': 'I renamed it.', 'comment_created': datetime.datetime(2020, 8, 25, 3, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ayushi2103', 'type': 'User'}, {'comment_id': 476229550, 'comment_body': '@compnerd, [`tjCompress2`](https://github.com/tensorflow/swift-models/blob/3af7ef2893fdb3d6e97cbd4fd47e95693557975e/ImageLoader/JPEGImageOperations/JPEGImageOperations.swift#L139) needs the pointer of `jpegSize`to be of type `UnsafeMutablePointer<UInt>` , whereas `CUnsignedInt` essentially is just `UInt32`. Hence, maybe here jpegSize should remain as UInt.', 'comment_created': datetime.datetime(2020, 8, 25, 7, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'F20170604', 'type': 'User'}]","[{'commit_sha': 'f185a08ffb483417381a19745d3341fa99f66bda', 'committer_username': 'ayushi2103', 'committer_name': 'Ayushi Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 1, 38, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c6eae9eda32393a4daefaa8317a679db76febdc', 'committer_username': 'ayushi2103', 'committer_name': 'Ayushi Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 1, 38, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84bb5b726904ef336ae3e910b1a4787363a0e9aa', 'committer_username': 'ayushi2103', 'committer_name': 'Ayushi Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 1, 38, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62adb4cc90d265843f0b16429d3dc564f9e7d51f', 'committer_username': 'ayushi2103', 'committer_name': 'Ayushi Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 1, 38, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0012f01896bab275e5158d073c979de198539688', 'committer_username': 'ayushi2103', 'committer_name': 'Ayushi Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 1, 38, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '048d0f9463a28d967eae5f087d3febf3b496fa77', 'committer_username': 'ayushi2103', 'committer_name': 'Ayushi Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 1, 38, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db045172d7299a3693a9f464099e142e21356186', 'committer_username': 'ayushi2103', 'committer_name': 'Ayushi Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 1, 38, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '482f53606828511dddc289a4c86fe18ad2c176f6', 'committer_username': 'ayushi2103', 'committer_name': 'Ayushi Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 1, 38, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b096adaba361597acb889d10f8e63e4907af83', 'committer_username': 'ayushi2103', 'committer_name': 'Ayushi Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 1, 38, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3b75486274e33b981afbc73a521ebd8e7f310c3', 'committer_username': 'ayushi2103', 'committer_name': 'Ayushi Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 1, 38, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5674cadfc7acfe0df6ac400611f275e5647fe1e4', 'committer_username': 'ayushi2103', 'committer_name': 'Ayushi Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 1, 38, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eed5280134ce90193fa994049e2e282d8ced7081', 'committer_username': 'ayushi2103', 'committer_name': 'Ayushi Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 1, 38, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aadcc3b93793977f1edfab109b434f59d8e5d795', 'committer_username': 'ayushi2103', 'committer_name': 'Ayushi Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 1, 38, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '655adc0e6e0a35dfeb9772c35ea88a97f9888c73', 'committer_username': 'ayushi2103', 'committer_name': 'Ayushi Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 1, 38, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3af7ef2893fdb3d6e97cbd4fd47e95693557975e', 'committer_username': 'ayushi2103', 'committer_name': 'Ayushi Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 1, 38, 9, tzinfo=datetime.timezone.utc)}]",Ayushi Tiwari,43102557,,User,,45,,19,38

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
130903312,swift-models,tensorflow/swift-models,Jupyter Notebook,146,645,45,67,554,46,38,1,"[{'id': 456667996, 'number': 649, 'closed': datetime.datetime(2020, 8, 26, 21, 57, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 25, 20, 55, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2768510.0, 'time_delta': '32 days, 1:01:50', 'additions': 206, 'deletions': 0, 'state': 'closed'}]"
