pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
663639963,Config screen & Parser,"## What have been done
- Registered the plugin section in the settings screen.
- Added an icon (Graduation cap).
- Added .vscode directory to .gitignore
- Implemented a Parser for .bib files: I was surprised to find out that [Citation-js](https://github.com/larsgw/citation.js) does not have typescript definitions and I was not able to get around this issue, so I was faced with two choices: either to write the definition files myself or to abandon the library and look for something else. After exhaustive research, I found this open source [converter tool](https://bibtex.online/). It converts from BibTeX to APA. I looked into the source code and found this [file](https://github.com/enric1994/bibtexonline/blob/master/js/BibTex.js). This file does exactly the job of the parser class. In a nutshell, this library is a port of the [PEAR Structures_BibTex parser](http://pear.php.net/package/Structures_BibTex) written in PHP. In order to make porting the parser into javascript easier, the author has made use of many phpjs functions, which slightly puts a performance overhead but it is worth sacrificing and it can be improved later along the way. The library is meant to work in the browser, so I added a line at the end that just exports the main class: `module.exports = { BibTex };` just to make it compatible with other typescript modules. The library is used [here](https://github.com/enric1994/bibtexonline/blob/master/js/core.js) to parse the BibTeX data and also there are several useful functions to show APA in HTML format and convert it to other formats as well.

## Screenshots
![Config Screen](https://i.ibb.co/Jj521QF/Screenshot-from-2021-06-07-16-40-25.png)",True,1,https://api.github.com/repos/joplin/plugin-bibtex/pulls/1,https://github.com/joplin/plugin-bibtex/pull/1,closed,2016,6070,12,7,10,1,1,0,[{'name': 'enhancement'}],2021-06-07 14:53:38+00:00,2021-06-08 10:44:01+00:00,71423.0,19:50:23,"[{'comment_id': 646684837, 'comment_body': 'This method is deprecated. Please use registerSettings.', 'comment_created': datetime.datetime(2021, 6, 7, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}]","[{'commit_sha': 'de094fee53a0493acff2d7c023130a690da5b078', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cfd14c297a24f3e1a82ae6182e933aea848bb8e', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3ef262bb0233a89cd42d8e5a0e9dd2db7b6bf80', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8731bf2d8ff90ce3247e4b436290766cd327a048', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62dfdbe7017d34d3343846042f53f864c69dd52c', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d6b32f1f7bd55202111dddd8441f8559fafcdd4', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35ea0680f3b98e2a276cccab1851161c80a517b4', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
667206759,Parser implementation & Testing,"## What has been done
- Setup testing environment using Jest.
- Integrate citation-js: I contacted the maintainer of the library on Gitter and he helped me fix the previously mentioned [bug](https://github.com/joplin/plugin-bibtex/pull/1). It turns out that WebPack somehow didn't bundle JSON files and this is what caused the problem. I solved the problem by including the .json extension in `webpack.config.js`. The downside of this workaround is that I will have to update the Webpack config file every time I update the plugin framework. Also, I had to include these lines in `packages.json`: `""browser"": {""child_process"": false}`.
- Added some test cases for the Parser: merely checking for the correctness of some fields and asserting the Parser throws an Error when receiving invalid data.
- Updated README: included a section for screenshots and testing.",True,2,https://api.github.com/repos/joplin/plugin-bibtex/pulls/2,https://github.com/joplin/plugin-bibtex/pull/2,closed,3157,1910,8,4,1,6,0,0,[],2021-06-10 18:45:44+00:00,2021-06-11 22:16:01+00:00,99017.0,"1 day, 3:30:17","[{'comment_id': 650164640, 'comment_body': 'Do you need .json in here, and why?', 'comment_created': datetime.datetime(2021, 6, 11, 17, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 650164690, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2021, 6, 11, 17, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 650231265, 'comment_body': ""The original problem was happening because the library needs to import some JSON files and Webpack didn't resolve them for some reason, so adding `.json` fixes the problem."", 'comment_created': datetime.datetime(2021, 6, 11, 19, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 650240787, 'comment_body': ""Right, that makes sense. So does it mean that somewhere in the library code there's a `require('./somefile.json')`?"", 'comment_created': datetime.datetime(2021, 6, 11, 20, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 650249176, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2021, 6, 11, 20, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 650290225, 'comment_body': ""Ok that's good to know. I'll add this to the default config."", 'comment_created': datetime.datetime(2021, 6, 11, 22, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}]","[{'commit_sha': 'e65bd86ba4f2aad95e29c336581e557364dfc760', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea5ca0e9acf77681e9bdd8e47d70973439f3055e', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fab8fea9f4a9a84dece5a1fd304cc8018b84e07', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad95d3d8baf41212883877cd5d252408088e9934', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
669132927,Data Store Implementation and Testing,"## What has been done
- Initial Implementation of DataStore with three methods:
    - `setReferences(any[]): void`
    - `getAllReferences (): any[]`
    - `search (string): any[]`
- Added some test cases
- Moved test data into separate files (for `Parser` and `DataStore`)

## Questions
- Do I keep the `DataStore` as it is (with static methods) or turn it into a singleton instead?
- In the methods `setReferences()` and `getAllReferences()`, I make a deep copy of every object I'm processing in order to not cause unexpected behavior outside the class (more details are in the comments in the class). My question is: Am I over-engineering things here or this is something nice to have? It is worth noticing that although this method is safer, or at least this is what I think, it has a performance overhead.

## What's next
- Create an interface to formally represent the structure of the data, which will help in many ways as stated previously.",True,3,https://api.github.com/repos/joplin/plugin-bibtex/pulls/3,https://github.com/joplin/plugin-bibtex/pull/3,closed,162,27,9,12,4,8,0,0,[],2021-06-13 23:42:43+00:00,2021-06-15 19:34:07+00:00,157884.0,"1 day, 19:51:24","[{'comment_id': 651970693, 'comment_body': ""Hmm, I think you're indeed over-engineering here, and even worse you're not over-engineering enough :-) Because if a reference object is modified, your data will also be modified. If you want to prevent that you'd have to deep clone each reference object.\r\n\r\nIf you really want to deal with immutable data, perhaps you should use a library from the start such as immutable.js or immer (used by Joplin). That's a reasonable approach and probably more correct since, as you can see, even though you're trying to go for immutable data, you're making a mistake and the data is not immutable. The lib would prevent such mistakes by freezing the data.\r\n\r\nIt's up to you I think. It can be interesting to learn about this, but perhaps not necessary for this project."", 'comment_created': datetime.datetime(2021, 6, 15, 16, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 651975403, 'comment_body': ""I wouldn't bother with adding aliases especially since it means you need to process all the data after parsing, even if it turns out the date is not needed.\r\n\r\nInstead you could have a utility function that takes a reference and returns the date in a more usable format. I'd just return an actual Date object, which can then be easily formatted by the calling code. What do you think?"", 'comment_created': datetime.datetime(2021, 6, 15, 16, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 652017321, 'comment_body': ""- Regarding immutability, I didn't know about that before and indeed it is gonna be interesting to learn about. However, I agree with you that I'm not even over-engineering enough so I should just make it mutable.\r\n- For aliases and date, I agree I should abstract the logic for aliasing and move it into another function that returns a native `Date` Object. Doing so will improve readability and maintenance and prevent the code in the `Parser` to get populated with such details."", 'comment_created': datetime.datetime(2021, 6, 15, 17, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 652058860, 'comment_body': ""For variables that don't change you should use `const`, as it can avoid some mistakes."", 'comment_created': datetime.datetime(2021, 6, 15, 18, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 652059389, 'comment_body': 'Here as well, the date is never modified, which is good, so you can make it const.', 'comment_created': datetime.datetime(2021, 6, 15, 18, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 652059980, 'comment_body': ""Shouldn't you assign the day too?"", 'comment_created': datetime.datetime(2021, 6, 15, 18, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 652069668, 'comment_body': ""For the day, I didn't find a method `setDay()` but it can be set using the constructor, so I can do some workarounds."", 'comment_created': datetime.datetime(2021, 6, 15, 18, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 652072500, 'comment_body': 'I believe that would be `setDate()`', 'comment_created': datetime.datetime(2021, 6, 15, 19, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}]","[{'commit_sha': '2cd26c5f9138c82a1ca68ea813c2547cad299858', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af8dcb155209b32a5710f6dd5c950a946467a2f0', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0aa123e47bbc3a0cad5dcf09b60aa574abbffa93', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71067e456fc9e4150b8b65ab667dd08d08824e8d', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd069a4518babd19e43d1a06848bfb7204fea47bd', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5c6e145ae7c7df18ce2cb03053e11e7b57c01fd', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68fd937187ce0991ba3c65f4978645a4a3936276', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8290b5d6acb64cc587aa075aa82b3d2cbc2f4afc', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f85fb0b47567f6bd6ac1039208315c460d80d797', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c34f53f63d234b83cc5c3cbc27d1fd042161c5a8', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd09350dce719ea139cc2a490956b58cd93bfb872', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc13ab88cc06b787aac4e82591e0b895f718230d', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
669132927,Data Store Implementation and Testing,"## What has been done
- Initial Implementation of DataStore with three methods:
    - `setReferences(any[]): void`
    - `getAllReferences (): any[]`
    - `search (string): any[]`
- Added some test cases
- Moved test data into separate files (for `Parser` and `DataStore`)

## Questions
- Do I keep the `DataStore` as it is (with static methods) or turn it into a singleton instead?
- In the methods `setReferences()` and `getAllReferences()`, I make a deep copy of every object I'm processing in order to not cause unexpected behavior outside the class (more details are in the comments in the class). My question is: Am I over-engineering things here or this is something nice to have? It is worth noticing that although this method is safer, or at least this is what I think, it has a performance overhead.

## What's next
- Create an interface to formally represent the structure of the data, which will help in many ways as stated previously.",True,3,https://api.github.com/repos/joplin/plugin-bibtex/pulls/3,https://github.com/joplin/plugin-bibtex/pull/3,closed,162,27,9,12,4,8,0,0,[],2021-06-13 23:42:43+00:00,2021-06-15 19:34:07+00:00,157884.0,"1 day, 19:51:24","[{'comment_id': 651970693, 'comment_body': ""Hmm, I think you're indeed over-engineering here, and even worse you're not over-engineering enough :-) Because if a reference object is modified, your data will also be modified. If you want to prevent that you'd have to deep clone each reference object.\r\n\r\nIf you really want to deal with immutable data, perhaps you should use a library from the start such as immutable.js or immer (used by Joplin). That's a reasonable approach and probably more correct since, as you can see, even though you're trying to go for immutable data, you're making a mistake and the data is not immutable. The lib would prevent such mistakes by freezing the data.\r\n\r\nIt's up to you I think. It can be interesting to learn about this, but perhaps not necessary for this project."", 'comment_created': datetime.datetime(2021, 6, 15, 16, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 651975403, 'comment_body': ""I wouldn't bother with adding aliases especially since it means you need to process all the data after parsing, even if it turns out the date is not needed.\r\n\r\nInstead you could have a utility function that takes a reference and returns the date in a more usable format. I'd just return an actual Date object, which can then be easily formatted by the calling code. What do you think?"", 'comment_created': datetime.datetime(2021, 6, 15, 16, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 652017321, 'comment_body': ""- Regarding immutability, I didn't know about that before and indeed it is gonna be interesting to learn about. However, I agree with you that I'm not even over-engineering enough so I should just make it mutable.\r\n- For aliases and date, I agree I should abstract the logic for aliasing and move it into another function that returns a native `Date` Object. Doing so will improve readability and maintenance and prevent the code in the `Parser` to get populated with such details."", 'comment_created': datetime.datetime(2021, 6, 15, 17, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 652058860, 'comment_body': ""For variables that don't change you should use `const`, as it can avoid some mistakes."", 'comment_created': datetime.datetime(2021, 6, 15, 18, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 652059389, 'comment_body': 'Here as well, the date is never modified, which is good, so you can make it const.', 'comment_created': datetime.datetime(2021, 6, 15, 18, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 652059980, 'comment_body': ""Shouldn't you assign the day too?"", 'comment_created': datetime.datetime(2021, 6, 15, 18, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 652069668, 'comment_body': ""For the day, I didn't find a method `setDay()` but it can be set using the constructor, so I can do some workarounds."", 'comment_created': datetime.datetime(2021, 6, 15, 18, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 652072500, 'comment_body': 'I believe that would be `setDate()`', 'comment_created': datetime.datetime(2021, 6, 15, 19, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}]","[{'commit_sha': '2cd26c5f9138c82a1ca68ea813c2547cad299858', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af8dcb155209b32a5710f6dd5c950a946467a2f0', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0aa123e47bbc3a0cad5dcf09b60aa574abbffa93', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71067e456fc9e4150b8b65ab667dd08d08824e8d', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd069a4518babd19e43d1a06848bfb7204fea47bd', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5c6e145ae7c7df18ce2cb03053e11e7b57c01fd', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68fd937187ce0991ba3c65f4978645a4a3936276', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8290b5d6acb64cc587aa075aa82b3d2cbc2f4afc', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f85fb0b47567f6bd6ac1039208315c460d80d797', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c34f53f63d234b83cc5c3cbc27d1fd042161c5a8', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd09350dce719ea139cc2a490956b58cd93bfb872', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc13ab88cc06b787aac4e82591e0b895f718230d', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
672802232,Citation popup: display locally stored references,"## What has been done
- Register `addBibTeXReference` Command and bind it to a toolbar button.
- Abstract string constants used in the plugin into a separate file `constants.ts`.
- Parse the bibtex file and store results upon executing the command.
- Enable the citation popup to show the list of references.

## Screenshots

Image of the toolbar button
![Toolbar button](https://i.ibb.co/DQbhwGL/Screenshot-from-2021-06-17-18-15-06.png)

Image of the citation popup
![Citation Popup](https://i.ibb.co/mFf550W/Screenshot-from-2021-06-17-18-16-07.png)",True,4,https://api.github.com/repos/joplin/plugin-bibtex/pulls/4,https://github.com/joplin/plugin-bibtex/pull/4,closed,187,15,9,12,1,10,0,0,[],2021-06-17 16:22:00+00:00,2021-06-17 21:26:39+00:00,18279.0,5:04:39,"[{'comment_id': 653825814, 'comment_body': ""You should always use the fs async functions, otherwise you freeze the process while the function runs. It might be fine for a few calls here and there but to be future proof it's always best to use async functions.\r\n\r\nWith promises, the code isn't even more complex - for example here it would be `await fs.access()`."", 'comment_created': datetime.datetime(2021, 6, 17, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 653826284, 'comment_body': ""you don't need any of these checks. Just move the `readFile` call in the try/catch block (you should do that anyway), and if there's any error you'll catch it there."", 'comment_created': datetime.datetime(2021, 6, 17, 18, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 653828705, 'comment_body': 'You need to escape the title.', 'comment_created': datetime.datetime(2021, 6, 17, 18, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 653829966, 'comment_body': '`const options:Record<string, SettingItem>`', 'comment_created': datetime.datetime(2021, 6, 17, 18, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 653830753, 'comment_body': ""I don't think it's a good pattern to import all the constants in all the files. If you import only what you need, it will make the code more readable and scalable. `import { PLUGIN_TOOLBAR_BUTTON_ID } from '../constants'`"", 'comment_created': datetime.datetime(2021, 6, 17, 18, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 653846664, 'comment_body': 'I thought this might be useful for showing descriptive error messages for the user. Am I missing something?', 'comment_created': datetime.datetime(2021, 6, 17, 18, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 653862257, 'comment_body': ""Sorry, but I don't fully understand what that means. Do you mean that I need to print another attribute of the reference instead of the title ?"", 'comment_created': datetime.datetime(2021, 6, 17, 19, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 653868543, 'comment_body': ""You don't need that level of detail for something that's very unlikely to happen. But even then you can always give a descriptive error message in the catch block - `Could not open file: ${filePath}: ${error.message}`"", 'comment_created': datetime.datetime(2021, 6, 17, 19, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 653869741, 'comment_body': ""If you add text into HTML, you need to escape it. Otherwise, for example, if the title contains an HTML tag, you'll end up with broken HTML. I usually use this package for this: https://www.npmjs.com/package/html-entities"", 'comment_created': datetime.datetime(2021, 6, 17, 19, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 653871385, 'comment_body': 'Ok, I understand now.', 'comment_created': datetime.datetime(2021, 6, 17, 19, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}]","[{'commit_sha': '666c5a55b45c363ec78223ed82170166892739f6', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '627fb21c824d1c0a5267d44d029b344ebd7cc147', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c14de481d54f56dc73a62d3f4f20f96fbdc3e55d', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8ff373229dd029d37b6a960b656050aea6df0cd', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aea2e51c283f211436d5a9fe2c48dc2c05d9fc3b', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09482305f70208032875d71c3229076edaf6bd7b', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '938f0b900a9559a2f066b1b93a93356c09d97117', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbc1777fdf8d572f42fc4ba87fe94412dfcb9fe7', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b613f39c0459574ef927b38073dc21a0c8de062', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b51cbbc820446eb132a0ac6e96536474f21fe442', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daa700a96473daf2a164a0d048a55f3547a9fb09', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6ce9b08d70189d8ca300e93d2d415027ca5c503', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
674856520,Insert selected reference into the note content,"## What has been done
- Enable the user to select a reference from the citation popup by clicking.
- Abstract the styling into a separate file: view.css
- Add the method `getReferenceById()` in the `Data Store` class
- Format reference objects into valid markdown URLs using a utility `formatReference`
- Insert the selected reference into the note content

## Screenshots
A slight dark background appears on the selected reference and a darker one appears when hovering.
![Selected notes](https://i.ibb.co/smQwg1w/Screenshot-from-2021-06-21-22-05-53.png)

References after being added to the note content.
![Added references](https://i.ibb.co/SKWshrb/Screenshot-from-2021-06-21-22-06-16.png)

## Demo
![BibTeX Plugin Demo](https://i.ibb.co/TWrHVqF/Peek-2021-06-21-22-09.gif)",True,5,https://api.github.com/repos/joplin/plugin-bibtex/pulls/5,https://github.com/joplin/plugin-bibtex/pull/5,closed,229,38,15,14,5,12,0,0,[],2021-06-21 20:27:09+00:00,2021-06-22 12:51:20+00:00,59051.0,16:24:11,"[{'comment_id': 656019771, 'comment_body': 'Is the year always present on the references? How about the author? In general what properties are required? You should make sure you handle such missing properties since the reference files could be quite random.', 'comment_created': datetime.datetime(2021, 6, 22, 8, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 656020560, 'comment_body': 'Please use `await readFile`. Tests are processed in parallel and if one of them use sync methods it might block the other tests in the meantime.', 'comment_created': datetime.datetime(2021, 6, 22, 8, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 656020688, 'comment_body': 'await readFile()', 'comment_created': datetime.datetime(2021, 6, 22, 8, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 656023150, 'comment_body': 'Please use brackets to improve readability and avoid errors [like this](https://embeddedgurus.com/barr-code/2014/03/apples-gotofail-ssl-security-bug-was-easily-preventable/).', 'comment_created': datetime.datetime(2021, 6, 22, 9, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 656023819, 'comment_body': 'ref.DOI should be escaped. Please look for ""encodeURI"" which I think is what you need for URLs.\r\n\r\nSame for title and author which should be escaped too.', 'comment_created': datetime.datetime(2021, 6, 22, 9, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 656024732, 'comment_body': 'Please escape the link title and URL. Check in Joplin source code markdownUtils::escapeTitleText and markdownUtils::escapeLinkUrl. I guess you can copy and paste the code from over there.', 'comment_created': datetime.datetime(2021, 6, 22, 9, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 656025269, 'comment_body': 'res => ref', 'comment_created': datetime.datetime(2021, 6, 22, 9, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 656064780, 'comment_body': 'I looked [here](http://bib-it.sourceforge.net/help/fieldsAndEntryTypes.php) and it says that most entries require a title, author, and a year. However, I will need to handle the cases where there is no author or year.', 'comment_created': datetime.datetime(2021, 6, 22, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 656139457, 'comment_body': ""Please check the difference between encodeURI and encodeURIComponent: https://love2dev.com/blog/whats-the-difference-between-encodeuri-and-encodeuricomponent/\r\n\r\nIn this case it should be encodeURIComponent because it's a query parameter."", 'comment_created': datetime.datetime(2021, 6, 22, 11, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 656139550, 'comment_body': 'Needs encodeURIComponent on ref.title', 'comment_created': datetime.datetime(2021, 6, 22, 11, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 656140326, 'comment_body': 'You should construct the complete query parameter first, then append it to the url using encodeURIComponent.', 'comment_created': datetime.datetime(2021, 6, 22, 11, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 656148009, 'comment_body': 'Got it', 'comment_created': datetime.datetime(2021, 6, 22, 11, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}]","[{'commit_sha': 'cba55420ddcde39c5c9410e9bc829f22bb0ea071', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26ba80fa7aace3dd075732c468f1225b7323a70d', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f89f02607c36bd3e072059cbd4c277c83b171bb3', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f319d65ee2678a8d49d902746e9cfc31fdbbae7', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf77d38907c6a5cc2ee59a2778822b7be403f5d8', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49996ff7cc12732d3cbb94c28ed32c1afece106e', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e79bb7735dec304fa10515f00cd715808cdc802a', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ce9d23eee5c58bf7020fa72ba90fef9b7e700c8', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d3991455d2cee812381ca66dc5a016bb597c582', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55e5c81d9c9ef1ece408128ae4df3f6cd759433e', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '088390dcaffd7a6e8b928ec7145d3d14f75b7afb', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cf0edaa4f36c8bcd2f8b1d6ec2ca92926076142', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45f540d0cf43c5dcf02d6961f1954035206e886a', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1f1df9f707c62d0fc59ce299d487d0a7e60eabd', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
677277585,Fix parsing error,"- Solved the issue of inconsistent error handling
- Improve error message structure when parsing",True,7,https://api.github.com/repos/joplin/plugin-bibtex/pulls/7,https://github.com/joplin/plugin-bibtex/pull/7,closed,9,7,3,4,1,3,0,0,[],2021-06-24 16:48:00+00:00,2021-06-25 08:14:32+00:00,55592.0,15:26:32,"[{'comment_id': 658121088, 'comment_body': 'So that the message box content is a bit more readable, could you add two new lines between ERROR_PARSING_FAILED and e.message?', 'comment_created': datetime.datetime(2021, 6, 24, 16, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 658121942, 'comment_body': '""Error while parsing BibTex file:"", so that users know it\'s about their file.', 'comment_created': datetime.datetime(2021, 6, 24, 16, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 658124112, 'comment_body': 'Got it', 'comment_created': datetime.datetime(2021, 6, 24, 16, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}]","[{'commit_sha': '13ad7c2f349c198260036394b9b0cf45b3f7147d', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50941f3e687d5373c42692eeda434348ee6462e5', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abf28c245806a709c7effc82b1d2e3ce71abd772', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '556910f3ca3b6653553ce82f69761a9188d4644c', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
678541995,Adjust the size of the citation popup according to content,"- Set the width of the citation popup to be `900px`
- Show a scroll bar in case of content overflow ",True,9,https://api.github.com/repos/joplin/plugin-bibtex/pulls/9,https://github.com/joplin/plugin-bibtex/pull/9,closed,9,7,1,1,0,0,0,0,[],2021-06-27 16:10:53+00:00,2021-06-28 11:21:35+00:00,69042.0,19:10:42,[],"[{'commit_sha': '43d3d99cc0ae369096fac55ff655b93c9ee0dc84', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
678556052,"fix #10: Prevent showing ""Reference not found"" when refusing to select any reference","This is a fix to issue #10

## What has been done
- Make `showCitationPopup()` return an empty string when there is no selected reference (previously it was returning undefined when encountering such situation).
- Check `if (referenceId === """") return;` in `add-bibtex-reference.command.ts`",True,11,https://api.github.com/repos/joplin/plugin-bibtex/pulls/11,https://github.com/joplin/plugin-bibtex/pull/11,closed,6,3,2,1,1,0,0,0,[],2021-06-27 17:49:32+00:00,2021-06-28 11:22:40+00:00,63188.0,17:33:08,[],"[{'commit_sha': 'daa61e9514d69188d5bc1f1ba0b70c225e49c3d7', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
680938482,Citation Popup: Search through the list of references using a given query,"## What has been done
- Pass reference data as JSON to the citation popup.
- Integrate [AutoComplete.js](https://tarekraafat.github.io/autoComplete.js/): I found it to be more suitable for the task than [Typeahead.js](https://twitter.github.io/typeahead.js/). In addition, it has a lot of customizations with zero dependencies.
- Enable selecting references from search results.
- Enable removing references from the selected area.
- Prevent showing already-selected references in the search results.
- Return array of selected references and insert them into the note body.

## Demo
![Demo](https://i.ibb.co/kHLKgmz/DEMO-SEARCH-CITATION-POPUP.gif)

## Bugs
The following bugs still need to be solved:
- Inserted references often don't go to the desired location in the note body; some of them go to the desired location and the rest is inserted at the top of the note body.
- Enter key does the functionality of the ""OK"" button; It should select the highlighted reference in the search results.",True,12,https://api.github.com/repos/joplin/plugin-bibtex/pulls/12,https://github.com/joplin/plugin-bibtex/pull/12,closed,246,78,8,26,9,22,0,0,[],2021-06-30 14:38:49+00:00,2021-07-03 07:27:16+00:00,233307.0,"2 days, 16:48:27","[{'comment_id': 662150546, 'comment_body': 'If you want to avoid issues with the cursor being at the wrong position, it would be better not to call insertText in a loop. Instead, you could build up the string you want to insert (by concatenating the formatted references), then insert this in one command.', 'comment_created': datetime.datetime(2021, 7, 1, 9, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 662153094, 'comment_body': 'You need to escape using html entities because the JSON string might contain special characters that would break the div tag.', 'comment_created': datetime.datetime(2021, 7, 1, 9, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 662153774, 'comment_body': ""You shouldn't encode individual fields - the whole JSON string needs to be encoded. That will also make it easier on the other side as you won't have to wonder what field was or wasn't encoded."", 'comment_created': datetime.datetime(2021, 7, 1, 9, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 662154927, 'comment_body': ""Any reason why you need to convert the data into a map? I think you could work directly with the `refs` object? I'm saying this because if the data is large you've just doubled the memory usage."", 'comment_created': datetime.datetime(2021, 7, 1, 9, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 662157623, 'comment_body': 'Manipulating DOM nodes like this and trying to keep that in sync with the state is going to be unmaintainable over the long term. Is it not possible to use a lib to do that for you?', 'comment_created': datetime.datetime(2021, 7, 1, 10, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 662160402, 'comment_body': ""Wow, that's a very good idea"", 'comment_created': datetime.datetime(2021, 7, 1, 10, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 662197464, 'comment_body': 'My point is that it allows for fast lookups. For example, when I want to get the reference represented by a given id, I look it up from the map.', 'comment_created': datetime.datetime(2021, 7, 1, 11, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 662428635, 'comment_body': ""ID needs to be escaped (even if now you know it's not needed, it's always safer to do so, for example if later on the ID format is changed)."", 'comment_created': datetime.datetime(2021, 7, 1, 16, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 662429167, 'comment_body': 'Title needs to be escaped.', 'comment_created': datetime.datetime(2021, 7, 1, 16, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 662430091, 'comment_body': ""What's the difference between using an object, and using a map in terms of performance?"", 'comment_created': datetime.datetime(2021, 7, 1, 16, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 662431171, 'comment_body': ""That's a good idea to do all the rendering in one place like this. Ideally a lib like React would be better but I can agree it's a bit overkill at this stage."", 'comment_created': datetime.datetime(2021, 7, 1, 16, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 662490857, 'comment_body': ""Is it necessary? I escape the JSON data before passing it to the view. Isn't that enough?"", 'comment_created': datetime.datetime(2021, 7, 1, 17, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 662608915, 'comment_body': 'escape', 'comment_created': datetime.datetime(2021, 7, 1, 21, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 662616072, 'comment_body': 'Yes, escaping variables is not something optional to be added later on. And I don\'t see what you mean by escaping the JSON data before passing it to the view\r\n\r\n- First, if these properties are already escaped, then they are not named correctly. It\'s not just an ""id"" it\'s an ""idHtml"" - it\'s HTML code basically so it can\'t be used in an SQL query for example or other context that would need different escaping (see [Making Wrong Code Look Wrong](https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/) for good ideas on how to name variables)\r\n\r\n- Secondly, you should only escape data at the point where it is needed. Pre-escaping data is a recipe for accidentally double-escaping, and often these issues are not obvious during development, only when people start importing all kind of unexpected data.\r\n\r\nSomehow we keep going back to these escaping issues, so please try to remember to always escape data that you insert into strings. Perhaps do some reading about the topic to better understand how important it is. But to sum up:\r\n\r\n- If you insert the data into HTML, use HTML entities encoding\r\n\r\n- If you insert into a URL, use encodeURIComponent or encodeURI (you have the article where they explain the difference)', 'comment_created': datetime.datetime(2021, 7, 1, 21, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 663222321, 'comment_body': ""You should poll for what you need instead, because this hack might work on some computers but not others, if they are too slow for example. \r\n\r\n```js\r\nconst intervalId = setInterval(() => {\r\n\tif (typeof he !== 'undefined') {\r\n\t\tclearInterval(intervalId);\r\n\t\tmain();\r\n\t}\r\n}, 500);\r\n```"", 'comment_created': datetime.datetime(2021, 7, 2, 19, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 663222801, 'comment_body': ""By the way it's normal scripts might not be immediately available. This is like a web page and everything is loaded asynchronously."", 'comment_created': datetime.datetime(2021, 7, 2, 19, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 663223104, 'comment_body': ""Is that again for optimisation purposes? Because I'm certain it makes no difference. If you need a ref by ID, just use `refs.find(r => r.id === refId)`. Duplicated data is always a bad idea because it needs to be kept in sync."", 'comment_created': datetime.datetime(2021, 7, 2, 19, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 663224801, 'comment_body': ""Shouldn't you escape this too?"", 'comment_created': datetime.datetime(2021, 7, 2, 20, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 663226392, 'comment_body': ""I don't think you need to decode here - textContent is plain text, not HTML."", 'comment_created': datetime.datetime(2021, 7, 2, 20, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 663228237, 'comment_body': 'By the way, did you check how it works with a 1GB file?', 'comment_created': datetime.datetime(2021, 7, 2, 20, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 663243390, 'comment_body': 'OH, I forgot to mention that `data.match` is a DOM element that\'s responsible for highlighting the parts of the title that match the search query, so we can assume that it does escaping by default (I guess because it uses `textContent` internally). Also, it didn\'t break when I used the title \'This is an <art"".', 'comment_created': datetime.datetime(2021, 7, 2, 20, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 663247621, 'comment_body': 'Got it', 'comment_created': datetime.datetime(2021, 7, 2, 21, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}]","[{'commit_sha': '877b3933541b7bc517745bc7ca48f2834ee8173d', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7166a8c048d8521735df5a181f39cc1200d5f8ed', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e35a1f4447e97b8bfc9484113bc0138d6152a307', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1dd32411795c5ae65511a130ece0c28b154f0c7', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5e132b63e86eb7bcecfbc6a1cf6278dcf81d1df', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd27f5ea6ca0002222b4daa6afd3e588066d7dd7', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21eab6b1d7228de201a0eb3de283e05b30e7ef4a', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae00a0aaf89704a92e5d90ac37daf0bae09a8f4f', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c0384efd6afe16fda24f944ccc6dc62db8a0001', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '737b99416cb04a6e949a0dc4af5109e1b1708ddc', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32678331923e8a7436041672816146b280ce2587', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67a2284c26a2504075106d9dd91bd197329f3be8', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c17febbf04093fca7122b10a73f7776696d6fd88', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b5f83d41759819970070e37f37a2584e65c0ed5', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1c481e3aa561520a2b8a3f27a4149c47ca19402', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30a575a52424f6370838934e1c1a1d34d281421e', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '271e127c6c4b4949b81dc23f9c307fea6405fd28', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62ba45bf799c0509245c57d8ed40e6b1b28d1f6c', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4566743bc80c1aac1c1501dbe07effc33561d9d', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ba972c2f3df6d89602445ac4a078a8ac988883a', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7563421a303e8a03870d1c83dfb442992811e553', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7df59c526a606f405cc1e77fd11f29557ad8e202', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '786257a7026094b64e23826be01970ff615000a8', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a935bd6c4d3670687b3b034f3a6b85da3c321f51', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '270b83a32d6836c4c3c8644d18b369c6ed861ff4', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bb8fa759b7bc253967f9595056ee9f5bee45dac', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
686432646,Render a full list of references at the bottom of the note viewer,"## What has been done
- Register a markdown-it content script to render references at the bottom of the note viewer in APA format.
- Render both inline and block-level references.
- Parse and store references on startup
- Prevent rendering duplicate references
- Use the citekey as the display key of references. (Previously I used a combination of author + year of publication).",True,16,https://api.github.com/repos/joplin/plugin-bibtex/pulls/16,https://github.com/joplin/plugin-bibtex/pull/16,closed,210,12,10,12,3,15,0,0,[],2021-07-09 02:00:48+00:00,2021-07-10 13:34:00+00:00,127992.0,"1 day, 11:33:12","[{'comment_id': 667209258, 'comment_body': ""I seem to remember you were previously displaying an error with the line number when the file could not be parsed. Was that removed? In general I think the user should be informed if their file can't be loaded. Can you use `alert()` here for example? Or `joplin.views.dialogs.showMessage`?"", 'comment_created': datetime.datetime(2021, 7, 9, 21, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 667209796, 'comment_body': ""You're often converting arrays to set and the other way around. Is there any reason for that? Isn't this code pretty much the same as `IDS = IDS`?"", 'comment_created': datetime.datetime(2021, 7, 9, 21, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 667210383, 'comment_body': ""It should be `context`. The `_` is only there when the variable is not actually used (it's to silence the TypeScript error)."", 'comment_created': datetime.datetime(2021, 7, 9, 21, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 667213022, 'comment_body': ""Any reason you used a style tag for this? Wouldn't it be possible to wrap your script string simply in a `<script>` tag? I think that would be more proper and perhaps more reliable too."", 'comment_created': datetime.datetime(2021, 7, 9, 21, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 667226805, 'comment_body': ""> Isn't this code pretty much the same as `IDS = IDS`?\r\n\r\nNot exactly. Previously, if there are multiple occurrences of the same reference, it will be rendered twice at the bottom."", 'comment_created': datetime.datetime(2021, 7, 9, 21, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 667226884, 'comment_body': 'Got it', 'comment_created': datetime.datetime(2021, 7, 9, 21, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 667230492, 'comment_body': ""> Wouldn't it be possible to wrap your script string simply in a <script> tag? I think that would be more proper and perhaps more reliable too.\r\n\r\nI tried that approach as it seems to be the most natural but for, some reason, it does not seem to work."", 'comment_created': datetime.datetime(2021, 7, 9, 21, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 667329378, 'comment_body': ""Ok I see. It's not very obvious that it's doing this so maybe add a comment?"", 'comment_created': datetime.datetime(2021, 7, 10, 11, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 667330182, 'comment_body': 'Ok, I think this is fragile code that may break at some point or even work in some operating systems but not others. I think it didn\'t work with the script tag because you need to wait till the ""webviewApi"" is available. For this you can use the same pattern - just keep checking `typeof webviewApi` until it becomes available, then run your initialisation code.', 'comment_created': datetime.datetime(2021, 7, 10, 11, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 667330262, 'comment_body': 'Instead of setting innerHTML multiple times, which is slow, you could build up the HTML string in the loop, then set the inner HTML once at the end.', 'comment_created': datetime.datetime(2021, 7, 10, 11, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 667331795, 'comment_body': 'My bad, I keep doing these silly mistakes :smiley: ', 'comment_created': datetime.datetime(2021, 7, 10, 12, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 667332944, 'comment_body': 'Whatever I put in the script tag does not get executed.', 'comment_created': datetime.datetime(2021, 7, 10, 12, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 667335510, 'comment_body': ""I'm wondering if you're looking at all this the wrong way around. The plugin sets the HTML, and has all the references, so instead of adding a script that post messages, can't you directly set the HTML to the correct value from the plugin? Then you won't need a script at all inside the content script."", 'comment_created': datetime.datetime(2021, 7, 10, 12, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 667338425, 'comment_body': 'In the documentation, there is no description of such approach (in markdown-it plugin section)', 'comment_created': datetime.datetime(2021, 7, 10, 13, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 667339883, 'comment_body': ""It's not something about documentation, since it's specific to your plugin. But come to think of it, what I'm suggesting wouldn't work since the reference data is in the plugin process, and the content script in the main process, so there would still be a need for some kind of ipc call. So let's leave it as it is for now."", 'comment_created': datetime.datetime(2021, 7, 10, 13, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}]","[{'commit_sha': '1f526711be322ee0cb61ea4fef044d75e10fa0ac', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cced0523c976c21e80b967cad1981b3499e8f9c', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f62a032966633bfdef644b0530afd5a33aa77f67', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c8529e2f3169e1aef2efc744c092553ddcaa627', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57edd51687111aa2cfeb1c9d28f3771caed65950', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '511c4f6933b48e927601bb09443dada3979b1de0', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf30640e3aa706db3e0d4b847fe778a07781387a', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbab4c13f6996ebe9cd93d41079372d2337f324e', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bad62af93ae9a934a0e6fab5f057bed0f729053', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bb5da00dbc37e03070355c21048d077a9c65ff6', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '750098178093ca1fa4e4aca49dbdef8d17ee72fe', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e91c7667986caa08597fc6cc560ae69d92eccf58', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
684497040,fix(Citation Popup): Focus the search field initially,"When opening up, it will be useful to focus the search field automatically.",True,15,https://api.github.com/repos/joplin/plugin-bibtex/pulls/15,https://github.com/joplin/plugin-bibtex/pull/15,closed,3,0,1,1,0,0,0,0,[],2021-07-06 15:55:33+00:00,2021-07-09 20:57:47+00:00,277334.0,"3 days, 5:02:14",[],"[{'commit_sha': '5f1589cc67ec799972948bfb7edc9f751de728f3', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
690894064,Customize search,"## What has been done
- Show reference author and year of publication.
- Search includes author and year of publication.
- Enable/Disable strict mode (which narrows down the search).

## Screenshots
![1](https://i.ibb.co/0KVwB3J/Screenshot-from-2021-07-15-18-52-44.png)
![2](https://i.ibb.co/N1KQdhL/Screenshot-from-2021-07-15-18-53-32.png)
![3](https://i.ibb.co/h1w2zBM/Screenshot-from-2021-07-15-18-53-40.png)
![4](https://i.ibb.co/ngBXY3N/Screenshot-from-2021-07-15-18-56-55.png)",True,18,https://api.github.com/repos/joplin/plugin-bibtex/pulls/18,https://github.com/joplin/plugin-bibtex/pull/18,closed,76,34,4,12,7,17,0,0,[],2021-07-15 17:00:08+00:00,2021-07-19 10:05:38+00:00,320730.0,"3 days, 17:05:30","[{'comment_id': 671054885, 'comment_body': ""What's the difference between strict and loose mode, and do you really need to add an option for this?\r\n\r\nIf you do need the option, it shouldn't be in the plugin settings - if a user searches for something, they shouldn't have to close the search dialog, open the preferences, navigate to the plugin page, and change the search option. And that's assuming they even know this option is there. In other words, the option should be on the search dialog box."", 'comment_created': datetime.datetime(2021, 7, 16, 8, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 671055744, 'comment_body': ""Needs to be encoded - you shouldn't make assumption about the data. It could be accidentally or purposely malformed in the BibTex file."", 'comment_created': datetime.datetime(2021, 7, 16, 8, 14, 54, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 671055892, 'comment_body': 'Should be encoded.', 'comment_created': datetime.datetime(2021, 7, 16, 8, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 671057453, 'comment_body': 'Please only make one call to registerSettings. The point of this function is to group setting definition so as to limit the number of ipc calls:\r\n\r\n```typescript\r\nawait joplin.settings.registerSettings({\r\n\t[SETTINGS_FILE_PATH_ID]: {\r\n\t\tvalue: """",\r\n\t\ttype: SettingItemType.String,\r\n\t\tsection: SETTINGS_SECTION_ID,\r\n\t\tpublic: true,\r\n\t\tlabel: \'BibTeX File\',\r\n\t},\r\n\t[SETTINGS_STRICT_MODE]: {\r\n\t\tvalue: true,\r\n\t\ttype: SettingItemType.Bool,\r\n\t\tsection: SETTINGS_SECTION_ID,\r\n\t\tpublic: true,\r\n\t\tlabel: ""Strict mode"",\r\n\t\tdescription: `When searching for references, strict mode shows only the items that contains the search query as a substring`,\r\n\t\tadvanced: true\r\n\t},\r\n});\r\n```', 'comment_created': datetime.datetime(2021, 7, 16, 8, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 671059773, 'comment_body': 'That\'s a leaky abstraction here - you shouldn\'t access the ""date-parts"" key anywhere since your helper function is supposed to deal with this. Either do `const fullDate = getDate(ref);`, then later `year: fullDate ? fullDate.getFullYear() : null` or create another helper function like `getDateYear(ref)` that does the date-parts check and either return the year or null.', 'comment_created': datetime.datetime(2021, 7, 16, 8, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 671061061, 'comment_body': 'Could you check what happens when there\'s an error when parsing? You can for example throw an exception from here or set ""json"" to null. You don\'t have to display an error message but at least it shouldn\'t crash the plugin.', 'comment_created': datetime.datetime(2021, 7, 16, 8, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 671279322, 'comment_body': 'I just wanted to make a proof of concept of this feature. Maybe in the future, I can place it in the citation popup.', 'comment_created': datetime.datetime(2021, 7, 16, 14, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 671290882, 'comment_body': 'But what does strict/loose mean? How does the user know which one to choose?', 'comment_created': datetime.datetime(2021, 7, 16, 14, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 671309469, 'comment_body': ""I added a little description in the config screen. Isn't that enough?"", 'comment_created': datetime.datetime(2021, 7, 16, 14, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 671319644, 'comment_body': ""Ok I missed the description, but I still don't get it. Are you ok with explaining what's the difference between strict and loose mode?"", 'comment_created': datetime.datetime(2021, 7, 16, 14, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 671345481, 'comment_body': 'As far as I can tell, the strict mode only displays results that have the search query as an exact substring. For example. if the search query is ""algo"", results like ""algorithms"" and ""algorithmic thinking"" would appear. Meanwhile results like ""algebra on the moon"" would not appear since the query is not an exact substring of the result.\r\n\r\nBut in the loose mood, the later result would normally appear.', 'comment_created': datetime.datetime(2021, 7, 16, 15, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 671354393, 'comment_body': ""As far as you can tell? So you're not sure? If it's so vague that even you who implemented it aren't sure what it does I don't think it's a good idea to keep the option. In general it's better not to bloat the software with unclear options, especially when it's apparently not based on any specific user requirement.\r\n\r\nIf you want to improve search, I would suggest you gather user feedback from the forum thread and create a spec that we can then discuss. You don't have to implement the spec right away but having it there would be a lot more valuable than adding unclear options."", 'comment_created': datetime.datetime(2021, 7, 16, 15, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 671378280, 'comment_body': 'OK, got it. I will revert this option.', 'comment_created': datetime.datetime(2021, 7, 16, 16, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 671436466, 'comment_body': 'Noted', 'comment_created': datetime.datetime(2021, 7, 16, 18, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}, {'comment_id': 672091122, 'comment_body': ""refs should be defined with `let refs` since you assigned a variable to it afterwards.\r\n\r\nAlso in general avoid empty catch statements as it makes it very to debug when there's problem. At least display a console statement."", 'comment_created': datetime.datetime(2021, 7, 19, 8, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 672094646, 'comment_body': 'Those are encoded variables so their names should reflect that. Have you read the Making Wrong Code Look Wrong article? https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/ In this article he mentions prefixing the variables with ""s"" (as ""safe""). I tend to add an ""Html"" suffix. Either way, please pick a convention for encoded variable names.\r\n\r\nAlternatively, you can simply encode the variable at the point where you insert it into HTML and that way you don\'t need an intermediate variable.', 'comment_created': datetime.datetime(2021, 7, 19, 8, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 672132444, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 19, 9, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}]","[{'commit_sha': '7e0eac7a7c2dded04a86235ebaa36be8324c4fb7', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6cd9736121e01922e9a643c45ab4e3ea1f5bd7c', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc3076aa94b7ada44b28ed63a317e7c7851685db', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64866f641f16104a0f2de43abac9590480916528', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6723ceb166f3a7e6d9731f42fe465a22593dbc9', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2aa7042f99d176a308098031da252c0c4368e54', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20dcb8f61c14463868261e150278ae2d314b8b93', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3d5326d9847c9e7467d2a0fe2b5eeba7f9410c0', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa084c4cb611b178d5a9e70b0213bbe7b14f4b31', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3da2596fed67ccfb74471580064b327c545b58bc', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f7a031e22198468c3443d49b6fa236e6a7afffe', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84a85cbbea20dcc0073905d9c533f273a6ea4dd6', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
694498753,Import multiple .bib files,"## What has been done
- Enable importing multiple `.bib` files
- Abstract reading BibTeX data into a separate function",True,20,https://api.github.com/repos/joplin/plugin-bibtex/pulls/20,https://github.com/joplin/plugin-bibtex/pull/20,closed,70,64,3,2,3,0,0,0,[],2021-07-21 15:50:01+00:00,2021-07-22 22:25:39+00:00,110138.0,"1 day, 6:35:38",[],"[{'commit_sha': '234d2bd0b7faf25e1f66846a86aa753085ea5f83', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5288d008902a3648d215129b60b42f4c82f8f806', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
698855046,Citation style,"The feature is not complete yet, but I decided to PR the changes I've done till now and get a review while working on the rest of the implementation. This saves a lot of time in my opinion. Please, don't merge this PR until I finish the initial implementation.

## What has been done (till now)
- Integrate [Citeproc.js](https://github.com/Juris-M/citeproc-js) with a thin layer of abstraction: `CSLProcessor` Singleton Class
- Register a new field in the config screen that enables the user to enter the path of a `.csl` file for styling. By default (if the field is empty), the APA style is used.
- Insert an empty line between references.

## Screenshots
APA
![APA format](https://i.ibb.co/PrtDDhh/Screenshot-from-2021-07-28-18-01-06.png)

IEEE
![IEEE format](https://i.ibb.co/dLW3P79/Screenshot-from-2021-07-28-18-00-48.png)

## What's next
- Handle errors related to the `.csl` file (like ""file not found"" or ""invalid format"")
- Escape HTML entities",True,21,https://api.github.com/repos/joplin/plugin-bibtex/pulls/21,https://github.com/joplin/plugin-bibtex/pull/21,closed,2156,126,10,15,3,2,1,0,[{'name': 'enhancement'}],2021-07-28 16:50:14+00:00,2021-07-31 18:00:37+00:00,263423.0,"3 days, 1:10:23","[{'comment_id': 680359652, 'comment_body': 'In the description, you should mention that multiple files can be specified, separated by ;', 'comment_created': datetime.datetime(2021, 7, 31, 13, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 680360005, 'comment_body': 'Does that work even from the config screen? Actually, you could simply add a description below the field to say that the app needs to be restarted.', 'comment_created': datetime.datetime(2021, 7, 31, 13, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}]","[{'commit_sha': '69530813a3c955109f2e99dbdacd3336014f16f1', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b39834af6ac521a254c98163528fa5862d524331', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90afc691e23c05d2339f26e61471c40f02091aaa', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de789472f7a39802613eb018d38c5d5990cf97aa', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5c8bc0b18d3598256d5d59a5a9c64534523528d', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f27755137c951d684d94eab642f95fcf03df7a2a', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a08b32886098c66fdee8901ce7595f5046f89fd', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '127dd6c04f71e11e0416b48c4362f6ec74785311', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af06bdecf258dc84c54225e56ecb8294ca5e4808', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9377b77ebeb5d565bab394dc4c030908b0807caa', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd68d075c3a6ef278d3ab31015ea4ca902d0f30cf', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a63682710dc87c260cf394a909a02b7876eaaf0', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd3d831e5cd9be64894cb79008759718fa9b6c99', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f07284a74850b2c6a4c27139bf963ce7f1e61213', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '050985c69eea2460bf40bd84d8a853ff1dbcdf20', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
700777217,Fixes #22,"This is fix of the issue #22 

## What's done
```js
year: ref[""year""] ? ref[""year""].toString() : """"
```",True,23,https://api.github.com/repos/joplin/plugin-bibtex/pulls/23,https://github.com/joplin/plugin-bibtex/pull/23,closed,54,48,1,2,1,0,0,0,[],2021-07-31 22:41:52+00:00,2021-08-01 14:30:19+00:00,56907.0,15:48:27,[],"[{'commit_sha': '94fde2bf5a7ed55a52a98d92ea5825be82a528d7', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd65106e9dcd747865c66bec40ee8230cdea282e3', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269
712933351,Customize the rendering of inline references,"*This PR is not complete yet*

### What's done
Render all inline references that match the pattern `[-@citekey]` like `(year)`

### What's left
Include all the other patterns described [here](https://discourse.joplinapp.org/t/customize-the-rendering-of-inline-references-spec/19294)",False,27,https://api.github.com/repos/joplin/plugin-bibtex/pulls/27,https://github.com/joplin/plugin-bibtex/pull/27,open,246,55,6,11,3,2,0,0,[],2021-08-15 13:10:11+00:00,,0.0,,"[{'comment_id': 689146767, 'comment_body': 'That shouldn\'t be ""any"" especially since you have defined a type for the references.', 'comment_created': datetime.datetime(2021, 8, 15, 21, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 689953343, 'comment_body': 'I see', 'comment_created': datetime.datetime(2021, 8, 17, 0, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'xUser5000', 'type': 'User'}]","[{'commit_sha': 'b1965e92a2e859c132397ddc70877c795e460a99', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85cdd8fc48269e0dce9844d59fcb12100132fabd', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbab3be7b20d68082cd403d2e5c29bc4a5472ee0', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45138b4206af6ffdd491406d0083d287a2c03b29', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2a1de7e7b33ee0e148a0a6f639b5f15eb5fa76e', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35ff70bb85976f64e727d33a0ad9b54fcfd6cfc9', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e353e64adf3e11eac94d60818562d7f372bb5a3', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c23d924579e306c79f3db08e12fdcf08f68b2425', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '499be3efddb8389d0a073ae206c08bb018b6d9bf', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b802a2a1029d4e44c193be8b084032533e8d0751', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfb9e2098d55b8061c43380fd581f6dd8d621d4b', 'committer_username': 'xUser5000', 'committer_name': 'Abdallah Ahmed', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 17, 50, 36, tzinfo=datetime.timezone.utc)}]",Abdallah Ahmed,40672207,,User,,39,,216,269

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
371677708,plugin-bibtex,joplin/plugin-bibtex,TypeScript,7,29,3,2,46,13,20,2,"[{'id': 712933351, 'number': 27, 'closed': None, 'created': datetime.datetime(2021, 8, 15, 13, 10, 11, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 246, 'deletions': 55, 'state': 'open'}, {'id': 712862073, 'number': 26, 'closed': datetime.datetime(2021, 8, 15, 13, 3, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 15, 1, 56, 59, tzinfo=datetime.timezone.utc), 'time_taken': 40000.0, 'time_delta': '11:06:40', 'additions': 196, 'deletions': 53, 'state': 'closed'}, {'id': 701346002, 'number': 25, 'closed': datetime.datetime(2021, 8, 2, 10, 38, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 10, 36, 40, tzinfo=datetime.timezone.utc), 'time_taken': 112.0, 'time_delta': '0:01:52', 'additions': 5113, 'deletions': 166, 'state': 'closed'}, {'id': 700777217, 'number': 23, 'closed': datetime.datetime(2021, 8, 1, 14, 30, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 31, 22, 41, 52, tzinfo=datetime.timezone.utc), 'time_taken': 56907.0, 'time_delta': '15:48:27', 'additions': 54, 'deletions': 48, 'state': 'closed'}, {'id': 698855046, 'number': 21, 'closed': datetime.datetime(2021, 7, 31, 18, 0, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 28, 16, 50, 14, tzinfo=datetime.timezone.utc), 'time_taken': 263423.0, 'time_delta': '3 days, 1:10:23', 'additions': 2156, 'deletions': 126, 'state': 'closed'}, {'id': 694498753, 'number': 20, 'closed': datetime.datetime(2021, 7, 22, 22, 25, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 21, 15, 50, 1, tzinfo=datetime.timezone.utc), 'time_taken': 110138.0, 'time_delta': '1 day, 6:35:38', 'additions': 70, 'deletions': 64, 'state': 'closed'}, {'id': 692643860, 'number': 19, 'closed': datetime.datetime(2021, 7, 19, 14, 11, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 19, 14, 11, 27, tzinfo=datetime.timezone.utc), 'time_taken': 14.0, 'time_delta': '0:00:14', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 690894064, 'number': 18, 'closed': datetime.datetime(2021, 7, 19, 10, 5, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 17, 0, 8, tzinfo=datetime.timezone.utc), 'time_taken': 320730.0, 'time_delta': '3 days, 17:05:30', 'additions': 76, 'deletions': 34, 'state': 'closed'}, {'id': 687223163, 'number': 17, 'closed': datetime.datetime(2021, 7, 10, 18, 48, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 10, 18, 45, 6, tzinfo=datetime.timezone.utc), 'time_taken': 199.0, 'time_delta': '0:03:19', 'additions': 24, 'deletions': 13, 'state': 'closed'}, {'id': 686432646, 'number': 16, 'closed': datetime.datetime(2021, 7, 10, 13, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 9, 2, 0, 48, tzinfo=datetime.timezone.utc), 'time_taken': 127992.0, 'time_delta': '1 day, 11:33:12', 'additions': 210, 'deletions': 12, 'state': 'closed'}, {'id': 684497040, 'number': 15, 'closed': datetime.datetime(2021, 7, 9, 20, 57, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 15, 55, 33, tzinfo=datetime.timezone.utc), 'time_taken': 277334.0, 'time_delta': '3 days, 5:02:14', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 683012424, 'number': 14, 'closed': datetime.datetime(2021, 7, 3, 12, 2, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 3, 11, 45, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1059.0, 'time_delta': '0:17:39', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 680938482, 'number': 12, 'closed': datetime.datetime(2021, 7, 3, 7, 27, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 14, 38, 49, tzinfo=datetime.timezone.utc), 'time_taken': 233307.0, 'time_delta': '2 days, 16:48:27', 'additions': 246, 'deletions': 78, 'state': 'closed'}, {'id': 678556052, 'number': 11, 'closed': datetime.datetime(2021, 6, 28, 11, 22, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 27, 17, 49, 32, tzinfo=datetime.timezone.utc), 'time_taken': 63188.0, 'time_delta': '17:33:08', 'additions': 6, 'deletions': 3, 'state': 'closed'}, {'id': 678541995, 'number': 9, 'closed': datetime.datetime(2021, 6, 28, 11, 21, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 27, 16, 10, 53, tzinfo=datetime.timezone.utc), 'time_taken': 69042.0, 'time_delta': '19:10:42', 'additions': 9, 'deletions': 7, 'state': 'closed'}, {'id': 677758962, 'number': 8, 'closed': datetime.datetime(2021, 6, 25, 10, 56, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 9, 12, 15, tzinfo=datetime.timezone.utc), 'time_taken': 6244.0, 'time_delta': '1:44:04', 'additions': 13, 'deletions': 0, 'state': 'closed'}, {'id': 677277585, 'number': 7, 'closed': datetime.datetime(2021, 6, 25, 8, 14, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 16, 48, tzinfo=datetime.timezone.utc), 'time_taken': 55592.0, 'time_delta': '15:26:32', 'additions': 9, 'deletions': 7, 'state': 'closed'}, {'id': 677081675, 'number': 6, 'closed': datetime.datetime(2021, 6, 24, 12, 48, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 12, 47, 22, tzinfo=datetime.timezone.utc), 'time_taken': 75.0, 'time_delta': '0:01:15', 'additions': 19, 'deletions': 10, 'state': 'closed'}, {'id': 674856520, 'number': 5, 'closed': datetime.datetime(2021, 6, 22, 12, 51, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 21, 20, 27, 9, tzinfo=datetime.timezone.utc), 'time_taken': 59051.0, 'time_delta': '16:24:11', 'additions': 229, 'deletions': 38, 'state': 'closed'}, {'id': 672802232, 'number': 4, 'closed': datetime.datetime(2021, 6, 17, 21, 26, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 16, 22, tzinfo=datetime.timezone.utc), 'time_taken': 18279.0, 'time_delta': '5:04:39', 'additions': 187, 'deletions': 15, 'state': 'closed'}, {'id': 669132927, 'number': 3, 'closed': datetime.datetime(2021, 6, 15, 19, 34, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 13, 23, 42, 43, tzinfo=datetime.timezone.utc), 'time_taken': 157884.0, 'time_delta': '1 day, 19:51:24', 'additions': 162, 'deletions': 27, 'state': 'closed'}, {'id': 667206759, 'number': 2, 'closed': datetime.datetime(2021, 6, 11, 22, 16, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 18, 45, 44, tzinfo=datetime.timezone.utc), 'time_taken': 99017.0, 'time_delta': '1 day, 3:30:17', 'additions': 3157, 'deletions': 1910, 'state': 'closed'}, {'id': 663639963, 'number': 1, 'closed': datetime.datetime(2021, 6, 8, 10, 44, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 7, 14, 53, 38, tzinfo=datetime.timezone.utc), 'time_taken': 71423.0, 'time_delta': '19:50:23', 'additions': 2016, 'deletions': 6070, 'state': 'closed'}]"
