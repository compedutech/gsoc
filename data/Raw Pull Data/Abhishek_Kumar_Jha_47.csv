pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
714698510,Android GSoC 2021,"# Final Report: Android Support for ENIGMA (GSoC 2021)
#### ORGANIZATION: The ENIGMA Team
#### Mentors:
- @JoshDreamland
- @RobertBColton
- @fundies

### My GSoC project (#1880) included mainly 3 tasks:
- Shader Fix
- Adding a new audio system
- Adding the tilt feature
<br> This pull request includes all of my commits, including the tasks mentioned above and some bug fixes.
<hr>

### TASK 1: `SHADER FIX`
In task 1 I started with some bug fixes like [Refactoring for GLES build](https://github.com/enigma-dev/enigma-dev/pull/2224/commits/b83ecb7967a9af9e49d605c85f13b9b8debddbae)
which included:
- moving functions from multiple files of  **OpenGL-Common** to files with the same name in **OpenGL-Desktop**
- creating GLES compatible versions of some OpenGL-Common functions in **OpenGLES**

<br>This fix was needed because **OpenGL-Common** has shared code between GLES and all OpenGL and some functions were only available in OpenGL, not GLES because of which they were giving errors.
<br><br/>After this the next bug I fixed was the [Scaling issue and presence of garbage in the android build](https://github.com/enigma-dev/enigma-dev/commit/298801eb0efbb5816564a61ae0a96a612e89d7b0) which included :
- fixing the Scaling issue for all the scaling options(fixed scale, keep aspect ratio, full scale)
- removing graphical noise that is present when we open the game

<br>For fixing the scaling issue I had to modify few functions such as  **window_get_width() & window_get_height()** with the idea of using  **SDL_GL_GetDrawableSize()** instead of **SDL_GetWindowSize()**.
Since resizing window is not possible in android I modified **initGameWindow()** as well by removing the macro since we do not need it anymore.
<br><br>For fixing the garbage issue I added some new functions like **graphics_remove_garbage()** in **Platforms\SDL\event.cpp** and **d3d_enable_scissor_test()** in **OpenGL-Common\d3d.cpp**.
```cpp
static void graphics_remove_garbage(float x, float y, float width, float height) {
  graphics_set_viewport(x,y,width,height);
  enigma_user::d3d_enable_scissor_test(false);
  enigma_user::draw_clear(enigma_user::window_get_color());
}
```
```cpp
void d3d_enable_scissor_test(bool enable) {
  if(enable==true)
     glEnable(GL_SCISSOR_TEST);
  else
     glDisable(GL_SCISSOR_TEST);
}
```
<br>I modified the **windowsResized()** function in event.cpp used the **graphics_remove_garbage()** function inside it and the **d3d_enable_scissor_test()** was simply used  to enable and disable the scissor test.
<br>A **scissor test** is what tells the GPU to stay within a particular rectangle when filling. It's an optimization (which may or may not matter when already specifying a viewport). Once enabled, pixels outside the scissor box(drawing area) will be discarded, removing the garbage around our game.
<br>Below is the comparison of what it looked like before and after adding these changes and building the game again: 

`game screenshots:`
|  BEFORE 	|  AFTER 	|
|---	|---	|
| <img src=https://user-images.githubusercontent.com/55275135/129498719-a186ae99-c279-4032-b3ad-7065c40a6441.jpeg height=""450"">  	| <img src=https://user-images.githubusercontent.com/55275135/123556899-66dbea80-d7ab-11eb-8910-c51c573f1fba.jpg height=""450"">  	|

Both the scaling and garbage issues were fixed.<br><br>
After this, I started my first task for which I created a sample game with some sprites and circles and added different colors to them just to see the error in our shader.
Below is the difference between Android and Windows before the shader fix :<br>
`Windows`:<br>
<img src=https://user-images.githubusercontent.com/55275135/129469506-bec98e16-8f42-416f-bb35-d2ac7e1c0797.jpeg width = 50%>

`Android`:<br>
<img src=https://user-images.githubusercontent.com/55275135/129469512-76dcdc8b-ac85-40aa-85c5-91e91836fc17.jpeg width = 50%>

After this, my mentors suggested that I should learn GLSL so I learned few concepts of GLSL like swizzling, samplers, etc and I got to know that we can access all the 4 components of a **vec4** in any order you want.<br>
My fix for the Shader issue was using  **""TexColor = texture( en_TexSampler, v_TextureCoord.st ) * v_Color;""** for OpenGL and  **""TexColor.bgra = texture( en_TexSampler, v_TextureCoord.st ).rgba * v_Color;""** for GLES. I did this by storing these strings in a common variable **texColorString** which I added in **OpenGL-Common/shader.h** and I used this variable in the raw string which is returned in **getDefaultFragmentShader** function.<br>

@RobertBColton tested these changes and below are the test results:
<br>

| <img src=https://user-images.githubusercontent.com/55275135/129471203-68f3dd6a-13eb-4aed-bf9b-2b555044f19a.jpeg width = 90%>  	|  <img src=https://user-images.githubusercontent.com/55275135/129471212-9bfd05b6-2b7f-4271-a85b-deac9af7a324.jpeg width = 90%> 	|
|---	|---	|

<br> `Shader fix commits`: https://github.com/enigma-dev/enigma-dev/pull/2218/commits/b8ec0bfa36e44f6d1609fcae2887f5ad57273012
<br>Task 1 completed.
<hr>

### TASK 2: `ADDING A NEW AUDIO SYSTEM`

We needed a new audio system that was able to work for android, so I created an SDL audio system with the help of **SDL_mixer**<br>
I used [SDL_mixer docs](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer.html) to get all the functions I need for this audio system like :
- Mix_OpenAudio
- Mix_PlayChannel
- Mix_GetChunk
- Mix_HaltChannel
- Mix_Pause
- Mix_Playing
- Mix_Resume
- Mix_Paused
- Mix_SetPanning
- Mix_QuerySpec
- Mix_VolumeChunk
- Mix_Volume
- Mix_AllocateChannels

First I created **SoundResource.h** which has the **sound structure** and some functions like **update, destroy** etc. Then I created **SDLsystem** which has **audiosystem_initialize()** which is responsible for initializing the SDL mixer api using **Mix_OpenAudio** and loading support for different audio sample formats using **Mix_Init**.<br>
After this I added sound functions in **SDLbasic.cpp** like sound_exists, sound_add, sound_play, sound_delete, sound_stop, sound_loop and few more. These functions are common for all the audio systems. I used AssetArray for sounds because it is easy to access sound objects using the id.<br>
For example below is my **sound_play** function which uses an SDL_mixer function,<br>
```cpp
bool sound_play(int sound) {
  const Sound& snd = sounds.get(sound);
  if (Mix_PlayChannel(-1,snd.mc, 0) == -1) { return false; }
  return true;
}
```
In the function above, **sounds** is the AssetArray of **Sound** objects and I use the id passed as a parameter to get the Sound. The sound structure has a **chunk pointer**(mc) and Mix_PlayChannel is the mixer function for playing the chunk on a channel. The other basic functions are made using the same approach.<br><br>
Once I finished the basic functions I started the **audio functions**. For audio functions, I added **SoundChanel.h** which had the SoundChannel structure which looked like <br>
```cpp
struct SoundChannel {
  Mix_Chunk *mchunk;
  int soundIndex;
  double priority;
};
```

<br>SoundChannel is being used because most of the audio functions for the SDL audio system use channel id instead of sound id.
Just like sound functions the audio functions are common for all the audio systems. I created **SDLadvanced.cpp**
and added audio functions like audio_exists, audio_add, audio_play_sound, audio_stop_sound and few more.<br>The audio functions are made using the logic I used for sound functions. For example:
<br>**sound_ispaused**:<br>
```cpp
bool sound_ispaused(int sound) {
  const Sound& snd = sounds.get(sound);
  int channel_count = Mix_AllocateChannels(-1);
  for(int i = 0;i <= channel_count ; i++) {
    if (Mix_GetChunk(i) == snd.mc && Mix_Paused(i) == 1) { return true; }
  }
  return false;
}
```
<br>**audio_is_paused**:<br>
```cpp
bool audio_is_paused(int index) {
  if (index >= AUDIO_CHANNEL_OFFSET) {
    return Mix_Paused(index - AUDIO_CHANNEL_OFFSET);
  }
  const Sound& snd = sounds.get(index);
  for(size_t i = 0; i < sound_channels.size() ; i++) {
    if (sound_channels[i]->mchunk == snd.mc && Mix_Paused(i) == 1) { return true; }
  }
  return false;
}
```
logic is the same but one uses only sound while the other uses both sound and channel structures.
<br> This is because sound basic is not intended to be **multichannel**, but advanced audio is intended to take full advantage of SDL_mixer. Audio functions are positional multichannel audio (much more powerful) & sound functions are kept for backwards compatibility. The **audio_play_sound** function returns the channel id, that way the user can store the id of the channel in a variable then all the volume/pan/stop/pause functions will take both sound id and sound channel id. Using the advanced audio functions, the user gets full control over each channel.
<br> After finishing the required functions for both **SDLbasic.cpp** and **SDLadvanced.cpp** I started testing for both windows and android and I was able to hear the audio for both windows and android builds.<br>
The tests were successful for `FLAC`, `MP3`, `OGG`, `WAV` audio file formats.<br>

<br> `Audio system commits`: https://github.com/enigma-dev/enigma-dev/pull/2218/commits/c87994f9d71aa626ff9d34f71f4d654879507d91, https://github.com/enigma-dev/enigma-dev/pull/2218/commits/0d55208e56f1547be94d2372efe690343b7ce6fe
<br>Task 2 completed.
<hr>

### TASK 3: `ADDING THE TILT FEATURE`

@fundies provided some useful links for this task like:
[SDL_android.c](https://github.com/libsdl-org/SDL/blob/abe2ac2cb48de2b79034c13ff29706cf15e25edd/android-project/src/org/libsdl/app/SDLActivity.java#L770) & [SDLActivity.java](https://github.com/libsdl-org/SDL/blob/abe2ac2cb48de2b79034c13ff29706cf15e25edd/src/core/android/SDL_android.c)
<br> after going through these files we decided to use **Android_JNI_GetAccelerometerValues**.

I started task 3 by first adding **android.cpp** in **Platforms\SDL\Android** and added 3 functions **device_get_tilt_x**, **device_get_tilt_y** & **device_get_tilt_z** and included **SDL_android.h** which is a requirement for Android_JNI_GetAccelerometerValues.
Then I added **override CXXFLAGS += -I$(ENIGMA_ROOT)/android/external/SDL2/src/core/android/** & **SOURCES += $(wildcard Platforms/SDL/Android/*.cpp)** to the makefile present in **Platforms\SDL**. Below is the implementation of **device_get_tilt_x**
```cpp
float device_get_tilt_x()
{ 
  float Values[3],tilt_x;
  Android_JNI_GetAccelerometerValues(Values);
  tilt_x = Values[0];
  return tilt_x;

}
```
The other 2 functions are similar to this and the only change is that tilt_y returns **Values[1]** and tilt_z returns **Values[2]**.
<br><br> I added the tilt feature in the first audio system commit: https://github.com/enigma-dev/enigma-dev/commit/c87994f9d71aa626ff9d34f71f4d654879507d91 
<br>Task 3 completed.

<hr>

### What's left / What will be done after GSoC?
- In the Shader fix part the raw string needs to have texture2D for OpenGL1 and texture for GL3. It's the same for GLES2 and GLES3.
- Addition of extra audio functions in the SDL audio system for effects etc.
- Tilt has some delay which needs to be fixed.
- I will try to implement the suggestions given by @RobertBColton in the comments below.
",True,2261,https://api.github.com/repos/enigma-dev/enigma-dev/pulls/2261,https://github.com/enigma-dev/enigma-dev/pull/2261,closed,1487,507,92,53,1,25,1,0,[{'name': 'GSOC-Done'}],2021-08-18 02:45:24+00:00,2021-08-30 02:23:45+00:00,1035501.0,"11 days, 23:38:21","[{'comment_id': 691035890, 'comment_body': ""```suggestion\r\noverride CXXFLAGS += $(shell pkg-config --cflags SDL2_mixer)\r\noverride LDLIBS += $(shell pkg-config --libs SDL2_mixer) -lopusfile -lopus -lvorbisfile -lvorbis -logg -lFLAC -lsndfile -lmodplug -lmpg123 -lole32 -lwinmm -lm -lshlwapi -lssp\r\n```\r\nLet's try to clean this up as much as we can. We should not be passing `sdl` or `sdl2` here since that is already handled by the SDL Platform's Makefile, which this system will depend upon anyway. It seems `SDL2_mixer` should also be specified for `CXXFLAGS` too. Finally, please compare the output of `pkg-config --libs SDL2_mixer` to those extra libs, and remove any that are already specified."", 'comment_created': datetime.datetime(2021, 8, 18, 8, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691037904, 'comment_body': 'Generally, the more granular/atomic a header is, the more it should go towards the bottom of the include list. Since `SDLsystem.h` may include the other two, it\'s better if it goes first.\r\n\r\n```suggestion\r\n#include ""SDLsystem.h""\r\n#include ""SoundResource.h""\r\n#include ""SoundChannel.h""\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 8, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691041045, 'comment_body': 'These should be reversed, just like I explained above.\r\n```suggestion\r\n#include ""SDLsystem.h""\r\n#include ""SoundResource.h""\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 8, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691053337, 'comment_body': 'Don\'t use `Mix_GetError` as we talked about, it\'s unreliable.\r\nhttps://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_9.html#SEC9\r\n>""Note: this function does not always set the error string, so do not depend on Mix_GetError being meaningful all the time.""\r\n```suggestion\r\n      DEBUG_MESSAGE( std::string(""Mix_PlayChannel failed: "")+std::to_string(index), MESSAGE_TYPE::M_ERROR);\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 9, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691054581, 'comment_body': 'Don\'t use `Mix_GetError` as above.\r\n```suggestion\r\n          DEBUG_MESSAGE( std::string(""Mix_PlayChannel failed: "")+std::to_string(index), MESSAGE_TYPE::M_ERROR);\r\n\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 9, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691055537, 'comment_body': ""Don't use `Mix_GetError` but also I think this line isn't needed.\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2021, 8, 18, 9, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691057233, 'comment_body': ""This duplication of these functions doesn't need to be. You can actually undo this and put them back in common. and extract a variable just like the `texColorString` variable. You can have desktop static initialize the variable to `GL_BGRA` and GLES init it to `GL_RGBA`. You can call the variable `ENIGMA_TEXTURE_FORMAT` or something, but please put it in the enigma namespace."", 'comment_created': datetime.datetime(2021, 8, 18, 9, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691058357, 'comment_body': 'Delete these blank lines.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 9, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691058432, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 9, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691058485, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 9, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691059319, 'comment_body': '```suggestion\r\n  int viewportWidth, viewportHeight;\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 9, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691059498, 'comment_body': '```suggestion\r\n  int viewportWidth, viewportHeight;\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 9, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691059979, 'comment_body': 'This actually needs to be `texture2D` for OpenGL1/GLES2, and `texture` for GL3/GLES3.\r\nhttps://stackoverflow.com/a/12309212', 'comment_created': datetime.datetime(2021, 8, 18, 9, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691068355, 'comment_body': ""Shouldn't this be moved into a `TARGET-PLATFORM` Android check?"", 'comment_created': datetime.datetime(2021, 8, 18, 9, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691069730, 'comment_body': ""Shouldn't this be moved too?\r\n```suggestion\r\nifeq ($(TARGET-PLATFORM), Android)\r\n\toverride CXXFLAGS += -I$(ENIGMA_ROOT)/android/external/gles3/include\r\n\toverride CFLAGS += -I$(ENIGMA_ROOT)/android/external/gles3/include \r\n\tSOURCES += $(wildcard Graphics_Systems/OpenGLES3/*.cpp) $(ENIGMA_ROOT)/android/external/gles3/src/gles2.c\r\n\tANDROID_LDLIBS += -lGLESv3\r\nendif\r\n```"", 'comment_created': datetime.datetime(2021, 8, 18, 9, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691070326, 'comment_body': ""Shouldn't these be moved down inside the `TARGET-PLATFORM`/`Android` check?\r\n```suggestion\r\nifeq ($(TARGET-PLATFORM), Android)\r\n\toverride CXXFLAGS += -I$(ENIGMA_ROOT)/android/external/gles2/include\r\n\toverride CFLAGS += -I$(ENIGMA_ROOT)/android/external/gles2/include\r\n\tSOURCES += $(wildcard Graphics_Systems/OpenGLES2/*.cpp) $(ENIGMA_ROOT)/android/external/gles2/src/gles2.c\r\n\tANDROID_LDLIBS += -lGLESv2\r\nendif\r\n```"", 'comment_created': datetime.datetime(2021, 8, 18, 9, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691077173, 'comment_body': ""I think we actually don't need to duplicate these. It would be ok to put the GLES version back in common, and it would work fine on newer OpenGL. While using separate draw/read buffers is a newer feature, our code actually wasn't making a real use of it before, so using the combined `GL_FRAMEBUFFER` target that works in old and new GL would be fine in common."", 'comment_created': datetime.datetime(2021, 8, 18, 9, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691081459, 'comment_body': ""We're actually going to need a better solution to this one. Passing unsigned as signed ints is just going to overflow. GameMaker Studio 2, being dynamically typed, only exposes `shader_set_uniform_i` and doesn't actually expose the unsigned version of these functions. What we actually need to do here is split it so that only GL3/GLES3 and newer use the unsigned functions. Then we need to completely remove them from GLES2/GL1.\r\n\r\nLook at how these functions are _actually_ being used by the engine to see how to remove them from GL1."", 'comment_created': datetime.datetime(2021, 8, 18, 9, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}, {'comment_id': 691195935, 'comment_body': ""I think this is fine. If you're really worried about overflows just put a std::min(v, int_max) or whatever."", 'comment_created': datetime.datetime(2021, 8, 18, 12, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fundies', 'type': 'User'}, {'comment_id': 691782602, 'comment_body': '@RobertBColton I think I will look into this after GSoC', 'comment_created': datetime.datetime(2021, 8, 19, 5, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'diabl0-NEMESIS', 'type': 'User'}, {'comment_id': 691782649, 'comment_body': '@RobertBColton I think I will look into this after GSoC', 'comment_created': datetime.datetime(2021, 8, 19, 5, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'diabl0-NEMESIS', 'type': 'User'}, {'comment_id': 691782686, 'comment_body': '@RobertBColton I think I will look into this after GSoC', 'comment_created': datetime.datetime(2021, 8, 19, 5, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'diabl0-NEMESIS', 'type': 'User'}, {'comment_id': 691782771, 'comment_body': '@RobertBColton I think I will look into this after GSoC', 'comment_created': datetime.datetime(2021, 8, 19, 5, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'diabl0-NEMESIS', 'type': 'User'}, {'comment_id': 691782847, 'comment_body': '@RobertBColton @fundies  I think I will look into this after GSoC', 'comment_created': datetime.datetime(2021, 8, 19, 5, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'diabl0-NEMESIS', 'type': 'User'}, {'comment_id': 692890831, 'comment_body': ""If the tilt is actually too slow, then it may need to be cached like we do with window caption. Alternatively, we could just poll it once every tick from a callback in the main loop. You'd store that array in namespace `enigma` and have these functions return `enigma::tilt_values[...]` instead."", 'comment_created': datetime.datetime(2021, 8, 20, 12, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'RobertBColton', 'type': 'User'}]","[{'commit_sha': '0b9128503e46c395c4f4fb1b292b51c39dbfe4ab', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e01fc1c0b3c8a58afd400fd1c93708d7220ab0f1', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28140b73ab31ec3b8129a54a99b51f993d2ecf9f', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e4bf5bb440bef485cc3cc38cb166deda889b45f', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5807a29225ffab8805a4c7741843d127e48219b0', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ede042a60686364aa45c2c03eac8f31a7180f260', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '298801eb0efbb5816564a61ae0a96a612e89d7b0', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8ec0bfa36e44f6d1609fcae2887f5ad57273012', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c87994f9d71aa626ff9d34f71f4d654879507d91', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d55208e56f1547be94d2372efe690343b7ce6fe', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8bed2f89d89068bd1d427ac718c862d8d7cac45', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fb32fbb9af31ba05806483b204f2d90b61eab9d2', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c627b56662bf6a31f443673e826de7cbaf5fcf4', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94622e81c33306b1b45d74ee40cb89fda4ea0b64', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '063205040199c2de0d3bb9eb31e0593ef356184e', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e041695aeaf664f30c5de364522b712d1ac47719', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ea8ffd8716a5662210a6a2bce0199451713a22e', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30f21a23e421e18ecd3d1c144b478381be7d6d08', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e7b356b33446f603b6ba659b162e7dbfab91a7', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb50dc574b51d0f0a123b498b2c5d829551bb1c1', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e352d0c9151a2ec17b7a7097f2ed76478bea971d', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '859b1f44212df02e2596863c0cc55b2251a60c7e', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '850075004d56474c2d33dbde66becc45305779e3', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '623d7ed402afb086ab0e2d5712f4cbc286d31343', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab291c22fcc7db54dab867c4328b6c7dd28566d4', 'committer_username': 'RobertBColton', 'committer_name': 'Robert Colton', 'committer_email': None, 'commit_date': datetime.datetime(2013, 1, 8, 5, 20, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4e55a8b78a01ee9a0a90623dd6a3a4c1dc3e737', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cd8fea3a4c5c29ce33743b2823dba21e17eaa91e', 'committer_username': 'diabl0-NEMESIS', 'committer_name': 'ABHISHEK KUMAR JHA', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 13, 8, 29, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ff00b1dd9d201da680d76cd265e005bce8b12c3', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74bc47e5a81503fe9bb8d675dd71ccb401e5e060', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bcc8ade6af726d1ae403cc0ab0e9860c7a8c07f', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70c26446c45be8c223acc6ffa13a691d927bbb73', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a705c28e9a45c8e87ceb64dcb829af662260c43e', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e3390012252d9ad74f35c62d2f00cf62ce38889', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac71503865002fd8c11dedf10d3b7f869c4e7492', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcd7ac70349a315c78f77d4bcc8f7f9cd160c1f6', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e08087610c35926f8224b3bc29d95c410a9b262', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44cac2d5a788f327a13d7919161312c3345cdc94', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75069abccc966ecc66ed0554fbcf76c04716861f', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b846d95e03f2054ed82a5f01aee3454978d607ef', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd55fc151a41cd6714ca08e0a1ce8f632e124a87e', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e373f10c8bd5cab18c552e3c294eaa0fbbf09813', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3f5af6f0046d063725975f8cbaa11b4cbb7c915', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbc88d8afee3f3ae0dea055ac177a1261ea4b2b8', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a43be59d701d0de643eb4cbb20f20787ff4b680', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7992c1eb481265567ce6c78e05dc5115681e8644', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '563c787e187626088ae0819f0db2527a2e90a313', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9e203e578ff9acc5fe903b98564137d28d2769d', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a21601970f778735bf123dd50633e4eb2e34a63d', 'committer_username': 'fundies', 'committer_name': 'Greg Williamson', 'committer_email': None, 'commit_date': datetime.datetime(2012, 1, 7, 22, 27, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8024bdb937ca644dc82a296f53c5a8c1725b614', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '35fb04dbef91bba16e3b85a6a3fbbf173fc80c82', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5b75eda21ce12f3bf1268903594f9804095d262d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b614210db08a41e15ad4f5110fb329c71f12fbee', 'committer_username': 'JoshDreamland', 'committer_name': 'Josh Ventura', 'committer_email': None, 'commit_date': datetime.datetime(2009, 12, 8, 11, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0af3d9af61b9edda667317a572d3b02042b206ae', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",ABHISHEK KUMAR JHA,55275135,,User,,27,,0,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
3319723,enigma-dev,enigma-dev/enigma-dev,C++,121,334,31,69,4788,149,50,37,"[{'id': 714698510, 'number': 2261, 'closed': datetime.datetime(2021, 8, 30, 2, 23, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 2, 45, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1035501.0, 'time_delta': '11 days, 23:38:21', 'additions': 1487, 'deletions': 507, 'state': 'closed'}, {'id': 712713198, 'number': 2260, 'closed': datetime.datetime(2021, 8, 14, 15, 54, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 14, 4, 58, 7, tzinfo=datetime.timezone.utc), 'time_taken': 39400.0, 'time_delta': '10:56:40', 'additions': 70, 'deletions': 86, 'state': 'closed'}, {'id': 710176014, 'number': 2258, 'closed': datetime.datetime(2021, 8, 18, 2, 38, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 4, 45, 33, tzinfo=datetime.timezone.utc), 'time_taken': 510758.0, 'time_delta': '5 days, 21:52:38', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 710144618, 'number': 2257, 'closed': datetime.datetime(2021, 8, 12, 4, 43, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 4, 17, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1587.0, 'time_delta': '0:26:27', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 710124733, 'number': 2256, 'closed': datetime.datetime(2021, 8, 12, 4, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 3, 58, 59, tzinfo=datetime.timezone.utc), 'time_taken': 601.0, 'time_delta': '0:10:01', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 696165779, 'number': 2245, 'closed': datetime.datetime(2021, 8, 11, 2, 21, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 23, 19, 27, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1580032.0, 'time_delta': '18 days, 6:53:52', 'additions': 503, 'deletions': 6, 'state': 'closed'}, {'id': 682834155, 'number': 2242, 'closed': datetime.datetime(2021, 7, 9, 20, 29, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 2, 19, 7, 54, tzinfo=datetime.timezone.utc), 'time_taken': 609690.0, 'time_delta': '7 days, 1:21:30', 'additions': 35, 'deletions': 32, 'state': 'closed'}, {'id': 663030827, 'number': 2230, 'closed': datetime.datetime(2021, 6, 29, 19, 18, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 6, 19, 14, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1987450.0, 'time_delta': '23 days, 0:04:10', 'additions': 80, 'deletions': 119, 'state': 'closed'}, {'id': 651680920, 'number': 2224, 'closed': datetime.datetime(2021, 5, 24, 23, 52, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 24, 22, 37, 25, tzinfo=datetime.timezone.utc), 'time_taken': 4530.0, 'time_delta': '1:15:30', 'additions': 467, 'deletions': 95, 'state': 'closed'}]"
