pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
608581595,Matrix exponentiation using Scaling and Squaring Algorithm.,"'expm' method takes in an N*N array as an argument and returns an exponentiated
matrix of same dimension. Time Complexity of this approach is approximately O(15.n^3)

Reference:
[1] Awad H. Al-Mohy and Nicholas J. Higham (2009)
          ""A New Scaling and Squaring Algorithm for the Matrix Exponential.""
           SIAM Journal on Matrix Analysis and Applications.
           31 (3). pp. 970-989. ISSN 1095-7162

Signed-off-by: Prashanth Duvvuri <prashanthsedan@gmail.com>",True,17523,https://api.github.com/repos/chapel-lang/chapel/pulls/17523,https://github.com/chapel-lang/chapel/pull/17523,closed,601,0,3,10,3,42,2,0,"[{'name': 'area: Libraries / Modules'}, {'name': 'stat: Ready to Merge'}]",2021-04-04 17:29:25+00:00,2021-06-21 14:40:19+00:00,6729054.0,"77 days, 21:10:54","[{'comment_id': 609854353, 'comment_body': 'Is there a reason to abstract this into its own function? It would seem simpler to just call `dot`.', 'comment_created': datetime.datetime(2021, 4, 8, 15, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 609858460, 'comment_body': 'On this line (and others below), do we need the reshapes? There is probably some cost to each of these.', 'comment_created': datetime.datetime(2021, 4, 8, 16, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 609863970, 'comment_body': ""Somewhat stylistic -- I'd make `b` a `const`. Might allow for some optimizations, and conveys the intent more clearly.\r\n\r\nNote that these are going to be `real(64)` by default, which will force all the results to be that type. We have a few options here -- we could start by specializing to `real(64)` (and worry about other types later, if ever!), or these need to be correctly cast. My preference is the former, but @ben-albrecht might have a different take."", 'comment_created': datetime.datetime(2021, 4, 8, 16, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 609903653, 'comment_body': 'Hi @npadmana, I was intending to implement and use strassen approach to further optimize it.', 'comment_created': datetime.datetime(2021, 4, 8, 16, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 609906268, 'comment_body': ""Actually, I forgot to file a bug. There is an issue with the reshape function. Let's say A is a 2x2 matrix then 2*A should also be a 2x2 matrix. But I see that somehow the resultant matrix is getting flattened. Hence for now, I had to use the reshape function."", 'comment_created': datetime.datetime(2021, 4, 8, 16, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 642107981, 'comment_body': ""My suggestion is that we don't get into worrying about matrix multiplication. That's a can of worms that will completely take over the summer! :-) "", 'comment_created': datetime.datetime(2021, 5, 30, 17, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 642108781, 'comment_body': ""The code here and below doesn't use `comp_A4`, but `this.A4`. I think you need `comp_A4` and friends below.\r\n\r\nHowever, a different suggestion here -- it's a little hard to figure out whether this ends up creating a temporary array. So I might suggest that the `comp_A?` functions not actually return anything, but cache the results. "", 'comment_created': datetime.datetime(2021, 5, 30, 17, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 642108916, 'comment_body': 'You could write this more compactly as `var (U,V) = h.pade3();`  (and similarly below).', 'comment_created': datetime.datetime(2021, 5, 30, 18, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 642109547, 'comment_body': ""I'm tempted to directly call the LAPACK routine here, since that has all of this built in. We should capture this as an issue though (I thought one existed, but I could not find it)."", 'comment_created': datetime.datetime(2021, 5, 30, 18, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 642110180, 'comment_body': ""I might rewrite this as \r\n```\r\nprivate proc solvePQ(U: [?D], V: [D]){\r\n    var P = U+V;\r\n    var Q = -U+V;\r\n```\r\nI don't think one would ever call this routine for particularly large matrices, so I'm not worrying too much about fusing these two loops into a single one explicitly."", 'comment_created': datetime.datetime(2021, 5, 30, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 642704538, 'comment_body': 'For now, If its fine, I will be going ahead with ``` real ``` data type.', 'comment_created': datetime.datetime(2021, 5, 31, 23, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 643217286, 'comment_body': 'Yes, I\'m not sure why have I used this.A4 and not comp_Ax method.\r\n\r\nYeah, so the intent of comp_Ax methods is ""to only compute Ax if necessary else don\'t compute it"". Had we statically defined something like \r\n```\r\nA4 = dot(A2, A2)\r\nA6 = dot(A4, A2)\r\n.\r\n.\r\n```\r\nIt would compute these matrices even if not needed. On the contrary, do you think it\'s overkill? ', 'comment_created': datetime.datetime(2021, 6, 1, 15, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 645097461, 'comment_body': 'This seems like an implementation detail and thus maybe something that should be marked with `pragma ""no doc""`?', 'comment_created': datetime.datetime(2021, 6, 3, 20, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 645100261, 'comment_body': 'These seem like they could make use of associative arrays, where the index value is more descriptive of what they represent (see [the associative array primer](https://chapel-lang.org/docs/latest/primers/associative.html) for examples).  You could also instead use [sparse](https://chapel-lang.org/docs/latest/primers/sparse.html) arrays or arrays created over [strided](https://chapel-lang.org/docs/latest/primers/ranges.html#operators) indices so that the index corresponds with the field name more naturally', 'comment_created': datetime.datetime(2021, 6, 3, 20, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 645103305, 'comment_body': ""If we do intend to document this class, you'll want to follow the syntax that makes for pretty generated documentation ([The UnitTest module](https://github.com/chapel-lang/chapel/blob/master/modules/packages/UnitTest.chpl#L769) can be used as an example and you can find a more explicit description [in the chpldoc documentation](https://chapel-lang.org/docs/latest/tools/chpldoc/chpldoc.html))"", 'comment_created': datetime.datetime(2021, 6, 3, 20, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 645104024, 'comment_body': 'Is this TODO still a todo item?  Or was it resolved and not updated?', 'comment_created': datetime.datetime(2021, 6, 3, 20, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 645104391, 'comment_body': 'Should this method be deleted?  Moved somewhere else and uncommented?', 'comment_created': datetime.datetime(2021, 6, 3, 20, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 645106163, 'comment_body': ""Stylistic nit: you use varied naming strategies.  It'd be good to unify to camelCase for all field and method names (we're in the process of writing up a [style guide](https://github.com/chapel-lang/chapel/blob/master/doc/rst/developer/bestPractices/StandardModuleStyle.rst) for our modules, which I've linked)"", 'comment_created': datetime.datetime(2021, 6, 3, 20, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 645106489, 'comment_body': 'Should this be handled in this PR or a later one?', 'comment_created': datetime.datetime(2021, 6, 3, 20, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 645108116, 'comment_body': 'This comment I will be a bit more strict on following the documentation style requirements', 'comment_created': datetime.datetime(2021, 6, 3, 20, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 645108779, 'comment_body': 'It seems like this would be an appropriate time to `throw` an error, see [the error handling primer](https://chapel-lang.org/docs/latest/primers/errorHandling.html)', 'comment_created': datetime.datetime(2021, 6, 3, 20, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 645112041, 'comment_body': ""This test looks like it is missing an expected output file (see our documentation on the [test system](https://github.com/chapel-lang/chapel/blob/master/doc/rst/developer/bestPractices/TestSystem.rst#a-correctness-test).  Since you're using `assertAlmostEqual`, I think it should end up empty, but you'll still need a file."", 'comment_created': datetime.datetime(2021, 6, 3, 20, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 647568369, 'comment_body': ""Yes this is still a Todo item, we decided to take that up (if necessary) in second PR. I'm considering to leave it as is, if that is fine? :) "", 'comment_created': datetime.datetime(2021, 6, 8, 15, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 647577374, 'comment_body': ""Yup, that's fine!  Just make sure there's an issue tracking it, in case we get distracted and forget about it"", 'comment_created': datetime.datetime(2021, 6, 8, 15, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 650303664, 'comment_body': 'I thought `Math` was automatically `use`d everywhere. @lydia-duncan, @e-kayrakli -- should we be including this here?', 'comment_created': datetime.datetime(2021, 6, 11, 23, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 650303872, 'comment_body': 'oooh, I like this! I need to remember to use this in my code. :-)', 'comment_created': datetime.datetime(2021, 6, 11, 23, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 650307301, 'comment_body': 'A mathematical nit - norms are always real, even if the matrices are complex, so `eltType` is always `real`.', 'comment_created': datetime.datetime(2021, 6, 11, 23, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 650307946, 'comment_body': 'We should remember to file a bug report here.', 'comment_created': datetime.datetime(2021, 6, 11, 23, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 650309780, 'comment_body': 'I would write this sequence of tests (for different values of b) as a loop, and the checked result as an expression. I think that will make this clearer, for anyone reading this down the line.', 'comment_created': datetime.datetime(2021, 6, 11, 23, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 650310550, 'comment_body': 'For these diagonal matrices, you should use `setDiag`. Again, mostly cleaner to read (and the intention is more obvious). ', 'comment_created': datetime.datetime(2021, 6, 11, 23, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 650311058, 'comment_body': ""It's great that we got this for free! I'd also recommend adding `sincos` that returns both `sin` and `cos`, since that avoids duplicating work."", 'comment_created': datetime.datetime(2021, 6, 11, 23, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 650315168, 'comment_body': ""Ooh, I'm sorry I missed that."", 'comment_created': datetime.datetime(2021, 6, 11, 23, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 650321897, 'comment_body': 'Filed a bug [17912](https://github.com/chapel-lang/chapel/issues/17912)', 'comment_created': datetime.datetime(2021, 6, 12, 0, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 651042904, 'comment_body': 'I believe Nikhil is right and the use of Math is unnecessary.  Did you encounter issues without it?', 'comment_created': datetime.datetime(2021, 6, 14, 15, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 651044290, 'comment_body': 'Unfortunately this still doesn\'t match the documentation style for arguments (though since the class itself is marked with `pragma ""no doc""`, we won\'t see it in the documentation anyways).  It might be good practice to use the chpldoc syntax anyways, but I won\'t require it.', 'comment_created': datetime.datetime(2021, 6, 14, 15, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 651045981, 'comment_body': 'This function comment will need to be updated.  It should be e.g. `:arg A:`, as demonstrated on [the argument section of the chpldoc page](https://chapel-lang.org/docs/latest/tools/chpldoc/chpldoc.html#argument-and-return-yield-types)', 'comment_created': datetime.datetime(2021, 6, 14, 15, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 651050000, 'comment_body': 'I think it makes sense for all the `A*` fields to be capitalized, but this field is using PascalCase instead of camelCase.  It should use the capitalization style that `isAComputed` uses (camelCase)', 'comment_created': datetime.datetime(2021, 6, 14, 15, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 651050730, 'comment_body': ""Note that you're also using PascalCase for the `UseExactOneNorm` argument.  This should be camelCase (as should any other arguments in this PR)"", 'comment_created': datetime.datetime(2021, 6, 14, 15, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 652732617, 'comment_body': 'It works without math. I believe I incorporated it because I needed access to some function which I no longer need now. ', 'comment_created': datetime.datetime(2021, 6, 16, 14, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 653075707, 'comment_body': ""One last nit!  You want to move it so that the `.. note::` is the very last thing in this documentation comment.  Right now it's putting the `throws` and `returns` tags in the note itself and we don't want that.  Otherwise, this looks perfect, thanks!  And it passes testing"", 'comment_created': datetime.datetime(2021, 6, 16, 21, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 654566136, 'comment_body': 'I think this is missing backticks, did `make docs` work for you?  I got this message:\r\n```\r\nWarning, treated as error:\r\n/Users/lydia/Documents/Repositories/chapel/doc/rst/modules/packages/LinearAlgebra.rst:801:chpl:chplref reference target not found: 2D Array\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 16, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 654566232, 'comment_body': ""We're so close!  Almost there :)"", 'comment_created': datetime.datetime(2021, 6, 18, 16, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}]","[{'commit_sha': '9365c7328118f4ab46bb9ded7e6944db06100e40', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46e155a2ac81c520ea6faf77cb5f692a65c1b5b2', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bfdb1948b255dd1e4de5c5513b1603b56d138da', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81e8acb6c836d834441a4a2e0f7e5b12bfc19ce7', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a2dd85cf1b4561fdf81e3c9ded2bba9234adb53', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ce62110af803e2d159f70e695953a145b988634', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dc0c41a4d54668395e053177c6f070ba32744f2', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aea5444dcbb7c5d060e32e28fbba6c4a222f4277', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6af976ad32a72d8ea182b03d728987637b06ede', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a30cdc52c520fe9825f43ffde9c6fe2619ba2e3a', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}]",Prashanth Duvvuri,12830464,,User,,34,,32,7
675821978,Matrix Exponentials - Performance & LAPACK based solvePQ.,"This PR includes Performance tests and implements functionality to compute solvePQ using LAPACK.

Signed-off-by: Prashanth Duvvuri <prashanthsedan@gmail.com>",True,17966,https://api.github.com/repos/chapel-lang/chapel/pulls/17966,https://github.com/chapel-lang/chapel/pull/17966,closed,519,16,6,9,11,21,0,0,[],2021-06-22 23:27:16+00:00,2021-07-14 16:04:41+00:00,1874245.0,"21 days, 16:37:25","[{'comment_id': 657325046, 'comment_body': 'indentation', 'comment_created': datetime.datetime(2021, 6, 23, 17, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 657325157, 'comment_body': ""probably `const` is better, but that's ok"", 'comment_created': datetime.datetime(2021, 6, 23, 17, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 657325449, 'comment_body': 'Are we using `Y`?', 'comment_created': datetime.datetime(2021, 6, 23, 17, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 657325883, 'comment_body': 'Could you break this into two lines that fit into 80 characters?', 'comment_created': datetime.datetime(2021, 6, 23, 17, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 657326243, 'comment_body': 'This applies to other lines in the code, as well', 'comment_created': datetime.datetime(2021, 6, 23, 17, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 657327552, 'comment_body': 'I think we want this to iterate over `b.domain`. Same applies to other similar loops in this file', 'comment_created': datetime.datetime(2021, 6, 23, 17, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 657328778, 'comment_body': 'Probably not a serious issue, but there maybe some costs associated with unpacking the return tuple here. \r\n\r\nThis might be a serious issue especially with very small matrices.', 'comment_created': datetime.datetime(2021, 6, 23, 17, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 657329571, 'comment_body': 'Can you remove these inner blocks in each test?', 'comment_created': datetime.datetime(2021, 6, 23, 17, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 657334803, 'comment_body': 'But as a more fundamental question: do we get huge performance differences with different values that we iterate over here? ', 'comment_created': datetime.datetime(2021, 6, 23, 17, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 657562020, 'comment_body': 'Hi Engin, I used the inner blocks in order to reuse the variable names like the array ""b"". (which mostly had different sizes for each case). If you think that makes a difference in the performance then I\'ll remove it.', 'comment_created': datetime.datetime(2021, 6, 24, 1, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 657654676, 'comment_body': 'For Pade values, yes, there was a difference of 3-4 milli seconds for each case for a matrix of size 20', 'comment_created': datetime.datetime(2021, 6, 24, 6, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 658938984, 'comment_body': ""It is not about performance.\r\n\r\nBut I don't follow, this block is the same as the function body? Ah, I see. The functions starting with this one doesn't need such a block."", 'comment_created': datetime.datetime(2021, 6, 25, 17, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 659964308, 'comment_body': 'are we using `M`?', 'comment_created': datetime.datetime(2021, 6, 28, 17, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 659964408, 'comment_body': 'are we using `M`?', 'comment_created': datetime.datetime(2021, 6, 28, 17, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 659964773, 'comment_body': 'it appears in others cases as well', 'comment_created': datetime.datetime(2021, 6, 28, 17, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 661018946, 'comment_body': ""I initially used `M` to hold returned values of the test methods in question and used it to print it for correctness. I removed it now. I'll push the code now."", 'comment_created': datetime.datetime(2021, 6, 29, 23, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 664729078, 'comment_body': 'Can you add a comment here saying that this is a potential performance issue?', 'comment_created': datetime.datetime(2021, 7, 6, 16, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 664729493, 'comment_body': ""I *think* we only need this skipif if the test is supposed to run with LAPACK. I'll need to check while testing"", 'comment_created': datetime.datetime(2021, 7, 6, 16, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 664729715, 'comment_body': 'nit: you can just `writeln()`', 'comment_created': datetime.datetime(2021, 7, 6, 16, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 668068336, 'comment_body': ""Sure I'll let that be now. I'll push the updates if you run into any issues."", 'comment_created': datetime.datetime(2021, 7, 12, 16, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 669156973, 'comment_body': ""Yep, let's remove this file. We are unnecessarily skipping this test on systems that doesn't have LAPACK (which is most of our nightly testing systems)"", 'comment_created': datetime.datetime(2021, 7, 13, 22, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}]","[{'commit_sha': 'b535c74a0dad525cb2201d34e9a4ca9796c29bb6', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5290922a123178b6a393567d19c24cd930258b4e', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78df381a43dfa8a602d76e46f0d7370b17d9c2b6', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1917cc2d83d12ae9db7069860fb9aa247a3f782d', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66a4a70f501e5e07b932e8bb64e680630994bf91', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fd8d57f9b7bed8b45304f3f52b6523884e306c7', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01ec08e36225b47f0c5004d16fb78ebba4b4d3bc', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0accb0f6516354e2e0a6773f631d48d88e197e5f', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc29fb3296849f8b6ce5bbf9f2379051abd8400c', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}]",Prashanth Duvvuri,12830464,,User,,34,,32,7
702405263,Sparse-Dense Matrix Multiplication,"-- Added a utility method which returns the product of a Sparse Matrix and a
   Dense Matrix in that particular order respectively. Method returns a
   Dense Matrix.
-- Used this method in dot function. So that dot can now support product of
   a Sparse Matrix and a Dense Matrix.(in any order)

Signed-off-by: Prashanth Duvvuri <prashanthsedan@gmail.com>",True,18152,https://api.github.com/repos/chapel-lang/chapel/pulls/18152,https://github.com/chapel-lang/chapel/pull/18152,closed,299,3,5,6,3,8,3,0,"[{'name': 'area: Libraries / Modules'}, {'name': 'area: Tests / Benchmarks'}, {'name': 'stat: Ready to Merge'}]",2021-08-03 15:58:16+00:00,2021-08-12 14:46:08+00:00,773272.0,"8 days, 22:47:52","[{'comment_id': 682700321, 'comment_body': ""The tests look nice, thanks!  It'd be good to have a test of this error message as well :)"", 'comment_created': datetime.datetime(2021, 8, 4, 15, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 682707823, 'comment_body': 'Sure, should I have few for complex types too?', 'comment_created': datetime.datetime(2021, 8, 4, 15, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 682710625, 'comment_body': 'Sounds good to me, yeah!', 'comment_created': datetime.datetime(2021, 8, 4, 15, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 684683489, 'comment_body': 'As we discussed on the telecon, it might be good if `sparseDenseMatMul` handled this case without actually transposing the array. You might do it by passing an option to your routine. That might reduce the amount of copying back and forth.', 'comment_created': datetime.datetime(2021, 8, 7, 22, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 684683732, 'comment_body': 'Following up on my comment above, this would be the place to add in the dense-sparse matrix multiplication.', 'comment_created': datetime.datetime(2021, 8, 7, 22, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 684683841, 'comment_body': 'should this be a `forall`? @lydia-duncan and @e-kayrakli might have an opinion here.', 'comment_created': datetime.datetime(2021, 8, 7, 22, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 684683881, 'comment_body': ""I think these are reversed -- if I'm reading this correctly, `B` is sparse and `C` is dense?"", 'comment_created': datetime.datetime(2021, 8, 7, 22, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 686233343, 'comment_body': ""It seems like it would be reasonable for this to be a `forall`, yeah - A and B aren't changed, and C only seems to be changed using the iteration variable as an index, so updates should be independent of each other."", 'comment_created': datetime.datetime(2021, 8, 10, 18, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}]","[{'commit_sha': '9b25ce325eabe789241b865b12c79ca186066af6', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0af5cdda56cfd6de24b3417d062589dd5433278', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fa887eb8b73b5747e9dd7d1ce905a15d62ccb14', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f17d0cec4a3beb56e783b88a4befab2405fcd7a9', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6739f4548198ffc069361c0c836a4770a98039f3', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e5384c3eaf073af327f766b7cd414f76a01ac0f', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}]",Prashanth Duvvuri,12830464,,User,,34,,32,7
701900505,One-norm estimate and Tests.,"-- Added one-norm estimate functionality to expm method. 
-- Added additional tests to testExpm.",False,18149,https://api.github.com/repos/chapel-lang/chapel/pulls/18149,https://github.com/chapel-lang/chapel/pull/18149,closed,721,221,2,11,4,36,1,0,[{'name': 'post-release'}],2021-08-03 02:18:37+00:00,2021-11-29 23:13:06+00:00,10270469.0,"118 days, 20:54:29","[{'comment_id': 682844473, 'comment_body': 'Could you add a comment either explaining how all this works or a link to something that does that?', 'comment_created': datetime.datetime(2021, 8, 4, 18, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682844960, 'comment_body': 'Could you put these `param` and `type` before the after `type eltType`, so that the generic fields are all together?', 'comment_created': datetime.datetime(2021, 8, 4, 18, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682846693, 'comment_body': ""Technically, these could be `var As: [2..10 by 2] matType`, right? I think that could make things a bit easier to read, even though it can hurt performance a tiny bit. I don't think the performance hit matters, that much, personally.\r\n\r\nNote that, if you make that change, you should make similar changes to `exact*` and `approx*` below, and change the caching flag arrays to regular arrays instead of associative, as well."", 'comment_created': datetime.datetime(2021, 8, 4, 18, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682847727, 'comment_body': ""Can't we set `useExactOneNorm` in the initializer to account for complex values and avoid this repeated `||`s?"", 'comment_created': datetime.datetime(2021, 8, 4, 18, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682849618, 'comment_body': ""It might be a better style to change this try/catch into an if/else where you check for squareness of the matrix (I believe that's the condition where `onenormest` could throw)"", 'comment_created': datetime.datetime(2021, 8, 4, 18, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682851226, 'comment_body': 'Reading the code, I think I want to make this change. It looks like you have a lot of repetition, and I feel like that repetition would go away, if you do this.\r\n\r\nSomething like\r\n\r\n```chapel\r\nproc comp_looseD(val: int) {\r\n  ...\r\n  ... this.approxD[val] ...\r\n  ... this.compD(val) ...\r\n}\r\n```\r\n\r\nshould be able to get rid of the redundancy.\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 4, 18, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682851811, 'comment_body': '(I also realize that this is nothing new entirely, but it looks like this PR exacerbates an already existing issue)', 'comment_created': datetime.datetime(2021, 8, 4, 18, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682852826, 'comment_body': 'I see the comment in the user-facing doc, but I think something here could be useful for the reader, as well.', 'comment_created': datetime.datetime(2021, 8, 4, 18, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682853468, 'comment_body': 'Add `pragma ""no doc""`, and maybe say in the following documentation that `expm` accepts dense and CSR/CSC arrays.', 'comment_created': datetime.datetime(2021, 8, 4, 18, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682853708, 'comment_body': ""shouldn't this be `private`?"", 'comment_created': datetime.datetime(2021, 8, 4, 18, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682854621, 'comment_body': 'This function should also check that `D.rank == 2`', 'comment_created': datetime.datetime(2021, 8, 4, 18, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682857428, 'comment_body': 'This goes into the overarching topic of ""what should the return array X look like for a given function Y with the argument Z?"" question.\r\n\r\nHere, the user could pass a non-zero based `A`, but here you\'re returning the maximums along a dimension in a 0-based vector. I think your `b`\'s should be `var b: [ADom.dim(1-axis)] A.eltType`\r\n\r\nNote that once you make that change your if/else blocks will be even more similar. Then you can change the forall to look like\r\n\r\n```\r\nforall idx in ADom with (max reduce b) {\r\n  const bIdx = idx[1-axis];\r\n  b[bIdx] = max(b[bIdx], A[i,j]);\r\n}\r\n```\r\n\r\nwhich can allow you to drop the condition altogether.', 'comment_created': datetime.datetime(2021, 8, 4, 18, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682858793, 'comment_body': ""You can also drop this function and make the one above fully generic (no where clause), and do the `isCSDom` check inside the function and do 2 different forall's based on that.\r\n\r\nOverall, this `maxAlongAxis` impementation feels too cumbersome to me.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 8, 4, 18, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682859510, 'comment_body': 'Can you rename this to `ArgSortComparator` or something like that?', 'comment_created': datetime.datetime(2021, 8, 4, 18, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682859991, 'comment_body': 'given that this record is really tiny, I prefer this method to be a primary method (defined inside the record defintion without the prefix `Cmp.`)', 'comment_created': datetime.datetime(2021, 8, 4, 18, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682860230, 'comment_body': 'at least', 'comment_created': datetime.datetime(2021, 8, 4, 18, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682861342, 'comment_body': 'I think we discussed this, but I forgot. When you say ""parallel"" here, does it mean equal? Then why is this not just `X == Y`?', 'comment_created': datetime.datetime(2021, 8, 4, 18, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682862130, 'comment_body': 'I believe you could implement this without division and it would perform much better :)', 'comment_created': datetime.datetime(2021, 8, 4, 18, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682862337, 'comment_body': 'at least', 'comment_created': datetime.datetime(2021, 8, 4, 18, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682862885, 'comment_body': 'I am still struggling with the word ""parallel""', 'comment_created': datetime.datetime(2021, 8, 4, 18, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682863373, 'comment_body': 'I think this is part of the other PR, right?', 'comment_created': datetime.datetime(2021, 8, 4, 18, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682866959, 'comment_body': ""Probably just `return [(i, j) in zip((...A.domain.dims())] A[i,j];` should do this.\r\n\r\nA.domain.dims returns a tuple of ranges, which you expand (like python's prefix `*`) and zip over."", 'comment_created': datetime.datetime(2021, 8, 4, 18, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682867192, 'comment_body': 'Also, add a check for `rank == 2`, or cover for cases with any other rank.', 'comment_created': datetime.datetime(2021, 8, 4, 18, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682868094, 'comment_body': ""Add documentation.\r\n\r\nAlso, I can't remember whether there was any discussion around this interface. At the very least, I prefer `oneNormEst` and `itMax`."", 'comment_created': datetime.datetime(2021, 8, 4, 18, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 682868687, 'comment_body': 'Not a must, but\r\n\r\n```\r\nvar est = if t>=n then norm(A) else _onenormest(A);\r\n```', 'comment_created': datetime.datetime(2021, 8, 4, 18, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 684685108, 'comment_body': 'I agree with this, and I think a similar approach could work for the `absSum` cases. ', 'comment_created': datetime.datetime(2021, 8, 7, 22, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 684685432, 'comment_body': ""This is similar in spirit to @e-kayrakli's comment below. I wonder if we need to have two versions of `maxAlongAxis` (and also `absSum`). It looks like the only reason you have the two versions is because you want to use the `reduce` approach for dense matrices. But I think the code for sparse should also work for dense, and it would be just more compact code."", 'comment_created': datetime.datetime(2021, 8, 7, 22, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 684686010, 'comment_body': 'you mean `complex`, right?\r\n', 'comment_created': datetime.datetime(2021, 8, 7, 22, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 684686059, 'comment_body': 'Look up `sgn`. :-)\r\n', 'comment_created': datetime.datetime(2021, 8, 7, 22, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 684694689, 'comment_body': 'Here and below, I think these are meant to be `approxD6`, `approxD8` etc. \r\n\r\nThis is a good example where the refactorization that @e-kayrakli suggested would be useful.', 'comment_created': datetime.datetime(2021, 8, 8, 0, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'npadmana', 'type': 'User'}, {'comment_id': 691645218, 'comment_body': 'Yes, it means equal. When `X == Y` is used, it throws `error: iterator or promoted expression iterator used in if or while condition` error.', 'comment_created': datetime.datetime(2021, 8, 18, 22, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 691654555, 'comment_body': 'Ah, right. Because vector `==` returns element-wise equality in another vector. You need `&& reduce X==Y`. I think that should work.', 'comment_created': datetime.datetime(2021, 8, 18, 22, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 692130822, 'comment_body': 'I realized, `return [(i, j) in zip((...A.domain.dims()))] A[i,j];` only iterates over the diagonal elements. Let say `A.domain.dims()` returns `(0..2,0..2)`. The statement would just iterate diagonal elements of `A`', 'comment_created': datetime.datetime(2021, 8, 19, 13, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 692242331, 'comment_body': 'Yes, I updated the code now. I copy based this method from the other (merged) PR to avoid merge conflicts.', 'comment_created': datetime.datetime(2021, 8, 19, 15, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 692288049, 'comment_body': 'Ah... of course.. you need to put the shape in a domain first. We have a ""parent domain"" query but AFAIK that\'s not user facing today. Anyways, what you need is even simpler: `return [(i, j) in {(...A.domain.dims())} A[i,j];`', 'comment_created': datetime.datetime(2021, 8, 19, 16, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 731200666, 'comment_body': 'Is this correct?  The documentation on `norm` says that it performs a 2-norm for a 1D array and a Frobenius norm for 2D arrays.  But this function is called oneNormEst, which leads me to believe it intends to perform a 1-norm only, and so far as I know that is different than the ones called out by the `norm` function.', 'comment_created': datetime.datetime(2021, 10, 18, 18, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}]","[{'commit_sha': 'c2c0480a562b232ebdd84a24f8b937b797c1125d', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1840556a2243ca38cd834063156246f0f5ef1a89', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddb012ec0573001a6ee4606d571bdd7ed755b567', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce1b4ae936db16a11bfb2578c3d68ba56c649cde', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '043c620830c93f91a98c2fa8bdcc2a34bf894bd0', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7a36f147971f2b2452a6c9162f1d7377164197f', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abd052603611365328bfb4330eb41648eb03d5eb', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cdb508fd7f19fbaea65efffe07dde219723cbe3', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30ab38aeb9e0251e132fc9b28c83116ed88d7e58', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9364acc838d8ccb44eb0bede87d30f823cec2103', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9369633ae6dac98cfef5380b8e5a6f3f974444ff', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}]",Prashanth Duvvuri,12830464,,User,,34,,32,7
719293121,Action of Matrix Exponentials,"Added functionality to perform the action of an exponential on a vector or another matrix of rank=2.

TODO:
1) Need to add documentation.
2) change naming convention.
3) add functionality for Sparse matrix.",False,18293,https://api.github.com/repos/chapel-lang/chapel/pulls/18293,https://github.com/chapel-lang/chapel/pull/18293,closed,915,221,2,12,7,0,0,2,[],2021-08-25 06:19:23+00:00,2021-11-29 23:19:43+00:00,8355620.0,"96 days, 17:00:20",[],"[{'commit_sha': 'c2c0480a562b232ebdd84a24f8b937b797c1125d', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1840556a2243ca38cd834063156246f0f5ef1a89', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddb012ec0573001a6ee4606d571bdd7ed755b567', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce1b4ae936db16a11bfb2578c3d68ba56c649cde', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '043c620830c93f91a98c2fa8bdcc2a34bf894bd0', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7a36f147971f2b2452a6c9162f1d7377164197f', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abd052603611365328bfb4330eb41648eb03d5eb', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cdb508fd7f19fbaea65efffe07dde219723cbe3', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30ab38aeb9e0251e132fc9b28c83116ed88d7e58', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9364acc838d8ccb44eb0bede87d30f823cec2103', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9369633ae6dac98cfef5380b8e5a6f3f974444ff', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf5aeebe4b0cd22c8d1a3ed3bc37f2b5607c3f74', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}]",Prashanth Duvvuri,12830464,,User,,34,,32,7
587662735,Issue #17182: adding checksumming to mason,"1) Added capability to store a checksum for a mason package in its toml file.
Have sorted the file paths, and computed a single hash for the project and
stored it in toml.",False,17380,https://api.github.com/repos/chapel-lang/chapel/pulls/17380,https://github.com/chapel-lang/chapel/pull/17380,closed,887,77,33,6,13,22,1,1,[{'name': 'post-release'}],2021-03-09 09:12:46+00:00,2022-01-07 17:18:14+00:00,26294728.0,"304 days, 8:05:28","[{'comment_id': 679525417, 'comment_body': ""It looks like this is only being used one time in MasonUtils in the `computehash` function. We'd prefer to not modify the standard library in this case. We do have `timeSinceEpoch` that returns the number of seconds since the epoch as a `real` and could be rounded to the desired precision. Alternatively you could just use the expression you are returning in place of the function call.\r\nWith that said, we are requesting changes to the `computehash` function below which would eliminate the need for a timestamp altogether."", 'comment_created': datetime.datetime(2021, 7, 29, 22, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 679525889, 'comment_body': 'Suggest renaming `CheckSum` to `checksum` here and in several other files where it is present.', 'comment_created': datetime.datetime(2021, 7, 29, 22, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 679526481, 'comment_body': 'See prior comment about renaming `CheckSum` to `checksum`', 'comment_created': datetime.datetime(2021, 7, 29, 22, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 679527192, 'comment_body': 'See prior comment about renaming `CheckSum` to `checksum`', 'comment_created': datetime.datetime(2021, 7, 29, 22, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 679528079, 'comment_body': 'See prior comment about renaming `CheckSum` to `checksum`', 'comment_created': datetime.datetime(2021, 7, 29, 22, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 679534568, 'comment_body': ""This function is also defined in MasonBuild. Is there any difference between the implementations? If not, let's move the definition to MasonUtils, which both of these files already have `use` statements for. See the corresponding comment on this function in MasonBuild."", 'comment_created': datetime.datetime(2021, 7, 29, 22, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 679538989, 'comment_body': 'Is the use of `SHA256Implementation` needed here? It looks like it can be removed.', 'comment_created': datetime.datetime(2021, 7, 29, 23, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 679539907, 'comment_body': 'nit: small typo `openned`', 'comment_created': datetime.datetime(2021, 7, 29, 23, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 679569545, 'comment_body': ""Let's try using an in memory file instead of a temp file. The `openmem()` function ([docs here](https://chapel-lang.org/docs/modules/standard/IO.html#IO.openmem)) can be used to keep this all in memory rather than writing and reading back from disk. \r\nIf memory space is a concern, we can change the 'computeHash' function so that instead of writing the entire contents and path of each file, we hash each file individually and store the result along with the path, then compute the hash on the resulting set of paths and hashes. This can be accomplished in a later PR if need be. "", 'comment_created': datetime.datetime(2021, 7, 30, 0, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 679569935, 'comment_body': 'nit: wrap this very long line', 'comment_created': datetime.datetime(2021, 7, 30, 0, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 679570896, 'comment_body': ""As mentioned previously, this method is also defined in MasonUpdate. If the functions are equivalent then let's move it to MasonUtils, as both these files already use MasonUtils."", 'comment_created': datetime.datetime(2021, 7, 30, 0, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 679572457, 'comment_body': ""As part of using in memory files, we need to add an overload of this function which takes an in memory file as it's parameter, then move most all of this logic into the body of that function. Finally, update this method to just open the `path` and return the result of calling the new overload. This way we can hash a file in memory as well as a file on disk. You will likely need to add `private use IO only file;` to the `FileHashing` module to enable the new overload.\r\n"", 'comment_created': datetime.datetime(2021, 7, 30, 0, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 679577441, 'comment_body': ""Let's avoid writing the .toml file to disk without the hash just to the calculate the new hash. One option could be to read and modify the .toml file in memory, then exclude it from `paths` and pass the file to computeHash as an additional `file` parameter. \r\nThis relates to changes in MasonBuild and MasonUpdate which would be needed to avoid writing modified .toml to disk."", 'comment_created': datetime.datetime(2021, 7, 30, 1, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 679577928, 'comment_body': ""Instead of rewriting the .toml file, let's try opening a copy in memory and modifying it there. Will require modifying `computeHash` to take the in memory .toml file as an additional parameter, while excluding it from the `paths` variable. See previous comment on MasonUtils line 573."", 'comment_created': datetime.datetime(2021, 7, 30, 1, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 680038637, 'comment_body': 'Be sure to add text to the output of `--help` indicating that this new flag exists and how to use it.', 'comment_created': datetime.datetime(2021, 7, 30, 16, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 680038737, 'comment_body': 'Be sure to add text to the output of `--help` indicating that this new flag exists and how to use it.', 'comment_created': datetime.datetime(2021, 7, 30, 16, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 680038880, 'comment_body': 'Be sure to add text to the output of `--help` indicating that this new flag exists and how to use it.', 'comment_created': datetime.datetime(2021, 7, 30, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 680038968, 'comment_body': 'Be sure to add text to the output of `--help` indicating that this new flag exists and how to use it.', 'comment_created': datetime.datetime(2021, 7, 30, 16, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 680039187, 'comment_body': 'Be sure to add text to the output of `--help` indicating that this new flag exists and how to use it.', 'comment_created': datetime.datetime(2021, 7, 30, 16, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 680039408, 'comment_body': 'Be sure to add text to the output of `--help` indicating that this new flag exists and how to use it.', 'comment_created': datetime.datetime(2021, 7, 30, 16, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 680051782, 'comment_body': 'When the package does not have a hash, we should also notify the user that we are adding a hash when previously there was none, both here and in MasonUpdate.', 'comment_created': datetime.datetime(2021, 7, 30, 16, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}, {'comment_id': 680052629, 'comment_body': 'As with MasonBuild, when the package does not have a hash, we should also notify the user that we are adding a hash when previously there was none.', 'comment_created': datetime.datetime(2021, 7, 30, 16, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'arezaii', 'type': 'User'}]","[{'commit_sha': '888cbb6713fcaeb66604a925272accb10638b6d8', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f19c8e7ece5327a595711ef5663961b621f425ff', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a43c9bdd6335e37704ef99835db66f1eeddc8d6', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44977664edd76b5c6c2a4536aa49bb0f5135dcba', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7a5d4bbe51e0e975f70c1270274d1e5eabc5033', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f54de936fa000c761de29426b9ae71cdf6e0a5ab', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}]",Prashanth Duvvuri,12830464,,User,,34,,32,7
573236283,Issue #17136: Changes to choice method of Random module to support sampling on N-Dimensions,Changes to choice method of Random module to support sampling on N-Dimensional Array/Domain. Also have added few test cases (need to refine). Existing tests run without any issues.,False,17168,https://api.github.com/repos/chapel-lang/chapel/pulls/17168,https://github.com/chapel-lang/chapel/pull/17168,closed,160,62,4,2,3,8,1,1,[{'name': 'post-release'}],2021-02-15 04:19:44+00:00,2021-11-29 23:13:53+00:00,24864849.0,"287 days, 18:54:09","[{'comment_id': 665756149, 'comment_body': ""Looks like these two can be refactored by quite a bit. \r\n\r\nFor example this helper could be implemented as (I swapped the arg order to keep compile-time arguments earlier in the argument list, out of personal taste and somewhat of convention):\r\n\r\n```chapel\r\n  proc getIndicesDefinition(param rank, shape: domain) {\r\n    type eltType = if rank==1 then int else rank*int;\r\n    var indices: [shape] eltType;\r\n    return indices;\r\n  }\r\n```\r\n\r\nYou can either implement the one above similarly, or even better, it could be just:\r\n\r\n```chapel\r\nproc getSampleDefinition(param rank, numElements: int) {\r\n  return getIndicesDefinition(rank, {0..<numElements});\r\n}\r\n```\r\n\r\nAlso, do you anticipate these functions to be useful for the user?  (I don't) If not, you should make them `private proc`\r\n"", 'comment_created': datetime.datetime(2021, 7, 7, 22, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 665758953, 'comment_body': ""Reading the code a bit more, I'd remove both of these helpers, and add a type function helper like\r\n\r\n```chapel\r\nprivate proc _choiceIndexTypeHelper(X: domain) type {\r\n  return if X.rank == 1 then int else X.rank*int;\r\n}\r\n```\r\n\r\n(I'm not a big fan of the preceding `_`, but that's how similar functions are named, and let's be consistent)\r\n\r\nAnd then change the array declarations where you're currently using these functions as\r\n\r\n```chapel\r\nvar a: [b] _choiceIndexTypeHelper(X);\r\n```\r\n\r\nand such."", 'comment_created': datetime.datetime(2021, 7, 7, 23, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 665759355, 'comment_body': ""I don't have a problem with this, but, is there any reason you are not keeping the previous idiom? (`prob.reindex(bla)`)"", 'comment_created': datetime.datetime(2021, 7, 7, 23, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 665759862, 'comment_body': 'I think we can remove dimensionality from all these statements. `an optional array` is sufficient, to me.', 'comment_created': datetime.datetime(2021, 7, 7, 23, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 665761990, 'comment_body': 'I am seeing a similar change here, so there must be something that I am missing that makes this necessary.', 'comment_created': datetime.datetime(2021, 7, 7, 23, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 665762708, 'comment_body': 'Could you at least add a comment here saying that if we\'re hitting this `if`, `X` must be domain? You can also make the code more self-documenting by \r\n\r\n```chapel\r\nelse if isDomainValue(x) {\r\n  if X.rank > 1 {\r\n\r\n  }\r\n  else {\r\n\r\n  }\r\n}\r\nelse {\r\n  compilerError(""Unexpected type"");\r\n}', 'comment_created': datetime.datetime(2021, 7, 7, 23, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 665762962, 'comment_body': 'Why did we need this?', 'comment_created': datetime.datetime(2021, 7, 7, 23, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}]","[{'commit_sha': 'e26e25396eed2cccb8efedb30f2ddb1dbb22588f', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe1236a4555d0d27c7e04fe39049c52dc47d0666', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}]",Prashanth Duvvuri,12830464,,User,,34,,32,7
564374678,Issue: 16866 (chpldoc not properly generated for few usecases),"There were 2 types of usecases specified in the bug.
Type 1:
When the variables are instantiated with a non-Array based looping constructs (for or forall), the documentation thus generated is produced incorrectly. (produces ""AppendExpr.Loop04"" and ""AppendExpr.Loop03"").
Type 2:
When the variables are instantiated with a try or try-bang constructs, the documentation thus generated is produced incorrectly. (produces ""AppendExpr.Call09"")

Fix:
Have processed these use cases separately in a different if-else case. Have made changes to AppendExpr method specific to CallExpr for try based usecase and to AppendExpr method specific to LoopExpr for loop based usecase.

Have done sanity testing and Project Tests have passed and the code doesn't introduce backward incompatibility.

Signed-off-by: Prashanth Duvvuri <prashanthsedan@gmail.com>",True,17058,https://api.github.com/repos/chapel-lang/chapel/pulls/17058,https://github.com/chapel-lang/chapel/pull/17058,closed,89,68,5,4,10,8,0,0,[],2021-01-30 07:03:20+00:00,2021-02-04 22:24:32+00:00,487272.0,"5 days, 15:21:12","[{'comment_id': 568728153, 'comment_body': 'Most of the uses I see of `__primitive` do not use string literals for the arguments other than the name of the primitive being called, so I believe it would be incorrect to always surround the arguments with quotation marks.  If quotation marks are needed, I think the sub-expression probably should be the one handling it.', 'comment_created': datetime.datetime(2021, 2, 2, 16, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 568729640, 'comment_body': 'Minor nit, but it would be good to restore the missing space to the above two if statements', 'comment_created': datetime.datetime(2021, 2, 2, 16, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 568758828, 'comment_body': ""Hopefully won't be relevant, but it might be good to include a space at the start of this line, as otherwise it would output `...]AppendExpr.Loop01` or `... doAppendExpr.Loop01`"", 'comment_created': datetime.datetime(2021, 2, 2, 16, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 568881116, 'comment_body': 'I\'m so naive! 😅 I didn\'t realize this until your comment. I have covered this usecase now. \r\nAlso, `var a = foo(""this is"", a, ""function"", call);` is this a valid usecase? If yes, I see that the documentation generated for this usecase is `var a = foo(this is, a, function, call);` which seems to be wrong. Should I also add fix for this usecase? Thanks :)', 'comment_created': datetime.datetime(2021, 2, 2, 19, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 568885971, 'comment_body': ""I think that'd be great!  But also, feel free to handle that in a separate PR :)"", 'comment_created': datetime.datetime(2021, 2, 2, 19, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 568902999, 'comment_body': ""Fixing this usecase is breaking few tests. I think It'd be better if I handle it in a separate PR. Thanks :) "", 'comment_created': datetime.datetime(2021, 2, 2, 20, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}, {'comment_id': 570586914, 'comment_body': ""Oh, and would you mind filing an issue to track this other problem?  If I don't hear from you in a few days I'll do it myself, but I wanted to make sure it was a tracked action item in case life gets in the way of you completing it"", 'comment_created': datetime.datetime(2021, 2, 4, 22, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 570697973, 'comment_body': ""Sure I'll file an issue in few hours :)"", 'comment_created': datetime.datetime(2021, 2, 5, 3, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'prashanth018', 'type': 'User'}]","[{'commit_sha': 'fe26f98e88e0333c081336796111e4654ad92bd4', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01a5c820ff2ea7009010b9c08ee01bfb45774163', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e58dfe95bcce71ec592e6c12c6a68cbe465ebfa3', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11b363836796a3ab22c6d10899326eb430247d6c', 'committer_username': 'prashanth018', 'committer_name': 'Prashanth Duvvuri', 'committer_email': None, 'commit_date': datetime.datetime(2015, 6, 10, 13, 27, 43, tzinfo=datetime.timezone.utc)}]",Prashanth Duvvuri,12830464,,User,,34,,32,7

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
21663285,chapel,chapel-lang/chapel,Chapel,415,1764,63,280,102283,2818,46,107,"[{'id': 719293121, 'number': 18293, 'closed': datetime.datetime(2021, 11, 29, 23, 19, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 25, 6, 19, 23, tzinfo=datetime.timezone.utc), 'time_taken': 8355620.0, 'time_delta': '96 days, 17:00:20', 'additions': 915, 'deletions': 221, 'state': 'closed'}, {'id': 702405263, 'number': 18152, 'closed': datetime.datetime(2021, 8, 12, 14, 46, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 15, 58, 16, tzinfo=datetime.timezone.utc), 'time_taken': 773272.0, 'time_delta': '8 days, 22:47:52', 'additions': 299, 'deletions': 3, 'state': 'closed'}, {'id': 701900505, 'number': 18149, 'closed': datetime.datetime(2021, 11, 29, 23, 13, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 2, 18, 37, tzinfo=datetime.timezone.utc), 'time_taken': 10270469.0, 'time_delta': '118 days, 20:54:29', 'additions': 721, 'deletions': 221, 'state': 'closed'}, {'id': 685355208, 'number': 18042, 'closed': datetime.datetime(2021, 9, 8, 17, 41, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 16, 49, 53, tzinfo=datetime.timezone.utc), 'time_taken': 5446273.0, 'time_delta': '63 days, 0:51:13', 'additions': 413, 'deletions': 3, 'state': 'closed'}, {'id': 675821978, 'number': 17966, 'closed': datetime.datetime(2021, 7, 14, 16, 4, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 22, 23, 27, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1874245.0, 'time_delta': '21 days, 16:37:25', 'additions': 519, 'deletions': 16, 'state': 'closed'}, {'id': 608581595, 'number': 17523, 'closed': datetime.datetime(2021, 6, 21, 14, 40, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 4, 17, 29, 25, tzinfo=datetime.timezone.utc), 'time_taken': 6729054.0, 'time_delta': '77 days, 21:10:54', 'additions': 601, 'deletions': 0, 'state': 'closed'}, {'id': 587662735, 'number': 17380, 'closed': datetime.datetime(2022, 1, 7, 17, 18, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 9, 9, 12, 46, tzinfo=datetime.timezone.utc), 'time_taken': 26294728.0, 'time_delta': '304 days, 8:05:28', 'additions': 887, 'deletions': 77, 'state': 'closed'}, {'id': 573236283, 'number': 17168, 'closed': datetime.datetime(2021, 11, 29, 23, 13, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 15, 4, 19, 44, tzinfo=datetime.timezone.utc), 'time_taken': 24864849.0, 'time_delta': '287 days, 18:54:09', 'additions': 160, 'deletions': 62, 'state': 'closed'}, {'id': 568912109, 'number': 17111, 'closed': datetime.datetime(2021, 2, 10, 18, 50, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 7, 5, 40, 41, tzinfo=datetime.timezone.utc), 'time_taken': 306590.0, 'time_delta': '3 days, 13:09:50', 'additions': 47, 'deletions': 0, 'state': 'closed'}, {'id': 564374678, 'number': 17058, 'closed': datetime.datetime(2021, 2, 4, 22, 24, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 30, 7, 3, 20, tzinfo=datetime.timezone.utc), 'time_taken': 487272.0, 'time_delta': '5 days, 15:21:12', 'additions': 89, 'deletions': 68, 'state': 'closed'}]"
