pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
734515829,Adding RateLimit headers and few simplifications,"It was part of the TODOs in GSoC to add RateLimit headers, but it was put on hold to prioritize other work. I have tried to add a very basic implementation of them considering the complex 3scale data model. The filter will include these headers as long as there is no internal failure.

Let me know if I missed something. Thanks!",True,65,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/65,https://github.com/3scale-labs/gsoc-wasm-filters/pull/65,closed,156,58,7,14,0,9,0,0,[],2021-09-15 12:23:13+00:00,2021-09-16 08:54:09+00:00,73856.0,20:30:56,"[{'comment_id': 709324747, 'comment_body': 'If any one of these is never set then it will have a maximum u64 value, which is not what we want. This is asking for you to use an Option and default it all to None, then emit headers when they are `Some(...)`.', 'comment_created': datetime.datetime(2021, 9, 15, 15, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 709326121, 'comment_body': 'Add these comments in a separate commit.', 'comment_created': datetime.datetime(2021, 9, 15, 15, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 709327184, 'comment_body': 'change commit title to remove ""make change to"" - it is always implicit :)', 'comment_created': datetime.datetime(2021, 9, 15, 15, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 709355786, 'comment_body': 'Here also we need to add rate limit headers. `send_http_response` uses local response which directly sends a response from here and destroy the filter object. `on_http_response_headers` gets triggered only  in the response path from upstream back to downstream.  ', 'comment_created': datetime.datetime(2021, 9, 15, 16, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 709424958, 'comment_body': 'Actually Lahiru, this is not correct. I thought the same but after some testing, I saw `on_http_response_headers` is called even on the local response from `send_http_response`. You can even check the CI, in the rate-limit test, RateLimit headers are in fact sent back even though we are not adding it above. Interestingly, this fact allowed me to clean `visible-logs` up in the last PR as well ;)', 'comment_created': datetime.datetime(2021, 9, 15, 17, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709490180, 'comment_body': 'Oh Yea :sweat_smile: ', 'comment_created': datetime.datetime(2021, 9, 15, 18, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709491198, 'comment_body': 'I was thinking Optioning the whole struct at first but thought about too many unwraps and checks but option for fields is better! Added.', 'comment_created': datetime.datetime(2021, 9, 15, 18, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709497298, 'comment_body': 'Split in action.', 'comment_created': datetime.datetime(2021, 9, 15, 19, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709499963, 'comment_body': 'Ahh my bad !! It works because headers are added from the `on_http_response_headers` of the same filter. For filter chain `A -> B -> C`, if we do a local response from filter B, then the response path callbacks will get invoked from `B`  and downwards. ', 'comment_created': datetime.datetime(2021, 9, 15, 19, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}]","[{'commit_sha': '429d7e28ea5e3e71f2818dec8849356c64bb3d1d', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04275efdcba11e8609640622a5933609688f65ec', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f33761a9314f85cfc3664fa12597f4851273aea0', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bf740c124e544b9eac2a01e639706fa50dc1d96', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afb52f6ce9492d057799e18da5fbc619c6c30259', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa0e2647a8c4a20996bd83a18ab7f7e169ac0b3f', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12de250e923ffce4878f1f0cb537a5c3fcdc7041', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0635a4a9251669005d7edb7f7d7d5200cf6c5d46', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b47a8bcff846b36304dd0628b296c3c2a8c88d6', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e67eb3f7de6ed2a0b9ed225b1e8a47d2eb8df95', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3922c52e2d9366f9201250528dd0f62976e1d4de', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4b885d703b4ace727133aef160aa11423a49546', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d6ed9da6aab9e08f117ba434721e7d8cecad822', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b41d8fa4674c156593c5a5c015306e4176472a89', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}]",Rahul Anand,15275199,rahulanand16nov@gmail.com,User,,26,,6,12
700468615,Cache tests and middleware for custom latency,"This PR adds tests for cache and touches 90+% of the cache-filter code. Along with tests, I have added a middleware service to add custom delays into the reply from apisonator for the cache. 
",True,42,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/42,https://github.com/3scale-labs/gsoc-wasm-filters/pull/42,closed,309,30,14,10,0,0,0,0,[],2021-07-30 17:45:50+00:00,2021-08-02 07:10:56+00:00,221106.0,"2 days, 13:25:06",[],"[{'commit_sha': '59cb0390c320203d6e137563530ad05f21553997', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1802a8bf96df116cff8741f496c7b99c44c85dc', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '435fc1951b5bc8a244f029130031f0ee9c1937a7', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2c1ee5254460c6d23546b3fe1a9d83072c4a069', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f64a5f010111c9f0ddb333336ea7d5cdab931027', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8a8dab7223f8f245f0996bfef5962cc31289bb9', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '735bf7a7c2d92aeb67e5e8acef966438f3098766', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6fd45b6cef3fea2eb223a10eda269509093aed4', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29a44e684c616a864749a4740d69aa15c8a7104f', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11e98042ff613a3cb87d73bb4aeeb5e4e181498c', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}]",Rahul Anand,15275199,rahulanand16nov@gmail.com,User,,26,,6,12
730652751,Benchmark report for high traffic scenario,"This PR includes benchmark reports for high traffic scenario of,

1. Proxy setup without unique callouts feature
2. Proxy setup with unique callouts feature ",True,63,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/63,https://github.com/3scale-labs/gsoc-wasm-filters/pull/63,closed,67796,6,4,4,0,0,0,0,[],2021-09-09 14:32:38+00:00,2021-09-10 13:46:47+00:00,83649.0,23:14:09,[],"[{'commit_sha': 'cd586f60726bc799bd753d50c1993a46bf335b44', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5acbef63f6945b01238c9ba93185987ddc4077e', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b6fc6e0722b4a3401207eeedaa287cfbfb937f4', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ee4eb8a2a8ddc00e7ba69484247c4768e70aa51', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}]",Lahiru Udayanga,43727928,lahiru97udayanga@gmail.com,User,,104,,50,22
734515829,Adding RateLimit headers and few simplifications,"It was part of the TODOs in GSoC to add RateLimit headers, but it was put on hold to prioritize other work. I have tried to add a very basic implementation of them considering the complex 3scale data model. The filter will include these headers as long as there is no internal failure.

Let me know if I missed something. Thanks!",True,65,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/65,https://github.com/3scale-labs/gsoc-wasm-filters/pull/65,closed,156,58,7,14,0,9,0,0,[],2021-09-15 12:23:13+00:00,2021-09-16 08:54:09+00:00,73856.0,20:30:56,"[{'comment_id': 709324747, 'comment_body': 'If any one of these is never set then it will have a maximum u64 value, which is not what we want. This is asking for you to use an Option and default it all to None, then emit headers when they are `Some(...)`.', 'comment_created': datetime.datetime(2021, 9, 15, 15, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 709326121, 'comment_body': 'Add these comments in a separate commit.', 'comment_created': datetime.datetime(2021, 9, 15, 15, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 709327184, 'comment_body': 'change commit title to remove ""make change to"" - it is always implicit :)', 'comment_created': datetime.datetime(2021, 9, 15, 15, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 709355786, 'comment_body': 'Here also we need to add rate limit headers. `send_http_response` uses local response which directly sends a response from here and destroy the filter object. `on_http_response_headers` gets triggered only  in the response path from upstream back to downstream.  ', 'comment_created': datetime.datetime(2021, 9, 15, 16, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 709424958, 'comment_body': 'Actually Lahiru, this is not correct. I thought the same but after some testing, I saw `on_http_response_headers` is called even on the local response from `send_http_response`. You can even check the CI, in the rate-limit test, RateLimit headers are in fact sent back even though we are not adding it above. Interestingly, this fact allowed me to clean `visible-logs` up in the last PR as well ;)', 'comment_created': datetime.datetime(2021, 9, 15, 17, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709490180, 'comment_body': 'Oh Yea :sweat_smile: ', 'comment_created': datetime.datetime(2021, 9, 15, 18, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709491198, 'comment_body': 'I was thinking Optioning the whole struct at first but thought about too many unwraps and checks but option for fields is better! Added.', 'comment_created': datetime.datetime(2021, 9, 15, 18, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709497298, 'comment_body': 'Split in action.', 'comment_created': datetime.datetime(2021, 9, 15, 19, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709499963, 'comment_body': 'Ahh my bad !! It works because headers are added from the `on_http_response_headers` of the same filter. For filter chain `A -> B -> C`, if we do a local response from filter B, then the response path callbacks will get invoked from `B`  and downwards. ', 'comment_created': datetime.datetime(2021, 9, 15, 19, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}]","[{'commit_sha': '429d7e28ea5e3e71f2818dec8849356c64bb3d1d', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04275efdcba11e8609640622a5933609688f65ec', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f33761a9314f85cfc3664fa12597f4851273aea0', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bf740c124e544b9eac2a01e639706fa50dc1d96', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afb52f6ce9492d057799e18da5fbc619c6c30259', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa0e2647a8c4a20996bd83a18ab7f7e169ac0b3f', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12de250e923ffce4878f1f0cb537a5c3fcdc7041', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0635a4a9251669005d7edb7f7d7d5200cf6c5d46', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b47a8bcff846b36304dd0628b296c3c2a8c88d6', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e67eb3f7de6ed2a0b9ed225b1e8a47d2eb8df95', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3922c52e2d9366f9201250528dd0f62976e1d4de', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4b885d703b4ace727133aef160aa11423a49546', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d6ed9da6aab9e08f117ba434721e7d8cecad822', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b41d8fa4674c156593c5a5c015306e4176472a89', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}]",Rahul Anand,15275199,rahulanand16nov@gmail.com,User,,26,,6,12
728109581,Update wasm-auth and tests to fix CI,"Due to the last update to wasm-auth and changes to the link for self-maintained Rust SDK, CI was not working at all and this PR fixes those issues by updating config files and the submodule.

Also, when auth callout timed out, there was no response being sent back to the client, which is also fixed in this PR.

@NomadXD Please merge this before merging #59 ",True,60,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/60,https://github.com/3scale-labs/gsoc-wasm-filters/pull/60,closed,435,218,8,7,7,0,0,0,[],2021-09-06 17:35:47+00:00,2021-09-06 19:56:30+00:00,8443.0,2:20:43,[],"[{'commit_sha': '46c6f176071400494c3c52922af64e8ff640af9f', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41127a011f7fa03e91c10824421e8c0644fadd43', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7ef874109c89f71bb19ba6c523c9784de3467bb', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eb79cb313e50d21d418f55dec1837ec07e63353', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '676c5eba99380dc6c7f4991d12d28b98071ce4a3', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb60852b505960947b583ba561dfcce313820c9d', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95622adf455502c92abc8eadb1700be53549ab19', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}]",Rahul Anand,15275199,rahulanand16nov@gmail.com,User,,26,,6,12
728109581,Update wasm-auth and tests to fix CI,"Due to the last update to wasm-auth and changes to the link for self-maintained Rust SDK, CI was not working at all and this PR fixes those issues by updating config files and the submodule.

Also, when auth callout timed out, there was no response being sent back to the client, which is also fixed in this PR.

@NomadXD Please merge this before merging #59 ",True,60,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/60,https://github.com/3scale-labs/gsoc-wasm-filters/pull/60,closed,435,218,8,7,7,0,0,0,[],2021-09-06 17:35:47+00:00,2021-09-06 19:56:30+00:00,8443.0,2:20:43,[],"[{'commit_sha': '46c6f176071400494c3c52922af64e8ff640af9f', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41127a011f7fa03e91c10824421e8c0644fadd43', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7ef874109c89f71bb19ba6c523c9784de3467bb', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eb79cb313e50d21d418f55dec1837ec07e63353', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '676c5eba99380dc6c7f4991d12d28b98071ce4a3', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb60852b505960947b583ba561dfcce313820c9d', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95622adf455502c92abc8eadb1700be53549ab19', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}]",Rahul Anand,15275199,rahulanand16nov@gmail.com,User,,26,,6,12
734515829,Adding RateLimit headers and few simplifications,"It was part of the TODOs in GSoC to add RateLimit headers, but it was put on hold to prioritize other work. I have tried to add a very basic implementation of them considering the complex 3scale data model. The filter will include these headers as long as there is no internal failure.

Let me know if I missed something. Thanks!",True,65,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/65,https://github.com/3scale-labs/gsoc-wasm-filters/pull/65,closed,156,58,7,14,0,9,0,0,[],2021-09-15 12:23:13+00:00,2021-09-16 08:54:09+00:00,73856.0,20:30:56,"[{'comment_id': 709324747, 'comment_body': 'If any one of these is never set then it will have a maximum u64 value, which is not what we want. This is asking for you to use an Option and default it all to None, then emit headers when they are `Some(...)`.', 'comment_created': datetime.datetime(2021, 9, 15, 15, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 709326121, 'comment_body': 'Add these comments in a separate commit.', 'comment_created': datetime.datetime(2021, 9, 15, 15, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 709327184, 'comment_body': 'change commit title to remove ""make change to"" - it is always implicit :)', 'comment_created': datetime.datetime(2021, 9, 15, 15, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 709355786, 'comment_body': 'Here also we need to add rate limit headers. `send_http_response` uses local response which directly sends a response from here and destroy the filter object. `on_http_response_headers` gets triggered only  in the response path from upstream back to downstream.  ', 'comment_created': datetime.datetime(2021, 9, 15, 16, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 709424958, 'comment_body': 'Actually Lahiru, this is not correct. I thought the same but after some testing, I saw `on_http_response_headers` is called even on the local response from `send_http_response`. You can even check the CI, in the rate-limit test, RateLimit headers are in fact sent back even though we are not adding it above. Interestingly, this fact allowed me to clean `visible-logs` up in the last PR as well ;)', 'comment_created': datetime.datetime(2021, 9, 15, 17, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709490180, 'comment_body': 'Oh Yea :sweat_smile: ', 'comment_created': datetime.datetime(2021, 9, 15, 18, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709491198, 'comment_body': 'I was thinking Optioning the whole struct at first but thought about too many unwraps and checks but option for fields is better! Added.', 'comment_created': datetime.datetime(2021, 9, 15, 18, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709497298, 'comment_body': 'Split in action.', 'comment_created': datetime.datetime(2021, 9, 15, 19, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709499963, 'comment_body': 'Ahh my bad !! It works because headers are added from the `on_http_response_headers` of the same filter. For filter chain `A -> B -> C`, if we do a local response from filter B, then the response path callbacks will get invoked from `B`  and downwards. ', 'comment_created': datetime.datetime(2021, 9, 15, 19, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}]","[{'commit_sha': '429d7e28ea5e3e71f2818dec8849356c64bb3d1d', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04275efdcba11e8609640622a5933609688f65ec', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f33761a9314f85cfc3664fa12597f4851273aea0', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bf740c124e544b9eac2a01e639706fa50dc1d96', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afb52f6ce9492d057799e18da5fbc619c6c30259', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa0e2647a8c4a20996bd83a18ab7f7e169ac0b3f', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12de250e923ffce4878f1f0cb537a5c3fcdc7041', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0635a4a9251669005d7edb7f7d7d5200cf6c5d46', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b47a8bcff846b36304dd0628b296c3c2a8c88d6', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e67eb3f7de6ed2a0b9ed225b1e8a47d2eb8df95', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3922c52e2d9366f9201250528dd0f62976e1d4de', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4b885d703b4ace727133aef160aa11423a49546', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d6ed9da6aab9e08f117ba434721e7d8cecad822', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b41d8fa4674c156593c5a5c015306e4176472a89', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}]",Rahul Anand,15275199,rahulanand16nov@gmail.com,User,,26,,6,12
732997219,Cleaning up redundant code pertaining to visible logs,"Since on_http_response_headers() can itself add the stored logs onto the response headers, there is no need of dead code to take care of scenario when this feature is disabled. Just a clean up and should not break anything :)",True,64,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/64,https://github.com/3scale-labs/gsoc-wasm-filters/pull/64,closed,4,50,4,2,0,0,0,0,[],2021-09-13 18:29:44+00:00,2021-09-13 19:10:50+00:00,2466.0,0:41:06,[],"[{'commit_sha': '1324e1c256a88e4c2f0049aa4e9de411f613efbc', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e21302cc25bcab0559d14e65e315a3e70fb681b9', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}]",Rahul Anand,15275199,rahulanand16nov@gmail.com,User,,26,,6,12
734515829,Adding RateLimit headers and few simplifications,"It was part of the TODOs in GSoC to add RateLimit headers, but it was put on hold to prioritize other work. I have tried to add a very basic implementation of them considering the complex 3scale data model. The filter will include these headers as long as there is no internal failure.

Let me know if I missed something. Thanks!",True,65,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/65,https://github.com/3scale-labs/gsoc-wasm-filters/pull/65,closed,156,58,7,14,0,9,0,0,[],2021-09-15 12:23:13+00:00,2021-09-16 08:54:09+00:00,73856.0,20:30:56,"[{'comment_id': 709324747, 'comment_body': 'If any one of these is never set then it will have a maximum u64 value, which is not what we want. This is asking for you to use an Option and default it all to None, then emit headers when they are `Some(...)`.', 'comment_created': datetime.datetime(2021, 9, 15, 15, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 709326121, 'comment_body': 'Add these comments in a separate commit.', 'comment_created': datetime.datetime(2021, 9, 15, 15, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 709327184, 'comment_body': 'change commit title to remove ""make change to"" - it is always implicit :)', 'comment_created': datetime.datetime(2021, 9, 15, 15, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 709355786, 'comment_body': 'Here also we need to add rate limit headers. `send_http_response` uses local response which directly sends a response from here and destroy the filter object. `on_http_response_headers` gets triggered only  in the response path from upstream back to downstream.  ', 'comment_created': datetime.datetime(2021, 9, 15, 16, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 709424958, 'comment_body': 'Actually Lahiru, this is not correct. I thought the same but after some testing, I saw `on_http_response_headers` is called even on the local response from `send_http_response`. You can even check the CI, in the rate-limit test, RateLimit headers are in fact sent back even though we are not adding it above. Interestingly, this fact allowed me to clean `visible-logs` up in the last PR as well ;)', 'comment_created': datetime.datetime(2021, 9, 15, 17, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709490180, 'comment_body': 'Oh Yea :sweat_smile: ', 'comment_created': datetime.datetime(2021, 9, 15, 18, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709491198, 'comment_body': 'I was thinking Optioning the whole struct at first but thought about too many unwraps and checks but option for fields is better! Added.', 'comment_created': datetime.datetime(2021, 9, 15, 18, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709497298, 'comment_body': 'Split in action.', 'comment_created': datetime.datetime(2021, 9, 15, 19, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 709499963, 'comment_body': 'Ahh my bad !! It works because headers are added from the `on_http_response_headers` of the same filter. For filter chain `A -> B -> C`, if we do a local response from filter B, then the response path callbacks will get invoked from `B`  and downwards. ', 'comment_created': datetime.datetime(2021, 9, 15, 19, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}]","[{'commit_sha': '429d7e28ea5e3e71f2818dec8849356c64bb3d1d', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04275efdcba11e8609640622a5933609688f65ec', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f33761a9314f85cfc3664fa12597f4851273aea0', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bf740c124e544b9eac2a01e639706fa50dc1d96', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afb52f6ce9492d057799e18da5fbc619c6c30259', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa0e2647a8c4a20996bd83a18ab7f7e169ac0b3f', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12de250e923ffce4878f1f0cb537a5c3fcdc7041', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0635a4a9251669005d7edb7f7d7d5200cf6c5d46', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b47a8bcff846b36304dd0628b296c3c2a8c88d6', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e67eb3f7de6ed2a0b9ed225b1e8a47d2eb8df95', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3922c52e2d9366f9201250528dd0f62976e1d4de', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4b885d703b4ace727133aef160aa11423a49546', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d6ed9da6aab9e08f117ba434721e7d8cecad822', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b41d8fa4674c156593c5a5c015306e4176472a89', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}]",Rahul Anand,15275199,rahulanand16nov@gmail.com,User,,26,,6,12
716807884,benchmark folders and files added as linguist-vendored,Ignore generated html report of benchmark from language stats,True,52,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/52,https://github.com/3scale-labs/gsoc-wasm-filters/pull/52,closed,1,1,1,1,0,0,0,0,[],2021-08-20 15:05:16+00:00,2021-08-20 16:17:09+00:00,4313.0,1:11:53,[],"[{'commit_sha': 'd181025dded9a569c07ef4eeb9ac8dd99f7eafa8', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}]",Lahiru Udayanga,43727928,lahiru97udayanga@gmail.com,User,,104,,50,22
681616157,re-modification of apps for retries,This PR adds re-modification of newly retrieved apps when the application set is failed due to contention with other threads.,True,25,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/25,https://github.com/3scale-labs/gsoc-wasm-filters/pull/25,closed,118,73,6,3,1,9,0,0,[],2021-07-01 08:29:18+00:00,2021-07-02 08:28:34+00:00,86356.0,23:59:16,"[{'comment_id': 662110715, 'comment_body': ""We don't need this check. `for num_try in 1..max_tries` is 1 to max_tries-1. So this is always true. "", 'comment_created': datetime.datetime(2021, 7, 1, 8, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 662128295, 'comment_body': ""Actually, change is required in the start `for num_try in 1..(max_tries+1)`. We need to check that because we don't want to get a new application if that's the last try for the set."", 'comment_created': datetime.datetime(2021, 7, 1, 9, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 662139809, 'comment_body': 'ah yes. for loop should go up to `max_retries+1` and if is required. ', 'comment_created': datetime.datetime(2021, 7, 1, 9, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 662329963, 'comment_body': 'What would happen if a user sets `max_tries` to the value `4294967295`?', 'comment_created': datetime.datetime(2021, 7, 1, 14, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 662332138, 'comment_body': 'Would this hold if we launch two parallel requests using the same application?', 'comment_created': datetime.datetime(2021, 7, 1, 14, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 662336767, 'comment_body': ""We are trying to prevent parallel calls so that only a single call to the 3scale is made for a unique application. I am trying to create a POC to prove that it's possible. Even if this assumption falters, we are going to overwrite the same application through different worker threads, and the last overwrite will be used for cache hit flow."", 'comment_created': datetime.datetime(2021, 7, 1, 14, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 662393810, 'comment_body': ""What is the mechanism used to prevent those potential parallel calls? If that still allowed two potential writers, I'd be extra cautious that they will actually be writing the same exact thing and that no read happens at the same time."", 'comment_created': datetime.datetime(2021, 7, 1, 15, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 662402923, 'comment_body': 'I am still working on the POC to avoid those parallel calls but a possible solution is to store context_ids into shared data and avoid a call if there is already a pending request from 3scale for that application.', 'comment_created': datetime.datetime(2021, 7, 1, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 662429039, 'comment_body': 'Yes, that might be enough.', 'comment_created': datetime.datetime(2021, 7, 1, 16, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}]","[{'commit_sha': '9382bb0c868f45c1bae10146a4a732ea41b7cd55', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f041f69e03c89660ac9b8ca24fefce2ac12aae6b', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a76a93d6bcfe3656499edafbaf8edb4aa6f4507', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}]",Rahul Anand,15275199,rahulanand16nov@gmail.com,User,,26,,6,12
679388815,"integration tests, docs, auth filter added","This PR includes,

- Integration of `threescale-wasm-auth` filter as a git sub-module
- Integration test framework for writing integration tests
- Integration tests for several scenarios
- Makefile build, test, run commands
- Updated README with build, test, run commands and few examples
- Added integration tests to github actions as a dependent job of the build job",True,24,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/24,https://github.com/3scale-labs/gsoc-wasm-filters/pull/24,closed,1435,23,20,2,1,7,0,0,[],2021-06-28 20:43:32+00:00,2021-07-01 08:07:41+00:00,213849.0,"2 days, 11:24:09","[{'comment_id': 660110525, 'comment_body': 'will fix', 'comment_created': datetime.datetime(2021, 6, 28, 20, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 660110659, 'comment_body': 'will fix', 'comment_created': datetime.datetime(2021, 6, 28, 20, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 660482827, 'comment_body': 'Probably not very important, but note you are using 1.16 elsewhere in the go module configuration.', 'comment_created': datetime.datetime(2021, 6, 29, 10, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 660486810, 'comment_body': ""Don't match on this header as it will most likely be removed."", 'comment_created': datetime.datetime(2021, 6, 29, 10, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 660527142, 'comment_body': 'Sorry I have several golang versions installed on my machine and was working with 1.16. Will change the CI to 1.16. ', 'comment_created': datetime.datetime(2021, 6, 29, 11, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 660527727, 'comment_body': 'Okay will remove that. Anything else that needs to be checked other than http status ?', 'comment_created': datetime.datetime(2021, 6, 29, 11, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 660616805, 'comment_body': 'HTTP rate limiting headers once we have that implemented :)', 'comment_created': datetime.datetime(2021, 6, 29, 13, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}]","[{'commit_sha': '441c86d1a7d9b340633b4c91ba4485935ade1841', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e9559ab8d7b3c774671e943afe780af1f5837cd', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}]",Lahiru Udayanga,43727928,lahiru97udayanga@gmail.com,User,,104,,50,22
728814494,Merge Unique-Callout into the main branch,Merging unqiue-callout-mq into main branch.,True,62,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/62,https://github.com/3scale-labs/gsoc-wasm-filters/pull/62,closed,1027,22,12,14,0,0,0,0,[],2021-09-07 17:14:31+00:00,2021-09-08 12:29:16+00:00,69285.0,19:14:45,[],"[{'commit_sha': '34515d6581bce9af37f706de9b264b4dbc8c8a84', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ef74a45173f231075e50e7334de48df71d6cd9', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be0111e7749f0068c9e47dd8cd7f8cd6089b3544', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9683064fe3662634cb0f28ecedbfcb6cd38efc8', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f322451e0bbb3303663be8ec7407a361c8b844e0', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ed2392518fca71eda48e0b364798134867a33fe', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da803b89a0553da5615d892de5149456993e9096', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd55429fb736613276fe5196d8ceaeaed5e17ecb', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffc95221b30dc0f4307dc5dba4e484364f8d38fa', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a02293a90cd284fdbf2da6f772ba39dc647af709', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea52ea2146a961a43da316b60f8c54c9102bfd88', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5278fd2d88c50302c2c0a0e1fb5bee9d92d39629', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cd6fb3a992a37413bd9e650bf09c098a910d914', 'committer_username': 'unleashed', 'committer_name': 'Alejandro Martinez Ruiz', 'committer_email': 'alex@flawedcode.org', 'commit_date': datetime.datetime(2010, 2, 11, 13, 29, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4780784773e07135eec5009a3edbd297feb19656', 'committer_username': 'rahulanand16nov', 'committer_name': 'Rahul Anand', 'committer_email': 'rahulanand16nov@gmail.com', 'commit_date': datetime.datetime(2015, 10, 24, 7, 33, 25, tzinfo=datetime.timezone.utc)}]",Rahul Anand,15275199,rahulanand16nov@gmail.com,User,,26,,6,12
679388815,"integration tests, docs, auth filter added","This PR includes,

- Integration of `threescale-wasm-auth` filter as a git sub-module
- Integration test framework for writing integration tests
- Integration tests for several scenarios
- Makefile build, test, run commands
- Updated README with build, test, run commands and few examples
- Added integration tests to github actions as a dependent job of the build job",True,24,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/24,https://github.com/3scale-labs/gsoc-wasm-filters/pull/24,closed,1435,23,20,2,1,7,0,0,[],2021-06-28 20:43:32+00:00,2021-07-01 08:07:41+00:00,213849.0,"2 days, 11:24:09","[{'comment_id': 660110525, 'comment_body': 'will fix', 'comment_created': datetime.datetime(2021, 6, 28, 20, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 660110659, 'comment_body': 'will fix', 'comment_created': datetime.datetime(2021, 6, 28, 20, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 660482827, 'comment_body': 'Probably not very important, but note you are using 1.16 elsewhere in the go module configuration.', 'comment_created': datetime.datetime(2021, 6, 29, 10, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 660486810, 'comment_body': ""Don't match on this header as it will most likely be removed."", 'comment_created': datetime.datetime(2021, 6, 29, 10, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}, {'comment_id': 660527142, 'comment_body': 'Sorry I have several golang versions installed on my machine and was working with 1.16. Will change the CI to 1.16. ', 'comment_created': datetime.datetime(2021, 6, 29, 11, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 660527727, 'comment_body': 'Okay will remove that. Anything else that needs to be checked other than http status ?', 'comment_created': datetime.datetime(2021, 6, 29, 11, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 660616805, 'comment_body': 'HTTP rate limiting headers once we have that implemented :)', 'comment_created': datetime.datetime(2021, 6, 29, 13, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'unleashed', 'type': 'User'}]","[{'commit_sha': '441c86d1a7d9b340633b4c91ba4485935ade1841', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e9559ab8d7b3c774671e943afe780af1f5837cd', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}]",Lahiru Udayanga,43727928,lahiru97udayanga@gmail.com,User,,104,,50,22
721571004,Unique callout benchmarks,"This PR includes the benchmark results, reports and generated diagrams for the unique callouts benchmarks.",True,59,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/59,https://github.com/3scale-labs/gsoc-wasm-filters/pull/59,closed,887,3,25,18,1,0,0,0,[],2021-08-27 19:41:02+00:00,2021-09-06 21:17:09+00:00,869767.0,"10 days, 1:36:07",[],"[{'commit_sha': '22d34b462c7dde7b0cded378948a7e59d135d5b6', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d17a5e3227bbcfc25ccc5ee2dd8205958462288', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32c9c200e2af1a9b0d225738b9a46e9bc0e69601', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13483501f1c442924f3c017e4e5ddce7cf0bb1c3', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9458de1f043cc95d04439e5c68e05f0fd2db696', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6da2eb2c0ba46d5d62bcbc750ee46f5b490a9513', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11ba372378c2b6f88d7655ef25ac2ced6b7de57a', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f55b7d76f4adc538e80f61442e090e5e1aa0bb6', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6457c557f776a356b053bcc728e379c60a489f22', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c35a18c3e0850a3eab7862d85844bb6a23cf33b', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1e8ece84a22592a487b9d82aa60a6744d3c88e4', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5d72bfec0256a5ce1c1f13efa14dabbb5bc1599', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa85ad840db2c5ce52f5ca6fb7f6ecbae0594599', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '605e6672eb6156ca495802eec87f55ca4957c053', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5edbf78880d8a6c8509e103256e729bff31efa3a', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0d8594e86f26cf91bc7989a8317d60f57875fc6', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aa654cb1a5d6bde00ec90a6d1c5df315abd20ef', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f97ea9af9452d04be98f4d1cb7a29b77ad0684d4', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}]",Lahiru Udayanga,43727928,lahiru97udayanga@gmail.com,User,,104,,50,22
697819052,Singleton integration tests ,"This PR includes
- Integration tests for singelton flush based on periodical flush
- Added UUID for keys to prevent dependency between test cases in case helper methods fail (If we use the same hard coded service ids , if the clean up methods fail for some reason then the successor tests also will fail when trying to create a service which already exists)
- Few other minor fixes",True,40,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/40,https://github.com/3scale-labs/gsoc-wasm-filters/pull/40,closed,278,145,8,7,0,16,0,0,[],2021-07-27 12:32:15+00:00,2021-07-28 08:38:53+00:00,72398.0,20:06:38,"[{'comment_id': 677432596, 'comment_body': ""Since we have serialized tests, I don't think so we should have a case where ITs fail due to duplicate service without any error on the writer side. I was thinking about parallelizing the tests but that would require a different solution than this, which I can discuss if you want."", 'comment_created': datetime.datetime(2021, 7, 27, 13, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 677436526, 'comment_body': ""I think eventually serves no purpose here since `Push` defers till the response is received and adding a 500ms wait before `Push` returns (I've added that already in my new PR) kind of guarantees that things are processed by the Apisonator."", 'comment_created': datetime.datetime(2021, 7, 27, 13, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 677439282, 'comment_body': 'Note here that default case will return `""""test-service-id""""` and `""""test-service-token""""`', 'comment_created': datetime.datetime(2021, 7, 27, 13, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 677440962, 'comment_body': ""It's just preference but I think if you are using `if testName == ...` then better add these conditions into the test as-it-is because now, readers have to be aware of two blocks for a single test i.e `BeforeTest` and the test function itself."", 'comment_created': datetime.datetime(2021, 7, 27, 13, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 677476650, 'comment_body': ""There can be issues in the network or in the server side as well.  Also there's another issue with stats. When you create a usage and delete it the stats won't get deleted. We have to delete the stats which we don't do at the moment. So when you create a new service/app combination, it already contains stats. Managing apisonator apps, services and keys is a useless effort since it doesn't provide us any benefit and all the apisonator states get deleted after the tests. We don't have to worry about the apisonator apps, services when we use UUIDs. \r\n\r\nEdit: Parallelising the tests is not a good approach for these kind of tests where we need a fresh proxy instance for each tests/suites. Also the usual way to run integration tests and CI are to run them sequentially under constrained resources for longer times as jobs. Not running them all at once parallel. Parallel tests are possible for independent test cases where high resources are not required for each test.  "", 'comment_created': datetime.datetime(2021, 7, 27, 13, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 677479785, 'comment_body': ""For things like timeouts and waits, it's better to use `require.Eventually` rather than adding `time.Sleep()` since the test suite already has this feature. It will perform retries periodically according to the way we define the related times. I'm thinking to remove the static `time.Sleep` in proxy start up method and do a check there. (`eventually` is not for the `Push` but for the http call failure happen inside that)"", 'comment_created': datetime.datetime(2021, 7, 27, 14, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 677481600, 'comment_body': ""okay will fix. I think we don't need a default since we use UUIDs"", 'comment_created': datetime.datetime(2021, 7, 27, 14, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 677482251, 'comment_body': 'It waits for the function to return success but `cmd.Run` already returns success even though the proxy is still loading so eventually serves no purpose there as well since we are waiting for the proxy to get ready which has no event attached to it.', 'comment_created': datetime.datetime(2021, 7, 27, 14, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 677487306, 'comment_body': ""Weird, I've only seen running tests in parallel but that may be just my experience and if you think sequential is better than fine by me. Also, what stats are you talking about here??"", 'comment_created': datetime.datetime(2021, 7, 27, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 677488374, 'comment_body': 'okay will add the pre-conditions to the test itself. ', 'comment_created': datetime.datetime(2021, 7, 27, 14, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 677494487, 'comment_body': ""How you design and write tests depends on the requirement. So I'm not saying that parallel tests are bad. I'm saying that for our case it is not feasible to run several proxy instances for the integration tests. apisonator records the usages as stats. You can see the redis database for the stats. We are not deleting the stats. We don't need to consider those stats since we use UUIDs. Otherwise if you create the new service app key combination, it will have the usage from the previous tests. \r\n\r\nEdit: We already have a very brittle integration test setup. So it's not worth to add more complexity to the test setup. But we should focus on writing integration tests for different scenarios with the limited time we have. "", 'comment_created': datetime.datetime(2021, 7, 27, 14, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 677495602, 'comment_body': ""yeah that's why we need to do a check using eventually to test whether the proxy is up or not. "", 'comment_created': datetime.datetime(2021, 7, 27, 14, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 677499099, 'comment_body': 'Can you explain to me how it does that? As far as I know, you have to define the event that says ""Ok, it\'s done now"". What event are you using to make sure the proxy is up and can receive new requests?', 'comment_created': datetime.datetime(2021, 7, 27, 14, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 677506710, 'comment_body': 'From the admin  check for the listener. \r\n```go\r\nrequire.Eventually(t, func() bool {\r\n    res, err := http.Get(fmt.Sprintf(""http://localhost:%d/listeners"", adminPort))\r\n    if err != nil {\r\n\t    return false\r\n    }\r\n    defer res.Body.Close()\r\n    return res.StatusCode == http.StatusOK\r\n}, 5*time.Second, 100*time.Millisecond, ""Envoy has not started"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 677510779, 'comment_body': 'Better solution! Please add this into the PR itself. Still, I think eventually serves no purpose for pushing states since you have no event for states being updated from the Apisonator.', 'comment_created': datetime.datetime(2021, 7, 27, 14, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 678007407, 'comment_body': 'No need to have a event to check apisonator. Helper methods returns client errors, server errors and network errors and `Push` returns those errors directly to the caller. In case of such issues, eventually performs retries. ', 'comment_created': datetime.datetime(2021, 7, 28, 6, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}]","[{'commit_sha': '30c23df79569783ac154aa38a8fd763bf0df4cf3', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc50000c1b9373e4bb22f530bd6abd8700504603', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '655d95f8f9fe4dab57801225472a12e99cf40ec8', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1343adde00b05fcba03300ed0de506f771bff0e2', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73b2cf781dac29e807cda7b19fc67294c6e7c0ad', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0ccd4fbf68561e9ef598210220465474e3b78d1', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '307e2500bdd6ea192d586d329b91498ed9cebcf9', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}]",Lahiru Udayanga,43727928,lahiru97udayanga@gmail.com,User,,104,,50,22
697819052,Singleton integration tests ,"This PR includes
- Integration tests for singelton flush based on periodical flush
- Added UUID for keys to prevent dependency between test cases in case helper methods fail (If we use the same hard coded service ids , if the clean up methods fail for some reason then the successor tests also will fail when trying to create a service which already exists)
- Few other minor fixes",True,40,https://api.github.com/repos/3scale-labs/gsoc-wasm-filters/pulls/40,https://github.com/3scale-labs/gsoc-wasm-filters/pull/40,closed,278,145,8,7,0,16,0,0,[],2021-07-27 12:32:15+00:00,2021-07-28 08:38:53+00:00,72398.0,20:06:38,"[{'comment_id': 677432596, 'comment_body': ""Since we have serialized tests, I don't think so we should have a case where ITs fail due to duplicate service without any error on the writer side. I was thinking about parallelizing the tests but that would require a different solution than this, which I can discuss if you want."", 'comment_created': datetime.datetime(2021, 7, 27, 13, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 677436526, 'comment_body': ""I think eventually serves no purpose here since `Push` defers till the response is received and adding a 500ms wait before `Push` returns (I've added that already in my new PR) kind of guarantees that things are processed by the Apisonator."", 'comment_created': datetime.datetime(2021, 7, 27, 13, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 677439282, 'comment_body': 'Note here that default case will return `""""test-service-id""""` and `""""test-service-token""""`', 'comment_created': datetime.datetime(2021, 7, 27, 13, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 677440962, 'comment_body': ""It's just preference but I think if you are using `if testName == ...` then better add these conditions into the test as-it-is because now, readers have to be aware of two blocks for a single test i.e `BeforeTest` and the test function itself."", 'comment_created': datetime.datetime(2021, 7, 27, 13, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 677476650, 'comment_body': ""There can be issues in the network or in the server side as well.  Also there's another issue with stats. When you create a usage and delete it the stats won't get deleted. We have to delete the stats which we don't do at the moment. So when you create a new service/app combination, it already contains stats. Managing apisonator apps, services and keys is a useless effort since it doesn't provide us any benefit and all the apisonator states get deleted after the tests. We don't have to worry about the apisonator apps, services when we use UUIDs. \r\n\r\nEdit: Parallelising the tests is not a good approach for these kind of tests where we need a fresh proxy instance for each tests/suites. Also the usual way to run integration tests and CI are to run them sequentially under constrained resources for longer times as jobs. Not running them all at once parallel. Parallel tests are possible for independent test cases where high resources are not required for each test.  "", 'comment_created': datetime.datetime(2021, 7, 27, 13, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 677479785, 'comment_body': ""For things like timeouts and waits, it's better to use `require.Eventually` rather than adding `time.Sleep()` since the test suite already has this feature. It will perform retries periodically according to the way we define the related times. I'm thinking to remove the static `time.Sleep` in proxy start up method and do a check there. (`eventually` is not for the `Push` but for the http call failure happen inside that)"", 'comment_created': datetime.datetime(2021, 7, 27, 14, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 677481600, 'comment_body': ""okay will fix. I think we don't need a default since we use UUIDs"", 'comment_created': datetime.datetime(2021, 7, 27, 14, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 677482251, 'comment_body': 'It waits for the function to return success but `cmd.Run` already returns success even though the proxy is still loading so eventually serves no purpose there as well since we are waiting for the proxy to get ready which has no event attached to it.', 'comment_created': datetime.datetime(2021, 7, 27, 14, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 677487306, 'comment_body': ""Weird, I've only seen running tests in parallel but that may be just my experience and if you think sequential is better than fine by me. Also, what stats are you talking about here??"", 'comment_created': datetime.datetime(2021, 7, 27, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 677488374, 'comment_body': 'okay will add the pre-conditions to the test itself. ', 'comment_created': datetime.datetime(2021, 7, 27, 14, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 677494487, 'comment_body': ""How you design and write tests depends on the requirement. So I'm not saying that parallel tests are bad. I'm saying that for our case it is not feasible to run several proxy instances for the integration tests. apisonator records the usages as stats. You can see the redis database for the stats. We are not deleting the stats. We don't need to consider those stats since we use UUIDs. Otherwise if you create the new service app key combination, it will have the usage from the previous tests. \r\n\r\nEdit: We already have a very brittle integration test setup. So it's not worth to add more complexity to the test setup. But we should focus on writing integration tests for different scenarios with the limited time we have. "", 'comment_created': datetime.datetime(2021, 7, 27, 14, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 677495602, 'comment_body': ""yeah that's why we need to do a check using eventually to test whether the proxy is up or not. "", 'comment_created': datetime.datetime(2021, 7, 27, 14, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 677499099, 'comment_body': 'Can you explain to me how it does that? As far as I know, you have to define the event that says ""Ok, it\'s done now"". What event are you using to make sure the proxy is up and can receive new requests?', 'comment_created': datetime.datetime(2021, 7, 27, 14, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 677506710, 'comment_body': 'From the admin  check for the listener. \r\n```go\r\nrequire.Eventually(t, func() bool {\r\n    res, err := http.Get(fmt.Sprintf(""http://localhost:%d/listeners"", adminPort))\r\n    if err != nil {\r\n\t    return false\r\n    }\r\n    defer res.Body.Close()\r\n    return res.StatusCode == http.StatusOK\r\n}, 5*time.Second, 100*time.Millisecond, ""Envoy has not started"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}, {'comment_id': 677510779, 'comment_body': 'Better solution! Please add this into the PR itself. Still, I think eventually serves no purpose for pushing states since you have no event for states being updated from the Apisonator.', 'comment_created': datetime.datetime(2021, 7, 27, 14, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rahulanand16nov', 'type': 'User'}, {'comment_id': 678007407, 'comment_body': 'No need to have a event to check apisonator. Helper methods returns client errors, server errors and network errors and `Push` returns those errors directly to the caller. In case of such issues, eventually performs retries. ', 'comment_created': datetime.datetime(2021, 7, 28, 6, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'NomadXD', 'type': 'User'}]","[{'commit_sha': '30c23df79569783ac154aa38a8fd763bf0df4cf3', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc50000c1b9373e4bb22f530bd6abd8700504603', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '655d95f8f9fe4dab57801225472a12e99cf40ec8', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1343adde00b05fcba03300ed0de506f771bff0e2', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73b2cf781dac29e807cda7b19fc67294c6e7c0ad', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0ccd4fbf68561e9ef598210220465474e3b78d1', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '307e2500bdd6ea192d586d329b91498ed9cebcf9', 'committer_username': 'NomadXD', 'committer_name': 'Lahiru Udayanga', 'committer_email': 'lahiru97udayanga@gmail.com', 'commit_date': datetime.datetime(2018, 9, 30, 16, 59, 14, tzinfo=datetime.timezone.utc)}]",Lahiru Udayanga,43727928,lahiru97udayanga@gmail.com,User,,104,,50,22

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
368807660,gsoc-wasm-filters,3scale-labs/gsoc-wasm-filters,Rust,7,8,2,2,123,2,2,0,"[{'id': 734515829, 'number': 65, 'closed': datetime.datetime(2021, 9, 16, 8, 54, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 15, 12, 23, 13, tzinfo=datetime.timezone.utc), 'time_taken': 73856.0, 'time_delta': '20:30:56', 'additions': 156, 'deletions': 58, 'state': 'closed'}, {'id': 732997219, 'number': 64, 'closed': datetime.datetime(2021, 9, 13, 19, 10, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 13, 18, 29, 44, tzinfo=datetime.timezone.utc), 'time_taken': 2466.0, 'time_delta': '0:41:06', 'additions': 4, 'deletions': 50, 'state': 'closed'}, {'id': 728814494, 'number': 62, 'closed': datetime.datetime(2021, 9, 8, 12, 29, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 7, 17, 14, 31, tzinfo=datetime.timezone.utc), 'time_taken': 69285.0, 'time_delta': '19:14:45', 'additions': 1027, 'deletions': 22, 'state': 'closed'}, {'id': 728547352, 'number': 61, 'closed': datetime.datetime(2021, 9, 7, 17, 5, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 7, 11, 14, 44, tzinfo=datetime.timezone.utc), 'time_taken': 21070.0, 'time_delta': '5:51:10', 'additions': 65, 'deletions': 11, 'state': 'closed'}, {'id': 728109581, 'number': 60, 'closed': datetime.datetime(2021, 9, 6, 19, 56, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 6, 17, 35, 47, tzinfo=datetime.timezone.utc), 'time_taken': 8443.0, 'time_delta': '2:20:43', 'additions': 435, 'deletions': 218, 'state': 'closed'}, {'id': 721340709, 'number': 58, 'closed': datetime.datetime(2021, 8, 30, 6, 33, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 27, 13, 34, 11, tzinfo=datetime.timezone.utc), 'time_taken': 233931.0, 'time_delta': '2 days, 16:58:51', 'additions': 30, 'deletions': 26, 'state': 'closed'}, {'id': 721293623, 'number': 57, 'closed': datetime.datetime(2021, 8, 27, 12, 26, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 27, 12, 26, 34, tzinfo=datetime.timezone.utc), 'time_taken': 23.0, 'time_delta': '0:00:23', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 721111166, 'number': 56, 'closed': datetime.datetime(2021, 8, 27, 12, 9, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 27, 7, 53, 29, tzinfo=datetime.timezone.utc), 'time_taken': 15346.0, 'time_delta': '4:15:46', 'additions': 249, 'deletions': 286, 'state': 'closed'}, {'id': 719418119, 'number': 54, 'closed': datetime.datetime(2021, 8, 26, 8, 12, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 25, 9, 22, 19, tzinfo=datetime.timezone.utc), 'time_taken': 82185.0, 'time_delta': '22:49:45', 'additions': 84, 'deletions': 23, 'state': 'closed'}, {'id': 717841336, 'number': 53, 'closed': datetime.datetime(2021, 8, 25, 5, 25, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 23, 13, 30, 46, tzinfo=datetime.timezone.utc), 'time_taken': 143674.0, 'time_delta': '1 day, 15:54:34', 'additions': 410, 'deletions': 80, 'state': 'closed'}, {'id': 714304769, 'number': 50, 'closed': datetime.datetime(2021, 8, 19, 14, 47, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 17, 14, 30, 37, tzinfo=datetime.timezone.utc), 'time_taken': 173808.0, 'time_delta': '2 days, 0:16:48', 'additions': 269, 'deletions': 10, 'state': 'closed'}, {'id': 714116604, 'number': 49, 'closed': datetime.datetime(2021, 8, 17, 10, 35, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 17, 10, 28, 49, tzinfo=datetime.timezone.utc), 'time_taken': 380.0, 'time_delta': '0:06:20', 'additions': 335, 'deletions': 0, 'state': 'closed'}, {'id': 707280536, 'number': 48, 'closed': datetime.datetime(2021, 8, 11, 9, 18, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 11, 49, 23, tzinfo=datetime.timezone.utc), 'time_taken': 77375.0, 'time_delta': '21:29:35', 'additions': 71, 'deletions': 3, 'state': 'closed'}, {'id': 705901127, 'number': 46, 'closed': datetime.datetime(2021, 8, 11, 10, 10, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 7, 14, 42, 49, tzinfo=datetime.timezone.utc), 'time_taken': 329265.0, 'time_delta': '3 days, 19:27:45', 'additions': 320, 'deletions': 32, 'state': 'closed'}, {'id': 701302082, 'number': 43, 'closed': datetime.datetime(2021, 8, 2, 14, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 9, 37, 9, tzinfo=datetime.timezone.utc), 'time_taken': 16071.0, 'time_delta': '4:27:51', 'additions': 137, 'deletions': 30, 'state': 'closed'}, {'id': 700468615, 'number': 42, 'closed': datetime.datetime(2021, 8, 2, 7, 10, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 17, 45, 50, tzinfo=datetime.timezone.utc), 'time_taken': 221106.0, 'time_delta': '2 days, 13:25:06', 'additions': 309, 'deletions': 30, 'state': 'closed'}, {'id': 697912799, 'number': 41, 'closed': datetime.datetime(2021, 7, 28, 9, 40, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 14, 27, 35, tzinfo=datetime.timezone.utc), 'time_taken': 69175.0, 'time_delta': '19:12:55', 'additions': 182, 'deletions': 20, 'state': 'closed'}, {'id': 696358968, 'number': 39, 'closed': datetime.datetime(2021, 7, 25, 10, 0, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 24, 14, 29, 47, tzinfo=datetime.timezone.utc), 'time_taken': 70241.0, 'time_delta': '19:30:41', 'additions': 328, 'deletions': 57, 'state': 'closed'}, {'id': 695104225, 'number': 37, 'closed': datetime.datetime(2021, 7, 23, 11, 19, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 22, 11, 54, 22, tzinfo=datetime.timezone.utc), 'time_taken': 84326.0, 'time_delta': '23:25:26', 'additions': 136, 'deletions': 75, 'state': 'closed'}, {'id': 694109591, 'number': 36, 'closed': datetime.datetime(2021, 7, 21, 9, 16, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 21, 7, 7, 18, tzinfo=datetime.timezone.utc), 'time_taken': 7724.0, 'time_delta': '2:08:44', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 693486802, 'number': 35, 'closed': datetime.datetime(2021, 7, 21, 7, 0, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 13, 53, 17, tzinfo=datetime.timezone.utc), 'time_taken': 61609.0, 'time_delta': '17:06:49', 'additions': 186, 'deletions': 37, 'state': 'closed'}, {'id': 691450309, 'number': 33, 'closed': datetime.datetime(2021, 7, 17, 17, 49, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 16, 12, 25, 30, tzinfo=datetime.timezone.utc), 'time_taken': 105812.0, 'time_delta': '1 day, 5:23:32', 'additions': 42, 'deletions': 15, 'state': 'closed'}, {'id': 685307956, 'number': 31, 'closed': datetime.datetime(2021, 7, 13, 12, 43, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 15, 41, 30, tzinfo=datetime.timezone.utc), 'time_taken': 507707.0, 'time_delta': '5 days, 21:01:47', 'additions': 133, 'deletions': 95, 'state': 'closed'}, {'id': 684381496, 'number': 29, 'closed': datetime.datetime(2021, 7, 6, 17, 9, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 13, 31, 49, tzinfo=datetime.timezone.utc), 'time_taken': 13035.0, 'time_delta': '3:37:15', 'additions': 405, 'deletions': 13, 'state': 'closed'}, {'id': 682601623, 'number': 28, 'closed': datetime.datetime(2021, 7, 2, 14, 37, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 2, 12, 47, 41, tzinfo=datetime.timezone.utc), 'time_taken': 6605.0, 'time_delta': '1:50:05', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 681616157, 'number': 25, 'closed': datetime.datetime(2021, 7, 2, 8, 28, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 8, 29, 18, tzinfo=datetime.timezone.utc), 'time_taken': 86356.0, 'time_delta': '23:59:16', 'additions': 118, 'deletions': 73, 'state': 'closed'}, {'id': 678808744, 'number': 23, 'closed': datetime.datetime(2021, 6, 28, 8, 8, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 8, 6, tzinfo=datetime.timezone.utc), 'time_taken': 134.0, 'time_delta': '0:02:14', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 677833364, 'number': 21, 'closed': datetime.datetime(2021, 6, 28, 6, 30, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 11, 12, 35, tzinfo=datetime.timezone.utc), 'time_taken': 242274.0, 'time_delta': '2 days, 19:17:54', 'additions': 145, 'deletions': 132, 'state': 'closed'}, {'id': 676221893, 'number': 20, 'closed': datetime.datetime(2021, 6, 24, 10, 3, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 12, 3, 11, tzinfo=datetime.timezone.utc), 'time_taken': 79196.0, 'time_delta': '21:59:56', 'additions': 213, 'deletions': 143, 'state': 'closed'}, {'id': 669046024, 'number': 15, 'closed': datetime.datetime(2021, 6, 14, 9, 22, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 13, 12, 33, 52, tzinfo=datetime.timezone.utc), 'time_taken': 74937.0, 'time_delta': '20:48:57', 'additions': 283, 'deletions': 80, 'state': 'closed'}, {'id': 668867068, 'number': 14, 'closed': datetime.datetime(2021, 6, 13, 12, 32, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 12, 13, 17, 31, tzinfo=datetime.timezone.utc), 'time_taken': 83720.0, 'time_delta': '23:15:20', 'additions': 295, 'deletions': 79, 'state': 'closed'}, {'id': 665678796, 'number': 11, 'closed': datetime.datetime(2021, 6, 12, 7, 19, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 9, 8, 21, 57, tzinfo=datetime.timezone.utc), 'time_taken': 255469.0, 'time_delta': '2 days, 22:57:49', 'additions': 217, 'deletions': 79, 'state': 'closed'}, {'id': 661763229, 'number': 10, 'closed': datetime.datetime(2021, 6, 4, 13, 37, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 4, 13, 20, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1000.0, 'time_delta': '0:16:40', 'additions': 257, 'deletions': 68, 'state': 'closed'}, {'id': 657753413, 'number': 5, 'closed': datetime.datetime(2021, 5, 31, 12, 8, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 30, 17, 5, 24, tzinfo=datetime.timezone.utc), 'time_taken': 68588.0, 'time_delta': '19:03:08', 'additions': 358, 'deletions': 215, 'state': 'closed'}, {'id': 656721970, 'number': 4, 'closed': datetime.datetime(2021, 5, 29, 7, 14, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 28, 16, 1, 22, tzinfo=datetime.timezone.utc), 'time_taken': 54808.0, 'time_delta': '15:13:28', 'additions': 157, 'deletions': 57, 'state': 'closed'}, {'id': 654947457, 'number': 3, 'closed': datetime.datetime(2021, 5, 28, 9, 14, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 27, 13, 7, 10, tzinfo=datetime.timezone.utc), 'time_taken': 72435.0, 'time_delta': '20:07:15', 'additions': 49, 'deletions': 0, 'state': 'closed'}, {'id': 653761343, 'number': 1, 'closed': datetime.datetime(2021, 5, 26, 13, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 26, 13, 22, 46, tzinfo=datetime.timezone.utc), 'time_taken': 434.0, 'time_delta': '0:07:14', 'additions': 36, 'deletions': 0, 'state': 'closed'}]"
