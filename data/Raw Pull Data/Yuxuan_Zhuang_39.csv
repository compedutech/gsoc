pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
431918892,Serialize FileIO and TextIOWrapper and Universe,"Fixes #2878
 
- Composition over inheritance for pickling `Universe` in #2704

Changes made in this Pull Request:
 - add new picklable BufferedReader, FileIO, and TextIOWrapper classes.
 - add new classes and `pickle_open` function to `picklable_file_io.py`
 - implement `__getstate__`, `__setstate__` to `Universe` and `BaseReader`
 - fix DCD, XDR pickle issue



PR Checklist
------------
 - [x] Tests?
 - [x] Docs?
 - [x] CHANGELOG updated?
 - [x] Issue raised/referenced?
",True,2723,https://api.github.com/repos/MDAnalysis/mdanalysis/pulls/2723,https://github.com/MDAnalysis/mdanalysis/pull/2723,closed,1464,33,23,120,123,276,4,5,"[{'name': 'enhancement'}, {'name': 'Component-Core'}, {'name': 'parallelization'}, {'name': 'GSoC'}]",2020-06-09 16:23:15+00:00,2020-08-08 00:40:43+00:00,5127448.0,"59 days, 8:17:28","[{'comment_id': 438303123, 'comment_body': 'I think this should fail for anything else (`ValueError` for unsupported `mode`).', 'comment_created': datetime.datetime(2020, 6, 10, 17, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438303190, 'comment_body': 'docs', 'comment_created': datetime.datetime(2020, 6, 10, 17, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438303386, 'comment_body': 'docs', 'comment_created': datetime.datetime(2020, 6, 10, 17, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438303423, 'comment_body': 'docs', 'comment_created': datetime.datetime(2020, 6, 10, 17, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438304449, 'comment_body': 'PEP8 - space after comma', 'comment_created': datetime.datetime(2020, 6, 10, 17, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438735425, 'comment_body': 'Could you add a test that checks that this gets raised?', 'comment_created': datetime.datetime(2020, 6, 11, 12, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 438738436, 'comment_body': 'PEP8 two empty lines here', 'comment_created': datetime.datetime(2020, 6, 11, 12, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 438738694, 'comment_body': ""We can drop these now that we're past 1.0."", 'comment_created': datetime.datetime(2020, 6, 11, 12, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 438739011, 'comment_body': 'Could you add a test that triggers that ValueError?', 'comment_created': datetime.datetime(2020, 6, 11, 12, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 438741021, 'comment_body': ""You'll probably want to add text like this under the docstring as a note."", 'comment_created': datetime.datetime(2020, 6, 11, 12, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 438974858, 'comment_body': 'Spelling?\r\n```suggestion\r\nclass FileIOPicklable(io.FileIO):\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438978393, 'comment_body': 'Make the docs clearer:\r\n```suggestion\r\n    """"""File object (read-only) that can be pickled.\r\n    \r\n    This class provides a file-like object (as returned by :func:`open`, namely :class:`io.FileIO`) \r\n    that, unlike standard Python file objects, can be pickled. Only read mode is supported.\r\n    \r\n    When the file is pickled, filename and position of the open file handle in the file\r\n    are saved. On unpickling, the file is opened by filename and the file is \r\n    seeked to the saved position. This means that for a successful unpickle, the original\r\n    file still has to be accessible with its filename.\r\n    \r\n    Example\r\n    -------\r\n    \r\n    (ADD EXAMPLE HERE, essentially from the tests)\r\n    \r\n \r\n    See Also\r\n    ---------\r\n    TextIOPicklable\r\n    BufferIOPicklable\r\n```\r\n\r\nAlso, is there a check for read-only?', 'comment_created': datetime.datetime(2020, 6, 11, 18, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438990170, 'comment_body': 'Spelling\r\n```suggestion\r\nclass BufferIOPicklable(io.BufferedReader):\r\n```\r\nand also add more docs', 'comment_created': datetime.datetime(2020, 6, 11, 18, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438991644, 'comment_body': 'For purely cosmetic reasons I would change the order so that the more general is first\r\n```suggestion\r\n        return self.name, self.tell()\r\n```\r\n(and then change the setstate correspondingly)', 'comment_created': datetime.datetime(2020, 6, 11, 18, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438992012, 'comment_body': ""I'd change the order\r\n```suggestion\r\n        return self.raw_class, self.name, self.tell()\r\n```"", 'comment_created': datetime.datetime(2020, 6, 11, 18, 35, 8, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438992398, 'comment_body': '```suggestion\r\n    def __setstate__(self, args):\r\n        name = args[0]\r\n        super().__init__(name)\r\n        self.seek(args[1])\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438993078, 'comment_body': '```suggestion\r\n    def __setstate__(self, args):\r\n        raw_class = args[0]\r\n        name = args[1]\r\n        raw = raw_class(name)\r\n        super().__init__(raw)\r\n        self.seek(args[2])\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438993429, 'comment_body': 'Spelling\r\n```suggestion\r\nclass TextIOPicklable(io.TextIOWrapper):\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438995778, 'comment_body': '```suggestion\r\n  """"""Character and line based picklable file-like object.\r\n  \r\n    This class provides a file-like :class:`io.TextIOWrapper` object that can\r\n    be pickled. Note that this only works in read mode.\r\n    \r\n    Example\r\n    -------\r\n    ::\r\n        file = FileIOPicklable(\'filename\')\r\n        text_wrapped = TextIOPicklable(file)\r\n        \r\n    See Also\r\n    ---------\r\n    FileIOPicklable\r\n    BufferIOPicklable\r\n          \r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438997027, 'comment_body': '```suggestion\r\n        return self.raw_class, self.name, self.tell()\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438997426, 'comment_body': '```suggestion\r\n        raw_class = args[0]\r\n        name = args[1]\r\n        # raw_class is used for further expanding this functionality to\r\n        # GZip files, which also requires a text wrapper.\r\n        raw = raw_class(name)\r\n        super().__init__(raw)\r\n        self.seek(args[2])\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438998089, 'comment_body': 'Add the ""Warning"" section as a ""Note"" before parameters.', 'comment_created': datetime.datetime(2020, 6, 11, 18, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438998484, 'comment_body': 'Add a paragraph describing what the function does and what the idea behind is. What purpose does it fullfill?', 'comment_created': datetime.datetime(2020, 6, 11, 18, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438999322, 'comment_body': 'Make a separate _Raises_ section after _Returns_, e.g.\r\n```reST\r\n    Raises\r\n    ------\r\n    ValueError : if `mode` is not one of the allowed read modes\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439002064, 'comment_body': ""Set is faster than tuple –\r\n```\r\nIn [1]: %timeit 'a' in {'x', 'z', 'b', 'a'}\r\n32.7 ns ± 0.384 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\r\n\r\nIn [2]: %timeit 'a' in ('x', 'z', 'b', 'a')\r\n65.5 ns ± 0.411 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\r\n```\r\nI would have used the tuple. I learned something new."", 'comment_created': datetime.datetime(2020, 6, 11, 18, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439002509, 'comment_body': ""```suggestion\r\n    elif mode in {'rt', 'r'}:\r\n```"", 'comment_created': datetime.datetime(2020, 6, 11, 18, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439003426, 'comment_body': 'Maybe add a comment here saying that we should never get here; it\'s not obvious until you read all code up to this point.\r\n\r\nOr better\r\n```python\r\nassert False, ""mode = {} argument was never processed"".format(mode)\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439004965, 'comment_body': '`pickle_open()` should be usable as a context manager.', 'comment_created': datetime.datetime(2020, 6, 11, 18, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439005586, 'comment_body': ""Shouldn't you be closing `PDB_file`, too?"", 'comment_created': datetime.datetime(2020, 6, 11, 19, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439286742, 'comment_body': 'Do you mean replacing the `ValueError` for unsupported mode?', 'comment_created': datetime.datetime(2020, 6, 12, 8, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 439544011, 'comment_body': '_Raises_ comes after _Returns_ (we follow the [NumPy docstring standard](https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard) as linked from [User Guide: Working with the docs](https://www.mdanalysis.org/UserGuide/contributing_code.html#working-with-the-code-documentation))\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 12, 17, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439544777, 'comment_body': 'The reST must use proper sphinx mark-up (I think...) so that automatic link generation works:\r\n```reST\r\n:func:`io.open`\r\n```\r\n\r\nand \r\n```reST\r\n:class:`MDAnalysis.core.Universe`\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 12, 17, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439545322, 'comment_body': '```reST\r\nThe built-in :func:`io.open` function ...\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 17, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439545582, 'comment_body': 'Should -> Can', 'comment_created': datetime.datetime(2020, 6, 12, 17, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439547138, 'comment_body': '[os.fspath](https://docs.python.org/3/library/os.html#os.fspath) is only in Python ≥ 3.6. This is ok (I think @MDAnalysis/coredevs decided to not having to support 3.5) but you need to add an entry to CHANGELOG under changes that only Python >= 3.6 is supported. You must also change `setup.py` accordingly.', 'comment_created': datetime.datetime(2020, 6, 12, 17, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439548763, 'comment_body': 'I/O', 'comment_created': datetime.datetime(2020, 6, 12, 17, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439548940, 'comment_body': 'Add a sentence on motivation (copy from what you wrote below).', 'comment_created': datetime.datetime(2020, 6, 12, 17, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439549112, 'comment_body': 'Add a \r\n```reST\r\n.. versionadded:: 2.0.0\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 17, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439549583, 'comment_body': 'Add documentation of parameters. See [numpy docstring standard](https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard), which we follow in MDA.', 'comment_created': datetime.datetime(2020, 6, 12, 17, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439549751, 'comment_body': 'Break line at 79 chars.', 'comment_created': datetime.datetime(2020, 6, 12, 17, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439549831, 'comment_body': 'Add docs for parameters.', 'comment_created': datetime.datetime(2020, 6, 12, 17, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439550249, 'comment_body': 'Add a \r\n```reST\r\n.. versionadded:: 2.0.0\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 17, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439550437, 'comment_body': 'Note that you need *2 blank lines above*', 'comment_created': datetime.datetime(2020, 6, 12, 17, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439550913, 'comment_body': '```suggestion\r\n    \r\n    \r\n    .. versionadded:: 2.0.0\r\n    """"""\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 17, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439551145, 'comment_body': 'Document init parameters.', 'comment_created': datetime.datetime(2020, 6, 12, 17, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439551242, 'comment_body': 'Add versionadded ', 'comment_created': datetime.datetime(2020, 6, 12, 17, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439551449, 'comment_body': 'add versionadded', 'comment_created': datetime.datetime(2020, 6, 12, 17, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439552350, 'comment_body': ""Now that we're py3+ you shouldn't need future stuff anymore."", 'comment_created': datetime.datetime(2020, 6, 12, 17, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439552560, 'comment_body': 'Add small example showing use as function and as context manager.', 'comment_created': datetime.datetime(2020, 6, 12, 17, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439554470, 'comment_body': ""Before talking about the motivation, say what it _does_. Mention that it returns FileIOPicklable, BufferIOPicklabe, or TextIOPicklabe and that it can also be used as a context manager. It's used instead of :func:`open`.\r\n\r\n(Btw, I didn't know that you could just use the function as a context manager... neat – if this also works with `anyopen()` then we could get rid of [`openany()`](https://www.mdanalysis.org/docs/documentation_pages/lib/util.html?highlight=openany#MDAnalysis.lib.util.openany). )"", 'comment_created': datetime.datetime(2020, 6, 12, 17, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439556885, 'comment_body': 'Add a test that the context manager approach works, too. ', 'comment_created': datetime.datetime(2020, 6, 12, 17, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439589131, 'comment_body': 'Then I assume we should remove `no-absolute-import` from `pylintrc` in #2750  ?\r\n```\r\n************* Module MDAnalysis.lib.picklable_file_io\r\npackage/MDAnalysis/lib/picklable_file_io.py:42: [W1618(no-absolute-import), ] import missing `from __future__ import absolute_import`\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 18, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 439595908, 'comment_body': ""I think this is just happening because the PR fixing the pylint call hasn't been merged yet."", 'comment_created': datetime.datetime(2020, 6, 12, 19, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439625947, 'comment_body': 'Then the cleaner approach is to keep the legacy `from __future__` stuff in ongoing PRs and have a separate clean-up PR that gets rid of it everywhere together with the check instead of removing checks as part of one of many PRs that might be affected.', 'comment_created': datetime.datetime(2020, 6, 12, 20, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439626208, 'comment_body': ""Once the clean-up PR is merged, the ongoing PRs can merge/rebase and clean up themselves. At least that's my suggestion."", 'comment_created': datetime.datetime(2020, 6, 12, 20, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439742849, 'comment_body': 'I can recommend running a formatting tool with every save. I use black for python nowadays. ', 'comment_created': datetime.datetime(2020, 6, 13, 14, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 439743101, 'comment_body': 'Why here? We can store the mode argument to the method. It would be neater to throw an error when using `getstate` with `mode=‘w’` or `mode=‘wb’`.', 'comment_created': datetime.datetime(2020, 6, 13, 14, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 439743196, 'comment_body': 'I do not particularly like this function. It is unclear from the name that this can only be used to open files for reading. You also implicitly assume we always want to pickle a file object when we open it for reading. I would much rather have an exception *when* we actually try to pickle the file.', 'comment_created': datetime.datetime(2020, 6, 13, 14, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 439776770, 'comment_body': 'In the whole discussion on Python 3 we had decided that Py 3.6 is the minimum supported version. So, the CHANGELOG _should_ already have contained this information but it didn’t so please add it. Thank you!', 'comment_created': datetime.datetime(2020, 6, 13, 23, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439776812, 'comment_body': 'The pylint PR was merged, if you merge develop you can start removing all Py 2 crud.', 'comment_created': datetime.datetime(2020, 6, 13, 23, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439777003, 'comment_body': 'I like your idea of deferring an error to the actual pickling. The argument of being able to use the same class everywhere is a good one. It will just have the added bonus that it _can be pickled_ when we need it.', 'comment_created': datetime.datetime(2020, 6, 13, 23, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439777164, 'comment_body': 'So if we get IO classes that behave like the original ones except that they raise an error when you try to pickle with “w” but pickle fine with “r” then we still need our own `open()` function, right? Could we directly have `anyopen()` use these new classes? (Maybe you said this already somewhere...)', 'comment_created': datetime.datetime(2020, 6, 13, 23, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439778232, 'comment_body': 'Not sure. But yeah only using anyopen uniformly in MDAnalysis sounds good. ', 'comment_created': datetime.datetime(2020, 6, 13, 23, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 439795632, 'comment_body': 'Might be wrong here, but I believe this exceeds 80 characters (getting 83 in vim?). Could you break it up into two lines?', 'comment_created': datetime.datetime(2020, 6, 14, 6, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439795674, 'comment_body': 'PEP8 two blank lines between imports and class definition are needed here.', 'comment_created': datetime.datetime(2020, 6, 14, 6, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439795725, 'comment_body': 'At least in my editor a lot of these lines are >79 char (PEP8). Could you review the formatting and make sure you keep to PEP8 in the docstring too please? If anything it makes editors happier when you open the file :) ', 'comment_created': datetime.datetime(2020, 6, 14, 6, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439796140, 'comment_body': 'pedantic, but if you can it might be good to use match here to make sure we are capturing the right error.', 'comment_created': datetime.datetime(2020, 6, 14, 6, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439796319, 'comment_body': 'A thought for tests: is there any way we can fake/capture this kind of error? I could see this becoming a thing if you deployed this on a cluster.', 'comment_created': datetime.datetime(2020, 6, 14, 6, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439798797, 'comment_body': 'So I\'m not sure how relevant this is to how we use file objects, but I know that you can get f.tell() to be ""disabled"" if you happened to call f.__next__() (I think it only happens if you only partially iterate through the file). Might be worth keeping in mind as a potential failure point.', 'comment_created': datetime.datetime(2020, 6, 14, 7, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439800418, 'comment_body': ""I don't think it's a big deal in any way but you could probably save yourself a few extra operations by changing the top `mode` check to see if it is in the set of modes (add in the rest as part of that case), and then make else the ValueError case."", 'comment_created': datetime.datetime(2020, 6, 14, 7, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439812280, 'comment_body': ""Perhaps we should manually check what error we get and at least document it in the description. We can then think about if it's worthwhile capturing the exception in order to provide a friendlier error message. "", 'comment_created': datetime.datetime(2020, 6, 14, 9, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439812418, 'comment_body': 'This line is still 129 chars', 'comment_created': datetime.datetime(2020, 6, 14, 10, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439812574, 'comment_body': 'This wasn\'t added. ""Suggested change"" in the issue tracker means ""add this please or tell me why not"", not ""take it if you like it"".\r\n\r\nIf you don\'t agree with a comment, say why, but don\'t just close the comment.', 'comment_created': datetime.datetime(2020, 6, 14, 10, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439812598, 'comment_body': 'See above.', 'comment_created': datetime.datetime(2020, 6, 14, 10, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439813008, 'comment_body': 'This comment was not addressed @yuxuanzhuang ', 'comment_created': datetime.datetime(2020, 6, 14, 10, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439813023, 'comment_body': 'This comment was not addressed @yuxuanzhuang ', 'comment_created': datetime.datetime(2020, 6, 14, 10, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 440157303, 'comment_body': ""That's true! I already noticed this failure for gms, mdcdr formats. I think in the context of pickling trajectories, there's not much use (?). "", 'comment_created': datetime.datetime(2020, 6, 15, 12, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 440418206, 'comment_body': 'actually. A different idea here could be to fall back to the standard open function in case of writing. ', 'comment_created': datetime.datetime(2020, 6, 15, 20, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 442534523, 'comment_body': 'If we know of a failure point then we should test for it – if nothing else test that it raises an exception as we expect. At least then we know how to reproduce the problem when we need to look closer into it.', 'comment_created': datetime.datetime(2020, 6, 18, 22, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 442534591, 'comment_body': 'Test please.', 'comment_created': datetime.datetime(2020, 6, 18, 22, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 442675015, 'comment_body': 'I added the test below `test_context_manager_pickle`', 'comment_created': datetime.datetime(2020, 6, 19, 7, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 442688448, 'comment_body': ""For now I added a test to raise this error. Maybe in the future, we can either:\r\n- remove this functionality if it proves there's little use\r\n- return 0 if `f.tell()` fails."", 'comment_created': datetime.datetime(2020, 6, 19, 7, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 442788432, 'comment_body': '@yuxuanzhuang please do remove this line, we have nearly removed all `__future__` imports now.', 'comment_created': datetime.datetime(2020, 6, 19, 11, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 442789116, 'comment_body': ""I think this should be :class:`TextIOPicklable`. Please do build the docs if you haven't yet, ideally these should link to the class you want to point the user to. (same for all other cases below)."", 'comment_created': datetime.datetime(2020, 6, 19, 11, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 442791709, 'comment_body': 'As above do remember to remove this.', 'comment_created': datetime.datetime(2020, 6, 19, 11, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 442795641, 'comment_body': 'If we are adding this in here, we should probably add in a reference to the original issue for dropping <3.6 #2541 ', 'comment_created': datetime.datetime(2020, 6, 19, 11, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 442799383, 'comment_body': 'I did and this works...at least in sphinx 2.4.0 build. Could I preview anywhere for the travis build result?', 'comment_created': datetime.datetime(2020, 6, 19, 12, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 442800562, 'comment_body': ""If it works locally then that's good enough for me. I don't _think_ Travis builds anywhere, @lilyminium or @orbeckst would know better here."", 'comment_created': datetime.datetime(2020, 6, 19, 12, 3, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 443058103, 'comment_body': 'FileIO has lost an e here', 'comment_created': datetime.datetime(2020, 6, 19, 21, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 443075521, 'comment_body': 'feels a little weird to have an `assert` outside testing, but if it is just to illustrate here the pickling works, maybe show the output here too.', 'comment_created': datetime.datetime(2020, 6, 19, 23, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 443075635, 'comment_body': ""should be 'returns'"", 'comment_created': datetime.datetime(2020, 6, 19, 23, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 443075742, 'comment_body': ""'an' instead of 'a'"", 'comment_created': datetime.datetime(2020, 6, 19, 23, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 443075882, 'comment_body': 'I believe per pep8 this import should be grouped with the other standard libraries above', 'comment_created': datetime.datetime(2020, 6, 19, 23, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 443871452, 'comment_body': ""@IAlibay , sphinx/Napoleon will find the class automatically but it's also fine to make it explicit.\r\n\r\n@yuxuanzhuang – as @IAlibay says: as long as you can confirm that it looks fine locally we're ok. Thanks for checking."", 'comment_created': datetime.datetime(2020, 6, 22, 23, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 443871677, 'comment_body': ""Good idea, I didn't remember where we decided this..."", 'comment_created': datetime.datetime(2020, 6, 22, 23, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 444292092, 'comment_body': 'pickle_open was added here (instead of inside PDBReader/XYZReader) because `anyopen` also support a stream as input.', 'comment_created': datetime.datetime(2020, 6, 23, 14, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 445078158, 'comment_body': '```suggestion\r\n  * Set Python 3.6 as the minimum supported version (#2541)\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 18, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 445080213, 'comment_body': ""I think this and the following is what @kain88-de suggests, which could be easily added\r\n```suggestion\r\n    def __init__(self, name, mode='r'):\r\n        self._mode = mode\r\n        super().__init__(name, mode=mode)\r\n```\r\nI'm adding this for discussion, not for immediate inclusion."", 'comment_created': datetime.datetime(2020, 6, 24, 18, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 445081563, 'comment_body': 'For discussion\r\n```suggestion\r\n        if not self._mode.startswith(\'r\'):\r\n           raise RuntimeError(""Can only pickle files that were opened in read mode, ""  \r\n                              ""not {}"".format(self._mode))\r\n        return self.name, self.tell()\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 18, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446339901, 'comment_body': '`self._ts_kwargs` without the space.', 'comment_created': datetime.datetime(2020, 6, 26, 18, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 446340331, 'comment_body': 'Here we should also move the the current frame.', 'comment_created': datetime.datetime(2020, 6, 26, 18, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 446340747, 'comment_body': 'Why does reduce work and setstate/getstate not? It would be nice to leave a little explanation about what failed to work.', 'comment_created': datetime.datetime(2020, 6, 26, 18, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 446445802, 'comment_body': ""I think I prefer to have `gsd_pickle_open` in this file. It don't feel it's good the spread very specific imports such as `gsd.hoomd` all over the place.\r\n\r\nBut maybe others have different opinions."", 'comment_created': datetime.datetime(2020, 6, 26, 23, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446445888, 'comment_body': 'I can see  `ncdf_pickle_open` here (like `gsd_pickle_open`) or in `lib.picklable_file_io`... see comments below. Something to discuss.', 'comment_created': datetime.datetime(2020, 6, 26, 23, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446450394, 'comment_body': 'I prefer to have format specific classes in their own module, `coordinates.gsd`.', 'comment_created': datetime.datetime(2020, 6, 26, 23, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446450951, 'comment_body': 'Interesting that `scipy.io.netcdf.netcdf_file` cannot be pickled. Or did you add the class to explicitly catch the `mmap` setting?\r\n\r\nGiven that this is based on scipy (a general package), you can make a good case that this class should be here because in principle, other trajectory formats might want to use it.', 'comment_created': datetime.datetime(2020, 6, 26, 23, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446451554, 'comment_body': 'Is this something that @richardjgowers did?', 'comment_created': datetime.datetime(2020, 6, 26, 23, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446452048, 'comment_body': 'Having these format-specific imports here is not great, especially as we have some formats (like gsd) that might not work on all platforms. It is much better to have these confined to a single file.', 'comment_created': datetime.datetime(2020, 6, 26, 23, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446453693, 'comment_body': ""Ultimately, this line says that only pickle_open, bz2_pickle_open, gzip_pickle_open need to be in picklable_file_io. All the other special cases can be in their own modules.\r\n\r\nWe will need documentation on how to write a picklable file object and the tests need to automatically test _all_ our readers for being picklable so that we don't forget to implement it.\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 26, 23, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446453863, 'comment_body': ""And I have no idea what we'll do with converters... #2790 – but one step after another. Let's get the files pickled first."", 'comment_created': datetime.datetime(2020, 6, 26, 23, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446453928, 'comment_body': 'yay, removal of crud!', 'comment_created': datetime.datetime(2020, 6, 26, 23, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446454522, 'comment_body': 'This will eventually have to be a test for every reader... but I think we have a base class somewhere where it can be added.', 'comment_created': datetime.datetime(2020, 6, 26, 23, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446459299, 'comment_body': 'Do you already test somewhere that we get the correct frame back? Something like\r\n```python\r\ndef test_readers_pickle_frame(ref_reader):\r\n    try:\r\n        ref_reader[frame]\r\n    except IndexError:\r\n         # single frame files\r\n         pass\r\n    ps = pickle.dumps(ref_reader)\r\n    reanimated = pickle.loads(ps)\r\n    assert reanimated.ts.frame == ref_reader.ts.frame\r\n```', 'comment_created': datetime.datetime(2020, 6, 27, 0, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446460090, 'comment_body': 'How about comparing `readlines()` (whole file) instead of only the first line?', 'comment_created': datetime.datetime(2020, 6, 27, 0, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446882325, 'comment_body': ""I think it is still based on wrapping a `BufferedReader` file object, with or without `mmap`. Not sure it's the same case for netCDF4."", 'comment_created': datetime.datetime(2020, 6, 29, 9, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 446887276, 'comment_body': 'I managed to get set/getstate to work.\r\n```python\r\ndef __getstate__(self):\r\n    return self._topology, self._trajectory, self.anchor_name\r\ndef __setstate__(self, state):\r\n    self._anchor_name = state[2] \r\n    self._topology = state[0]\r\n    _generate_from_topology(self)\r\n    self._trajectory = state[1]\r\n```\r\n\r\nBut the result is slightly different.\r\nFor analysis of an `AtomGroup`, we need to define it inside the analysis function.\r\ne.g. \r\n```python\r\ndef cog(u, frame_id):\r\n    u.trajectory[frame_id]\r\n    ag = u.atoms[2:5]\r\n    return ag.center_of_geometry()\r\n\r\nres = np.array([p.apply(cog, args=(u,i))\r\n            for i in range(3)])\r\n```\r\ngets the same result as before:\r\n```python\r\ndef cog(u, ag, frame_id):\r\n    u.trajectory[frame_id]\r\n    return ag.center_of_geometry()\r\n\r\nag = u.atoms[2:5]\r\nres = np.array([p.apply(cog, args=(u,ag, i))\r\n            for i in range(3)])\r\n```\r\n\r\nNot sure I am missing something here.\r\n', 'comment_created': datetime.datetime(2020, 6, 29, 11, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 446893052, 'comment_body': 'I moved it to coordinate module just for clarity for now. I see both options make sense. ', 'comment_created': datetime.datetime(2020, 6, 29, 11, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 447249853, 'comment_body': 'Thanks, I like gsd/ncdf in their own modules.', 'comment_created': datetime.datetime(2020, 6, 29, 20, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 447628966, 'comment_body': 'Why not go directly to the frame?  it should support random access', 'comment_created': datetime.datetime(2020, 6, 30, 12, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 447629097, 'comment_body': 'why the rewind?', 'comment_created': datetime.datetime(2020, 6, 30, 12, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 447630957, 'comment_body': 'can you describe in more detail what the differences are? A quick explanation of the code would also be nice. I do not understand what `p.apply` is.  What happens if you use the pickle functions directly yourself? ', 'comment_created': datetime.datetime(2020, 6, 30, 12, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 447667780, 'comment_body': 'If not, it will wind up into following error during pickling:\r\n```\r\n>>> self[self.ts.frame]\r\nIndexError: Index 1 exceeds length of trajectory (1).\r\n```\r\nbecause the timestep.frame is ""wrong"" for these used/being used readers.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 447673941, 'comment_body': ""If using `self[index]`,\r\nthe `u_pickled.trajectory.next()` will end up to Timestep 0,\r\nbecause iteration is based on  `__chained_trajectories_iter`, which is not updated with `self[index]`.\r\n\r\nI am wondering if there's other method to directly locate the new generator to that location."", 'comment_created': datetime.datetime(2020, 6, 30, 13, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 447691339, 'comment_body': ""I am still wrapping  my head around for the difference. The difference seems to be which `Universe` the `AtomGroup` is referencing to after pickling.\r\n```python\r\ndef print_id(u, ag, frame_id):\r\n    print(frame_id)\r\n    print('id u:',id(u))\r\n    print('id ag:',id(ag))\r\n    print('id ag._u:',id(ag._u))\r\n\r\nu = mda.Universe(PDB_multiframe)\r\nag = u.atoms[2:5]\r\nprint('before pickle')\r\nprint('id u:',id(u))\r\nprint('id ag:',id(ag))\r\nprint('id ag_u:',id(ag._u))\r\n\r\np = multiprocessing.Pool(2)\r\nres = np.array([p.apply(print_id, args=(u, ag, i))\r\n            for i in range(3)])\r\np.close()\r\n```\r\n- using `__reduce__`:\r\n```\r\n\r\nbefore pickle\r\nid u: 140587994220432\r\nid ag: 140587994220336\r\nid ag_u: 140587994220432\r\n0\r\nid u: 140587993605936\r\nid ag: 140587993697152\r\nid ag._u: 140587993605936\r\n1\r\nid u: 140587993606176\r\nid ag: 140587993697392\r\nid ag._u: 140587993606176\r\n2\r\nid u: 140588514411568\r\nid ag: 140588514555936\r\nid ag._u: 140588514411568\r\n```\r\n- using `__set/getstate__`:\r\n```\r\nbefore pickle\r\nid u: 140397192364480\r\nid ag: 140397192364384\r\nid ag_u: 140397192364480\r\n0\r\nid u: 140397952037936\r\nid ag: 140397192077952\r\nid ag._u: 140397192364480\r\n1\r\nid u: 140397952037936\r\nid ag: 140397192078192\r\nid ag._u: 140397192364480\r\n2\r\nid u: 140397192523440\r\nid ag: 140397192244960\r\nid ag._u: 140397192364480\r\n```\r\n\r\nThe `p.apply` is part of the multiprocessing. So in each process, `Universe` and `Atomgroup` are pickled."", 'comment_created': datetime.datetime(2020, 6, 30, 13, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 448279499, 'comment_body': 'I think it\'s fine to drop `_reader` after pickling. It seems that it is only being used to retrieve `dt` for some readers. Given that we have saved `dt` during pickling, it should never need to be used again.\r\n```python\r\n    def dt(self):\r\n   2         """"""The time difference in ps between timesteps\r\n   1             \r\n851          Note\r\n   1         ----\r\n   2         This defaults to 1.0 ps in the absence of time data\r\n   3 \r\n   4 \r\n   5         .. versionadded:: 0.11.0\r\n   6         """"""\r\n   7         try:\r\n   8             return self.data[\'dt\']\r\n   9         except KeyError:\r\n  10             pass\r\n  11         try:\r\n  12             dt = self.data[\'dt\'] = self._reader()._get_dt()\r\n  13             return dt\r\n  14         except AttributeError:\r\n  15             pass\r\n  16         warnings.warn(""Reader has no dt information, set to 1.0 ps"")\r\n  17         return 1.0\r\n```', 'comment_created': datetime.datetime(2020, 7, 1, 10, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 448280296, 'comment_body': 'Added it below.', 'comment_created': datetime.datetime(2020, 7, 1, 10, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 448519764, 'comment_body': ""So this only applies if we try to find `dt` (and trigger setting `self.data['dt']`) before pickling, otherwise we loose the file-based dt - e.g.\r\n```python\r\n    u = mda.Universe('testsuite/MDAnalysisTests/data/Amber/bala.ncdf')\r\n    u_pickle_pre = pickle.loads(pickle.dumps(u))  # pickled before we check `dt`\r\n    initial_dt = u.trajectory.dt\r\n    u_pickle_post = pickle.loads(pickle.dumps(u))  # pickled after we check `dt`\r\n\r\n    print('Initial dt: ', initial_dt)\r\n    print('Pickle-post dt: ', u_pickle_post.trajectory.dt)\r\n    print('Pickle-pre dt: ', u_pickle_pre.trajectory.dt)\r\n```\r\nreturns `Initial dt: 0.0,    Pickle-post dt: 0.0,     Pickle-pre dt: 1.0` and warns that the default dt is being used for the pre case.\r\n\r\nThis could be avoided by calling dt so it's set before pickling? I guess technically what we get back then wouldn't be what we put in in terms of `data['dt']` now being set; I wouldn't think this is a huge deal, but looks like the copy methods in `Timestep` make the effort to pass `_reader` on rather than just make sure `dt` is set, and I'm not sure in general what the motivation is behind keeping the `_reader` weakref around to set dt only upon checking for it's value, rather than just doing this automatically during setup - maybe there is a good reason to keep it around..."", 'comment_created': datetime.datetime(2020, 7, 1, 17, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 448519931, 'comment_body': ""Isn't this just what `__getstate__` is by default?"", 'comment_created': datetime.datetime(2020, 7, 1, 17, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 448521164, 'comment_body': ""Your `__setstate__` code is directly setting `_anchor_name`, while `__reduce__` is using the `anchor_name` setter, which additionally runs `remove_anchor()` and `make_anchor()`, so I'm guessing your not seeing ag._u change appropriately has to do with these not being run.\r\n\r\n(`remove_anchor` assumes that `self._anchor_name` already exists, though, and I'm not sure it's recreated anywhere else in `__setstate__`, so you might still need to say just set it to None first, or there might be some other workaround)"", 'comment_created': datetime.datetime(2020, 7, 1, 17, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 448525293, 'comment_body': 'We should make this work with random access – having to iterate through the trajectory will utterly kill performance.', 'comment_created': datetime.datetime(2020, 7, 1, 17, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 448529498, 'comment_body': 'We could mark the `pickle_open()` function and related functions as private for now, i.e., `_pickle_open()`, `_bz2_pickle_open()`, `_gsd_pickle_open()` etc. We then have the freedom to change implementation in a backward-incompatible fashion even after a 2.0 release, e.g., if we want to go back to the idea to having classes that accept r and w and only fail pickling at runtime.\r\n\r\nOr are ultimately ok with the design as it stands, @kain88-de ?', 'comment_created': datetime.datetime(2020, 7, 1, 18, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 448557253, 'comment_body': ""Looking at https://github.com/MDAnalysis/mdanalysis/blob/8314f7d33b08bd467f1974fdc886f60b02f226c3/package/MDAnalysis/coordinates/chain.py#L566-L574 I don't see a way to restart the iterator in the middle. But before discussing this more, two questions\r\n1. Isn't this also a problem with the other readers or do all of them implement `__iter__()` with a simple `self._read_frame(i)`?\r\n2. How often do we pickle in the middle of a running iterator (i.e., pickle a `base.FrameIteratorAll`):\r\n    ```python\r\n    for ts in u.trajectory:\r\n           pickle.dump(f, u)\r\n    ```\r\n    This seems a strange thing to do – we could just raise a `RuntimeError` and say that you cannot pickle an active iterator (if we can detect it being active). And the iterator rewinds after its done so pickling _outside_ of the loop just needs to rewind and make sure that calling `__iter__()` works as expected. Or am I missing something here?\r\n\r\nThe other iteration cases (slices, indices, bools) are based on `base.FrameIteratorSliced`, `base.FrameIteratorIndices` and ultimately rely on `__getitem__` access. Looking through the `__iter__` methods of `FrameIteratorSliced` https://github.com/MDAnalysis/mdanalysis/blob/8314f7d33b08bd467f1974fdc886f60b02f226c3/package/MDAnalysis/coordinates/base.py#L954-L957 and `FrameIteratorIndices` https://github.com/MDAnalysis/mdanalysis/blob/8314f7d33b08bd467f1974fdc886f60b02f226c3/package/MDAnalysis/coordinates/base.py#L1074-L1076 I am admittedly a bit puzzled why they are different: The former rewinds and directly uses `self.trajectory[i] ` whereas the latter does not rewind and uses `self.trajectory._read_frame_with_aux(frame)` – I don't remember why the difference (@jbarnoud ?)). In any case, they exist for all readers and because they rely on `__getitem__()`, they _should_ work for the ChainReader, too."", 'comment_created': datetime.datetime(2020, 7, 1, 18, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 448561430, 'comment_body': 'If we decide that we have to be able to restart in the middle then we could add optional arguments to `_chained_iterator()` along the lines of\r\n```python\r\ndef _chained_iterator(self, restart=None): \r\n     """"""Iterator that presents itself as a chained trajectory."""""" \r\n     if restart is not None:\r\n         # make it a FrameIteratorSliced for the special case of\r\n         # unpickling an active iterator\r\n         return self[restart:]\r\n\r\n     # normal generator: iterate through all frames\r\n     self._rewind()  # must rewind all readers \r\n     for i in range(self.n_frames): \r\n         j, f = self._get_local_frame(i) \r\n         self.__activate_reader(j) \r\n         self.ts = self.active_reader[f] \r\n         self.ts.frame = i \r\n         yield self.ts \r\n```\r\nand then `__setstate__` can do something like\r\n```python\r\nif had_active_iterator:             # not sure how to detect\r\n   restart = self.ts.frame + 1    # should be the last iter frame\r\n   self.__chained_trajectories_iter = self._chained_iterator(restart=restart)\r\n```\r\n\r\nBut to be honest, I simply can\'t think of code where I would want to continue this iterator in the middle. Again, maybe I am missing something here.\r\n```', 'comment_created': datetime.datetime(2020, 7, 1, 19, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 448587423, 'comment_body': ""This is an interesting API. As @yuxuanzhuang mentions the reference to the reader is only used to calculate the time difference between two steps. We do not use it otherwise. The dt property is calculated by the [Timestep](https://github.com/MDAnalysis/mdanalysis/blob/8314f7d33b08bd467f1974fdc886f60b02f226c3/package/MDAnalysis/coordinates/base.py#L835) and exposed to the user through the [trajectory](https://github.com/MDAnalysis/mdanalysis/blob/8314f7d33b08bd467f1974fdc886f60b02f226c3/package/MDAnalysis/coordinates/base.py#L1460). @fiona-naughton is using `u.trajectory.dt` to get the the time difference.  \r\n\r\nDo we really want to have dt be stored in the timestep? It would make more sense to me to only have access to dt from the trajectory. The timestep would only know about the current time, not the difference to another timestep. This would make logical sense to me as a time difference needs at least two timesteps to be defined. \r\n\r\nI would remove `dt` from the Timestep object and have the trajectory handle time difference calculation. We basically do this right now anyway, thats why we need the weakref to the trajectory (called reader in the code). This would make the need for this weak reference obsolete. \r\n\r\nI do not think this is a huge break of our public API. I never used a timestep object. I rather usually access the trajectory directly or an atomgroup.   Who actually accesses the timestep during iteration?\r\n\r\nOther solution to the problem with lazy loading the time difference is to check for it when we call `__getstate__` before copying the dict\r\n\r\n```python\r\ndef __getstate__(self):\r\n    self.dt\r\n    dict = self.__dict__.copy()\r\n    dict.pop('_reader', None)\r\n    return dict\r\n```\r\nThe lazy loading logic is also the reason we keep the _reader reference around during a copy.\r\n"", 'comment_created': datetime.datetime(2020, 7, 1, 20, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 448614548, 'comment_body': ""> Who actually accesses the timestep during iteration?\r\n\r\n`ts.frame` and `ts.time` are commonly used, I'd say. There are the various things in `ts.data`. Not sure about auxiliary stuff.\r\n\r\nDropping `ts.dt` makes sense, though."", 'comment_created': datetime.datetime(2020, 7, 1, 21, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 448615189, 'comment_body': 'P.S.: There was some discussion/explanation in #2269 why we are _not_ really using `ts` a lot.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 448966525, 'comment_body': ""I admit I am still confused about all these iterators. I also don't understand why we need an extra generator in the first place? Can't we just implement it directly to `ChainReader`? \r\n\r\nBesides, I just realize it's not just about pickling, but some inconsistency between `ChainReader` and other readers?\r\n```\r\nu = mda.Universe(GRO, XTC)\r\nu.trajectory[5]\r\nu.trajectory.next()\r\n< Timestep 6 with unit cell dimensions [0. 0. 0. 0. 0. 0.] >\r\n\r\nu = mda.Universe(GRO, [XTC, XTC])\r\nu.trajectory[5]\r\nu.trajectory.next()\r\n< Timestep 1 with unit cell dimensions [0. 0. 0. 0. 0. 0.] >\r\n```\r\nbecause read_frame and generator are disconnected.\r\n"", 'comment_created': datetime.datetime(2020, 7, 2, 12, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 448968082, 'comment_body': 'I was not sure `__setstate__` works without `__getstate__`. Seems that it does. I will remove this part.', 'comment_created': datetime.datetime(2020, 7, 2, 12, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 449071525, 'comment_body': 'I think this should be classified as a bug. So I submit a PR ##2815 for that, which should also solve the problem here.', 'comment_created': datetime.datetime(2020, 7, 2, 15, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 449151224, 'comment_body': 'That makes sense! So setting by `anchor_name` get the ""right"" result.\r\nI also find that because `anchor_name` links between `ag` and `u`, we have to first serialize `u` then `ag`, otherwise, the linkage will break (like above).', 'comment_created': datetime.datetime(2020, 7, 2, 16, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 449718985, 'comment_body': ""@yuxuanzhuang can you open an issue for dropping `ts.dt`, please? It's an API change so it deserves its own issue and discussion. You can link it to this comment thread. Thanks."", 'comment_created': datetime.datetime(2020, 7, 3, 23, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 449719043, 'comment_body': 'Are you just calling `self.dt` to make stuff happen in the background? If so, add a comment why this apparent no-op is here.', 'comment_created': datetime.datetime(2020, 7, 3, 23, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 449719144, 'comment_body': 'Maybe add a comment or a link to an issue to explain why this is an important test.', 'comment_created': datetime.datetime(2020, 7, 3, 23, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 450911954, 'comment_body': 'why define the class only if chemfiles was found?', 'comment_created': datetime.datetime(2020, 7, 7, 14, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Luthaf', 'type': 'User'}, {'comment_id': 450913103, 'comment_body': ""it do not look like you are checking this in `__getstate__`, so users could try `ChemfilesPicklable(file, 'w')` without reading the documentation and have it fail silently or strangely"", 'comment_created': datetime.datetime(2020, 7, 7, 14, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Luthaf', 'type': 'User'}, {'comment_id': 450914669, 'comment_body': 'You may also want to save the current step being read (self.step) to reset the file cursor. Although I am not sure how this fits within the largest framework here, so it might be fine.\r\n\r\nOther pieces of state that could be set & restored are a custom cell and custom topology; but these are not exposed in MDA so this should be advanced usage anyway', 'comment_created': datetime.datetime(2020, 7, 7, 14, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Luthaf', 'type': 'User'}, {'comment_id': 450994546, 'comment_body': 'Because it is inherited from `chemfiles.Trajectory`. If chemfiles is not present, `import MDAnalysis` will fail.\r\n```python\r\n  File ""/home/scottzhuang/mdanalysis/package/MDAnalysis/coordinates/__init__.py"", line 715, in <module>\r\n    from . import chemfiles\r\n  File ""/home/scottzhuang/mdanalysis/package/MDAnalysis/coordinates/chemfiles.py"", line 387, in <module>\r\n    class ChemfilesPicklable(chemfiles.Trajectory):\r\nNameError: name \'chemfiles\' is not defined\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 16, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 451003054, 'comment_body': 'I may have misinterpreted something, but `chemfiles.Trajectory.step` does not exist. I checked the documents, and it mentions\r\n>property nsteps\r\nGet the current number of steps in this Trajectory.\r\n\r\nBut it seems that nsteps returns the total number of frames?', 'comment_created': datetime.datetime(2020, 7, 7, 16, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 451005639, 'comment_body': ""Okay, I can get `step` from `Frame`. I am wondering if there's a way to get the current frame? Sorry I am not quite familiar with `chemfiles`"", 'comment_created': datetime.datetime(2020, 7, 7, 16, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 451160687, 'comment_body': 'Sorry, I missed that point. Then the code looks good =)', 'comment_created': datetime.datetime(2020, 7, 7, 21, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Luthaf', 'type': 'User'}, {'comment_id': 451162692, 'comment_body': 'No, there is no way to get the last read step directly from the trajectory. You could perhaps directly define __getstate__ on ChemfilesReader instead; and get the step from there as `self._step`', 'comment_created': datetime.datetime(2020, 7, 7, 21, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Luthaf', 'type': 'User'}, {'comment_id': 451397167, 'comment_body': ""Thanks! That's fine, after pickling, the current step for the reader will be set to trajectory[previous_ts] (this `__setstate__` is defined directly to `ReaderBase`). "", 'comment_created': datetime.datetime(2020, 7, 8, 9, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 451794830, 'comment_body': 'is this still necessary with the recent cahnges to the chain reader?', 'comment_created': datetime.datetime(2020, 7, 8, 20, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 451796606, 'comment_body': ""This comment is not an explanaition. Totally unclear why the side effect of this line of code is that we save 'dt' as a variable. My suggestion would be \r\n\r\n```\r\nThe dt property is lazy loaded. We need to load it once from the _reader attached to this timestep to load the dt value.\r\n```"", 'comment_created': datetime.datetime(2020, 7, 8, 20, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 451799824, 'comment_body': ""Yes, the `ts` of individual reader still has to be reset. I think I tried to reset the ts during iteration (e.g. inside `_get_local_frame` when reader_index is changed, but somehow failed (I don't remember why but seems to be a dead end to me)"", 'comment_created': datetime.datetime(2020, 7, 8, 20, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 452569142, 'comment_body': ""Please add a comment explaining why we are doing the rewinding here. The next person looking at it in a year's time will probably just take it out unless there's a comment here explaining WHY it's here."", 'comment_created': datetime.datetime(2020, 7, 10, 1, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452570114, 'comment_body': 'Please add the comment that explains why `__reduce__`.\r\n\r\nOr if you want to rewrite with `__setstate__` then do that :-).', 'comment_created': datetime.datetime(2020, 7, 10, 1, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452571178, 'comment_body': 'Did you build the docs and all functions/classes show up?', 'comment_created': datetime.datetime(2020, 7, 10, 1, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452571629, 'comment_body': ""This can't be here as it will compete with the actual module. Remove."", 'comment_created': datetime.datetime(2020, 7, 10, 1, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452571714, 'comment_body': '(And sphinx should flag it as an error to have the same module twice.)', 'comment_created': datetime.datetime(2020, 7, 10, 1, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452574562, 'comment_body': 'Put this as under [doc/sphinx/source/documentation_pages/coordinates](https://github.com/MDAnalysis/mdanalysis/tree/develop/package/doc/sphinx/source/documentation_pages/coordinates) and add an entry to the second TOC (for developers) in [doc/sphinx/source/documentation_pages/coordinates_modules.rst](https://github.com/MDAnalysis/mdanalysis/blob/develop/package/doc/sphinx/source/documentation_pages/coordinates_modules.rst):\r\n```reST\r\nThe remaining pages are primarily of interest to developers. Programmers and anyone trying to implement new functionality should first read the :ref:`Trajectory API` and then look at the following pages. \r\n\r\n.. toctree::\r\n   :maxdepth: 1\r\n\r\n   coordinates/base\r\n   coordinates/core\r\n   coordinates/pickle_universe.rst\r\n   coordinates/chain\r\n   coordinates/XDR\r\n\r\nIn particular, all trajectory readers have to be :ref:`serializable<serialization>` and they should pass all tests\r\navailable in the ``MDAnalysisTests.coordinates.base.MultiframeReaderTest`` or ``MDAnalysisTests.coordinates.base.BaseReaderTest``.\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 1, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452575519, 'comment_body': 'heading, not lone bullet\r\n```suggestion\r\nFile Access\r\n~~~~~~~~~~~\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 1, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452575584, 'comment_body': 'subheading', 'comment_created': datetime.datetime(2020, 7, 10, 1, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452575611, 'comment_body': 'subheading', 'comment_created': datetime.datetime(2020, 7, 10, 1, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452575904, 'comment_body': ""only use markup for real functions, don't use a confusing mixed name\r\n```suggestion\r\nto pickle those, or write custom :func:`__getstate__` and :func:`__setstate__` methods for the reader.\r\n```"", 'comment_created': datetime.datetime(2020, 7, 10, 1, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452575955, 'comment_body': 'subheading', 'comment_created': datetime.datetime(2020, 7, 10, 1, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452576084, 'comment_body': 'two backtics for standard reST markup\r\n```suggestion\r\ntestes inside ``parallelism/test_multiprocessing.py`` for the reader.\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 1, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452576419, 'comment_body': 'Make it a list with bulletpoints.', 'comment_created': datetime.datetime(2020, 7, 10, 1, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452576613, 'comment_body': 'move to coordinates and link from doc/sphinx/source/documentation_pages/coordinates_modules.rst', 'comment_created': datetime.datetime(2020, 7, 10, 1, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453182828, 'comment_body': 'This is strange here. You are talking about serilization of a universe in the documentation for coordinates. It would fit better with universe documentation. ', 'comment_created': datetime.datetime(2020, 7, 11, 10, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453182925, 'comment_body': 'Good paragraph to start a paper. Not needed for documentation. ', 'comment_created': datetime.datetime(2020, 7, 11, 10, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453182998, 'comment_body': 'anchor_name is an implementation detail. No need to mention this in high level docs for using mdanalysis\r\n', 'comment_created': datetime.datetime(2020, 7, 11, 10, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453183105, 'comment_body': 'implementation detail', 'comment_created': datetime.datetime(2020, 7, 11, 10, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453183142, 'comment_body': 'which functions are called is an implementation detail. The note that the files still need to be around and be available on the same file path is very good!', 'comment_created': datetime.datetime(2020, 7, 11, 10, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453183287, 'comment_body': 'to many steps in one line for a normal user. Store the pickle to a file and load it for a later session. ', 'comment_created': datetime.datetime(2020, 7, 11, 10, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453183514, 'comment_body': 'how is this happening here in the code? Totally unclear. Rather you should explain how to use mdanalysis with multiprocessing. This means the analysis has to be written as a function. The universe *has* to be an argument to the function. Atomgroups can be. ', 'comment_created': datetime.datetime(2020, 7, 11, 10, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453183782, 'comment_body': 'How will this help?  Is this really necessary if the reader supports random_access? Do we have readers that do not support that? ', 'comment_created': datetime.datetime(2020, 7, 11, 11, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453184061, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 11, 11, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453257316, 'comment_body': ""I asked for the whole doc to be put under coordinates because ultimately this is mainly about serializing the readers and what developers need to know. Or at least, that's currently my main concern.\r\n\r\nI agree with @kain88-de that a split into two docs would be good:\r\n1. developers: *what you need to do to get a reader to serialize*\r\n2. user facing document on *how to use serialization*"", 'comment_created': datetime.datetime(2020, 7, 12, 2, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453257421, 'comment_body': '@yuxuanzhuang Make this document the one about **Serialization of Coordinate Readers**\r\n- change the heading\r\n- focus text on what developers need to know', 'comment_created': datetime.datetime(2020, 7, 12, 2, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453257475, 'comment_body': ""But it can go in the developer docs, don't you think?"", 'comment_created': datetime.datetime(2020, 7, 12, 2, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453257489, 'comment_body': 'Again, fine for me in developer docs.', 'comment_created': datetime.datetime(2020, 7, 12, 2, 26, 39, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453257536, 'comment_body': 'Details for developer docs, the ""filename needs to be accessible"" should also be in the user docs.', 'comment_created': datetime.datetime(2020, 7, 12, 2, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453257843, 'comment_body': ""Also, there's a closing parenthesis missing"", 'comment_created': datetime.datetime(2020, 7, 12, 2, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453257988, 'comment_body': 'The example together with more explanations (as asked for by @kain88-de below) would be good in a user guide document.', 'comment_created': datetime.datetime(2020, 7, 12, 2, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453258154, 'comment_body': ""I agree with @kain88-de that this document is mixing user and developer docs.\r\n\r\nMy suggestion is to focus _here_ on the _developers_ only and in particular on the serialization of coordinate readers. You can say a little bit about serializing Universe (as this is the background and because we don't really have a better place in the docs yet) but then focus on the technical aspects of \r\n- what happens when a reader is serialized\r\n- what needs to be done for a new reader to make serialization work"", 'comment_created': datetime.datetime(2020, 7, 12, 2, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453258483, 'comment_body': 'Take out the ""how to do things with multiprocessing"" – that\'s a user part. Instead of adding it somewhere in the MDAnalysis API docs, create a new chapter in the User Guide instead – @lilyminium should be able to help and there\'s [Contributing to the User Guide](https://userguide.mdanalysis.org/1.0.0/contributing_docs.html).\r\n\r\nAlong the lines of #1175 we should start making an effort to split the docs into API docs (""the docs"" at https://docs.mdanalysis.org) and the user docs (""User Guide"" https://userguide.mdanalysis.org). ', 'comment_created': datetime.datetime(2020, 7, 12, 2, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453258668, 'comment_body': 'Does this format as a list or as code – just asking because of the indentation.\r\n\r\n(Maybe I am also confusing it with Markdown...) anyway, this should probably all be starting in column 1', 'comment_created': datetime.datetime(2020, 7, 12, 2, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453507576, 'comment_body': '@Luthaf would it be possible to push these changes up to Chemfiles directly?  I.e. make `chemfiles.Trajectory` picklable?', 'comment_created': datetime.datetime(2020, 7, 13, 9, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 453508638, 'comment_body': 'use the `anchor_name` property rather than doing it manually here', 'comment_created': datetime.datetime(2020, 7, 13, 9, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 453519558, 'comment_body': 'The problem about using `anchor_name` here is that `anchor_name` have to first remove anchor, which will raise an error because the new universe doesn\'t have one.\r\nSo it might becomes:\r\n```python\r\nself._anchor_name = """"\r\nself.anchor_name = args[0]\r\n```', 'comment_created': datetime.datetime(2020, 7, 13, 9, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 453562084, 'comment_body': 'https://github.com/MDAnalysis/mdanalysis/pull/2723#issuecomment-650175113\r\n`TRZ` reader for example supports random access, but needs `offset`.', 'comment_created': datetime.datetime(2020, 7, 13, 10, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 453666245, 'comment_body': 'I would not be against it in general, although the approach taken here of serializing only the file name & hoping it stays accessible feels a bit fragile as a general pickle implementation. \r\n\r\nMy understanding is that this PR main goal is enabling Python multiprocessing, am I right? The approach should work fine for this use case, but not for general Python pickling. I am a bit hesitant of making the `chemfiles.Trajectory` pickable with this huge caveat, since it might break in strange ways for users who expect pickle to ""just work""', 'comment_created': datetime.datetime(2020, 7, 13, 13, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Luthaf', 'type': 'User'}, {'comment_id': 453871603, 'comment_body': 'yes', 'comment_created': datetime.datetime(2020, 7, 13, 19, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453871687, 'comment_body': 'yes', 'comment_created': datetime.datetime(2020, 7, 13, 19, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453872932, 'comment_body': 'does the universe have to be the first argument?', 'comment_created': datetime.datetime(2020, 7, 13, 19, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 454252809, 'comment_body': 'It has to be pickled before `AtomGroup`. Maybe its not necessary at all if https://github.com/MDAnalysis/mdanalysis/pull/2723#issuecomment-657260835 works.', 'comment_created': datetime.datetime(2020, 7, 14, 10, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 454440568, 'comment_body': 'What do you think about an overview (important need-to-know, basic intro) + detailed tutorial for the user guide, @yuxuanzhuang? Then you can also have separate documents on serialisation, and parallel analysis, and just link them to make it clear they are related.', 'comment_created': datetime.datetime(2020, 7, 14, 15, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 454441118, 'comment_body': 'But could fit in the user guide! 😄 ', 'comment_created': datetime.datetime(2020, 7, 14, 15, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 454447792, 'comment_body': 'Hmm, it could go either in the ""analysis"" or the ""advanced"" sections? Example of a tutorial in the ""advanced"" section: [Adding a Residue or Segment to a Universe](https://userguide.mdanalysis.org/1.0.0/advanced_topology.html). And in ""analysis"": [Writing your own trajectory analysis](https://userguide.mdanalysis.org/1.0.0/examples/analysis/custom_trajectory_analysis.html)\r\n\r\n> we should start making an effort to split the docs into API docs\r\n\r\nYes, I think this should probably come after or with separating the user guide into ""user"" and ""dev"" guides, though...', 'comment_created': datetime.datetime(2020, 7, 14, 15, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 454575176, 'comment_body': 'some git conflicts creaped in here.', 'comment_created': datetime.datetime(2020, 7, 14, 18, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 454644284, 'comment_body': '>> we should start making an effort to split the docs into API docs\r\n\r\nI primarily meant that we can already create ""How to do X"" (such as ""How to run do parallel processing"") in the User Guide as opposed to also first have them in the docs (which I referred to as ""API docs"") and then move them later.', 'comment_created': datetime.datetime(2020, 7, 14, 21, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 454645641, 'comment_body': 'I would put the user-portion of your parallel analysis docs in the **analysis** section of the User Guide – you can start a section _Parallel Analysis_ with your general introduction and then your example how to use multiprocessing.  You can add a See Also section for PMDA for the time being. Later, sections on dask, MPI, and whatnot can be added.', 'comment_created': datetime.datetime(2020, 7, 14, 21, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 454646199, 'comment_body': 'I would put the user-portion of your parallel analysis docs in the **analysis** section of the User Guide – you can start a section _Parallel Analysis_ with your general introduction and then your example how to use multiprocessing.  You can add a See Also section for PMDA for the time being. Later, sections on dask, MPI, and whatnot can be added.', 'comment_created': datetime.datetime(2020, 7, 14, 21, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 454647259, 'comment_body': 'oops – failed merge!', 'comment_created': datetime.datetime(2020, 7, 14, 21, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 454651944, 'comment_body': 'fixed it myself...', 'comment_created': datetime.datetime(2020, 7, 14, 21, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 454915470, 'comment_body': 'Sounds good to me.', 'comment_created': datetime.datetime(2020, 7, 15, 9, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 456825534, 'comment_body': 'is this OK @richardjgowers ?', 'comment_created': datetime.datetime(2020, 7, 18, 20, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 456825597, 'comment_body': 'Can you give example of the cases. This will make it easier for others to understand.', 'comment_created': datetime.datetime(2020, 7, 18, 20, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 456825768, 'comment_body': 'you already test that files can be pickled that is enough as multiprocessing is using pickles internally.', 'comment_created': datetime.datetime(2020, 7, 18, 20, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 456825855, 'comment_body': 'do we need to test this for all readers? A single timestep would be enough. There is only a weakref to the readers anyway.', 'comment_created': datetime.datetime(2020, 7, 18, 20, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 456825981, 'comment_body': 'What do these tests tell us? We already test that the reader and universe can be pickled. Multiprocessing does not add much to this. Plus the tests take a long time looking at the build log.', 'comment_created': datetime.datetime(2020, 7, 18, 20, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 456890893, 'comment_body': ""I think this is specific to test `AtomGroup` can be pickled with `Universe` successfully. The difference between direct pickle and multiprocessing is that, in multiprocessing, it's happening all in another process so it does not have the old `Universe` to be anchored on. \r\n\r\nI think it makes sense to only test it on one case, it shouldn't differ from one reader to another."", 'comment_created': datetime.datetime(2020, 7, 19, 10, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 456891764, 'comment_body': 'Merge it with the test above.', 'comment_created': datetime.datetime(2020, 7, 19, 10, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 457606925, 'comment_body': 'did they?', 'comment_created': datetime.datetime(2020, 7, 20, 18, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 457609286, 'comment_body': 'Yes. ', 'comment_created': datetime.datetime(2020, 7, 20, 18, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 457609355, 'comment_body': 'yeah once is enough to test this', 'comment_created': datetime.datetime(2020, 7, 20, 18, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 457610306, 'comment_body': 'making sure it happens in another process is also a good idea given the anchors. However, the test name should reflect that, i.e. `test_universe_unpickle_in_new_process`.  Using multiprocessing is a convenient way to do this.', 'comment_created': datetime.datetime(2020, 7, 20, 18, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 460599340, 'comment_body': ""Maybe something for me to do in a follow-up, but we can avoid some headaches long-term by using the PEP440 implementation of version comparisons here and elsewhere.\r\n\r\nThose are robust to `alpha/beta/rc/dev` versions and so on. The raw string comparison is much less robust; there's a sort of middle ground available from distutils for version checking as well, though the PEP one is better these days.\r\n\r\nProbably out of scope given the size of this PR already though."", 'comment_created': datetime.datetime(2020, 7, 27, 1, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460599630, 'comment_body': 'Maybe a little nicer to avoid the `\\` and  just continue the line using quotes at end of this line and start of next.', 'comment_created': datetime.datetime(2020, 7, 27, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460601346, 'comment_body': 'typo ""readling""', 'comment_created': datetime.datetime(2020, 7, 27, 1, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460601620, 'comment_body': '""to open"" repeated here', 'comment_created': datetime.datetime(2020, 7, 27, 1, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460601814, 'comment_body': 'slash -> quote continuation may be a little nicer here', 'comment_created': datetime.datetime(2020, 7, 27, 1, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460601895, 'comment_body': '/ -> quote continuation maybe', 'comment_created': datetime.datetime(2020, 7, 27, 1, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 461349950, 'comment_body': 'Can this be written as\r\n```python\r\nself.ts.dimensions[3:] = np.rad2deg(np.arccos(self.ts.dimensions[3:]))\r\n```\r\nInstead of a loop?', 'comment_created': datetime.datetime(2020, 7, 28, 6, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 461952062, 'comment_body': ""I'm not super fond for two letter names (for modules/classes/functions/etc..), mainly because it makes readability difficult. It's picky so I'm good if you decide to stick with using `fl`, but since gsd is imported, it may be clearer to just go `gsdf.fl`? (especially since in the docs you refer to `gsd.fl`)?"", 'comment_created': datetime.datetime(2020, 7, 28, 23, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461960324, 'comment_body': 'Thoughts on possibly documenting this under the module docstring (under Readers)?', 'comment_created': datetime.datetime(2020, 7, 28, 23, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461961573, 'comment_body': 'I\'m thinking here, particularly since we encourage ProtoReader as a ""fallback"" when implementing `__del__` is a bad idea, it might be worth documenting the differences.', 'comment_created': datetime.datetime(2020, 7, 29, 0, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461967955, 'comment_body': ""Whilst we're here, could you add an empty line before this? Looking at the existing docs, I think it's a bit broken right now: https://www.mdanalysis.org/docs/documentation_pages/core/universe.html\r\n```suggestion\r\n\r\n    .. versionchanged:: 1.0.0\r\n```"", 'comment_created': datetime.datetime(2020, 7, 29, 0, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461980605, 'comment_body': '```suggestion\r\ntests inside ``parallelism/test_multiprocessing.py`` for the reader.\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 1, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461981966, 'comment_body': 'It would be useful here, for PDB, GSD and GSDPicklable, etc... to add links to the relevant sections. I.e. :class:`MDAnalysis.coordinates.PDB.PDBReader`. I realise it makes things a bit messier in-text though.', 'comment_created': datetime.datetime(2020, 7, 29, 1, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461983022, 'comment_body': 'Should this be reads intead?\r\n\r\n```suggestion\r\nposition is maintained, i.e. next() reads the right next timestep,\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 1, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461983321, 'comment_body': '```suggestion\r\nadd necessary tests inside ``utils/test_pickleio.py`` for the I/O class,\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 1, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461983399, 'comment_body': '```suggestion\r\nIf the new reader accessed the file with a new picklable I/O class,\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 1, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461985531, 'comment_body': ""Just looking at codecov, there are RuntimeErrors for the __getstate__ of BZ2Picklable, FileIOPicklable, and GzipPicklable that aren't being covered here. Ideally it'd be great to cover them if they are reachable code paths."", 'comment_created': datetime.datetime(2020, 7, 29, 1, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461985849, 'comment_body': 'Could you also cover the ValueError for GSD_pickle? (line 260)', 'comment_created': datetime.datetime(2020, 7, 29, 1, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461990061, 'comment_body': 'ouch!', 'comment_created': datetime.datetime(2020, 7, 29, 1, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 462097102, 'comment_body': ""missing a closing ')' here"", 'comment_created': datetime.datetime(2020, 7, 29, 7, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 462097645, 'comment_body': ""Should be 'returns a GSDPicklable object' rather than 'returns either...'?"", 'comment_created': datetime.datetime(2020, 7, 29, 7, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 462100658, 'comment_body': ""'Flawless' might be a bit too strong a claim here? As much as we'd like it to be true, I'm not sure we can guarantee things will be perfect! You could probably just leave this without an adjective here, or just use 'working implementation' or something?"", 'comment_created': datetime.datetime(2020, 7, 29, 7, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 462100780, 'comment_body': ""Should be 'Some I/O classes support'?"", 'comment_created': datetime.datetime(2020, 7, 29, 7, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 462247945, 'comment_body': ""Should we just move the `__getstate__` func into `ProtoReader`. I don't see the reason not to."", 'comment_created': datetime.datetime(2020, 7, 29, 12, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 462466156, 'comment_body': 'This (and the ones below) needs to be in quotes (as per _read_frame on line 19) for the hyperlinks to work (currently they only build as plain text)', 'comment_created': datetime.datetime(2020, 7, 29, 17, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 462467001, 'comment_body': 'As per above, could be worth making TRZReader a link too?', 'comment_created': datetime.datetime(2020, 7, 29, 17, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 462468225, 'comment_body': ""I don't think this is building properly on my end, please do check if this is intended / needs fixing."", 'comment_created': datetime.datetime(2020, 7, 29, 17, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 462481553, 'comment_body': ""I'm not sure here, I always saw ProtoReader as the thing that you fallback to when the ReaderBase implements something that just won't work. So there might be an argument that the current approach offers a bit more modularity, but putting it in ProtoReader would just make things cleaner.\r\n\r\nThoughts @MDAnalysis/coredevs ?"", 'comment_created': datetime.datetime(2020, 7, 29, 17, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 462499182, 'comment_body': '@yuxuanzhuang why was this change necessary? Did this fix a bug?', 'comment_created': datetime.datetime(2020, 7, 29, 18, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 462499386, 'comment_body': '@yuxuanzhuang why was this change necessary? Did this fix a bug?', 'comment_created': datetime.datetime(2020, 7, 29, 18, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 462526538, 'comment_body': ""I think it's good in ProtoReader – if it works there then it will be as widely available as possible.\r\n\r\nHopefully we get more readers to be tested with the reader api tests."", 'comment_created': datetime.datetime(2020, 7, 29, 19, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 462637300, 'comment_body': 'Relates to #2878', 'comment_created': datetime.datetime(2020, 7, 29, 22, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 462637330, 'comment_body': 'Relates to #2878', 'comment_created': datetime.datetime(2020, 7, 29, 22, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463165781, 'comment_body': ""That's a workaround but a bit ugly in that it adds code to the library that has nothing to do with its purpose, namely generation of documentation. Additionally, this brings down coverage.\r\n\r\nI was thinking along https://docs.python.org/3/library/unittest.mock.html and add a MagicMock to the sphinx conf.py, something like\r\n```python\r\ntry:\r\n   import chemfiles\r\nexcept ImportError:\r\n   # mock it\r\n   import sys\r\n   from unittest.mock import MagicMock\r\n   sys.modules['chemfiles'] = MagicMock()\r\n```\r\nThe idea would be to have the (mocked) module in `sys.path` already so when mda is trying to `import chemfiles` it will just take the one from `sys.path`.\r\n\r\nI am not 100% sure that this works. @richardjgowers has done some of these shenanigans in the past."", 'comment_created': datetime.datetime(2020, 7, 30, 17, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463955892, 'comment_body': 'extra )?\r\n\r\n```suggestion\r\n(e.g. :class:`MDAnalysis.coordinates.GSD.GSDReader`),\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 12, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 463958680, 'comment_body': 'Could you just move the `if HAS_CHEMFILES` into `__init__`?\r\n\r\nEdit: To clarify -- can `ChemfilesPicklable` exist when `chemfiles` is not installed, but just error on instantiation, so docs can get built?', 'comment_created': datetime.datetime(2020, 8, 1, 12, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463959235, 'comment_body': 'Are these attribute names? (i.e. `universe.topology`)? If so, could you uncapitalise ""Topology"" and also clarify a bit -- or even more clarification if I misinterpreted this note.', 'comment_created': datetime.datetime(2020, 8, 1, 12, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463959435, 'comment_body': '```suggestion\r\n    to open a compressed file in text mode, use :func:`bz2_pickle_open`.\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 12, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463959745, 'comment_body': ""Do we want to be clearer about what should be expected for SingleFrameReaderBase readers here (or above)? From test_multiprocessing, it looks like the MMTF reader pickles normally, but I'm not sure SIngleFrame readers can use BaseReaderTest (might be wrong here)."", 'comment_created': datetime.datetime(2020, 8, 1, 12, 57, 6, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 463959770, 'comment_body': 'I don\'t quite understand what ""a filename given a text or byte string"" means, could you clarify?', 'comment_created': datetime.datetime(2020, 8, 1, 12, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463959859, 'comment_body': ""One might then ask why this is even an option. Perhaps you could add a note about how it's there to be consistent with a wider api?"", 'comment_created': datetime.datetime(2020, 8, 1, 12, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463959930, 'comment_body': ""So on further thought here, is there a reason why we aren't testing all the SingleFrameReaderBase readers here? It seems like most ReaderBase readers are represented here, but SingleFrameReaders like INPCRD aren't."", 'comment_created': datetime.datetime(2020, 8, 1, 12, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 463960234, 'comment_body': '```suggestion\r\n                         ""files can be pickled."")\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 13, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463960567, 'comment_body': '```suggestion\r\n    This function returns a FileIOPicklable object wrapped in a BufferIOPicklable\r\n    class when given the ""rb"" reading mode, or a FileIOPicklable object wrapped in\r\n    a TextIOPicklable class with the ""r"" reading mode. It can be used as a\r\n```\r\n👆 at least that\'s my understanding of it, but I did have to think a bit to work that out. It\'s always better for docs to be as explicit as possible. ', 'comment_created': datetime.datetime(2020, 8, 1, 13, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463960806, 'comment_body': '```suggestion\r\n    can used to open trajectory/topology files. This object composition is more \r\n    flexible and easier than class inheritance to implement pickling for new readers.\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 13, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463962003, 'comment_body': ""I changed the code so that it will mock `chemfiles` as long as we it cannot find one (regardless we are building a doc or not). So now we don't need to add `HAS_CHEMFILES` as a requirement for the existence of `ChemfilesPicklable`.\r\n \r\nWith that the test can pass, and the doc can be built with/without `chemfiles`. "", 'comment_created': datetime.datetime(2020, 8, 1, 13, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 464295476, 'comment_body': 'I think I tested all the formats listed in the format section  (and `ChainReader` and `Memory` (https://docs.mdanalysis.org/1.0.0/documentation_pages/coordinates/init.html#id23)\r\ne.g. INPCRD (line 134). \r\n\r\nSo I guess the idea in the near future is, for the format not covered by BaseTest (for any reason), we add it to `test_multiprocessing`.', 'comment_created': datetime.datetime(2020, 8, 3, 9, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 464322632, 'comment_body': 'Would it make sense to put that test in `BaseReaderTest` (and maybe `_SingleFrameReader`) so any new reader get tested? While it looks cleaner to have the test here, I am worried we will miss readers, especially when new readers get added.', 'comment_created': datetime.datetime(2020, 8, 3, 10, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jbarnoud', 'type': 'User'}, {'comment_id': 464337812, 'comment_body': 'Do you mean cover all the `_SingleFrameReader` as how `class TestPDBReader(_SingleFrameReader)` is implemented? As for pickle test in `BaseReaderTest` and `MutliframeReaderTest`, they were already added. ', 'comment_created': datetime.datetime(2020, 8, 3, 10, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 464342363, 'comment_body': 'It is what I meant, indeed. My concern when I see this fixture is that we will forget to add the new readers to the list. Ideally I would like something that fails if a reader is not tested for pickling and multiprocessing.', 'comment_created': datetime.datetime(2020, 8, 3, 10, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jbarnoud', 'type': 'User'}, {'comment_id': 464457760, 'comment_body': 'I think for now, only tests in `NAMDBIN`, `PDB`, `PQR` utilize `_SingleFrameReader`. Makes sense to create a new PR for other single frame readers e.g. MMTF, to be inherited from that? (which it along can be backported.)', 'comment_created': datetime.datetime(2020, 8, 3, 14, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 464489709, 'comment_body': ""From a quick glance, I'm not seeing FHI-AIMS?"", 'comment_created': datetime.datetime(2020, 8, 3, 15, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 464495373, 'comment_body': ""Oh right! that's a new one.. and `NAMDBIN` as well, but that's covered now in `_SingleFrameReaderTest`."", 'comment_created': datetime.datetime(2020, 8, 3, 15, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 464786638, 'comment_body': ""How does equality testing for `ts` work? Did we implement `__eq__`?? Does it compare floats anywhere? I'm just surprised that it works...."", 'comment_created': datetime.datetime(2020, 8, 4, 4, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 464787560, 'comment_body': ""I'd be in favor of getting the PR merged and open a new one where we think hard about how to do consistent testing of _all_ our readers and parsers. \r\n\r\nWe'll also need to look at converters... but that's a different issue. Literally."", 'comment_created': datetime.datetime(2020, 8, 4, 4, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 464862740, 'comment_body': '```python\r\n    def __eq__(self, other):\r\n        """"""Compare with another Timestep\r\n\r\n        .. versionadded:: 0.11.0\r\n        """"""\r\n        if not isinstance(other, Timestep):\r\n            return False\r\n\r\n        if not self.frame == other.frame:\r\n            return False\r\n\r\n        if not self.n_atoms == other.n_atoms:\r\n            return False\r\n\r\n        if not self.has_positions == other.has_positions:\r\n            return False\r\n        if self.has_positions:\r\n            if not (self.positions == other.positions).all():\r\n                return False\r\n\r\n        if not self.has_velocities == other.has_velocities:\r\n            return False\r\n        if self.has_velocities:\r\n            if not (self.velocities == other.velocities).all():\r\n                return False\r\n\r\n        if not self.has_forces == other.has_forces:\r\n            return False\r\n        if self.has_forces:\r\n            if not (self.forces == other.forces).all():\r\n                return False\r\n\r\n        return True\r\n```\r\nNot everything is tested, but at least a few basic ones.\r\n', 'comment_created': datetime.datetime(2020, 8, 4, 7, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 466280759, 'comment_body': ""@yuxuanzhuang if we can at the very least document the testing procedure for SingleFrameReaderBase here (or somewhere else, but either way we need to have it down for future devs to understand), then I think we're done.\r\n\r\nIdeally though we should have some kind of documentation for where SingleFrameReaderBase sits in all this (i.e. you don't need to deal with the open class and it should just serialize)."", 'comment_created': datetime.datetime(2020, 8, 6, 9, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 467207868, 'comment_body': ""Thank you, that's all good. Nice."", 'comment_created': datetime.datetime(2020, 8, 7, 18, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': '931d9b50a67a9e96061b5ac75d44368c82072531', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69ce9812aedc0335f4596c47da708a475fc0342', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '432edf3dbb0ef618c525babc5a5463683a411884', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf55bf382b664c0df769ff2bd80e92dcb8302325', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd9a485ccf1db95645a850e4c5f60deaac440b85', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f33629f5032309b69a35638da79c147a47ec6bfc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aca44960a0caeea82f9e653b49974554fccdf5f7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd4ffe35c10dd7decd39c738bf64096c50a614f6', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec5bd3cd8b44880f7c3bebd2979b6859a3c8799c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6515ee166e3cd10bae194b4015a2832008506c2', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf29764fa7de6ac21297054944a67f22d921aed3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b09e20c405a6de44440afc192a6113c3b970799', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c29c316e97e582087dd5f4bd30e687203a661449', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db47e278a23d6ce955667e6654575262b2a8bcd2', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e9d6d3c5f5b77f07f0a821d454266caf4014041', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb83a7ce98cd7759fdede9081aec1ab5c0b20ea9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0baa868450cd9cf0944f4ae5029042a2e151d33d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e63b2be5f0de7a9af6701ed7fc2ceabde959c9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '658b4469c449bfb202d3ca747027d3765d1c0f02', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aa6003072a8c3aa30af4b5904000dfa1e3b3f15', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2738bcd48286116183c9633e43877d8b0b4b33b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '001f3b86dba8977ece56c75e771247f94a58a835', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0374f5974b89ff4ac80c1a25daf800dc30cf01e', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c62df8a3630197c519ece51b55bd8fe496b82b1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94f1f8d261cce1a637261e0734ca373476861646', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acbadec7f2e64d28cee81b1a703b27f6088257a3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7043d2d4b3687a8d3a1e14dd91585bf239c2eafc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '546b05d9be5dadbe7f8f46705ccee62c4a423f9f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c259143437b722f83b498c9072b54516f4079fea', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a016a658cae0b9dff94b8caed1b5baab3b373bd6', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '401e6aede895347d044ad6b39ea79340e55d96bb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9225c710c840511a5678f9da7e5b52459be1b498', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c43afcc7a8b1baf2d2335bea38a7dab7f6bfb5', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21fe5aa3059cfffa8f477a4606a523260bcf9a36', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '821c8224335f7d22b093029df5ce9f4a9c97d391', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e25380b6b387cc2dc61db531e86bad1979af722', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2541a3e4a144a1e36516135b74c3d7c97e39a85a', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1003cd351d4c592058208e879460fd03ed87c1eb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b7a7989d1f6f4a0e17bfeccaa098c1a1dbb9082', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b79d28261125624927b1d7b6f719c39f59abd018', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd909d632a30d76ba8af9f721e21ef1c1937e40a6', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cafc596e043d389417439c8ac0524feea148b24a', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2db1ef29a5588abc18f4ee2a60b7b0cccadaef0d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33ef68aa8607387eb8b98f3556a53da707c7c317', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24f2a3424e00e0404bb1b295782ad21089967f28', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84baca9ce8bc0a4b45a39bd13e6af6b64fc64310', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '108ebdeb27395c23ce4c8487b794fea0a86529d2', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cb40adbb92bb2fd33faf79af9aecc679d95090b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '352ab9622892ed39a3173435e3774f21f0a9ab70', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356986f738af8598dfbccd102d6e790efd7f044c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5ef732a6b9062cb26edbf7ca403d5f54742bdee', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa6e40dd09e83be63b186f7a48f713e5c0a73be5', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43a62d5450cb21e78a33999ead92fa2e74f7e38c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2559625c26d95770d3ecc22ac5c492eb3c895cf4', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '507f8f5bc77bd95a3ee98402b6b214c98679e23d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26fcfe9ba4705ee71a9865467f0eb6ea91109169', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '405a6dc9a0bc6c5770ed8e9cfc3c795a70b7e803', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2380a475a034d9e3751087e1986e96ec471d923c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab38c14ed788affea7f47168c4ec9737bd1124f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c07901b49d9f18f73827bb84c4a8c876915d730', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b324791c58c202c8da5944349c7c8fec6785f943', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49f959d7da6090e67d5fadf673653f90cdfbaa2b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '773524d82ca34f9a0bbfeba9de406280a4eae2cd', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7e4ef01987f72d9942b39088b306f899b8fa7d2', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d376b7d88c250670bb68fcf7576d6debc29e904', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11cceb4d2a7b6f780df86297976b86b006d3cada', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3130f51fdb04c6672b2f1c3b32bc5e2aad5cd86', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faf1e01842a5fe36463babf012634bcfb43cc78f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df7eb86687e8f1d3004681fee23b3f1a0e09fc45', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72ba276f3b9d95cfd4de20bc57983a3730d4e6ef', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa62ff0e381f76300be515734d15ae55cfb69344', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04be63d77fd23830d61c2fd7db591e5c9551e13d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f01769fbf3b48f026ed16b5caa3f1c2d3d84771c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a2b28dd031db35e164273fdb1488844090f8413', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5f527034bacba63ab5159c4a4d80b6b9636e552', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1facfbcb85b49889d95804cd6ef9e503451dfd3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cba4456e0ef046794a6f3a9866f57bf71689da16', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5622b51f15a6fadcd24be8ea566bd10ca90c04d8', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46cda48f7302afc5ae83758f4f90046b88778cc4', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e2ee7992134f38456c2eb788585b10100652295', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b23b2fbf2ceb450106f0bb62a73fd8670ede9df6', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd030588e7cb514db8d4fa6daec4b34dc81022b8', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ce8ba73bada74186e8e13def3acda83a6e313f7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5da2f7ec43c5371863f4896f367075500d8ea9d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a9ad4d27d9cbc2d60f5829c0758261d87974970', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc60aa739ee53dfac67e5d723f80b9bf4e943544', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01fc64402a5b04225acd6ab7b2a02b3a7077fe01', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84eb61f38128ff3049c13364bb46a5b2eeb1251b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f18ccd321caa5ec02c119ea513578ed5b9375eb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d070048997cbd168ec6b15a07361d33eaca317e', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e37c84a05be270681343ea5d5d3b76c42a40e0f9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d3de9963c66135e85644ae486a364b0d91f5e25', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67b65d150d375a88c46db77a5c2255c15321d825', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18d146b84874e644f7e2962751e5182cbe16a71c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8679e50a1d792664814f4169ab896f809ca8c5a9', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ceffe5371d36f673011d2d27348f9a29521484d', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '688041c54ebbd8d61b060e1757f05250730f8591', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '204545bcf6cf92e81c1e7bc4cf66cc76d7a5100e', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c71f8a5e08c8f8f1ae8dcf04f6b8139365fe821', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2239bb7620152a473c1f93348ade67e17132b71', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78c93a074f5d44736cf02a91e9dd56dec405e8f1', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0d241ed051b80ea34227dde64cf0f55bc3f76fb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68b1c2a63b289e5bc35fdda251aca22010cefc26', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4061434d79602aef146b0f0d46ac12c7ee71d40a', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4574910fee3c0d8acdf8be2245a3287c8551634', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c70dcb704662f3d50e2d71dfb63c544f4ae2002', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0496ca110d8600733f9ac647ad0c12df7c143ec7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df061fc07f6728d2c2d68e37cfcbd565bf327db1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abe92da659e770137b1dfbf7168337a43b3f0461', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3469fe168123950d6ba866c76c6da65a3736970', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b12eb0d846bf06a35cb6323b53190d1ccb68e180', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fae47973849ba1a227985583df9c5215cc9f20ae', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52a981ecf97325661e9f6c6127833ffed1428863', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ec287b110a85e8131da88e70e2456451b151a3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8804e5bef2e7c2455119609abe6cc82e963bdc27', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c99867f7a7d7fc83b4172ca8ce55d16804ee7dca', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a70bc8be70c70b7950dec903b48c5dfd6aa817ef', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc487a5f2fb34e25aabe27341d9bde7f17fca945', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1bb47e21ba0f087b0555d30eaf0ee29e732a473', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ace1e016b226d746ca35453eaadf5085094d54e', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}]",Yuxuan Zhuang,24636656,yuxuan.zhuang@stanford.edu,User,,46,,47,19
465166446,Serialization of AtomGroup,"Fixes #

Changes made in this Pull Request:
 - `AtomGroup` now is pickled without finding its anchored `Universe`


PR Checklist
------------
 - [x] Tests?
 - [x] Docs?
 - [x] CHANGELOG updated?
 - [ ] Issue raised/referenced?
",True,2893,https://api.github.com/repos/MDAnalysis/mdanalysis/pulls/2893,https://github.com/MDAnalysis/mdanalysis/pull/2893,closed,106,160,5,13,10,0,3,2,"[{'name': 'enhancement'}, {'name': 'parallelization'}, {'name': 'GSoC'}]",2020-08-09 15:35:05+00:00,2020-08-21 18:31:42+00:00,1047397.0,"12 days, 2:56:37",[],"[{'commit_sha': 'e64127b69d25d39a33cb2c1e4f9352e0ff2e987c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f54936dfd8a78f54b5737f5006ba31cc8b5306e', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '675d62b15dd154101f06961e6bd8ec1073ecb593', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15af759f2a51a466259a245529e99314661b233c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe15f5c20ba209d9528e7efda626f1030e76561f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5bb18670dc497cce42d0784af5f545295f13bda', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f299c140344d87d8b5ea220ee5edbd39088dd9d4', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e65601fd020365a0b250db4d257bafd229a5669c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45a66f17b46793d4507d8ee8206279863abd95b7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd9c23f3d986098a561f8311ebb085625c4bfeba', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd917905c39a6369dfe45a3481b4f003374f467d7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a41ac3f524cddab83bf8f8602028de22db5b84e5', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c82c487c855567d8b9cd8d85b395e11d63c993f1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}]",Yuxuan Zhuang,24636656,yuxuan.zhuang@stanford.edu,User,,46,,47,19
453271942,Refactor Transformations from closure into class,"Fixes #2860

Changes made in this Pull Request:
 - refactor transformations from closure into class


PR Checklist
------------
 - [x] Tests?
 - [x] Docs?
 - [x] CHANGELOG updated?
 - [x] Issue raised/referenced?
",True,2859,https://api.github.com/repos/MDAnalysis/mdanalysis/pulls/2859,https://github.com/MDAnalysis/mdanalysis/pull/2859,closed,590,256,10,33,17,37,4,2,"[{'name': 'maintainability'}, {'name': 'parallelization'}, {'name': 'Component-Transformations'}, {'name': 'GSoC'}]",2020-07-20 09:54:57+00:00,2020-09-08 00:55:53+00:00,4287656.0,"49 days, 15:00:56","[{'comment_id': 457257800, 'comment_body': 'to be equivalent, `__call__` should only have the contents of `wrapped`, all other logic should go into `__init__`', 'comment_created': datetime.datetime(2020, 7, 20, 10, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 457274144, 'comment_body': 'Makes sense!', 'comment_created': datetime.datetime(2020, 7, 20, 10, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 463171618, 'comment_body': '```suggestion\r\n        The transformation was changed from a function/closure to a class with ``__call__``.\r\n```\r\nBe a bit more explicit and use double tickmarks for markup.', 'comment_created': datetime.datetime(2020, 7, 30, 17, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463171990, 'comment_body': '```suggestion\r\n        The transformation was changed from a function/closure to a class with ``__call__``.\r\n```\r\nBe a bit more explicit and use double tickmarks for markup.', 'comment_created': datetime.datetime(2020, 7, 30, 17, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463172542, 'comment_body': '```suggestion\r\n        The transformation was changed from a function/closure to a class with ``__call__``.\r\n```\r\nBe a bit more explicit and use double tickmarks for markup.', 'comment_created': datetime.datetime(2020, 7, 30, 17, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463173510, 'comment_body': '```suggestion\r\n    Transformations should now be created as classes with a :meth:`__call__` method\r\n    instead of being written as a function/closure. \r\n```\r\nBe a bit more explicit and use double tickmarks for markup.', 'comment_created': datetime.datetime(2020, 7, 30, 17, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463173936, 'comment_body': '```suggestion\r\n    class transformation(object):\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 17, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463175851, 'comment_body': 'If a new reader reads this, will they know what ""old"" means? This should be written from the perspective of the present time. You might have to explain that you can also write functions (closures) as in MDA 1.x but that these cannot be serialized and thus will not work with all forms of parallel analysis.', 'comment_created': datetime.datetime(2020, 7, 30, 18, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463177195, 'comment_body': ""The conversion is not really relevant to a user of the library – they deal with what's there. You can add a comment to the code talking about the thinking and motivation or you can write a specific developer section. But as I said below, the text needs to make sense to someone who comes to the code without the historical knowledge. Try to put yourself into the shoes of someone who sees this the first time."", 'comment_created': datetime.datetime(2020, 7, 30, 18, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463932387, 'comment_body': '```suggestion\r\n    class transformation(object):\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 7, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463933001, 'comment_body': '```suggestion\r\n\r\n.. Note::\r\n   Although functions (closures) work as transformations, they are not used in\r\n   in MDAnalysis from release 2.0.0 onwards because they cannot be reliably\r\n   serialized and thus a :class:`Universe` with such transformations cannot be \r\n   used with common parallelization schemes (e.g., ones based on \r\n   :mod:`multiprocessing`). \r\n   For detailed descriptions about how to write a closure-style transformation, \r\n   please refer to MDAnalysis 1.x documentation.\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 7, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 464788727, 'comment_body': 'still a typo, if you take the suggestion then it is fixed', 'comment_created': datetime.datetime(2020, 8, 4, 4, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 469195439, 'comment_body': ""It's kind of odd to have class names lowercase, normally this is uppercase for python, but I get that it's to preserve backwards compatibility "", 'comment_created': datetime.datetime(2020, 8, 12, 11, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 469196188, 'comment_body': 'This is a little abstract, a trivial example would be better ', 'comment_created': datetime.datetime(2020, 8, 12, 11, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 469196463, 'comment_body': ""Changes needn't be applied to the timestep oddly enough. You could E.g. modify an AtomGroup and return ts"", 'comment_created': datetime.datetime(2020, 8, 12, 11, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 469196834, 'comment_body': ""The problem is they can't see the code from the docs, so instead have the above example be translate "", 'comment_created': datetime.datetime(2020, 8, 12, 11, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 469197396, 'comment_body': ""I think we only want to promote the workflow usage, else it's just a function they can (forget to) apply"", 'comment_created': datetime.datetime(2020, 8, 12, 11, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 469215405, 'comment_body': ""Yeah I was hesitating about that. But I guess it's fine to use lowercase for callable classes according to PEP 8:\r\n>Class Names\r\nClass names should normally use the CapWords convention.\r\nThe naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable.\r\n\r\nAnd for backwards compatibility of course. "", 'comment_created': datetime.datetime(2020, 8, 12, 12, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 469225633, 'comment_body': 'I think this part (inside `__init__`) of the doc is not present anywhere in the doc webpages. A more explicit description of how transformation is done is written separately. By which I guess makes it fine to be a little more abstract?', 'comment_created': datetime.datetime(2020, 8, 12, 12, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 469400090, 'comment_body': 'Especially with the \r\n> The naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable.\r\n\r\nI am totally ok with lower case.... and backwards compatibility.', 'comment_created': datetime.datetime(2020, 8, 12, 16, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478765984, 'comment_body': 'Are you missing `return u`?', 'comment_created': datetime.datetime(2020, 8, 28, 0, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766066, 'comment_body': 'oops, there it is... confusing diff', 'comment_created': datetime.datetime(2020, 8, 28, 0, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766677, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766754, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766789, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766830, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766864, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766909, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766939, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766959, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478767116, 'comment_body': 'Use this for float comparisons:\r\n```suggestion\r\nfrom numpy.testing import assert_almost_equal\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 0, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478767619, 'comment_body': 'The above is not a valid sphinx link.\r\n```suggestion\r\nSee :mod:`MDAnalysis.transformations.translate` for a simple example.\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 0, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478768067, 'comment_body': '```suggestion\r\nA typical transformation class looks like this (note that we keep its name \r\nlowercase because we will treat it as a function, thanks to the ``__call__``\r\nmethod):\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 28, 0, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478774204, 'comment_body': 'You showed the abstract class. Now show a concrete example to address @richardjgowers comment. For instance\r\n```suggestion\r\nAs a concrete example we will write a transformation that rotates a group of atoms around \r\nthe z-axis through the center of geometry by a fixed increment for every time step. We will use\r\n:meth:`MDAnalysis.core.groups.AtomGroup.rotateby` and simply increase the rotation angle\r\nevery time the transformation is called::\r\n\r\n  class spin_atoms(object):\r\n      def __init__(self, atoms, dphi):\r\n         """"""Rotate atoms by dphi degrees for every time step (around the z axis)""""""\r\n         self.atoms = atoms\r\n         self.dphi = dphi\r\n         self.axis = np.array([0, 0, 1])\r\n         \r\n     def __call__(self, ts):\r\n         phi = self.dphi * ts.frame\r\n         self.atoms.rotateby(phi, self.axis)\r\n         return ts\r\n\r\nThis transformation can be used as ::\r\n  \r\n   u = mda.Universe(PSF, DCD)\r\n   u.trajectory.add_transformations(spin_atoms(u.select_atoms(""protein""), 1.0))\r\n\r\n```\r\n\r\nI currently can\'t get nglview to work in my notebook so you\'ll need to check that this actually works... or come up with another example.\r\n\r\nEDIT: forgot to increment `phi`...\r\n\r\nEDIT 2: yes, it\'s pretty dumb that the phi angle just keeps incrementing, no matter what you do with the trajectory. Perhaps better to do something like `phi = ts.frame * self.dphi`\r\n\r\nEDIT 3: changed it to `phi = ts.frame * self.dphi`', 'comment_created': datetime.datetime(2020, 8, 28, 1, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478949075, 'comment_body': 'Thanks! it works. And I think it makes sense to just rotate by a fixed angle. (for visualization perhaps)', 'comment_created': datetime.datetime(2020, 8, 28, 8, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 479410961, 'comment_body': 'I changed the snippet.', 'comment_created': datetime.datetime(2020, 8, 28, 16, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 483302333, 'comment_body': '```suggestion\r\nAlso see :mod:`MDAnalysis.transformations.translate` for a simple example.\r\n```', 'comment_created': datetime.datetime(2020, 9, 3, 23, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': '05f2dddd2b8c40633650d6a5dac1c8fc2cdcd5d0', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92a9653abb5bdf4cc258793f9803232965b1a3a5', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fc50712d02cfb2096064431825499260641a7f6', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b7c45bb337abb9f6290dbf42ed3b3ef699654b8', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae51c5bc6c34cc4869d0587261d5ca2c31bac5e1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a542792c44ac8521af2b01b285319b6c8f05e790', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1729ee6129eea87cce32ec95f97b5d843e0a5a88', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26950b28af21eefc07b0a09a36fd9b2a2cde05f9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aa8d2bed94e335d6575324410ae519216bf4137', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c5bbdbdd353fbaf7fa380aada9ea07e3e8d35ee', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b09bef6379a6a6c71d90011356b9c9e5218ad8c3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '235e8a918a613061ac9461195aad24a41d9e3e63', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4447869a2d70a7aad8b4205d949a8798811a204b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ef7d3f0a2c7bc51c8a1c95ca8f26fc114af2a78', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6331d3221f73a9495d3f0c2864535135bc2b3db', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ebcc334c61bb8cf5d07620707224c439579b096', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4121044aebec6f3ac5dfed1fefd4c6e83303441', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b1c470e25baadde9ffe44218f3996f5f0a9582d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e87625fcaf29c4b11e455b9b832140272a911c1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11f36441dd8b30154fdc060a1501ed020c68c35d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c857f67e9840a6574cbbf6dabfb050cc910cac5', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58f6e4e94e0f77b17de2234454da8901f869ce2f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26dab2f07403a68f4a6be16630175358e8fbfffe', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '648c9b0cddd2619ea45f8017f9a945ef8e4cf74f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f083ae5bb3f7dbf7618534c28bc3b0c88c1d064', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ae7f83490591409958be470758c5874bcb49998', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26f68bcf5cd2dc8f4ef4cb4eaad17ecacf1b6bc3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae8a2a2bcd7aabd78743a050aa123d379a639f58', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '499efc10a1314aa1549c6b06fbee86a12250770b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2793ba25295d31b04f3f9a46c118da906d774e10', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acb4488f9af206976f814237f0fa0ca9b8c0f3ca', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1080678a25b8f0a11f3972b0a1eaa8a200d03b1a', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06552750027c0c23e6c393c52137ceec8d29eea1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}]",Yuxuan Zhuang,24636656,yuxuan.zhuang@stanford.edu,User,,46,,47,19
446187576,PMDA with refactored `_single_frame`,"Fix #131 

Still on-going, showing some possible simplifications after `Universe` can be serialized.


PR Checklist
------------
 - [ ] Tests?
 - [ ] Docs?
 - [ ] CHANGELOG updated?
 - [ ] Issue raised/referenced?
",False,128,https://api.github.com/repos/MDAnalysis/pmda/pulls/128,https://github.com/MDAnalysis/pmda/pull/128,open,188,214,7,17,4,19,0,0,[],2020-07-08 11:43:22+00:00,,0.0,,"[{'comment_id': 453256634, 'comment_body': 'Where did the per-frame timing information go?', 'comment_created': datetime.datetime(2020, 7, 12, 2, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453256840, 'comment_body': 'How are you going to deal with aggregations as in DensityAnalysis or complicated reductions as in RMSF?', 'comment_created': datetime.datetime(2020, 7, 12, 2, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453340495, 'comment_body': ""It's still doable...with some workaround. i.e. we can do aggregations and further calculations inside `_conclude`, but it also means we have to transfer more data back to the main process. (new examples updated in the gist jupyter notebook)"", 'comment_created': datetime.datetime(2020, 7, 12, 17, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 453882622, 'comment_body': 'Not sure this is always something we want to do. Check the other analysis classes in mda to see if such a default would make sense.\r\n', 'comment_created': datetime.datetime(2020, 7, 13, 19, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 454309609, 'comment_body': 'This should normally be overridden by the definition inside `_prepare` to suit what `_single_frame` saves.', 'comment_created': datetime.datetime(2020, 7, 14, 12, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 454572414, 'comment_body': 'I do not like this reasoning. This means I always have to know about the default and that I can overwrite it in one place. This just looks weird to me. I would rather have to just set this up in once single place. ', 'comment_created': datetime.datetime(2020, 7, 14, 18, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 454717541, 'comment_body': 'Storing a full histogram for each frame is bad – you can easily run out of memory. I think it is important that the aggregation is done every step and not just in `_conclude`.', 'comment_created': datetime.datetime(2020, 7, 15, 0, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 454717685, 'comment_body': ""I don't like the design that gets rid of reduce."", 'comment_created': datetime.datetime(2020, 7, 15, 0, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 454718096, 'comment_body': ""I wouldn't bother with parallel LeafletFinder as it is broken at the moment #76 , #79 "", 'comment_created': datetime.datetime(2020, 7, 15, 0, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 454718530, 'comment_body': 'LeafletFinder is not parallelized over frames... I am not sure that choosing n_jobs is the correct choice here. Need to look at the original paper/algorithm.', 'comment_created': datetime.datetime(2020, 7, 15, 0, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 454719953, 'comment_body': 'Getting rid of this cludge is great.', 'comment_created': datetime.datetime(2020, 7, 15, 0, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 454901109, 'comment_body': ""But isn't that what also happens with `_reduce`? It won't pass the full histogram back to the main process, but only the calculated frames in `_dask_helper`."", 'comment_created': datetime.datetime(2020, 7, 15, 9, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 454910276, 'comment_body': 'Sorry I think I packed too much inside this PR. I was intended to discover the possibility to parallel LeafletFinder both among frames and inside single frame. Because for now, it only starts to work on the next frame after all the jobs are done in the current one.\r\n\r\nSo I changed this more coarsed instead of passing hundreds of jobs per frame * hundreds of frames to dask graph.', 'comment_created': datetime.datetime(2020, 7, 15, 9, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 455237813, 'comment_body': 'No, the density reduce https://github.com/MDAnalysis/pmda/blob/13fa3b5cf0055b8b4c3b45056bc740659815c624/pmda/density.py#L326-L332 does an in-place _addition_ (not a list append) in line 331. In _conclude https://github.com/MDAnalysis/pmda/blob/13fa3b5cf0055b8b4c3b45056bc740659815c624/pmda/density.py#L305-L306 we only sum over the summed histograms of the blocks and then divide by all frames to get the average.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 455238297, 'comment_body': 'Problem is twofold (after `AtomGroup` and everything are implemented):\r\n- XDR and DCD format files fail to pickle the last frame:\r\n```python\r\nu = mda.Universe(GRO_MEMPROT, XTC_MEMPROT)\r\nu.trajectory[4] #  last frame\r\npickle.loads(pickle.dumps(u.trajectory))\r\nEOFError: Trying to seek over max number of frames\r\n```\r\nThe major problem is trajectory._xdr.current_frame == 5 (1-based). I might need to add extra fix (and test?) to https://github.com/MDAnalysis/mdanalysis/pull/2723/files, or maybe in an individual PR? since the pickling is handled on their own\r\n- The algorithm itself gets different results (for the same ts) with different `n_jobs` (maybe because I made some mistakes).', 'comment_created': datetime.datetime(2020, 7, 15, 17, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 455238736, 'comment_body': 'Btw, the PMDA paper has a discussion on that topic.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 455240633, 'comment_body': 'The ""last frame"" thing is a real issue. Oops!\r\n\r\nDon\'t worry about LeafletFinder at the moment, it\'s not really your job to fix it, and it has lots of issues. (If you need it for your own research and you have an interest in getting it working then that\'s a bit different but I\'d still say, focus on the serialization core problem for now.)', 'comment_created': datetime.datetime(2020, 7, 15, 18, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 455867461, 'comment_body': 'Just pushed a fix for the ""last frame"" issue.\r\n\r\nNot `LeafletFinder` per se, but maybe a general framework to suit all conditions. e.g. \r\n- in each frame deserves parallelism.\r\n- run multiple analysis on one single universe.\r\n- run one analysis on multiple universe.\r\n- complex dependencies between each job\r\n\r\nA solution I can think of is to let `ParallelAnalysisBase` inherents basic methods `DaskMethodsMixin` as a [dask custom collection](https://docs.dask.org/en/latest/custom-collections.html), so that we can build complex dask graph. But I am not sure how well we can build a legit API that users do not need to care too much about the underlying implementation', 'comment_created': datetime.datetime(2020, 7, 16, 15, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 455986879, 'comment_body': 'That\'s a good analysis of use cases and it would be useful to write this down somewhere. With PMDA so far (except LeafletFinder) we have been focusing on the simple split-apply-combine because that can be put in a simple ""framework"". Beyond that, it becomes difficult to do a ""one size fits all"" and it becomes a serious research project in CS. \r\n\r\nI would be happy if we had a library that allows users to easily write their own split/apply/combine type analysis and where we provide a few additional parallelized analysis that might not fit into this scheme (such as LeafletFinder).\r\n\r\nAn interesting idea that has been coming up repeatedly is to ""stack"" multiple analysis, i.e., run multiple `_single_frame()` sequentially so that the expensive data loading into memory time is amortized.\r\n\r\nFinally, run one analysis on multiple universes seems to be a standard pleasingly parallel job that can make use of existing workflow management tools – I don\'t see what we can do directly to support it.', 'comment_created': datetime.datetime(2020, 7, 16, 18, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': '1780ecb2ca59860f44769f3a18da999bc3b68f06', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fe1394b7634cc442268cee375a8bdcbabf13bbc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10f71943045a9356d9ed3fd043683d7c5132c4b3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64cd7d4fd59365a72d6e3025d3a76cd2fbd046f2', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19a65b6122d3b5df9a6a859733d222ea212fea2a', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aa6b2991bd7f3c819915da369693d44cc7a25bc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ef2bb650cf614ab15b074e3e995aad749bdf4e5', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '142df9d46cd3037f95c616f980f381e20598d882', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e2295bd3f14e388b44de48fd42cf445be593c9e', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6696f9d877037791d0d83176aac69ebf4c756dec', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0d3f7cca9fecd818baf64d327627f8db9454003', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dae36610d24979beb3559e5774896510f6e4ada', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1e4cc02e1b3f6cd15f5a03495cb7a6bfcabaf55', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad24667d7e9a352d1dc0c6e885f41fd5212e489a', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72181ae03ce815c8bcc87fd2ca4d18863f0037ef', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7db243c83713ccae960cdaf6d9f7a935373d35f9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00a9b0498beab8ca2f233f0cd45d5fca36cd11bd', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}]",Yuxuan Zhuang,24636656,yuxuan.zhuang@stanford.edu,User,,46,,47,19
449447959,Refactor pmda after universe can be serialized,"Fixes #133

Changes made in this Pull Request:
 - refactor each part of pmda (test passed)
    - [x] parallel.py
    - [x] custom.py
    - [x] rmsd
    - [x] rmsf
    - [x] contact
    - [x] Hbond
    - [x] RDF
    - [x] density
    - [ ] leaflet



PR Checklist
------------
 - [ ] Tests?
 - [ ] Docs?
 - [ ] CHANGELOG updated?
 - [ ] Issue raised/referenced?
",False,132,https://api.github.com/repos/MDAnalysis/pmda/pulls/132,https://github.com/MDAnalysis/pmda/pull/132,open,186,223,15,34,8,11,0,0,[],2020-07-15 12:25:47+00:00,,0.0,,"[{'comment_id': 455244858, 'comment_body': 'Hm, cool that this works.', 'comment_created': datetime.datetime(2020, 7, 15, 18, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 455246262, 'comment_body': 'Do updating AtomGroups work with the serialization?', 'comment_created': datetime.datetime(2020, 7, 15, 18, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 455247843, 'comment_body': 'Why is this crucial? What happens otherwise?', 'comment_created': datetime.datetime(2020, 7, 15, 18, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 455722647, 'comment_body': 'Because--no sure it should be defined as a bug--\r\ne.g. Density Analysis (both in MDAnalysis and this PR) depends on the current ts of the universe. \r\n```python\r\ndef _prepare(self):\r\n        coord = self._select_atomgroup.positions  #   It will change with ts.\r\n        ...\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 11, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 455723178, 'comment_body': 'Yes! Thanks to what has already been implemented by Richard:)', 'comment_created': datetime.datetime(2020, 7, 16, 11, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 455899894, 'comment_body': 'And currently, the universe will stay its ending frame after analysis if not being rewinded.', 'comment_created': datetime.datetime(2020, 7, 16, 16, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 456379248, 'comment_body': 'Before we are settled about `AtomGroup`, here I hack the order of the attribute dict (although it should not be ordered, it somehow matters) so we always pickle `Universe` before `Atomgroup`.\r\nNot sure how we should deal with unpicklable attributes. Note cloudpickle which dask uses can literally pickle open file handler.', 'comment_created': datetime.datetime(2020, 7, 17, 11, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 456826464, 'comment_body': 'ah just use python 3.6 or newer here `f""Can\'t set {key} at this time""`', 'comment_created': datetime.datetime(2020, 7, 18, 20, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 456826592, 'comment_body': 'oh because this does not return a copy. I would not do the rewind. If people want a copy they should take one. That can be fixed in the density analysis class.', 'comment_created': datetime.datetime(2020, 7, 18, 20, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 456893398, 'comment_body': 'The thing is here we are not utilizing `FrameIteratorSliced` (which does the rewind after iteration) because we want to get accurate timing by ` self._ts = self._trajectory[i]`. So some discrepancy between AnalysisBase and ParallelAnalysisBase:\r\n```\r\nu = mda.Universe(GRO, XTC)\r\nserial_analysis(u.atoms).run(stop=3)\r\nu.trajectory.ts.frame == 0\r\n...\r\nparallel_analysis(u.atoms).rum(stop=3)\r\nu.trajectory.ts.frame == 3', 'comment_created': datetime.datetime(2020, 7, 19, 10, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 631259246, 'comment_body': 'the comment is outdated', 'comment_created': datetime.datetime(2021, 5, 12, 17, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': '1e3d27bacb7b7e92da7c5c98174dd65871608d8f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4435f29d5e96476fa87ebf18c489cfaee9e72937', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '198167326b06f072e39d95558d95cdfeebfd2cb1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a708579abf396956fd6ad2b7a2f53f72e8670a1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cafe65f42a408bbaf43e739afb7d24cab5de5abb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '185d19a790c97e4c86f05ebaf29090c998b4d06f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef86b9dbcd3d077c6c22fb754cbb4756b922e3cb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0b0bd6f93881f6b54c9e685374dbb5e74016b5c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa629cafed01a6361f10b0710dcd6520af780b9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '495033fd8fa0e7533c243c4e723b203452fc7a35', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87002237faafa18163d4879ea038e4aed2e12304', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e99734354904c52dbbff60b5d8a01055c37cfe', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356cfb9929d50a9f5134ed966268a8d5f4d15fe7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58fea5d172257c5697678724ed4c4f31b2fd463a', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfd35882fcbdc6ace626fd6b58c8f0a2b37a4c16', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09218822839953c0770cee3ce67762e5e531d4e3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49288e88875c9b7fbaf81ba9982a688aa566f924', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a0e0c580f558493a073d88cec955e497fcd5d70', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '187463bbf2dff87efcc8eff745d8e5f4817358dd', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a420401e68317e41335adfda794b9d6a6fdf01f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '053225bed989bc9399b28d0bf08f1197185fbdbc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83becd717cf94a56ab6cf7b34e8079bd065111f3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9c89e6ab054e80faa979d7c6073ff0e6d87ca55', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61bce8f2b8057f5a300268757dae9a96faea965c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb99fc8d909c4115a869178fc005c76fcf0a5de0', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd95add1ac83a0aa65ec29bade495f544a10de686', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5052829f4e3139703ca946f0bd8f17c8a0d9b89', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '608a803d9146b2ec0e0e4127bd4f160a411442ad', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18988c596c278e26e82593a1230306cca7cbd892', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61a34c72422912d211b6138bc67dc0fcaf4dcc4b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf68f5c9027568dcb8801079b6a6c34c5eacfdc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ceaebf5c91a7020c6e4b62ff9598140aaa5c390', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd424f6d3480bca297628d5d326901e627a674218', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b649c04db527b1d317b7e42698041ea381c6ad06', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}]",Yuxuan Zhuang,24636656,yuxuan.zhuang@stanford.edu,User,,46,,47,19
468841994,Turn ParallelAnalysisBase into dask custom collection,"Fixes #135 

Note the only file changes from #132 is `parallel.py` You can read https://github.com/yuxuanzhuang/pmda/pull/1/files to get the actual changes.

Changes made in this Pull Request:
 - See #135 


PR Checklist
------------
 - [ ] Tests?
 - [ ] Docs?
 - [ ] CHANGELOG updated?
 - [ ] Issue raised/referenced?
",False,136,https://api.github.com/repos/MDAnalysis/pmda/pulls/136,https://github.com/MDAnalysis/pmda/pull/136,open,340,293,15,36,2,8,0,0,[],2020-08-17 13:44:03+00:00,,0.0,,"[{'comment_id': 472791642, 'comment_body': 'Even though multiprocessing is the default scheduler, one can still use distributed, right?', 'comment_created': datetime.datetime(2020, 8, 19, 7, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 472792191, 'comment_body': 'Why is this crucial? What would happen? Add more comment.', 'comment_created': datetime.datetime(2020, 8, 19, 7, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 472794830, 'comment_body': 'Will it not be possible to `persist`? \r\n\r\nPresumably, that would have been possible previously if we had chosen `persist` in `run` instead of `compute()`.', 'comment_created': datetime.datetime(2020, 8, 19, 7, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 472795607, 'comment_body': 'Does DaskMixin require the whole class to be picklable?', 'comment_created': datetime.datetime(2020, 8, 19, 7, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 472801729, 'comment_body': '*prepare_jobs* sounds confusing to me – what ""jobs""? If it\'s part of the documented workflow then it could just be *prepare*. \r\n\r\n*prepare_dask* would be more explicit but also a bit pointless because PMDA is fully intertwined with dask so that\'s the only thing we would be preparing for. *create_dask_graph* is too long and really talks to much about implementation details.\r\n\r\nAll in all, I\'d just call it *prepare* and add more docs stating clearly what is being prepared and under which circumstances a user needs to run it.  ', 'comment_created': datetime.datetime(2020, 8, 19, 7, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 473002787, 'comment_body': 'Right, it can either be a global dask config, a context manager, or an arg in `self.compute()`. (https://docs.dask.org/en/latest/scheduler-overview.html#configuring-the-schedulers)', 'comment_created': datetime.datetime(2020, 8, 19, 12, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 473006493, 'comment_body': 'discussed here\r\nhttps://github.com/MDAnalysis/pmda/pull/132/files#r455247843', 'comment_created': datetime.datetime(2020, 8, 19, 12, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 473007818, 'comment_body': 'Yes...I mean in the old implementation, the whole class has to be picklable as well.\r\n\r\nFYI, the code here is not needed anymore after https://github.com/MDAnalysis/mdanalysis/pull/2893 is merged', 'comment_created': datetime.datetime(2020, 8, 19, 12, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}]","[{'commit_sha': '1e3d27bacb7b7e92da7c5c98174dd65871608d8f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4435f29d5e96476fa87ebf18c489cfaee9e72937', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '198167326b06f072e39d95558d95cdfeebfd2cb1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a708579abf396956fd6ad2b7a2f53f72e8670a1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cafe65f42a408bbaf43e739afb7d24cab5de5abb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '185d19a790c97e4c86f05ebaf29090c998b4d06f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef86b9dbcd3d077c6c22fb754cbb4756b922e3cb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0b0bd6f93881f6b54c9e685374dbb5e74016b5c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa629cafed01a6361f10b0710dcd6520af780b9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '495033fd8fa0e7533c243c4e723b203452fc7a35', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87002237faafa18163d4879ea038e4aed2e12304', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e99734354904c52dbbff60b5d8a01055c37cfe', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356cfb9929d50a9f5134ed966268a8d5f4d15fe7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58fea5d172257c5697678724ed4c4f31b2fd463a', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfd35882fcbdc6ace626fd6b58c8f0a2b37a4c16', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09218822839953c0770cee3ce67762e5e531d4e3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49288e88875c9b7fbaf81ba9982a688aa566f924', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a0e0c580f558493a073d88cec955e497fcd5d70', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '187463bbf2dff87efcc8eff745d8e5f4817358dd', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a420401e68317e41335adfda794b9d6a6fdf01f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '053225bed989bc9399b28d0bf08f1197185fbdbc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83becd717cf94a56ab6cf7b34e8079bd065111f3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '666d6905b3650e0ed1ae80ade7a923ce1e14bab5', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e0013e6c6d4b8d5c663a43d18ac67e54aa071d3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9c89e6ab054e80faa979d7c6073ff0e6d87ca55', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61bce8f2b8057f5a300268757dae9a96faea965c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb99fc8d909c4115a869178fc005c76fcf0a5de0', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd95add1ac83a0aa65ec29bade495f544a10de686', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5052829f4e3139703ca946f0bd8f17c8a0d9b89', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '608a803d9146b2ec0e0e4127bd4f160a411442ad', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18988c596c278e26e82593a1230306cca7cbd892', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61a34c72422912d211b6138bc67dc0fcaf4dcc4b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf68f5c9027568dcb8801079b6a6c34c5eacfdc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f08fc84360d1249abcca0ed2030f5a92a640535', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '186bfbf8aa80cc1bc31e7153e79bd10bff7bff60', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f762c7aae4b942c9cef4f36eca2ea7dfbfc6ea8b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}]",Yuxuan Zhuang,24636656,yuxuan.zhuang@stanford.edu,User,,46,,47,19
468841994,Turn ParallelAnalysisBase into dask custom collection,"Fixes #135 

Note the only file changes from #132 is `parallel.py` You can read https://github.com/yuxuanzhuang/pmda/pull/1/files to get the actual changes.

Changes made in this Pull Request:
 - See #135 


PR Checklist
------------
 - [ ] Tests?
 - [ ] Docs?
 - [ ] CHANGELOG updated?
 - [ ] Issue raised/referenced?
",False,136,https://api.github.com/repos/MDAnalysis/pmda/pulls/136,https://github.com/MDAnalysis/pmda/pull/136,open,340,293,15,36,2,8,0,0,[],2020-08-17 13:44:03+00:00,,0.0,,"[{'comment_id': 472791642, 'comment_body': 'Even though multiprocessing is the default scheduler, one can still use distributed, right?', 'comment_created': datetime.datetime(2020, 8, 19, 7, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 472792191, 'comment_body': 'Why is this crucial? What would happen? Add more comment.', 'comment_created': datetime.datetime(2020, 8, 19, 7, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 472794830, 'comment_body': 'Will it not be possible to `persist`? \r\n\r\nPresumably, that would have been possible previously if we had chosen `persist` in `run` instead of `compute()`.', 'comment_created': datetime.datetime(2020, 8, 19, 7, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 472795607, 'comment_body': 'Does DaskMixin require the whole class to be picklable?', 'comment_created': datetime.datetime(2020, 8, 19, 7, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 472801729, 'comment_body': '*prepare_jobs* sounds confusing to me – what ""jobs""? If it\'s part of the documented workflow then it could just be *prepare*. \r\n\r\n*prepare_dask* would be more explicit but also a bit pointless because PMDA is fully intertwined with dask so that\'s the only thing we would be preparing for. *create_dask_graph* is too long and really talks to much about implementation details.\r\n\r\nAll in all, I\'d just call it *prepare* and add more docs stating clearly what is being prepared and under which circumstances a user needs to run it.  ', 'comment_created': datetime.datetime(2020, 8, 19, 7, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 473002787, 'comment_body': 'Right, it can either be a global dask config, a context manager, or an arg in `self.compute()`. (https://docs.dask.org/en/latest/scheduler-overview.html#configuring-the-schedulers)', 'comment_created': datetime.datetime(2020, 8, 19, 12, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 473006493, 'comment_body': 'discussed here\r\nhttps://github.com/MDAnalysis/pmda/pull/132/files#r455247843', 'comment_created': datetime.datetime(2020, 8, 19, 12, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 473007818, 'comment_body': 'Yes...I mean in the old implementation, the whole class has to be picklable as well.\r\n\r\nFYI, the code here is not needed anymore after https://github.com/MDAnalysis/mdanalysis/pull/2893 is merged', 'comment_created': datetime.datetime(2020, 8, 19, 12, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}]","[{'commit_sha': '1e3d27bacb7b7e92da7c5c98174dd65871608d8f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4435f29d5e96476fa87ebf18c489cfaee9e72937', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '198167326b06f072e39d95558d95cdfeebfd2cb1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a708579abf396956fd6ad2b7a2f53f72e8670a1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cafe65f42a408bbaf43e739afb7d24cab5de5abb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '185d19a790c97e4c86f05ebaf29090c998b4d06f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef86b9dbcd3d077c6c22fb754cbb4756b922e3cb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0b0bd6f93881f6b54c9e685374dbb5e74016b5c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa629cafed01a6361f10b0710dcd6520af780b9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '495033fd8fa0e7533c243c4e723b203452fc7a35', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87002237faafa18163d4879ea038e4aed2e12304', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e99734354904c52dbbff60b5d8a01055c37cfe', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356cfb9929d50a9f5134ed966268a8d5f4d15fe7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58fea5d172257c5697678724ed4c4f31b2fd463a', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfd35882fcbdc6ace626fd6b58c8f0a2b37a4c16', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09218822839953c0770cee3ce67762e5e531d4e3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49288e88875c9b7fbaf81ba9982a688aa566f924', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a0e0c580f558493a073d88cec955e497fcd5d70', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '187463bbf2dff87efcc8eff745d8e5f4817358dd', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a420401e68317e41335adfda794b9d6a6fdf01f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '053225bed989bc9399b28d0bf08f1197185fbdbc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83becd717cf94a56ab6cf7b34e8079bd065111f3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '666d6905b3650e0ed1ae80ade7a923ce1e14bab5', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e0013e6c6d4b8d5c663a43d18ac67e54aa071d3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9c89e6ab054e80faa979d7c6073ff0e6d87ca55', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61bce8f2b8057f5a300268757dae9a96faea965c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb99fc8d909c4115a869178fc005c76fcf0a5de0', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd95add1ac83a0aa65ec29bade495f544a10de686', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5052829f4e3139703ca946f0bd8f17c8a0d9b89', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '608a803d9146b2ec0e0e4127bd4f160a411442ad', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18988c596c278e26e82593a1230306cca7cbd892', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61a34c72422912d211b6138bc67dc0fcaf4dcc4b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf68f5c9027568dcb8801079b6a6c34c5eacfdc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f08fc84360d1249abcca0ed2030f5a92a640535', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '186bfbf8aa80cc1bc31e7153e79bd10bff7bff60', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f762c7aae4b942c9cef4f36eca2ea7dfbfc6ea8b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}]",Yuxuan Zhuang,24636656,yuxuan.zhuang@stanford.edu,User,,46,,47,19
431918892,Serialize FileIO and TextIOWrapper and Universe,"Fixes #2878
 
- Composition over inheritance for pickling `Universe` in #2704

Changes made in this Pull Request:
 - add new picklable BufferedReader, FileIO, and TextIOWrapper classes.
 - add new classes and `pickle_open` function to `picklable_file_io.py`
 - implement `__getstate__`, `__setstate__` to `Universe` and `BaseReader`
 - fix DCD, XDR pickle issue



PR Checklist
------------
 - [x] Tests?
 - [x] Docs?
 - [x] CHANGELOG updated?
 - [x] Issue raised/referenced?
",True,2723,https://api.github.com/repos/MDAnalysis/mdanalysis/pulls/2723,https://github.com/MDAnalysis/mdanalysis/pull/2723,closed,1464,33,23,120,123,276,4,5,"[{'name': 'enhancement'}, {'name': 'Component-Core'}, {'name': 'parallelization'}, {'name': 'GSoC'}]",2020-06-09 16:23:15+00:00,2020-08-08 00:40:43+00:00,5127448.0,"59 days, 8:17:28","[{'comment_id': 438303123, 'comment_body': 'I think this should fail for anything else (`ValueError` for unsupported `mode`).', 'comment_created': datetime.datetime(2020, 6, 10, 17, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438303190, 'comment_body': 'docs', 'comment_created': datetime.datetime(2020, 6, 10, 17, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438303386, 'comment_body': 'docs', 'comment_created': datetime.datetime(2020, 6, 10, 17, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438303423, 'comment_body': 'docs', 'comment_created': datetime.datetime(2020, 6, 10, 17, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438304449, 'comment_body': 'PEP8 - space after comma', 'comment_created': datetime.datetime(2020, 6, 10, 17, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438735425, 'comment_body': 'Could you add a test that checks that this gets raised?', 'comment_created': datetime.datetime(2020, 6, 11, 12, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 438738436, 'comment_body': 'PEP8 two empty lines here', 'comment_created': datetime.datetime(2020, 6, 11, 12, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 438738694, 'comment_body': ""We can drop these now that we're past 1.0."", 'comment_created': datetime.datetime(2020, 6, 11, 12, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 438739011, 'comment_body': 'Could you add a test that triggers that ValueError?', 'comment_created': datetime.datetime(2020, 6, 11, 12, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 438741021, 'comment_body': ""You'll probably want to add text like this under the docstring as a note."", 'comment_created': datetime.datetime(2020, 6, 11, 12, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 438974858, 'comment_body': 'Spelling?\r\n```suggestion\r\nclass FileIOPicklable(io.FileIO):\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438978393, 'comment_body': 'Make the docs clearer:\r\n```suggestion\r\n    """"""File object (read-only) that can be pickled.\r\n    \r\n    This class provides a file-like object (as returned by :func:`open`, namely :class:`io.FileIO`) \r\n    that, unlike standard Python file objects, can be pickled. Only read mode is supported.\r\n    \r\n    When the file is pickled, filename and position of the open file handle in the file\r\n    are saved. On unpickling, the file is opened by filename and the file is \r\n    seeked to the saved position. This means that for a successful unpickle, the original\r\n    file still has to be accessible with its filename.\r\n    \r\n    Example\r\n    -------\r\n    \r\n    (ADD EXAMPLE HERE, essentially from the tests)\r\n    \r\n \r\n    See Also\r\n    ---------\r\n    TextIOPicklable\r\n    BufferIOPicklable\r\n```\r\n\r\nAlso, is there a check for read-only?', 'comment_created': datetime.datetime(2020, 6, 11, 18, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438990170, 'comment_body': 'Spelling\r\n```suggestion\r\nclass BufferIOPicklable(io.BufferedReader):\r\n```\r\nand also add more docs', 'comment_created': datetime.datetime(2020, 6, 11, 18, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438991644, 'comment_body': 'For purely cosmetic reasons I would change the order so that the more general is first\r\n```suggestion\r\n        return self.name, self.tell()\r\n```\r\n(and then change the setstate correspondingly)', 'comment_created': datetime.datetime(2020, 6, 11, 18, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438992012, 'comment_body': ""I'd change the order\r\n```suggestion\r\n        return self.raw_class, self.name, self.tell()\r\n```"", 'comment_created': datetime.datetime(2020, 6, 11, 18, 35, 8, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438992398, 'comment_body': '```suggestion\r\n    def __setstate__(self, args):\r\n        name = args[0]\r\n        super().__init__(name)\r\n        self.seek(args[1])\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438993078, 'comment_body': '```suggestion\r\n    def __setstate__(self, args):\r\n        raw_class = args[0]\r\n        name = args[1]\r\n        raw = raw_class(name)\r\n        super().__init__(raw)\r\n        self.seek(args[2])\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438993429, 'comment_body': 'Spelling\r\n```suggestion\r\nclass TextIOPicklable(io.TextIOWrapper):\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438995778, 'comment_body': '```suggestion\r\n  """"""Character and line based picklable file-like object.\r\n  \r\n    This class provides a file-like :class:`io.TextIOWrapper` object that can\r\n    be pickled. Note that this only works in read mode.\r\n    \r\n    Example\r\n    -------\r\n    ::\r\n        file = FileIOPicklable(\'filename\')\r\n        text_wrapped = TextIOPicklable(file)\r\n        \r\n    See Also\r\n    ---------\r\n    FileIOPicklable\r\n    BufferIOPicklable\r\n          \r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438997027, 'comment_body': '```suggestion\r\n        return self.raw_class, self.name, self.tell()\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438997426, 'comment_body': '```suggestion\r\n        raw_class = args[0]\r\n        name = args[1]\r\n        # raw_class is used for further expanding this functionality to\r\n        # GZip files, which also requires a text wrapper.\r\n        raw = raw_class(name)\r\n        super().__init__(raw)\r\n        self.seek(args[2])\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438998089, 'comment_body': 'Add the ""Warning"" section as a ""Note"" before parameters.', 'comment_created': datetime.datetime(2020, 6, 11, 18, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438998484, 'comment_body': 'Add a paragraph describing what the function does and what the idea behind is. What purpose does it fullfill?', 'comment_created': datetime.datetime(2020, 6, 11, 18, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 438999322, 'comment_body': 'Make a separate _Raises_ section after _Returns_, e.g.\r\n```reST\r\n    Raises\r\n    ------\r\n    ValueError : if `mode` is not one of the allowed read modes\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439002064, 'comment_body': ""Set is faster than tuple –\r\n```\r\nIn [1]: %timeit 'a' in {'x', 'z', 'b', 'a'}\r\n32.7 ns ± 0.384 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\r\n\r\nIn [2]: %timeit 'a' in ('x', 'z', 'b', 'a')\r\n65.5 ns ± 0.411 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\r\n```\r\nI would have used the tuple. I learned something new."", 'comment_created': datetime.datetime(2020, 6, 11, 18, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439002509, 'comment_body': ""```suggestion\r\n    elif mode in {'rt', 'r'}:\r\n```"", 'comment_created': datetime.datetime(2020, 6, 11, 18, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439003426, 'comment_body': 'Maybe add a comment here saying that we should never get here; it\'s not obvious until you read all code up to this point.\r\n\r\nOr better\r\n```python\r\nassert False, ""mode = {} argument was never processed"".format(mode)\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 18, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439004965, 'comment_body': '`pickle_open()` should be usable as a context manager.', 'comment_created': datetime.datetime(2020, 6, 11, 18, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439005586, 'comment_body': ""Shouldn't you be closing `PDB_file`, too?"", 'comment_created': datetime.datetime(2020, 6, 11, 19, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439286742, 'comment_body': 'Do you mean replacing the `ValueError` for unsupported mode?', 'comment_created': datetime.datetime(2020, 6, 12, 8, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 439544011, 'comment_body': '_Raises_ comes after _Returns_ (we follow the [NumPy docstring standard](https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard) as linked from [User Guide: Working with the docs](https://www.mdanalysis.org/UserGuide/contributing_code.html#working-with-the-code-documentation))\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 12, 17, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439544777, 'comment_body': 'The reST must use proper sphinx mark-up (I think...) so that automatic link generation works:\r\n```reST\r\n:func:`io.open`\r\n```\r\n\r\nand \r\n```reST\r\n:class:`MDAnalysis.core.Universe`\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 12, 17, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439545322, 'comment_body': '```reST\r\nThe built-in :func:`io.open` function ...\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 17, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439545582, 'comment_body': 'Should -> Can', 'comment_created': datetime.datetime(2020, 6, 12, 17, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439547138, 'comment_body': '[os.fspath](https://docs.python.org/3/library/os.html#os.fspath) is only in Python ≥ 3.6. This is ok (I think @MDAnalysis/coredevs decided to not having to support 3.5) but you need to add an entry to CHANGELOG under changes that only Python >= 3.6 is supported. You must also change `setup.py` accordingly.', 'comment_created': datetime.datetime(2020, 6, 12, 17, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439548763, 'comment_body': 'I/O', 'comment_created': datetime.datetime(2020, 6, 12, 17, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439548940, 'comment_body': 'Add a sentence on motivation (copy from what you wrote below).', 'comment_created': datetime.datetime(2020, 6, 12, 17, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439549112, 'comment_body': 'Add a \r\n```reST\r\n.. versionadded:: 2.0.0\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 17, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439549583, 'comment_body': 'Add documentation of parameters. See [numpy docstring standard](https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard), which we follow in MDA.', 'comment_created': datetime.datetime(2020, 6, 12, 17, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439549751, 'comment_body': 'Break line at 79 chars.', 'comment_created': datetime.datetime(2020, 6, 12, 17, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439549831, 'comment_body': 'Add docs for parameters.', 'comment_created': datetime.datetime(2020, 6, 12, 17, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439550249, 'comment_body': 'Add a \r\n```reST\r\n.. versionadded:: 2.0.0\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 17, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439550437, 'comment_body': 'Note that you need *2 blank lines above*', 'comment_created': datetime.datetime(2020, 6, 12, 17, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439550913, 'comment_body': '```suggestion\r\n    \r\n    \r\n    .. versionadded:: 2.0.0\r\n    """"""\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 17, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439551145, 'comment_body': 'Document init parameters.', 'comment_created': datetime.datetime(2020, 6, 12, 17, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439551242, 'comment_body': 'Add versionadded ', 'comment_created': datetime.datetime(2020, 6, 12, 17, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439551449, 'comment_body': 'add versionadded', 'comment_created': datetime.datetime(2020, 6, 12, 17, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439552350, 'comment_body': ""Now that we're py3+ you shouldn't need future stuff anymore."", 'comment_created': datetime.datetime(2020, 6, 12, 17, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439552560, 'comment_body': 'Add small example showing use as function and as context manager.', 'comment_created': datetime.datetime(2020, 6, 12, 17, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439554470, 'comment_body': ""Before talking about the motivation, say what it _does_. Mention that it returns FileIOPicklable, BufferIOPicklabe, or TextIOPicklabe and that it can also be used as a context manager. It's used instead of :func:`open`.\r\n\r\n(Btw, I didn't know that you could just use the function as a context manager... neat – if this also works with `anyopen()` then we could get rid of [`openany()`](https://www.mdanalysis.org/docs/documentation_pages/lib/util.html?highlight=openany#MDAnalysis.lib.util.openany). )"", 'comment_created': datetime.datetime(2020, 6, 12, 17, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439556885, 'comment_body': 'Add a test that the context manager approach works, too. ', 'comment_created': datetime.datetime(2020, 6, 12, 17, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439589131, 'comment_body': 'Then I assume we should remove `no-absolute-import` from `pylintrc` in #2750  ?\r\n```\r\n************* Module MDAnalysis.lib.picklable_file_io\r\npackage/MDAnalysis/lib/picklable_file_io.py:42: [W1618(no-absolute-import), ] import missing `from __future__ import absolute_import`\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 18, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 439595908, 'comment_body': ""I think this is just happening because the PR fixing the pylint call hasn't been merged yet."", 'comment_created': datetime.datetime(2020, 6, 12, 19, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439625947, 'comment_body': 'Then the cleaner approach is to keep the legacy `from __future__` stuff in ongoing PRs and have a separate clean-up PR that gets rid of it everywhere together with the check instead of removing checks as part of one of many PRs that might be affected.', 'comment_created': datetime.datetime(2020, 6, 12, 20, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439626208, 'comment_body': ""Once the clean-up PR is merged, the ongoing PRs can merge/rebase and clean up themselves. At least that's my suggestion."", 'comment_created': datetime.datetime(2020, 6, 12, 20, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439742849, 'comment_body': 'I can recommend running a formatting tool with every save. I use black for python nowadays. ', 'comment_created': datetime.datetime(2020, 6, 13, 14, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 439743101, 'comment_body': 'Why here? We can store the mode argument to the method. It would be neater to throw an error when using `getstate` with `mode=‘w’` or `mode=‘wb’`.', 'comment_created': datetime.datetime(2020, 6, 13, 14, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 439743196, 'comment_body': 'I do not particularly like this function. It is unclear from the name that this can only be used to open files for reading. You also implicitly assume we always want to pickle a file object when we open it for reading. I would much rather have an exception *when* we actually try to pickle the file.', 'comment_created': datetime.datetime(2020, 6, 13, 14, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 439776770, 'comment_body': 'In the whole discussion on Python 3 we had decided that Py 3.6 is the minimum supported version. So, the CHANGELOG _should_ already have contained this information but it didn’t so please add it. Thank you!', 'comment_created': datetime.datetime(2020, 6, 13, 23, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439776812, 'comment_body': 'The pylint PR was merged, if you merge develop you can start removing all Py 2 crud.', 'comment_created': datetime.datetime(2020, 6, 13, 23, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439777003, 'comment_body': 'I like your idea of deferring an error to the actual pickling. The argument of being able to use the same class everywhere is a good one. It will just have the added bonus that it _can be pickled_ when we need it.', 'comment_created': datetime.datetime(2020, 6, 13, 23, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439777164, 'comment_body': 'So if we get IO classes that behave like the original ones except that they raise an error when you try to pickle with “w” but pickle fine with “r” then we still need our own `open()` function, right? Could we directly have `anyopen()` use these new classes? (Maybe you said this already somewhere...)', 'comment_created': datetime.datetime(2020, 6, 13, 23, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439778232, 'comment_body': 'Not sure. But yeah only using anyopen uniformly in MDAnalysis sounds good. ', 'comment_created': datetime.datetime(2020, 6, 13, 23, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 439795632, 'comment_body': 'Might be wrong here, but I believe this exceeds 80 characters (getting 83 in vim?). Could you break it up into two lines?', 'comment_created': datetime.datetime(2020, 6, 14, 6, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439795674, 'comment_body': 'PEP8 two blank lines between imports and class definition are needed here.', 'comment_created': datetime.datetime(2020, 6, 14, 6, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439795725, 'comment_body': 'At least in my editor a lot of these lines are >79 char (PEP8). Could you review the formatting and make sure you keep to PEP8 in the docstring too please? If anything it makes editors happier when you open the file :) ', 'comment_created': datetime.datetime(2020, 6, 14, 6, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439796140, 'comment_body': 'pedantic, but if you can it might be good to use match here to make sure we are capturing the right error.', 'comment_created': datetime.datetime(2020, 6, 14, 6, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439796319, 'comment_body': 'A thought for tests: is there any way we can fake/capture this kind of error? I could see this becoming a thing if you deployed this on a cluster.', 'comment_created': datetime.datetime(2020, 6, 14, 6, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439798797, 'comment_body': 'So I\'m not sure how relevant this is to how we use file objects, but I know that you can get f.tell() to be ""disabled"" if you happened to call f.__next__() (I think it only happens if you only partially iterate through the file). Might be worth keeping in mind as a potential failure point.', 'comment_created': datetime.datetime(2020, 6, 14, 7, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439800418, 'comment_body': ""I don't think it's a big deal in any way but you could probably save yourself a few extra operations by changing the top `mode` check to see if it is in the set of modes (add in the rest as part of that case), and then make else the ValueError case."", 'comment_created': datetime.datetime(2020, 6, 14, 7, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 439812280, 'comment_body': ""Perhaps we should manually check what error we get and at least document it in the description. We can then think about if it's worthwhile capturing the exception in order to provide a friendlier error message. "", 'comment_created': datetime.datetime(2020, 6, 14, 9, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439812418, 'comment_body': 'This line is still 129 chars', 'comment_created': datetime.datetime(2020, 6, 14, 10, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439812574, 'comment_body': 'This wasn\'t added. ""Suggested change"" in the issue tracker means ""add this please or tell me why not"", not ""take it if you like it"".\r\n\r\nIf you don\'t agree with a comment, say why, but don\'t just close the comment.', 'comment_created': datetime.datetime(2020, 6, 14, 10, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439812598, 'comment_body': 'See above.', 'comment_created': datetime.datetime(2020, 6, 14, 10, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439813008, 'comment_body': 'This comment was not addressed @yuxuanzhuang ', 'comment_created': datetime.datetime(2020, 6, 14, 10, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 439813023, 'comment_body': 'This comment was not addressed @yuxuanzhuang ', 'comment_created': datetime.datetime(2020, 6, 14, 10, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 440157303, 'comment_body': ""That's true! I already noticed this failure for gms, mdcdr formats. I think in the context of pickling trajectories, there's not much use (?). "", 'comment_created': datetime.datetime(2020, 6, 15, 12, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 440418206, 'comment_body': 'actually. A different idea here could be to fall back to the standard open function in case of writing. ', 'comment_created': datetime.datetime(2020, 6, 15, 20, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 442534523, 'comment_body': 'If we know of a failure point then we should test for it – if nothing else test that it raises an exception as we expect. At least then we know how to reproduce the problem when we need to look closer into it.', 'comment_created': datetime.datetime(2020, 6, 18, 22, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 442534591, 'comment_body': 'Test please.', 'comment_created': datetime.datetime(2020, 6, 18, 22, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 442675015, 'comment_body': 'I added the test below `test_context_manager_pickle`', 'comment_created': datetime.datetime(2020, 6, 19, 7, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 442688448, 'comment_body': ""For now I added a test to raise this error. Maybe in the future, we can either:\r\n- remove this functionality if it proves there's little use\r\n- return 0 if `f.tell()` fails."", 'comment_created': datetime.datetime(2020, 6, 19, 7, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 442788432, 'comment_body': '@yuxuanzhuang please do remove this line, we have nearly removed all `__future__` imports now.', 'comment_created': datetime.datetime(2020, 6, 19, 11, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 442789116, 'comment_body': ""I think this should be :class:`TextIOPicklable`. Please do build the docs if you haven't yet, ideally these should link to the class you want to point the user to. (same for all other cases below)."", 'comment_created': datetime.datetime(2020, 6, 19, 11, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 442791709, 'comment_body': 'As above do remember to remove this.', 'comment_created': datetime.datetime(2020, 6, 19, 11, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 442795641, 'comment_body': 'If we are adding this in here, we should probably add in a reference to the original issue for dropping <3.6 #2541 ', 'comment_created': datetime.datetime(2020, 6, 19, 11, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 442799383, 'comment_body': 'I did and this works...at least in sphinx 2.4.0 build. Could I preview anywhere for the travis build result?', 'comment_created': datetime.datetime(2020, 6, 19, 12, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 442800562, 'comment_body': ""If it works locally then that's good enough for me. I don't _think_ Travis builds anywhere, @lilyminium or @orbeckst would know better here."", 'comment_created': datetime.datetime(2020, 6, 19, 12, 3, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 443058103, 'comment_body': 'FileIO has lost an e here', 'comment_created': datetime.datetime(2020, 6, 19, 21, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 443075521, 'comment_body': 'feels a little weird to have an `assert` outside testing, but if it is just to illustrate here the pickling works, maybe show the output here too.', 'comment_created': datetime.datetime(2020, 6, 19, 23, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 443075635, 'comment_body': ""should be 'returns'"", 'comment_created': datetime.datetime(2020, 6, 19, 23, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 443075742, 'comment_body': ""'an' instead of 'a'"", 'comment_created': datetime.datetime(2020, 6, 19, 23, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 443075882, 'comment_body': 'I believe per pep8 this import should be grouped with the other standard libraries above', 'comment_created': datetime.datetime(2020, 6, 19, 23, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 443871452, 'comment_body': ""@IAlibay , sphinx/Napoleon will find the class automatically but it's also fine to make it explicit.\r\n\r\n@yuxuanzhuang – as @IAlibay says: as long as you can confirm that it looks fine locally we're ok. Thanks for checking."", 'comment_created': datetime.datetime(2020, 6, 22, 23, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 443871677, 'comment_body': ""Good idea, I didn't remember where we decided this..."", 'comment_created': datetime.datetime(2020, 6, 22, 23, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 444292092, 'comment_body': 'pickle_open was added here (instead of inside PDBReader/XYZReader) because `anyopen` also support a stream as input.', 'comment_created': datetime.datetime(2020, 6, 23, 14, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 445078158, 'comment_body': '```suggestion\r\n  * Set Python 3.6 as the minimum supported version (#2541)\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 18, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 445080213, 'comment_body': ""I think this and the following is what @kain88-de suggests, which could be easily added\r\n```suggestion\r\n    def __init__(self, name, mode='r'):\r\n        self._mode = mode\r\n        super().__init__(name, mode=mode)\r\n```\r\nI'm adding this for discussion, not for immediate inclusion."", 'comment_created': datetime.datetime(2020, 6, 24, 18, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 445081563, 'comment_body': 'For discussion\r\n```suggestion\r\n        if not self._mode.startswith(\'r\'):\r\n           raise RuntimeError(""Can only pickle files that were opened in read mode, ""  \r\n                              ""not {}"".format(self._mode))\r\n        return self.name, self.tell()\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 18, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446339901, 'comment_body': '`self._ts_kwargs` without the space.', 'comment_created': datetime.datetime(2020, 6, 26, 18, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 446340331, 'comment_body': 'Here we should also move the the current frame.', 'comment_created': datetime.datetime(2020, 6, 26, 18, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 446340747, 'comment_body': 'Why does reduce work and setstate/getstate not? It would be nice to leave a little explanation about what failed to work.', 'comment_created': datetime.datetime(2020, 6, 26, 18, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 446445802, 'comment_body': ""I think I prefer to have `gsd_pickle_open` in this file. It don't feel it's good the spread very specific imports such as `gsd.hoomd` all over the place.\r\n\r\nBut maybe others have different opinions."", 'comment_created': datetime.datetime(2020, 6, 26, 23, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446445888, 'comment_body': 'I can see  `ncdf_pickle_open` here (like `gsd_pickle_open`) or in `lib.picklable_file_io`... see comments below. Something to discuss.', 'comment_created': datetime.datetime(2020, 6, 26, 23, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446450394, 'comment_body': 'I prefer to have format specific classes in their own module, `coordinates.gsd`.', 'comment_created': datetime.datetime(2020, 6, 26, 23, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446450951, 'comment_body': 'Interesting that `scipy.io.netcdf.netcdf_file` cannot be pickled. Or did you add the class to explicitly catch the `mmap` setting?\r\n\r\nGiven that this is based on scipy (a general package), you can make a good case that this class should be here because in principle, other trajectory formats might want to use it.', 'comment_created': datetime.datetime(2020, 6, 26, 23, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446451554, 'comment_body': 'Is this something that @richardjgowers did?', 'comment_created': datetime.datetime(2020, 6, 26, 23, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446452048, 'comment_body': 'Having these format-specific imports here is not great, especially as we have some formats (like gsd) that might not work on all platforms. It is much better to have these confined to a single file.', 'comment_created': datetime.datetime(2020, 6, 26, 23, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446453693, 'comment_body': ""Ultimately, this line says that only pickle_open, bz2_pickle_open, gzip_pickle_open need to be in picklable_file_io. All the other special cases can be in their own modules.\r\n\r\nWe will need documentation on how to write a picklable file object and the tests need to automatically test _all_ our readers for being picklable so that we don't forget to implement it.\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 26, 23, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446453863, 'comment_body': ""And I have no idea what we'll do with converters... #2790 – but one step after another. Let's get the files pickled first."", 'comment_created': datetime.datetime(2020, 6, 26, 23, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446453928, 'comment_body': 'yay, removal of crud!', 'comment_created': datetime.datetime(2020, 6, 26, 23, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446454522, 'comment_body': 'This will eventually have to be a test for every reader... but I think we have a base class somewhere where it can be added.', 'comment_created': datetime.datetime(2020, 6, 26, 23, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446459299, 'comment_body': 'Do you already test somewhere that we get the correct frame back? Something like\r\n```python\r\ndef test_readers_pickle_frame(ref_reader):\r\n    try:\r\n        ref_reader[frame]\r\n    except IndexError:\r\n         # single frame files\r\n         pass\r\n    ps = pickle.dumps(ref_reader)\r\n    reanimated = pickle.loads(ps)\r\n    assert reanimated.ts.frame == ref_reader.ts.frame\r\n```', 'comment_created': datetime.datetime(2020, 6, 27, 0, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446460090, 'comment_body': 'How about comparing `readlines()` (whole file) instead of only the first line?', 'comment_created': datetime.datetime(2020, 6, 27, 0, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 446882325, 'comment_body': ""I think it is still based on wrapping a `BufferedReader` file object, with or without `mmap`. Not sure it's the same case for netCDF4."", 'comment_created': datetime.datetime(2020, 6, 29, 9, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 446887276, 'comment_body': 'I managed to get set/getstate to work.\r\n```python\r\ndef __getstate__(self):\r\n    return self._topology, self._trajectory, self.anchor_name\r\ndef __setstate__(self, state):\r\n    self._anchor_name = state[2] \r\n    self._topology = state[0]\r\n    _generate_from_topology(self)\r\n    self._trajectory = state[1]\r\n```\r\n\r\nBut the result is slightly different.\r\nFor analysis of an `AtomGroup`, we need to define it inside the analysis function.\r\ne.g. \r\n```python\r\ndef cog(u, frame_id):\r\n    u.trajectory[frame_id]\r\n    ag = u.atoms[2:5]\r\n    return ag.center_of_geometry()\r\n\r\nres = np.array([p.apply(cog, args=(u,i))\r\n            for i in range(3)])\r\n```\r\ngets the same result as before:\r\n```python\r\ndef cog(u, ag, frame_id):\r\n    u.trajectory[frame_id]\r\n    return ag.center_of_geometry()\r\n\r\nag = u.atoms[2:5]\r\nres = np.array([p.apply(cog, args=(u,ag, i))\r\n            for i in range(3)])\r\n```\r\n\r\nNot sure I am missing something here.\r\n', 'comment_created': datetime.datetime(2020, 6, 29, 11, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 446893052, 'comment_body': 'I moved it to coordinate module just for clarity for now. I see both options make sense. ', 'comment_created': datetime.datetime(2020, 6, 29, 11, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 447249853, 'comment_body': 'Thanks, I like gsd/ncdf in their own modules.', 'comment_created': datetime.datetime(2020, 6, 29, 20, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 447628966, 'comment_body': 'Why not go directly to the frame?  it should support random access', 'comment_created': datetime.datetime(2020, 6, 30, 12, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 447629097, 'comment_body': 'why the rewind?', 'comment_created': datetime.datetime(2020, 6, 30, 12, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 447630957, 'comment_body': 'can you describe in more detail what the differences are? A quick explanation of the code would also be nice. I do not understand what `p.apply` is.  What happens if you use the pickle functions directly yourself? ', 'comment_created': datetime.datetime(2020, 6, 30, 12, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 447667780, 'comment_body': 'If not, it will wind up into following error during pickling:\r\n```\r\n>>> self[self.ts.frame]\r\nIndexError: Index 1 exceeds length of trajectory (1).\r\n```\r\nbecause the timestep.frame is ""wrong"" for these used/being used readers.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 447673941, 'comment_body': ""If using `self[index]`,\r\nthe `u_pickled.trajectory.next()` will end up to Timestep 0,\r\nbecause iteration is based on  `__chained_trajectories_iter`, which is not updated with `self[index]`.\r\n\r\nI am wondering if there's other method to directly locate the new generator to that location."", 'comment_created': datetime.datetime(2020, 6, 30, 13, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 447691339, 'comment_body': ""I am still wrapping  my head around for the difference. The difference seems to be which `Universe` the `AtomGroup` is referencing to after pickling.\r\n```python\r\ndef print_id(u, ag, frame_id):\r\n    print(frame_id)\r\n    print('id u:',id(u))\r\n    print('id ag:',id(ag))\r\n    print('id ag._u:',id(ag._u))\r\n\r\nu = mda.Universe(PDB_multiframe)\r\nag = u.atoms[2:5]\r\nprint('before pickle')\r\nprint('id u:',id(u))\r\nprint('id ag:',id(ag))\r\nprint('id ag_u:',id(ag._u))\r\n\r\np = multiprocessing.Pool(2)\r\nres = np.array([p.apply(print_id, args=(u, ag, i))\r\n            for i in range(3)])\r\np.close()\r\n```\r\n- using `__reduce__`:\r\n```\r\n\r\nbefore pickle\r\nid u: 140587994220432\r\nid ag: 140587994220336\r\nid ag_u: 140587994220432\r\n0\r\nid u: 140587993605936\r\nid ag: 140587993697152\r\nid ag._u: 140587993605936\r\n1\r\nid u: 140587993606176\r\nid ag: 140587993697392\r\nid ag._u: 140587993606176\r\n2\r\nid u: 140588514411568\r\nid ag: 140588514555936\r\nid ag._u: 140588514411568\r\n```\r\n- using `__set/getstate__`:\r\n```\r\nbefore pickle\r\nid u: 140397192364480\r\nid ag: 140397192364384\r\nid ag_u: 140397192364480\r\n0\r\nid u: 140397952037936\r\nid ag: 140397192077952\r\nid ag._u: 140397192364480\r\n1\r\nid u: 140397952037936\r\nid ag: 140397192078192\r\nid ag._u: 140397192364480\r\n2\r\nid u: 140397192523440\r\nid ag: 140397192244960\r\nid ag._u: 140397192364480\r\n```\r\n\r\nThe `p.apply` is part of the multiprocessing. So in each process, `Universe` and `Atomgroup` are pickled."", 'comment_created': datetime.datetime(2020, 6, 30, 13, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 448279499, 'comment_body': 'I think it\'s fine to drop `_reader` after pickling. It seems that it is only being used to retrieve `dt` for some readers. Given that we have saved `dt` during pickling, it should never need to be used again.\r\n```python\r\n    def dt(self):\r\n   2         """"""The time difference in ps between timesteps\r\n   1             \r\n851          Note\r\n   1         ----\r\n   2         This defaults to 1.0 ps in the absence of time data\r\n   3 \r\n   4 \r\n   5         .. versionadded:: 0.11.0\r\n   6         """"""\r\n   7         try:\r\n   8             return self.data[\'dt\']\r\n   9         except KeyError:\r\n  10             pass\r\n  11         try:\r\n  12             dt = self.data[\'dt\'] = self._reader()._get_dt()\r\n  13             return dt\r\n  14         except AttributeError:\r\n  15             pass\r\n  16         warnings.warn(""Reader has no dt information, set to 1.0 ps"")\r\n  17         return 1.0\r\n```', 'comment_created': datetime.datetime(2020, 7, 1, 10, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 448280296, 'comment_body': 'Added it below.', 'comment_created': datetime.datetime(2020, 7, 1, 10, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 448519764, 'comment_body': ""So this only applies if we try to find `dt` (and trigger setting `self.data['dt']`) before pickling, otherwise we loose the file-based dt - e.g.\r\n```python\r\n    u = mda.Universe('testsuite/MDAnalysisTests/data/Amber/bala.ncdf')\r\n    u_pickle_pre = pickle.loads(pickle.dumps(u))  # pickled before we check `dt`\r\n    initial_dt = u.trajectory.dt\r\n    u_pickle_post = pickle.loads(pickle.dumps(u))  # pickled after we check `dt`\r\n\r\n    print('Initial dt: ', initial_dt)\r\n    print('Pickle-post dt: ', u_pickle_post.trajectory.dt)\r\n    print('Pickle-pre dt: ', u_pickle_pre.trajectory.dt)\r\n```\r\nreturns `Initial dt: 0.0,    Pickle-post dt: 0.0,     Pickle-pre dt: 1.0` and warns that the default dt is being used for the pre case.\r\n\r\nThis could be avoided by calling dt so it's set before pickling? I guess technically what we get back then wouldn't be what we put in in terms of `data['dt']` now being set; I wouldn't think this is a huge deal, but looks like the copy methods in `Timestep` make the effort to pass `_reader` on rather than just make sure `dt` is set, and I'm not sure in general what the motivation is behind keeping the `_reader` weakref around to set dt only upon checking for it's value, rather than just doing this automatically during setup - maybe there is a good reason to keep it around..."", 'comment_created': datetime.datetime(2020, 7, 1, 17, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 448519931, 'comment_body': ""Isn't this just what `__getstate__` is by default?"", 'comment_created': datetime.datetime(2020, 7, 1, 17, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 448521164, 'comment_body': ""Your `__setstate__` code is directly setting `_anchor_name`, while `__reduce__` is using the `anchor_name` setter, which additionally runs `remove_anchor()` and `make_anchor()`, so I'm guessing your not seeing ag._u change appropriately has to do with these not being run.\r\n\r\n(`remove_anchor` assumes that `self._anchor_name` already exists, though, and I'm not sure it's recreated anywhere else in `__setstate__`, so you might still need to say just set it to None first, or there might be some other workaround)"", 'comment_created': datetime.datetime(2020, 7, 1, 17, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 448525293, 'comment_body': 'We should make this work with random access – having to iterate through the trajectory will utterly kill performance.', 'comment_created': datetime.datetime(2020, 7, 1, 17, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 448529498, 'comment_body': 'We could mark the `pickle_open()` function and related functions as private for now, i.e., `_pickle_open()`, `_bz2_pickle_open()`, `_gsd_pickle_open()` etc. We then have the freedom to change implementation in a backward-incompatible fashion even after a 2.0 release, e.g., if we want to go back to the idea to having classes that accept r and w and only fail pickling at runtime.\r\n\r\nOr are ultimately ok with the design as it stands, @kain88-de ?', 'comment_created': datetime.datetime(2020, 7, 1, 18, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 448557253, 'comment_body': ""Looking at https://github.com/MDAnalysis/mdanalysis/blob/8314f7d33b08bd467f1974fdc886f60b02f226c3/package/MDAnalysis/coordinates/chain.py#L566-L574 I don't see a way to restart the iterator in the middle. But before discussing this more, two questions\r\n1. Isn't this also a problem with the other readers or do all of them implement `__iter__()` with a simple `self._read_frame(i)`?\r\n2. How often do we pickle in the middle of a running iterator (i.e., pickle a `base.FrameIteratorAll`):\r\n    ```python\r\n    for ts in u.trajectory:\r\n           pickle.dump(f, u)\r\n    ```\r\n    This seems a strange thing to do – we could just raise a `RuntimeError` and say that you cannot pickle an active iterator (if we can detect it being active). And the iterator rewinds after its done so pickling _outside_ of the loop just needs to rewind and make sure that calling `__iter__()` works as expected. Or am I missing something here?\r\n\r\nThe other iteration cases (slices, indices, bools) are based on `base.FrameIteratorSliced`, `base.FrameIteratorIndices` and ultimately rely on `__getitem__` access. Looking through the `__iter__` methods of `FrameIteratorSliced` https://github.com/MDAnalysis/mdanalysis/blob/8314f7d33b08bd467f1974fdc886f60b02f226c3/package/MDAnalysis/coordinates/base.py#L954-L957 and `FrameIteratorIndices` https://github.com/MDAnalysis/mdanalysis/blob/8314f7d33b08bd467f1974fdc886f60b02f226c3/package/MDAnalysis/coordinates/base.py#L1074-L1076 I am admittedly a bit puzzled why they are different: The former rewinds and directly uses `self.trajectory[i] ` whereas the latter does not rewind and uses `self.trajectory._read_frame_with_aux(frame)` – I don't remember why the difference (@jbarnoud ?)). In any case, they exist for all readers and because they rely on `__getitem__()`, they _should_ work for the ChainReader, too."", 'comment_created': datetime.datetime(2020, 7, 1, 18, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 448561430, 'comment_body': 'If we decide that we have to be able to restart in the middle then we could add optional arguments to `_chained_iterator()` along the lines of\r\n```python\r\ndef _chained_iterator(self, restart=None): \r\n     """"""Iterator that presents itself as a chained trajectory."""""" \r\n     if restart is not None:\r\n         # make it a FrameIteratorSliced for the special case of\r\n         # unpickling an active iterator\r\n         return self[restart:]\r\n\r\n     # normal generator: iterate through all frames\r\n     self._rewind()  # must rewind all readers \r\n     for i in range(self.n_frames): \r\n         j, f = self._get_local_frame(i) \r\n         self.__activate_reader(j) \r\n         self.ts = self.active_reader[f] \r\n         self.ts.frame = i \r\n         yield self.ts \r\n```\r\nand then `__setstate__` can do something like\r\n```python\r\nif had_active_iterator:             # not sure how to detect\r\n   restart = self.ts.frame + 1    # should be the last iter frame\r\n   self.__chained_trajectories_iter = self._chained_iterator(restart=restart)\r\n```\r\n\r\nBut to be honest, I simply can\'t think of code where I would want to continue this iterator in the middle. Again, maybe I am missing something here.\r\n```', 'comment_created': datetime.datetime(2020, 7, 1, 19, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 448587423, 'comment_body': ""This is an interesting API. As @yuxuanzhuang mentions the reference to the reader is only used to calculate the time difference between two steps. We do not use it otherwise. The dt property is calculated by the [Timestep](https://github.com/MDAnalysis/mdanalysis/blob/8314f7d33b08bd467f1974fdc886f60b02f226c3/package/MDAnalysis/coordinates/base.py#L835) and exposed to the user through the [trajectory](https://github.com/MDAnalysis/mdanalysis/blob/8314f7d33b08bd467f1974fdc886f60b02f226c3/package/MDAnalysis/coordinates/base.py#L1460). @fiona-naughton is using `u.trajectory.dt` to get the the time difference.  \r\n\r\nDo we really want to have dt be stored in the timestep? It would make more sense to me to only have access to dt from the trajectory. The timestep would only know about the current time, not the difference to another timestep. This would make logical sense to me as a time difference needs at least two timesteps to be defined. \r\n\r\nI would remove `dt` from the Timestep object and have the trajectory handle time difference calculation. We basically do this right now anyway, thats why we need the weakref to the trajectory (called reader in the code). This would make the need for this weak reference obsolete. \r\n\r\nI do not think this is a huge break of our public API. I never used a timestep object. I rather usually access the trajectory directly or an atomgroup.   Who actually accesses the timestep during iteration?\r\n\r\nOther solution to the problem with lazy loading the time difference is to check for it when we call `__getstate__` before copying the dict\r\n\r\n```python\r\ndef __getstate__(self):\r\n    self.dt\r\n    dict = self.__dict__.copy()\r\n    dict.pop('_reader', None)\r\n    return dict\r\n```\r\nThe lazy loading logic is also the reason we keep the _reader reference around during a copy.\r\n"", 'comment_created': datetime.datetime(2020, 7, 1, 20, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 448614548, 'comment_body': ""> Who actually accesses the timestep during iteration?\r\n\r\n`ts.frame` and `ts.time` are commonly used, I'd say. There are the various things in `ts.data`. Not sure about auxiliary stuff.\r\n\r\nDropping `ts.dt` makes sense, though."", 'comment_created': datetime.datetime(2020, 7, 1, 21, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 448615189, 'comment_body': 'P.S.: There was some discussion/explanation in #2269 why we are _not_ really using `ts` a lot.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 448966525, 'comment_body': ""I admit I am still confused about all these iterators. I also don't understand why we need an extra generator in the first place? Can't we just implement it directly to `ChainReader`? \r\n\r\nBesides, I just realize it's not just about pickling, but some inconsistency between `ChainReader` and other readers?\r\n```\r\nu = mda.Universe(GRO, XTC)\r\nu.trajectory[5]\r\nu.trajectory.next()\r\n< Timestep 6 with unit cell dimensions [0. 0. 0. 0. 0. 0.] >\r\n\r\nu = mda.Universe(GRO, [XTC, XTC])\r\nu.trajectory[5]\r\nu.trajectory.next()\r\n< Timestep 1 with unit cell dimensions [0. 0. 0. 0. 0. 0.] >\r\n```\r\nbecause read_frame and generator are disconnected.\r\n"", 'comment_created': datetime.datetime(2020, 7, 2, 12, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 448968082, 'comment_body': 'I was not sure `__setstate__` works without `__getstate__`. Seems that it does. I will remove this part.', 'comment_created': datetime.datetime(2020, 7, 2, 12, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 449071525, 'comment_body': 'I think this should be classified as a bug. So I submit a PR ##2815 for that, which should also solve the problem here.', 'comment_created': datetime.datetime(2020, 7, 2, 15, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 449151224, 'comment_body': 'That makes sense! So setting by `anchor_name` get the ""right"" result.\r\nI also find that because `anchor_name` links between `ag` and `u`, we have to first serialize `u` then `ag`, otherwise, the linkage will break (like above).', 'comment_created': datetime.datetime(2020, 7, 2, 16, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 449718985, 'comment_body': ""@yuxuanzhuang can you open an issue for dropping `ts.dt`, please? It's an API change so it deserves its own issue and discussion. You can link it to this comment thread. Thanks."", 'comment_created': datetime.datetime(2020, 7, 3, 23, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 449719043, 'comment_body': 'Are you just calling `self.dt` to make stuff happen in the background? If so, add a comment why this apparent no-op is here.', 'comment_created': datetime.datetime(2020, 7, 3, 23, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 449719144, 'comment_body': 'Maybe add a comment or a link to an issue to explain why this is an important test.', 'comment_created': datetime.datetime(2020, 7, 3, 23, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 450911954, 'comment_body': 'why define the class only if chemfiles was found?', 'comment_created': datetime.datetime(2020, 7, 7, 14, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Luthaf', 'type': 'User'}, {'comment_id': 450913103, 'comment_body': ""it do not look like you are checking this in `__getstate__`, so users could try `ChemfilesPicklable(file, 'w')` without reading the documentation and have it fail silently or strangely"", 'comment_created': datetime.datetime(2020, 7, 7, 14, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Luthaf', 'type': 'User'}, {'comment_id': 450914669, 'comment_body': 'You may also want to save the current step being read (self.step) to reset the file cursor. Although I am not sure how this fits within the largest framework here, so it might be fine.\r\n\r\nOther pieces of state that could be set & restored are a custom cell and custom topology; but these are not exposed in MDA so this should be advanced usage anyway', 'comment_created': datetime.datetime(2020, 7, 7, 14, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Luthaf', 'type': 'User'}, {'comment_id': 450994546, 'comment_body': 'Because it is inherited from `chemfiles.Trajectory`. If chemfiles is not present, `import MDAnalysis` will fail.\r\n```python\r\n  File ""/home/scottzhuang/mdanalysis/package/MDAnalysis/coordinates/__init__.py"", line 715, in <module>\r\n    from . import chemfiles\r\n  File ""/home/scottzhuang/mdanalysis/package/MDAnalysis/coordinates/chemfiles.py"", line 387, in <module>\r\n    class ChemfilesPicklable(chemfiles.Trajectory):\r\nNameError: name \'chemfiles\' is not defined\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 16, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 451003054, 'comment_body': 'I may have misinterpreted something, but `chemfiles.Trajectory.step` does not exist. I checked the documents, and it mentions\r\n>property nsteps\r\nGet the current number of steps in this Trajectory.\r\n\r\nBut it seems that nsteps returns the total number of frames?', 'comment_created': datetime.datetime(2020, 7, 7, 16, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 451005639, 'comment_body': ""Okay, I can get `step` from `Frame`. I am wondering if there's a way to get the current frame? Sorry I am not quite familiar with `chemfiles`"", 'comment_created': datetime.datetime(2020, 7, 7, 16, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 451160687, 'comment_body': 'Sorry, I missed that point. Then the code looks good =)', 'comment_created': datetime.datetime(2020, 7, 7, 21, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Luthaf', 'type': 'User'}, {'comment_id': 451162692, 'comment_body': 'No, there is no way to get the last read step directly from the trajectory. You could perhaps directly define __getstate__ on ChemfilesReader instead; and get the step from there as `self._step`', 'comment_created': datetime.datetime(2020, 7, 7, 21, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Luthaf', 'type': 'User'}, {'comment_id': 451397167, 'comment_body': ""Thanks! That's fine, after pickling, the current step for the reader will be set to trajectory[previous_ts] (this `__setstate__` is defined directly to `ReaderBase`). "", 'comment_created': datetime.datetime(2020, 7, 8, 9, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 451794830, 'comment_body': 'is this still necessary with the recent cahnges to the chain reader?', 'comment_created': datetime.datetime(2020, 7, 8, 20, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 451796606, 'comment_body': ""This comment is not an explanaition. Totally unclear why the side effect of this line of code is that we save 'dt' as a variable. My suggestion would be \r\n\r\n```\r\nThe dt property is lazy loaded. We need to load it once from the _reader attached to this timestep to load the dt value.\r\n```"", 'comment_created': datetime.datetime(2020, 7, 8, 20, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 451799824, 'comment_body': ""Yes, the `ts` of individual reader still has to be reset. I think I tried to reset the ts during iteration (e.g. inside `_get_local_frame` when reader_index is changed, but somehow failed (I don't remember why but seems to be a dead end to me)"", 'comment_created': datetime.datetime(2020, 7, 8, 20, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 452569142, 'comment_body': ""Please add a comment explaining why we are doing the rewinding here. The next person looking at it in a year's time will probably just take it out unless there's a comment here explaining WHY it's here."", 'comment_created': datetime.datetime(2020, 7, 10, 1, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452570114, 'comment_body': 'Please add the comment that explains why `__reduce__`.\r\n\r\nOr if you want to rewrite with `__setstate__` then do that :-).', 'comment_created': datetime.datetime(2020, 7, 10, 1, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452571178, 'comment_body': 'Did you build the docs and all functions/classes show up?', 'comment_created': datetime.datetime(2020, 7, 10, 1, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452571629, 'comment_body': ""This can't be here as it will compete with the actual module. Remove."", 'comment_created': datetime.datetime(2020, 7, 10, 1, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452571714, 'comment_body': '(And sphinx should flag it as an error to have the same module twice.)', 'comment_created': datetime.datetime(2020, 7, 10, 1, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452574562, 'comment_body': 'Put this as under [doc/sphinx/source/documentation_pages/coordinates](https://github.com/MDAnalysis/mdanalysis/tree/develop/package/doc/sphinx/source/documentation_pages/coordinates) and add an entry to the second TOC (for developers) in [doc/sphinx/source/documentation_pages/coordinates_modules.rst](https://github.com/MDAnalysis/mdanalysis/blob/develop/package/doc/sphinx/source/documentation_pages/coordinates_modules.rst):\r\n```reST\r\nThe remaining pages are primarily of interest to developers. Programmers and anyone trying to implement new functionality should first read the :ref:`Trajectory API` and then look at the following pages. \r\n\r\n.. toctree::\r\n   :maxdepth: 1\r\n\r\n   coordinates/base\r\n   coordinates/core\r\n   coordinates/pickle_universe.rst\r\n   coordinates/chain\r\n   coordinates/XDR\r\n\r\nIn particular, all trajectory readers have to be :ref:`serializable<serialization>` and they should pass all tests\r\navailable in the ``MDAnalysisTests.coordinates.base.MultiframeReaderTest`` or ``MDAnalysisTests.coordinates.base.BaseReaderTest``.\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 1, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452575519, 'comment_body': 'heading, not lone bullet\r\n```suggestion\r\nFile Access\r\n~~~~~~~~~~~\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 1, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452575584, 'comment_body': 'subheading', 'comment_created': datetime.datetime(2020, 7, 10, 1, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452575611, 'comment_body': 'subheading', 'comment_created': datetime.datetime(2020, 7, 10, 1, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452575904, 'comment_body': ""only use markup for real functions, don't use a confusing mixed name\r\n```suggestion\r\nto pickle those, or write custom :func:`__getstate__` and :func:`__setstate__` methods for the reader.\r\n```"", 'comment_created': datetime.datetime(2020, 7, 10, 1, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452575955, 'comment_body': 'subheading', 'comment_created': datetime.datetime(2020, 7, 10, 1, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452576084, 'comment_body': 'two backtics for standard reST markup\r\n```suggestion\r\ntestes inside ``parallelism/test_multiprocessing.py`` for the reader.\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 1, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452576419, 'comment_body': 'Make it a list with bulletpoints.', 'comment_created': datetime.datetime(2020, 7, 10, 1, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 452576613, 'comment_body': 'move to coordinates and link from doc/sphinx/source/documentation_pages/coordinates_modules.rst', 'comment_created': datetime.datetime(2020, 7, 10, 1, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453182828, 'comment_body': 'This is strange here. You are talking about serilization of a universe in the documentation for coordinates. It would fit better with universe documentation. ', 'comment_created': datetime.datetime(2020, 7, 11, 10, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453182925, 'comment_body': 'Good paragraph to start a paper. Not needed for documentation. ', 'comment_created': datetime.datetime(2020, 7, 11, 10, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453182998, 'comment_body': 'anchor_name is an implementation detail. No need to mention this in high level docs for using mdanalysis\r\n', 'comment_created': datetime.datetime(2020, 7, 11, 10, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453183105, 'comment_body': 'implementation detail', 'comment_created': datetime.datetime(2020, 7, 11, 10, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453183142, 'comment_body': 'which functions are called is an implementation detail. The note that the files still need to be around and be available on the same file path is very good!', 'comment_created': datetime.datetime(2020, 7, 11, 10, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453183287, 'comment_body': 'to many steps in one line for a normal user. Store the pickle to a file and load it for a later session. ', 'comment_created': datetime.datetime(2020, 7, 11, 10, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453183514, 'comment_body': 'how is this happening here in the code? Totally unclear. Rather you should explain how to use mdanalysis with multiprocessing. This means the analysis has to be written as a function. The universe *has* to be an argument to the function. Atomgroups can be. ', 'comment_created': datetime.datetime(2020, 7, 11, 10, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453183782, 'comment_body': 'How will this help?  Is this really necessary if the reader supports random_access? Do we have readers that do not support that? ', 'comment_created': datetime.datetime(2020, 7, 11, 11, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453184061, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 11, 11, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453257316, 'comment_body': ""I asked for the whole doc to be put under coordinates because ultimately this is mainly about serializing the readers and what developers need to know. Or at least, that's currently my main concern.\r\n\r\nI agree with @kain88-de that a split into two docs would be good:\r\n1. developers: *what you need to do to get a reader to serialize*\r\n2. user facing document on *how to use serialization*"", 'comment_created': datetime.datetime(2020, 7, 12, 2, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453257421, 'comment_body': '@yuxuanzhuang Make this document the one about **Serialization of Coordinate Readers**\r\n- change the heading\r\n- focus text on what developers need to know', 'comment_created': datetime.datetime(2020, 7, 12, 2, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453257475, 'comment_body': ""But it can go in the developer docs, don't you think?"", 'comment_created': datetime.datetime(2020, 7, 12, 2, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453257489, 'comment_body': 'Again, fine for me in developer docs.', 'comment_created': datetime.datetime(2020, 7, 12, 2, 26, 39, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453257536, 'comment_body': 'Details for developer docs, the ""filename needs to be accessible"" should also be in the user docs.', 'comment_created': datetime.datetime(2020, 7, 12, 2, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453257843, 'comment_body': ""Also, there's a closing parenthesis missing"", 'comment_created': datetime.datetime(2020, 7, 12, 2, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453257988, 'comment_body': 'The example together with more explanations (as asked for by @kain88-de below) would be good in a user guide document.', 'comment_created': datetime.datetime(2020, 7, 12, 2, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453258154, 'comment_body': ""I agree with @kain88-de that this document is mixing user and developer docs.\r\n\r\nMy suggestion is to focus _here_ on the _developers_ only and in particular on the serialization of coordinate readers. You can say a little bit about serializing Universe (as this is the background and because we don't really have a better place in the docs yet) but then focus on the technical aspects of \r\n- what happens when a reader is serialized\r\n- what needs to be done for a new reader to make serialization work"", 'comment_created': datetime.datetime(2020, 7, 12, 2, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453258483, 'comment_body': 'Take out the ""how to do things with multiprocessing"" – that\'s a user part. Instead of adding it somewhere in the MDAnalysis API docs, create a new chapter in the User Guide instead – @lilyminium should be able to help and there\'s [Contributing to the User Guide](https://userguide.mdanalysis.org/1.0.0/contributing_docs.html).\r\n\r\nAlong the lines of #1175 we should start making an effort to split the docs into API docs (""the docs"" at https://docs.mdanalysis.org) and the user docs (""User Guide"" https://userguide.mdanalysis.org). ', 'comment_created': datetime.datetime(2020, 7, 12, 2, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453258668, 'comment_body': 'Does this format as a list or as code – just asking because of the indentation.\r\n\r\n(Maybe I am also confusing it with Markdown...) anyway, this should probably all be starting in column 1', 'comment_created': datetime.datetime(2020, 7, 12, 2, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 453507576, 'comment_body': '@Luthaf would it be possible to push these changes up to Chemfiles directly?  I.e. make `chemfiles.Trajectory` picklable?', 'comment_created': datetime.datetime(2020, 7, 13, 9, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 453508638, 'comment_body': 'use the `anchor_name` property rather than doing it manually here', 'comment_created': datetime.datetime(2020, 7, 13, 9, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 453519558, 'comment_body': 'The problem about using `anchor_name` here is that `anchor_name` have to first remove anchor, which will raise an error because the new universe doesn\'t have one.\r\nSo it might becomes:\r\n```python\r\nself._anchor_name = """"\r\nself.anchor_name = args[0]\r\n```', 'comment_created': datetime.datetime(2020, 7, 13, 9, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 453562084, 'comment_body': 'https://github.com/MDAnalysis/mdanalysis/pull/2723#issuecomment-650175113\r\n`TRZ` reader for example supports random access, but needs `offset`.', 'comment_created': datetime.datetime(2020, 7, 13, 10, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 453666245, 'comment_body': 'I would not be against it in general, although the approach taken here of serializing only the file name & hoping it stays accessible feels a bit fragile as a general pickle implementation. \r\n\r\nMy understanding is that this PR main goal is enabling Python multiprocessing, am I right? The approach should work fine for this use case, but not for general Python pickling. I am a bit hesitant of making the `chemfiles.Trajectory` pickable with this huge caveat, since it might break in strange ways for users who expect pickle to ""just work""', 'comment_created': datetime.datetime(2020, 7, 13, 13, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Luthaf', 'type': 'User'}, {'comment_id': 453871603, 'comment_body': 'yes', 'comment_created': datetime.datetime(2020, 7, 13, 19, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453871687, 'comment_body': 'yes', 'comment_created': datetime.datetime(2020, 7, 13, 19, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 453872932, 'comment_body': 'does the universe have to be the first argument?', 'comment_created': datetime.datetime(2020, 7, 13, 19, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 454252809, 'comment_body': 'It has to be pickled before `AtomGroup`. Maybe its not necessary at all if https://github.com/MDAnalysis/mdanalysis/pull/2723#issuecomment-657260835 works.', 'comment_created': datetime.datetime(2020, 7, 14, 10, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 454440568, 'comment_body': 'What do you think about an overview (important need-to-know, basic intro) + detailed tutorial for the user guide, @yuxuanzhuang? Then you can also have separate documents on serialisation, and parallel analysis, and just link them to make it clear they are related.', 'comment_created': datetime.datetime(2020, 7, 14, 15, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 454441118, 'comment_body': 'But could fit in the user guide! 😄 ', 'comment_created': datetime.datetime(2020, 7, 14, 15, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 454447792, 'comment_body': 'Hmm, it could go either in the ""analysis"" or the ""advanced"" sections? Example of a tutorial in the ""advanced"" section: [Adding a Residue or Segment to a Universe](https://userguide.mdanalysis.org/1.0.0/advanced_topology.html). And in ""analysis"": [Writing your own trajectory analysis](https://userguide.mdanalysis.org/1.0.0/examples/analysis/custom_trajectory_analysis.html)\r\n\r\n> we should start making an effort to split the docs into API docs\r\n\r\nYes, I think this should probably come after or with separating the user guide into ""user"" and ""dev"" guides, though...', 'comment_created': datetime.datetime(2020, 7, 14, 15, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 454575176, 'comment_body': 'some git conflicts creaped in here.', 'comment_created': datetime.datetime(2020, 7, 14, 18, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 454644284, 'comment_body': '>> we should start making an effort to split the docs into API docs\r\n\r\nI primarily meant that we can already create ""How to do X"" (such as ""How to run do parallel processing"") in the User Guide as opposed to also first have them in the docs (which I referred to as ""API docs"") and then move them later.', 'comment_created': datetime.datetime(2020, 7, 14, 21, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 454645641, 'comment_body': 'I would put the user-portion of your parallel analysis docs in the **analysis** section of the User Guide – you can start a section _Parallel Analysis_ with your general introduction and then your example how to use multiprocessing.  You can add a See Also section for PMDA for the time being. Later, sections on dask, MPI, and whatnot can be added.', 'comment_created': datetime.datetime(2020, 7, 14, 21, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 454646199, 'comment_body': 'I would put the user-portion of your parallel analysis docs in the **analysis** section of the User Guide – you can start a section _Parallel Analysis_ with your general introduction and then your example how to use multiprocessing.  You can add a See Also section for PMDA for the time being. Later, sections on dask, MPI, and whatnot can be added.', 'comment_created': datetime.datetime(2020, 7, 14, 21, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 454647259, 'comment_body': 'oops – failed merge!', 'comment_created': datetime.datetime(2020, 7, 14, 21, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 454651944, 'comment_body': 'fixed it myself...', 'comment_created': datetime.datetime(2020, 7, 14, 21, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 454915470, 'comment_body': 'Sounds good to me.', 'comment_created': datetime.datetime(2020, 7, 15, 9, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 456825534, 'comment_body': 'is this OK @richardjgowers ?', 'comment_created': datetime.datetime(2020, 7, 18, 20, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 456825597, 'comment_body': 'Can you give example of the cases. This will make it easier for others to understand.', 'comment_created': datetime.datetime(2020, 7, 18, 20, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 456825768, 'comment_body': 'you already test that files can be pickled that is enough as multiprocessing is using pickles internally.', 'comment_created': datetime.datetime(2020, 7, 18, 20, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 456825855, 'comment_body': 'do we need to test this for all readers? A single timestep would be enough. There is only a weakref to the readers anyway.', 'comment_created': datetime.datetime(2020, 7, 18, 20, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 456825981, 'comment_body': 'What do these tests tell us? We already test that the reader and universe can be pickled. Multiprocessing does not add much to this. Plus the tests take a long time looking at the build log.', 'comment_created': datetime.datetime(2020, 7, 18, 20, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 456890893, 'comment_body': ""I think this is specific to test `AtomGroup` can be pickled with `Universe` successfully. The difference between direct pickle and multiprocessing is that, in multiprocessing, it's happening all in another process so it does not have the old `Universe` to be anchored on. \r\n\r\nI think it makes sense to only test it on one case, it shouldn't differ from one reader to another."", 'comment_created': datetime.datetime(2020, 7, 19, 10, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 456891764, 'comment_body': 'Merge it with the test above.', 'comment_created': datetime.datetime(2020, 7, 19, 10, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 457606925, 'comment_body': 'did they?', 'comment_created': datetime.datetime(2020, 7, 20, 18, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 457609286, 'comment_body': 'Yes. ', 'comment_created': datetime.datetime(2020, 7, 20, 18, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 457609355, 'comment_body': 'yeah once is enough to test this', 'comment_created': datetime.datetime(2020, 7, 20, 18, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 457610306, 'comment_body': 'making sure it happens in another process is also a good idea given the anchors. However, the test name should reflect that, i.e. `test_universe_unpickle_in_new_process`.  Using multiprocessing is a convenient way to do this.', 'comment_created': datetime.datetime(2020, 7, 20, 18, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 460599340, 'comment_body': ""Maybe something for me to do in a follow-up, but we can avoid some headaches long-term by using the PEP440 implementation of version comparisons here and elsewhere.\r\n\r\nThose are robust to `alpha/beta/rc/dev` versions and so on. The raw string comparison is much less robust; there's a sort of middle ground available from distutils for version checking as well, though the PEP one is better these days.\r\n\r\nProbably out of scope given the size of this PR already though."", 'comment_created': datetime.datetime(2020, 7, 27, 1, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460599630, 'comment_body': 'Maybe a little nicer to avoid the `\\` and  just continue the line using quotes at end of this line and start of next.', 'comment_created': datetime.datetime(2020, 7, 27, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460601346, 'comment_body': 'typo ""readling""', 'comment_created': datetime.datetime(2020, 7, 27, 1, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460601620, 'comment_body': '""to open"" repeated here', 'comment_created': datetime.datetime(2020, 7, 27, 1, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460601814, 'comment_body': 'slash -> quote continuation may be a little nicer here', 'comment_created': datetime.datetime(2020, 7, 27, 1, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 460601895, 'comment_body': '/ -> quote continuation maybe', 'comment_created': datetime.datetime(2020, 7, 27, 1, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 461349950, 'comment_body': 'Can this be written as\r\n```python\r\nself.ts.dimensions[3:] = np.rad2deg(np.arccos(self.ts.dimensions[3:]))\r\n```\r\nInstead of a loop?', 'comment_created': datetime.datetime(2020, 7, 28, 6, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 461952062, 'comment_body': ""I'm not super fond for two letter names (for modules/classes/functions/etc..), mainly because it makes readability difficult. It's picky so I'm good if you decide to stick with using `fl`, but since gsd is imported, it may be clearer to just go `gsdf.fl`? (especially since in the docs you refer to `gsd.fl`)?"", 'comment_created': datetime.datetime(2020, 7, 28, 23, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461960324, 'comment_body': 'Thoughts on possibly documenting this under the module docstring (under Readers)?', 'comment_created': datetime.datetime(2020, 7, 28, 23, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461961573, 'comment_body': 'I\'m thinking here, particularly since we encourage ProtoReader as a ""fallback"" when implementing `__del__` is a bad idea, it might be worth documenting the differences.', 'comment_created': datetime.datetime(2020, 7, 29, 0, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461967955, 'comment_body': ""Whilst we're here, could you add an empty line before this? Looking at the existing docs, I think it's a bit broken right now: https://www.mdanalysis.org/docs/documentation_pages/core/universe.html\r\n```suggestion\r\n\r\n    .. versionchanged:: 1.0.0\r\n```"", 'comment_created': datetime.datetime(2020, 7, 29, 0, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461980605, 'comment_body': '```suggestion\r\ntests inside ``parallelism/test_multiprocessing.py`` for the reader.\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 1, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461981966, 'comment_body': 'It would be useful here, for PDB, GSD and GSDPicklable, etc... to add links to the relevant sections. I.e. :class:`MDAnalysis.coordinates.PDB.PDBReader`. I realise it makes things a bit messier in-text though.', 'comment_created': datetime.datetime(2020, 7, 29, 1, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461983022, 'comment_body': 'Should this be reads intead?\r\n\r\n```suggestion\r\nposition is maintained, i.e. next() reads the right next timestep,\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 1, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461983321, 'comment_body': '```suggestion\r\nadd necessary tests inside ``utils/test_pickleio.py`` for the I/O class,\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 1, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461983399, 'comment_body': '```suggestion\r\nIf the new reader accessed the file with a new picklable I/O class,\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 1, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461985531, 'comment_body': ""Just looking at codecov, there are RuntimeErrors for the __getstate__ of BZ2Picklable, FileIOPicklable, and GzipPicklable that aren't being covered here. Ideally it'd be great to cover them if they are reachable code paths."", 'comment_created': datetime.datetime(2020, 7, 29, 1, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461985849, 'comment_body': 'Could you also cover the ValueError for GSD_pickle? (line 260)', 'comment_created': datetime.datetime(2020, 7, 29, 1, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 461990061, 'comment_body': 'ouch!', 'comment_created': datetime.datetime(2020, 7, 29, 1, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 462097102, 'comment_body': ""missing a closing ')' here"", 'comment_created': datetime.datetime(2020, 7, 29, 7, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 462097645, 'comment_body': ""Should be 'returns a GSDPicklable object' rather than 'returns either...'?"", 'comment_created': datetime.datetime(2020, 7, 29, 7, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 462100658, 'comment_body': ""'Flawless' might be a bit too strong a claim here? As much as we'd like it to be true, I'm not sure we can guarantee things will be perfect! You could probably just leave this without an adjective here, or just use 'working implementation' or something?"", 'comment_created': datetime.datetime(2020, 7, 29, 7, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 462100780, 'comment_body': ""Should be 'Some I/O classes support'?"", 'comment_created': datetime.datetime(2020, 7, 29, 7, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 462247945, 'comment_body': ""Should we just move the `__getstate__` func into `ProtoReader`. I don't see the reason not to."", 'comment_created': datetime.datetime(2020, 7, 29, 12, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 462466156, 'comment_body': 'This (and the ones below) needs to be in quotes (as per _read_frame on line 19) for the hyperlinks to work (currently they only build as plain text)', 'comment_created': datetime.datetime(2020, 7, 29, 17, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 462467001, 'comment_body': 'As per above, could be worth making TRZReader a link too?', 'comment_created': datetime.datetime(2020, 7, 29, 17, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 462468225, 'comment_body': ""I don't think this is building properly on my end, please do check if this is intended / needs fixing."", 'comment_created': datetime.datetime(2020, 7, 29, 17, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 462481553, 'comment_body': ""I'm not sure here, I always saw ProtoReader as the thing that you fallback to when the ReaderBase implements something that just won't work. So there might be an argument that the current approach offers a bit more modularity, but putting it in ProtoReader would just make things cleaner.\r\n\r\nThoughts @MDAnalysis/coredevs ?"", 'comment_created': datetime.datetime(2020, 7, 29, 17, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 462499182, 'comment_body': '@yuxuanzhuang why was this change necessary? Did this fix a bug?', 'comment_created': datetime.datetime(2020, 7, 29, 18, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 462499386, 'comment_body': '@yuxuanzhuang why was this change necessary? Did this fix a bug?', 'comment_created': datetime.datetime(2020, 7, 29, 18, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 462526538, 'comment_body': ""I think it's good in ProtoReader – if it works there then it will be as widely available as possible.\r\n\r\nHopefully we get more readers to be tested with the reader api tests."", 'comment_created': datetime.datetime(2020, 7, 29, 19, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 462637300, 'comment_body': 'Relates to #2878', 'comment_created': datetime.datetime(2020, 7, 29, 22, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 462637330, 'comment_body': 'Relates to #2878', 'comment_created': datetime.datetime(2020, 7, 29, 22, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463165781, 'comment_body': ""That's a workaround but a bit ugly in that it adds code to the library that has nothing to do with its purpose, namely generation of documentation. Additionally, this brings down coverage.\r\n\r\nI was thinking along https://docs.python.org/3/library/unittest.mock.html and add a MagicMock to the sphinx conf.py, something like\r\n```python\r\ntry:\r\n   import chemfiles\r\nexcept ImportError:\r\n   # mock it\r\n   import sys\r\n   from unittest.mock import MagicMock\r\n   sys.modules['chemfiles'] = MagicMock()\r\n```\r\nThe idea would be to have the (mocked) module in `sys.path` already so when mda is trying to `import chemfiles` it will just take the one from `sys.path`.\r\n\r\nI am not 100% sure that this works. @richardjgowers has done some of these shenanigans in the past."", 'comment_created': datetime.datetime(2020, 7, 30, 17, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463955892, 'comment_body': 'extra )?\r\n\r\n```suggestion\r\n(e.g. :class:`MDAnalysis.coordinates.GSD.GSDReader`),\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 12, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 463958680, 'comment_body': 'Could you just move the `if HAS_CHEMFILES` into `__init__`?\r\n\r\nEdit: To clarify -- can `ChemfilesPicklable` exist when `chemfiles` is not installed, but just error on instantiation, so docs can get built?', 'comment_created': datetime.datetime(2020, 8, 1, 12, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463959235, 'comment_body': 'Are these attribute names? (i.e. `universe.topology`)? If so, could you uncapitalise ""Topology"" and also clarify a bit -- or even more clarification if I misinterpreted this note.', 'comment_created': datetime.datetime(2020, 8, 1, 12, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463959435, 'comment_body': '```suggestion\r\n    to open a compressed file in text mode, use :func:`bz2_pickle_open`.\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 12, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463959745, 'comment_body': ""Do we want to be clearer about what should be expected for SingleFrameReaderBase readers here (or above)? From test_multiprocessing, it looks like the MMTF reader pickles normally, but I'm not sure SIngleFrame readers can use BaseReaderTest (might be wrong here)."", 'comment_created': datetime.datetime(2020, 8, 1, 12, 57, 6, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 463959770, 'comment_body': 'I don\'t quite understand what ""a filename given a text or byte string"" means, could you clarify?', 'comment_created': datetime.datetime(2020, 8, 1, 12, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463959859, 'comment_body': ""One might then ask why this is even an option. Perhaps you could add a note about how it's there to be consistent with a wider api?"", 'comment_created': datetime.datetime(2020, 8, 1, 12, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463959930, 'comment_body': ""So on further thought here, is there a reason why we aren't testing all the SingleFrameReaderBase readers here? It seems like most ReaderBase readers are represented here, but SingleFrameReaders like INPCRD aren't."", 'comment_created': datetime.datetime(2020, 8, 1, 12, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 463960234, 'comment_body': '```suggestion\r\n                         ""files can be pickled."")\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 13, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463960567, 'comment_body': '```suggestion\r\n    This function returns a FileIOPicklable object wrapped in a BufferIOPicklable\r\n    class when given the ""rb"" reading mode, or a FileIOPicklable object wrapped in\r\n    a TextIOPicklable class with the ""r"" reading mode. It can be used as a\r\n```\r\n👆 at least that\'s my understanding of it, but I did have to think a bit to work that out. It\'s always better for docs to be as explicit as possible. ', 'comment_created': datetime.datetime(2020, 8, 1, 13, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463960806, 'comment_body': '```suggestion\r\n    can used to open trajectory/topology files. This object composition is more \r\n    flexible and easier than class inheritance to implement pickling for new readers.\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 13, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 463962003, 'comment_body': ""I changed the code so that it will mock `chemfiles` as long as we it cannot find one (regardless we are building a doc or not). So now we don't need to add `HAS_CHEMFILES` as a requirement for the existence of `ChemfilesPicklable`.\r\n \r\nWith that the test can pass, and the doc can be built with/without `chemfiles`. "", 'comment_created': datetime.datetime(2020, 8, 1, 13, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 464295476, 'comment_body': 'I think I tested all the formats listed in the format section  (and `ChainReader` and `Memory` (https://docs.mdanalysis.org/1.0.0/documentation_pages/coordinates/init.html#id23)\r\ne.g. INPCRD (line 134). \r\n\r\nSo I guess the idea in the near future is, for the format not covered by BaseTest (for any reason), we add it to `test_multiprocessing`.', 'comment_created': datetime.datetime(2020, 8, 3, 9, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 464322632, 'comment_body': 'Would it make sense to put that test in `BaseReaderTest` (and maybe `_SingleFrameReader`) so any new reader get tested? While it looks cleaner to have the test here, I am worried we will miss readers, especially when new readers get added.', 'comment_created': datetime.datetime(2020, 8, 3, 10, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jbarnoud', 'type': 'User'}, {'comment_id': 464337812, 'comment_body': 'Do you mean cover all the `_SingleFrameReader` as how `class TestPDBReader(_SingleFrameReader)` is implemented? As for pickle test in `BaseReaderTest` and `MutliframeReaderTest`, they were already added. ', 'comment_created': datetime.datetime(2020, 8, 3, 10, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 464342363, 'comment_body': 'It is what I meant, indeed. My concern when I see this fixture is that we will forget to add the new readers to the list. Ideally I would like something that fails if a reader is not tested for pickling and multiprocessing.', 'comment_created': datetime.datetime(2020, 8, 3, 10, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jbarnoud', 'type': 'User'}, {'comment_id': 464457760, 'comment_body': 'I think for now, only tests in `NAMDBIN`, `PDB`, `PQR` utilize `_SingleFrameReader`. Makes sense to create a new PR for other single frame readers e.g. MMTF, to be inherited from that? (which it along can be backported.)', 'comment_created': datetime.datetime(2020, 8, 3, 14, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 464489709, 'comment_body': ""From a quick glance, I'm not seeing FHI-AIMS?"", 'comment_created': datetime.datetime(2020, 8, 3, 15, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 464495373, 'comment_body': ""Oh right! that's a new one.. and `NAMDBIN` as well, but that's covered now in `_SingleFrameReaderTest`."", 'comment_created': datetime.datetime(2020, 8, 3, 15, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 464786638, 'comment_body': ""How does equality testing for `ts` work? Did we implement `__eq__`?? Does it compare floats anywhere? I'm just surprised that it works...."", 'comment_created': datetime.datetime(2020, 8, 4, 4, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 464787560, 'comment_body': ""I'd be in favor of getting the PR merged and open a new one where we think hard about how to do consistent testing of _all_ our readers and parsers. \r\n\r\nWe'll also need to look at converters... but that's a different issue. Literally."", 'comment_created': datetime.datetime(2020, 8, 4, 4, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 464862740, 'comment_body': '```python\r\n    def __eq__(self, other):\r\n        """"""Compare with another Timestep\r\n\r\n        .. versionadded:: 0.11.0\r\n        """"""\r\n        if not isinstance(other, Timestep):\r\n            return False\r\n\r\n        if not self.frame == other.frame:\r\n            return False\r\n\r\n        if not self.n_atoms == other.n_atoms:\r\n            return False\r\n\r\n        if not self.has_positions == other.has_positions:\r\n            return False\r\n        if self.has_positions:\r\n            if not (self.positions == other.positions).all():\r\n                return False\r\n\r\n        if not self.has_velocities == other.has_velocities:\r\n            return False\r\n        if self.has_velocities:\r\n            if not (self.velocities == other.velocities).all():\r\n                return False\r\n\r\n        if not self.has_forces == other.has_forces:\r\n            return False\r\n        if self.has_forces:\r\n            if not (self.forces == other.forces).all():\r\n                return False\r\n\r\n        return True\r\n```\r\nNot everything is tested, but at least a few basic ones.\r\n', 'comment_created': datetime.datetime(2020, 8, 4, 7, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 466280759, 'comment_body': ""@yuxuanzhuang if we can at the very least document the testing procedure for SingleFrameReaderBase here (or somewhere else, but either way we need to have it down for future devs to understand), then I think we're done.\r\n\r\nIdeally though we should have some kind of documentation for where SingleFrameReaderBase sits in all this (i.e. you don't need to deal with the open class and it should just serialize)."", 'comment_created': datetime.datetime(2020, 8, 6, 9, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 467207868, 'comment_body': ""Thank you, that's all good. Nice."", 'comment_created': datetime.datetime(2020, 8, 7, 18, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': '931d9b50a67a9e96061b5ac75d44368c82072531', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69ce9812aedc0335f4596c47da708a475fc0342', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '432edf3dbb0ef618c525babc5a5463683a411884', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf55bf382b664c0df769ff2bd80e92dcb8302325', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd9a485ccf1db95645a850e4c5f60deaac440b85', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f33629f5032309b69a35638da79c147a47ec6bfc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aca44960a0caeea82f9e653b49974554fccdf5f7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd4ffe35c10dd7decd39c738bf64096c50a614f6', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec5bd3cd8b44880f7c3bebd2979b6859a3c8799c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6515ee166e3cd10bae194b4015a2832008506c2', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf29764fa7de6ac21297054944a67f22d921aed3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b09e20c405a6de44440afc192a6113c3b970799', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c29c316e97e582087dd5f4bd30e687203a661449', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db47e278a23d6ce955667e6654575262b2a8bcd2', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e9d6d3c5f5b77f07f0a821d454266caf4014041', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb83a7ce98cd7759fdede9081aec1ab5c0b20ea9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0baa868450cd9cf0944f4ae5029042a2e151d33d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e63b2be5f0de7a9af6701ed7fc2ceabde959c9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '658b4469c449bfb202d3ca747027d3765d1c0f02', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aa6003072a8c3aa30af4b5904000dfa1e3b3f15', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2738bcd48286116183c9633e43877d8b0b4b33b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '001f3b86dba8977ece56c75e771247f94a58a835', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0374f5974b89ff4ac80c1a25daf800dc30cf01e', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c62df8a3630197c519ece51b55bd8fe496b82b1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94f1f8d261cce1a637261e0734ca373476861646', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acbadec7f2e64d28cee81b1a703b27f6088257a3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7043d2d4b3687a8d3a1e14dd91585bf239c2eafc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '546b05d9be5dadbe7f8f46705ccee62c4a423f9f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c259143437b722f83b498c9072b54516f4079fea', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a016a658cae0b9dff94b8caed1b5baab3b373bd6', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '401e6aede895347d044ad6b39ea79340e55d96bb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9225c710c840511a5678f9da7e5b52459be1b498', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c43afcc7a8b1baf2d2335bea38a7dab7f6bfb5', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21fe5aa3059cfffa8f477a4606a523260bcf9a36', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '821c8224335f7d22b093029df5ce9f4a9c97d391', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e25380b6b387cc2dc61db531e86bad1979af722', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2541a3e4a144a1e36516135b74c3d7c97e39a85a', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1003cd351d4c592058208e879460fd03ed87c1eb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b7a7989d1f6f4a0e17bfeccaa098c1a1dbb9082', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b79d28261125624927b1d7b6f719c39f59abd018', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd909d632a30d76ba8af9f721e21ef1c1937e40a6', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cafc596e043d389417439c8ac0524feea148b24a', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2db1ef29a5588abc18f4ee2a60b7b0cccadaef0d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33ef68aa8607387eb8b98f3556a53da707c7c317', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24f2a3424e00e0404bb1b295782ad21089967f28', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84baca9ce8bc0a4b45a39bd13e6af6b64fc64310', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '108ebdeb27395c23ce4c8487b794fea0a86529d2', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cb40adbb92bb2fd33faf79af9aecc679d95090b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '352ab9622892ed39a3173435e3774f21f0a9ab70', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356986f738af8598dfbccd102d6e790efd7f044c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5ef732a6b9062cb26edbf7ca403d5f54742bdee', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa6e40dd09e83be63b186f7a48f713e5c0a73be5', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43a62d5450cb21e78a33999ead92fa2e74f7e38c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2559625c26d95770d3ecc22ac5c492eb3c895cf4', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '507f8f5bc77bd95a3ee98402b6b214c98679e23d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26fcfe9ba4705ee71a9865467f0eb6ea91109169', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '405a6dc9a0bc6c5770ed8e9cfc3c795a70b7e803', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2380a475a034d9e3751087e1986e96ec471d923c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab38c14ed788affea7f47168c4ec9737bd1124f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c07901b49d9f18f73827bb84c4a8c876915d730', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b324791c58c202c8da5944349c7c8fec6785f943', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49f959d7da6090e67d5fadf673653f90cdfbaa2b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '773524d82ca34f9a0bbfeba9de406280a4eae2cd', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7e4ef01987f72d9942b39088b306f899b8fa7d2', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d376b7d88c250670bb68fcf7576d6debc29e904', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11cceb4d2a7b6f780df86297976b86b006d3cada', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3130f51fdb04c6672b2f1c3b32bc5e2aad5cd86', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faf1e01842a5fe36463babf012634bcfb43cc78f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df7eb86687e8f1d3004681fee23b3f1a0e09fc45', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72ba276f3b9d95cfd4de20bc57983a3730d4e6ef', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa62ff0e381f76300be515734d15ae55cfb69344', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04be63d77fd23830d61c2fd7db591e5c9551e13d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f01769fbf3b48f026ed16b5caa3f1c2d3d84771c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a2b28dd031db35e164273fdb1488844090f8413', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5f527034bacba63ab5159c4a4d80b6b9636e552', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1facfbcb85b49889d95804cd6ef9e503451dfd3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cba4456e0ef046794a6f3a9866f57bf71689da16', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5622b51f15a6fadcd24be8ea566bd10ca90c04d8', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46cda48f7302afc5ae83758f4f90046b88778cc4', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e2ee7992134f38456c2eb788585b10100652295', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b23b2fbf2ceb450106f0bb62a73fd8670ede9df6', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd030588e7cb514db8d4fa6daec4b34dc81022b8', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ce8ba73bada74186e8e13def3acda83a6e313f7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5da2f7ec43c5371863f4896f367075500d8ea9d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a9ad4d27d9cbc2d60f5829c0758261d87974970', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc60aa739ee53dfac67e5d723f80b9bf4e943544', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01fc64402a5b04225acd6ab7b2a02b3a7077fe01', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84eb61f38128ff3049c13364bb46a5b2eeb1251b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f18ccd321caa5ec02c119ea513578ed5b9375eb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d070048997cbd168ec6b15a07361d33eaca317e', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e37c84a05be270681343ea5d5d3b76c42a40e0f9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d3de9963c66135e85644ae486a364b0d91f5e25', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67b65d150d375a88c46db77a5c2255c15321d825', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18d146b84874e644f7e2962751e5182cbe16a71c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8679e50a1d792664814f4169ab896f809ca8c5a9', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ceffe5371d36f673011d2d27348f9a29521484d', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '688041c54ebbd8d61b060e1757f05250730f8591', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '204545bcf6cf92e81c1e7bc4cf66cc76d7a5100e', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c71f8a5e08c8f8f1ae8dcf04f6b8139365fe821', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2239bb7620152a473c1f93348ade67e17132b71', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78c93a074f5d44736cf02a91e9dd56dec405e8f1', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0d241ed051b80ea34227dde64cf0f55bc3f76fb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68b1c2a63b289e5bc35fdda251aca22010cefc26', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4061434d79602aef146b0f0d46ac12c7ee71d40a', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4574910fee3c0d8acdf8be2245a3287c8551634', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c70dcb704662f3d50e2d71dfb63c544f4ae2002', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0496ca110d8600733f9ac647ad0c12df7c143ec7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df061fc07f6728d2c2d68e37cfcbd565bf327db1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abe92da659e770137b1dfbf7168337a43b3f0461', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3469fe168123950d6ba866c76c6da65a3736970', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b12eb0d846bf06a35cb6323b53190d1ccb68e180', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fae47973849ba1a227985583df9c5215cc9f20ae', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52a981ecf97325661e9f6c6127833ffed1428863', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ec287b110a85e8131da88e70e2456451b151a3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8804e5bef2e7c2455119609abe6cc82e963bdc27', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c99867f7a7d7fc83b4172ca8ce55d16804ee7dca', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a70bc8be70c70b7950dec903b48c5dfd6aa817ef', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc487a5f2fb34e25aabe27341d9bde7f17fca945', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1bb47e21ba0f087b0555d30eaf0ee29e732a473', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ace1e016b226d746ca35453eaadf5085094d54e', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}]",Yuxuan Zhuang,24636656,yuxuan.zhuang@stanford.edu,User,,46,,47,19
443575164,Chainreader Refactoring,"Fixes #2814

Changes made in this Pull Request:
 - new `_read_frame` and `__iter__` are connected.
 - remove `_chained_iterator`.
 - add `__next__` to `ChainReader`.
 - add an extra attribute `current_frame` to internally monitor absolute current frame.


PR Checklist
------------
 - [x] Tests?
 - [x] Docs?
 - [x] CHANGELOG updated?
 - [x] Issue raised/referenced?
",True,2815,https://api.github.com/repos/MDAnalysis/mdanalysis/pulls/2815,https://github.com/MDAnalysis/mdanalysis/pull/2815,closed,38,34,3,14,3,9,2,1,"[{'name': 'defect'}, {'name': 'Component-Readers'}]",2020-07-02 15:02:57+00:00,2020-07-03 23:42:36+00:00,117579.0,"1 day, 8:39:39","[{'comment_id': 449146972, 'comment_body': 'Then delete all `_chained_reader()` – at least in the current form it does not make much sense.', 'comment_created': datetime.datetime(2020, 7, 2, 16, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 449148865, 'comment_body': 'Possibly make it a double-underscore attribute `__current_frame`? How bad would it be if a user changed it?', 'comment_created': datetime.datetime(2020, 7, 2, 16, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 449149603, 'comment_body': ""Hah – I didn't realize that we weren't using it here anymore... the original code had a `itertools.chain([... readers ...])` at its heart."", 'comment_created': datetime.datetime(2020, 7, 2, 16, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 449159996, 'comment_body': 'The `next` method is not needed anymore. See [pep-3114](https://www.python.org/dev/peps/pep-3114/). I know we are not very good in following this pattern. ', 'comment_created': datetime.datetime(2020, 7, 2, 17, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 449164127, 'comment_body': 'this failed previously? Wow.', 'comment_created': datetime.datetime(2020, 7, 2, 17, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 449210890, 'comment_body': 'The next frame ts will start from the newly set value, but the current ts will not change. Just double-underscored it to prevent from confusion.', 'comment_created': datetime.datetime(2020, 7, 2, 18, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 449213675, 'comment_body': 'If we backport this fix to 1.0.1 #2798 , will we need to add `next()` back for Python 2.7?', 'comment_created': datetime.datetime(2020, 7, 2, 19, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 449215438, 'comment_body': '`next()` still functions here from `ProtoReader` definition.', 'comment_created': datetime.datetime(2020, 7, 2, 19, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 449253843, 'comment_body': 'Than we should leave the next function and remove it once from all readers.', 'comment_created': datetime.datetime(2020, 7, 2, 20, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}]","[{'commit_sha': '931d9b50a67a9e96061b5ac75d44368c82072531', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69ce9812aedc0335f4596c47da708a475fc0342', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1453fb58bb0c49413c8226aeeb394f7835e0b178', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92a14a8afcb069f50e7a254020848ae97a615c28', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '950cfe30baefa9c0f3e780439a51f7cc224a989c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a923fe75561c8b831dcbc3b61f835b026db99f5', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe22a9fb871c27995bed42e540c0c2c180944e1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ba02add9de575ab1e6a0b514b8032e6fa428e59', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9588d88a57333279f6551a9891de1eb60f899104', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcf944f02b4a704e54110064ac1be2ba3ff84d3f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44a8cf4de8907a73893bc98889bd7e51e3443a52', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a586c3904110a60e39097d6613f4822283ca5797', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ae2b68ea13d33ef7036c1728abfd7ee8f57d1d3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b09fbd931b649f527e8f3bf74cbf09a8216eb4d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}]",Yuxuan Zhuang,24636656,yuxuan.zhuang@stanford.edu,User,,46,,47,19
465166446,Serialization of AtomGroup,"Fixes #

Changes made in this Pull Request:
 - `AtomGroup` now is pickled without finding its anchored `Universe`


PR Checklist
------------
 - [x] Tests?
 - [x] Docs?
 - [x] CHANGELOG updated?
 - [ ] Issue raised/referenced?
",True,2893,https://api.github.com/repos/MDAnalysis/mdanalysis/pulls/2893,https://github.com/MDAnalysis/mdanalysis/pull/2893,closed,106,160,5,13,10,0,3,2,"[{'name': 'enhancement'}, {'name': 'parallelization'}, {'name': 'GSoC'}]",2020-08-09 15:35:05+00:00,2020-08-21 18:31:42+00:00,1047397.0,"12 days, 2:56:37",[],"[{'commit_sha': 'e64127b69d25d39a33cb2c1e4f9352e0ff2e987c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f54936dfd8a78f54b5737f5006ba31cc8b5306e', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '675d62b15dd154101f06961e6bd8ec1073ecb593', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15af759f2a51a466259a245529e99314661b233c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe15f5c20ba209d9528e7efda626f1030e76561f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5bb18670dc497cce42d0784af5f545295f13bda', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f299c140344d87d8b5ea220ee5edbd39088dd9d4', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e65601fd020365a0b250db4d257bafd229a5669c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45a66f17b46793d4507d8ee8206279863abd95b7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd9c23f3d986098a561f8311ebb085625c4bfeba', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd917905c39a6369dfe45a3481b4f003374f467d7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a41ac3f524cddab83bf8f8602028de22db5b84e5', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c82c487c855567d8b9cd8d85b395e11d63c993f1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}]",Yuxuan Zhuang,24636656,yuxuan.zhuang@stanford.edu,User,,46,,47,19
468290293,DCD XDR pickle tests,"Fixes #2878 

Changes made in this Pull Request:
 - add inclusive tests for pickle low-level dcd and xdr files
 - fix the bug that was introduced in #2723  
 - may further backport in #2908 
PR Checklist
------------
 - [x] Tests?
 - [x] Docs?
 - [x] CHANGELOG updated?
 - [x] Issue raised/referenced?
",True,2911,https://api.github.com/repos/MDAnalysis/mdanalysis/pulls/2911,https://github.com/MDAnalysis/mdanalysis/pull/2911,closed,107,15,5,7,4,5,4,0,"[{'name': 'defect'}, {'name': 'Component-Readers'}, {'name': 'parallelization'}, {'name': 'GSoC'}]",2020-08-15 10:23:38+00:00,2020-08-17 09:20:38+00:00,169020.0,"1 day, 22:57:00","[{'comment_id': 471069861, 'comment_body': 'Is this supposed to allow to seek to the _end_ of the file? If so, add a comment, because under normal circumstances I expect a 0-based index for a sequence to fail when it hits `len(sequence)`.', 'comment_created': datetime.datetime(2020, 8, 16, 5, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 471070016, 'comment_body': 'If it is possible to seek to the end of the file (_after_ the last coordinate frame) with\r\n```python\r\ndcd.seek(len(dcd))\r\n```\r\nthen state it in the doc string. This is a fairly odd thing to allow so it should be documented.', 'comment_created': datetime.datetime(2020, 8, 16, 5, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 471070115, 'comment_body': 'Did you mean ""previous frame"" instead of ""frame ahead""?', 'comment_created': datetime.datetime(2020, 8, 16, 5, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 471070389, 'comment_body': 'Switch the decision in the `if` statement to make the more common situation come first\r\n```python\r\nif current_frame < self.offsets.size:\r\n     ...\r\nelif current_frame == self.offsets.size:\r\n    ...\r\nelse:\r\n    #pragma: no cov\r\n    raise RuntimeError(""Invalid frame number {} > {} -- this should not happen."".format(current_frame, self.offsets.size)\r\n```\r\nand add defensive code.', 'comment_created': datetime.datetime(2020, 8, 16, 6, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 471070451, 'comment_body': 'Add comment under which circumstances we have to do funny things – namely when we need to serialize at the end of the trajectory.', 'comment_created': datetime.datetime(2020, 8, 16, 6, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': '8deaf09d51a296d0b16b90211eea2a7eebe0a306', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c02300073bb67a677d184351e620cd1bd919102', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7eaad8ef51bfb4b5621eea3f369ef5c1594b79f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3f7c6de1938d837e622789960854d0f79076193', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08fa285e2b820437e2cee2ee4b3d65e742567528', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afd2052ebbeeb390f1db9df9d84095e2feb8dfe9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e9d11be0e1c0e1c526be74ed8635500eccbbd93', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}]",Yuxuan Zhuang,24636656,yuxuan.zhuang@stanford.edu,User,,46,,47,19
453271942,Refactor Transformations from closure into class,"Fixes #2860

Changes made in this Pull Request:
 - refactor transformations from closure into class


PR Checklist
------------
 - [x] Tests?
 - [x] Docs?
 - [x] CHANGELOG updated?
 - [x] Issue raised/referenced?
",True,2859,https://api.github.com/repos/MDAnalysis/mdanalysis/pulls/2859,https://github.com/MDAnalysis/mdanalysis/pull/2859,closed,590,256,10,33,17,37,4,2,"[{'name': 'maintainability'}, {'name': 'parallelization'}, {'name': 'Component-Transformations'}, {'name': 'GSoC'}]",2020-07-20 09:54:57+00:00,2020-09-08 00:55:53+00:00,4287656.0,"49 days, 15:00:56","[{'comment_id': 457257800, 'comment_body': 'to be equivalent, `__call__` should only have the contents of `wrapped`, all other logic should go into `__init__`', 'comment_created': datetime.datetime(2020, 7, 20, 10, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 457274144, 'comment_body': 'Makes sense!', 'comment_created': datetime.datetime(2020, 7, 20, 10, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 463171618, 'comment_body': '```suggestion\r\n        The transformation was changed from a function/closure to a class with ``__call__``.\r\n```\r\nBe a bit more explicit and use double tickmarks for markup.', 'comment_created': datetime.datetime(2020, 7, 30, 17, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463171990, 'comment_body': '```suggestion\r\n        The transformation was changed from a function/closure to a class with ``__call__``.\r\n```\r\nBe a bit more explicit and use double tickmarks for markup.', 'comment_created': datetime.datetime(2020, 7, 30, 17, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463172542, 'comment_body': '```suggestion\r\n        The transformation was changed from a function/closure to a class with ``__call__``.\r\n```\r\nBe a bit more explicit and use double tickmarks for markup.', 'comment_created': datetime.datetime(2020, 7, 30, 17, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463173510, 'comment_body': '```suggestion\r\n    Transformations should now be created as classes with a :meth:`__call__` method\r\n    instead of being written as a function/closure. \r\n```\r\nBe a bit more explicit and use double tickmarks for markup.', 'comment_created': datetime.datetime(2020, 7, 30, 17, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463173936, 'comment_body': '```suggestion\r\n    class transformation(object):\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 17, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463175851, 'comment_body': 'If a new reader reads this, will they know what ""old"" means? This should be written from the perspective of the present time. You might have to explain that you can also write functions (closures) as in MDA 1.x but that these cannot be serialized and thus will not work with all forms of parallel analysis.', 'comment_created': datetime.datetime(2020, 7, 30, 18, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463177195, 'comment_body': ""The conversion is not really relevant to a user of the library – they deal with what's there. You can add a comment to the code talking about the thinking and motivation or you can write a specific developer section. But as I said below, the text needs to make sense to someone who comes to the code without the historical knowledge. Try to put yourself into the shoes of someone who sees this the first time."", 'comment_created': datetime.datetime(2020, 7, 30, 18, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463932387, 'comment_body': '```suggestion\r\n    class transformation(object):\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 7, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 463933001, 'comment_body': '```suggestion\r\n\r\n.. Note::\r\n   Although functions (closures) work as transformations, they are not used in\r\n   in MDAnalysis from release 2.0.0 onwards because they cannot be reliably\r\n   serialized and thus a :class:`Universe` with such transformations cannot be \r\n   used with common parallelization schemes (e.g., ones based on \r\n   :mod:`multiprocessing`). \r\n   For detailed descriptions about how to write a closure-style transformation, \r\n   please refer to MDAnalysis 1.x documentation.\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 7, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 464788727, 'comment_body': 'still a typo, if you take the suggestion then it is fixed', 'comment_created': datetime.datetime(2020, 8, 4, 4, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 469195439, 'comment_body': ""It's kind of odd to have class names lowercase, normally this is uppercase for python, but I get that it's to preserve backwards compatibility "", 'comment_created': datetime.datetime(2020, 8, 12, 11, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 469196188, 'comment_body': 'This is a little abstract, a trivial example would be better ', 'comment_created': datetime.datetime(2020, 8, 12, 11, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 469196463, 'comment_body': ""Changes needn't be applied to the timestep oddly enough. You could E.g. modify an AtomGroup and return ts"", 'comment_created': datetime.datetime(2020, 8, 12, 11, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 469196834, 'comment_body': ""The problem is they can't see the code from the docs, so instead have the above example be translate "", 'comment_created': datetime.datetime(2020, 8, 12, 11, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 469197396, 'comment_body': ""I think we only want to promote the workflow usage, else it's just a function they can (forget to) apply"", 'comment_created': datetime.datetime(2020, 8, 12, 11, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 469215405, 'comment_body': ""Yeah I was hesitating about that. But I guess it's fine to use lowercase for callable classes according to PEP 8:\r\n>Class Names\r\nClass names should normally use the CapWords convention.\r\nThe naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable.\r\n\r\nAnd for backwards compatibility of course. "", 'comment_created': datetime.datetime(2020, 8, 12, 12, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 469225633, 'comment_body': 'I think this part (inside `__init__`) of the doc is not present anywhere in the doc webpages. A more explicit description of how transformation is done is written separately. By which I guess makes it fine to be a little more abstract?', 'comment_created': datetime.datetime(2020, 8, 12, 12, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 469400090, 'comment_body': 'Especially with the \r\n> The naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable.\r\n\r\nI am totally ok with lower case.... and backwards compatibility.', 'comment_created': datetime.datetime(2020, 8, 12, 16, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478765984, 'comment_body': 'Are you missing `return u`?', 'comment_created': datetime.datetime(2020, 8, 28, 0, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766066, 'comment_body': 'oops, there it is... confusing diff', 'comment_created': datetime.datetime(2020, 8, 28, 0, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766677, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766754, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766789, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766830, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766864, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766909, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766939, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478766959, 'comment_body': ""Don't use equality comparison for floats\r\n```suggestion\r\n        assert_almost_equal(u_ts.positions, u_p_ts.positions)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 0, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478767116, 'comment_body': 'Use this for float comparisons:\r\n```suggestion\r\nfrom numpy.testing import assert_almost_equal\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 0, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478767619, 'comment_body': 'The above is not a valid sphinx link.\r\n```suggestion\r\nSee :mod:`MDAnalysis.transformations.translate` for a simple example.\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 0, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478768067, 'comment_body': '```suggestion\r\nA typical transformation class looks like this (note that we keep its name \r\nlowercase because we will treat it as a function, thanks to the ``__call__``\r\nmethod):\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 28, 0, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478774204, 'comment_body': 'You showed the abstract class. Now show a concrete example to address @richardjgowers comment. For instance\r\n```suggestion\r\nAs a concrete example we will write a transformation that rotates a group of atoms around \r\nthe z-axis through the center of geometry by a fixed increment for every time step. We will use\r\n:meth:`MDAnalysis.core.groups.AtomGroup.rotateby` and simply increase the rotation angle\r\nevery time the transformation is called::\r\n\r\n  class spin_atoms(object):\r\n      def __init__(self, atoms, dphi):\r\n         """"""Rotate atoms by dphi degrees for every time step (around the z axis)""""""\r\n         self.atoms = atoms\r\n         self.dphi = dphi\r\n         self.axis = np.array([0, 0, 1])\r\n         \r\n     def __call__(self, ts):\r\n         phi = self.dphi * ts.frame\r\n         self.atoms.rotateby(phi, self.axis)\r\n         return ts\r\n\r\nThis transformation can be used as ::\r\n  \r\n   u = mda.Universe(PSF, DCD)\r\n   u.trajectory.add_transformations(spin_atoms(u.select_atoms(""protein""), 1.0))\r\n\r\n```\r\n\r\nI currently can\'t get nglview to work in my notebook so you\'ll need to check that this actually works... or come up with another example.\r\n\r\nEDIT: forgot to increment `phi`...\r\n\r\nEDIT 2: yes, it\'s pretty dumb that the phi angle just keeps incrementing, no matter what you do with the trajectory. Perhaps better to do something like `phi = ts.frame * self.dphi`\r\n\r\nEDIT 3: changed it to `phi = ts.frame * self.dphi`', 'comment_created': datetime.datetime(2020, 8, 28, 1, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 478949075, 'comment_body': 'Thanks! it works. And I think it makes sense to just rotate by a fixed angle. (for visualization perhaps)', 'comment_created': datetime.datetime(2020, 8, 28, 8, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 479410961, 'comment_body': 'I changed the snippet.', 'comment_created': datetime.datetime(2020, 8, 28, 16, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 483302333, 'comment_body': '```suggestion\r\nAlso see :mod:`MDAnalysis.transformations.translate` for a simple example.\r\n```', 'comment_created': datetime.datetime(2020, 9, 3, 23, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': '05f2dddd2b8c40633650d6a5dac1c8fc2cdcd5d0', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92a9653abb5bdf4cc258793f9803232965b1a3a5', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fc50712d02cfb2096064431825499260641a7f6', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b7c45bb337abb9f6290dbf42ed3b3ef699654b8', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae51c5bc6c34cc4869d0587261d5ca2c31bac5e1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a542792c44ac8521af2b01b285319b6c8f05e790', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1729ee6129eea87cce32ec95f97b5d843e0a5a88', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26950b28af21eefc07b0a09a36fd9b2a2cde05f9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aa8d2bed94e335d6575324410ae519216bf4137', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c5bbdbdd353fbaf7fa380aada9ea07e3e8d35ee', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b09bef6379a6a6c71d90011356b9c9e5218ad8c3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '235e8a918a613061ac9461195aad24a41d9e3e63', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4447869a2d70a7aad8b4205d949a8798811a204b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ef7d3f0a2c7bc51c8a1c95ca8f26fc114af2a78', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6331d3221f73a9495d3f0c2864535135bc2b3db', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ebcc334c61bb8cf5d07620707224c439579b096', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4121044aebec6f3ac5dfed1fefd4c6e83303441', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b1c470e25baadde9ffe44218f3996f5f0a9582d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e87625fcaf29c4b11e455b9b832140272a911c1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11f36441dd8b30154fdc060a1501ed020c68c35d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c857f67e9840a6574cbbf6dabfb050cc910cac5', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58f6e4e94e0f77b17de2234454da8901f869ce2f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26dab2f07403a68f4a6be16630175358e8fbfffe', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '648c9b0cddd2619ea45f8017f9a945ef8e4cf74f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f083ae5bb3f7dbf7618534c28bc3b0c88c1d064', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ae7f83490591409958be470758c5874bcb49998', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26f68bcf5cd2dc8f4ef4cb4eaad17ecacf1b6bc3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae8a2a2bcd7aabd78743a050aa123d379a639f58', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '499efc10a1314aa1549c6b06fbee86a12250770b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2793ba25295d31b04f3f9a46c118da906d774e10', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acb4488f9af206976f814237f0fa0ca9b8c0f3ca', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1080678a25b8f0a11f3972b0a1eaa8a200d03b1a', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06552750027c0c23e6c393c52137ceec8d29eea1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}]",Yuxuan Zhuang,24636656,yuxuan.zhuang@stanford.edu,User,,46,,47,19
449447959,Refactor pmda after universe can be serialized,"Fixes #133

Changes made in this Pull Request:
 - refactor each part of pmda (test passed)
    - [x] parallel.py
    - [x] custom.py
    - [x] rmsd
    - [x] rmsf
    - [x] contact
    - [x] Hbond
    - [x] RDF
    - [x] density
    - [ ] leaflet



PR Checklist
------------
 - [ ] Tests?
 - [ ] Docs?
 - [ ] CHANGELOG updated?
 - [ ] Issue raised/referenced?
",False,132,https://api.github.com/repos/MDAnalysis/pmda/pulls/132,https://github.com/MDAnalysis/pmda/pull/132,open,186,223,15,34,8,11,0,0,[],2020-07-15 12:25:47+00:00,,0.0,,"[{'comment_id': 455244858, 'comment_body': 'Hm, cool that this works.', 'comment_created': datetime.datetime(2020, 7, 15, 18, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 455246262, 'comment_body': 'Do updating AtomGroups work with the serialization?', 'comment_created': datetime.datetime(2020, 7, 15, 18, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 455247843, 'comment_body': 'Why is this crucial? What happens otherwise?', 'comment_created': datetime.datetime(2020, 7, 15, 18, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 455722647, 'comment_body': 'Because--no sure it should be defined as a bug--\r\ne.g. Density Analysis (both in MDAnalysis and this PR) depends on the current ts of the universe. \r\n```python\r\ndef _prepare(self):\r\n        coord = self._select_atomgroup.positions  #   It will change with ts.\r\n        ...\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 11, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 455723178, 'comment_body': 'Yes! Thanks to what has already been implemented by Richard:)', 'comment_created': datetime.datetime(2020, 7, 16, 11, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 455899894, 'comment_body': 'And currently, the universe will stay its ending frame after analysis if not being rewinded.', 'comment_created': datetime.datetime(2020, 7, 16, 16, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 456379248, 'comment_body': 'Before we are settled about `AtomGroup`, here I hack the order of the attribute dict (although it should not be ordered, it somehow matters) so we always pickle `Universe` before `Atomgroup`.\r\nNot sure how we should deal with unpicklable attributes. Note cloudpickle which dask uses can literally pickle open file handler.', 'comment_created': datetime.datetime(2020, 7, 17, 11, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 456826464, 'comment_body': 'ah just use python 3.6 or newer here `f""Can\'t set {key} at this time""`', 'comment_created': datetime.datetime(2020, 7, 18, 20, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 456826592, 'comment_body': 'oh because this does not return a copy. I would not do the rewind. If people want a copy they should take one. That can be fixed in the density analysis class.', 'comment_created': datetime.datetime(2020, 7, 18, 20, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kain88-de', 'type': 'User'}, {'comment_id': 456893398, 'comment_body': 'The thing is here we are not utilizing `FrameIteratorSliced` (which does the rewind after iteration) because we want to get accurate timing by ` self._ts = self._trajectory[i]`. So some discrepancy between AnalysisBase and ParallelAnalysisBase:\r\n```\r\nu = mda.Universe(GRO, XTC)\r\nserial_analysis(u.atoms).run(stop=3)\r\nu.trajectory.ts.frame == 0\r\n...\r\nparallel_analysis(u.atoms).rum(stop=3)\r\nu.trajectory.ts.frame == 3', 'comment_created': datetime.datetime(2020, 7, 19, 10, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 631259246, 'comment_body': 'the comment is outdated', 'comment_created': datetime.datetime(2021, 5, 12, 17, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': '1e3d27bacb7b7e92da7c5c98174dd65871608d8f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4435f29d5e96476fa87ebf18c489cfaee9e72937', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '198167326b06f072e39d95558d95cdfeebfd2cb1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a708579abf396956fd6ad2b7a2f53f72e8670a1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cafe65f42a408bbaf43e739afb7d24cab5de5abb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '185d19a790c97e4c86f05ebaf29090c998b4d06f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef86b9dbcd3d077c6c22fb754cbb4756b922e3cb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0b0bd6f93881f6b54c9e685374dbb5e74016b5c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa629cafed01a6361f10b0710dcd6520af780b9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '495033fd8fa0e7533c243c4e723b203452fc7a35', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87002237faafa18163d4879ea038e4aed2e12304', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e99734354904c52dbbff60b5d8a01055c37cfe', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356cfb9929d50a9f5134ed966268a8d5f4d15fe7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58fea5d172257c5697678724ed4c4f31b2fd463a', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfd35882fcbdc6ace626fd6b58c8f0a2b37a4c16', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09218822839953c0770cee3ce67762e5e531d4e3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49288e88875c9b7fbaf81ba9982a688aa566f924', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a0e0c580f558493a073d88cec955e497fcd5d70', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '187463bbf2dff87efcc8eff745d8e5f4817358dd', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a420401e68317e41335adfda794b9d6a6fdf01f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '053225bed989bc9399b28d0bf08f1197185fbdbc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83becd717cf94a56ab6cf7b34e8079bd065111f3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9c89e6ab054e80faa979d7c6073ff0e6d87ca55', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61bce8f2b8057f5a300268757dae9a96faea965c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb99fc8d909c4115a869178fc005c76fcf0a5de0', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd95add1ac83a0aa65ec29bade495f544a10de686', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5052829f4e3139703ca946f0bd8f17c8a0d9b89', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '608a803d9146b2ec0e0e4127bd4f160a411442ad', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18988c596c278e26e82593a1230306cca7cbd892', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61a34c72422912d211b6138bc67dc0fcaf4dcc4b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf68f5c9027568dcb8801079b6a6c34c5eacfdc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ceaebf5c91a7020c6e4b62ff9598140aaa5c390', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd424f6d3480bca297628d5d326901e627a674218', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b649c04db527b1d317b7e42698041ea381c6ad06', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}]",Yuxuan Zhuang,24636656,yuxuan.zhuang@stanford.edu,User,,46,,47,19
468841994,Turn ParallelAnalysisBase into dask custom collection,"Fixes #135 

Note the only file changes from #132 is `parallel.py` You can read https://github.com/yuxuanzhuang/pmda/pull/1/files to get the actual changes.

Changes made in this Pull Request:
 - See #135 


PR Checklist
------------
 - [ ] Tests?
 - [ ] Docs?
 - [ ] CHANGELOG updated?
 - [ ] Issue raised/referenced?
",False,136,https://api.github.com/repos/MDAnalysis/pmda/pulls/136,https://github.com/MDAnalysis/pmda/pull/136,open,340,293,15,36,2,8,0,0,[],2020-08-17 13:44:03+00:00,,0.0,,"[{'comment_id': 472791642, 'comment_body': 'Even though multiprocessing is the default scheduler, one can still use distributed, right?', 'comment_created': datetime.datetime(2020, 8, 19, 7, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 472792191, 'comment_body': 'Why is this crucial? What would happen? Add more comment.', 'comment_created': datetime.datetime(2020, 8, 19, 7, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 472794830, 'comment_body': 'Will it not be possible to `persist`? \r\n\r\nPresumably, that would have been possible previously if we had chosen `persist` in `run` instead of `compute()`.', 'comment_created': datetime.datetime(2020, 8, 19, 7, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 472795607, 'comment_body': 'Does DaskMixin require the whole class to be picklable?', 'comment_created': datetime.datetime(2020, 8, 19, 7, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 472801729, 'comment_body': '*prepare_jobs* sounds confusing to me – what ""jobs""? If it\'s part of the documented workflow then it could just be *prepare*. \r\n\r\n*prepare_dask* would be more explicit but also a bit pointless because PMDA is fully intertwined with dask so that\'s the only thing we would be preparing for. *create_dask_graph* is too long and really talks to much about implementation details.\r\n\r\nAll in all, I\'d just call it *prepare* and add more docs stating clearly what is being prepared and under which circumstances a user needs to run it.  ', 'comment_created': datetime.datetime(2020, 8, 19, 7, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 473002787, 'comment_body': 'Right, it can either be a global dask config, a context manager, or an arg in `self.compute()`. (https://docs.dask.org/en/latest/scheduler-overview.html#configuring-the-schedulers)', 'comment_created': datetime.datetime(2020, 8, 19, 12, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 473006493, 'comment_body': 'discussed here\r\nhttps://github.com/MDAnalysis/pmda/pull/132/files#r455247843', 'comment_created': datetime.datetime(2020, 8, 19, 12, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 473007818, 'comment_body': 'Yes...I mean in the old implementation, the whole class has to be picklable as well.\r\n\r\nFYI, the code here is not needed anymore after https://github.com/MDAnalysis/mdanalysis/pull/2893 is merged', 'comment_created': datetime.datetime(2020, 8, 19, 12, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}]","[{'commit_sha': '1e3d27bacb7b7e92da7c5c98174dd65871608d8f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4435f29d5e96476fa87ebf18c489cfaee9e72937', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '198167326b06f072e39d95558d95cdfeebfd2cb1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a708579abf396956fd6ad2b7a2f53f72e8670a1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cafe65f42a408bbaf43e739afb7d24cab5de5abb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '185d19a790c97e4c86f05ebaf29090c998b4d06f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef86b9dbcd3d077c6c22fb754cbb4756b922e3cb', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0b0bd6f93881f6b54c9e685374dbb5e74016b5c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa629cafed01a6361f10b0710dcd6520af780b9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '495033fd8fa0e7533c243c4e723b203452fc7a35', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87002237faafa18163d4879ea038e4aed2e12304', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e99734354904c52dbbff60b5d8a01055c37cfe', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356cfb9929d50a9f5134ed966268a8d5f4d15fe7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58fea5d172257c5697678724ed4c4f31b2fd463a', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfd35882fcbdc6ace626fd6b58c8f0a2b37a4c16', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09218822839953c0770cee3ce67762e5e531d4e3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49288e88875c9b7fbaf81ba9982a688aa566f924', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a0e0c580f558493a073d88cec955e497fcd5d70', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '187463bbf2dff87efcc8eff745d8e5f4817358dd', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a420401e68317e41335adfda794b9d6a6fdf01f', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '053225bed989bc9399b28d0bf08f1197185fbdbc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83becd717cf94a56ab6cf7b34e8079bd065111f3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '666d6905b3650e0ed1ae80ade7a923ce1e14bab5', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e0013e6c6d4b8d5c663a43d18ac67e54aa071d3', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9c89e6ab054e80faa979d7c6073ff0e6d87ca55', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61bce8f2b8057f5a300268757dae9a96faea965c', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb99fc8d909c4115a869178fc005c76fcf0a5de0', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd95add1ac83a0aa65ec29bade495f544a10de686', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5052829f4e3139703ca946f0bd8f17c8a0d9b89', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '608a803d9146b2ec0e0e4127bd4f160a411442ad', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18988c596c278e26e82593a1230306cca7cbd892', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61a34c72422912d211b6138bc67dc0fcaf4dcc4b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf68f5c9027568dcb8801079b6a6c34c5eacfdc', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f08fc84360d1249abcca0ed2030f5a92a640535', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '186bfbf8aa80cc1bc31e7153e79bd10bff7bff60', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f762c7aae4b942c9cef4f36eca2ea7dfbfc6ea8b', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}]",Yuxuan Zhuang,24636656,yuxuan.zhuang@stanford.edu,User,,46,,47,19
468880177,Documents for parallel analysis,"Fixes #93 

The jupyter notebook can be read here:
https://yuxuanzhuang.github.io/UserGuide/examples/analysis/custom_parallel_analysis.html",True,102,https://api.github.com/repos/MDAnalysis/UserGuide/pulls/102,https://github.com/MDAnalysis/UserGuide/pull/102,closed,1087,12,9,14,14,53,0,2,[],2020-08-17 14:47:54+00:00,2020-10-01 03:49:32+00:00,3848498.0,"44 days, 13:01:38","[{'comment_id': 479785587, 'comment_body': ""tu -> to. Also, don't need the fullstop between '... use' and 'by `Pool(n_jobs)`'"", 'comment_created': datetime.datetime(2020, 8, 30, 15, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 479785861, 'comment_body': 'Below is -> Below are, and multiprocess -> multiprocessing', 'comment_created': datetime.datetime(2020, 8, 30, 15, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 479786745, 'comment_body': ""The following images don't appear to be showing up? Also, reprsents -> represents"", 'comment_created': datetime.datetime(2020, 8, 30, 16, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 479788606, 'comment_body': 'trajectroy -> trajectory, and splitted -> split', 'comment_created': datetime.datetime(2020, 8, 30, 16, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 479788650, 'comment_body': 'paralleism -> parallelism', 'comment_created': datetime.datetime(2020, 8, 30, 16, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 479788840, 'comment_body': 'Multiprocess -> multiprocessing? ', 'comment_created': datetime.datetime(2020, 8, 30, 16, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 479789376, 'comment_body': 'intergrated -> integrated, and ultilized -> utilized ', 'comment_created': datetime.datetime(2020, 8, 30, 16, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 479789696, 'comment_body': 'visulized -> visualized, and multiprocess -> multiprocessing ', 'comment_created': datetime.datetime(2020, 8, 30, 16, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 479789894, 'comment_body': 'similiar -> similar ', 'comment_created': datetime.datetime(2020, 8, 30, 16, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 479790371, 'comment_body': 'As above, images not showing up, and reprsents -> represents', 'comment_created': datetime.datetime(2020, 8, 30, 16, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 479790505, 'comment_body': 'uses -> use', 'comment_created': datetime.datetime(2020, 8, 30, 16, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 479790854, 'comment_body': 'ultilize -> utilize ', 'comment_created': datetime.datetime(2020, 8, 30, 16, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fiona-naughton', 'type': 'User'}, {'comment_id': 489967871, 'comment_body': 'Thanks for fixing these links!', 'comment_created': datetime.datetime(2020, 9, 17, 4, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489968255, 'comment_body': '```suggestion\r\nIf you want to run your own script in parallel in MDAnalysis, here is a `tutorial on make your code parallelisable <custom_parallel_analysis.ipynb>`__.\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 4, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489968469, 'comment_body': '```suggestion\r\n    ""## Background\\n"",\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 4, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489968719, 'comment_body': '```suggestion\r\n    ""In MDAnalysis, most implemented analysis methods are based on `AnalysisBase`, which provides a generic API for users to <a href=https://mdanalysis.org/UserGuide/examples/analysis/custom_trajectory_analysis.html>write their own trajectory analysis</a>. However, this framework only takes single-core power of the PC by iterating through the trajectory and running a frame-wise analysis. Below we aim to first explore some possible simple implementations of parallelism, including using multiprocessing and dask. We will also discuss the acceleration approaches that should be considered, ranging from your own multiple-core laptops/desktops to distributed clusters.  ""\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 4, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489968870, 'comment_body': '```suggestion\r\n    ""For a detailed description of this analysis, read [Writing your own trajectory](https://mdanalysis.org/UserGuide/examples/analysis/custom_trajectory_analysis.html).\\n"",\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 4, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489971243, 'comment_body': '```suggestion\r\n    ""The coordinates of the ``atomgroup`` analysed change with each frame of the trajectory. We need to explicitly point the analysis function to the frame that needs to be analysed with a ``frame_index``: `atomgroup.universe.trajectory[frame_index]` in order to update the positions (and any other dynamic per-frame information) appropriately. Therefore, the first step to making the ``radgyr`` function parallelisable is to add a ``frame_index`` argument.""\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 4, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489971490, 'comment_body': '```suggestion\r\n    ""    # index the trajectory to set it to the frame_index frame\\n"",\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489971761, 'comment_body': '```suggestion\r\n    ""The native parallelisation module in Python is called [multiprocessing](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing). It contains useful tools to build a pool of working cores, map the function into different workers, and gather and order the results from all the workers.\\n"",\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489972981, 'comment_body': '```suggestion\r\n    ""Below we use `Pool` from `multiprocessing` as a context manager. We can define how many cores (or workers) we want to use with `Pool(n_jobs)`. We use `functools.partial` to create a new method by supplying every argument needed for `radgyr_per_frame` *except* `frame_index`. We can do this because the `atomgroup`, `masses` etc. will not change when we iterate the function over each frame, but the `frame_index` will. We create a list of jobs where we use the `worker_pool` to map each `frame_index` to each job.\\n"",\r\n```\r\n\r\nJust clarifying that `functools.partial` is quite separate from using the `Pool` context manager.', 'comment_created': datetime.datetime(2020, 9, 17, 5, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489973224, 'comment_body': 'Not sure this fits here, after the description of the function but before the actual code. It may work better as an intro to the dask section?', 'comment_created': datetime.datetime(2020, 9, 17, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489973589, 'comment_body': 'Can you make the partial function a different thing outside the context manager to separate these concepts out more, e.g.\r\n\r\n```python\r\nrun_per_frame = partial(radgyr_per_frame, atomgroup=....)\r\nframe_values = np.arange(u.trajectory.n_frames)\r\nwith Pool(n_jobs) as worker_pool:\r\n    result = worker_pool.map(run_per_frame, frame_values)\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 9, 17, 5, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489973952, 'comment_body': '```suggestion\r\n    ""[Dask](https://docs.dask.org/en/latest/) is a flexible library for parallel computing in Python. It provides advanced parallelism for analytics and has been integrated or utilized in many scientific softwares. It can be scaled from one single computer to a cluster of computers inside a HPC center.\\n"",\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489975270, 'comment_body': '```suggestion\r\n    ""Dask has a dynamic task scheduling system with synchronous (single-threaded), threaded, multiprocessing and distributed schedulers. The wrapping function in dask, `dask.delayed`, mimics for loops and wraps Python code into a Dask graph. This code can then be easily run in parallel, and visualized with `dask.visualize()` to examine if the task is well distributed. The code inside `dask.delayed` is not run immediately on execution, but pushed into a job queue waiting for submission. These queues can be resolved or executed with commands like `compute()` or `persist()`. A more complex dependency can also be built among different jobs, which might be useful for a complex analysis.\\n"",\r\n```\r\n\r\nI find this very short explanation a bit confusing, especially the bits at the end (""A more complex dependency..."" expecially. Could you go into more detail or just link to Dask resources explaining these concepts? ', 'comment_created': datetime.datetime(2020, 9, 17, 5, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489975402, 'comment_body': 'Here would be a good place to move that earlier part in the multiprocessing that talks about its disadvantages.', 'comment_created': datetime.datetime(2020, 9, 17, 5, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489975563, 'comment_body': '```suggestion\r\n    ""Note: The threaded scheduler in Dask (similar to `threading` in Python) should not be used as it will mess up with the state (timestep) of the trajectory.""\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489975958, 'comment_body': '```suggestion\r\n    ""We can also use the old `radgyr` function because `dask` is more flexible on the input arguments.\\n"",\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489976146, 'comment_body': ""Can you rearrange this to say `coordinates`, as it's ambiguous how protein is changed?"", 'comment_created': datetime.datetime(2020, 9, 17, 5, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489976388, 'comment_body': '```suggestion\r\n    ""We can also use Dask dashboard (with dask.distributed.Client) to examine how jobs are distributed along all the workers. Each green bar below represents one job, i.e. running `radgyr` on one frame of the trajectory.""\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489976671, 'comment_body': '```suggestion\r\n    ""The aforementioned per-frame approach should normally be **avoided** because in **each** task, all the attributes (`AtomGroup`, `Universe`, and etc) need to be pickled. This pickling may take even more time than your lightweight analysis! Besides, in Dask, a significant amount of overhead time is needed to build a comprehensive Dask graph with thousands of tasks.\\n"",\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489976957, 'comment_body': '```suggestion\r\n    ""Therefore, we should normally use a split-apply-combine scheme for parallel trajectory analysis. Here, the trajectory is **split** into blocks, analysis is performed separately and in parallel on each block (\\""apply\\""), and then results from each block are gathered and **combined**. \\n""\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489977413, 'comment_body': 'Can you just briefly explain that dask.delayed as a decorator here is the same as `dask.delayed(analyze_block)` or something like that?', 'comment_created': datetime.datetime(2020, 9, 17, 5, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489977833, 'comment_body': 'Can you briefly explain that the code below is splitting it into equal blocks?', 'comment_created': datetime.datetime(2020, 9, 17, 5, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489977883, 'comment_body': '```suggestion\r\n    ""n_blocks = n_jobs   #  it can be any realistic value (0 < n_blocks <= n_jobs)\\n"",\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489978210, 'comment_body': '```suggestion\r\n    ""n_frames_per_block = n_frames // n_blocks\\n"",\r\n```\r\n\r\nThis is longer but clearer. Alternatively you could comment the meaning', 'comment_created': datetime.datetime(2020, 9, 17, 5, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489978480, 'comment_body': 'Can you add a newline so the code follows pep8?', 'comment_created': datetime.datetime(2020, 9, 17, 5, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489978554, 'comment_body': '```suggestion\r\n    ""Using `visualize()`, we can see that the trajectory is split into a few blocks instead of ~4000 jobs.""\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489978705, 'comment_body': 'represents typo still here', 'comment_created': datetime.datetime(2020, 9, 17, 5, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489979666, 'comment_body': '```suggestion\r\nIf multiple :class:`MDAnalysis.core.groups.AtomGroup`\\ s are bound to the same\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489979731, 'comment_body': '```suggestion\r\n:class:`MDAnalysis.core.universe.Universe`, they will also be bound to the same one\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489979835, 'comment_body': '```suggestion\r\n:class:`MDAnalysis.core.universe.Universe`. This means that after unpickling,\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489979878, 'comment_body': '```suggestion\r\nbe attached to the new :class:`MDAnalysis.core.groups.AtomGroup`. If the Universe is serialized\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489980108, 'comment_body': '```suggestion\r\n    ""Here we use [joblib](https://joblib.readthedocs.io/en/latest/). It is implemented on `multiprocessing` and provides lightweight pipelining in Python. Compared to `multiprocessing`, it has a simple API and convenient persistence of cached results.""\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489980173, 'comment_body': '```suggestion\r\n    ""You may want to perform multiple analyses (or analyze multiple trajectories). In this case, you can use some high-level parallelism, i.e. running all the serial analyses in parallel.\\n"",\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489980395, 'comment_body': 'Why is this here? Can you use a Markdown cell to link to and explain this?', 'comment_created': datetime.datetime(2020, 9, 17, 5, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489980652, 'comment_body': 'This section could benefit from some general explanation between each cell. e.g. the necessity of `run_analysis`, and what `delayed(run_analysis)(analysis)` is doing. ', 'comment_created': datetime.datetime(2020, 9, 17, 5, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489980911, 'comment_body': '```suggestion\r\n    ""The parallel version of MDAnalysis is still under development. For existing solutions and some implementations of parallel analysis, go to [PMDA](https://www.mdanalysis.org/pmda/). PMDA (<a data-cite=\\""fan_pmda_2019\\"" href=\\""https://doi.org/10.25080/Majora-7ddc1dd1-013\\"">Shujie *et al.*, 2019</a>) applies the aforementioned split-apply-combine scheme with Dask. In the future, it may provide a framework that consolidates all the parallelisation schemes described in this tutorial.""\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 5, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489981543, 'comment_body': ""Uh, I don't know why GitHub put this and the below comment on this images section. This suggestion pertains to the `joblib` part."", 'comment_created': datetime.datetime(2020, 9, 17, 5, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489981613, 'comment_body': 'This is supposed to be a suggestion for the part that starts ""In real life""...', 'comment_created': datetime.datetime(2020, 9, 17, 5, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489981848, 'comment_body': ""Um, this is supposed to be about the comment link to the user guide. Sorry that all my suggestions appear to have been put on the same image output; I can't seem to change it."", 'comment_created': datetime.datetime(2020, 9, 17, 5, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489981918, 'comment_body': 'This is about the general `joblib` section', 'comment_created': datetime.datetime(2020, 9, 17, 5, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 489981960, 'comment_body': 'This is about the last parallel section part.', 'comment_created': datetime.datetime(2020, 9, 17, 5, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}]","[{'commit_sha': '7f9454a6b21956a6ad6c167dde2812fec6b69361', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a97f77eda14b7d17f9cccb8b239fa70597e38b7', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a77313fef790640b6f5cf0ba395de1b4d34b238', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5f66b0945a90db14b8cdb0555e1bbae4743b728', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42bd71ad5015e9f19f91ce62b101e47137bcd424', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59446e653cd95feb725150cc3519ab628290ff84', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec6fc05282beb1d3fa9278ae22cb243e354be3e9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44bf9f719fd58b8713a6dd4d991f82007cde04c4', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cf9fb174d1d163db8ddd95e8d97d93e10359d7d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '421b655884f61cce33518b22a44a324c122e25b9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3668775c2626668e0d9fcb8d9bcc0fb6bf6ef2a9', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2c54e9f12cbb8dd33f24eb098cb1830299d59f1', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52eb70c166ba0dcb598c9817272431a05cbcc00d', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95ea048755ad9723156986fed509c20a6e8172af', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}]",Yuxuan Zhuang,24636656,yuxuan.zhuang@stanford.edu,User,,46,,47,19

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
33389183,mdanalysis,MDAnalysis/mdanalysis,Python,643,1276,42,234,7066,483,58,51,"[{'id': 2038899729, 'number': 4691, 'closed': None, 'created': datetime.datetime(2024, 8, 27, 7, 18, 12, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 3, 'deletions': 1, 'state': 'open'}, {'id': 1849225666, 'number': 4584, 'closed': None, 'created': datetime.datetime(2024, 5, 1, 5, 35, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 30, 'deletions': 15, 'state': 'open'}, {'id': 1848876357, 'number': 4582, 'closed': datetime.datetime(2024, 5, 31, 1, 8, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 30, 22, 17, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2602273.0, 'time_delta': '30 days, 2:51:13', 'additions': 2138, 'deletions': 3, 'state': 'closed'}, {'id': 1087477824, 'number': 3863, 'closed': None, 'created': datetime.datetime(2022, 10, 14, 13, 44, 17, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 294, 'deletions': 138, 'state': 'open'}, {'id': 971574341, 'number': 3724, 'closed': datetime.datetime(2022, 7, 25, 8, 31, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 19, 21, 54, 31, tzinfo=datetime.timezone.utc), 'time_taken': 3062204.0, 'time_delta': '35 days, 10:36:44', 'additions': 122, 'deletions': 59, 'state': 'closed'}, {'id': 971542061, 'number': 3722, 'closed': datetime.datetime(2024, 7, 4, 10, 49, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 19, 18, 26, 16, tzinfo=datetime.timezone.utc), 'time_taken': 64426978.0, 'time_delta': '745 days, 16:22:58', 'additions': 67, 'deletions': 25, 'state': 'closed'}, {'id': 941532416, 'number': 3670, 'closed': datetime.datetime(2022, 7, 24, 0, 38, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 19, 13, 17, 24, tzinfo=datetime.timezone.utc), 'time_taken': 5656841.0, 'time_delta': '65 days, 11:20:41', 'additions': 53, 'deletions': 9, 'state': 'closed'}, {'id': 699605305, 'number': 3375, 'closed': datetime.datetime(2022, 5, 16, 13, 20, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 29, 14, 54, 34, tzinfo=datetime.timezone.utc), 'time_taken': 25136785.0, 'time_delta': '290 days, 22:26:25', 'additions': 141, 'deletions': 42, 'state': 'closed'}, {'id': 648622736, 'number': 3311, 'closed': datetime.datetime(2021, 5, 21, 16, 30, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 20, 9, 15, 54, tzinfo=datetime.timezone.utc), 'time_taken': 112480.0, 'time_delta': '1 day, 7:14:40', 'additions': 26, 'deletions': 5, 'state': 'closed'}, {'id': 518019825, 'number': 3025, 'closed': datetime.datetime(2021, 4, 6, 18, 2, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 9, 20, 26, 33, tzinfo=datetime.timezone.utc), 'time_taken': 12778552.0, 'time_delta': '147 days, 21:35:52', 'additions': 7, 'deletions': 8, 'state': 'closed'}, {'id': 489749448, 'number': 2950, 'closed': datetime.datetime(2021, 4, 10, 10, 37, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 19, 16, 37, 22, tzinfo=datetime.timezone.utc), 'time_taken': 17517585.0, 'time_delta': '202 days, 17:59:45', 'additions': 407, 'deletions': 40, 'state': 'closed'}, {'id': 468290293, 'number': 2911, 'closed': datetime.datetime(2020, 8, 17, 9, 20, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 10, 23, 38, tzinfo=datetime.timezone.utc), 'time_taken': 169020.0, 'time_delta': '1 day, 22:57:00', 'additions': 107, 'deletions': 15, 'state': 'closed'}, {'id': 466712709, 'number': 2904, 'closed': datetime.datetime(2020, 8, 12, 16, 27, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 11, 48, 54, tzinfo=datetime.timezone.utc), 'time_taken': 16728.0, 'time_delta': '4:38:48', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 465166446, 'number': 2893, 'closed': datetime.datetime(2020, 8, 21, 18, 31, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 15, 35, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1047397.0, 'time_delta': '12 days, 2:56:37', 'additions': 106, 'deletions': 160, 'state': 'closed'}, {'id': 453271942, 'number': 2859, 'closed': datetime.datetime(2020, 9, 8, 0, 55, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 9, 54, 57, tzinfo=datetime.timezone.utc), 'time_taken': 4287656.0, 'time_delta': '49 days, 15:00:56', 'additions': 590, 'deletions': 256, 'state': 'closed'}, {'id': 443941297, 'number': 2820, 'closed': datetime.datetime(2020, 7, 7, 16, 46, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 8, 59, 37, tzinfo=datetime.timezone.utc), 'time_taken': 373620.0, 'time_delta': '4 days, 7:47:00', 'additions': 22, 'deletions': 4, 'state': 'closed'}, {'id': 443575164, 'number': 2815, 'closed': datetime.datetime(2020, 7, 3, 23, 42, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 15, 2, 57, tzinfo=datetime.timezone.utc), 'time_taken': 117579.0, 'time_delta': '1 day, 8:39:39', 'additions': 38, 'deletions': 34, 'state': 'closed'}, {'id': 431918892, 'number': 2723, 'closed': datetime.datetime(2020, 8, 8, 0, 40, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 16, 23, 15, tzinfo=datetime.timezone.utc), 'time_taken': 5127448.0, 'time_delta': '59 days, 8:17:28', 'additions': 1464, 'deletions': 33, 'state': 'closed'}, {'id': 425259643, 'number': 2704, 'closed': datetime.datetime(2020, 8, 10, 21, 45, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 29, 18, 28, 11, tzinfo=datetime.timezone.utc), 'time_taken': 6319048.0, 'time_delta': '73 days, 3:17:28', 'additions': 450, 'deletions': 172, 'state': 'closed'}, {'id': 386079836, 'number': 2610, 'closed': datetime.datetime(2020, 3, 20, 10, 18, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 10, 11, 30, 24, tzinfo=datetime.timezone.utc), 'time_taken': 859661.0, 'time_delta': '9 days, 22:47:41', 'additions': 135, 'deletions': 50, 'state': 'closed'}, {'id': 385839589, 'number': 2603, 'closed': datetime.datetime(2020, 3, 12, 10, 26, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 22, 2, 18, tzinfo=datetime.timezone.utc), 'time_taken': 217437.0, 'time_delta': '2 days, 12:23:57', 'additions': 112, 'deletions': 5, 'state': 'closed'}, {'id': 385818477, 'number': 2601, 'closed': datetime.datetime(2020, 3, 9, 21, 48, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 21, 5, 58, tzinfo=datetime.timezone.utc), 'time_taken': 2550.0, 'time_delta': '0:42:30', 'additions': 266331, 'deletions': 4, 'state': 'closed'}, {'id': 382873506, 'number': 2577, 'closed': datetime.datetime(2020, 3, 12, 0, 4, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 3, 10, 42, 46, tzinfo=datetime.timezone.utc), 'time_taken': 739292.0, 'time_delta': '8 days, 13:21:32', 'additions': 143, 'deletions': 35, 'state': 'closed'}]"
106346721,pmda,MDAnalysis/pmda,Python,22,31,15,9,227,37,10,7,"[{'id': 471063320, 'number': 142, 'closed': datetime.datetime(2020, 8, 22, 2, 6, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 16, 40, tzinfo=datetime.timezone.utc), 'time_taken': 120362.0, 'time_delta': '1 day, 9:26:02', 'additions': 4, 'deletions': 8, 'state': 'closed'}, {'id': 470326588, 'number': 141, 'closed': datetime.datetime(2020, 8, 22, 9, 43, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 18, 2, 36, tzinfo=datetime.timezone.utc), 'time_taken': 229236.0, 'time_delta': '2 days, 15:40:36', 'additions': 45, 'deletions': 5, 'state': 'closed'}, {'id': 470051045, 'number': 138, 'closed': datetime.datetime(2020, 8, 22, 20, 44, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 9, 51, 9, tzinfo=datetime.timezone.utc), 'time_taken': 298403.0, 'time_delta': '3 days, 10:53:23', 'additions': 30, 'deletions': 28, 'state': 'closed'}, {'id': 468841994, 'number': 136, 'closed': None, 'created': datetime.datetime(2020, 8, 17, 13, 44, 3, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 340, 'deletions': 293, 'state': 'open'}, {'id': 449447959, 'number': 132, 'closed': None, 'created': datetime.datetime(2020, 7, 15, 12, 25, 47, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 186, 'deletions': 223, 'state': 'open'}, {'id': 446187576, 'number': 128, 'closed': None, 'created': datetime.datetime(2020, 7, 8, 11, 43, 22, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 188, 'deletions': 214, 'state': 'open'}]"
202356942,UserGuide,MDAnalysis/UserGuide,Python,31,22,13,18,249,64,8,3,"[{'id': 2024240244, 'number': 379, 'closed': datetime.datetime(2024, 8, 18, 8, 6, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 8, 18, 5, 37, 54, tzinfo=datetime.timezone.utc), 'time_taken': 8939.0, 'time_delta': '2:28:59', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 468880177, 'number': 102, 'closed': datetime.datetime(2020, 10, 1, 3, 49, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 14, 47, 54, tzinfo=datetime.timezone.utc), 'time_taken': 3848498.0, 'time_delta': '44 days, 13:01:38', 'additions': 1087, 'deletions': 12, 'state': 'closed'}]"
