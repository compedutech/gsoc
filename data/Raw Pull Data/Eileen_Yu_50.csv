pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1356368477,🌱 Add e2e tests for sample external plugin,"## Description:
Add e2e tests for sample external plugin

## Motivation:
Validate the functionality and the behavior of the sample external plugin.


<!--

Hiya!  Welcome to Kubebuilder!  For a smooth PR process, please ensure
that you include the following information:

* a description of the change
* the motivation for the change
* what issue it fixes, if any, in GitHub syntax (e.g. Fixes #XYZ)

Both the description and motivation may reference other issues and PRs,
but should be mostly understandable without following the links (e.g. when
reading the git commit log).

Please don't @-mention people in PR or commit messages (do so in an
additional comment).

please add an icon to the title of this PR depending on the type:

- ⚠ (:warning:): breaking
- ✨ (:sparkles:): new non-breaking feature
- 🐛 (:bug:): bugfix
- 📖 (:book:): documentation
- 🌱 (:seedling:): infrastructure/other

See https://sigs.k8s.io/kubebuilder-release-tools for more information.

**PLEASE REMOVE THIS COMMENT BLOCK BEFORE SUBMITTING THE PR** (the bits
between the arrows)

-->
",True,3419,https://api.github.com/repos/kubernetes-sigs/kubebuilder/pulls/3419,https://github.com/kubernetes-sigs/kubebuilder/pull/3419,closed,178,0,5,2,4,31,5,2,"[{'name': 'cncf-cla: yes'}, {'name': 'size/L'}, {'name': 'lgtm'}, {'name': 'approved'}, {'name': 'ok-to-test'}]",2023-05-18 22:56:02+00:00,2023-05-31 15:27:45+00:00,1096303.0,"12 days, 16:31:43","[{'comment_id': 1198741902, 'comment_body': '@Eileen-Yu, we need to create a CI to call it out OR we can call it in the tests as we do for the others e2e (Preferable to run in the prow). \r\n\r\nSee: https://github.com/kubernetes-sigs/kubebuilder/tree/master/test/e2e\r\nYou can add a new dir and see how the others are configured so that we call the test in the e2e one\r\n\r\nHowever, if you think that is easier to add a test via GitHub actions, it is either OK. You can do so.\r\n\r\n', 'comment_created': datetime.datetime(2023, 5, 19, 9, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1198948434, 'comment_body': 'Nit: It might be nice to make this a predefined string variable that is used or using standard double quotes for the string. \r\n\r\nThe predefined string variable could look something like:\r\n```go\r\nvar initFileContentsTmpl = `A simple text file created with the %s subcommand\r\nDOMAIN: sample.domain.com`\r\nvar initFileContents = fmt.Sprintf(initFileContentsTmpl, ""`init`"")\r\n```\r\nThis makes it a bit easier to read and understand what the expected contents should be without having the weird string concatenation sequences. I\'m not entirely sure the start and end backticks are allowed in a double quoted string in Go but if not I imagine they are escapable characters by doing something like ""\\\\`""\r\n\r\nThe other valid approach here would probably be to do something along the lines of:\r\n```suggestion\r\n\t\t""A simple text file created with the `init` subcommand\\nDOMAIN: sample.domain.com"")\r\n```\r\nOR if the double backticks cause a problem:\r\n```suggestion\r\n""A simple text file created with the \\`init\\` subcommand\\nDOMAIN: sample.domain.com"")\r\n```\r\n', 'comment_created': datetime.datetime(2023, 5, 19, 13, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1198950250, 'comment_body': 'Ditto on the formatting of the string here. The main goal is to make it as easy as possible to understand what the expected value is without having to do too much mental string manipulation.', 'comment_created': datetime.datetime(2023, 5, 19, 13, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1198950493, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2023, 5, 19, 13, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1198976985, 'comment_body': 'As @camilamacedo86 points out, we need to make sure these tests are run as part of our e2e tests. To elaborate a bit further, these tests are run in Prow and we have a particular shell script that is run to configure the environment and execute the tests.\r\n\r\nIn order to configure these tests properly I think you need to:\r\n1. Add a new `go test ...` command to this shell script function:\r\nhttps://github.com/kubernetes-sigs/kubebuilder/blob/a6fca1782a7a31b13b78e6eb03168e9d0c56a020/test/e2e/setup.sh#L56-L68\r\n2. Add a new setup function for properly building and installing the sample external plugin in https://github.com/kubernetes-sigs/kubebuilder/blob/master/test/e2e/setup.sh\r\n3. Use the new setup function created in 2 in:\r\n    - https://github.com/kubernetes-sigs/kubebuilder/blob/master/test/e2e/local.sh\r\n    - https://github.com/kubernetes-sigs/kubebuilder/blob/master/test/e2e/ci.sh\r\n ', 'comment_created': datetime.datetime(2023, 5, 19, 13, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1199079353, 'comment_body': 'I like the practice here to add description sentence to support debug when error happens.\r\n@camilamacedo86 @everettraven Maybe we can consider applying such to other e2e test specs?', 'comment_created': datetime.datetime(2023, 5, 19, 15, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Kavinjsir', 'type': 'User'}, {'comment_id': 1199083201, 'comment_body': 'Nit: Can we also have a description sentence as the second parameter also?', 'comment_created': datetime.datetime(2023, 5, 19, 15, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Kavinjsir', 'type': 'User'}, {'comment_id': 1199093624, 'comment_body': 'Thank you @everettraven.\r\nMy comment was not good or clear. That is a perfect explanation.', 'comment_created': datetime.datetime(2023, 5, 19, 15, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1203269019, 'comment_body': 'Sounds good! Updated🚀', 'comment_created': datetime.datetime(2023, 5, 24, 1, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Eileen-Yu', 'type': 'User'}, {'comment_id': 1204095225, 'comment_body': 'Revert this change you added it in the prow already', 'comment_created': datetime.datetime(2023, 5, 24, 13, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1204097299, 'comment_body': 'It would be nice to echo the exact error message as well, with which `init` command has failed.', 'comment_created': datetime.datetime(2023, 5, 24, 13, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rashmigottipati', 'type': 'User'}, {'comment_id': 1204104654, 'comment_body': ""Nice touch, but this introduces a dependency on the `kubebuilder` binary being in your PATH when you run this script. Ideally the build script will not use something in the PATH but rather a location we can control during the build. There are a couple options here:\r\n1. We remove this line and don't test that kubebuilder can initialize with this plugin as part of building the plugin\r\n2. We build a local version of the kubebuilder binary from source to use for testing this as part of this script"", 'comment_created': datetime.datetime(2023, 5, 24, 13, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1204105714, 'comment_body': 'See that before init you need to ensure that the plugin was built. \r\nIt is not better build the plugin here instead of create the sh?\r\nCould we not move the code to here and to do that in go so that is easier to keep maintained as well? \r\n\r\nSee that you can run it locally either if you move all to here by just trigging the tests from your IDE', 'comment_created': datetime.datetime(2023, 5, 24, 13, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1204109378, 'comment_body': 'I think this is still needed. IIUC, just the execution of the go tests were added in the Prow configuration', 'comment_created': datetime.datetime(2023, 5, 24, 13, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1204109766, 'comment_body': '+1', 'comment_created': datetime.datetime(2023, 5, 24, 13, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1204122455, 'comment_body': 'Looks like we already have a shell function for building kubebuilder here: https://github.com/kubernetes-sigs/kubebuilder/blob/804fed4839718539a6622bd04e910ec1b86f6be4/test/common.sh#L104', 'comment_created': datetime.datetime(2023, 5, 24, 13, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1204122574, 'comment_body': 'IMO, ideally, we need to keep all in Go.\r\nWhy? It makes it easier for us to keep the project maintained.\r\n- See that using an IDE, we can trigger the tests directly, which means the sh would not be executed.\r\n- Also, it makes it more intuitive since all the required steps to do the tests are placed together.\r\n- By leasing, keeping it in Go with the test help us to troubleshot since we can add breakpoints to verify each step\r\n\r\n', 'comment_created': datetime.datetime(2023, 5, 24, 13, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1204127181, 'comment_body': ""This is making me wonder if it would be worth implementing the functionality to configure where kubebuilder should search for external plugins sooner rather than later. I'm not a huge fan of having e2e tests making modifications to a HOME directory."", 'comment_created': datetime.datetime(2023, 5, 24, 13, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1204134964, 'comment_body': ""I don't disagree that it might be easier to maintain, but I think there is a lot of precedence to build stuff in a shell script for the e2e tests. IMO we shouldn't try to reinvent the wheel by adding this to the go code and follow the existing pattern for building and configuring e2e tests with shell scripts."", 'comment_created': datetime.datetime(2023, 5, 24, 13, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1204142987, 'comment_body': ""I think the shell script approach is good, however I'm not sure this needs its own shell script. Taking a look at the overall `test/` directory, there is a [common.sh](https://github.com/kubernetes-sigs/kubebuilder/blob/master/test/common.sh) file that contains a bunch of shell functions to build and configure things for e2e tests and then are used like:\r\nhttps://github.com/kubernetes-sigs/kubebuilder/blob/804fed4839718539a6622bd04e910ec1b86f6be4/test/e2e/setup.sh#L17-L19\r\n\r\nMy recommendation would be that we try to follow the existing pattern as much as possible"", 'comment_created': datetime.datetime(2023, 5, 24, 13, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1204145633, 'comment_body': 'For clarification, my recommendation is that we:\r\n- Make this shell script a new function in the common.sh file\r\n- call this function in the `test/e2e/setup.sh` script similar to the snippet I shared above', 'comment_created': datetime.datetime(2023, 5, 24, 13, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1204152037, 'comment_body': ""@camilamacedo86 I don't disagree that it is ideal but I think we already have precedence for building the binaries for testing purposes in shell scripts. I think for now we should follow the pre-existing pattern and we can make an issue to convert the e2e shell scripts to Go"", 'comment_created': datetime.datetime(2023, 5, 24, 13, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1204444905, 'comment_body': 'Hi @everettraven,\r\n\r\n> but I think there is a lot of precedence to build stuff in a shell script for the e2e tests.\r\n\r\n**We currently do not utilize any shell scripting to accomplish the tasks required for our end-to-end (e2e) tests**. It\'s important to note that these tests can be executed locally as long as you have a functional Kubernetes cluster.  However, after this PR is merged, this functionality will likely be disrupted and might no longer be possible.\r\n\r\n**To elaborate, introducing shell scripting for e2e tests as we are doing here will break the development environment.** This is contrary to our current setup. The shells scripts in place are Optional to setup the k8s locally either and btw I never used them or to call the test on prow. \r\n\r\nNonetheless, if @Eileen-Yu is able to successfully integrate shell scripting without compromising the functionality (despite my concerns that it will negatively affect the ability to run e2e tests in a development environment), I\'m open to having this PR merged and making necessary changes in a follow-up. Please note, however, that it appears these tests are currently failing due to the lack of the necessary steps within the e2e test environment. Therefore, when the init command is called, it results in a failure. See the following for more details:""\r\n\r\n```\r\n     s: ""kubebuilder init --plugins sampleexternalplugin/v1 --domain sample.domain.com failed with error: (exit status 1) Error: no plugin could be resolved with key \\""sampleexternalplugin/v1\\""\\nUsage:\\n  kubebuilder [flags]\\n\\nExamples:\\nThe first step is to initialize your project:\\n    kubebuilder init [--plugins=<PLUGIN KEYS> [--project-version=<PROJECT VERSION>]]\\n\\n<PLUGIN KEYS> is a comma-separated list of plugin keys from the following table\\nand <PROJECT VERSION> a supported project version for these plugins.\\n\\n                             Plugin keys | Supported project versions\\n-----------------------------------------+----------------------------\\n               base.go.kubebuilder.io/v3 |                          3\\n               base.go.kubebuilder.io/v4 |                          3\\n        declarative.go.kubebuilder.io/v1 |                       2, 3\\n deploy-image.go.kubebuilder.io/v1-alpha |                          3\\n                    go.kubebuilder.io/v2 |                       2, 3\\n                    go.kubebuilder.io/v3 |                          3\\n                    go.kubebuilder.io/v4 |                          3\\n         grafana.kubebuilder.io/v1-alpha |                          3\\n      kustomize.common.kubebuilder.io/v1 |                          3\\n      kustomize.common.kubebuilder.io/v2 |                          3\\n\\nFor more specific help for the init command of a certain plugins and project version\\nconfiguration please run:\\n    kubebuilder init --help --plugins=<PLUGIN KEYS> [--project-version=<PROJECT VERSION>]\\n\\nDefault plugin keys: \\""go.kubebuilder.io/v4\\""\\nDefault project version: \\""3\\""\\n\\n\\nFlags:\\n  -h, --help                     help for kubebuilder\\n      --plugins strings          plugin keys to be used for this subcommand execution\\n      --project-version string   project version (default \\""3\\"")\\n\\n2023/05/24 13:03:58 no plugin could be resolved with key \\""sampleexternalplugin/v1\\""\\n"",\r\n      }\r\n  occurred\r\n```\r\n\r\n\r\n', 'comment_created': datetime.datetime(2023, 5, 24, 16, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1204466238, 'comment_body': 'The prow setup is done in this one: https://github.com/kubernetes-sigs/kubebuilder/blob/master/test/e2e/setup.sh#L56-L67\r\n\r\nWe do not call any of our tests in this way, so why we would need to have this new target and call in the test-e2e-ci?\r\n', 'comment_created': datetime.datetime(2023, 5, 24, 16, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1204516414, 'comment_body': 'I like @everettraven idea to keep the pattern consistent in this PR.\r\n\r\nOther than that, it feels like this is something suitable in the scope of the external plugin project itself.\r\nSuch as a make target in the sample external plugin folder.', 'comment_created': datetime.datetime(2023, 5, 24, 17, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Kavinjsir', 'type': 'User'}, {'comment_id': 1204520342, 'comment_body': 'If we want  to keep the pattern consistent accross the project then we should not add what is required to be build in the tests in shell. Note that today we can run the e2e tests locally for dev purposes without any shell. We just run the suite in go. So that will broke the current behaviour\r\n\r\nSee: https://github.com/kubernetes-sigs/kubebuilder/pull/3419#discussion_r1204444905\r\n', 'comment_created': datetime.datetime(2023, 5, 24, 17, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1204633118, 'comment_body': ""I agree it is a good practice to follow the current pattern, which lets Ginkgo do all e2e related tasks, instead of having an additional script. By doing this we wish to keep consistency and benefit from Ginkgo's feature.\r\n\r\nThe current script may be a reference to put in the docs to provide users info about how to install their external plugin.\r\n"", 'comment_created': datetime.datetime(2023, 5, 24, 18, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Eileen-Yu', 'type': 'User'}, {'comment_id': 1204642811, 'comment_body': ""I completely agree with your assessment. \r\n\r\nModifying the HOME directory during e2e testing is indeed not an ideal scenario, and it may lead to unforeseen issues or conflicts.\r\n\r\nI think allowing users to configure the path for searching external plugins would significantly increase the flexibility and control over the system. \r\n\r\nWondering if it's possible to read a configuration file or an environment variable provided by the user, to specify the desired path for the plugin search? Hope in this way we could avoid making assumptions about the user's directory structure or enforcing unnecessary constraints."", 'comment_created': datetime.datetime(2023, 5, 24, 19, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Eileen-Yu', 'type': 'User'}, {'comment_id': 1204661086, 'comment_body': ""Hey @camilamacedo86 , I'm trying to follow your idea:\r\n\r\nSince `test/e2e/utils` provides context to bring rich prerequisites, including `k8s cluster`, `kubectl`, `kubebuilder`.\r\nThat is how e2e tests get performed for internal plugins.\r\n\r\nSo, it is not necessary/consistent to deal with prerequisites on a different pattern, such as running a new script.\r\n\r\nIs that something you mentioned of and such external-plugin should NOT break?\r\n> We currently do not utilize any shell scripting to accomplish the tasks required for our end-to-end (e2e) tests.\r\n\r\n---\r\n\r\nHere is my opinion:\r\nWe have a well-structured directory under `test/e2e`:\r\n1. those single files such as `local.sh`, `setup.sh` are used to provide the general environment for e2e testing\r\n2. plugin related stuff are put into separate files such as `v4`, `deployimage`\r\n\r\nTo maintain that way, when we create a new e2e test suite for external-plugin, it is not necessary/recommended to touch those public files in `1`.\r\n\r\nThen, if building and configuring external-plugin is needed, we can follow what we did to other plugins:\r\n1. At the very beginning in the ginkgo context, use go code to build and configure external-plugin\r\n2. At the end of the ginkgo context, delete the temporary asset for external-plugin\r\n\r\n"", 'comment_created': datetime.datetime(2023, 5, 24, 19, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Kavinjsir', 'type': 'User'}, {'comment_id': 1206972008, 'comment_body': 'One approach maybe:\r\nIntroduce an env var `KB_PLUGIN_PATH` when executing the kb command to tell the path of the external plugin.\r\n```\r\nKB_PLUGIN_PATH=""/opt/app/kubebuilder/plugin"" \\\r\n  kubebuilder create api --plugins=myexternalplugin/v1\r\n```\r\nIf such env does not exist, fall back to the default (currently used) path.', 'comment_created': datetime.datetime(2023, 5, 26, 15, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Kavinjsir', 'type': 'User'}, {'comment_id': 1206977575, 'comment_body': '@everettraven @rashmigottipati Will this path exist in the prow ? \r\nI think we might need to put at in test/e2e/externalplugin/bin\r\n ', 'comment_created': datetime.datetime(2023, 5, 26, 15, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}]","[{'commit_sha': '597d2d6858df048a110e7e26d9d085b943766c39', 'committer_username': 'Eileen-Yu', 'committer_name': 'Eileen Yu', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 26, 8, 43, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '926dd605a94c187fa23e70306b3aeb7fbc1aef31', 'committer_username': 'Eileen-Yu', 'committer_name': 'Eileen Yu', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 26, 8, 43, 8, tzinfo=datetime.timezone.utc)}]",Eileen Yu,48944635,,User,,23,,18,25
1351480872,🌱 Update go version for external plugin sample,"## Description
1. Update go version for the external plugin sample.
2. Automate the update with dependabot

## Motivation
Keep the sample dependencies always align with the latest version.

<!--

Hiya!  Welcome to Kubebuilder!  For a smooth PR process, please ensure
that you include the following information:

* a description of the change
* the motivation for the change
* what issue it fixes, if any, in GitHub syntax (e.g. Fixes #XYZ)

Both the description and motivation may reference other issues and PRs,
but should be mostly understandable without following the links (e.g. when
reading the git commit log).

Please don't @-mention people in PR or commit messages (do so in an
additional comment).

please add an icon to the title of this PR depending on the type:

- ⚠ (:warning:): breaking
- ✨ (:sparkles:): new non-breaking feature
- 🐛 (:bug:): bugfix
- 📖 (:book:): documentation
- 🌱 (:seedling:): infrastructure/other

See https://sigs.k8s.io/kubebuilder-release-tools for more information.

**PLEASE REMOVE THIS COMMENT BLOCK BEFORE SUBMITTING THE PR** (the bits
between the arrows)

-->
",True,3412,https://api.github.com/repos/kubernetes-sigs/kubebuilder/pulls/3412,https://github.com/kubernetes-sigs/kubebuilder/pull/3412,closed,9,2,2,1,3,0,5,1,"[{'name': 'cncf-cla: yes'}, {'name': 'size/S'}, {'name': 'lgtm'}, {'name': 'approved'}, {'name': 'ok-to-test'}]",2023-05-15 21:27:23+00:00,2023-05-16 06:47:36+00:00,33613.0,9:20:13,[],"[{'commit_sha': '72013a294da69684737bb5d09766bfe7ed54e8f8', 'committer_username': 'Eileen-Yu', 'committer_name': 'Eileen Yu', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 26, 8, 43, 8, tzinfo=datetime.timezone.utc)}]",Eileen Yu,48944635,,User,,23,,18,25
1374879206,✨ Make external plugin path configurable,"## Description
1. Introduce the usage of env variable `KB_PLUGINS_PATH` to define a customized path to store external plugins.
1. Add corresponding unit tests

## Sample

```
~/programming/temp/my-external-plugins  
❯ tree .
.
└── sampleexternalplugin
   └── v1
      └── sampleexternalplugin

~/programming/temp/my-external-plugins                                                                                                                                                
❯ KB_PLUGIN_PATH=""/Users/eileen/programming/temp/my-external-plugins"" \
  kubebuilder init --plugins=sampleexternalplugin/v1
```

## Motivation
Make the external plugin path configurable so that users can easily manage their external plugins.

<!--

Hiya!  Welcome to Kubebuilder!  For a smooth PR process, please ensure
that you include the following information:

* a description of the change
* the motivation for the change
* what issue it fixes, if any, in GitHub syntax (e.g. Fixes #XYZ)

Both the description and motivation may reference other issues and PRs,
but should be mostly understandable without following the links (e.g. when
reading the git commit log).

Please don't @-mention people in PR or commit messages (do so in an
additional comment).

please add an icon to the title of this PR depending on the type:

- ⚠ (:warning:): breaking
- ✨ (:sparkles:): new non-breaking feature
- 🐛 (:bug:): bugfix
- 📖 (:book:): documentation
- 🌱 (:seedling:): infrastructure/other

See https://sigs.k8s.io/kubebuilder-release-tools for more information.

**PLEASE REMOVE THIS COMMENT BLOCK BEFORE SUBMITTING THE PR** (the bits
between the arrows)

-->
",True,3437,https://api.github.com/repos/kubernetes-sigs/kubebuilder/pulls/3437,https://github.com/kubernetes-sigs/kubebuilder/pull/3437,closed,200,27,4,1,3,13,5,1,"[{'name': 'cncf-cla: yes'}, {'name': 'size/L'}, {'name': 'lgtm'}, {'name': 'approved'}, {'name': 'ok-to-test'}]",2023-06-01 22:42:36+00:00,2023-06-20 04:24:22+00:00,1575706.0,"18 days, 5:41:46","[{'comment_id': 1214477923, 'comment_body': 'Something to consider here is how maintainable and readable these tests are. Often times reading through test cases can help someone get an understanding of the general flow of what is being tested. \r\n\r\nIn this particular case, when I look at this from the perspective of someone who has no idea what the logic the test is for this takes me a bit longer to read through the code and understand what is happening. \r\n\r\nMy recommendation is to look into using the various Gingko functions to break these tests into much smaller tests. Something like:\r\n```go\r\n...\r\nWhen(""using the $HOME environment variable"", func{\r\n...\r\n  It(""should return the correct path for the darwin OS"", func{...})\r\n  It(""should return the correct path for the linux OS"", func{...})\r\n...\r\n})\r\n...\r\n```\r\nFollowing this approach we can make the individual tests significantly smaller and easier to follow, thus making them much easier to maintain.', 'comment_created': datetime.datetime(2023, 6, 2, 14, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1214557697, 'comment_body': ""+1 to @everettraven's suggestion."", 'comment_created': datetime.datetime(2023, 6, 2, 16, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rashmigottipati', 'type': 'User'}, {'comment_id': 1214562727, 'comment_body': 'Might be worth adding a check to validate that the path actually exists unless we are already doing that in the function that calls `getPluginsRoot()`.', 'comment_created': datetime.datetime(2023, 6, 2, 16, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rashmigottipati', 'type': 'User'}, {'comment_id': 1214597111, 'comment_body': 'Nit: make the It descriptions more like full sentences. See the examples in https://onsi.github.io/ginkgo/', 'comment_created': datetime.datetime(2023, 6, 2, 16, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rashmigottipati', 'type': 'User'}, {'comment_id': 1220126152, 'comment_body': 'Nit: Overall I think this looks fine, but I personally prefer a format more like:\r\n```suggestion\r\n\t\tif _, err := os.Stat(pluginsPath); err != nil {\r\n\t\t    if os.IsNotExist(err) {\r\n\t\t\t// the path does not exist\r\n\t\t\treturn """", fmt.Errorf(""the specified path %s does not exist"", pluginsPath)\r\n\t\t    }\r\n\t\t    // some other error\r\n\t\t    return """", fmt.Errorf(""error checking the path: %v"", err)\r\n\t\t} \r\n\t\t// the path exists\r\n\t\treturn pluginsPath, nil\r\n```\r\nNo need to change this if you don\'t want to, just figured I would share my 2 cents as I think this condenses it into fewer lines of code that is a bit easier to read', 'comment_created': datetime.datetime(2023, 6, 6, 18, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1220148452, 'comment_body': ""IMO these should be tests that are separated even further. Ideally we don't have to do this `if ... else` check and the xdghome check is in a separate test case. \r\n\r\nSomething we could do to verify this is working appropriately for when $XDGHOME isn't set is to get the original value, unset it before each test, reset the original value after each test. Luckily Ginkgo v2 has a handy `GinkgoT().Setenv(...)` function we can use to do this for us. "", 'comment_created': datetime.datetime(2023, 6, 6, 18, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1229800384, 'comment_body': ""Looks like we can probably remove this line - I don't see anywhere in this context where it is used."", 'comment_created': datetime.datetime(2023, 6, 14, 15, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1229804392, 'comment_body': ""Nit: I'd prefer if we did all the `os.Getenv()` calls in the `BeforeEach` for the appropriate context they are used. This will make sure that we are constantly fetching the most up to date value before a test is run."", 'comment_created': datetime.datetime(2023, 6, 14, 15, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1229807508, 'comment_body': 'We should do this logic for _all_ the environment variables we modify during testing. It looks like the only one we are probably missing here is doing this logic for the `XDG_CONFIG_HOME` variable', 'comment_created': datetime.datetime(2023, 6, 14, 15, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1229812777, 'comment_body': 'With this before/after each set, what happens if I set my `XDG_CONFIG_HOME` environment variable and then run this test in the same session?\r\n\r\nIIUC this would overwrite my current value with the test value and then completely unset it, leaving my `XDG_CONFIG_HOME` variable different from what I set it to before running the tests.', 'comment_created': datetime.datetime(2023, 6, 14, 15, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1229816126, 'comment_body': 'I would also prefer that we do this logic in the context that the actual change is taking place rather than at the top level', 'comment_created': datetime.datetime(2023, 6, 14, 15, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1230223942, 'comment_body': 'Thanks for catching!', 'comment_created': datetime.datetime(2023, 6, 14, 22, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Eileen-Yu', 'type': 'User'}, {'comment_id': 1230224729, 'comment_body': 'Oh, I see.\r\nI tried to update the code following your suggestions. It seems much clearer than before!', 'comment_created': datetime.datetime(2023, 6, 14, 22, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Eileen-Yu', 'type': 'User'}]","[{'commit_sha': '235d1e1b66b0d26fb21d28922d5021f793972742', 'committer_username': 'Eileen-Yu', 'committer_name': 'Eileen Yu', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 26, 8, 43, 8, tzinfo=datetime.timezone.utc)}]",Eileen Yu,48944635,,User,,23,,18,25
1461974226,🐛 Ensure external plugin can scaffold files in new directories,"### Description:
Ensure the path specified in `PluginResponse.Universe` is created before the real scaffolding logic.

Example:
For the Universe:
```
universe[""some/dir/file.yaml""] = `...`
```
Create `/home/user/foo-test/some/dir` before scaffolding so as to avoid errors like:
```
2023/08/02 11:56:23 failed to initialize project: unable to scaffold with ""foo/v1"": open /home/user/foo-test/some/dir/file.yaml: no such file or directory
```

### Motivation:
Aims to fix the corresponding issue https://github.com/kubernetes-sigs/kubebuilder/issues/3518


<!--

Hiya!  Welcome to Kubebuilder!  For a smooth PR process, please ensure
that you include the following information:

* a description of the change
* the motivation for the change
* what issue it fixes, if any, in GitHub syntax (e.g. Fixes #XYZ)

Both the description and motivation may reference other issues and PRs,
but should be mostly understandable without following the links (e.g. when
reading the git commit log).

Please don't @-mention people in PR or commit messages (do so in an
additional comment).

please add an icon to the title of this PR depending on the type:

- ⚠ (:warning:): breaking
- ✨ (:sparkles:): new non-breaking feature
- 🐛 (:bug:): bugfix
- 📖 (:book:): documentation
- 🌱 (:seedling:): infrastructure/other

See https://sigs.k8s.io/kubebuilder-release-tools for more information.

**PLEASE REMOVE THIS COMMENT BLOCK BEFORE SUBMITTING THE PR** (the bits
between the arrows)

-->
",True,3519,https://api.github.com/repos/kubernetes-sigs/kubebuilder/pulls/3519,https://github.com/kubernetes-sigs/kubebuilder/pull/3519,closed,9,1,1,1,4,2,4,2,"[{'name': 'cncf-cla: yes'}, {'name': 'size/S'}, {'name': 'lgtm'}, {'name': 'approved'}]",2023-08-03 19:48:47+00:00,2023-08-10 18:01:27+00:00,598360.0,"6 days, 22:12:40","[{'comment_id': 1284778648, 'comment_body': 'Nit: I think the use of `os.Stat` here is redundant, according to the [go docs for `os.Mkdir`](https://pkg.go.dev/os#MkdirAll):\r\n\r\n>MkdirAll creates a directory named path, along with any necessary parents, and returns nil, or else returns an error. The permission bits perm (before umask) are used for all directories that MkdirAll creates. If path is already a directory, MkdirAll does nothing and returns nil.\r\n\r\nWith this information I think it should be safe to just always do an `os.MkdirAll()` since it will do nothing and return `nil` if it already exists', 'comment_created': datetime.datetime(2023, 8, 4, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1286318267, 'comment_body': ""That's a nice catch 👍 Thanks for letting me know!"", 'comment_created': datetime.datetime(2023, 8, 7, 19, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Eileen-Yu', 'type': 'User'}]","[{'commit_sha': '7cdcfa34ae499c0735d60c7180c61b5a027f45d2', 'committer_username': 'Eileen-Yu', 'committer_name': 'Eileen Yu', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 26, 8, 43, 8, tzinfo=datetime.timezone.utc)}]",Eileen Yu,48944635,,User,,23,,18,25
1488590319,✨  Externalize config struct to be available for external plugin,"## Description:
Make `cfg` from an internal struct to be a public one.

## Motivation:
Externalize `cfg` to make it be accessible for external plugin.
Part of effort for https://github.com/kubernetes-sigs/kubebuilder/issues/3553

<!--

Hiya!  Welcome to Kubebuilder!  For a smooth PR process, please ensure
that you include the following information:

* a description of the change
* the motivation for the change
* what issue it fixes, if any, in GitHub syntax (e.g. Fixes #XYZ)

Both the description and motivation may reference other issues and PRs,
but should be mostly understandable without following the links (e.g. when
reading the git commit log).

Please don't @-mention people in PR or commit messages (do so in an
additional comment).

please add an icon to the title of this PR depending on the type:

- ⚠ (:warning:): breaking
- ✨ (:sparkles:): new non-breaking feature
- 🐛 (:bug:): bugfix
- 📖 (:book:): documentation
- 🌱 (:seedling:): infrastructure/other

See https://sigs.k8s.io/kubebuilder-release-tools for more information.

**PLEASE REMOVE THIS COMMENT BLOCK BEFORE SUBMITTING THE PR** (the bits
between the arrows)

-->
",True,3554,https://api.github.com/repos/kubernetes-sigs/kubebuilder/pulls/3554,https://github.com/kubernetes-sigs/kubebuilder/pull/3554,closed,44,44,2,1,3,0,4,1,"[{'name': 'cncf-cla: yes'}, {'name': 'size/M'}, {'name': 'lgtm'}, {'name': 'approved'}]",2023-08-24 19:37:02+00:00,2023-08-25 17:28:53+00:00,78711.0,21:51:51,[],"[{'commit_sha': '1099b02fd0e3411561ab2c2dc9b8863106db9fae', 'committer_username': 'Eileen-Yu', 'committer_name': 'Eileen Yu', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 26, 8, 43, 8, tzinfo=datetime.timezone.utc)}]",Eileen Yu,48944635,,User,,23,,18,25
1466025175,✨  pass config between KB and external plugin,"### Description:
Todo:  
- [x] Add new specs `Config` in both the `PluginRequest` and `PluginResponse`
- [x] Create a local type definition in the sampleexternalplugin path for easier testing
- [x] Inject the config in `PluginRequest` and pass it to the external plugin
- [x] Update the config on the sample external plugin side, send the updated config back via response
- [x] Enable KB to update the config based on the modified the config passed back from `PluginResponse` 
- [x] Add e2e tests
- Remove the `replace` once the PR gets merged (next PR)

Sample PROJECT updated by go sample external plugin:
 
<img width=""500"" src=""https://github.com/kubernetes-sigs/kubebuilder/assets/48944635/80dc752f-f914-4100-bc94-fe559a9a0fbb"">


### Motivation:
Aims to fix the issue https://github.com/kubernetes-sigs/kubebuilder/issues/3396

<!--

Hiya!  Welcome to Kubebuilder!  For a smooth PR process, please ensure
that you include the following information:

* a description of the change
* the motivation for the change
* what issue it fixes, if any, in GitHub syntax (e.g. Fixes #XYZ)

Both the description and motivation may reference other issues and PRs,
but should be mostly understandable without following the links (e.g. when
reading the git commit log).

Please don't @-mention people in PR or commit messages (do so in an
additional comment).

please add an icon to the title of this PR depending on the type:

- ⚠ (:warning:): breaking
- ✨ (:sparkles:): new non-breaking feature
- 🐛 (:bug:): bugfix
- 📖 (:book:): documentation
- 🌱 (:seedling:): infrastructure/other

See https://sigs.k8s.io/kubebuilder-release-tools for more information.

**PLEASE REMOVE THIS COMMENT BLOCK BEFORE SUBMITTING THE PR** (the bits
between the arrows)

-->
",False,3526,https://api.github.com/repos/kubernetes-sigs/kubebuilder/pulls/3526,https://github.com/kubernetes-sigs/kubebuilder/pull/3526,open,172,21,11,1,12,18,4,1,"[{'name': 'help wanted'}, {'name': 'cncf-cla: yes'}, {'name': 'size/L'}, {'name': 'needs-rebase'}]",2023-08-07 23:20:52+00:00,,0.0,,"[{'comment_id': 1286680760, 'comment_body': 'run `make lint-fix` it will fix the lint issue faced here.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1286681511, 'comment_body': 'Should we print or you add this one just for debug purposes?', 'comment_created': datetime.datetime(2023, 8, 8, 7, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1286687101, 'comment_body': 'However, to ensure that works could we add some tests to this one?\r\n\r\nIn the e2e test that we have now, could we not validate the config is filled and with the data that is expected?\r\nAlso, could we try to pass a value unto the config and see if that will be persisted in the PROJECT file?\r\n\r\nSee here how we update the config with the data to have it in tracked in the PROJECT file: https://github.com/kubernetes-sigs/kubebuilder/blob/master/pkg/plugins/golang/deploy-image/v1alpha1/api.go#L221-L247\r\n\r\nNote that this code is reponsable for we track: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-with-deploy-image/PROJECT#L8-L25', 'comment_created': datetime.datetime(2023, 8, 8, 7, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1290794504, 'comment_body': ""Yes it's just for debug purpose, would delete it.\r\n\r\nSorry I should leave a comment to avoid confusion :)"", 'comment_created': datetime.datetime(2023, 8, 11, 0, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Eileen-Yu', 'type': 'User'}, {'comment_id': 1294583156, 'comment_body': 'Could you please remove the line that is commented?', 'comment_created': datetime.datetime(2023, 8, 15, 13, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1294583431, 'comment_body': 'same here', 'comment_created': datetime.datetime(2023, 8, 15, 13, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1294585456, 'comment_body': 'I think we might need here the @everettraven thoughts.\r\nHowever, why we are adding this file?\r\nIs not it implemented in kubebuilder itself?\r\nCould we not import kubebuilder as lib?', 'comment_created': datetime.datetime(2023, 8, 15, 13, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1294613740, 'comment_body': ""I believe these types _are_ already implemented in Kubebuilder as a library under `pkg/plugin/external`. I'm _assuming_ the reasoning behind needing to copy them over was that @Eileen-Yu was unable to use the changes made in the library without there being a commit to update the go.mod to point to. That being said, I _think_ we should be able to use the go.mod `replace` directive to point to the local version of Kubebuilder with something like:\r\n```\r\nreplace (\r\n    sigs.k8s.io/kubebuilder/v3 => {relative path to project root}\r\n)\r\n```\r\n\r\nA `replace` directive like that would allow the project to use the changes made directly in the project without having to do stuff like this where we are copying code over."", 'comment_created': datetime.datetime(2023, 8, 15, 13, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1294617536, 'comment_body': ""I'm curious, why a string type? Do we have any other types we can use here to make it more explicit what the allowed content is?"", 'comment_created': datetime.datetime(2023, 8, 15, 13, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1294959564, 'comment_body': ""I'm not quite familiar with replace. But to my understanding, it seems challenging:\r\n\r\n1. `replace` seems a solution for local dev env. \r\n2. If this PR contains the lines of `replace`, will it be good to be merged?\r\n\r\n---\r\n\r\nI wonder if we can have the `type.go` uploaded in this PR as a temporary solution? And later dropped it when we release a new version of KB with the ep type updated."", 'comment_created': datetime.datetime(2023, 8, 15, 18, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Eileen-Yu', 'type': 'User'}, {'comment_id': 1294969644, 'comment_body': ""@camilamacedo86 Fix me if I'm missing something or understanding wrong:\r\n\r\n1. I'm wondering if  a literal string of the config content can help make it more general when parsing the data structure from different programs.\r\n\r\n2. I'm also wondering how we'd like to define a data structure for config? \r\n    Shall we directly import the definition from [v3/config](https://github.com/kubernetes-sigs/kubebuilder/blob/v3.11.1/pkg/config/v3/config.go#L55C1-L75C1)? \r\n    One question here is what exactly content/message a general external plugin will use from the config? \r\n    How much do we allow the external plugin to modify the config?"", 'comment_created': datetime.datetime(2023, 8, 15, 18, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Eileen-Yu', 'type': 'User'}, {'comment_id': 1294978447, 'comment_body': ""The biggest concern I have with a string literal of JSON is how do we perform validation on it? How do we ensure that the plugin isn't attempting to use configuration fields that don't exist or they have typos?"", 'comment_created': datetime.datetime(2023, 8, 15, 18, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1294983125, 'comment_body': '>replace seems a solution for local dev env.\r\n\r\nI would say that this is true for this particular use case but there are other uses that are valid for it being pinning versions, using forks, etc. That being said, I don\'t think it is ""wrong"" to use the replace directive in the ""local dev env"" context here specifically because this is a sample that will likely never exist outside of this repository. If it makes it easier to make changes to this sample to have this replace directive then it is worth it IMO.\r\n\r\n>If this PR contains the lines of replace, will it be good to be merged?\r\n\r\nI haven\'t done a full review of this PR so I can\'t say it will be good to be merged but I think it would definitely be closer in my book. I\'m not really a fan of doing the copying unless we _have_ to', 'comment_created': datetime.datetime(2023, 8, 15, 18, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1300712394, 'comment_body': ""I'm wondering if we can have a number of clear criteria to help move on? More specifically, I'm curious if we can answer the following questions before implementation:\r\n\r\n- What exactly data structure do we want to transfer for config? (Does it have to be a go struct? If yes, then what is the relationship between such with private `cfg` in config v2/v3?)\r\n- Is it necessary to define new methods for `Config` interface so as to help generate the data that might be transferred with the ep?\r\n- How does it affect PluginRequest and PluginResponse?\r\n- What are the boundaries for an ep to touch with config? (Is the config read-only? OR what exactly fields an ep can and cannot touch with?)\r\n- Is it necessary to ALWAYS pass the config to an EP? (Do we need to introduce a mechanism to make it optional?)"", 'comment_created': datetime.datetime(2023, 8, 21, 22, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Kavinjsir', 'type': 'User'}, {'comment_id': 1479342909, 'comment_body': '@Eileen-Yu \r\n\r\nHere, I think, should be config.Config', 'comment_created': datetime.datetime(2024, 2, 6, 7, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1487395021, 'comment_body': '@Eileen-Yu should you not get the Config from the Project file here?\r\nIt will want the config empty when we want the config that exists already, right?\r\nI am betting that is the reason you see config 0 instead of the data populated.\r\n\r\nWe need to do something like: \r\n\r\n```\r\n        if err := config.LoadFrom(fmt.Sprintf(""%s/%s"", opts.InputDir, yaml.DefaultPath)); err != nil {\r\n                log.Fatalf(""Failed to load PROJECT file %v"", err)\r\n```\r\n\r\nAs we do to re-scaffold: https://github.com/kubernetes-sigs/kubebuilder/blob/66c3572c9b4b6b918c129eaa5b27abe842c54c2a/pkg/rescaffold/migrate.go#L45-L46\r\n\r\nOR something like we do here: https://github.com/kubernetes-sigs/kubebuilder/blob/66c3572c9b4b6b918c129eaa5b27abe842c54c2a/pkg/cli/cli.go#L206-L215\r\n\r\n', 'comment_created': datetime.datetime(2024, 2, 13, 8, 29, 2, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1489192041, 'comment_body': '@Eileen-Yu here we need to sort out the lint issue\r\nWe need to check the error ', 'comment_created': datetime.datetime(2024, 2, 14, 9, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1490994978, 'comment_body': 'We should not create the file\r\nWe should fail in this case. \r\nThe CLI is who has the responsibility to create it. \r\nthe external plugin just read and update.', 'comment_created': datetime.datetime(2024, 2, 15, 13, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}]","[{'commit_sha': '65ae4a3563d9a83d0a4203b95b8e902636e19f49', 'committer_username': 'Eileen-Yu', 'committer_name': 'Eileen Yu', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 26, 8, 43, 8, tzinfo=datetime.timezone.utc)}]",Eileen Yu,48944635,,User,,23,,18,25
1423698049, 📖 Add tutorial for external plugin,"## Description:
Add docs for the external plugin tutorial.

## Motivation:
1. Guide users to write, install, and use their own external plugins.
2. Part of the efforts of https://github.com/kubernetes-sigs/kubebuilder/discussions/3309
3. Record my experiment & tips along with my practice over the external plugin with JavaScript:
https://github.com/Eileen-Yu/kb-js-plugin

<!--

Hiya!  Welcome to Kubebuilder!  For a smooth PR process, please ensure
that you include the following information:

* a description of the change
* the motivation for the change
* what issue it fixes, if any, in GitHub syntax (e.g. Fixes #XYZ)

Both the description and motivation may reference other issues and PRs,
but should be mostly understandable without following the links (e.g. when
reading the git commit log).

Please don't @-mention people in PR or commit messages (do so in an
additional comment).

please add an icon to the title of this PR depending on the type:

- ⚠ (:warning:): breaking
- ✨ (:sparkles:): new non-breaking feature
- 🐛 (:bug:): bugfix
- 📖 (:book:): documentation
- 🌱 (:seedling:): infrastructure/other

See https://sigs.k8s.io/kubebuilder-release-tools for more information.

**PLEASE REMOVE THIS COMMENT BLOCK BEFORE SUBMITTING THE PR** (the bits
between the arrows)

-->
",True,3488,https://api.github.com/repos/kubernetes-sigs/kubebuilder/pulls/3488,https://github.com/kubernetes-sigs/kubebuilder/pull/3488,closed,157,0,2,1,7,35,4,2,"[{'name': 'cncf-cla: yes'}, {'name': 'size/L'}, {'name': 'lgtm'}, {'name': 'approved'}]",2023-07-06 23:21:04+00:00,2023-08-03 12:44:21+00:00,2380997.0,"27 days, 13:23:17","[{'comment_id': 1255770717, 'comment_body': '```suggestion\r\n- kubebuilder CLI > 3.11.0 \r\n- External plugin binary \r\n- The path of the plugin configured via the ENV VAR X\r\n```\r\n\r\nWDYT about something more like ^ ?', 'comment_created': datetime.datetime(2023, 7, 7, 12, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1255771183, 'comment_body': 'it is missing edit', 'comment_created': datetime.datetime(2023, 7, 7, 12, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1255773814, 'comment_body': 'Could we add here the info more like instructions , example:\r\n\r\nHow to configure\r\n\r\nAdd the path of your external plugins via the env var , i.e.:\r\n\r\nThen provide an example\r\n\r\nNow, you can use it by calling the commands , i.e.:\r\n\r\n', 'comment_created': datetime.datetime(2023, 7, 7, 12, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1255776588, 'comment_body': 'what do you mean with path1/path2? \r\nWould not that be: \r\n\r\n`export EXTERNAL_PLUGINS_PATH=<path where I have all external plugins binaries>`\r\n\r\nThen, now I can run kubebuilder init --plugins=myexternalplugin/v1 (with the name of the plugin )?\r\n', 'comment_created': datetime.datetime(2023, 7, 7, 12, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'camilamacedo86', 'type': 'User'}, {'comment_id': 1255785070, 'comment_body': '```suggestion\r\n`PluginRequest` holds all the information Kubebuilder receives from the CLI and the plugins that were executed before it in the plugin chain.\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 12, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rashmigottipati', 'type': 'User'}, {'comment_id': 1255785649, 'comment_body': '```suggestion\r\nThe marshaled `PluginRequest` (which is a `JSON` object) would be sent over `stdin` to the external plugin by Kubebuilder.\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 12, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rashmigottipati', 'type': 'User'}, {'comment_id': 1255788029, 'comment_body': '```suggestion\r\n- Your plugin is placed in a path following a `group-like name and version` scheme:\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 12, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rashmigottipati', 'type': 'User'}, {'comment_id': 1255790160, 'comment_body': 'Should we still use the terminology as ""internal plugins"" since all plugins will be implemented as external plugins? ', 'comment_created': datetime.datetime(2023, 7, 7, 13, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rashmigottipati', 'type': 'User'}, {'comment_id': 1255791023, 'comment_body': 'Could you elaborate a bit more on what you mean by same kubebuilder plugin features? It might be nice to include those here.', 'comment_created': datetime.datetime(2023, 7, 7, 13, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rashmigottipati', 'type': 'User'}, {'comment_id': 1255796653, 'comment_body': ""I like @camilamacedo86's suggestion.\r\n> WDYT about something more like ^ ?\r\n\r\n```suggestion\r\n- kubebuilder CLI > 3.11.0\r\n- Your own external plugin executable written in a language of your choice \r\n- Path of the external plugin configured via the ENV VAR (specify the environment variable here) or it can be placed in a path following a `group-like name and version` scheme:\r\n\r\n```"", 'comment_created': datetime.datetime(2023, 7, 7, 13, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rashmigottipati', 'type': 'User'}, {'comment_id': 1255803936, 'comment_body': '```suggestion\r\n $HOME/.config/kubebuilder/plugins/${name}/${version} for Linux\r\n ~/Library/Application Support/kubebuilder/plugins/${name}/${version} for OSX\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 13, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rashmigottipati', 'type': 'User'}, {'comment_id': 1255811374, 'comment_body': 'Instead of `/path1/path2` can we specify something else as it may cause confusion. For example:\r\n```suggestion\r\nEXTERNAL_PLUGINS_PATH=<home-dir>/sampleplugin/v1/sampleplugin kubebuilder create api --plugins sampleplugin/v1 --number 2\r\n```\r\n\r\nThis comment applies to all other places where `/path1/path2` is mentioned.', 'comment_created': datetime.datetime(2023, 7, 7, 13, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rashmigottipati', 'type': 'User'}, {'comment_id': 1258727063, 'comment_body': ""Nit: I would reword this a bit to be more along the lines of:\r\n```suggestion\r\nKubebuilder's functionality can be extended through the use of external plugins.\r\n```"", 'comment_created': datetime.datetime(2023, 7, 10, 19, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1258738572, 'comment_body': '+1 to more elaboration. I would also recommend a bit of a rephrase here to be something more along the lines of:\r\n```suggestion\r\nAn external plugin is an executable that implements an execution pattern that Kubebuilder knows how to interact with. Since an external plugin is an executable it can be implemented in any language. \r\n```', 'comment_created': datetime.datetime(2023, 7, 10, 19, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1258792522, 'comment_body': '+1 on avoiding ""internal plugins"" as terminology here. I would probably say something more along the lines of ""Kubebuilder\'s default scaffolding""', 'comment_created': datetime.datetime(2023, 7, 10, 19, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1258795987, 'comment_body': '```suggestion\r\n- If you are looking for implementing plugins in a language other than `Go`.\r\n```', 'comment_created': datetime.datetime(2023, 7, 10, 19, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1258802690, 'comment_body': 'It might be nice to include an example of the JSON for both of these. It might be difficult for someone reading the docs to visualize the JSON based on Go type definitions.', 'comment_created': datetime.datetime(2023, 7, 10, 19, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1258808482, 'comment_body': 'We should also add the optional subcommands for the plugin that provides metadata to Kubebuilder', 'comment_created': datetime.datetime(2023, 7, 10, 19, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1264242238, 'comment_body': ""Thanks for catching! \r\nAnd based on @rashmigottipati 's suggestion, hope using `export EXTERNAL_PLUGINS_PATH=<custom-path>` could be more clear 🤔\r\n\r\n"", 'comment_created': datetime.datetime(2023, 7, 14, 23, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Eileen-Yu', 'type': 'User'}, {'comment_id': 1272274053, 'comment_body': 'Nit: Some suggestions for wording improvement:\r\n\r\n```suggestion\r\nThe Kubebuilder CLI loads the external plugin in the specified path and interacts with it through `stdin` & `stdout`.\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 13, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1272283406, 'comment_body': 'Nit: ""interfaces"" suggests a looser construct in programming (""interfaces"" can be anything behind the scenes as long as they implement certain functionality). I would recommend using ""types"" as it is more strict and aligns with what the external plugin communication process in Kubebuilder expects. The response must be exactly the `PluginResponse` type and shouldn\'t have any additional fields', 'comment_created': datetime.datetime(2023, 7, 24, 13, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1272288399, 'comment_body': ""I'm not sure this should be a prerequisite - I'm interpreting this as I _have_ to write my own external plugin rather than being able to use any external plugin"", 'comment_created': datetime.datetime(2023, 7, 24, 13, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1272291380, 'comment_body': ""nit:\r\n```suggestion\r\nIf a plugin does not implement the `flags` subcommand, Kubebuilder will pass all flags to the plugin, making it the external plugin's responsibility to handle any invalid flags. \r\n```"", 'comment_created': datetime.datetime(2023, 7, 24, 13, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1272292214, 'comment_body': 'Nit:\r\n```suggestion\r\nThe `flags` subcommand in an external plugin allows for early error detection by informing Kubebuilder about the flags the plugin supports. If an unsupported flag is identified, Kubebuilder can issue an error before the plugin is called to execute. \r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 13, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1272293547, 'comment_body': 'nit:\r\n```suggestion\r\nIf a plugin does implement the `flags` subcommand, it **MUST** support `--init`, `--api`, `--webhook`, and `--edit` flags, which correspond to respective Kubebuilder subcommands.\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 13, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1272823366, 'comment_body': 'Good idea!\r\nI added sample JSONs for both request & response together with explainations.\r\nAlso, the Go definitions are now referred in the link instead of directly pasting them in the docs.\r\n\r\nHope this can make it clearer..', 'comment_created': datetime.datetime(2023, 7, 24, 22, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Eileen-Yu', 'type': 'User'}, {'comment_id': 1272824970, 'comment_body': 'Thank you for the nice explanation! 👍\r\nI tried to reorganized this paragraph in the latest commit.', 'comment_created': datetime.datetime(2023, 7, 24, 22, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Eileen-Yu', 'type': 'User'}, {'comment_id': 1272828178, 'comment_body': 'Oh I see!\r\nSo by this line I tried to say the external plugin needs to be an executable..\r\nI updated this part with some explanations.\r\n', 'comment_created': datetime.datetime(2023, 7, 24, 22, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Eileen-Yu', 'type': 'User'}, {'comment_id': 1272834853, 'comment_body': '```suggestion\r\nBelow is a sample JSON object of the `PluginRequest` type, triggered by ""kubebuilder init --plugins sampleexternalplugin/v1 --domain my.domain"":\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 22, 54, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Kavinjsir', 'type': 'User'}, {'comment_id': 1272835160, 'comment_body': '```suggestion\r\nAn external plugin is an executable (can be written in any language) that implements an execution pattern that Kubebuilder knows how to interact with.\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 22, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Kavinjsir', 'type': 'User'}, {'comment_id': 1273562406, 'comment_body': '```suggestion\r\n    \t ""examples"": ""kubebuilder init --plugins sampleexternalplugin/v1 --domain my.domain""\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 13, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1274012462, 'comment_body': 'Thanks for the nice suggestions👍\r\nJust applied!', 'comment_created': datetime.datetime(2023, 7, 25, 19, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Eileen-Yu', 'type': 'User'}, {'comment_id': 1274107153, 'comment_body': 'nit:\r\n```suggestion\r\nBelow is a sample JSON object of the `PluginRequest` type, triggered by `kubebuilder init --plugins sampleexternalplugin/v1 --domain my.domain`:\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 20, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1274111816, 'comment_body': ""Nit: Now that I am thinking about it a bit more I don't think these flags are _required_ to be implemented as the external plugin would return an error about an unknown flag that Kubebuilder would ignore. That being said, we may want to consider the pros and cons of enforcing or not enforcing this behavior. \r\n\r\n@Eileen-Yu I'll leave it up to you if you want to change the wording to reflect that these flags aren't _required_ . IMO though this nit shouldn't block this PR from merging."", 'comment_created': datetime.datetime(2023, 7, 25, 20, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'everettraven', 'type': 'User'}, {'comment_id': 1274190954, 'comment_body': ""I can understand that flag for `--init` … is more like a ‘bonus’ instead of ‘must’. For me, actually I’m still curious about the detailed scenario to support that so as to reach “fast fail”.\r\n\r\nSo I guess maybe we can drop that paragraph includes the 'must' literal.\r\nI was imagining if it is fair enough to stay focus on the general usage(`init`, `create` and `edit`) of the external plugin."", 'comment_created': datetime.datetime(2023, 7, 25, 22, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Eileen-Yu', 'type': 'User'}]","[{'commit_sha': 'd5ccc155589f8de5a7fccec0c31e64a0daadd8cd', 'committer_username': 'Eileen-Yu', 'committer_name': 'Eileen Yu', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 26, 8, 43, 8, tzinfo=datetime.timezone.utc)}]",Eileen Yu,48944635,,User,,23,,18,25

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
125275487,kubebuilder,kubernetes-sigs/kubebuilder,Go,1424,7679,93,402,3757,52,34,8,"[{'id': 1699167187, 'number': 3757, 'closed': datetime.datetime(2024, 1, 29, 12, 4, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 29, 4, 13, 59, tzinfo=datetime.timezone.utc), 'time_taken': 28223.0, 'time_delta': '7:50:23', 'additions': 16, 'deletions': 2, 'state': 'closed'}, {'id': 1491077162, 'number': 3572, 'closed': datetime.datetime(2023, 8, 28, 9, 13, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 27, 21, 23, 4, tzinfo=datetime.timezone.utc), 'time_taken': 42639.0, 'time_delta': '11:50:39', 'additions': 24, 'deletions': 3, 'state': 'closed'}, {'id': 1488590319, 'number': 3554, 'closed': datetime.datetime(2023, 8, 25, 17, 28, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 24, 19, 37, 2, tzinfo=datetime.timezone.utc), 'time_taken': 78711.0, 'time_delta': '21:51:51', 'additions': 44, 'deletions': 44, 'state': 'closed'}, {'id': 1466025175, 'number': 3526, 'closed': None, 'created': datetime.datetime(2023, 8, 7, 23, 20, 52, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 172, 'deletions': 21, 'state': 'open'}, {'id': 1461974226, 'number': 3519, 'closed': datetime.datetime(2023, 8, 10, 18, 1, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 3, 19, 48, 47, tzinfo=datetime.timezone.utc), 'time_taken': 598360.0, 'time_delta': '6 days, 22:12:40', 'additions': 9, 'deletions': 1, 'state': 'closed'}, {'id': 1423698049, 'number': 3488, 'closed': datetime.datetime(2023, 8, 3, 12, 44, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 6, 23, 21, 4, tzinfo=datetime.timezone.utc), 'time_taken': 2380997.0, 'time_delta': '27 days, 13:23:17', 'additions': 157, 'deletions': 0, 'state': 'closed'}, {'id': 1374879206, 'number': 3437, 'closed': datetime.datetime(2023, 6, 20, 4, 24, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 1, 22, 42, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1575706.0, 'time_delta': '18 days, 5:41:46', 'additions': 200, 'deletions': 27, 'state': 'closed'}, {'id': 1356368477, 'number': 3419, 'closed': datetime.datetime(2023, 5, 31, 15, 27, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 18, 22, 56, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1096303.0, 'time_delta': '12 days, 16:31:43', 'additions': 178, 'deletions': 0, 'state': 'closed'}, {'id': 1351480872, 'number': 3412, 'closed': datetime.datetime(2023, 5, 16, 6, 47, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 15, 21, 27, 23, tzinfo=datetime.timezone.utc), 'time_taken': 33613.0, 'time_delta': '9:20:13', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 1244608812, 'number': 3231, 'closed': datetime.datetime(2023, 5, 4, 8, 0, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 17, 3, 58, 45, tzinfo=datetime.timezone.utc), 'time_taken': 6580917.0, 'time_delta': '76 days, 4:01:57', 'additions': 2142, 'deletions': 7, 'state': 'closed'}, {'id': 1237187789, 'number': 3216, 'closed': datetime.datetime(2023, 9, 11, 13, 58, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 10, 19, 54, 13, tzinfo=datetime.timezone.utc), 'time_taken': 18381842.0, 'time_delta': '212 days, 18:04:02', 'additions': 125, 'deletions': 1, 'state': 'closed'}, {'id': 1235582128, 'number': 3213, 'closed': datetime.datetime(2023, 2, 10, 6, 55, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 9, 18, 52, 57, tzinfo=datetime.timezone.utc), 'time_taken': 43333.0, 'time_delta': '12:02:13', 'additions': 389, 'deletions': 351, 'state': 'closed'}, {'id': 1228622889, 'number': 3199, 'closed': datetime.datetime(2023, 2, 4, 7, 27, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 3, 20, 15, 59, tzinfo=datetime.timezone.utc), 'time_taken': 40275.0, 'time_delta': '11:11:15', 'additions': 15, 'deletions': 15, 'state': 'closed'}, {'id': 1222523900, 'number': 3191, 'closed': datetime.datetime(2023, 2, 4, 6, 32, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 31, 0, 50, 10, tzinfo=datetime.timezone.utc), 'time_taken': 366140.0, 'time_delta': '4 days, 5:42:20', 'additions': 270, 'deletions': 70, 'state': 'closed'}, {'id': 1216134883, 'number': 3181, 'closed': datetime.datetime(2023, 1, 26, 10, 2, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 25, 7, 4, 9, tzinfo=datetime.timezone.utc), 'time_taken': 97111.0, 'time_delta': '1 day, 2:58:31', 'additions': 129, 'deletions': 307, 'state': 'closed'}, {'id': 1052354443, 'number': 2925, 'closed': datetime.datetime(2022, 9, 12, 7, 9, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 11, 0, 11, 17, tzinfo=datetime.timezone.utc), 'time_taken': 111488.0, 'time_delta': '1 day, 6:58:08', 'additions': 6, 'deletions': 223, 'state': 'closed'}, {'id': 1052350505, 'number': 2924, 'closed': datetime.datetime(2022, 9, 11, 0, 19, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 10, 23, 44, 15, tzinfo=datetime.timezone.utc), 'time_taken': 2109.0, 'time_delta': '0:35:09', 'additions': 20, 'deletions': 17, 'state': 'closed'}]"
