pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1416103890,Ember wsclient,"- https://github.com/http4s/http4s/pull/7261
---

This is my current draft PR. I will later create the `WSConnection` for the `WSClient`",True,7196,https://api.github.com/repos/http4s/http4s/pulls/7196,https://github.com/http4s/http4s/pull/7196,closed,690,86,8,50,1,25,3,0,"[{'name': 'module:ember-client'}, {'name': 'module:ember-server'}, {'name': 'module:ember-core'}]",2023-07-01 13:44:28+00:00,2023-08-25 15:53:53+00:00,4759765.0,"55 days, 2:09:25","[{'comment_id': 1249605357, 'comment_body': ""Maybe `IllegalStateException` or `UnsupportedOperationException`? It'd be nice if we didn't need to throw at all though.\r\n\r\nI'm guessing that this is thrown if the JDK doesn't include the unix socket support or we don't have fs2 netty or something? Maybe we can have a reference to how to fix that in the exception."", 'comment_created': datetime.datetime(2023, 7, 2, 16, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'yilinwei', 'type': 'User'}, {'comment_id': 1249613351, 'comment_body': ""Maybe we can use `FrameTranscoder.getMsgLength` to peek at the frame rather than this try catch approach?\r\n\r\nIt will mean that we don't have to throw exceptions as part of the normal control flow, which is a little expensive."", 'comment_created': datetime.datetime(2023, 7, 2, 16, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'yilinwei', 'type': 'User'}, {'comment_id': 1249674636, 'comment_body': ""I wonder if it's worth breaking up the flow into two separate flows, since I think that the single frame case is possibly common enough to optimize; I'd need to check the runtime profile of some of the websocket apps that we're using though."", 'comment_created': datetime.datetime(2023, 7, 2, 18, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'yilinwei', 'type': 'User'}, {'comment_id': 1249684713, 'comment_body': 'Ah, I think this code is copy-pasted from elsewhere.\r\n\r\nIn any case, currently this exception is thrown only on Scala Native, and that will be solved very soon.', 'comment_created': datetime.datetime(2023, 7, 2, 18, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'armanbilge', 'type': 'User'}, {'comment_id': 1250500467, 'comment_body': 'IMHO once an option `fold` takes more than two lines, a `match` may come simpler: \r\n```suggestion\r\n      tlsContextOptWithDefault <- tlsContextOpt match {\r\n        case None => Network[F].tlsContext.systemResource.attempt.map(_.toOption)\r\n        case Some(tlsContext) => Resource.pure(Some(tlsContext))\r\n      }\r\n```', 'comment_created': datetime.datetime(2023, 7, 3, 8, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'diesalbla', 'type': 'User'}, {'comment_id': 1250509003, 'comment_body': 'I thought there was a `Stream` factory method for this kind of loop, `F[Option[Chunk[A]]] => Stream[F, A]`, but there is not. ', 'comment_created': datetime.datetime(2023, 7, 3, 8, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'diesalbla', 'type': 'User'}, {'comment_id': 1250512082, 'comment_body': 'Perhaps add an `import org.http4s.client.websocket.WSFrame` at top? ', 'comment_created': datetime.datetime(2023, 7, 3, 8, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'diesalbla', 'type': 'User'}, {'comment_id': 1250516026, 'comment_body': '```suggestion\r\n    val req = s""ws://${server.address.getHostName}:${server.address.getPort}/ws-echo""\r\n    for {\r\n      _ <- emberClient\r\n        .use { client =>\r\n          client\r\n            .run(wsRequest(req))\r\n```', 'comment_created': datetime.datetime(2023, 7, 3, 8, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'diesalbla', 'type': 'User'}, {'comment_id': 1250523281, 'comment_body': 'If the body of a `map`, or `flatMap`, or other higher-order-function, has the form of a pattern-matching, it is possible to omit the variable and just write the cases.\r\n\r\n```suggestion\r\n        Resource.eval(validateServerHandshake(res, exampleSecWebSocketKey)).map { \r\n          case Left(_) => None\r\n```', 'comment_created': datetime.datetime(2023, 7, 3, 9, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'diesalbla', 'type': 'User'}, {'comment_id': 1250526180, 'comment_body': 'Likewise, if we have a pattern-match as the body of a case, we can flatten the pattern-matches by nesting the cases: \r\n\r\n```suggestion\r\n          ) { \r\n            case ((response, drain), Resource.ExitCase.Succeeded) =>\r\n```', 'comment_created': datetime.datetime(2023, 7, 3, 9, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'diesalbla', 'type': 'User'}, {'comment_id': 1250884920, 'comment_body': 'Thanks for all the suggestions!', 'comment_created': datetime.datetime(2023, 7, 3, 13, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'danghieutrung', 'type': 'User'}, {'comment_id': 1252011702, 'comment_body': 'You should move this one into the `for` and run it with `.background`.', 'comment_created': datetime.datetime(2023, 7, 4, 13, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'armanbilge', 'type': 'User'}, {'comment_id': 1252012914, 'comment_body': 'Same with this one, I think you might need to do `foreverM.background` so that it loops forever.', 'comment_created': datetime.datetime(2023, 7, 4, 13, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'armanbilge', 'type': 'User'}, {'comment_id': 1252505075, 'comment_body': 'The type could be simplified a bit here\r\n```suggestion\r\n  def getSocket[F[_]](client: Client[F], request: Request[F])(implicit\r\n      F: MonadCancel[F, Throwable]\r\n  ): Resource[F, Option[Socket[F]]] = {\r\n    val webSocketKey = createWebSocketKey[F]\r\n    client\r\n      .run(request)\r\n      .flatMap { res =>\r\n        Resource\r\n          .eval(validateServerHandshake(res, exampleSecWebSocketKey))\r\n          .map(isValid => isValid.toOption *> res.attributes.lookup(webSocketKey))\r\n      }\r\n  }\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 3, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kiendang', 'type': 'User'}, {'comment_id': 1252508480, 'comment_body': '```suggestion\r\n          socketOption <- getSocket(emberClient, httpWSRequest)\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 3, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kiendang', 'type': 'User'}, {'comment_id': 1258388148, 'comment_body': '- The inner `Resource.eval(ioa).map(a2b)` should be equivalent to a `Resource.eval(ioa.map(a2b))`\r\n- The outer `Resource.flatMap(res => Resource.eval(resToB))` should be equivalent to a `Resource.evalMap`. \r\n- Also, that `isValid.toOption *>` is easier as an if-then-else or an `ifF`.\r\n', 'comment_created': datetime.datetime(2023, 7, 10, 14, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'diesalbla', 'type': 'User'}, {'comment_id': 1261174795, 'comment_body': 'Thanks will edit this part of code!', 'comment_created': datetime.datetime(2023, 7, 12, 13, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'danghieutrung', 'type': 'User'}, {'comment_id': 1270800749, 'comment_body': '```suggestion\r\n          .foreach(clientReceiveQueue.offer(_))\r\n```', 'comment_created': datetime.datetime(2023, 7, 21, 15, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'diesalbla', 'type': 'User'}, {'comment_id': 1270805855, 'comment_body': '- It could be good practice to extract the exception as a `val MissingSecWebsocketKey` private to the object.\r\n- Having a `liftTo` (which defaults to error) followed by a `flatMap` can be a bit too implicit. Since that is at an `Option`, perhaps the following suggestion would help? \r\n\r\n```suggestion\r\n        request.headers.get[`Sec-WebSocket-Key`] match {\r\n          case Some(swsv) => \r\n            validateServerHandshake(res, swsv.hashString)\r\n              .map(if (_) res.attributes.lookup(webSocketKey) else None)\r\n          case None => MissingSecWebsocketKey.raiseError[F]\r\n        }\r\n```', 'comment_created': datetime.datetime(2023, 7, 21, 15, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'diesalbla', 'type': 'User'}, {'comment_id': 1271165450, 'comment_body': '`Steam.eval(read).repeat.unNoneTerminate.unchunks`?', 'comment_created': datetime.datetime(2023, 7, 21, 23, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'yilinwei', 'type': 'User'}, {'comment_id': 1271416562, 'comment_body': ""Thanks i'll try this"", 'comment_created': datetime.datetime(2023, 7, 23, 9, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'danghieutrung', 'type': 'User'}, {'comment_id': 1272651608, 'comment_body': ""I think there's a bug here: the `Uri` for `wsRequest` will be either `ws://` or `wss://` but this is not correct for a HTTP request. So we should rewrite that to `http://` or `https://` before making the request."", 'comment_created': datetime.datetime(2023, 7, 24, 19, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'armanbilge', 'type': 'User'}, {'comment_id': 1288112589, 'comment_body': 'If these are `F` actions, you need to chain them: \r\n```suggestion\r\n              closeFrameDeffered.complete(f) >>\r\n                clientReceiveQueue.offer(f)\r\n```', 'comment_created': datetime.datetime(2023, 8, 9, 8, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'diesalbla', 'type': 'User'}, {'comment_id': 1288114879, 'comment_body': 'It may be worth fusing the `map` and `flatMap` here: \r\n```suggestion\r\n              closeFrameDeffered.tryGet.flatMap { x =>\r\n                if (x.isDefined) F.unit else clientReceiveQueue.offer(f))\r\n              }\r\n```', 'comment_created': datetime.datetime(2023, 8, 9, 8, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'diesalbla', 'type': 'User'}, {'comment_id': 1298547495, 'comment_body': ""Let's change this to an FS2 `Channel` so that it can have graceful closure. Then, we should close the `Channel` after sending a `CloseFrame`.\r\n\r\nFinally, to make sure that all the frames are sent before closing the connection, we should wait for the process to complete naturally.\r\n\r\nSo something like this:\r\n\r\n```scala\r\n        sendingFinished <- clientSendChannel\r\n          .foreach(f => frameToBytes(f, true).traverse_(c => socket.write(c)))\r\n          .compile\r\n          .drain\r\n          .background\r\n       _ <- Resource.onFinalize(sendingFinished.void) // wait for sending to finish\r\n```"", 'comment_created': datetime.datetime(2023, 8, 18, 14, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'armanbilge', 'type': 'User'}]","[{'commit_sha': 'de8fbba2616e6f93bb41034fb5cace2b1b65e219', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1db42b4cfac3cf476771c7758ebfc9fcb721383', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09fb16877d706543d5d405b6ca3d884891e668ea', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '413049d762cc5433a69a5543a0dfc5822b1e229e', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d51d45a678fe22c70dfa963ac2feaf4ab043f48', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8502f7c0559b90f7cece7d8d2b7d9a67ea93733', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1a75368eeca6f5e5482398795495909a87bb256', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c7addfa5a5a8f351dcd4fe337bd5f29dd97053', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd920a15436bc36dbaa79c7b271f50cb881b795b', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c7306cb59ca51c3e4089f2ae35f773ff75b2947', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '223e4497bbc603fa65dd1f811d0cc2357b384d14', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cec189ad058cb0e839a66ca1350d92402660258c', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97b11cb82cb1d979e6610dc7470cf67ac14da43d', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9b6c416ae7122e44fc765f5cc6a52e9eb787e65', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca62628fa761faf9c55267468dc0b34f74c542e7', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5034505a8cfb875e0f0014995ea0f175384a75d0', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95b4dff3d314f8f743a29dc890cef32f77047859', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '323ad4dd382f0377c814708710c0264b78923c73', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84dd6e6c47163a572a1bccd32a919e47cf4f0edb', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ee439c5367ce0fc3d5e3dedf7a57bcfed98772a', 'committer_username': 'armanbilge', 'committer_name': 'Arman Bilge', 'committer_email': 'armanbilge@gmail.com', 'commit_date': datetime.datetime(2012, 12, 25, 5, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5f84d1ae2bf75fe636107e5f6b02d6d03c33aed', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '382364122919be3864e974d2c7159730da5726ab', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35ef412212d5ff45664d4868e814d210ed2659a1', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4918133c99f58768261010b11cf5455ed7b52c43', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d521e35e14fac1f2a1251364b071a35869eb0a9', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7491d994fdf8620c25efbe015bff33e19351e40', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612fbe90b54915bbac893df30c7059f746d88440', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56fb793166103c60e66c690fce5bc430af599837', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7098848c190831de1e1cd70c8cccc7a34a39f8d0', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81f35843697d6180bdc133453d34e2a66b7447e3', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e599d102b8fccac05a4128a15e11ada3576debcc', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5974d61582e5b4ff58bf61bbe06c954e8971bb6', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e7f226a7f17e151e13191eb52e8db508e20f337', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4663af0a375106d8d201196ad81dc1b7ec880d63', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0fd00b533df86707b05403e38c99fe36d86ac9c', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8ecfb9074b0a3c029fde018280c1e1fd8d44186', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a64b7246346140e606178bd867c599fc67ae4c5f', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fb6ad08171396cacd6a15981a3cafb8f4b9df33', 'committer_username': 'armanbilge', 'committer_name': 'Arman Bilge', 'committer_email': 'armanbilge@gmail.com', 'commit_date': datetime.datetime(2012, 12, 25, 5, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c046276dc9a320660327e452b3de1f8868777ab', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c088a3eb7fa701a2defb6092c096b94f79ab85b4', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c12d7a3cfa96784206b7cc5de950cb97cb6e8af', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd468835510fc60c6534c152b216f7c2c55254aab', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83aad300e619b8fc2bb3d1c130008ad8a7c05536', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3770c535280b9a01d139bfbf93279ee58643e95d', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96bde01204972db4105636614c1ac53182b40b61', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a79466f99b690e40fe37bb481417e3333ddd0a0e', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd65f0f20a1a8b67a44faa263622091554a334cca', 'committer_username': 'armanbilge', 'committer_name': 'Arman Bilge', 'committer_email': 'armanbilge@gmail.com', 'commit_date': datetime.datetime(2012, 12, 25, 5, 14, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adb63a0765df6d756de3418f095f4a0298162ca5', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5d7bf9b9fa3cafac067ffc09fa40485427b3263', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '658e0e8a0f7e8ea70ed460e17c49255f5ed24b81', 'committer_username': 'danghieutrung', 'committer_name': 'Dang Hieu', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 21, 8, 30, 29, tzinfo=datetime.timezone.utc)}]",Dang Hieu,96468551,,User,,9,,0,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
3692188,http4s,http4s/http4s,Scala,787,2535,71,470,17599,320,42,83,"[{'id': 1498948737, 'number': 7261, 'closed': None, 'created': datetime.datetime(2023, 9, 1, 14, 20, 26, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1035, 'deletions': 314, 'state': 'open'}, {'id': 1490988577, 'number': 7252, 'closed': datetime.datetime(2023, 8, 28, 13, 36, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 27, 14, 54, 37, tzinfo=datetime.timezone.utc), 'time_taken': 81689.0, 'time_delta': '22:41:29', 'additions': 10, 'deletions': 2, 'state': 'closed'}, {'id': 1490988350, 'number': 7251, 'closed': datetime.datetime(2023, 8, 27, 14, 56, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 27, 14, 53, 50, tzinfo=datetime.timezone.utc), 'time_taken': 136.0, 'time_delta': '0:02:16', 'additions': 813, 'deletions': 88, 'state': 'closed'}, {'id': 1490592937, 'number': 7250, 'closed': datetime.datetime(2023, 8, 27, 4, 38, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 26, 10, 51, 19, tzinfo=datetime.timezone.utc), 'time_taken': 64004.0, 'time_delta': '17:46:44', 'additions': 100, 'deletions': 240, 'state': 'closed'}, {'id': 1416103890, 'number': 7196, 'closed': datetime.datetime(2023, 8, 25, 15, 53, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 13, 44, 28, tzinfo=datetime.timezone.utc), 'time_taken': 4759765.0, 'time_delta': '55 days, 2:09:25', 'additions': 690, 'deletions': 86, 'state': 'closed'}, {'id': 1380442170, 'number': 7138, 'closed': datetime.datetime(2023, 6, 16, 14, 58, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 6, 8, 51, 1, tzinfo=datetime.timezone.utc), 'time_taken': 886038.0, 'time_delta': '10 days, 6:07:18', 'additions': 254, 'deletions': 2, 'state': 'closed'}, {'id': 1290741694, 'number': 7037, 'closed': datetime.datetime(2023, 4, 8, 3, 22, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 27, 5, 5, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1030648.0, 'time_delta': '11 days, 22:17:28', 'additions': 130, 'deletions': 24, 'state': 'closed'}]"
