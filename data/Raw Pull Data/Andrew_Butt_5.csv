pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
423565000,Zynq 7020 support,"Adds support for xc7z020 and some 7020 boards.  Full bitstream uploading for the pynq z1 works, other boards should only need an openocd config.  Relies on an updated database and prjxray submodule from [#1338](https://github.com/SymbiFlow/prjxray/pull/1338)",True,1506,https://api.github.com/repos/f4pga/f4pga-arch-defs/pulls/1506,https://github.com/f4pga/f4pga-arch-defs/pull/1506,closed,553,35,45,16,19,10,1,0,[{'name': 'arch-xc7-zynq7'}],2020-05-27 02:19:48+00:00,2020-06-25 15:45:56+00:00,2553968.0,"29 days, 13:26:08","[{'comment_id': 431050061, 'comment_body': 'I believe there was an error in the original PR I made for the zynq boards addition. There was a change in the tiles used here: https://github.com/SymbiFlow/symbiflow-arch-defs/pull/1484. This basically avoids using SLICEs as tiles, and reintroduces CLBs.\r\n\r\nAll the CLB tiles would require to be in the same format as the other archs:\r\nhttps://github.com/SymbiFlow/symbiflow-arch-defs/blob/5588c2891f4d773cbbeb85843626fd4972bebeee/xc/xc7/archs/zynq7/tiles/clbll_l/CMakeLists.txt#L1-L5', 'comment_created': datetime.datetime(2020, 5, 27, 11, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'acomodi', 'type': 'User'}, {'comment_id': 431050260, 'comment_body': 'Also the CLB tiles should be added', 'comment_created': datetime.datetime(2020, 5, 27, 11, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'acomodi', 'type': 'User'}, {'comment_id': 431051302, 'comment_body': 'I think this comment can be removed', 'comment_created': datetime.datetime(2020, 5, 27, 11, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'acomodi', 'type': 'User'}, {'comment_id': 431167230, 'comment_body': 'The cmake function should be changed as follows (for all CLBs)\r\n\r\n```suggestion\r\nproject_ray_tile_capacity(\r\n```', 'comment_created': datetime.datetime(2020, 5, 27, 14, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'acomodi', 'type': 'User'}, {'comment_id': 431249635, 'comment_body': 'I think that there was another mistake during my rebase of the `zynq-board` branch.\r\n\r\nLIOPADs are not present in the zynq010 device', 'comment_created': datetime.datetime(2020, 5, 27, 15, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'acomodi', 'type': 'User'}, {'comment_id': 431251292, 'comment_body': 'Same goes for this change, which should be reverted as for the LIOPADs', 'comment_created': datetime.datetime(2020, 5, 27, 15, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'acomodi', 'type': 'User'}, {'comment_id': 443692571, 'comment_body': '3 of these 4 boards have no PROG_CMD.  Is there not a supported OpenOCD config for these boards?  @mithro Should we have a place to track missing OpenOCD configuration support?', 'comment_created': datetime.datetime(2020, 6, 22, 16, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 443701526, 'comment_body': ""Not sure if there are openocd configs for the other boards already, but if there are I can't test if they work as I only have a pynq z1."", 'comment_created': datetime.datetime(2020, 6, 22, 16, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 443702863, 'comment_body': 'In general it is probably a good idea to leave off the untested configurations, or comment them out.  Making a small follow on PR with board support once it gets tested on other targets it preferable to checking in untested configurations.\r\n\r\nWe do have some testing via the vendor tool CI, but ideally we have both the ""works on a board"" and a green result from the CI.', 'comment_created': datetime.datetime(2020, 6, 22, 17, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 445117051, 'comment_body': 'You need an explicit BUFG between the clk pin and using it with logic.', 'comment_created': datetime.datetime(2020, 6, 24, 19, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}]","[{'commit_sha': '11a0844a0058d05fb9e3668e1d8330fc1386d9e8', 'committer_username': 'acomodi', 'committer_name': 'Alessandro Comodi', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 5, 12, 9, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '675180e8dfe058c77aeb50d53b3f6489f21e12d7', 'committer_username': 'acomodi', 'committer_name': 'Alessandro Comodi', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 5, 12, 9, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e75160efbb716d3d6f2a47d1939dc672686937b3', 'committer_username': 'acomodi', 'committer_name': 'Alessandro Comodi', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 5, 12, 9, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '185eacdf0d20f5b64c19cff8abfa63023e169ef8', 'committer_username': 'acomodi', 'committer_name': 'Alessandro Comodi', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 5, 12, 9, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feea5f5cb592689859c88c74d9daa9704d7a1c3c', 'committer_username': 'tmichalak', 'committer_name': 'Tomasz Michalak', 'committer_email': 'tmichalak@antmicro.com', 'commit_date': datetime.datetime(2018, 4, 27, 8, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f8670c8d61c0001f4358a4c212aebdfae2349f9', 'committer_username': 'tmichalak', 'committer_name': 'Tomasz Michalak', 'committer_email': 'tmichalak@antmicro.com', 'commit_date': datetime.datetime(2018, 4, 27, 8, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '528ce0678665e378c410e1b566139c197b011240', 'committer_username': 'acomodi', 'committer_name': 'Alessandro Comodi', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 5, 12, 9, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04b8dd9ae74be92e01620f0f0d7f0301a234ca8f', 'committer_username': 'acomodi', 'committer_name': 'Alessandro Comodi', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 5, 12, 9, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '918f78735dffe130b626026e35f90b68a025828e', 'committer_username': 'acomodi', 'committer_name': 'Alessandro Comodi', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 5, 12, 9, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c6d58b057e6bbc109fdeb998f8fc7694b8f3c77', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf92a31017d294cf05a5755f6d630c23f69db83d', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d8b4dbf803f98d2984b9501b39ecb3373f908b8', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97b19686626db9a7eb6f21294e440de20c6b910e', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c0d7798771d6f7e82788f672a737afb9f9627c2', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf775a3fbef80fba9ba32280cb29b3ca10a85ee4', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612ab5a8ee6a128a516f39aafa08a4dbeb9f8df1', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}]",Andrew Butt,16656729,,User,,28,,23,16
440238983,Filter NULL tiles in synth tile map to vpr coord,"Signed-off-by: Andrew Butt <andrewb1999@gmail.com>

Filters NULL tile types when mapping synth tiles to vpr coordinates.  Fixes #1538 ",True,1549,https://api.github.com/repos/f4pga/f4pga-arch-defs/pulls/1549,https://github.com/f4pga/f4pga-arch-defs/pull/1549,closed,9,2,1,4,5,2,2,0,"[{'name': 'lang-python'}, {'name': 'type-utils'}]",2020-06-25 20:23:40+00:00,2020-06-29 23:12:38+00:00,355738.0,"4 days, 2:48:58","[{'comment_id': 445820045, 'comment_body': 'tile_type_pkey is part of the phy_tile table, so you need to join tile_map and phy_tile on tile_map.phy_tile_pkey = phy_tile.pkey, and then you can filter like this with a WHERE clause on ""phy_tile.tile_type_pkey""', 'comment_created': datetime.datetime(2020, 6, 25, 20, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 445849320, 'comment_body': 'For clarity in the WHERE statement, please explicitly mention the table where fields come from.  So ""tile_pkey"" should be ""tile_map.tile_pkey"", etc.', 'comment_created': datetime.datetime(2020, 6, 25, 21, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}]","[{'commit_sha': '91a3ed33753dc806b0f98d9a8c14833596bc0313', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91a141d204de097c9d748c220434692c7d2e2a39', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '203268c14cfc8272fbc7c3095ab8ac7b03e1e371', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f7fa35b345105ace5273438320f7c912d7480dd', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}]",Andrew Butt,16656729,,User,,28,,23,16
442307294,Add support for synth tiles creation from vivado node names only,"Signed-off-by: Andrew Butt <butta@seas.upenn.edu>

Allows easier custom partition region/roi synth tile creation by automatically picking the correct synth tile wire from only a vivado node name.",True,1561,https://api.github.com/repos/f4pga/f4pga-arch-defs/pulls/1561,https://github.com/f4pga/f4pga-arch-defs/pull/1561,closed,138,20,3,2,1,20,3,0,"[{'name': 'lang-python'}, {'name': 'type-utils'}, {'name': 'arch-artix7'}]",2020-06-30 21:31:11+00:00,2020-07-15 14:37:01+00:00,1271150.0,"14 days, 17:05:50","[{'comment_id': 447992200, 'comment_body': 'Need to add documentation on PARTITION_DIR', 'comment_created': datetime.datetime(2020, 6, 30, 21, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 447993489, 'comment_body': 'Given that partition_region and roi in this case do the example same thing, why do we need another argument?', 'comment_created': datetime.datetime(2020, 6, 30, 21, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 447993834, 'comment_body': 'Probably want to remove debug prints, or atleast put them behind a verbose flag?', 'comment_created': datetime.datetime(2020, 6, 30, 21, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 447994007, 'comment_body': 'Again, if the logic between --roi and --partition_region are the same, why do we need a new flag?', 'comment_created': datetime.datetime(2020, 6, 30, 21, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 447994280, 'comment_body': 'Inconsistent space formatting?', 'comment_created': datetime.datetime(2020, 6, 30, 21, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 447995232, 'comment_body': ""Yes I agree it's unnecessary right now.  I'm using it for other related work (like heterogeneous synth tiles).  My thought was to leave it in for now to prevent having to make major changes to cmake when I post a pr for that in a day or two.  But maybe that's not the best idea..."", 'comment_created': datetime.datetime(2020, 6, 30, 21, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 447995764, 'comment_body': ""I'm wondering if the logic here can be unified to use your method, rather than having a giant `if` here?\r\n\r\nFor example, have the wire specified, and have the code go from wire -> node, and pick a suitable location.\r\n\r\nI like having an explicitly type, why not propigate that to the ROI definition files?"", 'comment_created': datetime.datetime(2020, 6, 30, 21, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 447996236, 'comment_body': 'As far as I can tell, your work is a pure superset of the original ROI concept.  I believe we should be treating it like an extension, rather than a side by side piece?', 'comment_created': datetime.datetime(2020, 6, 30, 21, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 447996697, 'comment_body': 'I think this flag is still necessary for the distinction at line 209', 'comment_created': datetime.datetime(2020, 6, 30, 21, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 447997499, 'comment_body': ""We can do that too.  Just was trying to limit how much I touched regular roi stuff, but if you're ok with it I can propagate to normal ROI definitions."", 'comment_created': datetime.datetime(2020, 6, 30, 21, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 447999372, 'comment_body': '> For example, have the wire specified, and have the code go from wire -> node, and pick a suitable location.\r\n\r\nI just looked, and the current ROI format specifies both the wire and the node.  Maybe simply have the logic go ""if wire is not specified, pick a wire, otherwise check if the specified wire is legal based on the selection logic"".  That enables both automatic and fine grained control, if needed.', 'comment_created': datetime.datetime(2020, 6, 30, 21, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 447999643, 'comment_body': ""> Just was trying to limit how much I touched regular roi stuff\r\n\r\nI'd rather update the ROI stuff than maintain two extremely similar code paths."", 'comment_created': datetime.datetime(2020, 6, 30, 21, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 448001388, 'comment_body': 'Ok that sounds good.', 'comment_created': datetime.datetime(2020, 6, 30, 21, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 451700152, 'comment_body': 'I believe we can remove this debug print?', 'comment_created': datetime.datetime(2020, 7, 8, 17, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 454493552, 'comment_body': 'Docstring and some doctests would be good here', 'comment_created': datetime.datetime(2020, 7, 14, 16, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 454493606, 'comment_body': 'Docstring', 'comment_created': datetime.datetime(2020, 7, 14, 16, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 454493659, 'comment_body': 'Docstring', 'comment_created': datetime.datetime(2020, 7, 14, 16, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 454493857, 'comment_body': 'Docstring', 'comment_created': datetime.datetime(2020, 7, 14, 16, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 454600249, 'comment_body': 'I was actually able to just remove this function.  I think the other functions I added would be very challenging to write a doctest for given their reliance on the connection database.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 454604542, 'comment_body': ""> I think the other functions I added would be very challenging to write a doctest for given their reliance on the connection database.\r\n\r\nYep, which is why I didn't mention them"", 'comment_created': datetime.datetime(2020, 7, 14, 19, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}]","[{'commit_sha': 'ce75d5f3f63582d79d01f16c811d126093698449', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7940508d95f84300bbc68422f3f579f55b3f852d', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}]",Andrew Butt,16656729,,User,,28,,23,16
442854700,Heterogeneous synth tiles,"Signed-off-by: Andrew Butt <butta@seas.upenn.edu>

Made to solve #1550 by allowing multiple synth ios to be placed at the same grid location using increased capacity and heterogeneous tiles.",True,1565,https://api.github.com/repos/f4pga/f4pga-arch-defs/pulls/1565,https://github.com/f4pga/f4pga-arch-defs/pull/1565,closed,349,191,10,8,39,37,3,0,"[{'name': 'lang-python'}, {'name': 'type-utils'}, {'name': 'arch-artix7'}]",2020-07-01 17:58:34+00:00,2020-07-24 16:12:35+00:00,1980841.0,"22 days, 22:14:01","[{'comment_id': 448556778, 'comment_body': 'Needs a docstring', 'comment_created': datetime.datetime(2020, 7, 1, 18, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 448557247, 'comment_body': ""This makes doesn't make sense to me?  Shouldn't you be taking in a list of in/out tiles, or tile counts?"", 'comment_created': datetime.datetime(2020, 7, 1, 18, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 448557837, 'comment_body': 'This is probably wrong, because neither port_pin_in nor port_pin_in has indicies.  @acomodi please review too!', 'comment_created': datetime.datetime(2020, 7, 1, 18, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 448558282, 'comment_body': ""There shouldn't need to be two add_synthetic_tiles tile functions?  add_synthetic_tiles(num_input=1) and add_synthetic_tiles(num_output=1) should exactly the same as the current invocations?"", 'comment_created': datetime.datetime(2020, 7, 1, 18, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 448558999, 'comment_body': 'This is very wrong.  The tiletype should be SYN-INPAD or SYN-OUTPAD?', 'comment_created': datetime.datetime(2020, 7, 1, 19, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 448562059, 'comment_body': ""My thought is that it doesn't matter as long as the capacity is higher than the number of synth tiles at the location.  As long as the constraints have the IOs at the correct Z location it should work fine right? Although it is probably more correct to have the capacity match the number of synth IOs that can be placed there."", 'comment_created': datetime.datetime(2020, 7, 1, 19, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 448563757, 'comment_body': 'Kind of, but during routing import you will have subtiles with no connections, which is weird.  Best to avoid that.  The whole point of heterogeneous tiles is to precisely describe situations like this.', 'comment_created': datetime.datetime(2020, 7, 1, 19, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 448567226, 'comment_body': ""You're probably right.  Trying now."", 'comment_created': datetime.datetime(2020, 7, 1, 19, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 448567637, 'comment_body': 'This code will definitely need to understand the z-stacking too.', 'comment_created': datetime.datetime(2020, 7, 1, 19, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 448567746, 'comment_body': 'Ok I can work counting the number of IOs at each tile location and changing the capacity based on that.', 'comment_created': datetime.datetime(2020, 7, 1, 19, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 448568519, 'comment_body': 'More specifically, somewhere in the flow coordinates should be choosen, and propigated to arch_import, routing_import and the IO placement description.', 'comment_created': datetime.datetime(2020, 7, 1, 19, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 448573288, 'comment_body': 'In the graph pin_name_map, the key it expects is of the form SYN-IOPAD[x].inpad[x] which is why I made this change here from SYN-OUTPUT to SYN-IOPAD.  Does this mean the pin_name_map is being produced incorrectly somewhere else?', 'comment_created': datetime.datetime(2020, 7, 1, 19, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 448574576, 'comment_body': 'Ok that makes sense.  Would like to get the heterogeneous tiles working in the single IO per tile case first and then I will work on this.', 'comment_created': datetime.datetime(2020, 7, 1, 19, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 448576272, 'comment_body': ""That actually makes sense, as the routing interface belongs to the tile.  You need to take care to select the right IPIN or OPIN to bind the synth edge too, otherwise things won't line up right."", 'comment_created': datetime.datetime(2020, 7, 1, 19, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 449094164, 'comment_body': 'I believe indices are actually not strictly needed as VPR will handle that if capacity is > 1 for the sub_tile corresponding to this site.\r\n\r\nI think also here the `from` should be in the form of `<sub_tile_name>.<pin_name>` to have a valid direct', 'comment_created': datetime.datetime(2020, 7, 2, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'acomodi', 'type': 'User'}, {'comment_id': 451693665, 'comment_body': 'Should have an error if this falls off the end? Also docstring?', 'comment_created': datetime.datetime(2020, 7, 8, 17, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 451693923, 'comment_body': 'When would `get_synth_tile_from_pad` return None, and it not be an error?', 'comment_created': datetime.datetime(2020, 7, 8, 17, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 451695119, 'comment_body': 'In the case of overlays, where the architecture has both synth IOs and real IOs (so not all pcf_constraint pads would be in the synth_tiles).', 'comment_created': datetime.datetime(2020, 7, 8, 17, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 451696528, 'comment_body': 'Ah, sure.  Please add a comment about that, that is not obvious, but does make sense in retrospect.  Should there be logic to make sure that it isn\'t possible to have an ambiguous match between the synth tile and the ""real"" IO tiles?', 'comment_created': datetime.datetime(2020, 7, 8, 17, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 451702157, 'comment_body': ""I don't think this should have an error based on the discussion below.  Is that correct?"", 'comment_created': datetime.datetime(2020, 7, 8, 17, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 451703489, 'comment_body': 'Agree in principle.  I believe it is worth having an explicit comment that it is okay to return `None`, because ...', 'comment_created': datetime.datetime(2020, 7, 8, 17, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 458921486, 'comment_body': 'Still needs a docstring?  Maybe you forgot to push?', 'comment_created': datetime.datetime(2020, 7, 22, 16, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 458924674, 'comment_body': 'Something that is confusing me now is that pad_map contains an entry for the pad, so why is this if statement needed?  Is the data from pad_map wrong?  Why not just fix that data instead of adding the code here?  Feels inconsistent to me.  Thoughts?', 'comment_created': datetime.datetime(2020, 7, 22, 16, 29, 47, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 458926563, 'comment_body': ""I don't see any CMake change to actually pass `--synth_tiles` to create_ioplace.  Is this code even needed?"", 'comment_created': datetime.datetime(2020, 7, 22, 16, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 458950519, 'comment_body': ""So my thought is that for something like an overlay or an roi that aligns with a complex overlay, the format of the pad map doesn't make a whole lot of sense because the pad map csv maps the synth_tile to some real IO.  I have been using names like SYN0 to represent a synth pad that doesn't directly correspond to a real pad.\r\n\r\nIn an roi region it doesn't matter whether you use information directly from the pad map or from the synth_tiles, which is why it's not currently enabled. But, for overlay generation we would either have to reconsider the pad map csv format to handle synth IOs that don't directly correspond to a real IO and change the pin map csv generation to handle both synth ios and real ios at the same time, or just take the synth tiles as an input to create_ioplace.\r\n\r\nThis method was the easiest to get overlay generation working, but maybe the better solution is to figure out the correct format for the pinmap csv and merge together the synth tile to pinmap csv with the normal pinmap csv script.\r\n\r\nAnother method that could make this more consistent, is completely remove the pinmap csv generation for synth_tiles and only use the args.synth_tiles option in create_ioplace.\r\n\r\nThoughts?"", 'comment_created': datetime.datetime(2020, 7, 22, 17, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 458955517, 'comment_body': ""> But, for overlay generation we would either have to reconsider the pad map csv format to handle synth IOs that don't directly correspond to a real IO and change the pin map csv generation to handle both synth ios and real ios at the same time, or just take the synth tiles as an input to create_ioplace.\r\n\r\nI'd rather have the relevant code to generate the correct pin map csv rather than the current code?  Pinmap CSV is simply a list of pads to VPR tile locations.  In the case where they are purely synthetic, the name is invented, but still has meaning.  Like eventually you'll have `CLK_MHZ` or `BUS_READY` or something, yes?"", 'comment_created': datetime.datetime(2020, 7, 22, 17, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 458956214, 'comment_body': ""Something that is bothering me about this change is that it isn't being tested at all right now, because that code path is unused.  It feels weird to have dead code being added."", 'comment_created': datetime.datetime(2020, 7, 22, 17, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 458958286, 'comment_body': 'Does this need a docstring?  Nothing else in this file has a docstring (including the create_pin_name_from_tile_type_num_and_pin this function is based on).', 'comment_created': datetime.datetime(2020, 7, 22, 17, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 458962158, 'comment_body': '> > But, for overlay generation we would either have to reconsider the pad map csv format to handle synth IOs that don\'t directly correspond to a real IO and change the pin map csv generation to handle both synth ios and real ios at the same time, or just take the synth tiles as an input to create_ioplace.\r\n> \r\n> I\'d rather have the relevant code to generate the correct pin map csv rather than the current code? Pinmap CSV is simply a list of pads to VPR tile locations. In the case where they are purely synthetic, the name is invented, but still has meaning. Like eventually you\'ll have `CLK_MHZ` or `BUS_READY` or something, yes?\r\n\r\nYes.  I guess what I mean by ""the format of the pad map doesn\'t make sense"" is what should go in the iob column for synth tiles that do not correspond to a real IO?\r\n\r\nCurrent pinmap format:\r\n```\r\nname,x,y,z,is_clock,is_input,is_output,iob\r\nA1,114,73,0,1,1,1,IOB_X1Y81\r\n```\r\n\r\n> Something that is bothering me about this change is that it isn\'t being tested at all right now, because that code path is unused. It feels weird to have dead code being added.\r\n\r\nI agree completely now that I\'m thinking about it.  This shouldn\'t be merged as is.  Maybe the correct thing to do it delete the unused code in this pr and include the merged pinmap generation fixes in the overlay generation pr?', 'comment_created': datetime.datetime(2020, 7, 22, 17, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 458962707, 'comment_body': 'I can write a docstring easily, it just seems weird to only have one function in the file with a docstring.', 'comment_created': datetime.datetime(2020, 7, 22, 17, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 458964910, 'comment_body': ""> I agree completely now that I'm thinking about it. This shouldn't be merged as is. Maybe the correct thing to do it delete the unused code in this pr and include the merged pinmap generation fixes in the overlay generation pr?\r\n\r\nThat sounds good to me.  I think a focused PR on dealing with overlay generation issues might be more productive, as the other changes in this PR all otherwise look good and generalize well."", 'comment_created': datetime.datetime(2020, 7, 22, 17, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 458973954, 'comment_body': ""> That sounds good to me. I think a focused PR on dealing with overlay generation issues might be more productive, as the other changes in this PR all otherwise look good and generalize well.\r\n\r\nNow that I'm thinking about it more, this fix is necessary for heterogeneous synth tiles to work.  Currently the pinmap from synth tiles always assigns the z value to 0, so if there are multiple synth tiles at the same location the pinmap will be wrong.  It doesn't get tested currently because there is no test in here that actually uses multiple synth tiles at the same location yet (that plan was to add that with the overlay generation test).\r\n"", 'comment_created': datetime.datetime(2020, 7, 22, 17, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 458976144, 'comment_body': ""Ok, given that, shouldn't we update the CMake to pass the synth tiles JSON?  Or fix the tool to create the pinmap CSV so that it works?"", 'comment_created': datetime.datetime(2020, 7, 22, 17, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 458982093, 'comment_body': ""> Ok, given that, shouldn't we update the CMake to pass the synth tiles JSON? Or fix the tool to create the pinmap CSV so that it works?\r\n\r\nI think I should fix the tool to create the pinmap csv.  If I merge together the synth_tile_to_pinmap_csv and create_pinmap_csv, can I just put some arbitrary name in the iob column for synth_tiles whose pad name isn't in the real io pad list?  Should I add another column to the csv for whether it's an non-real-io-associated synth_tile?  I think the iob is only used for setting io standards, so I just need to not set those for the unassociated synth_tiles."", 'comment_created': datetime.datetime(2020, 7, 22, 18, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 459004661, 'comment_body': ""> can I just put some arbitrary name in the iob column for synth_tiles whose pad name isn't in the real io pad list\r\n\r\nI'd just leave it blank\r\n\r\n> Should I add another column to the csv for whether it's an non-real-io-associated synth_tile\r\n\r\nI think this is prudent"", 'comment_created': datetime.datetime(2020, 7, 22, 18, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 459129858, 'comment_body': 'This code is now dead?', 'comment_created': datetime.datetime(2020, 7, 22, 22, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 459131719, 'comment_body': 'Yes, removing now.', 'comment_created': datetime.datetime(2020, 7, 22, 23, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}]","[{'commit_sha': 'abfdc0efd68cc6bbc0269f72d132f0ddaebd5a88', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1fcc25146316b2a893eb38ea46870991f0e7991', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97aef19804e0762927ee5132959cb7a3fbb14415', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb89983652d9f6003130568d1d8393e78ca8f12d', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca111dacbf58a366defe9205807786c5bd3ef34b', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef5036bc7a01a92328cbfda1afb943369ed591b6', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fbccf254712c343cbd8862b6630e8b8431a1d69', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bf921f394eb5c50d69c66a9d2aba6b5ca8475c2', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}]",Andrew Butt,16656729,,User,,28,,23,16
447678672,Overlay Architecture Generation,"Needs to be rebased on master after #1565 and #1561 are merged.  Also requires a new verison of prjxray with the changes from https://github.com/SymbiFlow/prjxray/pull/1390

Next step will be writing a comprehensive initial test case.  Specifically, I want to generate an overlay and have multiple roi designs that affect the result (remapping or inverting button to LED maps) and be able to merge the fasm.",True,1587,https://api.github.com/repos/f4pga/f4pga-arch-defs/pulls/1587,https://github.com/f4pga/f4pga-arch-defs/pull/1587,closed,1403,280,27,19,99,31,4,0,"[{'name': 'lang-verilog'}, {'name': 'lang-python'}, {'name': 'type-utils'}, {'name': 'arch-artix7'}]",2020-07-10 23:13:31+00:00,2020-08-12 21:32:47+00:00,2845156.0,"32 days, 22:19:16","[{'comment_id': 457489796, 'comment_body': 'Leftover debug prints?', 'comment_created': datetime.datetime(2020, 7, 20, 15, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 457513404, 'comment_body': 'Docstring', 'comment_created': datetime.datetime(2020, 7, 20, 15, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 460156619, 'comment_body': 'This needs to use ""append_file_dependency"" instead of just ""string(APPEND""', 'comment_created': datetime.datetime(2020, 7, 24, 16, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 460157559, 'comment_body': 'Can you explain why you need OUT_LOCAL from the OVERLAY?  Seems unneed?', 'comment_created': datetime.datetime(2020, 7, 24, 16, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 460158011, 'comment_body': ""I don't believe there should be any reason to have either OUT_LOCAL or OUT_LOCAL_REL?  Should probably get using `get_file_location` over using `${OUT_LOCAL}`?"", 'comment_created': datetime.datetime(2020, 7, 24, 16, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 460158619, 'comment_body': 'Use ""add_output_to_fpga_target"" for adding output products.  This will not work as you expect.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 460263432, 'comment_body': 'My thought is to generate the merged bitstream in the directory of the overlay target, so I was getting OUT_LOCAL from OVERLAY to know where to write the bitstream.  Is there a better way to do this?', 'comment_created': datetime.datetime(2020, 7, 24, 20, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 460263810, 'comment_body': 'Supply an argument rather than adding properties?', 'comment_created': datetime.datetime(2020, 7, 24, 20, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 460264024, 'comment_body': ""Also, I don't think it makes any sense to output the merged bitstream in the overlay directory.  Why use that output folder?"", 'comment_created': datetime.datetime(2020, 7, 24, 20, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 460265226, 'comment_body': ""I don't think there's a specific reason to use that output folder, it's just what I knew how to do.  Still pretty new to cmake.  What's the correct way to add a new output folder for the merged fasm and bitstream generation?"", 'comment_created': datetime.datetime(2020, 7, 24, 20, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 460266455, 'comment_body': 'You have a couple options.  The most flexible would be to take an argument for the output path.  When using the function for the add_fpga_target, you could specific old location.  For new joint 1+N bitstreams, you would want to create a folder with the output target name, so something like `${CMAKE_CURRENT_BINARY_DIR}/${NAME}`', 'comment_created': datetime.datetime(2020, 7, 24, 20, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 460283196, 'comment_body': '`ALL_OUT_FASM` is no long the list of files, it the list of dependencies.  `append_file_dependency` is for creating the dependency list, not the file location itself.  `append_file_location` should be used for creating the list of actual file locations, `append_file_dependency` is for building the dependency list\r\n\r\nhttps://github.com/SymbiFlow/symbiflow-arch-defs/blob/master/common/cmake/file_targets.cmake', 'comment_created': datetime.datetime(2020, 7, 24, 20, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 460284113, 'comment_body': 'You need to remove all of these properties', 'comment_created': datetime.datetime(2020, 7, 24, 20, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 460284422, 'comment_body': 'This should be `${OUT_LOCAL_REL}/${TOP}.fasm`, and you should use the FASM property of the target, not `OUT_FASM` when building the dependent file location and deps list', 'comment_created': datetime.datetime(2020, 7, 24, 20, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 463269275, 'comment_body': 'This should be `OUT_LOCAL_REL`', 'comment_created': datetime.datetime(2020, 7, 30, 21, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 463270150, 'comment_body': ""The use of `${OVERLAY}` here is confusing.  `${OVERLAY}` should be something like `OUTPUT_TARGET`.  \r\n\r\nAdditional concern, what happens with the current code if you want to generate two bitstreams with the same overlay, wouldn't this cause a conflict?"", 'comment_created': datetime.datetime(2020, 7, 30, 21, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 463270915, 'comment_body': 'Feel like this should be `${OVERLAY}` should be `${NAME}` here, with the assumption that the target already exists?  Or maybe controlled by an option?', 'comment_created': datetime.datetime(2020, 7, 30, 21, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 463294216, 'comment_body': ""> Feel like this should be `${OVERLAY}` should be `${NAME}` here, with the assumption that the target already exists? Or maybe controlled by an option?\r\n\r\nMy intention is that ${OVERLAY} should either be the target of the overlay architecture if multiple architecture are included, or just the target given if only one architecture is provided.  I don't think this works quite right now so I am working on a fix.\r\n\r\n>The use of ${OVERLAY} here is confusing. ${OVERLAY} should be something like OUTPUT_TARGET.\r\n>\r\n>Additional concern, what happens with the current code if you want to generate two bitstreams with the same overlay, wouldn't this cause a conflict?\r\n\r\nI agree OVERLAY is confusing.  Will fix.  I think it should be fine to generate two bitstreams with the same overlay because you can provide a different name and have it placed in a different folder.\r\n"", 'comment_created': datetime.datetime(2020, 7, 30, 21, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 465228632, 'comment_body': 'This seems wrong?  `OUT_LOCAL_REL` is empty?  Is this the intended?', 'comment_created': datetime.datetime(2020, 8, 4, 17, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 465230457, 'comment_body': '`USE_OLD_DIR` is never defined?', 'comment_created': datetime.datetime(2020, 8, 4, 17, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 466716640, 'comment_body': 'I set `OUT_LOCAL_REL` one line up.  This is for the case where a bit stream target is being explicitly defined (for merged fasm bit streams).', 'comment_created': datetime.datetime(2020, 8, 6, 22, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 466717311, 'comment_body': ""Yeah that's a mistake, fixing."", 'comment_created': datetime.datetime(2020, 8, 6, 22, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 467135042, 'comment_body': 'This needs a block comment explaining what it does, how to use it, and what the arguments are for.  Thanks!', 'comment_created': datetime.datetime(2020, 8, 7, 16, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 467135439, 'comment_body': 'Should USE_FASM just be an ""options"" arg if it doesn\'t take an argument?  I believe that\'s how you are using it here?', 'comment_created': datetime.datetime(2020, 8, 7, 16, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 467136448, 'comment_body': 'Not sure why this is here?', 'comment_created': datetime.datetime(2020, 8, 7, 16, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 467136728, 'comment_body': ""Not sure why this is here?  It doesn't get used?"", 'comment_created': datetime.datetime(2020, 8, 7, 16, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 467137725, 'comment_body': 'Because USE_ROI and USE_OVERLAY are so closely related, could we fold the common elements?  I believe the only difference is the use of the `--overlay` flag?', 'comment_created': datetime.datetime(2020, 8, 7, 16, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 467140458, 'comment_body': 'This should probably be ""args.overlay"" and then assert that args.synth_tiles is supplied.;', 'comment_created': datetime.datetime(2020, 8, 7, 16, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 467140708, 'comment_body': 'This should probably be ""args.overlay"" and then assert that args.synth_tiles is supplied.', 'comment_created': datetime.datetime(2020, 8, 7, 16, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'litghost', 'type': 'User'}, {'comment_id': 468110348, 'comment_body': 'Remnant of old code I was using for placement constraints.  Removing.', 'comment_created': datetime.datetime(2020, 8, 10, 18, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}, {'comment_id': 468110799, 'comment_body': ""Also old code that I'm removing."", 'comment_created': datetime.datetime(2020, 8, 10, 18, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'andrewb1999', 'type': 'User'}]","[{'commit_sha': 'ddd1e22b75ee2d9621d3c2bd6f29d806d25b207e', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8228a5838ee5742ce87aa366df469e0d92c690c7', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7cffcd6715d0b5873e92c702cf8f45f851df348', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f47aa4cc29c2d2266c3f6ee4c0ff0ad9a996bac6', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7795a3401647fbe24ff43c7343267e753932c77c', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '399ed7da5b85fa679589ae7e121865f03a20f5eb', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffab4851e26edb94af6afba2d625f014c628ab28', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd5dcd3b30d50069ea8eaeaa6ddd1f0ef2390ab3', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '582622b10f2c31dcca47af2963d951337c32f3e7', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d1bf5a15bb4a126cf5370e80118891901ab0f49', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f78426296eb6542f2b03d9b30c4b698ae1b36e1c', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30d4c619f2dffa8ccd6a3d0a3b9c26e19c37a67d', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97a2df98f2bab0366993c5ac03d7a8f6c9fa3f06', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '050966478dc7b3d6cc58df1f31c7f92fa3073d4d', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11668f4ccbcc67666d1c542badad676b13fd2466', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9702ca5c69d8065a6b22e2fb2da9fb86cf17aa82', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff85c09dcf3d81a74449dbfea76e4676d4532cb4', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e7dc6a0599aa3504b922eb9395135f24f88fbc0', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fa284e41ea93c8b4bd8ac5f1d79cb20ecda7d2e', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}]",Andrew Butt,16656729,,User,,28,,23,16
474148080,Partial Reconfig Docs with Example,WIP PR for partial reconfig docs and more detailed 2 pr example.,True,1649,https://api.github.com/repos/f4pga/f4pga-arch-defs/pulls/1649,https://github.com/f4pga/f4pga-arch-defs/pull/1649,closed,1369,10,25,12,1,0,5,0,"[{'name': 'lang-verilog'}, {'name': 'type-docs'}, {'name': 'lang-python'}, {'name': 'type-utils'}, {'name': 'arch-artix7'}]",2020-08-26 20:55:26+00:00,2020-09-01 16:51:53+00:00,503787.0,"5 days, 19:56:27",[],"[{'commit_sha': 'b04111f08d4c3b823f3b055a273ebdfe923b7308', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f52cfa5878aad350d9c21729a4a9f90ed11e6a6c', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1b5669251e890fd093616b7a4656504e97a770c', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79200e34ba56aee1f0548451e4884e0306285d49', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f887f141049c2f221311828eafe123a5da704b6d', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecbd2e96a5e382a1140ea8dc85e357083c465077', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '651c7e0487dab9d4ea452c46dc8f088c4b7f9160', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16e12914bb1cab4fc11abd6b206723454c5d7c53', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8daf3ed4595136c024fd7b824d679286f42fbc85', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7734c8e1d8adc32714355d012d688d69d334cd8', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '614d64a8ea6756682677b8a0783f8eef9011a2bb', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc5eac0729f0d5442af38bad906f7f1a120dcd4d', 'committer_username': 'andrewb1999', 'committer_name': 'Andrew Butt', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 11, 22, 53, 40, tzinfo=datetime.timezone.utc)}]",Andrew Butt,16656729,,User,,28,,23,16

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
111006976,f4pga-arch-defs,f4pga/f4pga-arch-defs,Jupyter Notebook,111,266,25,65,5222,364,19,63,"[{'id': 474148080, 'number': 1649, 'closed': datetime.datetime(2020, 9, 1, 16, 51, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 20, 55, 26, tzinfo=datetime.timezone.utc), 'time_taken': 503787.0, 'time_delta': '5 days, 19:56:27', 'additions': 1369, 'deletions': 10, 'state': 'closed'}, {'id': 455404038, 'number': 1613, 'closed': datetime.datetime(2024, 2, 29, 15, 45, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 23, 25, tzinfo=datetime.timezone.utc), 'time_taken': 113761221.0, 'time_delta': '1316 days, 16:20:21', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 447678672, 'number': 1587, 'closed': datetime.datetime(2020, 8, 12, 21, 32, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 23, 13, 31, tzinfo=datetime.timezone.utc), 'time_taken': 2845156.0, 'time_delta': '32 days, 22:19:16', 'additions': 1403, 'deletions': 280, 'state': 'closed'}, {'id': 442854700, 'number': 1565, 'closed': datetime.datetime(2020, 7, 24, 16, 12, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 17, 58, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1980841.0, 'time_delta': '22 days, 22:14:01', 'additions': 349, 'deletions': 191, 'state': 'closed'}, {'id': 442307294, 'number': 1561, 'closed': datetime.datetime(2020, 7, 15, 14, 37, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 21, 31, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1271150.0, 'time_delta': '14 days, 17:05:50', 'additions': 138, 'deletions': 20, 'state': 'closed'}, {'id': 440238983, 'number': 1549, 'closed': datetime.datetime(2020, 6, 29, 23, 12, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 20, 23, 40, tzinfo=datetime.timezone.utc), 'time_taken': 355738.0, 'time_delta': '4 days, 2:48:58', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 440159099, 'number': 1548, 'closed': datetime.datetime(2020, 6, 25, 20, 19, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 17, 26, 16, tzinfo=datetime.timezone.utc), 'time_taken': 10396.0, 'time_delta': '2:53:16', 'additions': 10, 'deletions': 5, 'state': 'closed'}, {'id': 438247931, 'number': 1540, 'closed': datetime.datetime(2020, 6, 25, 17, 20, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 0, 42, 46, tzinfo=datetime.timezone.utc), 'time_taken': 232685.0, 'time_delta': '2 days, 16:38:05', 'additions': 18, 'deletions': 2, 'state': 'closed'}, {'id': 436148811, 'number': 1534, 'closed': datetime.datetime(2020, 7, 10, 18, 54, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 23, 37, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1970207.0, 'time_delta': '22 days, 19:16:47', 'additions': 441, 'deletions': 43, 'state': 'closed'}, {'id': 423565000, 'number': 1506, 'closed': datetime.datetime(2020, 6, 25, 15, 45, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 27, 2, 19, 48, tzinfo=datetime.timezone.utc), 'time_taken': 2553968.0, 'time_delta': '29 days, 13:26:08', 'additions': 553, 'deletions': 35, 'state': 'closed'}]"
