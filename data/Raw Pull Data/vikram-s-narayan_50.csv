pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
968333023,GEKPLS With Custom PLS Based on SKLearn PLS,"This version of GEKPLS replaces the SKLearn PLS in the [previous version](https://github.com/SciML/Surrogates.jl/pull/357) with a modified PLS version based on the [SKLearn PLS code](https://github.com/scikit-learn/scikit-learn/blob/80598905e/sklearn/cross_decomposition/_pls.py). I have also added more tests, additional functionality and documentation.

It does not include code equivalent to SMT's [hyperparameter optimization for theta](https://github.com/SMTorg/smt/blob/1fa376c6e83be57d742470619e205933cb69a4db/smt/surrogate_models/krg_based.py#L960). I plan to work on hyperparameter optimization next as I'm still researching how best to implement it. I intend to submit a separate pull request for hyperparameter optimization.",True,359,https://api.github.com/repos/SciML/Surrogates.jl/pulls/359,https://github.com/SciML/Surrogates.jl/pull/359,closed,865,1,7,12,15,21,0,0,[],2022-06-15 15:32:32+00:00,2022-06-29 10:04:29+00:00,1189917.0,"13 days, 18:31:57","[{'comment_id': 903988762, 'comment_body': 'Instead of hard coding to Float64, parametrize like in https://github.com/SciML/Surrogates.jl/blob/master/src/Radials.jl#L6', 'comment_created': datetime.datetime(2022, 6, 22, 16, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ranjanan', 'type': 'User'}, {'comment_id': 903994428, 'comment_body': 'Use array views and broadcasting for expressions like `xlimits[:,2]`, because that allocates. \r\n\r\n```julia\r\njulia> a = rand(10^6);\r\n\r\njulia> @time a[1:1000];\r\n  0.000008 seconds (1 allocation: 7.938 KiB)\r\n\r\njulia> @time view(a, 1:1000);\r\n  0.000006 seconds (1 allocation: 48 bytes)\r\n```\r\n\r\nRefer to https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-views. There are other useful tips there that you can use.', 'comment_created': datetime.datetime(2022, 6, 22, 16, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ranjanan', 'type': 'User'}, {'comment_id': 903998430, 'comment_body': 'Use generic functions like `zero` and `eltype`. Reference: https://github.com/SciML/Surrogates.jl/blob/master/src/Radials.jl#L170', 'comment_created': datetime.datetime(2022, 6, 22, 16, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ranjanan', 'type': 'User'}, {'comment_id': 904020162, 'comment_body': 'broadcast', 'comment_created': datetime.datetime(2022, 6, 22, 16, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ranjanan', 'type': 'User'}, {'comment_id': 904027268, 'comment_body': 'add unit test for this? given how often its being used. ', 'comment_created': datetime.datetime(2022, 6, 22, 16, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ranjanan', 'type': 'User'}, {'comment_id': 904619732, 'comment_body': 'I am not sure why it is suggested to parametrize in this way. When we do something like `x::Matrix{Float64}` it\'s clear to the user and to the developer what data structure the system expects. \r\n\r\nOn the other hand, a phrase like `RadialBasis{F,Q,X,Y,L,U,C,S,D}` seems to me to be a little ambiguous and confusing thus hindering long term maintainability. \r\n\r\nQuestions like: \r\n_""What is F? What is Q? Why are they named so?""_ \r\nare likely to occur to future developers. \r\n\r\nThis was the reason I decided to try this approach of being specific about what data types are expected. \r\n\r\nAlso, [as per my understanding from the docs](https://docs.julialang.org/en/v1/manual/performance-tips/#Avoid-fields-with-abstract-type), creating a struct without specific info about types may create a performance overhead?\r\n\r\nCould you please explain the rationale for this other approach? Sorry if I\'m missing something here.', 'comment_created': datetime.datetime(2022, 6, 23, 6, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vikram-s-narayan', 'type': 'User'}, {'comment_id': 905052680, 'comment_body': ""It's nice to throw good errors, but this is currently very over-aggressive. For example, one of the main use cases will probably be mixing this with machine learning, but by default that will use a lot of 32-bit floating point numbers. There's nothing about the algorithm here that is 64-bit specific, but the current setup will throw an error for 32-bit just because the bit size is hardcoded to require 64-bit. So at least expanding it to `Matrix{T}` is a good option. Requiring all of the values have the same `T` is probably fine, and then hardcoding the `Int`s is fine (use `Int` not `Int64`).\r\n\r\nThe next thing to solve though would probably be GPU support, in which case `Matrix{T}` excludes `CuArray{T}`. It also excludes `ComponentArray{T}`, which I think could work nicely in some of the cases here. Etc.\r\n\r\nI think it's fine to do a first merge that's overly strict (but at least supporting 32-bit), and then gradually expand it over time.\r\n\r\nIndeed the radial basis case should catch and throw more errors earlier in order to better support its very generic implementation."", 'comment_created': datetime.datetime(2022, 6, 23, 13, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 905200119, 'comment_body': 'Matrix{Float64} results in significantly better performance (i.e. better accuracy) than Matrix{Float32}. This is because of the PLS portion of our code which is extremely sensitive to small numbers. I even brought up an [issue](https://github.com/scikit-learn/scikit-learn/issues/23627) with SKLearn because of huge discrepancies I noticed when implementing our custom PLS. \r\n\r\nAnd while doing something like the following works fine:\r\n\r\n```\r\nmutable struct GEKPLS{T} <: AbstractSurrogate\r\n    x::Matrix{T} #1\r\n    y::Matrix{T} #2\r\n    grads::Matrix{T} #3\r\n    xl::Matrix{T} #xlimits #4\r\n    delta:: T #5\r\n    extra_points::Int #6\r\n    num_components::Int #7\r\n    beta::Vector{T} #8\r\n    gamma::Matrix{T} #9\r\n    theta::Vector{T} #10\r\n    reduced_likelihood_function_value:: T #11\r\n    X_offset::Matrix{T} #12\r\n    X_scale::Matrix{T} #13\r\n    X_after_std::Matrix{T} #14 - X after standardization\r\n    pls_mean::Matrix{T} #15\r\n    y_mean::T #16\r\n    y_std::T #17\r\nend\r\n\r\n```\r\n\r\nmy concern is that an input matrix with 32-bit elements will result in poor performance without users knowing why this might be happening. \r\n\r\nSo, for now, should we retain the Float64 for matrices? ', 'comment_created': datetime.datetime(2022, 6, 23, 15, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vikram-s-narayan', 'type': 'User'}, {'comment_id': 906656431, 'comment_body': ""Using view seems to be _increasing_ number of allocations for the 9 tests that we have in test/gekpls.jl: \r\n\r\nWithout `view`: 33.068044 seconds (89.80 M allocations: 19.546 GiB, 5.94% gc time, 75.22% compilation time)\r\n```\r\nbb_vals = bb_vals .* (delta_x * (xlimits[:, 2] - xlimits[:, 1]))' \r\n_X = X[i, :]' .+ bb_vals\r\nbb_vals =  bb_vals .* grads[i,:]'\r\n_y = y[i, :] .+ sum(bb_vals, dims=2)\r\n```\r\n\r\n\r\nWith `view`: 34.212917 seconds (91.12 M allocations: 19.612 GiB, 6.06% gc time, 73.17% compilation time) \r\n\r\n```\r\nbb_vals = bb_vals .* (delta_x * (view(xlimits, :, 2) - view(xlimits, :, 1)))'\r\n_X = view(X, i, :)' .+ bb_vals\r\nbb_vals =  bb_vals .* view(grads, i,:)'\r\n_y = view(y, i, :) .+ sum(bb_vals, dims=2)\r\n\r\n```"", 'comment_created': datetime.datetime(2022, 6, 25, 8, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vikram-s-narayan', 'type': 'User'}, {'comment_id': 906676391, 'comment_body': ""I'm not sure where I can use functions like `zero` or `eltype` in this situation. Can you please elaborate?"", 'comment_created': datetime.datetime(2022, 6, 25, 12, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vikram-s-narayan', 'type': 'User'}, {'comment_id': 906676587, 'comment_body': 'Can you please elaborate where I can use broadcasting here? ', 'comment_created': datetime.datetime(2022, 6, 25, 12, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vikram-s-narayan', 'type': 'User'}, {'comment_id': 906677095, 'comment_body': ""These functions are called from another function which is used to construct the GEKPLS predictor. I'm not sure if there is a way to add a unit test for this into our test suite as there is no way to access this `boxbehnken` function right now directly from within test/GEKPLS.jl. \r\n\r\nAm I understanding this suggestion correctly?"", 'comment_created': datetime.datetime(2022, 6, 25, 12, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vikram-s-narayan', 'type': 'User'}, {'comment_id': 906755955, 'comment_body': ""I don't think broadcast is necessary here."", 'comment_created': datetime.datetime(2022, 6, 26, 4, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 906756022, 'comment_body': ""I assume you're doing `zero(X)'` here? `zeros` forces it to be a CPU array of Float64 instead of type matching."", 'comment_created': datetime.datetime(2022, 6, 26, 4, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 906756239, 'comment_body': ""`view(xlimits, :, 2) - view(xlimits, :, 1)` forms a temporary variable, so you might want to have a cache variable that you write that to.\r\n\r\n```julia\r\ncache1 .= view(xlimits, :, 2) .- view(xlimits, :, 1)\r\nmul!(cache2,delta_x,cache1)\r\nbb_vals .= bb_vals .* cache2\r\n```\r\n\r\nBut that only makes sense if you profile and see that it is an allocation-dominated operation. We should make an issue to check this but I don't think this should be a PR blocker."", 'comment_created': datetime.datetime(2022, 6, 26, 5, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 906756453, 'comment_body': ""For now retain Float64, sure. But,\r\n\r\n> my concern is that an input matrix with 32-bit elements will result in poor performance without users knowing why this might be happening.\r\n\r\nAre you sure that's the case for literally every example? I'd be surprised if there isn't a use case for it. It's most likely dependent on the condition number of some matrix in there. https://github.com/SciML/Surrogates.jl/pull/359/files#diff-a93d51ba639297205f811291f4c3ababde740f5a2532e4f74fb9ea3fa1387e93R448 most likely using QR on an ill-conditioned matrix is what would cause Float32 to give poor results, so it's probably connected to this comment.\r\n\r\nBut besides, that's not the only other number type. Dual numbers make sense for forward-mode AD of the whole surrogate, I can think of a few applications for that. BigFloat for higher precision. etc."", 'comment_created': datetime.datetime(2022, 6, 26, 5, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 907321422, 'comment_body': 'An [issue](https://github.com/SciML/Surrogates.jl/issues/362) has been created to profile and check this.', 'comment_created': datetime.datetime(2022, 6, 27, 12, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vikram-s-narayan', 'type': 'User'}, {'comment_id': 907439227, 'comment_body': 'XX is a temporary variable to construct the augmented matrix based on the extra points. It starts out with 0 rows and we gradually construct the matrix based on the number of extra points. Even if we control the variable type earlier using `eltype` or `zero` functions, later on, it will again get coerced into an Float64 array because the box-behnken functions (assigned to the bb_vals variable) return float64 arrays. \r\n\r\nHence, it may be better to cover this issue as part of #364?', 'comment_created': datetime.datetime(2022, 6, 27, 14, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vikram-s-narayan', 'type': 'User'}, {'comment_id': 907443866, 'comment_body': 'Along with creating an issue (#364)the struct has been changed like this: \r\n\r\n```\r\nmutable struct GEKPLS{T<:AbstractFloat} <: AbstractSurrogate\r\n    x::Matrix{T} #1\r\n    y::Matrix{T} #2\r\n    grads::Matrix{T} #3\r\n    xl::Matrix{T} #xlimits #4\r\n    delta::T #5\r\n    extra_points::Int #6\r\n    num_components::Int #7\r\n    beta::Vector{T} #8\r\n    gamma::Matrix{T} #9\r\n    theta::Vector{T} #10\r\n    reduced_likelihood_function_value::T #11\r\n    X_offset::Matrix{T} #12\r\n    X_scale::Matrix{T} #13\r\n    X_after_std::Matrix{T} #14 - X after standardization\r\n    pls_mean::Matrix{T} #15\r\n    y_mean::T #16\r\n    y_std::T #17\r\nend\r\n```\r\n', 'comment_created': datetime.datetime(2022, 6, 27, 14, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vikram-s-narayan', 'type': 'User'}, {'comment_id': 909420478, 'comment_body': ""This shouldn't be required in the Project?"", 'comment_created': datetime.datetime(2022, 6, 29, 9, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 909420989, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 6, 29, 9, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '4d78d5351cfc387baf6104901a9e50a447a9a2a2', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6b1a544e3d3452b75197bbd827db0792242208b', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e8e3ade49d1d3621c74f5e9564bf665a5dd1ace', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb8c534e77f1f70a11b77acf9bfcf38ddc21f37a', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64f527b3ff5533c907edde1680cd5a40122e069e', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f31d42c984791ee92c46aaa285da2ce1f422a399', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e2cd8815fc467b0a75204baa6550457be59af5f', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb14ca445a111203d6369f6051feb05ce3a18646', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b1984f74568c65a6aac78ceafc5396dffaa869f', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45d864d0a5593b93848000b3620d4ce136e2b51c', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e39d42140c783df5f9e6e7a46e9ec73e58f437e2', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd72b3f13ff1ffc6087745c587dd9a1e6955856a', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}]",Vikram,5373305,,User,,26,,24,16
1030837715,Rewrite MOE algo,"As mentioned in issue #387, MOE had an issue with accuracy when compared to accuracy of constituent surrogate experts. 
 
This rewrite of the algo significantly improves accuracy. For the [example](https://github.com/SciML/Surrogates.jl/issues/387#issuecomment-1200678701), given in that issue thread earlier here are the results: 

**Old**
MOE RMSE: 3.09
Kriging RMSE: 0.10
RBF RMSE: 0.64

**Now**
MOE RMSE:  ~ 0.0069



To do: 

1. Register package (I will do this after this PR is merged)
2. Add documentation (I will do this after registering package as users will need to be able to use MOE)",True,394,https://api.github.com/repos/SciML/Surrogates.jl/pulls/394,https://github.com/SciML/Surrogates.jl/pull/394,closed,530,257,5,16,5,3,0,0,[],2022-08-19 07:38:49+00:00,2022-09-09 14:46:47+00:00,1840078.0,"21 days, 7:07:58","[{'comment_id': 957494259, 'comment_body': ""Why are both surrogatesflux and flux in the deps? If it's only used in the test, you can add them like https://pkgdocs.julialang.org/v1/creating-packages/#Test-specific-dependencies-in-Julia-1.2-and-above"", 'comment_created': datetime.datetime(2022, 8, 29, 15, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ranjanan', 'type': 'User'}, {'comment_id': 957785643, 'comment_body': ""Thanks. I have removed flux from deps. \r\n\r\nAlso, I'm not sure if the n-dimensional [test](https://github.com/SciML/Surrogates.jl/runs/8079157282?check_suite_focus=true#step:6:679) is failing because of cache issues. There are actually 90 training points but it says that there are just 67 points. \r\n\r\nThe tests work fine on my system but fail on GitHub. \r\n"", 'comment_created': datetime.datetime(2022, 8, 29, 20, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vikram-s-narayan', 'type': 'User'}, {'comment_id': 967122726, 'comment_body': '```suggestion\r\n        @test_broken g((2.0, 5.0)) #breaks after Zygote version 0.6.43\r\n```', 'comment_created': datetime.datetime(2022, 9, 9, 14, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': '80f5cc67f7a35009cc863bda72ee1baa17e34606', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f4145b8e68828d192f858fe71505cb5cec93e01', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d9f858c04c0023154b5da3462a68f9ba2e23229', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36eef278496e85d102cf4852dda9345235c4dec5', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82c2a26b4d217844fa08c67bd17f26077e15c545', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfad0c787ee3880e4f1a3057a3e96156ae4c2edd', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de3bd3eb91f7688e40a3fb2fc5e0e3d187e0e6fb', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb9e9b1f61c72aff0055e1f62d50830c4d66ace2', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd24661c3d25c396176754952ad3114fed044aa19', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8a0eb94711764daf9183ade2fefc0485d5674c9', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cebfaa8da872cf3d60c9d01a19034d60731c98f9', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd05283adfecd410ba8ba489a117ebd167bbceb6', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2dc93c12e19932a0976f461fb9cbe37e263b310', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bff0ce5c9b63c1b22df936a989e5f08e0ad4ad36', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ebf9cd8b348f3521fd12fede64420c0fa333113', 'committer_username': 'vikram-s-narayan', 'committer_name': 'Vikram', 'committer_email': None, 'commit_date': datetime.datetime(2013, 9, 3, 13, 38, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c9ef77adbbcaf31f9dc6f9ca120014507abed1d', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}]",Vikram,5373305,,User,,26,,24,16

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
185659299,Surrogates.jl,SciML/Surrogates.jl,Julia,70,327,13,54,1192,39,8,3,"[{'id': 1065955989, 'number': 407, 'closed': datetime.datetime(2022, 10, 2, 8, 15, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 24, 6, 20, 14, tzinfo=datetime.timezone.utc), 'time_taken': 698095.0, 'time_delta': '8 days, 1:54:55', 'additions': 138, 'deletions': 0, 'state': 'closed'}, {'id': 1055288943, 'number': 405, 'closed': datetime.datetime(2022, 9, 14, 1, 51, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 13, 23, 36, 22, tzinfo=datetime.timezone.utc), 'time_taken': 8113.0, 'time_delta': '2:15:13', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1050351328, 'number': 403, 'closed': datetime.datetime(2022, 9, 8, 20, 16, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 8, 14, 21, 53, tzinfo=datetime.timezone.utc), 'time_taken': 21294.0, 'time_delta': '5:54:54', 'additions': 18, 'deletions': 17, 'state': 'closed'}, {'id': 1043946931, 'number': 402, 'closed': datetime.datetime(2022, 9, 8, 21, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 1, 16, 7, 29, tzinfo=datetime.timezone.utc), 'time_taken': 624871.0, 'time_delta': '7 days, 5:34:31', 'additions': 19, 'deletions': 18, 'state': 'closed'}, {'id': 1042770267, 'number': 399, 'closed': datetime.datetime(2022, 8, 31, 19, 56, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 31, 19, 27, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1699.0, 'time_delta': '0:28:19', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 1030837715, 'number': 394, 'closed': datetime.datetime(2022, 9, 9, 14, 46, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 19, 7, 38, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1840078.0, 'time_delta': '21 days, 7:07:58', 'additions': 530, 'deletions': 257, 'state': 'closed'}, {'id': 1008450464, 'number': 386, 'closed': datetime.datetime(2022, 7, 26, 13, 35, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 26, 12, 18, 9, tzinfo=datetime.timezone.utc), 'time_taken': 4654.0, 'time_delta': '1:17:34', 'additions': 379, 'deletions': 1, 'state': 'closed'}, {'id': 1007310763, 'number': 385, 'closed': datetime.datetime(2022, 7, 26, 9, 1, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 13, 25, 36, tzinfo=datetime.timezone.utc), 'time_taken': 70546.0, 'time_delta': '19:35:46', 'additions': 148, 'deletions': 98, 'state': 'closed'}, {'id': 1006311781, 'number': 383, 'closed': datetime.datetime(2022, 7, 25, 12, 17, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 23, 8, 41, 58, tzinfo=datetime.timezone.utc), 'time_taken': 185703.0, 'time_delta': '2 days, 3:35:03', 'additions': 103, 'deletions': 81, 'state': 'closed'}, {'id': 1003807370, 'number': 382, 'closed': datetime.datetime(2022, 7, 21, 12, 50, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 21, 7, 43, 50, tzinfo=datetime.timezone.utc), 'time_taken': 18388.0, 'time_delta': '5:06:28', 'additions': 40, 'deletions': 38, 'state': 'closed'}, {'id': 1000655701, 'number': 381, 'closed': datetime.datetime(2022, 7, 20, 12, 49, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 19, 11, 27, 27, tzinfo=datetime.timezone.utc), 'time_taken': 91304.0, 'time_delta': '1 day, 1:21:44', 'additions': 304, 'deletions': 189, 'state': 'closed'}, {'id': 991674054, 'number': 370, 'closed': datetime.datetime(2022, 7, 8, 16, 56, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 8, 13, 32, 4, tzinfo=datetime.timezone.utc), 'time_taken': 12294.0, 'time_delta': '3:24:54', 'additions': 13, 'deletions': 13, 'state': 'closed'}, {'id': 968333023, 'number': 359, 'closed': datetime.datetime(2022, 6, 29, 10, 4, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 15, 15, 32, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1189917.0, 'time_delta': '13 days, 18:31:57', 'additions': 865, 'deletions': 1, 'state': 'closed'}, {'id': 958417614, 'number': 357, 'closed': datetime.datetime(2022, 6, 15, 15, 34, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 5, 13, 51, 54, tzinfo=datetime.timezone.utc), 'time_taken': 870160.0, 'time_delta': '10 days, 1:42:40', 'additions': 494, 'deletions': 0, 'state': 'closed'}, {'id': 948895430, 'number': 347, 'closed': datetime.datetime(2022, 5, 27, 3, 39, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 27, 3, 21, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1120.0, 'time_delta': '0:18:40', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 945202637, 'number': 346, 'closed': datetime.datetime(2022, 5, 24, 12, 44, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 24, 6, 13, 36, tzinfo=datetime.timezone.utc), 'time_taken': 23434.0, 'time_delta': '6:30:34', 'additions': 26, 'deletions': 10, 'state': 'closed'}, {'id': 924797381, 'number': 336, 'closed': datetime.datetime(2022, 5, 1, 10, 19, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 1, 3, 36, 3, tzinfo=datetime.timezone.utc), 'time_taken': 24214.0, 'time_delta': '6:43:34', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 893920718, 'number': 329, 'closed': datetime.datetime(2022, 3, 30, 10, 16, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 30, 4, 16, 12, tzinfo=datetime.timezone.utc), 'time_taken': 21644.0, 'time_delta': '6:00:44', 'additions': 1, 'deletions': 20, 'state': 'closed'}, {'id': 891690863, 'number': 323, 'closed': datetime.datetime(2022, 3, 28, 12, 59, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 28, 11, 32, 31, tzinfo=datetime.timezone.utc), 'time_taken': 5218.0, 'time_delta': '1:26:58', 'additions': 6, 'deletions': 275, 'state': 'closed'}, {'id': 886010511, 'number': 321, 'closed': datetime.datetime(2022, 3, 27, 4, 34, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 22, 12, 51, 13, tzinfo=datetime.timezone.utc), 'time_taken': 402174.0, 'time_delta': '4 days, 15:42:54', 'additions': 516, 'deletions': 175, 'state': 'closed'}, {'id': 874373886, 'number': 320, 'closed': datetime.datetime(2022, 3, 22, 13, 23, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 8, 16, 33, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1198198.0, 'time_delta': '13 days, 20:49:58', 'additions': 64, 'deletions': 25, 'state': 'closed'}, {'id': 874167332, 'number': 319, 'closed': datetime.datetime(2022, 3, 22, 13, 22, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 8, 13, 5, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1210624.0, 'time_delta': '14 days, 0:17:04', 'additions': 6, 'deletions': 4, 'state': 'closed'}, {'id': 866591855, 'number': 317, 'closed': datetime.datetime(2022, 3, 4, 7, 7, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 28, 9, 38, 30, tzinfo=datetime.timezone.utc), 'time_taken': 336559.0, 'time_delta': '3 days, 21:29:19', 'additions': 26, 'deletions': 45, 'state': 'closed'}, {'id': 852930650, 'number': 315, 'closed': datetime.datetime(2022, 5, 27, 3, 23, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 15, 7, 47, 41, tzinfo=datetime.timezone.utc), 'time_taken': 8710553.0, 'time_delta': '100 days, 19:35:53', 'additions': 459, 'deletions': 20, 'state': 'closed'}, {'id': 829736701, 'number': 314, 'closed': datetime.datetime(2022, 1, 23, 12, 20, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 23, 12, 18, 42, tzinfo=datetime.timezone.utc), 'time_taken': 94.0, 'time_delta': '0:01:34', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 822597888, 'number': 312, 'closed': datetime.datetime(2022, 1, 23, 8, 44, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 14, 12, 17, 29, tzinfo=datetime.timezone.utc), 'time_taken': 764813.0, 'time_delta': '8 days, 20:26:53', 'additions': 27, 'deletions': 14, 'state': 'closed'}]"
