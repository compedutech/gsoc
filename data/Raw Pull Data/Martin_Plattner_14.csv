pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
440076650,Improve SetHeaders addon,"This PR improves the `SetHeaders` addon with 3 changes:

1) The flow-filter is now the last parameter in the configuration pattern, as it is optional.
2) The user can now remove existing headers by specifying an empty `header-value`.
3) Updated docs to reflect changes.

refs #3948 ",True,4043,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/4043,https://github.com/mitmproxy/mitmproxy/pull/4043,closed,209,170,9,6,3,0,1,0,[{'name': 'gsoc'}],2020-06-25 14:56:56+00:00,2020-06-25 16:33:40+00:00,5804.0,1:36:44,[],"[{'commit_sha': 'b6c70950c30a8d40d26669d2c3a7f5de9bab18fc', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccf7182a115bc45156c085fde082585bd0322eb6', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b90dded9404bd7fbbaffa4289af27a32eed30176', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a0365ea6805b758287f4efba29dc682bdb73e4e', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcffa674ba9f8cea904737d1c1450cfa98e76a6c', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '781e0a2e7c68659ecef882f2cf4dcf2dc5776738', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}]",Martin Plattner,1025800,git@mplattner.at,User,,36,,13,39
440721455,Replace replacements addon with new modify body addon,"The new addon only replaces data in the body using `--modify-body`.

refs #3948 ",True,4046,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/4046,https://github.com/mitmproxy/mitmproxy/pull/4046,closed,489,567,22,13,15,25,1,0,[{'name': 'gsoc'}],2020-06-26 18:13:21+00:00,2020-07-02 13:02:38+00:00,499757.0,"5 days, 18:49:17","[{'comment_id': 446833382, 'comment_body': '`modify-body` -> `modify_body`', 'comment_created': datetime.datetime(2020, 6, 29, 7, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 446847221, 'comment_body': 'This fails for the existing options, see e.g. `"" or "".join(""--intercept"")`.', 'comment_created': datetime.datetime(2020, 6, 29, 8, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 446853646, 'comment_body': ""This looks suspiciously similar to `parse_modify_headers` now. We can probably just merge those two?\r\n\r\n - We can raise a plain `ValueError` here and re-raise an OptionsError in each addon with an individual error message.\r\n - Let's also include `strutils.escaped_str_to_bytes()` and `flowfilter.parse` here."", 'comment_created': datetime.datetime(2020, 6, 29, 8, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 446960854, 'comment_body': ""If there is only a single option as `str` in `REPLACEMENTS`, the string is put into a list in line 137.\r\nI've tested it (now again) and it does work. Am I missing something?\r\n\r\n```\r\n❯ mitmproxy -i\r\nusage: mitmproxy [options]\r\nmitmproxy: error: unrecognized arguments: -i\r\n\r\n-i is deprecated.\r\nPlease use `--intercept` instead.\r\n```"", 'comment_created': datetime.datetime(2020, 6, 29, 13, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 446972175, 'comment_body': ""Good idea. What's the preferred approach here? Have the function in one addon file and import it in the other?\r\n\r\nRegarding the bullet points:\r\n1) You mean a `ValueError` in the parse method and an `OptionsError` in the `Configure` method? Does that make sense here, i.e., having 2 subsequently thrown exceptions for the same error? (Trying to learn here, not to correct you :))\r\n2) These methods are now applied in `replace()`. You suggest to move them to the parse method, right?"", 'comment_created': datetime.datetime(2020, 6, 29, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447061239, 'comment_body': ""Yeah, I can't read. "", 'comment_created': datetime.datetime(2020, 6, 29, 15, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447066166, 'comment_body': '> Have the function in one addon file and import it in the other?\r\n\r\nyup, let\'s keep it simple. :)\r\n\r\n> You mean a ValueError in the parse method and an OptionsError in the Configure method? Does that make sense here, i.e., having 2 subsequently thrown exceptions for the same error? (Trying to learn here, not to correct you :))\r\n\r\nYes. The very Pythonic way would be to re-raise as follows:\r\n\r\n```python\r\ndef foo():\r\n    raise ValueError(""qux"")\r\n\r\ndef bar():\r\n    try:\r\n        foo()\r\n    except ValueError as e:\r\n        raise BarError(""cannot foo() today"") from e\r\n```\r\n\r\nThis ensure the following: 1) You can make sure that bar() only raises BarErrors. 2) You get a very nice chained traceback: \r\n\r\n```\r\nTraceback (most recent call last):\r\n  File ""<pyshell#55>"", line 3, in bar\r\n    foo()\r\n  File ""<pyshell#49>"", line 2, in foo\r\n    raise ValueError(""qux"")\r\nValueError: qux\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File ""<pyshell#56>"", line 1, in <module>\r\n    bar()\r\n  File ""<pyshell#55>"", line 5, in bar\r\n    raise BarError(""cannot foo() today"") from e\r\nBarError: cannot foo() today\r\n```\r\n\r\n> These methods are now applied in replace(). You suggest to move them to the parse method, right?\r\n\r\nYes. Reading from file should stay inside replace() however, it can be very useful that file contents are not cached. :)', 'comment_created': datetime.datetime(2020, 6, 29, 15, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447642692, 'comment_body': '`modify-body` is correct. `argparse` replaces `_` with `-`.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447724841, 'comment_body': 'Done. Please check.\r\n\r\nI haven\'t moved `flowfilter.parse` to the `parse_modify_hook` method as then the thrown `ValueError` is ambigous, i.e., when executing `parse_modify_hook` again in the `configure` method to re-raise the exception, we\'d have to check the error message to determine whether the `ValueError` was caused by an invalid ""/.../.../..."" option or by an invalid flow filter.\r\nHope this makes sense.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447725718, 'comment_body': 'Does this line do anything useful?', 'comment_created': datetime.datetime(2020, 6, 30, 14, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447725753, 'comment_body': ""We auto-translate `_` to `-` for command line arguments, yes. However, `modify_body` is what you would set in your config.yaml or in mitmproxy's options editor, and what we consistently use in our docs (see https://docs.mitmproxy.org/stable/concepts-options/). You could also do `--set modify_body=...` for that matter. The inconsistency is a bit ugly, but there really aren't many better options around."", 'comment_created': datetime.datetime(2020, 6, 30, 14, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447726235, 'comment_body': ""(if you have any ideas on how we could have this more consistent, I'd love to hear them - what we currently have is the best solution we came up with so far)"", 'comment_created': datetime.datetime(2020, 6, 30, 14, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447726357, 'comment_body': 'Does this line do anything useful? Same for the last line of this test.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447732593, 'comment_body': 'Generally speaking, having this line here asserts that it runs without error. In an ideal world, you would probably also check that the addon has parsed it properly, but ""doesn\'t error"" can sometimes be good enough.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447733829, 'comment_body': ""Let me be a bit pendantic here - this comment doesn't make too much sense to me:\r\n\r\n - `.modify_body` would indicate that there's a modify_body attribute. As far as I can see, there isn't?\r\n - If we want to document the type of `.lst` (that thing could probably be renamed, yes...), it would make sense to do this at the definition and not here. I'll add some ideas on how we can do this better in the next comment."", 'comment_created': datetime.datetime(2020, 6, 30, 14, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447741371, 'comment_body': 'Makes sense, thanks.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447744445, 'comment_body': ""If we re-use this (which is good 👍), we should probably signal somehow that it's not just headers. We can also add a bit more type information to make things easier to grasp:\r\n\r\n```python\r\nclass ModifySpec(typing.NamedTuple):\r\n    matches: flowfilter.TFilter,\r\n    match_str: str\r\n    key: bytes  # those could potentially have better names if you can think of some\r\n    replacement: bytes\r\n\r\n\r\ndef parse_modify_spec(s: str) -> ModifySpec:\r\n    # ...\r\n    filter = flowfilter.parse(filter_str)\r\n    return ModifySpec(filter, filter_str, header_name, header_value)\r\n```\r\n\r\nthen, below:\r\n```python\r\nclass ModifyHeaders:\r\n    def __init__(self):\r\n        replacements: List[ModifySpec] = []    # replaces self.lst\r\n    \r\n    # ...\r\n    \r\n    def run(self, f, hdrs):\r\n        for spec in self.replacements:\r\n            if spec.matches(f):\r\n                hdrs.pop(spec.key, None)\r\n```\r\n\r\nI realize this is just a very rough sketch. Does it make sense anyway?"", 'comment_created': datetime.datetime(2020, 6, 30, 14, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447746122, 'comment_body': 'Thanks for clarification.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447750140, 'comment_body': 'It might make sense to inform the user when underscore-formatted options are used as a cli argument, similar to the messages on deprecated commands.\r\nAt the moment it outputs: `mitmproxy: error: unrecognized arguments: --modify_body asdf`.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447751325, 'comment_body': 'Make this `f""Cannot parse modify_body option {rep}: {e}""` to include the ValueError\'s message, then move the checks below into `parse_modify_hook` and make their messages generic (`""Invalid modify_body flow filter: %s"" % flow_filter_pattern` -> `Invalid filter pattern: {pattern}`). This should solve the problem mentioned in https://github.com/mitmproxy/mitmproxy/pull/4046#discussion_r447724841, or am I misunderstanding things? :)', 'comment_created': datetime.datetime(2020, 6, 30, 14, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447753345, 'comment_body': ""Agreed, that's actually a really good point! Let's track this in #4054."", 'comment_created': datetime.datetime(2020, 6, 30, 15, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447755980, 'comment_body': ""I agree. This comment existed in the existing `Replace` addon and I didn't change it properly."", 'comment_created': datetime.datetime(2020, 6, 30, 15, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447779840, 'comment_body': 'Great idea, thanks 🙌', 'comment_created': datetime.datetime(2020, 6, 30, 15, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447781655, 'comment_body': 'Yep I guess this makes sense :) Thanks.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 448299243, 'comment_body': ""I'm not sure what should be escaped here. Comments seems to be from you, @mhils "", 'comment_created': datetime.datetime(2020, 7, 1, 11, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}]","[{'commit_sha': '29f0bd02761217db122b0cdccf0f98624cd817ca', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b608b0ef3e8dfa79bc4f6808475321714ac802da', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96e756ead0c42d237bbba21855c831b48a63fcb9', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b263b0decef36564b153cd5ef95a7f4fa26d7796', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cffbec291a4b672cea86b5351acdca05a46cb2f', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48dcc6e073a6097157c405c3e8cd89867d5952b3', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a124793998a4ee52818c4d004ce213e578e3fea', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ed77707162ce94773bd0e3c03e35ac7e49a856f', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a408c93797d0ef22eb36a4db56e2d9191585ca5', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a4933eb9deb0c82c3ddf2b821cae88219c755a7', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aee1b812600b4f95472cf39b3973b6a5f4f971ed', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a782bb47a776ff74de6a3101f3428c73cb1b5204', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe662b42823ce559d92f7239dd287e2465732d85', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}]",Martin Plattner,1025800,git@mplattner.at,User,,36,,13,39
444033254,add mapremote addon to modify request URLs,"#### Description

Added a new addon (`MapRemote`) to rewrite URLs of requests before the request is performed.

refs #3948 

#### Checklist

 - [x] I have updated tests where applicable.
 - [x] I have added an entry to the CHANGELOG.
",True,4060,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/4060,https://github.com/mitmproxy/mitmproxy/pull/4060,closed,203,21,6,3,0,5,1,0,[{'name': 'gsoc'}],2020-07-03 12:29:10+00:00,2020-07-03 17:08:11+00:00,16741.0,4:39:01,"[{'comment_id': 449589370, 'comment_body': 'The URL is surrogate-escaped UTF-8, so we should do `obj.pretty_url.encode(""utf8"", ""surrogateescape"")`. We\'re doing a bit of a weird encoding dance here that\'s tricky to explain, but `escaped_str_to_bytes` would interpret escape sequences in a URL as raw bytes, which would fail in some edge cases.', 'comment_created': datetime.datetime(2020, 7, 3, 13, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 449599309, 'comment_body': 'Two problems here:\r\n* pattern is parsed incorrectly due to the separator `:` together with the skipped flow filter and the `:` in `https:`. it should instead be `""|.*\\.jpg$|https://placedog.net/640/480?random""`\r\n* using a image placeholder service that does not support http2 does not work for websites that do use http2. I debugged this for a while yesterday and then decided to ditch the image placeholder example but use `example.org/image.jpg`. we might want to put a note in the docs (or try to fix the issue, albeit I don\'t think this problem is a common use case.)', 'comment_created': datetime.datetime(2020, 7, 3, 14, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 449599479, 'comment_body': 'other than that, great improvements to the docs :)', 'comment_created': datetime.datetime(2020, 7, 3, 14, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 449600403, 'comment_body': ""Good catch on the pattern. 👍 \r\n\r\nThe HTTP2 issue is a super annoying one, which we'll hopefully be able to fix with sans-io. Let's put in a general note for the addon for now."", 'comment_created': datetime.datetime(2020, 7, 3, 14, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 449604719, 'comment_body': 'Do you think this is what causes the failing unit test on windows? (e.g. `TestMapRemoteFile`; see https://github.com/mitmproxy/mitmproxy/pull/4046#issuecomment-652938102)', 'comment_created': datetime.datetime(2020, 7, 3, 14, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}]","[{'commit_sha': '89fad1e2b1a5a84672aa22e128c39165059351c9', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '417c213dd720312ba554c5bb7c258fe65fe4e52a', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cee4da4e8c1600119115cd624bdbea3da7e0d6f2', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}]",Martin Plattner,1025800,git@mplattner.at,User,,36,,13,39
445446375,MapLocal addon,"#### Description

Draft for the `MapLocal` addon.
`MapLocal.file_candidates()` generates possible paths to serve instead of the original resource, also see the tests to understand what it does.
`subject` (regex pattern on the url) is only used to determine whether a request should be modified, but `subject` does not affect the file candidates currently.
Hope this makes sense, here is an example:

Request URL = https://example.org/img/topic/subtopic/test.jpg
Map Local option = `:/img/jpg:~/local`
File candidates are:

* ~/local/img/topic/subtopic/test.jpg
* ~/local/img/topic/test.jpg
* ~/local/img/test.jpg
* ~/local/test.jpg

Basic functionality is already working, e.g. with `mitmproxy --map-local "":jpg:~/img""` to try to serve all URLs containing `jpg` from `~/img`.
However, overall this is just an early draft that needs several improvements and clean-up.

#### Checklist

 - [ ] I have updated tests where applicable.
 - [ ] I have added an entry to the CHANGELOG.
",True,4069,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/4069,https://github.com/mitmproxy/mitmproxy/pull/4069,closed,511,131,13,24,6,74,1,0,[{'name': 'gsoc'}],2020-07-07 14:20:49+00:00,2020-07-18 12:24:47+00:00,943438.0,"10 days, 22:03:58","[{'comment_id': 451371138, 'comment_body': ""Let's make sure that we use type annotations where it's easily possible. :)\r\nWe also really want to return Path objects, not str."", 'comment_created': datetime.datetime(2020, 7, 8, 8, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451372638, 'comment_body': ""This doesn't fly - we say `replacement` is a str, so we can't just make it a `Path` here. I think this needs to happen on-demand in the maplocal addon."", 'comment_created': datetime.datetime(2020, 7, 8, 8, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451376108, 'comment_body': 'I would move the `is_file` and `is_dir` check directly into `request` and invoke `file_candidates` only for directories. Then we can make sure that there are no decisions involving I/O in `file_candidates`, which makes it easier to test.\r\n\r\nAlso, we can make this @staticmethod or move it out of the addon (I personally prefer the latter, but YMMV). This thing is complex, so we want to reduce the complexity of the mental model one needs to build as much as possible.', 'comment_created': datetime.datetime(2020, 7, 8, 8, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451376422, 'comment_body': ""See comment above: Eliminate I/O, then we don't need tmpdir."", 'comment_created': datetime.datetime(2020, 7, 8, 8, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451381201, 'comment_body': 'We can make this (and test_sanitize_candidate_path) nicer with pytest\'s parametrize (see [here](https://github.com/mitmproxy/mitmproxy/blob/a802899491ba87218d7878bc4ac73dcf59c9275e/test/mitmproxy/test_command_lexer.py) for example):\r\n```python\r\n@pytest.mark.parametrize(""url,spec,expected_candidates"", [\r\n(\r\n    ""https://example.org/foo/bar.jpg"", \r\n    "":example.com/foo:/tmp"", \r\n    [""/tmp/bar.jpg"", ...]\r\n),\r\n])\r\ndef test_file_candidates(url: str, spec: str, expected_candidates: List[str]):\r\n    spec = parse_modify_spec(spec, True, True)\r\n    candidates = file_candidates(url, spec)\r\n    assert [str(x) for x in candidates] == expected_candidates\r\n```', 'comment_created': datetime.datetime(2020, 7, 8, 8, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451401395, 'comment_body': ""Here's some existing work on that problem:\r\n\r\n - I believe this is what Flask/werkzeug is doing: https://github.com/pallets/werkzeug/blob/0d0d1e7263013c4e14750d8fb91984cf1584e0e0/src/werkzeug/security.py#L202\r\nhttps://github.com/pallets/werkzeug/blob/09a248649069780b4adfb910fb69f6fb304f2ea3/tests/test_security.py#L69-L82\r\n - And here's aiohttp: https://github.com/aio-libs/aiohttp/blob/2a924cae6c19dbbfde220bbd461fc446764ad156/aiohttp/web_urldispatcher.py#L585"", 'comment_created': datetime.datetime(2020, 7, 8, 9, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451402090, 'comment_body': ""`'application/octet-stream'` is a bit more useful. The stuff that generally isn't recognized is binary blobs, which should trigger a download. :)"", 'comment_created': datetime.datetime(2020, 7, 8, 9, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451411253, 'comment_body': ""Looking closer at this, it might actually be the best approach to just call werkzeug's [safe_join](https://werkzeug.palletsprojects.com/en/1.0.x/utils/?highlight=safe_join#werkzeug.security.safe_join). We could then also already call sanitization in `file_candidates` so that it only returns a list of safe paths. What do you think?"", 'comment_created': datetime.datetime(2020, 7, 8, 9, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451416605, 'comment_body': 'Good idea!', 'comment_created': datetime.datetime(2020, 7, 8, 9, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 451577249, 'comment_body': 'Do we consider a symlink in the user-provided base-dir to a target outside of base-dir a problem?\r\nE.g., the user provides `/local` and the symlink /local/mylink -> /etc/. To consider this we _do_ need I/O access to sanitize paths.', 'comment_created': datetime.datetime(2020, 7, 8, 14, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 451577371, 'comment_body': 'The parametrization is really cool, thanks!', 'comment_created': datetime.datetime(2020, 7, 8, 14, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 451578468, 'comment_body': ""Hm, I see your point in removing I/O, but doesn't this complicate testing due to different path separators being used on Unix vs. Windows? I.e., on Windows we might want to test `:jpg:c:\\\\repl`, while on Linux it would be `:jpg:/repl`, leading to differing candidate paths.\r\nThus, to have real cross-platform tests, we need to have OS-level parametrization. Maybe I'm over-complicating stuff.\r\nWill look at this more closely in the evening."", 'comment_created': datetime.datetime(2020, 7, 8, 14, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 451579627, 'comment_body': ""I think that's fine. If a user explicitly symlinks that, it may as well work. No need to check the filesystem."", 'comment_created': datetime.datetime(2020, 7, 8, 14, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451580891, 'comment_body': 'We can probably use `./static` as our test path? That should behave the same way cross-platform.', 'comment_created': datetime.datetime(2020, 7, 8, 14, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451580923, 'comment_body': 'Yes, I agree. :+1: ', 'comment_created': datetime.datetime(2020, 7, 8, 14, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 451582178, 'comment_body': ""Sure. I didn't know if we aim for tests that explicitly test differences between Unix and Windows (as dealing with paths and path sanitization can be security critical.)"", 'comment_created': datetime.datetime(2020, 7, 8, 14, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 451854446, 'comment_body': 'Hm, Windows and OSX tests for `MapLocal` fail due to the `resolve()` and the obviously non-existing `/tmp` path that the `test_file_candidates` test uses. We do this similarly for the other ""replacement"" addons when an option with `@path` is provided (see https://github.com/mitmproxy/mitmproxy/blob/master/mitmproxy/addons/modifyheaders.py#L26), but `parse_modify_spec()` is never tested with an `@path` option. Therefore it\'s not an issue there.\r\n\r\nShould I move the `resolve()` check outside of `parse_modify_spec()` or use the `tmpdir` of pytest?', 'comment_created': datetime.datetime(2020, 7, 8, 22, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 451966580, 'comment_body': 'Is that check necessary here? I thought file_candidates gives us sanitized paths.', 'comment_created': datetime.datetime(2020, 7, 9, 5, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451966906, 'comment_body': 'I would probably try `tmpdir`, but either option works for me :)\r\n\r\n_Edit:_ Not sure why this is shown here in isolation, this is a reply to https://github.com/mitmproxy/mitmproxy/pull/4069#discussion_r451854446', 'comment_created': datetime.datetime(2020, 7, 9, 5, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451967981, 'comment_body': ""I'm not sure if I understand this pattern. Why are we supposed to match here if `/foo` is in the subject?"", 'comment_created': datetime.datetime(2020, 7, 9, 5, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451969130, 'comment_body': 'I\'m really not convinced that this form of patterns make much sense, same goes for the one below. What\'s the use case here? IMO the main point here is to specify URL prefixes, mapping all URLs that match ""org"" onto a folder seems really far fetched. Am I missing something?', 'comment_created': datetime.datetime(2020, 7, 9, 5, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451969568, 'comment_body': 'We should have a better test coverage here. How about varying prefix subjects (`example.com`, `example.com/foo`, `example.com/foo/`) and URLs including query strings, for example?', 'comment_created': datetime.datetime(2020, 7, 9, 5, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451969767, 'comment_body': ""If we want to operate on path components, there's already `flow.request.path_components`. Intuitively I feel that this may work better matching on substrings, but if we get tests passing with this, we're good of course. :)"", 'comment_created': datetime.datetime(2020, 7, 9, 5, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451970669, 'comment_body': ""nit: let's keep accepting a Path here and only `str()` before we `safe_join`. We really want to work on Path objects, hopefully safe_join does support them at some point as well."", 'comment_created': datetime.datetime(2020, 7, 9, 5, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452181560, 'comment_body': ""Oh, you're right, the `base_path in candidate.parents` is not needed as `safe_join` should only return paths that are within `base_path`.\r\nThe `candidate.is_file()`, however, is needed as we perform no I/O to check if this file exists up to this point."", 'comment_created': datetime.datetime(2020, 7, 9, 12, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452183785, 'comment_body': ""You're right, this wouldn't match in the `request` method, but `file_candidates` does not consider `subject`, so it's technically a valid test. It is confusing though, I'll change it (also see next comment). "", 'comment_created': datetime.datetime(2020, 7, 9, 12, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452183951, 'comment_body': ""Yes, we're on the same page then. 👍 😃 "", 'comment_created': datetime.datetime(2020, 7, 9, 12, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452184974, 'comment_body': ""I agree, I didn't use particular useful or common use-case patterns, but just some that test the functionality.\r\nWill replace them with more useful patterns, e.g., the ones I used in the docs."", 'comment_created': datetime.datetime(2020, 7, 9, 12, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452185981, 'comment_body': 'Good idea, will change it.', 'comment_created': datetime.datetime(2020, 7, 9, 12, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452803046, 'comment_body': 'Having separate specs is a good idea, it got a bit messy trying to use the `ModifySpec` for the `Map*` addons. :+1: ', 'comment_created': datetime.datetime(2020, 7, 10, 12, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452803435, 'comment_body': 'Why the double indentation?', 'comment_created': datetime.datetime(2020, 7, 10, 12, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452803684, 'comment_body': '`assert m` instead of a `if m:` block?', 'comment_created': datetime.datetime(2020, 7, 10, 12, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452804933, 'comment_body': 'Most filesystems support more characters than `r""[^0-9a-zA-Z-_.=(),/]""`, but this should be fine for most use cases and common file names ;)\r\nDoesn\'t the `-` in `Z-_` need escaping with a `\\`?', 'comment_created': datetime.datetime(2020, 7, 10, 12, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452806318, 'comment_body': 'Minor: You changed this back from `replacement` to `replacement_str`.\r\nWhy include the type only for this one, and not for e.g. the subject? In `MapRemoteSpec` we use `replacement`.', 'comment_created': datetime.datetime(2020, 7, 10, 12, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452807400, 'comment_body': ""Shouldn't this allow that `example.com/foo`is a file that I want to map to /tmp/foo?"", 'comment_created': datetime.datetime(2020, 7, 10, 12, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452808397, 'comment_body': ""Ideally I would call it `_replacement` but NamedTuple doesn't like that. The idea is that you don't want to access `replacement_str` directly, but always use `read_replacement()`. "", 'comment_created': datetime.datetime(2020, 7, 10, 12, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452808669, 'comment_body': 'This works fine, but probably a good call to add a `\\` for clarity.', 'comment_created': datetime.datetime(2020, 7, 10, 12, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452808882, 'comment_body': ""We can assert here because we already check for a match in `request`, but I'll quickly refactor this."", 'comment_created': datetime.datetime(2020, 7, 10, 12, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452808958, 'comment_body': 'PyCharm Bug. 🤷 ', 'comment_created': datetime.datetime(2020, 7, 10, 12, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452809654, 'comment_body': 'Then you should specify `:example.com/foo:/tmp/foo` or  `:example.com/:/tmp/foo`, no?', 'comment_created': datetime.datetime(2020, 7, 10, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452895977, 'comment_body': 'Here you assume that the user provides a regex that starts with the path (and an optional hostname).\r\nAssumeing the URL is `https://example/foo/bar/baz.jpg` and subject is `:/bar/baz:/tmp`, then the determined suffix is`.jpg`, which does not make sense. Are we ok with that and state in the docs that the regex should start with `hostname/path-prefix`?', 'comment_created': datetime.datetime(2020, 7, 10, 14, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452913052, 'comment_body': 'I think it should be possible to specify `:/foo/bar/baz.jpg:/tmp/baz.jpg` to map `https://example.com/foo/bar/baz.jpg` to `/tmp/baz.jpg`. Currently that does not work.', 'comment_created': datetime.datetime(2020, 7, 10, 15, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452923420, 'comment_body': ""Why doesn't that work? That's a single file, so it shouldn't go through file_candidates at all."", 'comment_created': datetime.datetime(2020, 7, 10, 15, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452926261, 'comment_body': ""My bad, you're right. I tested the patterns with the `test_file_candidates` method."", 'comment_created': datetime.datetime(2020, 7, 10, 15, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452934988, 'comment_body': ""I think the best way to document that is state that the pattern splits the URL, and the part right of the pattern is appended to the directory. It would be cool to have two simple colored examples like this:\r\n\r\n```\r\nHTTP Request:  https://example.com/foo/bar/qux.jpg?timestamp=123\r\n                              ▲             │\r\nURL Regex: example.com/foo   ─┘             │\r\n                                            ▼\r\nServed File:                  ~/static/bar/qux.jpg\r\n```\r\n\r\n```\r\nHTTP Request:  https://example.com/view?id=1\r\n                                 ▲     │\r\nURL Regex: example.com/(.+)     ─┘     │\r\n                                       ▼\r\nServed File:              ~/static/view_id=1\r\n```\r\n\r\nUnfortunately I can't color here, but hopefully it gets the point across. :-)"", 'comment_created': datetime.datetime(2020, 7, 10, 16, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452937142, 'comment_body': ""Talking about examples:\r\n\r\n- we should probably list one example with `:~m GET:` to illustrate the point of the flow filter.\r\n- We could consider discussing regex lookaheads here. I'm not sure what's simpler, do we prefer `:example.com/(?=.+\\.jpg$):~/images` or `:~u .jpg$:example.com/:~/images`? I guess both would get the job done. :)"", 'comment_created': datetime.datetime(2020, 7, 10, 16, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452956171, 'comment_body': ""Good idea. For your second example, the regex should be `example.com/` or `example.org` I think. Will put a colored ASCII example in the docs, or did you think of an image?\r\nRegarding examples: I think lookaheads often make regexes hard to read. Using the flow filter might be confusing as well, the user might wonder what's the purpose of the url-regex. But yes, both variants get the job done. Will think about it.\r\n"", 'comment_created': datetime.datetime(2020, 7, 10, 16, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 454916477, 'comment_body': ""What about putting the optional filter at the end? Not sure how the discussion in #3948 ended, it's the same in #4060"", 'comment_created': datetime.datetime(2020, 7, 15, 9, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 454925965, 'comment_body': ""Should we move `parse_spec` to a utility or something? It's semi-odd to import something from an unrelated addon, or is it just me?"", 'comment_created': datetime.datetime(2020, 7, 15, 9, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 454935556, 'comment_body': ""Is there a way to make `filé.jpg` or `spa ce.jpg` work? I'm having a folder with three files, those two and `file.jpg` (without the special character). Only `file.jpg` works even though both my filesystem and the url allow special characters or spaces in names.\r\n\r\nI guess at some point `url` or at least the path needs to be URL decoded."", 'comment_created': datetime.datetime(2020, 7, 15, 9, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 454936725, 'comment_body': 'URL decode `suffix` here? What exactly is the intent of removing the special characters?', 'comment_created': datetime.datetime(2020, 7, 15, 10, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 454937145, 'comment_body': 'This causes\r\n\r\n```\r\nspa%20ce.jpg -> spa_20ce.jpg\r\n```\r\n\r\ninstead of `spa ce.jpg`', 'comment_created': datetime.datetime(2020, 7, 15, 10, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 454947102, 'comment_body': ""urldecode: yes. Let's fix that and add a test.\r\n\r\nSpecial characters: Some characters are not valid in filenames, hence we want to escape them so that those files can be represented (e.g., `?` on Windows). This very much varies across OSes unfortunately, I think we don't feel like special-casing everything here. One thing we could do is add the unescaped version and the escaped version (if it differs) to our candidate list. What do you think?"", 'comment_created': datetime.datetime(2020, 7, 15, 10, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 454947499, 'comment_body': ""Ok, let's move this to `mitmproxy/utils/spec.py`"", 'comment_created': datetime.datetime(2020, 7, 15, 10, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 454950084, 'comment_body': ""I see, I didn't think about the case where you want to replace a file that _your_ file system does not support. Without removing them you couldn't do it at all.\r\n\r\n> One thing we could do is add the unescaped version and the escaped version (if it differs) to our candidate list.\r\n\r\nYes I like that. The original version should be first in the list which will still allow you to use special characters in 99% of cases (like my two examples). And for this one edge case where there's a character that your filesystem cannot handle then you're still good."", 'comment_created': datetime.datetime(2020, 7, 15, 10, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 456363731, 'comment_body': '*immediately* as in: the next time the file is requested?\r\nOr are you actively re-opening the file in the middle of an ongoing transfer?', 'comment_created': datetime.datetime(2020, 7, 17, 10, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Kriechi', 'type': 'User'}, {'comment_id': 456364884, 'comment_body': 'The inline span tags make the arrows not really nice to read in the raw `.md` file.\r\nAny chance you could include dummy tags or inline comments to pad all the arrows/lines correctly?', 'comment_created': datetime.datetime(2020, 7, 17, 10, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Kriechi', 'type': 'User'}, {'comment_id': 456379675, 'comment_body': 'There are three arguments in favor of keeping them at the start:\r\n\r\n- It matches the structure of natural language, e.g. ""Only for flows matching X replace Y with Z"".\r\n- For some reason we often use `/` as the separator in examples - maybe it\'s inspired by sed, I don\'t know. In any case, this clashes with replacement paths that contain slashes ( `/~m GET/foo/@~/foo.bin` works as expected, if we change argument order, `/foo/@~/foo.bin/~m GET` would be parsed wrongly)\r\n- Existing patterns continue to work as-is.\r\n\r\nNone of these arguments is particularly strong, but neither are the arguments for moving them to the end. I don\'t have a very strong opinion here in general, if you all feel strongly we can move them.', 'comment_created': datetime.datetime(2020, 7, 17, 11, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 456380579, 'comment_body': ""immediately as in the next time it is requested. I thought that'd be sufficiently clear here, isn't it?"", 'comment_created': datetime.datetime(2020, 7, 17, 11, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 456419252, 'comment_body': ""Maybe the second sentence is unnecessary? Why bother the reader with a behavior (caching) that we _didn't_ implement. It behaves as one would expect and everyone is happy."", 'comment_created': datetime.datetime(2020, 7, 17, 12, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 456419850, 'comment_body': ""No feelings at all, just making sure it wasn't overlooked as you were originally [in favor of it](https://github.com/mitmproxy/mitmproxy/issues/3948#issuecomment-648932541)"", 'comment_created': datetime.datetime(2020, 7, 17, 12, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 456420742, 'comment_body': ""How about we add a `Server: mitmproxy/MapLocal` (or whatever) header? When looking at the response in dev tools or similar it would make it super clear what's happening. Makes it a no-brainer to check if the mapping is correctly working."", 'comment_created': datetime.datetime(2020, 7, 17, 12, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 456422229, 'comment_body': 'Good point, we have [`version.MITMPROXY`](https://github.com/mitmproxy/mitmproxy/blob/master/mitmproxy/version.py#L7) for this.', 'comment_created': datetime.datetime(2020, 7, 17, 12, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 456424530, 'comment_body': 'We should also consider adding a debug log entry here ([like this](https://github.com/mitmproxy/mitmproxy/blob/master/examples/addons/log-events.py)) that explicitly names the files we tried. This involves a bit of refactoring to keep the list of everything we tried, but should work quite well. :)', 'comment_created': datetime.datetime(2020, 7, 17, 12, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 456425778, 'comment_body': 'What happens if the file being served is open in an editor and it gets saved in the middle of a transfer?', 'comment_created': datetime.datetime(2020, 7, 17, 12, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Kriechi', 'type': 'User'}, {'comment_id': 456426311, 'comment_body': 'Good idea, done.', 'comment_created': datetime.datetime(2020, 7, 17, 13, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 456426864, 'comment_body': 'Yeah I brought this up but agree with Max that its better to leave it as it is.', 'comment_created': datetime.datetime(2020, 7, 17, 13, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 456427308, 'comment_body': ':+1:, done', 'comment_created': datetime.datetime(2020, 7, 17, 13, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 456428402, 'comment_body': ""We just do `file.read_bytes()`, everything that breaks that we don't care about. Which reminds that we should have a test for file read errors. We shouldn't silently break on that and serve a 502/400 instead. :)"", 'comment_created': datetime.datetime(2020, 7, 17, 13, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 456530037, 'comment_body': ""That's a great idea, thanks. Done."", 'comment_created': datetime.datetime(2020, 7, 17, 15, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 456530998, 'comment_body': 'Good idea, I added it.', 'comment_created': datetime.datetime(2020, 7, 17, 15, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 456564467, 'comment_body': 'Hey @mhils, any idea how to test this code? Above we perform `is_dir()` and `is_file()`, with no chance to delete the file in between. Can we trigger the `IOError` somehow?', 'comment_created': datetime.datetime(2020, 7, 17, 17, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 456566090, 'comment_body': ""How about using pytest's monkeypatch functionality?"", 'comment_created': datetime.datetime(2020, 7, 17, 17, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 456584186, 'comment_body': 'Great, thanks.', 'comment_created': datetime.datetime(2020, 7, 17, 17, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}]","[{'commit_sha': '1b6b3cd96cf2966b888d9259e4e55935dca6e763', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7022a54737688318736aeda8d88a16b2f8207a21', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1609697cdf107bbf4f422e3d0a1cd61097fc7f4', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53644de82093a2b3fc810f422ed6455420dde80d', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55bba9265393a6f165dede7f8cf34df59ccaa663', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41c99810ef4cf00679394d6b1f812af40329e174', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8942ae88d507e4ed890ab35be69e37226d2f9511', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eca6dc4d1c948528db49fcc524bff3b00411f9d1', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe1b76bdef8e0b081d0ec84ee07deb91c8304cac', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '434538f11dc2b8ba889a63e01713fb5679902dd7', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bbcbacd68be297e0a0fdcc27ea60aed3f5f3d03', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3894b0f58fd7a9b24f467a44a187df41299453f', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8de8157450674f95c23e92fffbdb83cb4b9f026c', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '257c178bbe09c647b35126c42be0343773e51daf', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7781dcb15f2c3f87563d12ca9839ced0662c42d7', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6293004e0f66f92b49ee6e037aa768e0f7cc6f4', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f36dcd8915f0ac27eace2a2e066751888f21ee48', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '627a03c8e0696d22a796f3ca76a11ed94953719c', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '565cbb2504f91c81eb1c27c67800d1faee64259b', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3c809c45ab00284a4f7043ac5c4bdb358b7e4bb', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebf857a88e7c720d28d12fd1d645c2e0efb000e7', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c8a46253b8959e9e47b53b9d07dd84cce790940', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c98f12c4f3f48e239037a52f3c5dfef110dd797e', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb743c7da7dc33441d0c67f91724d15374dc5fed', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}]",Martin Plattner,1025800,git@mplattner.at,User,,36,,13,39
455855932,fix docs for Map* addons,"#### Description

minor fixes: remove not needed escaping; add note about http2 incompatibility.

#### Checklist

 - [ ] I have updated tests where applicable.
 - [ ] I have added an entry to the CHANGELOG.
",True,4102,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/4102,https://github.com/mitmproxy/mitmproxy/pull/4102,closed,5,4,1,1,0,0,1,0,[{'name': 'gsoc'}],2020-07-23 17:30:44+00:00,2020-07-27 13:28:09+00:00,331045.0,"3 days, 19:57:25",[],"[{'commit_sha': '6e210f14450dcbc0b023c0421f1e4b8c3980eb91', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Martin Plattner,1025800,git@mplattner.at,User,,36,,13,39
462151451,tutorial addon to improve onboarding new users,"#### Description

Added a draft of the tutorial addon.
To test the current state: start mitmproxy and open http://tutorial.mitm.it

refs #3142 

#### Tasks

- [x] Tutorial layout
- [x] Sample voting app
- [x] Tutorials: View flows / UI intro
- [x] Tutorials: Interception /  Modify
- [x] Tutorials: Replay
- [ ] Tutorials should be valid for `mitmproxy` and `mitmweb`
- [ ] Add tests

#### PR Checklist

 - [ ] I have updated tests where applicable.
 - [ ] I have added an entry to the CHANGELOG.
",False,4127,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/4127,https://github.com/mitmproxy/mitmproxy/pull/4127,closed,6734,0,49,23,29,14,1,0,[{'name': 'gsoc'}],2020-08-03 12:34:09+00:00,2020-09-03 16:14:13+00:00,2691604.0,"31 days, 3:40:04","[{'comment_id': 466177365, 'comment_body': ""Let's cut this paragraph. That is something we can list in next steps together with the next point, it doesn't matter for the tutorial itself."", 'comment_created': datetime.datetime(2020, 8, 6, 6, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 466177718, 'comment_body': ""This is funny, but too long. Alternative suggestion: _For this tutorial, we will look at the HTTP requests generated by our demonstration voting app on the right. Let's see if you can get your favorite pet some extra votes!_\r\n"", 'comment_created': datetime.datetime(2020, 8, 6, 6, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 466177968, 'comment_body': 'Let\'s move this to ""What\'s next?"". They don\'t know yet how to start mitmproxy, so that may be overwhelming 😄 ', 'comment_created': datetime.datetime(2020, 8, 6, 6, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 466178804, 'comment_body': ""Nit: I think using a badge here doesn't really work out. Maybe just `text-primary`?"", 'comment_created': datetime.datetime(2020, 8, 6, 6, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 466180003, 'comment_body': ""Where does the huge black border come from? If it's not too much effort I'd suggest we have no border here (and add an adjustable one using CSS if it looks better)"", 'comment_created': datetime.datetime(2020, 8, 6, 6, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 466180826, 'comment_body': ""Let's use `<kbd>`: https://getbootstrap.com/docs/4.5/content/code/#user-input\r\n\r\nIf we dislike the style we can change that with CSS, but that's much easier if we use a uniform semantic element. :)"", 'comment_created': datetime.datetime(2020, 8, 6, 6, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 466182729, 'comment_body': 'Let\'s go from concrete to the abstract: We can cut this paragraph and move the re-map part either to the end of the section, to ""What\'s next?"", or omit it entirely.', 'comment_created': datetime.datetime(2020, 8, 6, 6, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 466335029, 'comment_body': 'Good idea 👍 ', 'comment_created': datetime.datetime(2020, 8, 6, 11, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 466335769, 'comment_body': ""I'll check what works best. I agree that a badge might emphasize it too much and might be confusing."", 'comment_created': datetime.datetime(2020, 8, 6, 11, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 466336626, 'comment_body': 'Will replace screenshots with cleaner versions at the end. Border comes from setting `padding` to 30 in Windows Terminal - this was needed for my previous examples with tooltips (at the edge of the image for the focussed flow marker `>>`).', 'comment_created': datetime.datetime(2020, 8, 6, 11, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 466336798, 'comment_body': 'Great suggestion!', 'comment_created': datetime.datetime(2020, 8, 6, 11, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 466337301, 'comment_body': 'Fully agree, its a bit ""thrown in"" there and breaks the didactic ""flow"".', 'comment_created': datetime.datetime(2020, 8, 6, 11, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 468343286, 'comment_body': ""You can just pass `this.currentTime` (or I mean you need to keep a reference to the editor because it's not an arrow function) as first parameter and remove these calculations. No need to manually track time."", 'comment_created': datetime.datetime(2020, 8, 11, 5, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 470911570, 'comment_body': ""You are right, that's an unnecessarily complex implementation :) Thanks and sorry, I forgot to reply to this comment."", 'comment_created': datetime.datetime(2020, 8, 15, 0, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}]","[{'commit_sha': '445481f8d5fdd45aef8d71022ab3aeb5ee2e565b', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1bd5e81ec061d9ef8a2434d2994afe20ad71932', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfcb452731e13c22e39830705ead293ec4081190', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b30a24491b7c1334eee5c5403495d583191c837f', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f77240218c924aea5fed47c6738d44addc786736', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36b900bcb62dfa94da67b01b5d7d5d525de25828', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bb4477333ad74099907ba3785c21a05d199d1b2', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ace7e22ace238865f2c09520fa2d39761f3403d', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '395185fd8d2efc415bfc73dbc3d8aafd3c07e1b2', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1d879bf4f951a217e6b5b7b65dbee18e5ee760b', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c18b1c7dcbbbc7915917d4b38d6fb2f8d268ad32', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b35fa5c363fa684cb62657de29b7c6095875536e', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26176e8e488e6c8189cbfe9defbfb3544fffb318', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32c7afd9db26acb28c3f73d719dae206fa510ed2', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fabbf5bc2dc33865ff4919cef92e6d2b595bde14', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9df031dd39ad8516e7f32f304c66aadf287a144', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcd8b98d79d303389380c5aa925e96a3bb4afd83', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae78b88373b266c5f9990f5f65032a45e2704708', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7025d27879427756bbef7e67cac0ec25bd8e31a', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b9d9ed2ce9c1c25dc209264f13affb807d2003d', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '160c525197f0619944b83b7f2a2fe9d9f287e16b', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85ced37e19f2deec4eb9228f86decdadf7104f7b', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8ab8f09e46be1b7367bd868e6e202125cf1a258', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}]",Martin Plattner,1025800,git@mplattner.at,User,,36,,13,39
478739617,Add interactive tutorials to the documentation,"#### Description

Add interactive tutorials to the documentation using pre-recorded ascii casts. The recording is fully automated.

A preview is available at https://plattner.me/mp-docs/ under `mitmproxy Tutorial`

This PR supersedes PR #4127 

#### Todo

- [x] Merge classes `CliDirector` and `MitmCliDirector`
- [x] Restructure ToC of docs (esp. `Getting Started` and `Features`)
- [x] Polishing
- [ ] ~Add `Proxy Configuration` step (?)~

#### Checklist

 - [x] I have updated tests where applicable.
 - [x] I have added an entry to the CHANGELOG.
",True,4194,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/4194,https://github.com/mitmproxy/mitmproxy/pull/4194,closed,6526,168,35,14,10,14,1,0,[{'name': 'gsoc'}],2020-09-03 16:10:07+00:00,2020-09-07 16:30:16+00:00,346809.0,"4 days, 0:20:09","[{'comment_id': 483180697, 'comment_body': 'Nit: move comment down?', 'comment_created': datetime.datetime(2020, 9, 3, 18, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483184696, 'comment_body': ""Nit: Let's round times here, that gives nicer records. :)"", 'comment_created': datetime.datetime(2020, 9, 3, 18, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483189659, 'comment_body': 'I think we can make our life much easier here by 1) generally using `time.time()` instead of `datetime` and 2) using f-string formatting:\r\n```python3\r\nstart = time.time()\r\ntime.sleep(3 * random.random())\r\nnow = time.time()\r\nprint(f""{now-start:.2f}"")\r\n```', 'comment_created': datetime.datetime(2020, 9, 3, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483194895, 'comment_body': ""I think we can make typing much more human with some basic tweaks, see e.g. https://oxism.com/TuringType/. I personally wouldn't include the typos this demo is adding, but we can probably take some inspiration from their very simple timing algorithm: https://github.com/dmotz/TuringType/blob/7cdd0dcd2f0f2a098d623e38726ac23eada1a15e/turingtype.coffee#L44-L49"", 'comment_created': datetime.datetime(2020, 9, 3, 19, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483198497, 'comment_body': ""Shall we just use `--proxy` instead of `-x`? That maybe makes it a bit clearer (and we don't need an explanation)."", 'comment_created': datetime.datetime(2020, 9, 3, 19, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483203171, 'comment_body': 'Future work: Can we make writing playbooks easier by tokenizing `type`?\r\n\r\nHere\'s a simple example what I\'m thinking of:\r\n```python\r\ninput = ""foo<enter>bar<enter>""\r\n\r\nkeys = []\r\nfor i, k in enumerate(re.split(""[<>]"", input)):\r\nif i % 2:\r\n\tkeys.append(k)\r\nelse:\r\n\tkeys.extend(k)\r\nprint(keys)  # [\'f\', \'o\', \'o\', \'enter\', \'b\', \'a\', \'r\', \'enter\']\r\n```\r\n\r\nWe could eliminate the `count` argument (`d.type(3 * ""<left>""`) and also eat `.exec` (`d.type(""curl ...<enter>""`). Nothing that has to be part of this PR though if that delays shipping! 😃 \r\n', 'comment_created': datetime.datetime(2020, 9, 3, 19, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483205802, 'comment_body': '```suggestion\r\n```\r\n\r\nThis takes a bit long. Remove Tokyo and London?', 'comment_created': datetime.datetime(2020, 9, 3, 19, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483213999, 'comment_body': '```suggestion\r\n    d.message(""One such command shows the flow details, it is bound to the enter key."")\r\n```\r\nNot sure if this is too stupid, but is it clear that ↵ is enter?', 'comment_created': datetime.datetime(2020, 9, 3, 19, 44, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483215001, 'comment_body': '```suggestion\r\n    d.message(""Replace `Paris` with `Tokyo`."")\r\n```\r\n\r\nI mean I would suggest we use Innsbruck and Dunedin, but up to you. 😄 ', 'comment_created': datetime.datetime(2020, 9, 3, 19, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483228770, 'comment_body': 'Sure, I forgot that after adding more rules.', 'comment_created': datetime.datetime(2020, 9, 3, 20, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 483228888, 'comment_body': 'Great idea.', 'comment_created': datetime.datetime(2020, 9, 3, 20, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 483229069, 'comment_body': 'Yep, will change that. 👍 ', 'comment_created': datetime.datetime(2020, 9, 3, 20, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 483229525, 'comment_body': 'Hm. Both should be fine. We can also go with `ENTER`.', 'comment_created': datetime.datetime(2020, 9, 3, 20, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 483597066, 'comment_body': 'Great idea. Future work though 😄', 'comment_created': datetime.datetime(2020, 9, 4, 12, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}]","[{'commit_sha': 'b6d52fc8abf58a12128d4c1dba23e20655da0c52', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf9b001ccbc634959310665aa3c73b1ed4ec5025', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f434f91ffc3f7ff8caf1569b7599a80aa0d1d36', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '129c03e51a14c2ed95169b8ab24c009921b978a4', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd305c973f59edd376048d9db21d7f934f862ae96', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a465d9221531b982df27a7df03c0069596d4fa33', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8b2cc9df61195ea6f8dc9d54a92197313f8fb58', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34716b480d9107b12a2192d2410252b02562b398', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88d43b51bb99840766e58ac6fed3cebf4548aac9', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc47d69df989d6104174a2f97d00e582b63a465c', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed918cca870d1592d8ac0521b274cb8f2f4d62c6', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c087a47dd1043dfdd2baaa52adf3ab0f073bdf3', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b34eec4f7bddeb16b6fce3ac3774c11290059cba', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa6467e4c0ad3aa180e48803ad2277689411213', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}]",Martin Plattner,1025800,git@mplattner.at,User,,36,,13,39
440076650,Improve SetHeaders addon,"This PR improves the `SetHeaders` addon with 3 changes:

1) The flow-filter is now the last parameter in the configuration pattern, as it is optional.
2) The user can now remove existing headers by specifying an empty `header-value`.
3) Updated docs to reflect changes.

refs #3948 ",True,4043,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/4043,https://github.com/mitmproxy/mitmproxy/pull/4043,closed,209,170,9,6,3,0,1,0,[{'name': 'gsoc'}],2020-06-25 14:56:56+00:00,2020-06-25 16:33:40+00:00,5804.0,1:36:44,[],"[{'commit_sha': 'b6c70950c30a8d40d26669d2c3a7f5de9bab18fc', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccf7182a115bc45156c085fde082585bd0322eb6', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b90dded9404bd7fbbaffa4289af27a32eed30176', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a0365ea6805b758287f4efba29dc682bdb73e4e', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcffa674ba9f8cea904737d1c1450cfa98e76a6c', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '781e0a2e7c68659ecef882f2cf4dcf2dc5776738', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}]",Martin Plattner,1025800,git@mplattner.at,User,,36,,13,39
440082355,fix docs generation,"The docs generation fails with 2 errors on Ubuntu 18.04:

```
❯ modd
16:10:34: prep: build.sh
""build.sh"": executable file not found in $PATH
exit status 1
16:10:34: daemon: cd src; hugo server -D
>> starting...
Error: Error building site: TOCSS: failed to transform ""style.scss"" (text/x-scss): resource ""scss/style.scss_b95b077eb505d5c0aff805
5eaced30ad"" not found in file cache
Building sites … Built in 28 ms
exited: exit status 1
```

The first error from modd is fixed by adding `./`to the path.
The second error is fixed by using the extended version of hugo, see https://discourse.gohugo.io/t/tocss-ressource-not-found-in-file-cache/24858",True,4044,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/4044,https://github.com/mitmproxy/mitmproxy/pull/4044,closed,2,2,2,2,0,1,1,0,[{'name': 'gsoc'}],2020-06-25 15:05:54+00:00,2020-06-25 15:28:48+00:00,1374.0,0:22:54,"[{'comment_id': 445645898, 'comment_body': 'Obviously, good catch, thanks.', 'comment_created': datetime.datetime(2020, 6, 25, 15, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}]","[{'commit_sha': '527e5fcd22e83a5bb0fe9a1d3acb23de1296065f', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3885ebbd588d20ecc09b8e2c55a9211fa5129ee3', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}]",Martin Plattner,1025800,git@mplattner.at,User,,36,,13,39
440721455,Replace replacements addon with new modify body addon,"The new addon only replaces data in the body using `--modify-body`.

refs #3948 ",True,4046,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/4046,https://github.com/mitmproxy/mitmproxy/pull/4046,closed,489,567,22,13,15,25,1,0,[{'name': 'gsoc'}],2020-06-26 18:13:21+00:00,2020-07-02 13:02:38+00:00,499757.0,"5 days, 18:49:17","[{'comment_id': 446833382, 'comment_body': '`modify-body` -> `modify_body`', 'comment_created': datetime.datetime(2020, 6, 29, 7, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 446847221, 'comment_body': 'This fails for the existing options, see e.g. `"" or "".join(""--intercept"")`.', 'comment_created': datetime.datetime(2020, 6, 29, 8, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 446853646, 'comment_body': ""This looks suspiciously similar to `parse_modify_headers` now. We can probably just merge those two?\r\n\r\n - We can raise a plain `ValueError` here and re-raise an OptionsError in each addon with an individual error message.\r\n - Let's also include `strutils.escaped_str_to_bytes()` and `flowfilter.parse` here."", 'comment_created': datetime.datetime(2020, 6, 29, 8, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 446960854, 'comment_body': ""If there is only a single option as `str` in `REPLACEMENTS`, the string is put into a list in line 137.\r\nI've tested it (now again) and it does work. Am I missing something?\r\n\r\n```\r\n❯ mitmproxy -i\r\nusage: mitmproxy [options]\r\nmitmproxy: error: unrecognized arguments: -i\r\n\r\n-i is deprecated.\r\nPlease use `--intercept` instead.\r\n```"", 'comment_created': datetime.datetime(2020, 6, 29, 13, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 446972175, 'comment_body': ""Good idea. What's the preferred approach here? Have the function in one addon file and import it in the other?\r\n\r\nRegarding the bullet points:\r\n1) You mean a `ValueError` in the parse method and an `OptionsError` in the `Configure` method? Does that make sense here, i.e., having 2 subsequently thrown exceptions for the same error? (Trying to learn here, not to correct you :))\r\n2) These methods are now applied in `replace()`. You suggest to move them to the parse method, right?"", 'comment_created': datetime.datetime(2020, 6, 29, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447061239, 'comment_body': ""Yeah, I can't read. "", 'comment_created': datetime.datetime(2020, 6, 29, 15, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447066166, 'comment_body': '> Have the function in one addon file and import it in the other?\r\n\r\nyup, let\'s keep it simple. :)\r\n\r\n> You mean a ValueError in the parse method and an OptionsError in the Configure method? Does that make sense here, i.e., having 2 subsequently thrown exceptions for the same error? (Trying to learn here, not to correct you :))\r\n\r\nYes. The very Pythonic way would be to re-raise as follows:\r\n\r\n```python\r\ndef foo():\r\n    raise ValueError(""qux"")\r\n\r\ndef bar():\r\n    try:\r\n        foo()\r\n    except ValueError as e:\r\n        raise BarError(""cannot foo() today"") from e\r\n```\r\n\r\nThis ensure the following: 1) You can make sure that bar() only raises BarErrors. 2) You get a very nice chained traceback: \r\n\r\n```\r\nTraceback (most recent call last):\r\n  File ""<pyshell#55>"", line 3, in bar\r\n    foo()\r\n  File ""<pyshell#49>"", line 2, in foo\r\n    raise ValueError(""qux"")\r\nValueError: qux\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File ""<pyshell#56>"", line 1, in <module>\r\n    bar()\r\n  File ""<pyshell#55>"", line 5, in bar\r\n    raise BarError(""cannot foo() today"") from e\r\nBarError: cannot foo() today\r\n```\r\n\r\n> These methods are now applied in replace(). You suggest to move them to the parse method, right?\r\n\r\nYes. Reading from file should stay inside replace() however, it can be very useful that file contents are not cached. :)', 'comment_created': datetime.datetime(2020, 6, 29, 15, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447642692, 'comment_body': '`modify-body` is correct. `argparse` replaces `_` with `-`.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447724841, 'comment_body': 'Done. Please check.\r\n\r\nI haven\'t moved `flowfilter.parse` to the `parse_modify_hook` method as then the thrown `ValueError` is ambigous, i.e., when executing `parse_modify_hook` again in the `configure` method to re-raise the exception, we\'d have to check the error message to determine whether the `ValueError` was caused by an invalid ""/.../.../..."" option or by an invalid flow filter.\r\nHope this makes sense.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447725718, 'comment_body': 'Does this line do anything useful?', 'comment_created': datetime.datetime(2020, 6, 30, 14, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447725753, 'comment_body': ""We auto-translate `_` to `-` for command line arguments, yes. However, `modify_body` is what you would set in your config.yaml or in mitmproxy's options editor, and what we consistently use in our docs (see https://docs.mitmproxy.org/stable/concepts-options/). You could also do `--set modify_body=...` for that matter. The inconsistency is a bit ugly, but there really aren't many better options around."", 'comment_created': datetime.datetime(2020, 6, 30, 14, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447726235, 'comment_body': ""(if you have any ideas on how we could have this more consistent, I'd love to hear them - what we currently have is the best solution we came up with so far)"", 'comment_created': datetime.datetime(2020, 6, 30, 14, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447726357, 'comment_body': 'Does this line do anything useful? Same for the last line of this test.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447732593, 'comment_body': 'Generally speaking, having this line here asserts that it runs without error. In an ideal world, you would probably also check that the addon has parsed it properly, but ""doesn\'t error"" can sometimes be good enough.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447733829, 'comment_body': ""Let me be a bit pendantic here - this comment doesn't make too much sense to me:\r\n\r\n - `.modify_body` would indicate that there's a modify_body attribute. As far as I can see, there isn't?\r\n - If we want to document the type of `.lst` (that thing could probably be renamed, yes...), it would make sense to do this at the definition and not here. I'll add some ideas on how we can do this better in the next comment."", 'comment_created': datetime.datetime(2020, 6, 30, 14, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447741371, 'comment_body': 'Makes sense, thanks.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447744445, 'comment_body': ""If we re-use this (which is good 👍), we should probably signal somehow that it's not just headers. We can also add a bit more type information to make things easier to grasp:\r\n\r\n```python\r\nclass ModifySpec(typing.NamedTuple):\r\n    matches: flowfilter.TFilter,\r\n    match_str: str\r\n    key: bytes  # those could potentially have better names if you can think of some\r\n    replacement: bytes\r\n\r\n\r\ndef parse_modify_spec(s: str) -> ModifySpec:\r\n    # ...\r\n    filter = flowfilter.parse(filter_str)\r\n    return ModifySpec(filter, filter_str, header_name, header_value)\r\n```\r\n\r\nthen, below:\r\n```python\r\nclass ModifyHeaders:\r\n    def __init__(self):\r\n        replacements: List[ModifySpec] = []    # replaces self.lst\r\n    \r\n    # ...\r\n    \r\n    def run(self, f, hdrs):\r\n        for spec in self.replacements:\r\n            if spec.matches(f):\r\n                hdrs.pop(spec.key, None)\r\n```\r\n\r\nI realize this is just a very rough sketch. Does it make sense anyway?"", 'comment_created': datetime.datetime(2020, 6, 30, 14, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447746122, 'comment_body': 'Thanks for clarification.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447750140, 'comment_body': 'It might make sense to inform the user when underscore-formatted options are used as a cli argument, similar to the messages on deprecated commands.\r\nAt the moment it outputs: `mitmproxy: error: unrecognized arguments: --modify_body asdf`.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447751325, 'comment_body': 'Make this `f""Cannot parse modify_body option {rep}: {e}""` to include the ValueError\'s message, then move the checks below into `parse_modify_hook` and make their messages generic (`""Invalid modify_body flow filter: %s"" % flow_filter_pattern` -> `Invalid filter pattern: {pattern}`). This should solve the problem mentioned in https://github.com/mitmproxy/mitmproxy/pull/4046#discussion_r447724841, or am I misunderstanding things? :)', 'comment_created': datetime.datetime(2020, 6, 30, 14, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447753345, 'comment_body': ""Agreed, that's actually a really good point! Let's track this in #4054."", 'comment_created': datetime.datetime(2020, 6, 30, 15, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 447755980, 'comment_body': ""I agree. This comment existed in the existing `Replace` addon and I didn't change it properly."", 'comment_created': datetime.datetime(2020, 6, 30, 15, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447779840, 'comment_body': 'Great idea, thanks 🙌', 'comment_created': datetime.datetime(2020, 6, 30, 15, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 447781655, 'comment_body': 'Yep I guess this makes sense :) Thanks.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 448299243, 'comment_body': ""I'm not sure what should be escaped here. Comments seems to be from you, @mhils "", 'comment_created': datetime.datetime(2020, 7, 1, 11, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}]","[{'commit_sha': '29f0bd02761217db122b0cdccf0f98624cd817ca', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b608b0ef3e8dfa79bc4f6808475321714ac802da', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96e756ead0c42d237bbba21855c831b48a63fcb9', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b263b0decef36564b153cd5ef95a7f4fa26d7796', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cffbec291a4b672cea86b5351acdca05a46cb2f', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48dcc6e073a6097157c405c3e8cd89867d5952b3', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a124793998a4ee52818c4d004ce213e578e3fea', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ed77707162ce94773bd0e3c03e35ac7e49a856f', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a408c93797d0ef22eb36a4db56e2d9191585ca5', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a4933eb9deb0c82c3ddf2b821cae88219c755a7', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aee1b812600b4f95472cf39b3973b6a5f4f971ed', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a782bb47a776ff74de6a3101f3428c73cb1b5204', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe662b42823ce559d92f7239dd287e2465732d85', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}]",Martin Plattner,1025800,git@mplattner.at,User,,36,,13,39
444033254,add mapremote addon to modify request URLs,"#### Description

Added a new addon (`MapRemote`) to rewrite URLs of requests before the request is performed.

refs #3948 

#### Checklist

 - [x] I have updated tests where applicable.
 - [x] I have added an entry to the CHANGELOG.
",True,4060,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/4060,https://github.com/mitmproxy/mitmproxy/pull/4060,closed,203,21,6,3,0,5,1,0,[{'name': 'gsoc'}],2020-07-03 12:29:10+00:00,2020-07-03 17:08:11+00:00,16741.0,4:39:01,"[{'comment_id': 449589370, 'comment_body': 'The URL is surrogate-escaped UTF-8, so we should do `obj.pretty_url.encode(""utf8"", ""surrogateescape"")`. We\'re doing a bit of a weird encoding dance here that\'s tricky to explain, but `escaped_str_to_bytes` would interpret escape sequences in a URL as raw bytes, which would fail in some edge cases.', 'comment_created': datetime.datetime(2020, 7, 3, 13, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 449599309, 'comment_body': 'Two problems here:\r\n* pattern is parsed incorrectly due to the separator `:` together with the skipped flow filter and the `:` in `https:`. it should instead be `""|.*\\.jpg$|https://placedog.net/640/480?random""`\r\n* using a image placeholder service that does not support http2 does not work for websites that do use http2. I debugged this for a while yesterday and then decided to ditch the image placeholder example but use `example.org/image.jpg`. we might want to put a note in the docs (or try to fix the issue, albeit I don\'t think this problem is a common use case.)', 'comment_created': datetime.datetime(2020, 7, 3, 14, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 449599479, 'comment_body': 'other than that, great improvements to the docs :)', 'comment_created': datetime.datetime(2020, 7, 3, 14, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 449600403, 'comment_body': ""Good catch on the pattern. 👍 \r\n\r\nThe HTTP2 issue is a super annoying one, which we'll hopefully be able to fix with sans-io. Let's put in a general note for the addon for now."", 'comment_created': datetime.datetime(2020, 7, 3, 14, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 449604719, 'comment_body': 'Do you think this is what causes the failing unit test on windows? (e.g. `TestMapRemoteFile`; see https://github.com/mitmproxy/mitmproxy/pull/4046#issuecomment-652938102)', 'comment_created': datetime.datetime(2020, 7, 3, 14, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}]","[{'commit_sha': '89fad1e2b1a5a84672aa22e128c39165059351c9', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '417c213dd720312ba554c5bb7c258fe65fe4e52a', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cee4da4e8c1600119115cd624bdbea3da7e0d6f2', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}]",Martin Plattner,1025800,git@mplattner.at,User,,36,,13,39
445446375,MapLocal addon,"#### Description

Draft for the `MapLocal` addon.
`MapLocal.file_candidates()` generates possible paths to serve instead of the original resource, also see the tests to understand what it does.
`subject` (regex pattern on the url) is only used to determine whether a request should be modified, but `subject` does not affect the file candidates currently.
Hope this makes sense, here is an example:

Request URL = https://example.org/img/topic/subtopic/test.jpg
Map Local option = `:/img/jpg:~/local`
File candidates are:

* ~/local/img/topic/subtopic/test.jpg
* ~/local/img/topic/test.jpg
* ~/local/img/test.jpg
* ~/local/test.jpg

Basic functionality is already working, e.g. with `mitmproxy --map-local "":jpg:~/img""` to try to serve all URLs containing `jpg` from `~/img`.
However, overall this is just an early draft that needs several improvements and clean-up.

#### Checklist

 - [ ] I have updated tests where applicable.
 - [ ] I have added an entry to the CHANGELOG.
",True,4069,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/4069,https://github.com/mitmproxy/mitmproxy/pull/4069,closed,511,131,13,24,6,74,1,0,[{'name': 'gsoc'}],2020-07-07 14:20:49+00:00,2020-07-18 12:24:47+00:00,943438.0,"10 days, 22:03:58","[{'comment_id': 451371138, 'comment_body': ""Let's make sure that we use type annotations where it's easily possible. :)\r\nWe also really want to return Path objects, not str."", 'comment_created': datetime.datetime(2020, 7, 8, 8, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451372638, 'comment_body': ""This doesn't fly - we say `replacement` is a str, so we can't just make it a `Path` here. I think this needs to happen on-demand in the maplocal addon."", 'comment_created': datetime.datetime(2020, 7, 8, 8, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451376108, 'comment_body': 'I would move the `is_file` and `is_dir` check directly into `request` and invoke `file_candidates` only for directories. Then we can make sure that there are no decisions involving I/O in `file_candidates`, which makes it easier to test.\r\n\r\nAlso, we can make this @staticmethod or move it out of the addon (I personally prefer the latter, but YMMV). This thing is complex, so we want to reduce the complexity of the mental model one needs to build as much as possible.', 'comment_created': datetime.datetime(2020, 7, 8, 8, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451376422, 'comment_body': ""See comment above: Eliminate I/O, then we don't need tmpdir."", 'comment_created': datetime.datetime(2020, 7, 8, 8, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451381201, 'comment_body': 'We can make this (and test_sanitize_candidate_path) nicer with pytest\'s parametrize (see [here](https://github.com/mitmproxy/mitmproxy/blob/a802899491ba87218d7878bc4ac73dcf59c9275e/test/mitmproxy/test_command_lexer.py) for example):\r\n```python\r\n@pytest.mark.parametrize(""url,spec,expected_candidates"", [\r\n(\r\n    ""https://example.org/foo/bar.jpg"", \r\n    "":example.com/foo:/tmp"", \r\n    [""/tmp/bar.jpg"", ...]\r\n),\r\n])\r\ndef test_file_candidates(url: str, spec: str, expected_candidates: List[str]):\r\n    spec = parse_modify_spec(spec, True, True)\r\n    candidates = file_candidates(url, spec)\r\n    assert [str(x) for x in candidates] == expected_candidates\r\n```', 'comment_created': datetime.datetime(2020, 7, 8, 8, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451401395, 'comment_body': ""Here's some existing work on that problem:\r\n\r\n - I believe this is what Flask/werkzeug is doing: https://github.com/pallets/werkzeug/blob/0d0d1e7263013c4e14750d8fb91984cf1584e0e0/src/werkzeug/security.py#L202\r\nhttps://github.com/pallets/werkzeug/blob/09a248649069780b4adfb910fb69f6fb304f2ea3/tests/test_security.py#L69-L82\r\n - And here's aiohttp: https://github.com/aio-libs/aiohttp/blob/2a924cae6c19dbbfde220bbd461fc446764ad156/aiohttp/web_urldispatcher.py#L585"", 'comment_created': datetime.datetime(2020, 7, 8, 9, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451402090, 'comment_body': ""`'application/octet-stream'` is a bit more useful. The stuff that generally isn't recognized is binary blobs, which should trigger a download. :)"", 'comment_created': datetime.datetime(2020, 7, 8, 9, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451411253, 'comment_body': ""Looking closer at this, it might actually be the best approach to just call werkzeug's [safe_join](https://werkzeug.palletsprojects.com/en/1.0.x/utils/?highlight=safe_join#werkzeug.security.safe_join). We could then also already call sanitization in `file_candidates` so that it only returns a list of safe paths. What do you think?"", 'comment_created': datetime.datetime(2020, 7, 8, 9, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451416605, 'comment_body': 'Good idea!', 'comment_created': datetime.datetime(2020, 7, 8, 9, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 451577249, 'comment_body': 'Do we consider a symlink in the user-provided base-dir to a target outside of base-dir a problem?\r\nE.g., the user provides `/local` and the symlink /local/mylink -> /etc/. To consider this we _do_ need I/O access to sanitize paths.', 'comment_created': datetime.datetime(2020, 7, 8, 14, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 451577371, 'comment_body': 'The parametrization is really cool, thanks!', 'comment_created': datetime.datetime(2020, 7, 8, 14, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 451578468, 'comment_body': ""Hm, I see your point in removing I/O, but doesn't this complicate testing due to different path separators being used on Unix vs. Windows? I.e., on Windows we might want to test `:jpg:c:\\\\repl`, while on Linux it would be `:jpg:/repl`, leading to differing candidate paths.\r\nThus, to have real cross-platform tests, we need to have OS-level parametrization. Maybe I'm over-complicating stuff.\r\nWill look at this more closely in the evening."", 'comment_created': datetime.datetime(2020, 7, 8, 14, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 451579627, 'comment_body': ""I think that's fine. If a user explicitly symlinks that, it may as well work. No need to check the filesystem."", 'comment_created': datetime.datetime(2020, 7, 8, 14, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451580891, 'comment_body': 'We can probably use `./static` as our test path? That should behave the same way cross-platform.', 'comment_created': datetime.datetime(2020, 7, 8, 14, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451580923, 'comment_body': 'Yes, I agree. :+1: ', 'comment_created': datetime.datetime(2020, 7, 8, 14, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 451582178, 'comment_body': ""Sure. I didn't know if we aim for tests that explicitly test differences between Unix and Windows (as dealing with paths and path sanitization can be security critical.)"", 'comment_created': datetime.datetime(2020, 7, 8, 14, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 451854446, 'comment_body': 'Hm, Windows and OSX tests for `MapLocal` fail due to the `resolve()` and the obviously non-existing `/tmp` path that the `test_file_candidates` test uses. We do this similarly for the other ""replacement"" addons when an option with `@path` is provided (see https://github.com/mitmproxy/mitmproxy/blob/master/mitmproxy/addons/modifyheaders.py#L26), but `parse_modify_spec()` is never tested with an `@path` option. Therefore it\'s not an issue there.\r\n\r\nShould I move the `resolve()` check outside of `parse_modify_spec()` or use the `tmpdir` of pytest?', 'comment_created': datetime.datetime(2020, 7, 8, 22, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 451966580, 'comment_body': 'Is that check necessary here? I thought file_candidates gives us sanitized paths.', 'comment_created': datetime.datetime(2020, 7, 9, 5, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451966906, 'comment_body': 'I would probably try `tmpdir`, but either option works for me :)\r\n\r\n_Edit:_ Not sure why this is shown here in isolation, this is a reply to https://github.com/mitmproxy/mitmproxy/pull/4069#discussion_r451854446', 'comment_created': datetime.datetime(2020, 7, 9, 5, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451967981, 'comment_body': ""I'm not sure if I understand this pattern. Why are we supposed to match here if `/foo` is in the subject?"", 'comment_created': datetime.datetime(2020, 7, 9, 5, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451969130, 'comment_body': 'I\'m really not convinced that this form of patterns make much sense, same goes for the one below. What\'s the use case here? IMO the main point here is to specify URL prefixes, mapping all URLs that match ""org"" onto a folder seems really far fetched. Am I missing something?', 'comment_created': datetime.datetime(2020, 7, 9, 5, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451969568, 'comment_body': 'We should have a better test coverage here. How about varying prefix subjects (`example.com`, `example.com/foo`, `example.com/foo/`) and URLs including query strings, for example?', 'comment_created': datetime.datetime(2020, 7, 9, 5, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451969767, 'comment_body': ""If we want to operate on path components, there's already `flow.request.path_components`. Intuitively I feel that this may work better matching on substrings, but if we get tests passing with this, we're good of course. :)"", 'comment_created': datetime.datetime(2020, 7, 9, 5, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 451970669, 'comment_body': ""nit: let's keep accepting a Path here and only `str()` before we `safe_join`. We really want to work on Path objects, hopefully safe_join does support them at some point as well."", 'comment_created': datetime.datetime(2020, 7, 9, 5, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452181560, 'comment_body': ""Oh, you're right, the `base_path in candidate.parents` is not needed as `safe_join` should only return paths that are within `base_path`.\r\nThe `candidate.is_file()`, however, is needed as we perform no I/O to check if this file exists up to this point."", 'comment_created': datetime.datetime(2020, 7, 9, 12, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452183785, 'comment_body': ""You're right, this wouldn't match in the `request` method, but `file_candidates` does not consider `subject`, so it's technically a valid test. It is confusing though, I'll change it (also see next comment). "", 'comment_created': datetime.datetime(2020, 7, 9, 12, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452183951, 'comment_body': ""Yes, we're on the same page then. 👍 😃 "", 'comment_created': datetime.datetime(2020, 7, 9, 12, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452184974, 'comment_body': ""I agree, I didn't use particular useful or common use-case patterns, but just some that test the functionality.\r\nWill replace them with more useful patterns, e.g., the ones I used in the docs."", 'comment_created': datetime.datetime(2020, 7, 9, 12, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452185981, 'comment_body': 'Good idea, will change it.', 'comment_created': datetime.datetime(2020, 7, 9, 12, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452803046, 'comment_body': 'Having separate specs is a good idea, it got a bit messy trying to use the `ModifySpec` for the `Map*` addons. :+1: ', 'comment_created': datetime.datetime(2020, 7, 10, 12, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452803435, 'comment_body': 'Why the double indentation?', 'comment_created': datetime.datetime(2020, 7, 10, 12, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452803684, 'comment_body': '`assert m` instead of a `if m:` block?', 'comment_created': datetime.datetime(2020, 7, 10, 12, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452804933, 'comment_body': 'Most filesystems support more characters than `r""[^0-9a-zA-Z-_.=(),/]""`, but this should be fine for most use cases and common file names ;)\r\nDoesn\'t the `-` in `Z-_` need escaping with a `\\`?', 'comment_created': datetime.datetime(2020, 7, 10, 12, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452806318, 'comment_body': 'Minor: You changed this back from `replacement` to `replacement_str`.\r\nWhy include the type only for this one, and not for e.g. the subject? In `MapRemoteSpec` we use `replacement`.', 'comment_created': datetime.datetime(2020, 7, 10, 12, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452807400, 'comment_body': ""Shouldn't this allow that `example.com/foo`is a file that I want to map to /tmp/foo?"", 'comment_created': datetime.datetime(2020, 7, 10, 12, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452808397, 'comment_body': ""Ideally I would call it `_replacement` but NamedTuple doesn't like that. The idea is that you don't want to access `replacement_str` directly, but always use `read_replacement()`. "", 'comment_created': datetime.datetime(2020, 7, 10, 12, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452808669, 'comment_body': 'This works fine, but probably a good call to add a `\\` for clarity.', 'comment_created': datetime.datetime(2020, 7, 10, 12, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452808882, 'comment_body': ""We can assert here because we already check for a match in `request`, but I'll quickly refactor this."", 'comment_created': datetime.datetime(2020, 7, 10, 12, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452808958, 'comment_body': 'PyCharm Bug. 🤷 ', 'comment_created': datetime.datetime(2020, 7, 10, 12, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452809654, 'comment_body': 'Then you should specify `:example.com/foo:/tmp/foo` or  `:example.com/:/tmp/foo`, no?', 'comment_created': datetime.datetime(2020, 7, 10, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452895977, 'comment_body': 'Here you assume that the user provides a regex that starts with the path (and an optional hostname).\r\nAssumeing the URL is `https://example/foo/bar/baz.jpg` and subject is `:/bar/baz:/tmp`, then the determined suffix is`.jpg`, which does not make sense. Are we ok with that and state in the docs that the regex should start with `hostname/path-prefix`?', 'comment_created': datetime.datetime(2020, 7, 10, 14, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452913052, 'comment_body': 'I think it should be possible to specify `:/foo/bar/baz.jpg:/tmp/baz.jpg` to map `https://example.com/foo/bar/baz.jpg` to `/tmp/baz.jpg`. Currently that does not work.', 'comment_created': datetime.datetime(2020, 7, 10, 15, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452923420, 'comment_body': ""Why doesn't that work? That's a single file, so it shouldn't go through file_candidates at all."", 'comment_created': datetime.datetime(2020, 7, 10, 15, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452926261, 'comment_body': ""My bad, you're right. I tested the patterns with the `test_file_candidates` method."", 'comment_created': datetime.datetime(2020, 7, 10, 15, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 452934988, 'comment_body': ""I think the best way to document that is state that the pattern splits the URL, and the part right of the pattern is appended to the directory. It would be cool to have two simple colored examples like this:\r\n\r\n```\r\nHTTP Request:  https://example.com/foo/bar/qux.jpg?timestamp=123\r\n                              ▲             │\r\nURL Regex: example.com/foo   ─┘             │\r\n                                            ▼\r\nServed File:                  ~/static/bar/qux.jpg\r\n```\r\n\r\n```\r\nHTTP Request:  https://example.com/view?id=1\r\n                                 ▲     │\r\nURL Regex: example.com/(.+)     ─┘     │\r\n                                       ▼\r\nServed File:              ~/static/view_id=1\r\n```\r\n\r\nUnfortunately I can't color here, but hopefully it gets the point across. :-)"", 'comment_created': datetime.datetime(2020, 7, 10, 16, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452937142, 'comment_body': ""Talking about examples:\r\n\r\n- we should probably list one example with `:~m GET:` to illustrate the point of the flow filter.\r\n- We could consider discussing regex lookaheads here. I'm not sure what's simpler, do we prefer `:example.com/(?=.+\\.jpg$):~/images` or `:~u .jpg$:example.com/:~/images`? I guess both would get the job done. :)"", 'comment_created': datetime.datetime(2020, 7, 10, 16, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 452956171, 'comment_body': ""Good idea. For your second example, the regex should be `example.com/` or `example.org` I think. Will put a colored ASCII example in the docs, or did you think of an image?\r\nRegarding examples: I think lookaheads often make regexes hard to read. Using the flow filter might be confusing as well, the user might wonder what's the purpose of the url-regex. But yes, both variants get the job done. Will think about it.\r\n"", 'comment_created': datetime.datetime(2020, 7, 10, 16, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 454916477, 'comment_body': ""What about putting the optional filter at the end? Not sure how the discussion in #3948 ended, it's the same in #4060"", 'comment_created': datetime.datetime(2020, 7, 15, 9, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 454925965, 'comment_body': ""Should we move `parse_spec` to a utility or something? It's semi-odd to import something from an unrelated addon, or is it just me?"", 'comment_created': datetime.datetime(2020, 7, 15, 9, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 454935556, 'comment_body': ""Is there a way to make `filé.jpg` or `spa ce.jpg` work? I'm having a folder with three files, those two and `file.jpg` (without the special character). Only `file.jpg` works even though both my filesystem and the url allow special characters or spaces in names.\r\n\r\nI guess at some point `url` or at least the path needs to be URL decoded."", 'comment_created': datetime.datetime(2020, 7, 15, 9, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 454936725, 'comment_body': 'URL decode `suffix` here? What exactly is the intent of removing the special characters?', 'comment_created': datetime.datetime(2020, 7, 15, 10, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 454937145, 'comment_body': 'This causes\r\n\r\n```\r\nspa%20ce.jpg -> spa_20ce.jpg\r\n```\r\n\r\ninstead of `spa ce.jpg`', 'comment_created': datetime.datetime(2020, 7, 15, 10, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 454947102, 'comment_body': ""urldecode: yes. Let's fix that and add a test.\r\n\r\nSpecial characters: Some characters are not valid in filenames, hence we want to escape them so that those files can be represented (e.g., `?` on Windows). This very much varies across OSes unfortunately, I think we don't feel like special-casing everything here. One thing we could do is add the unescaped version and the escaped version (if it differs) to our candidate list. What do you think?"", 'comment_created': datetime.datetime(2020, 7, 15, 10, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 454947499, 'comment_body': ""Ok, let's move this to `mitmproxy/utils/spec.py`"", 'comment_created': datetime.datetime(2020, 7, 15, 10, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 454950084, 'comment_body': ""I see, I didn't think about the case where you want to replace a file that _your_ file system does not support. Without removing them you couldn't do it at all.\r\n\r\n> One thing we could do is add the unescaped version and the escaped version (if it differs) to our candidate list.\r\n\r\nYes I like that. The original version should be first in the list which will still allow you to use special characters in 99% of cases (like my two examples). And for this one edge case where there's a character that your filesystem cannot handle then you're still good."", 'comment_created': datetime.datetime(2020, 7, 15, 10, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 456363731, 'comment_body': '*immediately* as in: the next time the file is requested?\r\nOr are you actively re-opening the file in the middle of an ongoing transfer?', 'comment_created': datetime.datetime(2020, 7, 17, 10, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Kriechi', 'type': 'User'}, {'comment_id': 456364884, 'comment_body': 'The inline span tags make the arrows not really nice to read in the raw `.md` file.\r\nAny chance you could include dummy tags or inline comments to pad all the arrows/lines correctly?', 'comment_created': datetime.datetime(2020, 7, 17, 10, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Kriechi', 'type': 'User'}, {'comment_id': 456379675, 'comment_body': 'There are three arguments in favor of keeping them at the start:\r\n\r\n- It matches the structure of natural language, e.g. ""Only for flows matching X replace Y with Z"".\r\n- For some reason we often use `/` as the separator in examples - maybe it\'s inspired by sed, I don\'t know. In any case, this clashes with replacement paths that contain slashes ( `/~m GET/foo/@~/foo.bin` works as expected, if we change argument order, `/foo/@~/foo.bin/~m GET` would be parsed wrongly)\r\n- Existing patterns continue to work as-is.\r\n\r\nNone of these arguments is particularly strong, but neither are the arguments for moving them to the end. I don\'t have a very strong opinion here in general, if you all feel strongly we can move them.', 'comment_created': datetime.datetime(2020, 7, 17, 11, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 456380579, 'comment_body': ""immediately as in the next time it is requested. I thought that'd be sufficiently clear here, isn't it?"", 'comment_created': datetime.datetime(2020, 7, 17, 11, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 456419252, 'comment_body': ""Maybe the second sentence is unnecessary? Why bother the reader with a behavior (caching) that we _didn't_ implement. It behaves as one would expect and everyone is happy."", 'comment_created': datetime.datetime(2020, 7, 17, 12, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 456419850, 'comment_body': ""No feelings at all, just making sure it wasn't overlooked as you were originally [in favor of it](https://github.com/mitmproxy/mitmproxy/issues/3948#issuecomment-648932541)"", 'comment_created': datetime.datetime(2020, 7, 17, 12, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 456420742, 'comment_body': ""How about we add a `Server: mitmproxy/MapLocal` (or whatever) header? When looking at the response in dev tools or similar it would make it super clear what's happening. Makes it a no-brainer to check if the mapping is correctly working."", 'comment_created': datetime.datetime(2020, 7, 17, 12, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 456422229, 'comment_body': 'Good point, we have [`version.MITMPROXY`](https://github.com/mitmproxy/mitmproxy/blob/master/mitmproxy/version.py#L7) for this.', 'comment_created': datetime.datetime(2020, 7, 17, 12, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 456424530, 'comment_body': 'We should also consider adding a debug log entry here ([like this](https://github.com/mitmproxy/mitmproxy/blob/master/examples/addons/log-events.py)) that explicitly names the files we tried. This involves a bit of refactoring to keep the list of everything we tried, but should work quite well. :)', 'comment_created': datetime.datetime(2020, 7, 17, 12, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 456425778, 'comment_body': 'What happens if the file being served is open in an editor and it gets saved in the middle of a transfer?', 'comment_created': datetime.datetime(2020, 7, 17, 12, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Kriechi', 'type': 'User'}, {'comment_id': 456426311, 'comment_body': 'Good idea, done.', 'comment_created': datetime.datetime(2020, 7, 17, 13, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 456426864, 'comment_body': 'Yeah I brought this up but agree with Max that its better to leave it as it is.', 'comment_created': datetime.datetime(2020, 7, 17, 13, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 456427308, 'comment_body': ':+1:, done', 'comment_created': datetime.datetime(2020, 7, 17, 13, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 456428402, 'comment_body': ""We just do `file.read_bytes()`, everything that breaks that we don't care about. Which reminds that we should have a test for file read errors. We shouldn't silently break on that and serve a 502/400 instead. :)"", 'comment_created': datetime.datetime(2020, 7, 17, 13, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 456530037, 'comment_body': ""That's a great idea, thanks. Done."", 'comment_created': datetime.datetime(2020, 7, 17, 15, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 456530998, 'comment_body': 'Good idea, I added it.', 'comment_created': datetime.datetime(2020, 7, 17, 15, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 456564467, 'comment_body': 'Hey @mhils, any idea how to test this code? Above we perform `is_dir()` and `is_file()`, with no chance to delete the file in between. Can we trigger the `IOError` somehow?', 'comment_created': datetime.datetime(2020, 7, 17, 17, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 456566090, 'comment_body': ""How about using pytest's monkeypatch functionality?"", 'comment_created': datetime.datetime(2020, 7, 17, 17, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 456584186, 'comment_body': 'Great, thanks.', 'comment_created': datetime.datetime(2020, 7, 17, 17, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}]","[{'commit_sha': '1b6b3cd96cf2966b888d9259e4e55935dca6e763', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7022a54737688318736aeda8d88a16b2f8207a21', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1609697cdf107bbf4f422e3d0a1cd61097fc7f4', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53644de82093a2b3fc810f422ed6455420dde80d', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55bba9265393a6f165dede7f8cf34df59ccaa663', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41c99810ef4cf00679394d6b1f812af40329e174', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8942ae88d507e4ed890ab35be69e37226d2f9511', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eca6dc4d1c948528db49fcc524bff3b00411f9d1', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe1b76bdef8e0b081d0ec84ee07deb91c8304cac', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '434538f11dc2b8ba889a63e01713fb5679902dd7', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bbcbacd68be297e0a0fdcc27ea60aed3f5f3d03', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3894b0f58fd7a9b24f467a44a187df41299453f', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8de8157450674f95c23e92fffbdb83cb4b9f026c', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '257c178bbe09c647b35126c42be0343773e51daf', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7781dcb15f2c3f87563d12ca9839ced0662c42d7', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6293004e0f66f92b49ee6e037aa768e0f7cc6f4', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f36dcd8915f0ac27eace2a2e066751888f21ee48', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '627a03c8e0696d22a796f3ca76a11ed94953719c', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '565cbb2504f91c81eb1c27c67800d1faee64259b', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3c809c45ab00284a4f7043ac5c4bdb358b7e4bb', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebf857a88e7c720d28d12fd1d645c2e0efb000e7', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c8a46253b8959e9e47b53b9d07dd84cce790940', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c98f12c4f3f48e239037a52f3c5dfef110dd797e', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb743c7da7dc33441d0c67f91724d15374dc5fed', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}]",Martin Plattner,1025800,git@mplattner.at,User,,36,,13,39
455855932,fix docs for Map* addons,"#### Description

minor fixes: remove not needed escaping; add note about http2 incompatibility.

#### Checklist

 - [ ] I have updated tests where applicable.
 - [ ] I have added an entry to the CHANGELOG.
",True,4102,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/4102,https://github.com/mitmproxy/mitmproxy/pull/4102,closed,5,4,1,1,0,0,1,0,[{'name': 'gsoc'}],2020-07-23 17:30:44+00:00,2020-07-27 13:28:09+00:00,331045.0,"3 days, 19:57:25",[],"[{'commit_sha': '6e210f14450dcbc0b023c0421f1e4b8c3980eb91', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Martin Plattner,1025800,git@mplattner.at,User,,36,,13,39
462151451,tutorial addon to improve onboarding new users,"#### Description

Added a draft of the tutorial addon.
To test the current state: start mitmproxy and open http://tutorial.mitm.it

refs #3142 

#### Tasks

- [x] Tutorial layout
- [x] Sample voting app
- [x] Tutorials: View flows / UI intro
- [x] Tutorials: Interception /  Modify
- [x] Tutorials: Replay
- [ ] Tutorials should be valid for `mitmproxy` and `mitmweb`
- [ ] Add tests

#### PR Checklist

 - [ ] I have updated tests where applicable.
 - [ ] I have added an entry to the CHANGELOG.
",False,4127,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/4127,https://github.com/mitmproxy/mitmproxy/pull/4127,closed,6734,0,49,23,29,14,1,0,[{'name': 'gsoc'}],2020-08-03 12:34:09+00:00,2020-09-03 16:14:13+00:00,2691604.0,"31 days, 3:40:04","[{'comment_id': 466177365, 'comment_body': ""Let's cut this paragraph. That is something we can list in next steps together with the next point, it doesn't matter for the tutorial itself."", 'comment_created': datetime.datetime(2020, 8, 6, 6, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 466177718, 'comment_body': ""This is funny, but too long. Alternative suggestion: _For this tutorial, we will look at the HTTP requests generated by our demonstration voting app on the right. Let's see if you can get your favorite pet some extra votes!_\r\n"", 'comment_created': datetime.datetime(2020, 8, 6, 6, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 466177968, 'comment_body': 'Let\'s move this to ""What\'s next?"". They don\'t know yet how to start mitmproxy, so that may be overwhelming 😄 ', 'comment_created': datetime.datetime(2020, 8, 6, 6, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 466178804, 'comment_body': ""Nit: I think using a badge here doesn't really work out. Maybe just `text-primary`?"", 'comment_created': datetime.datetime(2020, 8, 6, 6, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 466180003, 'comment_body': ""Where does the huge black border come from? If it's not too much effort I'd suggest we have no border here (and add an adjustable one using CSS if it looks better)"", 'comment_created': datetime.datetime(2020, 8, 6, 6, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 466180826, 'comment_body': ""Let's use `<kbd>`: https://getbootstrap.com/docs/4.5/content/code/#user-input\r\n\r\nIf we dislike the style we can change that with CSS, but that's much easier if we use a uniform semantic element. :)"", 'comment_created': datetime.datetime(2020, 8, 6, 6, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 466182729, 'comment_body': 'Let\'s go from concrete to the abstract: We can cut this paragraph and move the re-map part either to the end of the section, to ""What\'s next?"", or omit it entirely.', 'comment_created': datetime.datetime(2020, 8, 6, 6, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 466335029, 'comment_body': 'Good idea 👍 ', 'comment_created': datetime.datetime(2020, 8, 6, 11, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 466335769, 'comment_body': ""I'll check what works best. I agree that a badge might emphasize it too much and might be confusing."", 'comment_created': datetime.datetime(2020, 8, 6, 11, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 466336626, 'comment_body': 'Will replace screenshots with cleaner versions at the end. Border comes from setting `padding` to 30 in Windows Terminal - this was needed for my previous examples with tooltips (at the edge of the image for the focussed flow marker `>>`).', 'comment_created': datetime.datetime(2020, 8, 6, 11, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 466336798, 'comment_body': 'Great suggestion!', 'comment_created': datetime.datetime(2020, 8, 6, 11, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 466337301, 'comment_body': 'Fully agree, its a bit ""thrown in"" there and breaks the didactic ""flow"".', 'comment_created': datetime.datetime(2020, 8, 6, 11, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 468343286, 'comment_body': ""You can just pass `this.currentTime` (or I mean you need to keep a reference to the editor because it's not an arrow function) as first parameter and remove these calculations. No need to manually track time."", 'comment_created': datetime.datetime(2020, 8, 11, 5, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Prinzhorn', 'type': 'User'}, {'comment_id': 470911570, 'comment_body': ""You are right, that's an unnecessarily complex implementation :) Thanks and sorry, I forgot to reply to this comment."", 'comment_created': datetime.datetime(2020, 8, 15, 0, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}]","[{'commit_sha': '445481f8d5fdd45aef8d71022ab3aeb5ee2e565b', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1bd5e81ec061d9ef8a2434d2994afe20ad71932', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfcb452731e13c22e39830705ead293ec4081190', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b30a24491b7c1334eee5c5403495d583191c837f', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f77240218c924aea5fed47c6738d44addc786736', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36b900bcb62dfa94da67b01b5d7d5d525de25828', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bb4477333ad74099907ba3785c21a05d199d1b2', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ace7e22ace238865f2c09520fa2d39761f3403d', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '395185fd8d2efc415bfc73dbc3d8aafd3c07e1b2', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1d879bf4f951a217e6b5b7b65dbee18e5ee760b', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c18b1c7dcbbbc7915917d4b38d6fb2f8d268ad32', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b35fa5c363fa684cb62657de29b7c6095875536e', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26176e8e488e6c8189cbfe9defbfb3544fffb318', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32c7afd9db26acb28c3f73d719dae206fa510ed2', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fabbf5bc2dc33865ff4919cef92e6d2b595bde14', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9df031dd39ad8516e7f32f304c66aadf287a144', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcd8b98d79d303389380c5aa925e96a3bb4afd83', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae78b88373b266c5f9990f5f65032a45e2704708', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7025d27879427756bbef7e67cac0ec25bd8e31a', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b9d9ed2ce9c1c25dc209264f13affb807d2003d', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '160c525197f0619944b83b7f2a2fe9d9f287e16b', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85ced37e19f2deec4eb9228f86decdadf7104f7b', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8ab8f09e46be1b7367bd868e6e202125cf1a258', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}]",Martin Plattner,1025800,git@mplattner.at,User,,36,,13,39
478739617,Add interactive tutorials to the documentation,"#### Description

Add interactive tutorials to the documentation using pre-recorded ascii casts. The recording is fully automated.

A preview is available at https://plattner.me/mp-docs/ under `mitmproxy Tutorial`

This PR supersedes PR #4127 

#### Todo

- [x] Merge classes `CliDirector` and `MitmCliDirector`
- [x] Restructure ToC of docs (esp. `Getting Started` and `Features`)
- [x] Polishing
- [ ] ~Add `Proxy Configuration` step (?)~

#### Checklist

 - [x] I have updated tests where applicable.
 - [x] I have added an entry to the CHANGELOG.
",True,4194,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/4194,https://github.com/mitmproxy/mitmproxy/pull/4194,closed,6526,168,35,14,10,14,1,0,[{'name': 'gsoc'}],2020-09-03 16:10:07+00:00,2020-09-07 16:30:16+00:00,346809.0,"4 days, 0:20:09","[{'comment_id': 483180697, 'comment_body': 'Nit: move comment down?', 'comment_created': datetime.datetime(2020, 9, 3, 18, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483184696, 'comment_body': ""Nit: Let's round times here, that gives nicer records. :)"", 'comment_created': datetime.datetime(2020, 9, 3, 18, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483189659, 'comment_body': 'I think we can make our life much easier here by 1) generally using `time.time()` instead of `datetime` and 2) using f-string formatting:\r\n```python3\r\nstart = time.time()\r\ntime.sleep(3 * random.random())\r\nnow = time.time()\r\nprint(f""{now-start:.2f}"")\r\n```', 'comment_created': datetime.datetime(2020, 9, 3, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483194895, 'comment_body': ""I think we can make typing much more human with some basic tweaks, see e.g. https://oxism.com/TuringType/. I personally wouldn't include the typos this demo is adding, but we can probably take some inspiration from their very simple timing algorithm: https://github.com/dmotz/TuringType/blob/7cdd0dcd2f0f2a098d623e38726ac23eada1a15e/turingtype.coffee#L44-L49"", 'comment_created': datetime.datetime(2020, 9, 3, 19, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483198497, 'comment_body': ""Shall we just use `--proxy` instead of `-x`? That maybe makes it a bit clearer (and we don't need an explanation)."", 'comment_created': datetime.datetime(2020, 9, 3, 19, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483203171, 'comment_body': 'Future work: Can we make writing playbooks easier by tokenizing `type`?\r\n\r\nHere\'s a simple example what I\'m thinking of:\r\n```python\r\ninput = ""foo<enter>bar<enter>""\r\n\r\nkeys = []\r\nfor i, k in enumerate(re.split(""[<>]"", input)):\r\nif i % 2:\r\n\tkeys.append(k)\r\nelse:\r\n\tkeys.extend(k)\r\nprint(keys)  # [\'f\', \'o\', \'o\', \'enter\', \'b\', \'a\', \'r\', \'enter\']\r\n```\r\n\r\nWe could eliminate the `count` argument (`d.type(3 * ""<left>""`) and also eat `.exec` (`d.type(""curl ...<enter>""`). Nothing that has to be part of this PR though if that delays shipping! 😃 \r\n', 'comment_created': datetime.datetime(2020, 9, 3, 19, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483205802, 'comment_body': '```suggestion\r\n```\r\n\r\nThis takes a bit long. Remove Tokyo and London?', 'comment_created': datetime.datetime(2020, 9, 3, 19, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483213999, 'comment_body': '```suggestion\r\n    d.message(""One such command shows the flow details, it is bound to the enter key."")\r\n```\r\nNot sure if this is too stupid, but is it clear that ↵ is enter?', 'comment_created': datetime.datetime(2020, 9, 3, 19, 44, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483215001, 'comment_body': '```suggestion\r\n    d.message(""Replace `Paris` with `Tokyo`."")\r\n```\r\n\r\nI mean I would suggest we use Innsbruck and Dunedin, but up to you. 😄 ', 'comment_created': datetime.datetime(2020, 9, 3, 19, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 483228770, 'comment_body': 'Sure, I forgot that after adding more rules.', 'comment_created': datetime.datetime(2020, 9, 3, 20, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 483228888, 'comment_body': 'Great idea.', 'comment_created': datetime.datetime(2020, 9, 3, 20, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 483229069, 'comment_body': 'Yep, will change that. 👍 ', 'comment_created': datetime.datetime(2020, 9, 3, 20, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 483229525, 'comment_body': 'Hm. Both should be fine. We can also go with `ENTER`.', 'comment_created': datetime.datetime(2020, 9, 3, 20, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}, {'comment_id': 483597066, 'comment_body': 'Great idea. Future work though 😄', 'comment_created': datetime.datetime(2020, 9, 4, 12, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mplattner', 'type': 'User'}]","[{'commit_sha': 'b6d52fc8abf58a12128d4c1dba23e20655da0c52', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf9b001ccbc634959310665aa3c73b1ed4ec5025', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f434f91ffc3f7ff8caf1569b7599a80aa0d1d36', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '129c03e51a14c2ed95169b8ab24c009921b978a4', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd305c973f59edd376048d9db21d7f934f862ae96', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a465d9221531b982df27a7df03c0069596d4fa33', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8b2cc9df61195ea6f8dc9d54a92197313f8fb58', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34716b480d9107b12a2192d2410252b02562b398', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88d43b51bb99840766e58ac6fed3cebf4548aac9', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc47d69df989d6104174a2f97d00e582b63a465c', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed918cca870d1592d8ac0521b274cb8f2f4d62c6', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c087a47dd1043dfdd2baaa52adf3ab0f073bdf3', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b34eec4f7bddeb16b6fce3ac3774c11290059cba', 'committer_username': 'mplattner', 'committer_name': 'Martin Plattner', 'committer_email': 'git@mplattner.at', 'commit_date': datetime.datetime(2011, 9, 4, 18, 41, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa6467e4c0ad3aa180e48803ad2277689411213', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}]",Martin Plattner,1025800,git@mplattner.at,User,,36,,13,39

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
519832,mitmproxy,mitmproxy/mitmproxy,Python,3974,35639,622,542,10688,350,9,36,"[{'id': 478739617, 'number': 4194, 'closed': datetime.datetime(2020, 9, 7, 16, 30, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 3, 16, 10, 7, tzinfo=datetime.timezone.utc), 'time_taken': 346809.0, 'time_delta': '4 days, 0:20:09', 'additions': 6526, 'deletions': 168, 'state': 'closed'}, {'id': 462151451, 'number': 4127, 'closed': datetime.datetime(2020, 9, 3, 16, 14, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 12, 34, 9, tzinfo=datetime.timezone.utc), 'time_taken': 2691604.0, 'time_delta': '31 days, 3:40:04', 'additions': 6734, 'deletions': 0, 'state': 'closed'}, {'id': 455855932, 'number': 4102, 'closed': datetime.datetime(2020, 7, 27, 13, 28, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 17, 30, 44, tzinfo=datetime.timezone.utc), 'time_taken': 331045.0, 'time_delta': '3 days, 19:57:25', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 445446375, 'number': 4069, 'closed': datetime.datetime(2020, 7, 18, 12, 24, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 14, 20, 49, tzinfo=datetime.timezone.utc), 'time_taken': 943438.0, 'time_delta': '10 days, 22:03:58', 'additions': 511, 'deletions': 131, 'state': 'closed'}, {'id': 444033254, 'number': 4060, 'closed': datetime.datetime(2020, 7, 3, 17, 8, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 12, 29, 10, tzinfo=datetime.timezone.utc), 'time_taken': 16741.0, 'time_delta': '4:39:01', 'additions': 203, 'deletions': 21, 'state': 'closed'}, {'id': 440721455, 'number': 4046, 'closed': datetime.datetime(2020, 7, 2, 13, 2, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 18, 13, 21, tzinfo=datetime.timezone.utc), 'time_taken': 499757.0, 'time_delta': '5 days, 18:49:17', 'additions': 489, 'deletions': 567, 'state': 'closed'}, {'id': 440082355, 'number': 4044, 'closed': datetime.datetime(2020, 6, 25, 15, 28, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 15, 5, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1374.0, 'time_delta': '0:22:54', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 440076650, 'number': 4043, 'closed': datetime.datetime(2020, 6, 25, 16, 33, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 14, 56, 56, tzinfo=datetime.timezone.utc), 'time_taken': 5804.0, 'time_delta': '1:36:44', 'additions': 209, 'deletions': 170, 'state': 'closed'}]"
