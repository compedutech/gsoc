pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1050678589,Websockets,This is a reference PR to depict my GSoC22 work in one place. ,False,3621,https://api.github.com/repos/learningequality/studio/pulls/3621,https://github.com/learningequality/studio/pull/3621,open,1044,128,23,70,0,1,0,0,[],2022-09-08 18:25:36+00:00,,0.0,,"[{'comment_id': 1536415517, 'comment_body': ""I think this logic is preserving a single task of the type - rather than a single task per type per channel? This might cause weird behaviour if you're editing two channels at once."", 'comment_created': datetime.datetime(2024, 3, 22, 23, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}]","[{'commit_sha': '760298cab2981c6f0e7b450d67277e5a6faa0a71', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '798822e2b5072cd87021d98e835cab4340a3c5ad', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d2f27ce695cdb8b63b3247eca81b3cf083931bd', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3bc91b93927baf4c51c0603ce887b77a8c18e4c', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44ef33901eac03e6242332ab2efadace06f3c0dc', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8d02ed7504859a619f8efe26d27c238d6a64b42', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0835e3d4506f37c916f3ae6faadd483980d2034', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07041bc3680001dc28b57da54df9f44743ba888f', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b656473f2b7cbeba656925d8e1869cc3649a012e', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b9b63c3c05064c8d10a45f046b603b4d6da2c8e', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7a39f1141b68359f12a92ca4103a5e274cf74b0', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1508d413f56dbf24192351051b3e5664e20969fe', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11ce747edabce0c2c0ed31adff3fabd6adc6922f', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64dd28fee36cab16224cf45b8a33748f7c2d3ee4', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93c8505b316e61c06f77b2cfba021e0fb7cbf991', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '721a052832336a29c4babe767a63322d52aee932', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1461aab712bf34c19e1ea3d6d02e6e736c88bf', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '279daf47914bc5a6bb6c5c27a14aa762a50f6778', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40a08fecb1ed9368fc5da6d8375d1c43a0b842c6', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa54a249674b1786d8f5699b0e8d5fd6eb3e2619', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4092a3fb5db42f7e4c2ab4b4c56d6a140413a95c', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc9982a7057dc96a2e6273a2d3d5c4caef4462c9', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9bc522b1ba99e5e58341fdc243d749ba7ad7d32', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afe273a2b2bbfcc05e9c3289285f22af6cc47a09', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc1db42385bb6b1fe5bf2fac0ae08e520ecf43c5', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9c9b68076309bc697aad96cc9a2cea39e7237b6', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53e77c32de3f4a7614254c848fca141a1bfa09a7', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08e93220a1869104d26eadef720324dd25db0dca', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91b927cc1f321ca623c39f84f923119c455de8d7', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '035455e0f73632624d08e556747a1000c1cc3711', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97c5661ef0313913a9c31c6dd4b83b1d2b800ae5', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd04a2f4bb5b8ffcfe6d88d152b11200223e9a3d', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c571454ab3cea7aa0b01937bfe2512afae51c5ed', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '766827979bc92315a146789e6b81a8b4a8bcdd38', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bed4154dc008cf300d27f1585c494f9d137c0810', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80f0a87e30b45f9123f0fe8794f4752073686e8b', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15a401449d3f65706395c3d18a1588df35659f12', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99310c6161e4eed56bd35025cea09edd5e5b5777', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49da0b7d8c1ba1b9667d99d691c9464e5b3cd243', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '959ed30d7eb41c3f828b48631c8037b5d9275cf3', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86c622b226e0bbcf599687e2d9f0f6684519b47f', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72e41cd8fb947d645537b28bf0e605e34f3682d4', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a04104f7257cbe3ada780be00d7bd0986bcc43e', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4393729a9f1a05288c9ebeacb117a749af11f24', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29e4a6617518182dcba0823f2c67d4e969466eee', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15eaf377e394ad10f9094ff4819a39ee3fc367b7', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aed085d97dcd27ad4674a821b9b867866e9be2e9', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ce67071a011ee3fc3f3ad5baa799f36f9ceddba', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '262360b78e5c986e3e687d499ff8f98e8a338213', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55e3be894272e8980cc007f7dd98146cf8d3e77b', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9874ec55d63e8ff3a16fd2147eb44a19db2d9ec', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd83df35a08f4658031bb5b63fd4252ed782bd9dc', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd970e2dcaabb60da9d48e43dc7b0b74acb93d5bc', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd4c54139419242bd020e804461165c54ee8857d', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '370abdb386f04d3699131fc1d8e948ad201f3b10', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02e3e5fd947071ef749df939a60c2f9e4c409439', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8178eeb2774b8b2e99f93305f9b3dc255df0b6', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cbd4ce24fe0b706ba79a07c7f92a8b9ce0fe9a7', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4673ffe26e9b30c8ffc9a8de0063062f07e02cfc', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64e4fd70b61efe61b766ba39940fc6e7c5a49f44', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56707136af779c59b85cff97c56f19f1f6a14c3d', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c06c14d1baaa2126ee692d5a03ba254e11c518e2', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a4be5f2f78f59059e191d404b9b2a53f050e6b2', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20ea1810feecce3e9617ab80cd4331b1233b4c15', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21886346d81f12bc7ad94233148bfcb48d754202', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0db9935725a2bd5742871667f32810e66bde21d1', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1937be3b47e274ecd489193a2421fc8625f9b029', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df66e8e1b54f003c600d06b96b1b943dc5d58b6d', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5f35cffc8e1c61da210f3f40c3510c439601cf0', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99edf3f044d33a7ba89d5b20bbc61c56d0612cc2', 'committer_username': 'bjester', 'committer_name': 'Blaine Jester', 'committer_email': 'bjester@quavalent.com', 'commit_date': datetime.datetime(2011, 5, 31, 3, 2, 44, tzinfo=datetime.timezone.utc)}]",Prathamesh Desai,51698593,prathameshd419@gmail.com,User,,38,,74,67
629434450,Change event log,"## Summary
### Description of the change(s) you made
* Implements a change event log on the server side
* Makes all change application run inside an async task on the server side
* Separates out user specific and channel specific changes
* Allows syncing back of changes relevant to channels and users
* Removes Task API and sends task information back via the sync endpoint
* Separates out Channel bookmarks from the main channel data as changes to it are user specific, whereas changes to channels are channel specific
* Creates dummy Task objects for Publish, Sync, and Copy changes in order to continue to allow the frontend to track progress of application of these changes
* Moves publishing and syncing display from a modal into the top toolbar as it is no longer necessary to block user interaction.


### Manual verification steps performed
* Do edits
* Save edits
* Confirm they get synced
* Confirm they get applied
* Confirm they get removed from the frontend

## Reviewer guidance
### How can a reviewer test these changes?
Please test the basic flow for now.

### Are there any risky areas that deserve extra testing?
EVERYTHING!


## References
Fixes #3034 
Fixes #2828 
Fixes #3101


## Comments
<!-- Additional comments may be added here -->

----

### Contributor's Checklist
<!-- After saving the PR, come through to tick off completed checklist items. Delete any sections that are not applicable to your PR -->

PR process:

- [ ] If this is an important user-facing change, PR or related issue the `CHANGELOG` label been added to this PR. Note: items with this label will be added to the [CHANGELOG](https://github.com/learningequality/studio/blob/master/CHANGELOG.md) at a later time
- [ ] If this includes an internal dependency change, a link to the diff is provided
- [ ] The `docs` label has been added if this introduces a change that needs to be updated in the [user docs](https://kolibri-studio.readthedocs.io/en/latest/index.html)?
- [ ] If any Python requirements have changed, the updated `requirements.txt` files also included in this PR
- [ ] Opportunities for using Google Analytics here are noted
- [ ] Migrations are [safe for a large db](https://www.braintreepayments.com/blog/safe-operations-for-high-volume-postgresql/)

Studio-specifc:

- [ ] All user-facing strings are translated properly
- [ ] The `notranslate` class been added to elements that shouldn't be translated by Google Chrome's automatic translation feature (e.g. icons, user-generated text)
- [ ] All UI components are LTR and RTL compliant
- [ ] Views are organized into `pages`, `components`, and `layouts` directories [as described in the docs](https://github.com/learningequality/studio/blob/vue-refactor/docs/architecture.md#where-does-the-frontend-code-live)
- [ ] Users' storage used is recalculated properly on any changes to main tree files
- [ ] If there new ways this uses user data that needs to be factored into our [Privacy Policy](https://github.com/learningequality/studio/tree/master/contentcuration/contentcuration/templates/policies/text), it has been noted.


Testing:

- [ ] Code is clean and well-commented
- [ ] Contributor has fully tested the PR manually
- [ ] If there are any front-end changes, before/after screenshots are included
- [ ] Critical user journeys are covered by Gherkin stories
- [ ] Any new interactions have been added to the [QA Sheet](https://docs.google.com/spreadsheets/d/1HF4Gy6rb_BLbZoNkZEWZonKFBqPyVEiQq4Ve6XgIYmQ/edit#gid=0)
- [ ] Critical and brittle code paths are covered by unit tests
___

### Reviewer's Checklist
#### This section is for reviewers to fill out.

- [ ] Automated test coverage is satisfactory
- [ ] PR is fully functional
- [ ] PR has been tested for [accessibility regressions](http://kolibri-dev.readthedocs.io/en/develop/manual_testing.html#accessibility-a11y-testing)
- [ ] External dependency files were updated if necessary (`yarn` and `pip`)
- [ ] Documentation is updated
- [ ] Contributor is in AUTHORS.md
",True,3134,https://api.github.com/repos/learningequality/studio/pulls/3134,https://github.com/learningequality/studio/pull/3134,closed,2412,3053,61,58,9,44,1,0,[{'name': 'TODO: needs updates'}],2021-05-03 23:59:06+00:00,2022-06-27 16:30:18+00:00,36261072.0,"419 days, 16:31:12","[{'comment_id': 817883669, 'comment_body': 'Any reason not to use `channelId` instead of `window.CHANNEL_EDIT_GLOBAL.channel_id` here?', 'comment_created': datetime.datetime(2022, 3, 2, 16, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 817889136, 'comment_body': ':eyes: ', 'comment_created': datetime.datetime(2022, 3, 2, 16, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 817894081, 'comment_body': 'Is this return value used?', 'comment_created': datetime.datetime(2022, 3, 2, 16, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 817906107, 'comment_body': 'Perhaps we should add some indices on channel and user?', 'comment_created': datetime.datetime(2022, 3, 2, 17, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 832395864, 'comment_body': 'No - I think this was a result of copy paste from elsewhere.', 'comment_created': datetime.datetime(2022, 3, 22, 16, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 832397096, 'comment_body': 'Nope!', 'comment_created': datetime.datetime(2022, 3, 22, 16, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 832397380, 'comment_body': 'That would seem eminently sensible. Will add them in a follow up migration with concurrent creation.', 'comment_created': datetime.datetime(2022, 3, 22, 16, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 858922436, 'comment_body': 'Does this require any special migrations? Or is it totally automatic', 'comment_created': datetime.datetime(2022, 4, 26, 16, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 858925385, 'comment_body': ""I don't think it's critical, but seems like this could be connected with whether we're actually syncing? Like we have `stopSyncing()` for instance. Just wondering if there's any good reason why we should eventually stop this."", 'comment_created': datetime.datetime(2022, 4, 26, 16, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 858962289, 'comment_body': 'This error message leaves me...', 'comment_created': datetime.datetime(2022, 4, 26, 17, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 858976455, 'comment_body': ""Shoudl this be `self.kwargs.copy()`? Otherwise, what's the reasoning I'm missing for a separate variable?"", 'comment_created': datetime.datetime(2022, 4, 26, 17, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 858994699, 'comment_body': 'Should this be \r\n```js\r\nget(user, `${MAX_REV_KEY}.${channelId}`, 0)\r\n```\r\n???', 'comment_created': datetime.datetime(2022, 4, 26, 17, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 859006524, 'comment_body': 'This is the same, the lodash `get` function allows you to specify the dot path either as a dot path or an array.', 'comment_created': datetime.datetime(2022, 4, 26, 18, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 859006932, 'comment_body': ""I think I just did it to not write out `self.kwargs` over and over again, but I'll double check if there's a risk of mutation."", 'comment_created': datetime.datetime(2022, 4, 26, 18, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 859007034, 'comment_body': 'Wanting more?', 'comment_created': datetime.datetime(2022, 4, 26, 18, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 859007810, 'comment_body': ""Yeah, we wouldn't need to continue doing these checks if we're not online for example - but it might be more complexity than it's worth to monitor it."", 'comment_created': datetime.datetime(2022, 4, 26, 18, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 859008395, 'comment_body': 'Dexie should handle this migration automatically - also possible that I could just leave it at `2`, as I think I only had to bump it to `3` because I had made two changes locally.', 'comment_created': datetime.datetime(2022, 4, 26, 18, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 859011822, 'comment_body': ""But doesn't the dot path lookup follow nesting so the structure would have to be `{[MAX_REV_KEY]: { [channelId]: ... } }`? The key I see you setting is flat, not nested"", 'comment_created': datetime.datetime(2022, 4, 26, 18, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 859012833, 'comment_body': ""I guess my suggestion probably wouldn't work either with lodash `get`\r\n"", 'comment_created': datetime.datetime(2022, 4, 26, 18, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 859033140, 'comment_body': 'Ah, right - possible that I did not set this properly, will revist!', 'comment_created': datetime.datetime(2022, 4, 26, 18, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 860984451, 'comment_body': ""Sorry, I was not thinking straight when I responded here - Dexie's update functions take key paths: https://dexie.org/docs/Table/Table.update() - so it is producing a nested change in spite of the key being a key path."", 'comment_created': datetime.datetime(2022, 4, 28, 14, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 860988086, 'comment_body': 'Have made some updates to at least sleep on blur.', 'comment_created': datetime.datetime(2022, 4, 28, 14, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 860990941, 'comment_body': ""Oh! That's good to know that Dexie is unfurling that during the updates. I know there are a few places where you're using that dot notation for partial updates, but perhaps some comments could clarify it's taking advantage of that feature?"", 'comment_created': datetime.datetime(2022, 4, 28, 14, 53, 14, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 861012119, 'comment_body': 'Yes, should be a copy - as otherwise we are modifying a property of the model in place!', 'comment_created': datetime.datetime(2022, 4, 28, 15, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 869539638, 'comment_body': ""It looks like this approach will be okay for copying, but it doesn't look like it will work for publishing and may confuse devs in the future if we carry on using this pattern. The reason is that if the task requires a database transaction, then these writes for progress could be contained within the transaction and won't be readable outside of the transaction until it is committed, obviously. Looking at `map_content_nodes` that is called during publishing, it seems that it would run into this problem.\r\n\r\nFor this reason, in my task-related WIP, I utilized the task events to broadcast progress to a listener that could read and write outside of any database transactions occurring within the task."", 'comment_created': datetime.datetime(2022, 5, 10, 18, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 892520232, 'comment_body': 'Seems this could be simplified slightly. How about this?\r\n```js\r\n  const idsToCheck = {\r\n    [TABLE_NAMES.CONTENTNODE]: contentNodeIds,\r\n    [TABLE_NAMES.FILE]: fileIds,\r\n    [TABLE_NAMES.ASSESSMENTITEM]: assessmentIds,\r\n  };\r\n  const query = await db[CHANGES_TABLE].toCollection()\r\n    .filter(c => !c.synced)\r\n    .toArray();\r\n  for (let change of query) {\r\n    if (idsToCheck[change.table] && idsToCheck[change.table].includes(change.key)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n```', 'comment_created': datetime.datetime(2022, 6, 8, 15, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 892524496, 'comment_body': 'Should this promise also wait for the bookmarks to load, serially or simultaneously?', 'comment_created': datetime.datetime(2022, 6, 8, 15, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 892536379, 'comment_body': 'Maybe move the `.map(Number)` to the above `map` so `disallowed.map(d => Number(d.rev))`?', 'comment_created': datetime.datetime(2022, 6, 8, 15, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 892538116, 'comment_body': 'Does this need mapped to a `Number` too?', 'comment_created': datetime.datetime(2022, 6, 8, 15, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 892553833, 'comment_body': 'Usually we use camel case for variables, except for when we want it snake case for setting it on an object, i.e. `{ channel_ids }`. So my question here is if you had intended to do that somewhere and missed it, or if this is just a random casing thing?', 'comment_created': datetime.datetime(2022, 6, 8, 15, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 892555805, 'comment_body': 'Is this required?', 'comment_created': datetime.datetime(2022, 6, 8, 15, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 892559398, 'comment_body': 'Since `mapChannel` has a defensive check on `channel`, perhaps you can move this up to the previous `map`?', 'comment_created': datetime.datetime(2022, 6, 8, 15, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 892560495, 'comment_body': 'Since this no longer needs to `await`, does this need to be `async` anymore?', 'comment_created': datetime.datetime(2022, 6, 8, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 892565166, 'comment_body': 'This looks suspicious', 'comment_created': datetime.datetime(2022, 6, 8, 15, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 892681631, 'comment_body': 'Does this need to be ordered?', 'comment_created': datetime.datetime(2022, 6, 8, 17, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 892895624, 'comment_body': 'Yes, probably safest to do so.', 'comment_created': datetime.datetime(2022, 6, 8, 21, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 892897642, 'comment_body': 'Yes, not quite sure why I mapped twice there...', 'comment_created': datetime.datetime(2022, 6, 8, 21, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 892899115, 'comment_body': 'No, this should be ok, although I am now confused why I need the `Number` coersion at all - as both the `rev` and `server_rev` are stored on the server as Integers - so not sure why it needed to be coerced here.', 'comment_created': datetime.datetime(2022, 6, 8, 21, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 892899863, 'comment_body': ""Originally I was just sending `channel_ids` directly to the server, and that's why it was snake case. Now that it's being sent via `channel_revs` it's not needed. I'll update to camelCase to remove the confusion."", 'comment_created': datetime.datetime(2022, 6, 8, 21, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 892900827, 'comment_body': 'I think I should probably just move the await above out of the if statement - the information from it is needed to correctly annotate bookmarks on the loaded channels.', 'comment_created': datetime.datetime(2022, 6, 8, 21, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 892902599, 'comment_body': ""Hrm, I suspect that not being await was a mistake - I'll revert that."", 'comment_created': datetime.datetime(2022, 6, 8, 22, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 892903104, 'comment_body': 'Flagging that we chatted about this, and resolved to clear in follow up work.', 'comment_created': datetime.datetime(2022, 6, 8, 22, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 892903630, 'comment_body': ""I think I've found something even more concise!"", 'comment_created': datetime.datetime(2022, 6, 8, 22, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 892904582, 'comment_body': 'Possibly - I added an explicit order_by `server_rev` to be safe.', 'comment_created': datetime.datetime(2022, 6, 8, 22, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}]","[{'commit_sha': '087796c21d6a0ece1a5aa9d41c37e7beac5b3aa7', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd3162d3b0f77cd4c31b1d3eb297f8212625527d', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c06b6681f7f1d34ada6b348898f7873d60cf3494', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f81d54b0be1891a287e74bee10565bcd34361b3', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f0dfed5d8c92ab5bbacdb0942661cec647c0b9d', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5077f2f84c662f0de3df4d286d36fdd49f64758f', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eacf9fb597c6f2eb4349eaf56479150f7d24115d', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a6f2383e92516bc83cedafff2d99a9f2ac734d6', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d6cb8087b00f15a4a6e63851adf0e0915314007', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd08e2bad924633aea8ebe8ef381b139fbef4017', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96b31fdc8ca362676185a63e5ca24d01b1bdad66', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd42e7331b63a0f105a7b5e400d4b36e4ccc66f4a', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8c3b0bf87963f1bd4b661a5a90cdf9227de7e6c', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '681d7454ca08a18a32dc4ec3b9324387eb7a018f', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f8470deb2dce3472238a6395b38f2957b2c8da0', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8af6b228f2a973f4a1b7ea7c7fa842021e8060d0', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8333660532739e68d0aea5f898e9372db01e23fd', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb36ec647e1a6e66123dd502dc8ed4b56dae84d1', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6adaf6246e8c91d5da32f390f449da4f3112830b', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26e3f89dfe5ca1221d3f2fc57022382cee0f4a1e', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fb27035cb4d6ed47a075457a94318471d4ee81a', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb0609226ff55a8ca0612ff901d26a34a56ef1d0', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a52916d15620658beadb294bc7732515b1898709', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57a0b485f42f904b0933ffb6d69eb0ae7fb1f0b3', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c0143d6f87620a8b70aa83423b4722e0d2d8aca', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c171a6eb0b308b76282a70650f771f3faee2f8ee', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87f19adad04103ea058b055cd309dbf8a5840095', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f4ff4cb51968564d9ff5ff09beb4506d50b77d3', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80a6f26f92b6046657e2ae0b8db8c7415b0e9189', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f63de673b0e9611de0e9ebbda37dbabb11826fb', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'debc16889e83083b23a55897ffaf6b31fe634fbb', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9ff533cc5f247d222401dd4cb5ef2544b24ccc', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ff1d45e3b739156c6afdf2d1afb218592be4110', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94c071e0c514859fe116dfab5e94360f3ff16204', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0aaaedc1d38a5f06f3269941be466737ee28105', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '808d6bc1d0c4801ee5526fc052c77411ff0a079b', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b157f100e1ef06f7469e96232ae37442ac78f683', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '575590bab0f52fba1aa053138896f83bd1ff368e', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd367cd8ed9a7b5fe00e8ec71810af66d763adbbe', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32cd52329d11babb22de4062a327272390f86e08', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23153a62622882e6e6b39459778db97196bf6390', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7e6f6f972fa7116390e2cf201f822646c713810', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d93060d417b4c6ed4a65bdafaedb9b2f6432fdd', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b71ae3b627fd122494440523a9b604bc72af39a6', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1836449596dedd5c9ecb7047fcf8afbadf75172', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40ff645b24cabd757e0069f95eb24436b2053e32', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab56059546796ec17fc4cd6fd9313d8eb95a9f8a', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebc31f6b80d5e5800f495f4e4676fb07061c67c7', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdf580c5f98c9a364a764ba04127612468468200', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f2c710fa8891c85c1c54bea68bcef1c82e7f77f', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eab2374c8172adb72a896605888425d79ed89fcb', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c884cf34c02a511d3a4344d09fcbd60b02848404', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cb99279f947b91a8c843134ad759a41b009e243', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc30acf1c39ea335f86617b7a185fc9ffbd6d827', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0e26f144fec3277bb32557b13574809cb347179', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b25f03c690b3047d6295f4439f3887421d288b9', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d30f14d30b567298d178d294a32c690dfb9525c', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff42a51ea032cbdb7a7fcfd14056183a422e52d0', 'committer_username': 'rtibbles', 'committer_name': 'Richard Tibbles', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 26, 3, 4, 13, tzinfo=datetime.timezone.utc)}]",Richard Tibbles,1680573,,User,,49,,4,54
878213195,Log to sentry when publishing takes too long,"<!-- Please remove any unused sections.

Note that anything written between these symbols will not appear in the actual, published PR. They serve as instructions for filling out this template. You may want to use the 'preview' tab above this textbox to verify formatting before submitting.
-->

## Summary
This PR Logs an exception to sentry when publishing takes more than one hour.
### Description of the change(s) you made
<!-- Briefly summarize your changes in 1-2 sentences here. -->


### Manual verification steps performed
1. Step 1
2. Step 2
3. ...

### Screenshots (if applicable)
<!-- If not applicable, please delete this section -->

### Does this introduce any tech-debt items?
<!-- List anything that will need to be addressed later -->
___
## Reviewer guidance
### How can a reviewer test these changes?
<!-- If not applicable, please delete this section -->


### Are there any risky areas that deserve extra testing?
<!-- If not applicable, please delete this section -->


## References
Closes #3269

<!--
Additional, helpful things to add in this section:
 * links to mockups or specs for new features
 * links to the diffs for any dependency updates, e.g. in iceqube or the perseus plugin
 * references to relevant issues or Notion projects
-->

## Comments
<!-- Additional comments may be added here -->

----

### Contributor's Checklist
<!-- After saving the PR, come through to tick off completed checklist items. Delete any sections that are not applicable to your PR -->

PR process:

- [ ] If this is an important user-facing change, PR or related issue the `CHANGELOG` label been added to this PR. Note: items with this label will be added to the [CHANGELOG](https://github.com/learningequality/studio/blob/master/CHANGELOG.md) at a later time
- [ ] If this includes an internal dependency change, a link to the diff is provided
- [ ] The `docs` label has been added if this introduces a change that needs to be updated in the [user docs](https://kolibri-studio.readthedocs.io/en/latest/index.html)?
- [ ] If any Python requirements have changed, the updated `requirements.txt` files also included in this PR
- [ ] Opportunities for using Google Analytics here are noted
- [ ] Migrations are [safe for a large db](https://www.braintreepayments.com/blog/safe-operations-for-high-volume-postgresql/)

Studio-specifc:

- [ ] All user-facing strings are translated properly
- [ ] The `notranslate` class been added to elements that shouldn't be translated by Google Chrome's automatic translation feature (e.g. icons, user-generated text)
- [ ] All UI components are LTR and RTL compliant
- [ ] Views are organized into `pages`, `components`, and `layouts` directories [as described in the docs](https://github.com/learningequality/studio/blob/vue-refactor/docs/architecture.md#where-does-the-frontend-code-live)
- [ ] Users' storage used is recalculated properly on any changes to main tree files
- [ ] If there new ways this uses user data that needs to be factored into our [Privacy Policy](https://github.com/learningequality/studio/tree/master/contentcuration/contentcuration/templates/policies/text), it has been noted.


Testing:

- [ ] Code is clean and well-commented
- [ ] Contributor has fully tested the PR manually
- [ ] If there are any front-end changes, before/after screenshots are included
- [ ] Critical user journeys are covered by Gherkin stories
- [ ] Any new interactions have been added to the [QA Sheet](https://docs.google.com/spreadsheets/d/1HF4Gy6rb_BLbZoNkZEWZonKFBqPyVEiQq4Ve6XgIYmQ/edit#gid=0)
- [ ] Critical and brittle code paths are covered by unit tests
___

### Reviewer's Checklist
#### This section is for reviewers to fill out.

- [ ] Automated test coverage is satisfactory
- [ ] PR is fully functional
- [ ] PR has been tested for [accessibility regressions](http://kolibri-dev.readthedocs.io/en/develop/manual_testing.html#accessibility-a11y-testing)
- [ ] External dependency files were updated if necessary (`yarn` and `pip`)
- [ ] Documentation is updated
- [ ] Contributor is in AUTHORS.md
",True,3340,https://api.github.com/repos/learningequality/studio/pulls/3340,https://github.com/learningequality/studio/pull/3340,closed,32,1,1,4,2,9,0,0,[],2022-03-12 17:19:36+00:00,2022-03-29 20:57:20+00:00,1481864.0,"17 days, 3:37:44","[{'comment_id': 831264051, 'comment_body': 'Can this be simplified to `report_exception(SlowPublishError(elapsed, channel_id))`?', 'comment_created': datetime.datetime(2022, 3, 21, 15, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 833365297, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 3, 23, 14, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ozer550', 'type': 'User'}, {'comment_id': 834473468, 'comment_body': 'Are there any caveats to this? Just curious if there was a reason why the try/except was used.', 'comment_created': datetime.datetime(2022, 3, 24, 16, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 834512515, 'comment_body': '@bjester I believe the `try/except` block makes it look more clear as to what we are doing there. I think going ahead with try/except would be a better idea IMO.  ', 'comment_created': datetime.datetime(2022, 3, 24, 16, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vkWeb', 'type': 'User'}, {'comment_id': 834516925, 'comment_body': ""I think we have used this pattern because of how sentry captures exceptions using `traceback` - if we haven't actually raised the exception, then it won't be accessible in the stack trace when Sentry tries to log it."", 'comment_created': datetime.datetime(2022, 3, 24, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 834543742, 'comment_body': 'Thanks all! I was thinking maybe the traceback wouldn\'t be available, but perhaps we don\'t need it for unique errors like this. So keeping the try/except, the only thing that\'s missing is a code comment IMO! I see something like that for the `SlowSyncError`: ""# we need to raise it to get Python to fill out the stack trace.""', 'comment_created': datetime.datetime(2022, 3, 24, 17, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 834545994, 'comment_body': 'I tried to reciprocate conventions used in:  https://github.com/learningequality/studio/blob/unstable/contentcuration/contentcuration/viewsets/sync/endpoint.py#L181\r\n', 'comment_created': datetime.datetime(2022, 3, 24, 17, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ozer550', 'type': 'User'}, {'comment_id': 834550280, 'comment_body': '@ozer550 Sounds good. The only difference then is that your change is missing the code comment, which would answer my original question for any future devs on this specific code!', 'comment_created': datetime.datetime(2022, 3, 24, 17, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 835722796, 'comment_body': '@bjester I have reverted the changes to raise the exception and commented on it.', 'comment_created': datetime.datetime(2022, 3, 26, 5, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ozer550', 'type': 'User'}]","[{'commit_sha': '8481b10db07e11fad15cab32a84437f380395857', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '690db9d51c3caa772bfa7a3a6e2b5c7e5eb123a6', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64f8bc2e2da5d5cf34a6436e995db859ae538934', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e58dfaccf04c822b8b9b8d2d8e50faf43ba0e31', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}]",Prathamesh Desai,51698593,prathameshd419@gmail.com,User,,38,,74,67
890197394,consolidated StudioTestCase and BaseTestCase,"
<!-- Please remove any unused sections.

Note that anything written between these symbols will not appear in the actual, published PR. They serve as instructions for filling out this template. You may want to use the 'preview' tab above this textbox to verify formatting before submitting.
-->

## Summary
Consolidated StudioTestCase with BaseTestCase


## Reviewer guidance
All test should pass.


### Are there any risky areas that deserve extra testing?
<!-- If not applicable, please delete this section -->


## References
closes #1076 

## Comments
<!-- Additional comments may be added here -->

----

### Contributor's Checklist
<!-- After saving the PR, come through to tick off completed checklist items. Delete any sections that are not applicable to your PR -->

PR process:

- [ ] If this is an important user-facing change, PR or related issue the `CHANGELOG` label been added to this PR. Note: items with this label will be added to the [CHANGELOG](https://github.com/learningequality/studio/blob/master/CHANGELOG.md) at a later time
- [ ] If this includes an internal dependency change, a link to the diff is provided
- [ ] The `docs` label has been added if this introduces a change that needs to be updated in the [user docs](https://kolibri-studio.readthedocs.io/en/latest/index.html)?
- [ ] If any Python requirements have changed, the updated `requirements.txt` files also included in this PR
- [ ] Opportunities for using Google Analytics here are noted
- [ ] Migrations are [safe for a large db](https://www.braintreepayments.com/blog/safe-operations-for-high-volume-postgresql/)

Studio-specifc:

- [ ] All user-facing strings are translated properly
- [ ] The `notranslate` class been added to elements that shouldn't be translated by Google Chrome's automatic translation feature (e.g. icons, user-generated text)
- [ ] All UI components are LTR and RTL compliant
- [ ] Views are organized into `pages`, `components`, and `layouts` directories [as described in the docs](https://github.com/learningequality/studio/blob/vue-refactor/docs/architecture.md#where-does-the-frontend-code-live)
- [ ] Users' storage used is recalculated properly on any changes to main tree files
- [ ] If there new ways this uses user data that needs to be factored into our [Privacy Policy](https://github.com/learningequality/studio/tree/master/contentcuration/contentcuration/templates/policies/text), it has been noted.


Testing:

- [ ] Code is clean and well-commented
- [ ] Contributor has fully tested the PR manually
- [ ] If there are any front-end changes, before/after screenshots are included
- [ ] Critical user journeys are covered by Gherkin stories
- [ ] Any new interactions have been added to the [QA Sheet](https://docs.google.com/spreadsheets/d/1HF4Gy6rb_BLbZoNkZEWZonKFBqPyVEiQq4Ve6XgIYmQ/edit#gid=0)
- [ ] Critical and brittle code paths are covered by unit tests
___

### Reviewer's Checklist
#### This section is for reviewers to fill out.

- [ ] Automated test coverage is satisfactory
- [ ] PR is fully functional
- [ ] PR has been tested for [accessibility regressions](http://kolibri-dev.readthedocs.io/en/develop/manual_testing.html#accessibility-a11y-testing)
- [ ] External dependency files were updated if necessary (`yarn` and `pip`)
- [ ] Documentation is updated
- [ ] Contributor is in AUTHORS.md

Co-authored-by: Vivek Agrawal <vivekmittalagrawal@gmail.com>
@vkWeb ",True,3352,https://api.github.com/repos/learningequality/studio/pulls/3352,https://github.com/learningequality/studio/pull/3352,closed,67,40,10,2,2,0,0,0,[],2022-03-26 08:52:56+00:00,2022-04-25 15:18:32+00:00,2615136.0,"30 days, 6:25:36",[],"[{'commit_sha': '6dc6475a33b151bf2fea0eb3ea371dafc118e17d', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '111d1f98cb200f29e4ed5c8f3c9c6ee888675f45', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}]",Prathamesh Desai,51698593,prathameshd419@gmail.com,User,,38,,74,67
964796793,Consolidate mastery criteria,"## Summary
### Description of the change(s) you made
<!-- Briefly summarize your changes in 1-2 sentences here. -->
- Removed m n and mastery_model from ExtraFieldsSerializer.
- Added callable consolidate_extra_fields function to consolidate previous mastrey criteria 
- Changed unit tests
- Created new tests for set and unset completion_criteria cases.

### Manual verification steps performed
1. Ran all tests related to contentnode

## Comments
- Needs more robust validation in def to_internal_value function (we need to create a new issue for this)

PR process:

- [ ] If this is an important user-facing change, PR or related issue the `CHANGELOG` label been added to this PR. Note: items with this label will be added to the [CHANGELOG](https://github.com/learningequality/studio/blob/master/CHANGELOG.md) at a later time
- [ ] If this includes an internal dependency change, a link to the diff is provided
- [ ] The `docs` label has been added if this introduces a change that needs to be updated in the [user docs](https://kolibri-studio.readthedocs.io/en/latest/index.html)?
- [ ] If any Python requirements have changed, the updated `requirements.txt` files also included in this PR
- [ ] Opportunities for using Google Analytics here are noted
- [ ] Migrations are [safe for a large db](https://www.braintreepayments.com/blog/safe-operations-for-high-volume-postgresql/)

Studio-specifc:

- [ ] All user-facing strings are translated properly
- [ ] The `notranslate` class been added to elements that shouldn't be translated by Google Chrome's automatic translation feature (e.g. icons, user-generated text)
- [ ] All UI components are LTR and RTL compliant
- [ ] Views are organized into `pages`, `components`, and `layouts` directories [as described in the docs](https://github.com/learningequality/studio/blob/vue-refactor/docs/architecture.md#where-does-the-frontend-code-live)
- [ ] Users' storage used is recalculated properly on any changes to main tree files
- [ ] If there new ways this uses user data that needs to be factored into our [Privacy Policy](https://github.com/learningequality/studio/tree/master/contentcuration/contentcuration/templates/policies/text), it has been noted.


Testing:

- [ ] Code is clean and well-commented
- [ ] Contributor has fully tested the PR manually
- [ ] If there are any front-end changes, before/after screenshots are included
- [ ] Critical user journeys are covered by Gherkin stories
- [ ] Any new interactions have been added to the [QA Sheet](https://docs.google.com/spreadsheets/d/1HF4Gy6rb_BLbZoNkZEWZonKFBqPyVEiQq4Ve6XgIYmQ/edit#gid=0)
- [ ] Critical and brittle code paths are covered by unit tests
___

### Reviewer's Checklist
#### This section is for reviewers to fill out.

- [ ] Automated test coverage is satisfactory
- [ ] PR is fully functional
- [ ] PR has been tested for [accessibility regressions](http://kolibri-dev.readthedocs.io/en/develop/manual_testing.html#accessibility-a11y-testing)
- [ ] External dependency files were updated if necessary (`yarn` and `pip`)
- [ ] Documentation is updated
- [ ] Contributor is in AUTHORS.md
",True,3426,https://api.github.com/repos/learningequality/studio/pulls/3426,https://github.com/learningequality/studio/pull/3426,closed,115,32,3,6,0,7,2,0,"[{'name': 'DEV: backend'}, {'name': 'python'}]",2022-06-11 16:30:23+00:00,2022-06-16 19:52:47+00:00,444144.0,"5 days, 3:22:24","[{'comment_id': 895905152, 'comment_body': 'This structure of `threshold` and `model` are new, so having those directly underneath `options` doesn\'t currently exist. What\'s your intent here-- to emulate the old/existing structure?\r\n\r\nThe old/existing structure should be:\r\n```python\r\n        metadata[""extra_fields""] = {\r\n            ""options"": {\r\n                ""m"": 3,\r\n                ""n"": 6,\r\n                ""mastery_model"": exercises.M_OF_N,\r\n            }\r\n        }\r\n```\r\n\r\nSince you added your ` consolidate_extra_fields` to `field_map`, which is invoked during serialization of a content node, a good test would be to ensure that serializing a content node with the old mastery structure, like in a GET request, produces the new structure.', 'comment_created': datetime.datetime(2022, 6, 13, 16, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 899110972, 'comment_body': ""Looks like there's an extraneous `print` here!"", 'comment_created': datetime.datetime(2022, 6, 16, 13, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 899114051, 'comment_body': 'What spurred changes to this class? Are they still required?', 'comment_created': datetime.datetime(2022, 6, 16, 13, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 899148315, 'comment_body': 'I was getting ""errors"":{""extra_fields"":{""options"":{""completion_criteria"":{""threshold"":[""Not a valid string.""]}}}}}]}\' when I was running the tests. It seems like we need to add special handling in the to_internal_value function. This was the work around suggested by @rtibbles sir.', 'comment_created': datetime.datetime(2022, 6, 16, 14, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ozer550', 'type': 'User'}, {'comment_id': 899159618, 'comment_body': 'Yeah - the issue here was that the ThresholdField needs to allow either a string, integer, dict, or null - but the CharField with some extra validation only allowed string, integer or null.', 'comment_created': datetime.datetime(2022, 6, 16, 14, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 899190061, 'comment_body': ""Would be good to add an extra condition here checking `mastery_model is not None` - and add an extra test for this condition - basically, when the exercise hasn't had a mastery model set on it."", 'comment_created': datetime.datetime(2022, 6, 16, 15, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 899348987, 'comment_body': ""I made a mistake here. The old format was at the top level of `extra_fields`, not `extra_fields.options`. So in your tests, the old data should be moved up a level, and a change to your consolidate function to match. I got hung up on the existence of `threshold` that you had previously, I missed that the old format wasn't inside `options`. My apologies!"", 'comment_created': datetime.datetime(2022, 6, 16, 17, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}]","[{'commit_sha': '011be89e242e2b9081b61f240e60ad65686726ea', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7a4c2bf025a47321c6123f8d8aba2dd11669bc7', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '878fc03a6324d299c06013ff7c1fe036a61e5a43', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86bf229f33d538b12f33b55b6155a44ec1375250', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41b44f868708ac72af88269dca7dc7fae49e4636', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23675f6c40050f78766241e8072202252a28d3b9', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}]",Prathamesh Desai,51698593,prathameshd419@gmail.com,User,,38,,74,67
981674071,Initial websockets integration,"## Summary
The Pr integrates Django channels with the project and updates the frontend to open a websocket request when we open a channel. It also implements initial functions in consumers for backend handling of WebSockets and their tests.

### Description of the change(s) you made
This PR does implement the following features:
- Integrates Django channels into the project
- Implements backend consumer functions to handle connect and disconnect phase.
- Updates frontend to create a websocket request when a user opens a channel.
- Test for consumer functions.

### Manual verification steps performed
Ran all tests

## Comments
Work is still in progress.


",True,3433,https://api.github.com/repos/learningequality/studio/pulls/3433,https://github.com/learningequality/studio/pull/3433,closed,412,25,11,13,0,22,4,0,"[{'name': 'TAG: new feature'}, {'name': 'TAG: dependencies'}, {'name': 'TODO: needs review'}, {'name': 'python'}]",2022-06-28 17:09:01+00:00,2022-07-20 14:21:14+00:00,1890733.0,"21 days, 21:12:13","[{'comment_id': 910257655, 'comment_body': ""Thank you for updating this! It's also defined in the [Github workflow](https://github.com/learningequality/studio/blob/unstable/.github/workflows/pythontest.yml#L47)"", 'comment_created': datetime.datetime(2022, 6, 29, 18, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 910260367, 'comment_body': ""You'll want to think about what the protocol is here, and how that will change for dev environments vs production, since production uses `https`."", 'comment_created': datetime.datetime(2022, 6, 29, 18, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 916082474, 'comment_body': 'Done sir, Sorry for the inconvenience.', 'comment_created': datetime.datetime(2022, 7, 7, 16, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ozer550', 'type': 'User'}, {'comment_id': 921420978, 'comment_body': ""I think my previous comment about this got lost, but I'd recommend looking into the two websocket protocols, `ws://` vs `wss://`, and how this bit of code might need to change when this is deployed to production (or any server using HTTPS)"", 'comment_created': datetime.datetime(2022, 7, 14, 17, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 921427670, 'comment_body': ""You might ask yourself, is this log message useful? I can see why you added it, but you might consider whether this should exist long term. In a production environment, with large amounts of traffic, the log aggregation from the pods handling the requests will likely make this visual distinction irrelevant.\r\n\r\nAnother consideration to make when logging messages is what log level to use. The `debug` level is useful for extra verbose messaging, and wouldn't be rendered to the logs in production, but should be visible in our development environments."", 'comment_created': datetime.datetime(2022, 7, 14, 17, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 921428907, 'comment_body': ""Consider moving this to a docstring below the function `def`. Here's [an example](https://github.com/learningequality/studio/blob/unstable/contentcuration/contentcuration/db/advisory_lock.py#L16)"", 'comment_created': datetime.datetime(2022, 7, 14, 17, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 921430122, 'comment_body': 'This seems relatively benign, but why was this required?', 'comment_created': datetime.datetime(2022, 7, 14, 17, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 921432239, 'comment_body': 'You might consider string interpolation for this, which makes it a tiny bit more readable an concise. JavaScript has [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)', 'comment_created': datetime.datetime(2022, 7, 14, 17, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 921432689, 'comment_body': 'Best to delete this if not required!', 'comment_created': datetime.datetime(2022, 7, 14, 17, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 921433569, 'comment_body': 'Is a new instance of this class created for every websocket connection?', 'comment_created': datetime.datetime(2022, 7, 14, 18, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 921435049, 'comment_body': 'Having large blocks of nested logic can create additional overhead for the reader. You might consider doing something like:\r\n```python\r\nif not changes:\r\n    return\r\n\r\n# the existing logic exists here\r\n```', 'comment_created': datetime.datetime(2022, 7, 14, 18, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 921736359, 'comment_body': 'Better yet, use the URL object to generate this https://developer.mozilla.org/en-US/docs/Web/API/URL', 'comment_created': datetime.datetime(2022, 7, 15, 1, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 922128886, 'comment_body': 'Yes sir for every connection a new consumer instance is created which is a standalone asgi application.', 'comment_created': datetime.datetime(2022, 7, 15, 12, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ozer550', 'type': 'User'}, {'comment_id': 922136175, 'comment_body': 'After you have mentioned it I was re-thinking about this a bit, do we even need this change check as the receive function will only be triggered when actually changes are being sent by the frontend. I am thinking of removing this check!!\r\n', 'comment_created': datetime.datetime(2022, 7, 15, 12, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ozer550', 'type': 'User'}, {'comment_id': 922670728, 'comment_body': 'The official documents of django channels did it in there tutorial [asgi file](https://channels.readthedocs.io/en/stable/tutorial/part_1.html#integrate-the-channels-library). ', 'comment_created': datetime.datetime(2022, 7, 16, 11, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ozer550', 'type': 'User'}, {'comment_id': 924782353, 'comment_body': 'Okay, I think this is safe to remove then.', 'comment_created': datetime.datetime(2022, 7, 19, 17, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 924785324, 'comment_body': 'It\'s possible to run studio in ""production"" mode, on your local development machine, without using HTTPS. I think this should change to look at the `window.location.protocol` https://developer.mozilla.org/en-US/docs/Web/API/Location/protocol', 'comment_created': datetime.datetime(2022, 7, 19, 17, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 924791910, 'comment_body': 'I think it would be a good idea to implement the Don\'t Repeat Yourself (DRY) principle here. Here\'s an example, using the `URL` object, including my other comment about the protocol:\r\n```js\r\nconst websocketUrl = new URL(`/ws/sync_socket/${window.CHANNEL_EDIT_GLOBAL.channel_id}/`, window.location.href);\r\nwebsocketUrl.protocol = window.location.protocol == ""https:"" ? ""wss:"" : ""ws:"";\r\n```', 'comment_created': datetime.datetime(2022, 7, 19, 17, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 924792926, 'comment_body': ""It's a common convention to have `__init__` be the first method in the class"", 'comment_created': datetime.datetime(2022, 7, 19, 17, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 924795141, 'comment_body': 'Why are both `room_name` and `room_group_name` needed?', 'comment_created': datetime.datetime(2022, 7, 19, 17, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 924795833, 'comment_body': 'I see several properties being set from information available in `self.scope`. Would it make sense to have these be class properties? for example\r\n```python\r\n@property\r\ndef user(self):\r\n    return self.scope[""user""]\r\n', 'comment_created': datetime.datetime(2022, 7, 19, 17, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 924798035, 'comment_body': 'If you did this, `check_authentication` could use `self.user`, instead of duplicating access to the where the user object originates from', 'comment_created': datetime.datetime(2022, 7, 19, 17, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}]","[{'commit_sha': '760298cab2981c6f0e7b450d67277e5a6faa0a71', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '798822e2b5072cd87021d98e835cab4340a3c5ad', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d2f27ce695cdb8b63b3247eca81b3cf083931bd', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3bc91b93927baf4c51c0603ce887b77a8c18e4c', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44ef33901eac03e6242332ab2efadace06f3c0dc', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8d02ed7504859a619f8efe26d27c238d6a64b42', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0835e3d4506f37c916f3ae6faadd483980d2034', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07041bc3680001dc28b57da54df9f44743ba888f', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b656473f2b7cbeba656925d8e1869cc3649a012e', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b9b63c3c05064c8d10a45f046b603b4d6da2c8e', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7a39f1141b68359f12a92ca4103a5e274cf74b0', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1508d413f56dbf24192351051b3e5664e20969fe', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11ce747edabce0c2c0ed31adff3fabd6adc6922f', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}]",Prathamesh Desai,51698593,prathameshd419@gmail.com,User,,38,,74,67
1014750716,Feat change log broadcasting,"## Summary
Added mechanism to broadcast change object model via Django signals.
### Description of the change(s) you made
Added the following features:
1. Signals on save of Change object.
2. Broadcast changes to frontend once signal gets triggered.
3. Test the signals and its decision tree.

### Manual verification steps performed
1. Ran all tests

### Are there any risky areas that deserve extra testing?
The create_changes function(applies changes in bulk) does not use the save method so the signal will not be triggered but it won't matter in our case as told by @rtibbles sir.


Testing:

- [x] Code is clean and well-commented
- [x] Contributor has fully tested the PR manually
- [ ] If there are any front-end changes, before/after screenshots are included
- [ ] Critical user journeys are covered by Gherkin stories
- [ ] Any new interactions have been added to the [QA Sheet](https://docs.google.com/spreadsheets/d/1HF4Gy6rb_BLbZoNkZEWZonKFBqPyVEiQq4Ve6XgIYmQ/edit#gid=0)
- [x] Critical and brittle code paths are covered by unit tests
___

### Reviewer's Checklist
#### This section is for reviewers to fill out.

- [ ] Automated test coverage is satisfactory
- [ ] PR is fully functional
- [ ] PR has been tested for [accessibility regressions](http://kolibri-dev.readthedocs.io/en/develop/manual_testing.html#accessibility-a11y-testing)
- [ ] External dependency files were updated if necessary (`yarn` and `pip`)
- [ ] Documentation is updated
- [ ] Contributor is in AUTHORS.md
",True,3471,https://api.github.com/repos/learningequality/studio/pulls/3471,https://github.com/learningequality/studio/pull/3471,closed,290,2,7,11,1,9,0,0,[],2022-08-02 07:58:59+00:00,2022-08-09 14:24:40+00:00,627941.0,"7 days, 6:25:41","[{'comment_id': 938866318, 'comment_body': ""For any cases here where you're using `assert_called_with`, if it's applicable that they could be replaced with `assert_called_once_with`, I would suggest that wherever possible."", 'comment_created': datetime.datetime(2022, 8, 5, 14, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 938871509, 'comment_body': 'Perhaps move this into the method doc block. Also, might be good to expand on this comment-- if I\'m understanding everything correctly, perhaps something like:\r\n```\r\n""""""\r\nReceive message events sent to the subscribed groups from our Django signal handlers, and relay the messages to the frontend\r\n""""""\r\n```', 'comment_created': datetime.datetime(2022, 8, 5, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 938872974, 'comment_body': 'If the `if` condition above tests `and room_group_name`, do we need the `or """"`? Similar question in other places', 'comment_created': datetime.datetime(2022, 8, 5, 14, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 938875551, 'comment_body': 'Since we really should have the `created_by_id` defined, perhaps we log an error if we detect it isn\'t set, and remove this passive `or """"` which could lead to undefined behavior.', 'comment_created': datetime.datetime(2022, 8, 5, 14, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 940328927, 'comment_body': ':100: ', 'comment_created': datetime.datetime(2022, 8, 8, 14, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 940329714, 'comment_body': 'This could be a rather large dictionary. Perhaps consider adding the `instance.pk`?', 'comment_created': datetime.datetime(2022, 8, 8, 14, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 940333393, 'comment_body': ""In my last review, I didn't notice that this file lives outside of the `tests/` directory. To keep a clear separation between test utilities and code needed for core functionality, I think it would be best to relocate everything below to inside `tests/`"", 'comment_created': datetime.datetime(2022, 8, 8, 14, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 940334784, 'comment_body': 'Why the parentheses? ', 'comment_created': datetime.datetime(2022, 8, 8, 14, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 940341083, 'comment_body': 'sorry sometimes the java habit kicks in :sweat_smile:', 'comment_created': datetime.datetime(2022, 8, 8, 14, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ozer550', 'type': 'User'}]","[{'commit_sha': '721a052832336a29c4babe767a63322d52aee932', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1461aab712bf34c19e1ea3d6d02e6e736c88bf', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '279daf47914bc5a6bb6c5c27a14aa762a50f6778', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40a08fecb1ed9368fc5da6d8375d1c43a0b842c6', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa54a249674b1786d8f5699b0e8d5fd6eb3e2619', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4092a3fb5db42f7e4c2ab4b4c56d6a140413a95c', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc9982a7057dc96a2e6273a2d3d5c4caef4462c9', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9bc522b1ba99e5e58341fdc243d749ba7ad7d32', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afe273a2b2bbfcc05e9c3289285f22af6cc47a09', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc1db42385bb6b1fe5bf2fac0ae08e520ecf43c5', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9c9b68076309bc697aad96cc9a2cea39e7237b6', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}]",Prathamesh Desai,51698593,prathameshd419@gmail.com,User,,38,,74,67
1047971715,Feat server sync js cleanup,"## Summary
This pr remolds the serverSync.js to fully and properly support incoming events from WebSockets. It removes the polling interval used for syncing with the backend.

### Description of the change(s) you made
- Changes ServerSync.js to add event listeners for websocket events 
- Removes polling in regular intervals 🥳🥳
- Forces created_by_id of change object to not be null
- Additional hacks around some IGNORED_SOURCE change objects


### Manual verification steps performed
Ran pytest

### Does this introduce any tech-debt items?
Some of the internal logic of Publishing is still broken. The bar always shows that we can publish even tho there are no changes made.

### Are there any risky areas that deserve extra testing?
Every thing is at risk!!!!!!


## References
<!--
Additional, helpful things to add in this section:
 * links to mockups or specs for new features
 * links to the diffs for any dependency updates, e.g. in iceqube or the perseus plugin
 * references to relevant issues or Notion projects
-->

## Comments
<!-- Additional comments may be added here -->

----

### Contributor's Checklist
<!-- After saving the PR, come through to tick off completed checklist items. Delete any sections that are not applicable to your PR -->

PR process:

- [ ] If this is an important user-facing change, PR or related issue the `CHANGELOG` label been added to this PR. Note: items with this label will be added to the [CHANGELOG](https://github.com/learningequality/studio/blob/master/CHANGELOG.md) at a later time
- [ ] If this includes an internal dependency change, a link to the diff is provided
- [ ] The `docs` label has been added if this introduces a change that needs to be updated in the [user docs](https://kolibri-studio.readthedocs.io/en/latest/index.html)?
- [ ] If any Python requirements have changed, the updated `requirements.txt` files also included in this PR
- [ ] Opportunities for using Google Analytics here are noted
- [ ] Migrations are [safe for a large db](https://www.braintreepayments.com/blog/safe-operations-for-high-volume-postgresql/)

Studio-specifc:

- [ ] All user-facing strings are translated properly
- [ ] The `notranslate` class been added to elements that shouldn't be translated by Google Chrome's automatic translation feature (e.g. icons, user-generated text)
- [ ] All UI components are LTR and RTL compliant
- [ ] Views are organized into `pages`, `components`, and `layouts` directories [as described in the docs](https://github.com/learningequality/studio/blob/vue-refactor/docs/architecture.md#where-does-the-frontend-code-live)
- [ ] Users' storage used is recalculated properly on any changes to main tree files
- [ ] If there new ways this uses user data that needs to be factored into our [Privacy Policy](https://github.com/learningequality/studio/tree/master/contentcuration/contentcuration/templates/policies/text), it has been noted.


Testing:

- [ ] Code is clean and well-commented
- [ ] Contributor has fully tested the PR manually
- [ ] If there are any front-end changes, before/after screenshots are included
- [ ] Critical user journeys are covered by Gherkin stories
- [ ] Any new interactions have been added to the [QA Sheet](https://docs.google.com/spreadsheets/d/1HF4Gy6rb_BLbZoNkZEWZonKFBqPyVEiQq4Ve6XgIYmQ/edit#gid=0)
- [ ] Critical and brittle code paths are covered by unit tests
___

### Reviewer's Checklist
#### This section is for reviewers to fill out.

- [ ] Automated test coverage is satisfactory
- [ ] PR is fully functional
- [ ] PR has been tested for [accessibility regressions](http://kolibri-dev.readthedocs.io/en/develop/manual_testing.html#accessibility-a11y-testing)
- [ ] External dependency files were updated if necessary (`yarn` and `pip`)
- [ ] Documentation is updated
- [ ] Contributor is in AUTHORS.md
",True,3607,https://api.github.com/repos/learningequality/studio/pulls/3607,https://github.com/learningequality/studio/pull/3607,closed,258,103,12,11,0,15,0,0,[],2022-09-06 19:59:41+00:00,2022-09-08 17:53:34+00:00,165233.0,"1 day, 21:53:53","[{'comment_id': 964128169, 'comment_body': ""I don't think this function is needed. I think the call to this can be replaced with `applyChanges([data.change])`"", 'comment_created': datetime.datetime(2022, 9, 6, 20, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 964129414, 'comment_body': 'I think it was mentioned that the call to this with a single `change` object means all of the code in this function can be simplified. ', 'comment_created': datetime.datetime(2022, 9, 6, 20, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 964131313, 'comment_body': 'Delete!', 'comment_created': datetime.datetime(2022, 9, 6, 20, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 964131715, 'comment_body': 'Delete!', 'comment_created': datetime.datetime(2022, 9, 6, 20, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 964134200, 'comment_body': 'Is it really an array? I see in your `consumers.py` it seems to be broadcasting with a `serialized_change_object`', 'comment_created': datetime.datetime(2022, 9, 6, 20, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 964134670, 'comment_body': 'Again, similar to my other comments about simplification, if `error` is a single object, this can all be simplified.', 'comment_created': datetime.datetime(2022, 9, 6, 20, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 964135277, 'comment_body': ""Where does `responsePayload` come from? I don't see it defined on the backend."", 'comment_created': datetime.datetime(2022, 9, 6, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 964138941, 'comment_body': 'I think it would be nice if we decrease `SYNC_IF_NO_CHANGES_FOR` which is the debounce time to something less than the existing 2 seconds, perhaps 500ms?', 'comment_created': datetime.datetime(2022, 9, 6, 20, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 964140542, 'comment_body': 'Delete!', 'comment_created': datetime.datetime(2022, 9, 6, 20, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 965001782, 'comment_body': 'I think the simplest thing to do here might be to make this parallel to the change sending in `syncChanges`, and here instead of passing in `changesToSync` we do the same `syncActive` blocking, and get the syncable changes to send here in exactly the same way as in `syncChanges`. I see a lot of the logic is already parallel, so I think this will work well.', 'comment_created': datetime.datetime(2022, 9, 7, 15, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rtibbles', 'type': 'User'}, {'comment_id': 966013366, 'comment_body': ""Looking at the former implementation of `handleMaxRevs`, it looks like we want to call it with:\r\n```\r\nget(response, ['data', 'changes'], [])\r\n      .concat(get(response, ['data', 'errors'], []))\r\n      .concat(get(response, ['data', 'successes'], []))\r\n```"", 'comment_created': datetime.datetime(2022, 9, 8, 14, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 966015680, 'comment_body': 'It seems that for errors and successes, it should also call `handleMaxRevs` since that would extract those from the response in the previous implementation', 'comment_created': datetime.datetime(2022, 9, 8, 14, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 966016378, 'comment_body': 'Wrapping these two in `Promise.all([ ... ])` is unnecessary here, since nothing is waiting on that promise.', 'comment_created': datetime.datetime(2022, 9, 8, 14, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 966028407, 'comment_body': 'One issue I see with this is that if new changes come in while the `syncActive` is `true`, then those would have to wait until a new change event in order to trigger syncing through the websocket. @rtibbles if we figure out how to properly include the `client_rev`, could this go back to just passing `newChangetableEntries.map(...)`?', 'comment_created': datetime.datetime(2022, 9, 8, 14, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 966236561, 'comment_body': ""The logic in `handleMaxRevs` uses `userId` when processing user related changes by checking `user_id` on the change object. There is a case where a change object would have `user_id !== created_by_id`, when a user invites another user to edit a channel. That means your code here would be open to causing a regression. The existing code always calls `handleMaxRevs` with user's ID obtained from `Session.getSession()`. Maintaining that is a good idea.\r\n\r\nAs I mentioned on slack, for handling the errors like you sent me, the `created_by_id` would probably work fine, but isn't a good idea for these other calls to `handleMaxRevs`. So you might as well change all of them."", 'comment_created': datetime.datetime(2022, 9, 8, 17, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}]","[{'commit_sha': 'c4393729a9f1a05288c9ebeacb117a749af11f24', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29e4a6617518182dcba0823f2c67d4e969466eee', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15eaf377e394ad10f9094ff4819a39ee3fc367b7', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aed085d97dcd27ad4674a821b9b867866e9be2e9', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ce67071a011ee3fc3f3ad5baa799f36f9ceddba', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '262360b78e5c986e3e687d499ff8f98e8a338213', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55e3be894272e8980cc007f7dd98146cf8d3e77b', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9874ec55d63e8ff3a16fd2147eb44a19db2d9ec', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd83df35a08f4658031bb5b63fd4252ed782bd9dc', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd970e2dcaabb60da9d48e43dc7b0b74acb93d5bc', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd4c54139419242bd020e804461165c54ee8857d', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}]",Prathamesh Desai,51698593,prathameshd419@gmail.com,User,,38,,74,67
1042648530,Add recipe for daphne server and change nginx file,"## Summary
Change nginx configuration to add daphne server. Proxy pass websocket requests to Daphne.
### Description of the change(s) you made
- Created recipe for daphne server
- Reduced NUM_PROCS to two for the daphne server.
- Configured nginx file to proxy pass to daphne server for any incoming websocket request.

",True,3595,https://api.github.com/repos/learningequality/studio/pulls/3595,https://github.com/learningequality/studio/pull/3595,closed,25,3,2,1,1,0,0,0,[],2022-08-31 17:09:34+00:00,2022-09-02 14:51:50+00:00,164536.0,"1 day, 21:42:16",[],"[{'commit_sha': '49da0b7d8c1ba1b9667d99d691c9464e5b3cd243', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}]",Prathamesh Desai,51698593,prathameshd419@gmail.com,User,,38,,74,67
1033135899,remould frontend to remove fake task object,"## Summary
This PR implements the broadcasting of tasks using WebSockets. It removes the existing mechanism which involved fake task object that was being created. Now the task status is directly being broadcasted at the time of update and added to the TASK table of the frontend.

### Description of the change(s) you made
- Direct broadcasting of Task progress
- Delegated consumer functions for error, task, and change broadcasting.

## Reviewer guidance
### How can a reviewer test these changes?
Manually it can be checked by publishing a channel!

## Comments
contentcuration/contentcuration/tests/test_asynctask.py tests are failing with ```celery.exceptions.TimeoutError: The operation timed out``` error.

----

### Contributor's Checklist


Testing:

- [ ] Code is clean and well-commented
- [ ] Contributor has fully tested the PR manually
- [ ] If there are any front-end changes, before/after screenshots are included
- [ ] Critical user journeys are covered by Gherkin stories
- [ ] Any new interactions have been added to the [QA Sheet](https://docs.google.com/spreadsheets/d/1HF4Gy6rb_BLbZoNkZEWZonKFBqPyVEiQq4Ve6XgIYmQ/edit#gid=0)
- [ ] Critical and brittle code paths are covered by unit tests
___

### Reviewer's Checklist
#### This section is for reviewers to fill out.

- [ ] Automated test coverage is satisfactory
- [ ] PR is fully functional
- [ ] PR has been tested for [accessibility regressions](http://kolibri-dev.readthedocs.io/en/develop/manual_testing.html#accessibility-a11y-testing)
- [ ] External dependency files were updated if necessary (`yarn` and `pip`)
- [ ] Documentation is updated
- [ ] Contributor is in AUTHORS.md
",True,3568,https://api.github.com/repos/learningequality/studio/pulls/3568,https://github.com/learningequality/studio/pull/3568,closed,117,49,6,3,0,2,0,0,[],2022-08-22 17:16:11+00:00,2022-08-22 18:14:47+00:00,3516.0,0:58:36,"[{'comment_id': 951724082, 'comment_body': 'Where does `status` get set to `SUCCESS`?', 'comment_created': datetime.datetime(2022, 8, 22, 17, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}, {'comment_id': 951725977, 'comment_body': ""What if this isn't called with `progress = 100`? It may be safer to broadcast this where the old task object was deleted, but I'm not sure we need to handle this as the old sync endpoint never returned `SUCCESS` tasks"", 'comment_created': datetime.datetime(2022, 8, 22, 17, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bjester', 'type': 'User'}]","[{'commit_sha': 'bed4154dc008cf300d27f1585c494f9d137c0810', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80f0a87e30b45f9123f0fe8794f4752073686e8b', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15a401449d3f65706395c3d18a1588df35659f12', 'committer_username': 'ozer550', 'committer_name': 'Prathamesh Desai', 'committer_email': 'prathameshd419@gmail.com', 'commit_date': datetime.datetime(2019, 6, 11, 8, 39, 58, tzinfo=datetime.timezone.utc)}]",Prathamesh Desai,51698593,prathameshd419@gmail.com,User,,38,,74,67

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
35178170,studio,learningequality/studio,Python,157,95,20,84,12779,323,30,36,"[{'id': 2019800953, 'number': 4642, 'closed': datetime.datetime(2024, 8, 22, 18, 40, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 8, 14, 17, 36, 35, tzinfo=datetime.timezone.utc), 'time_taken': 695042.0, 'time_delta': '8 days, 1:04:02', 'additions': 54, 'deletions': 1, 'state': 'closed'}, {'id': 1956518512, 'number': 4602, 'closed': datetime.datetime(2024, 7, 11, 7, 5, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 7, 17, 41, 35, tzinfo=datetime.timezone.utc), 'time_taken': 307435.0, 'time_delta': '3 days, 13:23:55', 'additions': 52, 'deletions': 7, 'state': 'closed'}, {'id': 1901328581, 'number': 4582, 'closed': datetime.datetime(2024, 6, 4, 14, 53, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 3, 17, 18, 4, tzinfo=datetime.timezone.utc), 'time_taken': 77710.0, 'time_delta': '21:35:10', 'additions': 10, 'deletions': 13, 'state': 'closed'}, {'id': 1838584522, 'number': 4537, 'closed': datetime.datetime(2024, 8, 20, 10, 55, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 24, 11, 1, 2, tzinfo=datetime.timezone.utc), 'time_taken': 10194873.0, 'time_delta': '117 days, 23:54:33', 'additions': 236, 'deletions': 1, 'state': 'closed'}, {'id': 1793790433, 'number': 4490, 'closed': datetime.datetime(2024, 4, 15, 18, 22, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 27, 11, 57, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1664714.0, 'time_delta': '19 days, 6:25:14', 'additions': 232, 'deletions': 0, 'state': 'closed'}, {'id': 1658706681, 'number': 4373, 'closed': datetime.datetime(2024, 5, 1, 17, 3, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 28, 7, 22, 47, tzinfo=datetime.timezone.utc), 'time_taken': 10834818.0, 'time_delta': '125 days, 9:40:18', 'additions': 234, 'deletions': 0, 'state': 'closed'}, {'id': 1594183473, 'number': 4333, 'closed': datetime.datetime(2023, 11, 9, 16, 47, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 9, 10, 53, 11, tzinfo=datetime.timezone.utc), 'time_taken': 21276.0, 'time_delta': '5:54:36', 'additions': 14, 'deletions': 25, 'state': 'closed'}, {'id': 1588070909, 'number': 4330, 'closed': datetime.datetime(2023, 11, 9, 10, 52, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 6, 8, 13, 29, tzinfo=datetime.timezone.utc), 'time_taken': 268768.0, 'time_delta': '3 days, 2:39:28', 'additions': 12, 'deletions': 28, 'state': 'closed'}, {'id': 1547435886, 'number': 4309, 'closed': datetime.datetime(2023, 10, 10, 14, 1, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 9, 8, 54, 33, tzinfo=datetime.timezone.utc), 'time_taken': 104817.0, 'time_delta': '1 day, 5:06:57', 'additions': 50, 'deletions': 0, 'state': 'closed'}, {'id': 1540118548, 'number': 4306, 'closed': datetime.datetime(2023, 10, 11, 18, 11, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 3, 14, 28, 59, tzinfo=datetime.timezone.utc), 'time_taken': 704543.0, 'time_delta': '8 days, 3:42:23', 'additions': 113, 'deletions': 2, 'state': 'closed'}, {'id': 1493915781, 'number': 4268, 'closed': datetime.datetime(2023, 10, 30, 19, 41, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 29, 14, 42, 53, tzinfo=datetime.timezone.utc), 'time_taken': 5374693.0, 'time_delta': '62 days, 4:58:13', 'additions': 272, 'deletions': 158, 'state': 'closed'}, {'id': 1321347016, 'number': 4034, 'closed': datetime.datetime(2023, 4, 20, 14, 14, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 20, 11, 31, 30, tzinfo=datetime.timezone.utc), 'time_taken': 9809.0, 'time_delta': '2:43:29', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 1309440988, 'number': 4019, 'closed': datetime.datetime(2023, 5, 10, 17, 0, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 11, 17, 42, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2503098.0, 'time_delta': '28 days, 23:18:18', 'additions': 53, 'deletions': 134, 'state': 'closed'}, {'id': 1293353124, 'number': 4005, 'closed': datetime.datetime(2023, 4, 11, 15, 21, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 28, 17, 0, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1203621.0, 'time_delta': '13 days, 22:20:21', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 1284605512, 'number': 3997, 'closed': datetime.datetime(2023, 4, 13, 20, 54, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 21, 16, 51, 41, tzinfo=datetime.timezone.utc), 'time_taken': 2001794.0, 'time_delta': '23 days, 4:03:14', 'additions': 219, 'deletions': 224, 'state': 'closed'}, {'id': 1222812153, 'number': 3939, 'closed': datetime.datetime(2023, 1, 31, 15, 10, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 31, 6, 58, 28, tzinfo=datetime.timezone.utc), 'time_taken': 29505.0, 'time_delta': '8:11:45', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 1185245815, 'number': 3901, 'closed': datetime.datetime(2023, 1, 31, 23, 45, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 4, 17, 47, 54, tzinfo=datetime.timezone.utc), 'time_taken': 2354240.0, 'time_delta': '27 days, 5:57:20', 'additions': 139, 'deletions': 8, 'state': 'closed'}, {'id': 1104609380, 'number': 3783, 'closed': None, 'created': datetime.datetime(2022, 10, 30, 19, 38, 18, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 25, 'deletions': 0, 'state': 'open'}, {'id': 1083796590, 'number': 3729, 'closed': datetime.datetime(2022, 10, 11, 21, 49, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 11, 20, 26, 10, tzinfo=datetime.timezone.utc), 'time_taken': 4999.0, 'time_delta': '1:23:19', 'additions': 23, 'deletions': 2, 'state': 'closed'}, {'id': 1079385051, 'number': 3721, 'closed': datetime.datetime(2022, 11, 2, 18, 33, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 6, 17, 33, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2336424.0, 'time_delta': '27 days, 1:00:24', 'additions': 258, 'deletions': 44, 'state': 'closed'}, {'id': 1062801054, 'number': 3662, 'closed': datetime.datetime(2022, 9, 21, 20, 37, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 21, 12, 36, 51, tzinfo=datetime.timezone.utc), 'time_taken': 28833.0, 'time_delta': '8:00:33', 'additions': 36, 'deletions': 1, 'state': 'closed'}, {'id': 1050678589, 'number': 3621, 'closed': None, 'created': datetime.datetime(2022, 9, 8, 18, 25, 36, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1044, 'deletions': 128, 'state': 'open'}, {'id': 1047971715, 'number': 3607, 'closed': datetime.datetime(2022, 9, 8, 17, 53, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 6, 19, 59, 41, tzinfo=datetime.timezone.utc), 'time_taken': 165233.0, 'time_delta': '1 day, 21:53:53', 'additions': 258, 'deletions': 103, 'state': 'closed'}, {'id': 1042648530, 'number': 3595, 'closed': datetime.datetime(2022, 9, 2, 14, 51, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 31, 17, 9, 34, tzinfo=datetime.timezone.utc), 'time_taken': 164536.0, 'time_delta': '1 day, 21:42:16', 'additions': 25, 'deletions': 3, 'state': 'closed'}, {'id': 1033135899, 'number': 3568, 'closed': datetime.datetime(2022, 8, 22, 18, 14, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 22, 17, 16, 11, tzinfo=datetime.timezone.utc), 'time_taken': 3516.0, 'time_delta': '0:58:36', 'additions': 117, 'deletions': 49, 'state': 'closed'}, {'id': 1014750716, 'number': 3471, 'closed': datetime.datetime(2022, 8, 9, 14, 24, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 7, 58, 59, tzinfo=datetime.timezone.utc), 'time_taken': 627941.0, 'time_delta': '7 days, 6:25:41', 'additions': 290, 'deletions': 2, 'state': 'closed'}, {'id': 981674071, 'number': 3433, 'closed': datetime.datetime(2022, 7, 20, 14, 21, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 28, 17, 9, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1890733.0, 'time_delta': '21 days, 21:12:13', 'additions': 412, 'deletions': 25, 'state': 'closed'}, {'id': 964796793, 'number': 3426, 'closed': datetime.datetime(2022, 6, 16, 19, 52, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 11, 16, 30, 23, tzinfo=datetime.timezone.utc), 'time_taken': 444144.0, 'time_delta': '5 days, 3:22:24', 'additions': 115, 'deletions': 32, 'state': 'closed'}, {'id': 890197394, 'number': 3352, 'closed': datetime.datetime(2022, 4, 25, 15, 18, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 26, 8, 52, 56, tzinfo=datetime.timezone.utc), 'time_taken': 2615136.0, 'time_delta': '30 days, 6:25:36', 'additions': 67, 'deletions': 40, 'state': 'closed'}, {'id': 878213195, 'number': 3340, 'closed': datetime.datetime(2022, 3, 29, 20, 57, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 12, 17, 19, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1481864.0, 'time_delta': '17 days, 3:37:44', 'additions': 32, 'deletions': 1, 'state': 'closed'}]"
