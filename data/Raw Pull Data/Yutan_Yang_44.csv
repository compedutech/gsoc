pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1271948823,feat: Implement delta-debugging as the reduction strategy,"Hello, I'm interested in the idea **test case reduction** in GSOC. This PR  implements a simple delta-debugging statement reduction strategy.

I'm new in this project and the open source community. I would appreicate it if you can point out my mistakes and offer me some guidance. Thanks :)",False,757,https://api.github.com/repos/sqlancer/sqlancer/pulls/757,https://github.com/sqlancer/sqlancer/pull/757,closed,38,9,1,4,12,8,0,0,[],2023-03-11 04:31:41+00:00,2023-06-16 08:47:05+00:00,8396124.0,"97 days, 4:15:24","[{'comment_id': 1133092878, 'comment_body': ""Maybe we can set a threshold so that only when `knownToReproduceBugStatements.size()` is very large do we use this method, and we use the normal full loop to handle cases when `knownToReproduceBugStatements.size()` is relatively small. \r\n\r\nJDK's implementation of the sort() algorithm is similar. If this sounds reasonable, we can discuss the threshold with @mrigger \r\n\r\n\r\n![image](https://user-images.githubusercontent.com/63448884/224475800-16158f6c-8f5f-4077-a920-8e43d0698f1c.png)\r\n"", 'comment_created': datetime.datetime(2023, 3, 11, 14, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ZhengLin-Li', 'type': 'User'}, {'comment_id': 1133092921, 'comment_body': ""I'd suggest that we use the variables `startIndex` and `subLength` for better code readability. But that's just my opinion, we can discuss with @mrigger "", 'comment_created': datetime.datetime(2023, 3, 11, 14, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ZhengLin-Li', 'type': 'User'}, {'comment_id': 1133092960, 'comment_body': ""The variable `subLength` is outside of the loop. Doesn't it need to change when the loop goes on?"", 'comment_created': datetime.datetime(2023, 3, 11, 14, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ZhengLin-Li', 'type': 'User'}, {'comment_id': 1133092993, 'comment_body': 'I am confused by this comment. From lines L46-L53, we actually add [start, start + subLength] to candidate statements. Do I get your idea correctly?', 'comment_created': datetime.datetime(2023, 3, 11, 14, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ZhengLin-Li', 'type': 'User'}, {'comment_id': 1133093022, 'comment_body': 'The `reductionOperation.apply(candidateStatements, start, subLength)` always returns true. Even though the old code does the same, need we improve this?', 'comment_created': datetime.datetime(2023, 3, 11, 14, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ZhengLin-Li', 'type': 'User'}, {'comment_id': 1133172227, 'comment_body': ""Delta-debugging splits the hole array into several blocks and try removing one of them to see if the same error is still triggered. The block could be large at the begining(e.g. half of the array size) if removing any block would let the bug go away, shrink the block size.\r\n\r\n```subLength``` is the block size. It determines how many statements should be dropped. So it shouldn't be changed in the inner loop."", 'comment_created': datetime.datetime(2023, 3, 12, 1, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}, {'comment_id': 1133172898, 'comment_body': ""```\r\nif (i >= s + l || i < s) {\r\n      removed.add(candidateStatements.get(i));\r\n}\r\ncandidateStatements.clear();\r\ncandidateStatements.addAll(removed);\r\n```\r\n\r\nIt's my fault to name it too casually.  We keep the [: start) and [start+subLength:] actually."", 'comment_created': datetime.datetime(2023, 3, 12, 1, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}, {'comment_id': 1133172974, 'comment_body': 'Thanks. I think it sould be improved.', 'comment_created': datetime.datetime(2023, 3, 12, 1, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}]","[{'commit_sha': 'c39ba291cf5f9dded65ceed1610d210b8df26c5e', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49ef4deb548c57d40003311986886bf472fbb641', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77376b8a6ddb277524aae2b6dbfcafb5902c20d2', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58421c5fb37d19b3d6707b2c2311e1188cb9887b', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}]",Yutan Yang,127477377,,User,,10,,6,1
1415902942,feat: Implement an AST based reducer prototype,"+ The reduer can run recursively visiting the ast-tree node and transforming the structure of the query. The reducing transformations includes:
  + remove some clauses such as where, having, etc.
  + remove some elements of a list. 
  + replace an binary expression with its left or right sub expression.
  + replace a constant long or double value with null or shorter literal value, e.g, `3.1415926535` -> `3.1`; `123431`->`0`;
+ Provide some test cases at `test/reducer/TestASTBasedReducer.java` demonstrating the effect of the reducer.
+ Currently the reducer focus on only `Select statements`. Could be extended later.
+ The code of this prototype might be hacky and ugly. Could be optimized on future commits. ",True,847,https://api.github.com/repos/sqlancer/sqlancer/pulls/847,https://github.com/sqlancer/sqlancer/pull/847,closed,688,5,5,7,3,17,0,0,[],2023-07-01 08:53:28+00:00,2023-07-04 10:51:09+00:00,266261.0,"3 days, 1:57:41","[{'comment_id': 1248795797, 'comment_body': 'I guess we can revert updating the settings here and the file below?', 'comment_created': datetime.datetime(2023, 7, 1, 12, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1248796677, 'comment_body': 'Why are we checking for 1000? Would it not also make sense to reduce a value like 999?', 'comment_created': datetime.datetime(2023, 7, 1, 12, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1248796755, 'comment_body': 'Why are we checking for 4 here?', 'comment_created': datetime.datetime(2023, 7, 1, 12, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1248798359, 'comment_body': 'I think it would be useful to have some comments for what these three arrays mean/how they are used', 'comment_created': datetime.datetime(2023, 7, 1, 12, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1248798829, 'comment_body': 'Based on my understanding, we are using reflection because we cannot change the fields otherwise, right? If so, perhaps, we could also add a comment mentioning this somewhere', 'comment_created': datetime.datetime(2023, 7, 1, 12, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1248800382, 'comment_body': 'Can we sometimes reduce lists with one element to lists with zero elements? In some DBMSs, this is valid. See https://www.db-fiddle.com/f/vXcJLN119VekRuz1jJuyJ5/0', 'comment_created': datetime.datetime(2023, 7, 1, 12, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1248800693, 'comment_body': 'perhaps we can just throw an `AssertionError` here instead, passing `e` to its constructor.', 'comment_created': datetime.datetime(2023, 7, 1, 12, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1248801479, 'comment_body': 'I guess we could already check against the result that this currently produces? We can still update the test case later when your implementation changes.', 'comment_created': datetime.datetime(2023, 7, 1, 12, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1248801840, 'comment_body': ""Here, we should use a Java enum, but it's also fine to do this in a follow-up PR."", 'comment_created': datetime.datetime(2023, 7, 1, 12, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1249347566, 'comment_body': 'Do we need to shorten other constant value like String?', 'comment_created': datetime.datetime(2023, 7, 2, 8, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DerZc', 'type': 'User'}, {'comment_id': 1249351995, 'comment_body': 'can we support common table expression (https://dev.mysql.com/doc/refman/8.0/en/with.html) here\r\nand derived tables (https://dev.mysql.com/doc/refman/8.0/en/derived-tables.html)', 'comment_created': datetime.datetime(2023, 7, 2, 8, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DerZc', 'type': 'User'}, {'comment_id': 1249529584, 'comment_body': ""I'd like to advise renaming this to get more clarity, e.g. `flatternChildren`"", 'comment_created': datetime.datetime(2023, 7, 2, 13, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oraluben', 'type': 'User'}, {'comment_id': 1250196078, 'comment_body': ""In fact, I plan to shorten the value and let them be less then 4 digits. So the constant values (including integer and float values) which are shorter than that would not be checked and reduced. \r\nAlso, There is another aspect that needs to be considered:\r\n``` java\r\ndo {\r\n    observeChange = false;\r\n    List<Expression> candidates = ExpressionTransformer.candidateExpressions(subExpr);\r\n    for (Expression candidate : candidates) {\r\n        try {\r\n            setter.accept(parent, candidate);\r\n            if (bugStillTriggers()) {\r\n                subExpr = candidate;\r\n                observeChange = true;\r\n            }\r\n        } catch (Exception ignoredException) {\r\n        }\r\n    }\r\n    setter.accept(parent, subExpr);\r\n} while (observeChange);\r\n```\r\n\r\nFor an expression, An array of candidate expressions would be generated. (e.g. for a long value, it would be [null, 0, 1]). \r\n\r\nIn the first round of while-loop, the expression would become `1`, but in the next round of loop, null, 0, 1 would be tried again respectively. The result would also be 1 and the `observeChange` would be true. Thus we've gone into an infinite loop. \r\n\r\nTherefore, we have to ensure that the constant values in the candidate list would not be reduced again. (negative long value should also be checkd, which I didn't do in this version.) \r\n\r\nShortening those values longer than a certain length could be a simple solution to avoid infinite loop. Maybe we could discuss and come up with some other approaches for this problem."", 'comment_created': datetime.datetime(2023, 7, 3, 4, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}, {'comment_id': 1250202900, 'comment_body': 'Relection is used to avoid repetitive code. For example, when trying removing clauses of an Select statement, e.g. `when`, `limit`, `offset` requires almost the same procedure. But the getter, setter method is not the same. I have to repeat the same code but replace the method name. e.g.: `getWhen, getLimit, getOffset`. Using reflection would make this procedure simpler. ', 'comment_created': datetime.datetime(2023, 7, 3, 4, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}, {'comment_id': 1250203614, 'comment_body': 'OK, I think the 1-element constraint could be removed. :)', 'comment_created': datetime.datetime(2023, 7, 3, 4, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}, {'comment_id': 1250205837, 'comment_body': 'Yes, String value could be reduced. I would add it in the later PR. ', 'comment_created': datetime.datetime(2023, 7, 3, 4, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}, {'comment_id': 1250320607, 'comment_body': ""Theoretically both could be handled. \r\nFor derived tables I've added support for it. :\r\nGiven a statement whose bug inducing part is `AVG` :\r\n```sql \r\nSELECT AVG(sum_column1)\r\nFROM (SELECT SUM(column1) AS sum_column1 FROM t1 GROUP BY column1 LIMIT 32 OFFSET 128) AS t1;\r\n```\r\nThe result is:\r\n``` sql \r\nSELECT AVG(sum_column1) FROM (SELECT SUM(column1) AS sum_column1 FROM t1) AS t1;\r\n```\r\nAs for common table expression, it hasn't be supported yet. \r\n\r\n\r\n"", 'comment_created': datetime.datetime(2023, 7, 3, 6, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}]","[{'commit_sha': '13b1a1ff4719fae1b9a4267f46c863a467dd60e1', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13d25253b3346bd25d8b36759da1beaa03b397a1', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5205799e96e0eaa1032beef83c8a800e6d5c1d7a', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e94a19d5dd35d4b5196f3ccf0c7611997be4f01', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cf8c784c253ba66658c9f46aa7a38ebb66f55a9', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a78bea8825f4a5f054de2c18661a609384873001', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aec08b2e9e667605d92c99e1f8a0df65192ed351', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}]",Yutan Yang,127477377,,User,,10,,6,1
1478678752,feat: refactor AST-based reducer,"* different kinds of transformers are defined separately, making the reducer more extenable.
  * To define different types of transformations, you simply need to create classes that inherit from `Transformation` and implement specific logic. The `Transformation` class defines some common APIs such as `tryRemove`, `tryReduce`.
  * Currently, the implemented transformations are based on JSQLParser, so they all inherit from `JSQLParserBasedTransformation`, which interacts with JSQLParser. However, It is possible to define transformations not based on this tool since the `Transformation` class doesn't rely on it.
* add options to enable AST Based Reducer",True,879,https://api.github.com/repos/sqlancer/sqlancer/pulls/879,https://github.com/sqlancer/sqlancer/pull/879,closed,1054,488,15,8,2,9,0,0,[],2023-08-17 09:17:00+00:00,2023-08-24 08:35:22+00:00,602302.0,"6 days, 23:18:22","[{'comment_id': 1297957362, 'comment_body': ""We might want to add some check that `--use-reducer`'s set when `--reduce-AST` is true."", 'comment_created': datetime.datetime(2023, 8, 18, 3, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oraluben', 'type': 'User'}, {'comment_id': 1298132399, 'comment_body': 'This looks too nested, how about: \r\n\r\n```suggestion\r\n        if (!(statement instanceof Insert)) {\r\n            return;\r\n        }\r\n\r\n        SelectBody selectBody = ((Insert) statement).getSelect().getSelectBody();\r\n\r\n        if (!(selectBody instanceof SetOperationList)) {\r\n            return;\r\n        }\r\n\r\n        SetOperationList insertingList = (SetOperationList) selectBody;\r\n        for (SelectBody selBody : insertingList.getSelects()) {\r\n            if (!(selBody instanceof ValuesStatement)) {\r\n                continue;\r\n            }\r\n\r\n            ValuesStatement valuesStatement = (ValuesStatement) selBody;\r\n            ItemsList itemsList = valuesStatement.getExpressions();\r\n\r\n            if (!(itemsList instanceof ExpressionList)) {\r\n                continue;\r\n            }\r\n\r\n            tryRemoveElms((ExpressionList) itemsList, ((ExpressionList) itemsList).getExpressions(), ExpressionList::setExpressions);\r\n        }\r\n```', 'comment_created': datetime.datetime(2023, 8, 18, 7, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oraluben', 'type': 'User'}, {'comment_id': 1298458819, 'comment_body': 'not sure if I understand the comment here. how do double values relate to string values?', 'comment_created': datetime.datetime(2023, 8, 18, 13, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1298459666, 'comment_body': 'Do we need this commented-out code?', 'comment_created': datetime.datetime(2023, 8, 18, 13, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1298460804, 'comment_body': 'For test cases, it might be better if we compare against the expected result here? we can still update it if the reducer becomes more effective in the future.', 'comment_created': datetime.datetime(2023, 8, 18, 13, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1298579585, 'comment_body': 'In JSQLParser, The `DoubleValue` class contains two members: `String stringValue` and `double value`. When `setValue` is called, It just modifies `value` while `toString()` returns its`stringValue`. When the code below is executed:\r\n``` java\r\nDoubleValue doubleValue = new DoubleValue(""2.0"");\r\ndoubleValue.setValue(1.0);\r\nSystem.out.println(doubleValue);\r\n```\r\nThe result is still `2.0`.  For more details, we can refer to `DoubleValue.class`\r\n\r\nWhile for `LongValue` objects, its StringValue could be modified by calling `setStringValue`;', 'comment_created': datetime.datetime(2023, 8, 18, 15, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}, {'comment_id': 1299117490, 'comment_body': '> Do we need this commented-out code?\r\n\r\nCurrently not.\r\n`name` is originally designed to identify the Transformation. (But seems not necessary at present).\r\n`StatusCode` is designed to identify the status (if it succeeded or failed) after applying transformation. But it seems that `boolean` can already handle it.', 'comment_created': datetime.datetime(2023, 8, 19, 5, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}, {'comment_id': 1303719547, 'comment_body': 'There seems to be a check against the parameter format\'s failing (see ""General tests""), looks like parameters are not expected to contain capital letters: https://github.com/sqlancer/sqlancer/blob/97b8850ed697359d91f77950741e5bd4a0681449/test/sqlancer/TestParameterFormat.java#L20\r\nMaybe we can use `ast` here?', 'comment_created': datetime.datetime(2023, 8, 24, 2, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'oraluben', 'type': 'User'}, {'comment_id': 1303816475, 'comment_body': 'ok', 'comment_created': datetime.datetime(2023, 8, 24, 5, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}]","[{'commit_sha': 'bc7a528d6cedeb463d42e5b42f1abd56c9b7e34e', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb87a36801c93e9256ba0febf4976815f9c4d4dd', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bace305603881ea0257082d14a1f6ffd6f90a37', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cd943f263a55e19f20e6bf10335de17f2c7a945', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f17af850e8405dc1d5adc4a03546c37cbff4b13c', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b202634b75a48e6fb15c1910dbe32928ec2a7b82', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '311eaa2ca25b3d56a171b40290868f4acdb60cb8', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feb11c933def06f9b6e66da0819da52e010b1290', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}]",Yutan Yang,127477377,,User,,10,,6,1
1389817391,feat: Add virtual db for statement reduction testing,"**Simplify the code of Statement Reducer**
The Statement Reducer implementation is basically the same as #757 , except for some simplification.

**Implement a fake engine prototype named `VirtualDB`**
`VirtualDB` is implemented at ` test/sqlancer/reducer ` so that The reducer could be tested automatically. A condition could be set to trigger a bug.

**Write 3 simple test cases in test/sqlancer/reducer/TestStatementReducer.java.**
+ 3 SQL statements, the select statement would trigger a bug.
+ 1000 fake statement in the format: `Statement_i;` one of which would trigger a bug.
+ 1000 fake statements and the combination of certain statements would trigger a bug.

**Add max steps and timeout ops**",True,815,https://api.github.com/repos/sqlancer/sqlancer/pulls/815,https://github.com/sqlancer/sqlancer/pull/815,closed,522,16,12,9,9,10,0,0,[],2023-06-13 04:13:42+00:00,2023-06-16 08:30:53+00:00,274631.0,"3 days, 4:17:11","[{'comment_id': 1228217115, 'comment_body': 'I think this would be easier to read if you first check for the special value `-1` and return `true` then. You could also define a constant in `MainOptions` for that, so that future changes keep in sync.', 'comment_created': datetime.datetime(2023, 6, 13, 14, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1228224197, 'comment_body': 'For these kinds of things, the streaming API seems quite handy.', 'comment_created': datetime.datetime(2023, 6, 13, 14, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1228233712, 'comment_body': 'Do we actually need this enum? Could we just return an empty list above?', 'comment_created': datetime.datetime(2023, 6, 13, 14, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1228236846, 'comment_body': 'I assume we could just always use `q = new VirtualDBQuery(s);` without the check, or is it needed somewhere?', 'comment_created': datetime.datetime(2023, 6, 13, 14, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1229024430, 'comment_body': 'OK, I would change it to a dummy class.', 'comment_created': datetime.datetime(2023, 6, 14, 5, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}, {'comment_id': 1229083641, 'comment_body': 'create a constant NO_REDUCE_LIMIT \r\nmake the code more readable', 'comment_created': datetime.datetime(2023, 6, 14, 6, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}, {'comment_id': 1229084944, 'comment_body': 'Use stream API to construct the string.', 'comment_created': datetime.datetime(2023, 6, 14, 6, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}, {'comment_id': 1229085718, 'comment_body': 'directly add `new VirtualDBQuery(s)`', 'comment_created': datetime.datetime(2023, 6, 14, 6, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}, {'comment_id': 1229086642, 'comment_body': 'replace the `VirtualDBFactory` to a static class so that no enum is needed.', 'comment_created': datetime.datetime(2023, 6, 14, 6, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}, {'comment_id': 1230559625, 'comment_body': ""tiny issue: it's better to have an extra empty line at the end of file.\r\n\r\nDetail: https://stackoverflow.com/questions/2287967/why-is-it-recommended-to-have-empty-line-in-the-end-of-a-source-file"", 'comment_created': datetime.datetime(2023, 6, 15, 7, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oraluben', 'type': 'User'}]","[{'commit_sha': 'aa984aadb6f92bf84e842699d0bc2c6063303163', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ed4d5171d54c8e26e76c20d91cdc6aaeb409906', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1093144968240892c8e148533afe44317310b25', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd957fd94e2b01ab417582e988db90f8407d2818', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '023c543c621c83528522de645f962096e4c6970c', 'committer_username': 'oraluben', 'committer_name': 'Yichen Yan', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 17, 13, 34, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fab9844251bf5f104f220bfb480f23fb2698dfca', 'committer_username': 'oraluben', 'committer_name': 'Yichen Yan', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 17, 13, 34, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '429c6f92911662ce68d8e38ee36cbe75db01c2a3', 'committer_username': 'oraluben', 'committer_name': 'Yichen Yan', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 17, 13, 34, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35b93d803638066c7d9e8389a7d70bb7155c2b62', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae85af9300d3ac8b44a979ca92cee205c3980a10', 'committer_username': 'oraluben', 'committer_name': 'Yichen Yan', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 17, 13, 34, 27, tzinfo=datetime.timezone.utc)}]",Yutan Yang,127477377,,User,,10,,6,1
1457507592,feat: write log when running statement reducer,"Closes #865 

+ write log when start reducing, finish reducing and when a reduction step is successfully performed
log is saved into `logs/<database_>/reduce/<database_name>-reduce.log`, for example: When running statement reducer for sqlite3, the log of databse0 is stored at `logs/sqlite3/reduce/database0-reduce.log`
The format is like:
```
Original queries:
====================
xxx original statements
====================
Current reduced result:
====================
xxx
====================
Current reduced result:
====================
xxx
...
====================
Current reduced result:
====================
xxx
====================
Reduced queries:
====================
CREATE VIRTUAL TABLE rt0 USING rtree_i32(c0, c1, c2);
CREATE TEMP TABLE t1 (c0 INTEGER );
INSERT OR IGNORE INTO rt0(c0, c1, c2) VALUES ('-1e500', '', x'');
INSERT OR FAIL INTO t1(c0) VALUES (NULL), (0.9692699099404161), ('');
INSERT OR IGNORE INTO rt0(c2) VALUES (''), (x''), ('');
====================

```
+ fix some bugs of the statement reducer.
Adjust the code about options of time limit and step limit, making it more reasonable",True,864,https://api.github.com/repos/sqlancer/sqlancer/pulls/864,https://github.com/sqlancer/sqlancer/pull/864,closed,106,22,4,6,3,5,0,0,[],2023-08-01 06:59:56+00:00,2023-08-10 07:39:54+00:00,779998.0,"9 days, 0:39:58","[{'comment_id': 1285181771, 'comment_body': ""it works on windows. But I haven't tested it on Linux.\r\nCurrently, The symbolic link file refer to the latest modified file, which means, if `a.log` is created before `b.log`, but is modified later, the symlink file will link to `a.log`. I'm not sure if it's appropriate.\r\nAlso, I'm not sure if the concurrent issues should be considered here. "", 'comment_created': datetime.datetime(2023, 8, 6, 9, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}, {'comment_id': 1285337430, 'comment_body': ""> Currently, The symbolic link file refer to the latest modified file, which means, if `a.log` is created before `b.log`, but is modified later, the symlink file will link to `a.log`. I'm not sure if it's appropriate.\r\n> Also, I'm not sure if the concurrent issues should be considered here.\r\n\r\nI'd prefer to create the link when file created, not modified, i.e. it will link to the recent created file."", 'comment_created': datetime.datetime(2023, 8, 7, 3, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oraluben', 'type': 'User'}, {'comment_id': 1286564626, 'comment_body': ""> I'd prefer to create the link when file created, not modified, i.e. it will link to the recent created file.\r\n\r\nIn this way the previous logged files should be deleted first. I think `ensureExistsAndIsEmpty` function should be altered a bit so that the log file in the sub dictionary `reduce` could be removed."", 'comment_created': datetime.datetime(2023, 8, 8, 3, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ColinYoungTaro', 'type': 'User'}, {'comment_id': 1286651845, 'comment_body': ""I see, you're right. I missed the other logs. So we might not need to create a separate link for the reduce log?"", 'comment_created': datetime.datetime(2023, 8, 8, 6, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oraluben', 'type': 'User'}]","[{'commit_sha': '7c80d69cb249391857b99670ba658fc5c23de125', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceb3fc796acb1996c73ac566d011aaa4bb87cfa1', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '163263a2359c58cb0c9078d38eaf9f20b182c06a', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '712efaa68d2d4229fe52105c2cc72b243df9aab9', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8919589e72ee9d878310c40d3638edf8da0dab7f', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3d7a70f6f0adb0c5fcdff3f853e287256747caf', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}]",Yutan Yang,127477377,,User,,10,,6,1
1483164081,add doc of test case reduction,"* Add the doc of test case reduction.
As for the reduction logs, it only contains statements currently. I wonder if it is appropriate to use `printState` to log extra state info(Just as error logs do)? Or what else infomation could be logged. ",True,880,https://api.github.com/repos/sqlancer/sqlancer/pulls/880,https://github.com/sqlancer/sqlancer/pull/880,closed,31,0,1,2,0,7,0,0,[],2023-08-21 15:57:40+00:00,2023-08-23 15:04:43+00:00,169623.0,"1 day, 23:07:03","[{'comment_id': 1300849657, 'comment_body': 'the ""could effectively reduce"" could be simplified to ""reduces""', 'comment_created': datetime.datetime(2023, 8, 22, 2, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1300849985, 'comment_body': 'when mentioning JSQLParser here, perhaps you could add a link to the website and also explain that JSQLParser is (which is currently quite implicit)?', 'comment_created': datetime.datetime(2023, 8, 22, 2, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1300850121, 'comment_body': '""could be parsed"" -> ""can be parsed""', 'comment_created': datetime.datetime(2023, 8, 22, 2, 57, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1300850231, 'comment_body': '""Test case reduction"" -> ""Test-case reduction""\r\n""could be enabled"" -> ""can be enabled""\r\n""would be applied"" -> ""is applied""', 'comment_created': datetime.datetime(2023, 8, 22, 2, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1300850865, 'comment_body': 'Use ""**bold text**"" for bold text. I think we actually don\'t need bold here, since an error is thrown in this case anyway?', 'comment_created': datetime.datetime(2023, 8, 22, 2, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1300851072, 'comment_body': '""it would print"" -> ""it prints""', 'comment_created': datetime.datetime(2023, 8, 22, 2, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mrigger', 'type': 'User'}, {'comment_id': 1301157040, 'comment_body': 'It should be better to use the full arg here (e.g. `--statement-*` instead of `statement-*`) here.', 'comment_created': datetime.datetime(2023, 8, 22, 7, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'oraluben', 'type': 'User'}]","[{'commit_sha': '500e33acaffe4b3d64185977e5772803d34a53e4', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd06bd6b5c643d29cdd483272a40d4f8e7749f198', 'committer_username': 'ColinYoungTaro', 'committer_name': 'Yutan Yang', 'committer_email': None, 'commit_date': datetime.datetime(2023, 3, 10, 7, 9, 52, tzinfo=datetime.timezone.utc)}]",Yutan Yang,127477377,,User,,10,,6,1

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
252650176,sqlancer,sqlancer/sqlancer,Java,271,1460,31,52,2183,68,17,22,"[{'id': 1483164081, 'number': 880, 'closed': datetime.datetime(2023, 8, 23, 15, 4, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 21, 15, 57, 40, tzinfo=datetime.timezone.utc), 'time_taken': 169623.0, 'time_delta': '1 day, 23:07:03', 'additions': 31, 'deletions': 0, 'state': 'closed'}, {'id': 1478678752, 'number': 879, 'closed': datetime.datetime(2023, 8, 24, 8, 35, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 17, 9, 17, tzinfo=datetime.timezone.utc), 'time_taken': 602302.0, 'time_delta': '6 days, 23:18:22', 'additions': 1054, 'deletions': 488, 'state': 'closed'}, {'id': 1457507592, 'number': 864, 'closed': datetime.datetime(2023, 8, 10, 7, 39, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 1, 6, 59, 56, tzinfo=datetime.timezone.utc), 'time_taken': 779998.0, 'time_delta': '9 days, 0:39:58', 'additions': 106, 'deletions': 22, 'state': 'closed'}, {'id': 1415902942, 'number': 847, 'closed': datetime.datetime(2023, 7, 4, 10, 51, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 8, 53, 28, tzinfo=datetime.timezone.utc), 'time_taken': 266261.0, 'time_delta': '3 days, 1:57:41', 'additions': 688, 'deletions': 5, 'state': 'closed'}, {'id': 1389817391, 'number': 815, 'closed': datetime.datetime(2023, 6, 16, 8, 30, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 13, 4, 13, 42, tzinfo=datetime.timezone.utc), 'time_taken': 274631.0, 'time_delta': '3 days, 4:17:11', 'additions': 522, 'deletions': 16, 'state': 'closed'}, {'id': 1271948823, 'number': 757, 'closed': datetime.datetime(2023, 6, 16, 8, 47, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 11, 4, 31, 41, tzinfo=datetime.timezone.utc), 'time_taken': 8396124.0, 'time_delta': '97 days, 4:15:24', 'additions': 38, 'deletions': 9, 'state': 'closed'}]"
