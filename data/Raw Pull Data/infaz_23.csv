pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
668935341,GSoC 2021 Project: Add regexp-parser(),"[GSoC2021-Idea-&-Project-list#add-regexp-parser](https://github.com/syslog-ng/syslog-ng/wiki/GSoC2021-Idea-&-Project-list#add-regexp-parser)

This PR introduces a parser that can parse messages with regular expressions.

## Options of regexp parsers:
### Declaration:
```
parser parser_name {
  regexp-parser(
    patterns()
    prefix()
    flags()
  );
};
```
### patterns()
regular expression patterns that you want to find a match, regexp-parser supports multiple patterns
### prefix()
Insert a prefix before the name part of the parsed name-value pairs to help further processing
### flags()
Synopsis: disable-jit, dupnames, global, ignore-case, newline, store-matches, unicode, utf8

### Example
```
parser {
  regexp-parser(
    prefix("".regexp."") 
    patterns(""(?<DN>foo)"", ""(?<DN>ball)"")
    flags(ignore-case)
    template(""${MESSAGE}"")
  );
};
```
",True,3702,https://api.github.com/repos/syslog-ng/syslog-ng/pulls/3702,https://github.com/syslog-ng/syslog-ng/pull/3702,closed,789,6,24,8,31,42,0,0,[],2021-06-12 19:07:20+00:00,2021-07-22 12:07:38+00:00,3430818.0,"39 days, 17:00:18","[{'comment_id': 650710436, 'comment_body': 'This should go in the PCRE specific matcher class, that is defined in logmatcher.c and is called LogMatcherPcreRe\r\n', 'comment_created': datetime.datetime(2021, 6, 14, 7, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 650710645, 'comment_body': 'this is not needed if https://github.com/syslog-ng/syslog-ng/pull/3702/files#r650710436 is fixed.', 'comment_created': datetime.datetime(2021, 6, 14, 7, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 650710710, 'comment_body': 'likewise.\r\n', 'comment_created': datetime.datetime(2021, 6, 14, 7, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 650711731, 'comment_body': 'maybe we should rename the directory to regexp-parser, regexps are used in a lot of ways within syslog-ng and not all of them would concentrate in the ""modules/regexp"" directory (neither now or long term), so let\'s try to use a more specific directory.', 'comment_created': datetime.datetime(2021, 6, 14, 7, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 650715510, 'comment_body': ""This can be a pretty hot path so we need to be aware of (a) performance implications. Also, this code is becoming a bit too complex, so (b) extracting the functionality into a separate function seems to be a good move.\r\n\r\nHints:\r\n(a) g_string_new() is pretty slow, it allocates both a GString header and then the payload, which is potentially reallocated right at the next line. So we have 2-3 memory allocations plus a free operation in a path that is executed multiple times for each message. Message rates can be pretty high with syslog-ng, reaching 100s of thousands per second, although regexps would slow those down to a 10s of thousands. In any case, this is potentially executing 100k per sec. There's an API on top of GStrings that will give you cheap/free allocation of GString instances, look at ```scratch-buffers.h``` and try to find a user of that code for examples.\r\n\r\n(b) you could move this part in its entirety into a local/static function, which would make this function a lot easier to read.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 14, 7, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 650718566, 'comment_body': 'we should support multiple patterns, just like date-parser() does that with multiple potential formats. If any of the pattern matches we should accept (match) the message.\r\n\r\nIf none of them matches we should just return ""unmatched"", just as date-parser() does this when none of the formats match.\r\n', 'comment_created': datetime.datetime(2021, 6, 14, 7, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 650719191, 'comment_body': 'these functions do not seem to be used.\r\n', 'comment_created': datetime.datetime(2021, 6, 14, 7, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 650720536, 'comment_body': ""I can't see how this prefix gets initialized.\r\n"", 'comment_created': datetime.datetime(2021, 6, 14, 7, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 651039461, 'comment_body': ""Thanks! But I have a question. If I define the `prefix` in the `LogMatcherPcreRe` class, I can't set the prefix in the `regexp-parser.c` because the definition of `LogMatcherPcreRe` is in the `logmatcher.c`. I can think of two ways to solve this problem:\r\n\r\n1. move the definition of `LogMatcherPcreRe` from `logmatcher.c` to `logmatcher.h` (but may be I should also move the definitions of `LogMatcherGlob` and `LogMatcherString` to  `logmatcher.h` for consistency)\r\n2. declare a new function called `log_matcher_pcre_set_prefix` in `logmatcher.h`, which can set the prefix of a LogMatcherPcreRe object "", 'comment_created': datetime.datetime(2021, 6, 14, 15, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'LittleFish33', 'type': 'User'}, {'comment_id': 657732763, 'comment_body': ""this allocation can move inside the log_matcher_pcre_re_feed_value_by_name() function, so you don't have to pass it as an argument.\r\n"", 'comment_created': datetime.datetime(2021, 6, 24, 8, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 657733465, 'comment_body': 'formatted_name can be a newly allocated GString instance, so truncating may not produce the required prefix. you will need to assign a new value every time.\r\n', 'comment_created': datetime.datetime(2021, 6, 24, 8, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 657741872, 'comment_body': ""I just recognized that there's a similar pattern in kv-parser(), which seems to be buggy as well. The scratch-buffers allocator does not guarantee that we get the same GString instance every time (though it may happen, especially in tests). Can you fix that part too?\r\n"", 'comment_created': datetime.datetime(2021, 6, 24, 8, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 657745684, 'comment_body': 'do we handle correctly the case where the 3rd pattern fails to compile? any memory leaks?', 'comment_created': datetime.datetime(2021, 6, 24, 8, 37, 48, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 657752610, 'comment_body': 'although it\'s a bit of a layering violation, we may actually know that we are matching against LM_V_MESSAGE (in case the template() option is unset). And with that knowledge the LogMatcher instance can store indirect matches instead of full copies.\r\n\r\nSo instead of LM_V_NONE, you could use a conditional to see if ```self->super.template``` is set, and use LM_V_NONE if it is, and LM_V_MESSAGE if it\'s not.\r\n\r\nThis would result in the use of ""indirect references"" within the LogMessage, meaning that slices of the MESSAGE payload would be used as values. This might compress the size of the serialized log message and also reduce CPU usage as the new name-value pair is stored.', 'comment_created': datetime.datetime(2021, 6, 24, 8, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 657753793, 'comment_body': 'g_list_free_full() allows you to pass a GDestroyNotify callback.\r\n', 'comment_created': datetime.datetime(2021, 6, 24, 8, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 662324268, 'comment_body': '> formatted_name can be a newly allocated GString instance, so truncating may not produce the required prefix. you will need to assign a new value every time.\r\n\r\nHi,  @bazsi, I have a question. In the `scratch_buffers_alloc` function, the allocated buffer will be truncated to 0.\r\n```c++\r\n// lib/scratch-buffers.c, lines 127-128\r\nGString *buffer = g_ptr_array_index(scratch_buffers, scratch_buffers_used);\r\ng_string_truncate(buffer, 0);\r\n```\r\nIn this case, if formatted_name is a newly allocated GString instance, it will go to the else case and call `g_string_assign(formatted_name, s->prefix);`. ', 'comment_created': datetime.datetime(2021, 7, 1, 14, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'LittleFish33', 'type': 'User'}, {'comment_id': 662355303, 'comment_body': ""@bazsi I'm a little confused about this problem. Does the memory leak here mean that the space allocated by `log_matcher_new` has not been released? But if any pattern fails to compile, the program will terminal directly and print the error on the console. "", 'comment_created': datetime.datetime(2021, 7, 1, 14, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'LittleFish33', 'type': 'User'}, {'comment_id': 662771818, 'comment_body': 'you are right. I missed the loop on the regexp values, with scratch_buffers_alloc() before the loop it all makes sense now.\r\n\r\nsorry.\r\n', 'comment_created': datetime.datetime(2021, 7, 2, 6, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 662773164, 'comment_body': 'I just wanted to confirm that if the loop exits early (because of log_matcher_compile() returning failure), no memory leaks remain.\r\n\r\nIt is true that the exiting process would free all allocations, but we should ensure that all internal objects do that on their own without relying on the process to exit.\r\n\r\nIn any case, just make sure that log_matcher_free() is properly called for the partially populated list too.\r\n', 'comment_created': datetime.datetime(2021, 7, 2, 6, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 667750488, 'comment_body': ""My comment for: 'ids' could you please describe each testcases instead of naming it with a counter.\r\nYou can find an example here: https://github.com/syslog-ng/syslog-ng/blob/0476cc102aab7a5a8c824724f29423da9c38c32f/tests/python_functional/functional_tests/source_drivers/file_source/test_acceptance.py#L33\r\nWith this it would be easier to understand main goals for each testcases, and it would be easier to extend with new testcases.\r\n"", 'comment_created': datetime.datetime(2021, 7, 12, 8, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mitzkia', 'type': 'User'}, {'comment_id': 667773009, 'comment_body': 'First of all thanks for the Light testcases.\r\nMy comment for different testcases: \r\n- Can you please add a more basic testcase, when \'patterns\' is a simple pattern match without any reference saving: \\<DN\\>. In this case you can use a custom prefix value to store the result.\r\n- Can you please give a better name for DN. If I am right it is just custom macro name\r\n- Could you please give a testcase for this statement also? ""use multiple regular expressions, these should be processed in order, the first successfully matching one causes the processing to stop""\r\n- Could you please add a testcase for the following case when: ""Error parsing regexp-parser, compiling the regexp failed"", in this case syslog-ng should not started\r\n- Do you need to check $MSG macro value in syslog-ng output side?\r\n- Could you please add an assertion for the following statement: ""if none of the regexps match, the parser should drop the message by returning FALSE"". in this case you can test for syslog-ng-ctl output where discarded should 1 or more for the actual parser. To properly create an assertion here it is needed to add some new Light functionalities: make available to use \'DriverStatsHandler\' in Parser class, and also needed to extend the API in \'DriverStatsHandler\' for parsers. In this case I would skip this extend Light API part, I think it would be enough only to assert for substring in `syslog_ng_ctl.stats()` output. But if you think this assertion would be the best for the negative case :) `assert regexp_parser.get_query() == {\'discarded\': 1}`', 'comment_created': datetime.datetime(2021, 7, 12, 9, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mitzkia', 'type': 'User'}, {'comment_id': 667775454, 'comment_body': 'This testcase does not require scl.conf', 'comment_created': datetime.datetime(2021, 7, 12, 9, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mitzkia', 'type': 'User'}, {'comment_id': 668924454, 'comment_body': 'Thank you for your comments, I will work on this soon.', 'comment_created': datetime.datetime(2021, 7, 13, 16, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'LittleFish33', 'type': 'User'}, {'comment_id': 670444630, 'comment_body': 'Please handle the error in a more user-friendly way, I got no reason why the compilation of my regexp failed:\r\n```\r\nError parsing regexp-parser, compiling the regexp failed in etc/syslog-ng-re.conf:5:11-5:61:\r\n1       @version: 3.32\r\n2       \r\n3       log { \r\n4       \tsource { tcp(port(2000)); };\r\n5-----> \tparser { regexp-parser(patterns(""(?foo)a+"") prefix("".re."")); };\r\n5-----> \t         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n6       \tdestination { file(""/tmp/log"" template(""$(format-json *)\\n"")); };\r\n7       };\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 15, 13, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'bazsi', 'type': 'User'}, {'comment_id': 671220407, 'comment_body': 'The word ""prefix"" is also used in this code related to the pcre context (see `LMF_PREFIX`).\r\nCan you give this a more specific name please? Something that shows the intended purpose, like `nv_prefix`.', 'comment_created': datetime.datetime(2021, 7, 16, 12, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alltilla', 'type': 'User'}, {'comment_id': 671236796, 'comment_body': 'Please change ""Balabit"" to ""One Identity"" here, and in every file you have created.', 'comment_created': datetime.datetime(2021, 7, 16, 13, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alltilla', 'type': 'User'}, {'comment_id': 671253517, 'comment_body': 'Please make this the last call in this function.', 'comment_created': datetime.datetime(2021, 7, 16, 13, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alltilla', 'type': 'User'}, {'comment_id': 671782404, 'comment_body': 'Thanks, I have added `ids` for each test case in the latest commits.', 'comment_created': datetime.datetime(2021, 7, 18, 5, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'LittleFish33', 'type': 'User'}, {'comment_id': 671783173, 'comment_body': ""I have updated the commits with the following changes:\r\n* A new test case has been added, whose `id` is `match_without_reference_saving`\r\n* I change the reference name to `<key>`\r\n* A new test case has been added, whose `id` is `match_multiple_regular_expressions`\r\n* A new test case has been added, whose `id` is `regular_expression_compile_error`\r\n* A new test case has been added, whose `id` is `check_MSG_macro`\r\n* A new test case has been added, whose `id` is `unmatch_case`. I have made it available to use 'DriverStatsHandler' in Parser class and extended the API in 'DriverStatsHandler' for parsers. The details can be found in commits [a16d34](https://github.com/syslog-ng/syslog-ng/pull/3702/commits/a16d34f3e3fef3840c040bab565834b3fad34925) and [4b2b90](https://github.com/syslog-ng/syslog-ng/pull/3702/commits/4b2b90a2548537a690cd0dba78e06b6bb7634334)"", 'comment_created': datetime.datetime(2021, 7, 18, 5, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'LittleFish33', 'type': 'User'}, {'comment_id': 671783217, 'comment_body': '`config.add_include(""scl.conf"")` has been removed.', 'comment_created': datetime.datetime(2021, 7, 18, 5, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'LittleFish33', 'type': 'User'}, {'comment_id': 671783777, 'comment_body': 'I have updated the `regexp-parser-grammar.ym` file and the `regexp_parser_compile` function. In the latest commits, syslog-ng will output the error with the failure reason:\r\n```\r\nError parsing regexp-parser, compiling the regexp failed, error=Failed to compile PCRE expression >>>(?foo)a+<<< `unrecognized character after (? or (?-\' at character 2 in /etc/syslog-ng.conf:57:11-57:61:\r\n55      log { \r\n56      \tsource(s_file);\r\n57----> \tparser { regexp-parser(patterns(""(?foo)a+"") prefix("".re."")); };\r\n57----> \t         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n58      \tdestination { file(""/tmp/log"" template(""$(format-json *)\\n"")); };\r\n59      };\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 5, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'LittleFish33', 'type': 'User'}, {'comment_id': 671783867, 'comment_body': 'I have changed the `prefix` and `prefix_len` to `nv_prefix` and `nv_prefix_len`.', 'comment_created': datetime.datetime(2021, 7, 18, 5, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'LittleFish33', 'type': 'User'}, {'comment_id': 671783988, 'comment_body': 'Related changes have been udpated.', 'comment_created': datetime.datetime(2021, 7, 18, 5, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'LittleFish33', 'type': 'User'}, {'comment_id': 671784020, 'comment_body': 'Related changes have been udpated.', 'comment_created': datetime.datetime(2021, 7, 18, 5, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'LittleFish33', 'type': 'User'}, {'comment_id': 672069951, 'comment_body': '[optional]\r\n\r\nThe double negation makes this part a bit hard to comprehend, and it might completely mess up the `G_LIKELY` optimization.\r\n\r\nCan you reorder these a bit?\r\n\r\nA possible alternative:\r\n```\r\ngint value_handle = LM_V_MESSAGE;\r\nif (G_UNLIKELY(self->super.template)\r\n  value_handle = LM_V_NONE;\r\n\r\nif (log_matcher_match((LogMatcher *)item->data, *pmsg, value_handle, input, input_len))\r\n  {\r\n    result = TRUE;\r\n    break;\r\n  }\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 7, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alltilla', 'type': 'User'}, {'comment_id': 672778781, 'comment_body': ""Thank you for your comments. I've updated the code as suggested."", 'comment_created': datetime.datetime(2021, 7, 20, 3, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'LittleFish33', 'type': 'User'}, {'comment_id': 673199490, 'comment_body': 'Thanks for the changes, I will check it soon.', 'comment_created': datetime.datetime(2021, 7, 20, 14, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mitzkia', 'type': 'User'}, {'comment_id': 674096991, 'comment_body': 'Thanks for the changes again, they are very good. I have only a few minor review comments.', 'comment_created': datetime.datetime(2021, 7, 21, 15, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mitzkia', 'type': 'User'}, {'comment_id': 674099366, 'comment_body': 'Thanks for the changes, they are very good.\r\nMy comment here: syslog_ng_ctl fixture is not used in the testcase, it can be deleted from testcase parameter list', 'comment_created': datetime.datetime(2021, 7, 21, 15, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mitzkia', 'type': 'User'}, {'comment_id': 674100251, 'comment_body': ""It is enough to use: 'if compile_result:'"", 'comment_created': datetime.datetime(2021, 7, 21, 15, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mitzkia', 'type': 'User'}, {'comment_id': 674103293, 'comment_body': ""Maybe we can add 'assert regexp_parser.get_query() == {'discarded': 0}' line after 'assert file_destination.read_log().strip() == expected_value'"", 'comment_created': datetime.datetime(2021, 7, 21, 15, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mitzkia', 'type': 'User'}, {'comment_id': 674181253, 'comment_body': ""Thanks for your comments, I've updated the code."", 'comment_created': datetime.datetime(2021, 7, 21, 17, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'LittleFish33', 'type': 'User'}]","[{'commit_sha': '25cbf213f8392e2b52ca8585e92c0728d5e60b0a', 'committer_username': 'LittleFish33', 'committer_name': 'LittleFish', 'committer_email': '3478628675@qq.com', 'commit_date': datetime.datetime(2017, 2, 22, 15, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d54a8b67759c3f11597403f8b0e6ce8c0160329', 'committer_username': 'LittleFish33', 'committer_name': 'LittleFish', 'committer_email': '3478628675@qq.com', 'commit_date': datetime.datetime(2017, 2, 22, 15, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ced8841fa49e84712c45c169f0b5df1925e9546f', 'committer_username': 'LittleFish33', 'committer_name': 'LittleFish', 'committer_email': '3478628675@qq.com', 'commit_date': datetime.datetime(2017, 2, 22, 15, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecfebba7b5ebedf28c6f119434d8829c6967a9ff', 'committer_username': 'LittleFish33', 'committer_name': 'LittleFish', 'committer_email': '3478628675@qq.com', 'commit_date': datetime.datetime(2017, 2, 22, 15, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7540666257bdbf4031ce5346cf8dc3506f3b0ac', 'committer_username': 'LittleFish33', 'committer_name': 'LittleFish', 'committer_email': '3478628675@qq.com', 'commit_date': datetime.datetime(2017, 2, 22, 15, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a07a075b5be74feba974bc5e46b236f50b59228e', 'committer_username': 'LittleFish33', 'committer_name': 'LittleFish', 'committer_email': '3478628675@qq.com', 'commit_date': datetime.datetime(2017, 2, 22, 15, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d8ec1d3552e6e58dcb12468b997a0c2125c8188', 'committer_username': 'LittleFish33', 'committer_name': 'LittleFish', 'committer_email': '3478628675@qq.com', 'commit_date': datetime.datetime(2017, 2, 22, 15, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68f1516be69cb123a26ae290f5c04f659f0ebf1e', 'committer_username': 'LittleFish33', 'committer_name': 'LittleFish', 'committer_email': '3478628675@qq.com', 'commit_date': datetime.datetime(2017, 2, 22, 15, 14, 58, tzinfo=datetime.timezone.utc)}]",LittleFish,25958734,3478628675@qq.com,User,,24,,41,17

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
14146757,syslog-ng,syslog-ng/syslog-ng,C,465,2091,91,201,17213,214,18,11,"[{'id': 668935341, 'number': 3702, 'closed': datetime.datetime(2021, 7, 22, 12, 7, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 12, 19, 7, 20, tzinfo=datetime.timezone.utc), 'time_taken': 3430818.0, 'time_delta': '39 days, 17:00:18', 'additions': 789, 'deletions': 6, 'state': 'closed'}, {'id': 603351499, 'number': 3630, 'closed': datetime.datetime(2021, 5, 13, 14, 22, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 30, 4, 11, 24, tzinfo=datetime.timezone.utc), 'time_taken': 3838257.0, 'time_delta': '44 days, 10:10:57', 'additions': 124, 'deletions': 10, 'state': 'closed'}, {'id': 598043288, 'number': 3624, 'closed': datetime.datetime(2021, 3, 25, 11, 47, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 22, 14, 9, 53, tzinfo=datetime.timezone.utc), 'time_taken': 250681.0, 'time_delta': '2 days, 21:38:01', 'additions': 56, 'deletions': 37, 'state': 'closed'}, {'id': 595790042, 'number': 3619, 'closed': datetime.datetime(2021, 3, 24, 12, 56, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 18, 17, 26, 51, tzinfo=datetime.timezone.utc), 'time_taken': 502167.0, 'time_delta': '5 days, 19:29:27', 'additions': 114, 'deletions': 0, 'state': 'closed'}, {'id': 594693360, 'number': 3615, 'closed': datetime.datetime(2021, 3, 30, 7, 59, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 17, 13, 7, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1104689.0, 'time_delta': '12 days, 18:51:29', 'additions': 121, 'deletions': 4, 'state': 'closed'}]"
