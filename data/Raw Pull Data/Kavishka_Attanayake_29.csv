pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
966146619,Clusterization cuda,"This PR adds sparseCCL clusterization and spacepoint creation kernels to the CUDA implementation. All kernels follow the same structure as the existing SYCL implementation (till [#200](https://github.com/acts-project/traccc/pull/200)). This PR maybe redundant right now since [#205](https://github.com/acts-project/traccc/pull/205) will allow for code sharing.  

PS : This is my very first contribution and any feedback will be greatly appreciated.    ",False,206,https://api.github.com/repos/acts-project/traccc/pulls/206,https://github.com/acts-project/traccc/pull/206,closed,759,16,16,18,7,40,1,0,[{'name': 'cuda'}],2022-06-13 20:16:23+00:00,2022-06-30 17:13:02+00:00,1457799.0,"16 days, 20:56:39","[{'comment_id': 896361268, 'comment_body': 'Is this flag a leftover?', 'comment_created': datetime.datetime(2022, 6, 14, 4, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896361381, 'comment_body': 'It is a duplication :)', 'comment_created': datetime.datetime(2022, 6, 14, 4, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896361870, 'comment_body': 'I think this is also a leftover', 'comment_created': datetime.datetime(2022, 6, 14, 4, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896362191, 'comment_body': 'leftover', 'comment_created': datetime.datetime(2022, 6, 14, 4, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896363199, 'comment_body': 'Since the CPU clusterization algorithm is not running on GPU anymore, we need to use host memory resource, which is faster than managed memory resource in CPU\r\n```suggestion\r\n    traccc::clusterization_algorithm ca(host_mr);\r\n    traccc::spacepoint_formation sf(host_mr);\r\n```', 'comment_created': datetime.datetime(2022, 6, 14, 4, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896363557, 'comment_body': '2022', 'comment_created': datetime.datetime(2022, 6, 14, 4, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896364802, 'comment_body': ""Leftover? anyway I don't think we need this macro"", 'comment_created': datetime.datetime(2022, 6, 14, 4, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896364911, 'comment_body': 'Might be a leftover', 'comment_created': datetime.datetime(2022, 6, 14, 4, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896389762, 'comment_body': 'oh.. yea will remove it.', 'comment_created': datetime.datetime(2022, 6, 14, 5, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 896394400, 'comment_body': 'Yea it is. I spend quite some time debugging ultimately forgot that I added it. Thanks for pointing it out. ', 'comment_created': datetime.datetime(2022, 6, 14, 5, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 896400667, 'comment_body': ""Doesn't look necessary"", 'comment_created': datetime.datetime(2022, 6, 14, 5, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896400800, 'comment_body': ""Doesn't look necessary either"", 'comment_created': datetime.datetime(2022, 6, 14, 5, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896408226, 'comment_body': 'I used the definitions header to use the CUDA_ERROR_CHECK macro similar to what was done in the seeding kernels.\r\nAs you said the macros i defined are no longer used and i am removing them', 'comment_created': datetime.datetime(2022, 6, 14, 6, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 896431525, 'comment_body': ""I don't know how it could be compiled but please look above lines - there are the lines that you should have changed rather than creating same algorithm objects\r\n```\r\n    traccc::clusterization_algorithm ca(mng_mr);\r\n    traccc::spacepoint_formation sf(mng_mr);\r\n```"", 'comment_created': datetime.datetime(2022, 6, 14, 6, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896432468, 'comment_body': 'I think the algorithm is still using managed memory resource given that cpu clusterization takes too long time', 'comment_created': datetime.datetime(2022, 6, 14, 6, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896439427, 'comment_body': 'License is missing here ;-)', 'comment_created': datetime.datetime(2022, 6, 14, 6, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896716326, 'comment_body': 'As @beomki-yeo pointed me out earlier, during my SYCL developments, this could be replaced by `copy.memset()` call on the host side. ', 'comment_created': datetime.datetime(2022, 6, 14, 11, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'konradkusiak97', 'type': 'User'}, {'comment_id': 896716493, 'comment_body': 'I think this might be a leftover from debugging :wink: ', 'comment_created': datetime.datetime(2022, 6, 14, 11, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'konradkusiak97', 'type': 'User'}, {'comment_id': 897004252, 'comment_body': ' Thanks. Made the changes.', 'comment_created': datetime.datetime(2022, 6, 14, 15, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 897436296, 'comment_body': ""It's where the speed gets slower. Generating host container with vecmem jagged vector is pretty expensive. \r\nI think you need to get buffer object as an output...\r\nLet me check with @krasznaa and @konradkusiak97. What is the actual plan for object type in algorithm I/O? SYCL is using the buffer output from clusterization algorithm. I know that the overhead from host_container can be minimized once we start using the caching allocator but I still like using view type object for algorithm I/O"", 'comment_created': datetime.datetime(2022, 6, 15, 1, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 897541658, 'comment_body': 'For performance reasons, have you considered performing this operation as a block-wide reduction first, followed by a single atomic addition?', 'comment_created': datetime.datetime(2022, 6, 15, 5, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897542174, 'comment_body': 'This is a relatively small block size, have you investigated the occupancy characteristics of this? Either way we will want this to be configurable, although that can wait until a later update.', 'comment_created': datetime.datetime(2022, 6, 15, 5, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897543550, 'comment_body': 'I would personally consider the storage of semantically heterogeneous values in a vector like this to be confusing and bad practice, is there no way to store this in a separate variable?', 'comment_created': datetime.datetime(2022, 6, 15, 5, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897545124, 'comment_body': 'Is there a reason for these whitespace changes?', 'comment_created': datetime.datetime(2022, 6, 15, 5, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897548489, 'comment_body': ""This is a pretty inefficient way of doing prefix sums. We'll need to see (through profiling) whether this becomes a bottleneck in practice. If it does, we'll need to perform the same kind of block-wide reduction that I described earlier, followed by a local prefix sum."", 'comment_created': datetime.datetime(2022, 6, 15, 5, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897548968, 'comment_body': 'Is it by design that this does not guarantee a monotonically increasing prefix sum?', 'comment_created': datetime.datetime(2022, 6, 15, 5, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897549145, 'comment_body': 'Same comments as before.', 'comment_created': datetime.datetime(2022, 6, 15, 5, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897549817, 'comment_body': ""The `auto` keyword can be pretty harmful to the readability of code, and I would argue that it's really not clear what the types of certain variables are. I'd prefer it if you would make some of these types concrete, as well as throughout the rest of the PR."", 'comment_created': datetime.datetime(2022, 6, 15, 5, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897551084, 'comment_body': 'I might be confusing things here, but we previously performed a prefix sum with non-deterministic order, so I cannot help but think that ensuring that the total sum is at the end of the vector is a bit odd?', 'comment_created': datetime.datetime(2022, 6, 15, 5, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 898083032, 'comment_body': 'No i have not thought about it yet but surely I will start to look into it', 'comment_created': datetime.datetime(2022, 6, 15, 14, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 898089100, 'comment_body': ""Okay, doesn't need to be now - I am sure we can iterate on the performance of this PR in later stages, just something to think about!"", 'comment_created': datetime.datetime(2022, 6, 15, 14, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 898090484, 'comment_body': 'I thought about this and went ahead and changed all instances that expect a host container to views in the seeding algorithm, consequently few more places require similar changes. So i did not continue it with it.\r\nMaybe we can discuss this a little bit tomorrow?', 'comment_created': datetime.datetime(2022, 6, 15, 14, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 898315523, 'comment_body': 'Yeah this PR is taking the same block size of SYCL implementation. We can do block size optimization later with multi-threading execution \r\n', 'comment_created': datetime.datetime(2022, 6, 15, 19, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 898649022, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 6, 16, 3, 1, 15, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 901047048, 'comment_body': 'Sorry for the delayed response. I will proceed to refactor the code with PR #205. This will be resolved with it.', 'comment_created': datetime.datetime(2022, 6, 19, 4, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 901047286, 'comment_body': 'Result of debugging.', 'comment_created': datetime.datetime(2022, 6, 19, 4, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 901049530, 'comment_body': '@konradkusiak97 Could you please give some insight on this. This will help me out as well. \r\nBased on the PR #187 ', 'comment_created': datetime.datetime(2022, 6, 19, 5, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 901332099, 'comment_body': 'Yes, this was by design. This prefix sum is needed to identify a ""global index"" in the clusters vector. Since sparse_ccl gives us only the cluster indices ""per module"", we need to add a prefix sum to get the global index.\r\n\r\nTo make this work, we only need to ensure that a particular thread in cluster_counting is pointed at the same prefix sum as the same thread in component_connection. That\'s why they don\'t need to be monotonically increasing. \r\n\r\nBut this non-monotonic nature of this vector comes only from the fact that we are creating it inside the kernel. In #205 this is moved to the host side using `exclusive scan`. @Chamodya-ka, you can have a look there, I think the logic is less confusing there by now.', 'comment_created': datetime.datetime(2022, 6, 20, 7, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'konradkusiak97', 'type': 'User'}, {'comment_id': 901336727, 'comment_body': 'Yes, I agree that this was a little confusing. `cluster_indices` is not the prefix sum vector here. This comes from the logic that we put the number of clusters per module at the last, extra place in each inner vector with sparse_ccl indices.\r\n\r\nSimilarly, as I mentioned above, @Chamodya-ka, you can have a look at #205, where this confusing logic is gone.', 'comment_created': datetime.datetime(2022, 6, 20, 7, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'konradkusiak97', 'type': 'User'}, {'comment_id': 902127994, 'comment_body': 'Thanks alot! Yea I did come across this while refactoring the code with #205.', 'comment_created': datetime.datetime(2022, 6, 21, 3, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}]","[{'commit_sha': '2a6fd2b26249e069b7f2231f632cfbecf6c43f53', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ce015b58324a22c06ca9c6fda7ac3ad7e6d30793', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd8194362492381368a16d314369a3bc84b780440', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '87bd204c89b1bce136c5dbde7e8f0ffb3d49f6a8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fd15c448d1aa7d22110477f582fe6c4917ec6824', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5de9d8e628af5b194675614051311862598a4f2a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '679e39c46f58cb25e8c5e899a989b76a3f8976b3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0b54da4103217a4449a10ab3109134c8e8ca4aac', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12ce25bf24455bffb0abfb73695dc89df34dcf23', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd893d090c0eb8182e9613ca28684c4f883a4eaaf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ea77e3bbcc740ba5faca59a91ac40803af368323', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a2cc482c14e1272f10a0a328c97d58bd5d866a1c', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '421fd770e2e18705139da575d6d05a57a0bd8eb8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b3cd5533a6f545e0b663d97ccd8594f19722ac06', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b874ba7c10dac00498c7ca420f6aef379892e896', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a8e26e191a5cb76fda0e5fc1c9df00973084b2e9', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86abcbae292503e03a2584974d59f72046349c9b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'da80751c07e400553fe09985d75074079c995665', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Chamodya Attanayake,58067288,,User,,28,,0,3
983967274,Cuda clusterization using common kernels,"This PR succeeds PR #206 . CUDA kernels are sharing the code from common and follows the same structure as in PR #205.
Moreover changes are made to seeding algorithm interfaces to take spacepoint container view input in order to prevent device to host copy of spacepoints jagged vector.

```
$ build/bin/traccc_seq_example_cuda --detector_file=tml_detector/trackml-detector.csv --digitization_config_file=tml_detector/default-geometric-config-generic.json --cell_directory=tml_full/ttbar_mu200/ --events=5 --run_cpu=1 --input-binary
Running build/bin/traccc_seq_example_cuda tml_detector/trackml-detector.csv tml_full/ttbar_mu200/ 5
event 0
 number of seeds (cpu): 15424
 number of seeds (cuda): 15424
 seed matching rate: 0.940871
 track parameters matching rate: 0.988849
event 1
 number of seeds (cpu): 17811
 number of seeds (cuda): 17810
 seed matching rate: 0.943855
 track parameters matching rate: 0.991073
event 2
 number of seeds (cpu): 14055
 number of seeds (cuda): 14055
 seed matching rate: 0.934329
 track parameters matching rate: 0.990466
event 3
 number of seeds (cpu): 14257
 number of seeds (cuda): 14257
 seed matching rate: 0.937645
 track parameters matching rate: 0.991022
event 4
 number of seeds (cpu): 16510
 number of seeds (cuda): 16510
 seed matching rate: 0.943065
 track parameters matching rate: 0.992247
==> Statistics ... 
- read    475088 spacepoints from 67736 modules
- created        1657976 cells           
- created        475088 meaurements     
- created        475088 spacepoints     
- created (cpu)  78057 seeds
- created (cuda) 78056 seeds
==> Elpased time ... 
wall time           10.9656   
file reading (cpu)        0.345571  
clusterization_time (cpu) 0.0848409 
spacepoint_formation_time (cpu) 0.00617293
clusterization and sp formation (cuda) 0.497775  
seeding_time (cpu)        0.927675  
seeding_time (cuda)       0.192998  
tr_par_esti_time (cpu)    0.021466  
tr_par_esti_time (cuda)   0.0101964 

```",True,209,https://api.github.com/repos/acts-project/traccc/pulls/209,https://github.com/acts-project/traccc/pull/209,closed,423,39,15,7,3,10,0,0,[],2022-06-30 15:10:08+00:00,2022-07-12 11:14:50+00:00,1022682.0,"11 days, 20:04:42","[{'comment_id': 916401989, 'comment_body': 'I think you can delete this change', 'comment_created': datetime.datetime(2022, 7, 8, 1, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 916403265, 'comment_body': ""Shouldn't it go to the Project include(s)?"", 'comment_created': datetime.datetime(2022, 7, 8, 1, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 916403561, 'comment_body': 'CUDA Library include(s)?', 'comment_created': datetime.datetime(2022, 7, 8, 2, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 916405134, 'comment_body': ""Why do you put `invoke_` to the kernel names, which is not the case for cuda seeding? - I know it's a bit pedantic though..."", 'comment_created': datetime.datetime(2022, 7, 8, 2, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 916454079, 'comment_body': 'Yea you are right, I have not that used it as well will remove it.', 'comment_created': datetime.datetime(2022, 7, 8, 4, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 916454129, 'comment_body': 'I will add this', 'comment_created': datetime.datetime(2022, 7, 8, 4, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 916454413, 'comment_body': 'I did so because it calls another kernel which does the actual work. Will follow similar thing done in seeding. ', 'comment_created': datetime.datetime(2022, 7, 8, 4, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 918064953, 'comment_body': 'I **love** that you put the `cudaDeviceSynchronize()` call after the prefix sum creation. But I think `cudaGetLastError()` should still be put right after the kernel launch. Since it is meant to detect a problem with the kernel launch itself. `cudaDeviceSynchronize()` on the other hand would communicate errors that happened during the running of the kernel.', 'comment_created': datetime.datetime(2022, 7, 11, 15, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'krasznaa', 'type': 'User'}, {'comment_id': 918066933, 'comment_body': 'Same here. I would move this call to right after the kernel launch.', 'comment_created': datetime.datetime(2022, 7, 11, 15, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'krasznaa', 'type': 'User'}, {'comment_id': 918179934, 'comment_body': 'I might not have noticed that prefix sum creation is independent and can be done parallelly if not for what Konrad had done with Sycl. :sweat_smile:\r\nNoted and I made the suggested change.', 'comment_created': datetime.datetime(2022, 7, 11, 17, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}]","[{'commit_sha': '9f78b9131aa9801e7842030055c62b0aff747ab3', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc4b0c9f5b4282f84cf9e2bf95bb63a48aa797be', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4559dec95663e9ace1c200519588f57a6043ae7b', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4b66c17bce979730a72a74e09faf95b8adf33f7', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f0177005b09595e3361379cfc36ff3a5fda7fe8', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e20a16b0e5aadfb358b285ca36f47b594197c82a', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a465e15d186e8440e368a3e9b9bd72d696779d2a', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}]",Chamodya Attanayake,58067288,,User,,28,,0,3
983967274,Cuda clusterization using common kernels,"This PR succeeds PR #206 . CUDA kernels are sharing the code from common and follows the same structure as in PR #205.
Moreover changes are made to seeding algorithm interfaces to take spacepoint container view input in order to prevent device to host copy of spacepoints jagged vector.

```
$ build/bin/traccc_seq_example_cuda --detector_file=tml_detector/trackml-detector.csv --digitization_config_file=tml_detector/default-geometric-config-generic.json --cell_directory=tml_full/ttbar_mu200/ --events=5 --run_cpu=1 --input-binary
Running build/bin/traccc_seq_example_cuda tml_detector/trackml-detector.csv tml_full/ttbar_mu200/ 5
event 0
 number of seeds (cpu): 15424
 number of seeds (cuda): 15424
 seed matching rate: 0.940871
 track parameters matching rate: 0.988849
event 1
 number of seeds (cpu): 17811
 number of seeds (cuda): 17810
 seed matching rate: 0.943855
 track parameters matching rate: 0.991073
event 2
 number of seeds (cpu): 14055
 number of seeds (cuda): 14055
 seed matching rate: 0.934329
 track parameters matching rate: 0.990466
event 3
 number of seeds (cpu): 14257
 number of seeds (cuda): 14257
 seed matching rate: 0.937645
 track parameters matching rate: 0.991022
event 4
 number of seeds (cpu): 16510
 number of seeds (cuda): 16510
 seed matching rate: 0.943065
 track parameters matching rate: 0.992247
==> Statistics ... 
- read    475088 spacepoints from 67736 modules
- created        1657976 cells           
- created        475088 meaurements     
- created        475088 spacepoints     
- created (cpu)  78057 seeds
- created (cuda) 78056 seeds
==> Elpased time ... 
wall time           10.9656   
file reading (cpu)        0.345571  
clusterization_time (cpu) 0.0848409 
spacepoint_formation_time (cpu) 0.00617293
clusterization and sp formation (cuda) 0.497775  
seeding_time (cpu)        0.927675  
seeding_time (cuda)       0.192998  
tr_par_esti_time (cpu)    0.021466  
tr_par_esti_time (cuda)   0.0101964 

```",True,209,https://api.github.com/repos/acts-project/traccc/pulls/209,https://github.com/acts-project/traccc/pull/209,closed,423,39,15,7,3,10,0,0,[],2022-06-30 15:10:08+00:00,2022-07-12 11:14:50+00:00,1022682.0,"11 days, 20:04:42","[{'comment_id': 916401989, 'comment_body': 'I think you can delete this change', 'comment_created': datetime.datetime(2022, 7, 8, 1, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 916403265, 'comment_body': ""Shouldn't it go to the Project include(s)?"", 'comment_created': datetime.datetime(2022, 7, 8, 1, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 916403561, 'comment_body': 'CUDA Library include(s)?', 'comment_created': datetime.datetime(2022, 7, 8, 2, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 916405134, 'comment_body': ""Why do you put `invoke_` to the kernel names, which is not the case for cuda seeding? - I know it's a bit pedantic though..."", 'comment_created': datetime.datetime(2022, 7, 8, 2, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 916454079, 'comment_body': 'Yea you are right, I have not that used it as well will remove it.', 'comment_created': datetime.datetime(2022, 7, 8, 4, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 916454129, 'comment_body': 'I will add this', 'comment_created': datetime.datetime(2022, 7, 8, 4, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 916454413, 'comment_body': 'I did so because it calls another kernel which does the actual work. Will follow similar thing done in seeding. ', 'comment_created': datetime.datetime(2022, 7, 8, 4, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 918064953, 'comment_body': 'I **love** that you put the `cudaDeviceSynchronize()` call after the prefix sum creation. But I think `cudaGetLastError()` should still be put right after the kernel launch. Since it is meant to detect a problem with the kernel launch itself. `cudaDeviceSynchronize()` on the other hand would communicate errors that happened during the running of the kernel.', 'comment_created': datetime.datetime(2022, 7, 11, 15, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'krasznaa', 'type': 'User'}, {'comment_id': 918066933, 'comment_body': 'Same here. I would move this call to right after the kernel launch.', 'comment_created': datetime.datetime(2022, 7, 11, 15, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'krasznaa', 'type': 'User'}, {'comment_id': 918179934, 'comment_body': 'I might not have noticed that prefix sum creation is independent and can be done parallelly if not for what Konrad had done with Sycl. :sweat_smile:\r\nNoted and I made the suggested change.', 'comment_created': datetime.datetime(2022, 7, 11, 17, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}]","[{'commit_sha': '9f78b9131aa9801e7842030055c62b0aff747ab3', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc4b0c9f5b4282f84cf9e2bf95bb63a48aa797be', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4559dec95663e9ace1c200519588f57a6043ae7b', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4b66c17bce979730a72a74e09faf95b8adf33f7', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f0177005b09595e3361379cfc36ff3a5fda7fe8', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e20a16b0e5aadfb358b285ca36f47b594197c82a', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a465e15d186e8440e368a3e9b9bd72d696779d2a', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}]",Chamodya Attanayake,58067288,,User,,28,,0,3
966146619,Clusterization cuda,"This PR adds sparseCCL clusterization and spacepoint creation kernels to the CUDA implementation. All kernels follow the same structure as the existing SYCL implementation (till [#200](https://github.com/acts-project/traccc/pull/200)). This PR maybe redundant right now since [#205](https://github.com/acts-project/traccc/pull/205) will allow for code sharing.  

PS : This is my very first contribution and any feedback will be greatly appreciated.    ",False,206,https://api.github.com/repos/acts-project/traccc/pulls/206,https://github.com/acts-project/traccc/pull/206,closed,759,16,16,18,7,40,1,0,[{'name': 'cuda'}],2022-06-13 20:16:23+00:00,2022-06-30 17:13:02+00:00,1457799.0,"16 days, 20:56:39","[{'comment_id': 896361268, 'comment_body': 'Is this flag a leftover?', 'comment_created': datetime.datetime(2022, 6, 14, 4, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896361381, 'comment_body': 'It is a duplication :)', 'comment_created': datetime.datetime(2022, 6, 14, 4, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896361870, 'comment_body': 'I think this is also a leftover', 'comment_created': datetime.datetime(2022, 6, 14, 4, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896362191, 'comment_body': 'leftover', 'comment_created': datetime.datetime(2022, 6, 14, 4, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896363199, 'comment_body': 'Since the CPU clusterization algorithm is not running on GPU anymore, we need to use host memory resource, which is faster than managed memory resource in CPU\r\n```suggestion\r\n    traccc::clusterization_algorithm ca(host_mr);\r\n    traccc::spacepoint_formation sf(host_mr);\r\n```', 'comment_created': datetime.datetime(2022, 6, 14, 4, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896363557, 'comment_body': '2022', 'comment_created': datetime.datetime(2022, 6, 14, 4, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896364802, 'comment_body': ""Leftover? anyway I don't think we need this macro"", 'comment_created': datetime.datetime(2022, 6, 14, 4, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896364911, 'comment_body': 'Might be a leftover', 'comment_created': datetime.datetime(2022, 6, 14, 4, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896389762, 'comment_body': 'oh.. yea will remove it.', 'comment_created': datetime.datetime(2022, 6, 14, 5, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 896394400, 'comment_body': 'Yea it is. I spend quite some time debugging ultimately forgot that I added it. Thanks for pointing it out. ', 'comment_created': datetime.datetime(2022, 6, 14, 5, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 896400667, 'comment_body': ""Doesn't look necessary"", 'comment_created': datetime.datetime(2022, 6, 14, 5, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896400800, 'comment_body': ""Doesn't look necessary either"", 'comment_created': datetime.datetime(2022, 6, 14, 5, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896408226, 'comment_body': 'I used the definitions header to use the CUDA_ERROR_CHECK macro similar to what was done in the seeding kernels.\r\nAs you said the macros i defined are no longer used and i am removing them', 'comment_created': datetime.datetime(2022, 6, 14, 6, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 896431525, 'comment_body': ""I don't know how it could be compiled but please look above lines - there are the lines that you should have changed rather than creating same algorithm objects\r\n```\r\n    traccc::clusterization_algorithm ca(mng_mr);\r\n    traccc::spacepoint_formation sf(mng_mr);\r\n```"", 'comment_created': datetime.datetime(2022, 6, 14, 6, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896432468, 'comment_body': 'I think the algorithm is still using managed memory resource given that cpu clusterization takes too long time', 'comment_created': datetime.datetime(2022, 6, 14, 6, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896439427, 'comment_body': 'License is missing here ;-)', 'comment_created': datetime.datetime(2022, 6, 14, 6, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 896716326, 'comment_body': 'As @beomki-yeo pointed me out earlier, during my SYCL developments, this could be replaced by `copy.memset()` call on the host side. ', 'comment_created': datetime.datetime(2022, 6, 14, 11, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'konradkusiak97', 'type': 'User'}, {'comment_id': 896716493, 'comment_body': 'I think this might be a leftover from debugging :wink: ', 'comment_created': datetime.datetime(2022, 6, 14, 11, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'konradkusiak97', 'type': 'User'}, {'comment_id': 897004252, 'comment_body': ' Thanks. Made the changes.', 'comment_created': datetime.datetime(2022, 6, 14, 15, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 897436296, 'comment_body': ""It's where the speed gets slower. Generating host container with vecmem jagged vector is pretty expensive. \r\nI think you need to get buffer object as an output...\r\nLet me check with @krasznaa and @konradkusiak97. What is the actual plan for object type in algorithm I/O? SYCL is using the buffer output from clusterization algorithm. I know that the overhead from host_container can be minimized once we start using the caching allocator but I still like using view type object for algorithm I/O"", 'comment_created': datetime.datetime(2022, 6, 15, 1, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 897541658, 'comment_body': 'For performance reasons, have you considered performing this operation as a block-wide reduction first, followed by a single atomic addition?', 'comment_created': datetime.datetime(2022, 6, 15, 5, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897542174, 'comment_body': 'This is a relatively small block size, have you investigated the occupancy characteristics of this? Either way we will want this to be configurable, although that can wait until a later update.', 'comment_created': datetime.datetime(2022, 6, 15, 5, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897543550, 'comment_body': 'I would personally consider the storage of semantically heterogeneous values in a vector like this to be confusing and bad practice, is there no way to store this in a separate variable?', 'comment_created': datetime.datetime(2022, 6, 15, 5, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897545124, 'comment_body': 'Is there a reason for these whitespace changes?', 'comment_created': datetime.datetime(2022, 6, 15, 5, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897548489, 'comment_body': ""This is a pretty inefficient way of doing prefix sums. We'll need to see (through profiling) whether this becomes a bottleneck in practice. If it does, we'll need to perform the same kind of block-wide reduction that I described earlier, followed by a local prefix sum."", 'comment_created': datetime.datetime(2022, 6, 15, 5, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897548968, 'comment_body': 'Is it by design that this does not guarantee a monotonically increasing prefix sum?', 'comment_created': datetime.datetime(2022, 6, 15, 5, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897549145, 'comment_body': 'Same comments as before.', 'comment_created': datetime.datetime(2022, 6, 15, 5, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897549817, 'comment_body': ""The `auto` keyword can be pretty harmful to the readability of code, and I would argue that it's really not clear what the types of certain variables are. I'd prefer it if you would make some of these types concrete, as well as throughout the rest of the PR."", 'comment_created': datetime.datetime(2022, 6, 15, 5, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 897551084, 'comment_body': 'I might be confusing things here, but we previously performed a prefix sum with non-deterministic order, so I cannot help but think that ensuring that the total sum is at the end of the vector is a bit odd?', 'comment_created': datetime.datetime(2022, 6, 15, 5, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 898083032, 'comment_body': 'No i have not thought about it yet but surely I will start to look into it', 'comment_created': datetime.datetime(2022, 6, 15, 14, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 898089100, 'comment_body': ""Okay, doesn't need to be now - I am sure we can iterate on the performance of this PR in later stages, just something to think about!"", 'comment_created': datetime.datetime(2022, 6, 15, 14, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'stephenswat', 'type': 'User'}, {'comment_id': 898090484, 'comment_body': 'I thought about this and went ahead and changed all instances that expect a host container to views in the seeding algorithm, consequently few more places require similar changes. So i did not continue it with it.\r\nMaybe we can discuss this a little bit tomorrow?', 'comment_created': datetime.datetime(2022, 6, 15, 14, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 898315523, 'comment_body': 'Yeah this PR is taking the same block size of SYCL implementation. We can do block size optimization later with multi-threading execution \r\n', 'comment_created': datetime.datetime(2022, 6, 15, 19, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 898649022, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 6, 16, 3, 1, 15, tzinfo=datetime.timezone.utc), 'commenter': 'beomki-yeo', 'type': 'User'}, {'comment_id': 901047048, 'comment_body': 'Sorry for the delayed response. I will proceed to refactor the code with PR #205. This will be resolved with it.', 'comment_created': datetime.datetime(2022, 6, 19, 4, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 901047286, 'comment_body': 'Result of debugging.', 'comment_created': datetime.datetime(2022, 6, 19, 4, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 901049530, 'comment_body': '@konradkusiak97 Could you please give some insight on this. This will help me out as well. \r\nBased on the PR #187 ', 'comment_created': datetime.datetime(2022, 6, 19, 5, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}, {'comment_id': 901332099, 'comment_body': 'Yes, this was by design. This prefix sum is needed to identify a ""global index"" in the clusters vector. Since sparse_ccl gives us only the cluster indices ""per module"", we need to add a prefix sum to get the global index.\r\n\r\nTo make this work, we only need to ensure that a particular thread in cluster_counting is pointed at the same prefix sum as the same thread in component_connection. That\'s why they don\'t need to be monotonically increasing. \r\n\r\nBut this non-monotonic nature of this vector comes only from the fact that we are creating it inside the kernel. In #205 this is moved to the host side using `exclusive scan`. @Chamodya-ka, you can have a look there, I think the logic is less confusing there by now.', 'comment_created': datetime.datetime(2022, 6, 20, 7, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'konradkusiak97', 'type': 'User'}, {'comment_id': 901336727, 'comment_body': 'Yes, I agree that this was a little confusing. `cluster_indices` is not the prefix sum vector here. This comes from the logic that we put the number of clusters per module at the last, extra place in each inner vector with sparse_ccl indices.\r\n\r\nSimilarly, as I mentioned above, @Chamodya-ka, you can have a look at #205, where this confusing logic is gone.', 'comment_created': datetime.datetime(2022, 6, 20, 7, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'konradkusiak97', 'type': 'User'}, {'comment_id': 902127994, 'comment_body': 'Thanks alot! Yea I did come across this while refactoring the code with #205.', 'comment_created': datetime.datetime(2022, 6, 21, 3, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Chamodya-ka', 'type': 'User'}]","[{'commit_sha': '2a6fd2b26249e069b7f2231f632cfbecf6c43f53', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ce015b58324a22c06ca9c6fda7ac3ad7e6d30793', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd8194362492381368a16d314369a3bc84b780440', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '87bd204c89b1bce136c5dbde7e8f0ffb3d49f6a8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fd15c448d1aa7d22110477f582fe6c4917ec6824', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5de9d8e628af5b194675614051311862598a4f2a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '679e39c46f58cb25e8c5e899a989b76a3f8976b3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0b54da4103217a4449a10ab3109134c8e8ca4aac', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12ce25bf24455bffb0abfb73695dc89df34dcf23', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd893d090c0eb8182e9613ca28684c4f883a4eaaf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ea77e3bbcc740ba5faca59a91ac40803af368323', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a2cc482c14e1272f10a0a328c97d58bd5d866a1c', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '421fd770e2e18705139da575d6d05a57a0bd8eb8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b3cd5533a6f545e0b663d97ccd8594f19722ac06', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b874ba7c10dac00498c7ca420f6aef379892e896', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a8e26e191a5cb76fda0e5fc1c9df00973084b2e9', 'committer_username': 'Chamodya-ka', 'committer_name': 'Chamodya Attanayake', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 22, 8, 4, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86abcbae292503e03a2584974d59f72046349c9b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'da80751c07e400553fe09985d75074079c995665', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Chamodya Attanayake,58067288,,User,,28,,0,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
333710938,traccc,acts-project/traccc,C++,46,29,5,34,1577,51,5,31,"[{'id': 1091760655, 'number': 255, 'closed': datetime.datetime(2024, 6, 21, 19, 49, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 19, 5, 23, 39, tzinfo=datetime.timezone.utc), 'time_taken': 52842343.0, 'time_delta': '611 days, 14:25:43', 'additions': 193, 'deletions': 0, 'state': 'closed'}, {'id': 1071757725, 'number': 244, 'closed': None, 'created': datetime.datetime(2022, 9, 29, 19, 1, 49, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 210, 'deletions': 0, 'state': 'open'}, {'id': 1009844859, 'number': 216, 'closed': datetime.datetime(2022, 7, 29, 15, 31, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 27, 15, 56, 59, tzinfo=datetime.timezone.utc), 'time_taken': 171254.0, 'time_delta': '1 day, 23:34:14', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 983967274, 'number': 209, 'closed': datetime.datetime(2022, 7, 12, 11, 14, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 30, 15, 10, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1022682.0, 'time_delta': '11 days, 20:04:42', 'additions': 423, 'deletions': 39, 'state': 'closed'}, {'id': 966146619, 'number': 206, 'closed': datetime.datetime(2022, 6, 30, 17, 13, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 13, 20, 16, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1457799.0, 'time_delta': '16 days, 20:56:39', 'additions': 759, 'deletions': 16, 'state': 'closed'}]"
