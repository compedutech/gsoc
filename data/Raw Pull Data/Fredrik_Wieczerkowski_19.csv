pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
958268409,Extract syntax builder generation templates into separate directory,"This branch aims to introduce a consistent directory layout for the `SourceFile` templates from the new `SwiftSyntaxBuilderGeneration` module by moving the `Tokens.swift` template into a subdirectory named `Templates`:

```
SwiftSyntaxBuilderGeneration
├─ Templates
│  ├─ TokensFile.swift
│  └─ ... (future templates)
└─ main.swift
```

Additionally, I have reformatted the file with slightly more readable indentation.

cc @ahoppen @kimdv",True,456,https://api.github.com/repos/swiftlang/swift-syntax/pulls/456,https://github.com/swiftlang/swift-syntax/pull/456,closed,233,160,3,1,9,4,0,0,[],2022-06-04 18:00:51+00:00,2022-06-07 21:17:47+00:00,271016.0,"3 days, 3:16:56","[{'comment_id': 889669767, 'comment_body': 'Could we load these files at runtime?', 'comment_created': datetime.datetime(2022, 6, 5, 9, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kimdv', 'type': 'User'}, {'comment_id': 889694667, 'comment_body': 'You mean in a similar way to how test discovery works? I am not sure whether that would be possible on Linux', 'comment_created': datetime.datetime(2022, 6, 5, 13, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 889695498, 'comment_body': 'Nope. \r\nJust use `FileManager` to find all files in the `template` folder. :) ', 'comment_created': datetime.datetime(2022, 6, 5, 13, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kimdv', 'type': 'User'}, {'comment_id': 889695633, 'comment_body': ""Ah... it's me. That's not possible as it's compiled 🤦\u200d♂️🤦\u200d♂️\nSorry for the confusion "", 'comment_created': datetime.datetime(2022, 6, 5, 13, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kimdv', 'type': 'User'}]","[{'commit_sha': '7817251f4b2644f8185224be59c9b38f97cfa75f', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
962347512,Conform `Array` to various `ExpressibleAs` protocols in `BuildableCollectionNodes`,"In a separate PR (from #460) for easier reviewability. This adds a bunch of `Array` conformances that let us initialize syntax collections more conveniently, for example:

```swift
ExtensionDecl(
  modifiers: [...],
  ...
)
```

instead of

```swift
ExtensionDecl(
  modifiers: ModifierList([...]),
  ...
)
```

(This applies whenever the parameter has an existential type a la `ExpressibleAsModifierList`, in which case the compiler cannot infer that we would like to use the `ExpressibleByArrayLiteral` conformance from `ModifierList`)

cc @ahoppen ",True,461,https://api.github.com/repos/swiftlang/swift-syntax/pulls/461,https://github.com/swiftlang/swift-syntax/pull/461,closed,298,0,3,1,3,0,0,0,[],2022-06-09 02:52:58+00:00,2022-06-10 08:24:34+00:00,106296.0,"1 day, 5:31:36",[],"[{'commit_sha': '93b7852d3bdf8118bd074994ca64106b0b7c8496', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
968784172,Add default initialization for EOF token to auto-generate SourceFile convenience initializer,"The EOF token currently does not yield a `.default_initialization()` since it is not part of the `SYNTAX_TOKEN_MAP` (`.token()` therefore evaluates to `None`). This makes it slightly inconvenient to initialize `SourceFile`, since the `eof` argument has to be passed explicitly:

```swift
public init(
  eofToken: TokenSyntax,
  @CodeBlockItemListBuilder statementsBuilder: () -> ExpressibleAsCodeBlockItemList = { CodeBlockItemList([]) }
)
```

While the convenience initializer from `SourceFileConvenienceInitializers.swift` currently works around this, this PR makes the explicit convenience initializer superfluous, since the generated initializer is now essentially equivalent:

```swift
public init(
  eofToken: TokenSyntax = TokenSyntax.eof,
  @CodeBlockItemListBuilder statementsBuilder: () -> ExpressibleAsCodeBlockItemList = { CodeBlockItemList([]) }
)
```

cc @ahoppen",True,464,https://api.github.com/repos/swiftlang/swift-syntax/pulls/464,https://github.com/swiftlang/swift-syntax/pull/464,closed,4,25,3,2,1,0,0,0,[],2022-06-16 01:42:00+00:00,2022-06-16 09:25:40+00:00,27820.0,7:43:40,[],"[{'commit_sha': 'fb214f153c909769c95b74bad3537e9539f90d15', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ba1778dab548c41f78961e7cb4f30bc8f71551', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
968791242,Clean up generation of builder-based convenience initializers,"Based on #464 (but in a separate PR for easier reviewability).

This branch implements the proposed ideas from [this thread](https://github.com/apple/swift-syntax/pull/460#issuecomment-1149569900), replacing the various explicit `...DeclConvenienceInitializers` with improved gyb-generation of initializers that:

- automatically generates initializers for `...Block`s too (previously only direct syntax collections were possible)
- only generates builder parameters for a handful of block-like structures, in an effort to clean up and to e.g. make trailing closures more ergonomic in these APIs
  - currently this includes `CodeBlock`, `MemberDeclBlock`, `CodeBlockItemList`, `MemberDeclList` and `PatternBindingList`, but the list is easy to extend as needed
- aims to make as many explicitly declared convenience initializers as possible redundant

cc @ahoppen ",True,465,https://api.github.com/repos/swiftlang/swift-syntax/pulls/465,https://github.com/swiftlang/swift-syntax/pull/465,closed,419,937,22,4,16,28,0,0,[],2022-06-16 02:01:27+00:00,2022-06-22 19:27:32+00:00,581165.0,"6 days, 17:26:05","[{'comment_id': 898887089, 'comment_body': 'Do you think it makes sense to move this definition to its own file similar to ExpressibleAsConformances.py?', 'comment_created': datetime.datetime(2022, 6, 16, 9, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 898887996, 'comment_body': 'What do you think about making this a method on `SyntaxBuildableType`?', 'comment_created': datetime.datetime(2022, 6, 16, 9, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 899117247, 'comment_body': ""I've moved these definitions to `BuilderInitializableTypes.py`"", 'comment_created': datetime.datetime(2022, 6, 16, 14, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 899162231, 'comment_body': 'One thing I have noticed is that we need to wrap expression lists in `ExprList`, since `Array` does not conform to `ExpressibleAsExprList` (the reason it was left out of #461 is that generating the conformances for the entire tree of superprotocols was a bit tricky). Since this would be very convenient, a future PR could look into adding these missing conformances.', 'comment_created': datetime.datetime(2022, 6, 16, 14, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 901354154, 'comment_body': 'I think `bodyBuilder` could also be trailing closure syntax.', 'comment_created': datetime.datetime(2022, 6, 20, 7, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 901805687, 'comment_body': 'I have added quite a few new types here, mostly since the array-based initializers do not support the new trailing comma logic that was recently merged. In general my suggestion would be that we try to use builders for every parameter that can be reasonably well expressed using a single trailing closure, since that usually produces very concise and nice-looking DSL code.', 'comment_created': datetime.datetime(2022, 6, 20, 15, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 901808132, 'comment_body': 'That also plays well e.g. with function parameter lists generated by for-loops (within a builder)', 'comment_created': datetime.datetime(2022, 6, 20, 15, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 901814595, 'comment_body': ""Another thing I thought about was whether we would want to automatically create builders for every `HasTrailingComma` type. This would e.g. in `IfStmt`, however, lead to an initializer with multiple builder closures (`conditions` and `body`), which we'd like to avoid, therefore I went with the manual approach for now."", 'comment_created': datetime.datetime(2022, 6, 20, 15, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 902000259, 'comment_body': 'I agree that maintaining this list manually is the better option because, as you mentioned, it gives us the flexibility to try and avoid initializers that take multiple result builders.', 'comment_created': datetime.datetime(2022, 6, 20, 21, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 903173487, 'comment_body': 'Please keep this as `ClosureCaptureItem` conforms to `HasTrailingComma`', 'comment_created': datetime.datetime(2022, 6, 22, 0, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'evnik', 'type': 'User'}, {'comment_id': 903175852, 'comment_body': 'Please keep this as `ConditionElement` conforms to `HasTrailingComma`\r\nThe same for the `GuardStmt` and `IfStmt`', 'comment_created': datetime.datetime(2022, 6, 22, 0, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': 'evnik', 'type': 'User'}, {'comment_id': 903178126, 'comment_body': 'Please keep this as `CaseItem` conforms to `HasTrailingComma`', 'comment_created': datetime.datetime(2022, 6, 22, 0, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'evnik', 'type': 'User'}, {'comment_id': 903191550, 'comment_body': 'Please keep this as `CatchItem` conforms to `HasTrailingComma`', 'comment_created': datetime.datetime(2022, 6, 22, 1, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'evnik', 'type': 'User'}, {'comment_id': 903191956, 'comment_body': 'Please keep this as `PrimaryAssociatedType` conforms to `HasTrailingComma`', 'comment_created': datetime.datetime(2022, 6, 22, 1, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'evnik', 'type': 'User'}, {'comment_id': 903192173, 'comment_body': 'Please keep this as `TupleTypeElement` conforms to `HasTrailingComma`\nThe same for the `FunctionType`', 'comment_created': datetime.datetime(2022, 6, 22, 1, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'evnik', 'type': 'User'}, {'comment_id': 903192574, 'comment_body': 'Please keep this as `GenericArgument` conforms to `HasTrailingComma`', 'comment_created': datetime.datetime(2022, 6, 22, 1, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'evnik', 'type': 'User'}, {'comment_id': 903192809, 'comment_body': 'Please keep this as `TuplePatternElement` conforms to `HasTrailingComma`', 'comment_created': datetime.datetime(2022, 6, 22, 1, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'evnik', 'type': 'User'}, {'comment_id': 903211052, 'comment_body': 'Hm, `ConditionElement` was actually a node I intentionally excluded since it introduces a second builder closure parameter, see https://github.com/apple/swift-syntax/pull/465#discussion_r901814595', 'comment_created': datetime.datetime(2022, 6, 22, 2, 3, 14, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 903320852, 'comment_body': '✅ Similar to `TupleTypeElement`.', 'comment_created': datetime.datetime(2022, 6, 22, 6, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 903320861, 'comment_body': '✅ I think result builder would make sense here because there’s no reason to assume that types only have a single generic argument.', 'comment_created': datetime.datetime(2022, 6, 22, 6, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 903320871, 'comment_body': '✅ I agree that using a result builder here makes sense because a `TupleType` contains multiple types by design.', 'comment_created': datetime.datetime(2022, 6, 22, 6, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 903320896, 'comment_body': '❌ Again, IMO the dominating use case is that there is a single primary associated type so there’s no need for a result builder.', 'comment_created': datetime.datetime(2022, 6, 22, 6, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 903320912, 'comment_body': '❌ Similar to `if`. The body is the primary body here.', 'comment_created': datetime.datetime(2022, 6, 22, 6, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 903320918, 'comment_body': '🤷🏽\u200d♂️/ ✅ Similar to `ClosureCaptureItemList`, having the result builder initializer doesn’t hurt.', 'comment_created': datetime.datetime(2022, 6, 22, 6, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 903320936, 'comment_body': '❌ I agree that this should not be a result builder because making the conditions because the body is without doubt the primary body of the node and making the conditions a result builder significantly reduces legibility IMHO. Also, IMO, the usual case is that `if` and `guard` statements have a single condition so it won’t benefit much from result builders.', 'comment_created': datetime.datetime(2022, 6, 22, 6, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 903320945, 'comment_body': '🤷🏽\u200d♂️/✅   I don’t have strong opinions about this one. I’m fine with making it a result builder again because nobody is forced to use the result builder initializer.\r\n', 'comment_created': datetime.datetime(2022, 6, 22, 6, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 903751323, 'comment_body': 'I think this would make the `FunctionType` initializer less readable, since the `arguments` closure would be placed after the return type. One solution would be to decide whether to make a parameter a builder not solely based on the type, but also the type initialized, or just to leave `TupleTypeElementList` out, not sure though.', 'comment_created': datetime.datetime(2022, 6, 22, 13, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 903953985, 'comment_body': 'I didn’t expect us to be using `TupleTypeElementList` for `FunctionType` as well. In that case I agree with you that it’s better to not have `TupleTypeElementList` be result builder type.', 'comment_created': datetime.datetime(2022, 6, 22, 16, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}]","[{'commit_sha': '0ec7b5a7f96aa652aac910767b4e4371f6cda488', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8a1069d779db2dd95eb7180a0eb39a3d3319ea1', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e04f28e8d6512a2e99d21f274b90a3174c1ea3da', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ade5af46b372105a6527db38131401813f9a6983', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
979078018,Automatically generate leading/trailing space trivia for tokens in `SyntaxFactory`,"In an effort to clean up the `TokensFile` template in `SwiftSyntaxBuilderGeneration`, this branch moves the generation of leading/trailing space trivia around tokens into `SyntaxFactory`. In other words, calls like

```
SyntaxFactory.makeSwitchKeyword()
```

will now automatically generate a trailing space (although this is still overridable by explicitly passing `trailingTrivia: []` as a parameter).

cc @ahoppen ",True,473,https://api.github.com/repos/swiftlang/swift-syntax/pulls/473,https://github.com/swiftlang/swift-syntax/pull/473,closed,550,402,9,1,5,5,0,0,[],2022-06-25 15:35:23+00:00,2022-06-27 13:53:59+00:00,166716.0,"1 day, 22:18:36","[{'comment_id': 906696388, 'comment_body': 'Since the `SyntaxFactory` gyb-template takes care of this, I have removed these (no longer needed) attributes from `Tokens`. Is this fine?', 'comment_created': datetime.datetime(2022, 6, 25, 15, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 906696560, 'comment_body': ""The empty dictionary literal is now generated as `[: ]` since the colon token seems to require a trailing space. I don't think this should be an issue, but perhaps worth pointing out."", 'comment_created': datetime.datetime(2022, 6, 25, 15, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 906751191, 'comment_body': 'You should be able to fix it in the [`DictionaryExprConvenienceInitializers.swift`](https://github.com/apple/swift-syntax/blob/0ec7b5a7f96aa652aac910767b4e4371f6cda488/Sources/SwiftSyntaxBuilder/DictionaryExprConvenienceInitializers.swift#L26)', 'comment_created': datetime.datetime(2022, 6, 26, 3, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'evnik', 'type': 'User'}, {'comment_id': 906751382, 'comment_body': 'Good catch, thanks!', 'comment_created': datetime.datetime(2022, 6, 26, 3, 53, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 907136677, 'comment_body': 'Yes 👍 ', 'comment_created': datetime.datetime(2022, 6, 27, 8, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}]","[{'commit_sha': '94c69708301d0a33e6b36a5df2e640b2c44c812d', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
979084966,Add `Trivia.isEmpty`,A small addition in preparation of a larger PR regarding leading/trailing trivia generation.,True,474,https://api.github.com/repos/swiftlang/swift-syntax/pulls/474,https://github.com/swiftlang/swift-syntax/pull/474,closed,10,0,2,1,1,0,0,0,[],2022-06-25 16:11:31+00:00,2022-06-27 11:01:01+00:00,154170.0,"1 day, 18:49:30",[],"[{'commit_sha': '5ea92bb34fe6b1c42939c15a898f5a66f36b2742', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
979088441,Add ability to attach leading trivia directly to buildable nodes,"Based on #474.

This branch adds the ability to attach leading trivia directly to `BuildableNodes` as a parameter/attribute (currently this can only be done by passing it as a parameter directly to the build syntax method), thereby addressing the [points outlined here](https://github.com/apple/swift-syntax/pull/460#discussion_r891749401). This is particularly convenient in `TokensFile`, where we can now attach doc comments directly to the nodes:

```swift
ExtensionDecl(
  leadingTrivia: .newlines(1) + .docLineComment(""/// Namespace for commonly used tokens with default trivia."") + .newlines(1),
  modifiers: [TokenSyntax.public],
  extendedType: ""TokenSyntax""
)
```

rather than having to modify the first token (as done currently):

```swift
ExtensionDecl(
  modifiers: [TokenSyntax.public.withLeadingTrivia(.newlines(1) + .docLineComment(""/// Namespace for commonly used tokens with default trivia."") + .newlines(1))],
  extendedType: ""TokenSyntax""
)
```

thereby making the DSL more readable and more aligned with the actual generated code.

cc @ahoppen @kimdv ",True,475,https://api.github.com/repos/swiftlang/swift-syntax/pulls/475,https://github.com/swiftlang/swift-syntax/pull/475,closed,3223,1606,4,2,4,8,0,0,[],2022-06-25 16:28:48+00:00,2022-06-28 13:01:57+00:00,246789.0,"2 days, 20:33:09","[{'comment_id': 907131131, 'comment_body': 'I got a little confused what this `leadingTrivia` and the `additionalLeadingTrivia` were used for. What do you think about adding a comment like\r\n```swift\r\n/// This is typically used to add comments to syntax nodes\r\n```\r\n\r\nto this member and something like\r\n\r\n```swift\r\n/// `leadingTrivia` is typically used to add the correct amount of indentation to this node.\r\n```\r\nto the `build*(` method.', 'comment_created': datetime.datetime(2022, 6, 27, 8, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 907132139, 'comment_body': 'Is this `if`-statement really necessary or can we just \r\n```swift\r\nreturn result.withLeadingTrivia(combinedLeadingTrivia)\r\n```', 'comment_created': datetime.datetime(2022, 6, 27, 8, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 907166428, 'comment_body': 'Since we are defaulting to `?? []` should we not add it here?', 'comment_created': datetime.datetime(2022, 6, 27, 9, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kimdv', 'type': 'User'}, {'comment_id': 907340384, 'comment_body': ""Yeah, we could probably do that, I wasn't sure whether there was some internal overhead to attaching potentially empty trivia to every node."", 'comment_created': datetime.datetime(2022, 6, 27, 12, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 907342587, 'comment_body': ""Yeah, I think that's a good idea. I kept it optional to be consistent with the other build-methods, should those be refactored too?"", 'comment_created': datetime.datetime(2022, 6, 27, 12, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 907354885, 'comment_body': ""I think the `SyntaxBuildable` protocol (and its related subprotocols) currently require this to be optional, so we'd have to refactor that (which might be a larger change)."", 'comment_created': datetime.datetime(2022, 6, 27, 12, 53, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 907389082, 'comment_body': 'I don’t think we should need to worry about micro-performance-optimization in SwiftSyntaxBuilder.', 'comment_created': datetime.datetime(2022, 6, 27, 13, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 907390194, 'comment_body': 'I would suggest that we keep it as-is for now and could consider refactoring it to be non-optional in a follow-up PR.', 'comment_created': datetime.datetime(2022, 6, 27, 13, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}]","[{'commit_sha': '184db6438dc2605551f2d1db7203e785c12d7634', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70f46d215362ad1b57053f0caff164d07da88261', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
981521275,Migrate examples to Swift snippets,"[This recently merged proposal](https://github.com/apple/swift-evolution/blob/main/proposals/0356-swift-snippets.md) will bring native support for running small scripts (snippets) in the context of the package directly via SPM (`swift run [snippet]`). Since the examples from this repo effectively serve the same purpose, this branch renames the `Examples` folder to `Snippets` to make them discoverable by SPM. Additionally, it adds a few minor tweaks (cleaning up the paths in the `README.md` and using trailing closures in the syntax builder example).",True,477,https://api.github.com/repos/swiftlang/swift-syntax/pulls/477,https://github.com/swiftlang/swift-syntax/pull/477,closed,6,6,3,3,6,0,0,0,[],2022-06-28 14:51:52+00:00,2022-07-29 18:13:53+00:00,2690521.0,"31 days, 3:22:01",[],"[{'commit_sha': 'f6615475bf029265a19e0a0410f700e6a4bdf6b4', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5447b09329821f144bd1ae8c058cdbdaa5ddf712', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3ff32e6beb53ecff4ead72a11a8e2af2d1b18ae', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
985543178,Add `--gyb-only` flag to build script's `generate-source-code`,"When working on `SwiftSyntaxBuilderGeneration`, it can occasionally be useful to only generate `gyb` templates (skipping `SwiftSyntaxBuilderGeneration`'s Swift templates). Previously this could be achieved with `--degyb-only`, with the refactoring of the build script, however, this option was removed in favor of `generate-source-code`, which performs all forms of code generation at once. While that is what most people want to do most of the time, having the option to only perform gyb generation can still be a useful tool sometimes, hence this new flag.

cc @kimdv @ahoppen ",True,481,https://api.github.com/repos/swiftlang/swift-syntax/pulls/481,https://github.com/swiftlang/swift-syntax/pull/481,closed,16,9,1,1,1,0,0,0,[],2022-07-02 15:25:58+00:00,2022-07-03 09:59:15+00:00,66797.0,18:33:17,[],"[{'commit_sha': '45da8ab35e7c727d195bcdf23d7c9696732de41e', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
985545558,Generate `SYNTAX_NODES` in `SwiftSyntaxBuilderGeneration`,"A small patch that generates the Swift declarations for `SYNTAX_NODES` (thereby also moving [this declaration](https://github.com/apple/swift-syntax/blob/674aa55f9386392428c74d42a54fb5fa07c56676/Sources/SwiftSyntaxBuilderGeneration/Templates/ResultBuildersFile.swift#L17-L26) into its own file for #479). These are required by many `gyb` templates in `SwiftSyntaxBuilder` and let us move forward with the migration to Swift templates.

The definition of `SYNTAX_NODES` is analogous to [the corresponding declaration](https://github.com/apple/swift/blob/198b9746221cbccd7c525b1e8de18338f8336e51/utils/gyb_syntax_support/__init__.py#L21-L23) in `gyb_syntax_support`.

cc @ahoppen @kimdv ",True,482,https://api.github.com/repos/swiftlang/swift-syntax/pulls/482,https://github.com/swiftlang/swift-syntax/pull/482,closed,21,0,1,1,4,0,0,0,[],2022-07-02 15:43:04+00:00,2022-07-04 21:45:56+00:00,194572.0,"2 days, 6:02:52",[],"[{'commit_sha': '32fcc545623f0643268bcc33a50b3ea13aab0ad5', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
985805637,Port `SyntaxBuildableWrappers` to Swift,"Based on #482.

This branch ports the `SyntaxBuildableWrappers` from `gyb_helpers` to Swift for use in `SwiftSyntaxBuilderGeneration`. The API is kept as close as possible to the original (with slight modifications to make it more swifty), hoping that it will make the translation of gyb templates to Swift as seamless as possible.

Currently WIP since only a subset of the API surface has been ported.",True,485,https://api.github.com/repos/swiftlang/swift-syntax/pulls/485,https://github.com/swiftlang/swift-syntax/pull/485,closed,591,12,16,5,8,3,0,0,[],2022-07-03 20:06:56+00:00,2022-07-11 12:21:13+00:00,663257.0,"7 days, 16:14:17","[{'comment_id': 914163235, 'comment_body': ""While we could also move these properties into `Node` directly, I kept them in an extension for clarity (the same goes for `Child` and its extension). I don't have a strong opinion here though, so if you think it's cleaner to have them all in one place, we could also move them to their respective classes."", 'comment_created': datetime.datetime(2022, 7, 5, 20, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 914164071, 'comment_body': 'These are replaced with `baseType: SyntaxBuildableType` and `collectionElementType: SyntaxBuildableType`, i.e. an API break to be aware of.', 'comment_created': datetime.datetime(2022, 7, 5, 20, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 915601341, 'comment_body': 'SGTM. Eventually we might want to extract `Node` etc. to a different target if we want to also generate other parts of SwiftSyntax using `SwiftSyntaxBuilder`. But these extensions are specific to the generation of `SwiftSyntaxBuilder` itself.', 'comment_created': datetime.datetime(2022, 7, 7, 8, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}]","[{'commit_sha': '7e79dde1a89164f8145891dcc081d894683516de', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22223519da293ea1081a18d48666496bfbaaa3a8', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd394d84d760437b0a36c69c9de7288865566be85', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f495286f8086dc73d59e3d131aea9ab1e7d3fb46', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45759703ced4646a33879f7f206ef1fd65089aa8', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
992125073,Generate `TokenSyntax` with `SwiftSyntaxBuilderGeneration`,This PR ports the currently gyb-generated `TokenSyntax` to `SwiftSyntaxBuilder`'s DSL as part of the ongoing effort to bootstrap `SwiftSyntaxBuilder` with `SwiftSyntaxBuilderGeneration`.,True,493,https://api.github.com/repos/swiftlang/swift-syntax/pulls/493,https://github.com/swiftlang/swift-syntax/pull/493,closed,105,71,5,1,1,0,0,0,[],2022-07-09 01:47:58+00:00,2022-07-14 09:05:09+00:00,458231.0,"5 days, 7:17:11",[],"[{'commit_sha': 'e918c4508681cabecee85c101525bdec38b2b846', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
992328788,Generate `ExpressibleAsProtocols` with `SwiftSyntaxBuilderGeneration`,This PR ports the currently gyb-generated `ExpressibleAsProtocols` to `SwiftSyntaxBuilder`'s DSL as part of the ongoing effort to bootstrap `SwiftSyntaxBuilder` with `SwiftSyntaxBuilderGeneration`.,True,495,https://api.github.com/repos/swiftlang/swift-syntax/pulls/495,https://github.com/swiftlang/swift-syntax/pull/495,closed,2107,2512,6,1,3,1,0,0,[],2022-07-10 01:01:38+00:00,2022-07-14 11:25:07+00:00,383009.0,"4 days, 10:23:29","[{'comment_id': 920979522, 'comment_body': 'I have added a sort here to make the order deterministic (see also https://github.com/apple/swift-syntax/pull/498#discussion_r920976575).', 'comment_created': datetime.datetime(2022, 7, 14, 10, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}]","[{'commit_sha': '407645848936627df84c81886ffe0d262de10626', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
993066414,Add `SyntaxBuildableType.listBuildable`,"For some reason I missed this method in #485, therefore a small follow-up PR here.",True,497,https://api.github.com/repos/swiftlang/swift-syntax/pulls/497,https://github.com/swiftlang/swift-syntax/pull/497,closed,6,0,1,1,1,0,0,0,[],2022-07-11 12:50:36+00:00,2022-07-12 13:02:28+00:00,87112.0,"1 day, 0:11:52",[],"[{'commit_sha': 'eedcf8f0645e2ed0b9835baa46e08b006194c458', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
993113759,Generate `BuildableBaseProtocols` with `SwiftSyntaxBuilderGeneration`,"Based on #497.

This PR ports the currently gyb-generated `BuildableBaseProtocols` to `SwiftSyntaxBuilder`'s DSL as part of the ongoing effort to bootstrap `SwiftSyntaxBuilder` with `SwiftSyntaxBuilderGeneration`.",True,498,https://api.github.com/repos/swiftlang/swift-syntax/pulls/498,https://github.com/swiftlang/swift-syntax/pull/498,closed,388,367,9,2,4,10,0,0,[],2022-07-11 13:33:23+00:00,2022-07-18 10:12:24+00:00,592741.0,"6 days, 20:39:01","[{'comment_id': 917941468, 'comment_body': 'Generating multi-line doc strings is probably a common pattern that we should move to a utility function. (The reason for not doing a single `.docLineComment` with a multi-line string is that #480 cannot handle indentation correctly in that case IIUC.)', 'comment_created': datetime.datetime(2022, 7, 11, 13, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 917944364, 'comment_body': ""Generating a (non-nil) conformance clause iff there are conformances seems to be a common pattern too (that I've also encountered in #495). Perhaps we should move this either into a utility function (similar to `conformance_clause` from the gyb helpers) or simplify the DSL in some form, e.g. by adding new convenience initializers?"", 'comment_created': datetime.datetime(2022, 7, 11, 13, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 920969964, 'comment_body': 'I am planning to do some work regarding the representation of trivia in the very near future anyway, so I don’t think it’s worth adding a utility function here at the moment.', 'comment_created': datetime.datetime(2022, 7, 14, 9, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 920970235, 'comment_body': 'I agree that it would make sense to add this as a utility function in `SwiftSyntaxBuilderGeneration`.', 'comment_created': datetime.datetime(2022, 7, 14, 9, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 920976575, 'comment_body': ""One thing I've stumbled upon is that we probably want to sort this set (`SYNTAX_BASE_KINDS`) to enforce a deterministic iteration order (otherwise regenerating may yield different results)."", 'comment_created': datetime.datetime(2022, 7, 14, 9, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 921010564, 'comment_body': 'Oh, yes, absolutely, we need deterministic iteration here.', 'comment_created': datetime.datetime(2022, 7, 14, 10, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 921192391, 'comment_body': ""Shouldn't it be `SyntaxListBuildable`?\r\n```suggestion\r\npublic protocol DeclListBuildable: SyntaxListBuildable{\r\n```"", 'comment_created': datetime.datetime(2022, 7, 14, 14, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'evnik', 'type': 'User'}, {'comment_id': 921279298, 'comment_body': 'Good catch, thanks! Syntax and list conformances were generated in the wrong order, should be fixed now.', 'comment_created': datetime.datetime(2022, 7, 14, 15, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 922688406, 'comment_body': 'Please rebase on top of the latest `main` and regenerate this file. It should add a space before left braces\r\n```suggestion\r\npublic protocol DeclListBuildable: SyntaxListBuildable {\r\n```', 'comment_created': datetime.datetime(2022, 7, 16, 14, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'evnik', 'type': 'User'}, {'comment_id': 922881080, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 17, 18, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}]","[{'commit_sha': 'b91cfef128b3d6f50615d7ce52826efb09f85f95', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e9dc11fadbdbf45e3a4f7f6d0a6289d527c9f55', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1001223323,Use `let` bindings in `BuildableBaseProtocolsFile`,"A minor stylistic oversight that originated from translating a variable mutation from Python, which we however ended up rewriting in an immutable style. This patch therefore updates these variables to be `let`-bindings.",True,505,https://api.github.com/repos/swiftlang/swift-syntax/pulls/505,https://github.com/swiftlang/swift-syntax/pull/505,closed,2,2,1,1,1,0,0,0,[],2022-07-19 20:38:38+00:00,2022-07-20 05:47:14+00:00,32916.0,9:08:36,[],"[{'commit_sha': '7e24c56ca6abc7de1dd9dd84d39ce3e6d7d87055', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1002760340,Generate `BuildableCollectionNodes` with `SwiftSyntaxBuilderGeneration`,This PR ports the currently gyb-generated `BuildableCollectionNodes` to `SwiftSyntaxBuilder`'s DSL as part of the ongoing effort to bootstrap `SwiftSyntaxBuilder` with `SwiftSyntaxBuilderGeneration`.,True,506,https://api.github.com/repos/swiftlang/swift-syntax/pulls/506,https://github.com/swiftlang/swift-syntax/pull/506,closed,842,959,8,2,5,30,0,0,[],2022-07-20 18:55:18+00:00,2022-08-04 14:33:42+00:00,1280304.0,"14 days, 19:38:24","[{'comment_id': 925958498, 'comment_body': 'I factored out this function from `BuildableBaseProtocols`, since this parameter clause is used a few times in `BuildableCollectionNodes` too.', 'comment_created': datetime.datetime(2022, 7, 20, 18, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 925959964, 'comment_body': ""I am not quite sure why we need to wrap the `MemberAccessExpr` in a `CodeBlockItem` here since e.g. a `FunctionCallExpr` seems to work just fine in a `ClosureExpr`'s `CodeBlockItemList` builder. Might be worth investigating to make the DSL a bit less verbose here."", 'comment_created': datetime.datetime(2022, 7, 20, 18, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 925962691, 'comment_body': 'The `Array: ExpressibleAsExprList` conformance (as proposed in https://github.com/apple/swift-syntax/pull/465#discussion_r899162231) would really come in handy since we use quite a few `SequenceExpr`s here and in the other generated files.\r\n\r\nPerhaps noteworthy that `BuildableCollectionNodes` (this file) is also responsible for generating these conformances, though I would still consider this to be more of a candidate for a future PR.', 'comment_created': datetime.datetime(2022, 7, 20, 19, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 925966346, 'comment_body': 'Perhaps we could add an optional parameter or a new convenience initializer in `VariableDeclConvenienceInitializers` for variable declarations binding an initializer clause? This seems like a common use case and might be worth sugaring.', 'comment_created': datetime.datetime(2022, 7, 20, 19, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 925968494, 'comment_body': 'Having `Array: ExpressibleAsParameterClause` might be cool, this would be pretty analogous to https://github.com/apple/swift-syntax/pull/506#discussion_r925962691.', 'comment_created': datetime.datetime(2022, 7, 20, 19, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 925970287, 'comment_body': '`IfStmt` might actually look nice with a multiple-trailing-closure-style API:\r\n\r\n```swift\r\nIfStmt(conditions: ...) {\r\n  // ...\r\n} elseBody: {\r\n  // ...\r\n}\r\n```\r\n\r\nPerhaps we would want to add an extra initializer for this in an `IfStmtConvenienceInitializers` file? Not sure whether that would complicate overload resolution or make the existing initializers ambiguous though.', 'comment_created': datetime.datetime(2022, 7, 20, 19, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 925972714, 'comment_body': 'We are using `TokenSyntax.identifier(...)` in a lot of places. This got me thinking whether we might be able to conform `TokenSyntax` to `ExpressibleByStringLiteral`?', 'comment_created': datetime.datetime(2022, 7, 20, 19, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 925991787, 'comment_body': 'Could you add a doc comment to this method like\r\n```swift\r\n/// Create a parameter clause `format: .comma, leadingTrivia: Trivia = nil` where the presence of ` = nil` is controlled by `withDefaultTrivia`.\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 19, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 925992640, 'comment_body': '-> Moving the discussion to #507.', 'comment_created': datetime.datetime(2022, 7, 20, 19, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 925994944, 'comment_body': 'Oh, interesting. I think it would be great to add the `Array: ExpressibleAsExprList` conformance in a follow-up PR as a bootstrapping exercise. Just to make sure that all of our ideas actually work.', 'comment_created': datetime.datetime(2022, 7, 20, 19, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 925998355, 'comment_body': 'I agree that we should figure out why this implicit conversion is happening for some types but not others.', 'comment_created': datetime.datetime(2022, 7, 20, 19, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 925999973, 'comment_body': 'Yes, I agree that having to specify a `PatternBinding` is not intuitive (but syntactically correct) and having a convenience initializer would be nice.', 'comment_created': datetime.datetime(2022, 7, 20, 19, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 926005596, 'comment_body': 'I wonder whether this reads better as follows. It at least gets rid of two nesting levels\r\n\r\n```suggestion\r\n                        let leadingTriviaParam: Expr\r\n                        if node.elementsSeparatedByNewline {\r\n                          leadingTriviaParam = SequenceExpr(elements: ExprList([\r\n                            MemberAccessExpr(base: ""Trivia"", name: ""newline""),\r\n                            BinaryOperatorExpr(""+""),\r\n                            FunctionCallExpr(MemberAccessExpr(base: ""format"", name: ""_makeIndent"")),\r\n                          ]))\r\n                        } else {\r\n                          leadingTriviaParam = ""nil""\r\n                        }\r\n                        TupleExprElement(\r\n                          label: ""leadingTrivia"",\r\n                          expression: leadingTriviaParam\r\n                        )\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 20, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 926007457, 'comment_body': 'Would it be worth making adding a `Array: ConditionElementList` conformance? \r\n\r\nAlso I think we should make `OptionalBindingCondition: ExpressibleAsConditionElement`. Combined, that should allow us to write `conditions: OptionalBindingCondition`.', 'comment_created': datetime.datetime(2022, 7, 20, 20, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 926010192, 'comment_body': 'Yes, I agree. It’s one of the few places where I actually agree that multiple trailing closures might actually be nice.', 'comment_created': datetime.datetime(2022, 7, 20, 20, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 930001900, 'comment_body': ""IIUC (re)assigning variables isn't allowed in result builders, so we would have to use ternaries anyway (or factor out some of this into a separate function). I agree though, the builder is nested quite deeply, I think if we could make `VariableDecl` more convenient to initialize and ideally also make the `TupleExprElement` wrappers implicit, we could get rid of a quite a few levels of nesting."", 'comment_created': datetime.datetime(2022, 7, 26, 13, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 930042693, 'comment_body': 'AFAIK it’s totally fine to declare variables inside result builders.', 'comment_created': datetime.datetime(2022, 7, 26, 14, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 930044025, 'comment_body': ""Yes, but reassigning (even if it's initializing a constant) yields errors in my testing. Sorry, I probably worded that confusingly."", 'comment_created': datetime.datetime(2022, 7, 26, 14, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 930053551, 'comment_body': '-> #518 ', 'comment_created': datetime.datetime(2022, 7, 26, 14, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 931132656, 'comment_body': '-> #523 ', 'comment_created': datetime.datetime(2022, 7, 27, 14, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 931174909, 'comment_body': '-> #524', 'comment_created': datetime.datetime(2022, 7, 27, 15, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 931228016, 'comment_body': '-> #525\r\n\r\nThis should get us the `OptionalBindingCondition` -> `ConditionElement` -> `ConditionElementList` conformance path. The `Array` conformance already exists AFAICT.', 'comment_created': datetime.datetime(2022, 7, 27, 15, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 932821131, 'comment_body': 'Moving the discussion to #528.', 'comment_created': datetime.datetime(2022, 7, 29, 2, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 933672865, 'comment_body': 'Something I thought about while working on this was whether we might want to remove this `if`-statement and replace e.g.\r\n\r\n```swift\r\npublic func buildTupleExprElementList(format: Format, leadingTrivia: Trivia? = nil) -> TupleExprElementListSyntax {\r\n  ...\r\n  if let leadingTrivia = leadingTrivia {\r\n    return result.withLeadingTrivia(leadingTrivia + (result.leadingTrivia ?? []))\r\n  } else {\r\n    return result\r\n  }\r\n}\r\n```\r\n\r\nwith\r\n\r\n```swift\r\npublic func buildTupleExprElementList(format: Format, leadingTrivia: Trivia? = nil) -> TupleExprElementListSyntax {\r\n  ...\r\n  let combinedLeadingTrivia = (leadingTrivia ?? []) + (result.leadingTrivia ?? [])\r\n  return result.withLeadingTrivia(combinedLeadingTrivia)\r\n}\r\n```\r\n\r\nAlthough we would deviate from the original translation there, the latter solution feels more consistent with `BuildableNodes` (which takes a similar approach) and would present a potential opportunity to unify these implementations by factoring the syntax generation into a utility function.', 'comment_created': datetime.datetime(2022, 7, 29, 23, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 934291115, 'comment_body': 'That sounds like a good idea to me 👍 ', 'comment_created': datetime.datetime(2022, 8, 1, 8, 52, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 936002370, 'comment_body': 'A question regarding style: I have passed `type`, `elementType` and `node` separately to these functions for now. Since `type` and `elementType` can easily be derived from just `node`, would it be better to just pass `node`?', 'comment_created': datetime.datetime(2022, 8, 2, 20, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 936275957, 'comment_body': 'I don’t think there’s a reason we need to pass `type` and `elementType` if they can be derived from `node` and there’s no reason you ever wanted to pass e.g. a different `type` than `node.type`.', 'comment_created': datetime.datetime(2022, 8, 3, 6, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 937290016, 'comment_body': ""Contrary to what I proposed in https://github.com/apple/swift-syntax/pull/506#discussion_r933672865, we may have to stick with the `if-let` for now since the variant I proposed has slightly different semantics (the `if`-version will only consider `result.leadingTrivia` if the function parameter `leadingTrivia` is set). This becomes relevant as otherwise `.addingSpacingAfterNewlinesIfNeeded()` will generate duplicate indentation in some cases.\r\n\r\nOne alternative solution would be to use optional chaining and only apply the spacing-after-newlines to the function argument `leadingTrivia`:\r\n\r\n```swift\r\nlet combinedLeadingTrivia = (leadingTrivia?.addingSpacingAfterNewlinesIfNeeded() ?? []) + (result.leadingTrivia ?? [])\r\nreturn combinedLeadingTrivia\r\n```\r\n\r\ninstead of the current\r\n\r\n```swift\r\nif let leadingTrivia = leadingTrivia {\r\n  return result.withLeadingTrivia((leadingTrivia + (result.leadingTrivia ?? [])).addingSpacingAfterNewlinesIfNeeded())\r\n} else {\r\n  return result\r\n}\r\n```\r\n\r\nWhile that seems to yield the correct result, I am not sure whether there are some edge cases where this logic breaks down (or whether we make too many assumptions about the kind of leading trivia here, e.g. whitespace trivia is 'nice' in the sense that it commutes and therefore may not exercise certain logic errors).\r\n\r\nFor this reason I decided not to make this change until we have figured that out. Any thoughts on this?"", 'comment_created': datetime.datetime(2022, 8, 4, 2, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 937415857, 'comment_body': '> One alternative solution would be to use optional chaining and only apply the spacing-after-newlines to the function argument leadingTrivia\r\n\r\nI think that sounds reasonable. I would suggest we discuss it in a separate PR.', 'comment_created': datetime.datetime(2022, 8, 4, 6, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 937417804, 'comment_body': 'The elements parameter needs to be indented so source editors will pick it up as a parameter documentation IIRC.\r\n\r\n```suggestion\r\n      ""///   - elements: A list of `\\(elementType.expressibleAs)`"",\r\n```', 'comment_created': datetime.datetime(2022, 8, 4, 7, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}]","[{'commit_sha': 'cb499360d5789ed002d0097b09645a4683c76fe7', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b2af6fc5e6e6d3e9d7ce4807b6446cc750cf638', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1006597781,Use `.spacedBinaryOperator` instead of `.identifier` in `StructTests`,A minor fix as proposed in https://github.com/apple/swift-syntax/pull/507#discussion_r926328756.,True,515,https://api.github.com/repos/swiftlang/swift-syntax/pulls/515,https://github.com/swiftlang/swift-syntax/pull/515,closed,2,2,1,1,1,0,0,0,[],2022-07-24 18:16:33+00:00,2022-07-24 20:00:25+00:00,6232.0,1:43:52,[],"[{'commit_sha': '73e390d1e3f749e8ab24b2ee610e6716d80b95bc', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1008613046,Add a convenience initializer for `IfStmt` (optionally taking a second trailing builder closure),"As proposed in https://github.com/apple/swift-syntax/pull/506#discussion_r925970287, this adds a new convenience initializer for `IfStmt` making both `if` and `if-else` statements nicely expressible using (multiple) trailing builder closures:

```swift
IfStmt(conditions: ...) {
  // if-body
}

IfStmt(conditions: ...) {
  // if-body
} elseBody: {
  // else-body
}
```",True,518,https://api.github.com/repos/swiftlang/swift-syntax/pulls/518,https://github.com/swiftlang/swift-syntax/pull/518,closed,73,0,2,2,2,3,0,0,[],2022-07-26 14:39:09+00:00,2022-07-26 18:03:47+00:00,12278.0,3:24:38,"[{'comment_id': 930131464, 'comment_body': 'I’m not sure if we have other types that take an optional parameter that’s expressible by a result builder but do you think it might be worth generalizing this case and putting it into the generated code?', 'comment_created': datetime.datetime(2022, 7, 26, 15, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 930164723, 'comment_body': ""That's an interesting question, I am not sure whether this would generalize well though. AFAIK Swift doesn't have many if-else-ish constructs with multiple blocks. Aside from that, I don't think we're actively discriminating against multiple closures currently: The else-body in `IfStmt` doesn't seem to be a `CodeBlock`, but a `Syntax`, which also is the reason why an initializer of this form isn't autogenerated (I am not entirely sure why this is the case since I can't think of a case where an `else` wouldn't be followed by a `CodeBlock`, but that is also the reason why we need to perform this wrapping explicitly in this convenience initializer)."", 'comment_created': datetime.datetime(2022, 7, 26, 16, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 930243030, 'comment_body': 'I see. Looking at `gyb_syntax_support`, the else body could also be an `IfStmt` to represent an `else if` clause. With that in mind, I think this PR makes perfect sense 👍 ', 'comment_created': datetime.datetime(2022, 7, 26, 17, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}]","[{'commit_sha': 'abfb866dc0b148c11b7bb0533c63cbe94f7c60bf', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c03c6296894648fcea07d371bb3d5a7b7ba0cb0', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1009737556,Support optional initializer expression in `VariableDecl` convenience inititializer,"As proposed in https://github.com/apple/swift-syntax/pull/506#discussion_r925966346, this is a small QoL change that extends the existing convenience initializer for `VariableDecl` to support optional initializer expressions (and also makes the type annotation optional):

```swift
// let x = y
VariableDecl(.let, name: ""x"", initializer: ""y"")

// var x: String = ""abc""
VariableDecl(
  .var,
  name: ""x"",
  type: ""String"",
  initializer: StringLiteralExpr(""abc"")
)
```",True,523,https://api.github.com/repos/swiftlang/swift-syntax/pulls/523,https://github.com/swiftlang/swift-syntax/pull/523,closed,18,10,2,1,1,0,0,0,[],2022-07-27 14:25:02+00:00,2022-07-27 15:39:24+00:00,4462.0,1:14:22,[],"[{'commit_sha': 'a35107dbd90c840cd2f31ddab2ae648e23230c8c', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1009779481,Add `ExpressibleAsExprBuildable: ExpressibleAsCodeBlockItem`,"Fixes https://github.com/apple/swift-syntax/pull/506#discussion_r925959964. This patch generalizes the current conformance of `ExpressibleAsFunctionCallExpr` to `ExpressibleAsCodeBlockItem` to arbitrary expressions, thereby removing the need to wrap expressions explicitly in `CodeBlockItem`s:

```swift
CodeBlock {
  FunctionCallExpr(""print"") { TupleExprElement(expression: StringLiteralExpr(""Hello world"")) }
  IntegerLiteralExpr(42)
  ""someIdentifier""
}
```",True,524,https://api.github.com/repos/swiftlang/swift-syntax/pulls/524,https://github.com/swiftlang/swift-syntax/pull/524,closed,27,10,4,1,1,0,0,0,[],2022-07-27 14:58:46+00:00,2022-07-27 16:05:46+00:00,4020.0,1:07:00,[],"[{'commit_sha': '05baf4c6b225758e031cfcd2d2b56916a408cc71', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1009831469,Make `OptionalBindingCondition` and `MatchingPatternCondition` expressible as `ConditionElement`,"As proposed in https://github.com/apple/swift-syntax/pull/506#discussion_r926007457, this conforms `ExpressibleAsOptionalBindingCondition` and `ExpressibleAsMatchingPatternCondition` to `ExpressibleAsConditionElement`, making it more convenient to express `if-let` and `if-case` statements with the DSL:

```swift
// if let x = y { ... }
IfStmt(
  conditions: OptionalBindingCondition(
    letOrVarKeyword: .let,
    pattern: ""x"",
    initializer: InitializerClause(value: ""y"")
  )
) { ... }

// if case .x = y { ... }
IfStmt(
  conditions: MatchingPatternCondition(
    pattern: ExpressionPattern(expression: MemberAccessExpr(name: ""x"")),
    initializer: InitializerClause(value: ""y"")
  )
) { ... }
```",True,525,https://api.github.com/repos/swiftlang/swift-syntax/pulls/525,https://github.com/swiftlang/swift-syntax/pull/525,closed,51,2,4,2,2,0,0,0,[],2022-07-27 15:44:11+00:00,2022-07-27 23:51:39+00:00,29248.0,8:07:28,[],"[{'commit_sha': '2d737218ea58c9c186138046f0fc4bbd603e78f9', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7262a3695871ae9fa7f50990ec6969d22fdd84c1', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1009871486,Make `ExprBuildable` expressible as `InitializerClause`,"This generalizes #523 slightly, letting the DSL accept expressions anywhere an `InitializerClause` is required (e.g. also in `OptionalBindingCondition` or `PatternBinding`):

```swift
// let x: String = ""abc""
OptionalBindingCondition(
  letOrVarKeyword: .let,
  pattern: ""x"",
  typeAnnotation: ""String"",
  initializer: StringLiteralExpr(""abc"") // <- no longer needs an explicit InitializerClause wrap
)
```",True,526,https://api.github.com/repos/swiftlang/swift-syntax/pulls/526,https://github.com/swiftlang/swift-syntax/pull/526,closed,29,24,6,3,1,0,0,0,[],2022-07-27 16:24:09+00:00,2022-07-27 21:27:21+00:00,18192.0,5:03:12,[],"[{'commit_sha': '434506babbbc14d88228c08053dd2ead92027a99', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec03e905b71b0f4207227caf1a9548654c01d1b0', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2c88a6c64eb94acbb6ace6d5cf57432c0195b7b', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1010095762,Make `SyntaxBuildableType` hashable,"This is a small change that implements `__hash__` for `SyntaxBuildableType` on the Python-side, thereby making it possible to use `SyntaxBuildableType` in sets and dictionaries as keys.

Since the type already implements a fieldwise `__eq__`, having a corresponding `__hash__` feels like a natural extension.

> Note that the Swift version of this type (in `SwiftSyntaxBuilderGeneration`) is also `Hashable`.",True,527,https://api.github.com/repos/swiftlang/swift-syntax/pulls/527,https://github.com/swiftlang/swift-syntax/pull/527,closed,3,0,1,1,1,0,0,0,[],2022-07-27 20:28:26+00:00,2022-07-27 22:10:37+00:00,6131.0,1:42:11,[],"[{'commit_sha': '6826d641436e543b82ea334995aaece778590817', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1011504445,Make `ExprList` initializable by result builder,"Since the `Array: ExpressibleAsExprList` conformance is [unlikely to be added](https://github.com/apple/swift-syntax/pull/528#issuecomment-1197399869) due to type system limitations, here is a small patch to make expression lists a bit more convenient to use by making them builder-initializable (currently only affects `SequenceExpr` and `YieldList`).

Using this we can shorten

```swift
SequenceExpr(elements: ExprList {
  ...
})
```

to

```swift
SequenceExpr {
  ...
}
```",True,530,https://api.github.com/repos/swiftlang/swift-syntax/pulls/530,https://github.com/swiftlang/swift-syntax/pull/530,closed,38,6,4,2,1,0,0,0,[],2022-07-29 03:14:21+00:00,2022-07-29 13:44:18+00:00,37797.0,10:29:57,[],"[{'commit_sha': '0e312a355b081acc270518aa6b88a81a89e1cb9b', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ef2cbb20f9f21451594ffcdf81ee98a4fe7673a', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1012409535,Update links in README,"A small oversight that I missed in #477 was to update the `Examples` link in the `README.md`, which now 404s. This PR fixes this and additionally makes the links relative (e.g. so they work on other branches and even locally).",True,532,https://api.github.com/repos/swiftlang/swift-syntax/pulls/532,https://github.com/swiftlang/swift-syntax/pull/532,closed,2,2,1,1,1,0,0,0,[],2022-07-29 22:48:10+00:00,2022-07-30 15:55:48+00:00,61658.0,17:07:38,[],"[{'commit_sha': '530e2af0524ccef9cde8d921d9aab48cf88747c0', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1013087327,Update SPM instructions to swift-tools-version 5.6,"Swift 5.6 deprecates `.package(name:url:_:)` in favor of `.package(url:exact:)` and requires dependencies to explicitly specify the package their dependencies come from. For details, see:

- https://github.com/apple/swift-package-manager/pull/3641
- https://github.com/apple/swift-package-manager/blob/main/CHANGELOG.md#swift-56

This patch updates the instructions in the README to match these updated conventions.",True,533,https://api.github.com/repos/swiftlang/swift-syntax/pulls/533,https://github.com/swiftlang/swift-syntax/pull/533,closed,5,3,1,1,1,0,0,0,[],2022-07-31 18:16:02+00:00,2022-08-01 10:37:17+00:00,58875.0,16:21:15,[],"[{'commit_sha': 'f866f0fd92a5befc1588475cda47867d43c18c0d', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1015581756,Add `leadingTrivia` parameter to the `VariableDecl` convenience initializer,A small addition to the `VariableDecl` convenience initializer adding an optional `leadingTrivia` parameter e.g. for adding doc comments to generated variable declarations.,True,540,https://api.github.com/repos/swiftlang/swift-syntax/pulls/540,https://github.com/swiftlang/swift-syntax/pull/540,closed,2,1,1,1,1,0,0,0,[],2022-08-02 20:42:50+00:00,2022-08-03 11:38:46+00:00,53756.0,14:55:56,[],"[{'commit_sha': '8e649c4555642f1cbadfc6b45060766f1a67c8bc', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1015624058,Migrate from strings to typed buildable nodes in `SyntaxBuildableWrappers`,"As proposed in https://github.com/apple/swift-syntax/pull/485#pullrequestreview-1033905250, this PR migrates the generated snippets of Swift code in `SyntaxBuildableType` and `SyntaxBuildableChild` to `ExprBuildable`s and `TypeBuildable`s.

This will pave the way for a future PR porting `BuildableNodes.swift.gyb` to `SwiftSyntaxBuilderGeneration`.",True,542,https://api.github.com/repos/swiftlang/swift-syntax/pulls/542,https://github.com/swiftlang/swift-syntax/pull/542,closed,149,93,7,3,2,8,0,0,[],2022-08-02 21:43:28+00:00,2022-08-04 02:41:09+00:00,104261.0,"1 day, 4:57:41","[{'comment_id': 936052304, 'comment_body': 'This property is replaced with `optionalWrapped(type:)` and `optionalChained(expr:)`, depending on whether a type or an expression is needed.', 'comment_created': datetime.datetime(2022, 8, 2, 21, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 936054790, 'comment_body': 'This PR factors out a few `...BaseName` properties (`expressibleAs`, `syntax`, `buildable`). These represent a non-optional type and will still be strings (as opposed to, e.g. `ExpressibleAsTypeBuildable`s) to make them easy to embed in string interpolations and across type and expression contexts.\r\n\r\nThus `.xyzBaseName` replaces the earlier `.nonOptional.xyz` idiom.', 'comment_created': datetime.datetime(2022, 8, 2, 21, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 936056270, 'comment_body': ""Previously we relied on these types being non-optional. Since optional types wouldn't make sense e.g. in conformance lists and dealing with strings is easier, we use the base names now in a few more places (this shouldn't change anything in the generated code)."", 'comment_created': datetime.datetime(2022, 8, 2, 21, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 936056878, 'comment_body': 'Same goes here (and for the other places where base names are now used).', 'comment_created': datetime.datetime(2022, 8, 2, 21, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 936282053, 'comment_body': 'I consider `ExpressibleAsExprBuildable` to be mostly used as an input type to functions, not really something that’s produced. Unless there’s a reason against it, I would prefer to return `ExprBuildable` here.', 'comment_created': datetime.datetime(2022, 8, 3, 6, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 936283733, 'comment_body': 'This produces a `nil` identifier instead of a `nil` keyword. It doesn’t really matter in terms of generated source code but it would still be good to use the `nil` keyword here IMO.', 'comment_created': datetime.datetime(2022, 8, 3, 6, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 936454768, 'comment_body': 'Should we do this for all output types, i.e. also all of the properties? (I have no strong preference either way, probably just slightly more verbose)', 'comment_created': datetime.datetime(2022, 8, 3, 9, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 936456088, 'comment_body': 'Ah, good catch, thanks! For some reason I thought `nil` was parsed as an identifier, like `self`.', 'comment_created': datetime.datetime(2022, 8, 3, 9, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}]","[{'commit_sha': '103a9f5cf4726b04e7fce06b9da102601c69839f', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab059e98c73722a3e66ac5aeffa179d6bc2aa078', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '966a50cc1927150d127a74d3f75c811e71baf93b', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1016978929,Fix documentation for syntax collections in `SwiftSyntaxBuilderGeneration`,"The Swift translation of`Node.documentation` (from [the Python version](https://github.com/apple/swift-syntax/blob/8875897090059060c6ea7846261187380b1f81dc/Sources/SwiftSyntaxBuilder/gyb_helpers/SyntaxBuildableWrappers.py#L102-L110)) generates empty documentations for syntax collections without a `documentation`, which previously generated the description of its element type as a fallback. This small patch fixes this slight mistranslation.",True,546,https://api.github.com/repos/swiftlang/swift-syntax/pulls/546,https://github.com/swiftlang/swift-syntax/pull/546,closed,5,7,1,1,1,0,0,0,[],2022-08-04 02:38:07+00:00,2022-08-04 09:33:48+00:00,24941.0,6:55:41,[],"[{'commit_sha': 'a4e5a8a6ca49490940ba133cc487e0207c855776', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1016991691,Make `TypeBuildable` expressible as `TypeAnnotation`,"This simultaneously simplifies and generalizes the conformance tree since arbitrary type buildables can now be used wherever a type annotation is needed (previously `ArrayType`, `SimpleTypeIdentifier` and a few others were hardcoded).",True,547,https://api.github.com/repos/swiftlang/swift-syntax/pulls/547,https://github.com/swiftlang/swift-syntax/pull/547,closed,12,32,4,2,2,0,0,0,[],2022-08-04 03:04:47+00:00,2022-08-04 14:19:52+00:00,40505.0,11:15:05,[],"[{'commit_sha': 'cb499360d5789ed002d0097b09645a4683c76fe7', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0efa39309dd19faa60e1173fb23b8a61ca46e86d', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1017502393,Fix `ArrayExpr` in `SyntaxBuildableChild`,This is a small patch that fixes the (currently broken) `SwiftSyntaxBuilderGeneration` due to the now missing `Array: ExpressibleAsArrayElementList` conformance (see https://github.com/apple/swift-syntax/pull/483#discussion_r937747605).,True,548,https://api.github.com/repos/swiftlang/swift-syntax/pulls/548,https://github.com/swiftlang/swift-syntax/pull/548,closed,1,1,1,1,1,0,0,0,[],2022-08-04 13:02:54+00:00,2022-08-04 14:18:33+00:00,4539.0,1:15:39,[],"[{'commit_sha': 'cb499360d5789ed002d0097b09645a4683c76fe7', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1017663674,Use the builder-based `ParameterClause` initializer where possible,This looks both prettier and no longer requires us to worry about trailing commas thanks to #454.,True,551,https://api.github.com/repos/swiftlang/swift-syntax/pulls/551,https://github.com/swiftlang/swift-syntax/pull/551,closed,36,41,5,1,1,0,0,0,[],2022-08-04 15:00:55+00:00,2022-08-04 17:15:50+00:00,8095.0,2:14:55,[],"[{'commit_sha': '8e7dc58f6380a24243855e28c663e2463278372d', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1017693019,Use `NilLiteralExpr` in `BuildableCollectionNodes`,"A small patch that uses `NilLiteralExpr` in`BuildableCollectionNodes` instead of generating `nil` as an identifier.

One minor thing that we might want to figure out is why `nil` tokens generate a trailing space unlike identifier tokens.",True,552,https://api.github.com/repos/swiftlang/swift-syntax/pulls/552,https://github.com/swiftlang/swift-syntax/pull/552,closed,1,1,1,1,3,2,0,0,[],2022-08-04 15:20:03+00:00,2022-08-12 16:51:51+00:00,696708.0,"8 days, 1:31:48","[{'comment_id': 938416609, 'comment_body': ""Should it be just a keyword? \r\n```suggestion\r\n                    : SyntaxFactory.makeNilKeyword(trailingTrivia: [])\r\n```\r\n\r\nI'd like to get rid of default trailing space after https://github.com/apple/swift/pull/60204 is merged "", 'comment_created': datetime.datetime(2022, 8, 5, 3, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'evnik', 'type': 'User'}, {'comment_id': 938752289, 'comment_body': 'Not sure, a token syntax can be converted [to identifiers and binary operators](https://github.com/apple/swift-syntax/blob/2380374d1ed52d89674adad21d98b8dd1d1be14c/Sources/SwiftSyntaxBuilder/gyb_helpers/ExpressibleAsConformances.py#L41), neither of which seem to be correct in this case.\r\n\r\nSince the expression is a nil literal, `NilLiteralExpr` should be the right way to spell it in `SwiftSyntaxBuilder` too IMO', 'comment_created': datetime.datetime(2022, 8, 5, 12, 13, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}]","[{'commit_sha': '6c1fedbd6ce7eb57ba4bfa819d1aebcf73c7a2df', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1017715926,Add `Child.isGarbageNodes`,This PR ports [`Child.is_garbage_nodes`](https://github.com/apple/swift/blob/df2d938604ca19427aeed52d741674013403e645/utils/gyb_syntax_support/Child.py#L87-L88) to Swift as needed to port `BuildableNodes.swift.gyb` to `SwiftSyntaxBuilderGeneration`.,True,553,https://api.github.com/repos/swiftlang/swift-syntax/pulls/553,https://github.com/swiftlang/swift-syntax/pull/553,closed,5,0,1,1,1,0,0,0,[],2022-08-04 15:33:49+00:00,2022-08-04 16:52:34+00:00,4725.0,1:18:45,[],"[{'commit_sha': '4f12be82063501525ce2daa8d9891d391d73337a', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1017817376,Generate `BuildableNodes` with `SwiftSyntaxBuilderGeneration`,"This PR ports the currently gyb-generated `BuildableNodes` to `SwiftSyntaxBuilder`'s DSL as part of the ongoing effort to bootstrap `SwiftSyntaxBuilder` with `SwiftSyntaxBuilderGeneration`.

Currently blocked on

- #571 
- #574 
- #575 
- #576 

To do:

- [x] Generate `BuildableNodes` using `SwiftSyntaxBuilderGeneration`
- [x] Remove the current gyb-generation (and its associated exclude from the `Package.swift`)",True,555,https://api.github.com/repos/swiftlang/swift-syntax/pulls/555,https://github.com/swiftlang/swift-syntax/pull/555,closed,3589,9923,10,4,2,5,0,0,[],2022-08-04 17:07:43+00:00,2022-08-16 16:09:41+00:00,1033318.0,"11 days, 23:01:58","[{'comment_id': 938052868, 'comment_body': 'This PR factors out the `create...` functions generated for the `ExpressibleAs...` conformances. This is particularly nice since we can share a lot of logic between `BuildableNodes` and `BuildableCollectionNodes`, including this lengthy doc comment that explains how the function disambiguates the implementation.', 'comment_created': datetime.datetime(2022, 8, 4, 17, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 938053565, 'comment_body': 'As mentioned above, we need to uncomment this once #549 is fixed.', 'comment_created': datetime.datetime(2022, 8, 4, 17, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 946443811, 'comment_body': 'Is there any specific reason why we need the `children` variable and can’t just use `node.children` below?', 'comment_created': datetime.datetime(2022, 8, 16, 7, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 946445363, 'comment_body': 'Nitpick: Since the leading trivia is displayed before the first node, what do you think about moving it in front of the children variables?', 'comment_created': datetime.datetime(2022, 8, 16, 7, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 946450710, 'comment_body': 'Again, why do we need the `children` variable?', 'comment_created': datetime.datetime(2022, 8, 16, 7, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}]","[{'commit_sha': '17f208bbef09c7a696f3741846024ddca6ba80f1', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f17ab1e1010b3ec6f7d23b5300555b551d8ef7e8', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5339755127f21876b332c39182fa0566907586a', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e16cb8b7546616fd8c627d2b466a068479af3417', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1023384280,Port garbage node generation to `SwiftSyntaxBuilderGeneration`'s `Node`,This ports the [new garbage node generation](https://github.com/apple/swift/blob/b0fb7c54b2c5159be5f23daeec277f0deded9be3/utils/gyb_syntax_support/Node.py#L27-L47) from `gyb_syntax_support` to the Swift equivalent in `SwiftSyntaxBuilderGeneration` in preparation for #555.,True,571,https://api.github.com/repos/swiftlang/swift-syntax/pulls/571,https://github.com/swiftlang/swift-syntax/pull/571,closed,27,1,1,1,2,2,0,0,[],2022-08-11 02:57:39+00:00,2022-08-11 21:03:14+00:00,65135.0,18:05:35,"[{'comment_id': 943327040, 'comment_body': '`collectionElementName` should be the same as the parameter passed to `name` but right now it’s the node’s name. ', 'comment_created': datetime.datetime(2022, 8, 11, 10, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 943622830, 'comment_body': 'Good catch, thanks!', 'comment_created': datetime.datetime(2022, 8, 11, 15, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}]","[{'commit_sha': '323e54e0f33f66492a170d99b9f07a84f2e334c6', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1024019908,No longer require trailing space after expression-like keywords,Companion PR to apple/swift#60502.,True,573,https://api.github.com/repos/swiftlang/swift-syntax/pulls/573,https://github.com/swiftlang/swift-syntax/pull/573,closed,119,119,6,1,6,0,0,0,[],2022-08-11 15:34:11+00:00,2022-08-12 02:00:27+00:00,37576.0,10:26:16,[],"[{'commit_sha': '23c6e1a15997dd96fbb4ab56ddaef4cd21b6d85c', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1024094127,Factor out `resultBuilderBaseName`,A small change in preparation for #555.,True,574,https://api.github.com/repos/swiftlang/swift-syntax/pulls/574,https://github.com/swiftlang/swift-syntax/pull/574,closed,7,1,1,1,1,0,0,0,[],2022-08-11 16:45:55+00:00,2022-08-11 21:04:08+00:00,15493.0,4:18:13,[],"[{'commit_sha': 'dc8be218cad09e98af8f49948044f82eca2395f1', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1024103544,Improve assert statement generation and fix token choices,"In preparation for #555, this patch migrates `generateAssertStmtTextChoices` to return an expr node instead of a string (as a small follow-up to #542). Additionally, it adds a utility function for escaping string literals (to address #549) and a function for generating force-unwraps based on a type's optionality.",True,575,https://api.github.com/repos/swiftlang/swift-syntax/pulls/575,https://github.com/swiftlang/swift-syntax/pull/575,closed,1344,326,13,3,2,3,0,0,[],2022-08-11 16:54:45+00:00,2022-08-12 17:00:05+00:00,86720.0,"1 day, 0:05:20","[{'comment_id': 943716344, 'comment_body': 'This fixes a bug where `self.tokenChoices` was always empty since the `tokenChoices` do not have the `Token` suffix.', 'comment_created': datetime.datetime(2022, 8, 11, 16, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 943941980, 'comment_body': 'What about naming this `forceUnwrapIfNeeded`? At the moment this sounds like it always force-unwraps.', 'comment_created': datetime.datetime(2022, 8, 11, 21, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 943943199, 'comment_body': 'I think if we used a raw string literal (with `#""` and `""#` as delimiters), I think we wouldn’t need to escape the text.', 'comment_created': datetime.datetime(2022, 8, 11, 21, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}]","[{'commit_sha': '79fe2ba474af41b2ba784690b6efa290af358109', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1161f10680974a226186503ef796243095a31b3', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebfa2af24dafa33c8e2e53beef7928cafc64157c', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1024120044,Add utility property for enclosing a string in backticks,A small convenience property in preparation of #555.,True,576,https://api.github.com/repos/swiftlang/swift-syntax/pulls/576,https://github.com/swiftlang/swift-syntax/pull/576,closed,4,3,2,1,4,5,0,0,[],2022-08-11 17:14:49+00:00,2022-08-12 11:03:10+00:00,64101.0,17:48:21,"[{'comment_id': 943939566, 'comment_body': 'Why do we need ``replacingOccurrences(of: ""`"", with: """")``? Is `token.name` sometimes already backticked?', 'comment_created': datetime.datetime(2022, 8, 11, 21, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 943941386, 'comment_body': ""I don't think so, my thinking was to make `.backticked` idempotent. But yeah, it would probably be simpler to just remove it."", 'comment_created': datetime.datetime(2022, 8, 11, 21, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 943950127, 'comment_body': 'I think just surrounding the text with `` ` `` is the most intuitive behavior, in particular if we don’t need idempotency.', 'comment_created': datetime.datetime(2022, 8, 11, 21, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 943957846, 'comment_body': 'Could you migrate this to not use `SyntaxFactory`, which I recently deprecated. I think this should be something like\r\n```suggestion\r\n          FunctionCallExpr(MemberAccessExpr(base: ""TokenSyntax"", name: token.name)) {\r\n```', 'comment_created': datetime.datetime(2022, 8, 11, 21, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 943961021, 'comment_body': ""Ah whoops, looks like I accidentally picked the wrong side when resolving the conflict. The generated `Tokens.swift` shouldn't have changed at all."", 'comment_created': datetime.datetime(2022, 8, 11, 21, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}]","[{'commit_sha': '15d849646371746826c4110d914de0df608f23a4', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1024356125,Add convenience initializer for raw string literals,"This patch adds a small convenience initializer for raw string literals (in preparation of #575) and extends the existing convenience initializer to take custom delimiters.

```swift
StringLiteralExpr(raw: ""abc"")

// now generates

#""abc""#
```",True,579,https://api.github.com/repos/swiftlang/swift-syntax/pulls/579,https://github.com/swiftlang/swift-syntax/pull/579,closed,53,4,2,1,2,3,0,0,[],2022-08-11 21:45:21+00:00,2022-08-12 14:48:29+00:00,61388.0,17:03:08,"[{'comment_id': 944123625, 'comment_body': 'What do you think about adding an additional parameter that describes how many `#` should be added and defaulting it to 1? That way you could create a string literal like `##"" The raw string delimiter is #"". ""##`', 'comment_created': datetime.datetime(2022, 8, 12, 5, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 944358348, 'comment_body': 'Sounds good. Perhaps we could take it even further and scan the string for the longest sequence of consecutive hashes + adjacent quote and do that automatically. Or would that be too much magic?', 'comment_created': datetime.datetime(2022, 8, 12, 11, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 944371516, 'comment_body': 'Sure, you might also want to check for the longest sequence of `####\\(` which can also be escaped using raw strings.', 'comment_created': datetime.datetime(2022, 8, 12, 11, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}]","[{'commit_sha': 'fa136a996b660239f016cd8f7acba7245fc5c134', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1025044567,Use explicit return type in Node initializer's flatMap,This fixes a build issue with the latest Swift release since the improved multi-statement closure type inference is only available on recent nightly toolchains.,True,586,https://api.github.com/repos/swiftlang/swift-syntax/pulls/586,https://github.com/swiftlang/swift-syntax/pull/586,closed,1,1,1,1,1,0,0,0,[],2022-08-12 14:59:54+00:00,2022-08-12 16:52:18+00:00,6744.0,1:52:24,[],"[{'commit_sha': 'bb91878644aec7aa6abce5b83046bd88baa28e7d', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1025048172,Generate trailing newlines in `SwiftSyntaxBuilderGeneration`,"This is a small patch that generates trailing newlines in files generated by `SwiftSyntaxBuilderGeneration`, both to adhere to the Unix convention and to fix an issue with editors that automatically insert trailing newlines and thus cause these files to change when opening them.",True,587,https://api.github.com/repos/swiftlang/swift-syntax/pulls/587,https://github.com/swiftlang/swift-syntax/pull/587,closed,7,7,6,1,1,0,0,0,[],2022-08-12 15:03:46+00:00,2022-08-12 16:52:47+00:00,6541.0,1:49:01,[],"[{'commit_sha': 'b28977f705b3c02ac650de68df33a3e5427a2e6f', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1025200862,Rename `SwiftSyntaxBuilderGeneration` to `generate-swift-syntax-builder`,"As suggested in https://github.com/apple/swift-syntax/pull/580#issuecomment-1213174062. This follows the convention that executable targets are named in kebab-case (e.g. like this repo's `lit-test-helper`, SourceKit-LSP's `sourcekit-lsp`, SwiftFormat's `swift-format`, ...).",True,588,https://api.github.com/repos/swiftlang/swift-syntax/pulls/588,https://github.com/swiftlang/swift-syntax/pull/588,closed,16,16,60,1,4,0,0,0,[],2022-08-12 17:16:57+00:00,2022-08-14 11:05:48+00:00,150531.0,"1 day, 17:48:51",[],"[{'commit_sha': '06b726e4010ac2ba76a867e462595d75963da337', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1031451509,Add a convenience initializer for `TernaryExpr`,"Generating ternary expressions using `SwiftSyntaxBuilder` with correct formatting is quite verbose currently:

```swift
TernaryExpr(
  conditionExpression: ...,
  questionMark: .infixQuestionMarkToken(leadingTrivia: .space, trailingTrivia: .space),
  firstChoice: ...,
  colonMark: .colonToken(leadingTrivia: .space),
  secondChoice: ...
)
```

This PR adds a convenience initializer that makes constructed `TernaryExpr`s in Swift almost as terse as their generated equivalents:

```swift
TernaryExpr(
  if: ...,
  then: ...,
  else: ...
)
```

I've used the `if-then-else` terminology for the labels since it is short, clear and easily disambiguable from the generated initializer, but feel free to suggest alternative spellings.",True,610,https://api.github.com/repos/swiftlang/swift-syntax/pulls/610,https://github.com/swiftlang/swift-syntax/pull/610,closed,47,5,3,2,1,0,0,0,[],2022-08-19 18:11:56+00:00,2022-08-20 13:38:59+00:00,70023.0,19:27:03,[],"[{'commit_sha': '5736dff87515970e32590dc05aee3944d2249a67', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84aa2a88c984e6c9b8a053d3f31b029142754459', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1031468464,Generate `Format` using `SwiftSyntaxBuilder`,"In preparation for some a small refactor to the formatting/leading trivia generation, this PR ports `Format.swift` to a file generated by SwiftSyntaxBuilder's DSL.",True,611,https://api.github.com/repos/swiftlang/swift-syntax/pulls/611,https://github.com/swiftlang/swift-syntax/pull/611,closed,113,7,4,2,3,0,0,0,[],2022-08-19 18:35:21+00:00,2022-08-21 15:43:50+00:00,162509.0,"1 day, 21:08:29",[],"[{'commit_sha': '9312aa374450f1e33e462bfaaf83b1a55d1ec719', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36fb63bee365d39b48e71ad9b82ef290696658a7', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1031487838,Add `+=` operator for `Trivia`,A small convenience that makes it more convenient to construct `Trivia` imperatively.,True,612,https://api.github.com/repos/swiftlang/swift-syntax/pulls/612,https://github.com/swiftlang/swift-syntax/pull/612,closed,28,6,3,1,3,3,0,0,[],2022-08-19 19:03:21+00:00,2022-08-23 09:59:01+00:00,312940.0,"3 days, 14:55:40","[{'comment_id': 950688182, 'comment_body': 'I have a vague memory that from a type checking performance perspective, it’s better to implement these as static methods inside the `Trivia` type itself.\r\n\r\n```suggestion\r\nextension Trivia {\r\n  /// Concatenates two collections of `Trivia` into the left-hand side.\r\n  public static func +=(lhs: inout Trivia, rhs: Trivia) {\r\n    lhs = lhs + rhs\r\n  }\r\n}\r\n\r\n```', 'comment_created': datetime.datetime(2022, 8, 20, 12, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 950696680, 'comment_body': 'Does this apply to the `+` operator too?', 'comment_created': datetime.datetime(2022, 8, 20, 13, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 950736874, 'comment_body': 'It used to, but we removed the designated types optimization that supported it. Now it _should_ mostly a hygiene thing, and from that perspective I agree with Alex that this should be in extension context.', 'comment_created': datetime.datetime(2022, 8, 20, 20, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'CodaFi', 'type': 'User'}]","[{'commit_sha': '3b1d6c86c485aad3628be73e78839d492cc807fc', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1031528327,Add convenience initializer for computed properties,"This PR adds a new convenience initializer for computed properties, making them as convenient to create as `FunctionDecl`s.",True,613,https://api.github.com/repos/swiftlang/swift-syntax/pulls/613,https://github.com/swiftlang/swift-syntax/pull/613,closed,35,0,2,1,1,0,0,0,[],2022-08-19 20:05:15+00:00,2022-08-20 13:37:42+00:00,63147.0,17:32:27,[],"[{'commit_sha': '23a01064010e0c5c1ddbc2e8438980f5c99ead8d', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1031788436,Add modifiers parameter to VariableDecl convenience init,A small convenience that I've extracted from #611.,True,615,https://api.github.com/repos/swiftlang/swift-syntax/pulls/615,https://github.com/swiftlang/swift-syntax/pull/615,closed,2,1,1,1,1,0,0,0,[],2022-08-20 13:47:01+00:00,2022-08-21 10:38:19+00:00,75078.0,20:51:18,[],"[{'commit_sha': '09aab8ce1469ea8ac905ec58aad307f057dc9ef0', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1036865261,Skip leading trivia generation if empty in BuildableNodes,"Although we [discussed this earlier](https://github.com/apple/swift-syntax/pull/475#discussion_r907132139), I would like to revisit the optimization to skip leading trivia generation on buildable nodes in `SwiftSyntaxBuilder` when empty, since it actually does have a noticeable performance impact on `generate-swift-syntax-builder`: The optimization cuts down generation time from ~13 seconds to ~7 seconds on my machine, nearly a 50% improvement in performance! Profiling the executable with Instruments reveals that this indeed seems to be the issue, the heaviest stack trace points to `withLeadingTrivia`.

The improvement in performance with this patch becomes especially noticeable during development of generated files where shorter feedback cycles greatly improve the workflow.

(This change should be mostly orthogonal to the upcoming formatting-related changes)",True,639,https://api.github.com/repos/swiftlang/swift-syntax/pulls/639,https://github.com/swiftlang/swift-syntax/pull/639,closed,1052,214,2,1,2,1,0,0,[],2022-08-25 14:44:32+00:00,2022-08-25 18:06:18+00:00,12106.0,3:21:46,"[{'comment_id': 955063252, 'comment_body': ""One idea might be to move this logic into `withLeadingTrivia` itself (and similarly into `withTrailingTrivia`). However since we cannot assume that the syntax doesn't already have trivia (like in this case) the check would likely get more expensive, so I am not sure whether the more general solution would be worth it there."", 'comment_created': datetime.datetime(2022, 8, 25, 14, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}]","[{'commit_sha': '92ab8e4fe7bc55020dd3c1f742c9450d9843a568', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1036990395,Add convenience initializer for `PrefixOperatorExpr`,"...to make it slightly more convenient to initialize these, e.g. in if-conditions.",True,640,https://api.github.com/repos/swiftlang/swift-syntax/pulls/640,https://github.com/swiftlang/swift-syntax/pull/640,closed,52,0,2,1,1,0,0,0,[],2022-08-25 16:20:44+00:00,2022-08-25 21:58:43+00:00,20279.0,5:37:59,[],"[{'commit_sha': '55c33c1240d8df9878df7f6bdb6f5b981b2ce889', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1038514530,Add attributes to VariableDecl convenience initializers,A small patch to make attributed declarations such as `@Test var x: Int` easier to generate (this could also be interesting for users who want to generate uses of property wrappers).,True,644,https://api.github.com/repos/swiftlang/swift-syntax/pulls/644,https://github.com/swiftlang/swift-syntax/pull/644,closed,43,4,2,1,3,0,0,0,[],2022-08-27 01:16:22+00:00,2022-08-28 00:41:56+00:00,84334.0,23:25:34,[],"[{'commit_sha': '72f2e39db0a4acc82ed4967bd40ce3345e74f8ca', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1038538779,Factor out all `leadingTrivia` logic into `Format`,"This PR moves the entire `leadingTrivia` logic into `Format`, thereby allowing for a cleaner separation of concerns: The `build...` methods in `BuildableNodes`/`BuildableCollectionNodes` only generate the syntax, the `format._format` methods then deal with indentation.

In particular, the `leadingTrivia` parameter that was passed alongside `format: Format` is no longer needed. Since many test cases, however, rely on this ad-hoc leading trivia generation, I have migrated as many tests as possible to the `leadingTrivia`-as-field. For smaller nodes, such as literals, which are heavily sugared through their respective convenience initializers, this would become too verbose, therefore I have removed the unexpected trivia node in those cases. Feel free to discuss this though!

Some notes:

- The use of `@_spi(Testing)` for currently public indentation methods/properties on `Format` will come in a future PR since it depends on #644 and is mostly orthogonal to the changes in this PR.
- The rationale for not passing the leading trivia back to the `build...` methods is that this becomes complicated for children that may or may not require leading newlines and due to some other complications such as not being able to switch over the parent's `SyntaxEnum` before constructing its syntax (using `SyntaxKind` would have been an option, but would have required us to use the low-level SPI). In general, I think the overloaded `_format` methods are the more elegant solution here, also since we don't add a lot of unneeded empty trivias, but I would be curious to hear your thoughts on this!
- Performance is pretty much exactly as before, I measure 7-8 seconds of generation time both on this branch and `main` on debug builds of `generate-swift-syntax-builder`.
- The most interesting diff in this PR is probably [Sources/SwiftSyntaxBuilder/generated/Format.swift](https://github.com/apple/swift-syntax/pull/645/files#diff-3d3182fcf9c55cb4f979b4f719269afab620b92591544215460135c81b1f5d63).",True,645,https://api.github.com/repos/swiftlang/swift-syntax/pulls/645,https://github.com/swiftlang/swift-syntax/pull/645,closed,3815,2609,33,5,2,1,0,0,[],2022-08-27 02:41:25+00:00,2022-08-28 09:59:51+00:00,112706.0,"1 day, 7:18:26","[{'comment_id': 956697989, 'comment_body': 'Actually, I don’t know why we always add the `␣` as leading trivia here. I think it’s something that was done in one of the first test cases and then just carried over to all the other tests. I would be totally fine to remove `␣` from all test cases because it’s rather weird anyway. I’m fine to keep it as-is in this PR though.', 'comment_created': datetime.datetime(2022, 8, 28, 9, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}]","[{'commit_sha': '90cc4e8b33de866458b4bb8370c2d6ce903196a4', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f3e798f8465971502d361c6bb21f8b3a10e0268', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4b9b511e411e34970d2931e5e90dc8393d627ef', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7784d6c27f0c65d29992aea36126b591446c44af', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d832c78cde11445d28029f83c31c998523e8360', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1039520992,Add convenience initializer for `CustomAttribute`,"This makes `CustomAttribute`s constructible in a way similar to `FunctionCallExpr`s:

```swift
// @Test
CustomAttribute(""Test"")

// @Test()
CustomAttribute(""Test"") {}

// @Test(a, label: b)
CustomAttribute(""Test"") {
  TupleExprElement(expression: ""a"")
  TupleExprElement(label: ""label"", expression: ""b"")
}
```

I have placed the convenience initializer under `Sources/SwiftSyntaxBuilder/ConvenienceInitializers` already to be consistent with #647.",True,650,https://api.github.com/repos/swiftlang/swift-syntax/pulls/650,https://github.com/swiftlang/swift-syntax/pull/650,closed,107,22,3,2,2,3,0,0,[],2022-08-29 11:05:18+00:00,2022-08-30 15:41:39+00:00,102981.0,"1 day, 4:36:21","[{'comment_id': 957185946, 'comment_body': 'Hmm, not sure I like the `.map` here. Personally I would make `argumentList != nil ? .leftParent : nil` etc', 'comment_created': datetime.datetime(2022, 8, 29, 11, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kimdv', 'type': 'User'}, {'comment_id': 957186838, 'comment_body': 'If you add \r\n```\r\n``FunctionCallExpr``\r\n```\r\n\r\ninstead of \r\n\r\n```\r\n`FunctionCallExpr`\r\n```\r\n\r\nthen it will link automatically in DocC 👏', 'comment_created': datetime.datetime(2022, 8, 29, 11, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kimdv', 'type': 'User'}, {'comment_id': 957189882, 'comment_body': ""I like omitting explicit `nil`s where possible, perhaps that is the Haskell programmer in me 😄 If mapping the optional is too obscure, I'd be fine with using a ternary too though."", 'comment_created': datetime.datetime(2022, 8, 29, 11, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}]","[{'commit_sha': 'a5cd841abfa43f053da5d979da194e55d80bf50c', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3e14adfa4b0c46de59e3fc0ac9c89438c40f280', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1041956516,Make buildable node fields mutable and fix `withTrailingComma`,"`withTrailingComma` currently discards the value for `leadingTrivia`. While adding the parameter would be an option, this PR refactors the function to use the
```swift
var result = self
result.field = value
return result
```
pattern. This also has the advantage that new optional fields cannot accidentally be forgotten.

To achieve this, the fields have to be mutable. Since we are dealing with value types with no further invariants, this should hopefully not be an issue though.",True,666,https://api.github.com/repos/swiftlang/swift-syntax/pulls/666,https://github.com/swiftlang/swift-syntax/pull/666,closed,1625,1586,2,1,1,0,0,0,[],2022-08-31 06:13:45+00:00,2022-08-31 07:51:41+00:00,5876.0,1:37:56,[],"[{'commit_sha': '36ce0fc95b0a5459ce8298daf8a4026df12ee22e', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1042027612,"Add trailing trivia and `with{Leading,Trailing}Trivia` to buildable nodes","Based on #666.

This PR adds a `trailingTrivia` field to buildable `SwiftSyntaxBuilder` nodes, along with `withLeadingTrivia`/`withTrailingTrivia` functions.

To do:
- [x] Add `trailingTrivia` to buildable nodes
- [x] Add `leadingTrivia` and `trailingTrivia` to buildable collection nodes
- [x] Add `withLeadingTrivia` and `withTrailingTrivia`
- [x] Add unit tests

For a future PR:

- Add protocol(s) for `withLeadingTrivia`/`withTrailingTrivia` (e.g. `HasLeadingTrivia`/`HasTrailingTrivia` or just a combined `HasTrivia`) that buildable nodes, collection nodes and e.g. tokens could conform to",True,667,https://api.github.com/repos/swiftlang/swift-syntax/pulls/667,https://github.com/swiftlang/swift-syntax/pull/667,closed,4616,518,7,4,8,0,0,0,[],2022-08-31 07:26:58+00:00,2022-09-02 08:23:42+00:00,176204.0,"2 days, 0:56:44",[],"[{'commit_sha': '5aad9d6212f48665df166abfeec83840e91fb8ff', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c7d265c7355de979377eb7147241b1bdf0cec58', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7ca8ee0cb2660e90b6187a3b1fadcfb591c14da', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63a7aced19f3f89bb4b0470580bee413919d0119', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1044101880,Exclude `gyb_syntax_support` from Swift target,"Temporary Python compilation artifacts like `*.pyc` files tend to confuse the SPM build tool (i.e. cause a warning). Therefore this patch excludes `gyb_syntax_support` from `generate-swift-syntax-builder`, like `gyb_helpers`.",True,685,https://api.github.com/repos/swiftlang/swift-syntax/pulls/685,https://github.com/swiftlang/swift-syntax/pull/685,closed,1,0,1,1,2,0,0,0,[],2022-09-01 18:47:01+00:00,2022-09-01 20:57:24+00:00,7823.0,2:10:23,[],"[{'commit_sha': 'c3645a9504aa7a5fafd5988d6d2341da77be2ac2', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1044768406,Add trailing space to attributes in `VariableDecl`,"A small fix for the generated trivia when using attributes and modifiers together in `VariableDecl`, as detailed in https://github.com/apple/swift-syntax/pull/667#issuecomment-1232598906.",True,691,https://api.github.com/repos/swiftlang/swift-syntax/pulls/691,https://github.com/swiftlang/swift-syntax/pull/691,closed,18,4,2,1,1,0,0,0,[],2022-09-02 10:46:29+00:00,2022-09-02 13:10:17+00:00,8628.0,2:23:48,[],"[{'commit_sha': 'ef4af42a4964b734fcd2a1494c28bef8e6a0aa65', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1044786476,Use `swift-argument-parser` in `generate-swift-syntax-builder`,"This branch updates `generate-swift-syntax-builder` to use `swift-argument-parser` instead of ad-hoc parsing `CommandLine.arguments`.

Since the package already depends on `swift-argument-parser` for `swift-parser-test` I would not expect the introduction of this new target dependency to be an issue, but perhaps still worth checking whether there are any unexpected bootstrapping consequences to this.",True,692,https://api.github.com/repos/swiftlang/swift-syntax/pulls/692,https://github.com/swiftlang/swift-syntax/pull/692,closed,30,22,2,2,2,0,0,0,[],2022-09-02 11:06:53+00:00,2022-09-02 17:22:47+00:00,22554.0,6:15:54,[],"[{'commit_sha': '34551a961c4d1cc60b2742094561ef3c2c2b4608', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1d947bd5acd29d52a4fe2564814f9c1fd6780aa', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1045145437,Use `@_spi(Testing)` for `Format.indentTrivia`,...to provide slightly stronger encapsulation.,True,695,https://api.github.com/repos/swiftlang/swift-syntax/pulls/695,https://github.com/swiftlang/swift-syntax/pull/695,closed,9,8,3,1,2,0,0,0,[],2022-09-02 17:34:41+00:00,2022-09-05 09:54:58+00:00,231617.0,"2 days, 16:20:17",[],"[{'commit_sha': '3016a4e5f522b6435fe8e3ad6fbd2b0f1c35996f', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
1046653259,Remove underscore from `_format` and make it internal,As suggested in https://github.com/apple/swift-syntax/pull/695#pullrequestreview-1095997368.,True,708,https://api.github.com/repos/swiftlang/swift-syntax/pulls/708,https://github.com/swiftlang/swift-syntax/pull/708,closed,514,517,8,1,1,0,0,0,[],2022-09-05 16:14:03+00:00,2022-09-06 11:02:04+00:00,67681.0,18:48:01,[],"[{'commit_sha': '6be33420874cdf98e0fded3accf9245b67e82a21', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
966941748,[5.7] Migrate to upstream inlay hints,"* **Explanation**: Inlay hints have been upstreamed to the Language Server Protocol and this PR migrates SourceKit-LSP's custom request to the standard LSP request. Besides being more widely supported, standard inlay hints have the advantage of being very customizable, e.g. VSCode can be configured to only show the hints while a certain keybinding is held.
* **Scope**: Only affects clients that send inlay hint requests, in particular SourceKit-LSP's non-standard requests.
* **Risk**: Clients using the previous non-standard inlay hints will no longer be able to show these, the standard LSP hints should be preferable in any case though and are being supported by recent versions of `vscode-languageclient` already.
* **Testing**: Experimentation with recent versions of VSCode and `vscode-swift` (see swift-server/vscode-swift#198)
* **Issue**: rdar://95141875
* **Reviewer**: @ahoppen on #465",True,570,https://api.github.com/repos/swiftlang/sourcekit-lsp/pulls/570,https://github.com/swiftlang/sourcekit-lsp/pull/570,closed,299,85,13,1,1,0,0,0,[],2022-06-14 13:32:24+00:00,2022-06-22 15:43:09+00:00,699045.0,"8 days, 2:10:45",[],"[{'commit_sha': '550ce9b995c5e060a66972b5b9e361b044805835', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
981647292,Clean up index lookup requests,"As suggested by the `FIXME` comments, this patch aims to reduce the code duplication between the `definition`, `implementation` and `references` request handlers in `SourceKitServer` by moving the index request into a new method `findIndexedOccurrences`. This will also make it easier to implement new index-related methods in the future (e.g. for call/type hierarchy requests).",True,575,https://api.github.com/repos/swiftlang/sourcekit-lsp/pulls/575,https://github.com/swiftlang/sourcekit-lsp/pull/575,closed,85,117,1,2,3,9,0,0,[],2022-06-28 16:39:35+00:00,2022-06-30 10:48:32+00:00,151737.0,"1 day, 18:08:57","[{'comment_id': 908717294, 'comment_body': ""We are passing quite a few request-derived parameters here. An idea I had was to pass the request directly to the method. That would however require introducing a new protocol, e.g. `TextDocumentPositionRequest`, that encompasses both a `textDocument` and `position` parameter, to formulate the corresponding generic constraint, as far as I can tell. Additionally it would make the method 'aware' of the request, which we currently abstract away, therefore I went with the 'manual' parameter-passing approach for now."", 'comment_created': datetime.datetime(2022, 6, 28, 16, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 909300621, 'comment_body': 'Looking at the old implementation of `definition`, I think you need to pass `useLocalFallback: true` here.', 'comment_created': datetime.datetime(2022, 6, 29, 7, 40, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 909312856, 'comment_body': 'What do you think about passing these parameters to `findIndexedOccurrences` as `Request< SymbolInfoRequest>`? I think that would contain exactly the parameters the method needs without the need for a new abstraction level.\r\n\r\nAlso: It wasn’t obvious to me what `useLocalFallback` and `extractOccurrences` did just from their parameter name and `completion` made me wonder whether we also used this function for code completion (hooray to ambiguous names). Would you mind adding a doc comment for these parameters and maybe renaming `completion` to `completionHandler` to avoid the ambiguity?', 'comment_created': datetime.datetime(2022, 6, 29, 7, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 909418067, 'comment_body': 'Good catch, thanks!', 'comment_created': datetime.datetime(2022, 6, 29, 9, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 909455525, 'comment_body': ""That's a good idea, though since the request takes a callback, should we move the logic that performs the `SymbolInfo` request into the individual methods (`definition`, etc.) and first pass the `SymbolInfo` response to `findIndexedOccurrences`?"", 'comment_created': datetime.datetime(2022, 6, 29, 10, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 909598230, 'comment_body': 'New idea: `definition` etc. run a normal `symbolInfo` request to the language service and we just factor out the functionality to extract locations from the symbol info response.\r\n\r\nI just played around with this idea and this is what I came up with the following. WDYT?\r\n\r\n<details>\r\n\r\n```diff\r\ndiff --git a/Sources/SourceKitLSP/SourceKitServer.swift b/Sources/SourceKitLSP/SourceKitServer.swift\r\nindex 58b2b9e..c370a0d 100644\r\n--- a/Sources/SourceKitLSP/SourceKitServer.swift\r\n+++ b/Sources/SourceKitLSP/SourceKitServer.swift\r\n@@ -1172,6 +1172,42 @@ extension SourceKitServer {\r\n     languageService.inlayHint(req)\r\n   }\r\n \r\n+  private func extractIndexedOccurrances(\r\n+    result: Result<SymbolInfoRequest.Response, ResponseError>,\r\n+    index: IndexStoreDB?,\r\n+    useLocalFallback: Bool = false,\r\n+    extractOccurrences: (String, IndexStoreDB) -> [SymbolOccurrence]\r\n+  ) -> Result<[Location], ResponseError> {\r\n+    guard let symbols: [SymbolDetails] = result.success ?? nil, let symbol = symbols.first else {\r\n+      return .failure(result.failure!)\r\n+    }\r\n+\r\n+    let fallbackLocation = useLocalFallback\r\n+      ? [symbol.bestLocalDeclaration].compactMap { $0 }\r\n+      : []\r\n+\r\n+    guard let usr = symbol.usr, let index = index else {\r\n+      return .success(fallbackLocation)\r\n+    }\r\n+\r\n+    let occurs = extractOccurrences(usr, index)\r\n+    let locations = occurs.compactMap { occur -> Location? in\r\n+      if occur.location.path.isEmpty {\r\n+        return nil\r\n+      }\r\n+      return Location(\r\n+        uri: DocumentURI(URL(fileURLWithPath: occur.location.path)),\r\n+        range: Range(Position(\r\n+          line: occur.location.line - 1, // 1-based -> 0-based\r\n+          // FIXME: we need to convert the utf8/utf16 column, which may require reading the file!\r\n+          utf16index: occur.location.utf8Column - 1\r\n+          ))\r\n+      )\r\n+    }\r\n+\r\n+    return .success(locations.isEmpty ? fallbackLocation : locations)\r\n+  }\r\n+\r\n   func definition(\r\n     _ req: Request<DefinitionRequest>,\r\n     workspace: Workspace,\r\n@@ -1179,65 +1215,34 @@ extension SourceKitServer {\r\n   ) {\r\n     let symbolInfo = SymbolInfoRequest(textDocument: req.params.textDocument, position: req.params.position)\r\n     let index = self.workspaceForDocument(uri: req.params.textDocument.uri)?.index\r\n-    // If we\'re unable to handle the definition request using our index, see if the\r\n-    // language service can handle it (e.g. clangd can provide AST based definitions).\r\n-    let resultHandler: ([Location], ResponseError?) -> Void = { (locs, error) in\r\n-      guard locs.isEmpty else {\r\n-        req.reply(.locations(locs))\r\n-        return\r\n+    let request = Request(symbolInfo, id: req.id, clientID: ObjectIdentifier(self),\r\n+                          cancellation: req.cancellationToken) { (result: Result<SymbolInfoRequest.Response, ResponseError>) in\r\n+      let extractedResult = self.extractIndexedOccurrances(result: result, index: index) { (usr, index) in\r\n+        log(""performing indexed jump-to-def with usr \\(usr)"")\r\n+        var occurs = index.occurrences(ofUSR: usr, roles: [.definition])\r\n+        if occurs.isEmpty {\r\n+          occurs = index.occurrences(ofUSR: usr, roles: [.declaration])\r\n+        }\r\n+        return occurs\r\n       }\r\n-      let handled = languageService.definition(req)\r\n-      guard !handled else { return }\r\n-      if let error = error {\r\n-        req.reply(.failure(error))\r\n-      } else {\r\n+      switch extractedResult {\r\n+      case .success(let locs):\r\n+        // If we\'re unable to handle the definition request using our index, see if the\r\n+        // language service can handle it (e.g. clangd can provide AST based definitions).\r\n+        guard locs.isEmpty else {\r\n+          req.reply(.locations(locs))\r\n+          return\r\n+        }\r\n+        let handled = languageService.definition(req)\r\n+        guard !handled else { return }\r\n         req.reply(.locations([]))\r\n+      case .failure(let error):\r\n+        req.reply(.failure(error))\r\n       }\r\n     }\r\n-    let callback = callbackOnQueue(self.queue) { (result: Result<SymbolInfoRequest.Response, ResponseError>) in\r\n-      guard let symbols: [SymbolDetails] = result.success ?? nil, let symbol = symbols.first else {\r\n-        resultHandler([], result.failure)\r\n-        return\r\n-      }\r\n-\r\n-      let fallbackLocation = [symbol.bestLocalDeclaration].compactMap { $0 }\r\n-\r\n-      guard let usr = symbol.usr, let index = index else {\r\n-        resultHandler(fallbackLocation, nil)\r\n-        return\r\n-      }\r\n-\r\n-      log(""performing indexed jump-to-def with usr \\(usr)"")\r\n-\r\n-      var occurs = index.occurrences(ofUSR: usr, roles: [.definition])\r\n-      if occurs.isEmpty {\r\n-        occurs = index.occurrences(ofUSR: usr, roles: [.declaration])\r\n-      }\r\n-\r\n-      // FIXME: overrided method logic\r\n-\r\n-      let locations = occurs.compactMap { occur -> Location? in\r\n-        if occur.location.path.isEmpty {\r\n-          return nil\r\n-        }\r\n-        return Location(\r\n-          uri: DocumentURI(URL(fileURLWithPath: occur.location.path)),\r\n-          range: Range(Position(\r\n-            line: occur.location.line - 1, // 1-based -> 0-based\r\n-            // FIXME: we need to convert the utf8/utf16 column, which may require reading the file!\r\n-            utf16index: occur.location.utf8Column - 1\r\n-            ))\r\n-        )\r\n-      }\r\n-\r\n-      resultHandler(locations.isEmpty ? fallbackLocation : locations, nil)\r\n-    }\r\n-    let request = Request(symbolInfo, id: req.id, clientID: ObjectIdentifier(self),\r\n-                          cancellation: req.cancellationToken, reply: callback)\r\n     languageService.symbolInfo(request)\r\n   }\r\n \r\n-  // FIXME: a lot of duplication with definition request\r\n   func implementation(\r\n     _ req: Request<ImplementationRequest>,\r\n     workspace: Workspace,\r\n@@ -1245,95 +1250,49 @@ extension SourceKitServer {\r\n   ) {\r\n     let symbolInfo = SymbolInfoRequest(textDocument: req.params.textDocument, position: req.params.position)\r\n     let index = self.workspaceForDocument(uri: req.params.textDocument.uri)?.index\r\n-    let callback = callbackOnQueue(self.queue) { (result: Result<SymbolInfoRequest.Response, ResponseError>) in\r\n-      guard let symbols: [SymbolDetails] = result.success ?? nil, let symbol = symbols.first else {\r\n-        if let error = result.failure {\r\n-          req.reply(.failure(error))\r\n-        } else {\r\n-          req.reply(.locations([]))\r\n+    let request = Request(symbolInfo, id: req.id, clientID: ObjectIdentifier(self),\r\n+                          cancellation: req.cancellationToken) { (result: Result<SymbolInfoRequest.Response, ResponseError>) in\r\n+      let extractedResult = self.extractIndexedOccurrances(result: result, index: index) { (usr, index) in\r\n+        var occurs = index.occurrences(ofUSR: usr, roles: .baseOf)\r\n+        if occurs.isEmpty {\r\n+          occurs = index.occurrences(relatedToUSR: usr, roles: .overrideOf)\r\n         }\r\n-        return\r\n-      }\r\n-\r\n-      guard let usr = symbol.usr, let index = index else {\r\n-        return req.reply(.locations([]))\r\n-      }\r\n-\r\n-      var occurs = index.occurrences(ofUSR: usr, roles: .baseOf)\r\n-      if occurs.isEmpty {\r\n-        occurs = index.occurrences(relatedToUSR: usr, roles: .overrideOf)\r\n+        return occurs\r\n       }\r\n-\r\n-      let locations = occurs.compactMap { occur -> Location? in\r\n-        if occur.location.path.isEmpty {\r\n-          return nil\r\n-        }\r\n-        return Location(\r\n-          uri: DocumentURI(URL(fileURLWithPath: occur.location.path)),\r\n-          range: Range(Position(\r\n-            line: occur.location.line - 1, // 1-based -> 0-based\r\n-            // FIXME: we need to convert the utf8/utf16 column, which may require reading the file!\r\n-            utf16index: occur.location.utf8Column - 1\r\n-            ))\r\n-        )\r\n+      switch extractedResult {\r\n+      case .success(let locs):\r\n+        req.reply(.locations(locs))\r\n+      case .failure(let error):\r\n+        req.reply(.failure(error))\r\n       }\r\n-\r\n-      req.reply(.locations(locations))\r\n     }\r\n-    let request = Request(symbolInfo, id: req.id, clientID: ObjectIdentifier(self),\r\n-                          cancellation: req.cancellationToken, reply: callback)\r\n     languageService.symbolInfo(request)\r\n   }\r\n \r\n-  // FIXME: a lot of duplication with definition request\r\n   func references(\r\n     _ req: Request<ReferencesRequest>,\r\n     workspace: Workspace,\r\n     languageService: ToolchainLanguageServer\r\n   ) {\r\n     let symbolInfo = SymbolInfoRequest(textDocument: req.params.textDocument, position: req.params.position)\r\n-    let callback = callbackOnQueue(self.queue) { (result: Result<SymbolInfoRequest.Response, ResponseError>) in\r\n-      guard let symbols: [SymbolDetails] = result.success ?? nil, let symbol = symbols.first else {\r\n-        if let error = result.failure {\r\n-          req.reply(.failure(error))\r\n-        } else {\r\n-          req.reply([])\r\n+    let index = self.workspaceForDocument(uri: req.params.textDocument.uri)?.index\r\n+    let request = Request(symbolInfo, id: req.id, clientID: ObjectIdentifier(self),\r\n+                          cancellation: req.cancellationToken) { (result: Result<SymbolInfoRequest.Response, ResponseError>) in\r\n+      let extractedResult = self.extractIndexedOccurrances(result: result, index: index) { (usr, index) in\r\n+        log(""performing indexed jump-to-def with usr \\(usr)"")\r\n+        var roles: SymbolRole = [.reference]\r\n+        if req.params.context.includeDeclaration {\r\n+          roles.formUnion([.declaration, .definition])\r\n         }\r\n-        return\r\n-      }\r\n-\r\n-      guard let usr = symbol.usr, let index = workspace.index else {\r\n-        req.reply([])\r\n-        return\r\n-      }\r\n-\r\n-      log(""performing indexed jump-to-def with usr \\(usr)"")\r\n-\r\n-      var roles: SymbolRole = [.reference]\r\n-      if req.params.context.includeDeclaration {\r\n-        roles.formUnion([.declaration, .definition])\r\n+        return index.occurrences(ofUSR: usr, roles: roles)\r\n       }\r\n-\r\n-      let occurs = index.occurrences(ofUSR: usr, roles: roles)\r\n-\r\n-      let locations = occurs.compactMap { occur -> Location? in\r\n-        if occur.location.path.isEmpty {\r\n-          return nil\r\n-        }\r\n-        return Location(\r\n-          uri: DocumentURI(URL(fileURLWithPath: occur.location.path)),\r\n-          range: Range(Position(\r\n-            line: occur.location.line - 1, // 1-based -> 0-based\r\n-            // FIXME: we need to convert the utf8/utf16 column, which may require reading the file!\r\n-            utf16index: occur.location.utf8Column - 1\r\n-            ))\r\n-        )\r\n+      switch extractedResult {\r\n+      case .success(let locs):\r\n+        req.reply(locs)\r\n+      case .failure(let error):\r\n+        req.reply(.failure(error))\r\n       }\r\n-\r\n-      req.reply(locations)\r\n     }\r\n-    let request = Request(symbolInfo, id: req.id, clientID: ObjectIdentifier(self),\r\n-                          cancellation: req.cancellationToken, reply: callback)\r\n     languageService.symbolInfo(request)\r\n   }\r\n \r\n```\r\n</details>', 'comment_created': datetime.datetime(2022, 6, 29, 12, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 909603236, 'comment_body': ""Looks nice, this way we wouldn't have to deal with asynchrony either and could conveniently use trailing closures"", 'comment_created': datetime.datetime(2022, 6, 29, 13, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 910321695, 'comment_body': 'Could you still add the doc comments? I was just too lazy to write them when I created my diff above 🙈', 'comment_created': datetime.datetime(2022, 6, 29, 19, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 910530802, 'comment_body': 'Ah yes, sorry I missed this. Should be added', 'comment_created': datetime.datetime(2022, 6, 30, 1, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}]","[{'commit_sha': '146531ca7b432872b317e4ea5b9772660c62f6dc', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '143abb9a864b48e906e75dee2907c064f4baa8e6', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
984194946,Implement call hierarchy,"This branch implements the LSP requests for querying incoming and outgoing function calls. The implementation is similar to the existing definition/reference/implementation lookup in that it queries the index for symbols related by the `calledBy` role.

To do:
- [x] Implement incoming/outgoing call request handlers
- [x] Investigate if and how we could provide `fromRanges` in `CallHierarchy{Incoming,Outgoing}Call` structures
- [x] Add unit tests",True,578,https://api.github.com/repos/swiftlang/sourcekit-lsp/pulls/578,https://github.com/swiftlang/sourcekit-lsp/pull/578,closed,317,21,5,5,2,8,0,0,[],2022-06-30 19:12:26+00:00,2022-07-05 13:33:53+00:00,411687.0,"4 days, 18:21:27","[{'comment_id': 911369293, 'comment_body': 'We encode `usr` and `uri` in the (implementation-specific) LSP data field since incoming/outgoing call requests are only provided with a `CallHierarchyItem` in the request parameters.', 'comment_created': datetime.datetime(2022, 6, 30, 19, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 912365502, 'comment_body': 'This change btw fixes a bug with definition lookup too, e.g. ctrl+clicking a standard library function like `print` would (at least on my Mac) yield `/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/swift/Swift.swiftmodule/arm64e-apple-macos.swiftinterface` along with `(0, 0)` as a position (which would subsequently get turned into `(-1, -1)` by this conversion and cause errors on the LSP client-side.', 'comment_created': datetime.datetime(2022, 7, 2, 13, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 912365706, 'comment_body': 'Aside from that it would of course be cool to have proper positions even within a `*.swiftinterface`, but for now having a fallback at least lets us link to the file correctly.', 'comment_created': datetime.datetime(2022, 7, 2, 13, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 913157174, 'comment_body': 'Yes, having proper locations in`.swiftinterface` files would be great, but IIRC that’s a bigger undertaking. For now, I think this is a good fix.', 'comment_created': datetime.datetime(2022, 7, 4, 17, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 913158204, 'comment_body': 'Just wondering whether this would read better as follows. Maybe it’s just my mind that’s weird but I find thinking about `map` on `Optional` harder to reason about than `if` statements. I’ll leave it up to you what you like better.\r\n```suggestion\r\n    let fallback: [(occurrence: SymbolOccurrence?, location: Location)]\r\n    if useLocalFallback, let bestLocalDeclaration = symbol.bestLocalDeclaration {\r\n      fallback = [(occurrence: nil, location: $0)]\r\n    } else {\r\n      fallback = []\r\n    }\r\n```', 'comment_created': datetime.datetime(2022, 7, 4, 17, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 913161103, 'comment_body': 'I suppose incoming calls of `c` also contain the recursive `c` call, right? Also: Do you know how VSCode represents recursive calls?', 'comment_created': datetime.datetime(2022, 7, 4, 17, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 913271411, 'comment_body': 'Yes, incoming calls on `c` would contain the recursive call of itself too. Since we only query one level at a time, LSP and VSCode can deal with this (infinite) call tree just fine.', 'comment_created': datetime.datetime(2022, 7, 4, 21, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 913271575, 'comment_body': ""I have no strong preference here, let's go with the if-version then :+1: "", 'comment_created': datetime.datetime(2022, 7, 4, 21, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}]","[{'commit_sha': '33d9e4bcea9be04019b5355ac5a517b519436e90', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51f10e29f4d76a00a71e8b9e708a9b2a22447379', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '411dae172c8441f562f7d184e498dcd7687edcfd', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34547b490d6dca4161fca0eb2d1d6f782b6e8e9c', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e90b82755492fafe5215598277a66f8e0d1e93c', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
987349359,Add request structures for type hierarchy,"This branch adds the new type hierarchy-related requests and supporting structures as described by [the LSP 3.17 spec](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_prepareTypeHierarchy) to pave the way for an implementation. In particular this includes the following new requests:

- `TypeHierarchyPrepareRequest` (`textDocument/prepareTypeHierarchy`)
- `TypeHierarchySupertypesRequest` (`typeHierarchy/supertypes`)
- `TypeHierarchySubtypesRequest` (`typeHierarchy/subtypes`)

These structures are very similar to the related call hierarchy types (`CallHierarchyPrepareRequest`, `CallHierarchyIncomingCallsRequest`, etc).",True,581,https://api.github.com/repos/swiftlang/sourcekit-lsp/pulls/581,https://github.com/swiftlang/sourcekit-lsp/pull/581,closed,151,0,6,1,1,0,0,0,[],2022-07-05 12:01:04+00:00,2022-07-05 14:39:46+00:00,9522.0,2:38:42,[],"[{'commit_sha': '954d96163f1c57f93784b9b50a9901625c2d21f4', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
987736250,Implement type hierarchy,"This branch implements support for querying supertype and subtype hierarchies via the new requests introduced in #581 (note that we include extensions in the list of subtypes):

<img width=""408"" alt=""image"" src=""https://user-images.githubusercontent.com/30873659/177393803-b5a4f460-a41c-418d-8573-e1b820d6f90f.png"">

To do:
- [x] Add type hierarchy provider
- [x] Implement the requests
- [x] Add unit test",True,582,https://api.github.com/repos/swiftlang/sourcekit-lsp/pulls/582,https://github.com/swiftlang/sourcekit-lsp/pull/582,closed,390,3,6,5,3,12,0,0,[],2022-07-05 18:42:19+00:00,2022-07-11 10:40:34+00:00,489495.0,"5 days, 15:58:15","[{'comment_id': 914106543, 'comment_body': ""The supertype hierarchy doesn't seem to include the protocol `X`, which `S` retroactively conforms to:\r\n\r\n```swift\r\nprotocol P {}\r\nprotocol X {}\r\nstruct S: P {}\r\nextension S: X {}\r\n```\r\n\r\nThis is due to the index treating the extension `S: X` as a separate entity (it is also listed as such when enumerating the subtypes of `X`)."", 'comment_created': datetime.datetime(2022, 7, 5, 18, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 914110114, 'comment_body': 'We ignore the LSP-specific `data` field in comparisons since its USRs are hard to test in the presence of extensions (which have individual USRs) and are not user-facing anyway. Thus we consider the `data` field as an implementation detail here that the test treats as a black box.', 'comment_created': datetime.datetime(2022, 7, 5, 18, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 915555651, 'comment_body': 'I wonder whether it would make sense to extract that code to a function because it’s shared between super type and subtype. \r\n\r\nAnd now that I think about it, we could probably also extract the closure in `incomingCalls`/`outgoingCalls`.', 'comment_created': datetime.datetime(2022, 7, 7, 7, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 915561342, 'comment_body': 'Could we work around this by doing an index query of extensions for `S` first and also including all the extension’s supertypes?\r\n\r\nI think as far as subtypes are concerned, it’s fine to show the extension. I don’t have strong feelings about that.', 'comment_created': datetime.datetime(2022, 7, 7, 7, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 915565386, 'comment_body': 'I think an extension that adds multiple protocol conformances would also be interesting.\r\n\r\nE.g. \r\n```swift\r\nstruct T {}\r\nextension T: X, P {}\r\n```\r\n\r\nI would expect the extension to be displayed as `T: X, P`.\r\n\r\nAlso: I really like how you show the conformed types in the extension names. Makes it much easier to find the extension you are looking for IMO.', 'comment_created': datetime.datetime(2022, 7, 7, 7, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 915638332, 'comment_body': ""Ah interesting, I wasn't aware that an extension could add multiple conformances in a single extension in Swift (I think e.g. Rust doesn't permit this). Yes, I think formatting it like that totally makes sense."", 'comment_created': datetime.datetime(2022, 7, 7, 9, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 915643383, 'comment_body': 'Yeah, I think we could do that, we would probably have do an index query per extension though (which could be a few).', 'comment_created': datetime.datetime(2022, 7, 7, 9, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 916764301, 'comment_body': 'Yeah that would be nice indeed. The main difficulty with call hierarchy is that `CallHierarchyIncomingCall` and `CallHierarchyOutgoingCall` are different types', 'comment_created': datetime.datetime(2022, 7, 8, 12, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 916908681, 'comment_body': 'I missed that. I agree that we can’t (easily) unify the methods for `incomingCalls`/`outdoingCalls`. I think it would still be beneficial to unify the implementations for call hierarchy though.', 'comment_created': datetime.datetime(2022, 7, 8, 15, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 916912420, 'comment_body': 'I don’t expect these queries to take very long, so I think it would be worth it.', 'comment_created': datetime.datetime(2022, 7, 8, 15, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}, {'comment_id': 916924298, 'comment_body': ""Did you mean type hierarchy? The problem is that there are still some subtleties to be considered, e.g. the `subtypes` closure uses the related symbol rather than the occurrence directly, leaving us essentially with only the definition lookup, which we could abstract over (also `supertypes` will get some more special logic with https://github.com/apple/sourcekit-lsp/pull/582/files#r916912420). Since we need both the definition and the symbol location, we'd need these values separately anyway. If you feel strongly about this, I could try and see, but I don't think we would gain much from factoring/unifying these methods."", 'comment_created': datetime.datetime(2022, 7, 8, 15, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'fwcd', 'type': 'User'}, {'comment_id': 916927880, 'comment_body': 'Yes, I meant type hierarchy.\r\n\r\nOh, I missed those differences. In that case I withdraw my commend and agree that we don’t need to unify these.', 'comment_created': datetime.datetime(2022, 7, 8, 15, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ahoppen', 'type': 'User'}]","[{'commit_sha': '25f4bd6ea3446d88131b96e1988496f8d87b6c17', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33d7f3d198a64cdd60a87a05d1cb94372e35f8a8', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f69af9afafa9599f041907d6555bf7ca8b38e6f', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dd90ab40a5e4c3c935a45d6e5124d583e70b5f7', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ec6a49a8f5e397fa60652f0dfa8b813a9883cfa', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358
992112695,Include module names in call hierarchy items,"Similar to type hierarchy (see #582), this small patch includes module names in the detail field of call hierarchy items too:

![image](https://user-images.githubusercontent.com/30873659/178084648-6cdea5bd-6c4e-4c36-b613-8fa34f948000.png)",True,584,https://api.github.com/repos/swiftlang/sourcekit-lsp/pulls/584,https://github.com/swiftlang/sourcekit-lsp/pull/584,closed,15,4,2,1,2,0,0,0,[],2022-07-09 00:31:09+00:00,2022-07-12 10:36:02+00:00,295493.0,"3 days, 10:04:53",[],"[{'commit_sha': '9cdd025fc46e9de767ec001d41aaec64cc1ed56b', 'committer_username': 'fwcd', 'committer_name': 'fwcd', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 9, 17, 1, 53, tzinfo=datetime.timezone.utc)}]",fwcd,30873659,,User,,231,,152,358

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
143079594,swift-syntax,swiftlang/swift-syntax,Swift,400,3155,184,174,5312,97,42,36,"[{'id': 1116642728, 'number': 1069, 'closed': None, 'created': datetime.datetime(2022, 11, 9, 20, 34, 10, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 11, 'deletions': 50, 'state': 'open'}, {'id': 1065262575, 'number': 834, 'closed': datetime.datetime(2022, 9, 26, 7, 2, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 23, 12, 28, 18, tzinfo=datetime.timezone.utc), 'time_taken': 239642.0, 'time_delta': '2 days, 18:34:02', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 1046653259, 'number': 708, 'closed': datetime.datetime(2022, 9, 6, 11, 2, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 5, 16, 14, 3, tzinfo=datetime.timezone.utc), 'time_taken': 67681.0, 'time_delta': '18:48:01', 'additions': 514, 'deletions': 517, 'state': 'closed'}, {'id': 1045145437, 'number': 695, 'closed': datetime.datetime(2022, 9, 5, 9, 54, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 2, 17, 34, 41, tzinfo=datetime.timezone.utc), 'time_taken': 231617.0, 'time_delta': '2 days, 16:20:17', 'additions': 9, 'deletions': 8, 'state': 'closed'}, {'id': 1044786476, 'number': 692, 'closed': datetime.datetime(2022, 9, 2, 17, 22, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 2, 11, 6, 53, tzinfo=datetime.timezone.utc), 'time_taken': 22554.0, 'time_delta': '6:15:54', 'additions': 30, 'deletions': 22, 'state': 'closed'}, {'id': 1044768406, 'number': 691, 'closed': datetime.datetime(2022, 9, 2, 13, 10, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 2, 10, 46, 29, tzinfo=datetime.timezone.utc), 'time_taken': 8628.0, 'time_delta': '2:23:48', 'additions': 18, 'deletions': 4, 'state': 'closed'}, {'id': 1044101880, 'number': 685, 'closed': datetime.datetime(2022, 9, 1, 20, 57, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 1, 18, 47, 1, tzinfo=datetime.timezone.utc), 'time_taken': 7823.0, 'time_delta': '2:10:23', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1042027612, 'number': 667, 'closed': datetime.datetime(2022, 9, 2, 8, 23, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 31, 7, 26, 58, tzinfo=datetime.timezone.utc), 'time_taken': 176204.0, 'time_delta': '2 days, 0:56:44', 'additions': 4616, 'deletions': 518, 'state': 'closed'}, {'id': 1041956516, 'number': 666, 'closed': datetime.datetime(2022, 8, 31, 7, 51, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 31, 6, 13, 45, tzinfo=datetime.timezone.utc), 'time_taken': 5876.0, 'time_delta': '1:37:56', 'additions': 1625, 'deletions': 1586, 'state': 'closed'}, {'id': 1039520992, 'number': 650, 'closed': datetime.datetime(2022, 8, 30, 15, 41, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 29, 11, 5, 18, tzinfo=datetime.timezone.utc), 'time_taken': 102981.0, 'time_delta': '1 day, 4:36:21', 'additions': 107, 'deletions': 22, 'state': 'closed'}, {'id': 1038538779, 'number': 645, 'closed': datetime.datetime(2022, 8, 28, 9, 59, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 27, 2, 41, 25, tzinfo=datetime.timezone.utc), 'time_taken': 112706.0, 'time_delta': '1 day, 7:18:26', 'additions': 3815, 'deletions': 2609, 'state': 'closed'}, {'id': 1038514530, 'number': 644, 'closed': datetime.datetime(2022, 8, 28, 0, 41, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 27, 1, 16, 22, tzinfo=datetime.timezone.utc), 'time_taken': 84334.0, 'time_delta': '23:25:34', 'additions': 43, 'deletions': 4, 'state': 'closed'}, {'id': 1036990395, 'number': 640, 'closed': datetime.datetime(2022, 8, 25, 21, 58, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 25, 16, 20, 44, tzinfo=datetime.timezone.utc), 'time_taken': 20279.0, 'time_delta': '5:37:59', 'additions': 52, 'deletions': 0, 'state': 'closed'}, {'id': 1036865261, 'number': 639, 'closed': datetime.datetime(2022, 8, 25, 18, 6, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 25, 14, 44, 32, tzinfo=datetime.timezone.utc), 'time_taken': 12106.0, 'time_delta': '3:21:46', 'additions': 1052, 'deletions': 214, 'state': 'closed'}, {'id': 1031788436, 'number': 615, 'closed': datetime.datetime(2022, 8, 21, 10, 38, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 20, 13, 47, 1, tzinfo=datetime.timezone.utc), 'time_taken': 75078.0, 'time_delta': '20:51:18', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 1031528327, 'number': 613, 'closed': datetime.datetime(2022, 8, 20, 13, 37, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 19, 20, 5, 15, tzinfo=datetime.timezone.utc), 'time_taken': 63147.0, 'time_delta': '17:32:27', 'additions': 35, 'deletions': 0, 'state': 'closed'}, {'id': 1031487838, 'number': 612, 'closed': datetime.datetime(2022, 8, 23, 9, 59, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 19, 19, 3, 21, tzinfo=datetime.timezone.utc), 'time_taken': 312940.0, 'time_delta': '3 days, 14:55:40', 'additions': 28, 'deletions': 6, 'state': 'closed'}, {'id': 1031468464, 'number': 611, 'closed': datetime.datetime(2022, 8, 21, 15, 43, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 19, 18, 35, 21, tzinfo=datetime.timezone.utc), 'time_taken': 162509.0, 'time_delta': '1 day, 21:08:29', 'additions': 113, 'deletions': 7, 'state': 'closed'}, {'id': 1031451509, 'number': 610, 'closed': datetime.datetime(2022, 8, 20, 13, 38, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 19, 18, 11, 56, tzinfo=datetime.timezone.utc), 'time_taken': 70023.0, 'time_delta': '19:27:03', 'additions': 47, 'deletions': 5, 'state': 'closed'}, {'id': 1025200862, 'number': 588, 'closed': datetime.datetime(2022, 8, 14, 11, 5, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 12, 17, 16, 57, tzinfo=datetime.timezone.utc), 'time_taken': 150531.0, 'time_delta': '1 day, 17:48:51', 'additions': 16, 'deletions': 16, 'state': 'closed'}, {'id': 1025048172, 'number': 587, 'closed': datetime.datetime(2022, 8, 12, 16, 52, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 12, 15, 3, 46, tzinfo=datetime.timezone.utc), 'time_taken': 6541.0, 'time_delta': '1:49:01', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 1025044567, 'number': 586, 'closed': datetime.datetime(2022, 8, 12, 16, 52, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 12, 14, 59, 54, tzinfo=datetime.timezone.utc), 'time_taken': 6744.0, 'time_delta': '1:52:24', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1024374678, 'number': 580, 'closed': datetime.datetime(2022, 8, 23, 9, 12, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 11, 22, 13, 52, tzinfo=datetime.timezone.utc), 'time_taken': 989923.0, 'time_delta': '11 days, 10:58:43', 'additions': 81, 'deletions': 45, 'state': 'closed'}, {'id': 1024356125, 'number': 579, 'closed': datetime.datetime(2022, 8, 12, 14, 48, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 11, 21, 45, 21, tzinfo=datetime.timezone.utc), 'time_taken': 61388.0, 'time_delta': '17:03:08', 'additions': 53, 'deletions': 4, 'state': 'closed'}, {'id': 1024120044, 'number': 576, 'closed': datetime.datetime(2022, 8, 12, 11, 3, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 11, 17, 14, 49, tzinfo=datetime.timezone.utc), 'time_taken': 64101.0, 'time_delta': '17:48:21', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 1024103544, 'number': 575, 'closed': datetime.datetime(2022, 8, 12, 17, 0, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 11, 16, 54, 45, tzinfo=datetime.timezone.utc), 'time_taken': 86720.0, 'time_delta': '1 day, 0:05:20', 'additions': 1344, 'deletions': 326, 'state': 'closed'}, {'id': 1024094127, 'number': 574, 'closed': datetime.datetime(2022, 8, 11, 21, 4, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 11, 16, 45, 55, tzinfo=datetime.timezone.utc), 'time_taken': 15493.0, 'time_delta': '4:18:13', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 1024019908, 'number': 573, 'closed': datetime.datetime(2022, 8, 12, 2, 0, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 11, 15, 34, 11, tzinfo=datetime.timezone.utc), 'time_taken': 37576.0, 'time_delta': '10:26:16', 'additions': 119, 'deletions': 119, 'state': 'closed'}, {'id': 1023384280, 'number': 571, 'closed': datetime.datetime(2022, 8, 11, 21, 3, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 11, 2, 57, 39, tzinfo=datetime.timezone.utc), 'time_taken': 65135.0, 'time_delta': '18:05:35', 'additions': 27, 'deletions': 1, 'state': 'closed'}, {'id': 1017817376, 'number': 555, 'closed': datetime.datetime(2022, 8, 16, 16, 9, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 17, 7, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1033318.0, 'time_delta': '11 days, 23:01:58', 'additions': 3589, 'deletions': 9923, 'state': 'closed'}, {'id': 1017715926, 'number': 553, 'closed': datetime.datetime(2022, 8, 4, 16, 52, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 15, 33, 49, tzinfo=datetime.timezone.utc), 'time_taken': 4725.0, 'time_delta': '1:18:45', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 1017693019, 'number': 552, 'closed': datetime.datetime(2022, 8, 12, 16, 51, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 15, 20, 3, tzinfo=datetime.timezone.utc), 'time_taken': 696708.0, 'time_delta': '8 days, 1:31:48', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1017663674, 'number': 551, 'closed': datetime.datetime(2022, 8, 4, 17, 15, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 15, 0, 55, tzinfo=datetime.timezone.utc), 'time_taken': 8095.0, 'time_delta': '2:14:55', 'additions': 36, 'deletions': 41, 'state': 'closed'}, {'id': 1017502393, 'number': 548, 'closed': datetime.datetime(2022, 8, 4, 14, 18, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 13, 2, 54, tzinfo=datetime.timezone.utc), 'time_taken': 4539.0, 'time_delta': '1:15:39', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1016991691, 'number': 547, 'closed': datetime.datetime(2022, 8, 4, 14, 19, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 3, 4, 47, tzinfo=datetime.timezone.utc), 'time_taken': 40505.0, 'time_delta': '11:15:05', 'additions': 12, 'deletions': 32, 'state': 'closed'}, {'id': 1016978929, 'number': 546, 'closed': datetime.datetime(2022, 8, 4, 9, 33, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 2, 38, 7, tzinfo=datetime.timezone.utc), 'time_taken': 24941.0, 'time_delta': '6:55:41', 'additions': 5, 'deletions': 7, 'state': 'closed'}, {'id': 1015624058, 'number': 542, 'closed': datetime.datetime(2022, 8, 4, 2, 41, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 21, 43, 28, tzinfo=datetime.timezone.utc), 'time_taken': 104261.0, 'time_delta': '1 day, 4:57:41', 'additions': 149, 'deletions': 93, 'state': 'closed'}, {'id': 1015581756, 'number': 540, 'closed': datetime.datetime(2022, 8, 3, 11, 38, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 20, 42, 50, tzinfo=datetime.timezone.utc), 'time_taken': 53756.0, 'time_delta': '14:55:56', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 1013087327, 'number': 533, 'closed': datetime.datetime(2022, 8, 1, 10, 37, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 31, 18, 16, 2, tzinfo=datetime.timezone.utc), 'time_taken': 58875.0, 'time_delta': '16:21:15', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 1012409535, 'number': 532, 'closed': datetime.datetime(2022, 7, 30, 15, 55, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 22, 48, 10, tzinfo=datetime.timezone.utc), 'time_taken': 61658.0, 'time_delta': '17:07:38', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1011510730, 'number': 531, 'closed': datetime.datetime(2022, 11, 9, 20, 35, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 3, 29, 34, tzinfo=datetime.timezone.utc), 'time_taken': 8960730.0, 'time_delta': '103 days, 17:05:30', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 1011504445, 'number': 530, 'closed': datetime.datetime(2022, 7, 29, 13, 44, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 3, 14, 21, tzinfo=datetime.timezone.utc), 'time_taken': 37797.0, 'time_delta': '10:29:57', 'additions': 38, 'deletions': 6, 'state': 'closed'}, {'id': 1010135009, 'number': 528, 'closed': datetime.datetime(2022, 8, 4, 1, 19, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 27, 21, 20, 28, tzinfo=datetime.timezone.utc), 'time_taken': 619156.0, 'time_delta': '7 days, 3:59:16', 'additions': 371, 'deletions': 83, 'state': 'closed'}, {'id': 1010095762, 'number': 527, 'closed': datetime.datetime(2022, 7, 27, 22, 10, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 27, 20, 28, 26, tzinfo=datetime.timezone.utc), 'time_taken': 6131.0, 'time_delta': '1:42:11', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 1009871486, 'number': 526, 'closed': datetime.datetime(2022, 7, 27, 21, 27, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 27, 16, 24, 9, tzinfo=datetime.timezone.utc), 'time_taken': 18192.0, 'time_delta': '5:03:12', 'additions': 29, 'deletions': 24, 'state': 'closed'}, {'id': 1009831469, 'number': 525, 'closed': datetime.datetime(2022, 7, 27, 23, 51, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 27, 15, 44, 11, tzinfo=datetime.timezone.utc), 'time_taken': 29248.0, 'time_delta': '8:07:28', 'additions': 51, 'deletions': 2, 'state': 'closed'}, {'id': 1009779481, 'number': 524, 'closed': datetime.datetime(2022, 7, 27, 16, 5, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 27, 14, 58, 46, tzinfo=datetime.timezone.utc), 'time_taken': 4020.0, 'time_delta': '1:07:00', 'additions': 27, 'deletions': 10, 'state': 'closed'}, {'id': 1009737556, 'number': 523, 'closed': datetime.datetime(2022, 7, 27, 15, 39, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 27, 14, 25, 2, tzinfo=datetime.timezone.utc), 'time_taken': 4462.0, 'time_delta': '1:14:22', 'additions': 18, 'deletions': 10, 'state': 'closed'}, {'id': 1008613046, 'number': 518, 'closed': datetime.datetime(2022, 7, 26, 18, 3, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 26, 14, 39, 9, tzinfo=datetime.timezone.utc), 'time_taken': 12278.0, 'time_delta': '3:24:38', 'additions': 73, 'deletions': 0, 'state': 'closed'}, {'id': 1006597781, 'number': 515, 'closed': datetime.datetime(2022, 7, 24, 20, 0, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 24, 18, 16, 33, tzinfo=datetime.timezone.utc), 'time_taken': 6232.0, 'time_delta': '1:43:52', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1002832718, 'number': 507, 'closed': datetime.datetime(2022, 7, 27, 13, 52, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 20, 19, 42, 15, tzinfo=datetime.timezone.utc), 'time_taken': 583804.0, 'time_delta': '6 days, 18:10:04', 'additions': 60, 'deletions': 26, 'state': 'closed'}, {'id': 1002760340, 'number': 506, 'closed': datetime.datetime(2022, 8, 4, 14, 33, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 20, 18, 55, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1280304.0, 'time_delta': '14 days, 19:38:24', 'additions': 842, 'deletions': 959, 'state': 'closed'}, {'id': 1001223323, 'number': 505, 'closed': datetime.datetime(2022, 7, 20, 5, 47, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 19, 20, 38, 38, tzinfo=datetime.timezone.utc), 'time_taken': 32916.0, 'time_delta': '9:08:36', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 993113759, 'number': 498, 'closed': datetime.datetime(2022, 7, 18, 10, 12, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 11, 13, 33, 23, tzinfo=datetime.timezone.utc), 'time_taken': 592741.0, 'time_delta': '6 days, 20:39:01', 'additions': 388, 'deletions': 367, 'state': 'closed'}, {'id': 993066414, 'number': 497, 'closed': datetime.datetime(2022, 7, 12, 13, 2, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 11, 12, 50, 36, tzinfo=datetime.timezone.utc), 'time_taken': 87112.0, 'time_delta': '1 day, 0:11:52', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 992328788, 'number': 495, 'closed': datetime.datetime(2022, 7, 14, 11, 25, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 10, 1, 1, 38, tzinfo=datetime.timezone.utc), 'time_taken': 383009.0, 'time_delta': '4 days, 10:23:29', 'additions': 2107, 'deletions': 2512, 'state': 'closed'}, {'id': 992125073, 'number': 493, 'closed': datetime.datetime(2022, 7, 14, 9, 5, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 9, 1, 47, 58, tzinfo=datetime.timezone.utc), 'time_taken': 458231.0, 'time_delta': '5 days, 7:17:11', 'additions': 105, 'deletions': 71, 'state': 'closed'}, {'id': 985805637, 'number': 485, 'closed': datetime.datetime(2022, 7, 11, 12, 21, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 3, 20, 6, 56, tzinfo=datetime.timezone.utc), 'time_taken': 663257.0, 'time_delta': '7 days, 16:14:17', 'additions': 591, 'deletions': 12, 'state': 'closed'}, {'id': 985545558, 'number': 482, 'closed': datetime.datetime(2022, 7, 4, 21, 45, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 2, 15, 43, 4, tzinfo=datetime.timezone.utc), 'time_taken': 194572.0, 'time_delta': '2 days, 6:02:52', 'additions': 21, 'deletions': 0, 'state': 'closed'}, {'id': 985543178, 'number': 481, 'closed': datetime.datetime(2022, 7, 3, 9, 59, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 2, 15, 25, 58, tzinfo=datetime.timezone.utc), 'time_taken': 66797.0, 'time_delta': '18:33:17', 'additions': 16, 'deletions': 9, 'state': 'closed'}, {'id': 981521275, 'number': 477, 'closed': datetime.datetime(2022, 7, 29, 18, 13, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 28, 14, 51, 52, tzinfo=datetime.timezone.utc), 'time_taken': 2690521.0, 'time_delta': '31 days, 3:22:01', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 979088441, 'number': 475, 'closed': datetime.datetime(2022, 6, 28, 13, 1, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 25, 16, 28, 48, tzinfo=datetime.timezone.utc), 'time_taken': 246789.0, 'time_delta': '2 days, 20:33:09', 'additions': 3223, 'deletions': 1606, 'state': 'closed'}, {'id': 979084966, 'number': 474, 'closed': datetime.datetime(2022, 6, 27, 11, 1, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 25, 16, 11, 31, tzinfo=datetime.timezone.utc), 'time_taken': 154170.0, 'time_delta': '1 day, 18:49:30', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 979078018, 'number': 473, 'closed': datetime.datetime(2022, 6, 27, 13, 53, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 25, 15, 35, 23, tzinfo=datetime.timezone.utc), 'time_taken': 166716.0, 'time_delta': '1 day, 22:18:36', 'additions': 550, 'deletions': 402, 'state': 'closed'}, {'id': 968791242, 'number': 465, 'closed': datetime.datetime(2022, 6, 22, 19, 27, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 16, 2, 1, 27, tzinfo=datetime.timezone.utc), 'time_taken': 581165.0, 'time_delta': '6 days, 17:26:05', 'additions': 419, 'deletions': 937, 'state': 'closed'}, {'id': 968784172, 'number': 464, 'closed': datetime.datetime(2022, 6, 16, 9, 25, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 16, 1, 42, tzinfo=datetime.timezone.utc), 'time_taken': 27820.0, 'time_delta': '7:43:40', 'additions': 4, 'deletions': 25, 'state': 'closed'}, {'id': 962347512, 'number': 461, 'closed': datetime.datetime(2022, 6, 10, 8, 24, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 9, 2, 52, 58, tzinfo=datetime.timezone.utc), 'time_taken': 106296.0, 'time_delta': '1 day, 5:31:36', 'additions': 298, 'deletions': 0, 'state': 'closed'}, {'id': 960953842, 'number': 460, 'closed': datetime.datetime(2022, 6, 16, 2, 3, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 7, 21, 59, 24, tzinfo=datetime.timezone.utc), 'time_taken': 705819.0, 'time_delta': '8 days, 4:03:39', 'additions': 52, 'deletions': 58, 'state': 'closed'}, {'id': 958268409, 'number': 456, 'closed': datetime.datetime(2022, 6, 7, 21, 17, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 4, 18, 0, 51, tzinfo=datetime.timezone.utc), 'time_taken': 271016.0, 'time_delta': '3 days, 3:16:56', 'additions': 233, 'deletions': 160, 'state': 'closed'}]"
154773196,sourcekit-lsp,swiftlang/sourcekit-lsp,Swift,268,3246,163,113,2955,83,26,13,"[{'id': 1551112853, 'number': 892, 'closed': datetime.datetime(2024, 6, 21, 15, 27, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 11, 2, 8, 47, tzinfo=datetime.timezone.utc), 'time_taken': 21993549.0, 'time_delta': '254 days, 13:19:09', 'additions': 116, 'deletions': 3, 'state': 'closed'}, {'id': 1551049492, 'number': 891, 'closed': datetime.datetime(2023, 10, 11, 21, 9, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 11, 0, 59, 56, tzinfo=datetime.timezone.utc), 'time_taken': 72551.0, 'time_delta': '20:09:11', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 992112695, 'number': 584, 'closed': datetime.datetime(2022, 7, 12, 10, 36, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 9, 0, 31, 9, tzinfo=datetime.timezone.utc), 'time_taken': 295493.0, 'time_delta': '3 days, 10:04:53', 'additions': 15, 'deletions': 4, 'state': 'closed'}, {'id': 987736250, 'number': 582, 'closed': datetime.datetime(2022, 7, 11, 10, 40, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 5, 18, 42, 19, tzinfo=datetime.timezone.utc), 'time_taken': 489495.0, 'time_delta': '5 days, 15:58:15', 'additions': 390, 'deletions': 3, 'state': 'closed'}, {'id': 987349359, 'number': 581, 'closed': datetime.datetime(2022, 7, 5, 14, 39, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 5, 12, 1, 4, tzinfo=datetime.timezone.utc), 'time_taken': 9522.0, 'time_delta': '2:38:42', 'additions': 151, 'deletions': 0, 'state': 'closed'}, {'id': 984194946, 'number': 578, 'closed': datetime.datetime(2022, 7, 5, 13, 33, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 30, 19, 12, 26, tzinfo=datetime.timezone.utc), 'time_taken': 411687.0, 'time_delta': '4 days, 18:21:27', 'additions': 317, 'deletions': 21, 'state': 'closed'}, {'id': 981647292, 'number': 575, 'closed': datetime.datetime(2022, 6, 30, 10, 48, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 28, 16, 39, 35, tzinfo=datetime.timezone.utc), 'time_taken': 151737.0, 'time_delta': '1 day, 18:08:57', 'additions': 85, 'deletions': 117, 'state': 'closed'}, {'id': 966941748, 'number': 570, 'closed': datetime.datetime(2022, 6, 22, 15, 43, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 14, 13, 32, 24, tzinfo=datetime.timezone.utc), 'time_taken': 699045.0, 'time_delta': '8 days, 2:10:45', 'additions': 299, 'deletions': 85, 'state': 'closed'}, {'id': 873690722, 'number': 465, 'closed': datetime.datetime(2022, 6, 14, 13, 10, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 8, 0, 22, 7, tzinfo=datetime.timezone.utc), 'time_taken': 8513286.0, 'time_delta': '98 days, 12:48:06', 'additions': 299, 'deletions': 85, 'state': 'closed'}, {'id': 683064390, 'number': 414, 'closed': datetime.datetime(2021, 8, 28, 11, 4, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 3, 18, 54, 24, tzinfo=datetime.timezone.utc), 'time_taken': 4810184.0, 'time_delta': '55 days, 16:09:44', 'additions': 1645, 'deletions': 36, 'state': 'closed'}, {'id': 670526767, 'number': 408, 'closed': datetime.datetime(2021, 6, 30, 20, 18, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 15, 15, 44, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1312476.0, 'time_delta': '15 days, 4:34:36', 'additions': 195, 'deletions': 83, 'state': 'closed'}, {'id': 664908134, 'number': 407, 'closed': datetime.datetime(2021, 6, 22, 14, 37, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 13, 16, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1214473.0, 'time_delta': '14 days, 1:21:13', 'additions': 987, 'deletions': 5, 'state': 'closed'}, {'id': 656652813, 'number': 406, 'closed': datetime.datetime(2021, 6, 15, 12, 17, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 28, 15, 13, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1544605.0, 'time_delta': '17 days, 21:03:25', 'additions': 606, 'deletions': 68, 'state': 'closed'}, {'id': 644026564, 'number': 393, 'closed': datetime.datetime(2021, 5, 13, 18, 39, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 13, 14, 47, 45, tzinfo=datetime.timezone.utc), 'time_taken': 13926.0, 'time_delta': '3:52:06', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 628316660, 'number': 389, 'closed': datetime.datetime(2021, 5, 20, 14, 31, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 1, 2, 58, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1683169.0, 'time_delta': '19 days, 11:32:49', 'additions': 58, 'deletions': 9, 'state': 'closed'}, {'id': 261288078, 'number': 93, 'closed': datetime.datetime(2019, 3, 15, 0, 45, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 3, 14, 18, 25, 50, tzinfo=datetime.timezone.utc), 'time_taken': 22772.0, 'time_delta': '6:19:32', 'additions': 16, 'deletions': 8, 'state': 'closed'}]"
