pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
380467089,Control packit-service with the command embedded in a comment.,"Fixes #412 

It can now process commands embedded in comments:

- I forgot to whitelist it again. /packit build Hope this works.
- Last test. /packit build
- /packit build

The above examples have been tested and all of them work.

![Screenshot_2020-02-27 Change Something Random by IceWreck · Pull Request #5 · IceWreck hello-world](https://user-images.githubusercontent.com/18102790/75380695-7fa96700-58fd-11ea-8e70-c90d77db6712.png)
",True,433,https://api.github.com/repos/packit/packit-service/pulls/433,https://github.com/packit/packit-service/pull/433,closed,289,15,3,2,26,3,1,0,[{'name': 'mergeit'}],2020-02-26 19:40:18+00:00,2020-03-03 11:05:55+00:00,487537.0,"5 days, 15:25:37","[{'comment_id': 384950366, 'comment_body': 'we should take the whole comment, so please drop the `[:100]` part', 'comment_created': datetime.datetime(2020, 2, 27, 7, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 384951181, 'comment_body': ""this is probably good enough for now, but once the commands start accept options and arguments, we'd need to improve heuristics"", 'comment_created': datetime.datetime(2020, 2, 27, 7, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 384959529, 'comment_body': 'Fixed. ', 'comment_created': datetime.datetime(2020, 2, 27, 7, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': '6a2891da37601c40dfcbcfe2df0bcdedb1a0f581', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47394c8dc38a12c86390a7275933ef7f6d0a54b6', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
381568720,Store the date/time of triggering new copr build,"We need to store the time when a build is triggered. (via new PR or comment command )

This is needed for the dashboard as discussed in packit-service/dashboard#9 
Partially fixes #425 

Now, the /api/copr-build looks like:
```
  {
    ""project"": ""IceWreck-hello-world-7"",
    ""owner"": ""icewreck"",
    ""chroots"": [
      ""fedora-31-x86_64"",
      ""fedora-30-x86_64"",
      ""fedora-rawhide-x86_64""
    ],
    ""trigger_time"": ""28-02-2020 19:39:54"",
    ""build_id"": 1259733
  }

```
Right now I've made this addition to the redis models.py which is currently being used. Should I also make the same change to the [sqlalchemy models.py](https://github.com/packit-service/packit-service/blob/master/packit_service/models.py), which I think will be used later and isn't being used right now?
",True,443,https://api.github.com/repos/packit/packit-service/pulls/443,https://github.com/packit/packit-service/pull/443,closed,64,5,5,4,15,27,1,0,[{'name': 'mergeit'}],2020-02-28 19:56:29+00:00,2020-03-05 09:53:26+00:00,482217.0,"5 days, 13:56:57","[{'comment_id': 386246777, 'comment_body': 'this is not very descriptive, how about we added three fields instead?\r\n* build_submitted_time\r\n* build_start_time\r\n* build_finished_time', 'comment_created': datetime.datetime(2020, 3, 2, 8, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 386958587, 'comment_body': ""I'd probably store just the timestamp as `int`, i.e.\r\n```python\r\nb.trigger_time: int = int(time.time())\r\n```\r\nOne can later create a string from the timestamp according to preferences, for example\r\n```python\r\ndatetime.utcfromtimestamp(b.trigger_time).isoformat()\r\n```"", 'comment_created': datetime.datetime(2020, 3, 3, 11, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jpopelka', 'type': 'User'}, {'comment_id': 386964803, 'comment_body': ""I actually removed it in my last commit just a couple of minutes ago. I set it to datetime.utcnow in both postgres and redis, using postgre's datetime field. \r\n\r\nThis can be reformatted easily too, though reformatting might be an issue in other languages.\r\n\r\nSo should I just store the timestamp? \r\n\r\nEdit: This last commit is causing issues on an actual deployment, but not in tests. "", 'comment_created': datetime.datetime(2020, 3, 3, 11, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 386988062, 'comment_body': 'i was using it like this, and it worked perfectly\r\n:+1: ', 'comment_created': datetime.datetime(2020, 3, 3, 12, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sakalosj', 'type': 'User'}, {'comment_id': 386990734, 'comment_body': 'why this need be nullable? i will prefer always valid value for build_submitted_time', 'comment_created': datetime.datetime(2020, 3, 3, 12, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sakalosj', 'type': 'User'}, {'comment_id': 386999771, 'comment_body': ""> i was using it like this, and it worked perfectly\r\n\r\nIt works as intended if you only modify the redis model.py (the old commit). \r\n\r\nI then modified the sql alchemy models.py to do the same thing. There is a bug in there which causes the error and then builds aren't stored, but I can't find what is causing said error.\r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 3, 3, 12, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 387070870, 'comment_body': 'so what type is the `build_submitted_time` now?\r\n`str` or `datetime.datetime` ?', 'comment_created': datetime.datetime(2020, 3, 3, 14, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jpopelka', 'type': 'User'}, {'comment_id': 387071588, 'comment_body': ""I'm fine with storing datetime, no need to store timestamp."", 'comment_created': datetime.datetime(2020, 3, 3, 14, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jpopelka', 'type': 'User'}, {'comment_id': 387072684, 'comment_body': ""Right now its a string. I'll change it to an integer timestamp once I figure out how to fix the postgres problem."", 'comment_created': datetime.datetime(2020, 3, 3, 14, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 387123613, 'comment_body': ""Sorry, I thought it was causing the issue so I removed it. Will revert this once I fix the error.\r\n\r\nBTW, I just checked, adding any field to the copr_builds table in the postgres models.py file causes this error.\r\n\r\nExample, adding `abc = Column(Integer)` inside the table in an unmodified file from master will cause this issue.\r\n\r\nWhat am I missing? What else do I need to do?\r\n\r\nIs there something like migrate in Django which I have to do after making changes to sqlalchemy's models.py?\r\n\r\nEdit: So I realized that alembic is present, but where do I run _alembic upgrade head_ ? Do we even need to do it?"", 'comment_created': datetime.datetime(2020, 3, 3, 16, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 387146588, 'comment_body': 'no need to sorry :), i just thought it was good idea to have it not nullable\r\n\r\nyes you are right you have to update db schema once you change db definition in code\r\n\r\n@TomasTomecek \r\nwhat is exact procedure to perform db schema update? ', 'comment_created': datetime.datetime(2020, 3, 3, 16, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sakalosj', 'type': 'User'}, {'comment_id': 387217592, 'comment_body': ""generate it using alembic: https://alembic.sqlalchemy.org/en/latest/autogenerate.html\r\n\r\nas for nullable: the thing is that we already have this in production with data in the table: once you change schema, you need to figure out what to do with present entries: either make it nullable, set a default, or figure it out during schema upgrade\r\n\r\nalembic upgrade head just applies the schema into db\r\n\r\n(btw I'd love to use django instead of flask+SA; but it's too late it this point, the switch is just not worth it)"", 'comment_created': datetime.datetime(2020, 3, 3, 18, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 387225363, 'comment_body': ""Thanks. \r\nMy current local setup is docker based, so I make changes in packit-service files and then run docker-compose up with --build to test those changes.\r\n\r\nNow running autogenerate probably changes some schema permanently, but where do I run it. I can't run it in a regular venv because alembic just says  No module named 'packit_service'. \r\n\r\nIf I run this in docker, then those changes wouldn't be permanent.\r\n\r\nWhere do I make those changes so that they're permanent ? Is there a way I can run autogenerate in docker packit-service container and then copy the changed files over to the actual code folder ? @TomasTomecek \r\n\r\nEdit: This is kind of working, will try it properly tomorrow."", 'comment_created': datetime.datetime(2020, 3, 3, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 387512222, 'comment_body': 'autogenerate only creates the schema files which are then meant to be applied by the upgrade command\r\n\r\nhence autogen is safe to run\r\n\r\n> Is there a way I can run autogenerate in docker packit-service container and then copy the changed files over to the actual code folder ?\r\n\r\nyes, that should do\r\n\r\nI usually run all this directly on my laptop (no venv, no containers) by starting a psql container and then exposing env vars in shell so alembic knows how to connect', 'comment_created': datetime.datetime(2020, 3, 4, 8, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 387700317, 'comment_body': 'what do others think? int or datetime? I personally prefer datetime, I can see that SA supports DT natively https://docs.sqlalchemy.org/en/13/core/type_basics.html#sqlalchemy.types.DateTime', 'comment_created': datetime.datetime(2020, 3, 4, 14, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 387701171, 'comment_body': ""hm, please don't drop that field"", 'comment_created': datetime.datetime(2020, 3, 4, 14, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 387701320, 'comment_body': '^', 'comment_created': datetime.datetime(2020, 3, 4, 14, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 387703089, 'comment_body': 'If there is no big issue with `datetime`, I would go with that.', 'comment_created': datetime.datetime(2020, 3, 4, 14, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 387706719, 'comment_body': 'I wonder if it helped mypy to do something like this:\r\n```python\r\nclass OurBase(Base):\r\n  metadata: WhateverTypeItIs\r\n\r\ntarget_metadata = OurBase\r\n```', 'comment_created': datetime.datetime(2020, 3, 4, 14, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 387746841, 'comment_body': 'We have to manually remove this from the generated schema right? Because the _copr_builds_ table in models.py does not have a column called _logs_ but it is in the old schema, which is why autogenerate removed it. ', 'comment_created': datetime.datetime(2020, 3, 4, 15, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 387778269, 'comment_body': ""I had initially suggested `timestamp` because it's IMHO better than storing date&time as a string, but `datetime` is the best (but I'm not sure there's something like that in redis - if we still need to store it also there)."", 'comment_created': datetime.datetime(2020, 3, 4, 16, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jpopelka', 'type': 'User'}, {'comment_id': 387802175, 'comment_body': ""@jpopelka  Switched back to datetime in the latest commit. In redis, I'm currently storing the same datetime object as a string, but I think it can be converted back into a datetime object."", 'comment_created': datetime.datetime(2020, 3, 4, 16, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 387812077, 'comment_body': ""oh, got it; let's leave that then, it's true that I moved logs from copr build table to the srpm build table"", 'comment_created': datetime.datetime(2020, 3, 4, 17, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 388155167, 'comment_body': ""and we're soon moving away from redis, so I wouldn't worry about it too much"", 'comment_created': datetime.datetime(2020, 3, 5, 8, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 388161519, 'comment_body': '```suggestion\r\nif not TYPE_CHECKING:\r\n```', 'comment_created': datetime.datetime(2020, 3, 5, 9, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 388165595, 'comment_body': ""Yes, this is good enough - we just need to know that the datetime was saved in DB, it's valid and it can be retrieved back."", 'comment_created': datetime.datetime(2020, 3, 5, 9, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 388166121, 'comment_body': 'interesting fact is that these default to None:\r\n```python\r\nipdb> a_copr_build                         \r\nCOPRBuild(id=13, pr=PullRequest(id=1, project=GitProject(name=nirvana/lithium)))\r\nipdb> a_copr_build.build_submitted_time    \r\ndatetime.datetime(2020, 3, 5, 9, 17, 24, 689180)\r\nipdb> a_copr_build.build_start_time        \r\nipdb> print(a_copr_build.build_start_time) \r\nNone\r\n```', 'comment_created': datetime.datetime(2020, 3, 5, 9, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}]","[{'commit_sha': 'dca1bbec8a532b800ae88890d066d29f63f78385', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a52e0efc3a64145c1ac8ac1d2967481ffaf00f0b', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f90dd6b158863614dd303089705af7e66bf2da8d', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '696f44e65dd8ba7dd931f880d4ec4b062e22aa36', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
385682581,Fix valueerror when no-action-needed PR comment is followed by a space.,Fixes #463 ,True,474,https://api.github.com/repos/packit/packit-service/pulls/474,https://github.com/packit/packit-service/pull/474,closed,4,0,2,1,2,0,1,0,[{'name': 'mergeit'}],2020-03-09 16:17:23+00:00,2020-03-09 17:16:11+00:00,3528.0,0:58:48,[],"[{'commit_sha': 'dc81205852815dc8073f1c25e5ad5c4771aac4fa', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
386634752,Rewrite the copr-builds part of the API using PostgresSQL instead of Redis,"Completes the first checkbox of #459 

This is completely back-compatible with the previous redis API, although I added more information than before because we need it for the dashboard.

Some previously used info was not stored in psql so I added fields for them and modified the code to store them.

_/api/copr-builds_ now returns a list of objects where one item looks like:
```
{
    ""project"": ""IceWreck-hello-world-9"",
    ""owner"": ""icewreck"",
    ""repo_name"": ""hello-world"",
    ""build_id"": ""1300479"",
    ""status"": ""pending"",
    ""chroots"": [
      ""fedora-31-x86_64"",
      ""fedora-rawhide-x86_64"",
      ""fedora-30-x86_64""
    ],
    ""build_submitted_time"": ""11/03/2020 10:09:48"",
    ""repo_namespace"": ""IceWreck"",
    ""web_url"": ""https://copr.fedorainfracloud.org/coprs/icewreck/IceWreck-hello-world-9/build/1300479/""
}
```

And the specific copr build info returns everything we know about said build.
![Screenshot_2020-03-11 https packit abifog com](https://user-images.githubusercontent.com/18102790/76412478-ae254880-63b9-11ea-9f7c-254033df991f.png)


Also moving to postgres fixed the issue where specific copr build info was not shown (stored?) unless fedora messaging was working.",True,479,https://api.github.com/repos/packit/packit-service/pulls/479,https://github.com/packit/packit-service/pull/479,closed,225,16,5,4,15,11,1,0,[{'name': 'mergeit'}],2020-03-11 11:30:28+00:00,2020-03-13 09:46:32+00:00,166564.0,"1 day, 22:16:04","[{'comment_id': 390997705, 'comment_body': ""2 things:\r\n1. I don't see any code which would ingest this\r\n2. git web url is not directly related to a copr build, can we move that field to the GitProject model?\r\n\r\nCould you also put an example data to the comment? we have so many URLs that it's so easy to get lost"", 'comment_created': datetime.datetime(2020, 3, 11, 14, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 390997994, 'comment_body': 'nice!', 'comment_created': datetime.datetime(2020, 3, 11, 14, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 390999468, 'comment_body': ""could you please create a method on the CoprBuild class which would do what you need and not import get_sa_session here? I'd love to have all the database logic in models.py so we don't duplicate code"", 'comment_created': datetime.datetime(2020, 3, 11, 14, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 391000044, 'comment_body': 'I think this should be `.filter(build_id=build.build_id)`', 'comment_created': datetime.datetime(2020, 3, 11, 14, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 391015261, 'comment_body': ""I'll check if that works, but _CoprBuild.build_id_ is working too.\r\n\r\nEdit: You mean a single _=_ ?\r\nYeah I'll use that. For some reason a _==_ is working too\r\n"", 'comment_created': datetime.datetime(2020, 3, 11, 14, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 391016450, 'comment_body': ""> I don't see any code which would ingest this\r\n\r\nI saw a fixme in the code somewhere where they were creating this again from available data and it said to replace it with an field in psql so I created this field.\r\n\r\nWe can then change the code later.\r\n\r\n> git web url is not directly related to a copr build, can we move that field to the GitProject model?\r\nCould you also put an example data to the comment? we have so many URLs that it's so easy to get lost\r\n\r\nWill do.\r\n"", 'comment_created': datetime.datetime(2020, 3, 11, 14, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 391035947, 'comment_body': ""It can't work, because this expression is evaluated before the filter method gets executed so you're passing True/False to the filter function"", 'comment_created': datetime.datetime(2020, 3, 11, 15, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 391036647, 'comment_body': ""> > I don't see any code which would ingest this\r\n> \r\n> I saw a fixme in the code somewhere where they were creating this again from available data and it said to replace it with an field in psql so I created this field.\r\n> \r\n> We can then change the code later.\r\n\r\nright, oki\r\n"", 'comment_created': datetime.datetime(2020, 3, 11, 15, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 391046369, 'comment_body': ""Oh. Then it probably worked for me because I only had three builds (same build_id, different targets)  \r\nAnd then it combined all of them.\r\nI would've noticed the issue had I had multiple builds."", 'comment_created': datetime.datetime(2020, 3, 11, 15, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 391494498, 'comment_body': '```suggestion\r\n    def get_all(cls) -> Optional[""CoprBuild""]:\r\n```', 'comment_created': datetime.datetime(2020, 3, 12, 9, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 391494714, 'comment_body': 'And I\'m pretty sure it\'s gonna be `Optional[Iterable[""CoprBuild""]]` :)', 'comment_created': datetime.datetime(2020, 3, 12, 9, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}]","[{'commit_sha': '294705b9339613c972c13a181654669ffbe31266', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb8b823d310ddf248d2b632788e44307c5b62161', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f18b1c18dfc606a4c5b938e66580f0bacf1771e', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1768afec3ab9c657658d9af824e65b3ed43cfbe2', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
389315312,Fix error in API when old data exists.,"https://stg.packit.dev/api/copr-builds Is returning internal server error in staging since #479 was deployed.

This is because the database has rows of old data where fields like build_submitted_time are empty. (thanks @csomh )

Fixed that.

",True,493,https://api.github.com/repos/packit/packit-service/pulls/493,https://github.com/packit/packit-service/pull/493,closed,25,6,2,1,6,8,1,0,[{'name': 'mergeit'}],2020-03-16 15:29:09+00:00,2020-03-17 10:13:40+00:00,67471.0,18:44:31,"[{'comment_id': 393177682, 'comment_body': 'Although this is completely functional, just for the sake of being explicit, you could write `if datetime_object is not None`.', 'comment_created': datetime.datetime(2020, 3, 16, 17, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 393179005, 'comment_body': 'Would returning `None` here work?\r\n\r\n`None` is a very good value to have when you want to express a missing value. Much better then an empty string.', 'comment_created': datetime.datetime(2020, 3, 16, 17, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 393181830, 'comment_body': 'Instead of `if_time_exists` you could call the function `optional_time`, so that this line reads: ""build_submitted_time equals optional_time"".\r\n\r\n(This might be personal preference, but just by reading `if_time_exists` it\'s hard for me to guess what this function will do, I have to read the implementation to figure it out).', 'comment_created': datetime.datetime(2020, 3, 16, 17, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 393182058, 'comment_body': 'Would be nice to cover this function with some unit tests, and add type annotation.', 'comment_created': datetime.datetime(2020, 3, 16, 17, 9, 11, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 393187384, 'comment_body': 'Yes, will do it', 'comment_created': datetime.datetime(2020, 3, 16, 17, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 393187941, 'comment_body': 'Sure!', 'comment_created': datetime.datetime(2020, 3, 16, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 393507777, 'comment_body': ""Let's try to use [pytest.mark.parametrize](https://docs.pytest.org/en/latest/parametrize.html) to prepare these input values and also the expect values bellow. With that there would be 2 separate tests executed during the test run, with 2 different inputs and expectations.\r\n\r\nThis would be better, b/c you want to have your tests as atomic as possible, so that they provide you with as much information as possible, even when they fail.\r\n\r\nRight now if the first assert fails, the test run will never get to the second assert, so you would first need to fix the first issue, before being able to tell, if the the other one works. In many cases this will slow you down."", 'comment_created': datetime.datetime(2020, 3, 17, 8, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 393509352, 'comment_body': 'Please make this a docstring instead of a comment.', 'comment_created': datetime.datetime(2020, 3, 17, 8, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}]","[{'commit_sha': '421501c7320e27232cae83e208cdef602b5d109a', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
389886846,Move Whitelist from Redis to Postgres,"None of the redis code has been touched. I've added the postgres code on top of it so everythings done twice, once for either database.

Manual approval and deletion via the script works. 

I've created methods for automatic approval and added comments/TODOs for it as well but someone else will have to do the final part because I have no way of testing if someone is in the fedora packager's group.

The unit tests for the functions in worker/whitelist.py are failing because I've added sqlalchemy related code to them and _make check_in_container_ does not support postgres code.
@TomasTomecek  How do I fix this? Just move that specific tests file over to the tests_requre folder alongside tests_db.py?
Edit: Done",True,501,https://api.github.com/repos/packit/packit-service/pulls/501,https://github.com/packit/packit-service/pull/501,closed,241,6,7,5,12,6,1,0,[{'name': 'mergeit'}],2020-03-17 14:55:26+00:00,2020-03-20 07:16:26+00:00,231660.0,"2 days, 16:21:00","[{'comment_id': 394307314, 'comment_body': 'yeah, no need to', 'comment_created': datetime.datetime(2020, 3, 18, 12, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 394308551, 'comment_body': 'would be nice to do statuses as enum like @lachmanfrantisek is doing it in #502', 'comment_created': datetime.datetime(2020, 3, 18, 12, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 395018650, 'comment_body': ""I actually forgot about accounts that will exist in db, but will have waiting status. So I guess this wasn't pointless after all"", 'comment_created': datetime.datetime(2020, 3, 19, 13, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 395183810, 'comment_body': 'finally we are getting some more interesting names in the tests! thank you', 'comment_created': datetime.datetime(2020, 3, 19, 17, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 395184061, 'comment_body': 'awesome, tests!!', 'comment_created': datetime.datetime(2020, 3, 19, 17, 6, 55, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 395203604, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 3, 19, 17, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': '04311861171dbf6efa2210116e94092810bdb7b2', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '155ab15a593d32c9be7761fecf85387be442c48f', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46131c47c62f7897ec136a6a32c3dba785a44328', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd11ddc8b5bf7eceb62b8de4d724fe98cfca00205', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffc040f1126602ee577ccb23bb18fd8dc974cd76', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
394001141,Minor API Bugfixes,"- Fixed the incorrect git repo link in the API
- Newer builds are shown first, so that we dont have to go to the last page to view recent builds.",True,521,https://api.github.com/repos/packit/packit-service/pulls/521,https://github.com/packit/packit-service/pull/521,closed,6,6,2,1,2,1,1,0,[{'name': 'mergeit'}],2020-03-26 07:28:05+00:00,2020-03-26 14:44:03+00:00,26158.0,7:15:58,"[{'comment_id': 398615005, 'comment_body': ""ordering by ID is yucky, but it's better than what we have now and since not all the builds have datetime attribs in prod, I'd say this is good enough"", 'comment_created': datetime.datetime(2020, 3, 26, 14, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}]","[{'commit_sha': '98111491aafa72ac74c4987a051e1dc299dce06c', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
398025629,Log Package Versions,"Fixes #478

",True,534,https://api.github.com/repos/packit/packit-service/pulls/534,https://github.com/packit/packit-service/pull/534,closed,52,0,4,2,11,7,1,0,[{'name': 'mergeit'}],2020-04-03 08:09:45+00:00,2020-04-07 07:37:58+00:00,343693.0,"3 days, 23:28:13","[{'comment_id': 402927007, 'comment_body': ""As far as I see, nothing in the code bellow required having a class. Let's keep things simple and use only functions, without having a class."", 'comment_created': datetime.datetime(2020, 4, 3, 11, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 403876736, 'comment_body': 'This comment is about a line which is 3 lines above. Usually comments tend to belong to lines that follow. Please move this above the line that belongs to.\r\n\r\n""some reason"" and ""works completely fine"" contradict each other, and in this sentence they are pretty vague: it\'s not clear what the `mypy` error is the `type: ignore` tries to get rid of. It would help future readers to clarify that.', 'comment_created': datetime.datetime(2020, 4, 6, 7, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 403877133, 'comment_body': 'This comment is also out of context, it would be much more useful to put it in the `package_versions` list above.', 'comment_created': datetime.datetime(2020, 4, 6, 7, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 403877902, 'comment_body': 'These comments above the function signatures seem to be better suited as doc-strings.', 'comment_created': datetime.datetime(2020, 4, 6, 7, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 403878561, 'comment_body': '```suggestion\r\ndef log_job_versions():\r\n```', 'comment_created': datetime.datetime(2020, 4, 6, 7, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 403878946, 'comment_body': '```suggestion\r\ndef log_service_versions():\r\n```', 'comment_created': datetime.datetime(2020, 4, 6, 7, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 403942953, 'comment_body': ""Sorry, I should've been clearer. I'll make these changes today and make the comments more detailed. "", 'comment_created': datetime.datetime(2020, 4, 6, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': '1e244a9c8d9d5cfb6b088114cfbdb4975b0bae51', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36aadafc1ca12dab857a52d3728b5971f7b603da', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
403448429,Optionally Disable Sentry,"Fixes #558 

- Adding `disable_sentry: True` to _secrets/packit-service.yaml_ disables sentry. 
- If this line is not present or `disable_sentry: False` is set then events will be sent to sentry like normal.


",True,561,https://api.github.com/repos/packit/packit-service/pulls/561,https://github.com/packit/packit-service/pull/561,closed,44,9,7,2,15,6,1,0,[{'name': 'mergeit'}],2020-04-14 22:39:32+00:00,2020-04-16 14:57:14+00:00,145062.0,"1 day, 16:17:42","[{'comment_id': 408613700, 'comment_body': ""Now that I see these two together, isn't having yet another config flag to disable Sentry superfluous, when not setting the secret would achieve the same result?\r\n\r\nMaybe this issue could be solved by updating the docs/tools for local deployments."", 'comment_created': datetime.datetime(2020, 4, 15, 6, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 408743041, 'comment_body': ""I'd say this is the right thing to do: if disable_sentry is False and the key is not set, we'd get an error right away - without the config option, we should get an error once we want to send an event to sentry, which is pretty late"", 'comment_created': datetime.datetime(2020, 4, 15, 10, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 408811954, 'comment_body': ""> I'd say this is the right thing to do: if disable_sentry is False and the key is not set, we'd get an error right away...\r\n\r\n```\r\nif not secret_key:\r\n    return\r\n```\r\n\r\nI see  no error here, am I missing something?"", 'comment_created': datetime.datetime(2020, 4, 15, 12, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 408892897, 'comment_body': 'I actually wrote that sentence without looking at the code :D\r\n\r\n@IceWreck could you please update the code by raising an exc if the secret_key is not set? Thank you.', 'comment_created': datetime.datetime(2020, 4, 15, 14, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 409288280, 'comment_body': 'care to elaborate? do we want this change?', 'comment_created': datetime.datetime(2020, 4, 16, 5, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 409288583, 'comment_body': 'oh, this is about the httpd pod, got it now', 'comment_created': datetime.datetime(2020, 4, 16, 5, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}]","[{'commit_sha': '4c7d722aa1752764d1dc28311ba49e2ea96a248d', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eea8a0cbf05216e7d5271b039b53be5fa374d368', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
404147942,Tests for the API and other changes,"- [x] Modify API to give build status for every chroot
- [x] Tests for the API (partially done)
- [x] replace/supplement existing flexmock test for the logs view with actual/db based test",True,567,https://api.github.com/repos/packit/packit-service/pulls/567,https://github.com/packit/packit-service/pull/567,closed,1993,1750,9,5,12,4,1,0,[{'name': 'mergeit'}],2020-04-16 06:37:01+00:00,2020-04-20 14:21:20+00:00,373459.0,"4 days, 7:44:19","[{'comment_id': 409341264, 'comment_body': ""I wouldn't personally mind breaking the API here and just set the dict to status\r\n\r\nothers may have a different opinion"", 'comment_created': datetime.datetime(2020, 4, 16, 7, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 409347410, 'comment_body': ""I'll just build tests for the entire API. It keeps breaking again and again and tests were long overdue anyways #489 "", 'comment_created': datetime.datetime(2020, 4, 16, 7, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 411265260, 'comment_body': ""> I wouldn't personally mind breaking the API here and just set the dict to status\r\n> \r\n> others may have a different opinion\r\n\r\nSo should I remove status and chroots? Both are redundant if status_per_chroot exists."", 'comment_created': datetime.datetime(2020, 4, 20, 10, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 411364727, 'comment_body': ""since no one from the team raised an opinion here, let's keep it as it is now"", 'comment_created': datetime.datetime(2020, 4, 20, 13, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}]","[{'commit_sha': '296d8b046b25ddb379f384d0b4021bb2d62eb9d1', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8ac11aba6c1b68f15a158472b0bf3d79ab1f099', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9acf4e8f48d8b225f08ddf5fc643b2755f4b2c33', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c4ea697b48e04f016064477e11f29c5d4eae734', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '002b77358c651b6fb7622e96fd6a31a96095eb9a', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
431751284,Merge chroots and do pagination (API) in SQL instead of python,"#633 
- right now, we load info about every build ever into memory and then serve info about 10 or 20 builds at a time (pagination). this repeats again when we want the next twenty builds
- we make queries to fetch ""all builds"" and ""same build_id builds"" and then merge them into one. and then we do this for every single build (above mentioned point)
- as a result /copr-builds is just timing out on the prod api

This PR replaces all of that by doing this in SQL. Now if we need the 10 latest builds with unique build_ids, we fetch that directly. Chroots are merged in SQL, not python.

- [x] Find a way to add repo_namespace and repo_name as well
- [x] Tests
",True,674,https://api.github.com/repos/packit/packit-service/pulls/674,https://github.com/packit/packit-service/pull/674,closed,157,47,6,4,11,10,2,0,"[{'name': 'ready-for-review'}, {'name': 'mergeit'}]",2020-06-09 12:16:58+00:00,2020-06-15 09:17:08+00:00,507610.0,"5 days, 21:00:10","[{'comment_id': 439222275, 'comment_body': ""Please make a note here, that this is needed b/c `CoprBuildModel.build_id` is a string and we cannot order the way we want based on that.\r\n(Though checking reveals, that Copr V3 API returns build_id as an integer, so not sure, why it's not saved as such... maybe @TomasTomecek recalls?)"", 'comment_created': datetime.datetime(2020, 6, 12, 6, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 439222445, 'comment_body': 'Is this comment still relevant?', 'comment_created': datetime.datetime(2020, 6, 12, 6, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 439227750, 'comment_body': 'You can use the `Query` object returned by `session.query()` and do multiple rounds of filtering. If my understanding is correct, SQLAlchemy does the query only once, when the scope of the session is about to end.\r\n\r\n```python\r\n        with get_sa_session() as session:\r\n            query = session.query(CoprBuildModel).filter_by(build_id=build_id)\r\n            if target:\r\n                query = query.filter_by(target=target)\r\n            return query.first()\r\n```\r\n\r\nAlso, I would rather set the default of `target` to `None` to allow calling this without a target.', 'comment_created': datetime.datetime(2020, 6, 12, 6, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 439227996, 'comment_body': '```suggestion\r\n                .group_by(CoprBuildModel.build_id)\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 6, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 439228199, 'comment_body': 'Keep naming simple :)\r\n\r\n```suggestion\r\n            builds = (\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 6, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 439229701, 'comment_body': 'Delete this empty line.', 'comment_created': datetime.datetime(2020, 6, 12, 6, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 439230064, 'comment_body': ""Fedora 42, the answer to all the questions! Can't wait :smile: "", 'comment_created': datetime.datetime(2020, 6, 12, 6, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 439819852, 'comment_body': 'Added a comment there. \r\n\r\nI think we can use ORDER BY on strings as well, but its slower so we keep the original ids and order by that\r\n\r\n-----\r\n\r\nSince we are merging rows here, we need to tell SQL about which value (out of three or four rows i.e. the number of targets) we want to keep.\r\n\r\nWe want the id in our query result to have the id of any one row (doesnt matter which one since we only use it for ORDER BY), so we choose it by the MIN function. \r\n\r\nEarlier this week, when where we were trying to get every single thing in one query, we used the MIN function to even get identical stuff like\r\n```\r\n\r\n# since theyre identical, just get any one web_url and call the new query column as web_url \r\nfunc.min(CoprBuildModel.web_url).label(""web_url""),\r\n# MIN and MAX, for some reason also works on strings, even identical ones.\r\n\r\n# For identical fields, we can also do\r\nCoprBuildModel.web_url,\r\n# but then we would have to repeat the same statement in GROUP BY and this gets tedious if we have a lot of identical fields\r\n```\r\n\r\n\r\nBut now that we have to offload build details to a seperate query, we just dont need to do that.\r\n', 'comment_created': datetime.datetime(2020, 6, 14, 11, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 439820967, 'comment_body': ""No, I'll replace it with something more suitable"", 'comment_created': datetime.datetime(2020, 6, 14, 11, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 439821065, 'comment_body': '> You can use the Query object returned by session.query() and do multiple rounds of filtering\r\n\r\nThanks\r\n\r\n> Also, I would rather set the default of target to None to allow calling this without a target.\r\n\r\nWill do\r\n', 'comment_created': datetime.datetime(2020, 6, 14, 11, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': '5f68d6aaf57e77dbfa4d57307697fe193cd328c5', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00c7f0efe6994f7a7df4ff5dfc7a5328a8ed9938', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6878e3da5f5d56966fe8491463ba21c9ca32e634', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e50b5c52bbfc56e94636c390a3fc1a75fc8089', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
434429480,Add API endpoint for fetching testing farm results,Fixes #636.,True,678,https://api.github.com/repos/packit/packit-service/pulls/678,https://github.com/packit/packit-service/pull/678,closed,99,2,5,3,4,11,1,0,[{'name': 'mergeit'}],2020-06-15 10:04:10+00:00,2020-06-16 12:46:43+00:00,96153.0,"1 day, 2:42:33","[{'comment_id': 440219759, 'comment_body': 'I think it would make more sense to make this part of `TestingFarmResults`, instead of having a separate route for it.', 'comment_created': datetime.datetime(2020, 6, 15, 14, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 440222995, 'comment_body': ""From a quick search on this header, this seems to be for transferring big files (so that clients can continue a download), but in this case we talk pagination. So I think this is somewhat misleading HTTP-talk :)\r\n\r\nI'll look more into it."", 'comment_created': datetime.datetime(2020, 6, 15, 14, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 440223472, 'comment_body': 'When will this happen?', 'comment_created': datetime.datetime(2020, 6, 15, 14, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 440224992, 'comment_body': 'This is using `first` and `last` so it will never be really `all`, is it? :smile: \r\n\r\nHow about `get_range()` or something similar?', 'comment_created': datetime.datetime(2020, 6, 15, 14, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 440245559, 'comment_body': 'TestingFarmResults is a POST webhook at /testing-farm/results\r\n\r\nIts not mentioned here but /get-results means /testing-farm/get-results', 'comment_created': datetime.datetime(2020, 6, 15, 15, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 440245689, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2020, 6, 15, 15, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 440247445, 'comment_body': 'I think almost always. If project is a check to see if its not None / exists. It might be redundant because a Test Result will always have a git project associated with it', 'comment_created': datetime.datetime(2020, 6, 15, 15, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 440254770, 'comment_body': ""Some Git-archeology reveals that using the `Content-Range` header was started in #187, which aimed to fix #185. The later makes some references to some Stackoverflow questions about REST pagination.\r\n\r\nFollowing links from there, it seems to me, that the original intention was to do pagination as described in [this blog post](http://otac0n.com/blog/2012/11/21/range-header-i-choose-you.html), but implementation wasn't really carried out all the way.\r\n\r\nAnyways... this doesn't have to be fixed in this PR, but please use `{first+1}-{last}/*` in the answer or get a count of all the test results if that's not to expensive.\r\n\r\nAlso: the unit here should be `test-results` instead of `copr-builds`."", 'comment_created': datetime.datetime(2020, 6, 15, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 440259966, 'comment_body': 'Yeah, I know that, but usually in a REST API one can use the same endpoint to both save data in the service or retrieve it, and this is the effect that we need here: POST to /testing-farm/results will save results, GET to /testing-farm/results will list them.', 'comment_created': datetime.datetime(2020, 6, 15, 15, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 440261353, 'comment_body': ""Okay, sorry, wrong question :) I wanted to ask when 'project' will be not true-ish :)\r\n\r\nSo if this is expected to be redundant, then let's remove it."", 'comment_created': datetime.datetime(2020, 6, 15, 15, 30, 13, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 440264038, 'comment_body': 'Oh, sorry. I thought you meant something else.', 'comment_created': datetime.datetime(2020, 6, 15, 15, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': '6055b1434113729221d7fa20be88cc59d78ea670', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9422280f3b0d9a86b514492235fc808bfe5b807f', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fccf9efcafe2b8d9adc4a0a1f77686759588303', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
436308572,Add CORS Headers to the API,"Right now we dont have CORS headers so essentially we do not allow API requests from other websites. This doesnt affect curl/requests/etc since they ignore them. However browsers do respect them so theyre blocking requests from javascript.

According to [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/Errors/CORSMissingAllowOrigin), its okay for public APIs to wildcard allow API requests from anywhere.

",True,690,https://api.github.com/repos/packit/packit-service/pulls/690,https://github.com/packit/packit-service/pull/690,closed,5,0,3,1,7,0,1,0,[{'name': 'mergeit'}],2020-06-18 08:19:33+00:00,2020-06-18 15:40:48+00:00,26475.0,7:21:15,[],"[{'commit_sha': 'f7475b0e8eafac9f3680a716a3538c247142b42d', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
441569917,Use thread-local sqlalchemy session,"This may fix #706 or break everything else

[The official flask docs](https://flask.palletsprojects.com/en/1.1.x/patterns/sqlalchemy/?highlight=sqlalchemy#declarative)  are doing something like this.

It does fix that issue but may have unwanted side effects",True,707,https://api.github.com/repos/packit/packit-service/pulls/707,https://github.com/packit/packit-service/pull/707,closed,9,13,1,1,10,8,1,0,[{'name': 'mergeit'}],2020-06-29 18:09:26+00:00,2020-06-30 12:03:27+00:00,64441.0,17:54:01,"[{'comment_id': 447427195, 'comment_body': ""Due to this line I would say we'll still have a global session shared between threads, so it won't be thread local :)"", 'comment_created': datetime.datetime(2020, 6, 30, 5, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 447432785, 'comment_body': 'How about storing the session in [Flask.g](https://flask.palletsprojects.com/en/1.1.x/appcontext/#storing-data)?', 'comment_created': datetime.datetime(2020, 6, 30, 6, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 447435083, 'comment_body': 'I dont understand why this needs to be global but it fixed that issue, i tested it multiple times.', 'comment_created': datetime.datetime(2020, 6, 30, 6, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 447440391, 'comment_body': 'it should not be global, scoped session is already handling it - it will always return same session in same thread, regardless how many times it is called.\r\n\r\nhttps://docs.sqlalchemy.org/en/13/orm/contextual.html', 'comment_created': datetime.datetime(2020, 6, 30, 6, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sakalosj', 'type': 'User'}, {'comment_id': 447441727, 'comment_body': 'also some useful FAQ\r\nhttps://docs.sqlalchemy.org/en/13/orm/session_basics.html#session-faq-whentocreate', 'comment_created': datetime.datetime(2020, 6, 30, 6, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sakalosj', 'type': 'User'}, {'comment_id': 447448240, 'comment_body': '>  scoped session is already handling it - it will always return same session in same thread, regardless how many times it is called.\r\n\r\nthanks', 'comment_created': datetime.datetime(2020, 6, 30, 6, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 447458453, 'comment_body': 'on removing the global declaration, I get \r\n\r\nis not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3),\r\n\r\n\r\nI think this is because its still inside get_sa_session() function.\r\nif we remove the global keyword but define this outside of the function ....', 'comment_created': datetime.datetime(2020, 6, 30, 7, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 447472465, 'comment_body': 'Can we have the following outside `get_sa_sesssion()`?\r\n\r\n```python\r\nengine = create_engine(get_pg_url())\r\nSession = scoped_session(sessionmaker(bind=engine))\r\n```\r\n\r\n(not sure if this would matter...)', 'comment_created': datetime.datetime(2020, 6, 30, 7, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}]","[{'commit_sha': '631a4a9f3c9a8adc892f45421b0c33f42893f8f0', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
444898938,Add projects endpoint to the API,"/**projects** - with pagination 
```json
[
  {
    ""namespace"": ""abrt"",
    ""repo_name"": ""abrt-java-connector"",
    ""project_url"": ""https://github.com/abrt/abrt-java-connector"",
    ""num_prs"": 2,
    ""num_branches"": 2,
    ""num_releases"": 1,
    ""num_issues"": 0
  },
  {
    ""namespace"": ""abrt"",
    ""repo_name"": ""gnome-abrt"",
    ""project_url"": ""https://github.com/abrt/gnome-abrt"",
    ""num_prs"": 13,
    ""num_branches"": 1,
    ""num_releases"": 4,
    ""num_issues"": 0
  },
.
.
.
]
```
**/projects/{namespace}/{repo_name}/issues**
```json
{
  ""issues"": [
    883,
    880,
    804
  ]
}
```
**/projects/{namespace}/{repo_name}/prs** - with pagination for 10/20/50 PRs etc
```json
[
  {
    ""pr_id"": 886,
    ""builds"": [
      {
        ""build_id"": ""1517042"",
        ""chroot"": ""fedora-rawhide-x86_64"",
        ""status"": ""success"",
        ""web_url"": ""https://copr.fedorainfracloud.org/coprs/build/1517042/""
      },
      {
        ""build_id"": ""1517042"",
        ""chroot"": ""fedora-32-x86_64"",
        ""status"": ""success"",
        ""web_url"": ""https://copr.fedorainfracloud.org/coprs/build/1517042/""
      },
      {
        ""build_id"": ""1517042"",
        ""chroot"": ""fedora-31-x86_64"",
        ""status"": ""success"",
        ""web_url"": ""https://copr.fedorainfracloud.org/coprs/build/1517042/""
      },
      {
        ""build_id"": ""1516946"",
        ""chroot"": ""fedora-rawhide-x86_64"",
        ""status"": ""success"",
        ""web_url"": ""https://copr.fedorainfracloud.org/coprs/build/1516946/""
      },
      {
        ""build_id"": ""1516946"",
        ""chroot"": ""fedora-32-x86_64"",
        ""status"": ""success"",
        ""web_url"": ""https://copr.fedorainfracloud.org/coprs/build/1516946/""
      },
      {
        ""build_id"": ""1516946"",
        ""chroot"": ""fedora-31-x86_64"",
        ""status"": ""success"",
        ""web_url"": ""https://copr.fedorainfracloud.org/coprs/build/1516946/""
      }
    ],
    ""tests"": [
      {
        ""pipeline_id"": ""a6d0448d-74a6-44ad-b691-82ac191bf823"",
        ""chroot"": ""fedora-32-x86_64"",
        ""status"": ""TestingFarmResult.passed"",
        ""web_url"": ""https://console-testing-farm.apps.ci.centos.org/pipeline/a6d0448d-74a6-44ad-b691-82ac191bf823""
      },
      {
        ""pipeline_id"": ""20468bee-4595-4121-8ecf-8f0816028c9a"",
        ""chroot"": ""fedora-31-x86_64"",
        ""status"": ""TestingFarmResult.error"",
        ""web_url"": ""https://console-testing-farm.apps.ci.centos.org/pipeline/20468bee-4595-4121-8ecf-8f0816028c9a""
      },
      {
        ""pipeline_id"": ""edf25482-ae9d-49bc-bd2a-55c49c2a39bf"",
        ""chroot"": ""fedora-32-x86_64"",
        ""status"": ""TestingFarmResult.failed"",
        ""web_url"": ""https://console-testing-farm.apps.ci.centos.org/pipeline/edf25482-ae9d-49bc-bd2a-55c49c2a39bf""
      },
      {
        ""pipeline_id"": ""df3488bf-5f0d-4a4d-9ccd-14c5a0c8531f"",
        ""chroot"": ""fedora-31-x86_64"",
        ""status"": ""TestingFarmResult.failed"",
        ""web_url"": ""https://console-testing-farm.apps.ci.centos.org/pipeline/df3488bf-5f0d-4a4d-9ccd-14c5a0c8531f""
      }
    ]
  },
.
.
.
]
```
**/projects/{namespace}/{repo_name}/releases**
```json
[
  {
    ""tag_name"": ""0.12.0"",
    ""commit_hash"": ""10eed27f405a9ccdf528d48ebe62ba33b07b5abc""
  },
  {
    ""tag_name"": ""0.11.1"",
    ""commit_hash"": ""a0a59fd3c382cabf6ce35e2e4e558dba761669e4""
  },
.
.
.
]
```

Notes: 

- Wanted to have this reviewed before I start making tests. 
- Relevant #638 #709 #711
- Leaving koji for now because once the API is decided we can just copy-paste-edit to make it analogous to the copr endpoint.
- I went for this apprach
```
PR 2
-- Copr Builds
-- Test Runs
PR 1
-- Copr Builds
-- Test Runs
```
rather than separate endpoint for all builds and all test runs of a project because:
a) data is more structured this way (Project Page - PRs, Branches, Releases, Issues subsections)
b) it was way way easier to obtain data this way than go through unknown hurdles for every item (jobtriggermodel 👿👿 )",True,716,https://api.github.com/repos/packit/packit-service/pulls/716,https://github.com/packit/packit-service/pull/716,closed,408,50,6,4,6,31,2,0,"[{'name': 'mergeit'}, {'name': 'GSOC'}]",2020-07-06 17:02:55+00:00,2020-07-10 07:12:30+00:00,310175.0,"3 days, 14:09:35","[{'comment_id': 450646321, 'comment_body': 'hm :thinking: ', 'comment_created': datetime.datetime(2020, 7, 7, 6, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 450646538, 'comment_body': 'hm hm :thinking: ', 'comment_created': datetime.datetime(2020, 7, 7, 6, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 450646692, 'comment_body': 'hm hm hm :thinking: ', 'comment_created': datetime.datetime(2020, 7, 7, 6, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 450646976, 'comment_body': '```suggestion\r\nns = Namespace(""projects"", description=""Repositories which have Packit Service enabled."")\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 6, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 450650362, 'comment_body': ""I would say there is no need to includ the `_range` suffix here and in the name of the following method. Method names don't need to tell anything about what arguments they take, so it's fine to just have `get_projects` and `get_project_prs`."", 'comment_created': datetime.datetime(2020, 7, 7, 7, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 450651738, 'comment_body': 'Relying on `namespace` and `repo_name` is going to be problematic as we start running Packit Service on more and more forges, as we might have projects stored in the same namespace and a repo called the same way but on different forges.\r\n\r\nI see to ways to improve this:\r\n- use `git_projects.id` here directly OR\r\n- introduce a `forge` argument—but `GitProjectModel` is missing this field, so for this to work, that should be introduced first.', 'comment_created': datetime.datetime(2020, 7, 7, 7, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 450654300, 'comment_body': '```suggestion\r\n    @ns.response(HTTPStatus.PARTIAL_CONTENT, ""Copr-build list follows"")\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 7, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 450655073, 'comment_body': ""Let's also document the return type, pls :)"", 'comment_created': datetime.datetime(2020, 7, 7, 7, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 450657240, 'comment_body': 'Do you happen to know what will be the performance of this on the database side?', 'comment_created': datetime.datetime(2020, 7, 7, 7, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 450674406, 'comment_body': 'I am thinking if this is anyhow useful. (And those are only prs, issues, releases saved by packit, not all of them..)', 'comment_created': datetime.datetime(2020, 7, 7, 7, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 450675421, 'comment_body': 'Forgot to remove this. Will undo before its ready to merge. \r\nmodels.py is huge and I get lost looking for things, even with search.', 'comment_created': datetime.datetime(2020, 7, 7, 7, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 450677668, 'comment_body': 'Its fast on a super weak single core vm with the entire prod db dump you sent me. But its not running any other background tasks unlike the actual deployment which might be processing multiple jobs in the background.', 'comment_created': datetime.datetime(2020, 7, 7, 7, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 450677819, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2020, 7, 7, 7, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 450682061, 'comment_body': 'Youre right, namespace/repo_name isnt unique enough. I didnt think of other forges.\r\n\r\n> introduce a forge argument—but GitProjectModel is missing this field, so for this to work, that should be introduced first.\r\n\r\nIdeal. \r\nBut this will involve labelling all previous data as well (or maybe default to github) and might end up being too much work.\r\n\r\n> use git_projects.id here directly OR\r\n\r\nQuick and easy but your point in the first message stands. Prolly needs to be discussed.', 'comment_created': datetime.datetime(2020, 7, 7, 8, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 450686669, 'comment_body': '> I am thinking if this is anyhow useful.\r\n\r\nI thought this will give some quick overview about how active and how often a project uses packit-service in the all projects page. ', 'comment_created': datetime.datetime(2020, 7, 7, 8, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 450793683, 'comment_body': ""OK, so some kind of statistics?\r\n\r\n- I would just make sure it's about packit-served entities, not the upstream ones.\r\n- What about having this only for one-project view. OR, do we want to have the same content?"", 'comment_created': datetime.datetime(2020, 7, 7, 11, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 450835487, 'comment_body': ""The use of this endpoint is to populate the [projects page](https://dashboard.packit.dev/projects) on the Dashboard, which we planned to be a list of projects and displaying also some high level statistics of those projects. This is where this data should fit, allowing one to have a high level overview of how much and what kind of work Packit was doing on which projects.\r\n\r\nFrom this page one will be able to navigate to the projects individual information page which will display the list of PRs, releases, branches and issues that Packit handled.\r\n\r\n> I would just make sure it's about packit-served entities, not the upstream ones.\r\n\r\n`project` is of type `GitProjectModel`, so yes, these are Packit-served entities not the upstream ones."", 'comment_created': datetime.datetime(2020, 7, 7, 12, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 450836923, 'comment_body': ""Do we need these statistics on the all projects view? If we do, then lets keep this, otherwise we'll remove it. IDK.\r\n"", 'comment_created': datetime.datetime(2020, 7, 7, 12, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 450838179, 'comment_body': ""> Do we need these statistics on the all projects view? If we do, then lets keep this, otherwise we'll remove it. IDK.\r\n\r\nI say, yes, we need this information."", 'comment_created': datetime.datetime(2020, 7, 7, 12, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 450856571, 'comment_body': ""> From this page one will be able to navigate to the projects individual information page which will display the list of PRs, releases, branches and issues that Packit handled.\r\n\r\nThat makes sense.\r\n\r\n> `project` is of type `GitProjectModel`, so yes, these are Packit-served entities not the upstream ones.\r\n\r\n- I know that, but it does not need to be clear for others. (To not need to dig into the code. The database structure can be hidden behind the API. We might want to use API without knowing about the database.)\r\n- I know the API's only user is dashboard now but we can make it in a way that makes sense in general. (Please, don't couple the API and dashboard more than necessary. The API should make sense also alone.)\r\n\r\nWhat about this:\r\n- Use explicit attribute names in the responses and/or\r\n- document the API endpoint (to see it in the main API page; i.e. https://stg.packit.dev/api/), not sure how easy it is to describe results more precisely."", 'comment_created': datetime.datetime(2020, 7, 7, 13, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 450863636, 'comment_body': ""Do I understand it correctly that the thing you want to improve is the naming/documentation of the `num_*` fields?\r\n\r\nWould rename them to `*_handled` improve the situation? Like: `prs_handled`, `branches_handled`, `releases_handled`, `issues_handled`?\r\n\r\nI think documenting responses is possible with Swagger, but we might need to define a schema for that. I would say that's out of scope for this PR."", 'comment_created': datetime.datetime(2020, 7, 7, 13, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 450877608, 'comment_body': ""Exactly.\r\n\r\nAnd originally, I was concerned about usefulness of the values what you've explained.\r\n\r\nThanks."", 'comment_created': datetime.datetime(2020, 7, 7, 13, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 451593367, 'comment_body': 'Remove or make it a log.', 'comment_created': datetime.datetime(2020, 7, 8, 14, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 451599296, 'comment_body': ""[Reading about this](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204), I'm not sure `NO_CONTENT` is the right status here. Maybe return and empty JSON-list with `OK`?"", 'comment_created': datetime.datetime(2020, 7, 8, 14, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 451602807, 'comment_body': 'Sure, thanks.', 'comment_created': datetime.datetime(2020, 7, 8, 14, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 452208094, 'comment_body': 'Could we have this the python way and make them doc-string? :)\r\n\r\nIirc, this is how Go makes comments on functions, but in Python this should really be a doc-string.', 'comment_created': datetime.datetime(2020, 7, 9, 13, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 452208456, 'comment_body': 'Do you want to update this?', 'comment_created': datetime.datetime(2020, 7, 9, 13, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 452251172, 'comment_body': 'We should add another `@ns.response` decorator to document this return value.', 'comment_created': datetime.datetime(2020, 7, 9, 14, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 452251774, 'comment_body': 'I think the `if`-part is not needed here, if there are no PRs, this method will return earlier.', 'comment_created': datetime.datetime(2020, 7, 9, 14, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 452255475, 'comment_body': 'No `if` needed (same as above).', 'comment_created': datetime.datetime(2020, 7, 9, 14, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 452255811, 'comment_body': 'No `if` needed, same as above.', 'comment_created': datetime.datetime(2020, 7, 9, 14, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}]","[{'commit_sha': '23cc509ebbe8dbf3d9be51f3b407ffd4b711333d', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d2599116317eccf849920465f075dbf13f79570', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86a3a39c5b88cad64c5a996507768a9f3d9e8fc6', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46590c9f0886b9e49dd2d0644536ac780c1474a1', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
452684054,Add /api/project/.../branches endpoint,,True,746,https://api.github.com/repos/packit/packit-service/pulls/746,https://github.com/packit/packit-service/pull/746,closed,109,4,4,2,6,5,2,0,"[{'name': 'mergeit'}, {'name': 'GSOC'}]",2020-07-19 17:45:50+00:00,2020-07-22 10:33:06+00:00,233236.0,"2 days, 16:47:16","[{'comment_id': 457357969, 'comment_body': ""These will create branch build and branch test run entries in the DB, even if the branch builds are not configured for a given repo. Is this okay? Shouldn't we use a plain `get` here instead?"", 'comment_created': datetime.datetime(2020, 7, 20, 12, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 457358709, 'comment_body': 'You could call this only `branches`, to make things simpler.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 457359812, 'comment_body': 'Is a recording needed for this?', 'comment_created': datetime.datetime(2020, 7, 20, 12, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 457363631, 'comment_body': 'I want to blame autocomplete.\r\nThis should be _a_copr_build_for_branch_push_ but I guess tests still pass because SampleValues.branch is same for both  _a_copr_build_for_branch_push_ and  _a_koji_build_for_branch_push_\r\n\r\nWait, but no. Im not sure why koji also makes it pass', 'comment_created': datetime.datetime(2020, 7, 20, 13, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 457365755, 'comment_body': 'Okay.', 'comment_created': datetime.datetime(2020, 7, 20, 13, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': '7d79aa952401ec02a4279c4e98026bb1bee8674d', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '003674fd89a70d3f28c01fa4c151a2be0f88ba50', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
455530727,Revert JobTriggerModel.get(...),Introduced in #746 based on my incorrect understanding of JobTriggerModel.,True,748,https://api.github.com/repos/packit/packit-service/pulls/748,https://github.com/packit/packit-service/pull/748,closed,4,15,1,1,1,2,2,0,"[{'name': 'mergeit'}, {'name': 'GSOC'}]",2020-07-23 07:35:27+00:00,2020-07-23 10:51:05+00:00,11738.0,3:15:38,"[{'comment_id': 459267213, 'comment_body': 'Was this intentional?', 'comment_created': datetime.datetime(2020, 7, 23, 7, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 459268878, 'comment_body': 'Yes because master branch is more likely to have builds (ex. packit-master) than other branches. And it almost always has a lower id than the other branches. So I thought lets just show them in ascending order so that master is at the top.', 'comment_created': datetime.datetime(2020, 7, 23, 7, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': 'c6ffc15aa41255458663ca18069b4c131467a638', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
456714711,Misc API Changes,,True,754,https://api.github.com/repos/packit/packit-service/pulls/754,https://github.com/packit/packit-service/pull/754,closed,208,85,7,6,12,18,4,0,"[{'name': 'ready-for-review'}, {'name': 'mergeit'}, {'name': 'GSOC'}, {'name': 'API'}]",2020-07-26 07:34:46+00:00,2020-07-31 08:02:39+00:00,433673.0,"5 days, 0:27:53","[{'comment_id': 460739307, 'comment_body': 'Hm.... wouldn\'t ""not found"" be a better response here? Why was ""no content"" used in the previous implementation?', 'comment_created': datetime.datetime(2020, 7, 27, 8, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 460740898, 'comment_body': 'Doing like this it might make future updates cumbersome, as it would force us to update this method whenever we want to add a new optional header.\r\n\r\nHow about `response_maker` adding only the common headers and let the individual API endpoints to complete that with anything other they need and explicitly set the status code?', 'comment_created': datetime.datetime(2020, 7, 27, 8, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 460741469, 'comment_body': 'Shouldn\'t this be ""not found"" instead?', 'comment_created': datetime.datetime(2020, 7, 27, 8, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 460756922, 'comment_body': 'This returns a response so instead of calling it like\r\n`return response_maker(params.....)` \r\nwe can add additional headers by doing\r\n\r\n```\r\nresponse = response_maker(params.....)\r\nresponse.headers[""something""] = ""blah blah""\r\nreturn response\r\n```', 'comment_created': datetime.datetime(2020, 7, 27, 9, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 460760168, 'comment_body': ""yes, exactly, and this is why I'm saying to remove the `content_range` argument and rather add it when it's needed :)"", 'comment_created': datetime.datetime(2020, 7, 27, 9, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 460762587, 'comment_body': '> Why was ""no content"" used in the previous implementation?\r\n\r\nYes, previous implementation was wrong, no content should not be used here.\r\n\r\nAlso, from what Ive read its a good practice to have the same json structure at the same endpoint.\r\nSo an empty list here makes more sense compared to an error message.  \r\n\r\nSimilar case here https://softwareengineering.stackexchange.com/a/358245', 'comment_created': datetime.datetime(2020, 7, 27, 9, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 460765983, 'comment_body': 'Oh yeah 🤦', 'comment_created': datetime.datetime(2020, 7, 27, 9, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 461388858, 'comment_body': 'We already have a function for that in OGR you can use:\r\nhttps://github.com/packit-service/ogr/blob/734469539cba2e982a4611a8cfcd56eac7bcde13/ogr/parsing.py#L75', 'comment_created': datetime.datetime(2020, 7, 28, 7, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 461392351, 'comment_body': ""Can we return early for this `else` branch, please?\r\n\r\n```python\r\nif not bool(builds_list.first()):\r\n    return response_maker([])\r\n\r\nbuild = builds_list[0]\r\n:\r\n```\r\n\r\nIt's more readable if we can get rid of the other condition's branch and not need to remember it. Also, we save another level of spaces on the left.\r\n"", 'comment_created': datetime.datetime(2020, 7, 28, 8, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 461461501, 'comment_body': ""Are you sure this would be the right usage for that function? What would be the additional benefit? It's only the domain name that's needed here, `parse_git_repo` returns many other things which would not be used here."", 'comment_created': datetime.datetime(2020, 7, 28, 9, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 461468933, 'comment_body': ""`urlparse` needs to parse more things as well.\r\n\r\nBenefits?\r\n\r\n- Reusing our own code. Having the same way to get this info across the code-base. (We already use it in `packit`/`packit-service`.)\r\n- I've been confused about the `netloc` name. =>  `hostname` looks more clear to me\r\n- Dogfooding."", 'comment_created': datetime.datetime(2020, 7, 28, 10, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 461479672, 'comment_body': ""> * Reusing our own code. Having the same way to get this info across the code-base. (We already use it in `packit`/`packit-service`.)\r\n\r\nThat code would do the same thing as this code. Again: what's the benefit?\r\n\r\n> * I've been confused about the `netloc` name. =>  `hostname` looks more clear to me\r\n\r\nAnd you were rightly so: we should probably use `hostname` here, instead of `netloc`. Nice catch! :rocket: \r\n\r\n> * Dogfooding.\r\n\r\nI would say that calling a function to call a library function is and extra step, which should be removed :slightly_smiling_face: \r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 28, 10, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 461490115, 'comment_body': ""> That code would do the same thing as this code. Again: what's the benefit?\r\n\r\nIt's nearly the same, so we can choose both. I already wrote three benefits. We have multiple occurrences of the URL parsing -- some use more and some less of that function/class. My suggestion was to use the same function for all to be consistent.\r\n\r\nThat was meant as a suggestion of alternative approach. I don't care what we choose. My main problem was with the property name."", 'comment_created': datetime.datetime(2020, 7, 28, 10, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 462735242, 'comment_body': 'Sure 👍', 'comment_created': datetime.datetime(2020, 7, 30, 4, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 462962161, 'comment_body': '`__choose_project` already returns `None`. Could this just `return project`—without the conditional?', 'comment_created': datetime.datetime(2020, 7, 30, 12, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 462965104, 'comment_body': 'This should set ""NOT_FOUND"", right?', 'comment_created': datetime.datetime(2020, 7, 30, 12, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 462970710, 'comment_body': 'Again: should 404 be set?', 'comment_created': datetime.datetime(2020, 7, 30, 12, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 463090452, 'comment_body': 'Fixed all of them', 'comment_created': datetime.datetime(2020, 7, 30, 15, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': 'f3327c13770a9e20ffa3201e0ea860d65a38525f', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2453655625b37ce6c158d19099aec6236b92c6d8', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a7dd195037c29e9ef4b70182eaa6433da42c45e', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62ce1bcacf1842c33a852eea82faa24674472a8f', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67c82d4b949859424c2aab534b5ece5a4921a391', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c998b8084665f3e384a5ecb2a4ef0bf9d22cf569', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
462980531,Use integer response code values,"Thanks to @Stranger6667   for reporting it in https://github.com/packit/packit-service/issues/368#issuecomment-668556357

Basically we were sending and documenting the response status object instead of the integer code as [required by RestX](https://flask-restx.readthedocs.io/en/latest/swagger.html?highlight=response#documenting-with-the-api-response-decorator) and the return value to a view [should also have](https://flask.palletsprojects.com/en/1.1.x/api/#flask.make_response) an integer code as status.

https://docs.python.org/3/library/http.html",True,766,https://api.github.com/repos/packit/packit-service/pulls/766,https://github.com/packit/packit-service/pull/766,closed,52,33,10,1,7,0,2,0,"[{'name': 'ready-for-review'}, {'name': 'mergeit'}]",2020-08-04 20:05:53+00:00,2020-08-06 13:02:37+00:00,147404.0,"1 day, 16:56:44",[],"[{'commit_sha': 'b17064cededcc7a4a66d8d706f313c020d6af43c', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
463635027,Link SRPMBuildModel to JobTriggerModel,"- [x] Link SRPMBuildModel to JobTriggerModel (schema migration)
- [x] Copr trigger_ids from CoprBuildModel to SRPMBuildModel
- [x] Update tests

Rn, theres no way of accessing which project an SRPM build belongs to. Theyre only linked to CoprBuildModel. I've linked them to JobTriggerModel so that we get their GitProject and other things.

Note that I have zero idea of what Im doing so there might be obvious flaws here but this seems to be working. I was able to successfully complete a copr build from a pull request on my fork of packit/hello-world and then access the git project using something like
`session.query(SRPMBuildModel).order_by(desc(SRPMBuildModel.id)).all()[0].get_project()`
",True,768,https://api.github.com/repos/packit/packit-service/pulls/768,https://github.com/packit/packit-service/pull/768,closed,258,7,6,3,16,13,3,0,"[{'name': 'ready-for-review'}, {'name': 'mergeit'}, {'name': 'area/database'}]",2020-08-05 20:48:57+00:00,2020-08-11 09:57:36+00:00,479319.0,"5 days, 13:08:39","[{'comment_id': 465996050, 'comment_body': 'Should this be converted to get_or_create style or is only create fine ?\r\nIf so, how and why?', 'comment_created': datetime.datetime(2020, 8, 5, 20, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 466179327, 'comment_body': 'Could some of the current values be populated with the corresponding `job_trigger_id` from the `copr_builds` table?', 'comment_created': datetime.datetime(2020, 8, 6, 6, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 466194123, 'comment_body': 'Yes, I can make a script to copy those over but someone will have to run it manually', 'comment_created': datetime.datetime(2020, 8, 6, 7, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 466200736, 'comment_body': ""Wait, cannot this be done as part of the migration? I'm no expert in this, just asking :thinking: "", 'comment_created': datetime.datetime(2020, 8, 6, 7, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 466211532, 'comment_body': ""I dont know. This migration was autogenerated but can be manually tweaked, not sure if we're allowed to do any random python code here.\r\n\r\nI was thinking of something like:\r\n```\r\nbuilds = CoprBuildModel.get_merged_chroots()\r\nfor build in builds:\r\n    project_details = build.project\r\n    srpm_build = build.srpm_build\r\n    <create a trigger, but now that i think of it, i have no idea how to do it this way either>\r\n\r\n```\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 6, 7, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 466322085, 'comment_body': '@lbarcziova any advice how to do this? IIRC you did something like this in the past.', 'comment_created': datetime.datetime(2020, 8, 6, 10, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 466327944, 'comment_body': 'Do you mean something like [this](https://github.com/packit/packit-service/blob/362302f08d54a0de3fee028ae6a01881569bb5f6/alembic/versions/c6250555a36c_.py#L282) or [this](https://github.com/packit/packit-service/blob/362302f08d54a0de3fee028ae6a01881569bb5f6/alembic/versions/d90948124e46_add_tables_for_triggers_koji_and_tests.py#L277) ?', 'comment_created': datetime.datetime(2020, 8, 6, 10, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lbarcziova', 'type': 'User'}, {'comment_id': 466328139, 'comment_body': '@TomasTomecek ping :smiley: ', 'comment_created': datetime.datetime(2020, 8, 6, 10, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 466330370, 'comment_body': ""Yes, that's what we are looking for. Do you have some place in the docs we could learn more about this? I wasn't able to find anything."", 'comment_created': datetime.datetime(2020, 8, 6, 10, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 466402330, 'comment_body': ""I am used to django's API, hence the get_or_create methods; this project is the first time I work with flask/SA more.\r\n\r\nIf it's needed somewhere in the code, feel free to implement get_or_create, if not, we can have `create` only, that's fine. Since we don't update them, afaik, create should be perfectly fine.\r\n"", 'comment_created': datetime.datetime(2020, 8, 6, 13, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 466460716, 'comment_body': 'When I was implementing it, these were helpful to read: \r\nhttps://stackoverflow.com/questions/24612395/how-do-i-execute-inserts-and-updates-in-an-alembic-upgrade-script\r\nhttp://ominian.com/2019/07/11/data-migration-with-sqlalchemy-and-alembic/', 'comment_created': datetime.datetime(2020, 8, 6, 14, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lbarcziova', 'type': 'User'}, {'comment_id': 466855528, 'comment_body': ""I agree here with Laura, you can easily do that in the migration script like we do in those two files. Just don't forget to define models also in the migration script so we preserve the state of the model which corresponds to the state the migration is done. (Those models can have only a subset of attributes -- only those you need.)"", 'comment_created': datetime.datetime(2020, 8, 7, 6, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 466858404, 'comment_body': 'Thanks @lbarcziova @lachmanfrantisek ', 'comment_created': datetime.datetime(2020, 8, 7, 7, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': 'a7b0647a60a3ec83eb7feea8d04196a7164b854f', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '037be9663980a8c57b2359a1d6baed2d0c02788d', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b146979bc33f892a6cb55916cbeed0b20b2b47fe', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
466647682,Add /api/srpm-builds endpoint,Also updated /project/.../prs and /project/.../branches to include srpmbuilds.,True,775,https://api.github.com/repos/packit/packit-service/pulls/775,https://github.com/packit/packit-service/pull/775,closed,148,4,6,2,9,5,3,0,"[{'name': 'ready-for-review'}, {'name': 'mergeit'}, {'name': 'GSOC'}]",2020-08-12 09:36:57+00:00,2020-08-13 16:11:57+00:00,110100.0,"1 day, 6:35:00","[{'comment_id': 469753025, 'comment_body': 'is this really meant to be empty?', 'comment_created': datetime.datetime(2020, 8, 13, 7, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 469753837, 'comment_body': 'please add the license thingy up here ^', 'comment_created': datetime.datetime(2020, 8, 13, 7, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 469757567, 'comment_body': 'Okay', 'comment_created': datetime.datetime(2020, 8, 13, 7, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 469759065, 'comment_body': ""Yes, because this namespace is at '/api/srpm-builds' we want it to be available at  '/' here"", 'comment_created': datetime.datetime(2020, 8, 13, 7, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 470005757, 'comment_body': ""hm, we don't have the shortened version Hunor was working on here? nvm"", 'comment_created': datetime.datetime(2020, 8, 13, 14, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}]","[{'commit_sha': '76fa5ca66239386da4b5ada624190e4802543f71', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5e3914e09728eed4a1441c279ea55a3516724bb', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
472958922,Fix crash in /api/srpm-builds if job trigger doesnt exist,"Also added a couple more attributes to SRPMBuildModel

fixes #782",True,788,https://api.github.com/repos/packit/packit-service/pulls/788,https://github.com/packit/packit-service/pull/788,closed,39,6,6,2,3,2,1,0,[{'name': 'mergeit'}],2020-08-25 05:57:04+00:00,2020-08-25 09:30:12+00:00,12788.0,3:33:08,"[{'comment_id': 476234205, 'comment_body': 'Why are these tuples?', 'comment_created': datetime.datetime(2020, 8, 25, 7, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 476246095, 'comment_body': 'Not sure how this happened 👀\r\nThis also broke tests.', 'comment_created': datetime.datetime(2020, 8, 25, 7, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': 'cb4d5c5b5d2437bf694ac22efbf93bc2d000046f', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65b01bf8dc2d31316ce69d14e3e00a520e2f6a94', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
475312031,Make the koji builds endpoint more consistent with the copr endpoint,,True,791,https://api.github.com/repos/packit/packit-service/pulls/791,https://github.com/packit/packit-service/pull/791,closed,92,62,4,1,11,2,2,0,"[{'name': 'ready-for-review'}, {'name': 'mergeit'}]",2020-08-28 10:03:46+00:00,2020-09-02 08:12:21+00:00,425315.0,"4 days, 22:08:35","[{'comment_id': 480897416, 'comment_body': 'Could you take the ""early return"" approach here? Return early with `NOT_FOUND` if there is nothing in `builds_list`.\r\n\r\nAnd maybe the `bool()` is not necessary.\r\n\r\n(I know this is not strictly related to this PR, but if you touch this part anyways, let\'s fix it :slightly_smiling_face:)', 'comment_created': datetime.datetime(2020, 9, 1, 7, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 480904224, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2020, 9, 1, 7, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': 'f89bc906bf2490f42ad0ddb78887910d22661e41', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
378737928,Add Copr Builds to the dashboard.,"I added recent copr builds to the dashboard. Right now it only shows the recent ones because fetching all of them triggers issue #5 
I plan to add a button to load older builds as well so that it doesn't fetch too much data in one go.

The table can be sorted and filtered by project name, build status, etc thanks to datatables. (no additional dependencies, patternfly already has it as dependency)

![Screenshot_2020-02-24 Screenshot(2)](https://user-images.githubusercontent.com/18102790/75117869-6bfec600-569b-11ea-9202-304990524e14.png)

",True,9,https://api.github.com/repos/packit/dashboard/pulls/9,https://github.com/packit/dashboard/pull/9,closed,145,43,3,2,6,6,1,0,[{'name': 'GSOC'}],2020-02-23 18:51:31+00:00,2020-02-25 16:55:00+00:00,165809.0,"1 day, 22:03:29","[{'comment_id': 383222745, 'comment_body': 'Sorting with the `target` does not make sense -- is it possible to turn it off or use some checkboxes? (We can improve that later.)', 'comment_created': datetime.datetime(2020, 2, 24, 11, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 383222927, 'comment_body': 'Can we add some date+time to be able to get the original order easily? (And also to have that info?)', 'comment_created': datetime.datetime(2020, 2, 24, 11, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 383462448, 'comment_body': ""Yeah sure. I'll disable it for chroots"", 'comment_created': datetime.datetime(2020, 2, 24, 19, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 383471691, 'comment_body': 'Hey, thanks for the review!\r\n\r\nI may be wrong but I think as of now the packet-service api does not provide the build data/time so we should create a new issue in the [packet-service repo](https://github.com/packit-service/packit-service) for it.\r\nSame goes for the link to the PR that triggers a new build.\r\nI guess we can add a link to the repo of concerning project but even that has limited use considering that many builds do not provide a build id and without that we cannot make a request for the repo link.\r\n\r\nEdit: I just realized that it does provide the PR id, so yes we can implement it.', 'comment_created': datetime.datetime(2020, 2, 24, 19, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 383668663, 'comment_body': 'Please, create an issue for that.\r\n\r\nWe are currently switching to the ""real"" database, and we can have there what we need.\r\n..;)\r\n\r\n- [ ] Data needs to be saved in the database.\r\n- [ ] The relevant info needs to be accessible via API.', 'comment_created': datetime.datetime(2020, 2, 25, 5, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 383905729, 'comment_body': '@lachmanfrantisek Created packit-service/packit-service#425', 'comment_created': datetime.datetime(2020, 2, 25, 14, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': '24fb78bf567ddbc1ef72a1725a19ff60b619336b', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dca622f15ae3edebafc37056ffd3e4711c01107e', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
383491729,Display a list of projects instead of the raw python object,"- Replaced the raw object in the projects tab with a list. 
- I also ran black on the entire repo so some code was reformatted.
- Replaced the hardcoded word ""information"" (which was shown in every tab) with respective headers for each tab.

![Screenshot_2020-03-04 Screenshot](https://user-images.githubusercontent.com/18102790/75874634-275ff100-5e38-11ea-88f4-fd9854d93156.png)
",True,20,https://api.github.com/repos/packit/dashboard/pulls/20,https://github.com/packit/dashboard/pull/20,closed,62,30,4,3,2,0,0,0,[],2020-03-04 11:21:14+00:00,2020-03-05 10:18:23+00:00,82629.0,22:57:09,[],"[{'commit_sha': 'bd26480459bf8b55d938bc8a4a0d9fc5a89e1dc5', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f763dcfc0354b69a940097389c2758f5122b37e', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00bb4e99cbe29bad71ce9d8dd562fb130f27aff1', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
384829008,Modularize project with flask blueprints,"So before I start working on #21 we need a proper project structure. We can't just keep adding code to one python file. So I used flask blueprints to split the app into blueprints (which are also subpackages). 
",True,24,https://api.github.com/repos/packit/dashboard/pulls/24,https://github.com/packit/dashboard/pull/24,closed,148,105,14,1,1,0,1,0,[{'name': 'GSOC'}],2020-03-06 13:46:28+00:00,2020-03-06 16:50:43+00:00,11055.0,3:04:15,[],"[{'commit_sha': 'c7e8c3937c6970d48b436ab36956ca47d5638279', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
385775340,"Add unit tests, make a dockerfile for running tests, and modify makefile to run them.",Hopefully fixes #21 ,True,25,https://api.github.com/repos/packit/dashboard/pulls/25,https://github.com/packit/dashboard/pull/25,closed,3277,1,17,3,15,11,0,0,[],2020-03-09 19:27:16+00:00,2020-03-16 11:04:01+00:00,574605.0,"6 days, 15:36:45","[{'comment_id': 390153068, 'comment_body': 'please run this one together with the other playbook: since it installs packages, it will take a long time and will run after any code change - we want to prevent such thing and run it as soon as possible in the dockerfile', 'comment_created': datetime.datetime(2020, 3, 10, 8, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 390154456, 'comment_body': 'we actually have a project for similar use case: https://github.com/packit-service/requre, you can see it used a lot in the ogr project of ours', 'comment_created': datetime.datetime(2020, 3, 10, 8, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 390435622, 'comment_body': 'Run this as in move this line afew places up or something else?', 'comment_created': datetime.datetime(2020, 3, 10, 16, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 390495216, 'comment_body': 'Yes, squash it with the first `RUN` please.', 'comment_created': datetime.datetime(2020, 3, 10, 17, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jpopelka', 'type': 'User'}, {'comment_id': 390918601, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 3, 11, 11, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 391049706, 'comment_body': '@csomh @lachmanfrantisek I will leave the decision for this to you :)', 'comment_created': datetime.datetime(2020, 3, 11, 15, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 391071565, 'comment_body': 'We probably want to have similar tooling across all the projects => that means to try requre here.', 'comment_created': datetime.datetime(2020, 3, 11, 15, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 391081878, 'comment_body': 'Okay. Will redo this with requre tomorrow ', 'comment_created': datetime.datetime(2020, 3, 11, 16, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 392146735, 'comment_body': 'Hey @IceWreck,\r\n\r\nPlease see [this ogr test](https://github.com/packit-service/ogr/blob/master/tests/integration/test_pagure.py) as an example for how to write a test with requre.\r\n\r\n@lachmanfrantisek could you please help me (and @IceWreck) find some docs about how to use requre. Things like how to run the tests in *recording* or *replay* mode, who to set the location for the captured data.', 'comment_created': datetime.datetime(2020, 3, 13, 10, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 392265148, 'comment_body': ""> find some docs about how to use requre\r\n\r\nRequre has docs site: https://requre.readthedocs.io/en/latest/ (@jscotka, is it up-to-date?)\r\nTests in ogr are good examples of the usage -- see the [tests/integration/\\__init__.py](https://github.com/packit-service/ogr/blob/master/tests/integration/__init__.py) for the definition of the rewrite system and the  [subclasses](https://github.com/packit-service/ogr/blob/master/tests/integration/test_pagure.py#L12) of the `RequreTestCase` for the real tests.\r\n\r\n>  who to set the location for the captured data.\r\n\r\nIf you use the `RequreTestCase`, this will be handled automatically.\r\n\r\n----\r\n\r\nMore info about (re)generation can be found in the ogr's [contribution guide](https://github.com/packit-service/ogr/blob/master/CONTRIBUTING.md#testing)."", 'comment_created': datetime.datetime(2020, 3, 13, 14, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 392404039, 'comment_body': '@csomh @lachmanfrantisek got it working! Thanks!', 'comment_created': datetime.datetime(2020, 3, 13, 18, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': 'a036a5a2ca1d418bc1e372ee0276cb92a4c1db79', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98b923b9146ca559bd2facb4bbbf2680f5bd9f2a', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71bd714479834525854bc905616ce5a5ddf7f7e8', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
427873212,Basic Setup,"Okay, this is a huge PR. I tried to document/explain how it works but lots of it is left. Ask me wherever its unclear about whats happening.

I removed (commented out) a test (reasons in a comment inside the test.py file). Recreating it would add 50,000+ lines and possibly trigger packit-service/packit-service#633
The function which it tests isnt even being used right now. One thing I can do to fix it is create a fake api with pagination to run requre once but that will be an issue again when someone needs to recreate the test.


The minified css + js bundle right now is 300KB but the same file is 9MB in development mode.
We can do two things for deployment:

- remove that file (static/dist/) from gitignore and every person who commits to this repo has to run `make transpile-prod` before committing.
- or we can continue installing all developement dependencies and make our production build in the container image itself (and maybe remove npm/yarn, node_modules etc once we have our transpiled js/css to make the comtainer image leaner)


Maybe we should not merge this right now because 
- I need to update the ansible recipe for creating that production build inside the container (will do later today)
- I removed functionality but havent added in anything so maybe leave this unmerged until it does something instead of being a boilerplate.",True,39,https://api.github.com/repos/packit/dashboard/pulls/39,https://github.com/packit/dashboard/pull/39,closed,555,3540,40,9,10,0,0,0,[],2020-06-04 14:21:24+00:00,2020-06-16 10:35:01+00:00,1023217.0,"11 days, 20:13:37",[],"[{'commit_sha': 'b49eca3930d89a01b9020b0e28f5c44aa82e7bb5', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '198a58f945255f5e47a8f1f0f18d07b056a62cc2', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bee8da4e5d1a7ac5d4dccb69b67d82cc9bf7229', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01c498821c59ebb1300c52bc5664e7788d095b92', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '321df9e1aed1ebe25c12c364e0f9eebf9cf36c15', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3bdf51405326515fe9793c32fe2fdc894d4d717', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7f899f65256224553bd94668bc8531f842ba242', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a74c837bb46501ac7671f025543ee722eb379cd8', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45ece3917b65765bc67c4f11509edbc3706d2a12', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
439065906,Jobs Page,[Screenshare](https://cloud.abifog.com/f/dc4f8d950e52459f89ea/),True,43,https://api.github.com/repos/packit/dashboard/pulls/43,https://github.com/packit/dashboard/pull/43,closed,519,28,17,6,9,15,0,0,[],2020-06-24 09:02:21+00:00,2020-06-26 10:04:19+00:00,176518.0,"2 days, 1:01:58","[{'comment_id': 445453858, 'comment_body': '```suggestion\r\n            logo={<Brand src={packitLogo} alt=""Packit Logo"" />}\r\n```', 'comment_created': datetime.datetime(2020, 6, 25, 10, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 445509695, 'comment_body': 'Would it be possible to remove ""Success"" from here, either by moving it to some HTML accessibility attribute, or just making it hidden?', 'comment_created': datetime.datetime(2020, 6, 25, 12, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 445512034, 'comment_body': 'As discussed, would be cool if this could be reworked as follows:\r\n\r\nPR | Chroots | Time Submitted | Build ID\r\n------|----|---|----\r\nnamespace/repository#prid (and linking to weburl) | chroots | time | build id', 'comment_created': datetime.datetime(2020, 6, 25, 12, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 445512622, 'comment_body': 'If possible factor out these two blocks as they show up in the Testing Farm result page too.', 'comment_created': datetime.datetime(2020, 6, 25, 12, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 445513497, 'comment_body': ""I feel that doing caching in the API would be a more robust solution on the long run. For now, let's keep it this way, though."", 'comment_created': datetime.datetime(2020, 6, 25, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 445984437, 'comment_body': ""Yeah. However, the downside of caching the API in packit-service is that we won't be able to get new uncached info even if we want to"", 'comment_created': datetime.datetime(2020, 6, 26, 6, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 446009857, 'comment_body': 'Why is using `title` here and in the next field required?', 'comment_created': datetime.datetime(2020, 6, 26, 7, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 446009951, 'comment_body': '```suggestion\r\n        { title: ""PR"", transforms: [sortable] },\r\n```', 'comment_created': datetime.datetime(2020, 6, 26, 7, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 446010124, 'comment_body': 'Reverse:\r\n\r\n```suggestion\r\n        { title: ""Time Submitted"", transforms: [sortable] },\r\n        { title: ""Build ID"", transforms: [sortable] },\r\n```', 'comment_created': datetime.datetime(2020, 6, 26, 7, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 446010570, 'comment_body': ""Isn't this going to take up too much space? I would suggest to remove it for now in order to keep the table simple and clean."", 'comment_created': datetime.datetime(2020, 6, 26, 7, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 446022982, 'comment_body': 'It takes around a quarter of the total space but since we merged Namespace/Repo#PR and removed Success/Failure in favour of color coding + tooltips we had a lot of empty space left so I added ref.\r\n![Screenshot_2020-06-26 Packit Service](https://user-images.githubusercontent.com/18102790/85833360-3d127100-b7af-11ea-90a9-4519ea098764.png)\r\n', 'comment_created': datetime.datetime(2020, 6, 26, 7, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 446023356, 'comment_body': 'Let me check...\r\n\r\nEdit: \r\n@csomh I was not sure about this so I tested it and removing it works in the first one but not the second one. Turns out that `{title: (<whatever content here>)}` is required for react components but optional if the content is just html or plaintext.\r\n\r\nSo should I remove it in the first case or keep it in both\r\n\r\nEdit 2:\r\nNested HTML isnt working either. So we should keep it', 'comment_created': datetime.datetime(2020, 6, 26, 7, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 446035595, 'comment_body': ""What about having only the first `n` characters? (E.g. with `git` commits, it's common to use only first `8` characters.)\r\n\r\nBut we can have also long branch names here, don't we? So use some prefix with ellipsis for long refs?"", 'comment_created': datetime.datetime(2020, 6, 26, 8, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lachmanfrantisek', 'type': 'User'}, {'comment_id': 446053234, 'comment_body': 'Empty space is fine. Let\'s remove ""Ref"" for now and we can improve this screen in future iterations if we want.\r\n\r\nIn general the approach we discussed was to keep this list minimal and maybe have the rows expand on click in the future, displaying more information about the individual jobs.', 'comment_created': datetime.datetime(2020, 6, 26, 8, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 446078573, 'comment_body': 'Okay, thanks :+1: \r\n', 'comment_created': datetime.datetime(2020, 6, 26, 9, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}]","[{'commit_sha': '0dd3aa7daee55114e063704530dff1877ed4eae2', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e89dfbd7e5cc1fafa574903d6da7647eb55e3a82', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37c6e8cc528f5633c3b12a37b0b040ad63797047', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30d8df3dded7c761ed5c641b7389ec1f24381853', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e49c17543e7cb58b10d9acecc204954fd553d1', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4614627b2c317eba7873a815d4ee60958061d759', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
440547896,Cache API requests and wait before retrying,"Packit Service API fails to respond when faced with concurrent requests. We should fix this issue there too but we don't know the exact cause

In the meantime, caching and retrying here helps.

",False,44,https://api.github.com/repos/packit/dashboard/pulls/44,https://github.com/packit/dashboard/pull/44,closed,23,8,6,1,6,4,0,0,[],2020-06-26 12:06:16+00:00,2020-07-01 05:08:55+00:00,406959.0,"4 days, 17:02:39","[{'comment_id': 446866430, 'comment_body': 'could we cache in redis/psql? that should be faster', 'comment_created': datetime.datetime(2020, 6, 29, 8, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'TomasTomecek', 'type': 'User'}, {'comment_id': 446872657, 'comment_body': 'How about relying only on this, setting it to `60` and removing the `timeout`s from the decorators? This would simplify things.', 'comment_created': datetime.datetime(2020, 6, 29, 8, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 446877232, 'comment_body': 'or memcached...', 'comment_created': datetime.datetime(2020, 6, 29, 9, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 446889055, 'comment_body': 'Yes, but isnt that too overcomplicated for four or five api requests ?', 'comment_created': datetime.datetime(2020, 6, 29, 11, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': 'f4424ac3d1fb9c26c3a2ddbc2eb343499ba84bc9', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
448808756,Projects,[Screenshare](https://cloud.abifog.com/f/fc6f307f515142ee81d6/),True,46,https://api.github.com/repos/packit/dashboard/pulls/46,https://github.com/packit/dashboard/pull/46,closed,820,43,10,3,8,5,2,0,"[{'name': 'GSOC'}, {'name': 'ready-for-review'}]",2020-07-14 11:01:36+00:00,2020-07-22 13:18:27+00:00,699411.0,"8 days, 2:16:51","[{'comment_id': 457363059, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 7, 20, 13, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 457364205, 'comment_body': 'This seems to be a little repetitive :thinking: ', 'comment_created': datetime.datetime(2020, 7, 20, 13, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 457364876, 'comment_body': 'Is this line needed?', 'comment_created': datetime.datetime(2020, 7, 20, 13, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 457371938, 'comment_body': 'Yes this comes up in every file but we cant abstract this further because the url scheme, and the then {} part is different. At best we will save two or three lines of code.', 'comment_created': datetime.datetime(2020, 7, 20, 13, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 457372157, 'comment_body': 'Not really, I should remove this', 'comment_created': datetime.datetime(2020, 7, 20, 13, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': 'b275d2829636f0182cafbce2fd2d98fab0db88ba', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '626cf70aa24d4acd8d041358ee47f65c163ad048', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1b82abc653955d55b01b16b878212ee69de18cd', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
456795449,Unrelated Misc Changes,"- [x] Interchange git url and project page links
- [x] end of data (after clicking load more) should not result it error - (i think this is fixed in packit-service/packit-service/pull/754 and no change needs to be done here, but my current deployment of ps mirrors an old prod dump so i dont have enough patience to click load more 100 times to verify )
- [x] wildcard search for projects via forge + namespace
- [x] branches handled view
- [x] fix the name scheme in jobs/copr-builds in cases where its a branch push instaed of pull request


Note: To be merged only after https://github.com/packit-service/packit-service/pull/754",True,49,https://api.github.com/repos/packit/dashboard/pulls/49,https://github.com/packit/dashboard/pull/49,closed,619,402,15,6,7,8,1,0,[{'name': 'ready-for-review'}],2020-07-26 19:38:00+00:00,2020-07-31 08:42:42+00:00,392682.0,"4 days, 13:04:42","[{'comment_id': 461463666, 'comment_body': ""Not a JS guru, but, why does this need to be declared in `window`? Wouldn't `var apiURL = ...` work the same way?"", 'comment_created': datetime.datetime(2020, 7, 28, 9, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 461466184, 'comment_body': 'GitHub (and maybe also other places) use `:` to separate the branch name from the project name. Could we be consistent with that usage? (furthermore `-` could be misleading when the project name contains `-`.)', 'comment_created': datetime.datetime(2020, 7, 28, 10, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 461466883, 'comment_body': 'Hm, why is ""<> ... </>"" needed here? It looks very strange :eyes: ', 'comment_created': datetime.datetime(2020, 7, 28, 10, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 461475558, 'comment_body': '👍', 'comment_created': datetime.datetime(2020, 7, 28, 10, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 461478372, 'comment_body': ""`window.variableName` is a bad practice for global variables in JS. And you're right, `const apiURl = ...` is working here so why use this. Will change this."", 'comment_created': datetime.datetime(2020, 7, 28, 10, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 461481045, 'comment_body': 'React needs something to wrap elements at the top of the tree. I generally use `<div> or <span>` but if there is no need for those we can use` <>..</>`', 'comment_created': datetime.datetime(2020, 7, 28, 10, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 462972098, 'comment_body': 'I see you updated this, but did not use `const` as you suggested above. Was there any reason for it?', 'comment_created': datetime.datetime(2020, 7, 30, 12, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 462982052, 'comment_body': 'I remember adding it, dunno how it disappeared. Seriously! \r\nAnd JavaScript being the language that it is, 😠😠😠 did not warn that `const/let/var` was missing and continued to work without it.\r\nWill change it in a sec.', 'comment_created': datetime.datetime(2020, 7, 30, 13, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': '741bd9bbb45bb29508dad9a6682448d98ccdb4ca', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a998a8f56e5a19b159aa008aadf0964121991f7b', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1be924ab35cb4b48cc46547156bd0b5a5a0685ca', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1785ac4b565d9fecbe87e6f397a37bdd1a913f44', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f3e5ca5b0789ebef78677ff6982db5b87570aec', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eb2e4a06cbe10455ba4866eaaa78069c12dd8e6', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
457758450,Replace hardcoded URL with env var API URL,Temporary fix because #49 will take longer to complete,True,51,https://api.github.com/repos/packit/dashboard/pulls/51,https://github.com/packit/dashboard/pull/51,closed,9,2,2,1,2,0,0,0,[],2020-07-28 11:51:20+00:00,2020-07-28 13:11:01+00:00,4781.0,1:19:41,[],"[{'commit_sha': 'c249a2a5268a19368d98d7d59c5cbf0f33847b29', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71
469500250,"View SRPM Builds, improved search, PR Links, icons, more",,True,55,https://api.github.com/repos/packit/dashboard/pulls/55,https://github.com/packit/dashboard/pull/55,closed,574,143,15,10,11,11,0,0,[],2020-08-18 13:30:30+00:00,2020-08-26 10:31:15+00:00,680445.0,"7 days, 21:00:45","[{'comment_id': 476224882, 'comment_body': 'Would it be possible to have the log url on the build id?', 'comment_created': datetime.datetime(2020, 8, 25, 7, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 476227985, 'comment_body': 'Please also link branches :slightly_smiling_face: ', 'comment_created': datetime.datetime(2020, 8, 25, 7, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 476228875, 'comment_body': ""Isn't this variable redundant? Just checking that `link` is not an empty string should be enough."", 'comment_created': datetime.datetime(2020, 8, 25, 7, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 476229408, 'comment_body': ""Shouldn't this rather be:\r\n\r\n```suggestion\r\n- Indentation: 4 Spaces.\r\n```\r\n?"", 'comment_created': datetime.datetime(2020, 8, 25, 7, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 476229864, 'comment_body': ""Would it be possible to link some docs here? I'm not sure if it would make sense, just asking :thinking: "", 'comment_created': datetime.datetime(2020, 8, 25, 7, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 476232034, 'comment_body': ""Wouldn't it be more correct to check the HTTP status code instead of the status message. The former is less probable to change."", 'comment_created': datetime.datetime(2020, 8, 25, 7, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'csomh', 'type': 'User'}, {'comment_id': 476250175, 'comment_body': 'okay', 'comment_created': datetime.datetime(2020, 8, 25, 7, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 476250376, 'comment_body': '👍', 'comment_created': datetime.datetime(2020, 8, 25, 7, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 476250544, 'comment_body': 'sure', 'comment_created': datetime.datetime(2020, 8, 25, 7, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 476250646, 'comment_body': 'yes, will do', 'comment_created': datetime.datetime(2020, 8, 25, 7, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}, {'comment_id': 476285161, 'comment_body': 'Yep, will do', 'comment_created': datetime.datetime(2020, 8, 25, 8, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IceWreck', 'type': 'User'}]","[{'commit_sha': 'd4616ea435bf4292140984fd559138e1a2311baf', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd343463c5d9bc8d8c2c315066447e7025ce137c5', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da6a6a484a510188d6be88a318638f83e51b929b', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e926d9dd1cb8132bcffcaffd53dd8ecf9e35a1c4', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3419443387b0b36b3657126453647d8aef6aaf7', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88c0af97b4cba45514e6f21d2d7e5de92438c318', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee4002da32f1e6bfe148e49db9cbfb5927b52a43', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a0d731e131d4c910821f47333526350bb623fe2', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb9062928eb4371937ffeb762fc570794aac6b7c', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1405812fc1529ccafd9f899ea4f7021dbe69eefe', 'committer_username': 'IceWreck', 'committer_name': 'Anchit Bajaj', 'committer_email': 'ab@abifog.com', 'commit_date': datetime.datetime(2016, 3, 27, 17, 4, 51, tzinfo=datetime.timezone.utc)}]",Anchit Bajaj,18102790,ab@abifog.com,User,,45,,10,71

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
186786346,packit-service,packit/packit-service,Python,47,34,11,41,4270,153,4,4,"[{'id': 487718801, 'number': 813, 'closed': datetime.datetime(2020, 9, 17, 8, 16, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 16, 4, 39, 47, tzinfo=datetime.timezone.utc), 'time_taken': 99411.0, 'time_delta': '1 day, 3:36:51', 'additions': 58, 'deletions': 0, 'state': 'closed'}, {'id': 476872431, 'number': 795, 'closed': datetime.datetime(2020, 9, 3, 4, 54, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 1, 7, 16, 53, tzinfo=datetime.timezone.utc), 'time_taken': 164275.0, 'time_delta': '1 day, 21:37:55', 'additions': 33, 'deletions': 1, 'state': 'closed'}, {'id': 475312031, 'number': 791, 'closed': datetime.datetime(2020, 9, 2, 8, 12, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 10, 3, 46, tzinfo=datetime.timezone.utc), 'time_taken': 425315.0, 'time_delta': '4 days, 22:08:35', 'additions': 92, 'deletions': 62, 'state': 'closed'}, {'id': 472958922, 'number': 788, 'closed': datetime.datetime(2020, 8, 25, 9, 30, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 5, 57, 4, tzinfo=datetime.timezone.utc), 'time_taken': 12788.0, 'time_delta': '3:33:08', 'additions': 39, 'deletions': 6, 'state': 'closed'}, {'id': 466647682, 'number': 775, 'closed': datetime.datetime(2020, 8, 13, 16, 11, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 9, 36, 57, tzinfo=datetime.timezone.utc), 'time_taken': 110100.0, 'time_delta': '1 day, 6:35:00', 'additions': 148, 'deletions': 4, 'state': 'closed'}, {'id': 463635027, 'number': 768, 'closed': datetime.datetime(2020, 8, 11, 9, 57, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 20, 48, 57, tzinfo=datetime.timezone.utc), 'time_taken': 479319.0, 'time_delta': '5 days, 13:08:39', 'additions': 258, 'deletions': 7, 'state': 'closed'}, {'id': 462980531, 'number': 766, 'closed': datetime.datetime(2020, 8, 6, 13, 2, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 20, 5, 53, tzinfo=datetime.timezone.utc), 'time_taken': 147404.0, 'time_delta': '1 day, 16:56:44', 'additions': 52, 'deletions': 33, 'state': 'closed'}, {'id': 456714711, 'number': 754, 'closed': datetime.datetime(2020, 7, 31, 8, 2, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 7, 34, 46, tzinfo=datetime.timezone.utc), 'time_taken': 433673.0, 'time_delta': '5 days, 0:27:53', 'additions': 208, 'deletions': 85, 'state': 'closed'}, {'id': 455530727, 'number': 748, 'closed': datetime.datetime(2020, 7, 23, 10, 51, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 7, 35, 27, tzinfo=datetime.timezone.utc), 'time_taken': 11738.0, 'time_delta': '3:15:38', 'additions': 4, 'deletions': 15, 'state': 'closed'}, {'id': 452684054, 'number': 746, 'closed': datetime.datetime(2020, 7, 22, 10, 33, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 19, 17, 45, 50, tzinfo=datetime.timezone.utc), 'time_taken': 233236.0, 'time_delta': '2 days, 16:47:16', 'additions': 109, 'deletions': 4, 'state': 'closed'}, {'id': 444898938, 'number': 716, 'closed': datetime.datetime(2020, 7, 10, 7, 12, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 17, 2, 55, tzinfo=datetime.timezone.utc), 'time_taken': 310175.0, 'time_delta': '3 days, 14:09:35', 'additions': 408, 'deletions': 50, 'state': 'closed'}, {'id': 441569917, 'number': 707, 'closed': datetime.datetime(2020, 6, 30, 12, 3, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 18, 9, 26, tzinfo=datetime.timezone.utc), 'time_taken': 64441.0, 'time_delta': '17:54:01', 'additions': 9, 'deletions': 13, 'state': 'closed'}, {'id': 436308572, 'number': 690, 'closed': datetime.datetime(2020, 6, 18, 15, 40, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 8, 19, 33, tzinfo=datetime.timezone.utc), 'time_taken': 26475.0, 'time_delta': '7:21:15', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 434429480, 'number': 678, 'closed': datetime.datetime(2020, 6, 16, 12, 46, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 10, 4, 10, tzinfo=datetime.timezone.utc), 'time_taken': 96153.0, 'time_delta': '1 day, 2:42:33', 'additions': 99, 'deletions': 2, 'state': 'closed'}, {'id': 431751284, 'number': 674, 'closed': datetime.datetime(2020, 6, 15, 9, 17, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 12, 16, 58, tzinfo=datetime.timezone.utc), 'time_taken': 507610.0, 'time_delta': '5 days, 21:00:10', 'additions': 157, 'deletions': 47, 'state': 'closed'}, {'id': 404147942, 'number': 567, 'closed': datetime.datetime(2020, 4, 20, 14, 21, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 16, 6, 37, 1, tzinfo=datetime.timezone.utc), 'time_taken': 373459.0, 'time_delta': '4 days, 7:44:19', 'additions': 1993, 'deletions': 1750, 'state': 'closed'}, {'id': 403448429, 'number': 561, 'closed': datetime.datetime(2020, 4, 16, 14, 57, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 14, 22, 39, 32, tzinfo=datetime.timezone.utc), 'time_taken': 145062.0, 'time_delta': '1 day, 16:17:42', 'additions': 44, 'deletions': 9, 'state': 'closed'}, {'id': 398025629, 'number': 534, 'closed': datetime.datetime(2020, 4, 7, 7, 37, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 3, 8, 9, 45, tzinfo=datetime.timezone.utc), 'time_taken': 343693.0, 'time_delta': '3 days, 23:28:13', 'additions': 52, 'deletions': 0, 'state': 'closed'}, {'id': 394001141, 'number': 521, 'closed': datetime.datetime(2020, 3, 26, 14, 44, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 26, 7, 28, 5, tzinfo=datetime.timezone.utc), 'time_taken': 26158.0, 'time_delta': '7:15:58', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 389886846, 'number': 501, 'closed': datetime.datetime(2020, 3, 20, 7, 16, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 17, 14, 55, 26, tzinfo=datetime.timezone.utc), 'time_taken': 231660.0, 'time_delta': '2 days, 16:21:00', 'additions': 241, 'deletions': 6, 'state': 'closed'}, {'id': 389315312, 'number': 493, 'closed': datetime.datetime(2020, 3, 17, 10, 13, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 16, 15, 29, 9, tzinfo=datetime.timezone.utc), 'time_taken': 67471.0, 'time_delta': '18:44:31', 'additions': 25, 'deletions': 6, 'state': 'closed'}, {'id': 386634752, 'number': 479, 'closed': datetime.datetime(2020, 3, 13, 9, 46, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 11, 11, 30, 28, tzinfo=datetime.timezone.utc), 'time_taken': 166564.0, 'time_delta': '1 day, 22:16:04', 'additions': 225, 'deletions': 16, 'state': 'closed'}, {'id': 385682581, 'number': 474, 'closed': datetime.datetime(2020, 3, 9, 17, 16, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 16, 17, 23, tzinfo=datetime.timezone.utc), 'time_taken': 3528.0, 'time_delta': '0:58:48', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 381568720, 'number': 443, 'closed': datetime.datetime(2020, 3, 5, 9, 53, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 28, 19, 56, 29, tzinfo=datetime.timezone.utc), 'time_taken': 482217.0, 'time_delta': '5 days, 13:56:57', 'additions': 64, 'deletions': 5, 'state': 'closed'}, {'id': 380467089, 'number': 433, 'closed': datetime.datetime(2020, 3, 3, 11, 5, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 26, 19, 40, 18, tzinfo=datetime.timezone.utc), 'time_taken': 487537.0, 'time_delta': '5 days, 15:25:37', 'additions': 289, 'deletions': 15, 'state': 'closed'}]"
223165665,dashboard,packit/dashboard,TypeScript,36,11,7,29,613,28,3,7,"[{'id': 644704457, 'number': 105, 'closed': datetime.datetime(2021, 5, 14, 13, 26, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 14, 13, 13, 31, tzinfo=datetime.timezone.utc), 'time_taken': 797.0, 'time_delta': '0:13:17', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 619601142, 'number': 96, 'closed': datetime.datetime(2021, 5, 14, 12, 49, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 20, 19, 7, 53, tzinfo=datetime.timezone.utc), 'time_taken': 2050926.0, 'time_delta': '23 days, 17:42:06', 'additions': 271, 'deletions': 249, 'state': 'closed'}, {'id': 573498673, 'number': 73, 'closed': datetime.datetime(2021, 3, 3, 16, 14, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 15, 11, 37, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1399023.0, 'time_delta': '16 days, 4:37:03', 'additions': 684, 'deletions': 51, 'state': 'closed'}, {'id': 517533178, 'number': 64, 'closed': datetime.datetime(2020, 12, 9, 8, 33, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 9, 7, 6, 47, tzinfo=datetime.timezone.utc), 'time_taken': 2597191.0, 'time_delta': '30 days, 1:26:31', 'additions': 39, 'deletions': 6, 'state': 'closed'}, {'id': 512464414, 'number': 60, 'closed': datetime.datetime(2020, 10, 30, 9, 26, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 29, 18, 7, 37, tzinfo=datetime.timezone.utc), 'time_taken': 55120.0, 'time_delta': '15:18:40', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 481066175, 'number': 57, 'closed': datetime.datetime(2020, 9, 7, 14, 5, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 7, 5, 45, 39, tzinfo=datetime.timezone.utc), 'time_taken': 29985.0, 'time_delta': '8:19:45', 'additions': 234, 'deletions': 19, 'state': 'closed'}, {'id': 469500250, 'number': 55, 'closed': datetime.datetime(2020, 8, 26, 10, 31, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 13, 30, 30, tzinfo=datetime.timezone.utc), 'time_taken': 680445.0, 'time_delta': '7 days, 21:00:45', 'additions': 574, 'deletions': 143, 'state': 'closed'}, {'id': 457758450, 'number': 51, 'closed': datetime.datetime(2020, 7, 28, 13, 11, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 11, 51, 20, tzinfo=datetime.timezone.utc), 'time_taken': 4781.0, 'time_delta': '1:19:41', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 456795449, 'number': 49, 'closed': datetime.datetime(2020, 7, 31, 8, 42, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 19, 38, tzinfo=datetime.timezone.utc), 'time_taken': 392682.0, 'time_delta': '4 days, 13:04:42', 'additions': 619, 'deletions': 402, 'state': 'closed'}, {'id': 448808756, 'number': 46, 'closed': datetime.datetime(2020, 7, 22, 13, 18, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 11, 1, 36, tzinfo=datetime.timezone.utc), 'time_taken': 699411.0, 'time_delta': '8 days, 2:16:51', 'additions': 820, 'deletions': 43, 'state': 'closed'}, {'id': 440547896, 'number': 44, 'closed': datetime.datetime(2020, 7, 1, 5, 8, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 12, 6, 16, tzinfo=datetime.timezone.utc), 'time_taken': 406959.0, 'time_delta': '4 days, 17:02:39', 'additions': 23, 'deletions': 8, 'state': 'closed'}, {'id': 439065906, 'number': 43, 'closed': datetime.datetime(2020, 6, 26, 10, 4, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 9, 2, 21, tzinfo=datetime.timezone.utc), 'time_taken': 176518.0, 'time_delta': '2 days, 1:01:58', 'additions': 519, 'deletions': 28, 'state': 'closed'}, {'id': 427873212, 'number': 39, 'closed': datetime.datetime(2020, 6, 16, 10, 35, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 14, 21, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1023217.0, 'time_delta': '11 days, 20:13:37', 'additions': 555, 'deletions': 3540, 'state': 'closed'}, {'id': 385775340, 'number': 25, 'closed': datetime.datetime(2020, 3, 16, 11, 4, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 19, 27, 16, tzinfo=datetime.timezone.utc), 'time_taken': 574605.0, 'time_delta': '6 days, 15:36:45', 'additions': 3277, 'deletions': 1, 'state': 'closed'}, {'id': 384829008, 'number': 24, 'closed': datetime.datetime(2020, 3, 6, 16, 50, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 6, 13, 46, 28, tzinfo=datetime.timezone.utc), 'time_taken': 11055.0, 'time_delta': '3:04:15', 'additions': 148, 'deletions': 105, 'state': 'closed'}, {'id': 383491729, 'number': 20, 'closed': datetime.datetime(2020, 3, 5, 10, 18, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 4, 11, 21, 14, tzinfo=datetime.timezone.utc), 'time_taken': 82629.0, 'time_delta': '22:57:09', 'additions': 62, 'deletions': 30, 'state': 'closed'}, {'id': 378737928, 'number': 9, 'closed': datetime.datetime(2020, 2, 25, 16, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 23, 18, 51, 31, tzinfo=datetime.timezone.utc), 'time_taken': 165809.0, 'time_delta': '1 day, 22:03:29', 'additions': 145, 'deletions': 43, 'state': 'closed'}]"
