pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
669085881,added vendor-product pair finding process,"added vendor-product pair finding process from the CVE database
",True,1173,https://api.github.com/repos/intel/cve-bin-tool/pulls/1173,https://github.com/intel/cve-bin-tool/pull/1173,closed,176,0,2,9,4,13,0,0,[],2021-06-13 17:11:03+00:00,2021-06-23 16:47:10+00:00,862567.0,"9 days, 23:36:07","[{'comment_id': 650556094, 'comment_body': 'I am finding the filename as the first element of the filename given by the user (""libsndfile-1.0.25-12.el7.x86_64.rpm"", ""jdk-12.0.2_linux-x64_bin.rpm"", etc.). But, I think there would be some files which would not follow this pattern. But, on a quick search, I haven\'t found any files which do not follow this pattern. I am thinking of taking the product_name as optional arguments for this.\r\n\r\nAre there any files that don\'t follow this pattern?', 'comment_created': datetime.datetime(2021, 6, 13, 17, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 650557732, 'comment_body': ""If the distinct vendors for a product are more than one, then I have taken two approach to this.\r\n1) if the product_name is in the vendor_name, then this vendor_name would be returned. \r\n*example:* for `libsndfile`, there are two vendors `('mega-nerd', 'libsndfile_project')`. So here, the `libsndfile_project` would be returned. \r\n2) I am counting the number of times these vendor_names appeared in the database and returning the max out of the two. But, this does not always hit the correct vendor_name (which we would be wanting or the one we are looking for generally).\r\n\r\nBesides this, I am also thinking of optionally returning all the vendor names available for the product and let the user decide. Please suggest what would be the best thing to do.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 13, 17, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 651308936, 'comment_body': ""@peb-peb The file format is fine for rpms (i.e. for Red Hat based operating systems e.g. RHEL, Centos, Fedora). Note that some package names have an '-' in them e.g. openssh-clients-7.4p1-21.el7.x86_64.rpm so you need to be careful with your parsing. You may find it more useful to use the `rsplit` function to remove elements from the end.\r\n\r\nDebian based distros tend to have a different filename structure so you may have to offer a different parsing function.\r\n"", 'comment_created': datetime.datetime(2021, 6, 14, 22, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'anthonyharrison', 'type': 'User'}, {'comment_id': 651311272, 'comment_body': '@peb-peb Get the simple case working first - i.e. a product with only one vendor for the specified version. This will probably cover the vast majority of packages. If multiple vendors are returned, the simplest solution would be to just warn the user that more information is required (i.e. vendor) and not try and guess which one to use.  Are you producing a file with lines of vendor, product, package entries?\r\n', 'comment_created': datetime.datetime(2021, 6, 14, 22, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'anthonyharrison', 'type': 'User'}, {'comment_id': 651716438, 'comment_body': '\r\nSometimes, finding the product_name is not feasible (ex: tomcat10-10.0.6-1.el8.harbottle.x86_64.rpm). Here, parsing it gives us ""tomcat10"", which is not correct. So, I am also taking the product name as an input, in this case it would be ""tomcat"". But, in most of the cases, this wouldn\'t be required.', 'comment_created': datetime.datetime(2021, 6, 15, 11, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 651722162, 'comment_body': ""I'm returning `[('vendor', 'product')]`. This is because it follows our VENDOR_PRODUCT variable pattern."", 'comment_created': datetime.datetime(2021, 6, 15, 12, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 652161988, 'comment_body': '@peb-peb If your search of the database for a product doesn\'t succeed you could try replacing the digits with % and using the `like` operator in your SQL statement e.g. `select * from cve_range where product like ""tomcat%""` and see if that finds a match.\r\n\r\nI notice you are importing sqlite3 into the module. Could you not use the db_open function within the CVEDB module to connect to the database?', 'comment_created': datetime.datetime(2021, 6, 15, 21, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'anthonyharrison', 'type': 'User'}, {'comment_id': 652669379, 'comment_body': '>I notice you are importing sqlite3 into the module. Could you not use the db_open function within the CVEDB module to connect to the database?\r\n\r\nI have now implemented these changes.', 'comment_created': datetime.datetime(2021, 6, 16, 13, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 652681678, 'comment_body': '>@peb-peb If your search of the database for a product doesn\'t succeed you could try replacing the digits with % and using the like operator in your SQL statement e.g. select * from cve_range where product like ""tomcat%"" and see if that finds a match.\r\n\r\n@anthonyharrison When I check this for products, which have digits in their name like- in case of [`Openj9`](https://www.cvedetails.com/product/49825/Eclipse-Openj9.html?vendor_id=10410) -> `""openj%""` it gives `[(\'openjournal\', \'openjournal\'), (\'sun\', \'openjdk\'), (\'uclouvain\', \'openjpeg\'), (\'oracle\', \'openjdk\'), (\'apache\', \'openjpa\'), (\'eclipse\', \'openj9\')]`,which is not optimal. But, gives the user the option to choose their vendor-product pair.\r\n\r\nShould I move forward with this?', 'comment_created': datetime.datetime(2021, 6, 16, 13, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 656338109, 'comment_body': '@anthonyharrison I am raising `UnknownArchiveType` error in `helper_script.py`, but this does not seem to pass. the error message in pytest was - \r\n\r\n```\r\n(venv39_CVE_Binary_tool) peb@LAPTOP-M375SCBF:/mnt/d/git_stuff/cve-bin-tool$ pytest test/test_helper_script.py\r\n======================================================== test session starts ========================================================\r\nplatform linux -- Python 3.8.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1\r\nrootdir: /mnt/d/git_stuff/cve-bin-tool\r\nplugins: forked-1.3.0, asyncio-0.15.1, cov-2.12.0, xdist-2.2.1\r\ncollected 1 item\r\n\r\ntest/test_helper_script.py F                                                                                                  [100%]\r\n\r\n============================================================= FAILURES ==============================================================\r\n________________________________ TestHelperScript.test_parse_filename[bash-4.2.46-34.el7.x86_64.abc] ________________________________\r\n\r\nself = <cve_bin_tool.helper_script.HelperScript object at 0x7f475e2e46a0>, filename = \'bash-4.2.46-34.el7.x86_64.abc\'\r\n\r\n    def parse_filename(self, filename):\r\n        """"""\r\n        returns package_name/product_name from package_filename of types .rpm, .deb, etc.\r\n        Example: package_filename = openssh-client_8.4p1-5ubuntu1_amd64.deb\r\n            here, package_name = openssh-client\r\n        """"""\r\n\r\n        filename = filename.split(""/"")[-1]  # for directory names\r\n        if self.extractor.can_extract(filename):\r\n            if filename.endswith("".tar.xz""):\r\n                product_name = filename.rsplit(""-"", 3)[0]\r\n                # example: libarchive-3.5.1-1-aarch64.pkg.tar.xz\r\n            elif filename.endswith("".deb"") or filename.endswith("".ipk""):\r\n                product_name = filename.rsplit(""_"")[0]\r\n            else:\r\n                product_name = filename.rsplit(""-"", 2)[0]\r\n            self.logger.debug(f""The product name is {product_name}"")\r\n\r\n            return product_name\r\n        else:\r\n            # self.logger.error(""Unknown Archive Type"")\r\n            with ErrorHandler(mode=ErrorMode.NoTrace, logger=self.logger):\r\n>               raise UnknownArchiveType(filename)\r\nE               cve_bin_tool.error_handler.UnknownArchiveType: bash-4.2.46-34.el7.x86_64.abc\r\n\r\ncve_bin_tool/helper_script.py:55: UnknownArchiveType\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nself = <test.test_helper_script.TestHelperScript object at 0x7f475e2e46d0>, filename = \'bash-4.2.46-34.el7.x86_64.abc\'\r\n\r\n    @pytest.mark.parametrize(""filename"", [\r\n        ""bash-4.2.46-34.el7.x86_64.abc"" # unsupported file type\r\n    ])\r\n    def test_parse_filename(self, filename):\r\n>       hs = HelperScript(filename)\r\n\r\ntest/test_helper_script.py:54:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\ncve_bin_tool/helper_script.py:20: in __init__\r\n    self.product = product_name or self.parse_filename(filename)\r\ncve_bin_tool/helper_script.py:55: in parse_filename\r\n    raise UnknownArchiveType(filename)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <cve_bin_tool.error_handler.ErrorHandler object at 0x7f475e2e4640>\r\nexc_type = <class \'cve_bin_tool.error_handler.UnknownArchiveType\'>, exc_val = UnknownArchiveType(\'bash-4.2.46-34.el7.x86_64.abc\')\r\nexc_tb = <traceback object at 0x7f475e2f8400>\r\n\r\n    def __exit__(self, exc_type, exc_val, exc_tb):\r\n        if isinstance(exc_val, BaseException):\r\n            self.exit_code = ERROR_CODES.get(exc_type, -1)\r\n            self.exc_val = exc_val\r\n        if self.mode == ErrorMode.Ignore:\r\n            return True\r\n        if exc_type:\r\n            if self.logger and exc_val:\r\n                self.logger.error(f""{exc_type.__name__}: {exc_val}"")\r\n            if self.mode == ErrorMode.NoTrace:\r\n>               sys.exit(self.exit_code)\r\nE               SystemExit: -13\r\n\r\ncve_bin_tool/error_handler.py:144: SystemExit\r\n--------------------------------------------------------- Captured log call ---------------------------------------------------------\r\nERROR    cve_bin_tool.HelperScript:error_handler.py:142 UnknownArchiveType: bash-4.2.46-34.el7.x86_64.abc\r\n====================================================== short test summary info ======================================================\r\nFAILED test/test_helper_script.py::TestHelperScript::test_parse_filename[bash-4.2.46-34.el7.x86_64.abc] - SystemExit: -13\r\n========================================================= 1 failed in 0.46s =========================================================\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 15, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 656345973, 'comment_body': 'Try going through this https://github.com/intel/cve-bin-tool/blob/fce0bc88d825fdd74f1df72fd7dabd3e93f1500c/test/test_package_list_parser.py#L44-L49\r\n\r\nI think you need to add the exception in parametrize', 'comment_created': datetime.datetime(2021, 6, 22, 15, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BreadGenie', 'type': 'User'}, {'comment_id': 656444059, 'comment_body': '@BreadGenie tried this, but no luck :(\r\ndoes this has something to with me not having `error_mode` in `Helper_script`\r\n```\r\nclass HelperScript:\r\n    """"""Helps Contributors to understand how various common filenames, version-strings, etc. look""""""\r\n\r\n    def __init__(self, filename, vendor_name=None, product_name=None):\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 17, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 656450483, 'comment_body': 'could be\nI had error mode in the `PackageListParser` class', 'comment_created': datetime.datetime(2021, 6, 22, 17, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BreadGenie', 'type': 'User'}]","[{'commit_sha': 'fa475b53eea22ce5ea5da9387b11fa41320c8b0c', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a240a8ea9ca8744e601b29791dff698b2fb30516', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cae1e0a89c61e02e2fc808498ea0b7c6b3b434e0', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3147f9b6a3aa102b10d98beaf51fe1921036db4c', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe9ce2cdb2f3d5e1a6cec43c48784546f2648b11', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1149c1f4bc5f2dc0ea7bdd9c9949ded73a1577d6', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94083838cb42d02dbb5af8beb5bef3d37999599d', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38cceeebe027382cd8be81fc0803e82eb79c804b', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5bcfecd3596a3c4ed0a0fc91f33ec83d5bc2f46', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}]",Harsh,77539004,,User,,36,,22,27
673635505,Helper Script - extraction and regex finding process,"- [ ] change current regex to verbose regex for commenting?
- [ ] add logs to explain, what's happening...
- [ ] refactor after #1185 gets merged",True,1182,https://api.github.com/repos/intel/cve-bin-tool/pulls/1182,https://github.com/intel/cve-bin-tool/pull/1182,closed,335,49,2,33,7,11,0,0,[],2021-06-18 17:44:23+00:00,2021-06-30 00:18:26+00:00,974043.0,"11 days, 6:34:03","[{'comment_id': 654600415, 'comment_body': 'this the raw string pattern that I decided to go with. I would be iterating over it as I test this on more files. Is this implementation okay??', 'comment_created': datetime.datetime(2021, 6, 18, 18, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 654609905, 'comment_body': ""The last meeting helped a lot with this!!! :)\r\nThe `clean_path` is for the logs and I think I would be removing it later. I'm parsing all the files in the .rpm file and then am searching for the desired strings in it and then returning these in a list.\r\n\r\nI wanted suggestions over whether I should scan over all the files or not.*example*: busybox contains -\r\n```\r\n/data.cpio\r\n/usr/lib/.build-id/1e/2a6ad3feaed3fbb308145c8db69f0dd936b427\r\n/usr/share/man/man1/busybox.1.gz\r\n/usr/share/doc/busybox/LICENSE\r\n/usr/share/doc/busybox/README\r\n/sbin/busybox\r\n```\r\n\r\n1) should I be scanning over `.cpio`?\r\n2) The README and LICENSE should be ignored? The `man/` directory should be ignored?\r\n3) Or should I just search in files which have the product_name in their filename (generally these files only contain the strings that we are looking for... this was the pattern that I observed) *or* should I just be ignoring files to scan?\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 18, 18, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 654819203, 'comment_body': '@peb-peb The scanfile routine in the VersionScanner class checks the type of file and unless it identifies as an executable binary, the file will be ignored. This will mean files such as LICENSE and README will autonatically be ignored. Try running the `file` command and see what it reports. Contents of an archive files (e.g. .gz) will be extracted to a temporary directory before checking the file.', 'comment_created': datetime.datetime(2021, 6, 19, 17, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'anthonyharrison', 'type': 'User'}, {'comment_id': 654892911, 'comment_body': ""I'm reusing these from `scan_file()` in `VersionScanner()`. I've sent a pr, breaking down `scan_file()` accordingly (I would be updating this once #1185 gets merged or it's decided what should be done about this...)."", 'comment_created': datetime.datetime(2021, 6, 20, 7, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 654893940, 'comment_body': ""@anthonyharrison I've implemented these changes now."", 'comment_created': datetime.datetime(2021, 6, 20, 7, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 658354294, 'comment_body': 'This docstring could be a bit better:\r\n- Contributor... to what?  of what?\r\n- Why would these contributors want to know these things?\r\n- What are they going to do with the output of the script?\r\n\r\nI\'d go with something more like \r\n""Helps contributors who want to write a new cve-bin-tool checker find common filenames, version strings, and other necessary data for building a binary checker.""\r\n\r\nOr if you\'d like a one-liner, maybe just skip who\'s using it and explain only what it does.\r\n\r\n""Helps find common strings and other components needed to build a cve-bin-tool checker""\r\n', 'comment_created': datetime.datetime(2021, 6, 24, 23, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}, {'comment_id': 658355258, 'comment_body': ""Awesome.  let's merge #1185 first and then refactor this."", 'comment_created': datetime.datetime(2021, 6, 24, 23, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}, {'comment_id': 658358842, 'comment_body': 'Did you mean to use unescaped periods here?  . means ""match any one character"" and `\\.` means ""match only the character `.`""   I\'m guessing you either want to use either `\\.` (match a period) or `[.-]` (match a period or a dash) here.', 'comment_created': datetime.datetime(2021, 6, 24, 23, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}, {'comment_id': 658360168, 'comment_body': ""But other than that comment, yes this is a fine place to start iterating.  \r\n\r\nf you want an immediate iteration, I'd add a couple of whitespace characters in to the pattern so that you could match, say\r\nproduct1.2.3\r\nproduct 1.2.3\r\nproduct-1.2.3\r\nproduct.1.2.3\r\n\r\nand maybe others.  so that would change your pattern to include a [ -.]? block between the product name and the semantic version pattern.\r\n\r\nYou might also want to match a 1.2 pattern (i.e. a shorter semantic version) by having some question marks (match 0 or 1 characters) for the last period and a * (match 0 or more) on the last digit.  \r\n\r\nAnd this one is definitely for future iteration, but you'll likely want to handle things like 2.3.4rc1, 2.1.post1, and some of the distro-specific version additions eventually."", 'comment_created': datetime.datetime(2021, 6, 24, 23, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}, {'comment_id': 658581892, 'comment_body': ""@ terriko I've updated the regex pattern to `product(.*)([0-9]+[.-][0-9]+([.-][0-9]+)?)`.\r\nThe `(.*)` would help to match patterns like\r\nproduct version 1.2.3\r\nproduct v1.2.3(1)\r\n\r\nYou could see if these regex's match at [pythex.org](https://pythex.org/). (I've used this to make regexes for the patterns).\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 25, 8, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 661042616, 'comment_body': ""Doesn't need to be in this PR, but did you want to add some sort of entry point for your helper script in a future revision?  (e.g. add it to https://github.com/intel/cve-bin-tool/blob/main/setup.py the way we did with csv2cve)"", 'comment_created': datetime.datetime(2021, 6, 30, 0, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}]","[{'commit_sha': 'fa475b53eea22ce5ea5da9387b11fa41320c8b0c', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a240a8ea9ca8744e601b29791dff698b2fb30516', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cae1e0a89c61e02e2fc808498ea0b7c6b3b434e0', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3147f9b6a3aa102b10d98beaf51fe1921036db4c', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0705ee281a43172925f2d5c1ffe46669d4eeebc', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '096c412eaaa2ed619d9b3d2d7804586154ba6f05', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b24056ad9afd41cec99167e823c977650b408ac', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe9ce2cdb2f3d5e1a6cec43c48784546f2648b11', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1149c1f4bc5f2dc0ea7bdd9c9949ded73a1577d6', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94083838cb42d02dbb5af8beb5bef3d37999599d', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38cceeebe027382cd8be81fc0803e82eb79c804b', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5bcfecd3596a3c4ed0a0fc91f33ec83d5bc2f46', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c91192d6b965dfcac8f21fc19b4afaf2c84e946d', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0936b9e58fe9cbe1ba48d06ebee5eb601aa07fc2', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54aefc81dfa107dbba3d96d1b38f1ae3e1f861ad', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8195993062877f735d231662623bee740db4f255', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eed6bdd2209f3743a465cd6953f09e2a648be690', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faa8088738e28dd52b3af7564d94b4190b586a4a', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7f39a8158d9e91527b67e47f7fc001ace948a3e', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73efb6d155ca9303e883bac4e43b15332499d839', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99d4cff731b73a3119fe52af1853d9873533c809', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab26ae144731cfba767c4d10efb674a1a8c93d94', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c03e95d0de2fb2be1d9f271cc8ac9da2662624cf', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ff34fb5062afb2bb460e1a5ae51845ff02622b9', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dd5d7124ac7243f9172631aef5207200c38ffb5', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68f8438cc36e8650656830c3425d8d665d11e5cd', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ba9a07873dde04d673619552da17293467a23c5', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b2b7326c9fadda1f7f419072b7c3d210c6bb436', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '416eec83b03d5725096f1af70f0cec1b4a39bb2e', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea8b5abf1fef71af98c5f33b3b5c978b5f06e13b', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc4b1eae041fe70ceb0fa71799db03405f00fc5', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00e3ac08880dce887371216565d7e03edbec8934', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ab11295d5a57981fb2bb4df8097ccde4088220c', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}]",Harsh,77539004,,User,,36,,22,27
690030169,refactor: helper script for is_executable() and parse_string(),"I've been trying to refactor this, but it keeps throwing me this error. I tried calling it `version_scanner.py` and it works fine,  but calling it in `helper_script.py` returns me this error: 

```
Downloads via (venv39_CVE_Binary_tool)
➜ python3 /mnt/d/git_stuff/cve-bin-tool/cve_bin_tool/helper_script.py libmatroska-1.5.0-1.el8.x86_64.rpm
Traceback (most recent call last):
  File ""/mnt/d/git_stuff/cve-bin-tool/cve_bin_tool/helper_script.py"", line 70, in extract_and_parse_file
    self.logger.warning(VersionScanner.is_executable(filepath))
AttributeError: type object 'VersionScanner' has no attribute 'is_executable'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/mnt/d/git_stuff/cve-bin-tool/cve_bin_tool/helper_script.py"", line 324, in <module>
    main(filenames)
  File ""/mnt/d/git_stuff/cve-bin-tool/cve_bin_tool/helper_script.py"", line 290, in main
    binary_string_list_1 = hs.extract_and_parse_file(filenames[1])
  File ""/mnt/d/git_stuff/cve-bin-tool/cve_bin_tool/helper_script.py"", line 73, in extract_and_parse_file
    is_exec = VersionScanner.is_executable(filepath)
AttributeError: type object 'VersionScanner' has no attribute 'is_executable'

```",True,1246,https://api.github.com/repos/intel/cve-bin-tool/pulls/1246,https://github.com/intel/cve-bin-tool/pull/1246,closed,17,55,2,7,8,4,0,0,[],2021-07-14 15:48:23+00:00,2021-07-27 22:46:00+00:00,1148257.0,"13 days, 6:57:37","[{'comment_id': 674296537, 'comment_body': '```suggestion\r\n        # for scanning files versions\r\n```', 'comment_created': datetime.datetime(2021, 7, 21, 20, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 674320958, 'comment_body': ""I'm a bit confused about this `try except` block 🤔 \r\nFirst of all `output` is never used so can be just `_`, but the main problem is in the usage of `is_executable`. At first I thought it was just a typo because you just call it in `try` AND `except` but expect a different number of return arguments, but then I looked at return type and (oh thanks type hinting!) and I see that it returns `True, output` or just `False`. But why do you need `try` here? Only then I understood that it's _because_ `is_executable` can return tuple or just value, urgh... Maybe it's some unknown to me pattern but I really don't like it, it's just confusing.\r\n\r\nI think that something like this would be better:\r\n```py\r\nis_exec = self.version_scanner.is_executable(filepath)\r\nif type(is_exec) == tuple:\r\n    is_exec = is_exec[0]\r\n```\r\n\r\nBut even better would be to at least change `is_executable` to return `False,` or `True, output`, then do `is_exec = self.version_scanner.is_executable(filepath)[0]`"", 'comment_created': datetime.datetime(2021, 7, 21, 20, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 675109309, 'comment_body': 'We\'ve got the same try/except block in version_scanner.py where output *is* used in the case of python packages to do more processing, so whatever we do should be done in both places.  Good time for more refactoring!\r\n\r\nLooking at this again, I\'d go with changing `is_executable` so it returns `False, None` or `True, output` so it\'s always a tuple.  So in version_scanner.py you\'d change the return False line in `is_executable` (line 118 of version.py) to be ...\r\n\r\n```py\r\n            return False, None\r\n```\r\n\r\n(Or maybe False, """" since output is otherwise a string, but None is probably more clear.)\r\n\r\nThen later in version_scanner.py you\'d use it as\r\n\r\n```py\r\nt, output = self.is_executable(filename)\r\n``` \r\n\r\nAnd in helper_script.py, where you aren\'t ever using the output, you\'d just ignore it:\r\n\r\n```py\r\nis_exec = self.version_scanner.is_executable(filepath)[0]\r\n```\r\n\r\n(note the `[0]` at the end)\r\n\r\nwith no try/except in either case.\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 22, 19, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}, {'comment_id': 675112224, 'comment_body': ""Ugh, and bonus refactor: let's change `t` in version_scanner.py to be `is_exec` -- no reason to use a one letter variable for this one."", 'comment_created': datetime.datetime(2021, 7, 22, 19, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}]","[{'commit_sha': 'e9d06a48705aa0bf620b9ae6e4e7b9d0da44d748', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '349bb3bf0f0db056717efd78033d09309aae4220', 'committer_username': 'pdxjohnny', 'committer_name': 'John Andersen', 'committer_email': 'john.s.andersen@intel.com', 'commit_date': datetime.datetime(2013, 11, 15, 18, 35, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43f99d146020f13473de615ef657204263ff138d', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9ddcbace93bb35fb350c36f32470c8e7bbd51e0', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '107ed7aa7a7fae799141380743b431372888e144', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b107eae9b6a06d569279806fd48dcc63ddabe523', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '796e5b7e613ee8ca6a5133b1d8988ff147ef8c71', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}]",Harsh,77539004,,User,,36,,22,27
708809118,feat: improved output for helper-script,"Remaining things to do:
- [ ] tests (to be done in a different pr)
- [x] docs",True,1333,https://api.github.com/repos/intel/cve-bin-tool/pulls/1333,https://github.com/intel/cve-bin-tool/pull/1333,closed,247,135,2,40,3,21,0,0,[],2021-08-11 12:02:35+00:00,2021-08-18 00:21:06+00:00,562711.0,"6 days, 12:18:31","[{'comment_id': 688890395, 'comment_body': ""Now, I'm using `pattern1` instead of `pattern2` for more accurate version-string finding. But, `pattern1` would require the user to manually specify the `--version` for some of the debian and bsd packages. But, if the version is specified and if a single line version string exists (currently helper-script does not support multiline regex finding), then the `VERSION_PATTERNS` is much more accurate. Is it a good trade-off?"", 'comment_created': datetime.datetime(2021, 8, 14, 6, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 688890770, 'comment_body': ""This is there for custom string search in the binary.  (I would try to add it, but if I'm not able to do it, then I'll clean this part)"", 'comment_created': datetime.datetime(2021, 8, 14, 6, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 688993098, 'comment_body': ""Hmmm, shouldn't it be `CONTAINS`?\r\n```suggestion\r\n        CONTAINS_PATTERNS = [\r\n```\r\n\r\nI actually see 7 occurrences of `CONTAIN_PATTERNS` in the main now (on f9d3b47)"", 'comment_created': datetime.datetime(2021, 8, 14, 21, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 688993258, 'comment_body': '```suggestion\r\n        print(""\\tCONTAINS_PATTERNS = ["")\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 21, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 688993320, 'comment_body': '```suggestion\r\n                    self.file_stack.append(clean_path)\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 21, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 688993677, 'comment_body': '```suggestion\r\n        """"""find strings for CONTAINS_PATTERNS with product_name in them""""""\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 21, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 688993966, 'comment_body': '```suggestion\r\n                    f\'\\t\\t[red]r""{common_strings}""[/] <--- not recommended to use this form of strings\'\r\n```\r\nSame below', 'comment_created': datetime.datetime(2021, 8, 14, 21, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 688994623, 'comment_body': 'If you actually add `default=40,` here you will be able to tell the user in the string using `%(default)s`', 'comment_created': datetime.datetime(2021, 8, 14, 21, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 688994743, 'comment_body': ""I'm not sure why this is done like this (`defaults` dict + `ChainMap`) and not by just setting default arguments in `add_argument`, the only problematic one will be `filenames`"", 'comment_created': datetime.datetime(2021, 8, 14, 21, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 688994907, 'comment_body': 'I\'m pretty sure this is always true? because `defaults` dict has this value and you get `args` from `ChainMap` if user didn\'t pass the argument it will be `warning` from the `defaults`.\r\n\r\nMaybe you don\'t need to reset the `LOGGER` way above and don\'t need this `if` here, just always set it to `args[""log_level""]`.', 'comment_created': datetime.datetime(2021, 8, 14, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 688996001, 'comment_body': '`filename` is not used anywhere.', 'comment_created': datetime.datetime(2021, 8, 14, 21, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 688997397, 'comment_body': ""This whole block (lines 400-419) looks pretty complicated (variables with `_1`, `_2` in names are a clear sign of it).\r\n\r\nOn line 400 you create a `HelperScript` instance `hs` with all arguments set, however in the loop you overwrite this variable with `HelperScript(filename)`. Is it okay that you don't pass `product_name, version_number, string_length` here? Do you even need to create new instance?\r\n\r\nMaybe this is what you wanted?\r\n```py\r\n    hs = HelperScript(\r\n        filenames[0],  # I really think this is not needed in constructor\r\n        product_name=product_name,\r\n        version_number=version_number,\r\n        string_length=string_length,\r\n    )\r\n    # maybe change this to `contains_patterns` to mirror correct Checker attribute name\r\n    hs.contain_patterns = hs.extract_and_parse_file(filenames[0])\r\n\r\n    for filename in filenames[1:]:\r\n        binary_string_list = hs.extract_and_parse_file(filename)\r\n\r\n        if binary_string_list:\r\n            hs.contain_patterns = list(\r\n                set(hs.contain_patterns).intersection(set(binary_string_list))\r\n            )\r\n```"", 'comment_created': datetime.datetime(2021, 8, 14, 22, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 689851761, 'comment_body': ""> I'm pretty sure this is always true?\r\n\r\nJust cross checked it, and yeah it's always `True`. Thank you for noticing that :)"", 'comment_created': datetime.datetime(2021, 8, 16, 20, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 689853261, 'comment_body': ""```\r\ndef __init__(\r\n        self, filename, product_name=None, version_number=None, string_length=40\r\n    ):\r\n        self.filename = filename\r\n        self.extractor = Extractor()\r\n        self.product, self.version = self.parse_filename(filename)\r\n```\r\nfilename is used here to parse itself and it's also used now at some places in `logs`."", 'comment_created': datetime.datetime(2021, 8, 16, 20, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 689859230, 'comment_body': ""Now looking back at it, this is not a clean piece of code. But in short, what it intended to do was to find the `intersection` across `CONTAINS_PATTERNS` when multiple filenames are given. \r\n\r\nFor now I'm removing it, because of some problems, i.e., \r\n1. this does not check if the multiple filenames provided are for the same product\r\n  example: `$ python3 -m cve_bin_tool.helper_script ./busybox-1.33.1.rpm ./libsndfile-1.3.2.rpm` which breaks it.\r\n2. This creates multiple instances of `HelperScript`, which slows the tool significantly.\r\n\r\nBut, this would be a nice feature to have, so, I would add this as a future goal for helper-script in an issue :)"", 'comment_created': datetime.datetime(2021, 8, 16, 21, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 689861194, 'comment_body': 'Thank you, that would be really useful in the help message.', 'comment_created': datetime.datetime(2021, 8, 16, 21, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 689862590, 'comment_body': 'Just saw that `file_stack` was not used anywhere in the script. Thank you for the feedback :)', 'comment_created': datetime.datetime(2021, 8, 16, 21, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 689863956, 'comment_body': ""I mean `self.filename`. It is not used anywhere (I just searched `.filename`).\r\n\r\nThanks, now I see that you actually get `self.product, self.version` from this `filename` argument. But why is it required? If someone passes both `product_name` and `version_number`, you will use them and discard what you parsed from `filename`, right? This is what happens here:\r\nhttps://github.com/intel/cve-bin-tool/blob/45578e8c9ab79ae872ee432692901e812431f7fc/cve_bin_tool/helper_script.py#L400-L405\r\n\r\nAnd another note: you use `filename/filename, string_length/string_length` for init argument/class arguments but `product_name/product, version_number/version`. I'd suggest making them the same names for consistency."", 'comment_created': datetime.datetime(2021, 8, 16, 21, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 689872764, 'comment_body': ""> And another note: you use filename/filename, string_length/string_length for init argument/class arguments but product_name/product, version_number/version. I'd suggest making them the same names for consistency.\r\n\r\nI'll make these changes now :)\r\n\r\n> Thanks, now I see that you actually get self.product, self.version from this filename argument. But why is it required? If someone passes both product_name and version_number, you will use them and discard what you parsed from filename, right?\r\n\r\nI also do not quite like this here, because if the user specifies the `product_name` and `version_name`, we would discard the above work done. But, since we only scan it against a short string and a few cases, so it should not affect the performance by much and I decided to settle with this."", 'comment_created': datetime.datetime(2021, 8, 16, 21, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 693132015, 'comment_body': ""Can you create an issue for that if it's still something planned?"", 'comment_created': datetime.datetime(2021, 8, 20, 18, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 693133971, 'comment_body': ""Sorry, I almost forgot about it. I'll do that now :)"", 'comment_created': datetime.datetime(2021, 8, 20, 18, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}]","[{'commit_sha': '37d2d7df6fe960ee0af4d81fd658b3723b1de913', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd303f2eb6f9dbf2f3f4a03bc2f9d61c9a46a3a30', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '375b4f483fb5bb12b5c0a99bf6cd09a139dfcde6', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eedfbe1d3bd977e9ab96a825df35abe5705e2815', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad6d2b15baff1474d8c04543250aa77c8d3a28f0', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31ca3b0c8b9da54040ec70fbabf7860a3a53e76e', 'committer_username': 'imsahil007', 'committer_name': 'Sahil', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 30, 14, 27, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a5ce74eac7a9cabb0947edbc3684d51f7fbfdc4', 'committer_username': 'imsahil007', 'committer_name': 'Sahil', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 30, 14, 27, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '117e325c154b6ee83aefd7c3eceaf7762488d282', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77e9021da713eaf62819c03f942ec024e70d1868', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2338715fd581967697e866526816976e6d43da35', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6288d5221296ac5ee51f9cc8e18e0846f4e33b22', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '105d2b812bad9f43631b519551ee2a2bd2e12575', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7615dd25c5d3485d64b664d061774a921da8196', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5941d75465382e3facb817e45d84d8739e79746f', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ddbb06f06dea106089693284a80ade566b33b92', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec8a2200e6ac78996bf0fb244a3c120f9f736d77', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ca0c91a8720a1dd8edaf7888ab028d5b469c89a', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31711113c9c38ec3157932e3c2cdf5d4dbddd64d', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bbc0af11d843e758f16b6353398642fc1c043a3', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '227ddf8efc31bbb6f66ce18561676cbd8363438b', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ec7758c8464164c1db38137d06e41d648dc54c', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eca217c945907f144c29da3dd2cfcb07b03a1901', 'committer_username': 'imsahil007', 'committer_name': 'Sahil', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 30, 14, 27, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c0ad81f0bd655dc7dd72f6ba4d6776c9f46bda', 'committer_username': 'imsahil007', 'committer_name': 'Sahil', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 30, 14, 27, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba41bdab629e8bb416e9b0d50dc99629429154f', 'committer_username': 'anthonyharrison', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 11, 22, 16, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b4fbf5216cf1476d3d091a26fdd7b9877d8c8e2', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '167fe4483f07add1473917c3f0f5ed1a0fd06e96', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e3d9fc99cb7cb4d3b2ed933c7993f3578d6e70', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7898bc8212cda3691c548952c97c6a5e6d426987', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ca3ac974dfcc8771b0b0d9a0c847b7631c09ab8', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de16a1fb5f45dfcd657d7ae63be6224138ad799b', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30881cccb1df0db195b88042b8550a303697ab3b', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f5853061138cbf35ff77b292378566d41d00341', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e33d69105f0a2b0f653b3a5707018aed0cbe70f3', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0910d496836300bfce6c0573444a63152d9d59f', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '664c993ccfd15fc9e17b01b37b48f6b4cb80a2de', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ffaea404c76e379082f2ffa48a1c1a9a4f32233', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36add74484e4cbd782b2f39f37e6a08f084d0f06', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45578e8c9ab79ae872ee432692901e812431f7fc', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4929e88f1e8adee863c330ed54e9b871b91ca327', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c47855da0cbcf35a703afa3aa8807408b741887a', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}]",Harsh,77539004,,User,,36,,22,27
698030639,feat: recommending safe packages,,True,1284,https://api.github.com/repos/intel/cve-bin-tool/pulls/1284,https://github.com/intel/cve-bin-tool/pull/1284,closed,370,28,6,43,8,23,0,0,[],2021-07-27 17:03:14+00:00,2021-08-11 16:46:25+00:00,1294991.0,"14 days, 23:43:11","[{'comment_id': 682146496, 'comment_body': '```suggestion\r\n    output_group.add_argument(\r\n        ""--affected-versions"",\r\n        action=""count"",\r\n        default=0,\r\n        help=""Lists versions of product affected by a given CVE (to facilitate upgrades)"",\r\n    )\r\n```\r\n\r\nI don\'t like ""verbose"" for this because it doesn\'t really explain what\'s being added to the report, and I think we can do more to explain to a user why they\'d want to use this flag in the help text.', 'comment_created': datetime.datetime(2021, 8, 3, 22, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}, {'comment_id': 682146641, 'comment_body': ""And sorry, I know changing it here is going to require you to change it all over!  But I'd rather get it right in the PR stage than have to refactor it later."", 'comment_created': datetime.datetime(2021, 8, 3, 22, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}, {'comment_id': 682149708, 'comment_body': 'faciliTate', 'comment_created': datetime.datetime(2021, 8, 3, 22, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 682157492, 'comment_body': 'Updated, thanks.  Not sure why my in-browser spell check missed that one!', 'comment_created': datetime.datetime(2021, 8, 3, 23, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}, {'comment_id': 682889326, 'comment_body': ""This `if...else` is just a huge chunk of duplication, I'm not sure how much it would affect performance but I would put this `if` in the inner loop and append `affected_versions` to the last CVE if needed. But only if it won't slow down things much of course."", 'comment_created': datetime.datetime(2021, 8, 4, 19, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 682889367, 'comment_body': '1. `versions` is pretty self-explanatory, or maybe `list_of_versions`.\r\n2. I\'m pretty sure constant definitions in functions violate PEP8, you probably should make them regular variables (lowercase) or extract them outside of the function.\r\n3. What\'s the point of `STR_EMPTY`? :) Just compare with an empty string :)\r\n4. Pythonic way of checking an empty string is just `if str:`\r\n5. All your default values for versions are empty strings and you change them only if they are not empty 🤔 I\'m pretty sure all these `if`s are unnecessary!\r\n6. `is not` in not the same as `!=`:\r\n```py\r\ns1 = ""xyz""\r\ns2 = """".join([""x"", ""y"", ""z""])\r\nif s1 is not s2:\r\n    print(""Different"")\r\nelse:\r\n    print(""Same"")\r\n```\r\nThis will print `Different` and it\'s probably not what you wanted 😉 \r\n\r\n```suggestion\r\ndef parse_version_info(versions):\r\n    empty_range = ["""", """"]\r\n    affected_versions = {\r\n        ""including"": [versions[0], versions[2]],\r\n        ""excluding"": [versions[1], versions[3]],\r\n    }\r\n\r\n    if versions:\r\n        if affected_versions[""including""] != empty_range:\r\n            return f""[{affected_versions[\'including\'][0]} - {affected_versions[\'including\'][1]}]""\r\n        if affected_versions[""excluding""] != empty_range:\r\n            return f""({affected_versions[\'excluding\'][0]} - {affected_versions[\'excluding\'][1]})""\r\n    else:\r\n        return ""-""\r\n```', 'comment_created': datetime.datetime(2021, 8, 4, 19, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 683415312, 'comment_body': 'Thank you for the review! :D\r\nThat was a really clean hack.', 'comment_created': datetime.datetime(2021, 8, 5, 12, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 683477931, 'comment_body': 'This docstring is badly formatted:\r\n![image](https://user-images.githubusercontent.com/12860284/128362082-fed95d0b-59df-4b38-99d5-7070981060bb.png)\r\n\r\nConsider this:\r\n```suggestion\r\n    """"""\r\n    Formats version info to desirable output\r\n    ```\r\n    versions = [""start_including"", ""start_excluding"", ""end_including"", ""start_excluding""]\r\n    ```\r\n    Example:\r\n    ```\r\n        format_version_info([""2.2.8"", """", ""2.2.11"", """"]) => ""[2.2.8 - 2.2.11]""\r\n        format_version_info(["""", ""2.2.8"", """", ""2.2.11""]) => ""(2.2.8 - 2.2.11)""\r\n        format_version_info([]) => ""-""\r\n    ```\r\n\r\n    Reference for Interval terminologies: https://en.wikipedia.org/wiki/Interval_(mathematics)\r\n    """"""\r\n```\r\n![image](https://user-images.githubusercontent.com/12860284/128362426-b741611b-e940-494c-8ffc-8de039fa4c4a.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 5, 13, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 683480296, 'comment_body': '```suggestion\r\n        affected_versions = {\r\n```\r\nStill think plural is better, or even `affected_range`', 'comment_created': datetime.datetime(2021, 8, 5, 13, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 683480724, 'comment_body': '```suggestion\r\n        if affected_version[""including""] != empty_range:\r\n```\r\nSame for the next `if`', 'comment_created': datetime.datetime(2021, 8, 5, 14, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 683486609, 'comment_body': '```suggestion\r\n        if affected_versions[""excluding""] != empty_range:\r\n            return f""({affected_versions[\'excluding\'][0]} - {affected_versions[\'excluding\'][1]})""\r\n    return ""-""\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 14, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 684808458, 'comment_body': 'Can anyone think of a better approach for this? OR we could just wait for python 3.10 and add the ""Structural Pattern Matching"" (Maybe we should open a ""good first issue"" issue for this as a reminder for future)', 'comment_created': datetime.datetime(2021, 8, 8, 17, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 684812268, 'comment_body': 'Is there a way to deduplicate this? 🤔 ', 'comment_created': datetime.datetime(2021, 8, 8, 18, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 684816200, 'comment_body': 'I wrote a comment for this, but am not able to find it now. So, I\'m writing it again :(\r\n\r\nCan we do something else (instead of `try... except` block) to handle the `UNKNOWN` and some cves which are not found in the `all_cve_version_info` dictionary?\r\n\r\nFor `UNKNOWN`, maybe we could could add a `key: value` pair of `""UNKNOWN"": VersionInfo(\'\', \'\', \'\', \'\')` at the start/end of this dictionary.\r\n\r\nBut, when some cves are not found in the `all_cve_version_info`, what could be a more clean/absolute way of handling both these error?\r\n\r\nI\'m facing this issue when running it over `wireshark-1.10.14-25.el7.i686.rpm` and currently I get this:\r\n```\r\n(cve_env) peb@ooo:/cve-bin-tool$ python3 -m cve_bin_tool.cli -u never --affected-versions ../test/wireshark-1.10.14-25.el7.i686.rpm\r\n┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\r\n┃ Vendor    ┃ Product   ┃ Version ┃ CVE Number     ┃ Severity ┃ Score (CVSS Version) ┃ Affected Versions ┃\r\n┡━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\r\n│ wireshark │ wireshark │ 1.10.14 │ CVE-2015-3182  │ MEDIUM   │ 5.5 (v3)             │ -                 │\r\n│ wireshark │ wireshark │ 1.10.14 │ CVE-2015-3814  │ MEDIUM   │ 5 (v2)               │ -                 │\r\n│ wireshark │ wireshark │ 1.10.14 │ CVE-2017-17935 │ HIGH     │ 7.5 (v3)             │ <= 2.2.11         │\r\n│ wireshark │ wireshark │ 1.10.14 │ CVE-2017-17997 │ HIGH     │ 7.5 (v3)             │ <= 2.2.11         │\r\n│ wireshark │ wireshark │ 1.10.14 │ CVE-2017-6014  │ HIGH     │ 7.5 (v3)             │ <= 2.2.4          │\r\n│ wireshark │ wireshark │ 1.10.14 │ CVE-2018-14438 │ HIGH     │ 7.5 (v3)             │ <= 2.6.2          │\r\n│ wireshark │ wireshark │ 1.10.14 │ CVE-2018-6836  │ CRITICAL │ 9.8 (v3)             │ <= 2.4.4          │\r\n│ wireshark │ wireshark │ 1.10.14 │ CVE-2020-26575 │ HIGH     │ 7.5 (v3)             │ <= 3.2.7          │\r\n└───────────┴───────────┴─────────┴────────────────┴──────────┴──────────────────────┴───────────────────┘\r\n```\r\n\r\nhere, `all_cve_version_info` returns \r\n```\r\ndefaultdict(<class \'cve_bin_tool.util.VersionInfo\'>, \r\n  {\r\n    \'CVE-2017-17935\': VersionInfo(start_including=\'\', start_excluding=\'\', end_including=\'2.2.11\', end_excluding=\'\'), \r\n    \'CVE-2017-17997\': VersionInfo(start_including=\'\', start_excluding=\'\', end_including=\'2.2.11\', end_excluding=\'\'), \r\n    \'CVE-2017-6014\': VersionInfo(start_including=\'\', start_excluding=\'\', end_including=\'2.2.4\', end_excluding=\'\'), \r\n    \'CVE-2018-14438\': VersionInfo(start_including=\'\', start_excluding=\'\', end_including=\'2.6.2\', end_excluding=\'\'), \r\n    \'CVE-2018-6836\': VersionInfo(start_including=\'\', start_excluding=\'\', end_including=\'2.4.4\', end_excluding=\'\'), \r\n    \'CVE-2020-26575\': VersionInfo(start_including=\'\', start_excluding=\'\', end_including=\'3.2.7\', end_excluding=\'\')\r\n  }\r\n)\r\n```\r\nHere, `all_cve_version_info` doesn\'t contain `CVE-2015-3182` and `CVE-2015-3814`.', 'comment_created': datetime.datetime(2021, 8, 8, 19, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 684817582, 'comment_body': ""First of all, `all_cve_version_info` is already a dictionary so you don't need to convert it to `dict` again.\r\nSecond, just use unpacking:\r\n```suggestion\r\n                    (\r\n                        start_including,\r\n                        start_excluding,\r\n                        end_including,\r\n                        end_excluding,\r\n                    ) = all_cve_version_info[cve.cve_number]\r\n```"", 'comment_created': datetime.datetime(2021, 8, 8, 19, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 684818366, 'comment_body': '```suggestion\r\n    Format version info to desirable output\r\n```\r\nJust to be consistent with another function in this module', 'comment_created': datetime.datetime(2021, 8, 8, 19, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 684818443, 'comment_body': '```suggestion\r\n        format_version_info([]) => ""-""\r\n```\r\nWhen can you get an empty list instead of four arguments? I think this needs to be removed or changed to four empty strings?', 'comment_created': datetime.datetime(2021, 8, 8, 19, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 684819808, 'comment_body': 'Or go further and:\r\n1. Add default values `""""` to your `VersionInfo` class.\r\n2. Change `format_version_range` to accept `VersionInfo` class.\r\n3. Rewrite this whole `if` like this:\r\n```py\r\n            if affected_versions != 0:\r\n                try:\r\n                    version_info = all_cve_version_info[cve.cve_number]\r\n                except KeyError:  # TODO: handle \'UNKNOWN\' and some cves more cleanly\r\n                    version_info = VersionInfo()\r\n                cve_by_remarks[cve.remarks][-1].update(\r\n                    {""affected_versions"": format_version_range(version_info)}\r\n                )\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 19, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 684821555, 'comment_body': 'Waiting for Python 3.10 is not an option as cve-bin-tool supports all currently supported Python versions. So 3.9 will go out of support in 2025, only then 3.10 will become the minimum supported version (of course if cve-bin-tool continues to support all versions).\r\n\r\nI would still rewrite it a bit because `if versions` check is useless (tuple of empty strings evaluates to `True`):\r\n```py\r\ndef format_version_range(version_info: VersionInfo) -> str:\r\n    (start_including, start_excluding, end_including, end_excluding) = version_info\r\n    if start_including and end_including:\r\n        return f""[{start_including} - {end_including}]""\r\n    if start_including and end_excluding:\r\n        return f""[{start_including} - {end_excluding})""\r\n    if start_excluding and end_including:\r\n        return f""({start_excluding} - {end_including}]""\r\n    if start_excluding and end_excluding:\r\n        return f""({start_excluding} - {end_excluding})""\r\n    if start_including:\r\n        return f"">= {start_including}""\r\n    if start_excluding:\r\n        return f""> {start_excluding}""\r\n    if end_including:\r\n        return f""<= {end_including}""\r\n    if end_excluding:\r\n        return f""< {end_excluding}""\r\n    return ""-""\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 19, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 684823984, 'comment_body': 'Yeah\r\n```py\r\n            cells = [\r\n                Text.styled(cve_data[""vendor""], color),\r\n                Text.styled(cve_data[""product""], color),\r\n                Text.styled(cve_data[""version""], color),\r\n                linkify_cve(Text.styled(cve_data[""cve_number""], color)),\r\n                Text.styled(cve_data[""severity""], color),\r\n                Text.styled(\r\n                    f""{cve_data[\'score\']} (v{cve_data[\'cvss_version\']})"", color\r\n                ),\r\n            ]\r\n            if affected_versions != 0:\r\n                cells.append(Text.styled(cve_data[""affected_versions""], color))\r\n            table.add_row(*cells)\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 20, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 684824850, 'comment_body': 'While you are here might as well change variable names to Python style\r\n\r\n```suggestion\r\n                    start_including=version_start_including,\r\n                    start_excluding=version_start_excluding,\r\n                    end_including=version_end_including,\r\n                    end_excluding=version_end_excluding,\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 20, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Molkree', 'type': 'User'}, {'comment_id': 685155307, 'comment_body': 'I was using `all_cve_version_info` with defaultdict and was facing issues with it and this was the solution I decided to go with (it never occurred to me that I could just use `dict` here) :(\r\n\r\n>             if affected_versions != 0:\r\n>                 try:\r\n>                     version_info = all_cve_version_info[cve.cve_number]\r\n>                 except KeyError:  # TODO: handle \'UNKNOWN\' and some cves more cleanly\r\n>                     version_info = VersionInfo()\r\n>                 cve_by_remarks[cve.remarks][-1].update(\r\n>                     {""affected_versions"": format_version_range(version_info)}\r\n>                 )\r\n\r\nThis was a very clean change :)\r\nBut, can we do something better? (OR can we remove  `# TODO: handle \'UNKNOWN\' and some cves more cleanly`)\r\n ', 'comment_created': datetime.datetime(2021, 8, 9, 12, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 685161297, 'comment_body': '> I would still rewrite it a bit because if versions check is useless (tuple of empty strings evaluates to True):\r\n\r\nyeah, it makes more sense, since we now handle the `""UNKNOWN""` and other `KeyError` before calling `format_version_range` and no empty tuples would be passed. But I would still keep that last `retrun ""-""` in case of something.', 'comment_created': datetime.datetime(2021, 8, 9, 12, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}]","[{'commit_sha': '37d2d7df6fe960ee0af4d81fd658b3723b1de913', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd303f2eb6f9dbf2f3f4a03bc2f9d61c9a46a3a30', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '375b4f483fb5bb12b5c0a99bf6cd09a139dfcde6', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eedfbe1d3bd977e9ab96a825df35abe5705e2815', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad6d2b15baff1474d8c04543250aa77c8d3a28f0', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31ca3b0c8b9da54040ec70fbabf7860a3a53e76e', 'committer_username': 'imsahil007', 'committer_name': 'Sahil', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 30, 14, 27, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a5ce74eac7a9cabb0947edbc3684d51f7fbfdc4', 'committer_username': 'imsahil007', 'committer_name': 'Sahil', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 30, 14, 27, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '117e325c154b6ee83aefd7c3eceaf7762488d282', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77e9021da713eaf62819c03f942ec024e70d1868', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2338715fd581967697e866526816976e6d43da35', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6288d5221296ac5ee51f9cc8e18e0846f4e33b22', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '105d2b812bad9f43631b519551ee2a2bd2e12575', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7615dd25c5d3485d64b664d061774a921da8196', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5941d75465382e3facb817e45d84d8739e79746f', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ddbb06f06dea106089693284a80ade566b33b92', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec8a2200e6ac78996bf0fb244a3c120f9f736d77', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ca0c91a8720a1dd8edaf7888ab028d5b469c89a', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31711113c9c38ec3157932e3c2cdf5d4dbddd64d', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bbc0af11d843e758f16b6353398642fc1c043a3', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '227ddf8efc31bbb6f66ce18561676cbd8363438b', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ec7758c8464164c1db38137d06e41d648dc54c', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eca217c945907f144c29da3dd2cfcb07b03a1901', 'committer_username': 'imsahil007', 'committer_name': 'Sahil', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 30, 14, 27, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c0ad81f0bd655dc7dd72f6ba4d6776c9f46bda', 'committer_username': 'imsahil007', 'committer_name': 'Sahil', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 30, 14, 27, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba41bdab629e8bb416e9b0d50dc99629429154f', 'committer_username': 'anthonyharrison', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 11, 22, 16, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b4fbf5216cf1476d3d091a26fdd7b9877d8c8e2', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '167fe4483f07add1473917c3f0f5ed1a0fd06e96', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e3d9fc99cb7cb4d3b2ed933c7993f3578d6e70', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7898bc8212cda3691c548952c97c6a5e6d426987', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ca3ac974dfcc8771b0b0d9a0c847b7631c09ab8', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5f60b9689487052027870bf44ed59d78cc0dfb6', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11da696e72470f154a5f34e8a96bf3b1a99a9f18', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9fc05d486b1d594c688f0505eaecf570bf50825', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f03ab41af7f236e6c7a700cb37dd2bcd990c262e', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c7d359197efb53cdb3d80bc224adf0ad8bfc044', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a455a2041a13771474948df8ed6cffe4357291d', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca10757e726eefc668d6f645bcc0f5db6e46dd42', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8a493f53c82f5e3890a94dcc7bcc0b82e32836a', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3641b073e8b3d8338654cd7302076217f8411863', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01a7c5f7907075c35730896249854b613f0ce3c4', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb1e80c4dc27324d550ab60bdd31a51d0789dc8b', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c61e9d02d91b5ec3680a19efa818fa3fed60e06c', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '709fd694cecdfd6074eebbe71cdcaa4a8b405e9c', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e1ca788c1c2ebe72605ab8fc21707e50ed10bc6', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}]",Harsh,77539004,,User,,36,,22,27
676105818,Updated existing checkers using Helper Script,"- [ ] add `# Alternate optional contains patterns, see <link to helper script docs> for more details`

checkers checked against the Helper Script:
- [x] avahi
- [x] bash
- [x] bind
- [x] binutils (not scanned - already has good signatures)
- [x] busybox
- [x] bzip2
- [x] cups
- [x] curl
- [ ] dnsmasq
- [x] dovecot
- [ ] dpkg --not scanned
- [ ] expat --not getting the exact vendor-product pair
- [ ] ffmpeg --breaks the script
- [x] freeradius
- [ ] gcc
- [ ] gimp
- [ ] glibc
- [ ] gnupg
- [ ] gstreamer
- [ ] haproxy
- [ ] hostpad
- [ ] icecast
- [x] icu #1208 
- [x] irissi
- [ ] kerberos
- [x] libarchive (no proper strings available for `CONTAINS_PATTERNS`)
- [ ] libcurl
- [ ] libdb
- [ ] libgcrypt
- [ ] libjpeg
- [x] libnss (not scanned - already has good signatures)
- [x] linsndfile
- [x] libsoup (no proper strings available for `CONTAINS_PATTERNS`)
- [x] libssh2
- [ ] libtiff
- [ ] libvirt
- [ ] libxslt
- [ ] lighttpd
- [ ] logrotate
- [ ] mariadb
- [ ] memchand
- [ ] mysql
- [ ] ncurses
- [ ] nessus
- [ ] netpbm
- [ ] nginx
- [ ] node
- [ ] ntp
- [ ] openafs
- [ ] openjpeg
- [ ] openldap
- [ ] openssh
- [ ] openssl
- [ ] openvpn
- [ ] p7zip
- [ ] png
- [ ] polarssl_fedora
- [ ] postgresql
- [ ] pspp
- [ ] python
- [ ] qt
- [ ] radare2
- [ ] rsyslog
- [ ] samba
- [ ] sqlite
- [ ] strongswan
- [ ] subversion
- [ ] syslogng
- [ ] systemd
- [ ] tcpdump
- [ ] varnish
- [ ] webkitgtk
- [ ] wireshark
- [ ] wpa_supplicant
- [ ] xerces
- [ ] xml2
- [ ] zlib",True,1189,https://api.github.com/repos/intel/cve-bin-tool/pulls/1189,https://github.com/intel/cve-bin-tool/pull/1189,closed,298,48,55,58,4,12,0,0,[],2021-06-23 09:19:32+00:00,2021-08-18 16:31:13+00:00,4864301.0,"56 days, 7:11:41","[{'comment_id': 656918884, 'comment_body': 'While searching for strings in `bind`, there were no strings with `VERSION_PATTERNS = [r""BIND ([0-9]+\\.[0-9]+\\.[0-9]+)""]` \r\nin `.deb` packages. But, this string was present in `.rpm`, `.tgz`\r\n\r\nThe `CONTAINS_PATTERNS ` contains the strings, which were common in all packages (.rpm, .deb, .tgz).', 'comment_created': datetime.datetime(2021, 6, 23, 9, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 656922995, 'comment_body': 'This is the output that I got for `.rpm` packages:\r\n\r\n```\r\nol/helper_script.py bind-9.16.6-20.39.x86_64.rpm\r\nisc_socket_bind\r\nbind9_check_key\r\nbind9_check_namedconf\r\ncfg_type_bindkeys\r\nldap_bind_s\r\nldap_unbind_s\r\nlibbind9.so.1600\r\nnamed_g_defaultbindkeys\r\n/etc/bind.keys\r\nBIND\r\nnamed version: BIND 9.16.6 <25846cf>\r\nBIND 9 is maintained by Internet Systems Consortium,\r\ncorporation.  Support and training for BIND 9 are\r\n\'--host=x86_64-suse-linux-gnu\' \'--build=x86_64-suse-linux-gnu\' \'--program-prefix=\' \'--prefix=/usr\' \'--exec-prefix=/usr\' \'--bindir=/usr/bin\' \'--sbindir=/usr/sbin\' \'--sysconfdir=/etc\' \'--datadir=/usr/share\' \'--includedir=/usr/include\' \'--libdir=/usr/lib64\' \'--libexecdir=/usr/lib\' \'--localstatedir=/var\' \'--sharedstatedir=/var/lib\' \'--mandir=/usr/share/man\' \'--infodir=/usr/share/info\' \'--disable-dependency-tracking\' \'--with-python=/usr/bin/python3\' \'--includedir=/usr/include/bind\' \'--disable-static\' \'--with-openssl\' \'--enable-threads\' \'--with-libtool\' \'--with-libxml2\' \'--with-libjson\' \'--with-libidn2\' \'--with-dlz-mysql\' \'--with-dlz-ldap\' \'--with-randomdev=/dev/urandom\' \'--enable-ipv6\' \'--with-pic\' \'--disable-openssl-version-check\' \'--with-tuning=large\' \'--with-geoip\' \'--with-dlopen\' \'--with-gssapi=yes\' \'--disable-isc-spnego\' \'--enable-fixed-rrset\' \'--enable-filter-aaaa\' \'--with-systemd\' \'--enable-full-report\' \'build_alias=x86_64-suse-linux-gnu\' \'host_alias=x86_64-suse-linux-gnu\' \'CFLAGS=-fmessage-length=0 -grecord-gcc-switches -O2 -Wall -D_FORTIFY_SOURCE=2 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -g -DNO_VERSION_DATE\' \'PKG_CONFIG_PATH=:/usr/lib64/pkgconfig:/usr/share/pkgconfig\'\r\nserver->bindkeysfile != ((void *)0)\r\n_bind\r\nversion.bind/txt/ch disabled\r\nbindkeys-file\r\nbinding control channel(s)\r\nUDP/IPv4 socket bind failures\r\nUDP4BindFail\r\nUDP/IPv6 socket bind failures\r\nUDP6BindFail\r\nTCP/IPv4 socket bind failures\r\nTCP4BindFail\r\nTCP/IPv6 socket bind failures\r\nTCP6BindFail\r\nUnixBindFail\r\nFDwatch socket bind failures\r\nFdwatchBindFail\r\n/bind9.xsl\r\ntype=""text/xsl"" href=""/bind9.xsl""\r\nUnix domain socket bind failures\r\nLDAP driver failed while sending data to BIND.\r\nLDAP driver could not bind connection number %u to server.\r\nbindkeys-file ""/etc/bind.keys"";\r\ntry-tcp-refresh yes; /* BIND 8 compat */\r\n#  Zones in the ""_bind"" view are NOT counted in the count of zones.\r\nview ""_bind"" chaos {\r\nzone ""version.bind"" chaos {\r\nzone ""hostname.bind"" chaos {\r\nzone ""authors.bind"" chaos {\r\n#  sysconfdir/bind.keys doesn\'t exist).\r\n# The bind.keys file is used to override the built-in DNSSEC trust anchors\r\n# which are included as part of BIND 9.  The only trust anchors it contains\r\n# file with a current version.  The latest version of bind.keys can always\r\n# be obtained from ISC at https://www.isc.org/bind-keys.\r\n<title>ISC BIND 9 Statistics</title>\r\n<h1>ISC Bind 9 Configuration and Statistics</h1>\r\nbind9_check_namedconf\r\nlibbind9.so.1600\r\nVERSION_PATTERN = [\'libbind9.so.1600\', \'named version: BIND 9.16.6 <25846cf>\', ""\'--host=x86_64-suse-linux-gnu\' \'--build=x86_64-suse-linux-gnu\' \'--program-prefix=\' \'--prefix=/usr\' \'--exec-prefix=/usr\' \'--bindir=/usr/bin\' \'--sbindir=/usr/sbin\' \'--sysconfdir=/etc\' \'--datadir=/usr/share\' \'--includedir=/usr/include\' \'--libdir=/usr/lib64\' \'--libexecdir=/usr/lib\' \'--localstatedir=/var\' \'--sharedstatedir=/var/lib\' \'--mandir=/usr/share/man\' \'--infodir=/usr/share/info\' \'--disable-dependency-tracking\' \'--with-python=/usr/bin/python3\' \'--includedir=/usr/include/bind\' \'--disable-static\' \'--with-openssl\' \'--enable-threads\' \'--with-libtool\' \'--with-libxml2\' \'--with-libjson\' \'--with-libidn2\' \'--with-dlz-mysql\' \'--with-dlz-ldap\' \'--with-randomdev=/dev/urandom\' \'--enable-ipv6\' \'--with-pic\' \'--disable-openssl-version-check\' \'--with-tuning=large\' \'--with-geoip\' \'--with-dlopen\' \'--with-gssapi=yes\' \'--disable-isc-spnego\' \'--enable-fixed-rrset\' \'--enable-filter-aaaa\' \'--with-systemd\' \'--enable-full-report\' \'build_alias=x86_64-suse-linux-gnu\' \'host_alias=x86_64-suse-linux-gnu\' \'CFLAGS=-fmessage-length=0 -grecord-gcc-switches -O2 -Wall -D_FORTIFY_SOURCE=2 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -g -DNO_VERSION_DATE\' \'PKG_CONFIG_PATH=:/usr/lib64/pkgconfig:/usr/share/pkgconfig\'"", \'libbind9.so.1600\']\r\nFILENAME_PATTERN = [\'named\', \'named-checkconf\']\r\nVENDOR_PRODUCT = [(\'isc\', \'bind\')]\r\n```\r\n\r\nand this for `.deb` packages:\r\n\r\n```\r\nol/helper_script.py bind9_9.16.15-1_amd64.deb\r\n/usr/lib/debug/.dwz/x86_64-linux-gnu/bind9.debug\r\nbind9_check_key\r\nbind9_check_namedconf\r\nlibbind9-9.16.15-Debian.so\r\n\'--build=x86_64-linux-gnu\' \'--prefix=/usr\' \'--includedir=/usr/include\' \'--mandir=/usr/share/man\' \'--infodir=/usr/share/info\' \'--sysconfdir=/etc\' \'--localstatedir=/var\' \'--disable-option-checking\' \'--disable-silent-rules\' \'--libdir=/usr/lib/x86_64-linux-gnu\' \'--runstatedir=/run\' \'--disable-maintainer-mode\' \'--disable-dependency-tracking\' \'--libdir=/usr/lib/x86_64-linux-gnu\' \'--sysconfdir=/etc/bind\' \'--with-python=python3\' \'--localstatedir=/\' \'--enable-threads\' \'--enable-largefile\' \'--with-libtool\' \'--enable-shared\' \'--enable-static\' \'--with-gost=no\' \'--with-openssl=/usr\' \'--with-gssapi=/usr\' \'--with-libidn2\' \'--with-json-c\' \'--with-lmdb=/usr\' \'--with-gnu-ld\' \'--with-maxminddb\' \'--with-atf=no\' \'--enable-ipv6\' \'--enable-rrl\' \'--enable-filter-aaaa\' \'--disable-native-pkcs11\' \'--enable-dnstap\' \'build_alias=x86_64-linux-gnu\' \'CFLAGS=-g -O2 -ffile-prefix-map=/build/bind9-QWnomE/bind9-9.16.15=. -fstack-protector-strong -Wformat -Werror=format-security -fno-strict-aliasing -fno-delete-null-pointer-checks -DNO_VERSION_DATE -DDIG_SIGCHASE\' \'LDFLAGS=-Wl,-z,relro -Wl,-z,now\' \'CPPFLAGS=-Wdate-time -D_FORTIFY_SOURCE=2\'\r\n/bind9.xsl\r\ntype=""text/xsl"" href=""/bind9.xsl""\r\n/usr/lib/debug/.dwz/x86_64-linux-gnu/bind9.debug\r\n/usr/lib/debug/.dwz/x86_64-linux-gnu/bind9.debug\r\n/usr/lib/debug/.dwz/x86_64-linux-gnu/bind9.debug\r\n/usr/lib/debug/.dwz/x86_64-linux-gnu/bind9.debug\r\n/usr/lib/debug/.dwz/x86_64-linux-gnu/bind9.debug\r\n/usr/lib/debug/.dwz/x86_64-linux-gnu/bind9.debug\r\n/usr/lib/debug/.dwz/x86_64-linux-gnu/bind9.debug\r\n/usr/lib/debug/.dwz/x86_64-linux-gnu/bind9.debug\r\nVERSION_PATTERN = [\'libbind9-9.16.15-Debian.so\', ""\'--build=x86_64-linux-gnu\' \'--prefix=/usr\' \'--includedir=/usr/include\' \'--mandir=/usr/share/man\' \'--infodir=/usr/share/info\' \'--sysconfdir=/etc\' \'--localstatedir=/var\' \'--disable-option-checking\' \'--disable-silent-rules\' \'--libdir=/usr/lib/x86_64-linux-gnu\' \'--runstatedir=/run\' \'--disable-maintainer-mode\' \'--disable-dependency-tracking\' \'--libdir=/usr/lib/x86_64-linux-gnu\' \'--sysconfdir=/etc/bind\' \'--with-python=python3\' \'--localstatedir=/\' \'--enable-threads\' \'--enable-largefile\' \'--with-libtool\' \'--enable-shared\' \'--enable-static\' \'--with-gost=no\' \'--with-openssl=/usr\' \'--with-gssapi=/usr\' \'--with-libidn2\' \'--with-json-c\' \'--with-lmdb=/usr\' \'--with-gnu-ld\' \'--with-maxminddb\' \'--with-atf=no\' \'--enable-ipv6\' \'--enable-rrl\' \'--enable-filter-aaaa\' \'--disable-native-pkcs11\' \'--enable-dnstap\' \'build_alias=x86_64-linux-gnu\' \'CFLAGS=-g -O2 -ffile-prefix-map=/build/bind9-QWnomE/bind9-9.16.15=. -fstack-protector-strong -Wformat -Werror=format-security -fno-strict-aliasing -fno-delete-null-pointer-checks -DNO_VERSION_DATE -DDIG_SIGCHASE\' \'LDFLAGS=-Wl,-z,relro -Wl,-z,now\' \'CPPFLAGS=-Wdate-time -D_FORTIFY_SOURCE=2\'""]\r\nFILENAME_PATTERN = [\'named\']\r\nVENDOR_PRODUCT = [(\'isc\', \'bind\')]\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 9, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 656938910, 'comment_body': 'we might need to add a debian version of `VERSION_STRING` too then.', 'comment_created': datetime.datetime(2021, 6, 23, 9, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'BreadGenie', 'type': 'User'}, {'comment_id': 657008889, 'comment_body': ""I've updated the `VERSION_PATTERNS`. Now it should be scanning for .deb versions too...\r\nI made the regex based on `bind9-9.16.15` "", 'comment_created': datetime.datetime(2021, 6, 23, 11, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 657024973, 'comment_body': ""I'm curious about why these strings are commented out 🤔"", 'comment_created': datetime.datetime(2021, 6, 23, 12, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BreadGenie', 'type': 'User'}, {'comment_id': 658348272, 'comment_body': 'If you\'re going to put a few commented out strings in as backups, do put a comment explaining why they\'re there and where they came from. It can be pretty wordy and take up a few lines if you want, like ""The strings below were found with <some sort of link to the helper script or helper script docs> as potential alternate contains patterns if the currently used strings (above) stop working in future versions.""\r\n\r\nOr you could be terse in the checker but link to a longer explanation elsewhere.\r\n```\r\n# Alternate optional contains patterns, see <link to helper script docs> for more details\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 24, 23, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}, {'comment_id': 659167797, 'comment_body': 'I was going with the version pattern `r""bzip2(recover)?[ -]([0-9]+\\.[0-9]+\\.[0-9]+)""`, but this was resulting in failing of all tests. \r\n\r\n```\r\nversion_patterns = [re.compile(\'bzip2(recover)?[ -]([0-9]+\\\\.[0-9]+\\\\.[0-9]+)\')]\r\n\r\n    def regex_find(lines, version_patterns) -> str:\r\n        """"""Search a set of lines to find a match for the given regex""""""\r\n        new_guess = """"\r\n\r\n        for line in lines:\r\n            for pattern in version_patterns:\r\n                match = pattern.search(line)\r\n                if match:\r\n>                   new_guess2 = match.group(1).strip()\r\nE                   AttributeError: \'NoneType\' object has no attribute \'strip\'\r\n\r\ncve_bin_tool/util.py:86: AttributeError\r\n```\r\n\r\nShould we add a warning stating this? ', 'comment_created': datetime.datetime(2021, 6, 26, 13, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 659168375, 'comment_body': ""it seems like version is not detected in that pattern hence the `NoneType` in `group(1)`.\nWe may not need that pattern, since it doesn't work. \n\nEdit: `group(1)` should be replaced by `group(2)` since there's a parenthesis around `recover` which will match as `group(1)`"", 'comment_created': datetime.datetime(2021, 6, 26, 13, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BreadGenie', 'type': 'User'}, {'comment_id': 659171190, 'comment_body': '@BreadGenie This is what I am receiving as in version strings for .rpm,\r\n\r\n```\r\nVERSION_PATTERNS = [\r\n        bzip2recover 1.0.6: extracts blocks from damaged .bz2 files.,\r\n        in the bzip2-1.0.6 source distribution.,\r\n]\r\n```\r\nand this for .deb\r\n```\r\nVERSION_PATTERNS = [\r\n        bzip2recover 1.0.8: extracts blocks from damaged .bz2 files.,\r\n]\r\n```\r\nI think we could just add a warning of some sort like ""do not use optional groups (which have ? (0 or 1 matches))"" in the start of regex\r\n\r\nAlso, I should\'ve put this error earlier :(\r\n\r\n```\r\n    def test_version_in_package(self, url, package_name, product, version):\r\n        """"""Helper function to get a file (presumed to be a real copy\r\n        of a library, probably from a Linux distribution) and run a\r\n        scan on it.  Any test using this should likely be listed as a\r\n        long test.""""""\r\n        # get file\r\n        tempfile = self.condensed_filepath(url, package_name)\r\n        # new scanner for the new test.\r\n        # self.scanner = VersionScanner(self.cve_scanner, should_extract=True)\r\n        # run the tests\r\n        list_products = set()\r\n        list_versions = set()\r\n        for scan_info in self.scanner.recursive_scan(tempfile):\r\n            if scan_info:\r\n                product_info, file_path = scan_info\r\n                list_products.add(product_info.product)\r\n                list_versions.add(product_info.version)\r\n\r\n        # Make sure the product and version are in the results\r\n        assert (\r\n            product in list_products\r\n        ), f""""""{product} not found in {package_name}.\r\n        The checker signature or url may be incorrect.""""""\r\n>       assert version in list_versions\r\nE       AssertionError: assert \'1.0.8\' in {\'recover\'}\r\n```', 'comment_created': datetime.datetime(2021, 6, 26, 13, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 659179129, 'comment_body': ""So I think it's best to split that regex 2 regex, one without `recover` and one with `recover`"", 'comment_created': datetime.datetime(2021, 6, 26, 15, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BreadGenie', 'type': 'User'}, {'comment_id': 659179628, 'comment_body': 'Yeah, I did that, but it took me a while to figure out why it was happening. So, I think we could maybe add a warning message for this of some kind. Waiting for Mentors thoughts on this.', 'comment_created': datetime.datetime(2021, 6, 26, 15, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 665207008, 'comment_body': '```\r\n        # Make sure the product and version are in the results\r\n        assert (\r\n            product in list_products\r\n        ), f""""""{product} not found in {package_name}.\r\n        The checker signature or url may be incorrect.""""""\r\n>       assert version in list_versions\r\nE       AssertionError: assert \'8.4.1\' in {\'8.3.1\'}\r\n\r\ntest/test_scanner.py:262: AssertionError\r\n```\r\nafter scanning a few files, found that `r""gcc ([0-9]+\\.[0-9]+(\\.[0-9]+)?)""` is not consistent and changed it. \r\nAlso, I was not able to find any appropriate version pattern for debian packages. (I\'ve added a note at top for this)', 'comment_created': datetime.datetime(2021, 7, 7, 9, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}]","[{'commit_sha': '37d2d7df6fe960ee0af4d81fd658b3723b1de913', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd303f2eb6f9dbf2f3f4a03bc2f9d61c9a46a3a30', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '375b4f483fb5bb12b5c0a99bf6cd09a139dfcde6', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eedfbe1d3bd977e9ab96a825df35abe5705e2815', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad6d2b15baff1474d8c04543250aa77c8d3a28f0', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31ca3b0c8b9da54040ec70fbabf7860a3a53e76e', 'committer_username': 'imsahil007', 'committer_name': 'Sahil', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 30, 14, 27, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a5ce74eac7a9cabb0947edbc3684d51f7fbfdc4', 'committer_username': 'imsahil007', 'committer_name': 'Sahil', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 30, 14, 27, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '117e325c154b6ee83aefd7c3eceaf7762488d282', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77e9021da713eaf62819c03f942ec024e70d1868', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2338715fd581967697e866526816976e6d43da35', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6288d5221296ac5ee51f9cc8e18e0846f4e33b22', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '105d2b812bad9f43631b519551ee2a2bd2e12575', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7615dd25c5d3485d64b664d061774a921da8196', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5941d75465382e3facb817e45d84d8739e79746f', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ddbb06f06dea106089693284a80ade566b33b92', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec8a2200e6ac78996bf0fb244a3c120f9f736d77', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ca0c91a8720a1dd8edaf7888ab028d5b469c89a', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31711113c9c38ec3157932e3c2cdf5d4dbddd64d', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bbc0af11d843e758f16b6353398642fc1c043a3', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '227ddf8efc31bbb6f66ce18561676cbd8363438b', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ec7758c8464164c1db38137d06e41d648dc54c', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eca217c945907f144c29da3dd2cfcb07b03a1901', 'committer_username': 'imsahil007', 'committer_name': 'Sahil', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 30, 14, 27, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c0ad81f0bd655dc7dd72f6ba4d6776c9f46bda', 'committer_username': 'imsahil007', 'committer_name': 'Sahil', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 30, 14, 27, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba41bdab629e8bb416e9b0d50dc99629429154f', 'committer_username': 'anthonyharrison', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 11, 22, 16, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b4fbf5216cf1476d3d091a26fdd7b9877d8c8e2', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '167fe4483f07add1473917c3f0f5ed1a0fd06e96', 'committer_username': 'terriko', 'committer_name': 'Terri Oda', 'committer_email': 'terri.oda@intel.com', 'commit_date': datetime.datetime(2012, 2, 15, 8, 43, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e3d9fc99cb7cb4d3b2ed933c7993f3578d6e70', 'committer_username': 'BreadGenie', 'committer_name': 'Suhail', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 19, 14, 6, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7898bc8212cda3691c548952c97c6a5e6d426987', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ca3ac974dfcc8771b0b0d9a0c847b7631c09ab8', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de16a1fb5f45dfcd657d7ae63be6224138ad799b', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30881cccb1df0db195b88042b8550a303697ab3b', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5f02d90c7954e4fe2f1e35e7e483bba8ee69001', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0beedff53df63bb85745502954360b4598149fff', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '324cfe05820f09e20340d570cab041b184ea5889', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '181100c20c53d1ea152ae3f6be9abfd21a14e0de', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86b5510bd3000b9fc956d73456a552381f0b4810', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bddb4e439251cb42aac82f7e2205e065f201a5e', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e1338cacd6c04a3f9e6aa57b033439fa7cca204', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e959dc53d305c641cc8535769a9f65f681ae42ca', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91b70b99fc2754c8a0e6a7bd2ce3270192a42fc2', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3218fe3e4c5dbe64e1d437ef97c08f934ee0736', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1071a9c13fca81e12bb1f80b2f2c81952d5fc3c', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9d3e690fd0f2e90b3ef3445d8f1ee4875f204f2', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9da7ca01c4391f6e36b377b0b29f7f30f5e7e302', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c04135a5897ae6c3c4c4f748b737bfce5935d77', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccbe106bf8c6d844da3ddff0cf8ac4ce1d6a4f2b', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fb1893810336b980903c963cc779f492f158c54', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52720c8b5ba72f6c8b032e5733a9891ac43e027f', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7178f6d19a512626498735fbd2a55212a0fa8707', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef667cd5ece5b1ff05bc69ef1b9ef0fa18851e59', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2e1ccc02db4165d59c0e62be6135e9f497252db', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de50eb078135008f61e7fc69e5f5ecf0f66ff4eb', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f9d3b6e0865aa98e1788fb08062a270cf6a5b7d', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b07a4907089d70fc460e874744542019a6c24b8d', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '412340f7d2ea8dcd71825079012e6ef6db752a5d', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9ffcb9b6be01ac8a52428cd2992c82504e72a1d', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4dbe8d0429d115da3695f6f2150cc4a649821a3', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaed3cf14d4db96854a1ae8bc8a7f6e8f5055875', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}]",Harsh,77539004,,User,,36,,22,27
687225398,feat(checker): libbpg checker,"why are the tests not passing? By manually looking at the files, the strings are present. Here is the output from helper script:

```
(venv39_CVE_Binary_tool) peb@LAPTOP-M375SCBF:/mnt/c/Users/harsh/Downloads$ python3 /mnt/d/git_stuff/cve-bin-tool/cve_bin_tool/helper_script.py libbpg-0.9.8-alt1_1.x86_64.rpm
─────────────────────────────────────────────────────────── LibbpgChecker ───────────────────────────────────────────────────────────
CONTAIN_PATTERNS = [
]
FILENAME_PATTERNS = [
        r""bpgenc"",
]
VERSION_PATTERNS = [
        r""/usr/src/RPM/BUILD/libbpg-0.9.8/jctvc/TLibCommon/TComSlice.h"",
        r""/usr/src/RPM/BUILD/libbpg-0.9.8/jctvc/TLibCommon/SEI.h"",
        r""/usr/src/RPM/BUILD/libbpg-0.9.8/jctvc/TLibCommon/TComYuv.h"",
        r""/usr/src/RPM/BUILD/libbpg-0.9.8/jctvc/TLibCommon/ContextModel3DBuffer.h"",
]
VENDOR_PRODUCT = [('libbpg_project', 'libbpg')]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
```",True,1237,https://api.github.com/repos/intel/cve-bin-tool/pulls/1237,https://github.com/intel/cve-bin-tool/pull/1237,closed,38,0,5,2,4,0,0,0,[],2021-07-10 19:03:50+00:00,2021-07-14 03:05:22+00:00,288092.0,"3 days, 8:01:32",[],"[{'commit_sha': '2972320286df26b5793598c198fe6afb758067aa', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17e464537d9de2a0f657c2ec8b804848722a5fba', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}]",Harsh,77539004,,User,,36,,22,27
687290763,feat(checker): zsh checker,,True,1240,https://api.github.com/repos/intel/cve-bin-tool/pulls/1240,https://github.com/intel/cve-bin-tool/pull/1240,closed,70,0,7,1,2,1,0,0,[],2021-07-11 07:40:14+00:00,2021-07-14 02:59:59+00:00,242385.0,"2 days, 19:19:45","[{'comment_id': 669244532, 'comment_body': ""I will forever be confused that `/` doesn't need to be `\\/` in python (I learned my regexes in perl and other places where / has a function and needs to be escaped.)"", 'comment_created': datetime.datetime(2021, 7, 14, 2, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}]","[{'commit_sha': 'eeef694a99c6db5e2fd519643b7e6f5320813bd5', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}]",Harsh,77539004,,User,,36,,22,27
687302060,feat(checker): dbus checker,,True,1241,https://api.github.com/repos/intel/cve-bin-tool/pulls/1241,https://github.com/intel/cve-bin-tool/pull/1241,closed,67,0,8,2,1,2,0,0,[],2021-07-11 09:15:05+00:00,2021-07-14 03:06:37+00:00,237092.0,"2 days, 17:51:32","[{'comment_id': 667451517, 'comment_body': '`r""dbus""` would pick both patterns right?\nso we might not need `r""libdbus""`', 'comment_created': datetime.datetime(2021, 7, 11, 9, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BreadGenie', 'type': 'User'}, {'comment_id': 667452534, 'comment_body': ""I'll update it now :)"", 'comment_created': datetime.datetime(2021, 7, 11, 9, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}]","[{'commit_sha': '0b0eb151f5597806534b753dca15d99693613fdb', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b1ecb6768cc0976a7c0be871293c72151d6d987', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}]",Harsh,77539004,,User,,36,,22,27
687885691,feat(checker): libical checker,,True,1243,https://api.github.com/repos/intel/cve-bin-tool/pulls/1243,https://github.com/intel/cve-bin-tool/pull/1243,closed,49,0,7,2,0,1,0,0,[],2021-07-12 14:15:19+00:00,2021-07-14 03:09:57+00:00,132878.0,"1 day, 12:54:38","[{'comment_id': 669247574, 'comment_body': 'huh, nice to see some netbsd in our tests.', 'comment_created': datetime.datetime(2021, 7, 14, 3, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}]","[{'commit_sha': '090d861125476ddcc0340de6ac2d914c3120277f', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '537622b98d4ffc7da274ca2202b9a5b81e96e9d6', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}]",Harsh,77539004,,User,,36,,22,27
687886052,feat(checker): liblas checker,,True,1244,https://api.github.com/repos/intel/cve-bin-tool/pulls/1244,https://github.com/intel/cve-bin-tool/pull/1244,closed,57,0,7,1,0,4,0,0,[],2021-07-12 14:15:42+00:00,2021-07-14 18:46:34+00:00,189052.0,"2 days, 4:30:52","[{'comment_id': 669248670, 'comment_body': ""What's pylint triggering on?  We don't really use pylint but should we be conforming to better naming standards here? "", 'comment_created': datetime.datetime(2021, 7, 14, 3, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}, {'comment_id': 669252561, 'comment_body': 'I copied the structure from libjpeg.py and it had those, so I didn\'t removed this. Should I remove it and all the others?\r\n\r\nI tested it now, It only returns a suggestion for ""no class doc-string""\r\n\r\n```\r\n(venv39_CVE_Binary_tool) peb@ooo:cve-bin-tool$ pylint cve_bin_tool/checkers/liblas.py\r\n************* Module cve_bin_tool.checkers.liblas\r\ncve_bin_tool/checkers/liblas.py:14:0: C0115: Missing class docstring (missing-class-docstring)\r\n\r\n-----------------------------------\r\nYour code has been rated at 8.33/10\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 3, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 669862313, 'comment_body': ""Yeah, I think it's a leftover from a previous iteration of the checker files.   Let's remove those in another PR; I'll open an issue so we don't forget.  (You can do it or leave it as an easy bug for someone later; it's really not urgent)"", 'comment_created': datetime.datetime(2021, 7, 14, 18, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}, {'comment_id': 669866247, 'comment_body': 'Filed issue #1247 so we can look at these later.', 'comment_created': datetime.datetime(2021, 7, 14, 18, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}]","[{'commit_sha': '816538cfc0eefd9cf0c088c8ecb2bcd7476a9db6', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}]",Harsh,77539004,,User,,36,,22,27
700911726,feat(checker): libvncserver checker,"### Description
Added libvncserver checker

### Checklist
- [x] Add checker
- [x] All tests passing
- [x] black/isort tests are passing
- [x] updated the template for this checker
- [x] updated the reference links
- [x] added condensed downloads
",True,1296,https://api.github.com/repos/intel/cve-bin-tool/pulls/1296,https://github.com/intel/cve-bin-tool/pull/1296,closed,69,0,8,1,3,3,0,0,[],2021-08-01 13:41:42+00:00,2021-08-03 23:17:14+00:00,207332.0,"2 days, 9:35:32","[{'comment_id': 680523202, 'comment_body': ""Do we really need 5 different packages to test?\r\nMaybe I'm wrong but I think we only add more packages when the version strings are different in different versions or packages (like in systemd).\r\nIMO adding couple packages with different packages and extensions is fine (maybe it's okay now that long tests take less time).\r\n\r\nOfftopic: Glad to have you back here :D "", 'comment_created': datetime.datetime(2021, 8, 1, 14, 56, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BreadGenie', 'type': 'User'}, {'comment_id': 680524726, 'comment_body': '> Offtopic: Glad to have you back here :D\r\n\r\nThanks :D\r\n\r\nI think that the 5 different packages would show that these packages are valid across all different distros, i.e., centos, fedora, debian, etc.\r\n\r\n\r\n ', 'comment_created': datetime.datetime(2021, 8, 1, 15, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'peb-peb', 'type': 'User'}, {'comment_id': 682162294, 'comment_body': ""I like the different distros, but usually we try to also get some different versions at the same time (might as well prove as many things as possible per test).  I'm going to go ahead and approve and merge this as is, but I'll open an issue to suggest that maybe we could swap a few versions in the future."", 'comment_created': datetime.datetime(2021, 8, 3, 23, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'terriko', 'type': 'User'}]","[{'commit_sha': 'eacded67e276f1da22dfbd038803a0b137c882e7', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}]",Harsh,77539004,,User,,36,,22,27
700922201,feat(checker): hdf5 checker,"### Description
Added hdf5 checker

### Checklist
- [x] Add checker
- [x] All tests passing
- [x] black/isort tests are passing
- [x] updated the template for this checker
- [x] updated the reference links
- [x] added condensed downloads
",True,1297,https://api.github.com/repos/intel/cve-bin-tool/pulls/1297,https://github.com/intel/cve-bin-tool/pull/1297,closed,72,0,7,2,1,0,0,0,[],2021-08-01 14:41:02+00:00,2021-08-03 22:45:49+00:00,201887.0,"2 days, 8:04:47",[],"[{'commit_sha': '68a8b2d71306802fd53cb63cc6cfbb03fa4e861e', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dd68e8e9b085fe372eb247888926e05bc123c48', 'committer_username': 'peb-peb', 'committer_name': 'Harsh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 16, 14, 32, 31, tzinfo=datetime.timezone.utc)}]",Harsh,77539004,,User,,36,,22,27

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
165313961,cve-bin-tool,intel/cve-bin-tool,Python,449,1170,29,199,2775,145,30,12,"[{'id': 708809118, 'number': 1333, 'closed': datetime.datetime(2021, 8, 18, 0, 21, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 12, 2, 35, tzinfo=datetime.timezone.utc), 'time_taken': 562711.0, 'time_delta': '6 days, 12:18:31', 'additions': 247, 'deletions': 135, 'state': 'closed'}, {'id': 700922201, 'number': 1297, 'closed': datetime.datetime(2021, 8, 3, 22, 45, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 1, 14, 41, 2, tzinfo=datetime.timezone.utc), 'time_taken': 201887.0, 'time_delta': '2 days, 8:04:47', 'additions': 72, 'deletions': 0, 'state': 'closed'}, {'id': 700911726, 'number': 1296, 'closed': datetime.datetime(2021, 8, 3, 23, 17, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 1, 13, 41, 42, tzinfo=datetime.timezone.utc), 'time_taken': 207332.0, 'time_delta': '2 days, 9:35:32', 'additions': 69, 'deletions': 0, 'state': 'closed'}, {'id': 698030639, 'number': 1284, 'closed': datetime.datetime(2021, 8, 11, 16, 46, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 17, 3, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1294991.0, 'time_delta': '14 days, 23:43:11', 'additions': 370, 'deletions': 28, 'state': 'closed'}, {'id': 691974077, 'number': 1260, 'closed': datetime.datetime(2021, 8, 3, 21, 12, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 18, 54, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1477107.0, 'time_delta': '17 days, 2:18:27', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 691182309, 'number': 1255, 'closed': datetime.datetime(2021, 7, 19, 16, 54, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 16, 4, 16, 17, tzinfo=datetime.timezone.utc), 'time_taken': 304719.0, 'time_delta': '3 days, 12:38:39', 'additions': 10, 'deletions': 5, 'state': 'closed'}, {'id': 690030169, 'number': 1246, 'closed': datetime.datetime(2021, 7, 27, 22, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 14, 15, 48, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1148257.0, 'time_delta': '13 days, 6:57:37', 'additions': 17, 'deletions': 55, 'state': 'closed'}, {'id': 687886052, 'number': 1244, 'closed': datetime.datetime(2021, 7, 14, 18, 46, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 12, 14, 15, 42, tzinfo=datetime.timezone.utc), 'time_taken': 189052.0, 'time_delta': '2 days, 4:30:52', 'additions': 57, 'deletions': 0, 'state': 'closed'}, {'id': 687885691, 'number': 1243, 'closed': datetime.datetime(2021, 7, 14, 3, 9, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 12, 14, 15, 19, tzinfo=datetime.timezone.utc), 'time_taken': 132878.0, 'time_delta': '1 day, 12:54:38', 'additions': 49, 'deletions': 0, 'state': 'closed'}, {'id': 687302060, 'number': 1241, 'closed': datetime.datetime(2021, 7, 14, 3, 6, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 11, 9, 15, 5, tzinfo=datetime.timezone.utc), 'time_taken': 237092.0, 'time_delta': '2 days, 17:51:32', 'additions': 67, 'deletions': 0, 'state': 'closed'}, {'id': 687290763, 'number': 1240, 'closed': datetime.datetime(2021, 7, 14, 2, 59, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 11, 7, 40, 14, tzinfo=datetime.timezone.utc), 'time_taken': 242385.0, 'time_delta': '2 days, 19:19:45', 'additions': 70, 'deletions': 0, 'state': 'closed'}, {'id': 687225398, 'number': 1237, 'closed': datetime.datetime(2021, 7, 14, 3, 5, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 10, 19, 3, 50, tzinfo=datetime.timezone.utc), 'time_taken': 288092.0, 'time_delta': '3 days, 8:01:32', 'additions': 38, 'deletions': 0, 'state': 'closed'}, {'id': 686209373, 'number': 1233, 'closed': datetime.datetime(2021, 7, 8, 18, 26, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 17, 43, 53, tzinfo=datetime.timezone.utc), 'time_taken': 2557.0, 'time_delta': '0:42:37', 'additions': 12, 'deletions': 16, 'state': 'closed'}, {'id': 685307618, 'number': 1228, 'closed': datetime.datetime(2021, 7, 7, 16, 54, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 15, 41, 4, tzinfo=datetime.timezone.utc), 'time_taken': 4401.0, 'time_delta': '1:13:21', 'additions': 13, 'deletions': 11, 'state': 'closed'}, {'id': 684951678, 'number': 1226, 'closed': datetime.datetime(2021, 7, 7, 16, 53, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 7, 49, 22, tzinfo=datetime.timezone.utc), 'time_taken': 32631.0, 'time_delta': '9:03:51', 'additions': 43, 'deletions': 21, 'state': 'closed'}, {'id': 681586041, 'number': 1208, 'closed': datetime.datetime(2021, 7, 6, 23, 50, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 7, 57, 41, tzinfo=datetime.timezone.utc), 'time_taken': 489189.0, 'time_delta': '5 days, 15:53:09', 'additions': 44, 'deletions': 19, 'state': 'closed'}, {'id': 676105818, 'number': 1189, 'closed': datetime.datetime(2021, 8, 18, 16, 31, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 9, 19, 32, tzinfo=datetime.timezone.utc), 'time_taken': 4864301.0, 'time_delta': '56 days, 7:11:41', 'additions': 298, 'deletions': 48, 'state': 'closed'}, {'id': 676052114, 'number': 1188, 'closed': datetime.datetime(2021, 6, 23, 9, 18, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 8, 10, 10, tzinfo=datetime.timezone.utc), 'time_taken': 4109.0, 'time_delta': '1:08:29', 'additions': 196, 'deletions': 4, 'state': 'closed'}, {'id': 673989299, 'number': 1185, 'closed': datetime.datetime(2021, 7, 7, 7, 50, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 20, 7, 34, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1469724.0, 'time_delta': '17 days, 0:15:24', 'additions': 37, 'deletions': 27, 'state': 'closed'}, {'id': 673635505, 'number': 1182, 'closed': datetime.datetime(2021, 6, 30, 0, 18, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 17, 44, 23, tzinfo=datetime.timezone.utc), 'time_taken': 974043.0, 'time_delta': '11 days, 6:34:03', 'additions': 335, 'deletions': 49, 'state': 'closed'}, {'id': 669085881, 'number': 1173, 'closed': datetime.datetime(2021, 6, 23, 16, 47, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 13, 17, 11, 3, tzinfo=datetime.timezone.utc), 'time_taken': 862567.0, 'time_delta': '9 days, 23:36:07', 'additions': 176, 'deletions': 0, 'state': 'closed'}, {'id': 592408386, 'number': 1097, 'closed': datetime.datetime(2021, 3, 24, 19, 3, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 13, 18, 51, 29, tzinfo=datetime.timezone.utc), 'time_taken': 951138.0, 'time_delta': '11 days, 0:12:18', 'additions': 44, 'deletions': 0, 'state': 'closed'}, {'id': 577089256, 'number': 1080, 'closed': datetime.datetime(2021, 2, 24, 1, 21, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 21, 10, 43, 8, tzinfo=datetime.timezone.utc), 'time_taken': 225484.0, 'time_delta': '2 days, 14:38:04', 'additions': 15, 'deletions': 15, 'state': 'closed'}, {'id': 576850925, 'number': 1078, 'closed': datetime.datetime(2021, 3, 10, 12, 6, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 20, 2, 46, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1588796.0, 'time_delta': '18 days, 9:19:56', 'additions': 39, 'deletions': 0, 'state': 'closed'}, {'id': 575401572, 'number': 1073, 'closed': datetime.datetime(2021, 2, 18, 16, 48, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 18, 5, 16, 20, tzinfo=datetime.timezone.utc), 'time_taken': 41551.0, 'time_delta': '11:32:31', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 564673825, 'number': 1067, 'closed': datetime.datetime(2021, 2, 3, 0, 45, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 31, 15, 21, 58, tzinfo=datetime.timezone.utc), 'time_taken': 206608.0, 'time_delta': '2 days, 9:23:28', 'additions': 14, 'deletions': 1, 'state': 'closed'}, {'id': 562285354, 'number': 1056, 'closed': datetime.datetime(2021, 1, 29, 3, 4, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 27, 7, 12, 12, tzinfo=datetime.timezone.utc), 'time_taken': 157924.0, 'time_delta': '1 day, 19:52:04', 'additions': 36, 'deletions': 0, 'state': 'closed'}, {'id': 561864489, 'number': 1053, 'closed': datetime.datetime(2021, 1, 26, 16, 40, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 26, 15, 33, 8, tzinfo=datetime.timezone.utc), 'time_taken': 4068.0, 'time_delta': '1:07:48', 'additions': 43, 'deletions': 0, 'state': 'closed'}, {'id': 560334202, 'number': 1048, 'closed': datetime.datetime(2021, 1, 25, 18, 18, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 23, 6, 34, 32, tzinfo=datetime.timezone.utc), 'time_taken': 215017.0, 'time_delta': '2 days, 11:43:37', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 559955252, 'number': 1046, 'closed': datetime.datetime(2021, 1, 23, 6, 31, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 22, 13, 12, 35, tzinfo=datetime.timezone.utc), 'time_taken': 62326.0, 'time_delta': '17:18:46', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 557329704, 'number': 1028, 'closed': datetime.datetime(2021, 1, 20, 19, 1, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 19, 10, 31, 20, tzinfo=datetime.timezone.utc), 'time_taken': 117011.0, 'time_delta': '1 day, 8:30:11', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
